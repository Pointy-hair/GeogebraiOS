/** * This is *not* a general polynomial parser, but for a special type of input from Singular or giac. * * @author Simon Weitzhofer <simon@geogebra.org> * Comments by Zoltan Kovacs <zoltan@geogebra.org> * * For a proper input please have a look at createEliminateFactorizedScript() in Polynomial.java * --- the input is the output from Singular. Also the same implementation for giac can be * found in CASgiac.java. * * This .jj file will create several extra .java files in this directory. */options{}PARSER_BEGIN(PolynomialParser)package org.geogebra.common.kernel.prover.polynomial;import java.util.HashMap;import java.util.HashSet;import java.util.Map;import java.util.Set;import java.util.Iterator;public class PolynomialParser{  public static Polynomial parsePolynomial(String string, Set < Variable > variables) throws ParseException  {    Iterator < Variable > variablesIterator = variables.iterator();    HashMap < String, Variable > variableMap = new HashMap < String, Variable > ();    while (variablesIterator.hasNext())    {      Variable variable = variablesIterator.next();      variableMap.put(variable.getName(), variable);    }    PolynomialParser parser = new PolynomialParser(new java.io.StringReader(string));    return parser.polynomialStartingPoint(variableMap);  }  public static Set < Polynomial > parsePolynomialFactors(String string, Set < Variable > variables) throws ParseException  {    Iterator < Variable > variablesIterator = variables.iterator();    HashMap < String, Variable > variableMap = new HashMap < String, Variable > ();    while (variablesIterator.hasNext())    {      Variable variable = variablesIterator.next();      variableMap.put(variable.getName(), variable);    }    PolynomialParser parser = new PolynomialParser(new java.io.StringReader(string));    return parser.polynomialFactorsStartingPoint(variableMap);  }    public static Set<Set < Polynomial > > parseFactoredPolynomialSet(String string, Set <Variable > variables) throws ParseException  {    Iterator < Variable > variablesIterator = variables.iterator();    HashMap < String, Variable > variableMap = new HashMap < String, Variable > ();    while (variablesIterator.hasNext())    {      Variable variable = variablesIterator.next();      variableMap.put(variable.getName(), variable);    }    PolynomialParser parser = new PolynomialParser(new java.io.StringReader(string));    return parser.polynomialFactoredSetStartingPoint(variableMap);  }}PARSER_END(PolynomialParser)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{  < NUMBER : ([ "0"-"9" ])+ >}TOKEN :{  < VARIABLE : "v" <NUMBER > >}TOKEN :{  < STARTFACTLIST : "[1]:" >| < ANYFACTLIST : "[" < NUMBER > "]:" >}TOKEN :{  < INDEXPOLY : "_[" < NUMBER > "]=" >| < COMMA : "," >}TOKEN : //OPERATORS{  < PLUS : "+" >| < MINUS : "-" >| < TIMES : "*" >| < POWER : "^" >}Set<Set < Polynomial >> polynomialFactoredSetStartingPoint(HashMap <String, Variable > variables):{  Set <Set <Polynomial > > factoredPolynomials = new HashSet<Set <Polynomial > > ();  Set <Polynomial > factors;}  {        < STARTFACTLIST >    factors = polynomialFactorsStartingPoint(variables)    {      factoredPolynomials.add(factors);    }    (      < ANYFACTLIST >    factors = polynomialFactorsStartingPoint(variables)    {      factoredPolynomials.add(factors);    }  )*  {    return factoredPolynomials;  }}  Set < Polynomial > polynomialFactorsStartingPoint(HashMap < String, Variable > variables) :{  Set < Polynomial > polynomials = new HashSet < Polynomial > ();  Polynomial poly;}{  < STARTFACTLIST >  (    < INDEXPOLY >    poly = polynomial(variables)    {      if (poly.isOne())      {      } else polynomials.add(poly);    }  )+  < ANYFACTLIST > < NUMBER > (< COMMA > < NUMBER >)*  {    return polynomials;  }}Polynomial polynomialStartingPoint(HashMap < String, Variable > variables) :{  Polynomial p;}{  p = polynomial(variables)  {    return p;  }}Polynomial polynomial(HashMap < String, Variable > variables) :{  Polynomial poly;  Polynomial t;}{  poly = term(variables)  (    (      < PLUS > t = term(variables)      {        poly = poly.add(t);      }    )  |    (      < MINUS > t = term(variables)      {        poly = poly.subtract(t);      }    )  )*  {    return poly;  }}Polynomial term(HashMap < String, Variable > variables) :{  Term t = new Term();  Term singleTerm;  Token numberToken;  int number = 1;}/**x³*y² or x³*y² or 3*/{  //LOOKAHEAD(2)  (< MINUS >  {    number = - 1;  }  )?  (    (      numberToken = < NUMBER >      {        number = number * Integer.parseInt(numberToken.image);      }      (        < TIMES > singleTerm = power(variables)        {          t = t.times(singleTerm);        }      )*    )  |    (      singleTerm = power(variables)      {        t = t.times(singleTerm);      }      (        < TIMES > singleTerm = power(variables)        {          t = t.times(singleTerm);        }      )*    )  )  {    return new Polynomial(number, t);  }}Term power(HashMap < String, Variable > variables) :{  Variable coefficient;  Token numberToken;  int number = 1;}{  coefficient = variable(variables)  (    < POWER > numberToken = < NUMBER >    {      number = Integer.parseInt(numberToken.image);    }  )?  {    return new Term(coefficient, number);  }}Variable variable(HashMap < String, Variable > variables) :{  Token variable;  Variable var;}{  variable = < VARIABLE >  {    if ((var = variables.get(variable.toString())) != null) return var;    throw new ParseException();  }}