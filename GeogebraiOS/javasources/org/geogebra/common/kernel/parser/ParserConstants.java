/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package org.geogebra.common.kernel.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ASSIGNMENT = 5;
  /** RegularExpression Id. */
  int DELAYED_ASSIGNMENT = 6;
  /** RegularExpression Id. */
  int VERTICAL_BAR = 7;
  /** RegularExpression Id. */
  int NOT = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int AND = 10;
  /** RegularExpression Id. */
  int IMPLICATION = 11;
  /** RegularExpression Id. */
  int EQUAL_BOOLEAN = 12;
  /** RegularExpression Id. */
  int NOT_EQUAL = 13;
  /** RegularExpression Id. */
  int IS_ELEMENT_OF = 14;
  /** RegularExpression Id. */
  int IS_SUBSET_OF = 15;
  /** RegularExpression Id. */
  int IS_SUBSET_OF_STRICT = 16;
  /** RegularExpression Id. */
  int SET_DIFFERENCE = 17;
  /** RegularExpression Id. */
  int LESS = 18;
  /** RegularExpression Id. */
  int GREATER = 19;
  /** RegularExpression Id. */
  int LESS_EQUAL = 20;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 21;
  /** RegularExpression Id. */
  int PARALLEL = 22;
  /** RegularExpression Id. */
  int PERPENDICULAR = 23;
  /** RegularExpression Id. */
  int EQUAL = 24;
  /** RegularExpression Id. */
  int PLUS = 25;
  /** RegularExpression Id. */
  int MINUS = 26;
  /** RegularExpression Id. */
  int SUPERSCRIPT_MINUS = 27;
  /** RegularExpression Id. */
  int POWER = 28;
  /** RegularExpression Id. */
  int MULTIPLY = 29;
  /** RegularExpression Id. */
  int VECTORPRODUCT = 30;
  /** RegularExpression Id. */
  int DIVIDE = 31;
  /** RegularExpression Id. */
  int FACTORIAL = 32;
  /** RegularExpression Id. */
  int UNDEFINED = 33;
  /** RegularExpression Id. */
  int POWERN = 34;
  /** RegularExpression Id. */
  int INDEXDIGIT = 35;
  /** RegularExpression Id. */
  int PI = 36;
  /** RegularExpression Id. */
  int EULER_GAMMA = 37;
  /** RegularExpression Id. */
  int E = 38;
  /** RegularExpression Id. */
  int IMAGINARY = 39;
  /** RegularExpression Id. */
  int DEGREE = 40;
  /** RegularExpression Id. */
  int INFINITY = 41;
  /** RegularExpression Id. */
  int RAD = 42;
  /** RegularExpression Id. */
  int DERIVATIVE = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int FALSE = 45;
  /** RegularExpression Id. */
  int DECIMAL_POINT = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int VARX = 48;
  /** RegularExpression Id. */
  int VARY = 49;
  /** RegularExpression Id. */
  int VARZ = 50;
  /** RegularExpression Id. */
  int FLOAT = 51;
  /** RegularExpression Id. */
  int EFLOAT = 52;
  /** RegularExpression Id. */
  int PERCENTAGE = 53;
  /** RegularExpression Id. */
  int INTEGER = 54;
  /** RegularExpression Id. */
  int DIGIT = 55;
  /** RegularExpression Id. */
  int SPREADSHEET_LABEL = 56;
  /** RegularExpression Id. */
  int LABEL = 57;
  /** RegularExpression Id. */
  int INDEX = 58;
  /** RegularExpression Id. */
  int LETTER = 59;
  /** RegularExpression Id. */
  int X_FUNC = 60;
  /** RegularExpression Id. */
  int Y_FUNC = 61;
  /** RegularExpression Id. */
  int Z_FUNC = 62;
  /** RegularExpression Id. */
  int RANDOM_FUNC = 63;
  /** RegularExpression Id. */
  int POLAR_SEPARATOR = 64;
  /** RegularExpression Id. */
  int SQRT_SHORT = 65;
  /** RegularExpression Id. */
  int FUNCTION_LABEL = 66;
  /** RegularExpression Id. */
  int FUNCTION_POWER_LABEL = 67;
  /** RegularExpression Id. */
  int TEXT = 68;
  /** RegularExpression Id. */
  int CHAR = 69;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<ASSIGNMENT>",
    "\"::=\"",
    "\"|\"",
    "\"\\u00ac\"",
    "<OR>",
    "<AND>",
    "<IMPLICATION>",
    "<EQUAL_BOOLEAN>",
    "<NOT_EQUAL>",
    "\"\\u2208\"",
    "\"\\u2286\"",
    "\"\\u2282\"",
    "\"\\\\\"",
    "\"<\"",
    "\">\"",
    "<LESS_EQUAL>",
    "<GREATER_EQUAL>",
    "\"\\u2225\"",
    "\"\\u22a5\"",
    "<EQUAL>",
    "\"+\"",
    "<MINUS>",
    "\"\\u207b\"",
    "<POWER>",
    "<MULTIPLY>",
    "\"\\u2297\"",
    "<DIVIDE>",
    "\"!\"",
    "<UNDEFINED>",
    "<POWERN>",
    "<INDEXDIGIT>",
    "<PI>",
    "<EULER_GAMMA>",
    "\"\\u212f\"",
    "\"\\u03af\"",
    "<DEGREE>",
    "<INFINITY>",
    "\"rad\"",
    "\"\\\'\"",
    "<TRUE>",
    "<FALSE>",
    "<DECIMAL_POINT>",
    "<COMMA>",
    "\"x\"",
    "\"y\"",
    "\"z\"",
    "<FLOAT>",
    "<EFLOAT>",
    "<PERCENTAGE>",
    "<INTEGER>",
    "<DIGIT>",
    "<SPREADSHEET_LABEL>",
    "<LABEL>",
    "<INDEX>",
    "<LETTER>",
    "<X_FUNC>",
    "<Y_FUNC>",
    "<Z_FUNC>",
    "\"random()\"",
    "<POLAR_SEPARATOR>",
    "\"\\u221a\"",
    "<FUNCTION_LABEL>",
    "<FUNCTION_POWER_LABEL>",
    "<TEXT>",
    "<CHAR>",
    "\":\"",
    "\")\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
  };

}
