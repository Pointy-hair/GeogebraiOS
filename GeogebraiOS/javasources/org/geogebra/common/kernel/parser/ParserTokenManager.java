/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package org.geogebra.common.kernel.parser;
import org.geogebra.common.kernel.Construction;
import org.geogebra.common.kernel.arithmetic.*;
import org.geogebra.common.kernel.arithmetic3D.MyVec3DNode;
import org.geogebra.common.kernel.arithmetic3D.Vector3DValue;
import org.geogebra.common.kernel.commands.Commands;
import org.geogebra.common.kernel.geos.GeoCasCell;
import org.geogebra.common.kernel.geos.GeoElement;
import org.geogebra.common.kernel.geos.GeoElementSpreadsheet;
import org.geogebra.common.kernel.geos.GeoFunctionNVar;
import org.geogebra.common.kernel.geos.GeoNumeric;
import org.geogebra.common.kernel.geos.GeoVec2D;
import org.geogebra.common.kernel.parser.ParserInterface;
import org.geogebra.common.kernel.StringTemplate;
import org.geogebra.common.main.MyError;
import org.geogebra.common.main.Localization;
import org.geogebra.common.main.MyParseError;
import org.geogebra.common.main.BracketsError;
import org.geogebra.common.util.StringUtil;
import org.geogebra.common.util.Unicode;
import org.geogebra.common.util.debug.Log;
import org.geogebra.common.kernel.Kernel;
import org.geogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac;
import org.geogebra.common.main.App;
import org.geogebra.common.plugin.Operation;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Vector;

/** Token Manager. */
@SuppressWarnings("unused")public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000000000000L) != 0L)
            return 96;
         if ((active0 & 0x80L) != 0L)
            return 3;
         if ((active0 & 0x80000L) != 0L)
            return 19;
         if ((active0 & 0x4000000000L) != 0L)
            return 62;
         if ((active0 & 0x8000000000L) != 0L)
            return 181;
         if ((active0 & 0x40L) != 0L || (active1 & 0x40L) != 0L)
            return 0;
         if ((active0 & 0x8000000L) != 0L)
            return 45;
         if ((active0 & 0x100000000L) != 0L)
            return 15;
         if ((active0 & 0x4000000000000L) != 0L)
            return 112;
         if ((active0 & 0x8000040000000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 182;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 104;
         if ((active0 & 0x40000L) != 0L)
            return 129;
         return -1;
      case 1:
         if ((active0 & 0x8000040000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 183;
         }
         return -1;
      case 2:
         if ((active0 & 0x40000000000L) != 0L)
            return 183;
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 183;
         }
         return -1;
      case 3:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
            return 183;
         }
         return -1;
      case 4:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 183;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 183;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 32, 15);
      case 39:
         return jjStopAtPos(0, 43);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 71);
      case 43:
         return jjStopAtPos(0, 25);
      case 58:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 60:
         return jjStartNfaWithStates_0(0, 18, 129);
      case 62:
         return jjStartNfaWithStates_0(0, 19, 19);
      case 92:
         return jjStopAtPos(0, 17);
      case 93:
         return jjStopAtPos(0, 72);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000040000000000L);
      case 120:
         return jjStartNfaWithStates_0(0, 48, 96);
      case 121:
         return jjStartNfaWithStates_0(0, 49, 104);
      case 122:
         return jjStartNfaWithStates_0(0, 50, 112);
      case 123:
         return jjStopAtPos(0, 73);
      case 124:
         return jjStartNfaWithStates_0(0, 7, 3);
      case 125:
         return jjStopAtPos(0, 74);
      case 172:
         return jjStopAtPos(0, 8);
      case 943:
         return jjStartNfaWithStates_0(0, 39, 181);
      case 8315:
         return jjStartNfaWithStates_0(0, 27, 45);
      case 8495:
         return jjStartNfaWithStates_0(0, 38, 62);
      case 8712:
         return jjStopAtPos(0, 14);
      case 8730:
         return jjStopAtPos(0, 65);
      case 8741:
         return jjStopAtPos(0, 22);
      case 8834:
         return jjStopAtPos(0, 16);
      case 8838:
         return jjStopAtPos(0, 15);
      case 8855:
         return jjStopAtPos(0, 30);
      case 8869:
         return jjStopAtPos(0, 23);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000040000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 183);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(7, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x100000L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x10000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x8000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x40000L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x80000000L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x100000000L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x80000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x40000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x0L, 0x40L
};
static final long[] jjbitVec11 = {
   0x2000000L, 0x0L, 0x0L, 0x20L
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x0L, 0x80000000000000L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x0L, 0x2000000000000000L
};
static final long[] jjbitVec14 = {
   0x0L, 0x800000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x0L, 0x0L, 0x20c000000000000L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x3f1000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec17 = {
   0x0L, 0x0L, 0x0L, 0x1L
};
static final long[] jjbitVec18 = {
   0x0L, 0x0L, 0x8000000000000L, 0x0L
};
static final long[] jjbitVec19 = {
   0x800000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec20 = {
   0x0L, 0x0L, 0x401000000000000L, 0x0L
};
static final long[] jjbitVec21 = {
   0x0L, 0x0L, 0x0L, 0x4000000L
};
static final long[] jjbitVec22 = {
   0x40000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec23 = {
   0x1000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0x200000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec25 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec27 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec28 = {
   0x0L, 0x80000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec29 = {
   0x1e00L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec31 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec32 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec33 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec34 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec35 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x0L, 0x0L, 0x0L, 0x3ff00000000L
};
static final long[] jjbitVec37 = {
   0x3ff0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec38 = {
   0x0L, 0x3ff0000L, 0x3ff000000000000L, 0x0L
};
static final long[] jjbitVec39 = {
   0x0L, 0x3ff03ffL, 0x0L, 0x0L
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec41 = {
   0x600007fffffc0L, 0xffffffffffffc000L, 0xffffffffffffffffL, 0x13000000007fffffL
};
static final long[] jjbitVec42 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffff0L
};
static final long[] jjbitVec44 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec45 = {
   0x0L, 0x0L, 0xfffffffffffe0000L, 0xfffffffffffffL
};
static final long[] jjbitVec46 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffff0003L, 0x3ffffffffffffffL
};
static final long[] jjbitVec47 = {
   0xfffe000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec48 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec49 = {
   0x0L, 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec50 = {
   0xffffffffffffffffL, 0xffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec51 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec52 = {
   0xffffffffe0000000L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec53 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec54 = {
   0xfffffffffff80000L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec55 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec57 = {
   0x0L, 0xffffffc000000000L, 0xfffffffe3fffffffL, 0x1fffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 181;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 183:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(168, 151); }
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(162); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  else if (curChar == 36)
                     { jjCheckNAdd(150); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(147); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(147); }
                  break;
               case 129:
                  if (curChar == 61)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 181:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 112:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 40)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  else if (curChar == 36)
                     { jjCheckNAdd(150); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(147); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(147); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAddStates(18, 26); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(27, 35); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAddStates(36, 43); }
                  }
                  else if (curChar == 60)
                     { jjAddStates(44, 45); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(117, 118); }
                  else if (curChar == 59)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 61)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 63)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (curChar == 36)
                     { jjAddStates(46, 48); }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 182:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  else if (curChar == 36)
                     { jjCheckNAdd(150); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(147); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(147); }
                  break;
               case 104:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 40)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  else if (curChar == 36)
                     { jjCheckNAdd(150); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(147); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(147); }
                  break;
               case 96:
                  if ((0x3ff009000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 40)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  else if (curChar == 36)
                     { jjCheckNAdd(154); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  else if (curChar == 36)
                     { jjCheckNAdd(150); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(147); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(147); }
                  break;
               case 0:
                  if (curChar == 61 && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 38 && kind > 10)
                     kind = 10;
                  break;
               case 7:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 62 && kind > 11)
                     kind = 11;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 61 && kind > 12)
                     kind = 12;
                  break;
               case 13:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 61 && kind > 13)
                     kind = 13;
                  break;
               case 16:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 61 && kind > 21)
                     kind = 21;
                  break;
               case 20:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
               case 23:
                  if (curChar == 61 && kind > 24)
                     kind = 24;
                  break;
               case 24:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 45 && kind > 26)
                     kind = 26;
                  break;
               case 27:
                  if (curChar == 42 && kind > 28)
                     kind = 28;
                  break;
               case 28:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 42 && kind > 29)
                     kind = 29;
                  break;
               case 30:
                  if (curChar == 47 && kind > 31)
                     kind = 31;
                  break;
               case 31:
                  if (curChar == 63 && kind > 33)
                     kind = 33;
                  break;
               case 90:
                  if (curChar == 44 && kind > 47)
                     kind = 47;
                  break;
               case 98:
                  if (curChar == 40 && kind > 60)
                     kind = 60;
                  break;
               case 106:
                  if (curChar == 40 && kind > 61)
                     kind = 61;
                  break;
               case 114:
                  if (curChar == 40 && kind > 62)
                     kind = 62;
                  break;
               case 115:
                  if (curChar == 59 && kind > 64)
                     kind = 64;
                  break;
               case 116:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(117, 118); }
                  break;
               case 117:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(117, 118); }
                  break;
               case 118:
                  if (curChar == 34 && kind > 68)
                     kind = 68;
                  break;
               case 128:
                  if (curChar == 60)
                     { jjAddStates(44, 45); }
                  break;
               case 130:
                  if (curChar == 61 && kind > 20)
                     kind = 20;
                  break;
               case 131:
                  if (curChar != 46)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(36, 43); }
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 133:
                  if (curChar != 46)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 135:
                  if (curChar == 46)
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 137:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(138); }
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(138); }
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(52, 54); }
                  break;
               case 140:
                  if (curChar == 46)
                     { jjCheckNAddStates(52, 54); }
                  break;
               case 141:
                  if (curChar == 37 && kind > 53)
                     kind = 53;
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(18, 26); }
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(143); }
                  break;
               case 144:
                  if (curChar == 36)
                     { jjAddStates(46, 48); }
                  break;
               case 146:
                  if (curChar == 36)
                     { jjCheckNAdd(147); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(147); }
                  break;
               case 149:
                  if (curChar == 36)
                     { jjCheckNAdd(150); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 151:
                  if (curChar == 40 && kind > 66)
                     kind = 66;
                  break;
               case 153:
                  if (curChar == 36)
                     { jjCheckNAdd(154); }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 157:
                  if (curChar == 40 && kind > 67)
                     kind = 67;
                  break;
               case 159:
                  if (curChar != 36)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(27, 35); }
                  break;
               case 161:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(162); }
                  break;
               case 162:
                  if ((0x3ff009000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(162); }
                  break;
               case 164:
                  { jjAddStates(55, 56); }
                  break;
               case 167:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(168, 151); }
                  break;
               case 168:
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(168, 151); }
                  break;
               case 170:
                  { jjAddStates(57, 58); }
                  break;
               case 173:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 174:
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 176:
                  { jjAddStates(59, 60); }
                  break;
               case 178:
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 179:
                  if ((0x3ff009000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 180:
                  if ((0x3ff009000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 183:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(61, 62); }
                  else if (curChar == 91)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(63, 64); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(65, 66); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(168, 151); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(162); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 181:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(61, 62); }
                  else if (curChar == 91)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(63, 64); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(65, 66); }
                  break;
               case 112:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(61, 62); }
                  else if (curChar == 91)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(63, 64); }
                  else if (curChar == 91)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(65, 66); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 111;
                  else if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if (curChar == 122)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(27, 35); }
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(79, 87); }
                  if (curChar == 105)
                     { jjAddStates(88, 89); }
                  else if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 112;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 104;
                  else if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 96;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 88;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 72;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 80)
                     { jjCheckNAdd(46); }
                  else if (curChar == 112)
                     { jjCheckNAdd(46); }
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 39;
                  if (curChar == 122)
                     { jjCheckNAddStates(76, 78); }
                  else if (curChar == 121)
                     { jjCheckNAddStates(90, 92); }
                  else if (curChar == 120)
                     { jjCheckNAddStates(93, 95); }
                  break;
               case 182:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(61, 62); }
                  else if (curChar == 91)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(63, 64); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(65, 66); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 104:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(61, 62); }
                  else if (curChar == 91)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(63, 64); }
                  else if (curChar == 91)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(65, 66); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 103;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if (curChar == 121)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 96:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 95)
                     { jjAddStates(61, 62); }
                  else if (curChar == 91)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 95)
                     { jjAddStates(63, 64); }
                  else if (curChar == 91)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 95)
                     { jjAddStates(65, 66); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 95;
                  else if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 96;
                  if (curChar == 120)
                     { jjCheckNAddStates(93, 95); }
                  break;
               case 3:
                  if (curChar == 124 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 26:
                  if (curChar == 94 && kind > 28)
                     kind = 28;
                  break;
               case 32:
                  if (curChar == 100 && kind > 33)
                     kind = 33;
                  break;
               case 33:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 78 && kind > 33)
                     kind = 33;
                  break;
               case 42:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 46:
                  if (curChar == 105 && kind > 36)
                     kind = 36;
                  break;
               case 47:
                  if (curChar == 112)
                     { jjCheckNAdd(46); }
                  break;
               case 48:
                  if (curChar == 80)
                     { jjCheckNAdd(46); }
                  break;
               case 50:
                  if (curChar == 97 && kind > 37)
                     kind = 37;
                  break;
               case 51:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 66:
                  if (curChar == 121 && kind > 41)
                     kind = 41;
                  break;
               case 67:
               case 122:
                  if (curChar == 116)
                     { jjCheckNAdd(66); }
                  break;
               case 68:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101 && kind > 44)
                     kind = 44;
                  break;
               case 75:
               case 78:
                  if (curChar == 117)
                     { jjCheckNAdd(74); }
                  break;
               case 76:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 79:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101 && kind > 45)
                     kind = 45;
                  break;
               case 82:
               case 86:
                  if (curChar == 115)
                     { jjCheckNAdd(81); }
                  break;
               case 83:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 91:
                  if (curChar == 120)
                     { jjCheckNAddStates(93, 95); }
                  break;
               case 92:
                  if (curChar == 100)
                     { jjCheckNAddStates(93, 95); }
                  break;
               case 93:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 97:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 91 && kind > 60)
                     kind = 60;
                  break;
               case 99:
                  if (curChar == 121)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 100:
                  if (curChar == 100)
                     { jjCheckNAddStates(90, 92); }
                  break;
               case 101:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 91 && kind > 61)
                     kind = 61;
                  break;
               case 107:
                  if (curChar == 122)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 108:
                  if (curChar == 100)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 109:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 91 && kind > 62)
                     kind = 62;
                  break;
               case 117:
                  { jjAddStates(96, 97); }
                  break;
               case 119:
                  if (curChar == 105)
                     { jjAddStates(88, 89); }
                  break;
               case 120:
                  if (curChar == 102 && kind > 41)
                     kind = 41;
                  break;
               case 121:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 136:
                  if (curChar == 69)
                     { jjAddStates(98, 99); }
                  break;
               case 145:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 148:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 151:
                  if (curChar == 91 && kind > 66)
                     kind = 66;
                  break;
               case 152:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  break;
               case 157:
                  if (curChar == 91 && kind > 67)
                     kind = 67;
                  break;
               case 158:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(79, 87); }
                  break;
               case 159:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(27, 35); }
                  break;
               case 160:
                  if (curChar == 95)
                     { jjAddStates(65, 66); }
                  break;
               case 161:
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(162); }
                  break;
               case 162:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(162); }
                  break;
               case 163:
                  if (curChar == 123)
                     { jjCheckNAdd(164); }
                  break;
               case 164:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(164, 165); }
                  break;
               case 165:
                  if (curChar != 125)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(162); }
                  break;
               case 166:
                  if (curChar == 95)
                     { jjAddStates(63, 64); }
                  break;
               case 167:
                  { jjCheckNAddTwoStates(168, 151); }
                  break;
               case 168:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(168, 151); }
                  break;
               case 169:
                  if (curChar == 123)
                     { jjCheckNAdd(170); }
                  break;
               case 170:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(170, 171); }
                  break;
               case 171:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(168, 151); }
                  break;
               case 172:
                  if (curChar == 95)
                     { jjAddStates(61, 62); }
                  break;
               case 173:
                  { jjCheckNAddStates(12, 14); }
                  break;
               case 174:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 175:
                  if (curChar == 123)
                     { jjCheckNAdd(176); }
                  break;
               case 176:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 177:
                  if (curChar == 125)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 178:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 179:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 180:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 183:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(162); }
                  }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(168, 151); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(12, 14); }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(156); }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(156, 157); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 181:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(156); }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(156, 157); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 112:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(156); }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(156, 157); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(45); }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(45); }
                  }
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 62;
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                     { jjCheckNAddStates(36, 43); }
                  }
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAddStates(18, 26); }
                  }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(27, 35); }
                  }
                  break;
               case 182:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(156); }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(156, 157); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 104:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(156); }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(156, 157); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 96:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(156); }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(156, 157); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 9)
                     kind = 9;
                  break;
               case 8:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 11:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 11)
                     kind = 11;
                  break;
               case 14:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 17:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               case 18:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               case 21:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 21)
                     kind = 21;
                  break;
               case 25:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 26)
                     kind = 26;
                  break;
               case 26:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 29:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 29)
                     kind = 29;
                  break;
               case 30:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 31)
                     kind = 31;
                  break;
               case 31:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 33)
                     kind = 33;
                  break;
               case 44:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if (!jjCanMove_14(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(45); }
                  break;
               case 49:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2) && kind > 36)
                     kind = 36;
                  break;
               case 61:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2) && kind > 37)
                     kind = 37;
                  break;
               case 63:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2) && kind > 40)
                     kind = 40;
                  break;
               case 65:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               case 90:
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2) && kind > 47)
                     kind = 47;
                  break;
               case 115:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2) && kind > 64)
                     kind = 64;
                  break;
               case 117:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     { jjAddStates(96, 97); }
                  break;
               case 131:
                  if (!jjCanMove_23(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(36, 43); }
                  break;
               case 132:
                  if (!jjCanMove_24(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 133:
                  if (!jjCanMove_23(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 134:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 135:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 137:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(138); }
                  break;
               case 138:
                  if (!jjCanMove_24(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(138); }
                  break;
               case 139:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(52, 54); }
                  break;
               case 140:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(52, 54); }
                  break;
               case 142:
                  if (!jjCanMove_24(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(18, 26); }
                  break;
               case 143:
                  if (!jjCanMove_24(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(143); }
                  break;
               case 155:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(156); }
                  break;
               case 156:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(156, 157); }
                  break;
               case 159:
                  if (!jjCanMove_25(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(27, 35); }
                  break;
               case 161:
                  if (!jjCanMove_22(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(162); }
                  break;
               case 162:
                  if (!jjCanMove_25(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(162); }
                  break;
               case 164:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     { jjAddStates(55, 56); }
                  break;
               case 167:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(168, 151); }
                  break;
               case 168:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(168, 151); }
                  break;
               case 170:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     { jjAddStates(57, 58); }
                  break;
               case 173:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 174:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 176:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     { jjAddStates(59, 60); }
                  break;
               case 178:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 179:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 180:
                  if (!jjCanMove_25(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 181 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   160, 162, 180, 166, 168, 151, 179, 172, 174, 155, 156, 178, 174, 155, 156, 154, 
   155, 156, 132, 133, 134, 135, 136, 139, 140, 141, 143, 160, 166, 151, 172, 155, 
   156, 178, 179, 180, 132, 133, 134, 135, 136, 139, 140, 141, 129, 130, 145, 148, 
   152, 134, 135, 136, 139, 140, 141, 164, 165, 170, 171, 176, 177, 173, 175, 167, 
   169, 161, 163, 152, 153, 154, 148, 149, 150, 145, 146, 147, 107, 113, 114, 145, 
   146, 147, 148, 149, 150, 152, 153, 154, 121, 127, 99, 105, 106, 91, 97, 98, 
   117, 118, 137, 138, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 34:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 2:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec13[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec14[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec16[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec17[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec18[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_17(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec19[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_18(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec21[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_19(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec22[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_20(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec23[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_21(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec24[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_22(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec27[i2] & l2) != 0L);
      default :
         if ((jjbitVec25[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_23(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec28[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_24(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec29[i1] & l1) != 0L)
            if ((jjbitVec30[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_25(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 247:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec57[i2] & l2) != 0L);
      default :
         if ((jjbitVec41[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\72\72\75", "\174", "\254", null, null, 
null, null, null, "\u2208", "\u2286", "\u2282", "\134", "\74", "\76", null, null, 
"\u2225", "\u22a5", null, "\53", null, "\u207b", null, null, "\u2297", null, "\41", null, 
null, null, null, null, "\u212f", "\u03af", null, null, "\162\141\144", "\47", null, 
null, null, null, "\170", "\171", "\172", null, null, null, null, null, null, null, 
null, null, null, null, null, "\162\141\156\144\157\155\50\51", null, "\u221a", null, 
null, null, null, "\72", "\51", "\135", "\173", "\175", "\50", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 181; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xf37ffff7ffffffe1L, 0xfdfL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[181];
    static private final int[] jjstateSet = new int[2 * 181];

    
    static protected char curChar;
}
