//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/linearref/LengthLocationMap.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/linearref/LengthLocationMap.h"
#include "com/vividsolutions/jts/linearref/LinearIterator.h"
#include "com/vividsolutions/jts/linearref/LinearLocation.h"

@interface ComVividsolutionsJtsLinearrefLengthLocationMap () {
 @public
  ComVividsolutionsJtsGeomGeometry *linearGeom_;
}

- (ComVividsolutionsJtsLinearrefLinearLocation *)getLocationForwardWithDouble:(jdouble)length;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsLinearrefLengthLocationMap, linearGeom_, ComVividsolutionsJtsGeomGeometry *)

__attribute__((unused)) static ComVividsolutionsJtsLinearrefLinearLocation *ComVividsolutionsJtsLinearrefLengthLocationMap_getLocationForwardWithDouble_(ComVividsolutionsJtsLinearrefLengthLocationMap *self, jdouble length);

@implementation ComVividsolutionsJtsLinearrefLengthLocationMap

+ (ComVividsolutionsJtsLinearrefLinearLocation *)getLocationWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)linearGeom
                                                                                      withDouble:(jdouble)length {
  return ComVividsolutionsJtsLinearrefLengthLocationMap_getLocationWithComVividsolutionsJtsGeomGeometry_withDouble_(linearGeom, length);
}

+ (jdouble)getLengthWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)linearGeom
         withComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)loc {
  return ComVividsolutionsJtsLinearrefLengthLocationMap_getLengthWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsLinearrefLinearLocation_(linearGeom, loc);
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)linearGeom {
  ComVividsolutionsJtsLinearrefLengthLocationMap_initWithComVividsolutionsJtsGeomGeometry_(self, linearGeom);
  return self;
}

- (ComVividsolutionsJtsLinearrefLinearLocation *)getLocationWithDouble:(jdouble)length {
  jdouble forwardLength = length;
  if (length < 0.0) {
    jdouble lineLen = [((ComVividsolutionsJtsGeomGeometry *) nil_chk(linearGeom_)) getLength];
    forwardLength = lineLen + length;
  }
  return ComVividsolutionsJtsLinearrefLengthLocationMap_getLocationForwardWithDouble_(self, forwardLength);
}

- (ComVividsolutionsJtsLinearrefLinearLocation *)getLocationForwardWithDouble:(jdouble)length {
  return ComVividsolutionsJtsLinearrefLengthLocationMap_getLocationForwardWithDouble_(self, length);
}

- (jdouble)getLengthWithComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)loc {
  jdouble totalLength = 0.0;
  ComVividsolutionsJtsLinearrefLinearIterator *it = new_ComVividsolutionsJtsLinearrefLinearIterator_initWithComVividsolutionsJtsGeomGeometry_(linearGeom_);
  while ([it hasNext]) {
    if (![it isEndOfLine]) {
      ComVividsolutionsJtsGeomCoordinate *p0 = [it getSegmentStart];
      ComVividsolutionsJtsGeomCoordinate *p1 = [it getSegmentEnd];
      jdouble segLen = [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1)) distanceWithComVividsolutionsJtsGeomCoordinate:p0];
      if ([((ComVividsolutionsJtsLinearrefLinearLocation *) nil_chk(loc)) getComponentIndex] == [it getComponentIndex] && [loc getSegmentIndex] == [it getVertexIndex]) {
        return totalLength + segLen * [loc getSegmentFraction];
      }
      totalLength += segLen;
    }
    [it next];
  }
  return totalLength;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLocationWithComVividsolutionsJtsGeomGeometry:withDouble:", "getLocation", "Lcom.vividsolutions.jts.linearref.LinearLocation;", 0x9, NULL, NULL },
    { "getLengthWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsLinearrefLinearLocation:", "getLength", "D", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:", "LengthLocationMap", NULL, 0x1, NULL, NULL },
    { "getLocationWithDouble:", "getLocation", "Lcom.vividsolutions.jts.linearref.LinearLocation;", 0x1, NULL, NULL },
    { "getLocationForwardWithDouble:", "getLocationForward", "Lcom.vividsolutions.jts.linearref.LinearLocation;", 0x2, NULL, NULL },
    { "getLengthWithComVividsolutionsJtsLinearrefLinearLocation:", "getLength", "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "linearGeom_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsLinearrefLengthLocationMap = { 2, "LengthLocationMap", "com.vividsolutions.jts.linearref", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsLinearrefLengthLocationMap;
}

@end

ComVividsolutionsJtsLinearrefLinearLocation *ComVividsolutionsJtsLinearrefLengthLocationMap_getLocationWithComVividsolutionsJtsGeomGeometry_withDouble_(ComVividsolutionsJtsGeomGeometry *linearGeom, jdouble length) {
  ComVividsolutionsJtsLinearrefLengthLocationMap_initialize();
  ComVividsolutionsJtsLinearrefLengthLocationMap *locater = new_ComVividsolutionsJtsLinearrefLengthLocationMap_initWithComVividsolutionsJtsGeomGeometry_(linearGeom);
  return [locater getLocationWithDouble:length];
}

jdouble ComVividsolutionsJtsLinearrefLengthLocationMap_getLengthWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsLinearrefLinearLocation_(ComVividsolutionsJtsGeomGeometry *linearGeom, ComVividsolutionsJtsLinearrefLinearLocation *loc) {
  ComVividsolutionsJtsLinearrefLengthLocationMap_initialize();
  ComVividsolutionsJtsLinearrefLengthLocationMap *locater = new_ComVividsolutionsJtsLinearrefLengthLocationMap_initWithComVividsolutionsJtsGeomGeometry_(linearGeom);
  return [locater getLengthWithComVividsolutionsJtsLinearrefLinearLocation:loc];
}

void ComVividsolutionsJtsLinearrefLengthLocationMap_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsLinearrefLengthLocationMap *self, ComVividsolutionsJtsGeomGeometry *linearGeom) {
  (void) NSObject_init(self);
  self->linearGeom_ = linearGeom;
}

ComVividsolutionsJtsLinearrefLengthLocationMap *new_ComVividsolutionsJtsLinearrefLengthLocationMap_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *linearGeom) {
  ComVividsolutionsJtsLinearrefLengthLocationMap *self = [ComVividsolutionsJtsLinearrefLengthLocationMap alloc];
  ComVividsolutionsJtsLinearrefLengthLocationMap_initWithComVividsolutionsJtsGeomGeometry_(self, linearGeom);
  return self;
}

ComVividsolutionsJtsLinearrefLinearLocation *ComVividsolutionsJtsLinearrefLengthLocationMap_getLocationForwardWithDouble_(ComVividsolutionsJtsLinearrefLengthLocationMap *self, jdouble length) {
  if (length <= 0.0) return new_ComVividsolutionsJtsLinearrefLinearLocation_init();
  jdouble totalLength = 0.0;
  ComVividsolutionsJtsLinearrefLinearIterator *it = new_ComVividsolutionsJtsLinearrefLinearIterator_initWithComVividsolutionsJtsGeomGeometry_(self->linearGeom_);
  while ([it hasNext]) {
    if (![it isEndOfLine]) {
      ComVividsolutionsJtsGeomCoordinate *p0 = [it getSegmentStart];
      ComVividsolutionsJtsGeomCoordinate *p1 = [it getSegmentEnd];
      jdouble segLen = [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1)) distanceWithComVividsolutionsJtsGeomCoordinate:p0];
      if (totalLength + segLen > length) {
        jdouble frac = (length - totalLength) / segLen;
        jint compIndex = [it getComponentIndex];
        jint segIndex = [it getVertexIndex];
        return new_ComVividsolutionsJtsLinearrefLinearLocation_initWithInt_withInt_withDouble_(compIndex, segIndex, frac);
      }
      totalLength += segLen;
    }
    [it next];
  }
  return ComVividsolutionsJtsLinearrefLinearLocation_getEndLocationWithComVividsolutionsJtsGeomGeometry_(self->linearGeom_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsLinearrefLengthLocationMap)
