//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/geomgraph/DirectedEdgeStar.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geom/TopologyException.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdge.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEnd.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEndStar.h"
#include "com/vividsolutions/jts/geomgraph/EdgeRing.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/geomgraph/Quadrant.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsGeomgraphDirectedEdgeStar () {
 @public
  id<JavaUtilList> resultAreaEdgeList_;
  ComVividsolutionsJtsGeomgraphLabel *label_;
  jint SCANNING_FOR_INCOMING_;
  jint LINKING_TO_OUTGOING_;
}

- (id<JavaUtilList>)getResultAreaEdges;

- (jint)computeDepthsWithInt:(jint)startIndex
                     withInt:(jint)endIndex
                     withInt:(jint)startDepth;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphDirectedEdgeStar, resultAreaEdgeList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphDirectedEdgeStar, label_, ComVividsolutionsJtsGeomgraphLabel *)

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsGeomgraphDirectedEdgeStar_getResultAreaEdges(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *self);

__attribute__((unused)) static jint ComVividsolutionsJtsGeomgraphDirectedEdgeStar_computeDepthsWithInt_withInt_withInt_(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *self, jint startIndex, jint endIndex, jint startDepth);

@implementation ComVividsolutionsJtsGeomgraphDirectedEdgeStar

- (instancetype)init {
  ComVividsolutionsJtsGeomgraphDirectedEdgeStar_init(self);
  return self;
}

- (void)insertWithComVividsolutionsJtsGeomgraphEdgeEnd:(ComVividsolutionsJtsGeomgraphEdgeEnd *)ee {
  ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast(ee, [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
  [self insertEdgeEndWithComVividsolutionsJtsGeomgraphEdgeEnd:de withId:de];
}

- (ComVividsolutionsJtsGeomgraphLabel *)getLabel {
  return label_;
}

- (jint)getOutgoingDegree {
  jint degree = 0;
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    if ([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) isInResult]) degree++;
  }
  return degree;
}

- (jint)getOutgoingDegreeWithComVividsolutionsJtsGeomgraphEdgeRing:(ComVividsolutionsJtsGeomgraphEdgeRing *)er {
  jint degree = 0;
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    if ([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getEdgeRing] == er) degree++;
  }
  return degree;
}

- (ComVividsolutionsJtsGeomgraphDirectedEdge *)getRightmostEdge {
  id<JavaUtilList> edges = [self getEdges];
  jint size = [((id<JavaUtilList>) nil_chk(edges)) size];
  if (size < 1) return nil;
  ComVividsolutionsJtsGeomgraphDirectedEdge *de0 = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([edges getWithInt:0], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
  if (size == 1) return de0;
  ComVividsolutionsJtsGeomgraphDirectedEdge *deLast = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([edges getWithInt:size - 1], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
  jint quad0 = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de0)) getQuadrant];
  jint quad1 = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(deLast)) getQuadrant];
  if (ComVividsolutionsJtsGeomgraphQuadrant_isNorthernWithInt_(quad0) && ComVividsolutionsJtsGeomgraphQuadrant_isNorthernWithInt_(quad1)) return de0;
  else if (!ComVividsolutionsJtsGeomgraphQuadrant_isNorthernWithInt_(quad0) && !ComVividsolutionsJtsGeomgraphQuadrant_isNorthernWithInt_(quad1)) return deLast;
  else {
    ComVividsolutionsJtsGeomgraphDirectedEdge *nonHorizontalEdge = nil;
    if ([de0 getDy] != 0) return de0;
    else if ([deLast getDy] != 0) return deLast;
  }
  ComVividsolutionsJtsUtilAssert_shouldNeverReachHereWithNSString_(@"found two horizontal edges incident on node");
  return nil;
}

- (void)computeLabellingWithComVividsolutionsJtsGeomgraphGeometryGraphArray:(IOSObjectArray *)geom {
  [super computeLabellingWithComVividsolutionsJtsGeomgraphGeometryGraphArray:geom];
  label_ = new_ComVividsolutionsJtsGeomgraphLabel_initWithInt_(ComVividsolutionsJtsGeomLocation_NONE);
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *ee = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    ComVividsolutionsJtsGeomgraphEdge *e = [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(ee)) getEdge];
    ComVividsolutionsJtsGeomgraphLabel *eLabel = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getLabel];
    for (jint i = 0; i < 2; i++) {
      jint eLoc = [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(eLabel)) getLocationWithInt:i];
      if (eLoc == ComVividsolutionsJtsGeomLocation_INTERIOR || eLoc == ComVividsolutionsJtsGeomLocation_BOUNDARY) [label_ setLocationWithInt:i withInt:ComVividsolutionsJtsGeomLocation_INTERIOR];
    }
  }
}

- (void)mergeSymLabels {
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getLabel];
    [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) mergeWithComVividsolutionsJtsGeomgraphLabel:[((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk([de getSym])) getLabel]];
  }
}

- (void)updateLabellingWithComVividsolutionsJtsGeomgraphLabel:(ComVividsolutionsJtsGeomgraphLabel *)nodeLabel {
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getLabel];
    [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) setAllLocationsIfNullWithInt:0 withInt:[((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(nodeLabel)) getLocationWithInt:0]];
    [label setAllLocationsIfNullWithInt:1 withInt:[nodeLabel getLocationWithInt:1]];
  }
}

- (id<JavaUtilList>)getResultAreaEdges {
  return ComVividsolutionsJtsGeomgraphDirectedEdgeStar_getResultAreaEdges(self);
}

- (void)linkResultDirectedEdges {
  (void) ComVividsolutionsJtsGeomgraphDirectedEdgeStar_getResultAreaEdges(self);
  ComVividsolutionsJtsGeomgraphDirectedEdge *firstOut = nil;
  ComVividsolutionsJtsGeomgraphDirectedEdge *incoming = nil;
  jint state = SCANNING_FOR_INCOMING_;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(resultAreaEdgeList_)) size]; i++) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextOut = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([resultAreaEdgeList_ getWithInt:i], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextIn = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextOut)) getSym];
    if (![((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([nextOut getLabel])) isArea]) continue;
    if (firstOut == nil && [nextOut isInResult]) firstOut = nextOut;
    switch (state) {
      case 1:
      if (![((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextIn)) isInResult]) continue;
      incoming = nextIn;
      state = LINKING_TO_OUTGOING_;
      break;
      case 2:
      if (![nextOut isInResult]) continue;
      [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(incoming)) setNextWithComVividsolutionsJtsGeomgraphDirectedEdge:nextOut];
      state = SCANNING_FOR_INCOMING_;
      break;
    }
  }
  if (state == LINKING_TO_OUTGOING_) {
    if (firstOut == nil) @throw new_ComVividsolutionsJtsGeomTopologyException_initWithNSString_withComVividsolutionsJtsGeomCoordinate_(@"no outgoing dirEdge found", [self getCoordinate]);
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(firstOut)) isInResult], @"unable to link last incoming dirEdge");
    [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(incoming)) setNextWithComVividsolutionsJtsGeomgraphDirectedEdge:firstOut];
  }
}

- (void)linkMinimalDirectedEdgesWithComVividsolutionsJtsGeomgraphEdgeRing:(ComVividsolutionsJtsGeomgraphEdgeRing *)er {
  ComVividsolutionsJtsGeomgraphDirectedEdge *firstOut = nil;
  ComVividsolutionsJtsGeomgraphDirectedEdge *incoming = nil;
  jint state = SCANNING_FOR_INCOMING_;
  for (jint i = [((id<JavaUtilList>) nil_chk(resultAreaEdgeList_)) size] - 1; i >= 0; i--) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextOut = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([resultAreaEdgeList_ getWithInt:i], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextIn = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextOut)) getSym];
    if (firstOut == nil && [nextOut getEdgeRing] == er) firstOut = nextOut;
    switch (state) {
      case 1:
      if ([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextIn)) getEdgeRing] != er) continue;
      incoming = nextIn;
      state = LINKING_TO_OUTGOING_;
      break;
      case 2:
      if ([nextOut getEdgeRing] != er) continue;
      [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(incoming)) setNextMinWithComVividsolutionsJtsGeomgraphDirectedEdge:nextOut];
      state = SCANNING_FOR_INCOMING_;
      break;
    }
  }
  if (state == LINKING_TO_OUTGOING_) {
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(firstOut != nil, @"found null for first outgoing dirEdge");
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(firstOut)) getEdgeRing] == er, @"unable to link last incoming dirEdge");
    [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(incoming)) setNextMinWithComVividsolutionsJtsGeomgraphDirectedEdge:firstOut];
  }
}

- (void)linkAllDirectedEdges {
  (void) [self getEdges];
  ComVividsolutionsJtsGeomgraphDirectedEdge *prevOut = nil;
  ComVividsolutionsJtsGeomgraphDirectedEdge *firstIn = nil;
  for (jint i = [((id<JavaUtilList>) nil_chk(edgeList_)) size] - 1; i >= 0; i--) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextOut = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([edgeList_ getWithInt:i], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextIn = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextOut)) getSym];
    if (firstIn == nil) firstIn = nextIn;
    if (prevOut != nil) [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextIn)) setNextWithComVividsolutionsJtsGeomgraphDirectedEdge:prevOut];
    prevOut = nextOut;
  }
  [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(firstIn)) setNextWithComVividsolutionsJtsGeomgraphDirectedEdge:prevOut];
}

- (void)findCoveredLineEdges {
  jint startLoc = ComVividsolutionsJtsGeomLocation_NONE;
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextOut = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextIn = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextOut)) getSym];
    if (![nextOut isLineEdge]) {
      if ([nextOut isInResult]) {
        startLoc = ComVividsolutionsJtsGeomLocation_INTERIOR;
        break;
      }
      if ([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextIn)) isInResult]) {
        startLoc = ComVividsolutionsJtsGeomLocation_EXTERIOR;
        break;
      }
    }
  }
  if (startLoc == ComVividsolutionsJtsGeomLocation_NONE) return;
  jint currLoc = startLoc;
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextOut = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextIn = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextOut)) getSym];
    if ([nextOut isLineEdge]) {
      [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk([nextOut getEdge])) setCoveredWithBoolean:currLoc == ComVividsolutionsJtsGeomLocation_INTERIOR];
    }
    else {
      if ([nextOut isInResult]) currLoc = ComVividsolutionsJtsGeomLocation_EXTERIOR;
      if ([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextIn)) isInResult]) currLoc = ComVividsolutionsJtsGeomLocation_INTERIOR;
    }
  }
}

- (void)computeDepthsWithComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)de {
  jint edgeIndex = [self findIndexWithComVividsolutionsJtsGeomgraphEdgeEnd:de];
  ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getLabel];
  jint startDepth = [de getDepthWithInt:ComVividsolutionsJtsGeomgraphPosition_LEFT];
  jint targetLastDepth = [de getDepthWithInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT];
  jint nextDepth = ComVividsolutionsJtsGeomgraphDirectedEdgeStar_computeDepthsWithInt_withInt_withInt_(self, edgeIndex + 1, [((id<JavaUtilList>) nil_chk(edgeList_)) size], startDepth);
  jint lastDepth = ComVividsolutionsJtsGeomgraphDirectedEdgeStar_computeDepthsWithInt_withInt_withInt_(self, 0, edgeIndex, nextDepth);
  if (lastDepth != targetLastDepth) @throw new_ComVividsolutionsJtsGeomTopologyException_initWithNSString_(JreStrcat("$@", @"depth mismatch at ", [de getCoordinate]));
}

- (jint)computeDepthsWithInt:(jint)startIndex
                     withInt:(jint)endIndex
                     withInt:(jint)startDepth {
  return ComVividsolutionsJtsGeomgraphDirectedEdgeStar_computeDepthsWithInt_withInt_withInt_(self, startIndex, endIndex, startDepth);
}

- (void)printWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$@", @"DirectedEdgeStar: ", [self getCoordinate])];
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    [((JavaIoPrintStream *) nil_chk(outArg)) printWithNSString:@"out "];
    [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) printWithJavaIoPrintStream:outArg];
    [outArg println];
    [outArg printWithNSString:@"in "];
    [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk([de getSym])) printWithJavaIoPrintStream:outArg];
    [outArg println];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DirectedEdgeStar", NULL, 0x1, NULL, NULL },
    { "insertWithComVividsolutionsJtsGeomgraphEdgeEnd:", "insert", "V", 0x1, NULL, NULL },
    { "getLabel", NULL, "Lcom.vividsolutions.jts.geomgraph.Label;", 0x1, NULL, NULL },
    { "getOutgoingDegree", NULL, "I", 0x1, NULL, NULL },
    { "getOutgoingDegreeWithComVividsolutionsJtsGeomgraphEdgeRing:", "getOutgoingDegree", "I", 0x1, NULL, NULL },
    { "getRightmostEdge", NULL, "Lcom.vividsolutions.jts.geomgraph.DirectedEdge;", 0x1, NULL, NULL },
    { "computeLabellingWithComVividsolutionsJtsGeomgraphGeometryGraphArray:", "computeLabelling", "V", 0x1, NULL, NULL },
    { "mergeSymLabels", NULL, "V", 0x1, NULL, NULL },
    { "updateLabellingWithComVividsolutionsJtsGeomgraphLabel:", "updateLabelling", "V", 0x1, NULL, NULL },
    { "getResultAreaEdges", NULL, "Ljava.util.List;", 0x2, NULL, NULL },
    { "linkResultDirectedEdges", NULL, "V", 0x1, NULL, NULL },
    { "linkMinimalDirectedEdgesWithComVividsolutionsJtsGeomgraphEdgeRing:", "linkMinimalDirectedEdges", "V", 0x1, NULL, NULL },
    { "linkAllDirectedEdges", NULL, "V", 0x1, NULL, NULL },
    { "findCoveredLineEdges", NULL, "V", 0x1, NULL, NULL },
    { "computeDepthsWithComVividsolutionsJtsGeomgraphDirectedEdge:", "computeDepths", "V", 0x1, NULL, NULL },
    { "computeDepthsWithInt:withInt:withInt:", "computeDepths", "I", 0x2, NULL, NULL },
    { "printWithJavaIoPrintStream:", "print", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "resultAreaEdgeList_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "label_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.Label;", NULL, NULL,  },
    { "SCANNING_FOR_INCOMING_", NULL, 0x12, "I", NULL, NULL,  },
    { "LINKING_TO_OUTGOING_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphDirectedEdgeStar = { 2, "DirectedEdgeStar", "com.vividsolutions.jts.geomgraph", NULL, 0x1, 17, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphDirectedEdgeStar;
}

@end

void ComVividsolutionsJtsGeomgraphDirectedEdgeStar_init(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *self) {
  (void) ComVividsolutionsJtsGeomgraphEdgeEndStar_init(self);
  self->SCANNING_FOR_INCOMING_ = 1;
  self->LINKING_TO_OUTGOING_ = 2;
}

ComVividsolutionsJtsGeomgraphDirectedEdgeStar *new_ComVividsolutionsJtsGeomgraphDirectedEdgeStar_init() {
  ComVividsolutionsJtsGeomgraphDirectedEdgeStar *self = [ComVividsolutionsJtsGeomgraphDirectedEdgeStar alloc];
  ComVividsolutionsJtsGeomgraphDirectedEdgeStar_init(self);
  return self;
}

id<JavaUtilList> ComVividsolutionsJtsGeomgraphDirectedEdgeStar_getResultAreaEdges(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *self) {
  if (self->resultAreaEdgeList_ != nil) return self->resultAreaEdgeList_;
  self->resultAreaEdgeList_ = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    if ([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) isInResult] || [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk([de getSym])) isInResult]) [self->resultAreaEdgeList_ addWithId:de];
  }
  return self->resultAreaEdgeList_;
}

jint ComVividsolutionsJtsGeomgraphDirectedEdgeStar_computeDepthsWithInt_withInt_withInt_(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *self, jint startIndex, jint endIndex, jint startDepth) {
  jint currDepth = startDepth;
  for (jint i = startIndex; i < endIndex; i++) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextDe = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([((id<JavaUtilList>) nil_chk(self->edgeList_)) getWithInt:i], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextDe)) getLabel];
    [nextDe setEdgeDepthsWithInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT withInt:currDepth];
    currDepth = [nextDe getDepthWithInt:ComVividsolutionsJtsGeomgraphPosition_LEFT];
  }
  return currDepth;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphDirectedEdgeStar)
