//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/geomgraph/EdgeIntersectionList.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersection.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "java/io/PrintStream.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/TreeMap.h"

@interface ComVividsolutionsJtsGeomgraphEdgeIntersectionList () {
 @public
  id<JavaUtilMap> nodeMap_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdgeIntersectionList, nodeMap_, id<JavaUtilMap>)

@implementation ComVividsolutionsJtsGeomgraphEdgeIntersectionList

- (instancetype)initWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)edge {
  ComVividsolutionsJtsGeomgraphEdgeIntersectionList_initWithComVividsolutionsJtsGeomgraphEdge_(self, edge);
  return self;
}

- (ComVividsolutionsJtsGeomgraphEdgeIntersection *)addWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)intPt
                                                                                     withInt:(jint)segmentIndex
                                                                                  withDouble:(jdouble)dist {
  ComVividsolutionsJtsGeomgraphEdgeIntersection *eiNew = [new_ComVividsolutionsJtsGeomgraphEdgeIntersection_initWithComVividsolutionsJtsGeomCoordinate_withInt_withDouble_(intPt, segmentIndex, dist) autorelease];
  ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([((id<JavaUtilMap>) nil_chk(nodeMap_)) getWithId:eiNew], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
  if (ei != nil) {
    return ei;
  }
  [nodeMap_ putWithId:eiNew withId:eiNew];
  return eiNew;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(nodeMap_)) values])) iterator];
}

- (jboolean)isIntersectionWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
    if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(ei))->coord_)) isEqual:pt]) return YES;
  }
  return NO;
}

- (void)addEndpoints {
  jint maxSegIndex = ((IOSObjectArray *) nil_chk(((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(edge_))->pts_))->size_ - 1;
  [self addWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(edge_->pts_, 0) withInt:0 withDouble:0.0];
  [self addWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(edge_->pts_, maxSegIndex) withInt:maxSegIndex withDouble:0.0];
}

- (void)addSplitEdgesWithJavaUtilList:(id<JavaUtilList>)edgeList {
  [self addEndpoints];
  id<JavaUtilIterator> it = [self iterator];
  ComVividsolutionsJtsGeomgraphEdgeIntersection *eiPrev = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([((id<JavaUtilIterator>) nil_chk(it)) next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
  while ([it hasNext]) {
    ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
    ComVividsolutionsJtsGeomgraphEdge *newEdge = [self createSplitEdgeWithComVividsolutionsJtsGeomgraphEdgeIntersection:eiPrev withComVividsolutionsJtsGeomgraphEdgeIntersection:ei];
    [((id<JavaUtilList>) nil_chk(edgeList)) addWithId:newEdge];
    eiPrev = ei;
  }
}

- (ComVividsolutionsJtsGeomgraphEdge *)createSplitEdgeWithComVividsolutionsJtsGeomgraphEdgeIntersection:(ComVividsolutionsJtsGeomgraphEdgeIntersection *)ei0
                                                      withComVividsolutionsJtsGeomgraphEdgeIntersection:(ComVividsolutionsJtsGeomgraphEdgeIntersection *)ei1 {
  jint npts = ((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(ei1))->segmentIndex_ - ((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(ei0))->segmentIndex_ + 2;
  ComVividsolutionsJtsGeomCoordinate *lastSegStartPt = IOSObjectArray_Get(nil_chk(((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(edge_))->pts_), ei1->segmentIndex_);
  jboolean useIntPt1 = ei1->dist_ > 0.0 || ![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(ei1->coord_)) equals2DWithComVividsolutionsJtsGeomCoordinate:lastSegStartPt];
  if (!useIntPt1) {
    npts--;
  }
  IOSObjectArray *pts = [IOSObjectArray arrayWithLength:npts type:ComVividsolutionsJtsGeomCoordinate_class_()];
  jint ipt = 0;
  IOSObjectArray_SetAndConsume(pts, ipt++, new_ComVividsolutionsJtsGeomCoordinate_initWithComVividsolutionsJtsGeomCoordinate_(ei0->coord_));
  for (jint i = ei0->segmentIndex_ + 1; i <= ei1->segmentIndex_; i++) {
    IOSObjectArray_Set(pts, ipt++, IOSObjectArray_Get(edge_->pts_, i));
  }
  if (useIntPt1) IOSObjectArray_Set(pts, ipt, ei1->coord_);
  return [new_ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(pts, [new_ComVividsolutionsJtsGeomgraphLabel_initWithComVividsolutionsJtsGeomgraphLabel_(edge_->label_) autorelease]) autorelease];
}

- (void)printWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"Intersections:"];
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
    [((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(ei)) printWithJavaIoPrintStream:outArg];
  }
}

- (void)dealloc {
  RELEASE_(nodeMap_);
  RELEASE_(edge_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomgraphEdge:", "EdgeIntersectionList", NULL, 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsGeomCoordinate:withInt:withDouble:", "add", "Lcom.vividsolutions.jts.geomgraph.EdgeIntersection;", 0x1, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "isIntersectionWithComVividsolutionsJtsGeomCoordinate:", "isIntersection", "Z", 0x1, NULL, NULL },
    { "addEndpoints", NULL, "V", 0x1, NULL, NULL },
    { "addSplitEdgesWithJavaUtilList:", "addSplitEdges", "V", 0x1, NULL, NULL },
    { "createSplitEdgeWithComVividsolutionsJtsGeomgraphEdgeIntersection:withComVividsolutionsJtsGeomgraphEdgeIntersection:", "createSplitEdge", "Lcom.vividsolutions.jts.geomgraph.Edge;", 0x0, NULL, NULL },
    { "printWithJavaIoPrintStream:", "print", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nodeMap_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "edge_", NULL, 0x0, "Lcom.vividsolutions.jts.geomgraph.Edge;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphEdgeIntersectionList = { 2, "EdgeIntersectionList", "com.vividsolutions.jts.geomgraph", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphEdgeIntersectionList;
}

@end

void ComVividsolutionsJtsGeomgraphEdgeIntersectionList_initWithComVividsolutionsJtsGeomgraphEdge_(ComVividsolutionsJtsGeomgraphEdgeIntersectionList *self, ComVividsolutionsJtsGeomgraphEdge *edge) {
  NSObject_init(self);
  ComVividsolutionsJtsGeomgraphEdgeIntersectionList_setAndConsume_nodeMap_(self, new_JavaUtilTreeMap_init());
  ComVividsolutionsJtsGeomgraphEdgeIntersectionList_set_edge_(self, edge);
}

ComVividsolutionsJtsGeomgraphEdgeIntersectionList *new_ComVividsolutionsJtsGeomgraphEdgeIntersectionList_initWithComVividsolutionsJtsGeomgraphEdge_(ComVividsolutionsJtsGeomgraphEdge *edge) {
  ComVividsolutionsJtsGeomgraphEdgeIntersectionList *self = [ComVividsolutionsJtsGeomgraphEdgeIntersectionList alloc];
  ComVividsolutionsJtsGeomgraphEdgeIntersectionList_initWithComVividsolutionsJtsGeomgraphEdge_(self, edge);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphEdgeIntersectionList)
