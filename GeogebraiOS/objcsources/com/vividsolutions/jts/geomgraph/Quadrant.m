//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/geomgraph/Quadrant.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geomgraph/Quadrant.h"
#include "java/lang/IllegalArgumentException.h"

@implementation ComVividsolutionsJtsGeomgraphQuadrant

+ (jint)quadrantWithDouble:(jdouble)dx
                withDouble:(jdouble)dy {
  return ComVividsolutionsJtsGeomgraphQuadrant_quadrantWithDouble_withDouble_(dx, dy);
}

+ (jint)quadrantWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1 {
  return ComVividsolutionsJtsGeomgraphQuadrant_quadrantWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(p0, p1);
}

+ (jboolean)isOppositeWithInt:(jint)quad1
                      withInt:(jint)quad2 {
  return ComVividsolutionsJtsGeomgraphQuadrant_isOppositeWithInt_withInt_(quad1, quad2);
}

+ (jint)commonHalfPlaneWithInt:(jint)quad1
                       withInt:(jint)quad2 {
  return ComVividsolutionsJtsGeomgraphQuadrant_commonHalfPlaneWithInt_withInt_(quad1, quad2);
}

+ (jboolean)isInHalfPlaneWithInt:(jint)quad
                         withInt:(jint)halfPlane {
  return ComVividsolutionsJtsGeomgraphQuadrant_isInHalfPlaneWithInt_withInt_(quad, halfPlane);
}

+ (jboolean)isNorthernWithInt:(jint)quad {
  return ComVividsolutionsJtsGeomgraphQuadrant_isNorthernWithInt_(quad);
}

- (instancetype)init {
  ComVividsolutionsJtsGeomgraphQuadrant_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "quadrantWithDouble:withDouble:", "quadrant", "I", 0x9, NULL, NULL },
    { "quadrantWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "quadrant", "I", 0x9, NULL, NULL },
    { "isOppositeWithInt:withInt:", "isOpposite", "Z", 0x9, NULL, NULL },
    { "commonHalfPlaneWithInt:withInt:", "commonHalfPlane", "I", 0x9, NULL, NULL },
    { "isInHalfPlaneWithInt:withInt:", "isInHalfPlane", "Z", 0x9, NULL, NULL },
    { "isNorthernWithInt:", "isNorthern", "Z", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphQuadrant = { 2, "Quadrant", "com.vividsolutions.jts.geomgraph", NULL, 0x1, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphQuadrant;
}

@end

jint ComVividsolutionsJtsGeomgraphQuadrant_quadrantWithDouble_withDouble_(jdouble dx, jdouble dy) {
  ComVividsolutionsJtsGeomgraphQuadrant_initialize();
  if (dx == 0.0 && dy == 0.0) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D$D$", @"Cannot compute the quadrant for point ( ", dx, @", ", dy, @" )")) autorelease];
  if (dx >= 0.0) {
    if (dy >= 0.0) return 0;
    else return 3;
  }
  else {
    if (dy >= 0.0) return 1;
    else return 2;
  }
}

jint ComVividsolutionsJtsGeomgraphQuadrant_quadrantWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1) {
  ComVividsolutionsJtsGeomgraphQuadrant_initialize();
  jdouble dx = ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1))->x_ - ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0))->x_;
  jdouble dy = p1->y_ - p0->y_;
  if (dx == 0.0 && dy == 0.0) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Cannot compute the quadrant for two identical points ", p0)) autorelease];
  return ComVividsolutionsJtsGeomgraphQuadrant_quadrantWithDouble_withDouble_(dx, dy);
}

jboolean ComVividsolutionsJtsGeomgraphQuadrant_isOppositeWithInt_withInt_(jint quad1, jint quad2) {
  ComVividsolutionsJtsGeomgraphQuadrant_initialize();
  if (quad1 == quad2) return NO;
  jint diff = (quad1 - quad2 + 4) % 4;
  if (diff == 2) return YES;
  return NO;
}

jint ComVividsolutionsJtsGeomgraphQuadrant_commonHalfPlaneWithInt_withInt_(jint quad1, jint quad2) {
  ComVividsolutionsJtsGeomgraphQuadrant_initialize();
  if (quad1 == quad2) return quad1;
  jint diff = (quad1 - quad2 + 4) % 4;
  if (diff == 2) return -1;
  jint min = (quad1 < quad2) ? quad1 : quad2;
  jint max = (quad1 > quad2) ? quad1 : quad2;
  if (min == 0 && max == 3) return 3;
  return min;
}

jboolean ComVividsolutionsJtsGeomgraphQuadrant_isInHalfPlaneWithInt_withInt_(jint quad, jint halfPlane) {
  ComVividsolutionsJtsGeomgraphQuadrant_initialize();
  if (halfPlane == 3) {
    return quad == 3 || quad == 0;
  }
  return quad == halfPlane || quad == halfPlane + 1;
}

jboolean ComVividsolutionsJtsGeomgraphQuadrant_isNorthernWithInt_(jint quad) {
  ComVividsolutionsJtsGeomgraphQuadrant_initialize();
  return quad == 0 || quad == 1;
}

void ComVividsolutionsJtsGeomgraphQuadrant_init(ComVividsolutionsJtsGeomgraphQuadrant *self) {
  NSObject_init(self);
}

ComVividsolutionsJtsGeomgraphQuadrant *new_ComVividsolutionsJtsGeomgraphQuadrant_init() {
  ComVividsolutionsJtsGeomgraphQuadrant *self = [ComVividsolutionsJtsGeomgraphQuadrant alloc];
  ComVividsolutionsJtsGeomgraphQuadrant_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphQuadrant)
