//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/geomgraph/Edge.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/IntersectionMatrix.h"
#include "com/vividsolutions/jts/geomgraph/Depth.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersection.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/GraphComponent.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/geomgraph/index/MonotoneChainEdge.h"
#include "java/io/PrintStream.h"

@interface ComVividsolutionsJtsGeomgraphEdge () {
 @public
  ComVividsolutionsJtsGeomEnvelope *env_;
  NSString *name_;
  ComVividsolutionsJtsGeomgraphIndexMonotoneChainEdge *mce_;
  jboolean isIsolated__;
  ComVividsolutionsJtsGeomgraphDepth *depth_;
  jint depthDelta_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdge, env_, ComVividsolutionsJtsGeomEnvelope *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdge, name_, NSString *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdge, mce_, ComVividsolutionsJtsGeomgraphIndexMonotoneChainEdge *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdge, depth_, ComVividsolutionsJtsGeomgraphDepth *)

@implementation ComVividsolutionsJtsGeomgraphEdge

+ (void)updateIMWithComVividsolutionsJtsGeomgraphLabel:(ComVividsolutionsJtsGeomgraphLabel *)label
        withComVividsolutionsJtsGeomIntersectionMatrix:(ComVividsolutionsJtsGeomIntersectionMatrix *)im {
  ComVividsolutionsJtsGeomgraphEdge_updateIMWithComVividsolutionsJtsGeomgraphLabel_withComVividsolutionsJtsGeomIntersectionMatrix_(label, im);
}

- (instancetype)initWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)pts
                         withComVividsolutionsJtsGeomgraphLabel:(ComVividsolutionsJtsGeomgraphLabel *)label {
  ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(self, pts, label);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)pts {
  ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_(self, pts);
  return self;
}

- (jint)getNumPoints {
  return ((IOSObjectArray *) nil_chk(pts_))->size_;
}

- (void)setNameWithNSString:(NSString *)name {
  ComVividsolutionsJtsGeomgraphEdge_set_name_(self, name);
}

- (IOSObjectArray *)getCoordinates {
  return pts_;
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinateWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(pts_), i);
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinate {
  if (((IOSObjectArray *) nil_chk(pts_))->size_ > 0) return IOSObjectArray_Get(pts_, 0);
  return nil;
}

- (ComVividsolutionsJtsGeomEnvelope *)getEnvelope {
  if (env_ == nil) {
    ComVividsolutionsJtsGeomgraphEdge_setAndConsume_env_(self, new_ComVividsolutionsJtsGeomEnvelope_init());
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts_))->size_; i++) {
      [env_ expandToIncludeWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(pts_, i)];
    }
  }
  return env_;
}

- (ComVividsolutionsJtsGeomgraphDepth *)getDepth {
  return depth_;
}

- (jint)getDepthDelta {
  return depthDelta_;
}

- (void)setDepthDeltaWithInt:(jint)depthDelta {
  self->depthDelta_ = depthDelta;
}

- (jint)getMaximumSegmentIndex {
  return ((IOSObjectArray *) nil_chk(pts_))->size_ - 1;
}

- (ComVividsolutionsJtsGeomgraphEdgeIntersectionList *)getEdgeIntersectionList {
  return eiList_;
}

- (ComVividsolutionsJtsGeomgraphIndexMonotoneChainEdge *)getMonotoneChainEdge {
  if (mce_ == nil) ComVividsolutionsJtsGeomgraphEdge_setAndConsume_mce_(self, new_ComVividsolutionsJtsGeomgraphIndexMonotoneChainEdge_initWithComVividsolutionsJtsGeomgraphEdge_(self));
  return mce_;
}

- (jboolean)isClosed {
  return [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(nil_chk(pts_), 0))) isEqual:IOSObjectArray_Get(pts_, pts_->size_ - 1)];
}

- (jboolean)isCollapsed {
  if (![((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label_)) isArea]) return NO;
  if (((IOSObjectArray *) nil_chk(pts_))->size_ != 3) return NO;
  if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(pts_, 0))) isEqual:IOSObjectArray_Get(pts_, 2)]) return YES;
  return NO;
}

- (ComVividsolutionsJtsGeomgraphEdge *)getCollapsedEdge {
  IOSObjectArray *newPts = [IOSObjectArray arrayWithLength:2 type:ComVividsolutionsJtsGeomCoordinate_class_()];
  IOSObjectArray_Set(newPts, 0, IOSObjectArray_Get(nil_chk(pts_), 0));
  IOSObjectArray_Set(newPts, 1, IOSObjectArray_Get(pts_, 1));
  ComVividsolutionsJtsGeomgraphEdge *newe = [new_ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(newPts, ComVividsolutionsJtsGeomgraphLabel_toLineLabelWithComVividsolutionsJtsGeomgraphLabel_(label_)) autorelease];
  return newe;
}

- (void)setIsolatedWithBoolean:(jboolean)isIsolated {
  self->isIsolated__ = isIsolated;
}

- (jboolean)isIsolated {
  return isIsolated__;
}

- (void)addIntersectionsWithComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li
                                                                 withInt:(jint)segmentIndex
                                                                 withInt:(jint)geomIndex {
  for (jint i = 0; i < [((ComVividsolutionsJtsAlgorithmLineIntersector *) nil_chk(li)) getIntersectionNum]; i++) {
    [self addIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector:li withInt:segmentIndex withInt:geomIndex withInt:i];
  }
}

- (void)addIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li
                                                                withInt:(jint)segmentIndex
                                                                withInt:(jint)geomIndex
                                                                withInt:(jint)intIndex {
  ComVividsolutionsJtsGeomCoordinate *intPt = [new_ComVividsolutionsJtsGeomCoordinate_initWithComVividsolutionsJtsGeomCoordinate_([((ComVividsolutionsJtsAlgorithmLineIntersector *) nil_chk(li)) getIntersectionWithInt:intIndex]) autorelease];
  jint normalizedSegmentIndex = segmentIndex;
  jdouble dist = [li getEdgeDistanceWithInt:geomIndex withInt:intIndex];
  jint nextSegIndex = normalizedSegmentIndex + 1;
  if (nextSegIndex < ((IOSObjectArray *) nil_chk(pts_))->size_) {
    ComVividsolutionsJtsGeomCoordinate *nextPt = IOSObjectArray_Get(pts_, nextSegIndex);
    if ([intPt equals2DWithComVividsolutionsJtsGeomCoordinate:nextPt]) {
      normalizedSegmentIndex = nextSegIndex;
      dist = 0.0;
    }
  }
  ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk(eiList_)) addWithComVividsolutionsJtsGeomCoordinate:intPt withInt:normalizedSegmentIndex withDouble:dist];
}

- (void)computeIMWithComVividsolutionsJtsGeomIntersectionMatrix:(ComVividsolutionsJtsGeomIntersectionMatrix *)im {
  ComVividsolutionsJtsGeomgraphEdge_updateIMWithComVividsolutionsJtsGeomgraphLabel_withComVividsolutionsJtsGeomIntersectionMatrix_(label_, im);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[ComVividsolutionsJtsGeomgraphEdge class]])) return NO;
  ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast(o, [ComVividsolutionsJtsGeomgraphEdge class]);
  if (((IOSObjectArray *) nil_chk(pts_))->size_ != ((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e))->pts_->size_) return NO;
  jboolean isEqualForward = YES;
  jboolean isEqualReverse = YES;
  jint iRev = pts_->size_;
  for (jint i = 0; i < pts_->size_; i++) {
    if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(pts_, i))) equals2DWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(e->pts_, i)]) {
      isEqualForward = NO;
    }
    if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(pts_, i))) equals2DWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(e->pts_, --iRev)]) {
      isEqualReverse = NO;
    }
    if (!isEqualForward && !isEqualReverse) return NO;
  }
  return YES;
}

- (jboolean)isPointwiseEqualWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e {
  if (((IOSObjectArray *) nil_chk(pts_))->size_ != ((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e))->pts_->size_) return NO;
  for (jint i = 0; i < pts_->size_; i++) {
    if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(pts_, i))) equals2DWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(e->pts_, i)]) {
      return NO;
    }
  }
  return YES;
}

- (void)printWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printWithNSString:JreStrcat("$$$", @"edge ", name_, @": ")];
  [outArg printWithNSString:@"LINESTRING ("];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts_))->size_; i++) {
    if (i > 0) [outArg printWithNSString:@","];
    [outArg printWithNSString:JreStrcat("DCD", ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(pts_, i)))->x_, ' ', ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(pts_, i)))->y_)];
  }
  [outArg printWithNSString:JreStrcat("$@CI", @")  ", label_, ' ', depthDelta_)];
}

- (void)printReverseWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printWithNSString:JreStrcat("$$$", @"edge ", name_, @": ")];
  for (jint i = ((IOSObjectArray *) nil_chk(pts_))->size_ - 1; i >= 0; i--) {
    [outArg printWithNSString:JreStrcat("@C", IOSObjectArray_Get(pts_, i), ' ')];
  }
  [outArg printlnWithNSString:@""];
}

- (void)dealloc {
  RELEASE_(pts_);
  RELEASE_(env_);
  RELEASE_(eiList_);
  RELEASE_(name_);
  RELEASE_(mce_);
  RELEASE_(depth_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateIMWithComVividsolutionsJtsGeomgraphLabel:withComVividsolutionsJtsGeomIntersectionMatrix:", "updateIM", "V", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomCoordinateArray:withComVividsolutionsJtsGeomgraphLabel:", "Edge", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomCoordinateArray:", "Edge", NULL, 0x1, NULL, NULL },
    { "getNumPoints", NULL, "I", 0x1, NULL, NULL },
    { "setNameWithNSString:", "setName", "V", 0x1, NULL, NULL },
    { "getCoordinates", NULL, "[Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getCoordinateWithInt:", "getCoordinate", "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getCoordinate", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getEnvelope", NULL, "Lcom.vividsolutions.jts.geom.Envelope;", 0x1, NULL, NULL },
    { "getDepth", NULL, "Lcom.vividsolutions.jts.geomgraph.Depth;", 0x1, NULL, NULL },
    { "getDepthDelta", NULL, "I", 0x1, NULL, NULL },
    { "setDepthDeltaWithInt:", "setDepthDelta", "V", 0x1, NULL, NULL },
    { "getMaximumSegmentIndex", NULL, "I", 0x1, NULL, NULL },
    { "getEdgeIntersectionList", NULL, "Lcom.vividsolutions.jts.geomgraph.EdgeIntersectionList;", 0x1, NULL, NULL },
    { "getMonotoneChainEdge", NULL, "Lcom.vividsolutions.jts.geomgraph.index.MonotoneChainEdge;", 0x1, NULL, NULL },
    { "isClosed", NULL, "Z", 0x1, NULL, NULL },
    { "isCollapsed", NULL, "Z", 0x1, NULL, NULL },
    { "getCollapsedEdge", NULL, "Lcom.vividsolutions.jts.geomgraph.Edge;", 0x1, NULL, NULL },
    { "setIsolatedWithBoolean:", "setIsolated", "V", 0x1, NULL, NULL },
    { "isIsolated", NULL, "Z", 0x1, NULL, NULL },
    { "addIntersectionsWithComVividsolutionsJtsAlgorithmLineIntersector:withInt:withInt:", "addIntersections", "V", 0x1, NULL, NULL },
    { "addIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector:withInt:withInt:withInt:", "addIntersection", "V", 0x1, NULL, NULL },
    { "computeIMWithComVividsolutionsJtsGeomIntersectionMatrix:", "computeIM", "V", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "isPointwiseEqualWithComVividsolutionsJtsGeomgraphEdge:", "isPointwiseEqual", "Z", 0x1, NULL, NULL },
    { "printWithJavaIoPrintStream:", "print", "V", 0x1, NULL, NULL },
    { "printReverseWithJavaIoPrintStream:", "printReverse", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pts_", NULL, 0x0, "[Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "env_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Envelope;", NULL, NULL,  },
    { "eiList_", NULL, 0x0, "Lcom.vividsolutions.jts.geomgraph.EdgeIntersectionList;", NULL, NULL,  },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "mce_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.index.MonotoneChainEdge;", NULL, NULL,  },
    { "isIsolated__", "isIsolated", 0x2, "Z", NULL, NULL,  },
    { "depth_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.Depth;", NULL, NULL,  },
    { "depthDelta_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphEdge = { 2, "Edge", "com.vividsolutions.jts.geomgraph", NULL, 0x1, 27, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphEdge;
}

@end

void ComVividsolutionsJtsGeomgraphEdge_updateIMWithComVividsolutionsJtsGeomgraphLabel_withComVividsolutionsJtsGeomIntersectionMatrix_(ComVividsolutionsJtsGeomgraphLabel *label, ComVividsolutionsJtsGeomIntersectionMatrix *im) {
  ComVividsolutionsJtsGeomgraphEdge_initialize();
  [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk(im)) setAtLeastIfValidWithInt:[((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_ON] withInt:[label getLocationWithInt:1 withInt:ComVividsolutionsJtsGeomgraphPosition_ON] withInt:1];
  if ([label isArea]) {
    [im setAtLeastIfValidWithInt:[label getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT] withInt:[label getLocationWithInt:1 withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT] withInt:2];
    [im setAtLeastIfValidWithInt:[label getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT] withInt:[label getLocationWithInt:1 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT] withInt:2];
  }
}

void ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(ComVividsolutionsJtsGeomgraphEdge *self, IOSObjectArray *pts, ComVividsolutionsJtsGeomgraphLabel *label) {
  ComVividsolutionsJtsGeomgraphGraphComponent_init(self);
  ComVividsolutionsJtsGeomgraphEdge_setAndConsume_eiList_(self, new_ComVividsolutionsJtsGeomgraphEdgeIntersectionList_initWithComVividsolutionsJtsGeomgraphEdge_(self));
  self->isIsolated__ = YES;
  ComVividsolutionsJtsGeomgraphEdge_setAndConsume_depth_(self, new_ComVividsolutionsJtsGeomgraphDepth_init());
  self->depthDelta_ = 0;
  ComVividsolutionsJtsGeomgraphEdge_set_pts_(self, pts);
  ComVividsolutionsJtsGeomgraphGraphComponent_set_label_(self, label);
}

ComVividsolutionsJtsGeomgraphEdge *new_ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(IOSObjectArray *pts, ComVividsolutionsJtsGeomgraphLabel *label) {
  ComVividsolutionsJtsGeomgraphEdge *self = [ComVividsolutionsJtsGeomgraphEdge alloc];
  ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(self, pts, label);
  return self;
}

void ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_(ComVividsolutionsJtsGeomgraphEdge *self, IOSObjectArray *pts) {
  ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(self, pts, nil);
}

ComVividsolutionsJtsGeomgraphEdge *new_ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_(IOSObjectArray *pts) {
  ComVividsolutionsJtsGeomgraphEdge *self = [ComVividsolutionsJtsGeomgraphEdge alloc];
  ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_(self, pts);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphEdge)
