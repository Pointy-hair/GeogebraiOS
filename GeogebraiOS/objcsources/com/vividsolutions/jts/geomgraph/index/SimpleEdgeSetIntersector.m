//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/geomgraph/index/SimpleEdgeSetIntersector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/index/EdgeSetIntersector.h"
#include "com/vividsolutions/jts/geomgraph/index/SegmentIntersector.h"
#include "com/vividsolutions/jts/geomgraph/index/SimpleEdgeSetIntersector.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector ()

- (void)computeIntersectsWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e0
                         withComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e1
      withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:(ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *)si;

@end

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_computeIntersectsWithComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphIndexSegmentIntersector_(ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector *self, ComVividsolutionsJtsGeomgraphEdge *e0, ComVividsolutionsJtsGeomgraphEdge *e1, ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *si);

@implementation ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector

- (instancetype)init {
  ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_init(self);
  return self;
}

- (void)computeIntersectionsWithJavaUtilList:(id<JavaUtilList>)edges
withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:(ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *)si
                                 withBoolean:(jboolean)testAllSegments {
  nOverlaps_ = 0;
  for (id<JavaUtilIterator> i0 = [((id<JavaUtilList>) nil_chk(edges)) iterator]; [((id<JavaUtilIterator>) nil_chk(i0)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *edge0 = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i0 next], [ComVividsolutionsJtsGeomgraphEdge class]);
    for (id<JavaUtilIterator> i1 = [edges iterator]; [((id<JavaUtilIterator>) nil_chk(i1)) hasNext]; ) {
      ComVividsolutionsJtsGeomgraphEdge *edge1 = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i1 next], [ComVividsolutionsJtsGeomgraphEdge class]);
      if (testAllSegments || edge0 != edge1) ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_computeIntersectsWithComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphIndexSegmentIntersector_(self, edge0, edge1, si);
    }
  }
}

- (void)computeIntersectionsWithJavaUtilList:(id<JavaUtilList>)edges0
                            withJavaUtilList:(id<JavaUtilList>)edges1
withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:(ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *)si {
  nOverlaps_ = 0;
  for (id<JavaUtilIterator> i0 = [((id<JavaUtilList>) nil_chk(edges0)) iterator]; [((id<JavaUtilIterator>) nil_chk(i0)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *edge0 = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i0 next], [ComVividsolutionsJtsGeomgraphEdge class]);
    for (id<JavaUtilIterator> i1 = [((id<JavaUtilList>) nil_chk(edges1)) iterator]; [((id<JavaUtilIterator>) nil_chk(i1)) hasNext]; ) {
      ComVividsolutionsJtsGeomgraphEdge *edge1 = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i1 next], [ComVividsolutionsJtsGeomgraphEdge class]);
      ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_computeIntersectsWithComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphIndexSegmentIntersector_(self, edge0, edge1, si);
    }
  }
}

- (void)computeIntersectsWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e0
                         withComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e1
      withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:(ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *)si {
  ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_computeIntersectsWithComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphIndexSegmentIntersector_(self, e0, e1, si);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleEdgeSetIntersector", NULL, 0x1, NULL, NULL },
    { "computeIntersectionsWithJavaUtilList:withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:withBoolean:", "computeIntersections", "V", 0x1, NULL, NULL },
    { "computeIntersectionsWithJavaUtilList:withJavaUtilList:withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:", "computeIntersections", "V", 0x1, NULL, NULL },
    { "computeIntersectsWithComVividsolutionsJtsGeomgraphEdge:withComVividsolutionsJtsGeomgraphEdge:withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:", "computeIntersects", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nOverlaps_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector = { 2, "SimpleEdgeSetIntersector", "com.vividsolutions.jts.geomgraph.index", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector;
}

@end

void ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_init(ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector *self) {
  ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector_init(self);
}

ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector *new_ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_init() {
  ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector *self = [ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector alloc];
  ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_init(self);
  return self;
}

void ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector_computeIntersectsWithComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomgraphIndexSegmentIntersector_(ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector *self, ComVividsolutionsJtsGeomgraphEdge *e0, ComVividsolutionsJtsGeomgraphEdge *e1, ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *si) {
  IOSObjectArray *pts0 = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e0)) getCoordinates];
  IOSObjectArray *pts1 = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e1)) getCoordinates];
  for (jint i0 = 0; i0 < ((IOSObjectArray *) nil_chk(pts0))->size_ - 1; i0++) {
    for (jint i1 = 0; i1 < ((IOSObjectArray *) nil_chk(pts1))->size_ - 1; i1++) {
      [((ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *) nil_chk(si)) addIntersectionsWithComVividsolutionsJtsGeomgraphEdge:e0 withInt:i0 withComVividsolutionsJtsGeomgraphEdge:e1 withInt:i1];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphIndexSimpleEdgeSetIntersector)
