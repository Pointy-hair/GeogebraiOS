//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/index/strtree/AbstractSTRtree.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/index/ItemVisitor.h"
#include "com/vividsolutions/jts/index/strtree/AbstractNode.h"
#include "com/vividsolutions/jts/index/strtree/AbstractSTRtree.h"
#include "com/vividsolutions/jts/index/strtree/Boundable.h"
#include "com/vividsolutions/jts/index/strtree/ItemBoundable.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsIndexStrtreeAbstractSTRtree () {
 @public
  jboolean built_;
  JavaUtilArrayList *itemBoundables_;
  jint nodeCapacity_;
}

- (ComVividsolutionsJtsIndexStrtreeAbstractNode *)createHigherLevelsWithJavaUtilList:(id<JavaUtilList>)boundablesOfALevel
                                                                             withInt:(jint)level;

- (void)queryWithId:(id)searchBounds
withComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node
   withJavaUtilList:(id<JavaUtilList>)matches;

- (void)queryWithId:(id)searchBounds
withComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node
withComVividsolutionsJtsIndexItemVisitor:(id<ComVividsolutionsJtsIndexItemVisitor>)visitor;

- (id<JavaUtilList>)itemsTreeWithComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node;

- (jboolean)removeItemWithComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node
                                                                withId:(id)item;

- (jboolean)removeWithId:(id)searchBounds
withComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node
                  withId:(id)item;

- (void)boundablesAtLevelWithInt:(jint)level
withComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)top
          withJavaUtilCollection:(id<JavaUtilCollection>)boundables;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree, itemBoundables_, JavaUtilArrayList *)

__attribute__((unused)) static ComVividsolutionsJtsIndexStrtreeAbstractNode *ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_createHigherLevelsWithJavaUtilList_withInt_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, id<JavaUtilList> boundablesOfALevel, jint level);

__attribute__((unused)) static void ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilList_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, id searchBounds, ComVividsolutionsJtsIndexStrtreeAbstractNode *node, id<JavaUtilList> matches);

__attribute__((unused)) static void ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withComVividsolutionsJtsIndexItemVisitor_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, id searchBounds, ComVividsolutionsJtsIndexStrtreeAbstractNode *node, id<ComVividsolutionsJtsIndexItemVisitor> visitor);

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_itemsTreeWithComVividsolutionsJtsIndexStrtreeAbstractNode_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, ComVividsolutionsJtsIndexStrtreeAbstractNode *node);

__attribute__((unused)) static jboolean ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeItemWithComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, ComVividsolutionsJtsIndexStrtreeAbstractNode *node, id item);

__attribute__((unused)) static jboolean ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, id searchBounds, ComVividsolutionsJtsIndexStrtreeAbstractNode *node, id item);

__attribute__((unused)) static void ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_boundablesAtLevelWithInt_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilCollection_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, jint level, ComVividsolutionsJtsIndexStrtreeAbstractNode *top, id<JavaUtilCollection> boundables);

@interface ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp : NSObject
@end

@implementation ComVividsolutionsJtsIndexStrtreeAbstractSTRtree

- (instancetype)initWithInt:(jint)nodeCapacity {
  ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_initWithInt_(self, nodeCapacity);
  return self;
}

- (void)build {
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_(!built_);
  ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_set_root_(self, [((JavaUtilArrayList *) nil_chk(itemBoundables_)) isEmpty] ? [self createNodeWithInt:0] : ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_createHigherLevelsWithJavaUtilList_withInt_(self, itemBoundables_, -1));
  built_ = YES;
}

- (ComVividsolutionsJtsIndexStrtreeAbstractNode *)createNodeWithInt:(jint)level {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)createParentBoundablesWithJavaUtilList:(id<JavaUtilList>)childBoundables
                                                   withInt:(jint)newLevel {
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_(![((id<JavaUtilList>) nil_chk(childBoundables)) isEmpty]);
  JavaUtilArrayList *parentBoundables = [new_JavaUtilArrayList_init() autorelease];
  [parentBoundables addWithId:[self createNodeWithInt:newLevel]];
  JavaUtilArrayList *sortedChildBoundables = [new_JavaUtilArrayList_initWithJavaUtilCollection_(childBoundables) autorelease];
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(sortedChildBoundables, [self getComparator]);
  for (id<JavaUtilIterator> i = [sortedChildBoundables iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> childBoundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if ([((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk([self lastNodeWithJavaUtilList:parentBoundables])) getChildBoundables])) size] == [self getNodeCapacity]) {
      [parentBoundables addWithId:[self createNodeWithInt:newLevel]];
    }
    [((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk([self lastNodeWithJavaUtilList:parentBoundables])) addChildBoundableWithComVividsolutionsJtsIndexStrtreeBoundable:childBoundable];
  }
  return parentBoundables;
}

- (ComVividsolutionsJtsIndexStrtreeAbstractNode *)lastNodeWithJavaUtilList:(id<JavaUtilList>)nodes {
  return (ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast([nodes getWithInt:[((id<JavaUtilList>) nil_chk(nodes)) size] - 1], [ComVividsolutionsJtsIndexStrtreeAbstractNode class]);
}

- (jint)compareDoublesWithDouble:(jdouble)a
                      withDouble:(jdouble)b {
  return a > b ? 1 : a < b ? -1 : 0;
}

- (ComVividsolutionsJtsIndexStrtreeAbstractNode *)createHigherLevelsWithJavaUtilList:(id<JavaUtilList>)boundablesOfALevel
                                                                             withInt:(jint)level {
  return ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_createHigherLevelsWithJavaUtilList_withInt_(self, boundablesOfALevel, level);
}

- (ComVividsolutionsJtsIndexStrtreeAbstractNode *)getRoot {
  if (!built_) [self build];
  return root_;
}

- (jint)getNodeCapacity {
  return nodeCapacity_;
}

- (jint)size {
  if (!built_) {
    [self build];
  }
  if ([((JavaUtilArrayList *) nil_chk(itemBoundables_)) isEmpty]) {
    return 0;
  }
  return [self sizeWithComVividsolutionsJtsIndexStrtreeAbstractNode:root_];
}

- (jint)sizeWithComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node {
  jint size = 0;
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(node)) getChildBoundables])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> childBoundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeAbstractNode class]]) {
      size += [self sizeWithComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeAbstractNode class])];
    }
    else if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeItemBoundable class]]) {
      size += 1;
    }
  }
  return size;
}

- (jint)depth {
  if (!built_) {
    [self build];
  }
  if ([((JavaUtilArrayList *) nil_chk(itemBoundables_)) isEmpty]) {
    return 0;
  }
  return [self depthWithComVividsolutionsJtsIndexStrtreeAbstractNode:root_];
}

- (jint)depthWithComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node {
  jint maxChildDepth = 0;
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(node)) getChildBoundables])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> childBoundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeAbstractNode class]]) {
      jint childDepth = [self depthWithComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeAbstractNode class])];
      if (childDepth > maxChildDepth) maxChildDepth = childDepth;
    }
  }
  return maxChildDepth + 1;
}

- (void)insertWithId:(id)bounds
              withId:(id)item {
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(!built_, @"Cannot insert items into an STR packed R-tree after it has been built.");
  [((JavaUtilArrayList *) nil_chk(itemBoundables_)) addWithId:[new_ComVividsolutionsJtsIndexStrtreeItemBoundable_initWithId_withId_(bounds, item) autorelease]];
}

- (id<JavaUtilList>)queryWithId:(id)searchBounds {
  if (!built_) {
    [self build];
  }
  JavaUtilArrayList *matches = [new_JavaUtilArrayList_init() autorelease];
  if ([((JavaUtilArrayList *) nil_chk(itemBoundables_)) isEmpty]) {
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(root_)) getBounds] == nil);
    return matches;
  }
  if ([((id<ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp>) nil_chk([self getIntersectsOp])) intersectsWithId:[((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(root_)) getBounds] withId:searchBounds]) {
    ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilList_(self, searchBounds, root_, matches);
  }
  return matches;
}

- (void)queryWithId:(id)searchBounds
withComVividsolutionsJtsIndexItemVisitor:(id<ComVividsolutionsJtsIndexItemVisitor>)visitor {
  if (!built_) {
    [self build];
  }
  if ([((JavaUtilArrayList *) nil_chk(itemBoundables_)) isEmpty]) {
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(root_)) getBounds] == nil);
  }
  if ([((id<ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp>) nil_chk([self getIntersectsOp])) intersectsWithId:[((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(root_)) getBounds] withId:searchBounds]) {
    ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withComVividsolutionsJtsIndexItemVisitor_(self, searchBounds, root_, visitor);
  }
}

- (id<ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp>)getIntersectsOp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)queryWithId:(id)searchBounds
withComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node
   withJavaUtilList:(id<JavaUtilList>)matches {
  ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilList_(self, searchBounds, node, matches);
}

- (void)queryWithId:(id)searchBounds
withComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node
withComVividsolutionsJtsIndexItemVisitor:(id<ComVividsolutionsJtsIndexItemVisitor>)visitor {
  ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withComVividsolutionsJtsIndexItemVisitor_(self, searchBounds, node, visitor);
}

- (id<JavaUtilList>)itemsTree {
  if (!built_) {
    [self build];
  }
  id<JavaUtilList> valuesTree = ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_itemsTreeWithComVividsolutionsJtsIndexStrtreeAbstractNode_(self, root_);
  if (valuesTree == nil) return [new_JavaUtilArrayList_init() autorelease];
  return valuesTree;
}

- (id<JavaUtilList>)itemsTreeWithComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node {
  return ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_itemsTreeWithComVividsolutionsJtsIndexStrtreeAbstractNode_(self, node);
}

- (jboolean)removeWithId:(id)searchBounds
                  withId:(id)item {
  if (!built_) {
    [self build];
  }
  if ([((JavaUtilArrayList *) nil_chk(itemBoundables_)) isEmpty]) {
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(root_)) getBounds] == nil);
  }
  if ([((id<ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp>) nil_chk([self getIntersectsOp])) intersectsWithId:[((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(root_)) getBounds] withId:searchBounds]) {
    return ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(self, searchBounds, root_, item);
  }
  return NO;
}

- (jboolean)removeItemWithComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node
                                                                withId:(id)item {
  return ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeItemWithComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(self, node, item);
}

- (jboolean)removeWithId:(id)searchBounds
withComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)node
                  withId:(id)item {
  return ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(self, searchBounds, node, item);
}

- (id<JavaUtilList>)boundablesAtLevelWithInt:(jint)level {
  JavaUtilArrayList *boundables = [new_JavaUtilArrayList_init() autorelease];
  ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_boundablesAtLevelWithInt_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilCollection_(self, level, root_, boundables);
  return boundables;
}

- (void)boundablesAtLevelWithInt:(jint)level
withComVividsolutionsJtsIndexStrtreeAbstractNode:(ComVividsolutionsJtsIndexStrtreeAbstractNode *)top
          withJavaUtilCollection:(id<JavaUtilCollection>)boundables {
  ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_boundablesAtLevelWithInt_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilCollection_(self, level, top, boundables);
}

- (id<JavaUtilComparator>)getComparator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(itemBoundables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "AbstractSTRtree", NULL, 0x1, NULL, NULL },
    { "build", NULL, "V", 0x1, NULL, NULL },
    { "createNodeWithInt:", "createNode", "Lcom.vividsolutions.jts.index.strtree.AbstractNode;", 0x404, NULL, NULL },
    { "createParentBoundablesWithJavaUtilList:withInt:", "createParentBoundables", "Ljava.util.List;", 0x4, NULL, NULL },
    { "lastNodeWithJavaUtilList:", "lastNode", "Lcom.vividsolutions.jts.index.strtree.AbstractNode;", 0x4, NULL, NULL },
    { "compareDoublesWithDouble:withDouble:", "compareDoubles", "I", 0x4, NULL, NULL },
    { "createHigherLevelsWithJavaUtilList:withInt:", "createHigherLevels", "Lcom.vividsolutions.jts.index.strtree.AbstractNode;", 0x2, NULL, NULL },
    { "getRoot", NULL, "Lcom.vividsolutions.jts.index.strtree.AbstractNode;", 0x1, NULL, NULL },
    { "getNodeCapacity", NULL, "I", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x4, NULL, NULL },
    { "sizeWithComVividsolutionsJtsIndexStrtreeAbstractNode:", "size", "I", 0x4, NULL, NULL },
    { "depth", NULL, "I", 0x4, NULL, NULL },
    { "depthWithComVividsolutionsJtsIndexStrtreeAbstractNode:", "depth", "I", 0x4, NULL, NULL },
    { "insertWithId:withId:", "insert", "V", 0x4, NULL, NULL },
    { "queryWithId:", "query", "Ljava.util.List;", 0x4, NULL, NULL },
    { "queryWithId:withComVividsolutionsJtsIndexItemVisitor:", "query", "V", 0x4, NULL, NULL },
    { "getIntersectsOp", NULL, "Lcom.vividsolutions.jts.index.strtree.AbstractSTRtree$IntersectsOp;", 0x404, NULL, NULL },
    { "queryWithId:withComVividsolutionsJtsIndexStrtreeAbstractNode:withJavaUtilList:", "query", "V", 0x2, NULL, NULL },
    { "queryWithId:withComVividsolutionsJtsIndexStrtreeAbstractNode:withComVividsolutionsJtsIndexItemVisitor:", "query", "V", 0x2, NULL, NULL },
    { "itemsTree", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "itemsTreeWithComVividsolutionsJtsIndexStrtreeAbstractNode:", "itemsTree", "Ljava.util.List;", 0x2, NULL, NULL },
    { "removeWithId:withId:", "remove", "Z", 0x4, NULL, NULL },
    { "removeItemWithComVividsolutionsJtsIndexStrtreeAbstractNode:withId:", "removeItem", "Z", 0x2, NULL, NULL },
    { "removeWithId:withComVividsolutionsJtsIndexStrtreeAbstractNode:withId:", "remove", "Z", 0x2, NULL, NULL },
    { "boundablesAtLevelWithInt:", "boundablesAtLevel", "Ljava.util.List;", 0x4, NULL, NULL },
    { "boundablesAtLevelWithInt:withComVividsolutionsJtsIndexStrtreeAbstractNode:withJavaUtilCollection:", "boundablesAtLevel", "V", 0x2, NULL, NULL },
    { "getComparator", NULL, "Ljava.util.Comparator;", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x4, "Lcom.vividsolutions.jts.index.strtree.AbstractNode;", NULL, NULL,  },
    { "built_", NULL, 0x2, "Z", NULL, NULL,  },
    { "itemBoundables_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "nodeCapacity_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lcom.vividsolutions.jts.index.strtree.AbstractSTRtree$IntersectsOp;"};
  static const J2ObjcClassInfo _ComVividsolutionsJtsIndexStrtreeAbstractSTRtree = { 2, "AbstractSTRtree", "com.vividsolutions.jts.index.strtree", NULL, 0x401, 27, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComVividsolutionsJtsIndexStrtreeAbstractSTRtree;
}

@end

void ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_initWithInt_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, jint nodeCapacity) {
  NSObject_init(self);
  self->built_ = NO;
  ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_setAndConsume_itemBoundables_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(nodeCapacity > 1, @"Node capacity must be greater than 1");
  self->nodeCapacity_ = nodeCapacity;
}

ComVividsolutionsJtsIndexStrtreeAbstractNode *ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_createHigherLevelsWithJavaUtilList_withInt_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, id<JavaUtilList> boundablesOfALevel, jint level) {
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_(![((id<JavaUtilList>) nil_chk(boundablesOfALevel)) isEmpty]);
  id<JavaUtilList> parentBoundables = [self createParentBoundablesWithJavaUtilList:boundablesOfALevel withInt:level + 1];
  if ([((id<JavaUtilList>) nil_chk(parentBoundables)) size] == 1) {
    return (ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast([parentBoundables getWithInt:0], [ComVividsolutionsJtsIndexStrtreeAbstractNode class]);
  }
  return ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_createHigherLevelsWithJavaUtilList_withInt_(self, parentBoundables, level + 1);
}

void ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilList_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, id searchBounds, ComVividsolutionsJtsIndexStrtreeAbstractNode *node, id<JavaUtilList> matches) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(node)) getChildBoundables])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> childBoundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if (![((id<ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp>) nil_chk([self getIntersectsOp])) intersectsWithId:[((id<ComVividsolutionsJtsIndexStrtreeBoundable>) nil_chk(childBoundable)) getBounds] withId:searchBounds]) {
      continue;
    }
    if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeAbstractNode class]]) {
      ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilList_(self, searchBounds, (ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeAbstractNode class]), matches);
    }
    else if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeItemBoundable class]]) {
      [((id<JavaUtilList>) nil_chk(matches)) addWithId:[((ComVividsolutionsJtsIndexStrtreeItemBoundable *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeItemBoundable class])) getItem]];
    }
    else {
      ComVividsolutionsJtsUtilAssert_shouldNeverReachHere();
    }
  }
}

void ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withComVividsolutionsJtsIndexItemVisitor_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, id searchBounds, ComVividsolutionsJtsIndexStrtreeAbstractNode *node, id<ComVividsolutionsJtsIndexItemVisitor> visitor) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(node)) getChildBoundables])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> childBoundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if (![((id<ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp>) nil_chk([self getIntersectsOp])) intersectsWithId:[((id<ComVividsolutionsJtsIndexStrtreeBoundable>) nil_chk(childBoundable)) getBounds] withId:searchBounds]) {
      continue;
    }
    if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeAbstractNode class]]) {
      ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_queryWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withComVividsolutionsJtsIndexItemVisitor_(self, searchBounds, (ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeAbstractNode class]), visitor);
    }
    else if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeItemBoundable class]]) {
      [((id<ComVividsolutionsJtsIndexItemVisitor>) nil_chk(visitor)) visitItemWithId:[((ComVividsolutionsJtsIndexStrtreeItemBoundable *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeItemBoundable class])) getItem]];
    }
    else {
      ComVividsolutionsJtsUtilAssert_shouldNeverReachHere();
    }
  }
}

id<JavaUtilList> ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_itemsTreeWithComVividsolutionsJtsIndexStrtreeAbstractNode_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, ComVividsolutionsJtsIndexStrtreeAbstractNode *node) {
  id<JavaUtilList> valuesTreeForNode = [new_JavaUtilArrayList_init() autorelease];
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(node)) getChildBoundables])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> childBoundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeAbstractNode class]]) {
      id<JavaUtilList> valuesTreeForChild = ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_itemsTreeWithComVividsolutionsJtsIndexStrtreeAbstractNode_(self, (ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeAbstractNode class]));
      if (valuesTreeForChild != nil) [valuesTreeForNode addWithId:valuesTreeForChild];
    }
    else if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeItemBoundable class]]) {
      [valuesTreeForNode addWithId:[((ComVividsolutionsJtsIndexStrtreeItemBoundable *) nil_chk(((ComVividsolutionsJtsIndexStrtreeItemBoundable *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeItemBoundable class])))) getItem]];
    }
    else {
      ComVividsolutionsJtsUtilAssert_shouldNeverReachHere();
    }
  }
  if ([valuesTreeForNode size] <= 0) return nil;
  return valuesTreeForNode;
}

jboolean ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeItemWithComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, ComVividsolutionsJtsIndexStrtreeAbstractNode *node, id item) {
  id<ComVividsolutionsJtsIndexStrtreeBoundable> childToRemove = nil;
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(node)) getChildBoundables])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> childBoundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeItemBoundable class]]) {
      if ([((ComVividsolutionsJtsIndexStrtreeItemBoundable *) nil_chk(((ComVividsolutionsJtsIndexStrtreeItemBoundable *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeItemBoundable class])))) getItem] == item) childToRemove = childBoundable;
    }
  }
  if (childToRemove != nil) {
    [((id<JavaUtilList>) nil_chk([node getChildBoundables])) removeWithId:childToRemove];
    return YES;
  }
  return NO;
}

jboolean ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, id searchBounds, ComVividsolutionsJtsIndexStrtreeAbstractNode *node, id item) {
  jboolean found = ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeItemWithComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(self, node, item);
  if (found) return YES;
  ComVividsolutionsJtsIndexStrtreeAbstractNode *childToPrune = nil;
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(node)) getChildBoundables])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> childBoundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if (![((id<ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp>) nil_chk([self getIntersectsOp])) intersectsWithId:[((id<ComVividsolutionsJtsIndexStrtreeBoundable>) nil_chk(childBoundable)) getBounds] withId:searchBounds]) {
      continue;
    }
    if ([childBoundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeAbstractNode class]]) {
      found = ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_removeWithId_withComVividsolutionsJtsIndexStrtreeAbstractNode_withId_(self, searchBounds, (ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeAbstractNode class]), item);
      if (found) {
        childToPrune = (ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast(childBoundable, [ComVividsolutionsJtsIndexStrtreeAbstractNode class]);
        break;
      }
    }
  }
  if (childToPrune != nil) {
    if ([((id<JavaUtilList>) nil_chk([childToPrune getChildBoundables])) isEmpty]) {
      [((id<JavaUtilList>) nil_chk([node getChildBoundables])) removeWithId:childToPrune];
    }
  }
  return found;
}

void ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_boundablesAtLevelWithInt_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilCollection_(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree *self, jint level, ComVividsolutionsJtsIndexStrtreeAbstractNode *top, id<JavaUtilCollection> boundables) {
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_(level > -2);
  if ([((ComVividsolutionsJtsIndexStrtreeAbstractNode *) nil_chk(top)) getLevel] == level) {
    [((id<JavaUtilCollection>) nil_chk(boundables)) addWithId:top];
    return;
  }
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([top getChildBoundables])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsIndexStrtreeBoundable> boundable = (id<ComVividsolutionsJtsIndexStrtreeBoundable>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsIndexStrtreeBoundable));
    if ([boundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeAbstractNode class]]) {
      ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_boundablesAtLevelWithInt_withComVividsolutionsJtsIndexStrtreeAbstractNode_withJavaUtilCollection_(self, level, (ComVividsolutionsJtsIndexStrtreeAbstractNode *) check_class_cast(boundable, [ComVividsolutionsJtsIndexStrtreeAbstractNode class]), boundables);
    }
    else {
      ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_([boundable isKindOfClass:[ComVividsolutionsJtsIndexStrtreeItemBoundable class]]);
      if (level == -1) {
        [((id<JavaUtilCollection>) nil_chk(boundables)) addWithId:boundable];
      }
    }
  }
  return;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree)

@implementation ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "intersectsWithId:withId:", "intersects", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp = { 2, "IntersectsOp", "com.vividsolutions.jts.index.strtree", "AbstractSTRtree", 0x60c, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsIndexStrtreeAbstractSTRtree_IntersectsOp)
