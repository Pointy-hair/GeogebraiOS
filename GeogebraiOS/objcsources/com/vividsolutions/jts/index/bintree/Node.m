//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/index/bintree/Node.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/index/bintree/Interval.h"
#include "com/vividsolutions/jts/index/bintree/Key.h"
#include "com/vividsolutions/jts/index/bintree/Node.h"
#include "com/vividsolutions/jts/index/bintree/NodeBase.h"
#include "com/vividsolutions/jts/util/Assert.h"

@interface ComVividsolutionsJtsIndexBintreeNode () {
 @public
  ComVividsolutionsJtsIndexBintreeInterval *interval_;
  jdouble centre_;
  jint level_;
}

- (ComVividsolutionsJtsIndexBintreeNode *)getSubnodeWithInt:(jint)index;

- (ComVividsolutionsJtsIndexBintreeNode *)createSubnodeWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsIndexBintreeNode, interval_, ComVividsolutionsJtsIndexBintreeInterval *)

__attribute__((unused)) static ComVividsolutionsJtsIndexBintreeNode *ComVividsolutionsJtsIndexBintreeNode_getSubnodeWithInt_(ComVividsolutionsJtsIndexBintreeNode *self, jint index);

__attribute__((unused)) static ComVividsolutionsJtsIndexBintreeNode *ComVividsolutionsJtsIndexBintreeNode_createSubnodeWithInt_(ComVividsolutionsJtsIndexBintreeNode *self, jint index);

@implementation ComVividsolutionsJtsIndexBintreeNode

+ (ComVividsolutionsJtsIndexBintreeNode *)createNodeWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)itemInterval {
  return ComVividsolutionsJtsIndexBintreeNode_createNodeWithComVividsolutionsJtsIndexBintreeInterval_(itemInterval);
}

+ (ComVividsolutionsJtsIndexBintreeNode *)createExpandedWithComVividsolutionsJtsIndexBintreeNode:(ComVividsolutionsJtsIndexBintreeNode *)node
                                                    withComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)addInterval {
  return ComVividsolutionsJtsIndexBintreeNode_createExpandedWithComVividsolutionsJtsIndexBintreeNode_withComVividsolutionsJtsIndexBintreeInterval_(node, addInterval);
}

- (instancetype)initWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)interval
                                                         withInt:(jint)level {
  ComVividsolutionsJtsIndexBintreeNode_initWithComVividsolutionsJtsIndexBintreeInterval_withInt_(self, interval, level);
  return self;
}

- (ComVividsolutionsJtsIndexBintreeInterval *)getInterval {
  return interval_;
}

- (jboolean)isSearchMatchWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)itemInterval {
  return [((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(itemInterval)) overlapsWithComVividsolutionsJtsIndexBintreeInterval:interval_];
}

- (ComVividsolutionsJtsIndexBintreeNode *)getNodeWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)searchInterval {
  jint subnodeIndex = ComVividsolutionsJtsIndexBintreeNodeBase_getSubnodeIndexWithComVividsolutionsJtsIndexBintreeInterval_withDouble_(searchInterval, centre_);
  if (subnodeIndex != -1) {
    ComVividsolutionsJtsIndexBintreeNode *node = ComVividsolutionsJtsIndexBintreeNode_getSubnodeWithInt_(self, subnodeIndex);
    return [((ComVividsolutionsJtsIndexBintreeNode *) nil_chk(node)) getNodeWithComVividsolutionsJtsIndexBintreeInterval:searchInterval];
  }
  else {
    return self;
  }
}

- (ComVividsolutionsJtsIndexBintreeNodeBase *)findWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)searchInterval {
  jint subnodeIndex = ComVividsolutionsJtsIndexBintreeNodeBase_getSubnodeIndexWithComVividsolutionsJtsIndexBintreeInterval_withDouble_(searchInterval, centre_);
  if (subnodeIndex == -1) return self;
  if (IOSObjectArray_Get(nil_chk(subnode_), subnodeIndex) != nil) {
    ComVividsolutionsJtsIndexBintreeNode *node = IOSObjectArray_Get(subnode_, subnodeIndex);
    return [((ComVividsolutionsJtsIndexBintreeNode *) nil_chk(node)) findWithComVividsolutionsJtsIndexBintreeInterval:searchInterval];
  }
  return self;
}

- (void)insertWithComVividsolutionsJtsIndexBintreeNode:(ComVividsolutionsJtsIndexBintreeNode *)node {
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_(interval_ == nil || [interval_ containsWithComVividsolutionsJtsIndexBintreeInterval:((ComVividsolutionsJtsIndexBintreeNode *) nil_chk(node))->interval_]);
  jint index = ComVividsolutionsJtsIndexBintreeNodeBase_getSubnodeIndexWithComVividsolutionsJtsIndexBintreeInterval_withDouble_(((ComVividsolutionsJtsIndexBintreeNode *) nil_chk(node))->interval_, centre_);
  if (node->level_ == level_ - 1) {
    IOSObjectArray_Set(nil_chk(subnode_), index, node);
  }
  else {
    ComVividsolutionsJtsIndexBintreeNode *childNode = ComVividsolutionsJtsIndexBintreeNode_createSubnodeWithInt_(self, index);
    [((ComVividsolutionsJtsIndexBintreeNode *) nil_chk(childNode)) insertWithComVividsolutionsJtsIndexBintreeNode:node];
    IOSObjectArray_Set(nil_chk(subnode_), index, childNode);
  }
}

- (ComVividsolutionsJtsIndexBintreeNode *)getSubnodeWithInt:(jint)index {
  return ComVividsolutionsJtsIndexBintreeNode_getSubnodeWithInt_(self, index);
}

- (ComVividsolutionsJtsIndexBintreeNode *)createSubnodeWithInt:(jint)index {
  return ComVividsolutionsJtsIndexBintreeNode_createSubnodeWithInt_(self, index);
}

- (void)dealloc {
  RELEASE_(interval_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createNodeWithComVividsolutionsJtsIndexBintreeInterval:", "createNode", "Lcom.vividsolutions.jts.index.bintree.Node;", 0x9, NULL, NULL },
    { "createExpandedWithComVividsolutionsJtsIndexBintreeNode:withComVividsolutionsJtsIndexBintreeInterval:", "createExpanded", "Lcom.vividsolutions.jts.index.bintree.Node;", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsIndexBintreeInterval:withInt:", "Node", NULL, 0x1, NULL, NULL },
    { "getInterval", NULL, "Lcom.vividsolutions.jts.index.bintree.Interval;", 0x1, NULL, NULL },
    { "isSearchMatchWithComVividsolutionsJtsIndexBintreeInterval:", "isSearchMatch", "Z", 0x4, NULL, NULL },
    { "getNodeWithComVividsolutionsJtsIndexBintreeInterval:", "getNode", "Lcom.vividsolutions.jts.index.bintree.Node;", 0x1, NULL, NULL },
    { "findWithComVividsolutionsJtsIndexBintreeInterval:", "find", "Lcom.vividsolutions.jts.index.bintree.NodeBase;", 0x1, NULL, NULL },
    { "insertWithComVividsolutionsJtsIndexBintreeNode:", "insert", "V", 0x0, NULL, NULL },
    { "getSubnodeWithInt:", "getSubnode", "Lcom.vividsolutions.jts.index.bintree.Node;", 0x2, NULL, NULL },
    { "createSubnodeWithInt:", "createSubnode", "Lcom.vividsolutions.jts.index.bintree.Node;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "interval_", NULL, 0x2, "Lcom.vividsolutions.jts.index.bintree.Interval;", NULL, NULL,  },
    { "centre_", NULL, 0x2, "D", NULL, NULL,  },
    { "level_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsIndexBintreeNode = { 2, "Node", "com.vividsolutions.jts.index.bintree", NULL, 0x1, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsIndexBintreeNode;
}

@end

ComVividsolutionsJtsIndexBintreeNode *ComVividsolutionsJtsIndexBintreeNode_createNodeWithComVividsolutionsJtsIndexBintreeInterval_(ComVividsolutionsJtsIndexBintreeInterval *itemInterval) {
  ComVividsolutionsJtsIndexBintreeNode_initialize();
  ComVividsolutionsJtsIndexBintreeKey *key = [new_ComVividsolutionsJtsIndexBintreeKey_initWithComVividsolutionsJtsIndexBintreeInterval_(itemInterval) autorelease];
  ComVividsolutionsJtsIndexBintreeNode *node = [new_ComVividsolutionsJtsIndexBintreeNode_initWithComVividsolutionsJtsIndexBintreeInterval_withInt_([key getInterval], [key getLevel]) autorelease];
  return node;
}

ComVividsolutionsJtsIndexBintreeNode *ComVividsolutionsJtsIndexBintreeNode_createExpandedWithComVividsolutionsJtsIndexBintreeNode_withComVividsolutionsJtsIndexBintreeInterval_(ComVividsolutionsJtsIndexBintreeNode *node, ComVividsolutionsJtsIndexBintreeInterval *addInterval) {
  ComVividsolutionsJtsIndexBintreeNode_initialize();
  ComVividsolutionsJtsIndexBintreeInterval *expandInt = [new_ComVividsolutionsJtsIndexBintreeInterval_initWithComVividsolutionsJtsIndexBintreeInterval_(addInterval) autorelease];
  if (node != nil) [expandInt expandToIncludeWithComVividsolutionsJtsIndexBintreeInterval:node->interval_];
  ComVividsolutionsJtsIndexBintreeNode *largerNode = ComVividsolutionsJtsIndexBintreeNode_createNodeWithComVividsolutionsJtsIndexBintreeInterval_(expandInt);
  if (node != nil) [((ComVividsolutionsJtsIndexBintreeNode *) nil_chk(largerNode)) insertWithComVividsolutionsJtsIndexBintreeNode:node];
  return largerNode;
}

void ComVividsolutionsJtsIndexBintreeNode_initWithComVividsolutionsJtsIndexBintreeInterval_withInt_(ComVividsolutionsJtsIndexBintreeNode *self, ComVividsolutionsJtsIndexBintreeInterval *interval, jint level) {
  ComVividsolutionsJtsIndexBintreeNodeBase_init(self);
  ComVividsolutionsJtsIndexBintreeNode_set_interval_(self, interval);
  self->level_ = level;
  self->centre_ = ([((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(interval)) getMin] + [interval getMax]) / 2;
}

ComVividsolutionsJtsIndexBintreeNode *new_ComVividsolutionsJtsIndexBintreeNode_initWithComVividsolutionsJtsIndexBintreeInterval_withInt_(ComVividsolutionsJtsIndexBintreeInterval *interval, jint level) {
  ComVividsolutionsJtsIndexBintreeNode *self = [ComVividsolutionsJtsIndexBintreeNode alloc];
  ComVividsolutionsJtsIndexBintreeNode_initWithComVividsolutionsJtsIndexBintreeInterval_withInt_(self, interval, level);
  return self;
}

ComVividsolutionsJtsIndexBintreeNode *ComVividsolutionsJtsIndexBintreeNode_getSubnodeWithInt_(ComVividsolutionsJtsIndexBintreeNode *self, jint index) {
  if (IOSObjectArray_Get(nil_chk(self->subnode_), index) == nil) {
    IOSObjectArray_Set(self->subnode_, index, ComVividsolutionsJtsIndexBintreeNode_createSubnodeWithInt_(self, index));
  }
  return IOSObjectArray_Get(self->subnode_, index);
}

ComVividsolutionsJtsIndexBintreeNode *ComVividsolutionsJtsIndexBintreeNode_createSubnodeWithInt_(ComVividsolutionsJtsIndexBintreeNode *self, jint index) {
  jdouble min = 0.0;
  jdouble max = 0.0;
  switch (index) {
    case 0:
    min = [((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(self->interval_)) getMin];
    max = self->centre_;
    break;
    case 1:
    min = self->centre_;
    max = [((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(self->interval_)) getMax];
    break;
  }
  ComVividsolutionsJtsIndexBintreeInterval *subInt = [new_ComVividsolutionsJtsIndexBintreeInterval_initWithDouble_withDouble_(min, max) autorelease];
  ComVividsolutionsJtsIndexBintreeNode *node = [new_ComVividsolutionsJtsIndexBintreeNode_initWithComVividsolutionsJtsIndexBintreeInterval_withInt_(subInt, self->level_ - 1) autorelease];
  return node;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsIndexBintreeNode)
