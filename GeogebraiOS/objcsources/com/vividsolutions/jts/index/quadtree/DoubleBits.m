//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/index/quadtree/DoubleBits.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/index/quadtree/DoubleBits.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"

@interface ComVividsolutionsJtsIndexQuadtreeDoubleBits () {
 @public
  jdouble x_;
  jlong xBits_;
}

@end

@implementation ComVividsolutionsJtsIndexQuadtreeDoubleBits

+ (jdouble)powerOf2WithInt:(jint)exp {
  return ComVividsolutionsJtsIndexQuadtreeDoubleBits_powerOf2WithInt_(exp);
}

+ (jint)exponentWithDouble:(jdouble)d {
  return ComVividsolutionsJtsIndexQuadtreeDoubleBits_exponentWithDouble_(d);
}

+ (jdouble)truncateToPowerOfTwoWithDouble:(jdouble)d {
  return ComVividsolutionsJtsIndexQuadtreeDoubleBits_truncateToPowerOfTwoWithDouble_(d);
}

+ (NSString *)toBinaryStringWithDouble:(jdouble)d {
  return ComVividsolutionsJtsIndexQuadtreeDoubleBits_toBinaryStringWithDouble_(d);
}

+ (jdouble)maximumCommonMantissaWithDouble:(jdouble)d1
                                withDouble:(jdouble)d2 {
  return ComVividsolutionsJtsIndexQuadtreeDoubleBits_maximumCommonMantissaWithDouble_withDouble_(d1, d2);
}

- (instancetype)initWithDouble:(jdouble)x {
  ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(self, x);
  return self;
}

- (jdouble)getDouble {
  return JavaLangDouble_longBitsToDoubleWithLong_(xBits_);
}

- (jint)biasedExponent {
  jint signExp = (jint) (RShift64(xBits_, 52));
  jint exp = signExp & (jint) 0x07ff;
  return exp;
}

- (jint)getExponent {
  return [self biasedExponent] - ComVividsolutionsJtsIndexQuadtreeDoubleBits_EXPONENT_BIAS;
}

- (void)zeroLowerBitsWithInt:(jint)nBits {
  jlong invMask = (LShift64(1LL, nBits)) - 1LL;
  jlong mask = ~invMask;
  xBits_ &= mask;
}

- (jint)getBitWithInt:(jint)i {
  jlong mask = (LShift64(1LL, i));
  return (xBits_ & mask) != 0 ? 1 : 0;
}

- (jint)numCommonMantissaBitsWithComVividsolutionsJtsIndexQuadtreeDoubleBits:(ComVividsolutionsJtsIndexQuadtreeDoubleBits *)db {
  for (jint i = 0; i < 52; i++) {
    jint bitIndex = i + 12;
    if ([self getBitWithInt:i] != [((ComVividsolutionsJtsIndexQuadtreeDoubleBits *) nil_chk(db)) getBitWithInt:i]) return i;
  }
  return 52;
}

- (NSString *)description {
  NSString *numStr = JavaLangLong_toBinaryStringWithLong_(xBits_);
  NSString *zero64 = @"0000000000000000000000000000000000000000000000000000000000000000";
  NSString *padStr = JreStrcat("$$", zero64, numStr);
  NSString *bitStr = [padStr substring:((jint) [padStr length]) - 64];
  NSString *str = JreStrcat("$$$CI$$$D$", [((NSString *) nil_chk(bitStr)) substring:0 endIndex:1], @"  ", [bitStr substring:1 endIndex:12], '(', [self getExponent], @") ", [bitStr substring:12], @" [ ", x_, @" ]");
  return str;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "powerOf2WithInt:", "powerOf2", "D", 0x9, NULL, NULL },
    { "exponentWithDouble:", "exponent", "I", 0x9, NULL, NULL },
    { "truncateToPowerOfTwoWithDouble:", "truncateToPowerOfTwo", "D", 0x9, NULL, NULL },
    { "toBinaryStringWithDouble:", "toBinaryString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "maximumCommonMantissaWithDouble:withDouble:", "maximumCommonMantissa", "D", 0x9, NULL, NULL },
    { "initWithDouble:", "DoubleBits", NULL, 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x1, NULL, NULL },
    { "biasedExponent", NULL, "I", 0x1, NULL, NULL },
    { "getExponent", NULL, "I", 0x1, NULL, NULL },
    { "zeroLowerBitsWithInt:", "zeroLowerBits", "V", 0x1, NULL, NULL },
    { "getBitWithInt:", "getBit", "I", 0x1, NULL, NULL },
    { "numCommonMantissaBitsWithComVividsolutionsJtsIndexQuadtreeDoubleBits:", "numCommonMantissaBits", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EXPONENT_BIAS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsIndexQuadtreeDoubleBits_EXPONENT_BIAS },
    { "x_", NULL, 0x2, "D", NULL, NULL,  },
    { "xBits_", NULL, 0x2, "J", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsIndexQuadtreeDoubleBits = { 2, "DoubleBits", "com.vividsolutions.jts.index.quadtree", NULL, 0x1, 13, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsIndexQuadtreeDoubleBits;
}

@end

jdouble ComVividsolutionsJtsIndexQuadtreeDoubleBits_powerOf2WithInt_(jint exp) {
  ComVividsolutionsJtsIndexQuadtreeDoubleBits_initialize();
  if (exp > 1023 || exp < -1022) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Exponent out of bounds") autorelease];
  jlong expBias = exp + ComVividsolutionsJtsIndexQuadtreeDoubleBits_EXPONENT_BIAS;
  jlong bits = LShift64((jlong) expBias, 52);
  return JavaLangDouble_longBitsToDoubleWithLong_(bits);
}

jint ComVividsolutionsJtsIndexQuadtreeDoubleBits_exponentWithDouble_(jdouble d) {
  ComVividsolutionsJtsIndexQuadtreeDoubleBits_initialize();
  ComVividsolutionsJtsIndexQuadtreeDoubleBits *db = [new_ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(d) autorelease];
  return [db getExponent];
}

jdouble ComVividsolutionsJtsIndexQuadtreeDoubleBits_truncateToPowerOfTwoWithDouble_(jdouble d) {
  ComVividsolutionsJtsIndexQuadtreeDoubleBits_initialize();
  ComVividsolutionsJtsIndexQuadtreeDoubleBits *db = [new_ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(d) autorelease];
  [db zeroLowerBitsWithInt:52];
  return [db getDouble];
}

NSString *ComVividsolutionsJtsIndexQuadtreeDoubleBits_toBinaryStringWithDouble_(jdouble d) {
  ComVividsolutionsJtsIndexQuadtreeDoubleBits_initialize();
  ComVividsolutionsJtsIndexQuadtreeDoubleBits *db = [new_ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(d) autorelease];
  return [db description];
}

jdouble ComVividsolutionsJtsIndexQuadtreeDoubleBits_maximumCommonMantissaWithDouble_withDouble_(jdouble d1, jdouble d2) {
  ComVividsolutionsJtsIndexQuadtreeDoubleBits_initialize();
  if (d1 == 0.0 || d2 == 0.0) return 0.0;
  ComVividsolutionsJtsIndexQuadtreeDoubleBits *db1 = [new_ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(d1) autorelease];
  ComVividsolutionsJtsIndexQuadtreeDoubleBits *db2 = [new_ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(d2) autorelease];
  if ([db1 getExponent] != [db2 getExponent]) return 0.0;
  jint maxCommon = [db1 numCommonMantissaBitsWithComVividsolutionsJtsIndexQuadtreeDoubleBits:db2];
  [db1 zeroLowerBitsWithInt:64 - (12 + maxCommon)];
  return [db1 getDouble];
}

void ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(ComVividsolutionsJtsIndexQuadtreeDoubleBits *self, jdouble x) {
  NSObject_init(self);
  self->x_ = x;
  self->xBits_ = JavaLangDouble_doubleToLongBitsWithDouble_(x);
}

ComVividsolutionsJtsIndexQuadtreeDoubleBits *new_ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(jdouble x) {
  ComVividsolutionsJtsIndexQuadtreeDoubleBits *self = [ComVividsolutionsJtsIndexQuadtreeDoubleBits alloc];
  ComVividsolutionsJtsIndexQuadtreeDoubleBits_initWithDouble_(self, x);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsIndexQuadtreeDoubleBits)
