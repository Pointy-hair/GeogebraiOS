//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/noding/snapround/SimpleSnapRounder.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/RobustLineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/PrecisionModel.h"
#include "com/vividsolutions/jts/noding/IntersectionFinderAdder.h"
#include "com/vividsolutions/jts/noding/MCIndexNoder.h"
#include "com/vividsolutions/jts/noding/NodedSegmentString.h"
#include "com/vividsolutions/jts/noding/NodingValidator.h"
#include "com/vividsolutions/jts/noding/SinglePassNoder.h"
#include "com/vividsolutions/jts/noding/snapround/HotPixel.h"
#include "com/vividsolutions/jts/noding/snapround/SimpleSnapRounder.h"
#include "java/lang/Exception.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder () {
 @public
  ComVividsolutionsJtsGeomPrecisionModel *pm_;
  ComVividsolutionsJtsAlgorithmLineIntersector *li_;
  jdouble scaleFactor_;
  id<JavaUtilCollection> nodedSegStrings_;
}

- (void)checkCorrectnessWithJavaUtilCollection:(id<JavaUtilCollection>)inputSegmentStrings;

- (void)snapRoundWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
withComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li;

- (id<JavaUtilList>)findInteriorIntersectionsWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
                   withComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li;

- (void)computeSnapsWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
                    withJavaUtilCollection:(id<JavaUtilCollection>)snapPts;

- (void)computeSnapsWithComVividsolutionsJtsNodingNodedSegmentString:(ComVividsolutionsJtsNodingNodedSegmentString *)ss
                                              withJavaUtilCollection:(id<JavaUtilCollection>)snapPts;

- (void)computeVertexSnapsWithComVividsolutionsJtsNodingNodedSegmentString:(ComVividsolutionsJtsNodingNodedSegmentString *)e0
                          withComVividsolutionsJtsNodingNodedSegmentString:(ComVividsolutionsJtsNodingNodedSegmentString *)e1;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder, pm_, ComVividsolutionsJtsGeomPrecisionModel *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder, nodedSegStrings_, id<JavaUtilCollection>)

__attribute__((unused)) static void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_snapRoundWithJavaUtilCollection_withComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, id<JavaUtilCollection> segStrings, ComVividsolutionsJtsAlgorithmLineIntersector *li);

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_findInteriorIntersectionsWithJavaUtilCollection_withComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, id<JavaUtilCollection> segStrings, ComVividsolutionsJtsAlgorithmLineIntersector *li);

__attribute__((unused)) static void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeSnapsWithJavaUtilCollection_withJavaUtilCollection_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, id<JavaUtilCollection> segStrings, id<JavaUtilCollection> snapPts);

__attribute__((unused)) static void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeSnapsWithComVividsolutionsJtsNodingNodedSegmentString_withJavaUtilCollection_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, ComVividsolutionsJtsNodingNodedSegmentString *ss, id<JavaUtilCollection> snapPts);

__attribute__((unused)) static void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeVertexSnapsWithComVividsolutionsJtsNodingNodedSegmentString_withComVividsolutionsJtsNodingNodedSegmentString_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, ComVividsolutionsJtsNodingNodedSegmentString *e0, ComVividsolutionsJtsNodingNodedSegmentString *e1);

@implementation ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder

- (instancetype)initWithComVividsolutionsJtsGeomPrecisionModel:(ComVividsolutionsJtsGeomPrecisionModel *)pm {
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_initWithComVividsolutionsJtsGeomPrecisionModel_(self, pm);
  return self;
}

- (id<JavaUtilCollection>)getNodedSubstrings {
  return ComVividsolutionsJtsNodingNodedSegmentString_getNodedSubstringsWithJavaUtilCollection_(nodedSegStrings_);
}

- (void)computeNodesWithJavaUtilCollection:(id<JavaUtilCollection>)inputSegmentStrings {
  self->nodedSegStrings_ = inputSegmentStrings;
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_snapRoundWithJavaUtilCollection_withComVividsolutionsJtsAlgorithmLineIntersector_(self, inputSegmentStrings, li_);
}

- (void)checkCorrectnessWithJavaUtilCollection:(id<JavaUtilCollection>)inputSegmentStrings {
  id<JavaUtilCollection> resultSegStrings = ComVividsolutionsJtsNodingNodedSegmentString_getNodedSubstringsWithJavaUtilCollection_(inputSegmentStrings);
  ComVividsolutionsJtsNodingNodingValidator *nv = new_ComVividsolutionsJtsNodingNodingValidator_initWithJavaUtilCollection_(resultSegStrings);
  @try {
    [nv checkValid];
  }
  @catch (JavaLangException *ex) {
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
  }
}

- (void)snapRoundWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
withComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li {
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_snapRoundWithJavaUtilCollection_withComVividsolutionsJtsAlgorithmLineIntersector_(self, segStrings, li);
}

- (id<JavaUtilList>)findInteriorIntersectionsWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
                   withComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li {
  return ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_findInteriorIntersectionsWithJavaUtilCollection_withComVividsolutionsJtsAlgorithmLineIntersector_(self, segStrings, li);
}

- (void)computeSnapsWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
                    withJavaUtilCollection:(id<JavaUtilCollection>)snapPts {
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeSnapsWithJavaUtilCollection_withJavaUtilCollection_(self, segStrings, snapPts);
}

- (void)computeSnapsWithComVividsolutionsJtsNodingNodedSegmentString:(ComVividsolutionsJtsNodingNodedSegmentString *)ss
                                              withJavaUtilCollection:(id<JavaUtilCollection>)snapPts {
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeSnapsWithComVividsolutionsJtsNodingNodedSegmentString_withJavaUtilCollection_(self, ss, snapPts);
}

- (void)computeVertexSnapsWithJavaUtilCollection:(id<JavaUtilCollection>)edges {
  for (id<JavaUtilIterator> i0 = [((id<JavaUtilCollection>) nil_chk(edges)) iterator]; [((id<JavaUtilIterator>) nil_chk(i0)) hasNext]; ) {
    ComVividsolutionsJtsNodingNodedSegmentString *edge0 = (ComVividsolutionsJtsNodingNodedSegmentString *) check_class_cast([i0 next], [ComVividsolutionsJtsNodingNodedSegmentString class]);
    for (id<JavaUtilIterator> i1 = [edges iterator]; [((id<JavaUtilIterator>) nil_chk(i1)) hasNext]; ) {
      ComVividsolutionsJtsNodingNodedSegmentString *edge1 = (ComVividsolutionsJtsNodingNodedSegmentString *) check_class_cast([i1 next], [ComVividsolutionsJtsNodingNodedSegmentString class]);
      ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeVertexSnapsWithComVividsolutionsJtsNodingNodedSegmentString_withComVividsolutionsJtsNodingNodedSegmentString_(self, edge0, edge1);
    }
  }
}

- (void)computeVertexSnapsWithComVividsolutionsJtsNodingNodedSegmentString:(ComVividsolutionsJtsNodingNodedSegmentString *)e0
                          withComVividsolutionsJtsNodingNodedSegmentString:(ComVividsolutionsJtsNodingNodedSegmentString *)e1 {
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeVertexSnapsWithComVividsolutionsJtsNodingNodedSegmentString_withComVividsolutionsJtsNodingNodedSegmentString_(self, e0, e1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomPrecisionModel:", "SimpleSnapRounder", NULL, 0x1, NULL, NULL },
    { "getNodedSubstrings", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "computeNodesWithJavaUtilCollection:", "computeNodes", "V", 0x1, NULL, NULL },
    { "checkCorrectnessWithJavaUtilCollection:", "checkCorrectness", "V", 0x2, NULL, NULL },
    { "snapRoundWithJavaUtilCollection:withComVividsolutionsJtsAlgorithmLineIntersector:", "snapRound", "V", 0x2, NULL, NULL },
    { "findInteriorIntersectionsWithJavaUtilCollection:withComVividsolutionsJtsAlgorithmLineIntersector:", "findInteriorIntersections", "Ljava.util.List;", 0x2, NULL, NULL },
    { "computeSnapsWithJavaUtilCollection:withJavaUtilCollection:", "computeSnaps", "V", 0x2, NULL, NULL },
    { "computeSnapsWithComVividsolutionsJtsNodingNodedSegmentString:withJavaUtilCollection:", "computeSnaps", "V", 0x2, NULL, NULL },
    { "computeVertexSnapsWithJavaUtilCollection:", "computeVertexSnaps", "V", 0x1, NULL, NULL },
    { "computeVertexSnapsWithComVividsolutionsJtsNodingNodedSegmentString:withComVividsolutionsJtsNodingNodedSegmentString:", "computeVertexSnaps", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pm_", NULL, 0x12, "Lcom.vividsolutions.jts.geom.PrecisionModel;", NULL, NULL,  },
    { "li_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", NULL, NULL,  },
    { "scaleFactor_", NULL, 0x12, "D", NULL, NULL,  },
    { "nodedSegStrings_", NULL, 0x2, "Ljava.util.Collection;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder = { 2, "SimpleSnapRounder", "com.vividsolutions.jts.noding.snapround", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder;
}

@end

void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_initWithComVividsolutionsJtsGeomPrecisionModel_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, ComVividsolutionsJtsGeomPrecisionModel *pm) {
  (void) NSObject_init(self);
  self->pm_ = pm;
  self->li_ = new_ComVividsolutionsJtsAlgorithmRobustLineIntersector_init();
  [self->li_ setPrecisionModelWithComVividsolutionsJtsGeomPrecisionModel:pm];
  self->scaleFactor_ = [((ComVividsolutionsJtsGeomPrecisionModel *) nil_chk(pm)) getScale];
}

ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *new_ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_initWithComVividsolutionsJtsGeomPrecisionModel_(ComVividsolutionsJtsGeomPrecisionModel *pm) {
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self = [ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder alloc];
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_initWithComVividsolutionsJtsGeomPrecisionModel_(self, pm);
  return self;
}

void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_snapRoundWithJavaUtilCollection_withComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, id<JavaUtilCollection> segStrings, ComVividsolutionsJtsAlgorithmLineIntersector *li) {
  id<JavaUtilList> intersections = ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_findInteriorIntersectionsWithJavaUtilCollection_withComVividsolutionsJtsAlgorithmLineIntersector_(self, segStrings, li);
  ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeSnapsWithJavaUtilCollection_withJavaUtilCollection_(self, segStrings, intersections);
  [self computeVertexSnapsWithJavaUtilCollection:segStrings];
}

id<JavaUtilList> ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_findInteriorIntersectionsWithJavaUtilCollection_withComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, id<JavaUtilCollection> segStrings, ComVividsolutionsJtsAlgorithmLineIntersector *li) {
  ComVividsolutionsJtsNodingIntersectionFinderAdder *intFinderAdder = new_ComVividsolutionsJtsNodingIntersectionFinderAdder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(li);
  ComVividsolutionsJtsNodingSinglePassNoder *noder = new_ComVividsolutionsJtsNodingMCIndexNoder_init();
  [noder setSegmentIntersectorWithComVividsolutionsJtsNodingSegmentIntersector:intFinderAdder];
  [noder computeNodesWithJavaUtilCollection:segStrings];
  return [intFinderAdder getInteriorIntersections];
}

void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeSnapsWithJavaUtilCollection_withJavaUtilCollection_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, id<JavaUtilCollection> segStrings, id<JavaUtilCollection> snapPts) {
  for (id<JavaUtilIterator> i0 = [((id<JavaUtilCollection>) nil_chk(segStrings)) iterator]; [((id<JavaUtilIterator>) nil_chk(i0)) hasNext]; ) {
    ComVividsolutionsJtsNodingNodedSegmentString *ss = (ComVividsolutionsJtsNodingNodedSegmentString *) check_class_cast([i0 next], [ComVividsolutionsJtsNodingNodedSegmentString class]);
    ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeSnapsWithComVividsolutionsJtsNodingNodedSegmentString_withJavaUtilCollection_(self, ss, snapPts);
  }
}

void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeSnapsWithComVividsolutionsJtsNodingNodedSegmentString_withJavaUtilCollection_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, ComVividsolutionsJtsNodingNodedSegmentString *ss, id<JavaUtilCollection> snapPts) {
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(snapPts)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomCoordinate *snapPt = (ComVividsolutionsJtsGeomCoordinate *) check_class_cast([it next], [ComVividsolutionsJtsGeomCoordinate class]);
    ComVividsolutionsJtsNodingSnaproundHotPixel *hotPixel = new_ComVividsolutionsJtsNodingSnaproundHotPixel_initWithComVividsolutionsJtsGeomCoordinate_withDouble_withComVividsolutionsJtsAlgorithmLineIntersector_(snapPt, self->scaleFactor_, self->li_);
    for (jint i = 0; i < [((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(ss)) size] - 1; i++) {
      [hotPixel addSnappedNodeWithComVividsolutionsJtsNodingNodedSegmentString:ss withInt:i];
    }
  }
}

void ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder_computeVertexSnapsWithComVividsolutionsJtsNodingNodedSegmentString_withComVividsolutionsJtsNodingNodedSegmentString_(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder *self, ComVividsolutionsJtsNodingNodedSegmentString *e0, ComVividsolutionsJtsNodingNodedSegmentString *e1) {
  IOSObjectArray *pts0 = [((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(e0)) getCoordinates];
  IOSObjectArray *pts1 = [((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(e1)) getCoordinates];
  for (jint i0 = 0; i0 < ((IOSObjectArray *) nil_chk(pts0))->size_ - 1; i0++) {
    ComVividsolutionsJtsNodingSnaproundHotPixel *hotPixel = new_ComVividsolutionsJtsNodingSnaproundHotPixel_initWithComVividsolutionsJtsGeomCoordinate_withDouble_withComVividsolutionsJtsAlgorithmLineIntersector_(IOSObjectArray_Get(pts0, i0), self->scaleFactor_, self->li_);
    for (jint i1 = 0; i1 < ((IOSObjectArray *) nil_chk(pts1))->size_ - 1; i1++) {
      if (e0 == e1) {
        if (i0 == i1) continue;
      }
      jboolean isNodeAdded = [hotPixel addSnappedNodeWithComVividsolutionsJtsNodingNodedSegmentString:e1 withInt:i1];
      if (isNodeAdded) {
        [e0 addIntersectionWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(pts0, i0) withInt:i0];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingSnaproundSimpleSnapRounder)
