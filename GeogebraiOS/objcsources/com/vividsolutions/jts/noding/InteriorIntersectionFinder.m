//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/noding/InteriorIntersectionFinder.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/noding/InteriorIntersectionFinder.h"
#include "com/vividsolutions/jts/noding/SegmentString.h"

@interface ComVividsolutionsJtsNodingInteriorIntersectionFinder () {
 @public
  jboolean isCheckEndSegmentsOnly_;
  ComVividsolutionsJtsAlgorithmLineIntersector *li_;
  ComVividsolutionsJtsGeomCoordinate *interiorIntersection_;
  IOSObjectArray *intSegments_;
}

- (jboolean)isEndSegmentWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)segStr
                                                            withInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingInteriorIntersectionFinder, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingInteriorIntersectionFinder, interiorIntersection_, ComVividsolutionsJtsGeomCoordinate *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingInteriorIntersectionFinder, intSegments_, IOSObjectArray *)

__attribute__((unused)) static jboolean ComVividsolutionsJtsNodingInteriorIntersectionFinder_isEndSegmentWithComVividsolutionsJtsNodingSegmentString_withInt_(ComVividsolutionsJtsNodingInteriorIntersectionFinder *self, id<ComVividsolutionsJtsNodingSegmentString> segStr, jint index);

@implementation ComVividsolutionsJtsNodingInteriorIntersectionFinder

- (instancetype)initWithComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li {
  ComVividsolutionsJtsNodingInteriorIntersectionFinder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(self, li);
  return self;
}

- (void)setCheckEndSegmentsOnlyWithBoolean:(jboolean)isCheckEndSegmentsOnly {
  self->isCheckEndSegmentsOnly_ = isCheckEndSegmentsOnly;
}

- (jboolean)hasIntersection {
  return interiorIntersection_ != nil;
}

- (ComVividsolutionsJtsGeomCoordinate *)getInteriorIntersection {
  return interiorIntersection_;
}

- (IOSObjectArray *)getIntersectionSegments {
  return intSegments_;
}

- (void)processIntersectionsWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e0
                                                                withInt:(jint)segIndex0
                            withComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e1
                                                                withInt:(jint)segIndex1 {
  if ([self hasIntersection]) return;
  if (e0 == e1 && segIndex0 == segIndex1) return;
  if (isCheckEndSegmentsOnly_) {
    jboolean isEndSegPresent = ComVividsolutionsJtsNodingInteriorIntersectionFinder_isEndSegmentWithComVividsolutionsJtsNodingSegmentString_withInt_(self, e0, segIndex0) || ComVividsolutionsJtsNodingInteriorIntersectionFinder_isEndSegmentWithComVividsolutionsJtsNodingSegmentString_withInt_(self, e1, segIndex1);
    if (!isEndSegPresent) return;
  }
  ComVividsolutionsJtsGeomCoordinate *p00 = IOSObjectArray_Get(nil_chk([((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(e0)) getCoordinates]), segIndex0);
  ComVividsolutionsJtsGeomCoordinate *p01 = IOSObjectArray_Get(nil_chk([e0 getCoordinates]), segIndex0 + 1);
  ComVividsolutionsJtsGeomCoordinate *p10 = IOSObjectArray_Get(nil_chk([((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(e1)) getCoordinates]), segIndex1);
  ComVividsolutionsJtsGeomCoordinate *p11 = IOSObjectArray_Get(nil_chk([e1 getCoordinates]), segIndex1 + 1);
  [((ComVividsolutionsJtsAlgorithmLineIntersector *) nil_chk(li_)) computeIntersectionWithComVividsolutionsJtsGeomCoordinate:p00 withComVividsolutionsJtsGeomCoordinate:p01 withComVividsolutionsJtsGeomCoordinate:p10 withComVividsolutionsJtsGeomCoordinate:p11];
  if ([li_ hasIntersection]) {
    if ([li_ isInteriorIntersection]) {
      intSegments_ = [IOSObjectArray newArrayWithLength:4 type:ComVividsolutionsJtsGeomCoordinate_class_()];
      (void) IOSObjectArray_Set(intSegments_, 0, p00);
      (void) IOSObjectArray_Set(intSegments_, 1, p01);
      (void) IOSObjectArray_Set(intSegments_, 2, p10);
      (void) IOSObjectArray_Set(intSegments_, 3, p11);
      interiorIntersection_ = [li_ getIntersectionWithInt:0];
    }
  }
}

- (jboolean)isEndSegmentWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)segStr
                                                            withInt:(jint)index {
  return ComVividsolutionsJtsNodingInteriorIntersectionFinder_isEndSegmentWithComVividsolutionsJtsNodingSegmentString_withInt_(self, segStr, index);
}

- (jboolean)isDone {
  return interiorIntersection_ != nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsAlgorithmLineIntersector:", "InteriorIntersectionFinder", NULL, 0x1, NULL, NULL },
    { "setCheckEndSegmentsOnlyWithBoolean:", "setCheckEndSegmentsOnly", "V", 0x1, NULL, NULL },
    { "hasIntersection", NULL, "Z", 0x1, NULL, NULL },
    { "getInteriorIntersection", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getIntersectionSegments", NULL, "[Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "processIntersectionsWithComVividsolutionsJtsNodingSegmentString:withInt:withComVividsolutionsJtsNodingSegmentString:withInt:", "processIntersections", "V", 0x1, NULL, NULL },
    { "isEndSegmentWithComVividsolutionsJtsNodingSegmentString:withInt:", "isEndSegment", "Z", 0x2, NULL, NULL },
    { "isDone", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isCheckEndSegmentsOnly_", NULL, 0x2, "Z", NULL, NULL,  },
    { "li_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", NULL, NULL,  },
    { "interiorIntersection_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "intSegments_", NULL, 0x2, "[Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingInteriorIntersectionFinder = { 2, "InteriorIntersectionFinder", "com.vividsolutions.jts.noding", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingInteriorIntersectionFinder;
}

@end

void ComVividsolutionsJtsNodingInteriorIntersectionFinder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsNodingInteriorIntersectionFinder *self, ComVividsolutionsJtsAlgorithmLineIntersector *li) {
  (void) NSObject_init(self);
  self->isCheckEndSegmentsOnly_ = NO;
  self->interiorIntersection_ = nil;
  self->intSegments_ = nil;
  self->li_ = li;
  self->interiorIntersection_ = nil;
}

ComVividsolutionsJtsNodingInteriorIntersectionFinder *new_ComVividsolutionsJtsNodingInteriorIntersectionFinder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsAlgorithmLineIntersector *li) {
  ComVividsolutionsJtsNodingInteriorIntersectionFinder *self = [ComVividsolutionsJtsNodingInteriorIntersectionFinder alloc];
  ComVividsolutionsJtsNodingInteriorIntersectionFinder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(self, li);
  return self;
}

jboolean ComVividsolutionsJtsNodingInteriorIntersectionFinder_isEndSegmentWithComVividsolutionsJtsNodingSegmentString_withInt_(ComVividsolutionsJtsNodingInteriorIntersectionFinder *self, id<ComVividsolutionsJtsNodingSegmentString> segStr, jint index) {
  if (index == 0) return YES;
  if (index >= [((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(segStr)) size] - 2) return YES;
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingInteriorIntersectionFinder)
