//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/noding/NodingValidator.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/RobustLineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/noding/NodingValidator.h"
#include "com/vividsolutions/jts/noding/SegmentString.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"

@interface ComVividsolutionsJtsNodingNodingValidator () {
 @public
  ComVividsolutionsJtsAlgorithmLineIntersector *li_;
  id<JavaUtilCollection> segStrings_;
}

- (void)checkCollapses;

- (void)checkCollapsesWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)ss;

- (void)checkCollapseWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2;

- (void)checkInteriorIntersections;

- (void)checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)ss0
                                  withComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)ss1;

- (void)checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e0
                                                                      withInt:(jint)segIndex0
                                  withComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e1
                                                                      withInt:(jint)segIndex1;

- (jboolean)hasInteriorIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li
                                             withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                                             withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1;

- (void)checkEndPtVertexIntersections;

- (void)checkEndPtVertexIntersectionsWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)testPt
                                                     withJavaUtilCollection:(id<JavaUtilCollection>)segStrings;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingNodingValidator, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingNodingValidator, segStrings_, id<JavaUtilCollection>)

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodingValidator_checkCollapses(ComVividsolutionsJtsNodingNodingValidator *self);

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodingValidator_checkCollapsesWithComVividsolutionsJtsNodingSegmentString_(ComVividsolutionsJtsNodingNodingValidator *self, id<ComVividsolutionsJtsNodingSegmentString> ss);

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodingValidator_checkCollapseWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsNodingNodingValidator *self, ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1, ComVividsolutionsJtsGeomCoordinate *p2);

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersections(ComVividsolutionsJtsNodingNodingValidator *self);

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString_withComVividsolutionsJtsNodingSegmentString_(ComVividsolutionsJtsNodingNodingValidator *self, id<ComVividsolutionsJtsNodingSegmentString> ss0, id<ComVividsolutionsJtsNodingSegmentString> ss1);

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString_withInt_withComVividsolutionsJtsNodingSegmentString_withInt_(ComVividsolutionsJtsNodingNodingValidator *self, id<ComVividsolutionsJtsNodingSegmentString> e0, jint segIndex0, id<ComVividsolutionsJtsNodingSegmentString> e1, jint segIndex1);

__attribute__((unused)) static jboolean ComVividsolutionsJtsNodingNodingValidator_hasInteriorIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsNodingNodingValidator *self, ComVividsolutionsJtsAlgorithmLineIntersector *li, ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1);

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersections(ComVividsolutionsJtsNodingNodingValidator *self);

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersectionsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilCollection_(ComVividsolutionsJtsNodingNodingValidator *self, ComVividsolutionsJtsGeomCoordinate *testPt, id<JavaUtilCollection> segStrings);

@implementation ComVividsolutionsJtsNodingNodingValidator

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings {
  ComVividsolutionsJtsNodingNodingValidator_initWithJavaUtilCollection_(self, segStrings);
  return self;
}

- (void)checkValid {
  ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersections(self);
  ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersections(self);
  ComVividsolutionsJtsNodingNodingValidator_checkCollapses(self);
}

- (void)checkCollapses {
  ComVividsolutionsJtsNodingNodingValidator_checkCollapses(self);
}

- (void)checkCollapsesWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)ss {
  ComVividsolutionsJtsNodingNodingValidator_checkCollapsesWithComVividsolutionsJtsNodingSegmentString_(self, ss);
}

- (void)checkCollapseWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2 {
  ComVividsolutionsJtsNodingNodingValidator_checkCollapseWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p0, p1, p2);
}

- (void)checkInteriorIntersections {
  ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersections(self);
}

- (void)checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)ss0
                                  withComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)ss1 {
  ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString_withComVividsolutionsJtsNodingSegmentString_(self, ss0, ss1);
}

- (void)checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e0
                                                                      withInt:(jint)segIndex0
                                  withComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e1
                                                                      withInt:(jint)segIndex1 {
  ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString_withInt_withComVividsolutionsJtsNodingSegmentString_withInt_(self, e0, segIndex0, e1, segIndex1);
}

- (jboolean)hasInteriorIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li
                                             withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                                             withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1 {
  return ComVividsolutionsJtsNodingNodingValidator_hasInteriorIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, li, p0, p1);
}

- (void)checkEndPtVertexIntersections {
  ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersections(self);
}

- (void)checkEndPtVertexIntersectionsWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)testPt
                                                     withJavaUtilCollection:(id<JavaUtilCollection>)segStrings {
  ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersectionsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilCollection_(self, testPt, segStrings);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCollection:", "NodingValidator", NULL, 0x1, NULL, NULL },
    { "checkValid", NULL, "V", 0x1, NULL, NULL },
    { "checkCollapses", NULL, "V", 0x2, NULL, NULL },
    { "checkCollapsesWithComVividsolutionsJtsNodingSegmentString:", "checkCollapses", "V", 0x2, NULL, NULL },
    { "checkCollapseWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "checkCollapse", "V", 0x2, NULL, NULL },
    { "checkInteriorIntersections", NULL, "V", 0x2, NULL, NULL },
    { "checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString:withComVividsolutionsJtsNodingSegmentString:", "checkInteriorIntersections", "V", 0x2, NULL, NULL },
    { "checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString:withInt:withComVividsolutionsJtsNodingSegmentString:withInt:", "checkInteriorIntersections", "V", 0x2, NULL, NULL },
    { "hasInteriorIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "hasInteriorIntersection", "Z", 0x2, NULL, NULL },
    { "checkEndPtVertexIntersections", NULL, "V", 0x2, NULL, NULL },
    { "checkEndPtVertexIntersectionsWithComVividsolutionsJtsGeomCoordinate:withJavaUtilCollection:", "checkEndPtVertexIntersections", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "li_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", NULL, NULL,  },
    { "segStrings_", NULL, 0x2, "Ljava.util.Collection;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingNodingValidator = { 2, "NodingValidator", "com.vividsolutions.jts.noding", NULL, 0x1, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingNodingValidator;
}

@end

void ComVividsolutionsJtsNodingNodingValidator_initWithJavaUtilCollection_(ComVividsolutionsJtsNodingNodingValidator *self, id<JavaUtilCollection> segStrings) {
  (void) NSObject_init(self);
  self->li_ = new_ComVividsolutionsJtsAlgorithmRobustLineIntersector_init();
  self->segStrings_ = segStrings;
}

ComVividsolutionsJtsNodingNodingValidator *new_ComVividsolutionsJtsNodingNodingValidator_initWithJavaUtilCollection_(id<JavaUtilCollection> segStrings) {
  ComVividsolutionsJtsNodingNodingValidator *self = [ComVividsolutionsJtsNodingNodingValidator alloc];
  ComVividsolutionsJtsNodingNodingValidator_initWithJavaUtilCollection_(self, segStrings);
  return self;
}

void ComVividsolutionsJtsNodingNodingValidator_checkCollapses(ComVividsolutionsJtsNodingNodingValidator *self) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(self->segStrings_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsNodingSegmentString> ss = (id<ComVividsolutionsJtsNodingSegmentString>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsNodingSegmentString));
    ComVividsolutionsJtsNodingNodingValidator_checkCollapsesWithComVividsolutionsJtsNodingSegmentString_(self, ss);
  }
}

void ComVividsolutionsJtsNodingNodingValidator_checkCollapsesWithComVividsolutionsJtsNodingSegmentString_(ComVividsolutionsJtsNodingNodingValidator *self, id<ComVividsolutionsJtsNodingSegmentString> ss) {
  IOSObjectArray *pts = [((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(ss)) getCoordinates];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts))->size_ - 2; i++) {
    ComVividsolutionsJtsNodingNodingValidator_checkCollapseWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, IOSObjectArray_Get(pts, i), IOSObjectArray_Get(pts, i + 1), IOSObjectArray_Get(pts, i + 2));
  }
}

void ComVividsolutionsJtsNodingNodingValidator_checkCollapseWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsNodingNodingValidator *self, ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1, ComVividsolutionsJtsGeomCoordinate *p2) {
  if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0)) isEqual:p2]) @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@@@", @"found non-noded collapse at ", p0, p1, p2));
}

void ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersections(ComVividsolutionsJtsNodingNodingValidator *self) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(self->segStrings_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsNodingSegmentString> ss0 = (id<ComVividsolutionsJtsNodingSegmentString>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsNodingSegmentString));
    for (id<JavaUtilIterator> j = [self->segStrings_ iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
      id<ComVividsolutionsJtsNodingSegmentString> ss1 = (id<ComVividsolutionsJtsNodingSegmentString>) check_protocol_cast([j next], @protocol(ComVividsolutionsJtsNodingSegmentString));
      ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString_withComVividsolutionsJtsNodingSegmentString_(self, ss0, ss1);
    }
  }
}

void ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString_withComVividsolutionsJtsNodingSegmentString_(ComVividsolutionsJtsNodingNodingValidator *self, id<ComVividsolutionsJtsNodingSegmentString> ss0, id<ComVividsolutionsJtsNodingSegmentString> ss1) {
  IOSObjectArray *pts0 = [((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(ss0)) getCoordinates];
  IOSObjectArray *pts1 = [((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(ss1)) getCoordinates];
  for (jint i0 = 0; i0 < ((IOSObjectArray *) nil_chk(pts0))->size_ - 1; i0++) {
    for (jint i1 = 0; i1 < ((IOSObjectArray *) nil_chk(pts1))->size_ - 1; i1++) {
      ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString_withInt_withComVividsolutionsJtsNodingSegmentString_withInt_(self, ss0, i0, ss1, i1);
    }
  }
}

void ComVividsolutionsJtsNodingNodingValidator_checkInteriorIntersectionsWithComVividsolutionsJtsNodingSegmentString_withInt_withComVividsolutionsJtsNodingSegmentString_withInt_(ComVividsolutionsJtsNodingNodingValidator *self, id<ComVividsolutionsJtsNodingSegmentString> e0, jint segIndex0, id<ComVividsolutionsJtsNodingSegmentString> e1, jint segIndex1) {
  if (e0 == e1 && segIndex0 == segIndex1) return;
  ComVividsolutionsJtsGeomCoordinate *p00 = IOSObjectArray_Get(nil_chk([((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(e0)) getCoordinates]), segIndex0);
  ComVividsolutionsJtsGeomCoordinate *p01 = IOSObjectArray_Get(nil_chk([e0 getCoordinates]), segIndex0 + 1);
  ComVividsolutionsJtsGeomCoordinate *p10 = IOSObjectArray_Get(nil_chk([((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(e1)) getCoordinates]), segIndex1);
  ComVividsolutionsJtsGeomCoordinate *p11 = IOSObjectArray_Get(nil_chk([e1 getCoordinates]), segIndex1 + 1);
  [((ComVividsolutionsJtsAlgorithmLineIntersector *) nil_chk(self->li_)) computeIntersectionWithComVividsolutionsJtsGeomCoordinate:p00 withComVividsolutionsJtsGeomCoordinate:p01 withComVividsolutionsJtsGeomCoordinate:p10 withComVividsolutionsJtsGeomCoordinate:p11];
  if ([self->li_ hasIntersection]) {
    if ([self->li_ isProper] || ComVividsolutionsJtsNodingNodingValidator_hasInteriorIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, self->li_, p00, p01) || ComVividsolutionsJtsNodingNodingValidator_hasInteriorIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, self->li_, p10, p11)) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@C@$@C@", @"found non-noded intersection at ", p00, '-', p01, @" and ", p10, '-', p11));
    }
  }
}

jboolean ComVividsolutionsJtsNodingNodingValidator_hasInteriorIntersectionWithComVividsolutionsJtsAlgorithmLineIntersector_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsNodingNodingValidator *self, ComVividsolutionsJtsAlgorithmLineIntersector *li, ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1) {
  for (jint i = 0; i < [((ComVividsolutionsJtsAlgorithmLineIntersector *) nil_chk(li)) getIntersectionNum]; i++) {
    ComVividsolutionsJtsGeomCoordinate *intPt = [li getIntersectionWithInt:i];
    if (!([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(intPt)) isEqual:p0] || [intPt isEqual:p1])) return YES;
  }
  return NO;
}

void ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersections(ComVividsolutionsJtsNodingNodingValidator *self) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(self->segStrings_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsNodingSegmentString> ss = (id<ComVividsolutionsJtsNodingSegmentString>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsNodingSegmentString));
    IOSObjectArray *pts = [((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(ss)) getCoordinates];
    ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersectionsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilCollection_(self, IOSObjectArray_Get(nil_chk(pts), 0), self->segStrings_);
    ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersectionsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilCollection_(self, IOSObjectArray_Get(pts, pts->size_ - 1), self->segStrings_);
  }
}

void ComVividsolutionsJtsNodingNodingValidator_checkEndPtVertexIntersectionsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilCollection_(ComVividsolutionsJtsNodingNodingValidator *self, ComVividsolutionsJtsGeomCoordinate *testPt, id<JavaUtilCollection> segStrings) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(segStrings)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComVividsolutionsJtsNodingSegmentString> ss = (id<ComVividsolutionsJtsNodingSegmentString>) check_protocol_cast([i next], @protocol(ComVividsolutionsJtsNodingSegmentString));
    IOSObjectArray *pts = [((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(ss)) getCoordinates];
    for (jint j = 1; j < ((IOSObjectArray *) nil_chk(pts))->size_ - 1; j++) {
      if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(pts, j))) isEqual:testPt]) @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$@", @"found endpt/interior pt intersection at index ", j, @" :pt ", testPt));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingNodingValidator)
