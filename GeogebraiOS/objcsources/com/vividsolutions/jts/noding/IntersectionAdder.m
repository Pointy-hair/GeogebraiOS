//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/noding/IntersectionAdder.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/noding/IntersectionAdder.h"
#include "com/vividsolutions/jts/noding/NodedSegmentString.h"
#include "com/vividsolutions/jts/noding/SegmentString.h"
#include "java/lang/Math.h"

@interface ComVividsolutionsJtsNodingIntersectionAdder () {
 @public
  jboolean hasIntersection__;
  jboolean hasProper_;
  jboolean hasProperInterior_;
  jboolean hasInterior_;
  ComVividsolutionsJtsGeomCoordinate *properIntersectionPoint_;
  ComVividsolutionsJtsAlgorithmLineIntersector *li_;
  jboolean isSelfIntersection_;
}

- (jboolean)isTrivialIntersectionWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e0
                                                                     withInt:(jint)segIndex0
                                 withComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e1
                                                                     withInt:(jint)segIndex1;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingIntersectionAdder, properIntersectionPoint_, ComVividsolutionsJtsGeomCoordinate *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingIntersectionAdder, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)

__attribute__((unused)) static jboolean ComVividsolutionsJtsNodingIntersectionAdder_isTrivialIntersectionWithComVividsolutionsJtsNodingSegmentString_withInt_withComVividsolutionsJtsNodingSegmentString_withInt_(ComVividsolutionsJtsNodingIntersectionAdder *self, id<ComVividsolutionsJtsNodingSegmentString> e0, jint segIndex0, id<ComVividsolutionsJtsNodingSegmentString> e1, jint segIndex1);

@implementation ComVividsolutionsJtsNodingIntersectionAdder

+ (jboolean)isAdjacentSegmentsWithInt:(jint)i1
                              withInt:(jint)i2 {
  return ComVividsolutionsJtsNodingIntersectionAdder_isAdjacentSegmentsWithInt_withInt_(i1, i2);
}

- (instancetype)initWithComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li {
  ComVividsolutionsJtsNodingIntersectionAdder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(self, li);
  return self;
}

- (ComVividsolutionsJtsAlgorithmLineIntersector *)getLineIntersector {
  return li_;
}

- (ComVividsolutionsJtsGeomCoordinate *)getProperIntersectionPoint {
  return properIntersectionPoint_;
}

- (jboolean)hasIntersection {
  return hasIntersection__;
}

- (jboolean)hasProperIntersection {
  return hasProper_;
}

- (jboolean)hasProperInteriorIntersection {
  return hasProperInterior_;
}

- (jboolean)hasInteriorIntersection {
  return hasInterior_;
}

- (jboolean)isTrivialIntersectionWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e0
                                                                     withInt:(jint)segIndex0
                                 withComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e1
                                                                     withInt:(jint)segIndex1 {
  return ComVividsolutionsJtsNodingIntersectionAdder_isTrivialIntersectionWithComVividsolutionsJtsNodingSegmentString_withInt_withComVividsolutionsJtsNodingSegmentString_withInt_(self, e0, segIndex0, e1, segIndex1);
}

- (void)processIntersectionsWithComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e0
                                                                withInt:(jint)segIndex0
                            withComVividsolutionsJtsNodingSegmentString:(id<ComVividsolutionsJtsNodingSegmentString>)e1
                                                                withInt:(jint)segIndex1 {
  if (e0 == e1 && segIndex0 == segIndex1) return;
  numTests_++;
  ComVividsolutionsJtsGeomCoordinate *p00 = IOSObjectArray_Get(nil_chk([((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(e0)) getCoordinates]), segIndex0);
  ComVividsolutionsJtsGeomCoordinate *p01 = IOSObjectArray_Get(nil_chk([e0 getCoordinates]), segIndex0 + 1);
  ComVividsolutionsJtsGeomCoordinate *p10 = IOSObjectArray_Get(nil_chk([((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(e1)) getCoordinates]), segIndex1);
  ComVividsolutionsJtsGeomCoordinate *p11 = IOSObjectArray_Get(nil_chk([e1 getCoordinates]), segIndex1 + 1);
  [((ComVividsolutionsJtsAlgorithmLineIntersector *) nil_chk(li_)) computeIntersectionWithComVividsolutionsJtsGeomCoordinate:p00 withComVividsolutionsJtsGeomCoordinate:p01 withComVividsolutionsJtsGeomCoordinate:p10 withComVividsolutionsJtsGeomCoordinate:p11];
  if ([li_ hasIntersection]) {
    numIntersections_++;
    if ([li_ isInteriorIntersection]) {
      numInteriorIntersections_++;
      hasInterior_ = YES;
    }
    if (!ComVividsolutionsJtsNodingIntersectionAdder_isTrivialIntersectionWithComVividsolutionsJtsNodingSegmentString_withInt_withComVividsolutionsJtsNodingSegmentString_withInt_(self, e0, segIndex0, e1, segIndex1)) {
      hasIntersection__ = YES;
      [((ComVividsolutionsJtsNodingNodedSegmentString *) check_class_cast(e0, [ComVividsolutionsJtsNodingNodedSegmentString class])) addIntersectionsWithComVividsolutionsJtsAlgorithmLineIntersector:li_ withInt:segIndex0 withInt:0];
      [((ComVividsolutionsJtsNodingNodedSegmentString *) check_class_cast(e1, [ComVividsolutionsJtsNodingNodedSegmentString class])) addIntersectionsWithComVividsolutionsJtsAlgorithmLineIntersector:li_ withInt:segIndex1 withInt:1];
      if ([li_ isProper]) {
        numProperIntersections_++;
        hasProper_ = YES;
        hasProperInterior_ = YES;
      }
    }
  }
}

- (jboolean)isDone {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isAdjacentSegmentsWithInt:withInt:", "isAdjacentSegments", "Z", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsAlgorithmLineIntersector:", "IntersectionAdder", NULL, 0x1, NULL, NULL },
    { "getLineIntersector", NULL, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", 0x1, NULL, NULL },
    { "getProperIntersectionPoint", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "hasIntersection", NULL, "Z", 0x1, NULL, NULL },
    { "hasProperIntersection", NULL, "Z", 0x1, NULL, NULL },
    { "hasProperInteriorIntersection", NULL, "Z", 0x1, NULL, NULL },
    { "hasInteriorIntersection", NULL, "Z", 0x1, NULL, NULL },
    { "isTrivialIntersectionWithComVividsolutionsJtsNodingSegmentString:withInt:withComVividsolutionsJtsNodingSegmentString:withInt:", "isTrivialIntersection", "Z", 0x2, NULL, NULL },
    { "processIntersectionsWithComVividsolutionsJtsNodingSegmentString:withInt:withComVividsolutionsJtsNodingSegmentString:withInt:", "processIntersections", "V", 0x1, NULL, NULL },
    { "isDone", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hasIntersection__", "hasIntersection", 0x2, "Z", NULL, NULL,  },
    { "hasProper_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasProperInterior_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasInterior_", NULL, 0x2, "Z", NULL, NULL,  },
    { "properIntersectionPoint_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "li_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", NULL, NULL,  },
    { "isSelfIntersection_", NULL, 0x2, "Z", NULL, NULL,  },
    { "numIntersections_", NULL, 0x1, "I", NULL, NULL,  },
    { "numInteriorIntersections_", NULL, 0x1, "I", NULL, NULL,  },
    { "numProperIntersections_", NULL, 0x1, "I", NULL, NULL,  },
    { "numTests_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingIntersectionAdder = { 2, "IntersectionAdder", "com.vividsolutions.jts.noding", NULL, 0x1, 11, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingIntersectionAdder;
}

@end

jboolean ComVividsolutionsJtsNodingIntersectionAdder_isAdjacentSegmentsWithInt_withInt_(jint i1, jint i2) {
  ComVividsolutionsJtsNodingIntersectionAdder_initialize();
  return JavaLangMath_absWithInt_(i1 - i2) == 1;
}

void ComVividsolutionsJtsNodingIntersectionAdder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsNodingIntersectionAdder *self, ComVividsolutionsJtsAlgorithmLineIntersector *li) {
  (void) NSObject_init(self);
  self->hasIntersection__ = NO;
  self->hasProper_ = NO;
  self->hasProperInterior_ = NO;
  self->hasInterior_ = NO;
  self->properIntersectionPoint_ = nil;
  self->numIntersections_ = 0;
  self->numInteriorIntersections_ = 0;
  self->numProperIntersections_ = 0;
  self->numTests_ = 0;
  self->li_ = li;
}

ComVividsolutionsJtsNodingIntersectionAdder *new_ComVividsolutionsJtsNodingIntersectionAdder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsAlgorithmLineIntersector *li) {
  ComVividsolutionsJtsNodingIntersectionAdder *self = [ComVividsolutionsJtsNodingIntersectionAdder alloc];
  ComVividsolutionsJtsNodingIntersectionAdder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(self, li);
  return self;
}

jboolean ComVividsolutionsJtsNodingIntersectionAdder_isTrivialIntersectionWithComVividsolutionsJtsNodingSegmentString_withInt_withComVividsolutionsJtsNodingSegmentString_withInt_(ComVividsolutionsJtsNodingIntersectionAdder *self, id<ComVividsolutionsJtsNodingSegmentString> e0, jint segIndex0, id<ComVividsolutionsJtsNodingSegmentString> e1, jint segIndex1) {
  if (e0 == e1) {
    if ([((ComVividsolutionsJtsAlgorithmLineIntersector *) nil_chk(self->li_)) getIntersectionNum] == 1) {
      if (ComVividsolutionsJtsNodingIntersectionAdder_isAdjacentSegmentsWithInt_withInt_(segIndex0, segIndex1)) return YES;
      if ([((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(e0)) isClosed]) {
        jint maxSegIndex = [e0 size] - 1;
        if ((segIndex0 == 0 && segIndex1 == maxSegIndex) || (segIndex1 == 0 && segIndex0 == maxSegIndex)) {
          return YES;
        }
      }
    }
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingIntersectionAdder)
