//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/noding/FastNodingValidator.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/RobustLineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/TopologyException.h"
#include "com/vividsolutions/jts/io/WKTWriter.h"
#include "com/vividsolutions/jts/noding/FastNodingValidator.h"
#include "com/vividsolutions/jts/noding/InteriorIntersectionFinder.h"
#include "com/vividsolutions/jts/noding/MCIndexNoder.h"
#include "java/util/Collection.h"

@interface ComVividsolutionsJtsNodingFastNodingValidator () {
 @public
  ComVividsolutionsJtsAlgorithmLineIntersector *li_;
  id<JavaUtilCollection> segStrings_;
  ComVividsolutionsJtsNodingInteriorIntersectionFinder *segInt_;
  jboolean isValid__;
}

- (void)execute;

- (void)checkInteriorIntersections;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingFastNodingValidator, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingFastNodingValidator, segStrings_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingFastNodingValidator, segInt_, ComVividsolutionsJtsNodingInteriorIntersectionFinder *)

__attribute__((unused)) static void ComVividsolutionsJtsNodingFastNodingValidator_execute(ComVividsolutionsJtsNodingFastNodingValidator *self);

__attribute__((unused)) static void ComVividsolutionsJtsNodingFastNodingValidator_checkInteriorIntersections(ComVividsolutionsJtsNodingFastNodingValidator *self);

@implementation ComVividsolutionsJtsNodingFastNodingValidator

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings {
  ComVividsolutionsJtsNodingFastNodingValidator_initWithJavaUtilCollection_(self, segStrings);
  return self;
}

- (jboolean)isValid {
  ComVividsolutionsJtsNodingFastNodingValidator_execute(self);
  return isValid__;
}

- (NSString *)getErrorMessage {
  if (isValid__) return @"no intersections found";
  IOSObjectArray *intSegs = [((ComVividsolutionsJtsNodingInteriorIntersectionFinder *) nil_chk(segInt_)) getIntersectionSegments];
  return JreStrcat("$$$$", @"found non-noded intersection between ", ComVividsolutionsJtsIoWKTWriter_toLineStringWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(IOSObjectArray_Get(nil_chk(intSegs), 0), IOSObjectArray_Get(intSegs, 1)), @" and ", ComVividsolutionsJtsIoWKTWriter_toLineStringWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(IOSObjectArray_Get(intSegs, 2), IOSObjectArray_Get(intSegs, 3)));
}

- (void)checkValid {
  ComVividsolutionsJtsNodingFastNodingValidator_execute(self);
  if (!isValid__) @throw new_ComVividsolutionsJtsGeomTopologyException_initWithNSString_withComVividsolutionsJtsGeomCoordinate_([self getErrorMessage], [((ComVividsolutionsJtsNodingInteriorIntersectionFinder *) nil_chk(segInt_)) getInteriorIntersection]);
}

- (void)execute {
  ComVividsolutionsJtsNodingFastNodingValidator_execute(self);
}

- (void)checkInteriorIntersections {
  ComVividsolutionsJtsNodingFastNodingValidator_checkInteriorIntersections(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCollection:", "FastNodingValidator", NULL, 0x1, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
    { "getErrorMessage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "checkValid", NULL, "V", 0x1, NULL, NULL },
    { "execute", NULL, "V", 0x2, NULL, NULL },
    { "checkInteriorIntersections", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "li_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", NULL, NULL,  },
    { "segStrings_", NULL, 0x2, "Ljava.util.Collection;", NULL, NULL,  },
    { "segInt_", NULL, 0x2, "Lcom.vividsolutions.jts.noding.InteriorIntersectionFinder;", NULL, NULL,  },
    { "isValid__", "isValid", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingFastNodingValidator = { 2, "FastNodingValidator", "com.vividsolutions.jts.noding", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingFastNodingValidator;
}

@end

void ComVividsolutionsJtsNodingFastNodingValidator_initWithJavaUtilCollection_(ComVividsolutionsJtsNodingFastNodingValidator *self, id<JavaUtilCollection> segStrings) {
  (void) NSObject_init(self);
  self->li_ = new_ComVividsolutionsJtsAlgorithmRobustLineIntersector_init();
  self->segInt_ = nil;
  self->isValid__ = YES;
  self->segStrings_ = segStrings;
}

ComVividsolutionsJtsNodingFastNodingValidator *new_ComVividsolutionsJtsNodingFastNodingValidator_initWithJavaUtilCollection_(id<JavaUtilCollection> segStrings) {
  ComVividsolutionsJtsNodingFastNodingValidator *self = [ComVividsolutionsJtsNodingFastNodingValidator alloc];
  ComVividsolutionsJtsNodingFastNodingValidator_initWithJavaUtilCollection_(self, segStrings);
  return self;
}

void ComVividsolutionsJtsNodingFastNodingValidator_execute(ComVividsolutionsJtsNodingFastNodingValidator *self) {
  if (self->segInt_ != nil) return;
  ComVividsolutionsJtsNodingFastNodingValidator_checkInteriorIntersections(self);
}

void ComVividsolutionsJtsNodingFastNodingValidator_checkInteriorIntersections(ComVividsolutionsJtsNodingFastNodingValidator *self) {
  self->isValid__ = YES;
  self->segInt_ = new_ComVividsolutionsJtsNodingInteriorIntersectionFinder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(self->li_);
  ComVividsolutionsJtsNodingMCIndexNoder *noder = new_ComVividsolutionsJtsNodingMCIndexNoder_init();
  [noder setSegmentIntersectorWithComVividsolutionsJtsNodingSegmentIntersector:self->segInt_];
  [noder computeNodesWithJavaUtilCollection:self->segStrings_];
  if ([self->segInt_ hasIntersection]) {
    self->isValid__ = NO;
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingFastNodingValidator)
