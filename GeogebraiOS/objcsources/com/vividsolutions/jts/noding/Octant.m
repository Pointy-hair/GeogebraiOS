//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/noding/Octant.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/noding/Octant.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

@interface ComVividsolutionsJtsNodingOctant ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComVividsolutionsJtsNodingOctant_init(ComVividsolutionsJtsNodingOctant *self);

__attribute__((unused)) static ComVividsolutionsJtsNodingOctant *new_ComVividsolutionsJtsNodingOctant_init() NS_RETURNS_RETAINED;

@implementation ComVividsolutionsJtsNodingOctant

+ (jint)octantWithDouble:(jdouble)dx
              withDouble:(jdouble)dy {
  return ComVividsolutionsJtsNodingOctant_octantWithDouble_withDouble_(dx, dy);
}

+ (jint)octantWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
              withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1 {
  return ComVividsolutionsJtsNodingOctant_octantWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(p0, p1);
}

- (instancetype)init {
  ComVividsolutionsJtsNodingOctant_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "octantWithDouble:withDouble:", "octant", "I", 0x9, NULL, NULL },
    { "octantWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "octant", "I", 0x9, NULL, NULL },
    { "init", "Octant", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingOctant = { 2, "Octant", "com.vividsolutions.jts.noding", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingOctant;
}

@end

jint ComVividsolutionsJtsNodingOctant_octantWithDouble_withDouble_(jdouble dx, jdouble dy) {
  ComVividsolutionsJtsNodingOctant_initialize();
  if (dx == 0.0 && dy == 0.0) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D$D$", @"Cannot compute the octant for point ( ", dx, @", ", dy, @" )")) autorelease];
  jdouble adx = JavaLangMath_absWithDouble_(dx);
  jdouble ady = JavaLangMath_absWithDouble_(dy);
  if (dx >= 0) {
    if (dy >= 0) {
      if (adx >= ady) return 0;
      else return 1;
    }
    else {
      if (adx >= ady) return 7;
      else return 6;
    }
  }
  else {
    if (dy >= 0) {
      if (adx >= ady) return 3;
      else return 2;
    }
    else {
      if (adx >= ady) return 4;
      else return 5;
    }
  }
}

jint ComVividsolutionsJtsNodingOctant_octantWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1) {
  ComVividsolutionsJtsNodingOctant_initialize();
  jdouble dx = ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1))->x_ - ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0))->x_;
  jdouble dy = p1->y_ - p0->y_;
  if (dx == 0.0 && dy == 0.0) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Cannot compute the octant for two identical points ", p0)) autorelease];
  return ComVividsolutionsJtsNodingOctant_octantWithDouble_withDouble_(dx, dy);
}

void ComVividsolutionsJtsNodingOctant_init(ComVividsolutionsJtsNodingOctant *self) {
  NSObject_init(self);
}

ComVividsolutionsJtsNodingOctant *new_ComVividsolutionsJtsNodingOctant_init() {
  ComVividsolutionsJtsNodingOctant *self = [ComVividsolutionsJtsNodingOctant alloc];
  ComVividsolutionsJtsNodingOctant_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingOctant)
