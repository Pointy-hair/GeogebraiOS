//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/algorithm/RayCrossingCounter.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/RayCrossingCounter.h"
#include "com/vividsolutions/jts/algorithm/RobustDeterminant.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Location.h"

@interface ComVividsolutionsJtsAlgorithmRayCrossingCounter () {
 @public
  ComVividsolutionsJtsGeomCoordinate *p_;
  jint crossingCount_;
  jboolean isPointOnSegment_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsAlgorithmRayCrossingCounter, p_, ComVividsolutionsJtsGeomCoordinate *)

@implementation ComVividsolutionsJtsAlgorithmRayCrossingCounter

+ (jint)locatePointInRingWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p
                    withComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)ring {
  return ComVividsolutionsJtsAlgorithmRayCrossingCounter_locatePointInRingWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(p, ring);
}

- (instancetype)initWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p {
  ComVividsolutionsJtsAlgorithmRayCrossingCounter_initWithComVividsolutionsJtsGeomCoordinate_(self, p);
  return self;
}

- (void)countSegmentWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                    withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2 {
  if (((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1))->x_ < ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p_))->x_ && ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p2))->x_ < p_->x_) return;
  if (p_->x_ == ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p2))->x_ && p_->y_ == p2->y_) {
    isPointOnSegment_ = YES;
    return;
  }
  if (p1->y_ == p_->y_ && p2->y_ == p_->y_) {
    jdouble minx = p1->x_;
    jdouble maxx = p2->x_;
    if (minx > maxx) {
      minx = p2->x_;
      maxx = p1->x_;
    }
    if (p_->x_ >= minx && p_->x_ <= maxx) {
      isPointOnSegment_ = YES;
    }
    return;
  }
  if (((p1->y_ > p_->y_) && (p2->y_ <= p_->y_)) || ((p2->y_ > p_->y_) && (p1->y_ <= p_->y_))) {
    jdouble x1 = p1->x_ - p_->x_;
    jdouble y1 = p1->y_ - p_->y_;
    jdouble x2 = p2->x_ - p_->x_;
    jdouble y2 = p2->y_ - p_->y_;
    jdouble xIntSign = ComVividsolutionsJtsAlgorithmRobustDeterminant_signOfDet2x2WithDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2);
    if (xIntSign == 0.0) {
      isPointOnSegment_ = YES;
      return;
    }
    if (y2 < y1) xIntSign = -xIntSign;
    if (xIntSign > 0.0) {
      crossingCount_++;
    }
  }
}

- (jboolean)isOnSegment {
  return isPointOnSegment_;
}

- (jint)getLocation {
  if (isPointOnSegment_) return ComVividsolutionsJtsGeomLocation_BOUNDARY;
  if ((crossingCount_ % 2) == 1) {
    return ComVividsolutionsJtsGeomLocation_INTERIOR;
  }
  return ComVividsolutionsJtsGeomLocation_EXTERIOR;
}

- (jboolean)isPointInPolygon {
  return [self getLocation] != ComVividsolutionsJtsGeomLocation_EXTERIOR;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "locatePointInRingWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinateArray:", "locatePointInRing", "I", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomCoordinate:", "RayCrossingCounter", NULL, 0x1, NULL, NULL },
    { "countSegmentWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "countSegment", "V", 0x1, NULL, NULL },
    { "isOnSegment", NULL, "Z", 0x1, NULL, NULL },
    { "getLocation", NULL, "I", 0x1, NULL, NULL },
    { "isPointInPolygon", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "p_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "crossingCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "isPointOnSegment_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsAlgorithmRayCrossingCounter = { 2, "RayCrossingCounter", "com.vividsolutions.jts.algorithm", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsAlgorithmRayCrossingCounter;
}

@end

jint ComVividsolutionsJtsAlgorithmRayCrossingCounter_locatePointInRingWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(ComVividsolutionsJtsGeomCoordinate *p, IOSObjectArray *ring) {
  ComVividsolutionsJtsAlgorithmRayCrossingCounter_initialize();
  ComVividsolutionsJtsAlgorithmRayCrossingCounter *counter = new_ComVividsolutionsJtsAlgorithmRayCrossingCounter_initWithComVividsolutionsJtsGeomCoordinate_(p);
  for (jint i = 1; i < ((IOSObjectArray *) nil_chk(ring))->size_; i++) {
    ComVividsolutionsJtsGeomCoordinate *p1 = IOSObjectArray_Get(ring, i);
    ComVividsolutionsJtsGeomCoordinate *p2 = IOSObjectArray_Get(ring, i - 1);
    [counter countSegmentWithComVividsolutionsJtsGeomCoordinate:p1 withComVividsolutionsJtsGeomCoordinate:p2];
    if ([counter isOnSegment]) return [counter getLocation];
  }
  return [counter getLocation];
}

void ComVividsolutionsJtsAlgorithmRayCrossingCounter_initWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsAlgorithmRayCrossingCounter *self, ComVividsolutionsJtsGeomCoordinate *p) {
  (void) NSObject_init(self);
  self->crossingCount_ = 0;
  self->isPointOnSegment_ = NO;
  self->p_ = p;
}

ComVividsolutionsJtsAlgorithmRayCrossingCounter *new_ComVividsolutionsJtsAlgorithmRayCrossingCounter_initWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomCoordinate *p) {
  ComVividsolutionsJtsAlgorithmRayCrossingCounter *self = [ComVividsolutionsJtsAlgorithmRayCrossingCounter alloc];
  ComVividsolutionsJtsAlgorithmRayCrossingCounter_initWithComVividsolutionsJtsGeomCoordinate_(self, p);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsAlgorithmRayCrossingCounter)
