//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/algorithm/NonRobustLineIntersector.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/NonRobustLineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/PrecisionModel.h"
#include "java/lang/Math.h"

@interface ComVividsolutionsJtsAlgorithmNonRobustLineIntersector ()

- (jint)computeCollinearIntersectionWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                                    withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2
                                    withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p3
                                    withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p4;

- (jdouble)rParameterWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p;

@end

__attribute__((unused)) static jint ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_computeCollinearIntersectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsAlgorithmNonRobustLineIntersector *self, ComVividsolutionsJtsGeomCoordinate *p1, ComVividsolutionsJtsGeomCoordinate *p2, ComVividsolutionsJtsGeomCoordinate *p3, ComVividsolutionsJtsGeomCoordinate *p4);

__attribute__((unused)) static jdouble ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_rParameterWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsAlgorithmNonRobustLineIntersector *self, ComVividsolutionsJtsGeomCoordinate *p1, ComVividsolutionsJtsGeomCoordinate *p2, ComVividsolutionsJtsGeomCoordinate *p);

@implementation ComVividsolutionsJtsAlgorithmNonRobustLineIntersector

+ (jboolean)isSameSignAndNonZeroWithDouble:(jdouble)a
                                withDouble:(jdouble)b {
  return ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_isSameSignAndNonZeroWithDouble_withDouble_(a, b);
}

- (instancetype)init {
  ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_init(self);
  return self;
}

- (void)computeIntersectionWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p
                           withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                           withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2 {
  jdouble a1;
  jdouble b1;
  jdouble c1;
  jdouble r;
  isProper__ = NO;
  a1 = ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p2))->y_ - ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1))->y_;
  b1 = p1->x_ - p2->x_;
  c1 = p2->x_ * p1->y_ - p1->x_ * p2->y_;
  r = a1 * ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p))->x_ + b1 * p->y_ + c1;
  if (r != 0) {
    result_ = ComVividsolutionsJtsAlgorithmLineIntersector_DONT_INTERSECT;
    return;
  }
  jdouble dist = ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_rParameterWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p1, p2, p);
  if (dist < 0.0 || dist > 1.0) {
    result_ = ComVividsolutionsJtsAlgorithmLineIntersector_DONT_INTERSECT;
    return;
  }
  isProper__ = YES;
  if ([p isEqual:p1] || [p isEqual:p2]) {
    isProper__ = NO;
  }
  result_ = ComVividsolutionsJtsAlgorithmLineIntersector_DO_INTERSECT;
}

- (jint)computeIntersectWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                        withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2
                        withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p3
                        withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p4 {
  jdouble a1;
  jdouble b1;
  jdouble c1;
  jdouble a2;
  jdouble b2;
  jdouble c2;
  jdouble r1;
  jdouble r2;
  jdouble r3;
  jdouble r4;
  isProper__ = NO;
  a1 = ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p2))->y_ - ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1))->y_;
  b1 = p1->x_ - p2->x_;
  c1 = p2->x_ * p1->y_ - p1->x_ * p2->y_;
  r3 = a1 * ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p3))->x_ + b1 * p3->y_ + c1;
  r4 = a1 * ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p4))->x_ + b1 * p4->y_ + c1;
  if (r3 != 0 && r4 != 0 && ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_isSameSignAndNonZeroWithDouble_withDouble_(r3, r4)) {
    return ComVividsolutionsJtsAlgorithmLineIntersector_DONT_INTERSECT;
  }
  a2 = p4->y_ - p3->y_;
  b2 = p3->x_ - p4->x_;
  c2 = p4->x_ * p3->y_ - p3->x_ * p4->y_;
  r1 = a2 * p1->x_ + b2 * p1->y_ + c2;
  r2 = a2 * p2->x_ + b2 * p2->y_ + c2;
  if (r1 != 0 && r2 != 0 && ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_isSameSignAndNonZeroWithDouble_withDouble_(r1, r2)) {
    return ComVividsolutionsJtsAlgorithmLineIntersector_DONT_INTERSECT;
  }
  jdouble denom = a1 * b2 - a2 * b1;
  if (denom == 0) {
    return ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_computeCollinearIntersectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p1, p2, p3, p4);
  }
  jdouble numX = b1 * c2 - b2 * c1;
  ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(pa_))->x_ = numX / denom;
  jdouble numY = a2 * c1 - a1 * c2;
  pa_->y_ = numY / denom;
  isProper__ = YES;
  if ([pa_ isEqual:p1] || [pa_ isEqual:p2] || [pa_ isEqual:p3] || [pa_ isEqual:p4]) {
    isProper__ = NO;
  }
  if (precisionModel_ != nil) {
    [precisionModel_ makePreciseWithComVividsolutionsJtsGeomCoordinate:pa_];
  }
  return ComVividsolutionsJtsAlgorithmLineIntersector_DO_INTERSECT;
}

- (jint)computeCollinearIntersectionWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                                    withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2
                                    withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p3
                                    withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p4 {
  return ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_computeCollinearIntersectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p1, p2, p3, p4);
}

- (jdouble)rParameterWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p2
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p {
  return ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_rParameterWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p1, p2, p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isSameSignAndNonZeroWithDouble:withDouble:", "isSameSignAndNonZero", "Z", 0x9, NULL, NULL },
    { "init", "NonRobustLineIntersector", NULL, 0x1, NULL, NULL },
    { "computeIntersectionWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "computeIntersection", "V", 0x1, NULL, NULL },
    { "computeIntersectWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "computeIntersect", "I", 0x4, NULL, NULL },
    { "computeCollinearIntersectionWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "computeCollinearIntersection", "I", 0x2, NULL, NULL },
    { "rParameterWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "rParameter", "D", 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsAlgorithmNonRobustLineIntersector = { 2, "NonRobustLineIntersector", "com.vividsolutions.jts.algorithm", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsAlgorithmNonRobustLineIntersector;
}

@end

jboolean ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_isSameSignAndNonZeroWithDouble_withDouble_(jdouble a, jdouble b) {
  ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_initialize();
  if (a == 0 || b == 0) {
    return NO;
  }
  return (a < 0 && b < 0) || (a > 0 && b > 0);
}

void ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_init(ComVividsolutionsJtsAlgorithmNonRobustLineIntersector *self) {
  (void) ComVividsolutionsJtsAlgorithmLineIntersector_init(self);
}

ComVividsolutionsJtsAlgorithmNonRobustLineIntersector *new_ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_init() {
  ComVividsolutionsJtsAlgorithmNonRobustLineIntersector *self = [ComVividsolutionsJtsAlgorithmNonRobustLineIntersector alloc];
  ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_init(self);
  return self;
}

jint ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_computeCollinearIntersectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsAlgorithmNonRobustLineIntersector *self, ComVividsolutionsJtsGeomCoordinate *p1, ComVividsolutionsJtsGeomCoordinate *p2, ComVividsolutionsJtsGeomCoordinate *p3, ComVividsolutionsJtsGeomCoordinate *p4) {
  jdouble r1;
  jdouble r2;
  jdouble r3;
  jdouble r4;
  ComVividsolutionsJtsGeomCoordinate *q3;
  ComVividsolutionsJtsGeomCoordinate *q4;
  jdouble t3;
  jdouble t4;
  r1 = 0;
  r2 = 1;
  r3 = ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_rParameterWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p1, p2, p3);
  r4 = ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_rParameterWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p1, p2, p4);
  if (r3 < r4) {
    q3 = p3;
    t3 = r3;
    q4 = p4;
    t4 = r4;
  }
  else {
    q3 = p4;
    t3 = r4;
    q4 = p3;
    t4 = r3;
  }
  if (t3 > r2 || t4 < r1) {
    return ComVividsolutionsJtsAlgorithmLineIntersector_DONT_INTERSECT;
  }
  if (q4 == p1) {
    [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(self->pa_)) setCoordinateWithComVividsolutionsJtsGeomCoordinate:p1];
    return ComVividsolutionsJtsAlgorithmLineIntersector_DO_INTERSECT;
  }
  if (q3 == p2) {
    [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(self->pa_)) setCoordinateWithComVividsolutionsJtsGeomCoordinate:p2];
    return ComVividsolutionsJtsAlgorithmLineIntersector_DO_INTERSECT;
  }
  [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(self->pa_)) setCoordinateWithComVividsolutionsJtsGeomCoordinate:p1];
  if (t3 > r1) {
    [self->pa_ setCoordinateWithComVividsolutionsJtsGeomCoordinate:q3];
  }
  [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(self->pb_)) setCoordinateWithComVividsolutionsJtsGeomCoordinate:p2];
  if (t4 < r2) {
    [self->pb_ setCoordinateWithComVividsolutionsJtsGeomCoordinate:q4];
  }
  return ComVividsolutionsJtsAlgorithmLineIntersector_COLLINEAR;
}

jdouble ComVividsolutionsJtsAlgorithmNonRobustLineIntersector_rParameterWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsAlgorithmNonRobustLineIntersector *self, ComVividsolutionsJtsGeomCoordinate *p1, ComVividsolutionsJtsGeomCoordinate *p2, ComVividsolutionsJtsGeomCoordinate *p) {
  jdouble r;
  jdouble dx = JavaLangMath_absWithDouble_(((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p2))->x_ - ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1))->x_);
  jdouble dy = JavaLangMath_absWithDouble_(p2->y_ - p1->y_);
  if (dx > dy) {
    r = (((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p))->x_ - p1->x_) / (p2->x_ - p1->x_);
  }
  else {
    r = (((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p))->y_ - p1->y_) / (p2->y_ - p1->y_);
  }
  return r;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsAlgorithmNonRobustLineIntersector)
