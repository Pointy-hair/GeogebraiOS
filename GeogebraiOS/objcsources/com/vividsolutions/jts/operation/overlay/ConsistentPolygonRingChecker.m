//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/operation/overlay/ConsistentPolygonRingChecker.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/TopologyException.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdge.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEndStar.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Node.h"
#include "com/vividsolutions/jts/geomgraph/PlanarGraph.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/operation/overlay/ConsistentPolygonRingChecker.h"
#include "com/vividsolutions/jts/operation/overlay/OverlayOp.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker () {
 @public
  ComVividsolutionsJtsGeomgraphPlanarGraph *graph_;
  jint SCANNING_FOR_INCOMING_;
  jint LINKING_TO_OUTGOING_;
}

- (id<JavaUtilList>)getPotentialResultAreaEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar:(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *)deStar
                                                                                         withInt:(jint)opCode;

- (jboolean)isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)de
                                                                           withInt:(jint)opCode;

- (void)testLinkResultDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar:(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *)deStar
                                                                             withInt:(jint)opCode;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker, graph_, ComVividsolutionsJtsGeomgraphPlanarGraph *)

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_getPotentialResultAreaEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar_withInt_(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *self, ComVividsolutionsJtsGeomgraphDirectedEdgeStar *deStar, jint opCode);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge_withInt_(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *self, ComVividsolutionsJtsGeomgraphDirectedEdge *de, jint opCode);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_testLinkResultDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar_withInt_(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *self, ComVividsolutionsJtsGeomgraphDirectedEdgeStar *deStar, jint opCode);

@implementation ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker

- (instancetype)initWithComVividsolutionsJtsGeomgraphPlanarGraph:(ComVividsolutionsJtsGeomgraphPlanarGraph *)graph {
  ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_initWithComVividsolutionsJtsGeomgraphPlanarGraph_(self, graph);
  return self;
}

- (void)checkAll {
  [self checkWithInt:ComVividsolutionsJtsOperationOverlayOverlayOp_INTERSECTION];
  [self checkWithInt:ComVividsolutionsJtsOperationOverlayOverlayOp_DIFFERENCE];
  [self checkWithInt:ComVividsolutionsJtsOperationOverlayOverlayOp_UNION];
  [self checkWithInt:ComVividsolutionsJtsOperationOverlayOverlayOp_SYMDIFFERENCE];
}

- (void)checkWithInt:(jint)opCode {
  for (id<JavaUtilIterator> nodeit = [((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(graph_)) getNodeIterator]; [((id<JavaUtilIterator>) nil_chk(nodeit)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *node = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([nodeit next], [ComVividsolutionsJtsGeomgraphNode class]);
    ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_testLinkResultDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar_withInt_(self, (ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) check_class_cast([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getEdges], [ComVividsolutionsJtsGeomgraphDirectedEdgeStar class]), opCode);
  }
}

- (id<JavaUtilList>)getPotentialResultAreaEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar:(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *)deStar
                                                                                         withInt:(jint)opCode {
  return ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_getPotentialResultAreaEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar_withInt_(self, deStar, opCode);
}

- (jboolean)isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)de
                                                                           withInt:(jint)opCode {
  return ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge_withInt_(self, de, opCode);
}

- (void)testLinkResultDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar:(ComVividsolutionsJtsGeomgraphDirectedEdgeStar *)deStar
                                                                             withInt:(jint)opCode {
  ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_testLinkResultDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar_withInt_(self, deStar, opCode);
}

- (void)dealloc {
  RELEASE_(graph_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomgraphPlanarGraph:", "ConsistentPolygonRingChecker", NULL, 0x1, NULL, NULL },
    { "checkAll", NULL, "V", 0x1, NULL, NULL },
    { "checkWithInt:", "check", "V", 0x1, NULL, NULL },
    { "getPotentialResultAreaEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar:withInt:", "getPotentialResultAreaEdges", "Ljava.util.List;", 0x2, NULL, NULL },
    { "isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge:withInt:", "isPotentialResultAreaEdge", "Z", 0x2, NULL, NULL },
    { "testLinkResultDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar:withInt:", "testLinkResultDirectedEdges", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "graph_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.PlanarGraph;", NULL, NULL,  },
    { "SCANNING_FOR_INCOMING_", NULL, 0x12, "I", NULL, NULL,  },
    { "LINKING_TO_OUTGOING_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker = { 2, "ConsistentPolygonRingChecker", "com.vividsolutions.jts.operation.overlay", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker;
}

@end

void ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_initWithComVividsolutionsJtsGeomgraphPlanarGraph_(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *self, ComVividsolutionsJtsGeomgraphPlanarGraph *graph) {
  NSObject_init(self);
  self->SCANNING_FOR_INCOMING_ = 1;
  self->LINKING_TO_OUTGOING_ = 2;
  ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_set_graph_(self, graph);
}

ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *new_ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_initWithComVividsolutionsJtsGeomgraphPlanarGraph_(ComVividsolutionsJtsGeomgraphPlanarGraph *graph) {
  ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *self = [ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker alloc];
  ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_initWithComVividsolutionsJtsGeomgraphPlanarGraph_(self, graph);
  return self;
}

id<JavaUtilList> ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_getPotentialResultAreaEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar_withInt_(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *self, ComVividsolutionsJtsGeomgraphDirectedEdgeStar *deStar, jint opCode) {
  id<JavaUtilList> resultAreaEdgeList = [new_JavaUtilArrayList_init() autorelease];
  for (id<JavaUtilIterator> it = [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(deStar)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    if (ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge_withInt_(self, de, opCode) || ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge_withInt_(self, [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getSym], opCode)) [resultAreaEdgeList addWithId:de];
  }
  return resultAreaEdgeList;
}

jboolean ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge_withInt_(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *self, ComVividsolutionsJtsGeomgraphDirectedEdge *de, jint opCode) {
  ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getLabel];
  if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) isArea] && ![de isInteriorAreaEdge] && ComVividsolutionsJtsOperationOverlayOverlayOp_isResultOfOpWithInt_withInt_withInt_([label getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT], [label getLocationWithInt:1 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT], opCode)) {
    return YES;
  }
  return NO;
}

void ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_testLinkResultDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar_withInt_(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker *self, ComVividsolutionsJtsGeomgraphDirectedEdgeStar *deStar, jint opCode) {
  id<JavaUtilList> ringEdges = ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_getPotentialResultAreaEdgesWithComVividsolutionsJtsGeomgraphDirectedEdgeStar_withInt_(self, deStar, opCode);
  ComVividsolutionsJtsGeomgraphDirectedEdge *firstOut = nil;
  ComVividsolutionsJtsGeomgraphDirectedEdge *incoming = nil;
  jint state = self->SCANNING_FOR_INCOMING_;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(ringEdges)) size]; i++) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextOut = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([ringEdges getWithInt:i], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphDirectedEdge *nextIn = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(nextOut)) getSym];
    if (![((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([nextOut getLabel])) isArea]) continue;
    if (firstOut == nil && ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge_withInt_(self, nextOut, opCode)) firstOut = nextOut;
    switch (state) {
      case 1:
      if (!ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge_withInt_(self, nextIn, opCode)) continue;
      incoming = nextIn;
      state = self->LINKING_TO_OUTGOING_;
      break;
      case 2:
      if (!ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker_isPotentialResultAreaEdgeWithComVividsolutionsJtsGeomgraphDirectedEdge_withInt_(self, nextOut, opCode)) continue;
      state = self->SCANNING_FOR_INCOMING_;
      break;
    }
  }
  if (state == self->LINKING_TO_OUTGOING_) {
    if (firstOut == nil) @throw [new_ComVividsolutionsJtsGeomTopologyException_initWithNSString_withComVividsolutionsJtsGeomCoordinate_(@"no outgoing dirEdge found", [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(deStar)) getCoordinate]) autorelease];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationOverlayConsistentPolygonRingChecker)
