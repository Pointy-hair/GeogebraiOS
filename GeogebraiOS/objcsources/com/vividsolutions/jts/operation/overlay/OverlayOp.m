//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/operation/overlay/OverlayOp.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/PointLocator.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryCollection.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geom/Point.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geomgraph/Depth.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdge.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEndStar.h"
#include "com/vividsolutions/jts/geomgraph/EdgeList.h"
#include "com/vividsolutions/jts/geomgraph/EdgeNodingValidator.h"
#include "com/vividsolutions/jts/geomgraph/GeometryGraph.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Node.h"
#include "com/vividsolutions/jts/geomgraph/PlanarGraph.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/geomgraph/index/SegmentIntersector.h"
#include "com/vividsolutions/jts/operation/GeometryGraphOperation.h"
#include "com/vividsolutions/jts/operation/overlay/LineBuilder.h"
#include "com/vividsolutions/jts/operation/overlay/OverlayNodeFactory.h"
#include "com/vividsolutions/jts/operation/overlay/OverlayOp.h"
#include "com/vividsolutions/jts/operation/overlay/PointBuilder.h"
#include "com/vividsolutions/jts/operation/overlay/PolygonBuilder.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationOverlayOverlayOp () {
 @public
  ComVividsolutionsJtsAlgorithmPointLocator *ptLocator_;
  ComVividsolutionsJtsGeomGeometryFactory *geomFact_;
  ComVividsolutionsJtsGeomGeometry *resultGeom_;
  ComVividsolutionsJtsGeomgraphPlanarGraph *graph_;
  ComVividsolutionsJtsGeomgraphEdgeList *edgeList_;
  id<JavaUtilList> resultPolyList_;
  id<JavaUtilList> resultLineList_;
  id<JavaUtilList> resultPointList_;
}

- (void)computeOverlayWithInt:(jint)opCode;

- (void)insertUniqueEdgesWithJavaUtilList:(id<JavaUtilList>)edges;

- (void)computeLabelsFromDepths;

- (void)replaceCollapsedEdges;

- (void)copyPointsWithInt:(jint)argIndex OBJC_METHOD_FAMILY_NONE;

- (void)computeLabelling;

- (void)mergeSymLabels;

- (void)updateNodeLabelling;

- (void)labelIncompleteNodes;

- (void)labelIncompleteNodeWithComVividsolutionsJtsGeomgraphNode:(ComVividsolutionsJtsGeomgraphNode *)n
                                                         withInt:(jint)targetIndex;

- (void)findResultAreaEdgesWithInt:(jint)opCode;

- (void)cancelDuplicateResultEdges;

- (jboolean)isCoveredWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord
                                           withJavaUtilList:(id<JavaUtilList>)geomList;

- (ComVividsolutionsJtsGeomGeometry *)computeGeometryWithJavaUtilList:(id<JavaUtilList>)resultPointList
                                                     withJavaUtilList:(id<JavaUtilList>)resultLineList
                                                     withJavaUtilList:(id<JavaUtilList>)resultPolyList
                                                              withInt:(jint)opcode;

- (ComVividsolutionsJtsGeomGeometry *)createEmptyResultWithInt:(jint)opCode;

- (jint)resultDimensionWithInt:(jint)opCode
withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g0
withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g1;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayOverlayOp, ptLocator_, ComVividsolutionsJtsAlgorithmPointLocator *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayOverlayOp, geomFact_, ComVividsolutionsJtsGeomGeometryFactory *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayOverlayOp, resultGeom_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayOverlayOp, graph_, ComVividsolutionsJtsGeomgraphPlanarGraph *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayOverlayOp, edgeList_, ComVividsolutionsJtsGeomgraphEdgeList *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayOverlayOp, resultPolyList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayOverlayOp, resultLineList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayOverlayOp, resultPointList_, id<JavaUtilList>)

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_computeOverlayWithInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, jint opCode);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_insertUniqueEdgesWithJavaUtilList_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, id<JavaUtilList> edges);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_computeLabelsFromDepths(ComVividsolutionsJtsOperationOverlayOverlayOp *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_replaceCollapsedEdges(ComVividsolutionsJtsOperationOverlayOverlayOp *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_copyPointsWithInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, jint argIndex);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_computeLabelling(ComVividsolutionsJtsOperationOverlayOverlayOp *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_mergeSymLabels(ComVividsolutionsJtsOperationOverlayOverlayOp *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_updateNodeLabelling(ComVividsolutionsJtsOperationOverlayOverlayOp *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodes(ComVividsolutionsJtsOperationOverlayOverlayOp *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodeWithComVividsolutionsJtsGeomgraphNode_withInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, ComVividsolutionsJtsGeomgraphNode *n, jint targetIndex);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_findResultAreaEdgesWithInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, jint opCode);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayOverlayOp_cancelDuplicateResultEdges(ComVividsolutionsJtsOperationOverlayOverlayOp *self);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationOverlayOverlayOp_isCoveredWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, ComVividsolutionsJtsGeomCoordinate *coord, id<JavaUtilList> geomList);

__attribute__((unused)) static ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationOverlayOverlayOp_computeGeometryWithJavaUtilList_withJavaUtilList_withJavaUtilList_withInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, id<JavaUtilList> resultPointList, id<JavaUtilList> resultLineList, id<JavaUtilList> resultPolyList, jint opcode);

__attribute__((unused)) static jint ComVividsolutionsJtsOperationOverlayOverlayOp_resultDimensionWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, jint opCode, ComVividsolutionsJtsGeomGeometry *g0, ComVividsolutionsJtsGeomGeometry *g1);

@implementation ComVividsolutionsJtsOperationOverlayOverlayOp

+ (ComVividsolutionsJtsGeomGeometry *)overlayOpWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom0
                                               withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom1
                                                                            withInt:(jint)opCode {
  return ComVividsolutionsJtsOperationOverlayOverlayOp_overlayOpWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withInt_(geom0, geom1, opCode);
}

+ (jboolean)isResultOfOpWithComVividsolutionsJtsGeomgraphLabel:(ComVividsolutionsJtsGeomgraphLabel *)label
                                                       withInt:(jint)opCode {
  return ComVividsolutionsJtsOperationOverlayOverlayOp_isResultOfOpWithComVividsolutionsJtsGeomgraphLabel_withInt_(label, opCode);
}

+ (jboolean)isResultOfOpWithInt:(jint)loc0
                        withInt:(jint)loc1
                        withInt:(jint)opCode {
  return ComVividsolutionsJtsOperationOverlayOverlayOp_isResultOfOpWithInt_withInt_withInt_(loc0, loc1, opCode);
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g0
                    withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g1 {
  ComVividsolutionsJtsOperationOverlayOverlayOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, g0, g1);
  return self;
}

- (ComVividsolutionsJtsGeomGeometry *)getResultGeometryWithInt:(jint)funcCode {
  ComVividsolutionsJtsOperationOverlayOverlayOp_computeOverlayWithInt_(self, funcCode);
  return resultGeom_;
}

- (ComVividsolutionsJtsGeomgraphPlanarGraph *)getGraph {
  return graph_;
}

- (void)computeOverlayWithInt:(jint)opCode {
  ComVividsolutionsJtsOperationOverlayOverlayOp_computeOverlayWithInt_(self, opCode);
}

- (void)insertUniqueEdgesWithJavaUtilList:(id<JavaUtilList>)edges {
  ComVividsolutionsJtsOperationOverlayOverlayOp_insertUniqueEdgesWithJavaUtilList_(self, edges);
}

- (void)insertUniqueEdgeWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e {
  ComVividsolutionsJtsGeomgraphEdge *existingEdge = [((ComVividsolutionsJtsGeomgraphEdgeList *) nil_chk(edgeList_)) findEqualEdgeWithComVividsolutionsJtsGeomgraphEdge:e];
  if (existingEdge != nil) {
    ComVividsolutionsJtsGeomgraphLabel *existingLabel = [existingEdge getLabel];
    ComVividsolutionsJtsGeomgraphLabel *labelToMerge = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getLabel];
    if (![existingEdge isPointwiseEqualWithComVividsolutionsJtsGeomgraphEdge:e]) {
      labelToMerge = [new_ComVividsolutionsJtsGeomgraphLabel_initWithComVividsolutionsJtsGeomgraphLabel_([e getLabel]) autorelease];
      [labelToMerge flip];
    }
    ComVividsolutionsJtsGeomgraphDepth *depth = [existingEdge getDepth];
    if ([((ComVividsolutionsJtsGeomgraphDepth *) nil_chk(depth)) isNull]) {
      [depth addWithComVividsolutionsJtsGeomgraphLabel:existingLabel];
    }
    [depth addWithComVividsolutionsJtsGeomgraphLabel:labelToMerge];
    [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(existingLabel)) mergeWithComVividsolutionsJtsGeomgraphLabel:labelToMerge];
  }
  else {
    [edgeList_ addWithComVividsolutionsJtsGeomgraphEdge:e];
  }
}

- (void)computeLabelsFromDepths {
  ComVividsolutionsJtsOperationOverlayOverlayOp_computeLabelsFromDepths(self);
}

- (void)replaceCollapsedEdges {
  ComVividsolutionsJtsOperationOverlayOverlayOp_replaceCollapsedEdges(self);
}

- (void)copyPointsWithInt:(jint)argIndex {
  ComVividsolutionsJtsOperationOverlayOverlayOp_copyPointsWithInt_(self, argIndex);
}

- (void)computeLabelling {
  ComVividsolutionsJtsOperationOverlayOverlayOp_computeLabelling(self);
}

- (void)mergeSymLabels {
  ComVividsolutionsJtsOperationOverlayOverlayOp_mergeSymLabels(self);
}

- (void)updateNodeLabelling {
  ComVividsolutionsJtsOperationOverlayOverlayOp_updateNodeLabelling(self);
}

- (void)labelIncompleteNodes {
  ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodes(self);
}

- (void)labelIncompleteNodeWithComVividsolutionsJtsGeomgraphNode:(ComVividsolutionsJtsGeomgraphNode *)n
                                                         withInt:(jint)targetIndex {
  ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodeWithComVividsolutionsJtsGeomgraphNode_withInt_(self, n, targetIndex);
}

- (void)findResultAreaEdgesWithInt:(jint)opCode {
  ComVividsolutionsJtsOperationOverlayOverlayOp_findResultAreaEdgesWithInt_(self, opCode);
}

- (void)cancelDuplicateResultEdges {
  ComVividsolutionsJtsOperationOverlayOverlayOp_cancelDuplicateResultEdges(self);
}

- (jboolean)isCoveredByLAWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord {
  if (ComVividsolutionsJtsOperationOverlayOverlayOp_isCoveredWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_(self, coord, resultLineList_)) return YES;
  if (ComVividsolutionsJtsOperationOverlayOverlayOp_isCoveredWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_(self, coord, resultPolyList_)) return YES;
  return NO;
}

- (jboolean)isCoveredByAWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord {
  if (ComVividsolutionsJtsOperationOverlayOverlayOp_isCoveredWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_(self, coord, resultPolyList_)) return YES;
  return NO;
}

- (jboolean)isCoveredWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord
                                           withJavaUtilList:(id<JavaUtilList>)geomList {
  return ComVividsolutionsJtsOperationOverlayOverlayOp_isCoveredWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_(self, coord, geomList);
}

- (ComVividsolutionsJtsGeomGeometry *)computeGeometryWithJavaUtilList:(id<JavaUtilList>)resultPointList
                                                     withJavaUtilList:(id<JavaUtilList>)resultLineList
                                                     withJavaUtilList:(id<JavaUtilList>)resultPolyList
                                                              withInt:(jint)opcode {
  return ComVividsolutionsJtsOperationOverlayOverlayOp_computeGeometryWithJavaUtilList_withJavaUtilList_withJavaUtilList_withInt_(self, resultPointList, resultLineList, resultPolyList, opcode);
}

- (ComVividsolutionsJtsGeomGeometry *)createEmptyResultWithInt:(jint)opCode {
  ComVividsolutionsJtsGeomGeometry *result = nil;
  switch (ComVividsolutionsJtsOperationOverlayOverlayOp_resultDimensionWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, opCode, [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) getGeometry], [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(arg_, 1))) getGeometry])) {
    case -1:
    result = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(geomFact_)) createGeometryCollectionWithComVividsolutionsJtsGeomGeometryArray:[IOSObjectArray arrayWithLength:0 type:ComVividsolutionsJtsGeomGeometry_class_()]];
    break;
    case 0:
    result = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(geomFact_)) createPointWithComVividsolutionsJtsGeomCoordinate:nil];
    break;
    case 1:
    result = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(geomFact_)) createLineStringWithComVividsolutionsJtsGeomCoordinateArray:nil];
    break;
    case 2:
    result = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(geomFact_)) createPolygonWithComVividsolutionsJtsGeomLinearRing:nil withComVividsolutionsJtsGeomLinearRingArray:nil];
    break;
  }
  return result;
}

- (jint)resultDimensionWithInt:(jint)opCode
withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g0
withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g1 {
  return ComVividsolutionsJtsOperationOverlayOverlayOp_resultDimensionWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, opCode, g0, g1);
}

- (void)dealloc {
  RELEASE_(ptLocator_);
  RELEASE_(geomFact_);
  RELEASE_(resultGeom_);
  RELEASE_(graph_);
  RELEASE_(edgeList_);
  RELEASE_(resultPolyList_);
  RELEASE_(resultLineList_);
  RELEASE_(resultPointList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "overlayOpWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsGeomGeometry:withInt:", "overlayOp", "Lcom.vividsolutions.jts.geom.Geometry;", 0x9, NULL, NULL },
    { "isResultOfOpWithComVividsolutionsJtsGeomgraphLabel:withInt:", "isResultOfOp", "Z", 0x9, NULL, NULL },
    { "isResultOfOpWithInt:withInt:withInt:", "isResultOfOp", "Z", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsGeomGeometry:", "OverlayOp", NULL, 0x1, NULL, NULL },
    { "getResultGeometryWithInt:", "getResultGeometry", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "getGraph", NULL, "Lcom.vividsolutions.jts.geomgraph.PlanarGraph;", 0x1, NULL, NULL },
    { "computeOverlayWithInt:", "computeOverlay", "V", 0x2, NULL, NULL },
    { "insertUniqueEdgesWithJavaUtilList:", "insertUniqueEdges", "V", 0x2, NULL, NULL },
    { "insertUniqueEdgeWithComVividsolutionsJtsGeomgraphEdge:", "insertUniqueEdge", "V", 0x4, NULL, NULL },
    { "computeLabelsFromDepths", NULL, "V", 0x2, NULL, NULL },
    { "replaceCollapsedEdges", NULL, "V", 0x2, NULL, NULL },
    { "copyPointsWithInt:", "copyPoints", "V", 0x2, NULL, NULL },
    { "computeLabelling", NULL, "V", 0x2, NULL, NULL },
    { "mergeSymLabels", NULL, "V", 0x2, NULL, NULL },
    { "updateNodeLabelling", NULL, "V", 0x2, NULL, NULL },
    { "labelIncompleteNodes", NULL, "V", 0x2, NULL, NULL },
    { "labelIncompleteNodeWithComVividsolutionsJtsGeomgraphNode:withInt:", "labelIncompleteNode", "V", 0x2, NULL, NULL },
    { "findResultAreaEdgesWithInt:", "findResultAreaEdges", "V", 0x2, NULL, NULL },
    { "cancelDuplicateResultEdges", NULL, "V", 0x2, NULL, NULL },
    { "isCoveredByLAWithComVividsolutionsJtsGeomCoordinate:", "isCoveredByLA", "Z", 0x1, NULL, NULL },
    { "isCoveredByAWithComVividsolutionsJtsGeomCoordinate:", "isCoveredByA", "Z", 0x1, NULL, NULL },
    { "isCoveredWithComVividsolutionsJtsGeomCoordinate:withJavaUtilList:", "isCovered", "Z", 0x2, NULL, NULL },
    { "computeGeometryWithJavaUtilList:withJavaUtilList:withJavaUtilList:withInt:", "computeGeometry", "Lcom.vividsolutions.jts.geom.Geometry;", 0x2, NULL, NULL },
    { "createEmptyResultWithInt:", "createEmptyResult", "Lcom.vividsolutions.jts.geom.Geometry;", 0x2, NULL, NULL },
    { "resultDimensionWithInt:withComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsGeomGeometry:", "resultDimension", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INTERSECTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsOperationOverlayOverlayOp_INTERSECTION },
    { "UNION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsOperationOverlayOverlayOp_UNION },
    { "DIFFERENCE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsOperationOverlayOverlayOp_DIFFERENCE },
    { "SYMDIFFERENCE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsOperationOverlayOverlayOp_SYMDIFFERENCE },
    { "ptLocator_", NULL, 0x12, "Lcom.vividsolutions.jts.algorithm.PointLocator;", NULL, NULL,  },
    { "geomFact_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.GeometryFactory;", NULL, NULL,  },
    { "resultGeom_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "graph_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.PlanarGraph;", NULL, NULL,  },
    { "edgeList_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.EdgeList;", NULL, NULL,  },
    { "resultPolyList_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "resultLineList_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "resultPointList_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationOverlayOverlayOp = { 2, "OverlayOp", "com.vividsolutions.jts.operation.overlay", NULL, 0x1, 25, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationOverlayOverlayOp;
}

@end

ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationOverlayOverlayOp_overlayOpWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withInt_(ComVividsolutionsJtsGeomGeometry *geom0, ComVividsolutionsJtsGeomGeometry *geom1, jint opCode) {
  ComVividsolutionsJtsOperationOverlayOverlayOp_initialize();
  ComVividsolutionsJtsOperationOverlayOverlayOp *gov = [new_ComVividsolutionsJtsOperationOverlayOverlayOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(geom0, geom1) autorelease];
  ComVividsolutionsJtsGeomGeometry *geomOv = [gov getResultGeometryWithInt:opCode];
  return geomOv;
}

jboolean ComVividsolutionsJtsOperationOverlayOverlayOp_isResultOfOpWithComVividsolutionsJtsGeomgraphLabel_withInt_(ComVividsolutionsJtsGeomgraphLabel *label, jint opCode) {
  ComVividsolutionsJtsOperationOverlayOverlayOp_initialize();
  jint loc0 = [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) getLocationWithInt:0];
  jint loc1 = [label getLocationWithInt:1];
  return ComVividsolutionsJtsOperationOverlayOverlayOp_isResultOfOpWithInt_withInt_withInt_(loc0, loc1, opCode);
}

jboolean ComVividsolutionsJtsOperationOverlayOverlayOp_isResultOfOpWithInt_withInt_withInt_(jint loc0, jint loc1, jint opCode) {
  ComVividsolutionsJtsOperationOverlayOverlayOp_initialize();
  if (loc0 == ComVividsolutionsJtsGeomLocation_BOUNDARY) loc0 = ComVividsolutionsJtsGeomLocation_INTERIOR;
  if (loc1 == ComVividsolutionsJtsGeomLocation_BOUNDARY) loc1 = ComVividsolutionsJtsGeomLocation_INTERIOR;
  switch (opCode) {
    case ComVividsolutionsJtsOperationOverlayOverlayOp_INTERSECTION:
    return loc0 == ComVividsolutionsJtsGeomLocation_INTERIOR && loc1 == ComVividsolutionsJtsGeomLocation_INTERIOR;
    case ComVividsolutionsJtsOperationOverlayOverlayOp_UNION:
    return loc0 == ComVividsolutionsJtsGeomLocation_INTERIOR || loc1 == ComVividsolutionsJtsGeomLocation_INTERIOR;
    case ComVividsolutionsJtsOperationOverlayOverlayOp_DIFFERENCE:
    return loc0 == ComVividsolutionsJtsGeomLocation_INTERIOR && loc1 != ComVividsolutionsJtsGeomLocation_INTERIOR;
    case ComVividsolutionsJtsOperationOverlayOverlayOp_SYMDIFFERENCE:
    return (loc0 == ComVividsolutionsJtsGeomLocation_INTERIOR && loc1 != ComVividsolutionsJtsGeomLocation_INTERIOR) || (loc0 != ComVividsolutionsJtsGeomLocation_INTERIOR && loc1 == ComVividsolutionsJtsGeomLocation_INTERIOR);
  }
  return NO;
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, ComVividsolutionsJtsGeomGeometry *g0, ComVividsolutionsJtsGeomGeometry *g1) {
  ComVividsolutionsJtsOperationGeometryGraphOperation_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, g0, g1);
  ComVividsolutionsJtsOperationOverlayOverlayOp_setAndConsume_ptLocator_(self, new_ComVividsolutionsJtsAlgorithmPointLocator_init());
  ComVividsolutionsJtsOperationOverlayOverlayOp_setAndConsume_edgeList_(self, new_ComVividsolutionsJtsGeomgraphEdgeList_init());
  ComVividsolutionsJtsOperationOverlayOverlayOp_setAndConsume_resultPolyList_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationOverlayOverlayOp_setAndConsume_resultLineList_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationOverlayOverlayOp_setAndConsume_resultPointList_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsOperationOverlayOverlayOp_setAndConsume_graph_(self, new_ComVividsolutionsJtsGeomgraphPlanarGraph_initWithComVividsolutionsJtsGeomgraphNodeFactory_([new_ComVividsolutionsJtsOperationOverlayOverlayNodeFactory_init() autorelease]));
  ComVividsolutionsJtsOperationOverlayOverlayOp_set_geomFact_(self, [((ComVividsolutionsJtsGeomGeometry *) nil_chk(g0)) getFactory]);
}

ComVividsolutionsJtsOperationOverlayOverlayOp *new_ComVividsolutionsJtsOperationOverlayOverlayOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *g0, ComVividsolutionsJtsGeomGeometry *g1) {
  ComVividsolutionsJtsOperationOverlayOverlayOp *self = [ComVividsolutionsJtsOperationOverlayOverlayOp alloc];
  ComVividsolutionsJtsOperationOverlayOverlayOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, g0, g1);
  return self;
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_computeOverlayWithInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, jint opCode) {
  ComVividsolutionsJtsOperationOverlayOverlayOp_copyPointsWithInt_(self, 0);
  ComVividsolutionsJtsOperationOverlayOverlayOp_copyPointsWithInt_(self, 1);
  [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(nil_chk(self->arg_), 0))) computeSelfNodesWithComVividsolutionsJtsAlgorithmLineIntersector:self->li_ withBoolean:NO];
  [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(self->arg_, 1))) computeSelfNodesWithComVividsolutionsJtsAlgorithmLineIntersector:self->li_ withBoolean:NO];
  [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(self->arg_, 0))) computeEdgeIntersectionsWithComVividsolutionsJtsGeomgraphGeometryGraph:IOSObjectArray_Get(self->arg_, 1) withComVividsolutionsJtsAlgorithmLineIntersector:self->li_ withBoolean:YES];
  id<JavaUtilList> baseSplitEdges = [new_JavaUtilArrayList_init() autorelease];
  [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(self->arg_, 0))) computeSplitEdgesWithJavaUtilList:baseSplitEdges];
  [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(self->arg_, 1))) computeSplitEdgesWithJavaUtilList:baseSplitEdges];
  id<JavaUtilList> splitEdges = baseSplitEdges;
  ComVividsolutionsJtsOperationOverlayOverlayOp_insertUniqueEdgesWithJavaUtilList_(self, baseSplitEdges);
  ComVividsolutionsJtsOperationOverlayOverlayOp_computeLabelsFromDepths(self);
  ComVividsolutionsJtsOperationOverlayOverlayOp_replaceCollapsedEdges(self);
  ComVividsolutionsJtsGeomgraphEdgeNodingValidator_checkValidWithJavaUtilCollection_([((ComVividsolutionsJtsGeomgraphEdgeList *) nil_chk(self->edgeList_)) getEdges]);
  [((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(self->graph_)) addEdgesWithJavaUtilList:[self->edgeList_ getEdges]];
  ComVividsolutionsJtsOperationOverlayOverlayOp_computeLabelling(self);
  ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodes(self);
  ComVividsolutionsJtsOperationOverlayOverlayOp_findResultAreaEdgesWithInt_(self, opCode);
  ComVividsolutionsJtsOperationOverlayOverlayOp_cancelDuplicateResultEdges(self);
  ComVividsolutionsJtsOperationOverlayPolygonBuilder *polyBuilder = [new_ComVividsolutionsJtsOperationOverlayPolygonBuilder_initWithComVividsolutionsJtsGeomGeometryFactory_(self->geomFact_) autorelease];
  [polyBuilder addWithComVividsolutionsJtsGeomgraphPlanarGraph:self->graph_];
  ComVividsolutionsJtsOperationOverlayOverlayOp_set_resultPolyList_(self, [polyBuilder getPolygons]);
  ComVividsolutionsJtsOperationOverlayLineBuilder *lineBuilder = [new_ComVividsolutionsJtsOperationOverlayLineBuilder_initWithComVividsolutionsJtsOperationOverlayOverlayOp_withComVividsolutionsJtsGeomGeometryFactory_withComVividsolutionsJtsAlgorithmPointLocator_(self, self->geomFact_, self->ptLocator_) autorelease];
  ComVividsolutionsJtsOperationOverlayOverlayOp_set_resultLineList_(self, [lineBuilder buildWithInt:opCode]);
  ComVividsolutionsJtsOperationOverlayPointBuilder *pointBuilder = [new_ComVividsolutionsJtsOperationOverlayPointBuilder_initWithComVividsolutionsJtsOperationOverlayOverlayOp_withComVividsolutionsJtsGeomGeometryFactory_withComVividsolutionsJtsAlgorithmPointLocator_(self, self->geomFact_, self->ptLocator_) autorelease];
  ComVividsolutionsJtsOperationOverlayOverlayOp_set_resultPointList_(self, [pointBuilder buildWithInt:opCode]);
  ComVividsolutionsJtsOperationOverlayOverlayOp_set_resultGeom_(self, ComVividsolutionsJtsOperationOverlayOverlayOp_computeGeometryWithJavaUtilList_withJavaUtilList_withJavaUtilList_withInt_(self, self->resultPointList_, self->resultLineList_, self->resultPolyList_, opCode));
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_insertUniqueEdgesWithJavaUtilList_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, id<JavaUtilList> edges) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(edges)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdge class]);
    [self insertUniqueEdgeWithComVividsolutionsJtsGeomgraphEdge:e];
  }
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_computeLabelsFromDepths(ComVividsolutionsJtsOperationOverlayOverlayOp *self) {
  for (id<JavaUtilIterator> it = [((ComVividsolutionsJtsGeomgraphEdgeList *) nil_chk(self->edgeList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdge class]);
    ComVividsolutionsJtsGeomgraphLabel *lbl = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getLabel];
    ComVividsolutionsJtsGeomgraphDepth *depth = [e getDepth];
    if (![((ComVividsolutionsJtsGeomgraphDepth *) nil_chk(depth)) isNull]) {
      [depth normalize];
      for (jint i = 0; i < 2; i++) {
        if (![((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(lbl)) isNullWithInt:i] && [lbl isArea] && ![depth isNullWithInt:i]) {
          if ([depth getDeltaWithInt:i] == 0) {
            [lbl toLineWithInt:i];
          }
          else {
            ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(![depth isNullWithInt:i withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT], @"depth of LEFT side has not been initialized");
            [lbl setLocationWithInt:i withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT withInt:[depth getLocationWithInt:i withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT]];
            ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(![depth isNullWithInt:i withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT], @"depth of RIGHT side has not been initialized");
            [lbl setLocationWithInt:i withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT withInt:[depth getLocationWithInt:i withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT]];
          }
        }
      }
    }
  }
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_replaceCollapsedEdges(ComVividsolutionsJtsOperationOverlayOverlayOp *self) {
  id<JavaUtilList> newEdges = [new_JavaUtilArrayList_init() autorelease];
  for (id<JavaUtilIterator> it = [((ComVividsolutionsJtsGeomgraphEdgeList *) nil_chk(self->edgeList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdge class]);
    if ([((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) isCollapsed]) {
      [it remove];
      [newEdges addWithId:[e getCollapsedEdge]];
    }
  }
  [self->edgeList_ addAllWithJavaUtilCollection:newEdges];
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_copyPointsWithInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, jint argIndex) {
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(nil_chk(self->arg_), argIndex))) getNodeIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *graphNode = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphNode class]);
    ComVividsolutionsJtsGeomgraphNode *newNode = [((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(self->graph_)) addNodeWithComVividsolutionsJtsGeomCoordinate:[((ComVividsolutionsJtsGeomgraphNode *) nil_chk(graphNode)) getCoordinate]];
    [((ComVividsolutionsJtsGeomgraphNode *) nil_chk(newNode)) setLabelWithInt:argIndex withInt:[((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([graphNode getLabel])) getLocationWithInt:argIndex]];
  }
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_computeLabelling(ComVividsolutionsJtsOperationOverlayOverlayOp *self) {
  for (id<JavaUtilIterator> nodeit = [((id<JavaUtilCollection>) nil_chk([((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(self->graph_)) getNodes])) iterator]; [((id<JavaUtilIterator>) nil_chk(nodeit)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *node = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([nodeit next], [ComVividsolutionsJtsGeomgraphNode class]);
    [((ComVividsolutionsJtsGeomgraphEdgeEndStar *) nil_chk([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getEdges])) computeLabellingWithComVividsolutionsJtsGeomgraphGeometryGraphArray:self->arg_];
  }
  ComVividsolutionsJtsOperationOverlayOverlayOp_mergeSymLabels(self);
  ComVividsolutionsJtsOperationOverlayOverlayOp_updateNodeLabelling(self);
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_mergeSymLabels(ComVividsolutionsJtsOperationOverlayOverlayOp *self) {
  for (id<JavaUtilIterator> nodeit = [((id<JavaUtilCollection>) nil_chk([((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(self->graph_)) getNodes])) iterator]; [((id<JavaUtilIterator>) nil_chk(nodeit)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *node = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([nodeit next], [ComVividsolutionsJtsGeomgraphNode class]);
    [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) check_class_cast([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getEdges], [ComVividsolutionsJtsGeomgraphDirectedEdgeStar class])))) mergeSymLabels];
  }
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_updateNodeLabelling(ComVividsolutionsJtsOperationOverlayOverlayOp *self) {
  for (id<JavaUtilIterator> nodeit = [((id<JavaUtilCollection>) nil_chk([((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(self->graph_)) getNodes])) iterator]; [((id<JavaUtilIterator>) nil_chk(nodeit)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *node = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([nodeit next], [ComVividsolutionsJtsGeomgraphNode class]);
    ComVividsolutionsJtsGeomgraphLabel *lbl = [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) check_class_cast([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getEdges], [ComVividsolutionsJtsGeomgraphDirectedEdgeStar class])))) getLabel];
    [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([node getLabel])) mergeWithComVividsolutionsJtsGeomgraphLabel:lbl];
  }
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodes(ComVividsolutionsJtsOperationOverlayOverlayOp *self) {
  jint nodeCount = 0;
  for (id<JavaUtilIterator> ni = [((id<JavaUtilCollection>) nil_chk([((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(self->graph_)) getNodes])) iterator]; [((id<JavaUtilIterator>) nil_chk(ni)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *n = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([ni next], [ComVividsolutionsJtsGeomgraphNode class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphNode *) nil_chk(n)) getLabel];
    if ([n isIsolated]) {
      nodeCount++;
      if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) isNullWithInt:0]) ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodeWithComVividsolutionsJtsGeomgraphNode_withInt_(self, n, 0);
      else ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodeWithComVividsolutionsJtsGeomgraphNode_withInt_(self, n, 1);
    }
    [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) check_class_cast([n getEdges], [ComVividsolutionsJtsGeomgraphDirectedEdgeStar class])))) updateLabellingWithComVividsolutionsJtsGeomgraphLabel:label];
  }
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_labelIncompleteNodeWithComVividsolutionsJtsGeomgraphNode_withInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, ComVividsolutionsJtsGeomgraphNode *n, jint targetIndex) {
  jint loc = [((ComVividsolutionsJtsAlgorithmPointLocator *) nil_chk(self->ptLocator_)) locateWithComVividsolutionsJtsGeomCoordinate:[((ComVividsolutionsJtsGeomgraphNode *) nil_chk(n)) getCoordinate] withComVividsolutionsJtsGeomGeometry:[((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(nil_chk(self->arg_), targetIndex))) getGeometry]];
  [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([n getLabel])) setLocationWithInt:targetIndex withInt:loc];
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_findResultAreaEdgesWithInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, jint opCode) {
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(self->graph_)) getEdgeEnds])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getLabel];
    if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) isArea] && ![de isInteriorAreaEdge] && ComVividsolutionsJtsOperationOverlayOverlayOp_isResultOfOpWithInt_withInt_withInt_([label getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT], [label getLocationWithInt:1 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT], opCode)) {
      [de setInResultWithBoolean:YES];
    }
  }
}

void ComVividsolutionsJtsOperationOverlayOverlayOp_cancelDuplicateResultEdges(ComVividsolutionsJtsOperationOverlayOverlayOp *self) {
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(self->graph_)) getEdgeEnds])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    ComVividsolutionsJtsGeomgraphDirectedEdge *sym = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getSym];
    if ([de isInResult] && [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(sym)) isInResult]) {
      [de setInResultWithBoolean:NO];
      [sym setInResultWithBoolean:NO];
    }
  }
}

jboolean ComVividsolutionsJtsOperationOverlayOverlayOp_isCoveredWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, ComVividsolutionsJtsGeomCoordinate *coord, id<JavaUtilList> geomList) {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(geomList)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomGeometry *geom = (ComVividsolutionsJtsGeomGeometry *) check_class_cast([it next], [ComVividsolutionsJtsGeomGeometry class]);
    jint loc = [((ComVividsolutionsJtsAlgorithmPointLocator *) nil_chk(self->ptLocator_)) locateWithComVividsolutionsJtsGeomCoordinate:coord withComVividsolutionsJtsGeomGeometry:geom];
    if (loc != ComVividsolutionsJtsGeomLocation_EXTERIOR) return YES;
  }
  return NO;
}

ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationOverlayOverlayOp_computeGeometryWithJavaUtilList_withJavaUtilList_withJavaUtilList_withInt_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, id<JavaUtilList> resultPointList, id<JavaUtilList> resultLineList, id<JavaUtilList> resultPolyList, jint opcode) {
  id<JavaUtilList> geomList = [new_JavaUtilArrayList_init() autorelease];
  [geomList addAllWithJavaUtilCollection:resultPointList];
  [geomList addAllWithJavaUtilCollection:resultLineList];
  [geomList addAllWithJavaUtilCollection:resultPolyList];
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(self->geomFact_)) buildGeometryWithJavaUtilCollection:geomList];
}

jint ComVividsolutionsJtsOperationOverlayOverlayOp_resultDimensionWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationOverlayOverlayOp *self, jint opCode, ComVividsolutionsJtsGeomGeometry *g0, ComVividsolutionsJtsGeomGeometry *g1) {
  jint dim0 = [((ComVividsolutionsJtsGeomGeometry *) nil_chk(g0)) getDimension];
  jint dim1 = [((ComVividsolutionsJtsGeomGeometry *) nil_chk(g1)) getDimension];
  jint resultDimension = -1;
  switch (opCode) {
    case ComVividsolutionsJtsOperationOverlayOverlayOp_INTERSECTION:
    resultDimension = JavaLangMath_minWithInt_withInt_(dim0, dim1);
    break;
    case ComVividsolutionsJtsOperationOverlayOverlayOp_UNION:
    resultDimension = JavaLangMath_maxWithInt_withInt_(dim0, dim1);
    break;
    case ComVividsolutionsJtsOperationOverlayOverlayOp_DIFFERENCE:
    resultDimension = dim0;
    break;
    case ComVividsolutionsJtsOperationOverlayOverlayOp_SYMDIFFERENCE:
    resultDimension = JavaLangMath_maxWithInt_withInt_(dim0, dim1);
    break;
  }
  return resultDimension;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationOverlayOverlayOp)
