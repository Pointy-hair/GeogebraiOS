//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/operation/buffer/validate/BufferResultValidator.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/MultiPolygon.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/operation/buffer/validate/BufferDistanceValidator.h"
#include "com/vividsolutions/jts/operation/buffer/validate/BufferResultValidator.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"

#define ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_MAX_ENV_DIFF_FRAC 0.012

@interface ComVividsolutionsJtsOperationBufferValidateBufferResultValidator () {
 @public
  ComVividsolutionsJtsGeomGeometry *input_;
  jdouble distance_;
  ComVividsolutionsJtsGeomGeometry *result_;
  jboolean isValid__;
  NSString *errorMsg_;
  ComVividsolutionsJtsGeomCoordinate *errorLocation_;
}

- (void)reportWithNSString:(NSString *)checkName;

- (void)checkPolygonal;

- (void)checkExpectedEmpty;

- (void)checkEnvelope;

- (void)checkArea;

- (void)checkDistance;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator, input_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator, result_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator, errorMsg_, NSString *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator, errorLocation_, ComVividsolutionsJtsGeomCoordinate *)

static jboolean ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_VERBOSE_ = NO;
J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator, VERBOSE_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator, VERBOSE_, jboolean)

J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator, MAX_ENV_DIFF_FRAC, jdouble)

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_reportWithNSString_(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self, NSString *checkName);

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkPolygonal(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkExpectedEmpty(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkEnvelope(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkArea(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkDistance(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self);

@implementation ComVividsolutionsJtsOperationBufferValidateBufferResultValidator

+ (jboolean)isValidWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g
                                             withDouble:(jdouble)distance
                   withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)result {
  return ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_isValidWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(g, distance, result);
}

+ (NSString *)isValidMsgWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g
                                                  withDouble:(jdouble)distance
                        withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)result {
  return ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_isValidMsgWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(g, distance, result);
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)input
                                              withDouble:(jdouble)distance
                    withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)result {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_initWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(self, input, distance, result);
  return self;
}

- (jboolean)isValid {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkPolygonal(self);
  if (!isValid__) return isValid__;
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkExpectedEmpty(self);
  if (!isValid__) return isValid__;
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkEnvelope(self);
  if (!isValid__) return isValid__;
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkArea(self);
  if (!isValid__) return isValid__;
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkDistance(self);
  return isValid__;
}

- (NSString *)getErrorMessage {
  return errorMsg_;
}

- (ComVividsolutionsJtsGeomCoordinate *)getErrorLocation {
  return errorLocation_;
}

- (void)reportWithNSString:(NSString *)checkName {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_reportWithNSString_(self, checkName);
}

- (void)checkPolygonal {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkPolygonal(self);
}

- (void)checkExpectedEmpty {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkExpectedEmpty(self);
}

- (void)checkEnvelope {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkEnvelope(self);
}

- (void)checkArea {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkArea(self);
}

- (void)checkDistance {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkDistance(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isValidWithComVividsolutionsJtsGeomGeometry:withDouble:withComVividsolutionsJtsGeomGeometry:", "isValid", "Z", 0x9, NULL, NULL },
    { "isValidMsgWithComVividsolutionsJtsGeomGeometry:withDouble:withComVividsolutionsJtsGeomGeometry:", "isValidMsg", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:withDouble:withComVividsolutionsJtsGeomGeometry:", "BufferResultValidator", NULL, 0x1, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
    { "getErrorMessage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getErrorLocation", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "reportWithNSString:", "report", "V", 0x2, NULL, NULL },
    { "checkPolygonal", NULL, "V", 0x2, NULL, NULL },
    { "checkExpectedEmpty", NULL, "V", 0x2, NULL, NULL },
    { "checkEnvelope", NULL, "V", 0x2, NULL, NULL },
    { "checkArea", NULL, "V", 0x2, NULL, NULL },
    { "checkDistance", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "VERBOSE_", NULL, 0xa, "Z", &ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_VERBOSE_, NULL,  },
    { "MAX_ENV_DIFF_FRAC_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_MAX_ENV_DIFF_FRAC },
    { "input_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "distance_", NULL, 0x2, "D", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "isValid__", "isValid", 0x2, "Z", NULL, NULL,  },
    { "errorMsg_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "errorLocation_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationBufferValidateBufferResultValidator = { 2, "BufferResultValidator", "com.vividsolutions.jts.operation.buffer.validate", NULL, 0x1, 12, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationBufferValidateBufferResultValidator;
}

@end

jboolean ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_isValidWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *g, jdouble distance, ComVividsolutionsJtsGeomGeometry *result) {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_initialize();
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *validator = new_ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_initWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(g, distance, result);
  if ([validator isValid]) return YES;
  return NO;
}

NSString *ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_isValidMsgWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *g, jdouble distance, ComVividsolutionsJtsGeomGeometry *result) {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_initialize();
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *validator = new_ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_initWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(g, distance, result);
  if (![validator isValid]) return [validator getErrorMessage];
  return nil;
}

void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_initWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self, ComVividsolutionsJtsGeomGeometry *input, jdouble distance, ComVividsolutionsJtsGeomGeometry *result) {
  (void) NSObject_init(self);
  self->isValid__ = YES;
  self->errorMsg_ = nil;
  self->errorLocation_ = nil;
  self->input_ = input;
  self->distance_ = distance;
  self->result_ = result;
}

ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *new_ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_initWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *input, jdouble distance, ComVividsolutionsJtsGeomGeometry *result) {
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self = [ComVividsolutionsJtsOperationBufferValidateBufferResultValidator alloc];
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_initWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(self, input, distance, result);
  return self;
}

void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_reportWithNSString_(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self, NSString *checkName) {
  if (!ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_VERBOSE_) return;
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$$$", @"Check ", checkName, @": ", (self->isValid__ ? @"passed" : @"FAILED"))];
}

void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkPolygonal(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self) {
  if (!([self->result_ isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]] || [self->result_ isKindOfClass:[ComVividsolutionsJtsGeomMultiPolygon class]])) self->isValid__ = NO;
  self->errorMsg_ = @"Result is not polygonal";
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_reportWithNSString_(self, @"Polygonal");
}

void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkExpectedEmpty(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self) {
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->input_)) getDimension] >= 2) return;
  if (self->distance_ > 0.0) return;
  if (![((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->result_)) isEmpty]) {
    self->isValid__ = NO;
    self->errorMsg_ = @"Result is non-empty";
  }
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_reportWithNSString_(self, @"ExpectedEmpty");
}

void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkEnvelope(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self) {
  if (self->distance_ < 0.0) return;
  jdouble padding = self->distance_ * ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_MAX_ENV_DIFF_FRAC;
  if (padding == 0.0) padding = 0.001;
  ComVividsolutionsJtsGeomEnvelope *expectedEnv = new_ComVividsolutionsJtsGeomEnvelope_initWithComVividsolutionsJtsGeomEnvelope_([((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->input_)) getEnvelopeInternal]);
  [expectedEnv expandByWithDouble:self->distance_];
  ComVividsolutionsJtsGeomEnvelope *bufEnv = new_ComVividsolutionsJtsGeomEnvelope_initWithComVividsolutionsJtsGeomEnvelope_([((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->result_)) getEnvelopeInternal]);
  [bufEnv expandByWithDouble:padding];
  if (![bufEnv containsWithComVividsolutionsJtsGeomEnvelope:expectedEnv]) {
    self->isValid__ = NO;
    self->errorMsg_ = @"Buffer envelope is incorrect";
  }
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_reportWithNSString_(self, @"Envelope");
}

void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkArea(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self) {
  jdouble inputArea = [((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->input_)) getArea];
  jdouble resultArea = [((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->result_)) getArea];
  if (self->distance_ > 0.0 && inputArea > resultArea) {
    self->isValid__ = NO;
    self->errorMsg_ = @"Area of positive buffer is smaller than input";
  }
  if (self->distance_ < 0.0 && inputArea < resultArea) {
    self->isValid__ = NO;
    self->errorMsg_ = @"Area of negative buffer is larger than input";
  }
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_reportWithNSString_(self, @"Area");
}

void ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_checkDistance(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator *self) {
  ComVividsolutionsJtsOperationBufferValidateBufferDistanceValidator *distValid = new_ComVividsolutionsJtsOperationBufferValidateBufferDistanceValidator_initWithComVividsolutionsJtsGeomGeometry_withDouble_withComVividsolutionsJtsGeomGeometry_(self->input_, self->distance_, self->result_);
  if (![distValid isValid]) {
    self->isValid__ = NO;
    self->errorMsg_ = [distValid getErrorMessage];
    self->errorLocation_ = [distValid getErrorLocation];
  }
  ComVividsolutionsJtsOperationBufferValidateBufferResultValidator_reportWithNSString_(self, @"Distance");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationBufferValidateBufferResultValidator)
