//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/operation/valid/ConnectedInteriorTester.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geom/MultiPolygon.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdge.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEnd.h"
#include "com/vividsolutions/jts/geomgraph/EdgeRing.h"
#include "com/vividsolutions/jts/geomgraph/GeometryGraph.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/PlanarGraph.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/operation/overlay/MaximalEdgeRing.h"
#include "com/vividsolutions/jts/operation/overlay/OverlayNodeFactory.h"
#include "com/vividsolutions/jts/operation/valid/ConnectedInteriorTester.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationValidConnectedInteriorTester () {
 @public
  ComVividsolutionsJtsGeomGeometryFactory *geometryFactory_;
  ComVividsolutionsJtsGeomgraphGeometryGraph *geomGraph_;
  ComVividsolutionsJtsGeomCoordinate *disconnectedRingcoord_;
}

- (void)setInteriorEdgesInResultWithComVividsolutionsJtsGeomgraphPlanarGraph:(ComVividsolutionsJtsGeomgraphPlanarGraph *)graph;

- (id<JavaUtilList>)buildEdgeRingsWithJavaUtilCollection:(id<JavaUtilCollection>)dirEdges;

- (void)visitShellInteriorsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g
                   withComVividsolutionsJtsGeomgraphPlanarGraph:(ComVividsolutionsJtsGeomgraphPlanarGraph *)graph;

- (void)visitInteriorRingWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)ring
                   withComVividsolutionsJtsGeomgraphPlanarGraph:(ComVividsolutionsJtsGeomgraphPlanarGraph *)graph;

- (jboolean)hasUnvisitedShellEdgeWithJavaUtilList:(id<JavaUtilList>)edgeRings;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationValidConnectedInteriorTester, geometryFactory_, ComVividsolutionsJtsGeomGeometryFactory *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationValidConnectedInteriorTester, geomGraph_, ComVividsolutionsJtsGeomgraphGeometryGraph *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationValidConnectedInteriorTester, disconnectedRingcoord_, ComVividsolutionsJtsGeomCoordinate *)

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidConnectedInteriorTester_setInteriorEdgesInResultWithComVividsolutionsJtsGeomgraphPlanarGraph_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, ComVividsolutionsJtsGeomgraphPlanarGraph *graph);

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsOperationValidConnectedInteriorTester_buildEdgeRingsWithJavaUtilCollection_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, id<JavaUtilCollection> dirEdges);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitShellInteriorsWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomgraphPlanarGraph_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, ComVividsolutionsJtsGeomGeometry *g, ComVividsolutionsJtsGeomgraphPlanarGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitInteriorRingWithComVividsolutionsJtsGeomLineString_withComVividsolutionsJtsGeomgraphPlanarGraph_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, ComVividsolutionsJtsGeomLineString *ring, ComVividsolutionsJtsGeomgraphPlanarGraph *graph);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationValidConnectedInteriorTester_hasUnvisitedShellEdgeWithJavaUtilList_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, id<JavaUtilList> edgeRings);

@implementation ComVividsolutionsJtsOperationValidConnectedInteriorTester

+ (ComVividsolutionsJtsGeomCoordinate *)findDifferentPointWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)coord
                                                               withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  return ComVividsolutionsJtsOperationValidConnectedInteriorTester_findDifferentPointWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomCoordinate_(coord, pt);
}

- (instancetype)initWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)geomGraph {
  ComVividsolutionsJtsOperationValidConnectedInteriorTester_initWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, geomGraph);
  return self;
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinate {
  return disconnectedRingcoord_;
}

- (jboolean)isInteriorsConnected {
  id<JavaUtilList> splitEdges = new_JavaUtilArrayList_init();
  [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(geomGraph_)) computeSplitEdgesWithJavaUtilList:splitEdges];
  ComVividsolutionsJtsGeomgraphPlanarGraph *graph = new_ComVividsolutionsJtsGeomgraphPlanarGraph_initWithComVividsolutionsJtsGeomgraphNodeFactory_(new_ComVividsolutionsJtsOperationOverlayOverlayNodeFactory_init());
  [graph addEdgesWithJavaUtilList:splitEdges];
  ComVividsolutionsJtsOperationValidConnectedInteriorTester_setInteriorEdgesInResultWithComVividsolutionsJtsGeomgraphPlanarGraph_(self, graph);
  [graph linkResultDirectedEdges];
  id<JavaUtilList> edgeRings = ComVividsolutionsJtsOperationValidConnectedInteriorTester_buildEdgeRingsWithJavaUtilCollection_(self, [graph getEdgeEnds]);
  ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitShellInteriorsWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomgraphPlanarGraph_(self, [geomGraph_ getGeometry], graph);
  return !ComVividsolutionsJtsOperationValidConnectedInteriorTester_hasUnvisitedShellEdgeWithJavaUtilList_(self, edgeRings);
}

- (void)setInteriorEdgesInResultWithComVividsolutionsJtsGeomgraphPlanarGraph:(ComVividsolutionsJtsGeomgraphPlanarGraph *)graph {
  ComVividsolutionsJtsOperationValidConnectedInteriorTester_setInteriorEdgesInResultWithComVividsolutionsJtsGeomgraphPlanarGraph_(self, graph);
}

- (id<JavaUtilList>)buildEdgeRingsWithJavaUtilCollection:(id<JavaUtilCollection>)dirEdges {
  return ComVividsolutionsJtsOperationValidConnectedInteriorTester_buildEdgeRingsWithJavaUtilCollection_(self, dirEdges);
}

- (void)visitShellInteriorsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g
                   withComVividsolutionsJtsGeomgraphPlanarGraph:(ComVividsolutionsJtsGeomgraphPlanarGraph *)graph {
  ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitShellInteriorsWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomgraphPlanarGraph_(self, g, graph);
}

- (void)visitInteriorRingWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)ring
                   withComVividsolutionsJtsGeomgraphPlanarGraph:(ComVividsolutionsJtsGeomgraphPlanarGraph *)graph {
  ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitInteriorRingWithComVividsolutionsJtsGeomLineString_withComVividsolutionsJtsGeomgraphPlanarGraph_(self, ring, graph);
}

- (void)visitLinkedDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)start {
  ComVividsolutionsJtsGeomgraphDirectedEdge *startDe = start;
  ComVividsolutionsJtsGeomgraphDirectedEdge *de = start;
  do {
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(de != nil, @"found null Directed Edge");
    [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) setVisitedWithBoolean:YES];
    de = [de getNext];
  }
  while (de != startDe);
}

- (jboolean)hasUnvisitedShellEdgeWithJavaUtilList:(id<JavaUtilList>)edgeRings {
  return ComVividsolutionsJtsOperationValidConnectedInteriorTester_hasUnvisitedShellEdgeWithJavaUtilList_(self, edgeRings);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "findDifferentPointWithComVividsolutionsJtsGeomCoordinateArray:withComVividsolutionsJtsGeomCoordinate:", "findDifferentPoint", "Lcom.vividsolutions.jts.geom.Coordinate;", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomgraphGeometryGraph:", "ConnectedInteriorTester", NULL, 0x1, NULL, NULL },
    { "getCoordinate", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "isInteriorsConnected", NULL, "Z", 0x1, NULL, NULL },
    { "setInteriorEdgesInResultWithComVividsolutionsJtsGeomgraphPlanarGraph:", "setInteriorEdgesInResult", "V", 0x2, NULL, NULL },
    { "buildEdgeRingsWithJavaUtilCollection:", "buildEdgeRings", "Ljava.util.List;", 0x2, NULL, NULL },
    { "visitShellInteriorsWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsGeomgraphPlanarGraph:", "visitShellInteriors", "V", 0x2, NULL, NULL },
    { "visitInteriorRingWithComVividsolutionsJtsGeomLineString:withComVividsolutionsJtsGeomgraphPlanarGraph:", "visitInteriorRing", "V", 0x2, NULL, NULL },
    { "visitLinkedDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdge:", "visitLinkedDirectedEdges", "V", 0x4, NULL, NULL },
    { "hasUnvisitedShellEdgeWithJavaUtilList:", "hasUnvisitedShellEdge", "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geometryFactory_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.GeometryFactory;", NULL, NULL,  },
    { "geomGraph_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.GeometryGraph;", NULL, NULL,  },
    { "disconnectedRingcoord_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationValidConnectedInteriorTester = { 2, "ConnectedInteriorTester", "com.vividsolutions.jts.operation.valid", NULL, 0x1, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationValidConnectedInteriorTester;
}

@end

ComVividsolutionsJtsGeomCoordinate *ComVividsolutionsJtsOperationValidConnectedInteriorTester_findDifferentPointWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomCoordinate_(IOSObjectArray *coord, ComVividsolutionsJtsGeomCoordinate *pt) {
  ComVividsolutionsJtsOperationValidConnectedInteriorTester_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coord))->size_; i++) {
    if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(coord, i))) isEqual:pt]) return IOSObjectArray_Get(coord, i);
  }
  return nil;
}

void ComVividsolutionsJtsOperationValidConnectedInteriorTester_initWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, ComVividsolutionsJtsGeomgraphGeometryGraph *geomGraph) {
  (void) NSObject_init(self);
  self->geometryFactory_ = new_ComVividsolutionsJtsGeomGeometryFactory_init();
  self->geomGraph_ = geomGraph;
}

ComVividsolutionsJtsOperationValidConnectedInteriorTester *new_ComVividsolutionsJtsOperationValidConnectedInteriorTester_initWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsGeomgraphGeometryGraph *geomGraph) {
  ComVividsolutionsJtsOperationValidConnectedInteriorTester *self = [ComVividsolutionsJtsOperationValidConnectedInteriorTester alloc];
  ComVividsolutionsJtsOperationValidConnectedInteriorTester_initWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, geomGraph);
  return self;
}

void ComVividsolutionsJtsOperationValidConnectedInteriorTester_setInteriorEdgesInResultWithComVividsolutionsJtsGeomgraphPlanarGraph_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, ComVividsolutionsJtsGeomgraphPlanarGraph *graph) {
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(graph)) getEdgeEnds])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getLabel])) getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT] == ComVividsolutionsJtsGeomLocation_INTERIOR) {
      [de setInResultWithBoolean:YES];
    }
  }
}

id<JavaUtilList> ComVividsolutionsJtsOperationValidConnectedInteriorTester_buildEdgeRingsWithJavaUtilCollection_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, id<JavaUtilCollection> dirEdges) {
  id<JavaUtilList> edgeRings = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(dirEdges)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    if ([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) isInResult] && [de getEdgeRing] == nil) {
      ComVividsolutionsJtsOperationOverlayMaximalEdgeRing *er = new_ComVividsolutionsJtsOperationOverlayMaximalEdgeRing_initWithComVividsolutionsJtsGeomgraphDirectedEdge_withComVividsolutionsJtsGeomGeometryFactory_(de, self->geometryFactory_);
      [er linkDirectedEdgesForMinimalEdgeRings];
      id<JavaUtilList> minEdgeRings = [er buildMinimalRings];
      [edgeRings addAllWithJavaUtilCollection:minEdgeRings];
    }
  }
  return edgeRings;
}

void ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitShellInteriorsWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomgraphPlanarGraph_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, ComVividsolutionsJtsGeomGeometry *g, ComVividsolutionsJtsGeomgraphPlanarGraph *graph) {
  if ([g isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]]) {
    ComVividsolutionsJtsGeomPolygon *p = (ComVividsolutionsJtsGeomPolygon *) check_class_cast(g, [ComVividsolutionsJtsGeomPolygon class]);
    ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitInteriorRingWithComVividsolutionsJtsGeomLineString_withComVividsolutionsJtsGeomgraphPlanarGraph_(self, [((ComVividsolutionsJtsGeomPolygon *) nil_chk(p)) getExteriorRing], graph);
  }
  if ([g isKindOfClass:[ComVividsolutionsJtsGeomMultiPolygon class]]) {
    ComVividsolutionsJtsGeomMultiPolygon *mp = (ComVividsolutionsJtsGeomMultiPolygon *) check_class_cast(g, [ComVividsolutionsJtsGeomMultiPolygon class]);
    for (jint i = 0; i < [((ComVividsolutionsJtsGeomMultiPolygon *) nil_chk(mp)) getNumGeometries]; i++) {
      ComVividsolutionsJtsGeomPolygon *p = (ComVividsolutionsJtsGeomPolygon *) check_class_cast([mp getGeometryNWithInt:i], [ComVividsolutionsJtsGeomPolygon class]);
      ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitInteriorRingWithComVividsolutionsJtsGeomLineString_withComVividsolutionsJtsGeomgraphPlanarGraph_(self, [((ComVividsolutionsJtsGeomPolygon *) nil_chk(p)) getExteriorRing], graph);
    }
  }
}

void ComVividsolutionsJtsOperationValidConnectedInteriorTester_visitInteriorRingWithComVividsolutionsJtsGeomLineString_withComVividsolutionsJtsGeomgraphPlanarGraph_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, ComVividsolutionsJtsGeomLineString *ring, ComVividsolutionsJtsGeomgraphPlanarGraph *graph) {
  IOSObjectArray *pts = [((ComVividsolutionsJtsGeomLineString *) nil_chk(ring)) getCoordinates];
  ComVividsolutionsJtsGeomCoordinate *pt0 = IOSObjectArray_Get(nil_chk(pts), 0);
  ComVividsolutionsJtsGeomCoordinate *pt1 = ComVividsolutionsJtsOperationValidConnectedInteriorTester_findDifferentPointWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomCoordinate_(pts, pt0);
  ComVividsolutionsJtsGeomgraphEdge *e = [((ComVividsolutionsJtsGeomgraphPlanarGraph *) nil_chk(graph)) findEdgeInSameDirectionWithComVividsolutionsJtsGeomCoordinate:pt0 withComVividsolutionsJtsGeomCoordinate:pt1];
  ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([graph findEdgeEndWithComVividsolutionsJtsGeomgraphEdge:e], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
  ComVividsolutionsJtsGeomgraphDirectedEdge *intDe = nil;
  if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getLabel])) getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT] == ComVividsolutionsJtsGeomLocation_INTERIOR) {
    intDe = de;
  }
  else if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk([de getSym])) getLabel])) getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT] == ComVividsolutionsJtsGeomLocation_INTERIOR) {
    intDe = [de getSym];
  }
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(intDe != nil, @"unable to find dirEdge with Interior on RHS");
  [self visitLinkedDirectedEdgesWithComVividsolutionsJtsGeomgraphDirectedEdge:intDe];
}

jboolean ComVividsolutionsJtsOperationValidConnectedInteriorTester_hasUnvisitedShellEdgeWithJavaUtilList_(ComVividsolutionsJtsOperationValidConnectedInteriorTester *self, id<JavaUtilList> edgeRings) {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(edgeRings)) size]; i++) {
    ComVividsolutionsJtsGeomgraphEdgeRing *er = (ComVividsolutionsJtsGeomgraphEdgeRing *) check_class_cast([edgeRings getWithInt:i], [ComVividsolutionsJtsGeomgraphEdgeRing class]);
    if ([((ComVividsolutionsJtsGeomgraphEdgeRing *) nil_chk(er)) isHole]) continue;
    id<JavaUtilList> edges = [er getEdges];
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([((id<JavaUtilList>) nil_chk(edges)) getWithInt:0], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getLabel])) getLocationWithInt:0 withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT] != ComVividsolutionsJtsGeomLocation_INTERIOR) continue;
    for (jint j = 0; j < [edges size]; j++) {
      de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([edges getWithInt:j], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
      if (![((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) isVisited]) {
        self->disconnectedRingcoord_ = [de getCoordinate];
        return YES;
      }
    }
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationValidConnectedInteriorTester)
