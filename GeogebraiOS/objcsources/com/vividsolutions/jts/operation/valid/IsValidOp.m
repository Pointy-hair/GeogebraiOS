//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/operation/valid/IsValidOp.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/CGAlgorithms.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/MCPointInRing.h"
#include "com/vividsolutions/jts/algorithm/PointInRing.h"
#include "com/vividsolutions/jts/algorithm/RobustLineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryCollection.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/MultiPoint.h"
#include "com/vividsolutions/jts/geom/MultiPolygon.h"
#include "com/vividsolutions/jts/geom/Point.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersection.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/GeometryGraph.h"
#include "com/vividsolutions/jts/geomgraph/index/SegmentIntersector.h"
#include "com/vividsolutions/jts/operation/valid/ConnectedInteriorTester.h"
#include "com/vividsolutions/jts/operation/valid/ConsistentAreaTester.h"
#include "com/vividsolutions/jts/operation/valid/IndexedNestedRingTester.h"
#include "com/vividsolutions/jts/operation/valid/IsValidOp.h"
#include "com/vividsolutions/jts/operation/valid/TopologyValidationError.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/lang/Double.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface ComVividsolutionsJtsOperationValidIsValidOp () {
 @public
  ComVividsolutionsJtsGeomGeometry *parentGeometry_;
  jboolean isSelfTouchingRingFormingHoleValid_;
  jboolean isChecked_;
  ComVividsolutionsJtsOperationValidTopologyValidationError *validErr_;
}

- (void)checkValidWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g;

- (void)checkValidWithComVividsolutionsJtsGeomPoint:(ComVividsolutionsJtsGeomPoint *)g;

- (void)checkValidWithComVividsolutionsJtsGeomMultiPoint:(ComVividsolutionsJtsGeomMultiPoint *)g;

- (void)checkValidWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)g;

- (void)checkValidWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)g;

- (void)checkValidWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)g;

- (void)checkValidWithComVividsolutionsJtsGeomMultiPolygon:(ComVividsolutionsJtsGeomMultiPolygon *)g;

- (void)checkValidWithComVividsolutionsJtsGeomGeometryCollection:(ComVividsolutionsJtsGeomGeometryCollection *)gc;

- (void)checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)coords;

- (void)checkInvalidCoordinatesWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)poly;

- (void)checkClosedRingsWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)poly;

- (void)checkClosedRingWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)ring;

- (void)checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (void)checkConsistentAreaWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (void)checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (void)checkNoSelfIntersectingRingWithComVividsolutionsJtsGeomgraphEdgeIntersectionList:(ComVividsolutionsJtsGeomgraphEdgeIntersectionList *)eiList;

- (void)checkHolesInShellWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)p
              withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (void)checkHolesNotNestedWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)p
                withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (void)checkShellsNotNestedWithComVividsolutionsJtsGeomMultiPolygon:(ComVividsolutionsJtsGeomMultiPolygon *)mp
                      withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (void)checkShellNotNestedWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)shell
                              withComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)p
                   withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (ComVividsolutionsJtsGeomCoordinate *)checkShellInsideHoleWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)shell
                                                            withComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)hole
                                                    withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (void)checkConnectedInteriorsWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationValidIsValidOp, parentGeometry_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationValidIsValidOp, validErr_, ComVividsolutionsJtsOperationValidTopologyValidationError *)

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomGeometry *g);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomPoint_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPoint *g);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomMultiPoint_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomMultiPoint *g);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLineString *g);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomLinearRing_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLinearRing *g);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomPolygon_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *g);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomMultiPolygon_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomMultiPolygon *g);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometryCollection_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomGeometryCollection *gc);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(ComVividsolutionsJtsOperationValidIsValidOp *self, IOSObjectArray *coords);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomPolygon_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *poly);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingsWithComVividsolutionsJtsGeomPolygon_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *poly);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingWithComVividsolutionsJtsGeomLinearRing_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLinearRing *ring);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkConsistentAreaWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingWithComVividsolutionsJtsGeomgraphEdgeIntersectionList_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphEdgeIntersectionList *eiList);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkHolesInShellWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *p, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkHolesNotNestedWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *p, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkShellsNotNestedWithComVividsolutionsJtsGeomMultiPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomMultiPolygon *mp, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkShellNotNestedWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLinearRing *shell, ComVividsolutionsJtsGeomPolygon *p, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static ComVividsolutionsJtsGeomCoordinate *ComVividsolutionsJtsOperationValidIsValidOp_checkShellInsideHoleWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLinearRing *shell, ComVividsolutionsJtsGeomLinearRing *hole, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationValidIsValidOp_checkConnectedInteriorsWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

@implementation ComVividsolutionsJtsOperationValidIsValidOp

+ (jboolean)isValidWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord {
  return ComVividsolutionsJtsOperationValidIsValidOp_isValidWithComVividsolutionsJtsGeomCoordinate_(coord);
}

+ (ComVividsolutionsJtsGeomCoordinate *)findPtNotNodeWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)testCoords
                                                          withComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)searchRing
                                                  withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  return ComVividsolutionsJtsOperationValidIsValidOp_findPtNotNodeWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(testCoords, searchRing, graph);
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)parentGeometry {
  ComVividsolutionsJtsOperationValidIsValidOp_initWithComVividsolutionsJtsGeomGeometry_(self, parentGeometry);
  return self;
}

- (void)setSelfTouchingRingFormingHoleValidWithBoolean:(jboolean)isValid {
  isSelfTouchingRingFormingHoleValid_ = isValid;
}

- (jboolean)isValid {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometry_(self, parentGeometry_);
  return validErr_ == nil;
}

- (ComVividsolutionsJtsOperationValidTopologyValidationError *)getValidationError {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometry_(self, parentGeometry_);
  return validErr_;
}

- (void)checkValidWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometry_(self, g);
}

- (void)checkValidWithComVividsolutionsJtsGeomPoint:(ComVividsolutionsJtsGeomPoint *)g {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomPoint_(self, g);
}

- (void)checkValidWithComVividsolutionsJtsGeomMultiPoint:(ComVividsolutionsJtsGeomMultiPoint *)g {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomMultiPoint_(self, g);
}

- (void)checkValidWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)g {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomLineString_(self, g);
}

- (void)checkValidWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)g {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomLinearRing_(self, g);
}

- (void)checkValidWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)g {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomPolygon_(self, g);
}

- (void)checkValidWithComVividsolutionsJtsGeomMultiPolygon:(ComVividsolutionsJtsGeomMultiPolygon *)g {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomMultiPolygon_(self, g);
}

- (void)checkValidWithComVividsolutionsJtsGeomGeometryCollection:(ComVividsolutionsJtsGeomGeometryCollection *)gc {
  ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometryCollection_(self, gc);
}

- (void)checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)coords {
  ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(self, coords);
}

- (void)checkInvalidCoordinatesWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)poly {
  ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomPolygon_(self, poly);
}

- (void)checkClosedRingsWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)poly {
  ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingsWithComVividsolutionsJtsGeomPolygon_(self, poly);
}

- (void)checkClosedRingWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)ring {
  ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingWithComVividsolutionsJtsGeomLinearRing_(self, ring);
}

- (void)checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  ComVividsolutionsJtsOperationValidIsValidOp_checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

- (void)checkConsistentAreaWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  ComVividsolutionsJtsOperationValidIsValidOp_checkConsistentAreaWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

- (void)checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

- (void)checkNoSelfIntersectingRingWithComVividsolutionsJtsGeomgraphEdgeIntersectionList:(ComVividsolutionsJtsGeomgraphEdgeIntersectionList *)eiList {
  ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingWithComVividsolutionsJtsGeomgraphEdgeIntersectionList_(self, eiList);
}

- (void)checkHolesInShellWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)p
              withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  ComVividsolutionsJtsOperationValidIsValidOp_checkHolesInShellWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, p, graph);
}

- (void)checkHolesNotNestedWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)p
                withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  ComVividsolutionsJtsOperationValidIsValidOp_checkHolesNotNestedWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, p, graph);
}

- (void)checkShellsNotNestedWithComVividsolutionsJtsGeomMultiPolygon:(ComVividsolutionsJtsGeomMultiPolygon *)mp
                      withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  ComVividsolutionsJtsOperationValidIsValidOp_checkShellsNotNestedWithComVividsolutionsJtsGeomMultiPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, mp, graph);
}

- (void)checkShellNotNestedWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)shell
                              withComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)p
                   withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  ComVividsolutionsJtsOperationValidIsValidOp_checkShellNotNestedWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, shell, p, graph);
}

- (ComVividsolutionsJtsGeomCoordinate *)checkShellInsideHoleWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)shell
                                                            withComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)hole
                                                    withComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  return ComVividsolutionsJtsOperationValidIsValidOp_checkShellInsideHoleWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, shell, hole, graph);
}

- (void)checkConnectedInteriorsWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  ComVividsolutionsJtsOperationValidIsValidOp_checkConnectedInteriorsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

- (void)dealloc {
  RELEASE_(parentGeometry_);
  RELEASE_(validErr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isValidWithComVividsolutionsJtsGeomCoordinate:", "isValid", "Z", 0x9, NULL, NULL },
    { "findPtNotNodeWithComVividsolutionsJtsGeomCoordinateArray:withComVividsolutionsJtsGeomLinearRing:withComVividsolutionsJtsGeomgraphGeometryGraph:", "findPtNotNode", "Lcom.vividsolutions.jts.geom.Coordinate;", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:", "IsValidOp", NULL, 0x1, NULL, NULL },
    { "setSelfTouchingRingFormingHoleValidWithBoolean:", "setSelfTouchingRingFormingHoleValid", "V", 0x1, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
    { "getValidationError", NULL, "Lcom.vividsolutions.jts.operation.valid.TopologyValidationError;", 0x1, NULL, NULL },
    { "checkValidWithComVividsolutionsJtsGeomGeometry:", "checkValid", "V", 0x2, NULL, NULL },
    { "checkValidWithComVividsolutionsJtsGeomPoint:", "checkValid", "V", 0x2, NULL, NULL },
    { "checkValidWithComVividsolutionsJtsGeomMultiPoint:", "checkValid", "V", 0x2, NULL, NULL },
    { "checkValidWithComVividsolutionsJtsGeomLineString:", "checkValid", "V", 0x2, NULL, NULL },
    { "checkValidWithComVividsolutionsJtsGeomLinearRing:", "checkValid", "V", 0x2, NULL, NULL },
    { "checkValidWithComVividsolutionsJtsGeomPolygon:", "checkValid", "V", 0x2, NULL, NULL },
    { "checkValidWithComVividsolutionsJtsGeomMultiPolygon:", "checkValid", "V", 0x2, NULL, NULL },
    { "checkValidWithComVividsolutionsJtsGeomGeometryCollection:", "checkValid", "V", 0x2, NULL, NULL },
    { "checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray:", "checkInvalidCoordinates", "V", 0x2, NULL, NULL },
    { "checkInvalidCoordinatesWithComVividsolutionsJtsGeomPolygon:", "checkInvalidCoordinates", "V", 0x2, NULL, NULL },
    { "checkClosedRingsWithComVividsolutionsJtsGeomPolygon:", "checkClosedRings", "V", 0x2, NULL, NULL },
    { "checkClosedRingWithComVividsolutionsJtsGeomLinearRing:", "checkClosedRing", "V", 0x2, NULL, NULL },
    { "checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph:", "checkTooFewPoints", "V", 0x2, NULL, NULL },
    { "checkConsistentAreaWithComVividsolutionsJtsGeomgraphGeometryGraph:", "checkConsistentArea", "V", 0x2, NULL, NULL },
    { "checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph:", "checkNoSelfIntersectingRings", "V", 0x2, NULL, NULL },
    { "checkNoSelfIntersectingRingWithComVividsolutionsJtsGeomgraphEdgeIntersectionList:", "checkNoSelfIntersectingRing", "V", 0x2, NULL, NULL },
    { "checkHolesInShellWithComVividsolutionsJtsGeomPolygon:withComVividsolutionsJtsGeomgraphGeometryGraph:", "checkHolesInShell", "V", 0x2, NULL, NULL },
    { "checkHolesNotNestedWithComVividsolutionsJtsGeomPolygon:withComVividsolutionsJtsGeomgraphGeometryGraph:", "checkHolesNotNested", "V", 0x2, NULL, NULL },
    { "checkShellsNotNestedWithComVividsolutionsJtsGeomMultiPolygon:withComVividsolutionsJtsGeomgraphGeometryGraph:", "checkShellsNotNested", "V", 0x2, NULL, NULL },
    { "checkShellNotNestedWithComVividsolutionsJtsGeomLinearRing:withComVividsolutionsJtsGeomPolygon:withComVividsolutionsJtsGeomgraphGeometryGraph:", "checkShellNotNested", "V", 0x2, NULL, NULL },
    { "checkShellInsideHoleWithComVividsolutionsJtsGeomLinearRing:withComVividsolutionsJtsGeomLinearRing:withComVividsolutionsJtsGeomgraphGeometryGraph:", "checkShellInsideHole", "Lcom.vividsolutions.jts.geom.Coordinate;", 0x2, NULL, NULL },
    { "checkConnectedInteriorsWithComVividsolutionsJtsGeomgraphGeometryGraph:", "checkConnectedInteriors", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parentGeometry_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "isSelfTouchingRingFormingHoleValid_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isChecked_", NULL, 0x2, "Z", NULL, NULL,  },
    { "validErr_", NULL, 0x2, "Lcom.vividsolutions.jts.operation.valid.TopologyValidationError;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationValidIsValidOp = { 2, "IsValidOp", "com.vividsolutions.jts.operation.valid", NULL, 0x1, 28, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationValidIsValidOp;
}

@end

jboolean ComVividsolutionsJtsOperationValidIsValidOp_isValidWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomCoordinate *coord) {
  ComVividsolutionsJtsOperationValidIsValidOp_initialize();
  if (JavaLangDouble_isNaNWithDouble_(((ComVividsolutionsJtsGeomCoordinate *) nil_chk(coord))->x_)) return NO;
  if (JavaLangDouble_isInfiniteWithDouble_(coord->x_)) return NO;
  if (JavaLangDouble_isNaNWithDouble_(coord->y_)) return NO;
  if (JavaLangDouble_isInfiniteWithDouble_(coord->y_)) return NO;
  return YES;
}

ComVividsolutionsJtsGeomCoordinate *ComVividsolutionsJtsOperationValidIsValidOp_findPtNotNodeWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(IOSObjectArray *testCoords, ComVividsolutionsJtsGeomLinearRing *searchRing, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  ComVividsolutionsJtsOperationValidIsValidOp_initialize();
  ComVividsolutionsJtsGeomgraphEdge *searchEdge = [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(graph)) findEdgeWithComVividsolutionsJtsGeomLineString:searchRing];
  ComVividsolutionsJtsGeomgraphEdgeIntersectionList *eiList = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(searchEdge)) getEdgeIntersectionList];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(testCoords))->size_; i++) {
    ComVividsolutionsJtsGeomCoordinate *pt = IOSObjectArray_Get(testCoords, i);
    if (![((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk(eiList)) isIntersectionWithComVividsolutionsJtsGeomCoordinate:pt]) return pt;
  }
  return nil;
}

void ComVividsolutionsJtsOperationValidIsValidOp_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomGeometry *parentGeometry) {
  NSObject_init(self);
  self->isSelfTouchingRingFormingHoleValid_ = NO;
  self->isChecked_ = NO;
  ComVividsolutionsJtsOperationValidIsValidOp_set_parentGeometry_(self, parentGeometry);
}

ComVividsolutionsJtsOperationValidIsValidOp *new_ComVividsolutionsJtsOperationValidIsValidOp_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *parentGeometry) {
  ComVividsolutionsJtsOperationValidIsValidOp *self = [ComVividsolutionsJtsOperationValidIsValidOp alloc];
  ComVividsolutionsJtsOperationValidIsValidOp_initWithComVividsolutionsJtsGeomGeometry_(self, parentGeometry);
  return self;
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomGeometry *g) {
  if (self->isChecked_) return;
  ComVividsolutionsJtsOperationValidIsValidOp_set_validErr_(self, nil);
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) isEmpty]) return;
  if ([g isKindOfClass:[ComVividsolutionsJtsGeomPoint class]]) ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomPoint_(self, (ComVividsolutionsJtsGeomPoint *) check_class_cast(g, [ComVividsolutionsJtsGeomPoint class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomMultiPoint class]]) ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomMultiPoint_(self, (ComVividsolutionsJtsGeomMultiPoint *) check_class_cast(g, [ComVividsolutionsJtsGeomMultiPoint class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomLinearRing class]]) ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomLinearRing_(self, (ComVividsolutionsJtsGeomLinearRing *) check_class_cast(g, [ComVividsolutionsJtsGeomLinearRing class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomLineString class]]) ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomLineString_(self, (ComVividsolutionsJtsGeomLineString *) check_class_cast(g, [ComVividsolutionsJtsGeomLineString class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]]) ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomPolygon_(self, (ComVividsolutionsJtsGeomPolygon *) check_class_cast(g, [ComVividsolutionsJtsGeomPolygon class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomMultiPolygon class]]) ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomMultiPolygon_(self, (ComVividsolutionsJtsGeomMultiPolygon *) check_class_cast(g, [ComVividsolutionsJtsGeomMultiPolygon class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomGeometryCollection class]]) ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometryCollection_(self, (ComVividsolutionsJtsGeomGeometryCollection *) check_class_cast(g, [ComVividsolutionsJtsGeomGeometryCollection class]));
  else @throw [new_JavaLangUnsupportedOperationException_initWithNSString_([[g getClass] getName]) autorelease];
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomPoint_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPoint *g) {
  ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(self, [((ComVividsolutionsJtsGeomPoint *) nil_chk(g)) getCoordinates]);
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomMultiPoint_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomMultiPoint *g) {
  ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(self, [((ComVividsolutionsJtsGeomMultiPoint *) nil_chk(g)) getCoordinates]);
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLineString *g) {
  ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(self, [((ComVividsolutionsJtsGeomLineString *) nil_chk(g)) getCoordinates]);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsGeomgraphGeometryGraph *graph = [new_ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(0, g) autorelease];
  ComVividsolutionsJtsOperationValidIsValidOp_checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomLinearRing_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLinearRing *g) {
  ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(self, [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(g)) getCoordinates]);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingWithComVividsolutionsJtsGeomLinearRing_(self, g);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsGeomgraphGeometryGraph *graph = [new_ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(0, g) autorelease];
  ComVividsolutionsJtsOperationValidIsValidOp_checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsAlgorithmLineIntersector *li = [new_ComVividsolutionsJtsAlgorithmRobustLineIntersector_init() autorelease];
  [graph computeSelfNodesWithComVividsolutionsJtsAlgorithmLineIntersector:li withBoolean:YES];
  ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomPolygon_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *g) {
  ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomPolygon_(self, g);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingsWithComVividsolutionsJtsGeomPolygon_(self, g);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsGeomgraphGeometryGraph *graph = [new_ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(0, g) autorelease];
  ComVividsolutionsJtsOperationValidIsValidOp_checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsOperationValidIsValidOp_checkConsistentAreaWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
  if (self->validErr_ != nil) return;
  if (!self->isSelfTouchingRingFormingHoleValid_) {
    ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
    if (self->validErr_ != nil) return;
  }
  ComVividsolutionsJtsOperationValidIsValidOp_checkHolesInShellWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, g, graph);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsOperationValidIsValidOp_checkHolesNotNestedWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, g, graph);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsOperationValidIsValidOp_checkConnectedInteriorsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomMultiPolygon_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomMultiPolygon *g) {
  for (jint i = 0; i < [((ComVividsolutionsJtsGeomMultiPolygon *) nil_chk(g)) getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomPolygon *p = (ComVividsolutionsJtsGeomPolygon *) check_class_cast([g getGeometryNWithInt:i], [ComVividsolutionsJtsGeomPolygon class]);
    ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomPolygon_(self, p);
    if (self->validErr_ != nil) return;
    ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingsWithComVividsolutionsJtsGeomPolygon_(self, p);
    if (self->validErr_ != nil) return;
  }
  ComVividsolutionsJtsGeomgraphGeometryGraph *graph = [new_ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(0, g) autorelease];
  ComVividsolutionsJtsOperationValidIsValidOp_checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsOperationValidIsValidOp_checkConsistentAreaWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
  if (self->validErr_ != nil) return;
  if (!self->isSelfTouchingRingFormingHoleValid_) {
    ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
    if (self->validErr_ != nil) return;
  }
  for (jint i = 0; i < [g getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomPolygon *p = (ComVividsolutionsJtsGeomPolygon *) check_class_cast([g getGeometryNWithInt:i], [ComVividsolutionsJtsGeomPolygon class]);
    ComVividsolutionsJtsOperationValidIsValidOp_checkHolesInShellWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, p, graph);
    if (self->validErr_ != nil) return;
  }
  for (jint i = 0; i < [g getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomPolygon *p = (ComVividsolutionsJtsGeomPolygon *) check_class_cast([g getGeometryNWithInt:i], [ComVividsolutionsJtsGeomPolygon class]);
    ComVividsolutionsJtsOperationValidIsValidOp_checkHolesNotNestedWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, p, graph);
    if (self->validErr_ != nil) return;
  }
  ComVividsolutionsJtsOperationValidIsValidOp_checkShellsNotNestedWithComVividsolutionsJtsGeomMultiPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, g, graph);
  if (self->validErr_ != nil) return;
  ComVividsolutionsJtsOperationValidIsValidOp_checkConnectedInteriorsWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometryCollection_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomGeometryCollection *gc) {
  for (jint i = 0; i < [((ComVividsolutionsJtsGeomGeometryCollection *) nil_chk(gc)) getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomGeometry *g = [gc getGeometryNWithInt:i];
    ComVividsolutionsJtsOperationValidIsValidOp_checkValidWithComVividsolutionsJtsGeomGeometry_(self, g);
    if (self->validErr_ != nil) return;
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(ComVividsolutionsJtsOperationValidIsValidOp *self, IOSObjectArray *coords) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coords))->size_; i++) {
    if (!ComVividsolutionsJtsOperationValidIsValidOp_isValidWithComVividsolutionsJtsGeomCoordinate_(IOSObjectArray_Get(coords, i))) {
      ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_INVALID_COORDINATE, IOSObjectArray_Get(coords, i)));
      return;
    }
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomPolygon_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *poly) {
  ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(self, [((ComVividsolutionsJtsGeomLineString *) nil_chk([((ComVividsolutionsJtsGeomPolygon *) nil_chk(poly)) getExteriorRing])) getCoordinates]);
  if (self->validErr_ != nil) return;
  for (jint i = 0; i < [poly getNumInteriorRing]; i++) {
    ComVividsolutionsJtsOperationValidIsValidOp_checkInvalidCoordinatesWithComVividsolutionsJtsGeomCoordinateArray_(self, [((ComVividsolutionsJtsGeomLineString *) nil_chk([poly getInteriorRingNWithInt:i])) getCoordinates]);
    if (self->validErr_ != nil) return;
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingsWithComVividsolutionsJtsGeomPolygon_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *poly) {
  ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingWithComVividsolutionsJtsGeomLinearRing_(self, (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomPolygon *) nil_chk(poly)) getExteriorRing], [ComVividsolutionsJtsGeomLinearRing class]));
  if (self->validErr_ != nil) return;
  for (jint i = 0; i < [poly getNumInteriorRing]; i++) {
    ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingWithComVividsolutionsJtsGeomLinearRing_(self, (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([poly getInteriorRingNWithInt:i], [ComVividsolutionsJtsGeomLinearRing class]));
    if (self->validErr_ != nil) return;
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkClosedRingWithComVividsolutionsJtsGeomLinearRing_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLinearRing *ring) {
  if (![((ComVividsolutionsJtsGeomLinearRing *) nil_chk(ring)) isClosed]) ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_RING_NOT_CLOSED, [ring getCoordinateNWithInt:0]));
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkTooFewPointsWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  if ([((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(graph)) hasTooFewPoints]) {
    ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_TOO_FEW_POINTS, [graph getInvalidPoint]));
    return;
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkConsistentAreaWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  ComVividsolutionsJtsOperationValidConsistentAreaTester *cat = [new_ComVividsolutionsJtsOperationValidConsistentAreaTester_initWithComVividsolutionsJtsGeomgraphGeometryGraph_(graph) autorelease];
  jboolean isValidArea = [cat isNodeConsistentArea];
  if (!isValidArea) {
    ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_SELF_INTERSECTION, [cat getInvalidPoint]));
    return;
  }
  if ([cat hasDuplicateRings]) {
    ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_DUPLICATE_RINGS, [cat getInvalidPoint]));
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingsWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(graph)) getEdgeIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdge class]);
    ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingWithComVividsolutionsJtsGeomgraphEdgeIntersectionList_(self, [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getEdgeIntersectionList]);
    if (self->validErr_ != nil) return;
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkNoSelfIntersectingRingWithComVividsolutionsJtsGeomgraphEdgeIntersectionList_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphEdgeIntersectionList *eiList) {
  id<JavaUtilSet> nodeSet = [new_JavaUtilTreeSet_init() autorelease];
  jboolean isFirst = YES;
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk(eiList)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
    if (isFirst) {
      isFirst = NO;
      continue;
    }
    if ([nodeSet containsWithId:((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(ei))->coord_]) {
      ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_RING_SELF_INTERSECTION, ei->coord_));
      return;
    }
    else {
      [nodeSet addWithId:ei->coord_];
    }
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkHolesInShellWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *p, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  ComVividsolutionsJtsGeomLinearRing *shell = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomPolygon *) nil_chk(p)) getExteriorRing], [ComVividsolutionsJtsGeomLinearRing class]);
  id<ComVividsolutionsJtsAlgorithmPointInRing> pir = [new_ComVividsolutionsJtsAlgorithmMCPointInRing_initWithComVividsolutionsJtsGeomLinearRing_(shell) autorelease];
  for (jint i = 0; i < [p getNumInteriorRing]; i++) {
    ComVividsolutionsJtsGeomLinearRing *hole = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([p getInteriorRingNWithInt:i], [ComVividsolutionsJtsGeomLinearRing class]);
    ComVividsolutionsJtsGeomCoordinate *holePt = ComVividsolutionsJtsOperationValidIsValidOp_findPtNotNodeWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(hole)) getCoordinates], shell, graph);
    if (holePt == nil) return;
    jboolean outside = ![pir isInsideWithComVividsolutionsJtsGeomCoordinate:holePt];
    if (outside) {
      ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_HOLE_OUTSIDE_SHELL, holePt));
      return;
    }
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkHolesNotNestedWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomPolygon *p, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  ComVividsolutionsJtsOperationValidIndexedNestedRingTester *nestedTester = [new_ComVividsolutionsJtsOperationValidIndexedNestedRingTester_initWithComVividsolutionsJtsGeomgraphGeometryGraph_(graph) autorelease];
  for (jint i = 0; i < [((ComVividsolutionsJtsGeomPolygon *) nil_chk(p)) getNumInteriorRing]; i++) {
    ComVividsolutionsJtsGeomLinearRing *innerHole = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([p getInteriorRingNWithInt:i], [ComVividsolutionsJtsGeomLinearRing class]);
    [nestedTester addWithComVividsolutionsJtsGeomLinearRing:innerHole];
  }
  jboolean isNonNested = [nestedTester isNonNested];
  if (!isNonNested) {
    ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_NESTED_HOLES, [nestedTester getNestedPoint]));
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkShellsNotNestedWithComVividsolutionsJtsGeomMultiPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomMultiPolygon *mp, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  for (jint i = 0; i < [((ComVividsolutionsJtsGeomMultiPolygon *) nil_chk(mp)) getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomPolygon *p = (ComVividsolutionsJtsGeomPolygon *) check_class_cast([mp getGeometryNWithInt:i], [ComVividsolutionsJtsGeomPolygon class]);
    ComVividsolutionsJtsGeomLinearRing *shell = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomPolygon *) nil_chk(p)) getExteriorRing], [ComVividsolutionsJtsGeomLinearRing class]);
    for (jint j = 0; j < [mp getNumGeometries]; j++) {
      if (i == j) continue;
      ComVividsolutionsJtsGeomPolygon *p2 = (ComVividsolutionsJtsGeomPolygon *) check_class_cast([mp getGeometryNWithInt:j], [ComVividsolutionsJtsGeomPolygon class]);
      ComVividsolutionsJtsOperationValidIsValidOp_checkShellNotNestedWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, shell, p2, graph);
      if (self->validErr_ != nil) return;
    }
  }
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkShellNotNestedWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLinearRing *shell, ComVividsolutionsJtsGeomPolygon *p, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  IOSObjectArray *shellPts = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell)) getCoordinates];
  ComVividsolutionsJtsGeomLinearRing *polyShell = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomPolygon *) nil_chk(p)) getExteriorRing], [ComVividsolutionsJtsGeomLinearRing class]);
  IOSObjectArray *polyPts = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(polyShell)) getCoordinates];
  ComVividsolutionsJtsGeomCoordinate *shellPt = ComVividsolutionsJtsOperationValidIsValidOp_findPtNotNodeWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(shellPts, polyShell, graph);
  if (shellPt == nil) return;
  jboolean insidePolyShell = ComVividsolutionsJtsAlgorithmCGAlgorithms_isPointInRingWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(shellPt, polyPts);
  if (!insidePolyShell) return;
  if ([p getNumInteriorRing] <= 0) {
    ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_NESTED_SHELLS, shellPt));
    return;
  }
  ComVividsolutionsJtsGeomCoordinate *badNestedPt = nil;
  for (jint i = 0; i < [p getNumInteriorRing]; i++) {
    ComVividsolutionsJtsGeomLinearRing *hole = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([p getInteriorRingNWithInt:i], [ComVividsolutionsJtsGeomLinearRing class]);
    badNestedPt = ComVividsolutionsJtsOperationValidIsValidOp_checkShellInsideHoleWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(self, shell, hole, graph);
    if (badNestedPt == nil) return;
  }
  ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_NESTED_SHELLS, badNestedPt));
}

ComVividsolutionsJtsGeomCoordinate *ComVividsolutionsJtsOperationValidIsValidOp_checkShellInsideHoleWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomLinearRing *shell, ComVividsolutionsJtsGeomLinearRing *hole, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  IOSObjectArray *shellPts = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell)) getCoordinates];
  IOSObjectArray *holePts = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(hole)) getCoordinates];
  ComVividsolutionsJtsGeomCoordinate *shellPt = ComVividsolutionsJtsOperationValidIsValidOp_findPtNotNodeWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(shellPts, hole, graph);
  if (shellPt != nil) {
    jboolean insideHole = ComVividsolutionsJtsAlgorithmCGAlgorithms_isPointInRingWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(shellPt, holePts);
    if (!insideHole) {
      return shellPt;
    }
  }
  ComVividsolutionsJtsGeomCoordinate *holePt = ComVividsolutionsJtsOperationValidIsValidOp_findPtNotNodeWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomgraphGeometryGraph_(holePts, shell, graph);
  if (holePt != nil) {
    jboolean insideShell = ComVividsolutionsJtsAlgorithmCGAlgorithms_isPointInRingWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(holePt, shellPts);
    if (insideShell) {
      return holePt;
    }
    return nil;
  }
  ComVividsolutionsJtsUtilAssert_shouldNeverReachHereWithNSString_(@"points in shell and hole appear to be equal");
  return nil;
}

void ComVividsolutionsJtsOperationValidIsValidOp_checkConnectedInteriorsWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationValidIsValidOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  ComVividsolutionsJtsOperationValidConnectedInteriorTester *cit = [new_ComVividsolutionsJtsOperationValidConnectedInteriorTester_initWithComVividsolutionsJtsGeomgraphGeometryGraph_(graph) autorelease];
  if (![cit isInteriorsConnected]) ComVividsolutionsJtsOperationValidIsValidOp_setAndConsume_validErr_(self, new_ComVividsolutionsJtsOperationValidTopologyValidationError_initWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationValidTopologyValidationError_DISCONNECTED_INTERIOR, [cit getCoordinate]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationValidIsValidOp)
