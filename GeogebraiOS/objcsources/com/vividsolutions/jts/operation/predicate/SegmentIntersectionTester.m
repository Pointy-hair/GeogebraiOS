//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/operation/predicate/SegmentIntersectionTester.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/RobustLineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateSequence.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/operation/predicate/SegmentIntersectionTester.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester () {
 @public
  ComVividsolutionsJtsAlgorithmLineIntersector *li_;
  jboolean hasIntersection__;
  ComVividsolutionsJtsGeomCoordinate *pt00_;
  ComVividsolutionsJtsGeomCoordinate *pt01_;
  ComVividsolutionsJtsGeomCoordinate *pt10_;
  ComVividsolutionsJtsGeomCoordinate *pt11_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester, pt00_, ComVividsolutionsJtsGeomCoordinate *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester, pt01_, ComVividsolutionsJtsGeomCoordinate *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester, pt10_, ComVividsolutionsJtsGeomCoordinate *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester, pt11_, ComVividsolutionsJtsGeomCoordinate *)

@implementation ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester

- (instancetype)init {
  ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_init(self);
  return self;
}

- (jboolean)hasIntersectionWithLineStringsWithComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)seq
                                                                        withJavaUtilList:(id<JavaUtilList>)lines {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(lines)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomLineString *line = (ComVividsolutionsJtsGeomLineString *) check_class_cast([i next], [ComVividsolutionsJtsGeomLineString class]);
    [self hasIntersectionWithComVividsolutionsJtsGeomCoordinateSequence:seq withComVividsolutionsJtsGeomCoordinateSequence:[((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) getCoordinateSequence]];
    if (hasIntersection__) break;
  }
  return hasIntersection__;
}

- (jboolean)hasIntersectionWithComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)seq0
                           withComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)seq1 {
  for (jint i = 1; i < [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(seq0)) size] && !hasIntersection__; i++) {
    [seq0 getCoordinateWithInt:i - 1 withComVividsolutionsJtsGeomCoordinate:pt00_];
    [seq0 getCoordinateWithInt:i withComVividsolutionsJtsGeomCoordinate:pt01_];
    for (jint j = 1; j < [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(seq1)) size] && !hasIntersection__; j++) {
      [seq1 getCoordinateWithInt:j - 1 withComVividsolutionsJtsGeomCoordinate:pt10_];
      [seq1 getCoordinateWithInt:j withComVividsolutionsJtsGeomCoordinate:pt11_];
      [((ComVividsolutionsJtsAlgorithmLineIntersector *) nil_chk(li_)) computeIntersectionWithComVividsolutionsJtsGeomCoordinate:pt00_ withComVividsolutionsJtsGeomCoordinate:pt01_ withComVividsolutionsJtsGeomCoordinate:pt10_ withComVividsolutionsJtsGeomCoordinate:pt11_];
      if ([li_ hasIntersection]) hasIntersection__ = YES;
    }
  }
  return hasIntersection__;
}

- (void)dealloc {
  RELEASE_(li_);
  RELEASE_(pt00_);
  RELEASE_(pt01_);
  RELEASE_(pt10_);
  RELEASE_(pt11_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SegmentIntersectionTester", NULL, 0x1, NULL, NULL },
    { "hasIntersectionWithLineStringsWithComVividsolutionsJtsGeomCoordinateSequence:withJavaUtilList:", "hasIntersectionWithLineStrings", "Z", 0x1, NULL, NULL },
    { "hasIntersectionWithComVividsolutionsJtsGeomCoordinateSequence:withComVividsolutionsJtsGeomCoordinateSequence:", "hasIntersection", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "li_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", NULL, NULL,  },
    { "hasIntersection__", "hasIntersection", 0x2, "Z", NULL, NULL,  },
    { "pt00_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "pt01_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "pt10_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "pt11_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester = { 2, "SegmentIntersectionTester", "com.vividsolutions.jts.operation.predicate", NULL, 0x1, 3, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester;
}

@end

void ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_init(ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester *self) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_setAndConsume_li_(self, new_ComVividsolutionsJtsAlgorithmRobustLineIntersector_init());
  self->hasIntersection__ = NO;
  ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_setAndConsume_pt00_(self, new_ComVividsolutionsJtsGeomCoordinate_init());
  ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_setAndConsume_pt01_(self, new_ComVividsolutionsJtsGeomCoordinate_init());
  ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_setAndConsume_pt10_(self, new_ComVividsolutionsJtsGeomCoordinate_init());
  ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_setAndConsume_pt11_(self, new_ComVividsolutionsJtsGeomCoordinate_init());
}

ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester *new_ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_init() {
  ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester *self = [ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester alloc];
  ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationPredicateSegmentIntersectionTester)
