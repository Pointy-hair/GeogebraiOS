//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/operation/polygonize/EdgeRing.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/CGAlgorithms.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateArrays.h"
#include "com/vividsolutions/jts/geom/CoordinateList.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/operation/polygonize/EdgeRing.h"
#include "com/vividsolutions/jts/operation/polygonize/PolygonizeEdge.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdge.h"
#include "com/vividsolutions/jts/planargraph/Edge.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationPolygonizeEdgeRing () {
 @public
  ComVividsolutionsJtsGeomGeometryFactory *factory_;
  id<JavaUtilList> deList_;
  ComVividsolutionsJtsGeomLinearRing *ring_;
  IOSObjectArray *ringPts_;
  id<JavaUtilList> holes_;
}

- (IOSObjectArray *)getCoordinates;

+ (void)addEdgeWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)coords
                                               withBoolean:(jboolean)isForward
                withComVividsolutionsJtsGeomCoordinateList:(ComVividsolutionsJtsGeomCoordinateList *)coordList;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPolygonizeEdgeRing, factory_, ComVividsolutionsJtsGeomGeometryFactory *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPolygonizeEdgeRing, deList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPolygonizeEdgeRing, ring_, ComVividsolutionsJtsGeomLinearRing *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPolygonizeEdgeRing, ringPts_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationPolygonizeEdgeRing, holes_, id<JavaUtilList>)

__attribute__((unused)) static IOSObjectArray *ComVividsolutionsJtsOperationPolygonizeEdgeRing_getCoordinates(ComVividsolutionsJtsOperationPolygonizeEdgeRing *self);

__attribute__((unused)) static void ComVividsolutionsJtsOperationPolygonizeEdgeRing_addEdgeWithComVividsolutionsJtsGeomCoordinateArray_withBoolean_withComVividsolutionsJtsGeomCoordinateList_(IOSObjectArray *coords, jboolean isForward, ComVividsolutionsJtsGeomCoordinateList *coordList);

@implementation ComVividsolutionsJtsOperationPolygonizeEdgeRing

+ (ComVividsolutionsJtsOperationPolygonizeEdgeRing *)findEdgeRingContainingWithComVividsolutionsJtsOperationPolygonizeEdgeRing:(ComVividsolutionsJtsOperationPolygonizeEdgeRing *)testEr
                                                                                                              withJavaUtilList:(id<JavaUtilList>)shellList {
  return ComVividsolutionsJtsOperationPolygonizeEdgeRing_findEdgeRingContainingWithComVividsolutionsJtsOperationPolygonizeEdgeRing_withJavaUtilList_(testEr, shellList);
}

+ (ComVividsolutionsJtsGeomCoordinate *)ptNotInListWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)testPts
                                                   withComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)pts {
  return ComVividsolutionsJtsOperationPolygonizeEdgeRing_ptNotInListWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomCoordinateArray_(testPts, pts);
}

+ (jboolean)isInListWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt
               withComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)pts {
  return ComVividsolutionsJtsOperationPolygonizeEdgeRing_isInListWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(pt, pts);
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometryFactory:(ComVividsolutionsJtsGeomGeometryFactory *)factory {
  ComVividsolutionsJtsOperationPolygonizeEdgeRing_initWithComVividsolutionsJtsGeomGeometryFactory_(self, factory);
  return self;
}

- (void)addWithComVividsolutionsJtsPlanargraphDirectedEdge:(ComVividsolutionsJtsPlanargraphDirectedEdge *)de {
  [((id<JavaUtilList>) nil_chk(deList_)) addWithId:de];
}

- (jboolean)isHole {
  ComVividsolutionsJtsGeomLinearRing *ring = [self getRing];
  return ComVividsolutionsJtsAlgorithmCGAlgorithms_isCCWWithComVividsolutionsJtsGeomCoordinateArray_([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(ring)) getCoordinates]);
}

- (void)addHoleWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)hole {
  if (holes_ == nil) holes_ = new_JavaUtilArrayList_init();
  [((id<JavaUtilList>) nil_chk(holes_)) addWithId:hole];
}

- (ComVividsolutionsJtsGeomPolygon *)getPolygon {
  IOSObjectArray *holeLR = nil;
  if (holes_ != nil) {
    holeLR = [IOSObjectArray newArrayWithLength:[holes_ size] type:ComVividsolutionsJtsGeomLinearRing_class_()];
    for (jint i = 0; i < [holes_ size]; i++) {
      (void) IOSObjectArray_Set(holeLR, i, (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([holes_ getWithInt:i], [ComVividsolutionsJtsGeomLinearRing class]));
    }
  }
  ComVividsolutionsJtsGeomPolygon *poly = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(factory_)) createPolygonWithComVividsolutionsJtsGeomLinearRing:ring_ withComVividsolutionsJtsGeomLinearRingArray:holeLR];
  return poly;
}

- (jboolean)isValid {
  (void) ComVividsolutionsJtsOperationPolygonizeEdgeRing_getCoordinates(self);
  if (((IOSObjectArray *) nil_chk(ringPts_))->size_ <= 3) return NO;
  (void) [self getRing];
  return [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(ring_)) isValid];
}

- (IOSObjectArray *)getCoordinates {
  return ComVividsolutionsJtsOperationPolygonizeEdgeRing_getCoordinates(self);
}

- (ComVividsolutionsJtsGeomLineString *)getLineString {
  (void) ComVividsolutionsJtsOperationPolygonizeEdgeRing_getCoordinates(self);
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(factory_)) createLineStringWithComVividsolutionsJtsGeomCoordinateArray:ringPts_];
}

- (ComVividsolutionsJtsGeomLinearRing *)getRing {
  if (ring_ != nil) return ring_;
  (void) ComVividsolutionsJtsOperationPolygonizeEdgeRing_getCoordinates(self);
  if (((IOSObjectArray *) nil_chk(ringPts_))->size_ < 3) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithId:ringPts_];
  @try {
    ring_ = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(factory_)) createLinearRingWithComVividsolutionsJtsGeomCoordinateArray:ringPts_];
  }
  @catch (JavaLangException *ex) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithId:ringPts_];
  }
  return ring_;
}

+ (void)addEdgeWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)coords
                                               withBoolean:(jboolean)isForward
                withComVividsolutionsJtsGeomCoordinateList:(ComVividsolutionsJtsGeomCoordinateList *)coordList {
  ComVividsolutionsJtsOperationPolygonizeEdgeRing_addEdgeWithComVividsolutionsJtsGeomCoordinateArray_withBoolean_withComVividsolutionsJtsGeomCoordinateList_(coords, isForward, coordList);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "findEdgeRingContainingWithComVividsolutionsJtsOperationPolygonizeEdgeRing:withJavaUtilList:", "findEdgeRingContaining", "Lcom.vividsolutions.jts.operation.polygonize.EdgeRing;", 0x9, NULL, NULL },
    { "ptNotInListWithComVividsolutionsJtsGeomCoordinateArray:withComVividsolutionsJtsGeomCoordinateArray:", "ptNotInList", "Lcom.vividsolutions.jts.geom.Coordinate;", 0x9, NULL, NULL },
    { "isInListWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinateArray:", "isInList", "Z", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometryFactory:", "EdgeRing", NULL, 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsPlanargraphDirectedEdge:", "add", "V", 0x1, NULL, NULL },
    { "isHole", NULL, "Z", 0x1, NULL, NULL },
    { "addHoleWithComVividsolutionsJtsGeomLinearRing:", "addHole", "V", 0x1, NULL, NULL },
    { "getPolygon", NULL, "Lcom.vividsolutions.jts.geom.Polygon;", 0x1, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
    { "getCoordinates", NULL, "[Lcom.vividsolutions.jts.geom.Coordinate;", 0x2, NULL, NULL },
    { "getLineString", NULL, "Lcom.vividsolutions.jts.geom.LineString;", 0x1, NULL, NULL },
    { "getRing", NULL, "Lcom.vividsolutions.jts.geom.LinearRing;", 0x1, NULL, NULL },
    { "addEdgeWithComVividsolutionsJtsGeomCoordinateArray:withBoolean:withComVividsolutionsJtsGeomCoordinateList:", "addEdge", "V", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "factory_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.GeometryFactory;", NULL, NULL,  },
    { "deList_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "ring_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.LinearRing;", NULL, NULL,  },
    { "ringPts_", NULL, 0x2, "[Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "holes_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationPolygonizeEdgeRing = { 2, "EdgeRing", "com.vividsolutions.jts.operation.polygonize", NULL, 0x1, 13, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationPolygonizeEdgeRing;
}

@end

ComVividsolutionsJtsOperationPolygonizeEdgeRing *ComVividsolutionsJtsOperationPolygonizeEdgeRing_findEdgeRingContainingWithComVividsolutionsJtsOperationPolygonizeEdgeRing_withJavaUtilList_(ComVividsolutionsJtsOperationPolygonizeEdgeRing *testEr, id<JavaUtilList> shellList) {
  ComVividsolutionsJtsOperationPolygonizeEdgeRing_initialize();
  ComVividsolutionsJtsGeomLinearRing *testRing = [((ComVividsolutionsJtsOperationPolygonizeEdgeRing *) nil_chk(testEr)) getRing];
  ComVividsolutionsJtsGeomEnvelope *testEnv = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(testRing)) getEnvelopeInternal];
  ComVividsolutionsJtsGeomCoordinate *testPt = [testRing getCoordinateNWithInt:0];
  ComVividsolutionsJtsOperationPolygonizeEdgeRing *minShell = nil;
  ComVividsolutionsJtsGeomEnvelope *minEnv = nil;
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(shellList)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsOperationPolygonizeEdgeRing *tryShell = (ComVividsolutionsJtsOperationPolygonizeEdgeRing *) check_class_cast([it next], [ComVividsolutionsJtsOperationPolygonizeEdgeRing class]);
    ComVividsolutionsJtsGeomLinearRing *tryRing = [((ComVividsolutionsJtsOperationPolygonizeEdgeRing *) nil_chk(tryShell)) getRing];
    ComVividsolutionsJtsGeomEnvelope *tryEnv = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(tryRing)) getEnvelopeInternal];
    if (minShell != nil) minEnv = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk([minShell getRing])) getEnvelopeInternal];
    jboolean isContained = NO;
    if ([((ComVividsolutionsJtsGeomEnvelope *) nil_chk(tryEnv)) isEqual:testEnv]) continue;
    testPt = ComVividsolutionsJtsGeomCoordinateArrays_ptNotInListWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomCoordinateArray_([testRing getCoordinates], [tryRing getCoordinates]);
    if ([tryEnv containsWithComVividsolutionsJtsGeomEnvelope:testEnv] && ComVividsolutionsJtsAlgorithmCGAlgorithms_isPointInRingWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(testPt, [tryRing getCoordinates])) isContained = YES;
    if (isContained) {
      if (minShell == nil || [((ComVividsolutionsJtsGeomEnvelope *) nil_chk(minEnv)) containsWithComVividsolutionsJtsGeomEnvelope:tryEnv]) {
        minShell = tryShell;
      }
    }
  }
  return minShell;
}

ComVividsolutionsJtsGeomCoordinate *ComVividsolutionsJtsOperationPolygonizeEdgeRing_ptNotInListWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomCoordinateArray_(IOSObjectArray *testPts, IOSObjectArray *pts) {
  ComVividsolutionsJtsOperationPolygonizeEdgeRing_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(testPts))->size_; i++) {
    ComVividsolutionsJtsGeomCoordinate *testPt = IOSObjectArray_Get(testPts, i);
    if (!ComVividsolutionsJtsOperationPolygonizeEdgeRing_isInListWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(testPt, pts)) return testPt;
  }
  return nil;
}

jboolean ComVividsolutionsJtsOperationPolygonizeEdgeRing_isInListWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(ComVividsolutionsJtsGeomCoordinate *pt, IOSObjectArray *pts) {
  ComVividsolutionsJtsOperationPolygonizeEdgeRing_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts))->size_; i++) {
    if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(pt)) isEqual:IOSObjectArray_Get(pts, i)]) return YES;
  }
  return NO;
}

void ComVividsolutionsJtsOperationPolygonizeEdgeRing_initWithComVividsolutionsJtsGeomGeometryFactory_(ComVividsolutionsJtsOperationPolygonizeEdgeRing *self, ComVividsolutionsJtsGeomGeometryFactory *factory) {
  (void) NSObject_init(self);
  self->deList_ = new_JavaUtilArrayList_init();
  self->ring_ = nil;
  self->ringPts_ = nil;
  self->factory_ = factory;
}

ComVividsolutionsJtsOperationPolygonizeEdgeRing *new_ComVividsolutionsJtsOperationPolygonizeEdgeRing_initWithComVividsolutionsJtsGeomGeometryFactory_(ComVividsolutionsJtsGeomGeometryFactory *factory) {
  ComVividsolutionsJtsOperationPolygonizeEdgeRing *self = [ComVividsolutionsJtsOperationPolygonizeEdgeRing alloc];
  ComVividsolutionsJtsOperationPolygonizeEdgeRing_initWithComVividsolutionsJtsGeomGeometryFactory_(self, factory);
  return self;
}

IOSObjectArray *ComVividsolutionsJtsOperationPolygonizeEdgeRing_getCoordinates(ComVividsolutionsJtsOperationPolygonizeEdgeRing *self) {
  if (self->ringPts_ == nil) {
    ComVividsolutionsJtsGeomCoordinateList *coordList = new_ComVividsolutionsJtsGeomCoordinateList_init();
    for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(self->deList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      ComVividsolutionsJtsPlanargraphDirectedEdge *de = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
      ComVividsolutionsJtsOperationPolygonizePolygonizeEdge *edge = (ComVividsolutionsJtsOperationPolygonizePolygonizeEdge *) check_class_cast([((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(de)) getEdge], [ComVividsolutionsJtsOperationPolygonizePolygonizeEdge class]);
      ComVividsolutionsJtsOperationPolygonizeEdgeRing_addEdgeWithComVividsolutionsJtsGeomCoordinateArray_withBoolean_withComVividsolutionsJtsGeomCoordinateList_([((ComVividsolutionsJtsGeomLineString *) nil_chk([((ComVividsolutionsJtsOperationPolygonizePolygonizeEdge *) nil_chk(edge)) getLine])) getCoordinates], [de getEdgeDirection], coordList);
    }
    self->ringPts_ = [coordList toCoordinateArray];
  }
  return self->ringPts_;
}

void ComVividsolutionsJtsOperationPolygonizeEdgeRing_addEdgeWithComVividsolutionsJtsGeomCoordinateArray_withBoolean_withComVividsolutionsJtsGeomCoordinateList_(IOSObjectArray *coords, jboolean isForward, ComVividsolutionsJtsGeomCoordinateList *coordList) {
  ComVividsolutionsJtsOperationPolygonizeEdgeRing_initialize();
  if (isForward) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coords))->size_; i++) {
      [((ComVividsolutionsJtsGeomCoordinateList *) nil_chk(coordList)) addWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(coords, i) withBoolean:NO];
    }
  }
  else {
    for (jint i = ((IOSObjectArray *) nil_chk(coords))->size_ - 1; i >= 0; i--) {
      [((ComVividsolutionsJtsGeomCoordinateList *) nil_chk(coordList)) addWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(coords, i) withBoolean:NO];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationPolygonizeEdgeRing)
