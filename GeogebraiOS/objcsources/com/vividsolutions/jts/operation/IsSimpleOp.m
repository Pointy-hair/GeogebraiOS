//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/operation/IsSimpleOp.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/BoundaryNodeRule.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/RobustLineIntersector.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/geom/MultiPoint.h"
#include "com/vividsolutions/jts/geom/Point.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersection.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/GeometryGraph.h"
#include "com/vividsolutions/jts/geomgraph/index/SegmentIntersector.h"
#include "com/vividsolutions/jts/operation/IsSimpleOp.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

@interface ComVividsolutionsJtsOperationIsSimpleOp () {
 @public
  ComVividsolutionsJtsGeomGeometry *geom_;
  jboolean isClosedEndpointsInInterior_;
  ComVividsolutionsJtsGeomCoordinate *nonSimpleLocation_;
}

- (jboolean)isSimpleMultiPointWithComVividsolutionsJtsGeomMultiPoint:(ComVividsolutionsJtsGeomMultiPoint *)mp;

- (jboolean)isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom;

- (jboolean)hasNonEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (jboolean)hasClosedEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph;

- (void)addEndpointWithJavaUtilMap:(id<JavaUtilMap>)endPoints
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p
                       withBoolean:(jboolean)isClosed;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationIsSimpleOp, geom_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationIsSimpleOp, nonSimpleLocation_, ComVividsolutionsJtsGeomCoordinate *)

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationIsSimpleOp_isSimpleMultiPointWithComVividsolutionsJtsGeomMultiPoint_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomMultiPoint *mp);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationIsSimpleOp_isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomGeometry *geom);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationIsSimpleOp_hasNonEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationIsSimpleOp_hasClosedEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph);

__attribute__((unused)) static void ComVividsolutionsJtsOperationIsSimpleOp_addEndpointWithJavaUtilMap_withComVividsolutionsJtsGeomCoordinate_withBoolean_(ComVividsolutionsJtsOperationIsSimpleOp *self, id<JavaUtilMap> endPoints, ComVividsolutionsJtsGeomCoordinate *p, jboolean isClosed);

@interface ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo : NSObject {
 @public
  ComVividsolutionsJtsGeomCoordinate *pt_;
  jboolean isClosed_;
  jint degree_;
}

- (instancetype)initWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt;

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinate;

- (void)addEndpointWithBoolean:(jboolean)isClosed;

@end

J2OBJC_EMPTY_STATIC_INIT(ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo)

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo, pt_, ComVividsolutionsJtsGeomCoordinate *)

__attribute__((unused)) static void ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo_initWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *self, ComVividsolutionsJtsGeomCoordinate *pt);

__attribute__((unused)) static ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *new_ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo_initWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomCoordinate *pt) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo)

@implementation ComVividsolutionsJtsOperationIsSimpleOp

- (instancetype)init {
  ComVividsolutionsJtsOperationIsSimpleOp_init(self);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom {
  ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_(self, geom);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom
       withComVividsolutionsJtsAlgorithmBoundaryNodeRule:(id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)boundaryNodeRule {
  ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, geom, boundaryNodeRule);
  return self;
}

- (jboolean)isSimple {
  nonSimpleLocation_ = nil;
  if ([geom_ isKindOfClass:[ComVividsolutionsJtsGeomLineString class]]) return ComVividsolutionsJtsOperationIsSimpleOp_isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry_(self, geom_);
  if ([geom_ isKindOfClass:[ComVividsolutionsJtsGeomMultiLineString class]]) return ComVividsolutionsJtsOperationIsSimpleOp_isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry_(self, geom_);
  if ([geom_ isKindOfClass:[ComVividsolutionsJtsGeomMultiPoint class]]) return ComVividsolutionsJtsOperationIsSimpleOp_isSimpleMultiPointWithComVividsolutionsJtsGeomMultiPoint_(self, (ComVividsolutionsJtsGeomMultiPoint *) check_class_cast(geom_, [ComVividsolutionsJtsGeomMultiPoint class]));
  return YES;
}

- (ComVividsolutionsJtsGeomCoordinate *)getNonSimpleLocation {
  return nonSimpleLocation_;
}

- (jboolean)isSimpleWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)geom {
  return ComVividsolutionsJtsOperationIsSimpleOp_isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry_(self, geom);
}

- (jboolean)isSimpleWithComVividsolutionsJtsGeomMultiLineString:(ComVividsolutionsJtsGeomMultiLineString *)geom {
  return ComVividsolutionsJtsOperationIsSimpleOp_isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry_(self, geom);
}

- (jboolean)isSimpleWithComVividsolutionsJtsGeomMultiPoint:(ComVividsolutionsJtsGeomMultiPoint *)mp {
  return ComVividsolutionsJtsOperationIsSimpleOp_isSimpleMultiPointWithComVividsolutionsJtsGeomMultiPoint_(self, mp);
}

- (jboolean)isSimpleMultiPointWithComVividsolutionsJtsGeomMultiPoint:(ComVividsolutionsJtsGeomMultiPoint *)mp {
  return ComVividsolutionsJtsOperationIsSimpleOp_isSimpleMultiPointWithComVividsolutionsJtsGeomMultiPoint_(self, mp);
}

- (jboolean)isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom {
  return ComVividsolutionsJtsOperationIsSimpleOp_isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry_(self, geom);
}

- (jboolean)hasNonEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  return ComVividsolutionsJtsOperationIsSimpleOp_hasNonEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

- (jboolean)hasClosedEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)graph {
  return ComVividsolutionsJtsOperationIsSimpleOp_hasClosedEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph);
}

- (void)addEndpointWithJavaUtilMap:(id<JavaUtilMap>)endPoints
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p
                       withBoolean:(jboolean)isClosed {
  ComVividsolutionsJtsOperationIsSimpleOp_addEndpointWithJavaUtilMap_withComVividsolutionsJtsGeomCoordinate_withBoolean_(self, endPoints, p, isClosed);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "IsSimpleOp", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:", "IsSimpleOp", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsAlgorithmBoundaryNodeRule:", "IsSimpleOp", NULL, 0x1, NULL, NULL },
    { "isSimple", NULL, "Z", 0x1, NULL, NULL },
    { "getNonSimpleLocation", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "isSimpleWithComVividsolutionsJtsGeomLineString:", "isSimple", "Z", 0x1, NULL, NULL },
    { "isSimpleWithComVividsolutionsJtsGeomMultiLineString:", "isSimple", "Z", 0x1, NULL, NULL },
    { "isSimpleWithComVividsolutionsJtsGeomMultiPoint:", "isSimple", "Z", 0x1, NULL, NULL },
    { "isSimpleMultiPointWithComVividsolutionsJtsGeomMultiPoint:", "isSimpleMultiPoint", "Z", 0x2, NULL, NULL },
    { "isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry:", "isSimpleLinearGeometry", "Z", 0x2, NULL, NULL },
    { "hasNonEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph:", "hasNonEndpointIntersection", "Z", 0x2, NULL, NULL },
    { "hasClosedEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph:", "hasClosedEndpointIntersection", "Z", 0x2, NULL, NULL },
    { "addEndpointWithJavaUtilMap:withComVividsolutionsJtsGeomCoordinate:withBoolean:", "addEndpoint", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geom_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "isClosedEndpointsInInterior_", NULL, 0x2, "Z", NULL, NULL,  },
    { "nonSimpleLocation_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lcom.vividsolutions.jts.operation.IsSimpleOp$EndpointInfo;"};
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationIsSimpleOp = { 2, "IsSimpleOp", "com.vividsolutions.jts.operation", NULL, 0x1, 13, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComVividsolutionsJtsOperationIsSimpleOp;
}

@end

void ComVividsolutionsJtsOperationIsSimpleOp_init(ComVividsolutionsJtsOperationIsSimpleOp *self) {
  (void) NSObject_init(self);
  self->isClosedEndpointsInInterior_ = YES;
  self->nonSimpleLocation_ = nil;
}

ComVividsolutionsJtsOperationIsSimpleOp *new_ComVividsolutionsJtsOperationIsSimpleOp_init() {
  ComVividsolutionsJtsOperationIsSimpleOp *self = [ComVividsolutionsJtsOperationIsSimpleOp alloc];
  ComVividsolutionsJtsOperationIsSimpleOp_init(self);
  return self;
}

void ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomGeometry *geom) {
  (void) NSObject_init(self);
  self->isClosedEndpointsInInterior_ = YES;
  self->nonSimpleLocation_ = nil;
  self->geom_ = geom;
}

ComVividsolutionsJtsOperationIsSimpleOp *new_ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *geom) {
  ComVividsolutionsJtsOperationIsSimpleOp *self = [ComVividsolutionsJtsOperationIsSimpleOp alloc];
  ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_(self, geom);
  return self;
}

void ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomGeometry *geom, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> boundaryNodeRule) {
  (void) NSObject_init(self);
  self->isClosedEndpointsInInterior_ = YES;
  self->nonSimpleLocation_ = nil;
  self->geom_ = geom;
  self->isClosedEndpointsInInterior_ = ![((id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>) nil_chk(boundaryNodeRule)) isInBoundaryWithInt:2];
}

ComVividsolutionsJtsOperationIsSimpleOp *new_ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(ComVividsolutionsJtsGeomGeometry *geom, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> boundaryNodeRule) {
  ComVividsolutionsJtsOperationIsSimpleOp *self = [ComVividsolutionsJtsOperationIsSimpleOp alloc];
  ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, geom, boundaryNodeRule);
  return self;
}

jboolean ComVividsolutionsJtsOperationIsSimpleOp_isSimpleMultiPointWithComVividsolutionsJtsGeomMultiPoint_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomMultiPoint *mp) {
  if ([((ComVividsolutionsJtsGeomMultiPoint *) nil_chk(mp)) isEmpty]) return YES;
  id<JavaUtilSet> points = new_JavaUtilTreeSet_init();
  for (jint i = 0; i < [mp getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomPoint *pt = (ComVividsolutionsJtsGeomPoint *) check_class_cast([mp getGeometryNWithInt:i], [ComVividsolutionsJtsGeomPoint class]);
    ComVividsolutionsJtsGeomCoordinate *p = [((ComVividsolutionsJtsGeomPoint *) nil_chk(pt)) getCoordinate];
    if ([points containsWithId:p]) {
      self->nonSimpleLocation_ = p;
      return NO;
    }
    [points addWithId:p];
  }
  return YES;
}

jboolean ComVividsolutionsJtsOperationIsSimpleOp_isSimpleLinearGeometryWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomGeometry *geom) {
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(geom)) isEmpty]) return YES;
  ComVividsolutionsJtsGeomgraphGeometryGraph *graph = new_ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(0, geom);
  ComVividsolutionsJtsAlgorithmLineIntersector *li = new_ComVividsolutionsJtsAlgorithmRobustLineIntersector_init();
  ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *si = [graph computeSelfNodesWithComVividsolutionsJtsAlgorithmLineIntersector:li withBoolean:YES];
  if (![((ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *) nil_chk(si)) hasIntersection]) return YES;
  if ([si hasProperIntersection]) {
    self->nonSimpleLocation_ = [si getProperIntersectionPoint];
    return NO;
  }
  if (ComVividsolutionsJtsOperationIsSimpleOp_hasNonEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph)) return NO;
  if (self->isClosedEndpointsInInterior_) {
    if (ComVividsolutionsJtsOperationIsSimpleOp_hasClosedEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph_(self, graph)) return NO;
  }
  return YES;
}

jboolean ComVividsolutionsJtsOperationIsSimpleOp_hasNonEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(graph)) getEdgeIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdge class]);
    jint maxSegmentIndex = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getMaximumSegmentIndex];
    for (id<JavaUtilIterator> eiIt = [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk([e getEdgeIntersectionList])) iterator]; [((id<JavaUtilIterator>) nil_chk(eiIt)) hasNext]; ) {
      ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([eiIt next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
      if (![((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(ei)) isEndPointWithInt:maxSegmentIndex]) {
        self->nonSimpleLocation_ = [ei getCoordinate];
        return YES;
      }
    }
  }
  return NO;
}

jboolean ComVividsolutionsJtsOperationIsSimpleOp_hasClosedEndpointIntersectionWithComVividsolutionsJtsGeomgraphGeometryGraph_(ComVividsolutionsJtsOperationIsSimpleOp *self, ComVividsolutionsJtsGeomgraphGeometryGraph *graph) {
  id<JavaUtilMap> endPoints = new_JavaUtilTreeMap_init();
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(graph)) getEdgeIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdge class]);
    jint maxSegmentIndex = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getMaximumSegmentIndex];
    jboolean isClosed = [e isClosed];
    ComVividsolutionsJtsGeomCoordinate *p0 = [e getCoordinateWithInt:0];
    ComVividsolutionsJtsOperationIsSimpleOp_addEndpointWithJavaUtilMap_withComVividsolutionsJtsGeomCoordinate_withBoolean_(self, endPoints, p0, isClosed);
    ComVividsolutionsJtsGeomCoordinate *p1 = [e getCoordinateWithInt:[e getNumPoints] - 1];
    ComVividsolutionsJtsOperationIsSimpleOp_addEndpointWithJavaUtilMap_withComVividsolutionsJtsGeomCoordinate_withBoolean_(self, endPoints, p1, isClosed);
  }
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk([endPoints values])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *eiInfo = (ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *) check_class_cast([i next], [ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo class]);
    if (((ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *) nil_chk(eiInfo))->isClosed_ && eiInfo->degree_ != 2) {
      self->nonSimpleLocation_ = [eiInfo getCoordinate];
      return YES;
    }
  }
  return NO;
}

void ComVividsolutionsJtsOperationIsSimpleOp_addEndpointWithJavaUtilMap_withComVividsolutionsJtsGeomCoordinate_withBoolean_(ComVividsolutionsJtsOperationIsSimpleOp *self, id<JavaUtilMap> endPoints, ComVividsolutionsJtsGeomCoordinate *p, jboolean isClosed) {
  ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *eiInfo = (ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *) check_class_cast([((id<JavaUtilMap>) nil_chk(endPoints)) getWithId:p], [ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo class]);
  if (eiInfo == nil) {
    eiInfo = new_ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo_initWithComVividsolutionsJtsGeomCoordinate_(p);
    (void) [endPoints putWithId:p withId:eiInfo];
  }
  [((ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *) nil_chk(eiInfo)) addEndpointWithBoolean:isClosed];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationIsSimpleOp)

@implementation ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo

- (instancetype)initWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo_initWithComVividsolutionsJtsGeomCoordinate_(self, pt);
  return self;
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinate {
  return pt_;
}

- (void)addEndpointWithBoolean:(jboolean)isClosed {
  degree_++;
  self->isClosed_ |= isClosed;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomCoordinate:", "EndpointInfo", NULL, 0x1, NULL, NULL },
    { "getCoordinate", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "addEndpointWithBoolean:", "addEndpoint", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pt_", NULL, 0x0, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "isClosed_", NULL, 0x0, "Z", NULL, NULL,  },
    { "degree_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo = { 2, "EndpointInfo", "com.vividsolutions.jts.operation", "IsSimpleOp", 0xa, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo;
}

@end

void ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo_initWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *self, ComVividsolutionsJtsGeomCoordinate *pt) {
  (void) NSObject_init(self);
  self->pt_ = pt;
  self->isClosed_ = NO;
  self->degree_ = 0;
}

ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *new_ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo_initWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomCoordinate *pt) {
  ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo *self = [ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo alloc];
  ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo_initWithComVividsolutionsJtsGeomCoordinate_(self, pt);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationIsSimpleOp_EndpointInfo)
