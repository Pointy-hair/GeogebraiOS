//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/operation/linemerge/LineMergeDirectedEdge.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/operation/linemerge/LineMergeDirectedEdge.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdge.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/planargraph/Node.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/util/List.h"

@implementation ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge

- (instancetype)initWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)from
                    withComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)to
                     withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)directionPt
                                                withBoolean:(jboolean)edgeDirection {
  ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge_initWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsGeomCoordinate_withBoolean_(self, from, to, directionPt, edgeDirection);
  return self;
}

- (ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge *)getNext {
  if ([((ComVividsolutionsJtsPlanargraphNode *) nil_chk([self getToNode])) getDegree] != 2) {
    return nil;
  }
  if ([((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsPlanargraphDirectedEdgeStar *) nil_chk([((ComVividsolutionsJtsPlanargraphNode *) nil_chk([self getToNode])) getOutEdges])) getEdges])) getWithInt:0] == [self getSym]) {
    return (ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge *) check_class_cast([((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsPlanargraphDirectedEdgeStar *) nil_chk([((ComVividsolutionsJtsPlanargraphNode *) nil_chk([self getToNode])) getOutEdges])) getEdges])) getWithInt:1], [ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge class]);
  }
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_([((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsPlanargraphDirectedEdgeStar *) nil_chk([((ComVividsolutionsJtsPlanargraphNode *) nil_chk([self getToNode])) getOutEdges])) getEdges])) getWithInt:1] == [self getSym]);
  return (ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge *) check_class_cast([((id<JavaUtilList>) nil_chk([((ComVividsolutionsJtsPlanargraphDirectedEdgeStar *) nil_chk([((ComVividsolutionsJtsPlanargraphNode *) nil_chk([self getToNode])) getOutEdges])) getEdges])) getWithInt:0], [ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsPlanargraphNode:withComVividsolutionsJtsPlanargraphNode:withComVividsolutionsJtsGeomCoordinate:withBoolean:", "LineMergeDirectedEdge", NULL, 0x1, NULL, NULL },
    { "getNext", NULL, "Lcom.vividsolutions.jts.operation.linemerge.LineMergeDirectedEdge;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge = { 2, "LineMergeDirectedEdge", "com.vividsolutions.jts.operation.linemerge", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge;
}

@end

void ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge_initWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsGeomCoordinate_withBoolean_(ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge *self, ComVividsolutionsJtsPlanargraphNode *from, ComVividsolutionsJtsPlanargraphNode *to, ComVividsolutionsJtsGeomCoordinate *directionPt, jboolean edgeDirection) {
  ComVividsolutionsJtsPlanargraphDirectedEdge_initWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsGeomCoordinate_withBoolean_(self, from, to, directionPt, edgeDirection);
}

ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge *new_ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge_initWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsGeomCoordinate_withBoolean_(ComVividsolutionsJtsPlanargraphNode *from, ComVividsolutionsJtsPlanargraphNode *to, ComVividsolutionsJtsGeomCoordinate *directionPt, jboolean edgeDirection) {
  ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge *self = [ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge alloc];
  ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge_initWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsGeomCoordinate_withBoolean_(self, from, to, directionPt, edgeDirection);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationLinemergeLineMergeDirectedEdge)
