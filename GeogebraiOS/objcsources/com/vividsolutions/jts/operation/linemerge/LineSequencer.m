//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/operation/linemerge/LineSequencer.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryComponentFilter.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/operation/linemerge/LineMergeEdge.h"
#include "com/vividsolutions/jts/operation/linemerge/LineMergeGraph.h"
#include "com/vividsolutions/jts/operation/linemerge/LineSequencer.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdge.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/planargraph/Edge.h"
#include "com/vividsolutions/jts/planargraph/GraphComponent.h"
#include "com/vividsolutions/jts/planargraph/Node.h"
#include "com/vividsolutions/jts/planargraph/Subgraph.h"
#include "com/vividsolutions/jts/planargraph/algorithm/ConnectedSubgraphFinder.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface ComVividsolutionsJtsOperationLinemergeLineSequencer () {
 @public
  ComVividsolutionsJtsOperationLinemergeLineMergeGraph *graph_;
  ComVividsolutionsJtsGeomGeometryFactory *factory_;
  jint lineCount_;
  jboolean isRun_;
  ComVividsolutionsJtsGeomGeometry *sequencedGeometry_;
  jboolean isSequenceable__;
}

- (void)addLineWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)lineString;

- (void)computeSequence;

- (id<JavaUtilList>)findSequences;

- (jboolean)hasSequenceWithComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)graph;

- (id<JavaUtilList>)findSequenceWithComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)graph;

+ (ComVividsolutionsJtsPlanargraphDirectedEdge *)findUnvisitedBestOrientedDEWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)node;

- (void)addReverseSubpathWithComVividsolutionsJtsPlanargraphDirectedEdge:(ComVividsolutionsJtsPlanargraphDirectedEdge *)de
                                                withJavaUtilListIterator:(id<JavaUtilListIterator>)lit
                                                             withBoolean:(jboolean)expectedClosed;

+ (ComVividsolutionsJtsPlanargraphNode *)findLowestDegreeNodeWithComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)graph;

- (id<JavaUtilList>)orientWithJavaUtilList:(id<JavaUtilList>)seq;

- (id<JavaUtilList>)reverseWithJavaUtilList:(id<JavaUtilList>)seq;

- (ComVividsolutionsJtsGeomGeometry *)buildSequencedGeometryWithJavaUtilList:(id<JavaUtilList>)sequences;

+ (ComVividsolutionsJtsGeomLineString *)reverseWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationLinemergeLineSequencer, graph_, ComVividsolutionsJtsOperationLinemergeLineMergeGraph *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationLinemergeLineSequencer, factory_, ComVividsolutionsJtsGeomGeometryFactory *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationLinemergeLineSequencer, sequencedGeometry_, ComVividsolutionsJtsGeomGeometry *)

__attribute__((unused)) static void ComVividsolutionsJtsOperationLinemergeLineSequencer_addLineWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, ComVividsolutionsJtsGeomLineString *lineString);

__attribute__((unused)) static void ComVividsolutionsJtsOperationLinemergeLineSequencer_computeSequence(ComVividsolutionsJtsOperationLinemergeLineSequencer *self);

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsOperationLinemergeLineSequencer_findSequences(ComVividsolutionsJtsOperationLinemergeLineSequencer *self);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationLinemergeLineSequencer_hasSequenceWithComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, ComVividsolutionsJtsPlanargraphSubgraph *graph);

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsOperationLinemergeLineSequencer_findSequenceWithComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, ComVividsolutionsJtsPlanargraphSubgraph *graph);

__attribute__((unused)) static ComVividsolutionsJtsPlanargraphDirectedEdge *ComVividsolutionsJtsOperationLinemergeLineSequencer_findUnvisitedBestOrientedDEWithComVividsolutionsJtsPlanargraphNode_(ComVividsolutionsJtsPlanargraphNode *node);

__attribute__((unused)) static void ComVividsolutionsJtsOperationLinemergeLineSequencer_addReverseSubpathWithComVividsolutionsJtsPlanargraphDirectedEdge_withJavaUtilListIterator_withBoolean_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, ComVividsolutionsJtsPlanargraphDirectedEdge *de, id<JavaUtilListIterator> lit, jboolean expectedClosed);

__attribute__((unused)) static ComVividsolutionsJtsPlanargraphNode *ComVividsolutionsJtsOperationLinemergeLineSequencer_findLowestDegreeNodeWithComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsPlanargraphSubgraph *graph);

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsOperationLinemergeLineSequencer_orientWithJavaUtilList_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, id<JavaUtilList> seq);

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsOperationLinemergeLineSequencer_reverseWithJavaUtilList_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, id<JavaUtilList> seq);

__attribute__((unused)) static ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationLinemergeLineSequencer_buildSequencedGeometryWithJavaUtilList_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, id<JavaUtilList> sequences);

__attribute__((unused)) static ComVividsolutionsJtsGeomLineString *ComVividsolutionsJtsOperationLinemergeLineSequencer_reverseWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsGeomLineString *line);

@interface ComVividsolutionsJtsOperationLinemergeLineSequencer_$1 : NSObject < ComVividsolutionsJtsGeomGeometryComponentFilter > {
 @public
  ComVividsolutionsJtsOperationLinemergeLineSequencer *this$0_;
}

- (void)filterWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)component;

- (instancetype)initWithComVividsolutionsJtsOperationLinemergeLineSequencer:(ComVividsolutionsJtsOperationLinemergeLineSequencer *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComVividsolutionsJtsOperationLinemergeLineSequencer_$1)

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationLinemergeLineSequencer_$1, this$0_, ComVividsolutionsJtsOperationLinemergeLineSequencer *)

__attribute__((unused)) static void ComVividsolutionsJtsOperationLinemergeLineSequencer_$1_initWithComVividsolutionsJtsOperationLinemergeLineSequencer_(ComVividsolutionsJtsOperationLinemergeLineSequencer_$1 *self, ComVividsolutionsJtsOperationLinemergeLineSequencer *outer$);

__attribute__((unused)) static ComVividsolutionsJtsOperationLinemergeLineSequencer_$1 *new_ComVividsolutionsJtsOperationLinemergeLineSequencer_$1_initWithComVividsolutionsJtsOperationLinemergeLineSequencer_(ComVividsolutionsJtsOperationLinemergeLineSequencer *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComVividsolutionsJtsOperationLinemergeLineSequencer_$1)

@implementation ComVividsolutionsJtsOperationLinemergeLineSequencer

+ (jboolean)isSequencedWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_isSequencedWithComVividsolutionsJtsGeomGeometry_(geom);
}

- (void)addWithJavaUtilCollection:(id<JavaUtilCollection>)geometries {
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(geometries)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomGeometry *geometry = (ComVividsolutionsJtsGeomGeometry *) check_class_cast([i next], [ComVividsolutionsJtsGeomGeometry class]);
    [self addWithComVividsolutionsJtsGeomGeometry:geometry];
  }
}

- (void)addWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geometry {
  [((ComVividsolutionsJtsGeomGeometry *) nil_chk(geometry)) applyWithComVividsolutionsJtsGeomGeometryComponentFilter:new_ComVividsolutionsJtsOperationLinemergeLineSequencer_$1_initWithComVividsolutionsJtsOperationLinemergeLineSequencer_(self)];
}

- (void)addLineWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)lineString {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_addLineWithComVividsolutionsJtsGeomLineString_(self, lineString);
}

- (jboolean)isSequenceable {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_computeSequence(self);
  return isSequenceable__;
}

- (ComVividsolutionsJtsGeomGeometry *)getSequencedLineStrings {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_computeSequence(self);
  return sequencedGeometry_;
}

- (void)computeSequence {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_computeSequence(self);
}

- (id<JavaUtilList>)findSequences {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_findSequences(self);
}

- (jboolean)hasSequenceWithComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)graph {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_hasSequenceWithComVividsolutionsJtsPlanargraphSubgraph_(self, graph);
}

- (id<JavaUtilList>)findSequenceWithComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)graph {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_findSequenceWithComVividsolutionsJtsPlanargraphSubgraph_(self, graph);
}

+ (ComVividsolutionsJtsPlanargraphDirectedEdge *)findUnvisitedBestOrientedDEWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)node {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_findUnvisitedBestOrientedDEWithComVividsolutionsJtsPlanargraphNode_(node);
}

- (void)addReverseSubpathWithComVividsolutionsJtsPlanargraphDirectedEdge:(ComVividsolutionsJtsPlanargraphDirectedEdge *)de
                                                withJavaUtilListIterator:(id<JavaUtilListIterator>)lit
                                                             withBoolean:(jboolean)expectedClosed {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_addReverseSubpathWithComVividsolutionsJtsPlanargraphDirectedEdge_withJavaUtilListIterator_withBoolean_(self, de, lit, expectedClosed);
}

+ (ComVividsolutionsJtsPlanargraphNode *)findLowestDegreeNodeWithComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)graph {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_findLowestDegreeNodeWithComVividsolutionsJtsPlanargraphSubgraph_(graph);
}

- (id<JavaUtilList>)orientWithJavaUtilList:(id<JavaUtilList>)seq {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_orientWithJavaUtilList_(self, seq);
}

- (id<JavaUtilList>)reverseWithJavaUtilList:(id<JavaUtilList>)seq {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_reverseWithJavaUtilList_(self, seq);
}

- (ComVividsolutionsJtsGeomGeometry *)buildSequencedGeometryWithJavaUtilList:(id<JavaUtilList>)sequences {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_buildSequencedGeometryWithJavaUtilList_(self, sequences);
}

+ (ComVividsolutionsJtsGeomLineString *)reverseWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line {
  return ComVividsolutionsJtsOperationLinemergeLineSequencer_reverseWithComVividsolutionsJtsGeomLineString_(line);
}

- (instancetype)init {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isSequencedWithComVividsolutionsJtsGeomGeometry:", "isSequenced", "Z", 0x9, NULL, NULL },
    { "addWithJavaUtilCollection:", "add", "V", 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsGeomGeometry:", "add", "V", 0x1, NULL, NULL },
    { "addLineWithComVividsolutionsJtsGeomLineString:", "addLine", "V", 0x2, NULL, NULL },
    { "isSequenceable", NULL, "Z", 0x1, NULL, NULL },
    { "getSequencedLineStrings", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "computeSequence", NULL, "V", 0x2, NULL, NULL },
    { "findSequences", NULL, "Ljava.util.List;", 0x2, NULL, NULL },
    { "hasSequenceWithComVividsolutionsJtsPlanargraphSubgraph:", "hasSequence", "Z", 0x2, NULL, NULL },
    { "findSequenceWithComVividsolutionsJtsPlanargraphSubgraph:", "findSequence", "Ljava.util.List;", 0x2, NULL, NULL },
    { "findUnvisitedBestOrientedDEWithComVividsolutionsJtsPlanargraphNode:", "findUnvisitedBestOrientedDE", "Lcom.vividsolutions.jts.planargraph.DirectedEdge;", 0xa, NULL, NULL },
    { "addReverseSubpathWithComVividsolutionsJtsPlanargraphDirectedEdge:withJavaUtilListIterator:withBoolean:", "addReverseSubpath", "V", 0x2, NULL, NULL },
    { "findLowestDegreeNodeWithComVividsolutionsJtsPlanargraphSubgraph:", "findLowestDegreeNode", "Lcom.vividsolutions.jts.planargraph.Node;", 0xa, NULL, NULL },
    { "orientWithJavaUtilList:", "orient", "Ljava.util.List;", 0x2, NULL, NULL },
    { "reverseWithJavaUtilList:", "reverse", "Ljava.util.List;", 0x2, NULL, NULL },
    { "buildSequencedGeometryWithJavaUtilList:", "buildSequencedGeometry", "Lcom.vividsolutions.jts.geom.Geometry;", 0x2, NULL, NULL },
    { "reverseWithComVividsolutionsJtsGeomLineString:", "reverse", "Lcom.vividsolutions.jts.geom.LineString;", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "graph_", NULL, 0x2, "Lcom.vividsolutions.jts.operation.linemerge.LineMergeGraph;", NULL, NULL,  },
    { "factory_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.GeometryFactory;", NULL, NULL,  },
    { "lineCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "isRun_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sequencedGeometry_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "isSequenceable__", "isSequenceable", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationLinemergeLineSequencer = { 2, "LineSequencer", "com.vividsolutions.jts.operation.linemerge", NULL, 0x1, 18, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationLinemergeLineSequencer;
}

@end

jboolean ComVividsolutionsJtsOperationLinemergeLineSequencer_isSequencedWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *geom) {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_initialize();
  if (!([geom isKindOfClass:[ComVividsolutionsJtsGeomMultiLineString class]])) {
    return YES;
  }
  ComVividsolutionsJtsGeomMultiLineString *mls = (ComVividsolutionsJtsGeomMultiLineString *) check_class_cast(geom, [ComVividsolutionsJtsGeomMultiLineString class]);
  id<JavaUtilSet> prevSubgraphNodes = new_JavaUtilTreeSet_init();
  ComVividsolutionsJtsGeomCoordinate *lastNode = nil;
  id<JavaUtilList> currNodes = new_JavaUtilArrayList_init();
  for (jint i = 0; i < [((ComVividsolutionsJtsGeomMultiLineString *) nil_chk(mls)) getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomLineString *line = (ComVividsolutionsJtsGeomLineString *) check_class_cast([mls getGeometryNWithInt:i], [ComVividsolutionsJtsGeomLineString class]);
    ComVividsolutionsJtsGeomCoordinate *startNode = [((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) getCoordinateNWithInt:0];
    ComVividsolutionsJtsGeomCoordinate *endNode = [line getCoordinateNWithInt:[line getNumPoints] - 1];
    if ([prevSubgraphNodes containsWithId:startNode]) return NO;
    if ([prevSubgraphNodes containsWithId:endNode]) return NO;
    if (lastNode != nil) {
      if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(startNode)) isEqual:lastNode]) {
        [prevSubgraphNodes addAllWithJavaUtilCollection:currNodes];
        [currNodes clear];
      }
    }
    [currNodes addWithId:startNode];
    [currNodes addWithId:endNode];
    lastNode = endNode;
  }
  return YES;
}

void ComVividsolutionsJtsOperationLinemergeLineSequencer_addLineWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, ComVividsolutionsJtsGeomLineString *lineString) {
  if (self->factory_ == nil) {
    self->factory_ = [((ComVividsolutionsJtsGeomLineString *) nil_chk(lineString)) getFactory];
  }
  [((ComVividsolutionsJtsOperationLinemergeLineMergeGraph *) nil_chk(self->graph_)) addEdgeWithComVividsolutionsJtsGeomLineString:lineString];
  self->lineCount_++;
}

void ComVividsolutionsJtsOperationLinemergeLineSequencer_computeSequence(ComVividsolutionsJtsOperationLinemergeLineSequencer *self) {
  if (self->isRun_) {
    return;
  }
  self->isRun_ = YES;
  id<JavaUtilList> sequences = ComVividsolutionsJtsOperationLinemergeLineSequencer_findSequences(self);
  if (sequences == nil) return;
  self->sequencedGeometry_ = ComVividsolutionsJtsOperationLinemergeLineSequencer_buildSequencedGeometryWithJavaUtilList_(self, sequences);
  self->isSequenceable__ = YES;
  jint finalLineCount = [((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->sequencedGeometry_)) getNumGeometries];
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(self->lineCount_ == finalLineCount, @"Lines were missing from result");
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_([self->sequencedGeometry_ isKindOfClass:[ComVividsolutionsJtsGeomLineString class]] || [self->sequencedGeometry_ isKindOfClass:[ComVividsolutionsJtsGeomMultiLineString class]], @"Result is not lineal");
}

id<JavaUtilList> ComVividsolutionsJtsOperationLinemergeLineSequencer_findSequences(ComVividsolutionsJtsOperationLinemergeLineSequencer *self) {
  id<JavaUtilList> sequences = new_JavaUtilArrayList_init();
  ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *csFinder = new_ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_initWithComVividsolutionsJtsPlanargraphPlanarGraph_(self->graph_);
  id<JavaUtilList> subgraphs = [csFinder getConnectedSubgraphs];
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(subgraphs)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphSubgraph *subgraph = (ComVividsolutionsJtsPlanargraphSubgraph *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphSubgraph class]);
    if (ComVividsolutionsJtsOperationLinemergeLineSequencer_hasSequenceWithComVividsolutionsJtsPlanargraphSubgraph_(self, subgraph)) {
      id<JavaUtilList> seq = ComVividsolutionsJtsOperationLinemergeLineSequencer_findSequenceWithComVividsolutionsJtsPlanargraphSubgraph_(self, subgraph);
      [sequences addWithId:seq];
    }
    else {
      return nil;
    }
  }
  return sequences;
}

jboolean ComVividsolutionsJtsOperationLinemergeLineSequencer_hasSequenceWithComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, ComVividsolutionsJtsPlanargraphSubgraph *graph) {
  jint oddDegreeCount = 0;
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsPlanargraphSubgraph *) nil_chk(graph)) nodeIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphNode *node = (ComVividsolutionsJtsPlanargraphNode *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphNode class]);
    if ([((ComVividsolutionsJtsPlanargraphNode *) nil_chk(node)) getDegree] % 2 == 1) oddDegreeCount++;
  }
  return oddDegreeCount <= 2;
}

id<JavaUtilList> ComVividsolutionsJtsOperationLinemergeLineSequencer_findSequenceWithComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, ComVividsolutionsJtsPlanargraphSubgraph *graph) {
  ComVividsolutionsJtsPlanargraphGraphComponent_setVisitedWithJavaUtilIterator_withBoolean_([((ComVividsolutionsJtsPlanargraphSubgraph *) nil_chk(graph)) edgeIterator], NO);
  ComVividsolutionsJtsPlanargraphNode *startNode = ComVividsolutionsJtsOperationLinemergeLineSequencer_findLowestDegreeNodeWithComVividsolutionsJtsPlanargraphSubgraph_(graph);
  ComVividsolutionsJtsPlanargraphDirectedEdge *startDE = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([((id<JavaUtilIterator>) nil_chk([((ComVividsolutionsJtsPlanargraphDirectedEdgeStar *) nil_chk([((ComVividsolutionsJtsPlanargraphNode *) nil_chk(startNode)) getOutEdges])) iterator])) next], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
  ComVividsolutionsJtsPlanargraphDirectedEdge *startDESym = [((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(startDE)) getSym];
  id<JavaUtilList> seq = new_JavaUtilLinkedList_init();
  id<JavaUtilListIterator> lit = [seq listIterator];
  ComVividsolutionsJtsOperationLinemergeLineSequencer_addReverseSubpathWithComVividsolutionsJtsPlanargraphDirectedEdge_withJavaUtilListIterator_withBoolean_(self, startDESym, lit, NO);
  while ([((id<JavaUtilListIterator>) nil_chk(lit)) hasPrevious]) {
    ComVividsolutionsJtsPlanargraphDirectedEdge *prev = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([lit previous], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
    ComVividsolutionsJtsPlanargraphDirectedEdge *unvisitedOutDE = ComVividsolutionsJtsOperationLinemergeLineSequencer_findUnvisitedBestOrientedDEWithComVividsolutionsJtsPlanargraphNode_([((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(prev)) getFromNode]);
    if (unvisitedOutDE != nil) ComVividsolutionsJtsOperationLinemergeLineSequencer_addReverseSubpathWithComVividsolutionsJtsPlanargraphDirectedEdge_withJavaUtilListIterator_withBoolean_(self, [unvisitedOutDE getSym], lit, YES);
  }
  id<JavaUtilList> orientedSeq = ComVividsolutionsJtsOperationLinemergeLineSequencer_orientWithJavaUtilList_(self, seq);
  return orientedSeq;
}

ComVividsolutionsJtsPlanargraphDirectedEdge *ComVividsolutionsJtsOperationLinemergeLineSequencer_findUnvisitedBestOrientedDEWithComVividsolutionsJtsPlanargraphNode_(ComVividsolutionsJtsPlanargraphNode *node) {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_initialize();
  ComVividsolutionsJtsPlanargraphDirectedEdge *wellOrientedDE = nil;
  ComVividsolutionsJtsPlanargraphDirectedEdge *unvisitedDE = nil;
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsPlanargraphDirectedEdgeStar *) nil_chk([((ComVividsolutionsJtsPlanargraphNode *) nil_chk(node)) getOutEdges])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphDirectedEdge *de = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
    if (![((ComVividsolutionsJtsPlanargraphEdge *) nil_chk([((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(de)) getEdge])) isVisited]) {
      unvisitedDE = de;
      if ([de getEdgeDirection]) wellOrientedDE = de;
    }
  }
  if (wellOrientedDE != nil) return wellOrientedDE;
  return unvisitedDE;
}

void ComVividsolutionsJtsOperationLinemergeLineSequencer_addReverseSubpathWithComVividsolutionsJtsPlanargraphDirectedEdge_withJavaUtilListIterator_withBoolean_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, ComVividsolutionsJtsPlanargraphDirectedEdge *de, id<JavaUtilListIterator> lit, jboolean expectedClosed) {
  ComVividsolutionsJtsPlanargraphNode *endNode = [((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(de)) getToNode];
  ComVividsolutionsJtsPlanargraphNode *fromNode = nil;
  while (YES) {
    [((id<JavaUtilListIterator>) nil_chk(lit)) addWithId:[de getSym]];
    [((ComVividsolutionsJtsPlanargraphEdge *) nil_chk([de getEdge])) setVisitedWithBoolean:YES];
    fromNode = [de getFromNode];
    ComVividsolutionsJtsPlanargraphDirectedEdge *unvisitedOutDE = ComVividsolutionsJtsOperationLinemergeLineSequencer_findUnvisitedBestOrientedDEWithComVividsolutionsJtsPlanargraphNode_(fromNode);
    if (unvisitedOutDE == nil) break;
    de = [((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(unvisitedOutDE)) getSym];
  }
  if (expectedClosed) {
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(fromNode == endNode, @"path not contiguous");
  }
}

ComVividsolutionsJtsPlanargraphNode *ComVividsolutionsJtsOperationLinemergeLineSequencer_findLowestDegreeNodeWithComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsPlanargraphSubgraph *graph) {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_initialize();
  jint minDegree = JavaLangInteger_MAX_VALUE;
  ComVividsolutionsJtsPlanargraphNode *minDegreeNode = nil;
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsPlanargraphSubgraph *) nil_chk(graph)) nodeIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphNode *node = (ComVividsolutionsJtsPlanargraphNode *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphNode class]);
    if (minDegreeNode == nil || [((ComVividsolutionsJtsPlanargraphNode *) nil_chk(node)) getDegree] < minDegree) {
      minDegree = [((ComVividsolutionsJtsPlanargraphNode *) nil_chk(node)) getDegree];
      minDegreeNode = node;
    }
  }
  return minDegreeNode;
}

id<JavaUtilList> ComVividsolutionsJtsOperationLinemergeLineSequencer_orientWithJavaUtilList_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, id<JavaUtilList> seq) {
  ComVividsolutionsJtsPlanargraphDirectedEdge *startEdge = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([((id<JavaUtilList>) nil_chk(seq)) getWithInt:0], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
  ComVividsolutionsJtsPlanargraphDirectedEdge *endEdge = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([seq getWithInt:[seq size] - 1], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
  ComVividsolutionsJtsPlanargraphNode *startNode = [((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(startEdge)) getFromNode];
  ComVividsolutionsJtsPlanargraphNode *endNode = [((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(endEdge)) getToNode];
  jboolean flipSeq = NO;
  jboolean hasDegree1Node = [((ComVividsolutionsJtsPlanargraphNode *) nil_chk(startNode)) getDegree] == 1 || [((ComVividsolutionsJtsPlanargraphNode *) nil_chk(endNode)) getDegree] == 1;
  if (hasDegree1Node) {
    jboolean hasObviousStartNode = NO;
    if ([((ComVividsolutionsJtsPlanargraphNode *) nil_chk([endEdge getToNode])) getDegree] == 1 && [endEdge getEdgeDirection] == NO) {
      hasObviousStartNode = YES;
      flipSeq = YES;
    }
    if ([((ComVividsolutionsJtsPlanargraphNode *) nil_chk([startEdge getFromNode])) getDegree] == 1 && [startEdge getEdgeDirection] == YES) {
      hasObviousStartNode = YES;
      flipSeq = NO;
    }
    if (!hasObviousStartNode) {
      if ([((ComVividsolutionsJtsPlanargraphNode *) nil_chk([startEdge getFromNode])) getDegree] == 1) flipSeq = YES;
    }
  }
  if (flipSeq) return ComVividsolutionsJtsOperationLinemergeLineSequencer_reverseWithJavaUtilList_(self, seq);
  return seq;
}

id<JavaUtilList> ComVividsolutionsJtsOperationLinemergeLineSequencer_reverseWithJavaUtilList_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, id<JavaUtilList> seq) {
  JavaUtilLinkedList *newSeq = new_JavaUtilLinkedList_init();
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(seq)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphDirectedEdge *de = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
    [newSeq addFirstWithId:[((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(de)) getSym]];
  }
  return newSeq;
}

ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationLinemergeLineSequencer_buildSequencedGeometryWithJavaUtilList_(ComVividsolutionsJtsOperationLinemergeLineSequencer *self, id<JavaUtilList> sequences) {
  id<JavaUtilList> lines = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> i1 = [((id<JavaUtilList>) nil_chk(sequences)) iterator]; [((id<JavaUtilIterator>) nil_chk(i1)) hasNext]; ) {
    id<JavaUtilList> seq = (id<JavaUtilList>) check_protocol_cast([i1 next], @protocol(JavaUtilList));
    for (id<JavaUtilIterator> i2 = [((id<JavaUtilList>) nil_chk(seq)) iterator]; [((id<JavaUtilIterator>) nil_chk(i2)) hasNext]; ) {
      ComVividsolutionsJtsPlanargraphDirectedEdge *de = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([i2 next], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
      ComVividsolutionsJtsOperationLinemergeLineMergeEdge *e = (ComVividsolutionsJtsOperationLinemergeLineMergeEdge *) check_class_cast([((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(de)) getEdge], [ComVividsolutionsJtsOperationLinemergeLineMergeEdge class]);
      ComVividsolutionsJtsGeomLineString *line = [((ComVividsolutionsJtsOperationLinemergeLineMergeEdge *) nil_chk(e)) getLine];
      ComVividsolutionsJtsGeomLineString *lineToAdd = line;
      if (![de getEdgeDirection] && ![((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) isClosed]) lineToAdd = ComVividsolutionsJtsOperationLinemergeLineSequencer_reverseWithComVividsolutionsJtsGeomLineString_(line);
      [lines addWithId:lineToAdd];
    }
  }
  if ([lines size] == 0) return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(self->factory_)) createMultiLineStringWithComVividsolutionsJtsGeomLineStringArray:[IOSObjectArray newArrayWithLength:0 type:ComVividsolutionsJtsGeomLineString_class_()]];
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(self->factory_)) buildGeometryWithJavaUtilCollection:lines];
}

ComVividsolutionsJtsGeomLineString *ComVividsolutionsJtsOperationLinemergeLineSequencer_reverseWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsGeomLineString *line) {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_initialize();
  IOSObjectArray *pts = [((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) getCoordinates];
  IOSObjectArray *revPts = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(pts))->size_ type:ComVividsolutionsJtsGeomCoordinate_class_()];
  jint len = pts->size_;
  for (jint i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(revPts, len - 1 - i, new_ComVividsolutionsJtsGeomCoordinate_initWithComVividsolutionsJtsGeomCoordinate_(IOSObjectArray_Get(pts, i)));
  }
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([line getFactory])) createLineStringWithComVividsolutionsJtsGeomCoordinateArray:revPts];
}

void ComVividsolutionsJtsOperationLinemergeLineSequencer_init(ComVividsolutionsJtsOperationLinemergeLineSequencer *self) {
  (void) NSObject_init(self);
  self->graph_ = new_ComVividsolutionsJtsOperationLinemergeLineMergeGraph_init();
  self->factory_ = new_ComVividsolutionsJtsGeomGeometryFactory_init();
  self->lineCount_ = 0;
  self->isRun_ = NO;
  self->sequencedGeometry_ = nil;
  self->isSequenceable__ = NO;
}

ComVividsolutionsJtsOperationLinemergeLineSequencer *new_ComVividsolutionsJtsOperationLinemergeLineSequencer_init() {
  ComVividsolutionsJtsOperationLinemergeLineSequencer *self = [ComVividsolutionsJtsOperationLinemergeLineSequencer alloc];
  ComVividsolutionsJtsOperationLinemergeLineSequencer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationLinemergeLineSequencer)

@implementation ComVividsolutionsJtsOperationLinemergeLineSequencer_$1

- (void)filterWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)component {
  if ([component isKindOfClass:[ComVividsolutionsJtsGeomLineString class]]) {
    ComVividsolutionsJtsOperationLinemergeLineSequencer_addLineWithComVividsolutionsJtsGeomLineString_(this$0_, (ComVividsolutionsJtsGeomLineString *) check_class_cast(component, [ComVividsolutionsJtsGeomLineString class]));
  }
}

- (instancetype)initWithComVividsolutionsJtsOperationLinemergeLineSequencer:(ComVividsolutionsJtsOperationLinemergeLineSequencer *)outer$ {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_$1_initWithComVividsolutionsJtsOperationLinemergeLineSequencer_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "filterWithComVividsolutionsJtsGeomGeometry:", "filter", "V", 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsOperationLinemergeLineSequencer:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.vividsolutions.jts.operation.linemerge.LineSequencer;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComVividsolutionsJtsOperationLinemergeLineSequencer", "addWithComVividsolutionsJtsGeomGeometry:" };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationLinemergeLineSequencer_$1 = { 2, "", "com.vividsolutions.jts.operation.linemerge", "LineSequencer", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ComVividsolutionsJtsOperationLinemergeLineSequencer_$1;
}

@end

void ComVividsolutionsJtsOperationLinemergeLineSequencer_$1_initWithComVividsolutionsJtsOperationLinemergeLineSequencer_(ComVividsolutionsJtsOperationLinemergeLineSequencer_$1 *self, ComVividsolutionsJtsOperationLinemergeLineSequencer *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ComVividsolutionsJtsOperationLinemergeLineSequencer_$1 *new_ComVividsolutionsJtsOperationLinemergeLineSequencer_$1_initWithComVividsolutionsJtsOperationLinemergeLineSequencer_(ComVividsolutionsJtsOperationLinemergeLineSequencer *outer$) {
  ComVividsolutionsJtsOperationLinemergeLineSequencer_$1 *self = [ComVividsolutionsJtsOperationLinemergeLineSequencer_$1 alloc];
  ComVividsolutionsJtsOperationLinemergeLineSequencer_$1_initWithComVividsolutionsJtsOperationLinemergeLineSequencer_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationLinemergeLineSequencer_$1)
