//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/operation/relate/EdgeEndBuilder.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEnd.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersection.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/operation/relate/EdgeEndBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@implementation ComVividsolutionsJtsOperationRelateEdgeEndBuilder

- (instancetype)init {
  ComVividsolutionsJtsOperationRelateEdgeEndBuilder_init(self);
  return self;
}

- (id<JavaUtilList>)computeEdgeEndsWithJavaUtilIterator:(id<JavaUtilIterator>)edges {
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> i = edges; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdge class]);
    [self computeEdgeEndsWithComVividsolutionsJtsGeomgraphEdge:e withJavaUtilList:l];
  }
  return l;
}

- (void)computeEdgeEndsWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)edge
                                            withJavaUtilList:(id<JavaUtilList>)l {
  ComVividsolutionsJtsGeomgraphEdgeIntersectionList *eiList = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(edge)) getEdgeIntersectionList];
  [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk(eiList)) addEndpoints];
  id<JavaUtilIterator> it = [eiList iterator];
  ComVividsolutionsJtsGeomgraphEdgeIntersection *eiPrev = nil;
  ComVividsolutionsJtsGeomgraphEdgeIntersection *eiCurr = nil;
  if (![((id<JavaUtilIterator>) nil_chk(it)) hasNext]) return;
  ComVividsolutionsJtsGeomgraphEdgeIntersection *eiNext = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
  do {
    eiPrev = eiCurr;
    eiCurr = eiNext;
    eiNext = nil;
    if ([it hasNext]) eiNext = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
    if (eiCurr != nil) {
      [self createEdgeEndForPrevWithComVividsolutionsJtsGeomgraphEdge:edge withJavaUtilList:l withComVividsolutionsJtsGeomgraphEdgeIntersection:eiCurr withComVividsolutionsJtsGeomgraphEdgeIntersection:eiPrev];
      [self createEdgeEndForNextWithComVividsolutionsJtsGeomgraphEdge:edge withJavaUtilList:l withComVividsolutionsJtsGeomgraphEdgeIntersection:eiCurr withComVividsolutionsJtsGeomgraphEdgeIntersection:eiNext];
    }
  }
  while (eiCurr != nil);
}

- (void)createEdgeEndForPrevWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)edge
                                                 withJavaUtilList:(id<JavaUtilList>)l
                withComVividsolutionsJtsGeomgraphEdgeIntersection:(ComVividsolutionsJtsGeomgraphEdgeIntersection *)eiCurr
                withComVividsolutionsJtsGeomgraphEdgeIntersection:(ComVividsolutionsJtsGeomgraphEdgeIntersection *)eiPrev {
  jint iPrev = ((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(eiCurr))->segmentIndex_;
  if (eiCurr->dist_ == 0.0) {
    if (iPrev == 0) return;
    iPrev--;
  }
  ComVividsolutionsJtsGeomCoordinate *pPrev = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(edge)) getCoordinateWithInt:iPrev];
  if (eiPrev != nil && eiPrev->segmentIndex_ >= iPrev) pPrev = eiPrev->coord_;
  ComVividsolutionsJtsGeomgraphLabel *label = new_ComVividsolutionsJtsGeomgraphLabel_initWithComVividsolutionsJtsGeomgraphLabel_([edge getLabel]);
  [label flip];
  ComVividsolutionsJtsGeomgraphEdgeEnd *e = new_ComVividsolutionsJtsGeomgraphEdgeEnd_initWithComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphLabel_(edge, eiCurr->coord_, pPrev, label);
  [((id<JavaUtilList>) nil_chk(l)) addWithId:e];
}

- (void)createEdgeEndForNextWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)edge
                                                 withJavaUtilList:(id<JavaUtilList>)l
                withComVividsolutionsJtsGeomgraphEdgeIntersection:(ComVividsolutionsJtsGeomgraphEdgeIntersection *)eiCurr
                withComVividsolutionsJtsGeomgraphEdgeIntersection:(ComVividsolutionsJtsGeomgraphEdgeIntersection *)eiNext {
  jint iNext = ((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(eiCurr))->segmentIndex_ + 1;
  if (iNext >= [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(edge)) getNumPoints] && eiNext == nil) return;
  ComVividsolutionsJtsGeomCoordinate *pNext = [edge getCoordinateWithInt:iNext];
  if (eiNext != nil && eiNext->segmentIndex_ == eiCurr->segmentIndex_) pNext = eiNext->coord_;
  ComVividsolutionsJtsGeomgraphEdgeEnd *e = new_ComVividsolutionsJtsGeomgraphEdgeEnd_initWithComVividsolutionsJtsGeomgraphEdge_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphLabel_(edge, eiCurr->coord_, pNext, new_ComVividsolutionsJtsGeomgraphLabel_initWithComVividsolutionsJtsGeomgraphLabel_([edge getLabel]));
  [((id<JavaUtilList>) nil_chk(l)) addWithId:e];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EdgeEndBuilder", NULL, 0x1, NULL, NULL },
    { "computeEdgeEndsWithJavaUtilIterator:", "computeEdgeEnds", "Ljava.util.List;", 0x1, NULL, NULL },
    { "computeEdgeEndsWithComVividsolutionsJtsGeomgraphEdge:withJavaUtilList:", "computeEdgeEnds", "V", 0x1, NULL, NULL },
    { "createEdgeEndForPrevWithComVividsolutionsJtsGeomgraphEdge:withJavaUtilList:withComVividsolutionsJtsGeomgraphEdgeIntersection:withComVividsolutionsJtsGeomgraphEdgeIntersection:", "createEdgeEndForPrev", "V", 0x0, NULL, NULL },
    { "createEdgeEndForNextWithComVividsolutionsJtsGeomgraphEdge:withJavaUtilList:withComVividsolutionsJtsGeomgraphEdgeIntersection:withComVividsolutionsJtsGeomgraphEdgeIntersection:", "createEdgeEndForNext", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationRelateEdgeEndBuilder = { 2, "EdgeEndBuilder", "com.vividsolutions.jts.operation.relate", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationRelateEdgeEndBuilder;
}

@end

void ComVividsolutionsJtsOperationRelateEdgeEndBuilder_init(ComVividsolutionsJtsOperationRelateEdgeEndBuilder *self) {
  (void) NSObject_init(self);
}

ComVividsolutionsJtsOperationRelateEdgeEndBuilder *new_ComVividsolutionsJtsOperationRelateEdgeEndBuilder_init() {
  ComVividsolutionsJtsOperationRelateEdgeEndBuilder *self = [ComVividsolutionsJtsOperationRelateEdgeEndBuilder alloc];
  ComVividsolutionsJtsOperationRelateEdgeEndBuilder_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationRelateEdgeEndBuilder)
