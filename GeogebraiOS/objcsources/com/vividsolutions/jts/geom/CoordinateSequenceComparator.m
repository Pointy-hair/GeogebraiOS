//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/geom/CoordinateSequenceComparator.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/CoordinateSequence.h"
#include "com/vividsolutions/jts/geom/CoordinateSequenceComparator.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"

@implementation ComVividsolutionsJtsGeomCoordinateSequenceComparator

+ (jint)compareWithDouble:(jdouble)a
               withDouble:(jdouble)b {
  return ComVividsolutionsJtsGeomCoordinateSequenceComparator_compareWithDouble_withDouble_(a, b);
}

- (instancetype)init {
  ComVividsolutionsJtsGeomCoordinateSequenceComparator_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)dimensionLimit {
  ComVividsolutionsJtsGeomCoordinateSequenceComparator_initWithInt_(self, dimensionLimit);
  return self;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  id<ComVividsolutionsJtsGeomCoordinateSequence> s1 = (id<ComVividsolutionsJtsGeomCoordinateSequence>) check_protocol_cast(o1, @protocol(ComVividsolutionsJtsGeomCoordinateSequence));
  id<ComVividsolutionsJtsGeomCoordinateSequence> s2 = (id<ComVividsolutionsJtsGeomCoordinateSequence>) check_protocol_cast(o2, @protocol(ComVividsolutionsJtsGeomCoordinateSequence));
  jint size1 = [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(s1)) size];
  jint size2 = [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(s2)) size];
  jint dim1 = [s1 getDimension];
  jint dim2 = [s2 getDimension];
  jint minDim = dim1;
  if (dim2 < minDim) minDim = dim2;
  jboolean dimLimited = NO;
  if (dimensionLimit_ <= minDim) {
    minDim = dimensionLimit_;
    dimLimited = YES;
  }
  if (!dimLimited) {
    if (dim1 < dim2) return -1;
    if (dim1 > dim2) return 1;
  }
  jint i = 0;
  while (i < size1 && i < size2) {
    jint ptComp = [self compareCoordinateWithComVividsolutionsJtsGeomCoordinateSequence:s1 withComVividsolutionsJtsGeomCoordinateSequence:s2 withInt:i withInt:minDim];
    if (ptComp != 0) return ptComp;
    i++;
  }
  if (i < size1) return 1;
  if (i < size2) return -1;
  return 0;
}

- (jint)compareCoordinateWithComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)s1
                         withComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)s2
                                                                withInt:(jint)i
                                                                withInt:(jint)dimension {
  for (jint d = 0; d < dimension; d++) {
    jdouble ord1 = [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(s1)) getOrdinateWithInt:i withInt:d];
    jdouble ord2 = [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(s2)) getOrdinateWithInt:i withInt:d];
    jint comp = ComVividsolutionsJtsGeomCoordinateSequenceComparator_compareWithDouble_withDouble_(ord1, ord2);
    if (comp != 0) return comp;
  }
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithDouble:withDouble:", "compare", "I", 0x9, NULL, NULL },
    { "init", "CoordinateSequenceComparator", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "CoordinateSequenceComparator", NULL, 0x1, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "compareCoordinateWithComVividsolutionsJtsGeomCoordinateSequence:withComVividsolutionsJtsGeomCoordinateSequence:withInt:withInt:", "compareCoordinate", "I", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dimensionLimit_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomCoordinateSequenceComparator = { 2, "CoordinateSequenceComparator", "com.vividsolutions.jts.geom", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomCoordinateSequenceComparator;
}

@end

jint ComVividsolutionsJtsGeomCoordinateSequenceComparator_compareWithDouble_withDouble_(jdouble a, jdouble b) {
  ComVividsolutionsJtsGeomCoordinateSequenceComparator_initialize();
  if (a < b) return -1;
  if (a > b) return 1;
  if (JavaLangDouble_isNaNWithDouble_(a)) {
    if (JavaLangDouble_isNaNWithDouble_(b)) return 0;
    return -1;
  }
  if (JavaLangDouble_isNaNWithDouble_(b)) return 1;
  return 0;
}

void ComVividsolutionsJtsGeomCoordinateSequenceComparator_init(ComVividsolutionsJtsGeomCoordinateSequenceComparator *self) {
  (void) NSObject_init(self);
  self->dimensionLimit_ = JavaLangInteger_MAX_VALUE;
}

ComVividsolutionsJtsGeomCoordinateSequenceComparator *new_ComVividsolutionsJtsGeomCoordinateSequenceComparator_init() {
  ComVividsolutionsJtsGeomCoordinateSequenceComparator *self = [ComVividsolutionsJtsGeomCoordinateSequenceComparator alloc];
  ComVividsolutionsJtsGeomCoordinateSequenceComparator_init(self);
  return self;
}

void ComVividsolutionsJtsGeomCoordinateSequenceComparator_initWithInt_(ComVividsolutionsJtsGeomCoordinateSequenceComparator *self, jint dimensionLimit) {
  (void) NSObject_init(self);
  self->dimensionLimit_ = dimensionLimit;
}

ComVividsolutionsJtsGeomCoordinateSequenceComparator *new_ComVividsolutionsJtsGeomCoordinateSequenceComparator_initWithInt_(jint dimensionLimit) {
  ComVividsolutionsJtsGeomCoordinateSequenceComparator *self = [ComVividsolutionsJtsGeomCoordinateSequenceComparator alloc];
  ComVividsolutionsJtsGeomCoordinateSequenceComparator_initWithInt_(self, dimensionLimit);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomCoordinateSequenceComparator)
