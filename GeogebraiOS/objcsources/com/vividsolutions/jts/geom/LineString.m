//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/geom/LineString.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/CGAlgorithms.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateArrays.h"
#include "com/vividsolutions/jts/geom/CoordinateFilter.h"
#include "com/vividsolutions/jts/geom/CoordinateSequence.h"
#include "com/vividsolutions/jts/geom/CoordinateSequenceComparator.h"
#include "com/vividsolutions/jts/geom/CoordinateSequenceFactory.h"
#include "com/vividsolutions/jts/geom/CoordinateSequenceFilter.h"
#include "com/vividsolutions/jts/geom/CoordinateSequences.h"
#include "com/vividsolutions/jts/geom/Dimension.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryComponentFilter.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/GeometryFilter.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/Point.h"
#include "com/vividsolutions/jts/geom/PrecisionModel.h"
#include "com/vividsolutions/jts/operation/BoundaryOp.h"
#include "java/lang/IllegalArgumentException.h"

#define ComVividsolutionsJtsGeomLineString_serialVersionUID 3110669828065365560LL

@interface ComVividsolutionsJtsGeomLineString ()

- (void)init__WithComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)points OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsGeomLineString, serialVersionUID, jlong)

__attribute__((unused)) static void ComVividsolutionsJtsGeomLineString_init__WithComVividsolutionsJtsGeomCoordinateSequence_(ComVividsolutionsJtsGeomLineString *self, id<ComVividsolutionsJtsGeomCoordinateSequence> points);

@implementation ComVividsolutionsJtsGeomLineString

- (instancetype)initWithComVividsolutionsJtsGeomCoordinateArray:(IOSObjectArray *)points
                     withComVividsolutionsJtsGeomPrecisionModel:(ComVividsolutionsJtsGeomPrecisionModel *)precisionModel
                                                        withInt:(jint)SRID {
  ComVividsolutionsJtsGeomLineString_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(self, points, precisionModel, SRID);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)points
                       withComVividsolutionsJtsGeomGeometryFactory:(ComVividsolutionsJtsGeomGeometryFactory *)factory {
  ComVividsolutionsJtsGeomLineString_initWithComVividsolutionsJtsGeomCoordinateSequence_withComVividsolutionsJtsGeomGeometryFactory_(self, points, factory);
  return self;
}

- (void)init__WithComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)points {
  ComVividsolutionsJtsGeomLineString_init__WithComVividsolutionsJtsGeomCoordinateSequence_(self, points);
}

- (IOSObjectArray *)getCoordinates {
  return [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) toCoordinateArray];
}

- (id<ComVividsolutionsJtsGeomCoordinateSequence>)getCoordinateSequence {
  return points_;
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinateNWithInt:(jint)n {
  return [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) getCoordinateWithInt:n];
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinate {
  if ([self isEmpty]) return nil;
  return [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) getCoordinateWithInt:0];
}

- (jint)getDimension {
  return 1;
}

- (jint)getBoundaryDimension {
  if ([self isClosed]) {
    return ComVividsolutionsJtsGeomDimension_FALSE;
  }
  return 0;
}

- (jboolean)isEmpty {
  return [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) size] == 0;
}

- (jint)getNumPoints {
  return [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) size];
}

- (ComVividsolutionsJtsGeomPoint *)getPointNWithInt:(jint)n {
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createPointWithComVividsolutionsJtsGeomCoordinate:[((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) getCoordinateWithInt:n]];
}

- (ComVividsolutionsJtsGeomPoint *)getStartPoint {
  if ([self isEmpty]) {
    return nil;
  }
  return [self getPointNWithInt:0];
}

- (ComVividsolutionsJtsGeomPoint *)getEndPoint {
  if ([self isEmpty]) {
    return nil;
  }
  return [self getPointNWithInt:[self getNumPoints] - 1];
}

- (jboolean)isClosed {
  if ([self isEmpty]) {
    return NO;
  }
  return [((ComVividsolutionsJtsGeomCoordinate *) nil_chk([self getCoordinateNWithInt:0])) equals2DWithComVividsolutionsJtsGeomCoordinate:[self getCoordinateNWithInt:[self getNumPoints] - 1]];
}

- (jboolean)isRing {
  return [self isClosed] && [self isSimple];
}

- (NSString *)getGeometryType {
  return @"LineString";
}

- (jdouble)getLength {
  return ComVividsolutionsJtsAlgorithmCGAlgorithms_lengthWithComVividsolutionsJtsGeomCoordinateSequence_(points_);
}

- (ComVividsolutionsJtsGeomGeometry *)getBoundary {
  return [([new_ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_(self) autorelease]) getBoundary];
}

- (ComVividsolutionsJtsGeomGeometry *)reverse {
  id<ComVividsolutionsJtsGeomCoordinateSequence> seq = (id<ComVividsolutionsJtsGeomCoordinateSequence>) check_protocol_cast([((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) clone], @protocol(ComVividsolutionsJtsGeomCoordinateSequence));
  ComVividsolutionsJtsGeomCoordinateSequences_reverseWithComVividsolutionsJtsGeomCoordinateSequence_(seq);
  ComVividsolutionsJtsGeomLineString *revLine = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createLineStringWithComVividsolutionsJtsGeomCoordinateSequence:seq];
  return revLine;
}

- (jboolean)isCoordinateWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  for (jint i = 0; i < [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) size]; i++) {
    if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk([points_ getCoordinateWithInt:i])) isEqual:pt]) {
      return YES;
    }
  }
  return NO;
}

- (ComVividsolutionsJtsGeomEnvelope *)computeEnvelopeInternal {
  if ([self isEmpty]) {
    return [new_ComVividsolutionsJtsGeomEnvelope_init() autorelease];
  }
  return [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) expandEnvelopeWithComVividsolutionsJtsGeomEnvelope:[new_ComVividsolutionsJtsGeomEnvelope_init() autorelease]];
}

- (jboolean)equalsExactWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other
                                                 withDouble:(jdouble)tolerance {
  if (![self isEquivalentClassWithComVividsolutionsJtsGeomGeometry:other]) {
    return NO;
  }
  ComVividsolutionsJtsGeomLineString *otherLineString = (ComVividsolutionsJtsGeomLineString *) check_class_cast(other, [ComVividsolutionsJtsGeomLineString class]);
  if ([((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) size] != [((ComVividsolutionsJtsGeomLineString *) nil_chk(otherLineString))->points_ size]) {
    return NO;
  }
  for (jint i = 0; i < [points_ size]; i++) {
    if (![self equalWithComVividsolutionsJtsGeomCoordinate:[points_ getCoordinateWithInt:i] withComVividsolutionsJtsGeomCoordinate:[otherLineString->points_ getCoordinateWithInt:i] withDouble:tolerance]) {
      return NO;
    }
  }
  return YES;
}

- (void)applyWithComVividsolutionsJtsGeomCoordinateFilter:(id<ComVividsolutionsJtsGeomCoordinateFilter>)filter {
  for (jint i = 0; i < [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) size]; i++) {
    [((id<ComVividsolutionsJtsGeomCoordinateFilter>) nil_chk(filter)) filterWithComVividsolutionsJtsGeomCoordinate:[points_ getCoordinateWithInt:i]];
  }
}

- (void)applyWithComVividsolutionsJtsGeomCoordinateSequenceFilter:(id<ComVividsolutionsJtsGeomCoordinateSequenceFilter>)filter {
  if ([((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) size] == 0) return;
  for (jint i = 0; i < [points_ size]; i++) {
    [((id<ComVividsolutionsJtsGeomCoordinateSequenceFilter>) nil_chk(filter)) filterWithComVividsolutionsJtsGeomCoordinateSequence:points_ withInt:i];
    if ([filter isDone]) break;
  }
  if ([((id<ComVividsolutionsJtsGeomCoordinateSequenceFilter>) nil_chk(filter)) isGeometryChanged]) [self geometryChanged];
}

- (void)applyWithComVividsolutionsJtsGeomGeometryFilter:(id<ComVividsolutionsJtsGeomGeometryFilter>)filter {
  [((id<ComVividsolutionsJtsGeomGeometryFilter>) nil_chk(filter)) filterWithComVividsolutionsJtsGeomGeometry:self];
}

- (void)applyWithComVividsolutionsJtsGeomGeometryComponentFilter:(id<ComVividsolutionsJtsGeomGeometryComponentFilter>)filter {
  [((id<ComVividsolutionsJtsGeomGeometryComponentFilter>) nil_chk(filter)) filterWithComVividsolutionsJtsGeomGeometry:self];
}

- (id)clone {
  ComVividsolutionsJtsGeomLineString *ls = (ComVividsolutionsJtsGeomLineString *) check_class_cast([super clone], [ComVividsolutionsJtsGeomLineString class]);
  ComVividsolutionsJtsGeomLineString_set_points_(nil_chk(ls), (id<ComVividsolutionsJtsGeomCoordinateSequence>) check_protocol_cast([((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) clone], @protocol(ComVividsolutionsJtsGeomCoordinateSequence)));
  return ls;
}

- (void)normalize {
  for (jint i = 0; i < [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) size] / 2; i++) {
    jint j = [points_ size] - 1 - i;
    if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk([points_ getCoordinateWithInt:i])) isEqual:[points_ getCoordinateWithInt:j]]) {
      if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk([points_ getCoordinateWithInt:i])) compareToWithId:[points_ getCoordinateWithInt:j]] > 0) {
        ComVividsolutionsJtsGeomCoordinateArrays_reverseWithComVividsolutionsJtsGeomCoordinateArray_([self getCoordinates]);
      }
      return;
    }
  }
}

- (jboolean)isEquivalentClassWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other {
  return [other isKindOfClass:[ComVividsolutionsJtsGeomLineString class]];
}

- (jint)compareToSameClassWithId:(id)o {
  ComVividsolutionsJtsGeomLineString *line = (ComVividsolutionsJtsGeomLineString *) check_class_cast(o, [ComVividsolutionsJtsGeomLineString class]);
  jint i = 0;
  jint j = 0;
  while (i < [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points_)) size] && j < [((ComVividsolutionsJtsGeomLineString *) nil_chk(line))->points_ size]) {
    jint comparison = [((ComVividsolutionsJtsGeomCoordinate *) nil_chk([points_ getCoordinateWithInt:i])) compareToWithId:[((ComVividsolutionsJtsGeomLineString *) nil_chk(line))->points_ getCoordinateWithInt:j]];
    if (comparison != 0) {
      return comparison;
    }
    i++;
    j++;
  }
  if (i < [points_ size]) {
    return 1;
  }
  if (j < [((ComVividsolutionsJtsGeomLineString *) nil_chk(line))->points_ size]) {
    return -1;
  }
  return 0;
}

- (jint)compareToSameClassWithId:(id)o
withComVividsolutionsJtsGeomCoordinateSequenceComparator:(ComVividsolutionsJtsGeomCoordinateSequenceComparator *)comp {
  ComVividsolutionsJtsGeomLineString *line = (ComVividsolutionsJtsGeomLineString *) check_class_cast(o, [ComVividsolutionsJtsGeomLineString class]);
  return [((ComVividsolutionsJtsGeomCoordinateSequenceComparator *) nil_chk(comp)) compareWithId:self->points_ withId:((ComVividsolutionsJtsGeomLineString *) nil_chk(line))->points_];
}

- (void)dealloc {
  RELEASE_(points_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomCoordinateArray:withComVividsolutionsJtsGeomPrecisionModel:withInt:", "LineString", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomCoordinateSequence:withComVividsolutionsJtsGeomGeometryFactory:", "LineString", NULL, 0x1, NULL, NULL },
    { "init__WithComVividsolutionsJtsGeomCoordinateSequence:", "init", "V", 0x2, NULL, NULL },
    { "getCoordinates", NULL, "[Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getCoordinateSequence", NULL, "Lcom.vividsolutions.jts.geom.CoordinateSequence;", 0x1, NULL, NULL },
    { "getCoordinateNWithInt:", "getCoordinateN", "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getCoordinate", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "getBoundaryDimension", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "getNumPoints", NULL, "I", 0x1, NULL, NULL },
    { "getPointNWithInt:", "getPointN", "Lcom.vividsolutions.jts.geom.Point;", 0x1, NULL, NULL },
    { "getStartPoint", NULL, "Lcom.vividsolutions.jts.geom.Point;", 0x1, NULL, NULL },
    { "getEndPoint", NULL, "Lcom.vividsolutions.jts.geom.Point;", 0x1, NULL, NULL },
    { "isClosed", NULL, "Z", 0x1, NULL, NULL },
    { "isRing", NULL, "Z", 0x1, NULL, NULL },
    { "getGeometryType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLength", NULL, "D", 0x1, NULL, NULL },
    { "getBoundary", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "reverse", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "isCoordinateWithComVividsolutionsJtsGeomCoordinate:", "isCoordinate", "Z", 0x1, NULL, NULL },
    { "computeEnvelopeInternal", NULL, "Lcom.vividsolutions.jts.geom.Envelope;", 0x4, NULL, NULL },
    { "equalsExactWithComVividsolutionsJtsGeomGeometry:withDouble:", "equalsExact", "Z", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomCoordinateFilter:", "apply", "V", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomCoordinateSequenceFilter:", "apply", "V", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomGeometryFilter:", "apply", "V", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomGeometryComponentFilter:", "apply", "V", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "normalize", NULL, "V", 0x1, NULL, NULL },
    { "isEquivalentClassWithComVividsolutionsJtsGeomGeometry:", "isEquivalentClass", "Z", 0x4, NULL, NULL },
    { "compareToSameClassWithId:", "compareToSameClass", "I", 0x4, NULL, NULL },
    { "compareToSameClassWithId:withComVividsolutionsJtsGeomCoordinateSequenceComparator:", "compareToSameClass", "I", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = ComVividsolutionsJtsGeomLineString_serialVersionUID },
    { "points_", NULL, 0x4, "Lcom.vividsolutions.jts.geom.CoordinateSequence;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomLineString = { 2, "LineString", "com.vividsolutions.jts.geom", NULL, 0x1, 32, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomLineString;
}

@end

void ComVividsolutionsJtsGeomLineString_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(ComVividsolutionsJtsGeomLineString *self, IOSObjectArray *points, ComVividsolutionsJtsGeomPrecisionModel *precisionModel, jint SRID) {
  ComVividsolutionsJtsGeomGeometry_initWithComVividsolutionsJtsGeomGeometryFactory_(self, [new_ComVividsolutionsJtsGeomGeometryFactory_initWithComVividsolutionsJtsGeomPrecisionModel_withInt_(precisionModel, SRID) autorelease]);
  ComVividsolutionsJtsGeomLineString_init__WithComVividsolutionsJtsGeomCoordinateSequence_(self, [((id<ComVividsolutionsJtsGeomCoordinateSequenceFactory>) nil_chk([((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) getCoordinateSequenceFactory])) createWithComVividsolutionsJtsGeomCoordinateArray:points]);
}

ComVividsolutionsJtsGeomLineString *new_ComVividsolutionsJtsGeomLineString_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(IOSObjectArray *points, ComVividsolutionsJtsGeomPrecisionModel *precisionModel, jint SRID) {
  ComVividsolutionsJtsGeomLineString *self = [ComVividsolutionsJtsGeomLineString alloc];
  ComVividsolutionsJtsGeomLineString_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(self, points, precisionModel, SRID);
  return self;
}

void ComVividsolutionsJtsGeomLineString_initWithComVividsolutionsJtsGeomCoordinateSequence_withComVividsolutionsJtsGeomGeometryFactory_(ComVividsolutionsJtsGeomLineString *self, id<ComVividsolutionsJtsGeomCoordinateSequence> points, ComVividsolutionsJtsGeomGeometryFactory *factory) {
  ComVividsolutionsJtsGeomGeometry_initWithComVividsolutionsJtsGeomGeometryFactory_(self, factory);
  ComVividsolutionsJtsGeomLineString_init__WithComVividsolutionsJtsGeomCoordinateSequence_(self, points);
}

ComVividsolutionsJtsGeomLineString *new_ComVividsolutionsJtsGeomLineString_initWithComVividsolutionsJtsGeomCoordinateSequence_withComVividsolutionsJtsGeomGeometryFactory_(id<ComVividsolutionsJtsGeomCoordinateSequence> points, ComVividsolutionsJtsGeomGeometryFactory *factory) {
  ComVividsolutionsJtsGeomLineString *self = [ComVividsolutionsJtsGeomLineString alloc];
  ComVividsolutionsJtsGeomLineString_initWithComVividsolutionsJtsGeomCoordinateSequence_withComVividsolutionsJtsGeomGeometryFactory_(self, points, factory);
  return self;
}

void ComVividsolutionsJtsGeomLineString_init__WithComVividsolutionsJtsGeomCoordinateSequence_(ComVividsolutionsJtsGeomLineString *self, id<ComVividsolutionsJtsGeomCoordinateSequence> points) {
  if (points == nil) {
    points = [((id<ComVividsolutionsJtsGeomCoordinateSequenceFactory>) nil_chk([((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) getCoordinateSequenceFactory])) createWithComVividsolutionsJtsGeomCoordinateArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:ComVividsolutionsJtsGeomCoordinate_class_()]];
  }
  if ([((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(points)) size] == 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Invalid number of points in LineString (found ", [points size], @" - must be 0 or >= 2)")) autorelease];
  }
  ComVividsolutionsJtsGeomLineString_set_points_(self, points);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomLineString)
