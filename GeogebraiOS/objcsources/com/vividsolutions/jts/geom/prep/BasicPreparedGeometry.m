//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/geom/prep/BasicPreparedGeometry.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/PointLocator.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/prep/BasicPreparedGeometry.h"
#include "com/vividsolutions/jts/geom/util/ComponentCoordinateExtracter.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsGeomPrepBasicPreparedGeometry () {
 @public
  ComVividsolutionsJtsGeomGeometry *baseGeom_;
  id<JavaUtilList> representativePts_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomPrepBasicPreparedGeometry, baseGeom_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomPrepBasicPreparedGeometry, representativePts_, id<JavaUtilList>)

@implementation ComVividsolutionsJtsGeomPrepBasicPreparedGeometry

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom {
  ComVividsolutionsJtsGeomPrepBasicPreparedGeometry_initWithComVividsolutionsJtsGeomGeometry_(self, geom);
  return self;
}

- (ComVividsolutionsJtsGeomGeometry *)getGeometry {
  return baseGeom_;
}

- (id<JavaUtilList>)getRepresentativePoints {
  return representativePts_;
}

- (jboolean)isAnyTargetComponentInTestWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)testGeom {
  ComVividsolutionsJtsAlgorithmPointLocator *locator = [new_ComVividsolutionsJtsAlgorithmPointLocator_init() autorelease];
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(representativePts_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomCoordinate *p = (ComVividsolutionsJtsGeomCoordinate *) check_class_cast([i next], [ComVividsolutionsJtsGeomCoordinate class]);
    if ([locator intersectsWithComVividsolutionsJtsGeomCoordinate:p withComVividsolutionsJtsGeomGeometry:testGeom]) return YES;
  }
  return NO;
}

- (jboolean)envelopesIntersectWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) getEnvelopeInternal])) intersectsWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  return YES;
}

- (jboolean)envelopeCoversWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) getEnvelopeInternal])) coversWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  return YES;
}

- (jboolean)containsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) containsWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)containsProperlyWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) getEnvelopeInternal])) containsWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  return [baseGeom_ relateWithComVividsolutionsJtsGeomGeometry:g withNSString:@"T**FF*FF*"];
}

- (jboolean)coveredByWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) coveredByWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)coversWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) coversWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)crossesWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) crossesWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)disjointWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return ![self intersectsWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)intersectsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) intersectsWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)overlapsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) overlapsWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)touchesWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) touchesWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)withinWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) withinWithComVividsolutionsJtsGeomGeometry:g];
}

- (NSString *)description {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(baseGeom_)) description];
}

- (void)dealloc {
  RELEASE_(baseGeom_);
  RELEASE_(representativePts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomGeometry:", "BasicPreparedGeometry", NULL, 0x1, NULL, NULL },
    { "getGeometry", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "getRepresentativePoints", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "isAnyTargetComponentInTestWithComVividsolutionsJtsGeomGeometry:", "isAnyTargetComponentInTest", "Z", 0x1, NULL, NULL },
    { "envelopesIntersectWithComVividsolutionsJtsGeomGeometry:", "envelopesIntersect", "Z", 0x4, NULL, NULL },
    { "envelopeCoversWithComVividsolutionsJtsGeomGeometry:", "envelopeCovers", "Z", 0x4, NULL, NULL },
    { "containsWithComVividsolutionsJtsGeomGeometry:", "contains", "Z", 0x1, NULL, NULL },
    { "containsProperlyWithComVividsolutionsJtsGeomGeometry:", "containsProperly", "Z", 0x1, NULL, NULL },
    { "coveredByWithComVividsolutionsJtsGeomGeometry:", "coveredBy", "Z", 0x1, NULL, NULL },
    { "coversWithComVividsolutionsJtsGeomGeometry:", "covers", "Z", 0x1, NULL, NULL },
    { "crossesWithComVividsolutionsJtsGeomGeometry:", "crosses", "Z", 0x1, NULL, NULL },
    { "disjointWithComVividsolutionsJtsGeomGeometry:", "disjoint", "Z", 0x1, NULL, NULL },
    { "intersectsWithComVividsolutionsJtsGeomGeometry:", "intersects", "Z", 0x1, NULL, NULL },
    { "overlapsWithComVividsolutionsJtsGeomGeometry:", "overlaps", "Z", 0x1, NULL, NULL },
    { "touchesWithComVividsolutionsJtsGeomGeometry:", "touches", "Z", 0x1, NULL, NULL },
    { "withinWithComVividsolutionsJtsGeomGeometry:", "within", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "baseGeom_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "representativePts_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomPrepBasicPreparedGeometry = { 2, "BasicPreparedGeometry", "com.vividsolutions.jts.geom.prep", NULL, 0x1, 17, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomPrepBasicPreparedGeometry;
}

@end

void ComVividsolutionsJtsGeomPrepBasicPreparedGeometry_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomPrepBasicPreparedGeometry *self, ComVividsolutionsJtsGeomGeometry *geom) {
  NSObject_init(self);
  ComVividsolutionsJtsGeomPrepBasicPreparedGeometry_set_baseGeom_(self, geom);
  ComVividsolutionsJtsGeomPrepBasicPreparedGeometry_set_representativePts_(self, ComVividsolutionsJtsGeomUtilComponentCoordinateExtracter_getCoordinatesWithComVividsolutionsJtsGeomGeometry_(geom));
}

ComVividsolutionsJtsGeomPrepBasicPreparedGeometry *new_ComVividsolutionsJtsGeomPrepBasicPreparedGeometry_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *geom) {
  ComVividsolutionsJtsGeomPrepBasicPreparedGeometry *self = [ComVividsolutionsJtsGeomPrepBasicPreparedGeometry alloc];
  ComVividsolutionsJtsGeomPrepBasicPreparedGeometry_initWithComVividsolutionsJtsGeomGeometry_(self, geom);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomPrepBasicPreparedGeometry)
