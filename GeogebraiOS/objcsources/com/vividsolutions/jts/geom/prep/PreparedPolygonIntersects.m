//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/geom/prep/PreparedPolygonIntersects.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/prep/PreparedPolygon.h"
#include "com/vividsolutions/jts/geom/prep/PreparedPolygonIntersects.h"
#include "com/vividsolutions/jts/geom/prep/PreparedPolygonPredicate.h"
#include "com/vividsolutions/jts/noding/FastSegmentSetIntersectionFinder.h"
#include "com/vividsolutions/jts/noding/SegmentStringUtil.h"
#include "java/util/List.h"

@implementation ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects

+ (jboolean)intersectsWithComVividsolutionsJtsGeomPrepPreparedPolygon:(ComVividsolutionsJtsGeomPrepPreparedPolygon *)prep
                                 withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom {
  return ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_intersectsWithComVividsolutionsJtsGeomPrepPreparedPolygon_withComVividsolutionsJtsGeomGeometry_(prep, geom);
}

- (instancetype)initWithComVividsolutionsJtsGeomPrepPreparedPolygon:(ComVividsolutionsJtsGeomPrepPreparedPolygon *)prepPoly {
  ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_initWithComVividsolutionsJtsGeomPrepPreparedPolygon_(self, prepPoly);
  return self;
}

- (jboolean)intersectsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom {
  jboolean isInPrepGeomArea = [self isAnyTestComponentInTargetWithComVividsolutionsJtsGeomGeometry:geom];
  if (isInPrepGeomArea) return YES;
  id<JavaUtilList> lineSegStr = ComVividsolutionsJtsNodingSegmentStringUtil_extractSegmentStringsWithComVividsolutionsJtsGeomGeometry_(geom);
  jboolean segsIntersect = [((ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *) nil_chk([((ComVividsolutionsJtsGeomPrepPreparedPolygon *) nil_chk(prepPoly_)) getIntersectionFinder])) intersectsWithJavaUtilCollection:lineSegStr];
  if (segsIntersect) return YES;
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(geom)) getDimension] == 2) {
    jboolean isPrepGeomInArea = [self isAnyTargetComponentInAreaTestWithComVividsolutionsJtsGeomGeometry:geom withJavaUtilList:[prepPoly_ getRepresentativePoints]];
    if (isPrepGeomInArea) return YES;
  }
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "intersectsWithComVividsolutionsJtsGeomPrepPreparedPolygon:withComVividsolutionsJtsGeomGeometry:", "intersects", "Z", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomPrepPreparedPolygon:", "PreparedPolygonIntersects", NULL, 0x1, NULL, NULL },
    { "intersectsWithComVividsolutionsJtsGeomGeometry:", "intersects", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects = { 2, "PreparedPolygonIntersects", "com.vividsolutions.jts.geom.prep", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects;
}

@end

jboolean ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_intersectsWithComVividsolutionsJtsGeomPrepPreparedPolygon_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomPrepPreparedPolygon *prep, ComVividsolutionsJtsGeomGeometry *geom) {
  ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_initialize();
  ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects *polyInt = new_ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_initWithComVividsolutionsJtsGeomPrepPreparedPolygon_(prep);
  return [polyInt intersectsWithComVividsolutionsJtsGeomGeometry:geom];
}

void ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_initWithComVividsolutionsJtsGeomPrepPreparedPolygon_(ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects *self, ComVividsolutionsJtsGeomPrepPreparedPolygon *prepPoly) {
  (void) ComVividsolutionsJtsGeomPrepPreparedPolygonPredicate_initWithComVividsolutionsJtsGeomPrepPreparedPolygon_(self, prepPoly);
}

ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects *new_ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_initWithComVividsolutionsJtsGeomPrepPreparedPolygon_(ComVividsolutionsJtsGeomPrepPreparedPolygon *prepPoly) {
  ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects *self = [ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects alloc];
  ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_initWithComVividsolutionsJtsGeomPrepPreparedPolygon_(self, prepPoly);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects)
