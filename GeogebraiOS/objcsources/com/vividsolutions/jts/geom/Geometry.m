//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/geom/Geometry.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/CentroidArea.h"
#include "com/vividsolutions/jts/algorithm/CentroidLine.h"
#include "com/vividsolutions/jts/algorithm/CentroidPoint.h"
#include "com/vividsolutions/jts/algorithm/ConvexHull.h"
#include "com/vividsolutions/jts/algorithm/InteriorPointArea.h"
#include "com/vividsolutions/jts/algorithm/InteriorPointLine.h"
#include "com/vividsolutions/jts/algorithm/InteriorPointPoint.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateFilter.h"
#include "com/vividsolutions/jts/geom/CoordinateSequenceComparator.h"
#include "com/vividsolutions/jts/geom/CoordinateSequenceFilter.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryCollection.h"
#include "com/vividsolutions/jts/geom/GeometryComponentFilter.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/GeometryFilter.h"
#include "com/vividsolutions/jts/geom/IntersectionMatrix.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/geom/MultiPoint.h"
#include "com/vividsolutions/jts/geom/MultiPolygon.h"
#include "com/vividsolutions/jts/geom/Point.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geom/PrecisionModel.h"
#include "com/vividsolutions/jts/operation/IsSimpleOp.h"
#include "com/vividsolutions/jts/operation/buffer/BufferOp.h"
#include "com/vividsolutions/jts/operation/distance/DistanceOp.h"
#include "com/vividsolutions/jts/operation/overlay/OverlayOp.h"
#include "com/vividsolutions/jts/operation/overlay/snap/SnapIfNeededOverlayOp.h"
#include "com/vividsolutions/jts/operation/predicate/RectangleContains.h"
#include "com/vividsolutions/jts/operation/predicate/RectangleIntersects.h"
#include "com/vividsolutions/jts/operation/relate/RelateOp.h"
#include "com/vividsolutions/jts/operation/union/UnaryUnionOp.h"
#include "com/vividsolutions/jts/operation/valid/IsValidOp.h"
#include "java/lang/Comparable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"

#define ComVividsolutionsJtsGeomGeometry_serialVersionUID 8763622679187376702LL

@interface ComVividsolutionsJtsGeomGeometry () {
 @public
  id userData_;
}

- (jint)getClassSortIndex;

+ (void)initSortedClasses OBJC_METHOD_FAMILY_NONE;

- (ComVividsolutionsJtsGeomPoint *)createPointFromInternalCoordWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord
                                                                 withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)exemplar;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomGeometry, userData_, id)

J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsGeomGeometry, serialVersionUID, jlong)

static IOSObjectArray *ComVividsolutionsJtsGeomGeometry_sortedClasses_;
J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsGeomGeometry, sortedClasses_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(ComVividsolutionsJtsGeomGeometry, sortedClasses_, IOSObjectArray *)

static id<ComVividsolutionsJtsGeomGeometryComponentFilter> ComVividsolutionsJtsGeomGeometry_geometryChangedFilter_;
J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsGeomGeometry, geometryChangedFilter_, id<ComVividsolutionsJtsGeomGeometryComponentFilter>)

__attribute__((unused)) static jint ComVividsolutionsJtsGeomGeometry_getClassSortIndex(ComVividsolutionsJtsGeomGeometry *self);

__attribute__((unused)) static void ComVividsolutionsJtsGeomGeometry_initSortedClasses();

__attribute__((unused)) static ComVividsolutionsJtsGeomPoint *ComVividsolutionsJtsGeomGeometry_createPointFromInternalCoordWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *self, ComVividsolutionsJtsGeomCoordinate *coord, ComVividsolutionsJtsGeomGeometry *exemplar);

@interface ComVividsolutionsJtsGeomGeometry_$1 : NSObject < ComVividsolutionsJtsGeomGeometryComponentFilter >

- (void)filterWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComVividsolutionsJtsGeomGeometry_$1)

__attribute__((unused)) static void ComVividsolutionsJtsGeomGeometry_$1_init(ComVividsolutionsJtsGeomGeometry_$1 *self);

__attribute__((unused)) static ComVividsolutionsJtsGeomGeometry_$1 *new_ComVividsolutionsJtsGeomGeometry_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComVividsolutionsJtsGeomGeometry_$1)

J2OBJC_INITIALIZED_DEFN(ComVividsolutionsJtsGeomGeometry)

@implementation ComVividsolutionsJtsGeomGeometry

- (instancetype)initWithComVividsolutionsJtsGeomGeometryFactory:(ComVividsolutionsJtsGeomGeometryFactory *)factory {
  ComVividsolutionsJtsGeomGeometry_initWithComVividsolutionsJtsGeomGeometryFactory_(self, factory);
  return self;
}

- (NSString *)getGeometryType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (jboolean)hasNonEmptyElementsWithComVividsolutionsJtsGeomGeometryArray:(IOSObjectArray *)geometries {
  return ComVividsolutionsJtsGeomGeometry_hasNonEmptyElementsWithComVividsolutionsJtsGeomGeometryArray_(geometries);
}

+ (jboolean)hasNullElementsWithNSObjectArray:(IOSObjectArray *)array {
  return ComVividsolutionsJtsGeomGeometry_hasNullElementsWithNSObjectArray_(array);
}

- (jint)getSRID {
  return SRID_;
}

- (void)setSRIDWithInt:(jint)SRID {
  self->SRID_ = SRID;
}

- (ComVividsolutionsJtsGeomGeometryFactory *)getFactory {
  return factory_;
}

- (id)getUserData {
  return userData_;
}

- (jint)getNumGeometries {
  return 1;
}

- (ComVividsolutionsJtsGeomGeometry *)getGeometryNWithInt:(jint)n {
  return self;
}

- (void)setUserDataWithId:(id)userData {
  self->userData_ = userData;
}

- (ComVividsolutionsJtsGeomPrecisionModel *)getPrecisionModel {
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(factory_)) getPrecisionModel];
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getCoordinates {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getNumPoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isSimple {
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:self];
  ComVividsolutionsJtsOperationIsSimpleOp *op = new_ComVividsolutionsJtsOperationIsSimpleOp_initWithComVividsolutionsJtsGeomGeometry_(self);
  return [op isSimple];
}

- (jboolean)isValid {
  ComVividsolutionsJtsOperationValidIsValidOp *isValidOp = new_ComVividsolutionsJtsOperationValidIsValidOp_initWithComVividsolutionsJtsGeomGeometry_(self);
  return [isValidOp isValid];
}

- (jboolean)isEmpty {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)distanceWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return ComVividsolutionsJtsOperationDistanceDistanceOp_distanceWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, g);
}

- (jboolean)isWithinDistanceWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom
                                                      withDouble:(jdouble)distance {
  jdouble envDist = [((ComVividsolutionsJtsGeomEnvelope *) nil_chk([self getEnvelopeInternal])) distanceWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(geom)) getEnvelopeInternal]];
  if (envDist > distance) return NO;
  return ComVividsolutionsJtsOperationDistanceDistanceOp_isWithinDistanceWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withDouble_(self, geom, distance);
}

- (jboolean)isRectangle {
  return NO;
}

- (jdouble)getArea {
  return 0.0;
}

- (jdouble)getLength {
  return 0.0;
}

- (ComVividsolutionsJtsGeomPoint *)getCentroid {
  if ([self isEmpty]) {
    return nil;
  }
  ComVividsolutionsJtsGeomCoordinate *centPt = nil;
  jint dim = [self getDimension];
  if (dim == 0) {
    ComVividsolutionsJtsAlgorithmCentroidPoint *cent = new_ComVividsolutionsJtsAlgorithmCentroidPoint_init();
    [cent addWithComVividsolutionsJtsGeomGeometry:self];
    centPt = [cent getCentroid];
  }
  else if (dim == 1) {
    ComVividsolutionsJtsAlgorithmCentroidLine *cent = new_ComVividsolutionsJtsAlgorithmCentroidLine_init();
    [cent addWithComVividsolutionsJtsGeomGeometry:self];
    centPt = [cent getCentroid];
  }
  else {
    ComVividsolutionsJtsAlgorithmCentroidArea *cent = new_ComVividsolutionsJtsAlgorithmCentroidArea_init();
    [cent addWithComVividsolutionsJtsGeomGeometry:self];
    centPt = [cent getCentroid];
  }
  return ComVividsolutionsJtsGeomGeometry_createPointFromInternalCoordWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomGeometry_(self, centPt, self);
}

- (ComVividsolutionsJtsGeomPoint *)getInteriorPoint {
  ComVividsolutionsJtsGeomCoordinate *interiorPt = nil;
  jint dim = [self getDimension];
  if (dim == 0) {
    ComVividsolutionsJtsAlgorithmInteriorPointPoint *intPt = new_ComVividsolutionsJtsAlgorithmInteriorPointPoint_initWithComVividsolutionsJtsGeomGeometry_(self);
    interiorPt = [intPt getInteriorPoint];
  }
  else if (dim == 1) {
    ComVividsolutionsJtsAlgorithmInteriorPointLine *intPt = new_ComVividsolutionsJtsAlgorithmInteriorPointLine_initWithComVividsolutionsJtsGeomGeometry_(self);
    interiorPt = [intPt getInteriorPoint];
  }
  else {
    ComVividsolutionsJtsAlgorithmInteriorPointArea *intPt = new_ComVividsolutionsJtsAlgorithmInteriorPointArea_initWithComVividsolutionsJtsGeomGeometry_(self);
    interiorPt = [intPt getInteriorPoint];
  }
  return ComVividsolutionsJtsGeomGeometry_createPointFromInternalCoordWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomGeometry_(self, interiorPt, self);
}

- (jint)getDimension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComVividsolutionsJtsGeomGeometry *)getBoundary {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getBoundaryDimension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComVividsolutionsJtsGeomGeometry *)getEnvelope {
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) toGeometryWithComVividsolutionsJtsGeomEnvelope:[self getEnvelopeInternal]];
}

- (ComVividsolutionsJtsGeomEnvelope *)getEnvelopeInternal {
  if (envelope_ == nil) {
    envelope_ = [self computeEnvelopeInternal];
  }
  return envelope_;
}

- (void)geometryChanged {
  [self applyWithComVividsolutionsJtsGeomGeometryComponentFilter:ComVividsolutionsJtsGeomGeometry_geometryChangedFilter_];
}

- (void)geometryChangedAction {
  envelope_ = nil;
}

- (jboolean)disjointWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return ![self intersectsWithComVividsolutionsJtsGeomGeometry:g];
}

- (jboolean)touchesWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([self getEnvelopeInternal])) intersectsWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  return [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk([self relateWithComVividsolutionsJtsGeomGeometry:g])) isTouchesWithInt:[self getDimension] withInt:[g getDimension]];
}

- (jboolean)intersectsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([self getEnvelopeInternal])) intersectsWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  if ([self isRectangle]) {
    return ComVividsolutionsJtsOperationPredicateRectangleIntersects_intersectsWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomGeometry_((ComVividsolutionsJtsGeomPolygon *) check_class_cast(self, [ComVividsolutionsJtsGeomPolygon class]), g);
  }
  if ([g isRectangle]) {
    return ComVividsolutionsJtsOperationPredicateRectangleIntersects_intersectsWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomGeometry_((ComVividsolutionsJtsGeomPolygon *) check_class_cast(g, [ComVividsolutionsJtsGeomPolygon class]), self);
  }
  return [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk([self relateWithComVividsolutionsJtsGeomGeometry:g])) isIntersects];
}

- (jboolean)crossesWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([self getEnvelopeInternal])) intersectsWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  return [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk([self relateWithComVividsolutionsJtsGeomGeometry:g])) isCrossesWithInt:[self getDimension] withInt:[g getDimension]];
}

- (jboolean)withinWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) containsWithComVividsolutionsJtsGeomGeometry:self];
}

- (jboolean)containsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([self getEnvelopeInternal])) containsWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  if ([self isRectangle]) {
    return ComVividsolutionsJtsOperationPredicateRectangleContains_containsWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomGeometry_((ComVividsolutionsJtsGeomPolygon *) check_class_cast(self, [ComVividsolutionsJtsGeomPolygon class]), g);
  }
  return [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk([self relateWithComVividsolutionsJtsGeomGeometry:g])) isContains];
}

- (jboolean)overlapsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([self getEnvelopeInternal])) intersectsWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  return [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk([self relateWithComVividsolutionsJtsGeomGeometry:g])) isOverlapsWithInt:[self getDimension] withInt:[g getDimension]];
}

- (jboolean)coversWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([self getEnvelopeInternal])) coversWithComVividsolutionsJtsGeomEnvelope:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  if ([self isRectangle]) {
    return YES;
  }
  return [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk([self relateWithComVividsolutionsJtsGeomGeometry:g])) isCovers];
}

- (jboolean)coveredByWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) coversWithComVividsolutionsJtsGeomGeometry:self];
}

- (jboolean)relateWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g
                                          withNSString:(NSString *)intersectionPattern {
  return [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk([self relateWithComVividsolutionsJtsGeomGeometry:g])) matchesWithNSString:intersectionPattern];
}

- (ComVividsolutionsJtsGeomIntersectionMatrix *)relateWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:self];
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:g];
  return ComVividsolutionsJtsOperationRelateRelateOp_relateWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, g);
}

- (jboolean)equalsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk([self getEnvelopeInternal])) isEqual:[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getEnvelopeInternal]]) return NO;
  return [((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk([self relateWithComVividsolutionsJtsGeomGeometry:g])) isEqualsWithInt:[self getDimension] withInt:[g getDimension]];
}

- (NSString *)description {
  return [self toText];
}

- (NSString *)toText {
  return @"NOT IMPLEMENTED";
}

- (ComVividsolutionsJtsGeomGeometry *)bufferWithDouble:(jdouble)distance {
  return ComVividsolutionsJtsOperationBufferBufferOp_bufferOpWithComVividsolutionsJtsGeomGeometry_withDouble_(self, distance);
}

- (ComVividsolutionsJtsGeomGeometry *)bufferWithDouble:(jdouble)distance
                                               withInt:(jint)quadrantSegments {
  return ComVividsolutionsJtsOperationBufferBufferOp_bufferOpWithComVividsolutionsJtsGeomGeometry_withDouble_withInt_(self, distance, quadrantSegments);
}

- (ComVividsolutionsJtsGeomGeometry *)bufferWithDouble:(jdouble)distance
                                               withInt:(jint)quadrantSegments
                                               withInt:(jint)endCapStyle {
  return ComVividsolutionsJtsOperationBufferBufferOp_bufferOpWithComVividsolutionsJtsGeomGeometry_withDouble_withInt_withInt_(self, distance, quadrantSegments, endCapStyle);
}

- (ComVividsolutionsJtsGeomGeometry *)convexHull {
  return [(new_ComVividsolutionsJtsAlgorithmConvexHull_initWithComVividsolutionsJtsGeomGeometry_(self)) getConvexHull];
}

- (ComVividsolutionsJtsGeomGeometry *)reverse {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComVividsolutionsJtsGeomGeometry *)intersectionWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other {
  if ([self isEmpty]) return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createGeometryCollectionWithComVividsolutionsJtsGeomGeometryArray:nil];
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(other)) isEmpty]) return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createGeometryCollectionWithComVividsolutionsJtsGeomGeometryArray:nil];
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:self];
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:other];
  return ComVividsolutionsJtsOperationOverlaySnapSnapIfNeededOverlayOp_overlayOpWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withInt_(self, other, ComVividsolutionsJtsOperationOverlayOverlayOp_INTERSECTION);
}

- (ComVividsolutionsJtsGeomGeometry *)union__WithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other {
  if ([self isEmpty]) return (ComVividsolutionsJtsGeomGeometry *) check_class_cast([((ComVividsolutionsJtsGeomGeometry *) nil_chk(other)) clone], [ComVividsolutionsJtsGeomGeometry class]);
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(other)) isEmpty]) return (ComVividsolutionsJtsGeomGeometry *) check_class_cast([self clone], [ComVividsolutionsJtsGeomGeometry class]);
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:self];
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:other];
  return ComVividsolutionsJtsOperationOverlaySnapSnapIfNeededOverlayOp_overlayOpWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withInt_(self, other, ComVividsolutionsJtsOperationOverlayOverlayOp_UNION);
}

- (ComVividsolutionsJtsGeomGeometry *)differenceWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other {
  if ([self isEmpty]) return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createGeometryCollectionWithComVividsolutionsJtsGeomGeometryArray:nil];
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(other)) isEmpty]) return (ComVividsolutionsJtsGeomGeometry *) check_class_cast([self clone], [ComVividsolutionsJtsGeomGeometry class]);
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:self];
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:other];
  return ComVividsolutionsJtsOperationOverlaySnapSnapIfNeededOverlayOp_overlayOpWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withInt_(self, other, ComVividsolutionsJtsOperationOverlayOverlayOp_DIFFERENCE);
}

- (ComVividsolutionsJtsGeomGeometry *)symDifferenceWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other {
  if ([self isEmpty]) return (ComVividsolutionsJtsGeomGeometry *) check_class_cast([((ComVividsolutionsJtsGeomGeometry *) nil_chk(other)) clone], [ComVividsolutionsJtsGeomGeometry class]);
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(other)) isEmpty]) return (ComVividsolutionsJtsGeomGeometry *) check_class_cast([self clone], [ComVividsolutionsJtsGeomGeometry class]);
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:self];
  [self checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:other];
  return ComVividsolutionsJtsOperationOverlaySnapSnapIfNeededOverlayOp_overlayOpWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withInt_(self, other, ComVividsolutionsJtsOperationOverlayOverlayOp_SYMDIFFERENCE);
}

- (ComVividsolutionsJtsGeomGeometry *)union__ {
  return ComVividsolutionsJtsOperationUnionUnaryUnionOp_union__WithComVividsolutionsJtsGeomGeometry_(self);
}

- (jboolean)equalsExactWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other
                                                 withDouble:(jdouble)tolerance {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)equalsExactWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other {
  return [self equalsExactWithComVividsolutionsJtsGeomGeometry:other withDouble:0];
}

- (void)applyWithComVividsolutionsJtsGeomCoordinateFilter:(id<ComVividsolutionsJtsGeomCoordinateFilter>)filter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)applyWithComVividsolutionsJtsGeomCoordinateSequenceFilter:(id<ComVividsolutionsJtsGeomCoordinateSequenceFilter>)filter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)applyWithComVividsolutionsJtsGeomGeometryFilter:(id<ComVividsolutionsJtsGeomGeometryFilter>)filter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)applyWithComVividsolutionsJtsGeomGeometryComponentFilter:(id<ComVividsolutionsJtsGeomGeometryComponentFilter>)filter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)clone {
  return self;
}

- (void)normalize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)compareToWithId:(id)o {
  ComVividsolutionsJtsGeomGeometry *other = (ComVividsolutionsJtsGeomGeometry *) check_class_cast(o, [ComVividsolutionsJtsGeomGeometry class]);
  if (ComVividsolutionsJtsGeomGeometry_getClassSortIndex(self) != ComVividsolutionsJtsGeomGeometry_getClassSortIndex(nil_chk(other))) {
    return ComVividsolutionsJtsGeomGeometry_getClassSortIndex(self) - ComVividsolutionsJtsGeomGeometry_getClassSortIndex(other);
  }
  if ([self isEmpty] && [other isEmpty]) {
    return 0;
  }
  if ([self isEmpty]) {
    return -1;
  }
  if ([other isEmpty]) {
    return 1;
  }
  return [self compareToSameClassWithId:o];
}

- (jint)compareToWithId:(id)o
withComVividsolutionsJtsGeomCoordinateSequenceComparator:(ComVividsolutionsJtsGeomCoordinateSequenceComparator *)comp {
  ComVividsolutionsJtsGeomGeometry *other = (ComVividsolutionsJtsGeomGeometry *) check_class_cast(o, [ComVividsolutionsJtsGeomGeometry class]);
  if (ComVividsolutionsJtsGeomGeometry_getClassSortIndex(self) != ComVividsolutionsJtsGeomGeometry_getClassSortIndex(nil_chk(other))) {
    return ComVividsolutionsJtsGeomGeometry_getClassSortIndex(self) - ComVividsolutionsJtsGeomGeometry_getClassSortIndex(other);
  }
  if ([self isEmpty] && [other isEmpty]) {
    return 0;
  }
  if ([self isEmpty]) {
    return -1;
  }
  if ([other isEmpty]) {
    return 1;
  }
  return [self compareToSameClassWithId:o withComVividsolutionsJtsGeomCoordinateSequenceComparator:comp];
}

- (jboolean)isEquivalentClassWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other {
  return [((NSString *) nil_chk([[self getClass] getName])) isEqual:[[((ComVividsolutionsJtsGeomGeometry *) nil_chk(other)) getClass] getName]];
}

- (void)checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if ([((NSString *) nil_chk([[((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) getClass] getName])) isEqual:@"com.vividsolutions.jts.geom.GeometryCollection"]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"This method does not support GeometryCollection arguments");
  }
}

- (ComVividsolutionsJtsGeomEnvelope *)computeEnvelopeInternal {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)compareToSameClassWithId:(id)o {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)compareToSameClassWithId:(id)o
withComVividsolutionsJtsGeomCoordinateSequenceComparator:(ComVividsolutionsJtsGeomCoordinateSequenceComparator *)comp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)compareWithJavaUtilCollection:(id<JavaUtilCollection>)a
               withJavaUtilCollection:(id<JavaUtilCollection>)b {
  id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(a)) iterator];
  id<JavaUtilIterator> j = [((id<JavaUtilCollection>) nil_chk(b)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext] && [((id<JavaUtilIterator>) nil_chk(j)) hasNext]) {
    id<JavaLangComparable> aElement = (id<JavaLangComparable>) check_protocol_cast([i next], @protocol(JavaLangComparable));
    id<JavaLangComparable> bElement = (id<JavaLangComparable>) check_protocol_cast([((id<JavaUtilIterator>) nil_chk(j)) next], @protocol(JavaLangComparable));
    jint comparison = [((id<JavaLangComparable>) nil_chk(aElement)) compareToWithId:bElement];
    if (comparison != 0) {
      return comparison;
    }
  }
  if ([i hasNext]) {
    return 1;
  }
  if ([((id<JavaUtilIterator>) nil_chk(j)) hasNext]) {
    return -1;
  }
  return 0;
}

- (jboolean)equalWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)a
                 withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)b
                                             withDouble:(jdouble)tolerance {
  if (tolerance == 0) {
    return [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(a)) isEqual:b];
  }
  return [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(a)) distanceWithComVividsolutionsJtsGeomCoordinate:b] <= tolerance;
}

- (jint)getClassSortIndex {
  return ComVividsolutionsJtsGeomGeometry_getClassSortIndex(self);
}

+ (void)initSortedClasses {
  ComVividsolutionsJtsGeomGeometry_initSortedClasses();
}

- (ComVividsolutionsJtsGeomPoint *)createPointFromInternalCoordWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord
                                                                 withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)exemplar {
  return ComVividsolutionsJtsGeomGeometry_createPointFromInternalCoordWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomGeometry_(self, coord, exemplar);
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [ComVividsolutionsJtsGeomGeometry class]) {
    ComVividsolutionsJtsGeomGeometry_geometryChangedFilter_ = new_ComVividsolutionsJtsGeomGeometry_$1_init();
    J2OBJC_SET_INITIALIZED(ComVividsolutionsJtsGeomGeometry)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomGeometryFactory:", "Geometry", NULL, 0x1, NULL, NULL },
    { "getGeometryType", NULL, "Ljava.lang.String;", 0x401, NULL, NULL },
    { "hasNonEmptyElementsWithComVividsolutionsJtsGeomGeometryArray:", "hasNonEmptyElements", "Z", 0xc, NULL, NULL },
    { "hasNullElementsWithNSObjectArray:", "hasNullElements", "Z", 0xc, NULL, NULL },
    { "getSRID", NULL, "I", 0x1, NULL, NULL },
    { "setSRIDWithInt:", "setSRID", "V", 0x1, NULL, NULL },
    { "getFactory", NULL, "Lcom.vividsolutions.jts.geom.GeometryFactory;", 0x1, NULL, NULL },
    { "getUserData", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getNumGeometries", NULL, "I", 0x1, NULL, NULL },
    { "getGeometryNWithInt:", "getGeometryN", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "setUserDataWithId:", "setUserData", "V", 0x1, NULL, NULL },
    { "getPrecisionModel", NULL, "Lcom.vividsolutions.jts.geom.PrecisionModel;", 0x1, NULL, NULL },
    { "getCoordinate", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x401, NULL, NULL },
    { "getCoordinates", NULL, "[Lcom.vividsolutions.jts.geom.Coordinate;", 0x401, NULL, NULL },
    { "getNumPoints", NULL, "I", 0x401, NULL, NULL },
    { "isSimple", NULL, "Z", 0x1, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x401, NULL, NULL },
    { "distanceWithComVividsolutionsJtsGeomGeometry:", "distance", "D", 0x1, NULL, NULL },
    { "isWithinDistanceWithComVividsolutionsJtsGeomGeometry:withDouble:", "isWithinDistance", "Z", 0x1, NULL, NULL },
    { "isRectangle", NULL, "Z", 0x1, NULL, NULL },
    { "getArea", NULL, "D", 0x1, NULL, NULL },
    { "getLength", NULL, "D", 0x1, NULL, NULL },
    { "getCentroid", NULL, "Lcom.vividsolutions.jts.geom.Point;", 0x1, NULL, NULL },
    { "getInteriorPoint", NULL, "Lcom.vividsolutions.jts.geom.Point;", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x401, NULL, NULL },
    { "getBoundary", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x401, NULL, NULL },
    { "getBoundaryDimension", NULL, "I", 0x401, NULL, NULL },
    { "getEnvelope", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "getEnvelopeInternal", NULL, "Lcom.vividsolutions.jts.geom.Envelope;", 0x1, NULL, NULL },
    { "geometryChanged", NULL, "V", 0x1, NULL, NULL },
    { "geometryChangedAction", NULL, "V", 0x4, NULL, NULL },
    { "disjointWithComVividsolutionsJtsGeomGeometry:", "disjoint", "Z", 0x1, NULL, NULL },
    { "touchesWithComVividsolutionsJtsGeomGeometry:", "touches", "Z", 0x1, NULL, NULL },
    { "intersectsWithComVividsolutionsJtsGeomGeometry:", "intersects", "Z", 0x1, NULL, NULL },
    { "crossesWithComVividsolutionsJtsGeomGeometry:", "crosses", "Z", 0x1, NULL, NULL },
    { "withinWithComVividsolutionsJtsGeomGeometry:", "within", "Z", 0x1, NULL, NULL },
    { "containsWithComVividsolutionsJtsGeomGeometry:", "contains", "Z", 0x1, NULL, NULL },
    { "overlapsWithComVividsolutionsJtsGeomGeometry:", "overlaps", "Z", 0x1, NULL, NULL },
    { "coversWithComVividsolutionsJtsGeomGeometry:", "covers", "Z", 0x1, NULL, NULL },
    { "coveredByWithComVividsolutionsJtsGeomGeometry:", "coveredBy", "Z", 0x1, NULL, NULL },
    { "relateWithComVividsolutionsJtsGeomGeometry:withNSString:", "relate", "Z", 0x1, NULL, NULL },
    { "relateWithComVividsolutionsJtsGeomGeometry:", "relate", "Lcom.vividsolutions.jts.geom.IntersectionMatrix;", 0x1, NULL, NULL },
    { "equalsWithComVividsolutionsJtsGeomGeometry:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "bufferWithDouble:", "buffer", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "bufferWithDouble:withInt:", "buffer", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "bufferWithDouble:withInt:withInt:", "buffer", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "convexHull", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "reverse", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x401, NULL, NULL },
    { "intersectionWithComVividsolutionsJtsGeomGeometry:", "intersection", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "union__WithComVividsolutionsJtsGeomGeometry:", "union", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "differenceWithComVividsolutionsJtsGeomGeometry:", "difference", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "symDifferenceWithComVividsolutionsJtsGeomGeometry:", "symDifference", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "union__", "union", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "equalsExactWithComVividsolutionsJtsGeomGeometry:withDouble:", "equalsExact", "Z", 0x401, NULL, NULL },
    { "equalsExactWithComVividsolutionsJtsGeomGeometry:", "equalsExact", "Z", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomCoordinateFilter:", "apply", "V", 0x401, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomCoordinateSequenceFilter:", "apply", "V", 0x401, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomGeometryFilter:", "apply", "V", 0x401, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomGeometryComponentFilter:", "apply", "V", 0x401, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "normalize", NULL, "V", 0x401, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "compareToWithId:withComVividsolutionsJtsGeomCoordinateSequenceComparator:", "compareTo", "I", 0x1, NULL, NULL },
    { "isEquivalentClassWithComVividsolutionsJtsGeomGeometry:", "isEquivalentClass", "Z", 0x4, NULL, NULL },
    { "checkNotGeometryCollectionWithComVividsolutionsJtsGeomGeometry:", "checkNotGeometryCollection", "V", 0x4, NULL, NULL },
    { "computeEnvelopeInternal", NULL, "Lcom.vividsolutions.jts.geom.Envelope;", 0x404, NULL, NULL },
    { "compareToSameClassWithId:", "compareToSameClass", "I", 0x404, NULL, NULL },
    { "compareToSameClassWithId:withComVividsolutionsJtsGeomCoordinateSequenceComparator:", "compareToSameClass", "I", 0x404, NULL, NULL },
    { "compareWithJavaUtilCollection:withJavaUtilCollection:", "compare", "I", 0x4, NULL, NULL },
    { "equalWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withDouble:", "equal", "Z", 0x4, NULL, NULL },
    { "getClassSortIndex", NULL, "I", 0x2, NULL, NULL },
    { "initSortedClasses", NULL, "V", 0xa, NULL, NULL },
    { "createPointFromInternalCoordWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomGeometry:", "createPointFromInternalCoord", "Lcom.vividsolutions.jts.geom.Point;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = ComVividsolutionsJtsGeomGeometry_serialVersionUID },
    { "sortedClasses_", NULL, 0xa, "[Ljava.lang.Class;", &ComVividsolutionsJtsGeomGeometry_sortedClasses_, NULL,  },
    { "geometryChangedFilter_", NULL, 0x1a, "Lcom.vividsolutions.jts.geom.GeometryComponentFilter;", &ComVividsolutionsJtsGeomGeometry_geometryChangedFilter_, NULL,  },
    { "envelope_", NULL, 0x4, "Lcom.vividsolutions.jts.geom.Envelope;", NULL, NULL,  },
    { "factory_", NULL, 0x14, "Lcom.vividsolutions.jts.geom.GeometryFactory;", NULL, NULL,  },
    { "SRID_", NULL, 0x4, "I", NULL, NULL,  },
    { "userData_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomGeometry = { 2, "Geometry", "com.vividsolutions.jts.geom", NULL, 0x401, 76, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomGeometry;
}

@end

void ComVividsolutionsJtsGeomGeometry_initWithComVividsolutionsJtsGeomGeometryFactory_(ComVividsolutionsJtsGeomGeometry *self, ComVividsolutionsJtsGeomGeometryFactory *factory) {
  (void) NSObject_init(self);
  self->userData_ = nil;
  self->factory_ = factory;
  self->SRID_ = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(factory)) getSRID];
}

jboolean ComVividsolutionsJtsGeomGeometry_hasNonEmptyElementsWithComVividsolutionsJtsGeomGeometryArray_(IOSObjectArray *geometries) {
  ComVividsolutionsJtsGeomGeometry_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geometries))->size_; i++) {
    if (![((ComVividsolutionsJtsGeomGeometry *) nil_chk(IOSObjectArray_Get(geometries, i))) isEmpty]) {
      return YES;
    }
  }
  return NO;
}

jboolean ComVividsolutionsJtsGeomGeometry_hasNullElementsWithNSObjectArray_(IOSObjectArray *array) {
  ComVividsolutionsJtsGeomGeometry_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(array))->size_; i++) {
    if (IOSObjectArray_Get(array, i) == nil) {
      return YES;
    }
  }
  return NO;
}

jint ComVividsolutionsJtsGeomGeometry_getClassSortIndex(ComVividsolutionsJtsGeomGeometry *self) {
  if (ComVividsolutionsJtsGeomGeometry_sortedClasses_ == nil) ComVividsolutionsJtsGeomGeometry_initSortedClasses();
  if ([self isKindOfClass:[ComVividsolutionsJtsGeomPoint class]]) {
    return 0;
  }
  else if ([self isKindOfClass:[ComVividsolutionsJtsGeomMultiPoint class]]) {
    return 1;
  }
  else if ([self isKindOfClass:[ComVividsolutionsJtsGeomLineString class]]) {
    return 2;
  }
  else if ([self isKindOfClass:[ComVividsolutionsJtsGeomLinearRing class]]) {
    return 3;
  }
  else if ([self isKindOfClass:[ComVividsolutionsJtsGeomMultiLineString class]]) {
    return 4;
  }
  else if ([self isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]]) {
    return 5;
  }
  else if ([self isKindOfClass:[ComVividsolutionsJtsGeomMultiPolygon class]]) {
    return 6;
  }
  else if ([self isKindOfClass:[ComVividsolutionsJtsGeomGeometryCollection class]]) {
    return 7;
  }
  return -1;
}

void ComVividsolutionsJtsGeomGeometry_initSortedClasses() {
  ComVividsolutionsJtsGeomGeometry_initialize();
  ComVividsolutionsJtsGeomGeometry_sortedClasses_ = [IOSObjectArray newArrayWithObjects:(id[]){ ComVividsolutionsJtsGeomPoint_class_(), ComVividsolutionsJtsGeomMultiPoint_class_(), ComVividsolutionsJtsGeomLineString_class_(), ComVividsolutionsJtsGeomLinearRing_class_(), ComVividsolutionsJtsGeomMultiLineString_class_(), ComVividsolutionsJtsGeomPolygon_class_(), ComVividsolutionsJtsGeomMultiPolygon_class_(), ComVividsolutionsJtsGeomGeometryCollection_class_() } count:8 type:IOSClass_class_()];
}

ComVividsolutionsJtsGeomPoint *ComVividsolutionsJtsGeomGeometry_createPointFromInternalCoordWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *self, ComVividsolutionsJtsGeomCoordinate *coord, ComVividsolutionsJtsGeomGeometry *exemplar) {
  [((ComVividsolutionsJtsGeomPrecisionModel *) nil_chk([((ComVividsolutionsJtsGeomGeometry *) nil_chk(exemplar)) getPrecisionModel])) makePreciseWithComVividsolutionsJtsGeomCoordinate:coord];
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([exemplar getFactory])) createPointWithComVividsolutionsJtsGeomCoordinate:coord];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomGeometry)

@implementation ComVividsolutionsJtsGeomGeometry_$1

- (void)filterWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom {
  [((ComVividsolutionsJtsGeomGeometry *) nil_chk(geom)) geometryChangedAction];
}

- (instancetype)init {
  ComVividsolutionsJtsGeomGeometry_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "filterWithComVividsolutionsJtsGeomGeometry:", "filter", "V", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomGeometry_$1 = { 2, "", "com.vividsolutions.jts.geom", "Geometry", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomGeometry_$1;
}

@end

void ComVividsolutionsJtsGeomGeometry_$1_init(ComVividsolutionsJtsGeomGeometry_$1 *self) {
  (void) NSObject_init(self);
}

ComVividsolutionsJtsGeomGeometry_$1 *new_ComVividsolutionsJtsGeomGeometry_$1_init() {
  ComVividsolutionsJtsGeomGeometry_$1 *self = [ComVividsolutionsJtsGeomGeometry_$1 alloc];
  ComVividsolutionsJtsGeomGeometry_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomGeometry_$1)
