//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/geom/Dimension.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Dimension.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"

@implementation ComVividsolutionsJtsGeomDimension

+ (jchar)toDimensionSymbolWithInt:(jint)dimensionValue {
  return ComVividsolutionsJtsGeomDimension_toDimensionSymbolWithInt_(dimensionValue);
}

+ (jint)toDimensionValueWithChar:(jchar)dimensionSymbol {
  return ComVividsolutionsJtsGeomDimension_toDimensionValueWithChar_(dimensionSymbol);
}

- (instancetype)init {
  ComVividsolutionsJtsGeomDimension_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toDimensionSymbolWithInt:", "toDimensionSymbol", "C", 0x9, NULL, NULL },
    { "toDimensionValueWithChar:", "toDimensionValue", "I", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsGeomDimension_P },
    { "L_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsGeomDimension_L },
    { "A_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsGeomDimension_A },
    { "FALSE__", "FALSE", 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsGeomDimension_FALSE },
    { "TRUE__", "TRUE", 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsGeomDimension_TRUE },
    { "DONTCARE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsGeomDimension_DONTCARE },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomDimension = { 2, "Dimension", "com.vividsolutions.jts.geom", NULL, 0x1, 3, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomDimension;
}

@end

jchar ComVividsolutionsJtsGeomDimension_toDimensionSymbolWithInt_(jint dimensionValue) {
  ComVividsolutionsJtsGeomDimension_initialize();
  switch (dimensionValue) {
    case ComVividsolutionsJtsGeomDimension_FALSE:
    return 'F';
    case ComVividsolutionsJtsGeomDimension_TRUE:
    return 'T';
    case ComVividsolutionsJtsGeomDimension_DONTCARE:
    return '*';
    case ComVividsolutionsJtsGeomDimension_P:
    return '0';
    case ComVividsolutionsJtsGeomDimension_L:
    return '1';
    case ComVividsolutionsJtsGeomDimension_A:
    return '2';
  }
  @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown dimension value: ", dimensionValue)) autorelease];
}

jint ComVividsolutionsJtsGeomDimension_toDimensionValueWithChar_(jchar dimensionSymbol) {
  ComVividsolutionsJtsGeomDimension_initialize();
  switch (JavaLangCharacter_toUpperCaseWithChar_(dimensionSymbol)) {
    case 'F':
    return ComVividsolutionsJtsGeomDimension_FALSE;
    case 'T':
    return ComVividsolutionsJtsGeomDimension_TRUE;
    case '*':
    return ComVividsolutionsJtsGeomDimension_DONTCARE;
    case '0':
    return ComVividsolutionsJtsGeomDimension_P;
    case '1':
    return ComVividsolutionsJtsGeomDimension_L;
    case '2':
    return ComVividsolutionsJtsGeomDimension_A;
  }
  @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C", @"Unknown dimension symbol: ", dimensionSymbol)) autorelease];
}

void ComVividsolutionsJtsGeomDimension_init(ComVividsolutionsJtsGeomDimension *self) {
  NSObject_init(self);
}

ComVividsolutionsJtsGeomDimension *new_ComVividsolutionsJtsGeomDimension_init() {
  ComVividsolutionsJtsGeomDimension *self = [ComVividsolutionsJtsGeomDimension alloc];
  ComVividsolutionsJtsGeomDimension_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomDimension)
