//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/geom/Polygon.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/CGAlgorithms.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateArrays.h"
#include "com/vividsolutions/jts/geom/CoordinateFilter.h"
#include "com/vividsolutions/jts/geom/CoordinateSequence.h"
#include "com/vividsolutions/jts/geom/CoordinateSequenceComparator.h"
#include "com/vividsolutions/jts/geom/CoordinateSequenceFilter.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryComponentFilter.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/GeometryFilter.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geom/PrecisionModel.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

#define ComVividsolutionsJtsGeomPolygon_serialVersionUID -3494792200821764533LL

@interface ComVividsolutionsJtsGeomPolygon ()

- (void)normalizeWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)ring
                                            withBoolean:(jboolean)clockwise;

@end

J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsGeomPolygon, serialVersionUID, jlong)

__attribute__((unused)) static void ComVividsolutionsJtsGeomPolygon_normalizeWithComVividsolutionsJtsGeomLinearRing_withBoolean_(ComVividsolutionsJtsGeomPolygon *self, ComVividsolutionsJtsGeomLinearRing *ring, jboolean clockwise);

@implementation ComVividsolutionsJtsGeomPolygon

- (instancetype)initWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)shell
                withComVividsolutionsJtsGeomPrecisionModel:(ComVividsolutionsJtsGeomPrecisionModel *)precisionModel
                                                   withInt:(jint)SRID {
  ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomPrecisionModel_withInt_(self, shell, precisionModel, SRID);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)shell
               withComVividsolutionsJtsGeomLinearRingArray:(IOSObjectArray *)holes
                withComVividsolutionsJtsGeomPrecisionModel:(ComVividsolutionsJtsGeomPrecisionModel *)precisionModel
                                                   withInt:(jint)SRID {
  ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(self, shell, holes, precisionModel, SRID);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)shell
               withComVividsolutionsJtsGeomLinearRingArray:(IOSObjectArray *)holes
               withComVividsolutionsJtsGeomGeometryFactory:(ComVividsolutionsJtsGeomGeometryFactory *)factory {
  ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(self, shell, holes, factory);
  return self;
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinate {
  return [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) getCoordinate];
}

- (IOSObjectArray *)getCoordinates {
  if ([self isEmpty]) {
    return [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:ComVividsolutionsJtsGeomCoordinate_class_()];
  }
  IOSObjectArray *coordinates = [IOSObjectArray newArrayWithLength:[self getNumPoints] type:ComVividsolutionsJtsGeomCoordinate_class_()];
  jint k = -1;
  IOSObjectArray *shellCoordinates = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) getCoordinates];
  for (jint x = 0; x < ((IOSObjectArray *) nil_chk(shellCoordinates))->size_; x++) {
    k++;
    (void) IOSObjectArray_Set(coordinates, k, IOSObjectArray_Get(shellCoordinates, x));
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(holes_))->size_; i++) {
    IOSObjectArray *childCoordinates = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) getCoordinates];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(childCoordinates))->size_; j++) {
      k++;
      (void) IOSObjectArray_Set(coordinates, k, IOSObjectArray_Get(childCoordinates, j));
    }
  }
  return coordinates;
}

- (jint)getNumPoints {
  jint numPoints = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) getNumPoints];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(holes_))->size_; i++) {
    numPoints += [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) getNumPoints];
  }
  return numPoints;
}

- (jint)getDimension {
  return 2;
}

- (jint)getBoundaryDimension {
  return 1;
}

- (jboolean)isEmpty {
  return [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) isEmpty];
}

- (jboolean)isSimple {
  return YES;
}

- (jboolean)isRectangle {
  if ([self getNumInteriorRing] != 0) return NO;
  if (shell_ == nil) return NO;
  if ([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) getNumPoints] != 5) return NO;
  id<ComVividsolutionsJtsGeomCoordinateSequence> seq = [shell_ getCoordinateSequence];
  ComVividsolutionsJtsGeomEnvelope *env = [self getEnvelopeInternal];
  for (jint i = 0; i < 5; i++) {
    jdouble x = [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(seq)) getXWithInt:i];
    if (!(x == [((ComVividsolutionsJtsGeomEnvelope *) nil_chk(env)) getMinX] || x == [env getMaxX])) return NO;
    jdouble y = [seq getYWithInt:i];
    if (!(y == [env getMinY] || y == [env getMaxY])) return NO;
  }
  jdouble prevX = [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(seq)) getXWithInt:0];
  jdouble prevY = [seq getYWithInt:0];
  for (jint i = 1; i <= 4; i++) {
    jdouble x = [seq getXWithInt:i];
    jdouble y = [seq getYWithInt:i];
    jboolean xChanged = x != prevX;
    jboolean yChanged = y != prevY;
    if (xChanged == yChanged) return NO;
    prevX = x;
    prevY = y;
  }
  return YES;
}

- (ComVividsolutionsJtsGeomLineString *)getExteriorRing {
  return shell_;
}

- (jint)getNumInteriorRing {
  return ((IOSObjectArray *) nil_chk(holes_))->size_;
}

- (ComVividsolutionsJtsGeomLineString *)getInteriorRingNWithInt:(jint)n {
  return IOSObjectArray_Get(nil_chk(holes_), n);
}

- (NSString *)getGeometryType {
  return @"Polygon";
}

- (jdouble)getArea {
  jdouble area = 0.0;
  area += JavaLangMath_absWithDouble_(ComVividsolutionsJtsAlgorithmCGAlgorithms_signedAreaWithComVividsolutionsJtsGeomCoordinateArray_([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) getCoordinates]));
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(holes_))->size_; i++) {
    area -= JavaLangMath_absWithDouble_(ComVividsolutionsJtsAlgorithmCGAlgorithms_signedAreaWithComVividsolutionsJtsGeomCoordinateArray_([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) getCoordinates]));
  }
  return area;
}

- (jdouble)getLength {
  jdouble len = 0.0;
  len += [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) getLength];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(holes_))->size_; i++) {
    len += [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) getLength];
  }
  return len;
}

- (ComVividsolutionsJtsGeomGeometry *)getBoundary {
  if ([self isEmpty]) {
    return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createMultiLineStringWithComVividsolutionsJtsGeomLineStringArray:nil];
  }
  IOSObjectArray *rings = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(holes_))->size_ + 1 type:ComVividsolutionsJtsGeomLinearRing_class_()];
  (void) IOSObjectArray_Set(rings, 0, shell_);
  for (jint i = 0; i < holes_->size_; i++) {
    (void) IOSObjectArray_Set(rings, i + 1, IOSObjectArray_Get(holes_, i));
  }
  if (rings->size_ <= 1) return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createLinearRingWithComVividsolutionsJtsGeomCoordinateSequence:[((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(rings, 0))) getCoordinateSequence]];
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createMultiLineStringWithComVividsolutionsJtsGeomLineStringArray:rings];
}

- (ComVividsolutionsJtsGeomEnvelope *)computeEnvelopeInternal {
  return [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) getEnvelopeInternal];
}

- (jboolean)equalsExactWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other
                                                 withDouble:(jdouble)tolerance {
  if (![self isEquivalentClassWithComVividsolutionsJtsGeomGeometry:other]) {
    return NO;
  }
  ComVividsolutionsJtsGeomPolygon *otherPolygon = (ComVividsolutionsJtsGeomPolygon *) check_class_cast(other, [ComVividsolutionsJtsGeomPolygon class]);
  ComVividsolutionsJtsGeomGeometry *thisShell = shell_;
  ComVividsolutionsJtsGeomGeometry *otherPolygonShell = ((ComVividsolutionsJtsGeomPolygon *) nil_chk(otherPolygon))->shell_;
  if (![((ComVividsolutionsJtsGeomGeometry *) nil_chk(thisShell)) equalsExactWithComVividsolutionsJtsGeomGeometry:otherPolygonShell withDouble:tolerance]) {
    return NO;
  }
  if (((IOSObjectArray *) nil_chk(holes_))->size_ != otherPolygon->holes_->size_) {
    return NO;
  }
  if (holes_->size_ != otherPolygon->holes_->size_) {
    return NO;
  }
  for (jint i = 0; i < holes_->size_; i++) {
    if (![((ComVividsolutionsJtsGeomGeometry *) nil_chk((IOSObjectArray_Get(holes_, i)))) equalsExactWithComVividsolutionsJtsGeomGeometry:IOSObjectArray_Get(otherPolygon->holes_, i) withDouble:tolerance]) {
      return NO;
    }
  }
  return YES;
}

- (void)applyWithComVividsolutionsJtsGeomCoordinateFilter:(id<ComVividsolutionsJtsGeomCoordinateFilter>)filter {
  [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) applyWithComVividsolutionsJtsGeomCoordinateFilter:filter];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(holes_))->size_; i++) {
    [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) applyWithComVividsolutionsJtsGeomCoordinateFilter:filter];
  }
}

- (void)applyWithComVividsolutionsJtsGeomCoordinateSequenceFilter:(id<ComVividsolutionsJtsGeomCoordinateSequenceFilter>)filter {
  [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) applyWithComVividsolutionsJtsGeomCoordinateSequenceFilter:filter];
  if (![((id<ComVividsolutionsJtsGeomCoordinateSequenceFilter>) nil_chk(filter)) isDone]) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(holes_))->size_; i++) {
      [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) applyWithComVividsolutionsJtsGeomCoordinateSequenceFilter:filter];
      if ([filter isDone]) break;
    }
  }
  if ([filter isGeometryChanged]) [self geometryChanged];
}

- (void)applyWithComVividsolutionsJtsGeomGeometryFilter:(id<ComVividsolutionsJtsGeomGeometryFilter>)filter {
  [((id<ComVividsolutionsJtsGeomGeometryFilter>) nil_chk(filter)) filterWithComVividsolutionsJtsGeomGeometry:self];
}

- (void)applyWithComVividsolutionsJtsGeomGeometryComponentFilter:(id<ComVividsolutionsJtsGeomGeometryComponentFilter>)filter {
  [((id<ComVividsolutionsJtsGeomGeometryComponentFilter>) nil_chk(filter)) filterWithComVividsolutionsJtsGeomGeometry:self];
  [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) applyWithComVividsolutionsJtsGeomGeometryComponentFilter:filter];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(holes_))->size_; i++) {
    [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) applyWithComVividsolutionsJtsGeomGeometryComponentFilter:filter];
  }
}

- (id)clone {
  ComVividsolutionsJtsGeomPolygon *poly = (ComVividsolutionsJtsGeomPolygon *) check_class_cast([super clone], [ComVividsolutionsJtsGeomPolygon class]);
  ((ComVividsolutionsJtsGeomPolygon *) nil_chk(poly))->shell_ = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) clone], [ComVividsolutionsJtsGeomLinearRing class]);
  poly->holes_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(holes_))->size_ type:ComVividsolutionsJtsGeomLinearRing_class_()];
  for (jint i = 0; i < holes_->size_; i++) {
    (void) IOSObjectArray_Set(poly->holes_, i, (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) clone], [ComVividsolutionsJtsGeomLinearRing class]));
  }
  return poly;
}

- (ComVividsolutionsJtsGeomGeometry *)convexHull {
  return [((ComVividsolutionsJtsGeomLineString *) nil_chk([self getExteriorRing])) convexHull];
}

- (void)normalize {
  ComVividsolutionsJtsGeomPolygon_normalizeWithComVividsolutionsJtsGeomLinearRing_withBoolean_(self, shell_, YES);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(holes_))->size_; i++) {
    ComVividsolutionsJtsGeomPolygon_normalizeWithComVividsolutionsJtsGeomLinearRing_withBoolean_(self, IOSObjectArray_Get(holes_, i), NO);
  }
  JavaUtilArrays_sortWithNSObjectArray_(holes_);
}

- (jint)compareToSameClassWithId:(id)o {
  ComVividsolutionsJtsGeomLinearRing *thisShell = shell_;
  ComVividsolutionsJtsGeomLinearRing *otherShell = ((ComVividsolutionsJtsGeomPolygon *) nil_chk(((ComVividsolutionsJtsGeomPolygon *) check_class_cast(o, [ComVividsolutionsJtsGeomPolygon class]))))->shell_;
  return [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(thisShell)) compareToSameClassWithId:otherShell];
}

- (jint)compareToSameClassWithId:(id)o
withComVividsolutionsJtsGeomCoordinateSequenceComparator:(ComVividsolutionsJtsGeomCoordinateSequenceComparator *)comp {
  ComVividsolutionsJtsGeomPolygon *poly = (ComVividsolutionsJtsGeomPolygon *) check_class_cast(o, [ComVividsolutionsJtsGeomPolygon class]);
  ComVividsolutionsJtsGeomLinearRing *thisShell = shell_;
  ComVividsolutionsJtsGeomLinearRing *otherShell = ((ComVividsolutionsJtsGeomPolygon *) nil_chk(poly))->shell_;
  jint shellComp = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(thisShell)) compareToSameClassWithId:otherShell withComVividsolutionsJtsGeomCoordinateSequenceComparator:comp];
  if (shellComp != 0) return shellComp;
  jint nHole1 = [self getNumInteriorRing];
  jint nHole2 = [poly getNumInteriorRing];
  jint i = 0;
  while (i < nHole1 && i < nHole2) {
    ComVividsolutionsJtsGeomLinearRing *thisHole = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([self getInteriorRingNWithInt:i], [ComVividsolutionsJtsGeomLinearRing class]);
    ComVividsolutionsJtsGeomLinearRing *otherHole = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([poly getInteriorRingNWithInt:i], [ComVividsolutionsJtsGeomLinearRing class]);
    jint holeComp = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(thisHole)) compareToSameClassWithId:otherHole withComVividsolutionsJtsGeomCoordinateSequenceComparator:comp];
    if (holeComp != 0) return holeComp;
    i++;
  }
  if (i < nHole1) return 1;
  if (i < nHole2) return -1;
  return 0;
}

- (void)normalizeWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)ring
                                            withBoolean:(jboolean)clockwise {
  ComVividsolutionsJtsGeomPolygon_normalizeWithComVividsolutionsJtsGeomLinearRing_withBoolean_(self, ring, clockwise);
}

- (ComVividsolutionsJtsGeomGeometry *)reverse {
  ComVividsolutionsJtsGeomPolygon *poly = (ComVividsolutionsJtsGeomPolygon *) check_class_cast([super clone], [ComVividsolutionsJtsGeomPolygon class]);
  ((ComVividsolutionsJtsGeomPolygon *) nil_chk(poly))->shell_ = (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(((ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell_)) clone], [ComVividsolutionsJtsGeomLinearRing class])))) reverse], [ComVividsolutionsJtsGeomLinearRing class]);
  poly->holes_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(holes_))->size_ type:ComVividsolutionsJtsGeomLinearRing_class_()];
  for (jint i = 0; i < holes_->size_; i++) {
    (void) IOSObjectArray_Set(poly->holes_, i, (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(((ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(IOSObjectArray_Get(holes_, i))) clone], [ComVividsolutionsJtsGeomLinearRing class])))) reverse], [ComVividsolutionsJtsGeomLinearRing class]));
  }
  return poly;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomLinearRing:withComVividsolutionsJtsGeomPrecisionModel:withInt:", "Polygon", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomLinearRing:withComVividsolutionsJtsGeomLinearRingArray:withComVividsolutionsJtsGeomPrecisionModel:withInt:", "Polygon", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomLinearRing:withComVividsolutionsJtsGeomLinearRingArray:withComVividsolutionsJtsGeomGeometryFactory:", "Polygon", NULL, 0x1, NULL, NULL },
    { "getCoordinate", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getCoordinates", NULL, "[Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getNumPoints", NULL, "I", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "getBoundaryDimension", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "isSimple", NULL, "Z", 0x1, NULL, NULL },
    { "isRectangle", NULL, "Z", 0x1, NULL, NULL },
    { "getExteriorRing", NULL, "Lcom.vividsolutions.jts.geom.LineString;", 0x1, NULL, NULL },
    { "getNumInteriorRing", NULL, "I", 0x1, NULL, NULL },
    { "getInteriorRingNWithInt:", "getInteriorRingN", "Lcom.vividsolutions.jts.geom.LineString;", 0x1, NULL, NULL },
    { "getGeometryType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getArea", NULL, "D", 0x1, NULL, NULL },
    { "getLength", NULL, "D", 0x1, NULL, NULL },
    { "getBoundary", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "computeEnvelopeInternal", NULL, "Lcom.vividsolutions.jts.geom.Envelope;", 0x4, NULL, NULL },
    { "equalsExactWithComVividsolutionsJtsGeomGeometry:withDouble:", "equalsExact", "Z", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomCoordinateFilter:", "apply", "V", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomCoordinateSequenceFilter:", "apply", "V", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomGeometryFilter:", "apply", "V", 0x1, NULL, NULL },
    { "applyWithComVividsolutionsJtsGeomGeometryComponentFilter:", "apply", "V", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "convexHull", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "normalize", NULL, "V", 0x1, NULL, NULL },
    { "compareToSameClassWithId:", "compareToSameClass", "I", 0x4, NULL, NULL },
    { "compareToSameClassWithId:withComVividsolutionsJtsGeomCoordinateSequenceComparator:", "compareToSameClass", "I", 0x4, NULL, NULL },
    { "normalizeWithComVividsolutionsJtsGeomLinearRing:withBoolean:", "normalize", "V", 0x2, NULL, NULL },
    { "reverse", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = ComVividsolutionsJtsGeomPolygon_serialVersionUID },
    { "shell_", NULL, 0x4, "Lcom.vividsolutions.jts.geom.LinearRing;", NULL, NULL,  },
    { "holes_", NULL, 0x4, "[Lcom.vividsolutions.jts.geom.LinearRing;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomPolygon = { 2, "Polygon", "com.vividsolutions.jts.geom", NULL, 0x1, 31, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomPolygon;
}

@end

void ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomPrecisionModel_withInt_(ComVividsolutionsJtsGeomPolygon *self, ComVividsolutionsJtsGeomLinearRing *shell, ComVividsolutionsJtsGeomPrecisionModel *precisionModel, jint SRID) {
  (void) ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(self, shell, [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:ComVividsolutionsJtsGeomLinearRing_class_()], new_ComVividsolutionsJtsGeomGeometryFactory_initWithComVividsolutionsJtsGeomPrecisionModel_withInt_(precisionModel, SRID));
}

ComVividsolutionsJtsGeomPolygon *new_ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomPrecisionModel_withInt_(ComVividsolutionsJtsGeomLinearRing *shell, ComVividsolutionsJtsGeomPrecisionModel *precisionModel, jint SRID) {
  ComVividsolutionsJtsGeomPolygon *self = [ComVividsolutionsJtsGeomPolygon alloc];
  ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomPrecisionModel_withInt_(self, shell, precisionModel, SRID);
  return self;
}

void ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(ComVividsolutionsJtsGeomPolygon *self, ComVividsolutionsJtsGeomLinearRing *shell, IOSObjectArray *holes, ComVividsolutionsJtsGeomPrecisionModel *precisionModel, jint SRID) {
  (void) ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(self, shell, holes, new_ComVividsolutionsJtsGeomGeometryFactory_initWithComVividsolutionsJtsGeomPrecisionModel_withInt_(precisionModel, SRID));
}

ComVividsolutionsJtsGeomPolygon *new_ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(ComVividsolutionsJtsGeomLinearRing *shell, IOSObjectArray *holes, ComVividsolutionsJtsGeomPrecisionModel *precisionModel, jint SRID) {
  ComVividsolutionsJtsGeomPolygon *self = [ComVividsolutionsJtsGeomPolygon alloc];
  ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(self, shell, holes, precisionModel, SRID);
  return self;
}

void ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(ComVividsolutionsJtsGeomPolygon *self, ComVividsolutionsJtsGeomLinearRing *shell, IOSObjectArray *holes, ComVividsolutionsJtsGeomGeometryFactory *factory) {
  (void) ComVividsolutionsJtsGeomGeometry_initWithComVividsolutionsJtsGeomGeometryFactory_(self, factory);
  self->shell_ = nil;
  if (shell == nil) {
    shell = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createLinearRingWithComVividsolutionsJtsGeomCoordinateSequence:nil];
  }
  if (holes == nil) {
    holes = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:ComVividsolutionsJtsGeomLinearRing_class_()];
  }
  if (ComVividsolutionsJtsGeomGeometry_hasNullElementsWithNSObjectArray_(holes)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"holes must not contain null elements");
  }
  if ([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell)) isEmpty] && ComVividsolutionsJtsGeomGeometry_hasNonEmptyElementsWithComVividsolutionsJtsGeomGeometryArray_(holes)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"shell is empty but holes are not");
  }
  self->shell_ = shell;
  self->holes_ = holes;
}

ComVividsolutionsJtsGeomPolygon *new_ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(ComVividsolutionsJtsGeomLinearRing *shell, IOSObjectArray *holes, ComVividsolutionsJtsGeomGeometryFactory *factory) {
  ComVividsolutionsJtsGeomPolygon *self = [ComVividsolutionsJtsGeomPolygon alloc];
  ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(self, shell, holes, factory);
  return self;
}

void ComVividsolutionsJtsGeomPolygon_normalizeWithComVividsolutionsJtsGeomLinearRing_withBoolean_(ComVividsolutionsJtsGeomPolygon *self, ComVividsolutionsJtsGeomLinearRing *ring, jboolean clockwise) {
  if ([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(ring)) isEmpty]) {
    return;
  }
  IOSObjectArray *uniqueCoordinates = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk([ring getCoordinates]))->size_ - 1 type:ComVividsolutionsJtsGeomCoordinate_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([ring getCoordinates], 0, uniqueCoordinates, 0, uniqueCoordinates->size_);
  ComVividsolutionsJtsGeomCoordinate *minCoordinate = ComVividsolutionsJtsGeomCoordinateArrays_minCoordinateWithComVividsolutionsJtsGeomCoordinateArray_([ring getCoordinates]);
  ComVividsolutionsJtsGeomCoordinateArrays_scrollWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomCoordinate_(uniqueCoordinates, minCoordinate);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(uniqueCoordinates, 0, [ring getCoordinates], 0, uniqueCoordinates->size_);
  (void) IOSObjectArray_Set(nil_chk([ring getCoordinates]), uniqueCoordinates->size_, IOSObjectArray_Get(uniqueCoordinates, 0));
  if (ComVividsolutionsJtsAlgorithmCGAlgorithms_isCCWWithComVividsolutionsJtsGeomCoordinateArray_([ring getCoordinates]) == clockwise) {
    ComVividsolutionsJtsGeomCoordinateArrays_reverseWithComVividsolutionsJtsGeomCoordinateArray_([ring getCoordinates]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomPolygon)
