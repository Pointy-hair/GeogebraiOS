//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/com/vividsolutions/jts/planargraph/algorithm/ConnectedSubgraphFinder.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdge.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/planargraph/Edge.h"
#include "com/vividsolutions/jts/planargraph/GraphComponent.h"
#include "com/vividsolutions/jts/planargraph/Node.h"
#include "com/vividsolutions/jts/planargraph/PlanarGraph.h"
#include "com/vividsolutions/jts/planargraph/Subgraph.h"
#include "com/vividsolutions/jts/planargraph/algorithm/ConnectedSubgraphFinder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Stack.h"

@interface ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder () {
 @public
  ComVividsolutionsJtsPlanargraphPlanarGraph *graph_;
}

- (ComVividsolutionsJtsPlanargraphSubgraph *)findSubgraphWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)node;

- (void)addReachableWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)startNode
                withComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)subgraph;

- (void)addEdgesWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)node
                                      withJavaUtilStack:(JavaUtilStack *)nodeStack
            withComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)subgraph;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder, graph_, ComVividsolutionsJtsPlanargraphPlanarGraph *)

__attribute__((unused)) static ComVividsolutionsJtsPlanargraphSubgraph *ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_findSubgraphWithComVividsolutionsJtsPlanargraphNode_(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *self, ComVividsolutionsJtsPlanargraphNode *node);

__attribute__((unused)) static void ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_addReachableWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *self, ComVividsolutionsJtsPlanargraphNode *startNode, ComVividsolutionsJtsPlanargraphSubgraph *subgraph);

__attribute__((unused)) static void ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_addEdgesWithComVividsolutionsJtsPlanargraphNode_withJavaUtilStack_withComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *self, ComVividsolutionsJtsPlanargraphNode *node, JavaUtilStack *nodeStack, ComVividsolutionsJtsPlanargraphSubgraph *subgraph);

@implementation ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder

- (instancetype)initWithComVividsolutionsJtsPlanargraphPlanarGraph:(ComVividsolutionsJtsPlanargraphPlanarGraph *)graph {
  ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_initWithComVividsolutionsJtsPlanargraphPlanarGraph_(self, graph);
  return self;
}

- (id<JavaUtilList>)getConnectedSubgraphs {
  id<JavaUtilList> subgraphs = new_JavaUtilArrayList_init();
  ComVividsolutionsJtsPlanargraphGraphComponent_setVisitedWithJavaUtilIterator_withBoolean_([((ComVividsolutionsJtsPlanargraphPlanarGraph *) nil_chk(graph_)) nodeIterator], NO);
  for (id<JavaUtilIterator> i = [graph_ edgeIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphEdge *e = (ComVividsolutionsJtsPlanargraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphEdge class]);
    ComVividsolutionsJtsPlanargraphNode *node = [((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk([((ComVividsolutionsJtsPlanargraphEdge *) nil_chk(e)) getDirEdgeWithInt:0])) getFromNode];
    if (![((ComVividsolutionsJtsPlanargraphNode *) nil_chk(node)) isVisited]) {
      [subgraphs addWithId:ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_findSubgraphWithComVividsolutionsJtsPlanargraphNode_(self, node)];
    }
  }
  return subgraphs;
}

- (ComVividsolutionsJtsPlanargraphSubgraph *)findSubgraphWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)node {
  return ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_findSubgraphWithComVividsolutionsJtsPlanargraphNode_(self, node);
}

- (void)addReachableWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)startNode
                withComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)subgraph {
  ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_addReachableWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphSubgraph_(self, startNode, subgraph);
}

- (void)addEdgesWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)node
                                      withJavaUtilStack:(JavaUtilStack *)nodeStack
            withComVividsolutionsJtsPlanargraphSubgraph:(ComVividsolutionsJtsPlanargraphSubgraph *)subgraph {
  ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_addEdgesWithComVividsolutionsJtsPlanargraphNode_withJavaUtilStack_withComVividsolutionsJtsPlanargraphSubgraph_(self, node, nodeStack, subgraph);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsPlanargraphPlanarGraph:", "ConnectedSubgraphFinder", NULL, 0x1, NULL, NULL },
    { "getConnectedSubgraphs", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "findSubgraphWithComVividsolutionsJtsPlanargraphNode:", "findSubgraph", "Lcom.vividsolutions.jts.planargraph.Subgraph;", 0x2, NULL, NULL },
    { "addReachableWithComVividsolutionsJtsPlanargraphNode:withComVividsolutionsJtsPlanargraphSubgraph:", "addReachable", "V", 0x2, NULL, NULL },
    { "addEdgesWithComVividsolutionsJtsPlanargraphNode:withJavaUtilStack:withComVividsolutionsJtsPlanargraphSubgraph:", "addEdges", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "graph_", NULL, 0x2, "Lcom.vividsolutions.jts.planargraph.PlanarGraph;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder = { 2, "ConnectedSubgraphFinder", "com.vividsolutions.jts.planargraph.algorithm", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder;
}

@end

void ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_initWithComVividsolutionsJtsPlanargraphPlanarGraph_(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *self, ComVividsolutionsJtsPlanargraphPlanarGraph *graph) {
  (void) NSObject_init(self);
  self->graph_ = graph;
}

ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *new_ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_initWithComVividsolutionsJtsPlanargraphPlanarGraph_(ComVividsolutionsJtsPlanargraphPlanarGraph *graph) {
  ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *self = [ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder alloc];
  ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_initWithComVividsolutionsJtsPlanargraphPlanarGraph_(self, graph);
  return self;
}

ComVividsolutionsJtsPlanargraphSubgraph *ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_findSubgraphWithComVividsolutionsJtsPlanargraphNode_(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *self, ComVividsolutionsJtsPlanargraphNode *node) {
  ComVividsolutionsJtsPlanargraphSubgraph *subgraph = new_ComVividsolutionsJtsPlanargraphSubgraph_initWithComVividsolutionsJtsPlanargraphPlanarGraph_(self->graph_);
  ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_addReachableWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphSubgraph_(self, node, subgraph);
  return subgraph;
}

void ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_addReachableWithComVividsolutionsJtsPlanargraphNode_withComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *self, ComVividsolutionsJtsPlanargraphNode *startNode, ComVividsolutionsJtsPlanargraphSubgraph *subgraph) {
  JavaUtilStack *nodeStack = new_JavaUtilStack_init();
  [nodeStack addWithId:startNode];
  while (![nodeStack empty]) {
    ComVividsolutionsJtsPlanargraphNode *node = (ComVividsolutionsJtsPlanargraphNode *) check_class_cast([nodeStack pop], [ComVividsolutionsJtsPlanargraphNode class]);
    ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_addEdgesWithComVividsolutionsJtsPlanargraphNode_withJavaUtilStack_withComVividsolutionsJtsPlanargraphSubgraph_(self, node, nodeStack, subgraph);
  }
}

void ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder_addEdgesWithComVividsolutionsJtsPlanargraphNode_withJavaUtilStack_withComVividsolutionsJtsPlanargraphSubgraph_(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder *self, ComVividsolutionsJtsPlanargraphNode *node, JavaUtilStack *nodeStack, ComVividsolutionsJtsPlanargraphSubgraph *subgraph) {
  [((ComVividsolutionsJtsPlanargraphNode *) nil_chk(node)) setVisitedWithBoolean:YES];
  for (id<JavaUtilIterator> i = [((ComVividsolutionsJtsPlanargraphDirectedEdgeStar *) nil_chk(([node getOutEdges]))) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphDirectedEdge *de = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
    [((ComVividsolutionsJtsPlanargraphSubgraph *) nil_chk(subgraph)) addWithComVividsolutionsJtsPlanargraphEdge:[((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(de)) getEdge]];
    ComVividsolutionsJtsPlanargraphNode *toNode = [de getToNode];
    if (![((ComVividsolutionsJtsPlanargraphNode *) nil_chk(toNode)) isVisited]) (void) [((JavaUtilStack *) nil_chk(nodeStack)) pushWithId:toNode];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsPlanargraphAlgorithmConnectedSubgraphFinder)
