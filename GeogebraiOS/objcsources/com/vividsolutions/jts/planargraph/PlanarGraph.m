//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/com/vividsolutions/jts/planargraph/PlanarGraph.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdge.h"
#include "com/vividsolutions/jts/planargraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/planargraph/Edge.h"
#include "com/vividsolutions/jts/planargraph/Node.h"
#include "com/vividsolutions/jts/planargraph/NodeMap.h"
#include "com/vividsolutions/jts/planargraph/PlanarGraph.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@implementation ComVividsolutionsJtsPlanargraphPlanarGraph

- (instancetype)init {
  ComVividsolutionsJtsPlanargraphPlanarGraph_init(self);
  return self;
}

- (ComVividsolutionsJtsPlanargraphNode *)findNodeWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  return [((ComVividsolutionsJtsPlanargraphNodeMap *) nil_chk(nodeMap_)) findWithComVividsolutionsJtsGeomCoordinate:pt];
}

- (void)addWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)node {
  [((ComVividsolutionsJtsPlanargraphNodeMap *) nil_chk(nodeMap_)) addWithComVividsolutionsJtsPlanargraphNode:node];
}

- (void)addWithComVividsolutionsJtsPlanargraphEdge:(ComVividsolutionsJtsPlanargraphEdge *)edge {
  [((id<JavaUtilSet>) nil_chk(edges_)) addWithId:edge];
  [self addWithComVividsolutionsJtsPlanargraphDirectedEdge:[((ComVividsolutionsJtsPlanargraphEdge *) nil_chk(edge)) getDirEdgeWithInt:0]];
  [self addWithComVividsolutionsJtsPlanargraphDirectedEdge:[edge getDirEdgeWithInt:1]];
}

- (void)addWithComVividsolutionsJtsPlanargraphDirectedEdge:(ComVividsolutionsJtsPlanargraphDirectedEdge *)dirEdge {
  [((id<JavaUtilSet>) nil_chk(dirEdges_)) addWithId:dirEdge];
}

- (id<JavaUtilIterator>)nodeIterator {
  return [((ComVividsolutionsJtsPlanargraphNodeMap *) nil_chk(nodeMap_)) iterator];
}

- (jboolean)containsWithComVividsolutionsJtsPlanargraphEdge:(ComVividsolutionsJtsPlanargraphEdge *)e {
  return [((id<JavaUtilSet>) nil_chk(edges_)) containsWithId:e];
}

- (jboolean)containsWithComVividsolutionsJtsPlanargraphDirectedEdge:(ComVividsolutionsJtsPlanargraphDirectedEdge *)de {
  return [((id<JavaUtilSet>) nil_chk(dirEdges_)) containsWithId:de];
}

- (id<JavaUtilCollection>)getNodes {
  return [((ComVividsolutionsJtsPlanargraphNodeMap *) nil_chk(nodeMap_)) values];
}

- (id<JavaUtilIterator>)dirEdgeIterator {
  return [((id<JavaUtilSet>) nil_chk(dirEdges_)) iterator];
}

- (id<JavaUtilIterator>)edgeIterator {
  return [((id<JavaUtilSet>) nil_chk(edges_)) iterator];
}

- (id<JavaUtilCollection>)getEdges {
  return edges_;
}

- (void)removeWithComVividsolutionsJtsPlanargraphEdge:(ComVividsolutionsJtsPlanargraphEdge *)edge {
  [self removeWithComVividsolutionsJtsPlanargraphDirectedEdge:[((ComVividsolutionsJtsPlanargraphEdge *) nil_chk(edge)) getDirEdgeWithInt:0]];
  [self removeWithComVividsolutionsJtsPlanargraphDirectedEdge:[edge getDirEdgeWithInt:1]];
  [((id<JavaUtilSet>) nil_chk(edges_)) removeWithId:edge];
  [edge remove];
}

- (void)removeWithComVividsolutionsJtsPlanargraphDirectedEdge:(ComVividsolutionsJtsPlanargraphDirectedEdge *)de {
  ComVividsolutionsJtsPlanargraphDirectedEdge *sym = [((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(de)) getSym];
  if (sym != nil) [sym setSymWithComVividsolutionsJtsPlanargraphDirectedEdge:nil];
  [((ComVividsolutionsJtsPlanargraphNode *) nil_chk([de getFromNode])) removeWithComVividsolutionsJtsPlanargraphDirectedEdge:de];
  [de remove];
  [((id<JavaUtilSet>) nil_chk(dirEdges_)) removeWithId:de];
}

- (void)removeWithComVividsolutionsJtsPlanargraphNode:(ComVividsolutionsJtsPlanargraphNode *)node {
  id<JavaUtilList> outEdges = [((ComVividsolutionsJtsPlanargraphDirectedEdgeStar *) nil_chk([((ComVividsolutionsJtsPlanargraphNode *) nil_chk(node)) getOutEdges])) getEdges];
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(outEdges)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphDirectedEdge *de = (ComVividsolutionsJtsPlanargraphDirectedEdge *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphDirectedEdge class]);
    ComVividsolutionsJtsPlanargraphDirectedEdge *sym = [((ComVividsolutionsJtsPlanargraphDirectedEdge *) nil_chk(de)) getSym];
    if (sym != nil) [self removeWithComVividsolutionsJtsPlanargraphDirectedEdge:sym];
    [((id<JavaUtilSet>) nil_chk(dirEdges_)) removeWithId:de];
    ComVividsolutionsJtsPlanargraphEdge *edge = [de getEdge];
    if (edge != nil) {
      [((id<JavaUtilSet>) nil_chk(edges_)) removeWithId:edge];
    }
  }
  [((ComVividsolutionsJtsPlanargraphNodeMap *) nil_chk(nodeMap_)) removeWithComVividsolutionsJtsGeomCoordinate:[node getCoordinate]];
  [node remove];
}

- (id<JavaUtilList>)findNodesOfDegreeWithInt:(jint)degree {
  id<JavaUtilList> nodesFound = [new_JavaUtilArrayList_init() autorelease];
  for (id<JavaUtilIterator> i = [self nodeIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsPlanargraphNode *node = (ComVividsolutionsJtsPlanargraphNode *) check_class_cast([i next], [ComVividsolutionsJtsPlanargraphNode class]);
    if ([((ComVividsolutionsJtsPlanargraphNode *) nil_chk(node)) getDegree] == degree) [nodesFound addWithId:node];
  }
  return nodesFound;
}

- (void)dealloc {
  RELEASE_(edges_);
  RELEASE_(dirEdges_);
  RELEASE_(nodeMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PlanarGraph", NULL, 0x1, NULL, NULL },
    { "findNodeWithComVividsolutionsJtsGeomCoordinate:", "findNode", "Lcom.vividsolutions.jts.planargraph.Node;", 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsPlanargraphNode:", "add", "V", 0x4, NULL, NULL },
    { "addWithComVividsolutionsJtsPlanargraphEdge:", "add", "V", 0x4, NULL, NULL },
    { "addWithComVividsolutionsJtsPlanargraphDirectedEdge:", "add", "V", 0x4, NULL, NULL },
    { "nodeIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "containsWithComVividsolutionsJtsPlanargraphEdge:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithComVividsolutionsJtsPlanargraphDirectedEdge:", "contains", "Z", 0x1, NULL, NULL },
    { "getNodes", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "dirEdgeIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "edgeIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "getEdges", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "removeWithComVividsolutionsJtsPlanargraphEdge:", "remove", "V", 0x1, NULL, NULL },
    { "removeWithComVividsolutionsJtsPlanargraphDirectedEdge:", "remove", "V", 0x1, NULL, NULL },
    { "removeWithComVividsolutionsJtsPlanargraphNode:", "remove", "V", 0x1, NULL, NULL },
    { "findNodesOfDegreeWithInt:", "findNodesOfDegree", "Ljava.util.List;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "edges_", NULL, 0x4, "Ljava.util.Set;", NULL, NULL,  },
    { "dirEdges_", NULL, 0x4, "Ljava.util.Set;", NULL, NULL,  },
    { "nodeMap_", NULL, 0x4, "Lcom.vividsolutions.jts.planargraph.NodeMap;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsPlanargraphPlanarGraph = { 2, "PlanarGraph", "com.vividsolutions.jts.planargraph", NULL, 0x401, 16, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsPlanargraphPlanarGraph;
}

@end

void ComVividsolutionsJtsPlanargraphPlanarGraph_init(ComVividsolutionsJtsPlanargraphPlanarGraph *self) {
  NSObject_init(self);
  ComVividsolutionsJtsPlanargraphPlanarGraph_setAndConsume_edges_(self, new_JavaUtilHashSet_init());
  ComVividsolutionsJtsPlanargraphPlanarGraph_setAndConsume_dirEdges_(self, new_JavaUtilHashSet_init());
  ComVividsolutionsJtsPlanargraphPlanarGraph_setAndConsume_nodeMap_(self, new_ComVividsolutionsJtsPlanargraphNodeMap_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsPlanargraphPlanarGraph)
