//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/edu/uci/ics/jung/algorithms/generators/random/BarabasiAlbertGenerator.java
//


#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/algorithms/generators/random/BarabasiAlbertGenerator.h"
#include "edu/uci/ics/jung/graph/Graph.h"
#include "edu/uci/ics/jung/graph/MultiGraph.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "edu/uci/ics/jung/graph/util/Pair.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/Factory.h"

@interface EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator () {
 @public
  id<EduUciIcsJungGraphGraph> mGraph_;
  jint mNumEdgesToAttachPerStep_;
  jint mElapsedTimeSteps_;
  JavaUtilRandom *mRandom_;
}

- (void)initialize__WithJavaUtilSet:(id<JavaUtilSet>)seedVertices OBJC_METHOD_FAMILY_NONE;

- (void)createRandomEdgeWithJavaUtilCollection:(id<JavaUtilCollection>)preexistingNodes
                                        withId:(id)newVertex
                               withJavaUtilSet:(id<JavaUtilSet>)added_pairs;

- (void)evolveGraph;

@end

J2OBJC_FIELD_SETTER(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator, mGraph_, id<EduUciIcsJungGraphGraph>)
J2OBJC_FIELD_SETTER(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator, mRandom_, JavaUtilRandom *)

__attribute__((unused)) static void EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initialize__WithJavaUtilSet_(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self, id<JavaUtilSet> seedVertices);

__attribute__((unused)) static void EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_createRandomEdgeWithJavaUtilCollection_withId_withJavaUtilSet_(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self, id<JavaUtilCollection> preexistingNodes, id newVertex, id<JavaUtilSet> added_pairs);

__attribute__((unused)) static void EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_evolveGraph(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self);

@implementation EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator

- (instancetype)initWithOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)graphFactory
                    withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)vertexFactory
                    withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)edgeFactory
                                                     withInt:(jint)init_vertices
                                                     withInt:(jint)numEdgesToAttach
                                                     withInt:(jint)seed
                                             withJavaUtilSet:(id<JavaUtilSet>)seedVertices {
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_withJavaUtilSet_(self, graphFactory, vertexFactory, edgeFactory, init_vertices, numEdgesToAttach, seed, seedVertices);
  return self;
}

- (instancetype)initWithOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)graphFactory
                    withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)vertexFactory
                    withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)edgeFactory
                                                     withInt:(jint)init_vertices
                                                     withInt:(jint)numEdgesToAttach
                                             withJavaUtilSet:(id<JavaUtilSet>)seedVertices {
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withJavaUtilSet_(self, graphFactory, vertexFactory, edgeFactory, init_vertices, numEdgesToAttach, seedVertices);
  return self;
}

- (void)initialize__WithJavaUtilSet:(id<JavaUtilSet>)seedVertices {
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initialize__WithJavaUtilSet_(self, seedVertices);
}

- (void)createRandomEdgeWithJavaUtilCollection:(id<JavaUtilCollection>)preexistingNodes
                                        withId:(id)newVertex
                               withJavaUtilSet:(id<JavaUtilSet>)added_pairs {
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_createRandomEdgeWithJavaUtilCollection_withId_withJavaUtilSet_(self, preexistingNodes, newVertex, added_pairs);
}

- (void)evolveGraphWithInt:(jint)numTimeSteps {
  for (jint i = 0; i < numTimeSteps; i++) {
    EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_evolveGraph(self);
    mElapsedTimeSteps_++;
  }
}

- (void)evolveGraph {
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_evolveGraph(self);
}

- (jint)numIterations {
  return mElapsedTimeSteps_;
}

- (id<EduUciIcsJungGraphGraph>)create {
  return mGraph_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsCollections15Factory:withOrgApacheCommonsCollections15Factory:withOrgApacheCommonsCollections15Factory:withInt:withInt:withInt:withJavaUtilSet:", "BarabasiAlbertGenerator", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsCollections15Factory:withOrgApacheCommonsCollections15Factory:withOrgApacheCommonsCollections15Factory:withInt:withInt:withJavaUtilSet:", "BarabasiAlbertGenerator", NULL, 0x1, NULL, NULL },
    { "initialize__WithJavaUtilSet:", "initialize", "V", 0x2, NULL, NULL },
    { "createRandomEdgeWithJavaUtilCollection:withId:withJavaUtilSet:", "createRandomEdge", "V", 0x2, NULL, "(Ljava/util/Collection<TV;>;TV;Ljava/util/Set<Ledu/uci/ics/jung/graph/util/Pair<TV;>;>;)V" },
    { "evolveGraphWithInt:", "evolveGraph", "V", 0x1, NULL, NULL },
    { "evolveGraph", NULL, "V", 0x2, NULL, NULL },
    { "numIterations", NULL, "I", 0x1, NULL, NULL },
    { "create", NULL, "Ledu.uci.ics.jung.graph.Graph;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mGraph_", NULL, 0x2, "Ledu.uci.ics.jung.graph.Graph;", NULL, "Ledu/uci/ics/jung/graph/Graph<TV;TE;>;",  },
    { "mNumEdgesToAttachPerStep_", NULL, 0x2, "I", NULL, NULL,  },
    { "mElapsedTimeSteps_", NULL, 0x2, "I", NULL, NULL,  },
    { "mRandom_", NULL, 0x2, "Ljava.util.Random;", NULL, NULL,  },
    { "vertex_index_", NULL, 0x4, "Ljava.util.List;", NULL, "Ljava/util/List<TV;>;",  },
    { "init_vertices_", NULL, 0x4, "I", NULL, NULL,  },
    { "index_vertex_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TV;Ljava/lang/Integer;>;",  },
    { "graphFactory_", NULL, 0x4, "Lorg.apache.commons.collections15.Factory;", NULL, "Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Graph<TV;TE;>;>;",  },
    { "vertexFactory_", NULL, 0x4, "Lorg.apache.commons.collections15.Factory;", NULL, "Lorg/apache/commons/collections15/Factory<TV;>;",  },
    { "edgeFactory_", NULL, 0x4, "Lorg.apache.commons.collections15.Factory;", NULL, "Lorg/apache/commons/collections15/Factory<TE;>;",  },
  };
  static const J2ObjcClassInfo _EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator = { 2, "BarabasiAlbertGenerator", "edu.uci.ics.jung.algorithms.generators.random", NULL, 0x1, 8, methods, 10, fields, 0, NULL, 0, NULL, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;Ledu/uci/ics/jung/algorithms/generators/EvolvingGraphGenerator<TV;TE;>;" };
  return &_EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator;
}

@end

void EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_withJavaUtilSet_(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self, id<OrgApacheCommonsCollections15Factory> graphFactory, id<OrgApacheCommonsCollections15Factory> vertexFactory, id<OrgApacheCommonsCollections15Factory> edgeFactory, jint init_vertices, jint numEdgesToAttach, jint seed, id<JavaUtilSet> seedVertices) {
  (void) NSObject_init(self);
  self->mGraph_ = nil;
  NSCAssert(init_vertices > 0, @"Number of initial unconnected 'seed' vertices must be positive");
  NSCAssert(numEdgesToAttach > 0, @"Number of edges to attach at each time step must be positive");
  self->mNumEdgesToAttachPerStep_ = numEdgesToAttach;
  self->mRandom_ = new_JavaUtilRandom_initWithLong_(seed);
  self->graphFactory_ = graphFactory;
  self->vertexFactory_ = vertexFactory;
  self->edgeFactory_ = edgeFactory;
  self->init_vertices_ = init_vertices;
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initialize__WithJavaUtilSet_(self, seedVertices);
}

EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *new_EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_withJavaUtilSet_(id<OrgApacheCommonsCollections15Factory> graphFactory, id<OrgApacheCommonsCollections15Factory> vertexFactory, id<OrgApacheCommonsCollections15Factory> edgeFactory, jint init_vertices, jint numEdgesToAttach, jint seed, id<JavaUtilSet> seedVertices) {
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self = [EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator alloc];
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_withJavaUtilSet_(self, graphFactory, vertexFactory, edgeFactory, init_vertices, numEdgesToAttach, seed, seedVertices);
  return self;
}

void EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withJavaUtilSet_(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self, id<OrgApacheCommonsCollections15Factory> graphFactory, id<OrgApacheCommonsCollections15Factory> vertexFactory, id<OrgApacheCommonsCollections15Factory> edgeFactory, jint init_vertices, jint numEdgesToAttach, id<JavaUtilSet> seedVertices) {
  (void) EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withInt_withJavaUtilSet_(self, graphFactory, vertexFactory, edgeFactory, init_vertices, numEdgesToAttach, (jint) JavaLangSystem_currentTimeMillis(), seedVertices);
}

EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *new_EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withJavaUtilSet_(id<OrgApacheCommonsCollections15Factory> graphFactory, id<OrgApacheCommonsCollections15Factory> vertexFactory, id<OrgApacheCommonsCollections15Factory> edgeFactory, jint init_vertices, jint numEdgesToAttach, id<JavaUtilSet> seedVertices) {
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self = [EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator alloc];
  EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initWithOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withOrgApacheCommonsCollections15Factory_withInt_withInt_withJavaUtilSet_(self, graphFactory, vertexFactory, edgeFactory, init_vertices, numEdgesToAttach, seedVertices);
  return self;
}

void EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_initialize__WithJavaUtilSet_(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self, id<JavaUtilSet> seedVertices) {
  self->mGraph_ = [((id<OrgApacheCommonsCollections15Factory>) nil_chk(self->graphFactory_)) create];
  self->vertex_index_ = new_JavaUtilArrayList_initWithInt_(2 * self->init_vertices_);
  self->index_vertex_ = new_JavaUtilHashMap_initWithInt_(2 * self->init_vertices_);
  for (jint i = 0; i < self->init_vertices_; i++) {
    id v = [((id<OrgApacheCommonsCollections15Factory>) nil_chk(self->vertexFactory_)) create];
    [((id<EduUciIcsJungGraphGraph>) nil_chk(self->mGraph_)) addVertexWithId:v];
    [self->vertex_index_ addWithId:v];
    (void) [self->index_vertex_ putWithId:v withId:JavaLangInteger_valueOfWithInt_(i)];
    [((id<JavaUtilSet>) nil_chk(seedVertices)) addWithId:v];
  }
  self->mElapsedTimeSteps_ = 0;
}

void EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_createRandomEdgeWithJavaUtilCollection_withId_withJavaUtilSet_(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self, id<JavaUtilCollection> preexistingNodes, id newVertex, id<JavaUtilSet> added_pairs) {
  id attach_point;
  jboolean created_edge = NO;
  EduUciIcsJungGraphUtilPair *endpoints;
  do {
    attach_point = [self->vertex_index_ getWithInt:[((JavaUtilRandom *) nil_chk(self->mRandom_)) nextIntWithInt:[((id<JavaUtilList>) nil_chk(self->vertex_index_)) size]]];
    endpoints = new_EduUciIcsJungGraphUtilPair_initWithId_withId_(newVertex, attach_point);
    if (!([EduUciIcsJungGraphMultiGraph_class_() isInstance:self->mGraph_])) {
      if ([((id<JavaUtilSet>) nil_chk(added_pairs)) containsWithId:endpoints]) continue;
      if ([((id<EduUciIcsJungGraphGraph>) nil_chk(self->mGraph_)) getDefaultEdgeType] == EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED() && [added_pairs containsWithId:new_EduUciIcsJungGraphUtilPair_initWithId_withId_(attach_point, newVertex)]) continue;
    }
    jdouble degree = [((id<EduUciIcsJungGraphGraph>) nil_chk(self->mGraph_)) inDegreeWithId:attach_point];
    jdouble attach_prob = (degree + 1) / ([self->mGraph_ getEdgeCount] + [self->mGraph_ getVertexCount] - 1);
    if (attach_prob >= [self->mRandom_ nextDouble]) created_edge = YES;
  }
  while (!created_edge);
  [((id<JavaUtilSet>) nil_chk(added_pairs)) addWithId:endpoints];
  if ([((id<EduUciIcsJungGraphGraph>) nil_chk(self->mGraph_)) getDefaultEdgeType] == EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED()) {
    [added_pairs addWithId:new_EduUciIcsJungGraphUtilPair_initWithId_withId_(attach_point, newVertex)];
  }
}

void EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_evolveGraph(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator *self) {
  id<JavaUtilCollection> preexistingNodes = [((id<EduUciIcsJungGraphGraph>) nil_chk(self->mGraph_)) getVertices];
  id newVertex = [((id<OrgApacheCommonsCollections15Factory>) nil_chk(self->vertexFactory_)) create];
  [self->mGraph_ addVertexWithId:newVertex];
  id<JavaUtilSet> added_pairs = new_JavaUtilHashSet_initWithInt_(self->mNumEdgesToAttachPerStep_ * 3);
  for (jint i = 0; i < self->mNumEdgesToAttachPerStep_; i++) EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator_createRandomEdgeWithJavaUtilCollection_withId_withJavaUtilSet_(self, preexistingNodes, newVertex, added_pairs);
  for (EduUciIcsJungGraphUtilPair * __strong pair in added_pairs) {
    id v1 = [((EduUciIcsJungGraphUtilPair *) nil_chk(pair)) getFirst];
    id v2 = [pair getSecond];
    if ([self->mGraph_ getDefaultEdgeType] != EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED() || ![self->mGraph_ isNeighborWithId:v1 withId:v2]) [self->mGraph_ addEdgeWithId:[((id<OrgApacheCommonsCollections15Factory>) nil_chk(self->edgeFactory_)) create] withJavaUtilCollection:pair];
  }
  [((id<JavaUtilList>) nil_chk(self->vertex_index_)) addWithId:newVertex];
  (void) [((id<JavaUtilMap>) nil_chk(self->index_vertex_)) putWithId:newVertex withId:new_JavaLangInteger_initWithInt_([self->vertex_index_ size] - 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungAlgorithmsGeneratorsRandomBarabasiAlbertGenerator)
