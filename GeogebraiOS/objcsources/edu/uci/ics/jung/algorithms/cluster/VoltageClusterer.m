//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/edu/uci/ics/jung/algorithms/cluster/VoltageClusterer.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/algorithms/cluster/VoltageClusterer.h"
#include "edu/uci/ics/jung/algorithms/scoring/VoltageScorer.h"
#include "edu/uci/ics/jung/algorithms/util/DiscreteDistribution.h"
#include "edu/uci/ics/jung/algorithms/util/KMeansClusterer.h"
#include "edu/uci/ics/jung/graph/Graph.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"

@interface EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator () {
 @public
  id<JavaUtilMap> map_;
}

@end

J2OBJC_FIELD_SETTER(EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator, map_, id<JavaUtilMap>)

@implementation EduUciIcsJungAlgorithmsClusterVoltageClusterer

- (instancetype)initWithEduUciIcsJungGraphGraph:(id<EduUciIcsJungGraphGraph>)g
                                        withInt:(jint)num_candidates {
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_initWithEduUciIcsJungGraphGraph_withInt_(self, g, num_candidates);
  return self;
}

- (void)setRandomSeedWithInt:(jint)random_seed {
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_setAndConsume_rand_(self, new_JavaUtilRandom_initWithLong_(random_seed));
}

- (id<JavaUtilCollection>)getCommunityWithId:(id)v {
  return [self cluster_internalWithId:v withInt:2];
}

- (id<JavaUtilCollection>)clusterWithInt:(jint)num_clusters {
  return [self cluster_internalWithId:nil withInt:num_clusters];
}

- (id<JavaUtilCollection>)cluster_internalWithId:(id)origin
                                         withInt:(jint)num_clusters {
  JavaUtilArrayList *v_array = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<EduUciIcsJungGraphGraph>) nil_chk(g_)) getVertices]) autorelease];
  JavaUtilLinkedList *candidates = [new_JavaUtilLinkedList_init() autorelease];
  for (jint j = 0; j < num_candidates_; j++) {
    id source;
    if (origin == nil) source = [v_array getWithInt:J2ObjCFpToInt(([((JavaUtilRandom *) nil_chk(rand_)) nextDouble] * [v_array size]))];
    else source = origin;
    id target = nil;
    do {
      target = [v_array getWithInt:J2ObjCFpToInt(([((JavaUtilRandom *) nil_chk(rand_)) nextDouble] * [v_array size]))];
    }
    while (source == target);
    EduUciIcsJungAlgorithmsScoringVoltageScorer *vs = [new_EduUciIcsJungAlgorithmsScoringVoltageScorer_initWithEduUciIcsJungGraphHypergraph_withId_withId_(g_, source, target) autorelease];
    [vs evaluate];
    id<JavaUtilMap> voltage_ranks = [new_JavaUtilHashMap_init() autorelease];
    for (id __strong v in nil_chk([g_ getVertices])) [voltage_ranks putWithId:v withId:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((JavaLangDouble *) nil_chk([vs getVertexScoreWithId:v])) doubleValue] } count:1]];
    [self addTwoCandidateClustersWithJavaUtilLinkedList:candidates withJavaUtilMap:voltage_ranks];
  }
  id<JavaUtilCollection> clusters = [new_JavaUtilLinkedList_init() autorelease];
  id<JavaUtilSet> remaining = [new_JavaUtilHashSet_initWithJavaUtilCollection_([g_ getVertices]) autorelease];
  id<JavaUtilList> seed_candidates = [self getSeedCandidatesWithJavaUtilCollection:candidates];
  jint seed_index = 0;
  for (jint j = 0; j < (num_clusters - 1); j++) {
    if ([remaining isEmpty]) break;
    id seed;
    if (seed_index == 0 && origin != nil) seed = origin;
    else {
      do {
        seed = [((id<JavaUtilList>) nil_chk(seed_candidates)) getWithInt:seed_index++];
      }
      while (![remaining containsWithId:seed]);
    }
    id<JavaUtilMap> occur_counts = [self getObjectCountsWithJavaUtilCollection:candidates withId:seed];
    if ([((id<JavaUtilMap>) nil_chk(occur_counts)) size] < 2) break;
    @try {
      id<JavaUtilCollection> high_low = [((EduUciIcsJungAlgorithmsUtilKMeansClusterer *) nil_chk(kmc_)) clusterWithJavaUtilMap:occur_counts withInt:2];
      id<JavaUtilIterator> h_iter = [((id<JavaUtilCollection>) nil_chk(high_low)) iterator];
      id<JavaUtilMap> cluster1 = [((id<JavaUtilIterator>) nil_chk(h_iter)) next];
      id<JavaUtilMap> cluster2 = [h_iter next];
      IOSDoubleArray *centroid1 = EduUciIcsJungAlgorithmsUtilDiscreteDistribution_meanWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(cluster1)) values]);
      IOSDoubleArray *centroid2 = EduUciIcsJungAlgorithmsUtilDiscreteDistribution_meanWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(cluster2)) values]);
      id<JavaUtilSet> new_cluster;
      if (IOSDoubleArray_Get(nil_chk(centroid1), 0) >= IOSDoubleArray_Get(nil_chk(centroid2), 0)) new_cluster = [cluster1 keySet];
      else new_cluster = [cluster2 keySet];
      for (id<JavaUtilSet> __strong cluster in candidates) [((id<JavaUtilSet>) nil_chk(cluster)) removeAllWithJavaUtilCollection:new_cluster];
      [clusters addWithId:new_cluster];
      [remaining removeAllWithJavaUtilCollection:new_cluster];
    }
    @catch (EduUciIcsJungAlgorithmsUtilKMeansClusterer_NotEnoughClustersException *nece) {
      break;
    }
  }
  if (![remaining isEmpty]) [clusters addWithId:remaining];
  return clusters;
}

- (void)addTwoCandidateClustersWithJavaUtilLinkedList:(JavaUtilLinkedList *)candidates
                                      withJavaUtilMap:(id<JavaUtilMap>)voltage_ranks {
  @try {
    id<JavaUtilList> clusters = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((EduUciIcsJungAlgorithmsUtilKMeansClusterer *) nil_chk(kmc_)) clusterWithJavaUtilMap:voltage_ranks withInt:3]) autorelease];
    jboolean b01 = [((id<JavaUtilMap>) nil_chk([clusters getWithInt:0])) size] > [((id<JavaUtilMap>) nil_chk([clusters getWithInt:1])) size];
    jboolean b02 = [((id<JavaUtilMap>) nil_chk([clusters getWithInt:0])) size] > [((id<JavaUtilMap>) nil_chk([clusters getWithInt:2])) size];
    jboolean b12 = [((id<JavaUtilMap>) nil_chk([clusters getWithInt:1])) size] > [((id<JavaUtilMap>) nil_chk([clusters getWithInt:2])) size];
    if (b01 && b02) {
      [((JavaUtilLinkedList *) nil_chk(candidates)) addWithId:[((id<JavaUtilMap>) nil_chk([clusters getWithInt:1])) keySet]];
      [candidates addWithId:[((id<JavaUtilMap>) nil_chk([clusters getWithInt:2])) keySet]];
    }
    else if (!b01 && b12) {
      [((JavaUtilLinkedList *) nil_chk(candidates)) addWithId:[((id<JavaUtilMap>) nil_chk([clusters getWithInt:0])) keySet]];
      [candidates addWithId:[((id<JavaUtilMap>) nil_chk([clusters getWithInt:2])) keySet]];
    }
    else if (!b02 && !b12) {
      [((JavaUtilLinkedList *) nil_chk(candidates)) addWithId:[((id<JavaUtilMap>) nil_chk([clusters getWithInt:0])) keySet]];
      [candidates addWithId:[((id<JavaUtilMap>) nil_chk([clusters getWithInt:1])) keySet]];
    }
  }
  @catch (EduUciIcsJungAlgorithmsUtilKMeansClusterer_NotEnoughClustersException *e) {
  }
}

- (void)addOneCandidateClusterWithJavaUtilLinkedList:(JavaUtilLinkedList *)candidates
                                     withJavaUtilMap:(id<JavaUtilMap>)voltage_ranks {
  @try {
    id<JavaUtilList> clusters;
    clusters = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((EduUciIcsJungAlgorithmsUtilKMeansClusterer *) nil_chk(kmc_)) clusterWithJavaUtilMap:voltage_ranks withInt:2]) autorelease];
    if ([((id<JavaUtilMap>) nil_chk([clusters getWithInt:0])) size] < [((id<JavaUtilMap>) nil_chk([clusters getWithInt:1])) size]) [((JavaUtilLinkedList *) nil_chk(candidates)) addWithId:[((id<JavaUtilMap>) nil_chk([clusters getWithInt:0])) keySet]];
    else [((JavaUtilLinkedList *) nil_chk(candidates)) addWithId:[((id<JavaUtilMap>) nil_chk([clusters getWithInt:1])) keySet]];
  }
  @catch (EduUciIcsJungAlgorithmsUtilKMeansClusterer_NotEnoughClustersException *e) {
  }
}

- (id<JavaUtilList>)getSeedCandidatesWithJavaUtilCollection:(id<JavaUtilCollection>)candidates {
  id<JavaUtilMap> occur_counts = [self getObjectCountsWithJavaUtilCollection:candidates withId:nil];
  JavaUtilArrayList *occurrences = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(occur_counts)) keySet]) autorelease];
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(occurrences, [new_EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator_initWithEduUciIcsJungAlgorithmsClusterVoltageClusterer_withJavaUtilMap_(self, occur_counts) autorelease]);
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"occurrences: "];
  for (jint i = 0; i < [occurrences size]; i++) [JavaLangSystem_get_out_() printlnWithDouble:IOSDoubleArray_Get(nil_chk([occur_counts getWithId:[occurrences getWithInt:i]]), 0)];
  return occurrences;
}

- (id<JavaUtilMap>)getObjectCountsWithJavaUtilCollection:(id<JavaUtilCollection>)candidates
                                                  withId:(id)seed {
  id<JavaUtilMap> occur_counts = [new_JavaUtilHashMap_init() autorelease];
  for (id __strong v in nil_chk([((id<EduUciIcsJungGraphGraph>) nil_chk(g_)) getVertices])) [occur_counts putWithId:v withId:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0 } count:1]];
  for (id<JavaUtilSet> __strong candidate in nil_chk(candidates)) {
    if (seed == nil) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithInt:[((id<JavaUtilSet>) nil_chk(candidate)) size]];
    if (seed == nil || [((id<JavaUtilSet>) nil_chk(candidate)) containsWithId:seed]) {
      for (id __strong element in nil_chk(candidate)) {
        IOSDoubleArray *count = [occur_counts getWithId:element];
        (*IOSDoubleArray_GetRef(nil_chk(count), 0))++;
      }
    }
  }
  if (seed == nil) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$I", @"occur_counts size: ", [occur_counts size])];
    for (id __strong v in nil_chk([occur_counts keySet])) [JavaLangSystem_get_out_() printlnWithDouble:IOSDoubleArray_Get(nil_chk([occur_counts getWithId:v]), 0)];
  }
  return occur_counts;
}

- (void)dealloc {
  RELEASE_(kmc_);
  RELEASE_(rand_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithEduUciIcsJungGraphGraph:withInt:", "VoltageClusterer", NULL, 0x1, NULL, NULL },
    { "setRandomSeedWithInt:", "setRandomSeed", "V", 0x4, NULL, NULL },
    { "getCommunityWithId:", "getCommunity", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<Ljava/util/Set<TV;>;>;" },
    { "clusterWithInt:", "cluster", "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "cluster_internalWithId:withInt:", "cluster_internal", "Ljava.util.Collection;", 0x4, NULL, "(TV;I)Ljava/util/Collection<Ljava/util/Set<TV;>;>;" },
    { "addTwoCandidateClustersWithJavaUtilLinkedList:withJavaUtilMap:", "addTwoCandidateClusters", "V", 0x4, NULL, NULL },
    { "addOneCandidateClusterWithJavaUtilLinkedList:withJavaUtilMap:", "addOneCandidateCluster", "V", 0x4, NULL, NULL },
    { "getSeedCandidatesWithJavaUtilCollection:", "getSeedCandidates", "Ljava.util.List;", 0x4, NULL, NULL },
    { "getObjectCountsWithJavaUtilCollection:withId:", "getObjectCounts", "Ljava.util.Map;", 0x4, NULL, "(Ljava/util/Collection<Ljava/util/Set<TV;>;>;TV;)Ljava/util/Map<TV;L[D;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "num_candidates_", NULL, 0x4, "I", NULL, NULL,  },
    { "kmc_", NULL, 0x4, "Ledu.uci.ics.jung.algorithms.util.KMeansClusterer;", NULL, "Ledu/uci/ics/jung/algorithms/util/KMeansClusterer<TV;>;",  },
    { "rand_", NULL, 0x4, "Ljava.util.Random;", NULL, NULL,  },
    { "g_", NULL, 0x4, "Ledu.uci.ics.jung.graph.Graph;", NULL, "Ledu/uci/ics/jung/graph/Graph<TV;TE;>;",  },
  };
  static const char *inner_classes[] = {"Ledu.uci.ics.jung.algorithms.cluster.VoltageClusterer$MapValueArrayComparator;"};
  static const J2ObjcClassInfo _EduUciIcsJungAlgorithmsClusterVoltageClusterer = { 2, "VoltageClusterer", "edu.uci.ics.jung.algorithms.cluster", NULL, 0x1, 9, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_EduUciIcsJungAlgorithmsClusterVoltageClusterer;
}

@end

void EduUciIcsJungAlgorithmsClusterVoltageClusterer_initWithEduUciIcsJungGraphGraph_withInt_(EduUciIcsJungAlgorithmsClusterVoltageClusterer *self, id<EduUciIcsJungGraphGraph> g, jint num_candidates) {
  NSObject_init(self);
  if (num_candidates < 1) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"must generate >=1 candidates") autorelease];
  self->num_candidates_ = num_candidates;
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_setAndConsume_kmc_(self, new_EduUciIcsJungAlgorithmsUtilKMeansClusterer_init());
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_setAndConsume_rand_(self, new_JavaUtilRandom_init());
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_set_g_(self, g);
}

EduUciIcsJungAlgorithmsClusterVoltageClusterer *new_EduUciIcsJungAlgorithmsClusterVoltageClusterer_initWithEduUciIcsJungGraphGraph_withInt_(id<EduUciIcsJungGraphGraph> g, jint num_candidates) {
  EduUciIcsJungAlgorithmsClusterVoltageClusterer *self = [EduUciIcsJungAlgorithmsClusterVoltageClusterer alloc];
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_initWithEduUciIcsJungGraphGraph_withInt_(self, g, num_candidates);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungAlgorithmsClusterVoltageClusterer)

@implementation EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator

- (instancetype)initWithEduUciIcsJungAlgorithmsClusterVoltageClusterer:(EduUciIcsJungAlgorithmsClusterVoltageClusterer *)outer$
                                                       withJavaUtilMap:(id<JavaUtilMap>)map {
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator_initWithEduUciIcsJungAlgorithmsClusterVoltageClusterer_withJavaUtilMap_(self, outer$, map);
  return self;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  IOSDoubleArray *count0 = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:o1];
  IOSDoubleArray *count1 = [map_ getWithId:o2];
  if (IOSDoubleArray_Get(nil_chk(count0), 0) < IOSDoubleArray_Get(nil_chk(count1), 0)) return 1;
  else if (IOSDoubleArray_Get(count0, 0) > IOSDoubleArray_Get(count1, 0)) return -1;
  return 0;
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithEduUciIcsJungAlgorithmsClusterVoltageClusterer:withJavaUtilMap:", "MapValueArrayComparator", NULL, 0x4, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, "(TV;TV;)I" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<TV;L[D;>;",  },
  };
  static const J2ObjcClassInfo _EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator = { 2, "MapValueArrayComparator", "edu.uci.ics.jung.algorithms.cluster", "VoltageClusterer", 0x4, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<TV;>;" };
  return &_EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator;
}

@end

void EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator_initWithEduUciIcsJungAlgorithmsClusterVoltageClusterer_withJavaUtilMap_(EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator *self, EduUciIcsJungAlgorithmsClusterVoltageClusterer *outer$, id<JavaUtilMap> map) {
  NSObject_init(self);
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator_set_map_(self, map);
}

EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator *new_EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator_initWithEduUciIcsJungAlgorithmsClusterVoltageClusterer_withJavaUtilMap_(EduUciIcsJungAlgorithmsClusterVoltageClusterer *outer$, id<JavaUtilMap> map) {
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator *self = [EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator alloc];
  EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator_initWithEduUciIcsJungAlgorithmsClusterVoltageClusterer_withJavaUtilMap_(self, outer$, map);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungAlgorithmsClusterVoltageClusterer_MapValueArrayComparator)
