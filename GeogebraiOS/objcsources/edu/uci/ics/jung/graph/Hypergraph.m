//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/edu/uci/ics/jung/graph/Hypergraph.java
//


#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/graph/Hypergraph.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "java/util/Collection.h"

@interface EduUciIcsJungGraphHypergraph : NSObject
@end

@implementation EduUciIcsJungGraphHypergraph

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getEdges", NULL, "Ljava.util.Collection;", 0x401, NULL, NULL },
    { "getVertices", NULL, "Ljava.util.Collection;", 0x401, NULL, NULL },
    { "containsVertexWithId:", "containsVertex", "Z", 0x401, NULL, "(TV;)Z" },
    { "containsEdgeWithId:", "containsEdge", "Z", 0x401, NULL, "(TE;)Z" },
    { "getEdgeCount", NULL, "I", 0x401, NULL, NULL },
    { "getVertexCount", NULL, "I", 0x401, NULL, NULL },
    { "getNeighborsWithId:", "getNeighbors", "Ljava.util.Collection;", 0x401, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getIncidentEdgesWithId:", "getIncidentEdges", "Ljava.util.Collection;", 0x401, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getIncidentVerticesWithId:", "getIncidentVertices", "Ljava.util.Collection;", 0x401, NULL, "(TE;)Ljava/util/Collection<TV;>;" },
    { "findEdgeWithId:withId:", "findEdge", "TE;", 0x401, NULL, "(TV;TV;)TE;" },
    { "findEdgeSetWithId:withId:", "findEdgeSet", "Ljava.util.Collection;", 0x401, NULL, "(TV;TV;)Ljava/util/Collection<TE;>;" },
    { "addVertexWithId:", "addVertex", "Z", 0x401, NULL, "(TV;)Z" },
    { "addEdgeWithId:withJavaUtilCollection:", "addEdge", "Z", 0x401, NULL, "(TE;Ljava/util/Collection<+TV;>;)Z" },
    { "addEdgeWithId:withJavaUtilCollection:withEduUciIcsJungGraphUtilEdgeTypeEnum:", "addEdge", "Z", 0x401, NULL, "(TE;Ljava/util/Collection<+TV;>;Ledu/uci/ics/jung/graph/util/EdgeType;)Z" },
    { "removeVertexWithId:", "removeVertex", "Z", 0x401, NULL, "(TV;)Z" },
    { "removeEdgeWithId:", "removeEdge", "Z", 0x401, NULL, "(TE;)Z" },
    { "isNeighborWithId:withId:", "isNeighbor", "Z", 0x401, NULL, "(TV;TV;)Z" },
    { "isIncidentWithId:withId:", "isIncident", "Z", 0x401, NULL, "(TV;TE;)Z" },
    { "degreeWithId:", "degree", "I", 0x401, NULL, "(TV;)I" },
    { "getNeighborCountWithId:", "getNeighborCount", "I", 0x401, NULL, "(TV;)I" },
    { "getIncidentCountWithId:", "getIncidentCount", "I", 0x401, NULL, "(TE;)I" },
    { "getEdgeTypeWithId:", "getEdgeType", "Ledu.uci.ics.jung.graph.util.EdgeType;", 0x401, NULL, "(TE;)Ledu/uci/ics/jung/graph/util/EdgeType;" },
    { "getDefaultEdgeType", NULL, "Ledu.uci.ics.jung.graph.util.EdgeType;", 0x401, NULL, NULL },
    { "getEdgesWithEduUciIcsJungGraphUtilEdgeTypeEnum:", "getEdges", "Ljava.util.Collection;", 0x401, NULL, NULL },
    { "getEdgeCountWithEduUciIcsJungGraphUtilEdgeTypeEnum:", "getEdgeCount", "I", 0x401, NULL, NULL },
    { "getInEdgesWithId:", "getInEdges", "Ljava.util.Collection;", 0x401, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getOutEdgesWithId:", "getOutEdges", "Ljava.util.Collection;", 0x401, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "inDegreeWithId:", "inDegree", "I", 0x401, NULL, "(TV;)I" },
    { "outDegreeWithId:", "outDegree", "I", 0x401, NULL, "(TV;)I" },
    { "getSourceWithId:", "getSource", "TV;", 0x401, NULL, "(TE;)TV;" },
    { "getDestWithId:", "getDest", "TV;", 0x401, NULL, "(TE;)TV;" },
    { "getPredecessorsWithId:", "getPredecessors", "Ljava.util.Collection;", 0x401, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getSuccessorsWithId:", "getSuccessors", "Ljava.util.Collection;", 0x401, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "newInstance", NULL, "Ledu.uci.ics.jung.graph.Hypergraph;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _EduUciIcsJungGraphHypergraph = { 2, "Hypergraph", "edu.uci.ics.jung.graph", NULL, 0x609, 34, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_EduUciIcsJungGraphHypergraph;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphHypergraph)
