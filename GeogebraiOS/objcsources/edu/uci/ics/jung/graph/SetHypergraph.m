//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/edu/uci/ics/jung/graph/SetHypergraph.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/graph/Hypergraph.h"
#include "edu/uci/ics/jung/graph/SetHypergraph.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/Factory.h"

@interface EduUciIcsJungGraphSetHypergraph_$1 : NSObject < OrgApacheCommonsCollections15Factory >

- (id<EduUciIcsJungGraphHypergraph>)create;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUciIcsJungGraphSetHypergraph_$1)

__attribute__((unused)) static void EduUciIcsJungGraphSetHypergraph_$1_init(EduUciIcsJungGraphSetHypergraph_$1 *self);

__attribute__((unused)) static EduUciIcsJungGraphSetHypergraph_$1 *new_EduUciIcsJungGraphSetHypergraph_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(EduUciIcsJungGraphSetHypergraph_$1)

@implementation EduUciIcsJungGraphSetHypergraph

+ (id<OrgApacheCommonsCollections15Factory>)getFactory {
  return EduUciIcsJungGraphSetHypergraph_getFactory();
}

- (instancetype)init {
  EduUciIcsJungGraphSetHypergraph_init(self);
  return self;
}

- (jboolean)addEdgeWithId:(id)hyperedge
   withJavaUtilCollection:(id<JavaUtilCollection>)to_attach {
  if (hyperedge == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"input hyperedge may not be null");
  if (to_attach == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"endpoints may not be null");
  if ([((id<JavaUtilCollection>) nil_chk(to_attach)) containsWithId:nil]) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot add an edge with a null endpoint");
  id<JavaUtilSet> new_endpoints = new_JavaUtilHashSet_initWithJavaUtilCollection_(to_attach);
  if ([((id<JavaUtilMap>) nil_chk(edges_)) containsKeyWithId:hyperedge]) {
    id<JavaUtilCollection> attached = [edges_ getWithId:hyperedge];
    if (![((id<JavaUtilCollection>) nil_chk(attached)) isEqual:new_endpoints]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"Edge ", hyperedge, @" exists in this graph with endpoints ", attached));
    }
    else return NO;
  }
  (void) [edges_ putWithId:hyperedge withId:new_endpoints];
  for (id __strong v in to_attach) {
    [self addVertexWithId:v];
    [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:v])) addWithId:hyperedge];
  }
  return YES;
}

- (jboolean)addEdgeWithId:(id)hyperedge
   withJavaUtilCollection:(id<JavaUtilCollection>)to_attach
withEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edge_type {
  if (edge_type != EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED()) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Edge type for this implementation must be EdgeType.HYPER, not ", edge_type));
  return [self addEdgeWithId:hyperedge withJavaUtilCollection:to_attach];
}

- (EduUciIcsJungGraphUtilEdgeTypeEnum *)getEdgeTypeWithId:(id)edge {
  if ([self containsEdgeWithId:edge]) return EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED();
  else return nil;
}

- (jboolean)containsVertexWithId:(id)vertex {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) keySet])) containsWithId:vertex];
}

- (jboolean)containsEdgeWithId:(id)edge {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(edges_)) keySet])) containsWithId:edge];
}

- (id<JavaUtilCollection>)getEdges {
  return [((id<JavaUtilMap>) nil_chk(edges_)) keySet];
}

- (id<JavaUtilCollection>)getVertices {
  return [((id<JavaUtilMap>) nil_chk(vertices_)) keySet];
}

- (jint)getEdgeCount {
  return [((id<JavaUtilMap>) nil_chk(edges_)) size];
}

- (jint)getVertexCount {
  return [((id<JavaUtilMap>) nil_chk(vertices_)) size];
}

- (id<JavaUtilCollection>)getNeighborsWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilSet> neighbors = new_JavaUtilHashSet_init();
  for (id __strong hyperedge in nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:vertex])) {
    [neighbors addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(edges_)) getWithId:hyperedge]];
  }
  return neighbors;
}

- (id<JavaUtilCollection>)getIncidentEdgesWithId:(id)vertex {
  return [((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:vertex];
}

- (id<JavaUtilCollection>)getIncidentVerticesWithId:(id)edge {
  return [((id<JavaUtilMap>) nil_chk(edges_)) getWithId:edge];
}

- (id)findEdgeWithId:(id)v1
              withId:(id)v2 {
  if (![self containsVertexWithId:v1] || ![self containsVertexWithId:v2]) return nil;
  for (id __strong h in nil_chk([self getIncidentEdgesWithId:v1])) {
    if ([self isIncidentWithId:v2 withId:h]) return h;
  }
  return nil;
}

- (id<JavaUtilCollection>)findEdgeSetWithId:(id)v1
                                     withId:(id)v2 {
  if (![self containsVertexWithId:v1] || ![self containsVertexWithId:v2]) return nil;
  id<JavaUtilCollection> edges = new_JavaUtilArrayList_init();
  for (id __strong h in nil_chk([self getIncidentEdgesWithId:v1])) {
    if ([self isIncidentWithId:v2 withId:h]) [edges addWithId:h];
  }
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(edges);
}

- (jboolean)addVertexWithId:(id)vertex {
  if (vertex == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot add a null vertex");
  if ([self containsVertexWithId:vertex]) return NO;
  (void) [((id<JavaUtilMap>) nil_chk(vertices_)) putWithId:vertex withId:new_JavaUtilHashSet_init()];
  return YES;
}

- (jboolean)removeVertexWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return NO;
  for (id __strong hyperedge in nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:vertex])) {
    [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(edges_)) getWithId:hyperedge])) removeWithId:vertex];
  }
  (void) [vertices_ removeWithId:vertex];
  return YES;
}

- (jboolean)removeEdgeWithId:(id)hyperedge {
  if (![self containsEdgeWithId:hyperedge]) return NO;
  for (id __strong vertex in nil_chk([((id<JavaUtilMap>) nil_chk(edges_)) getWithId:hyperedge])) {
    [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:vertex])) removeWithId:hyperedge];
  }
  (void) [edges_ removeWithId:hyperedge];
  return YES;
}

- (jboolean)isNeighborWithId:(id)v1
                      withId:(id)v2 {
  if (![self containsVertexWithId:v1] || ![self containsVertexWithId:v2]) return NO;
  if ([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:v2])) isEmpty]) return NO;
  for (id __strong hyperedge in nil_chk([vertices_ getWithId:v1])) {
    if ([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(edges_)) getWithId:hyperedge])) containsWithId:v2]) return YES;
  }
  return NO;
}

- (jboolean)isIncidentWithId:(id)vertex
                      withId:(id)edge {
  if (![self containsVertexWithId:vertex] || ![self containsEdgeWithId:edge]) return NO;
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:vertex])) containsWithId:edge];
}

- (jint)degreeWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return 0;
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:vertex])) size];
}

- (jint)getNeighborCountWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return 0;
  return [((id<JavaUtilCollection>) nil_chk([self getNeighborsWithId:vertex])) size];
}

- (jint)getIncidentCountWithId:(id)edge {
  if (![self containsEdgeWithId:edge]) return 0;
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(edges_)) getWithId:edge])) size];
}

- (jint)getEdgeCountWithEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edge_type {
  if (edge_type == EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED()) return [((id<JavaUtilMap>) nil_chk(edges_)) size];
  return 0;
}

- (id<JavaUtilCollection>)getEdgesWithEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edge_type {
  if (edge_type == EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED()) return [((id<JavaUtilMap>) nil_chk(edges_)) keySet];
  return nil;
}

- (EduUciIcsJungGraphUtilEdgeTypeEnum *)getDefaultEdgeType {
  return EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED();
}

- (id<JavaUtilCollection>)getInEdgesWithId:(id)vertex {
  return [self getIncidentEdgesWithId:vertex];
}

- (id<JavaUtilCollection>)getOutEdgesWithId:(id)vertex {
  return [self getIncidentEdgesWithId:vertex];
}

- (jint)inDegreeWithId:(id)vertex {
  return [self degreeWithId:vertex];
}

- (jint)outDegreeWithId:(id)vertex {
  return [self degreeWithId:vertex];
}

- (id)getDestWithId:(id)directed_edge {
  return nil;
}

- (id)getSourceWithId:(id)directed_edge {
  return nil;
}

- (id<JavaUtilCollection>)getPredecessorsWithId:(id)vertex {
  return [self getNeighborsWithId:vertex];
}

- (id<JavaUtilCollection>)getSuccessorsWithId:(id)vertex {
  return [self getNeighborsWithId:vertex];
}

- (EduUciIcsJungGraphSetHypergraph *)newInstance {
  return new_EduUciIcsJungGraphSetHypergraph_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFactory", NULL, "Lorg.apache.commons.collections15.Factory;", 0x9, NULL, "<V:Ljava/lang/Object;H:Ljava/lang/Object;>()Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Hypergraph<TV;TH;>;>;" },
    { "init", "SetHypergraph", NULL, 0x1, NULL, NULL },
    { "addEdgeWithId:withJavaUtilCollection:", "addEdge", "Z", 0x1, NULL, "(TH;Ljava/util/Collection<+TV;>;)Z" },
    { "addEdgeWithId:withJavaUtilCollection:withEduUciIcsJungGraphUtilEdgeTypeEnum:", "addEdge", "Z", 0x1, NULL, "(TH;Ljava/util/Collection<+TV;>;Ledu/uci/ics/jung/graph/util/EdgeType;)Z" },
    { "getEdgeTypeWithId:", "getEdgeType", "Ledu.uci.ics.jung.graph.util.EdgeType;", 0x1, NULL, "(TH;)Ledu/uci/ics/jung/graph/util/EdgeType;" },
    { "containsVertexWithId:", "containsVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "containsEdgeWithId:", "containsEdge", "Z", 0x1, NULL, "(TH;)Z" },
    { "getEdges", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getVertices", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getEdgeCount", NULL, "I", 0x1, NULL, NULL },
    { "getVertexCount", NULL, "I", 0x1, NULL, NULL },
    { "getNeighborsWithId:", "getNeighbors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getIncidentEdgesWithId:", "getIncidentEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TH;>;" },
    { "getIncidentVerticesWithId:", "getIncidentVertices", "Ljava.util.Collection;", 0x1, NULL, "(TH;)Ljava/util/Collection<TV;>;" },
    { "findEdgeWithId:withId:", "findEdge", "TH;", 0x1, NULL, "(TV;TV;)TH;" },
    { "findEdgeSetWithId:withId:", "findEdgeSet", "Ljava.util.Collection;", 0x1, NULL, "(TV;TV;)Ljava/util/Collection<TH;>;" },
    { "addVertexWithId:", "addVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeVertexWithId:", "removeVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeEdgeWithId:", "removeEdge", "Z", 0x1, NULL, "(TH;)Z" },
    { "isNeighborWithId:withId:", "isNeighbor", "Z", 0x1, NULL, "(TV;TV;)Z" },
    { "isIncidentWithId:withId:", "isIncident", "Z", 0x1, NULL, "(TV;TH;)Z" },
    { "degreeWithId:", "degree", "I", 0x1, NULL, "(TV;)I" },
    { "getNeighborCountWithId:", "getNeighborCount", "I", 0x1, NULL, "(TV;)I" },
    { "getIncidentCountWithId:", "getIncidentCount", "I", 0x1, NULL, "(TH;)I" },
    { "getEdgeCountWithEduUciIcsJungGraphUtilEdgeTypeEnum:", "getEdgeCount", "I", 0x1, NULL, NULL },
    { "getEdgesWithEduUciIcsJungGraphUtilEdgeTypeEnum:", "getEdges", "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getDefaultEdgeType", NULL, "Ledu.uci.ics.jung.graph.util.EdgeType;", 0x1, NULL, NULL },
    { "getInEdgesWithId:", "getInEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TH;>;" },
    { "getOutEdgesWithId:", "getOutEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TH;>;" },
    { "inDegreeWithId:", "inDegree", "I", 0x1, NULL, "(TV;)I" },
    { "outDegreeWithId:", "outDegree", "I", 0x1, NULL, "(TV;)I" },
    { "getDestWithId:", "getDest", "TV;", 0x1, NULL, "(TH;)TV;" },
    { "getSourceWithId:", "getSource", "TV;", 0x1, NULL, "(TH;)TV;" },
    { "getPredecessorsWithId:", "getPredecessors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getSuccessorsWithId:", "getSuccessors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "newInstance", NULL, "Ledu.uci.ics.jung.graph.SetHypergraph;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vertices_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TV;Ljava/util/Set<TH;>;>;",  },
    { "edges_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TH;Ljava/util/Set<TV;>;>;",  },
  };
  static const J2ObjcClassInfo _EduUciIcsJungGraphSetHypergraph = { 2, "SetHypergraph", "edu.uci.ics.jung.graph", NULL, 0x1, 36, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<V:Ljava/lang/Object;H:Ljava/lang/Object;>Ljava/lang/Object;Ledu/uci/ics/jung/graph/Hypergraph<TV;TH;>;Ledu/uci/ics/jung/graph/MultiGraph<TV;TH;>;Ljava/io/Serializable;" };
  return &_EduUciIcsJungGraphSetHypergraph;
}

@end

id<OrgApacheCommonsCollections15Factory> EduUciIcsJungGraphSetHypergraph_getFactory() {
  EduUciIcsJungGraphSetHypergraph_initialize();
  return new_EduUciIcsJungGraphSetHypergraph_$1_init();
}

void EduUciIcsJungGraphSetHypergraph_init(EduUciIcsJungGraphSetHypergraph *self) {
  (void) NSObject_init(self);
  self->vertices_ = new_JavaUtilHashMap_init();
  self->edges_ = new_JavaUtilHashMap_init();
}

EduUciIcsJungGraphSetHypergraph *new_EduUciIcsJungGraphSetHypergraph_init() {
  EduUciIcsJungGraphSetHypergraph *self = [EduUciIcsJungGraphSetHypergraph alloc];
  EduUciIcsJungGraphSetHypergraph_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphSetHypergraph)

@implementation EduUciIcsJungGraphSetHypergraph_$1

- (id<EduUciIcsJungGraphHypergraph>)create {
  return new_EduUciIcsJungGraphSetHypergraph_init();
}

- (instancetype)init {
  EduUciIcsJungGraphSetHypergraph_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Ledu.uci.ics.jung.graph.Hypergraph;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "EduUciIcsJungGraphSetHypergraph", "getFactory" };
  static const J2ObjcClassInfo _EduUciIcsJungGraphSetHypergraph_$1 = { 2, "", "edu.uci.ics.jung.graph", "SetHypergraph", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Hypergraph<TV;TH;>;>;" };
  return &_EduUciIcsJungGraphSetHypergraph_$1;
}

@end

void EduUciIcsJungGraphSetHypergraph_$1_init(EduUciIcsJungGraphSetHypergraph_$1 *self) {
  (void) NSObject_init(self);
}

EduUciIcsJungGraphSetHypergraph_$1 *new_EduUciIcsJungGraphSetHypergraph_$1_init() {
  EduUciIcsJungGraphSetHypergraph_$1 *self = [EduUciIcsJungGraphSetHypergraph_$1 alloc];
  EduUciIcsJungGraphSetHypergraph_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphSetHypergraph_$1)
