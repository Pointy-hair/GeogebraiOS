//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/edu/uci/ics/jung/graph/DelegateTree.java
//


#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/graph/DelegateTree.h"
#include "edu/uci/ics/jung/graph/DirectedGraph.h"
#include "edu/uci/ics/jung/graph/DirectedSparseMultigraph.h"
#include "edu/uci/ics/jung/graph/Graph.h"
#include "edu/uci/ics/jung/graph/GraphDecorator.h"
#include "edu/uci/ics/jung/graph/Tree.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "edu/uci/ics/jung/graph/util/Pair.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/Factory.h"

@interface EduUciIcsJungGraphDelegateTree_$1 : NSObject < OrgApacheCommonsCollections15Factory >

- (id<EduUciIcsJungGraphTree>)create;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUciIcsJungGraphDelegateTree_$1)

__attribute__((unused)) static void EduUciIcsJungGraphDelegateTree_$1_init(EduUciIcsJungGraphDelegateTree_$1 *self);

__attribute__((unused)) static EduUciIcsJungGraphDelegateTree_$1 *new_EduUciIcsJungGraphDelegateTree_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(EduUciIcsJungGraphDelegateTree_$1)

@implementation EduUciIcsJungGraphDelegateTree

+ (id<OrgApacheCommonsCollections15Factory>)getFactory {
  return EduUciIcsJungGraphDelegateTree_getFactory();
}

- (instancetype)init {
  EduUciIcsJungGraphDelegateTree_init(self);
  return self;
}

- (instancetype)initWithOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)graphFactory {
  EduUciIcsJungGraphDelegateTree_initWithOrgApacheCommonsCollections15Factory_(self, graphFactory);
  return self;
}

- (instancetype)initWithEduUciIcsJungGraphDirectedGraph:(id<EduUciIcsJungGraphDirectedGraph>)graph {
  EduUciIcsJungGraphDelegateTree_initWithEduUciIcsJungGraphDirectedGraph_(self, graph);
  return self;
}

- (jboolean)addEdgeWithId:(id)e
                   withId:(id)v1
                   withId:(id)v2
withEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edgeType {
  return [self addChildWithId:e withId:v1 withId:v2 withEduUciIcsJungGraphUtilEdgeTypeEnum:edgeType];
}

- (jboolean)addEdgeWithId:(id)e
                   withId:(id)v1
                   withId:(id)v2 {
  return [self addChildWithId:e withId:v1 withId:v2];
}

- (jboolean)addVertexWithId:(id)vertex {
  if (root_ == nil) {
    self->root_ = vertex;
    (void) [((id<JavaUtilMap>) nil_chk(vertex_depths_)) putWithId:vertex withId:JavaLangInteger_valueOfWithInt_(0)];
    return [((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) addVertexWithId:vertex];
  }
  else {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Unless you are setting the root, use addChild()");
  }
}

- (jboolean)removeVertexWithId:(id)vertex {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:vertex]) return NO;
  for (id __strong v in nil_chk([self getChildrenWithId:vertex])) {
    [self removeVertexWithId:v];
    (void) [((id<JavaUtilMap>) nil_chk(vertex_depths_)) removeWithId:v];
  }
  (void) [((id<JavaUtilMap>) nil_chk(vertex_depths_)) removeWithId:vertex];
  return [delegate_ removeVertexWithId:vertex];
}

- (jboolean)addChildWithId:(id)edge
                    withId:(id)parent
                    withId:(id)child
withEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edgeType {
  id<JavaUtilCollection> vertices = [((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) getVertices];
  if ([((id<JavaUtilCollection>) nil_chk(vertices)) containsWithId:parent] == NO) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Tree must already contain parent ", parent));
  }
  if ([vertices containsWithId:child]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Tree must not already contain child ", child));
  }
  (void) [vertex_depths_ putWithId:child withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(vertex_depths_)) getWithId:parent])) intValue] + 1)];
  return [delegate_ addEdgeWithId:edge withId:parent withId:child withEduUciIcsJungGraphUtilEdgeTypeEnum:edgeType];
}

- (jboolean)addChildWithId:(id)edge
                    withId:(id)parent
                    withId:(id)child {
  id<JavaUtilCollection> vertices = [((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) getVertices];
  if ([((id<JavaUtilCollection>) nil_chk(vertices)) containsWithId:parent] == NO) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Tree must already contain parent ", parent));
  }
  if ([vertices containsWithId:child]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Tree must not already contain child ", child));
  }
  (void) [vertex_depths_ putWithId:child withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(vertex_depths_)) getWithId:parent])) intValue] + 1)];
  return [delegate_ addEdgeWithId:edge withId:parent withId:child];
}

- (jint)getChildCountWithId:(id)parent {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:parent]) return 0;
  return [((id<JavaUtilCollection>) nil_chk([self getChildrenWithId:parent])) size];
}

- (id<JavaUtilCollection>)getChildrenWithId:(id)parent {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:parent]) return nil;
  return [delegate_ getSuccessorsWithId:parent];
}

- (id)getParentWithId:(id)child {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:child]) return nil;
  id<JavaUtilCollection> predecessors = [delegate_ getPredecessorsWithId:child];
  if ([((id<JavaUtilCollection>) nil_chk(predecessors)) size] == 0) {
    return nil;
  }
  return [((id<JavaUtilIterator>) nil_chk([predecessors iterator])) next];
}

- (id<JavaUtilList>)getPathWithId:(id)vertex {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:vertex]) return nil;
  id<JavaUtilList> vertex_to_root = new_JavaUtilArrayList_init();
  [vertex_to_root addWithId:vertex];
  id parent = [self getParentWithId:vertex];
  while (parent != nil) {
    [vertex_to_root addWithId:parent];
    parent = [self getParentWithId:parent];
  }
  id<JavaUtilList> root_to_vertex = new_JavaUtilArrayList_initWithInt_([vertex_to_root size]);
  for (jint i = [vertex_to_root size] - 1; i >= 0; i--) [root_to_vertex addWithId:[vertex_to_root getWithInt:i]];
  return root_to_vertex;
}

- (id)getRoot {
  return root_;
}

- (void)setRootWithId:(id)root {
  [self addVertexWithId:root];
}

- (jboolean)removeChildWithId:(id)orphan {
  return [self removeVertexWithId:orphan];
}

- (jint)getDepthWithId:(id)v {
  return [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(self->vertex_depths_)) getWithId:v])) intValue];
}

- (jint)getHeight {
  jint height = 0;
  for (id __strong v in nil_chk([self getVertices])) {
    height = JavaLangMath_maxWithInt_withInt_(height, [self getDepthWithId:v]);
  }
  return height;
}

- (jboolean)isInternalWithId:(id)v {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:v]) return NO;
  return [self isLeafWithId:v] == NO && [self isRootWithId:v] == NO;
}

- (jboolean)isLeafWithId:(id)v {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:v]) return NO;
  return [((id<JavaUtilCollection>) nil_chk([self getChildrenWithId:v])) size] == 0;
}

- (jboolean)isRootWithId:(id)v {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:v]) return NO;
  return [self getParentWithId:v] == nil;
}

- (jint)getIncidentCountWithId:(id)edge {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsEdgeWithId:edge]) return 0;
  return 2;
}

- (jboolean)addEdgeWithId:(id)edge
   withJavaUtilCollection:(id<JavaUtilCollection>)vertices {
  EduUciIcsJungGraphUtilPair *pair = nil;
  if ([vertices isKindOfClass:[EduUciIcsJungGraphUtilPair class]]) {
    pair = (EduUciIcsJungGraphUtilPair *) check_class_cast(vertices, [EduUciIcsJungGraphUtilPair class]);
  }
  else {
    pair = new_EduUciIcsJungGraphUtilPair_initWithJavaUtilCollection_(vertices);
  }
  return [self addEdgeWithId:edge withId:[((EduUciIcsJungGraphUtilPair *) nil_chk(pair)) getFirst] withId:[pair getSecond]];
}

- (NSString *)description {
  return JreStrcat("$$", @"Tree of ", [((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) description]);
}

- (id<JavaUtilCollection>)getTrees {
  return JavaUtilCollections_singletonWithId_(self);
}

- (id<JavaUtilCollection>)getChildEdgesWithId:(id)vertex {
  return [self getOutEdgesWithId:vertex];
}

- (id)getParentEdgeWithId:(id)vertex {
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([self getInEdgesWithId:vertex])) iterator])) next];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFactory", NULL, "Lorg.apache.commons.collections15.Factory;", 0x19, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>()Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Tree<TV;TE;>;>;" },
    { "init", "DelegateTree", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsCollections15Factory:", "DelegateTree", NULL, 0x1, NULL, NULL },
    { "initWithEduUciIcsJungGraphDirectedGraph:", "DelegateTree", NULL, 0x1, NULL, NULL },
    { "addEdgeWithId:withId:withId:withEduUciIcsJungGraphUtilEdgeTypeEnum:", "addEdge", "Z", 0x1, NULL, "(TE;TV;TV;Ledu/uci/ics/jung/graph/util/EdgeType;)Z" },
    { "addEdgeWithId:withId:withId:", "addEdge", "Z", 0x1, NULL, "(TE;TV;TV;)Z" },
    { "addVertexWithId:", "addVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeVertexWithId:", "removeVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "addChildWithId:withId:withId:withEduUciIcsJungGraphUtilEdgeTypeEnum:", "addChild", "Z", 0x1, NULL, "(TE;TV;TV;Ledu/uci/ics/jung/graph/util/EdgeType;)Z" },
    { "addChildWithId:withId:withId:", "addChild", "Z", 0x1, NULL, "(TE;TV;TV;)Z" },
    { "getChildCountWithId:", "getChildCount", "I", 0x1, NULL, "(TV;)I" },
    { "getChildrenWithId:", "getChildren", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getParentWithId:", "getParent", "TV;", 0x1, NULL, "(TV;)TV;" },
    { "getPathWithId:", "getPath", "Ljava.util.List;", 0x1, NULL, "(TV;)Ljava/util/List<TV;>;" },
    { "getRoot", NULL, "TV;", 0x1, NULL, "()TV;" },
    { "setRootWithId:", "setRoot", "V", 0x1, NULL, "(TV;)V" },
    { "removeChildWithId:", "removeChild", "Z", 0x1, NULL, "(TV;)Z" },
    { "getDepthWithId:", "getDepth", "I", 0x1, NULL, "(TV;)I" },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "isInternalWithId:", "isInternal", "Z", 0x1, NULL, "(TV;)Z" },
    { "isLeafWithId:", "isLeaf", "Z", 0x1, NULL, "(TV;)Z" },
    { "isRootWithId:", "isRoot", "Z", 0x1, NULL, "(TV;)Z" },
    { "getIncidentCountWithId:", "getIncidentCount", "I", 0x1, NULL, "(TE;)I" },
    { "addEdgeWithId:withJavaUtilCollection:", "addEdge", "Z", 0x1, NULL, "(TE;Ljava/util/Collection<+TV;>;)Z" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTrees", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getChildEdgesWithId:", "getChildEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getParentEdgeWithId:", "getParentEdge", "TE;", 0x1, NULL, "(TV;)TE;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x4, "TV;", NULL, "TV;",  },
    { "vertex_depths_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TV;Ljava/lang/Integer;>;",  },
  };
  static const char *superclass_type_args[] = {"TV;", "TE;"};
  static const J2ObjcClassInfo _EduUciIcsJungGraphDelegateTree = { 2, "DelegateTree", "edu.uci.ics.jung.graph", NULL, 0x1, 28, methods, 2, fields, 2, superclass_type_args, 0, NULL, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ledu/uci/ics/jung/graph/GraphDecorator<TV;TE;>;Ledu/uci/ics/jung/graph/Tree<TV;TE;>;" };
  return &_EduUciIcsJungGraphDelegateTree;
}

@end

id<OrgApacheCommonsCollections15Factory> EduUciIcsJungGraphDelegateTree_getFactory() {
  EduUciIcsJungGraphDelegateTree_initialize();
  return new_EduUciIcsJungGraphDelegateTree_$1_init();
}

void EduUciIcsJungGraphDelegateTree_init(EduUciIcsJungGraphDelegateTree *self) {
  (void) EduUciIcsJungGraphDelegateTree_initWithOrgApacheCommonsCollections15Factory_(self, EduUciIcsJungGraphDirectedSparseMultigraph_getFactory());
}

EduUciIcsJungGraphDelegateTree *new_EduUciIcsJungGraphDelegateTree_init() {
  EduUciIcsJungGraphDelegateTree *self = [EduUciIcsJungGraphDelegateTree alloc];
  EduUciIcsJungGraphDelegateTree_init(self);
  return self;
}

void EduUciIcsJungGraphDelegateTree_initWithOrgApacheCommonsCollections15Factory_(EduUciIcsJungGraphDelegateTree *self, id<OrgApacheCommonsCollections15Factory> graphFactory) {
  (void) EduUciIcsJungGraphGraphDecorator_initWithEduUciIcsJungGraphGraph_(self, [((id<OrgApacheCommonsCollections15Factory>) nil_chk(graphFactory)) create]);
  self->vertex_depths_ = new_JavaUtilHashMap_init();
}

EduUciIcsJungGraphDelegateTree *new_EduUciIcsJungGraphDelegateTree_initWithOrgApacheCommonsCollections15Factory_(id<OrgApacheCommonsCollections15Factory> graphFactory) {
  EduUciIcsJungGraphDelegateTree *self = [EduUciIcsJungGraphDelegateTree alloc];
  EduUciIcsJungGraphDelegateTree_initWithOrgApacheCommonsCollections15Factory_(self, graphFactory);
  return self;
}

void EduUciIcsJungGraphDelegateTree_initWithEduUciIcsJungGraphDirectedGraph_(EduUciIcsJungGraphDelegateTree *self, id<EduUciIcsJungGraphDirectedGraph> graph) {
  (void) EduUciIcsJungGraphGraphDecorator_initWithEduUciIcsJungGraphGraph_(self, graph);
  self->vertex_depths_ = new_JavaUtilHashMap_init();
}

EduUciIcsJungGraphDelegateTree *new_EduUciIcsJungGraphDelegateTree_initWithEduUciIcsJungGraphDirectedGraph_(id<EduUciIcsJungGraphDirectedGraph> graph) {
  EduUciIcsJungGraphDelegateTree *self = [EduUciIcsJungGraphDelegateTree alloc];
  EduUciIcsJungGraphDelegateTree_initWithEduUciIcsJungGraphDirectedGraph_(self, graph);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphDelegateTree)

@implementation EduUciIcsJungGraphDelegateTree_$1

- (id<EduUciIcsJungGraphTree>)create {
  return new_EduUciIcsJungGraphDelegateTree_initWithEduUciIcsJungGraphDirectedGraph_(new_EduUciIcsJungGraphDirectedSparseMultigraph_init());
}

- (instancetype)init {
  EduUciIcsJungGraphDelegateTree_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Ledu.uci.ics.jung.graph.Tree;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "EduUciIcsJungGraphDelegateTree", "getFactory" };
  static const J2ObjcClassInfo _EduUciIcsJungGraphDelegateTree_$1 = { 2, "", "edu.uci.ics.jung.graph", "DelegateTree", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Tree<TV;TE;>;>;" };
  return &_EduUciIcsJungGraphDelegateTree_$1;
}

@end

void EduUciIcsJungGraphDelegateTree_$1_init(EduUciIcsJungGraphDelegateTree_$1 *self) {
  (void) NSObject_init(self);
}

EduUciIcsJungGraphDelegateTree_$1 *new_EduUciIcsJungGraphDelegateTree_$1_init() {
  EduUciIcsJungGraphDelegateTree_$1 *self = [EduUciIcsJungGraphDelegateTree_$1 alloc];
  EduUciIcsJungGraphDelegateTree_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphDelegateTree_$1)
