//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/edu/uci/ics/jung/graph/DelegateForest.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/graph/DelegateForest.h"
#include "edu/uci/ics/jung/graph/DelegateTree.h"
#include "edu/uci/ics/jung/graph/DirectedGraph.h"
#include "edu/uci/ics/jung/graph/DirectedSparseGraph.h"
#include "edu/uci/ics/jung/graph/Graph.h"
#include "edu/uci/ics/jung/graph/GraphDecorator.h"
#include "edu/uci/ics/jung/graph/Tree.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "edu/uci/ics/jung/graph/util/Pair.h"
#include "edu/uci/ics/jung/graph/util/TreeUtils.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@implementation EduUciIcsJungGraphDelegateForest

- (instancetype)init {
  EduUciIcsJungGraphDelegateForest_init(self);
  return self;
}

- (instancetype)initWithEduUciIcsJungGraphDirectedGraph:(id<EduUciIcsJungGraphDirectedGraph>)delegate {
  EduUciIcsJungGraphDelegateForest_initWithEduUciIcsJungGraphDirectedGraph_(self, delegate);
  return self;
}

- (jboolean)addEdgeWithId:(id)e
                   withId:(id)v1
                   withId:(id)v2
withEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edgeType {
  if ([((id<JavaUtilCollection>) nil_chk([((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) getVertices])) containsWithId:v1] == NO) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Tree must already contain ", v1)) autorelease];
  }
  if ([((id<JavaUtilCollection>) nil_chk([delegate_ getVertices])) containsWithId:v2]) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Tree must not already contain ", v2)) autorelease];
  }
  return [delegate_ addEdgeWithId:e withId:v1 withId:v2 withEduUciIcsJungGraphUtilEdgeTypeEnum:edgeType];
}

- (jboolean)addVertexWithId:(id)vertex {
  [self setRootWithId:vertex];
  return YES;
}

- (jboolean)removeEdgeWithId:(id)edge {
  return [self removeEdgeWithId:edge withBoolean:YES];
}

- (jboolean)removeEdgeWithId:(id)edge
                 withBoolean:(jboolean)remove_subtree {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsEdgeWithId:edge]) return NO;
  id child = [self getDestWithId:edge];
  if (remove_subtree) return [self removeVertexWithId:child];
  else {
    [delegate_ removeEdgeWithId:edge];
    return NO;
  }
}

- (jboolean)removeVertexWithId:(id)vertex {
  return [self removeVertexWithId:vertex withBoolean:YES];
}

- (jboolean)removeVertexWithId:(id)vertex
                   withBoolean:(jboolean)remove_subtrees {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:vertex]) return NO;
  if (remove_subtrees) for (id __strong v in [new_JavaUtilArrayList_initWithJavaUtilCollection_([delegate_ getSuccessorsWithId:vertex]) autorelease]) [self removeVertexWithId:v withBoolean:YES];
  return [delegate_ removeVertexWithId:vertex];
}

- (id<JavaUtilList>)getPathWithId:(id)child {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:child]) return nil;
  id<JavaUtilList> list = [new_JavaUtilArrayList_init() autorelease];
  [list addWithId:child];
  id parent = [self getParentWithId:child];
  while (parent != nil) {
    [list addWithInt:[list size] withId:parent];
    parent = [self getParentWithId:parent];
  }
  return list;
}

- (id)getParentWithId:(id)child {
  if (![((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) containsVertexWithId:child]) return nil;
  id<JavaUtilCollection> parents = [delegate_ getPredecessorsWithId:child];
  if ([((id<JavaUtilCollection>) nil_chk(parents)) size] > 0) {
    return [((id<JavaUtilIterator>) nil_chk([parents iterator])) next];
  }
  return nil;
}

- (id)getRoot {
  return nil;
}

- (void)setRootWithId:(id)root {
  [((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) addVertexWithId:root];
}

- (jboolean)removeChildWithId:(id)orphan {
  return [self removeVertexWithId:orphan];
}

- (jint)getDepthWithId:(id)v {
  return [((id<JavaUtilList>) nil_chk([self getPathWithId:v])) size];
}

- (jint)getHeight {
  jint height = 0;
  for (id __strong v in nil_chk([self getVertices])) {
    height = JavaLangMath_maxWithInt_withInt_(height, [self getDepthWithId:v]);
  }
  return height;
}

- (jboolean)isInternalWithId:(id)v {
  return [self isLeafWithId:v] == NO && [self isRootWithId:v] == NO;
}

- (jboolean)isLeafWithId:(id)v {
  return [((id<JavaUtilCollection>) nil_chk([self getChildrenWithId:v])) size] == 0;
}

- (id<JavaUtilCollection>)getChildrenWithId:(id)v {
  return [((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) getSuccessorsWithId:v];
}

- (jboolean)isRootWithId:(id)v {
  return [self getParentWithId:v] == nil;
}

- (jint)getIncidentCountWithId:(id)edge {
  return 2;
}

- (jboolean)addEdgeWithId:(id)edge
   withJavaUtilCollection:(id<JavaUtilCollection>)vertices {
  EduUciIcsJungGraphUtilPair *pair = nil;
  if ([vertices isKindOfClass:[EduUciIcsJungGraphUtilPair class]]) {
    pair = (EduUciIcsJungGraphUtilPair *) check_class_cast(vertices, [EduUciIcsJungGraphUtilPair class]);
  }
  else {
    pair = [new_EduUciIcsJungGraphUtilPair_initWithJavaUtilCollection_(vertices) autorelease];
  }
  return [self addEdgeWithId:edge withId:[((EduUciIcsJungGraphUtilPair *) nil_chk(pair)) getFirst] withId:[pair getSecond]];
}

- (id<JavaUtilCollection>)getRoots {
  id<JavaUtilCollection> roots = [new_JavaUtilHashSet_init() autorelease];
  for (id __strong v in nil_chk([((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) getVertices])) {
    if ([delegate_ getPredecessorCountWithId:v] == 0) {
      [roots addWithId:v];
    }
  }
  return roots;
}

- (id<JavaUtilCollection>)getTrees {
  id<JavaUtilCollection> trees = [new_JavaUtilHashSet_init() autorelease];
  for (id __strong v in nil_chk([self getRoots])) {
    id<EduUciIcsJungGraphTree> tree = [new_EduUciIcsJungGraphDelegateTree_init() autorelease];
    [tree addVertexWithId:v];
    EduUciIcsJungGraphUtilTreeUtils_growSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_(self, tree, v);
    [trees addWithId:tree];
  }
  return trees;
}

- (void)addTreeWithEduUciIcsJungGraphTree:(id<EduUciIcsJungGraphTree>)tree {
  EduUciIcsJungGraphUtilTreeUtils_addSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_withId_(self, tree, nil, nil);
}

- (jint)getChildCountWithId:(id)vertex {
  return [((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) getSuccessorCountWithId:vertex];
}

- (id<JavaUtilCollection>)getChildEdgesWithId:(id)vertex {
  return [((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) getOutEdgesWithId:vertex];
}

- (id)getParentEdgeWithId:(id)vertex {
  if ([self isRootWithId:vertex]) return nil;
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([((id<EduUciIcsJungGraphGraph>) nil_chk(delegate_)) getInEdgesWithId:vertex])) iterator])) next];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DelegateForest", NULL, 0x1, NULL, NULL },
    { "initWithEduUciIcsJungGraphDirectedGraph:", "DelegateForest", NULL, 0x1, NULL, NULL },
    { "addEdgeWithId:withId:withId:withEduUciIcsJungGraphUtilEdgeTypeEnum:", "addEdge", "Z", 0x1, NULL, "(TE;TV;TV;Ledu/uci/ics/jung/graph/util/EdgeType;)Z" },
    { "addVertexWithId:", "addVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeEdgeWithId:", "removeEdge", "Z", 0x1, NULL, "(TE;)Z" },
    { "removeEdgeWithId:withBoolean:", "removeEdge", "Z", 0x1, NULL, "(TE;Z)Z" },
    { "removeVertexWithId:", "removeVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeVertexWithId:withBoolean:", "removeVertex", "Z", 0x1, NULL, "(TV;Z)Z" },
    { "getPathWithId:", "getPath", "Ljava.util.List;", 0x1, NULL, "(TV;)Ljava/util/List<TV;>;" },
    { "getParentWithId:", "getParent", "TV;", 0x1, NULL, "(TV;)TV;" },
    { "getRoot", NULL, "TV;", 0x1, NULL, "()TV;" },
    { "setRootWithId:", "setRoot", "V", 0x1, NULL, "(TV;)V" },
    { "removeChildWithId:", "removeChild", "Z", 0x1, NULL, "(TV;)Z" },
    { "getDepthWithId:", "getDepth", "I", 0x1, NULL, "(TV;)I" },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "isInternalWithId:", "isInternal", "Z", 0x1, NULL, "(TV;)Z" },
    { "isLeafWithId:", "isLeaf", "Z", 0x1, NULL, "(TV;)Z" },
    { "getChildrenWithId:", "getChildren", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "isRootWithId:", "isRoot", "Z", 0x1, NULL, "(TV;)Z" },
    { "getIncidentCountWithId:", "getIncidentCount", "I", 0x1, NULL, "(TE;)I" },
    { "addEdgeWithId:withJavaUtilCollection:", "addEdge", "Z", 0x1, NULL, "(TE;Ljava/util/Collection<+TV;>;)Z" },
    { "getRoots", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getTrees", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "addTreeWithEduUciIcsJungGraphTree:", "addTree", "V", 0x1, NULL, NULL },
    { "getChildCountWithId:", "getChildCount", "I", 0x1, NULL, "(TV;)I" },
    { "getChildEdgesWithId:", "getChildEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getParentEdgeWithId:", "getParentEdge", "TE;", 0x1, NULL, "(TV;)TE;" },
  };
  static const char *superclass_type_args[] = {"TV;", "TE;"};
  static const J2ObjcClassInfo _EduUciIcsJungGraphDelegateForest = { 2, "DelegateForest", "edu.uci.ics.jung.graph", NULL, 0x1, 27, methods, 0, NULL, 2, superclass_type_args, 0, NULL, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ledu/uci/ics/jung/graph/GraphDecorator<TV;TE;>;Ledu/uci/ics/jung/graph/Forest<TV;TE;>;" };
  return &_EduUciIcsJungGraphDelegateForest;
}

@end

void EduUciIcsJungGraphDelegateForest_init(EduUciIcsJungGraphDelegateForest *self) {
  EduUciIcsJungGraphDelegateForest_initWithEduUciIcsJungGraphDirectedGraph_(self, [new_EduUciIcsJungGraphDirectedSparseGraph_init() autorelease]);
}

EduUciIcsJungGraphDelegateForest *new_EduUciIcsJungGraphDelegateForest_init() {
  EduUciIcsJungGraphDelegateForest *self = [EduUciIcsJungGraphDelegateForest alloc];
  EduUciIcsJungGraphDelegateForest_init(self);
  return self;
}

void EduUciIcsJungGraphDelegateForest_initWithEduUciIcsJungGraphDirectedGraph_(EduUciIcsJungGraphDelegateForest *self, id<EduUciIcsJungGraphDirectedGraph> delegate) {
  EduUciIcsJungGraphGraphDecorator_initWithEduUciIcsJungGraphGraph_(self, delegate);
}

EduUciIcsJungGraphDelegateForest *new_EduUciIcsJungGraphDelegateForest_initWithEduUciIcsJungGraphDirectedGraph_(id<EduUciIcsJungGraphDirectedGraph> delegate) {
  EduUciIcsJungGraphDelegateForest *self = [EduUciIcsJungGraphDelegateForest alloc];
  EduUciIcsJungGraphDelegateForest_initWithEduUciIcsJungGraphDirectedGraph_(self, delegate);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphDelegateForest)
