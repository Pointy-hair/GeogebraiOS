//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/edu/uci/ics/jung/graph/SparseGraph.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/graph/AbstractGraph.h"
#include "edu/uci/ics/jung/graph/Graph.h"
#include "edu/uci/ics/jung/graph/SparseGraph.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "edu/uci/ics/jung/graph/util/Pair.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/Factory.h"

@interface EduUciIcsJungGraphSparseGraph_$1 : NSObject < OrgApacheCommonsCollections15Factory >

- (id<EduUciIcsJungGraphGraph>)create;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUciIcsJungGraphSparseGraph_$1)

__attribute__((unused)) static void EduUciIcsJungGraphSparseGraph_$1_init(EduUciIcsJungGraphSparseGraph_$1 *self);

__attribute__((unused)) static EduUciIcsJungGraphSparseGraph_$1 *new_EduUciIcsJungGraphSparseGraph_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(EduUciIcsJungGraphSparseGraph_$1)

@implementation EduUciIcsJungGraphSparseGraph

+ (id<OrgApacheCommonsCollections15Factory>)getFactory {
  return EduUciIcsJungGraphSparseGraph_getFactory();
}

- (instancetype)init {
  EduUciIcsJungGraphSparseGraph_init(self);
  return self;
}

- (id)findEdgeWithId:(id)v1
              withId:(id)v2 {
  if (![self containsVertexWithId:v1] || ![self containsVertexWithId:v2]) return nil;
  id edge = [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:v1]), EduUciIcsJungGraphSparseGraph_OUTGOING))) getWithId:v2];
  if (edge == nil) edge = [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:v1]), EduUciIcsJungGraphSparseGraph_INCIDENT))) getWithId:v2];
  return edge;
}

- (id<JavaUtilCollection>)findEdgeSetWithId:(id)v1
                                     withId:(id)v2 {
  if (![self containsVertexWithId:v1] || ![self containsVertexWithId:v2]) return nil;
  id<JavaUtilCollection> edges = new_JavaUtilArrayList_initWithInt_(2);
  id e1 = [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:v1]), EduUciIcsJungGraphSparseGraph_OUTGOING))) getWithId:v2];
  if (e1 != nil) [edges addWithId:e1];
  id e2 = [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:v1]), EduUciIcsJungGraphSparseGraph_INCIDENT))) getWithId:v2];
  if (e1 != nil) [edges addWithId:e2];
  return edges;
}

- (jboolean)addEdgeWithId:(id)edge
withEduUciIcsJungGraphUtilPair:(EduUciIcsJungGraphUtilPair *)endpoints
withEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edgeType {
  EduUciIcsJungGraphUtilPair *new_endpoints = [self getValidatedEndpointsWithId:edge withEduUciIcsJungGraphUtilPair:endpoints];
  if (new_endpoints == nil) return NO;
  id v1 = [((EduUciIcsJungGraphUtilPair *) nil_chk(new_endpoints)) getFirst];
  id v2 = [new_endpoints getSecond];
  id connection = [self findEdgeWithId:v1 withId:v2];
  if (connection != nil && [self getEdgeTypeWithId:connection] == edgeType) return NO;
  if (![self containsVertexWithId:v1]) [self addVertexWithId:v1];
  if (![self containsVertexWithId:v2]) [self addVertexWithId:v2];
  if (edgeType == EduUciIcsJungGraphUtilEdgeTypeEnum_get_DIRECTED()) {
    (void) [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:v1]), EduUciIcsJungGraphSparseGraph_OUTGOING))) putWithId:v2 withId:edge];
    (void) [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:v2]), EduUciIcsJungGraphSparseGraph_INCOMING))) putWithId:v1 withId:edge];
    (void) [((id<JavaUtilMap>) nil_chk(directed_edges_)) putWithId:edge withId:new_endpoints];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:v1]), EduUciIcsJungGraphSparseGraph_INCIDENT))) putWithId:v2 withId:edge];
    (void) [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:v2]), EduUciIcsJungGraphSparseGraph_INCIDENT))) putWithId:v1 withId:edge];
    (void) [((id<JavaUtilMap>) nil_chk(undirected_edges_)) putWithId:edge withId:new_endpoints];
  }
  return YES;
}

- (id<JavaUtilCollection>)getInEdgesWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilCollection> in = new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCOMING))) values]);
  [in addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCIDENT))) values]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(in);
}

- (id<JavaUtilCollection>)getOutEdgesWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilCollection> out = new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:vertex]), EduUciIcsJungGraphSparseGraph_OUTGOING))) values]);
  [out addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCIDENT))) values]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(out);
}

- (id<JavaUtilCollection>)getPredecessorsWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilCollection> preds = new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCOMING))) keySet]);
  [preds addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCIDENT))) keySet]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(preds);
}

- (id<JavaUtilCollection>)getSuccessorsWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilCollection> succs = new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:vertex]), EduUciIcsJungGraphSparseGraph_OUTGOING))) keySet]);
  [succs addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCIDENT))) keySet]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(succs);
}

- (id<JavaUtilCollection>)getEdgesWithEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edgeType {
  if (edgeType == EduUciIcsJungGraphUtilEdgeTypeEnum_get_DIRECTED()) return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(directed_edges_)) keySet]);
  else if (edgeType == EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED()) return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(undirected_edges_)) keySet]);
  else return nil;
}

- (EduUciIcsJungGraphUtilPair *)getEndpointsWithId:(id)edge {
  EduUciIcsJungGraphUtilPair *endpoints;
  endpoints = [((id<JavaUtilMap>) nil_chk(directed_edges_)) getWithId:edge];
  if (endpoints == nil) return [((id<JavaUtilMap>) nil_chk(undirected_edges_)) getWithId:edge];
  else return endpoints;
}

- (EduUciIcsJungGraphUtilEdgeTypeEnum *)getEdgeTypeWithId:(id)edge {
  if ([((id<JavaUtilMap>) nil_chk(directed_edges_)) containsKeyWithId:edge]) return EduUciIcsJungGraphUtilEdgeTypeEnum_get_DIRECTED();
  else if ([((id<JavaUtilMap>) nil_chk(undirected_edges_)) containsKeyWithId:edge]) return EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED();
  else return nil;
}

- (id)getSourceWithId:(id)directed_edge {
  if ([self getEdgeTypeWithId:directed_edge] == EduUciIcsJungGraphUtilEdgeTypeEnum_get_DIRECTED()) return [((EduUciIcsJungGraphUtilPair *) nil_chk([((id<JavaUtilMap>) nil_chk(directed_edges_)) getWithId:directed_edge])) getFirst];
  else return nil;
}

- (id)getDestWithId:(id)directed_edge {
  if ([self getEdgeTypeWithId:directed_edge] == EduUciIcsJungGraphUtilEdgeTypeEnum_get_DIRECTED()) return [((EduUciIcsJungGraphUtilPair *) nil_chk([((id<JavaUtilMap>) nil_chk(directed_edges_)) getWithId:directed_edge])) getSecond];
  else return nil;
}

- (jboolean)isSourceWithId:(id)vertex
                    withId:(id)edge {
  if (![self containsVertexWithId:vertex] || ![self containsEdgeWithId:edge]) return NO;
  id source = [self getSourceWithId:edge];
  if (source != nil) return [source isEqual:vertex];
  else return NO;
}

- (jboolean)isDestWithId:(id)vertex
                  withId:(id)edge {
  if (![self containsVertexWithId:vertex] || ![self containsEdgeWithId:edge]) return NO;
  id dest = [self getDestWithId:edge];
  if (dest != nil) return [dest isEqual:vertex];
  else return NO;
}

- (id<JavaUtilCollection>)getEdges {
  id<JavaUtilCollection> edges = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(directed_edges_)) keySet]);
  [edges addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(undirected_edges_)) keySet]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(edges);
}

- (id<JavaUtilCollection>)getVertices {
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(vertex_maps_)) keySet]);
}

- (jboolean)containsVertexWithId:(id)vertex {
  return [((id<JavaUtilMap>) nil_chk(vertex_maps_)) containsKeyWithId:vertex];
}

- (jboolean)containsEdgeWithId:(id)edge {
  return [((id<JavaUtilMap>) nil_chk(directed_edges_)) containsKeyWithId:edge] || [((id<JavaUtilMap>) nil_chk(undirected_edges_)) containsKeyWithId:edge];
}

- (jint)getEdgeCount {
  return [((id<JavaUtilMap>) nil_chk(directed_edges_)) size] + [((id<JavaUtilMap>) nil_chk(undirected_edges_)) size];
}

- (jint)getVertexCount {
  return [((id<JavaUtilMap>) nil_chk(vertex_maps_)) size];
}

- (id<JavaUtilCollection>)getNeighborsWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilCollection> neighbors = new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCOMING))) keySet]);
  [neighbors addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:vertex]), EduUciIcsJungGraphSparseGraph_OUTGOING))) keySet]];
  [neighbors addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCIDENT))) keySet]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(neighbors);
}

- (id<JavaUtilCollection>)getIncidentEdgesWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilCollection> incident = new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCOMING))) values]);
  [incident addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:vertex]), EduUciIcsJungGraphSparseGraph_OUTGOING))) values]];
  [incident addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:vertex]), EduUciIcsJungGraphSparseGraph_INCIDENT))) values]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(incident);
}

- (jboolean)addVertexWithId:(id)vertex {
  if (vertex == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"vertex may not be null");
  }
  if (![self containsVertexWithId:vertex]) {
    (void) [((id<JavaUtilMap>) nil_chk(vertex_maps_)) putWithId:vertex withId:[IOSObjectArray newArrayWithObjects:(id[]){ new_JavaUtilHashMap_init(), new_JavaUtilHashMap_init(), new_JavaUtilHashMap_init() } count:3 type:JavaUtilHashMap_class_()]];
    return YES;
  }
  else {
    return NO;
  }
}

- (jboolean)removeVertexWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return NO;
  id<JavaUtilCollection> incident = new_JavaUtilArrayList_initWithJavaUtilCollection_([self getIncidentEdgesWithId:vertex]);
  for (id __strong edge in incident) [self removeEdgeWithId:edge];
  (void) [((id<JavaUtilMap>) nil_chk(vertex_maps_)) removeWithId:vertex];
  return YES;
}

- (jboolean)removeEdgeWithId:(id)edge {
  if (![self containsEdgeWithId:edge]) return NO;
  EduUciIcsJungGraphUtilPair *endpoints = [self getEndpointsWithId:edge];
  id v1 = [((EduUciIcsJungGraphUtilPair *) nil_chk(endpoints)) getFirst];
  id v2 = [endpoints getSecond];
  if ([self getEdgeTypeWithId:edge] == EduUciIcsJungGraphUtilEdgeTypeEnum_get_DIRECTED()) {
    (void) [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:v1]), EduUciIcsJungGraphSparseGraph_OUTGOING))) removeWithId:v2];
    (void) [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:v2]), EduUciIcsJungGraphSparseGraph_INCOMING))) removeWithId:v1];
    (void) [((id<JavaUtilMap>) nil_chk(directed_edges_)) removeWithId:edge];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilMap>) nil_chk(vertex_maps_)) getWithId:v1]), EduUciIcsJungGraphSparseGraph_INCIDENT))) removeWithId:v2];
    (void) [((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk([vertex_maps_ getWithId:v2]), EduUciIcsJungGraphSparseGraph_INCIDENT))) removeWithId:v1];
    (void) [((id<JavaUtilMap>) nil_chk(undirected_edges_)) removeWithId:edge];
  }
  return YES;
}

- (jint)getEdgeCountWithEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edge_type {
  if (edge_type == EduUciIcsJungGraphUtilEdgeTypeEnum_get_DIRECTED()) return [((id<JavaUtilMap>) nil_chk(directed_edges_)) size];
  if (edge_type == EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED()) return [((id<JavaUtilMap>) nil_chk(undirected_edges_)) size];
  return 0;
}

- (EduUciIcsJungGraphUtilEdgeTypeEnum *)getDefaultEdgeType {
  return EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED();
}

- (EduUciIcsJungGraphSparseGraph *)newInstance {
  return new_EduUciIcsJungGraphSparseGraph_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFactory", NULL, "Lorg.apache.commons.collections15.Factory;", 0x9, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>()Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Graph<TV;TE;>;>;" },
    { "init", "SparseGraph", NULL, 0x1, NULL, NULL },
    { "findEdgeWithId:withId:", "findEdge", "TE;", 0x1, NULL, "(TV;TV;)TE;" },
    { "findEdgeSetWithId:withId:", "findEdgeSet", "Ljava.util.Collection;", 0x1, NULL, "(TV;TV;)Ljava/util/Collection<TE;>;" },
    { "addEdgeWithId:withEduUciIcsJungGraphUtilPair:withEduUciIcsJungGraphUtilEdgeTypeEnum:", "addEdge", "Z", 0x1, NULL, "(TE;Ledu/uci/ics/jung/graph/util/Pair<+TV;>;Ledu/uci/ics/jung/graph/util/EdgeType;)Z" },
    { "getInEdgesWithId:", "getInEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getOutEdgesWithId:", "getOutEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getPredecessorsWithId:", "getPredecessors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getSuccessorsWithId:", "getSuccessors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getEdgesWithEduUciIcsJungGraphUtilEdgeTypeEnum:", "getEdges", "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getEndpointsWithId:", "getEndpoints", "Ledu.uci.ics.jung.graph.util.Pair;", 0x1, NULL, "(TE;)Ledu/uci/ics/jung/graph/util/Pair<TV;>;" },
    { "getEdgeTypeWithId:", "getEdgeType", "Ledu.uci.ics.jung.graph.util.EdgeType;", 0x1, NULL, "(TE;)Ledu/uci/ics/jung/graph/util/EdgeType;" },
    { "getSourceWithId:", "getSource", "TV;", 0x1, NULL, "(TE;)TV;" },
    { "getDestWithId:", "getDest", "TV;", 0x1, NULL, "(TE;)TV;" },
    { "isSourceWithId:withId:", "isSource", "Z", 0x1, NULL, "(TV;TE;)Z" },
    { "isDestWithId:withId:", "isDest", "Z", 0x1, NULL, "(TV;TE;)Z" },
    { "getEdges", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getVertices", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "containsVertexWithId:", "containsVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "containsEdgeWithId:", "containsEdge", "Z", 0x1, NULL, "(TE;)Z" },
    { "getEdgeCount", NULL, "I", 0x1, NULL, NULL },
    { "getVertexCount", NULL, "I", 0x1, NULL, NULL },
    { "getNeighborsWithId:", "getNeighbors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getIncidentEdgesWithId:", "getIncidentEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "addVertexWithId:", "addVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeVertexWithId:", "removeVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeEdgeWithId:", "removeEdge", "Z", 0x1, NULL, "(TE;)Z" },
    { "getEdgeCountWithEduUciIcsJungGraphUtilEdgeTypeEnum:", "getEdgeCount", "I", 0x1, NULL, NULL },
    { "getDefaultEdgeType", NULL, "Ledu.uci.ics.jung.graph.util.EdgeType;", 0x1, NULL, NULL },
    { "newInstance", NULL, "Ledu.uci.ics.jung.graph.SparseGraph;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INCOMING_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = EduUciIcsJungGraphSparseGraph_INCOMING },
    { "OUTGOING_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = EduUciIcsJungGraphSparseGraph_OUTGOING },
    { "INCIDENT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = EduUciIcsJungGraphSparseGraph_INCIDENT },
    { "vertex_maps_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TV;L[Ljava/util/Map;;>;",  },
    { "directed_edges_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TE;Ledu/uci/ics/jung/graph/util/Pair<TV;>;>;",  },
    { "undirected_edges_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TE;Ledu/uci/ics/jung/graph/util/Pair<TV;>;>;",  },
  };
  static const char *superclass_type_args[] = {"TV;", "TE;"};
  static const J2ObjcClassInfo _EduUciIcsJungGraphSparseGraph = { 2, "SparseGraph", "edu.uci.ics.jung.graph", NULL, 0x1, 30, methods, 6, fields, 2, superclass_type_args, 0, NULL, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ledu/uci/ics/jung/graph/AbstractGraph<TV;TE;>;Ledu/uci/ics/jung/graph/Graph<TV;TE;>;" };
  return &_EduUciIcsJungGraphSparseGraph;
}

@end

id<OrgApacheCommonsCollections15Factory> EduUciIcsJungGraphSparseGraph_getFactory() {
  EduUciIcsJungGraphSparseGraph_initialize();
  return new_EduUciIcsJungGraphSparseGraph_$1_init();
}

void EduUciIcsJungGraphSparseGraph_init(EduUciIcsJungGraphSparseGraph *self) {
  (void) EduUciIcsJungGraphAbstractGraph_init(self);
  self->vertex_maps_ = new_JavaUtilHashMap_init();
  self->directed_edges_ = new_JavaUtilHashMap_init();
  self->undirected_edges_ = new_JavaUtilHashMap_init();
}

EduUciIcsJungGraphSparseGraph *new_EduUciIcsJungGraphSparseGraph_init() {
  EduUciIcsJungGraphSparseGraph *self = [EduUciIcsJungGraphSparseGraph alloc];
  EduUciIcsJungGraphSparseGraph_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphSparseGraph)

@implementation EduUciIcsJungGraphSparseGraph_$1

- (id<EduUciIcsJungGraphGraph>)create {
  return new_EduUciIcsJungGraphSparseGraph_init();
}

- (instancetype)init {
  EduUciIcsJungGraphSparseGraph_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Ledu.uci.ics.jung.graph.Graph;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "EduUciIcsJungGraphSparseGraph", "getFactory" };
  static const J2ObjcClassInfo _EduUciIcsJungGraphSparseGraph_$1 = { 2, "", "edu.uci.ics.jung.graph", "SparseGraph", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Graph<TV;TE;>;>;" };
  return &_EduUciIcsJungGraphSparseGraph_$1;
}

@end

void EduUciIcsJungGraphSparseGraph_$1_init(EduUciIcsJungGraphSparseGraph_$1 *self) {
  (void) NSObject_init(self);
}

EduUciIcsJungGraphSparseGraph_$1 *new_EduUciIcsJungGraphSparseGraph_$1_init() {
  EduUciIcsJungGraphSparseGraph_$1 *self = [EduUciIcsJungGraphSparseGraph_$1 alloc];
  EduUciIcsJungGraphSparseGraph_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphSparseGraph_$1)
