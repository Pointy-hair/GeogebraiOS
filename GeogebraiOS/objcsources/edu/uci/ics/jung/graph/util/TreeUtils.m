//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/edu/uci/ics/jung/graph/util/TreeUtils.java
//


#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/graph/Forest.h"
#include "edu/uci/ics/jung/graph/Graph.h"
#include "edu/uci/ics/jung/graph/Tree.h"
#include "edu/uci/ics/jung/graph/util/Pair.h"
#include "edu/uci/ics/jung/graph/util/TreeUtils.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@implementation EduUciIcsJungGraphUtilTreeUtils

+ (id<JavaUtilList>)getRootsWithEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)forest {
  return EduUciIcsJungGraphUtilTreeUtils_getRootsWithEduUciIcsJungGraphForest_(forest);
}

+ (id<EduUciIcsJungGraphTree>)getSubTreeWithEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)forest
                                                              withId:(id)root {
  return EduUciIcsJungGraphUtilTreeUtils_getSubTreeWithEduUciIcsJungGraphForest_withId_(forest, root);
}

+ (void)growSubTreeWithEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)tree
                   withEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)subTree
                                         withId:(id)root {
  EduUciIcsJungGraphUtilTreeUtils_growSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_(tree, subTree, root);
}

+ (void)addSubTreeWithEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)tree
                  withEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)subTree
                                        withId:(id)node
                                        withId:(id)connectingEdge {
  EduUciIcsJungGraphUtilTreeUtils_addSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_withId_(tree, subTree, node, connectingEdge);
}

+ (void)addFromSubTreeWithEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)tree
                      withEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)subTree
                                            withId:(id)edge
                                            withId:(id)parent
                                            withId:(id)root {
  EduUciIcsJungGraphUtilTreeUtils_addFromSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_withId_withId_(tree, subTree, edge, parent, root);
}

- (instancetype)init {
  EduUciIcsJungGraphUtilTreeUtils_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getRootsWithEduUciIcsJungGraphForest:", "getRoots", "Ljava.util.List;", 0x9, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>(Ledu/uci/ics/jung/graph/Forest<TV;TE;>;)Ljava/util/List<TV;>;" },
    { "getSubTreeWithEduUciIcsJungGraphForest:withId:", "getSubTree", "Ledu.uci.ics.jung.graph.Tree;", 0x9, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>(Ledu/uci/ics/jung/graph/Forest<TV;TE;>;TV;)Ledu/uci/ics/jung/graph/Tree<TV;TE;>;" },
    { "growSubTreeWithEduUciIcsJungGraphForest:withEduUciIcsJungGraphForest:withId:", "growSubTree", "V", 0x9, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>(Ledu/uci/ics/jung/graph/Forest<TV;TE;>;Ledu/uci/ics/jung/graph/Forest<TV;TE;>;TV;)V" },
    { "addSubTreeWithEduUciIcsJungGraphForest:withEduUciIcsJungGraphForest:withId:withId:", "addSubTree", "V", 0x9, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>(Ledu/uci/ics/jung/graph/Forest<TV;TE;>;Ledu/uci/ics/jung/graph/Forest<TV;TE;>;TV;TE;)V" },
    { "addFromSubTreeWithEduUciIcsJungGraphForest:withEduUciIcsJungGraphForest:withId:withId:withId:", "addFromSubTree", "V", 0x9, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>(Ledu/uci/ics/jung/graph/Forest<TV;TE;>;Ledu/uci/ics/jung/graph/Forest<TV;TE;>;TE;TV;TV;)V" },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _EduUciIcsJungGraphUtilTreeUtils = { 2, "TreeUtils", "edu.uci.ics.jung.graph.util", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_EduUciIcsJungGraphUtilTreeUtils;
}

@end

id<JavaUtilList> EduUciIcsJungGraphUtilTreeUtils_getRootsWithEduUciIcsJungGraphForest_(id<EduUciIcsJungGraphForest> forest) {
  EduUciIcsJungGraphUtilTreeUtils_initialize();
  id<JavaUtilList> roots = [new_JavaUtilArrayList_init() autorelease];
  for (id<EduUciIcsJungGraphTree> __strong tree in nil_chk([((id<EduUciIcsJungGraphForest>) nil_chk(forest)) getTrees])) {
    [roots addWithId:[((id<EduUciIcsJungGraphTree>) nil_chk(tree)) getRoot]];
  }
  return roots;
}

id<EduUciIcsJungGraphTree> EduUciIcsJungGraphUtilTreeUtils_getSubTreeWithEduUciIcsJungGraphForest_withId_(id<EduUciIcsJungGraphForest> forest, id root) {
  EduUciIcsJungGraphUtilTreeUtils_initialize();
  if (![((id<EduUciIcsJungGraphForest>) nil_chk(forest)) containsVertexWithId:root]) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Specified tree does not contain the specified root as a vertex") autorelease];
  id<EduUciIcsJungGraphForest> subforest = (id<EduUciIcsJungGraphForest>) check_protocol_cast([forest newInstance], @protocol(EduUciIcsJungGraphForest));
  [((id<EduUciIcsJungGraphForest>) nil_chk(subforest)) addVertexWithId:root];
  EduUciIcsJungGraphUtilTreeUtils_growSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_(forest, subforest, root);
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([subforest getTrees])) iterator])) next];
}

void EduUciIcsJungGraphUtilTreeUtils_growSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_(id<EduUciIcsJungGraphForest> tree, id<EduUciIcsJungGraphForest> subTree, id root) {
  EduUciIcsJungGraphUtilTreeUtils_initialize();
  if ([((id<EduUciIcsJungGraphForest>) nil_chk(tree)) getSuccessorCountWithId:root] > 0) {
    id<JavaUtilCollection> edges = [tree getOutEdgesWithId:root];
    for (id __strong e in nil_chk(edges)) {
      [((id<EduUciIcsJungGraphForest>) nil_chk(subTree)) addEdgeWithId:e withJavaUtilCollection:[tree getEndpointsWithId:e]];
    }
    id<JavaUtilCollection> kids = [tree getSuccessorsWithId:root];
    for (id __strong kid in nil_chk(kids)) {
      EduUciIcsJungGraphUtilTreeUtils_growSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_(tree, subTree, kid);
    }
  }
}

void EduUciIcsJungGraphUtilTreeUtils_addSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_withId_(id<EduUciIcsJungGraphForest> tree, id<EduUciIcsJungGraphForest> subTree, id node, id connectingEdge) {
  EduUciIcsJungGraphUtilTreeUtils_initialize();
  if (node != nil && ![((id<EduUciIcsJungGraphForest>) nil_chk(tree)) containsVertexWithId:node]) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Specified tree does not contain the specified node as a vertex") autorelease];
  id root = [((id<EduUciIcsJungGraphTree>) nil_chk([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([((id<EduUciIcsJungGraphForest>) nil_chk(subTree)) getTrees])) iterator])) next])) getRoot];
  EduUciIcsJungGraphUtilTreeUtils_addFromSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_withId_withId_(tree, subTree, connectingEdge, node, root);
}

void EduUciIcsJungGraphUtilTreeUtils_addFromSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_withId_withId_(id<EduUciIcsJungGraphForest> tree, id<EduUciIcsJungGraphForest> subTree, id edge, id parent, id root) {
  EduUciIcsJungGraphUtilTreeUtils_initialize();
  if (edge != nil && parent != nil) {
    [((id<EduUciIcsJungGraphForest>) nil_chk(tree)) addEdgeWithId:edge withId:parent withId:root];
  }
  else {
    [((id<EduUciIcsJungGraphForest>) nil_chk(tree)) addVertexWithId:root];
  }
  id<JavaUtilCollection> outEdges = [((id<EduUciIcsJungGraphForest>) nil_chk(subTree)) getOutEdgesWithId:root];
  for (id __strong e in nil_chk(outEdges)) {
    id opposite = [subTree getOppositeWithId:root withId:e];
    EduUciIcsJungGraphUtilTreeUtils_addFromSubTreeWithEduUciIcsJungGraphForest_withEduUciIcsJungGraphForest_withId_withId_withId_(tree, subTree, e, root, opposite);
  }
}

void EduUciIcsJungGraphUtilTreeUtils_init(EduUciIcsJungGraphUtilTreeUtils *self) {
  NSObject_init(self);
}

EduUciIcsJungGraphUtilTreeUtils *new_EduUciIcsJungGraphUtilTreeUtils_init() {
  EduUciIcsJungGraphUtilTreeUtils *self = [EduUciIcsJungGraphUtilTreeUtils alloc];
  EduUciIcsJungGraphUtilTreeUtils_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphUtilTreeUtils)
