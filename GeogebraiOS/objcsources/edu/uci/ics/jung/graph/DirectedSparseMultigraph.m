//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/edu/uci/ics/jung/graph/DirectedSparseMultigraph.java
//


#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/graph/AbstractGraph.h"
#include "edu/uci/ics/jung/graph/AbstractTypedGraph.h"
#include "edu/uci/ics/jung/graph/DirectedGraph.h"
#include "edu/uci/ics/jung/graph/DirectedSparseMultigraph.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "edu/uci/ics/jung/graph/util/Pair.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/Factory.h"

@interface EduUciIcsJungGraphDirectedSparseMultigraph_$1 : NSObject < OrgApacheCommonsCollections15Factory >

- (id<EduUciIcsJungGraphDirectedGraph>)create;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUciIcsJungGraphDirectedSparseMultigraph_$1)

__attribute__((unused)) static void EduUciIcsJungGraphDirectedSparseMultigraph_$1_init(EduUciIcsJungGraphDirectedSparseMultigraph_$1 *self);

__attribute__((unused)) static EduUciIcsJungGraphDirectedSparseMultigraph_$1 *new_EduUciIcsJungGraphDirectedSparseMultigraph_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(EduUciIcsJungGraphDirectedSparseMultigraph_$1)

@implementation EduUciIcsJungGraphDirectedSparseMultigraph

+ (id<OrgApacheCommonsCollections15Factory>)getFactory {
  return EduUciIcsJungGraphDirectedSparseMultigraph_getFactory();
}

- (instancetype)init {
  EduUciIcsJungGraphDirectedSparseMultigraph_init(self);
  return self;
}

- (id<JavaUtilCollection>)getEdges {
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(edges_)) keySet]);
}

- (id<JavaUtilCollection>)getVertices {
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(vertices_)) keySet]);
}

- (jboolean)containsVertexWithId:(id)vertex {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) keySet])) containsWithId:vertex];
}

- (jboolean)containsEdgeWithId:(id)edge {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(edges_)) keySet])) containsWithId:edge];
}

- (id<JavaUtilCollection>)getIncoming_internalWithId:(id)vertex {
  return [((EduUciIcsJungGraphUtilPair *) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:vertex])) getFirst];
}

- (id<JavaUtilCollection>)getOutgoing_internalWithId:(id)vertex {
  return [((EduUciIcsJungGraphUtilPair *) nil_chk([((id<JavaUtilMap>) nil_chk(vertices_)) getWithId:vertex])) getSecond];
}

- (jboolean)addVertexWithId:(id)vertex {
  if (vertex == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"vertex may not be null");
  }
  if (![self containsVertexWithId:vertex]) {
    (void) [((id<JavaUtilMap>) nil_chk(vertices_)) putWithId:vertex withId:new_EduUciIcsJungGraphUtilPair_initWithId_withId_(new_JavaUtilHashSet_init(), new_JavaUtilHashSet_init())];
    return YES;
  }
  else {
    return NO;
  }
}

- (jboolean)removeVertexWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return NO;
  id<JavaUtilSet> incident = new_JavaUtilHashSet_initWithJavaUtilCollection_([self getIncoming_internalWithId:vertex]);
  [incident addAllWithJavaUtilCollection:[self getOutgoing_internalWithId:vertex]];
  for (id __strong edge in incident) [self removeEdgeWithId:edge];
  (void) [((id<JavaUtilMap>) nil_chk(vertices_)) removeWithId:vertex];
  return YES;
}

- (jboolean)removeEdgeWithId:(id)edge {
  if (![self containsEdgeWithId:edge]) return NO;
  EduUciIcsJungGraphUtilPair *endpoints = [self getEndpointsWithId:edge];
  id source = [((EduUciIcsJungGraphUtilPair *) nil_chk(endpoints)) getFirst];
  id dest = [endpoints getSecond];
  [((id<JavaUtilCollection>) nil_chk([self getOutgoing_internalWithId:source])) removeWithId:edge];
  [((id<JavaUtilCollection>) nil_chk([self getIncoming_internalWithId:dest])) removeWithId:edge];
  (void) [((id<JavaUtilMap>) nil_chk(edges_)) removeWithId:edge];
  return YES;
}

- (id<JavaUtilCollection>)getInEdgesWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([self getIncoming_internalWithId:vertex]);
}

- (id<JavaUtilCollection>)getOutEdgesWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([self getOutgoing_internalWithId:vertex]);
}

- (id<JavaUtilCollection>)getPredecessorsWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilSet> preds = new_JavaUtilHashSet_init();
  for (id __strong edge in nil_chk([self getIncoming_internalWithId:vertex])) [preds addWithId:[self getSourceWithId:edge]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(preds);
}

- (id<JavaUtilCollection>)getSuccessorsWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilSet> succs = new_JavaUtilHashSet_init();
  for (id __strong edge in nil_chk([self getOutgoing_internalWithId:vertex])) [succs addWithId:[self getDestWithId:edge]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(succs);
}

- (id<JavaUtilCollection>)getNeighborsWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilCollection> neighbors = new_JavaUtilHashSet_init();
  for (id __strong edge in nil_chk([self getIncoming_internalWithId:vertex])) [neighbors addWithId:[self getSourceWithId:edge]];
  for (id __strong edge in nil_chk([self getOutgoing_internalWithId:vertex])) [neighbors addWithId:[self getDestWithId:edge]];
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(neighbors);
}

- (id<JavaUtilCollection>)getIncidentEdgesWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) return nil;
  id<JavaUtilCollection> incident = new_JavaUtilHashSet_init();
  [incident addAllWithJavaUtilCollection:[self getIncoming_internalWithId:vertex]];
  [incident addAllWithJavaUtilCollection:[self getOutgoing_internalWithId:vertex]];
  return incident;
}

- (id)findEdgeWithId:(id)v1
              withId:(id)v2 {
  if (![self containsVertexWithId:v1] || ![self containsVertexWithId:v2]) return nil;
  for (id __strong edge in nil_chk([self getOutgoing_internalWithId:v1])) if ([nil_chk([self getDestWithId:edge]) isEqual:v2]) return edge;
  return nil;
}

- (jboolean)addEdgeWithId:(id)edge
withEduUciIcsJungGraphUtilPair:(EduUciIcsJungGraphUtilPair *)endpoints
withEduUciIcsJungGraphUtilEdgeTypeEnum:(EduUciIcsJungGraphUtilEdgeTypeEnum *)edgeType {
  [self validateEdgeTypeWithEduUciIcsJungGraphUtilEdgeTypeEnum:edgeType];
  EduUciIcsJungGraphUtilPair *new_endpoints = [self getValidatedEndpointsWithId:edge withEduUciIcsJungGraphUtilPair:endpoints];
  if (new_endpoints == nil) return NO;
  (void) [((id<JavaUtilMap>) nil_chk(edges_)) putWithId:edge withId:new_endpoints];
  id source = [((EduUciIcsJungGraphUtilPair *) nil_chk(new_endpoints)) getFirst];
  id dest = [new_endpoints getSecond];
  if (![self containsVertexWithId:source]) [self addVertexWithId:source];
  if (![self containsVertexWithId:dest]) [self addVertexWithId:dest];
  [((id<JavaUtilCollection>) nil_chk([self getIncoming_internalWithId:dest])) addWithId:edge];
  [((id<JavaUtilCollection>) nil_chk([self getOutgoing_internalWithId:source])) addWithId:edge];
  return YES;
}

- (id)getSourceWithId:(id)edge {
  if (![self containsEdgeWithId:edge]) return nil;
  return [((EduUciIcsJungGraphUtilPair *) nil_chk([self getEndpointsWithId:edge])) getFirst];
}

- (id)getDestWithId:(id)edge {
  if (![self containsEdgeWithId:edge]) return nil;
  return [((EduUciIcsJungGraphUtilPair *) nil_chk([self getEndpointsWithId:edge])) getSecond];
}

- (jboolean)isSourceWithId:(id)vertex
                    withId:(id)edge {
  if (![self containsEdgeWithId:edge] || ![self containsVertexWithId:vertex]) return NO;
  return [nil_chk(vertex) isEqual:[((EduUciIcsJungGraphUtilPair *) nil_chk([self getEndpointsWithId:edge])) getFirst]];
}

- (jboolean)isDestWithId:(id)vertex
                  withId:(id)edge {
  if (![self containsEdgeWithId:edge] || ![self containsVertexWithId:vertex]) return NO;
  return [nil_chk(vertex) isEqual:[((EduUciIcsJungGraphUtilPair *) nil_chk([self getEndpointsWithId:edge])) getSecond]];
}

- (EduUciIcsJungGraphUtilPair *)getEndpointsWithId:(id)edge {
  return [((id<JavaUtilMap>) nil_chk(edges_)) getWithId:edge];
}

- (jint)getEdgeCount {
  return [((id<JavaUtilMap>) nil_chk(edges_)) size];
}

- (jint)getVertexCount {
  return [((id<JavaUtilMap>) nil_chk(vertices_)) size];
}

- (EduUciIcsJungGraphDirectedSparseMultigraph *)newInstance {
  return new_EduUciIcsJungGraphDirectedSparseMultigraph_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFactory", NULL, "Lorg.apache.commons.collections15.Factory;", 0x9, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>()Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/DirectedGraph<TV;TE;>;>;" },
    { "init", "DirectedSparseMultigraph", NULL, 0x1, NULL, NULL },
    { "getEdges", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getVertices", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "containsVertexWithId:", "containsVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "containsEdgeWithId:", "containsEdge", "Z", 0x1, NULL, "(TE;)Z" },
    { "getIncoming_internalWithId:", "getIncoming_internal", "Ljava.util.Collection;", 0x4, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getOutgoing_internalWithId:", "getOutgoing_internal", "Ljava.util.Collection;", 0x4, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "addVertexWithId:", "addVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeVertexWithId:", "removeVertex", "Z", 0x1, NULL, "(TV;)Z" },
    { "removeEdgeWithId:", "removeEdge", "Z", 0x1, NULL, "(TE;)Z" },
    { "getInEdgesWithId:", "getInEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getOutEdgesWithId:", "getOutEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "getPredecessorsWithId:", "getPredecessors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getSuccessorsWithId:", "getSuccessors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getNeighborsWithId:", "getNeighbors", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TV;>;" },
    { "getIncidentEdgesWithId:", "getIncidentEdges", "Ljava.util.Collection;", 0x1, NULL, "(TV;)Ljava/util/Collection<TE;>;" },
    { "findEdgeWithId:withId:", "findEdge", "TE;", 0x1, NULL, "(TV;TV;)TE;" },
    { "addEdgeWithId:withEduUciIcsJungGraphUtilPair:withEduUciIcsJungGraphUtilEdgeTypeEnum:", "addEdge", "Z", 0x1, NULL, "(TE;Ledu/uci/ics/jung/graph/util/Pair<+TV;>;Ledu/uci/ics/jung/graph/util/EdgeType;)Z" },
    { "getSourceWithId:", "getSource", "TV;", 0x1, NULL, "(TE;)TV;" },
    { "getDestWithId:", "getDest", "TV;", 0x1, NULL, "(TE;)TV;" },
    { "isSourceWithId:withId:", "isSource", "Z", 0x1, NULL, "(TV;TE;)Z" },
    { "isDestWithId:withId:", "isDest", "Z", 0x1, NULL, "(TV;TE;)Z" },
    { "getEndpointsWithId:", "getEndpoints", "Ledu.uci.ics.jung.graph.util.Pair;", 0x1, NULL, "(TE;)Ledu/uci/ics/jung/graph/util/Pair<TV;>;" },
    { "getEdgeCount", NULL, "I", 0x1, NULL, NULL },
    { "getVertexCount", NULL, "I", 0x1, NULL, NULL },
    { "newInstance", NULL, "Ledu.uci.ics.jung.graph.DirectedSparseMultigraph;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vertices_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TV;Ledu/uci/ics/jung/graph/util/Pair<Ljava/util/Set<TE;>;>;>;",  },
    { "edges_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TE;Ledu/uci/ics/jung/graph/util/Pair<TV;>;>;",  },
  };
  static const char *superclass_type_args[] = {"TV;", "TE;"};
  static const J2ObjcClassInfo _EduUciIcsJungGraphDirectedSparseMultigraph = { 2, "DirectedSparseMultigraph", "edu.uci.ics.jung.graph", NULL, 0x1, 27, methods, 2, fields, 2, superclass_type_args, 0, NULL, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ledu/uci/ics/jung/graph/AbstractTypedGraph<TV;TE;>;Ledu/uci/ics/jung/graph/DirectedGraph<TV;TE;>;Ledu/uci/ics/jung/graph/MultiGraph<TV;TE;>;" };
  return &_EduUciIcsJungGraphDirectedSparseMultigraph;
}

@end

id<OrgApacheCommonsCollections15Factory> EduUciIcsJungGraphDirectedSparseMultigraph_getFactory() {
  EduUciIcsJungGraphDirectedSparseMultigraph_initialize();
  return new_EduUciIcsJungGraphDirectedSparseMultigraph_$1_init();
}

void EduUciIcsJungGraphDirectedSparseMultigraph_init(EduUciIcsJungGraphDirectedSparseMultigraph *self) {
  (void) EduUciIcsJungGraphAbstractTypedGraph_initWithEduUciIcsJungGraphUtilEdgeTypeEnum_(self, EduUciIcsJungGraphUtilEdgeTypeEnum_get_DIRECTED());
  self->vertices_ = new_JavaUtilHashMap_init();
  self->edges_ = new_JavaUtilHashMap_init();
}

EduUciIcsJungGraphDirectedSparseMultigraph *new_EduUciIcsJungGraphDirectedSparseMultigraph_init() {
  EduUciIcsJungGraphDirectedSparseMultigraph *self = [EduUciIcsJungGraphDirectedSparseMultigraph alloc];
  EduUciIcsJungGraphDirectedSparseMultigraph_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphDirectedSparseMultigraph)

@implementation EduUciIcsJungGraphDirectedSparseMultigraph_$1

- (id<EduUciIcsJungGraphDirectedGraph>)create {
  return new_EduUciIcsJungGraphDirectedSparseMultigraph_init();
}

- (instancetype)init {
  EduUciIcsJungGraphDirectedSparseMultigraph_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Ledu.uci.ics.jung.graph.DirectedGraph;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "EduUciIcsJungGraphDirectedSparseMultigraph", "getFactory" };
  static const J2ObjcClassInfo _EduUciIcsJungGraphDirectedSparseMultigraph_$1 = { 2, "", "edu.uci.ics.jung.graph", "DirectedSparseMultigraph", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/DirectedGraph<TV;TE;>;>;" };
  return &_EduUciIcsJungGraphDirectedSparseMultigraph_$1;
}

@end

void EduUciIcsJungGraphDirectedSparseMultigraph_$1_init(EduUciIcsJungGraphDirectedSparseMultigraph_$1 *self) {
  (void) NSObject_init(self);
}

EduUciIcsJungGraphDirectedSparseMultigraph_$1 *new_EduUciIcsJungGraphDirectedSparseMultigraph_$1_init() {
  EduUciIcsJungGraphDirectedSparseMultigraph_$1 *self = [EduUciIcsJungGraphDirectedSparseMultigraph_$1 alloc];
  EduUciIcsJungGraphDirectedSparseMultigraph_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungGraphDirectedSparseMultigraph_$1)
