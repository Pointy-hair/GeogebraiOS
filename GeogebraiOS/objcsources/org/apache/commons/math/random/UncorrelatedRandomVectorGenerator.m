//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/exception/DimensionMismatchException.h"
#include "org/apache/commons/math/random/NormalizedRandomGenerator.h"
#include "org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.h"

@interface OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator () {
 @public
  id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator_;
  IOSDoubleArray *mean_;
  IOSDoubleArray *standardDeviation_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator, generator_, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator, mean_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator, standardDeviation_, IOSDoubleArray *)

@implementation OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)mean
                    withDoubleArray:(IOSDoubleArray *)standardDeviation
withOrgApacheCommonsMathRandomNormalizedRandomGenerator:(id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>)generator {
  OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator_initWithDoubleArray_withDoubleArray_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(self, mean, standardDeviation, generator);
  return self;
}

- (instancetype)initWithInt:(jint)dimension
withOrgApacheCommonsMathRandomNormalizedRandomGenerator:(id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>)generator {
  OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator_initWithInt_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(self, dimension, generator);
  return self;
}

- (IOSDoubleArray *)nextVector {
  IOSDoubleArray *random = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(mean_))->size_];
  for (jint i = 0; i < random->size_; ++i) {
    *IOSDoubleArray_GetRef(random, i) = IOSDoubleArray_Get(mean_, i) + IOSDoubleArray_Get(nil_chk(standardDeviation_), i) * [((id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>) nil_chk(generator_)) nextNormalizedDouble];
  }
  return random;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDoubleArray:withDoubleArray:withOrgApacheCommonsMathRandomNormalizedRandomGenerator:", "UncorrelatedRandomVectorGenerator", NULL, 0x1, NULL, NULL },
    { "initWithInt:withOrgApacheCommonsMathRandomNormalizedRandomGenerator:", "UncorrelatedRandomVectorGenerator", NULL, 0x1, NULL, NULL },
    { "nextVector", NULL, "[D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "generator_", NULL, 0x12, "Lorg.apache.commons.math.random.NormalizedRandomGenerator;", NULL, NULL,  },
    { "mean_", NULL, 0x12, "[D", NULL, NULL,  },
    { "standardDeviation_", NULL, 0x12, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator = { 2, "UncorrelatedRandomVectorGenerator", "org.apache.commons.math.random", NULL, 0x1, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator;
}

@end

void OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator_initWithDoubleArray_withDoubleArray_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator *self, IOSDoubleArray *mean, IOSDoubleArray *standardDeviation, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator) {
  (void) NSObject_init(self);
  if (((IOSDoubleArray *) nil_chk(mean))->size_ != ((IOSDoubleArray *) nil_chk(standardDeviation))->size_) {
    @throw new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(mean->size_, standardDeviation->size_);
  }
  self->mean_ = [mean clone];
  self->standardDeviation_ = [standardDeviation clone];
  self->generator_ = generator;
}

OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator *new_OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator_initWithDoubleArray_withDoubleArray_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(IOSDoubleArray *mean, IOSDoubleArray *standardDeviation, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator) {
  OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator *self = [OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator alloc];
  OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator_initWithDoubleArray_withDoubleArray_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(self, mean, standardDeviation, generator);
  return self;
}

void OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator_initWithInt_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator *self, jint dimension, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator) {
  (void) NSObject_init(self);
  self->mean_ = [IOSDoubleArray newArrayWithLength:dimension];
  self->standardDeviation_ = [IOSDoubleArray newArrayWithLength:dimension];
  JavaUtilArrays_fillWithDoubleArray_withDouble_(self->standardDeviation_, 1.0);
  self->generator_ = generator;
}

OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator *new_OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator_initWithInt_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(jint dimension, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator) {
  OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator *self = [OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator alloc];
  OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator_initWithInt_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(self, dimension, generator);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathRandomUncorrelatedRandomVectorGenerator)
