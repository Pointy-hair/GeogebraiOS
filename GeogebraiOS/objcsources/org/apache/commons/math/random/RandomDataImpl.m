//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/random/RandomDataImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/SecureRandom.h"
#include "java/util/Collection.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/distribution/BetaDistributionImpl.h"
#include "org/apache/commons/math/distribution/BinomialDistributionImpl.h"
#include "org/apache/commons/math/distribution/CauchyDistributionImpl.h"
#include "org/apache/commons/math/distribution/ChiSquaredDistributionImpl.h"
#include "org/apache/commons/math/distribution/ContinuousDistribution.h"
#include "org/apache/commons/math/distribution/FDistributionImpl.h"
#include "org/apache/commons/math/distribution/GammaDistributionImpl.h"
#include "org/apache/commons/math/distribution/HypergeometricDistributionImpl.h"
#include "org/apache/commons/math/distribution/IntegerDistribution.h"
#include "org/apache/commons/math/distribution/PascalDistributionImpl.h"
#include "org/apache/commons/math/distribution/TDistributionImpl.h"
#include "org/apache/commons/math/distribution/WeibullDistributionImpl.h"
#include "org/apache/commons/math/distribution/ZipfDistributionImpl.h"
#include "org/apache/commons/math/exception/MathInternalError.h"
#include "org/apache/commons/math/exception/NotStrictlyPositiveException.h"
#include "org/apache/commons/math/exception/NumberIsTooLargeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/random/JDKRandomGenerator.h"
#include "org/apache/commons/math/random/RandomDataImpl.h"
#include "org/apache/commons/math/random/RandomGenerator.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

#define OrgApacheCommonsMathRandomRandomDataImpl_serialVersionUID -626730818244969716LL

@interface OrgApacheCommonsMathRandomRandomDataImpl () {
 @public
  id<OrgApacheCommonsMathRandomRandomGenerator> rand_;
  JavaSecuritySecureRandom *secRand_;
}

- (id<OrgApacheCommonsMathRandomRandomGenerator>)getRan;

- (JavaSecuritySecureRandom *)getSecRan;

- (void)shuffleWithIntArray:(IOSIntArray *)list
                    withInt:(jint)end;

- (IOSIntArray *)getNaturalWithInt:(jint)n;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomRandomDataImpl, rand_, id<OrgApacheCommonsMathRandomRandomGenerator>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomRandomDataImpl, secRand_, JavaSecuritySecureRandom *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathRandomRandomDataImpl, serialVersionUID, jlong)

__attribute__((unused)) static id<OrgApacheCommonsMathRandomRandomGenerator> OrgApacheCommonsMathRandomRandomDataImpl_getRan(OrgApacheCommonsMathRandomRandomDataImpl *self);

__attribute__((unused)) static JavaSecuritySecureRandom *OrgApacheCommonsMathRandomRandomDataImpl_getSecRan(OrgApacheCommonsMathRandomRandomDataImpl *self);

__attribute__((unused)) static void OrgApacheCommonsMathRandomRandomDataImpl_shuffleWithIntArray_withInt_(OrgApacheCommonsMathRandomRandomDataImpl *self, IOSIntArray *list, jint end);

__attribute__((unused)) static IOSIntArray *OrgApacheCommonsMathRandomRandomDataImpl_getNaturalWithInt_(OrgApacheCommonsMathRandomRandomDataImpl *self, jint n);

@implementation OrgApacheCommonsMathRandomRandomDataImpl

- (instancetype)init {
  OrgApacheCommonsMathRandomRandomDataImpl_init(self);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathRandomRandomGenerator:(id<OrgApacheCommonsMathRandomRandomGenerator>)rand {
  OrgApacheCommonsMathRandomRandomDataImpl_initWithOrgApacheCommonsMathRandomRandomGenerator_(self, rand);
  return self;
}

- (NSString *)nextHexStringWithInt:(jint)len {
  if (len <= 0) {
    @throw new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_LENGTH(), JavaLangInteger_valueOfWithInt_(len));
  }
  id<OrgApacheCommonsMathRandomRandomGenerator> ran = OrgApacheCommonsMathRandomRandomDataImpl_getRan(self);
  JavaLangStringBuilder *outBuffer = new_JavaLangStringBuilder_init();
  IOSByteArray *randomBytes = [IOSByteArray newArrayWithLength:(len / 2) + 1];
  [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(ran)) nextBytesWithByteArray:randomBytes];
  for (jint i = 0; i < randomBytes->size_; i++) {
    JavaLangInteger *c = JavaLangInteger_valueOfWithInt_(IOSByteArray_Get(randomBytes, i));
    NSString *hex = JavaLangInteger_toHexStringWithInt_([c intValue] + 128);
    if (((jint) [((NSString *) nil_chk(hex)) length]) == 1) {
      hex = JreStrcat("C$", '0', hex);
    }
    (void) [outBuffer appendWithNSString:hex];
  }
  return [((NSString *) nil_chk([outBuffer description])) substring:0 endIndex:len];
}

- (jint)nextIntWithInt:(jint)lower
               withInt:(jint)upper {
  if (lower >= upper) {
    @throw new_OrgApacheCommonsMathExceptionNumberIsTooLargeException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_LOWER_BOUND_NOT_BELOW_UPPER_BOUND(), JavaLangInteger_valueOfWithInt_(lower), JavaLangInteger_valueOfWithInt_(upper), NO);
  }
  jdouble r = [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(OrgApacheCommonsMathRandomRandomDataImpl_getRan(self))) nextDouble];
  return J2ObjCFpToInt(((r * upper) + ((1.0 - r) * lower) + r));
}

- (jlong)nextLongWithLong:(jlong)lower
                 withLong:(jlong)upper {
  if (lower >= upper) {
    @throw new_OrgApacheCommonsMathExceptionNumberIsTooLargeException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_LOWER_BOUND_NOT_BELOW_UPPER_BOUND(), JavaLangLong_valueOfWithLong_(lower), JavaLangLong_valueOfWithLong_(upper), NO);
  }
  jdouble r = [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(OrgApacheCommonsMathRandomRandomDataImpl_getRan(self))) nextDouble];
  return J2ObjCFpToLong(((r * upper) + ((1.0 - r) * lower) + r));
}

- (NSString *)nextSecureHexStringWithInt:(jint)len {
  if (len <= 0) {
    @throw new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_LENGTH(), JavaLangInteger_valueOfWithInt_(len));
  }
  JavaSecuritySecureRandom *secRan = OrgApacheCommonsMathRandomRandomDataImpl_getSecRan(self);
  JavaSecurityMessageDigest *alg = nil;
  @try {
    alg = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-1");
  }
  @catch (JavaSecurityNoSuchAlgorithmException *ex) {
    @throw new_OrgApacheCommonsMathExceptionMathInternalError_initWithJavaLangThrowable_(ex);
  }
  [((JavaSecurityMessageDigest *) nil_chk(alg)) reset];
  jint numIter = (len / 40) + 1;
  JavaLangStringBuilder *outBuffer = new_JavaLangStringBuilder_init();
  for (jint iter = 1; iter < numIter + 1; iter++) {
    IOSByteArray *randomBytes = [IOSByteArray newArrayWithLength:40];
    [((JavaSecuritySecureRandom *) nil_chk(secRan)) nextBytesWithByteArray:randomBytes];
    [alg updateWithByteArray:randomBytes];
    IOSByteArray *hash_ = [alg digest];
    for (jint i = 0; i < ((IOSByteArray *) nil_chk(hash_))->size_; i++) {
      JavaLangInteger *c = JavaLangInteger_valueOfWithInt_(IOSByteArray_Get(hash_, i));
      NSString *hex = JavaLangInteger_toHexStringWithInt_([c intValue] + 128);
      if (((jint) [((NSString *) nil_chk(hex)) length]) == 1) {
        hex = JreStrcat("C$", '0', hex);
      }
      (void) [outBuffer appendWithNSString:hex];
    }
  }
  return [((NSString *) nil_chk([outBuffer description])) substring:0 endIndex:len];
}

- (jint)nextSecureIntWithInt:(jint)lower
                     withInt:(jint)upper {
  if (lower >= upper) {
    @throw new_OrgApacheCommonsMathExceptionNumberIsTooLargeException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_LOWER_BOUND_NOT_BELOW_UPPER_BOUND(), JavaLangInteger_valueOfWithInt_(lower), JavaLangInteger_valueOfWithInt_(upper), NO);
  }
  JavaSecuritySecureRandom *sec = OrgApacheCommonsMathRandomRandomDataImpl_getSecRan(self);
  return lower + J2ObjCFpToInt(([((JavaSecuritySecureRandom *) nil_chk(sec)) nextDouble] * (upper - lower + 1)));
}

- (jlong)nextSecureLongWithLong:(jlong)lower
                       withLong:(jlong)upper {
  if (lower >= upper) {
    @throw new_OrgApacheCommonsMathExceptionNumberIsTooLargeException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_LOWER_BOUND_NOT_BELOW_UPPER_BOUND(), JavaLangLong_valueOfWithLong_(lower), JavaLangLong_valueOfWithLong_(upper), NO);
  }
  JavaSecuritySecureRandom *sec = OrgApacheCommonsMathRandomRandomDataImpl_getSecRan(self);
  return lower + J2ObjCFpToLong(([((JavaSecuritySecureRandom *) nil_chk(sec)) nextDouble] * (upper - lower + 1)));
}

- (jlong)nextPoissonWithDouble:(jdouble)mean {
  if (mean <= 0) {
    @throw new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_MEAN(), JavaLangDouble_valueOfWithDouble_(mean));
  }
  id<OrgApacheCommonsMathRandomRandomGenerator> generator = OrgApacheCommonsMathRandomRandomDataImpl_getRan(self);
  jdouble pivot = 40.0;
  if (mean < pivot) {
    jdouble p = OrgApacheCommonsMathUtilFastMath_expWithDouble_(-mean);
    jlong n = 0;
    jdouble r = 1.0;
    jdouble rnd = 1.0;
    while (n < 1000 * mean) {
      rnd = [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(generator)) nextDouble];
      r = r * rnd;
      if (r >= p) {
        n++;
      }
      else {
        return n;
      }
    }
    return n;
  }
  else {
    jdouble lambda = OrgApacheCommonsMathUtilFastMath_floorWithDouble_(mean);
    jdouble lambdaFractional = mean - lambda;
    jdouble logLambda = OrgApacheCommonsMathUtilFastMath_logWithDouble_(lambda);
    jdouble logLambdaFactorial = OrgApacheCommonsMathUtilMathUtils_factorialLogWithInt_(J2ObjCFpToInt(lambda));
    jlong y2 = lambdaFractional < JavaLangDouble_MIN_VALUE ? 0 : [self nextPoissonWithDouble:lambdaFractional];
    jdouble delta = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(lambda * OrgApacheCommonsMathUtilFastMath_logWithDouble_(32 * lambda / OrgApacheCommonsMathUtilFastMath_PI + 1));
    jdouble halfDelta = delta / 2;
    jdouble twolpd = 2 * lambda + delta;
    jdouble a1 = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(OrgApacheCommonsMathUtilFastMath_PI * twolpd) * OrgApacheCommonsMathUtilFastMath_expWithDouble_(1 / 8 * lambda);
    jdouble a2 = (twolpd / delta) * OrgApacheCommonsMathUtilFastMath_expWithDouble_(-delta * (1 + delta) / twolpd);
    jdouble aSum = a1 + a2 + 1;
    jdouble p1 = a1 / aSum;
    jdouble p2 = a2 / aSum;
    jdouble c1 = 1 / (8 * lambda);
    jdouble x = 0;
    jdouble y = 0;
    jdouble v = 0;
    jint a = 0;
    jdouble t = 0;
    jdouble qr = 0;
    jdouble qa = 0;
    for (; ; ) {
      jdouble u = [self nextUniformWithDouble:0.0 withDouble:1];
      if (u <= p1) {
        jdouble n = [self nextGaussianWithDouble:0.0 withDouble:1.0];
        x = n * OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(lambda + halfDelta) - 0.5;
        if (x > delta || x < -lambda) {
          continue;
        }
        y = x < 0 ? OrgApacheCommonsMathUtilFastMath_floorWithDouble_(x) : OrgApacheCommonsMathUtilFastMath_ceilWithDouble_(x);
        jdouble e = [self nextExponentialWithDouble:1.0];
        v = -e - (n * n / 2) + c1;
      }
      else {
        if (u > p1 + p2) {
          y = lambda;
          break;
        }
        else {
          x = delta + (twolpd / delta) * [self nextExponentialWithDouble:1.0];
          y = OrgApacheCommonsMathUtilFastMath_ceilWithDouble_(x);
          v = -[self nextExponentialWithDouble:1.0] - delta * (x + 1) / twolpd;
        }
      }
      a = x < 0 ? 1 : 0;
      t = y * (y + 1) / (2 * lambda);
      if (v < -t && a == 0) {
        y = lambda + y;
        break;
      }
      qr = t * ((2 * y + 1) / (6 * lambda) - 1);
      qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
      if (v < qa) {
        y = lambda + y;
        break;
      }
      if (v > qr) {
        continue;
      }
      if (v < y * logLambda - OrgApacheCommonsMathUtilMathUtils_factorialLogWithInt_(J2ObjCFpToInt((y + lambda))) + logLambdaFactorial) {
        y = lambda + y;
        break;
      }
    }
    return y2 + J2ObjCFpToLong(y);
  }
}

- (jdouble)nextGaussianWithDouble:(jdouble)mu
                       withDouble:(jdouble)sigma {
  if (sigma <= 0) {
    @throw new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_STANDARD_DEVIATION(), JavaLangDouble_valueOfWithDouble_(sigma));
  }
  return sigma * [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(OrgApacheCommonsMathRandomRandomDataImpl_getRan(self))) nextGaussian] + mu;
}

- (jdouble)nextExponentialWithDouble:(jdouble)mean {
  if (mean <= 0.0) {
    @throw new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_MEAN(), JavaLangDouble_valueOfWithDouble_(mean));
  }
  id<OrgApacheCommonsMathRandomRandomGenerator> generator = OrgApacheCommonsMathRandomRandomDataImpl_getRan(self);
  jdouble unif = [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(generator)) nextDouble];
  while (unif == 0.0) {
    unif = [generator nextDouble];
  }
  return -mean * OrgApacheCommonsMathUtilFastMath_logWithDouble_(unif);
}

- (jdouble)nextUniformWithDouble:(jdouble)lower
                      withDouble:(jdouble)upper {
  if (lower >= upper) {
    @throw new_OrgApacheCommonsMathExceptionNumberIsTooLargeException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_LOWER_BOUND_NOT_BELOW_UPPER_BOUND(), JavaLangDouble_valueOfWithDouble_(lower), JavaLangDouble_valueOfWithDouble_(upper), NO);
  }
  id<OrgApacheCommonsMathRandomRandomGenerator> generator = OrgApacheCommonsMathRandomRandomDataImpl_getRan(self);
  jdouble u = [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(generator)) nextDouble];
  while (u <= 0.0) {
    u = [generator nextDouble];
  }
  return lower + u * (upper - lower);
}

- (jdouble)nextBetaWithDouble:(jdouble)alpha
                   withDouble:(jdouble)beta {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:new_OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_(alpha, beta)];
}

- (jint)nextBinomialWithInt:(jint)numberOfTrials
                 withDouble:(jdouble)probabilityOfSuccess {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionIntegerDistribution:new_OrgApacheCommonsMathDistributionBinomialDistributionImpl_initWithInt_withDouble_(numberOfTrials, probabilityOfSuccess)];
}

- (jdouble)nextCauchyWithDouble:(jdouble)median
                     withDouble:(jdouble)scale_ {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:new_OrgApacheCommonsMathDistributionCauchyDistributionImpl_initWithDouble_withDouble_(median, scale_)];
}

- (jdouble)nextChiSquareWithDouble:(jdouble)df {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:new_OrgApacheCommonsMathDistributionChiSquaredDistributionImpl_initWithDouble_(df)];
}

- (jdouble)nextFWithDouble:(jdouble)numeratorDf
                withDouble:(jdouble)denominatorDf {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:new_OrgApacheCommonsMathDistributionFDistributionImpl_initWithDouble_withDouble_(numeratorDf, denominatorDf)];
}

- (jdouble)nextGammaWithDouble:(jdouble)shape
                    withDouble:(jdouble)scale_ {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:new_OrgApacheCommonsMathDistributionGammaDistributionImpl_initWithDouble_withDouble_(shape, scale_)];
}

- (jint)nextHypergeometricWithInt:(jint)populationSize
                          withInt:(jint)numberOfSuccesses
                          withInt:(jint)sampleSize {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionIntegerDistribution:new_OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_initWithInt_withInt_withInt_(populationSize, numberOfSuccesses, sampleSize)];
}

- (jint)nextPascalWithInt:(jint)r
               withDouble:(jdouble)p {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionIntegerDistribution:new_OrgApacheCommonsMathDistributionPascalDistributionImpl_initWithInt_withDouble_(r, p)];
}

- (jdouble)nextTWithDouble:(jdouble)df {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(df)];
}

- (jdouble)nextWeibullWithDouble:(jdouble)shape
                      withDouble:(jdouble)scale_ {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:new_OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_(shape, scale_)];
}

- (jint)nextZipfWithInt:(jint)numberOfElements
             withDouble:(jdouble)exponent {
  return [self nextInversionDeviateWithOrgApacheCommonsMathDistributionIntegerDistribution:new_OrgApacheCommonsMathDistributionZipfDistributionImpl_initWithInt_withDouble_(numberOfElements, exponent)];
}

- (id<OrgApacheCommonsMathRandomRandomGenerator>)getRan {
  return OrgApacheCommonsMathRandomRandomDataImpl_getRan(self);
}

- (JavaSecuritySecureRandom *)getSecRan {
  return OrgApacheCommonsMathRandomRandomDataImpl_getSecRan(self);
}

- (void)reSeedWithLong:(jlong)seed {
  if (rand_ == nil) {
    rand_ = new_OrgApacheCommonsMathRandomJDKRandomGenerator_init();
  }
  [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(rand_)) setSeedWithLong:seed];
}

- (void)reSeedSecure {
  if (secRand_ == nil) {
    secRand_ = new_JavaSecuritySecureRandom_init();
  }
  [((JavaSecuritySecureRandom *) nil_chk(secRand_)) setSeedWithLong:JavaLangSystem_currentTimeMillis()];
}

- (void)reSeedSecureWithLong:(jlong)seed {
  if (secRand_ == nil) {
    secRand_ = new_JavaSecuritySecureRandom_init();
  }
  [((JavaSecuritySecureRandom *) nil_chk(secRand_)) setSeedWithLong:seed];
}

- (void)reSeed {
  if (rand_ == nil) {
    rand_ = new_OrgApacheCommonsMathRandomJDKRandomGenerator_init();
  }
  [((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(rand_)) setSeedWithLong:JavaLangSystem_currentTimeMillis()];
}

- (void)setSecureAlgorithmWithNSString:(NSString *)algorithm
                          withNSString:(NSString *)provider {
  secRand_ = JavaSecuritySecureRandom_getInstanceWithNSString_withNSString_(algorithm, provider);
}

- (IOSIntArray *)nextPermutationWithInt:(jint)n
                                withInt:(jint)k {
  if (k > n) {
    @throw new_OrgApacheCommonsMathExceptionNumberIsTooLargeException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_PERMUTATION_EXCEEDS_N(), JavaLangInteger_valueOfWithInt_(k), JavaLangInteger_valueOfWithInt_(n), YES);
  }
  if (k == 0) {
    @throw new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_PERMUTATION_SIZE(), JavaLangInteger_valueOfWithInt_(k));
  }
  IOSIntArray *index = OrgApacheCommonsMathRandomRandomDataImpl_getNaturalWithInt_(self, n);
  OrgApacheCommonsMathRandomRandomDataImpl_shuffleWithIntArray_withInt_(self, index, n - k);
  IOSIntArray *result = [IOSIntArray newArrayWithLength:k];
  for (jint i = 0; i < k; i++) {
    *IOSIntArray_GetRef(result, i) = IOSIntArray_Get(nil_chk(index), n - i - 1);
  }
  return result;
}

- (IOSObjectArray *)nextSampleWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                             withInt:(jint)k {
  jint len = [((id<JavaUtilCollection>) nil_chk(c)) size];
  if (k > len) {
    @throw new_OrgApacheCommonsMathExceptionNumberIsTooLargeException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(), JavaLangInteger_valueOfWithInt_(k), JavaLangInteger_valueOfWithInt_(len), YES);
  }
  if (k <= 0) {
    @throw new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NUMBER_OF_SAMPLES(), JavaLangInteger_valueOfWithInt_(k));
  }
  IOSObjectArray *objects = [c toArray];
  IOSIntArray *index = [self nextPermutationWithInt:len withInt:k];
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:k type:NSObject_class_()];
  for (jint i = 0; i < k; i++) {
    (void) IOSObjectArray_Set(result, i, IOSObjectArray_Get(nil_chk(objects), IOSIntArray_Get(nil_chk(index), i)));
  }
  return result;
}

- (jdouble)nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:(id<OrgApacheCommonsMathDistributionContinuousDistribution>)distribution {
  return [((id<OrgApacheCommonsMathDistributionContinuousDistribution>) nil_chk(distribution)) inverseCumulativeProbabilityWithDouble:[self nextUniformWithDouble:0 withDouble:1]];
}

- (jint)nextInversionDeviateWithOrgApacheCommonsMathDistributionIntegerDistribution:(id<OrgApacheCommonsMathDistributionIntegerDistribution>)distribution {
  jdouble target = [self nextUniformWithDouble:0 withDouble:1];
  jint glb = [((id<OrgApacheCommonsMathDistributionIntegerDistribution>) nil_chk(distribution)) inverseCumulativeProbabilityWithDouble:target];
  if ([distribution cumulativeProbabilityWithInt:glb] == 1.0) {
    return glb;
  }
  else {
    return glb + 1;
  }
}

- (void)shuffleWithIntArray:(IOSIntArray *)list
                    withInt:(jint)end {
  OrgApacheCommonsMathRandomRandomDataImpl_shuffleWithIntArray_withInt_(self, list, end);
}

- (IOSIntArray *)getNaturalWithInt:(jint)n {
  return OrgApacheCommonsMathRandomRandomDataImpl_getNaturalWithInt_(self, n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "RandomDataImpl", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathRandomRandomGenerator:", "RandomDataImpl", NULL, 0x1, NULL, NULL },
    { "nextHexStringWithInt:", "nextHexString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "nextIntWithInt:withInt:", "nextInt", "I", 0x1, NULL, NULL },
    { "nextLongWithLong:withLong:", "nextLong", "J", 0x1, NULL, NULL },
    { "nextSecureHexStringWithInt:", "nextSecureHexString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "nextSecureIntWithInt:withInt:", "nextSecureInt", "I", 0x1, NULL, NULL },
    { "nextSecureLongWithLong:withLong:", "nextSecureLong", "J", 0x1, NULL, NULL },
    { "nextPoissonWithDouble:", "nextPoisson", "J", 0x1, NULL, NULL },
    { "nextGaussianWithDouble:withDouble:", "nextGaussian", "D", 0x1, NULL, NULL },
    { "nextExponentialWithDouble:", "nextExponential", "D", 0x1, NULL, NULL },
    { "nextUniformWithDouble:withDouble:", "nextUniform", "D", 0x1, NULL, NULL },
    { "nextBetaWithDouble:withDouble:", "nextBeta", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextBinomialWithInt:withDouble:", "nextBinomial", "I", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextCauchyWithDouble:withDouble:", "nextCauchy", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextChiSquareWithDouble:", "nextChiSquare", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextFWithDouble:withDouble:", "nextF", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextGammaWithDouble:withDouble:", "nextGamma", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextHypergeometricWithInt:withInt:withInt:", "nextHypergeometric", "I", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextPascalWithInt:withDouble:", "nextPascal", "I", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextTWithDouble:", "nextT", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextWeibullWithDouble:withDouble:", "nextWeibull", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextZipfWithInt:withDouble:", "nextZipf", "I", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "getRan", NULL, "Lorg.apache.commons.math.random.RandomGenerator;", 0x2, NULL, NULL },
    { "getSecRan", NULL, "Ljava.security.SecureRandom;", 0x2, NULL, NULL },
    { "reSeedWithLong:", "reSeed", "V", 0x1, NULL, NULL },
    { "reSeedSecure", NULL, "V", 0x1, NULL, NULL },
    { "reSeedSecureWithLong:", "reSeedSecure", "V", 0x1, NULL, NULL },
    { "reSeed", NULL, "V", 0x1, NULL, NULL },
    { "setSecureAlgorithmWithNSString:withNSString:", "setSecureAlgorithm", "V", 0x1, "Ljava.security.NoSuchAlgorithmException;Ljava.security.NoSuchProviderException;", NULL },
    { "nextPermutationWithInt:withInt:", "nextPermutation", "[I", 0x1, NULL, NULL },
    { "nextSampleWithJavaUtilCollection:withInt:", "nextSample", "[Ljava.lang.Object;", 0x1, NULL, NULL },
    { "nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:", "nextInversionDeviate", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextInversionDeviateWithOrgApacheCommonsMathDistributionIntegerDistribution:", "nextInversionDeviate", "I", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "shuffleWithIntArray:withInt:", "shuffle", "V", 0x2, NULL, NULL },
    { "getNaturalWithInt:", "getNatural", "[I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathRandomRandomDataImpl_serialVersionUID },
    { "rand_", NULL, 0x2, "Lorg.apache.commons.math.random.RandomGenerator;", NULL, NULL,  },
    { "secRand_", NULL, 0x2, "Ljava.security.SecureRandom;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathRandomRandomDataImpl = { 2, "RandomDataImpl", "org.apache.commons.math.random", NULL, 0x1, 36, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathRandomRandomDataImpl;
}

@end

void OrgApacheCommonsMathRandomRandomDataImpl_init(OrgApacheCommonsMathRandomRandomDataImpl *self) {
  (void) NSObject_init(self);
  self->rand_ = nil;
  self->secRand_ = nil;
}

OrgApacheCommonsMathRandomRandomDataImpl *new_OrgApacheCommonsMathRandomRandomDataImpl_init() {
  OrgApacheCommonsMathRandomRandomDataImpl *self = [OrgApacheCommonsMathRandomRandomDataImpl alloc];
  OrgApacheCommonsMathRandomRandomDataImpl_init(self);
  return self;
}

void OrgApacheCommonsMathRandomRandomDataImpl_initWithOrgApacheCommonsMathRandomRandomGenerator_(OrgApacheCommonsMathRandomRandomDataImpl *self, id<OrgApacheCommonsMathRandomRandomGenerator> rand) {
  (void) NSObject_init(self);
  self->rand_ = nil;
  self->secRand_ = nil;
  self->rand_ = rand;
}

OrgApacheCommonsMathRandomRandomDataImpl *new_OrgApacheCommonsMathRandomRandomDataImpl_initWithOrgApacheCommonsMathRandomRandomGenerator_(id<OrgApacheCommonsMathRandomRandomGenerator> rand) {
  OrgApacheCommonsMathRandomRandomDataImpl *self = [OrgApacheCommonsMathRandomRandomDataImpl alloc];
  OrgApacheCommonsMathRandomRandomDataImpl_initWithOrgApacheCommonsMathRandomRandomGenerator_(self, rand);
  return self;
}

id<OrgApacheCommonsMathRandomRandomGenerator> OrgApacheCommonsMathRandomRandomDataImpl_getRan(OrgApacheCommonsMathRandomRandomDataImpl *self) {
  if (self->rand_ == nil) {
    self->rand_ = new_OrgApacheCommonsMathRandomJDKRandomGenerator_init();
    [self->rand_ setSeedWithLong:JavaLangSystem_currentTimeMillis()];
  }
  return self->rand_;
}

JavaSecuritySecureRandom *OrgApacheCommonsMathRandomRandomDataImpl_getSecRan(OrgApacheCommonsMathRandomRandomDataImpl *self) {
  if (self->secRand_ == nil) {
    self->secRand_ = new_JavaSecuritySecureRandom_init();
    [self->secRand_ setSeedWithLong:JavaLangSystem_currentTimeMillis()];
  }
  return self->secRand_;
}

void OrgApacheCommonsMathRandomRandomDataImpl_shuffleWithIntArray_withInt_(OrgApacheCommonsMathRandomRandomDataImpl *self, IOSIntArray *list, jint end) {
  jint target = 0;
  for (jint i = ((IOSIntArray *) nil_chk(list))->size_ - 1; i >= end; i--) {
    if (i == 0) {
      target = 0;
    }
    else {
      target = [self nextIntWithInt:0 withInt:i];
    }
    jint temp = IOSIntArray_Get(list, target);
    *IOSIntArray_GetRef(list, target) = IOSIntArray_Get(list, i);
    *IOSIntArray_GetRef(list, i) = temp;
  }
}

IOSIntArray *OrgApacheCommonsMathRandomRandomDataImpl_getNaturalWithInt_(OrgApacheCommonsMathRandomRandomDataImpl *self, jint n) {
  IOSIntArray *natural = [IOSIntArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(natural, i) = i;
  }
  return natural;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathRandomRandomDataImpl)
