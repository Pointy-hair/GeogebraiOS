//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/estimation/AbstractEstimator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/estimation/AbstractEstimator.h"
#include "org/apache/commons/math/estimation/EstimatedParameter.h"
#include "org/apache/commons/math/estimation/EstimationException.h"
#include "org/apache/commons/math/estimation/EstimationProblem.h"
#include "org/apache/commons/math/estimation/WeightedMeasurement.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/LUDecompositionImpl.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathEstimationAbstractEstimator () {
 @public
  jint maxCostEval_;
  jint costEvaluations_;
  jint jacobianEvaluations_;
}

@end

__attribute__((unused)) static void OrgApacheCommonsMathEstimationAbstractEstimator_setMaxCostEvalWithInt_(OrgApacheCommonsMathEstimationAbstractEstimator *self, jint maxCostEval);

__attribute__((unused)) static void OrgApacheCommonsMathEstimationAbstractEstimator_incrementJacobianEvaluationsCounter(OrgApacheCommonsMathEstimationAbstractEstimator *self);

@implementation OrgApacheCommonsMathEstimationAbstractEstimator

- (instancetype)init {
  OrgApacheCommonsMathEstimationAbstractEstimator_init(self);
  return self;
}

- (void)setMaxCostEvalWithInt:(jint)maxCostEval {
  OrgApacheCommonsMathEstimationAbstractEstimator_setMaxCostEvalWithInt_(self, maxCostEval);
}

- (jint)getCostEvaluations {
  return costEvaluations_;
}

- (jint)getJacobianEvaluations {
  return jacobianEvaluations_;
}

- (void)updateJacobian {
  OrgApacheCommonsMathEstimationAbstractEstimator_incrementJacobianEvaluationsCounter(self);
  JavaUtilArrays_fillWithDoubleArray_withDouble_(jacobian_, 0);
  jint index = 0;
  for (jint i = 0; i < rows_; i++) {
    OrgApacheCommonsMathEstimationWeightedMeasurement *wm = IOSObjectArray_Get(nil_chk(measurements_), i);
    jdouble factor = -OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_([((OrgApacheCommonsMathEstimationWeightedMeasurement *) nil_chk(wm)) getWeight]);
    for (jint j = 0; j < cols_; ++j) {
      *IOSDoubleArray_GetRef(nil_chk(jacobian_), index++) = factor * [wm getPartialWithOrgApacheCommonsMathEstimationEstimatedParameter:IOSObjectArray_Get(nil_chk(parameters_), j)];
    }
  }
}

- (void)incrementJacobianEvaluationsCounter {
  OrgApacheCommonsMathEstimationAbstractEstimator_incrementJacobianEvaluationsCounter(self);
}

- (void)updateResidualsAndCost {
  if (++costEvaluations_ > maxCostEval_) {
    @throw [new_OrgApacheCommonsMathEstimationEstimationException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_MAX_EVALUATIONS_EXCEEDED(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(maxCostEval_) } count:1 type:NSObject_class_()]) autorelease];
  }
  cost_ = 0;
  for (jint i = 0; i < rows_; i++) {
    OrgApacheCommonsMathEstimationWeightedMeasurement *wm = IOSObjectArray_Get(nil_chk(measurements_), i);
    jdouble residual = [((OrgApacheCommonsMathEstimationWeightedMeasurement *) nil_chk(wm)) getResidual];
    *IOSDoubleArray_GetRef(nil_chk(residuals_), i) = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_([wm getWeight]) * residual;
    cost_ += [wm getWeight] * residual * residual;
  }
  cost_ = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(cost_);
}

- (jdouble)getRMSWithOrgApacheCommonsMathEstimationEstimationProblem:(id<OrgApacheCommonsMathEstimationEstimationProblem>)problem {
  IOSObjectArray *wm = [((id<OrgApacheCommonsMathEstimationEstimationProblem>) nil_chk(problem)) getMeasurements];
  jdouble criterion = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(wm))->size_; ++i) {
    jdouble residual = [((OrgApacheCommonsMathEstimationWeightedMeasurement *) nil_chk(IOSObjectArray_Get(wm, i))) getResidual];
    criterion += [((OrgApacheCommonsMathEstimationWeightedMeasurement *) nil_chk(IOSObjectArray_Get(wm, i))) getWeight] * residual * residual;
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(criterion / wm->size_);
}

- (jdouble)getChiSquareWithOrgApacheCommonsMathEstimationEstimationProblem:(id<OrgApacheCommonsMathEstimationEstimationProblem>)problem {
  IOSObjectArray *wm = [((id<OrgApacheCommonsMathEstimationEstimationProblem>) nil_chk(problem)) getMeasurements];
  jdouble chiSquare = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(wm))->size_; ++i) {
    jdouble residual = [((OrgApacheCommonsMathEstimationWeightedMeasurement *) nil_chk(IOSObjectArray_Get(wm, i))) getResidual];
    chiSquare += residual * residual / [((OrgApacheCommonsMathEstimationWeightedMeasurement *) nil_chk(IOSObjectArray_Get(wm, i))) getWeight];
  }
  return chiSquare;
}

- (IOSObjectArray *)getCovariancesWithOrgApacheCommonsMathEstimationEstimationProblem:(id<OrgApacheCommonsMathEstimationEstimationProblem>)problem {
  [self updateJacobian];
  jint n = ((IOSObjectArray *) nil_chk([((id<OrgApacheCommonsMathEstimationEstimationProblem>) nil_chk(problem)) getMeasurements]))->size_;
  jint m = ((IOSObjectArray *) nil_chk([problem getUnboundParameters]))->size_;
  jint max = m * n;
  IOSObjectArray *jTj = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ m, m }];
  for (jint i = 0; i < m; ++i) {
    for (jint j = i; j < m; ++j) {
      jdouble sum = 0;
      for (jint k = 0; k < max; k += m) {
        sum += IOSDoubleArray_Get(nil_chk(jacobian_), k + i) * IOSDoubleArray_Get(jacobian_, k + j);
      }
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(jTj, i)), j) = sum;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(jTj, j)), i) = sum;
    }
  }
  @try {
    id<OrgApacheCommonsMathLinearRealMatrix> inverse = [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk([((OrgApacheCommonsMathLinearLUDecompositionImpl *) [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(OrgApacheCommonsMathLinearMatrixUtils_createRealMatrixWithDoubleArray2_(jTj)) autorelease]) getSolver])) getInverse];
    return [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(inverse)) getData];
  }
  @catch (OrgApacheCommonsMathLinearInvalidMatrixException *ime) {
    @throw [new_OrgApacheCommonsMathEstimationEstimationException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
  }
}

- (IOSDoubleArray *)guessParametersErrorsWithOrgApacheCommonsMathEstimationEstimationProblem:(id<OrgApacheCommonsMathEstimationEstimationProblem>)problem {
  jint m = ((IOSObjectArray *) nil_chk([((id<OrgApacheCommonsMathEstimationEstimationProblem>) nil_chk(problem)) getMeasurements]))->size_;
  jint p = ((IOSObjectArray *) nil_chk([problem getUnboundParameters]))->size_;
  if (m <= p) {
    @throw [new_OrgApacheCommonsMathEstimationEstimationException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_DEGREES_OF_FREEDOM(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(m), JavaLangInteger_valueOfWithInt_(p) } count:2 type:NSObject_class_()]) autorelease];
  }
  IOSDoubleArray *errors = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk([problem getUnboundParameters]))->size_];
  jdouble c = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_([self getChiSquareWithOrgApacheCommonsMathEstimationEstimationProblem:problem] / (m - p));
  IOSObjectArray *covar = [self getCovariancesWithOrgApacheCommonsMathEstimationEstimationProblem:problem];
  for (jint i = 0; i < errors->size_; ++i) {
    *IOSDoubleArray_GetRef(errors, i) = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(covar), i)), i)) * c;
  }
  return errors;
}

- (void)initializeEstimateWithOrgApacheCommonsMathEstimationEstimationProblem:(id<OrgApacheCommonsMathEstimationEstimationProblem>)problem {
  costEvaluations_ = 0;
  jacobianEvaluations_ = 0;
  OrgApacheCommonsMathEstimationAbstractEstimator_set_measurements_(self, [((id<OrgApacheCommonsMathEstimationEstimationProblem>) nil_chk(problem)) getMeasurements]);
  OrgApacheCommonsMathEstimationAbstractEstimator_set_parameters_(self, [problem getUnboundParameters]);
  rows_ = ((IOSObjectArray *) nil_chk(measurements_))->size_;
  cols_ = ((IOSObjectArray *) nil_chk(parameters_))->size_;
  OrgApacheCommonsMathEstimationAbstractEstimator_setAndConsume_jacobian_(self, [IOSDoubleArray newArrayWithLength:rows_ * cols_]);
  OrgApacheCommonsMathEstimationAbstractEstimator_setAndConsume_residuals_(self, [IOSDoubleArray newArrayWithLength:rows_]);
  cost_ = JavaLangDouble_POSITIVE_INFINITY;
}

- (void)estimateWithOrgApacheCommonsMathEstimationEstimationProblem:(id<OrgApacheCommonsMathEstimationEstimationProblem>)problem {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(measurements_);
  RELEASE_(parameters_);
  RELEASE_(jacobian_);
  RELEASE_(residuals_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractEstimator", NULL, 0x4, NULL, NULL },
    { "setMaxCostEvalWithInt:", "setMaxCostEval", "V", 0x11, NULL, NULL },
    { "getCostEvaluations", NULL, "I", 0x11, NULL, NULL },
    { "getJacobianEvaluations", NULL, "I", 0x11, NULL, NULL },
    { "updateJacobian", NULL, "V", 0x4, NULL, NULL },
    { "incrementJacobianEvaluationsCounter", NULL, "V", 0x14, NULL, NULL },
    { "updateResidualsAndCost", NULL, "V", 0x4, "Lorg.apache.commons.math.estimation.EstimationException;", NULL },
    { "getRMSWithOrgApacheCommonsMathEstimationEstimationProblem:", "getRMS", "D", 0x1, NULL, NULL },
    { "getChiSquareWithOrgApacheCommonsMathEstimationEstimationProblem:", "getChiSquare", "D", 0x1, NULL, NULL },
    { "getCovariancesWithOrgApacheCommonsMathEstimationEstimationProblem:", "getCovariances", "[[D", 0x1, "Lorg.apache.commons.math.estimation.EstimationException;", NULL },
    { "guessParametersErrorsWithOrgApacheCommonsMathEstimationEstimationProblem:", "guessParametersErrors", "[D", 0x1, "Lorg.apache.commons.math.estimation.EstimationException;", NULL },
    { "initializeEstimateWithOrgApacheCommonsMathEstimationEstimationProblem:", "initializeEstimate", "V", 0x4, NULL, NULL },
    { "estimateWithOrgApacheCommonsMathEstimationEstimationProblem:", "estimate", "V", 0x401, "Lorg.apache.commons.math.estimation.EstimationException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MAX_COST_EVALUATIONS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathEstimationAbstractEstimator_DEFAULT_MAX_COST_EVALUATIONS },
    { "measurements_", NULL, 0x4, "[Lorg.apache.commons.math.estimation.WeightedMeasurement;", NULL, NULL,  },
    { "parameters_", NULL, 0x4, "[Lorg.apache.commons.math.estimation.EstimatedParameter;", NULL, NULL,  },
    { "jacobian_", NULL, 0x4, "[D", NULL, NULL,  },
    { "cols_", NULL, 0x4, "I", NULL, NULL,  },
    { "rows_", NULL, 0x4, "I", NULL, NULL,  },
    { "residuals_", NULL, 0x4, "[D", NULL, NULL,  },
    { "cost_", NULL, 0x4, "D", NULL, NULL,  },
    { "maxCostEval_", NULL, 0x2, "I", NULL, NULL,  },
    { "costEvaluations_", NULL, 0x2, "I", NULL, NULL,  },
    { "jacobianEvaluations_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathEstimationAbstractEstimator = { 2, "AbstractEstimator", "org.apache.commons.math.estimation", NULL, 0x401, 13, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathEstimationAbstractEstimator;
}

@end

void OrgApacheCommonsMathEstimationAbstractEstimator_init(OrgApacheCommonsMathEstimationAbstractEstimator *self) {
  NSObject_init(self);
  OrgApacheCommonsMathEstimationAbstractEstimator_setMaxCostEvalWithInt_(self, OrgApacheCommonsMathEstimationAbstractEstimator_DEFAULT_MAX_COST_EVALUATIONS);
}

void OrgApacheCommonsMathEstimationAbstractEstimator_setMaxCostEvalWithInt_(OrgApacheCommonsMathEstimationAbstractEstimator *self, jint maxCostEval) {
  self->maxCostEval_ = maxCostEval;
}

void OrgApacheCommonsMathEstimationAbstractEstimator_incrementJacobianEvaluationsCounter(OrgApacheCommonsMathEstimationAbstractEstimator *self) {
  ++self->jacobianEvaluations_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathEstimationAbstractEstimator)
