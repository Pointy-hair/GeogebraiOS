//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/genetics/RandomKey.java
//

#ifndef _OrgApacheCommonsMathGeneticsRandomKey_H_
#define _OrgApacheCommonsMathGeneticsRandomKey_H_

#include "J2ObjC_header.h"
#include "org/apache/commons/math/genetics/AbstractListChromosome.h"
#include "org/apache/commons/math/genetics/PermutationChromosome.h"

@class IOSObjectArray;
@class OrgApacheCommonsMathGeneticsChromosome;
@protocol JavaUtilComparator;
@protocol JavaUtilList;

@interface OrgApacheCommonsMathGeneticsRandomKey : OrgApacheCommonsMathGeneticsAbstractListChromosome < OrgApacheCommonsMathGeneticsPermutationChromosome >

#pragma mark Public

- (instancetype)initWithJavaLangDoubleArray:(IOSObjectArray *)representation;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)representation;

+ (id<JavaUtilList>)comparatorPermutationWithJavaUtilList:(id<JavaUtilList>)data
                                   withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

- (id<JavaUtilList>)decodeWithJavaUtilList:(id<JavaUtilList>)sequence;

+ (id<JavaUtilList>)identityPermutationWithInt:(jint)l;

+ (id<JavaUtilList>)inducedPermutationWithJavaUtilList:(id<JavaUtilList>)originalData
                                      withJavaUtilList:(id<JavaUtilList>)permutedData;

+ (id<JavaUtilList>)randomPermutationWithInt:(jint)l;

- (NSString *)description;

#pragma mark Protected

- (void)checkValidityWithJavaUtilList:(id<JavaUtilList>)chromosomeRepresentation;

- (jboolean)isSameWithOrgApacheCommonsMathGeneticsChromosome:(OrgApacheCommonsMathGeneticsChromosome *)another;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathGeneticsRandomKey)

FOUNDATION_EXPORT void OrgApacheCommonsMathGeneticsRandomKey_initWithJavaUtilList_(OrgApacheCommonsMathGeneticsRandomKey *self, id<JavaUtilList> representation);

FOUNDATION_EXPORT void OrgApacheCommonsMathGeneticsRandomKey_initWithJavaLangDoubleArray_(OrgApacheCommonsMathGeneticsRandomKey *self, IOSObjectArray *representation);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_randomPermutationWithInt_(jint l);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_identityPermutationWithInt_(jint l);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_comparatorPermutationWithJavaUtilList_withJavaUtilComparator_(id<JavaUtilList> data, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_inducedPermutationWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> originalData, id<JavaUtilList> permutedData);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathGeneticsRandomKey)

#endif // _OrgApacheCommonsMathGeneticsRandomKey_H_
