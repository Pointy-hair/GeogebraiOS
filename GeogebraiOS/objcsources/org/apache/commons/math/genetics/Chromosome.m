//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/genetics/Chromosome.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/apache/commons/math/genetics/Chromosome.h"
#include "org/apache/commons/math/genetics/Fitness.h"
#include "org/apache/commons/math/genetics/Population.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheCommonsMathGeneticsChromosome () {
 @public
  jdouble fitness_;
}

@end

@implementation OrgApacheCommonsMathGeneticsChromosome

- (jdouble)getFitness {
  if (self->fitness_ == JavaLangDouble_MIN_VALUE) {
    self->fitness_ = [self fitness];
  }
  return self->fitness_;
}

- (jint)compareToWithId:(OrgApacheCommonsMathGeneticsChromosome *)another {
  check_class_cast(another, [OrgApacheCommonsMathGeneticsChromosome class]);
  return [JavaLangDouble_valueOfWithDouble_([self getFitness]) compareToWithId:JavaLangDouble_valueOfWithDouble_([((OrgApacheCommonsMathGeneticsChromosome *) nil_chk(another)) getFitness])];
}

- (jboolean)isSameWithOrgApacheCommonsMathGeneticsChromosome:(OrgApacheCommonsMathGeneticsChromosome *)another {
  return NO;
}

- (OrgApacheCommonsMathGeneticsChromosome *)findSameChromosomeWithOrgApacheCommonsMathGeneticsPopulation:(id<OrgApacheCommonsMathGeneticsPopulation>)population {
  for (OrgApacheCommonsMathGeneticsChromosome * __strong anotherChr in nil_chk(population)) {
    if ([self isSameWithOrgApacheCommonsMathGeneticsChromosome:anotherChr]) return anotherChr;
  }
  return nil;
}

- (void)searchForFitnessUpdateWithOrgApacheCommonsMathGeneticsPopulation:(id<OrgApacheCommonsMathGeneticsPopulation>)population {
  OrgApacheCommonsMathGeneticsChromosome *sameChromosome = [self findSameChromosomeWithOrgApacheCommonsMathGeneticsPopulation:population];
  if (sameChromosome != nil) {
    fitness_ = [sameChromosome getFitness];
  }
}

- (instancetype)init {
  OrgApacheCommonsMathGeneticsChromosome_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFitness", NULL, "D", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "isSameWithOrgApacheCommonsMathGeneticsChromosome:", "isSame", "Z", 0x4, NULL, NULL },
    { "findSameChromosomeWithOrgApacheCommonsMathGeneticsPopulation:", "findSameChromosome", "Lorg.apache.commons.math.genetics.Chromosome;", 0x4, NULL, NULL },
    { "searchForFitnessUpdateWithOrgApacheCommonsMathGeneticsPopulation:", "searchForFitnessUpdate", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fitness_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathGeneticsChromosome = { 2, "Chromosome", "org.apache.commons.math.genetics", NULL, 0x401, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/commons/math/genetics/Chromosome;>;Lorg/apache/commons/math/genetics/Fitness;" };
  return &_OrgApacheCommonsMathGeneticsChromosome;
}

@end

void OrgApacheCommonsMathGeneticsChromosome_init(OrgApacheCommonsMathGeneticsChromosome *self) {
  NSObject_init(self);
  self->fitness_ = JavaLangDouble_MIN_VALUE;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathGeneticsChromosome)
