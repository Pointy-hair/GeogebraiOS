//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/genetics/RandomKey.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "org/apache/commons/math/genetics/AbstractListChromosome.h"
#include "org/apache/commons/math/genetics/Chromosome.h"
#include "org/apache/commons/math/genetics/GeneticAlgorithm.h"
#include "org/apache/commons/math/genetics/InvalidRepresentationException.h"
#include "org/apache/commons/math/genetics/RandomKey.h"
#include "org/apache/commons/math/random/RandomGenerator.h"

@interface OrgApacheCommonsMathGeneticsRandomKey () {
 @public
  id<JavaUtilList> sortedRepresentation_;
  id<JavaUtilList> baseSeqPermutation_;
}

+ (id<JavaUtilList>)decodeGenericWithJavaUtilList:(id<JavaUtilList>)sequence
                                 withJavaUtilList:(id<JavaUtilList>)representation
                                 withJavaUtilList:(id<JavaUtilList>)sortedRepr;

+ (id<JavaUtilList>)baseSequenceWithInt:(jint)l;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathGeneticsRandomKey, sortedRepresentation_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathGeneticsRandomKey, baseSeqPermutation_, id<JavaUtilList>)

__attribute__((unused)) static id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_decodeGenericWithJavaUtilList_withJavaUtilList_withJavaUtilList_(id<JavaUtilList> sequence, id<JavaUtilList> representation, id<JavaUtilList> sortedRepr);

__attribute__((unused)) static id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_baseSequenceWithInt_(jint l);

@implementation OrgApacheCommonsMathGeneticsRandomKey

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)representation {
  OrgApacheCommonsMathGeneticsRandomKey_initWithJavaUtilList_(self, representation);
  return self;
}

- (instancetype)initWithJavaLangDoubleArray:(IOSObjectArray *)representation {
  OrgApacheCommonsMathGeneticsRandomKey_initWithJavaLangDoubleArray_(self, representation);
  return self;
}

- (id<JavaUtilList>)decodeWithJavaUtilList:(id<JavaUtilList>)sequence {
  return OrgApacheCommonsMathGeneticsRandomKey_decodeGenericWithJavaUtilList_withJavaUtilList_withJavaUtilList_(sequence, [self getRepresentation], sortedRepresentation_);
}

+ (id<JavaUtilList>)decodeGenericWithJavaUtilList:(id<JavaUtilList>)sequence
                                 withJavaUtilList:(id<JavaUtilList>)representation
                                 withJavaUtilList:(id<JavaUtilList>)sortedRepr {
  return OrgApacheCommonsMathGeneticsRandomKey_decodeGenericWithJavaUtilList_withJavaUtilList_withJavaUtilList_(sequence, representation, sortedRepr);
}

- (jboolean)isSameWithOrgApacheCommonsMathGeneticsChromosome:(OrgApacheCommonsMathGeneticsChromosome *)another {
  if (!([another isKindOfClass:[OrgApacheCommonsMathGeneticsRandomKey class]])) return NO;
  OrgApacheCommonsMathGeneticsRandomKey *anotherRk = (OrgApacheCommonsMathGeneticsRandomKey *) check_class_cast(another, [OrgApacheCommonsMathGeneticsRandomKey class]);
  if ([self getLength] != [((OrgApacheCommonsMathGeneticsRandomKey *) nil_chk(anotherRk)) getLength]) return NO;
  id<JavaUtilList> thisPerm = self->baseSeqPermutation_;
  id<JavaUtilList> anotherPerm = anotherRk->baseSeqPermutation_;
  for (jint i = 0; i < [self getLength]; i++) {
    if ([((id<JavaUtilList>) nil_chk(thisPerm)) getWithInt:i] != [((id<JavaUtilList>) nil_chk(anotherPerm)) getWithInt:i]) return NO;
  }
  return YES;
}

- (void)checkValidityWithJavaUtilList:(id<JavaUtilList>)chromosomeRepresentation {
  for (JavaLangDouble *boxed__ in nil_chk(chromosomeRepresentation)) {
    jdouble val = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
    if (val < 0 || val > 1) {
      @throw new_OrgApacheCommonsMathGeneticsInvalidRepresentationException_initWithNSString_(@"Values of representation must be in [0,1] interval");
    }
  }
}

+ (id<JavaUtilList>)randomPermutationWithInt:(jint)l {
  return OrgApacheCommonsMathGeneticsRandomKey_randomPermutationWithInt_(l);
}

+ (id<JavaUtilList>)identityPermutationWithInt:(jint)l {
  return OrgApacheCommonsMathGeneticsRandomKey_identityPermutationWithInt_(l);
}

+ (id<JavaUtilList>)comparatorPermutationWithJavaUtilList:(id<JavaUtilList>)data
                                   withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return OrgApacheCommonsMathGeneticsRandomKey_comparatorPermutationWithJavaUtilList_withJavaUtilComparator_(data, comparator);
}

+ (id<JavaUtilList>)inducedPermutationWithJavaUtilList:(id<JavaUtilList>)originalData
                                      withJavaUtilList:(id<JavaUtilList>)permutedData {
  return OrgApacheCommonsMathGeneticsRandomKey_inducedPermutationWithJavaUtilList_withJavaUtilList_(originalData, permutedData);
}

- (NSString *)description {
  return NSString_formatWithNSString_withNSObjectArray_(@"(f=%s pi=(%s))", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([self getFitness]), baseSeqPermutation_ } count:2 type:NSObject_class_()]);
}

+ (id<JavaUtilList>)baseSequenceWithInt:(jint)l {
  return OrgApacheCommonsMathGeneticsRandomKey_baseSequenceWithInt_(l);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "RandomKey", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangDoubleArray:", "RandomKey", NULL, 0x1, NULL, NULL },
    { "decodeWithJavaUtilList:", "decode", "Ljava.util.List;", 0x1, NULL, NULL },
    { "decodeGenericWithJavaUtilList:withJavaUtilList:withJavaUtilList:", "decodeGeneric", "Ljava.util.List;", 0xa, NULL, "<S:Ljava/lang/Object;>(Ljava/util/List<TS;>;Ljava/util/List<Ljava/lang/Double;>;Ljava/util/List<Ljava/lang/Double;>;)Ljava/util/List<TS;>;" },
    { "isSameWithOrgApacheCommonsMathGeneticsChromosome:", "isSame", "Z", 0x4, NULL, NULL },
    { "checkValidityWithJavaUtilList:", "checkValidity", "V", 0x4, "Lorg.apache.commons.math.genetics.InvalidRepresentationException;", NULL },
    { "randomPermutationWithInt:", "randomPermutation", "Ljava.util.List;", 0x19, NULL, NULL },
    { "identityPermutationWithInt:", "identityPermutation", "Ljava.util.List;", 0x19, NULL, NULL },
    { "comparatorPermutationWithJavaUtilList:withJavaUtilComparator:", "comparatorPermutation", "Ljava.util.List;", 0x9, NULL, "<S:Ljava/lang/Object;>(Ljava/util/List<TS;>;Ljava/util/Comparator<TS;>;)Ljava/util/List<Ljava/lang/Double;>;" },
    { "inducedPermutationWithJavaUtilList:withJavaUtilList:", "inducedPermutation", "Ljava.util.List;", 0x9, "Ljava.lang.IllegalArgumentException;", "<S:Ljava/lang/Object;>(Ljava/util/List<TS;>;Ljava/util/List<TS;>;)Ljava/util/List<Ljava/lang/Double;>;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "baseSequenceWithInt:", "baseSequence", "Ljava.util.List;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sortedRepresentation_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Double;>;",  },
    { "baseSeqPermutation_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Integer;>;",  },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Double;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathGeneticsRandomKey = { 2, "RandomKey", "org.apache.commons.math.genetics", NULL, 0x401, 12, methods, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "<T:Ljava/lang/Object;>Lorg/apache/commons/math/genetics/AbstractListChromosome<Ljava/lang/Double;>;Lorg/apache/commons/math/genetics/PermutationChromosome<TT;>;" };
  return &_OrgApacheCommonsMathGeneticsRandomKey;
}

@end

void OrgApacheCommonsMathGeneticsRandomKey_initWithJavaUtilList_(OrgApacheCommonsMathGeneticsRandomKey *self, id<JavaUtilList> representation) {
  (void) OrgApacheCommonsMathGeneticsAbstractListChromosome_initWithJavaUtilList_(self, representation);
  id<JavaUtilList> sortedRepr = new_JavaUtilArrayList_initWithJavaUtilCollection_([self getRepresentation]);
  JavaUtilCollections_sortWithJavaUtilList_(sortedRepr);
  self->sortedRepresentation_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(sortedRepr);
  self->baseSeqPermutation_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(OrgApacheCommonsMathGeneticsRandomKey_decodeGenericWithJavaUtilList_withJavaUtilList_withJavaUtilList_(OrgApacheCommonsMathGeneticsRandomKey_baseSequenceWithInt_([self getLength]), [self getRepresentation], self->sortedRepresentation_));
}

void OrgApacheCommonsMathGeneticsRandomKey_initWithJavaLangDoubleArray_(OrgApacheCommonsMathGeneticsRandomKey *self, IOSObjectArray *representation) {
  (void) OrgApacheCommonsMathGeneticsRandomKey_initWithJavaUtilList_(self, JavaUtilArrays_asListWithNSObjectArray_(representation));
}

id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_decodeGenericWithJavaUtilList_withJavaUtilList_withJavaUtilList_(id<JavaUtilList> sequence, id<JavaUtilList> representation, id<JavaUtilList> sortedRepr) {
  OrgApacheCommonsMathGeneticsRandomKey_initialize();
  jint l = [((id<JavaUtilList>) nil_chk(sequence)) size];
  if ([((id<JavaUtilList>) nil_chk(representation)) size] != l) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"Length of sequence for decoding (%s) has to be equal to the length of the RandomKey (%s)", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(l), JavaLangInteger_valueOfWithInt_([representation size]) } count:2 type:NSObject_class_()]));
  }
  if ([representation size] != [((id<JavaUtilList>) nil_chk(sortedRepr)) size]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"Representation and sortedRepr must have same sizes, %d != %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([representation size]), JavaLangInteger_valueOfWithInt_([sortedRepr size]) } count:2 type:NSObject_class_()]));
  }
  id<JavaUtilList> reprCopy = new_JavaUtilArrayList_initWithJavaUtilCollection_(representation);
  id<JavaUtilList> res = new_JavaUtilArrayList_initWithInt_(l);
  for (jint i = 0; i < l; i++) {
    jint index = [reprCopy indexOfWithId:[sortedRepr getWithInt:i]];
    [res addWithId:[sequence getWithInt:index]];
    (void) [reprCopy setWithInt:index withId:nil];
  }
  return res;
}

id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_randomPermutationWithInt_(jint l) {
  OrgApacheCommonsMathGeneticsRandomKey_initialize();
  id<JavaUtilList> repr = new_JavaUtilArrayList_initWithInt_(l);
  for (jint i = 0; i < l; i++) {
    [repr addWithId:JavaLangDouble_valueOfWithDouble_([((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(OrgApacheCommonsMathGeneticsGeneticAlgorithm_getRandomGenerator())) nextDouble])];
  }
  return repr;
}

id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_identityPermutationWithInt_(jint l) {
  OrgApacheCommonsMathGeneticsRandomKey_initialize();
  id<JavaUtilList> repr = new_JavaUtilArrayList_initWithInt_(l);
  for (jint i = 0; i < l; i++) {
    [repr addWithId:JavaLangDouble_valueOfWithDouble_((jdouble) i / l)];
  }
  return repr;
}

id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_comparatorPermutationWithJavaUtilList_withJavaUtilComparator_(id<JavaUtilList> data, id<JavaUtilComparator> comparator) {
  OrgApacheCommonsMathGeneticsRandomKey_initialize();
  id<JavaUtilList> sortedData = new_JavaUtilArrayList_initWithJavaUtilCollection_(data);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(sortedData, comparator);
  return OrgApacheCommonsMathGeneticsRandomKey_inducedPermutationWithJavaUtilList_withJavaUtilList_(data, sortedData);
}

id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_inducedPermutationWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> originalData, id<JavaUtilList> permutedData) {
  OrgApacheCommonsMathGeneticsRandomKey_initialize();
  if ([((id<JavaUtilList>) nil_chk(originalData)) size] != [((id<JavaUtilList>) nil_chk(permutedData)) size]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"originalData and permutedData must have same length");
  }
  jint l = [originalData size];
  id<JavaUtilList> origDataCopy = new_JavaUtilArrayList_initWithJavaUtilCollection_(originalData);
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:l type:JavaLangDouble_class_()];
  for (jint i = 0; i < l; i++) {
    jint index = [origDataCopy indexOfWithId:[permutedData getWithInt:i]];
    if (index == -1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"originalData and permutedData must contain the same objects.");
    }
    (void) IOSObjectArray_Set(res, index, JavaLangDouble_valueOfWithDouble_((jdouble) i / l));
    (void) [origDataCopy setWithInt:index withId:nil];
  }
  return JavaUtilArrays_asListWithNSObjectArray_(res);
}

id<JavaUtilList> OrgApacheCommonsMathGeneticsRandomKey_baseSequenceWithInt_(jint l) {
  OrgApacheCommonsMathGeneticsRandomKey_initialize();
  id<JavaUtilList> baseSequence = new_JavaUtilArrayList_initWithInt_(l);
  for (jint i = 0; i < l; i++) {
    [baseSequence addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  return baseSequence;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathGeneticsRandomKey)
