//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/FunctionEvaluationException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/BlockRealMatrix.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/LUDecompositionImpl.h"
#include "org/apache/commons/math/linear/QRDecompositionImpl.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/optimization/OptimizationException.h"
#include "org/apache/commons/math/optimization/VectorialConvergenceChecker.h"
#include "org/apache/commons/math/optimization/VectorialPointValuePair.h"
#include "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.h"
#include "org/apache/commons/math/optimization/general/GaussNewtonOptimizer.h"

@interface OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer () {
 @public
  jboolean useLU_;
}

@end

@implementation OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer

- (instancetype)initWithBoolean:(jboolean)useLU {
  OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer_initWithBoolean_(self, useLU);
  return self;
}

- (OrgApacheCommonsMathOptimizationVectorialPointValuePair *)doOptimize {
  OrgApacheCommonsMathOptimizationVectorialPointValuePair *current = nil;
  for (jboolean converged = NO; !converged; ) {
    [self incrementIterationsCounter];
    OrgApacheCommonsMathOptimizationVectorialPointValuePair *previous = current;
    [self updateResidualsAndCost];
    [self updateJacobian];
    current = new_OrgApacheCommonsMathOptimizationVectorialPointValuePair_initWithDoubleArray_withDoubleArray_(point_, objective_);
    IOSDoubleArray *b = [IOSDoubleArray newArrayWithLength:cols_];
    IOSObjectArray *a = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ cols_, cols_ }];
    for (jint i = 0; i < rows_; ++i) {
      IOSDoubleArray *grad = IOSObjectArray_Get(nil_chk(jacobian_), i);
      jdouble weight = IOSDoubleArray_Get(nil_chk(residualsWeights_), i);
      jdouble residual = IOSDoubleArray_Get(nil_chk(objective_), i) - IOSDoubleArray_Get(nil_chk(targetValues_), i);
      jdouble wr = weight * residual;
      for (jint j = 0; j < cols_; ++j) {
        *IOSDoubleArray_GetRef(b, j) += wr * IOSDoubleArray_Get(nil_chk(grad), j);
      }
      for (jint k = 0; k < cols_; ++k) {
        IOSDoubleArray *ak = IOSObjectArray_Get(a, k);
        jdouble wgk = weight * IOSDoubleArray_Get(nil_chk(grad), k);
        for (jint l = 0; l < cols_; ++l) {
          *IOSDoubleArray_GetRef(nil_chk(ak), l) += wgk * IOSDoubleArray_Get(grad, l);
        }
      }
    }
    @try {
      id<OrgApacheCommonsMathLinearRealMatrix> mA = new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithDoubleArray2_(a);
      id<OrgApacheCommonsMathLinearDecompositionSolver> solver = useLU_ ? [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(mA) getSolver] : [new_OrgApacheCommonsMathLinearQRDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(mA) getSolver];
      IOSDoubleArray *dX = [solver solveWithDoubleArray:b];
      for (jint i = 0; i < cols_; ++i) {
        *IOSDoubleArray_GetRef(nil_chk(point_), i) += IOSDoubleArray_Get(nil_chk(dX), i);
      }
    }
    @catch (OrgApacheCommonsMathLinearInvalidMatrixException *e) {
      @throw new_OrgApacheCommonsMathOptimizationOptimizationException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_UNABLE_TO_SOLVE_SINGULAR_PROBLEM(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
    if (previous != nil) {
      converged = [((id<OrgApacheCommonsMathOptimizationVectorialConvergenceChecker>) nil_chk(checker_)) convergedWithInt:[self getIterations] withOrgApacheCommonsMathOptimizationVectorialPointValuePair:previous withOrgApacheCommonsMathOptimizationVectorialPointValuePair:current];
    }
  }
  return current;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "GaussNewtonOptimizer", NULL, 0x1, NULL, NULL },
    { "doOptimize", NULL, "Lorg.apache.commons.math.optimization.VectorialPointValuePair;", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;Lorg.apache.commons.math.optimization.OptimizationException;Ljava.lang.IllegalArgumentException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "useLU_", NULL, 0x12, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer = { 2, "GaussNewtonOptimizer", "org.apache.commons.math.optimization.general", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer;
}

@end

void OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer_initWithBoolean_(OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer *self, jboolean useLU) {
  (void) OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_init(self);
  self->useLU_ = useLU;
}

OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer *new_OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer_initWithBoolean_(jboolean useLU) {
  OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer *self = [OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer alloc];
  OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer_initWithBoolean_(self, useLU);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer)
