//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/math/FunctionEvaluationException.h"
#include "org/apache/commons/math/MaxEvaluationsExceededException.h"
#include "org/apache/commons/math/MaxIterationsExceededException.h"
#include "org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.h"
#include "org/apache/commons/math/analysis/MultivariateMatrixFunction.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/LUDecompositionImpl.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/optimization/OptimizationException.h"
#include "org/apache/commons/math/optimization/SimpleVectorialValueChecker.h"
#include "org/apache/commons/math/optimization/VectorialConvergenceChecker.h"
#include "org/apache/commons/math/optimization/VectorialPointValuePair.h"
#include "org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer () {
 @public
  jint maxIterations_;
  jint iterations_;
  jint maxEvaluations_;
  jint objectiveEvaluations_;
  jint jacobianEvaluations_;
  id<OrgApacheCommonsMathAnalysisDifferentiableMultivariateVectorialFunction> function_;
  id<OrgApacheCommonsMathAnalysisMultivariateMatrixFunction> jF_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer, function_, id<OrgApacheCommonsMathAnalysisDifferentiableMultivariateVectorialFunction>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer, jF_, id<OrgApacheCommonsMathAnalysisMultivariateMatrixFunction>)

@implementation OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer

- (instancetype)init {
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_init(self);
  return self;
}

- (void)setMaxIterationsWithInt:(jint)maxIterations {
  self->maxIterations_ = maxIterations;
}

- (jint)getMaxIterations {
  return maxIterations_;
}

- (jint)getIterations {
  return iterations_;
}

- (void)setMaxEvaluationsWithInt:(jint)maxEvaluations {
  self->maxEvaluations_ = maxEvaluations;
}

- (jint)getMaxEvaluations {
  return maxEvaluations_;
}

- (jint)getEvaluations {
  return objectiveEvaluations_;
}

- (jint)getJacobianEvaluations {
  return jacobianEvaluations_;
}

- (void)setConvergenceCheckerWithOrgApacheCommonsMathOptimizationVectorialConvergenceChecker:(id<OrgApacheCommonsMathOptimizationVectorialConvergenceChecker>)convergenceChecker {
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_set_checker_(self, convergenceChecker);
}

- (id<OrgApacheCommonsMathOptimizationVectorialConvergenceChecker>)getConvergenceChecker {
  return checker_;
}

- (void)incrementIterationsCounter {
  if (++iterations_ > maxIterations_) {
    @throw [new_OrgApacheCommonsMathOptimizationOptimizationException_initWithJavaLangThrowable_([new_OrgApacheCommonsMathMaxIterationsExceededException_initWithInt_(maxIterations_) autorelease]) autorelease];
  }
}

- (void)updateJacobian {
  ++jacobianEvaluations_;
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_set_jacobian_(self, [((id<OrgApacheCommonsMathAnalysisMultivariateMatrixFunction>) nil_chk(jF_)) valueWithDoubleArray:point_]);
  if (((IOSObjectArray *) nil_chk(jacobian_))->size_ != rows_) {
    @throw [new_OrgApacheCommonsMathFunctionEvaluationException_initWithDoubleArray_withOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(point_, OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_SIMPLE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(jacobian_->size_), JavaLangInteger_valueOfWithInt_(rows_) } count:2 type:NSObject_class_()]) autorelease];
  }
  for (jint i = 0; i < rows_; i++) {
    IOSDoubleArray *ji = IOSObjectArray_Get(jacobian_, i);
    jdouble wi = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(IOSDoubleArray_Get(nil_chk(residualsWeights_), i));
    for (jint j = 0; j < cols_; ++j) {
      *IOSDoubleArray_GetRef(nil_chk(ji), j) *= -1.0;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(wjacobian_), i)), j) = IOSDoubleArray_Get(ji, j) * wi;
    }
  }
}

- (void)updateResidualsAndCost {
  if (++objectiveEvaluations_ > maxEvaluations_) {
    @throw [new_OrgApacheCommonsMathFunctionEvaluationException_initWithJavaLangThrowable_withDoubleArray_([new_OrgApacheCommonsMathMaxEvaluationsExceededException_initWithInt_(maxEvaluations_) autorelease], point_) autorelease];
  }
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_set_objective_(self, [((id<OrgApacheCommonsMathAnalysisDifferentiableMultivariateVectorialFunction>) nil_chk(function_)) valueWithDoubleArray:point_]);
  if (((IOSDoubleArray *) nil_chk(objective_))->size_ != rows_) {
    @throw [new_OrgApacheCommonsMathFunctionEvaluationException_initWithDoubleArray_withOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(point_, OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_SIMPLE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(objective_->size_), JavaLangInteger_valueOfWithInt_(rows_) } count:2 type:NSObject_class_()]) autorelease];
  }
  cost_ = 0;
  for (jint i = 0; i < rows_; i++) {
    jdouble residual = IOSDoubleArray_Get(nil_chk(targetValues_), i) - IOSDoubleArray_Get(objective_, i);
    *IOSDoubleArray_GetRef(nil_chk(residuals_), i) = residual;
    *IOSDoubleArray_GetRef(nil_chk(wresiduals_), i) = residual * OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(IOSDoubleArray_Get(nil_chk(residualsWeights_), i));
    cost_ += IOSDoubleArray_Get(residualsWeights_, i) * residual * residual;
  }
  cost_ = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(cost_);
}

- (jdouble)getRMS {
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_([self getChiSquare] / rows_);
}

- (jdouble)getChiSquare {
  return cost_ * cost_;
}

- (IOSObjectArray *)getCovariances {
  [self updateJacobian];
  IOSObjectArray *jTj = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ cols_, cols_ }];
  for (jint i = 0; i < cols_; ++i) {
    for (jint j = i; j < cols_; ++j) {
      jdouble sum = 0;
      for (jint k = 0; k < rows_; ++k) {
        sum += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(wjacobian_), k)), i) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(wjacobian_, k)), j);
      }
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(jTj, i)), j) = sum;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(jTj, j)), i) = sum;
    }
  }
  @try {
    id<OrgApacheCommonsMathLinearRealMatrix> inverse = [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk([((OrgApacheCommonsMathLinearLUDecompositionImpl *) [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(OrgApacheCommonsMathLinearMatrixUtils_createRealMatrixWithDoubleArray2_(jTj)) autorelease]) getSolver])) getInverse];
    return [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(inverse)) getData];
  }
  @catch (OrgApacheCommonsMathLinearInvalidMatrixException *ime) {
    @throw [new_OrgApacheCommonsMathOptimizationOptimizationException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
  }
}

- (IOSDoubleArray *)guessParametersErrors {
  if (rows_ <= cols_) {
    @throw [new_OrgApacheCommonsMathOptimizationOptimizationException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_DEGREES_OF_FREEDOM(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(rows_), JavaLangInteger_valueOfWithInt_(cols_) } count:2 type:NSObject_class_()]) autorelease];
  }
  IOSDoubleArray *errors = [IOSDoubleArray arrayWithLength:cols_];
  jdouble c = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_([self getChiSquare] / (rows_ - cols_));
  IOSObjectArray *covar = [self getCovariances];
  for (jint i = 0; i < errors->size_; ++i) {
    *IOSDoubleArray_GetRef(errors, i) = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(covar), i)), i)) * c;
  }
  return errors;
}

- (OrgApacheCommonsMathOptimizationVectorialPointValuePair *)optimizeWithOrgApacheCommonsMathAnalysisDifferentiableMultivariateVectorialFunction:(id<OrgApacheCommonsMathAnalysisDifferentiableMultivariateVectorialFunction>)f
                                                                                                                                 withDoubleArray:(IOSDoubleArray *)target
                                                                                                                                 withDoubleArray:(IOSDoubleArray *)weights
                                                                                                                                 withDoubleArray:(IOSDoubleArray *)startPoint {
  if (((IOSDoubleArray *) nil_chk(target))->size_ != ((IOSDoubleArray *) nil_chk(weights))->size_) {
    @throw [new_OrgApacheCommonsMathOptimizationOptimizationException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_SIMPLE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(target->size_), JavaLangInteger_valueOfWithInt_(weights->size_) } count:2 type:NSObject_class_()]) autorelease];
  }
  iterations_ = 0;
  objectiveEvaluations_ = 0;
  jacobianEvaluations_ = 0;
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_set_function_(self, f);
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_set_jF_(self, [((id<OrgApacheCommonsMathAnalysisDifferentiableMultivariateVectorialFunction>) nil_chk(f)) jacobian]);
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_set_targetValues_(self, [target clone]);
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_set_residualsWeights_(self, [weights clone]);
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_set_point_(self, [((IOSDoubleArray *) nil_chk(startPoint)) clone]);
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_setAndConsume_residuals_(self, [IOSDoubleArray newArrayWithLength:target->size_]);
  rows_ = target->size_;
  cols_ = ((IOSDoubleArray *) nil_chk(point_))->size_;
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_setAndConsume_jacobian_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows_, cols_ }]);
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_setAndConsume_wjacobian_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows_, cols_ }]);
  OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_setAndConsume_wresiduals_(self, [IOSDoubleArray newArrayWithLength:rows_]);
  cost_ = JavaLangDouble_POSITIVE_INFINITY;
  return [self doOptimize];
}

- (OrgApacheCommonsMathOptimizationVectorialPointValuePair *)doOptimize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(checker_);
  RELEASE_(jacobian_);
  RELEASE_(targetValues_);
  RELEASE_(residualsWeights_);
  RELEASE_(point_);
  RELEASE_(objective_);
  RELEASE_(residuals_);
  RELEASE_(wjacobian_);
  RELEASE_(wresiduals_);
  RELEASE_(function_);
  RELEASE_(jF_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractLeastSquaresOptimizer", NULL, 0x4, NULL, NULL },
    { "setMaxIterationsWithInt:", "setMaxIterations", "V", 0x1, NULL, NULL },
    { "getMaxIterations", NULL, "I", 0x1, NULL, NULL },
    { "getIterations", NULL, "I", 0x1, NULL, NULL },
    { "setMaxEvaluationsWithInt:", "setMaxEvaluations", "V", 0x1, NULL, NULL },
    { "getMaxEvaluations", NULL, "I", 0x1, NULL, NULL },
    { "getEvaluations", NULL, "I", 0x1, NULL, NULL },
    { "getJacobianEvaluations", NULL, "I", 0x1, NULL, NULL },
    { "setConvergenceCheckerWithOrgApacheCommonsMathOptimizationVectorialConvergenceChecker:", "setConvergenceChecker", "V", 0x1, NULL, NULL },
    { "getConvergenceChecker", NULL, "Lorg.apache.commons.math.optimization.VectorialConvergenceChecker;", 0x1, NULL, NULL },
    { "incrementIterationsCounter", NULL, "V", 0x4, "Lorg.apache.commons.math.optimization.OptimizationException;", NULL },
    { "updateJacobian", NULL, "V", 0x4, "Lorg.apache.commons.math.FunctionEvaluationException;", NULL },
    { "updateResidualsAndCost", NULL, "V", 0x4, "Lorg.apache.commons.math.FunctionEvaluationException;", NULL },
    { "getRMS", NULL, "D", 0x1, NULL, NULL },
    { "getChiSquare", NULL, "D", 0x1, NULL, NULL },
    { "getCovariances", NULL, "[[D", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;Lorg.apache.commons.math.optimization.OptimizationException;", NULL },
    { "guessParametersErrors", NULL, "[D", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;Lorg.apache.commons.math.optimization.OptimizationException;", NULL },
    { "optimizeWithOrgApacheCommonsMathAnalysisDifferentiableMultivariateVectorialFunction:withDoubleArray:withDoubleArray:withDoubleArray:", "optimize", "Lorg.apache.commons.math.optimization.VectorialPointValuePair;", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;Lorg.apache.commons.math.optimization.OptimizationException;Ljava.lang.IllegalArgumentException;", NULL },
    { "doOptimize", NULL, "Lorg.apache.commons.math.optimization.VectorialPointValuePair;", 0x404, "Lorg.apache.commons.math.FunctionEvaluationException;Lorg.apache.commons.math.optimization.OptimizationException;Ljava.lang.IllegalArgumentException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MAX_ITERATIONS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_DEFAULT_MAX_ITERATIONS },
    { "checker_", NULL, 0x4, "Lorg.apache.commons.math.optimization.VectorialConvergenceChecker;", NULL, NULL,  },
    { "jacobian_", NULL, 0x4, "[[D", NULL, NULL,  },
    { "cols_", NULL, 0x4, "I", NULL, NULL,  },
    { "rows_", NULL, 0x4, "I", NULL, NULL,  },
    { "targetValues_", NULL, 0x4, "[D", NULL, NULL,  },
    { "residualsWeights_", NULL, 0x4, "[D", NULL, NULL,  },
    { "point_", NULL, 0x4, "[D", NULL, NULL,  },
    { "objective_", NULL, 0x4, "[D", NULL, NULL,  },
    { "residuals_", NULL, 0x4, "[D", NULL, NULL,  },
    { "wjacobian_", NULL, 0x4, "[[D", NULL, NULL,  },
    { "wresiduals_", NULL, 0x4, "[D", NULL, NULL,  },
    { "cost_", NULL, 0x4, "D", NULL, NULL,  },
    { "maxIterations_", NULL, 0x2, "I", NULL, NULL,  },
    { "iterations_", NULL, 0x2, "I", NULL, NULL,  },
    { "maxEvaluations_", NULL, 0x2, "I", NULL, NULL,  },
    { "objectiveEvaluations_", NULL, 0x2, "I", NULL, NULL,  },
    { "jacobianEvaluations_", NULL, 0x2, "I", NULL, NULL,  },
    { "function_", NULL, 0x2, "Lorg.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;", NULL, NULL,  },
    { "jF_", NULL, 0x2, "Lorg.apache.commons.math.analysis.MultivariateMatrixFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer = { 2, "AbstractLeastSquaresOptimizer", "org.apache.commons.math.optimization.general", NULL, 0x401, 19, methods, 20, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer;
}

@end

void OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_init(OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer *self) {
  NSObject_init(self);
  [self setConvergenceCheckerWithOrgApacheCommonsMathOptimizationVectorialConvergenceChecker:[new_OrgApacheCommonsMathOptimizationSimpleVectorialValueChecker_init() autorelease]];
  [self setMaxIterationsWithInt:OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer_DEFAULT_MAX_ITERATIONS];
  [self setMaxEvaluationsWithInt:JavaLangInteger_MAX_VALUE];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOptimizationGeneralAbstractLeastSquaresOptimizer)
