//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/math/optimization/SimpleVectorialPointChecker.h"
#include "org/apache/commons/math/optimization/VectorialPointValuePair.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

#define OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_DEFAULT_RELATIVE_THRESHOLD 1.1102230246251565E-14
#define OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_DEFAULT_ABSOLUTE_THRESHOLD 2.2250738585072014E-306

@interface OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker () {
 @public
  jdouble relativeThreshold_;
  jdouble absoluteThreshold_;
}

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker, DEFAULT_RELATIVE_THRESHOLD, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker, DEFAULT_ABSOLUTE_THRESHOLD, jdouble)

@implementation OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker

- (instancetype)init {
  OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_init(self);
  return self;
}

- (instancetype)initWithDouble:(jdouble)relativeThreshold
                    withDouble:(jdouble)absoluteThreshold {
  OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_initWithDouble_withDouble_(self, relativeThreshold, absoluteThreshold);
  return self;
}

- (jboolean)convergedWithInt:(jint)iteration
withOrgApacheCommonsMathOptimizationVectorialPointValuePair:(OrgApacheCommonsMathOptimizationVectorialPointValuePair *)previous
withOrgApacheCommonsMathOptimizationVectorialPointValuePair:(OrgApacheCommonsMathOptimizationVectorialPointValuePair *)current {
  IOSDoubleArray *p = [((OrgApacheCommonsMathOptimizationVectorialPointValuePair *) nil_chk(previous)) getPointRef];
  IOSDoubleArray *c = [((OrgApacheCommonsMathOptimizationVectorialPointValuePair *) nil_chk(current)) getPointRef];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(p))->size_; ++i) {
    jdouble pi = IOSDoubleArray_Get(p, i);
    jdouble ci = IOSDoubleArray_Get(nil_chk(c), i);
    jdouble difference = OrgApacheCommonsMathUtilFastMath_absWithDouble_(pi - ci);
    jdouble size = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_(pi), OrgApacheCommonsMathUtilFastMath_absWithDouble_(ci));
    if ((difference > (size * relativeThreshold_)) && (difference > absoluteThreshold_)) {
      return NO;
    }
  }
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleVectorialPointChecker", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:", "SimpleVectorialPointChecker", NULL, 0x1, NULL, NULL },
    { "convergedWithInt:withOrgApacheCommonsMathOptimizationVectorialPointValuePair:withOrgApacheCommonsMathOptimizationVectorialPointValuePair:", "converged", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_RELATIVE_THRESHOLD_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_DEFAULT_RELATIVE_THRESHOLD },
    { "DEFAULT_ABSOLUTE_THRESHOLD_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_DEFAULT_ABSOLUTE_THRESHOLD },
    { "relativeThreshold_", NULL, 0x12, "D", NULL, NULL,  },
    { "absoluteThreshold_", NULL, 0x12, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker = { 2, "SimpleVectorialPointChecker", "org.apache.commons.math.optimization", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker;
}

@end

void OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_init(OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker *self) {
  (void) NSObject_init(self);
  self->relativeThreshold_ = OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_DEFAULT_RELATIVE_THRESHOLD;
  self->absoluteThreshold_ = OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_DEFAULT_ABSOLUTE_THRESHOLD;
}

OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker *new_OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_init() {
  OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker *self = [OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker alloc];
  OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_init(self);
  return self;
}

void OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_initWithDouble_withDouble_(OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker *self, jdouble relativeThreshold, jdouble absoluteThreshold) {
  (void) NSObject_init(self);
  self->relativeThreshold_ = relativeThreshold;
  self->absoluteThreshold_ = absoluteThreshold;
}

OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker *new_OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_initWithDouble_withDouble_(jdouble relativeThreshold, jdouble absoluteThreshold) {
  OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker *self = [OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker alloc];
  OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker_initWithDouble_withDouble_(self, relativeThreshold, absoluteThreshold);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOptimizationSimpleVectorialPointChecker)
