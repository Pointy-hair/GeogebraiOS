//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/dfp/Dfp.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/dfp/Dfp.h"
#include "org/apache/commons/math/dfp/DfpField.h"
#include "org/apache/commons/math/dfp/DfpMath.h"

@interface OrgApacheCommonsMathDfpDfp () {
 @public
  OrgApacheCommonsMathDfpDfpField *field_;
}

+ (jint)compareWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a
               withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)b;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathDfpDfp, field_, OrgApacheCommonsMathDfpDfpField *)

static NSString *OrgApacheCommonsMathDfpDfp_NAN_STRING_ = @"NaN";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, NAN_STRING_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_POS_INFINITY_STRING_ = @"Infinity";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, POS_INFINITY_STRING_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_NEG_INFINITY_STRING_ = @"-Infinity";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, NEG_INFINITY_STRING_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_ADD_TRAP_ = @"add";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, ADD_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_MULTIPLY_TRAP_ = @"multiply";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, MULTIPLY_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_ = @"divide";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, DIVIDE_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_SQRT_TRAP_ = @"sqrt";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, SQRT_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_ALIGN_TRAP_ = @"align";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, ALIGN_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_TRUNC_TRAP_ = @"trunc";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, TRUNC_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_NEXT_AFTER_TRAP_ = @"nextAfter";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, NEXT_AFTER_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_LESS_THAN_TRAP_ = @"lessThan";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, LESS_THAN_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_GREATER_THAN_TRAP_ = @"greaterThan";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, GREATER_THAN_TRAP_, NSString *)

static NSString *OrgApacheCommonsMathDfpDfp_NEW_INSTANCE_TRAP_ = @"newInstance";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfp, NEW_INSTANCE_TRAP_, NSString *)

__attribute__((unused)) static jint OrgApacheCommonsMathDfpDfp_compareWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a, OrgApacheCommonsMathDfpDfp *b);

@implementation OrgApacheCommonsMathDfpDfp

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)field {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_(self, field);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)field
                                               withByte:(jbyte)x {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_(self, field, x);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)field
                                                withInt:(jint)x {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withInt_(self, field, x);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)field
                                               withLong:(jlong)x {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(self, field, x);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)field
                                             withDouble:(jdouble)x {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(self, field, x);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)d {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(self, d);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)field
                                           withNSString:(NSString *)s {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(self, field, s);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)field
                                               withByte:(jbyte)sign
                                               withByte:(jbyte)nans {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(self, field, sign, nans);
  return self;
}

- (OrgApacheCommonsMathDfpDfp *)newInstance {
  return [new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_([self getField]) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithByte:(jbyte)x {
  return [new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_([self getField], x) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithInt:(jint)x {
  return [new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withInt_([self getField], x) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithLong:(jlong)x {
  return [new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_([self getField], x) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithDouble:(jdouble)x {
  return [new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withDouble_([self getField], x) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)d {
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [((OrgApacheCommonsMathDfpDfp *) nil_chk(d))->field_ getRadixDigits]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_NEW_INSTANCE_TRAP_ withOrgApacheCommonsMathDfpDfp:d withOrgApacheCommonsMathDfpDfp:result];
  }
  return [new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(d) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithNSString:(NSString *)s {
  return [new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(field_, s) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithByte:(jbyte)sig
                                           withByte:(jbyte)code {
  return [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) newDfpWithByte:sig withByte:code];
}

- (OrgApacheCommonsMathDfpDfpField *)getField {
  return field_;
}

- (jint)getRadixDigits {
  return [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits];
}

- (OrgApacheCommonsMathDfpDfp *)getZero {
  return [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getZero];
}

- (OrgApacheCommonsMathDfpDfp *)getOne {
  return [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getOne];
}

- (OrgApacheCommonsMathDfpDfp *)getTwo {
  return [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getTwo];
}

- (void)shiftLeft {
  for (jint i = ((IOSIntArray *) nil_chk(mant_))->size_ - 1; i > 0; i--) {
    *IOSIntArray_GetRef(mant_, i) = IOSIntArray_Get(mant_, i - 1);
  }
  *IOSIntArray_GetRef(mant_, 0) = 0;
  exp_--;
}

- (void)shiftRight {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(mant_))->size_ - 1; i++) {
    *IOSIntArray_GetRef(mant_, i) = IOSIntArray_Get(mant_, i + 1);
  }
  *IOSIntArray_GetRef(mant_, mant_->size_ - 1) = 0;
  exp_++;
}

- (jint)alignWithInt:(jint)e {
  jint lostdigit = 0;
  jboolean inexact = NO;
  jint diff = exp_ - e;
  jint adiff = diff;
  if (adiff < 0) {
    adiff = -adiff;
  }
  if (diff == 0) {
    return 0;
  }
  if (adiff > (((IOSIntArray *) nil_chk(mant_))->size_ + 1)) {
    JavaUtilArrays_fillWithIntArray_withInt_(mant_, 0);
    exp_ = e;
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT withNSString:OrgApacheCommonsMathDfpDfp_ALIGN_TRAP_ withOrgApacheCommonsMathDfpDfp:self withOrgApacheCommonsMathDfpDfp:self];
    return 0;
  }
  for (jint i = 0; i < adiff; i++) {
    if (diff < 0) {
      if (lostdigit != 0) {
        inexact = YES;
      }
      lostdigit = IOSIntArray_Get(mant_, 0);
      [self shiftRight];
    }
    else {
      [self shiftLeft];
    }
  }
  if (inexact) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT withNSString:OrgApacheCommonsMathDfpDfp_ALIGN_TRAP_ withOrgApacheCommonsMathDfpDfp:self withOrgApacheCommonsMathDfpDfp:self];
  }
  return lostdigit;
}

- (jboolean)lessThanWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)x {
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [((OrgApacheCommonsMathDfpDfp *) nil_chk(x))->field_ getRadixDigits]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_LESS_THAN_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
    return NO;
  }
  if ([self isNaN] || [x isNaN]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_LESS_THAN_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:[self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]]];
    return NO;
  }
  return OrgApacheCommonsMathDfpDfp_compareWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(self, x) < 0;
}

- (jboolean)greaterThanWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)x {
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [((OrgApacheCommonsMathDfpDfp *) nil_chk(x))->field_ getRadixDigits]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_GREATER_THAN_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
    return NO;
  }
  if ([self isNaN] || [x isNaN]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_GREATER_THAN_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:[self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]]];
    return NO;
  }
  return OrgApacheCommonsMathDfpDfp_compareWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(self, x) > 0;
}

- (jboolean)isInfinite {
  return nans_ == OrgApacheCommonsMathDfpDfp_INFINITE;
}

- (jboolean)isNaN {
  return (nans_ == OrgApacheCommonsMathDfpDfp_QNAN) || (nans_ == OrgApacheCommonsMathDfpDfp_SNAN);
}

- (jboolean)isEqual:(id)other {
  if ([other isKindOfClass:[OrgApacheCommonsMathDfpDfp class]]) {
    OrgApacheCommonsMathDfpDfp *x = (OrgApacheCommonsMathDfpDfp *) check_class_cast(other, [OrgApacheCommonsMathDfpDfp class]);
    if ([self isNaN] || [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) isNaN] || [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [x->field_ getRadixDigits]) {
      return NO;
    }
    return OrgApacheCommonsMathDfpDfp_compareWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(self, x) == 0;
  }
  return NO;
}

- (NSUInteger)hash {
  return 17 + (LShift32(sign_, 8)) + (LShift32(nans_, 16)) + exp_ + JavaUtilArrays_hashCodeWithIntArray_(mant_);
}

- (jboolean)unequalWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)x {
  if ([self isNaN] || [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) isNaN] || [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [x->field_ getRadixDigits]) {
    return NO;
  }
  return [self greaterThanWithOrgApacheCommonsMathDfpDfp:x] || [self lessThanWithOrgApacheCommonsMathDfpDfp:x];
}

+ (jint)compareWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a
               withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)b {
  return OrgApacheCommonsMathDfpDfp_compareWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(a, b);
}

- (OrgApacheCommonsMathDfpDfp *)rint {
  return [self truncWithOrgApacheCommonsMathDfpDfpField_RoundingModeEnum:OrgApacheCommonsMathDfpDfpField_RoundingModeEnum_get_ROUND_HALF_EVEN()];
}

- (OrgApacheCommonsMathDfpDfp *)floor {
  return [self truncWithOrgApacheCommonsMathDfpDfpField_RoundingModeEnum:OrgApacheCommonsMathDfpDfpField_RoundingModeEnum_get_ROUND_FLOOR()];
}

- (OrgApacheCommonsMathDfpDfp *)ceil {
  return [self truncWithOrgApacheCommonsMathDfpDfpField_RoundingModeEnum:OrgApacheCommonsMathDfpDfpField_RoundingModeEnum_get_ROUND_CEIL()];
}

- (OrgApacheCommonsMathDfpDfp *)remainderWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)d {
  OrgApacheCommonsMathDfpDfp *result = [self subtractWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk([self divideWithId:d])) rint])) multiplyWithId:d]];
  if (IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) == 0) {
    result->sign_ = sign_;
  }
  return result;
}

- (OrgApacheCommonsMathDfpDfp *)truncWithOrgApacheCommonsMathDfpDfpField_RoundingModeEnum:(OrgApacheCommonsMathDfpDfpField_RoundingModeEnum *)rmode {
  jboolean changed = NO;
  if ([self isNaN]) {
    return [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  }
  if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE) {
    return [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  }
  if (IOSIntArray_Get(mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) == 0) {
    return [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  }
  if (exp_ < 0) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT withNSString:OrgApacheCommonsMathDfpDfp_TRUNC_TRAP_ withOrgApacheCommonsMathDfpDfp:self withOrgApacheCommonsMathDfpDfp:result];
    return result;
  }
  if (exp_ >= mant_->size_) {
    return [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  }
  OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  for (jint i = 0; i < mant_->size_ - ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->exp_; i++) {
    changed |= (IOSIntArray_Get(result->mant_, i) != 0);
    *IOSIntArray_GetRef(result->mant_, i) = 0;
  }
  if (changed) {
    {
      OrgApacheCommonsMathDfpDfp *half;
      OrgApacheCommonsMathDfpDfp *a;
      switch ([rmode ordinal]) {
        case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_FLOOR:
        if (result->sign_ == -1) {
          result = [result addWithId:[self newInstanceWithInt:-1]];
        }
        break;
        case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_CEIL:
        if (((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ == 1) {
          result = [result addWithId:[self getOne]];
        }
        break;
        case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_EVEN:
        default:
        half = [self newInstanceWithNSString:@"0.5"];
        a = [self subtractWithId:result];
        ((OrgApacheCommonsMathDfpDfp *) nil_chk(a))->sign_ = 1;
        if ([a greaterThanWithOrgApacheCommonsMathDfpDfp:half]) {
          a = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getOne]];
          ((OrgApacheCommonsMathDfpDfp *) nil_chk(a))->sign_ = sign_;
          result = [((OrgApacheCommonsMathDfpDfp *) nil_chk(result)) addWithId:a];
        }
        if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) isEqual:half] && ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->exp_ > 0 && (IOSIntArray_Get(result->mant_, mant_->size_ - result->exp_) & 1) != 0) {
          a = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getOne]];
          ((OrgApacheCommonsMathDfpDfp *) nil_chk(a))->sign_ = sign_;
          result = [result addWithId:a];
        }
        break;
      }
    }
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT withNSString:OrgApacheCommonsMathDfpDfp_TRUNC_TRAP_ withOrgApacheCommonsMathDfpDfp:self withOrgApacheCommonsMathDfpDfp:result];
    return result;
  }
  return result;
}

- (jint)intValue {
  OrgApacheCommonsMathDfpDfp *rounded;
  jint result = 0;
  rounded = [self rint];
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(rounded)) greaterThanWithOrgApacheCommonsMathDfpDfp:[self newInstanceWithInt:2147483647]]) {
    return 2147483647;
  }
  if ([rounded lessThanWithOrgApacheCommonsMathDfpDfp:[self newInstanceWithInt:-0x7fffffff - 1]]) {
    return -0x7fffffff - 1;
  }
  for (jint i = ((IOSIntArray *) nil_chk(mant_))->size_ - 1; i >= mant_->size_ - rounded->exp_; i--) {
    result = result * OrgApacheCommonsMathDfpDfp_RADIX + IOSIntArray_Get(rounded->mant_, i);
  }
  if (rounded->sign_ == -1) {
    result = -result;
  }
  return result;
}

- (jint)log10K {
  return exp_ - 1;
}

- (OrgApacheCommonsMathDfpDfp *)power10KWithInt:(jint)e {
  OrgApacheCommonsMathDfpDfp *d = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getOne]];
  ((OrgApacheCommonsMathDfpDfp *) nil_chk(d))->exp_ = e + 1;
  return d;
}

- (jint)log10 {
  if (IOSIntArray_Get(mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) > 1000) {
    return exp_ * 4 - 1;
  }
  if (IOSIntArray_Get(mant_, mant_->size_ - 1) > 100) {
    return exp_ * 4 - 2;
  }
  if (IOSIntArray_Get(mant_, mant_->size_ - 1) > 10) {
    return exp_ * 4 - 3;
  }
  return exp_ * 4 - 4;
}

- (OrgApacheCommonsMathDfpDfp *)power10WithInt:(jint)e {
  OrgApacheCommonsMathDfpDfp *d = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getOne]];
  if (e >= 0) {
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(d))->exp_ = e / 4 + 1;
  }
  else {
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(d))->exp_ = (e + 1) / 4;
  }
  switch ((e % 4 + 4) % 4) {
    case 0:
    break;
    case 1:
    d = [((OrgApacheCommonsMathDfpDfp *) nil_chk(d)) multiplyWithInt:10];
    break;
    case 2:
    d = [((OrgApacheCommonsMathDfpDfp *) nil_chk(d)) multiplyWithInt:100];
    break;
    default:
    d = [((OrgApacheCommonsMathDfpDfp *) nil_chk(d)) multiplyWithInt:1000];
  }
  return d;
}

- (jint)complementWithInt:(jint)extra {
  extra = OrgApacheCommonsMathDfpDfp_RADIX - extra;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(mant_))->size_; i++) {
    *IOSIntArray_GetRef(mant_, i) = OrgApacheCommonsMathDfpDfp_RADIX - IOSIntArray_Get(mant_, i) - 1;
  }
  jint rh = extra / OrgApacheCommonsMathDfpDfp_RADIX;
  extra = extra - rh * OrgApacheCommonsMathDfpDfp_RADIX;
  for (jint i = 0; i < mant_->size_; i++) {
    jint r = IOSIntArray_Get(mant_, i) + rh;
    rh = r / OrgApacheCommonsMathDfpDfp_RADIX;
    *IOSIntArray_GetRef(mant_, i) = r - rh * OrgApacheCommonsMathDfpDfp_RADIX;
  }
  return extra;
}

- (OrgApacheCommonsMathDfpDfp *)addWithId:(OrgApacheCommonsMathDfpDfp *)x {
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [((OrgApacheCommonsMathDfpDfp *) nil_chk(x))->field_ getRadixDigits]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_ADD_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  if (nans_ != OrgApacheCommonsMathDfpDfp_FINITE || x->nans_ != OrgApacheCommonsMathDfpDfp_FINITE) {
    if ([self isNaN]) {
      return self;
    }
    if ([x isNaN]) {
      return x;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && x->nans_ == OrgApacheCommonsMathDfpDfp_FINITE) {
      return self;
    }
    if (x->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && nans_ == OrgApacheCommonsMathDfpDfp_FINITE) {
      return x;
    }
    if (x->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && sign_ == x->sign_) {
      return x;
    }
    if (x->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && sign_ != x->sign_) {
      [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
      OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
      result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_ADD_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
      return result;
    }
  }
  OrgApacheCommonsMathDfpDfp *a = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  OrgApacheCommonsMathDfpDfp *b = [self newInstanceWithOrgApacheCommonsMathDfpDfp:x];
  OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
  jbyte asign = ((OrgApacheCommonsMathDfpDfp *) nil_chk(a))->sign_;
  jbyte bsign = ((OrgApacheCommonsMathDfpDfp *) nil_chk(b))->sign_;
  a->sign_ = 1;
  b->sign_ = 1;
  jbyte rsign = bsign;
  if (OrgApacheCommonsMathDfpDfp_compareWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(a, b) > 0) {
    rsign = asign;
  }
  if (IOSIntArray_Get(b->mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) == 0) {
    b->exp_ = a->exp_;
  }
  if (IOSIntArray_Get(a->mant_, mant_->size_ - 1) == 0) {
    a->exp_ = b->exp_;
  }
  jint aextradigit = 0;
  jint bextradigit = 0;
  if (a->exp_ < b->exp_) {
    aextradigit = [a alignWithInt:b->exp_];
  }
  else {
    bextradigit = [b alignWithInt:a->exp_];
  }
  if (asign != bsign) {
    if (asign == rsign) {
      bextradigit = [b complementWithInt:bextradigit];
    }
    else {
      aextradigit = [a complementWithInt:aextradigit];
    }
  }
  jint rh = 0;
  for (jint i = 0; i < mant_->size_; i++) {
    jint r = IOSIntArray_Get(a->mant_, i) + IOSIntArray_Get(b->mant_, i) + rh;
    rh = r / OrgApacheCommonsMathDfpDfp_RADIX;
    *IOSIntArray_GetRef(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, i) = r - rh * OrgApacheCommonsMathDfpDfp_RADIX;
  }
  ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->exp_ = a->exp_;
  result->sign_ = rsign;
  if (rh != 0 && (asign == bsign)) {
    jint lostdigit = IOSIntArray_Get(result->mant_, 0);
    [result shiftRight];
    *IOSIntArray_GetRef(result->mant_, mant_->size_ - 1) = rh;
    jint excp = [result roundWithInt:lostdigit];
    if (excp != 0) {
      result = [self dotrapWithInt:excp withNSString:OrgApacheCommonsMathDfpDfp_ADD_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
    }
  }
  for (jint i = 0; i < mant_->size_; i++) {
    if (IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, mant_->size_ - 1) != 0) {
      break;
    }
    [result shiftLeft];
    if (i == 0) {
      *IOSIntArray_GetRef(result->mant_, 0) = aextradigit + bextradigit;
      aextradigit = 0;
      bextradigit = 0;
    }
  }
  if (IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, mant_->size_ - 1) == 0) {
    result->exp_ = 0;
    if (asign != bsign) {
      result->sign_ = 1;
    }
  }
  jint excp = [result roundWithInt:aextradigit + bextradigit];
  if (excp != 0) {
    result = [self dotrapWithInt:excp withNSString:OrgApacheCommonsMathDfpDfp_ADD_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  return result;
}

- (OrgApacheCommonsMathDfpDfp *)negate {
  OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = (jbyte) -result->sign_;
  return result;
}

- (OrgApacheCommonsMathDfpDfp *)subtractWithId:(OrgApacheCommonsMathDfpDfp *)x {
  return [self addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) negate]];
}

- (jint)roundWithInt:(jint)n {
  jboolean inc = NO;
  switch ([[((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRoundingMode] ordinal]) {
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_DOWN:
    inc = NO;
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_UP:
    inc = (n != 0);
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_UP:
    inc = (n >= 5000);
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_DOWN:
    inc = (n > 5000);
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_EVEN:
    inc = (n > 5000 || (n == 5000 && (IOSIntArray_Get(nil_chk(mant_), 0) & 1) == 1));
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_ODD:
    inc = (n > 5000 || (n == 5000 && (IOSIntArray_Get(nil_chk(mant_), 0) & 1) == 0));
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_CEIL:
    inc = (sign_ == 1 && n != 0);
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_FLOOR:
    default:
    inc = (sign_ == -1 && n != 0);
    break;
  }
  if (inc) {
    jint rh = 1;
    for (jint i = 0; i < ((IOSIntArray *) nil_chk(mant_))->size_; i++) {
      jint r = IOSIntArray_Get(mant_, i) + rh;
      rh = r / OrgApacheCommonsMathDfpDfp_RADIX;
      *IOSIntArray_GetRef(mant_, i) = r - rh * OrgApacheCommonsMathDfpDfp_RADIX;
    }
    if (rh != 0) {
      [self shiftRight];
      *IOSIntArray_GetRef(mant_, mant_->size_ - 1) = rh;
    }
  }
  if (exp_ < OrgApacheCommonsMathDfpDfp_MIN_EXP) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_UNDERFLOW];
    return OrgApacheCommonsMathDfpDfpField_FLAG_UNDERFLOW;
  }
  if (exp_ > OrgApacheCommonsMathDfpDfp_MAX_EXP) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_OVERFLOW];
    return OrgApacheCommonsMathDfpDfpField_FLAG_OVERFLOW;
  }
  if (n != 0) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    return OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT;
  }
  return 0;
}

- (OrgApacheCommonsMathDfpDfp *)multiplyWithId:(OrgApacheCommonsMathDfpDfp *)x {
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [((OrgApacheCommonsMathDfpDfp *) nil_chk(x))->field_ getRadixDigits]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_MULTIPLY_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
  if (nans_ != OrgApacheCommonsMathDfpDfp_FINITE || x->nans_ != OrgApacheCommonsMathDfpDfp_FINITE) {
    if ([self isNaN]) {
      return self;
    }
    if ([x isNaN]) {
      return x;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && x->nans_ == OrgApacheCommonsMathDfpDfp_FINITE && IOSIntArray_Get(x->mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) != 0) {
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = (jbyte) (sign_ * x->sign_);
      return result;
    }
    if (x->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && nans_ == OrgApacheCommonsMathDfpDfp_FINITE && IOSIntArray_Get(mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) != 0) {
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:x];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = (jbyte) (sign_ * x->sign_);
      return result;
    }
    if (x->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && nans_ == OrgApacheCommonsMathDfpDfp_INFINITE) {
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = (jbyte) (sign_ * x->sign_);
      return result;
    }
    if ((x->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && nans_ == OrgApacheCommonsMathDfpDfp_FINITE && IOSIntArray_Get(mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) == 0) || (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && x->nans_ == OrgApacheCommonsMathDfpDfp_FINITE && IOSIntArray_Get(x->mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) == 0)) {
      [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
      result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_MULTIPLY_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
      return result;
    }
  }
  IOSIntArray *product = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(mant_))->size_ * 2];
  for (jint i = 0; i < mant_->size_; i++) {
    jint rh = 0;
    for (jint j = 0; j < mant_->size_; j++) {
      jint r = IOSIntArray_Get(mant_, i) * IOSIntArray_Get(x->mant_, j);
      r = r + IOSIntArray_Get(product, i + j) + rh;
      rh = r / OrgApacheCommonsMathDfpDfp_RADIX;
      *IOSIntArray_GetRef(product, i + j) = r - rh * OrgApacheCommonsMathDfpDfp_RADIX;
    }
    *IOSIntArray_GetRef(product, i + mant_->size_) = rh;
  }
  jint md = mant_->size_ * 2 - 1;
  for (jint i = mant_->size_ * 2 - 1; i >= 0; i--) {
    if (IOSIntArray_Get(product, i) != 0) {
      md = i;
      break;
    }
  }
  for (jint i = 0; i < mant_->size_; i++) {
    *IOSIntArray_GetRef(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, mant_->size_ - i - 1) = IOSIntArray_Get(product, md - i);
  }
  ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->exp_ = exp_ + x->exp_ + md - 2 * mant_->size_ + 1;
  result->sign_ = (jbyte) ((sign_ == x->sign_) ? 1 : -1);
  if (IOSIntArray_Get(result->mant_, mant_->size_ - 1) == 0) {
    result->exp_ = 0;
  }
  jint excp;
  if (md > (mant_->size_ - 1)) {
    excp = [result roundWithInt:IOSIntArray_Get(product, md - mant_->size_)];
  }
  else {
    excp = [result roundWithInt:0];
  }
  if (excp != 0) {
    result = [self dotrapWithInt:excp withNSString:OrgApacheCommonsMathDfpDfp_MULTIPLY_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  return result;
}

- (OrgApacheCommonsMathDfpDfp *)multiplyWithInt:(jint)x {
  OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  if (nans_ != OrgApacheCommonsMathDfpDfp_FINITE) {
    if ([self isNaN]) {
      return self;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && x != 0) {
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
      return result;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && x == 0) {
      [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
      result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_MULTIPLY_TRAP_ withOrgApacheCommonsMathDfpDfp:[self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]] withOrgApacheCommonsMathDfpDfp:result];
      return result;
    }
  }
  if (x < 0 || x >= OrgApacheCommonsMathDfpDfp_RADIX) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_MULTIPLY_TRAP_ withOrgApacheCommonsMathDfpDfp:result withOrgApacheCommonsMathDfpDfp:result];
    return result;
  }
  jint rh = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(mant_))->size_; i++) {
    jint r = IOSIntArray_Get(mant_, i) * x + rh;
    rh = r / OrgApacheCommonsMathDfpDfp_RADIX;
    *IOSIntArray_GetRef(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, i) = r - rh * OrgApacheCommonsMathDfpDfp_RADIX;
  }
  jint lostdigit = 0;
  if (rh != 0) {
    lostdigit = IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, 0);
    [result shiftRight];
    *IOSIntArray_GetRef(result->mant_, mant_->size_ - 1) = rh;
  }
  if (IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, mant_->size_ - 1) == 0) {
    result->exp_ = 0;
  }
  jint excp = [result roundWithInt:lostdigit];
  if (excp != 0) {
    result = [self dotrapWithInt:excp withNSString:OrgApacheCommonsMathDfpDfp_MULTIPLY_TRAP_ withOrgApacheCommonsMathDfpDfp:result withOrgApacheCommonsMathDfpDfp:result];
  }
  return result;
}

- (OrgApacheCommonsMathDfpDfp *)divideWithId:(OrgApacheCommonsMathDfpDfp *)divisor {
  IOSIntArray *dividend;
  IOSIntArray *quotient;
  IOSIntArray *remainder;
  jint qd;
  jint nsqd;
  jint trial = 0;
  jint minadj;
  jboolean trialgood;
  jint md = 0;
  jint excp;
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [((OrgApacheCommonsMathDfpDfp *) nil_chk(divisor))->field_ getRadixDigits]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_ withOrgApacheCommonsMathDfpDfp:divisor withOrgApacheCommonsMathDfpDfp:result];
  }
  OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
  if (nans_ != OrgApacheCommonsMathDfpDfp_FINITE || divisor->nans_ != OrgApacheCommonsMathDfpDfp_FINITE) {
    if ([self isNaN]) {
      return self;
    }
    if ([divisor isNaN]) {
      return divisor;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && divisor->nans_ == OrgApacheCommonsMathDfpDfp_FINITE) {
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = (jbyte) (sign_ * divisor->sign_);
      return result;
    }
    if (divisor->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && nans_ == OrgApacheCommonsMathDfpDfp_FINITE) {
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = (jbyte) (sign_ * divisor->sign_);
      return result;
    }
    if (divisor->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && nans_ == OrgApacheCommonsMathDfpDfp_INFINITE) {
      [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
      result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_ withOrgApacheCommonsMathDfpDfp:divisor withOrgApacheCommonsMathDfpDfp:result];
      return result;
    }
  }
  if (IOSIntArray_Get(divisor->mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) == 0) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_DIV_ZERO];
    result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = (jbyte) (sign_ * divisor->sign_);
    result->nans_ = OrgApacheCommonsMathDfpDfp_INFINITE;
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_DIV_ZERO withNSString:OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_ withOrgApacheCommonsMathDfpDfp:divisor withOrgApacheCommonsMathDfpDfp:result];
    return result;
  }
  dividend = [IOSIntArray arrayWithLength:mant_->size_ + 1];
  quotient = [IOSIntArray arrayWithLength:mant_->size_ + 2];
  remainder = [IOSIntArray arrayWithLength:mant_->size_ + 1];
  *IOSIntArray_GetRef(dividend, mant_->size_) = 0;
  *IOSIntArray_GetRef(quotient, mant_->size_) = 0;
  *IOSIntArray_GetRef(quotient, mant_->size_ + 1) = 0;
  *IOSIntArray_GetRef(remainder, mant_->size_) = 0;
  for (jint i = 0; i < mant_->size_; i++) {
    *IOSIntArray_GetRef(dividend, i) = IOSIntArray_Get(mant_, i);
    *IOSIntArray_GetRef(quotient, i) = 0;
    *IOSIntArray_GetRef(remainder, i) = 0;
  }
  nsqd = 0;
  for (qd = mant_->size_ + 1; qd >= 0; qd--) {
    jint divMsb = IOSIntArray_Get(dividend, mant_->size_) * OrgApacheCommonsMathDfpDfp_RADIX + IOSIntArray_Get(dividend, mant_->size_ - 1);
    jint min = divMsb / (IOSIntArray_Get(divisor->mant_, mant_->size_ - 1) + 1);
    jint max = (divMsb + 1) / IOSIntArray_Get(divisor->mant_, mant_->size_ - 1);
    trialgood = NO;
    while (!trialgood) {
      trial = (min + max) / 2;
      jint rh = 0;
      for (jint i = 0; i < mant_->size_ + 1; i++) {
        jint dm = (i < mant_->size_) ? IOSIntArray_Get(divisor->mant_, i) : 0;
        jint r = (dm * trial) + rh;
        rh = r / OrgApacheCommonsMathDfpDfp_RADIX;
        *IOSIntArray_GetRef(remainder, i) = r - rh * OrgApacheCommonsMathDfpDfp_RADIX;
      }
      rh = 1;
      for (jint i = 0; i < mant_->size_ + 1; i++) {
        jint r = ((OrgApacheCommonsMathDfpDfp_RADIX - 1) - IOSIntArray_Get(remainder, i)) + IOSIntArray_Get(dividend, i) + rh;
        rh = r / OrgApacheCommonsMathDfpDfp_RADIX;
        *IOSIntArray_GetRef(remainder, i) = r - rh * OrgApacheCommonsMathDfpDfp_RADIX;
      }
      if (rh == 0) {
        max = trial - 1;
        continue;
      }
      minadj = (IOSIntArray_Get(remainder, mant_->size_) * OrgApacheCommonsMathDfpDfp_RADIX) + IOSIntArray_Get(remainder, mant_->size_ - 1);
      minadj = minadj / (IOSIntArray_Get(divisor->mant_, mant_->size_ - 1) + 1);
      if (minadj >= 2) {
        min = trial + minadj;
        continue;
      }
      trialgood = NO;
      for (jint i = mant_->size_ - 1; i >= 0; i--) {
        if (IOSIntArray_Get(divisor->mant_, i) > IOSIntArray_Get(remainder, i)) {
          trialgood = YES;
        }
        if (IOSIntArray_Get(divisor->mant_, i) < IOSIntArray_Get(remainder, i)) {
          break;
        }
      }
      if (IOSIntArray_Get(remainder, mant_->size_) != 0) {
        trialgood = NO;
      }
      if (trialgood == NO) {
        min = trial + 1;
      }
    }
    *IOSIntArray_GetRef(quotient, qd) = trial;
    if (trial != 0 || nsqd != 0) {
      nsqd++;
    }
    if ([field_ getRoundingMode] == OrgApacheCommonsMathDfpDfpField_RoundingModeEnum_get_ROUND_DOWN() && nsqd == mant_->size_) {
      break;
    }
    if (nsqd > mant_->size_) {
      break;
    }
    *IOSIntArray_GetRef(dividend, 0) = 0;
    for (jint i = 0; i < mant_->size_; i++) {
      *IOSIntArray_GetRef(dividend, i + 1) = IOSIntArray_Get(remainder, i);
    }
  }
  md = mant_->size_;
  for (jint i = mant_->size_ + 1; i >= 0; i--) {
    if (IOSIntArray_Get(quotient, i) != 0) {
      md = i;
      break;
    }
  }
  for (jint i = 0; i < mant_->size_; i++) {
    *IOSIntArray_GetRef(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, mant_->size_ - i - 1) = IOSIntArray_Get(quotient, md - i);
  }
  ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->exp_ = exp_ - divisor->exp_ + md - mant_->size_;
  result->sign_ = (jbyte) ((sign_ == divisor->sign_) ? 1 : -1);
  if (IOSIntArray_Get(result->mant_, mant_->size_ - 1) == 0) {
    result->exp_ = 0;
  }
  if (md > (mant_->size_ - 1)) {
    excp = [result roundWithInt:IOSIntArray_Get(quotient, md - mant_->size_)];
  }
  else {
    excp = [result roundWithInt:0];
  }
  if (excp != 0) {
    result = [self dotrapWithInt:excp withNSString:OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_ withOrgApacheCommonsMathDfpDfp:divisor withOrgApacheCommonsMathDfpDfp:result];
  }
  return result;
}

- (OrgApacheCommonsMathDfpDfp *)divideWithInt:(jint)divisor {
  if (nans_ != OrgApacheCommonsMathDfpDfp_FINITE) {
    if ([self isNaN]) {
      return self;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE) {
      return [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
    }
  }
  if (divisor == 0) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_DIV_ZERO];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = sign_;
    result->nans_ = OrgApacheCommonsMathDfpDfp_INFINITE;
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_DIV_ZERO withNSString:OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_ withOrgApacheCommonsMathDfpDfp:[self getZero] withOrgApacheCommonsMathDfpDfp:result];
    return result;
  }
  if (divisor < 0 || divisor >= OrgApacheCommonsMathDfpDfp_RADIX) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_ withOrgApacheCommonsMathDfpDfp:result withOrgApacheCommonsMathDfpDfp:result];
    return result;
  }
  OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  jint rl = 0;
  for (jint i = ((IOSIntArray *) nil_chk(mant_))->size_ - 1; i >= 0; i--) {
    jint r = rl * OrgApacheCommonsMathDfpDfp_RADIX + IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, i);
    jint rh = r / divisor;
    rl = r - rh * divisor;
    *IOSIntArray_GetRef(result->mant_, i) = rh;
  }
  if (IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->mant_, mant_->size_ - 1) == 0) {
    [result shiftLeft];
    jint r = rl * OrgApacheCommonsMathDfpDfp_RADIX;
    jint rh = r / divisor;
    rl = r - rh * divisor;
    *IOSIntArray_GetRef(result->mant_, 0) = rh;
  }
  jint excp = [result roundWithInt:rl * OrgApacheCommonsMathDfpDfp_RADIX / divisor];
  if (excp != 0) {
    result = [self dotrapWithInt:excp withNSString:OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_ withOrgApacheCommonsMathDfpDfp:result withOrgApacheCommonsMathDfpDfp:result];
  }
  return result;
}

- (OrgApacheCommonsMathDfpDfp *)sqrt {
  if (nans_ == OrgApacheCommonsMathDfpDfp_FINITE && IOSIntArray_Get(mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) == 0) {
    return [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  }
  if (nans_ != OrgApacheCommonsMathDfpDfp_FINITE) {
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && sign_ == 1) {
      return [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_QNAN) {
      return [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_SNAN) {
      OrgApacheCommonsMathDfpDfp *result;
      [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
      result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
      result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_SQRT_TRAP_ withOrgApacheCommonsMathDfpDfp:nil withOrgApacheCommonsMathDfpDfp:result];
      return result;
    }
  }
  if (sign_ == -1) {
    OrgApacheCommonsMathDfpDfp *result;
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_SQRT_TRAP_ withOrgApacheCommonsMathDfpDfp:nil withOrgApacheCommonsMathDfpDfp:result];
    return result;
  }
  OrgApacheCommonsMathDfpDfp *x = [self newInstanceWithOrgApacheCommonsMathDfpDfp:self];
  if (((OrgApacheCommonsMathDfpDfp *) nil_chk(x))->exp_ < -1 || x->exp_ > 1) {
    x->exp_ = self->exp_ / 2;
  }
  switch (IOSIntArray_Get(x->mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) / 2000) {
    case 0:
    *IOSIntArray_GetRef(x->mant_, mant_->size_ - 1) = IOSIntArray_Get(x->mant_, mant_->size_ - 1) / 2 + 1;
    break;
    case 2:
    *IOSIntArray_GetRef(x->mant_, mant_->size_ - 1) = 1500;
    break;
    case 3:
    *IOSIntArray_GetRef(x->mant_, mant_->size_ - 1) = 2200;
    break;
    default:
    *IOSIntArray_GetRef(x->mant_, mant_->size_ - 1) = 3000;
  }
  OrgApacheCommonsMathDfpDfp *dx = [self newInstanceWithOrgApacheCommonsMathDfpDfp:x];
  OrgApacheCommonsMathDfpDfp *px = [self getZero];
  OrgApacheCommonsMathDfpDfp *ppx = [self getZero];
  while ([x unequalWithOrgApacheCommonsMathDfpDfp:px]) {
    dx = [self newInstanceWithOrgApacheCommonsMathDfpDfp:x];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(dx))->sign_ = -1;
    dx = [dx addWithId:[self divideWithId:x]];
    dx = [((OrgApacheCommonsMathDfpDfp *) nil_chk(dx)) divideWithInt:2];
    ppx = px;
    px = x;
    x = [x addWithId:dx];
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) isEqual:ppx]) {
      break;
    }
    if (IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(dx))->mant_, mant_->size_ - 1) == 0) {
      break;
    }
  }
  return x;
}

- (NSString *)description {
  if (nans_ != OrgApacheCommonsMathDfpDfp_FINITE) {
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE) {
      return (sign_ < 0) ? OrgApacheCommonsMathDfpDfp_NEG_INFINITY_STRING_ : OrgApacheCommonsMathDfpDfp_POS_INFINITY_STRING_;
    }
    else {
      return OrgApacheCommonsMathDfpDfp_NAN_STRING_;
    }
  }
  if (exp_ > ((IOSIntArray *) nil_chk(mant_))->size_ || exp_ < -1) {
    return [self dfp2sci];
  }
  return [self dfp2string];
}

- (NSString *)dfp2sci {
  IOSCharArray *rawdigits = [IOSCharArray arrayWithLength:((IOSIntArray *) nil_chk(mant_))->size_ * 4];
  IOSCharArray *outputbuffer = [IOSCharArray arrayWithLength:mant_->size_ * 4 + 20];
  jint p;
  jint q;
  jint e;
  jint ae;
  jint shf;
  p = 0;
  for (jint i = mant_->size_ - 1; i >= 0; i--) {
    *IOSCharArray_GetRef(rawdigits, p++) = (jchar) ((IOSIntArray_Get(mant_, i) / 1000) + '0');
    *IOSCharArray_GetRef(rawdigits, p++) = (jchar) (((IOSIntArray_Get(mant_, i) / 100) % 10) + '0');
    *IOSCharArray_GetRef(rawdigits, p++) = (jchar) (((IOSIntArray_Get(mant_, i) / 10) % 10) + '0');
    *IOSCharArray_GetRef(rawdigits, p++) = (jchar) (((IOSIntArray_Get(mant_, i)) % 10) + '0');
  }
  for (p = 0; p < rawdigits->size_; p++) {
    if (IOSCharArray_Get(rawdigits, p) != '0') {
      break;
    }
  }
  shf = p;
  q = 0;
  if (sign_ == -1) {
    *IOSCharArray_GetRef(outputbuffer, q++) = '-';
  }
  if (p != rawdigits->size_) {
    *IOSCharArray_GetRef(outputbuffer, q++) = IOSCharArray_Get(rawdigits, p++);
    *IOSCharArray_GetRef(outputbuffer, q++) = '.';
    while (p < rawdigits->size_) {
      *IOSCharArray_GetRef(outputbuffer, q++) = IOSCharArray_Get(rawdigits, p++);
    }
  }
  else {
    *IOSCharArray_GetRef(outputbuffer, q++) = '0';
    *IOSCharArray_GetRef(outputbuffer, q++) = '.';
    *IOSCharArray_GetRef(outputbuffer, q++) = '0';
    *IOSCharArray_GetRef(outputbuffer, q++) = 'e';
    *IOSCharArray_GetRef(outputbuffer, q++) = '0';
    return [NSString stringWithCharacters:outputbuffer offset:0 length:5];
  }
  *IOSCharArray_GetRef(outputbuffer, q++) = 'e';
  e = exp_ * 4 - shf - 1;
  ae = e;
  if (e < 0) {
    ae = -e;
  }
  for (p = 1000000000; p > ae; p /= 10) {
  }
  if (e < 0) {
    *IOSCharArray_GetRef(outputbuffer, q++) = '-';
  }
  while (p > 0) {
    *IOSCharArray_GetRef(outputbuffer, q++) = (jchar) (ae / p + '0');
    ae = ae % p;
    p = p / 10;
  }
  return [NSString stringWithCharacters:outputbuffer offset:0 length:q];
}

- (NSString *)dfp2string {
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:((IOSIntArray *) nil_chk(mant_))->size_ * 4 + 20];
  jint p = 1;
  jint q;
  jint e = exp_;
  jboolean pointInserted = NO;
  *IOSCharArray_GetRef(buffer, 0) = ' ';
  if (e <= 0) {
    *IOSCharArray_GetRef(buffer, p++) = '0';
    *IOSCharArray_GetRef(buffer, p++) = '.';
    pointInserted = YES;
  }
  while (e < 0) {
    *IOSCharArray_GetRef(buffer, p++) = '0';
    *IOSCharArray_GetRef(buffer, p++) = '0';
    *IOSCharArray_GetRef(buffer, p++) = '0';
    *IOSCharArray_GetRef(buffer, p++) = '0';
    e++;
  }
  for (jint i = mant_->size_ - 1; i >= 0; i--) {
    *IOSCharArray_GetRef(buffer, p++) = (jchar) ((IOSIntArray_Get(mant_, i) / 1000) + '0');
    *IOSCharArray_GetRef(buffer, p++) = (jchar) (((IOSIntArray_Get(mant_, i) / 100) % 10) + '0');
    *IOSCharArray_GetRef(buffer, p++) = (jchar) (((IOSIntArray_Get(mant_, i) / 10) % 10) + '0');
    *IOSCharArray_GetRef(buffer, p++) = (jchar) (((IOSIntArray_Get(mant_, i)) % 10) + '0');
    if (--e == 0) {
      *IOSCharArray_GetRef(buffer, p++) = '.';
      pointInserted = YES;
    }
  }
  while (e > 0) {
    *IOSCharArray_GetRef(buffer, p++) = '0';
    *IOSCharArray_GetRef(buffer, p++) = '0';
    *IOSCharArray_GetRef(buffer, p++) = '0';
    *IOSCharArray_GetRef(buffer, p++) = '0';
    e--;
  }
  if (!pointInserted) {
    *IOSCharArray_GetRef(buffer, p++) = '.';
  }
  q = 1;
  while (IOSCharArray_Get(buffer, q) == '0') {
    q++;
  }
  if (IOSCharArray_Get(buffer, q) == '.') {
    q--;
  }
  while (IOSCharArray_Get(buffer, p - 1) == '0') {
    p--;
  }
  if (sign_ < 0) {
    *IOSCharArray_GetRef(buffer, --q) = '-';
  }
  return [NSString stringWithCharacters:buffer offset:q length:p - q];
}

- (OrgApacheCommonsMathDfpDfp *)dotrapWithInt:(jint)type
                                 withNSString:(NSString *)what
               withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)oper
               withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)result {
  OrgApacheCommonsMathDfpDfp *def = result;
  switch (type) {
    case OrgApacheCommonsMathDfpDfpField_FLAG_INVALID:
    def = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(def))->sign_ = ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_;
    def->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    break;
    case OrgApacheCommonsMathDfpDfpField_FLAG_DIV_ZERO:
    if (nans_ == OrgApacheCommonsMathDfpDfp_FINITE && IOSIntArray_Get(mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) != 0) {
      def = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(def))->sign_ = (jbyte) (sign_ * ((OrgApacheCommonsMathDfpDfp *) nil_chk(oper))->sign_);
      def->nans_ = OrgApacheCommonsMathDfpDfp_INFINITE;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_FINITE && IOSIntArray_Get(mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1) == 0) {
      def = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(def))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE || nans_ == OrgApacheCommonsMathDfpDfp_QNAN) {
      def = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(def))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    }
    if (nans_ == OrgApacheCommonsMathDfpDfp_INFINITE || nans_ == OrgApacheCommonsMathDfpDfp_SNAN) {
      def = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(def))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    }
    break;
    case OrgApacheCommonsMathDfpDfpField_FLAG_UNDERFLOW:
    if ((((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->exp_ + ((IOSIntArray *) nil_chk(mant_))->size_) < OrgApacheCommonsMathDfpDfp_MIN_EXP) {
      def = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
      ((OrgApacheCommonsMathDfpDfp *) nil_chk(def))->sign_ = result->sign_;
    }
    else {
      def = [self newInstanceWithOrgApacheCommonsMathDfpDfp:result];
    }
    result->exp_ = result->exp_ + OrgApacheCommonsMathDfpDfp_ERR_SCALE;
    break;
    case OrgApacheCommonsMathDfpDfpField_FLAG_OVERFLOW:
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->exp_ = result->exp_ - OrgApacheCommonsMathDfpDfp_ERR_SCALE;
    def = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(def))->sign_ = result->sign_;
    def->nans_ = OrgApacheCommonsMathDfpDfp_INFINITE;
    break;
    default:
    def = result;
    break;
  }
  return [self trapWithInt:type withNSString:what withOrgApacheCommonsMathDfpDfp:oper withOrgApacheCommonsMathDfpDfp:def withOrgApacheCommonsMathDfpDfp:result];
}

- (OrgApacheCommonsMathDfpDfp *)trapWithInt:(jint)type
                               withNSString:(NSString *)what
             withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)oper
             withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)def
             withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)result {
  return def;
}

- (jint)classify {
  return nans_;
}

+ (OrgApacheCommonsMathDfpDfp *)copysignWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)x
                                        withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)y {
  return OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(x, y);
}

- (OrgApacheCommonsMathDfpDfp *)nextAfterWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)x {
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk(field_)) getRadixDigits] != [((OrgApacheCommonsMathDfpDfp *) nil_chk(x))->field_ getRadixDigits]) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfp_NEXT_AFTER_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  jboolean up = NO;
  if ([self lessThanWithOrgApacheCommonsMathDfpDfp:x]) {
    up = YES;
  }
  if (OrgApacheCommonsMathDfpDfp_compareWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(self, x) == 0) {
    return [self newInstanceWithOrgApacheCommonsMathDfpDfp:x];
  }
  if ([self lessThanWithOrgApacheCommonsMathDfpDfp:[self getZero]]) {
    up = !up;
  }
  OrgApacheCommonsMathDfpDfp *inc;
  OrgApacheCommonsMathDfpDfp *result;
  if (up) {
    inc = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getOne]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(inc))->exp_ = self->exp_ - ((IOSIntArray *) nil_chk(mant_))->size_ + 1;
    inc->sign_ = self->sign_;
    if ([self isEqual:[self getZero]]) {
      inc->exp_ = OrgApacheCommonsMathDfpDfp_MIN_EXP - mant_->size_;
    }
    result = [self addWithId:inc];
  }
  else {
    inc = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getOne]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(inc))->exp_ = self->exp_;
    inc->sign_ = self->sign_;
    if ([self isEqual:inc]) {
      inc->exp_ = self->exp_ - ((IOSIntArray *) nil_chk(mant_))->size_;
    }
    else {
      inc->exp_ = self->exp_ - ((IOSIntArray *) nil_chk(mant_))->size_ + 1;
    }
    if ([self isEqual:[self getZero]]) {
      inc->exp_ = OrgApacheCommonsMathDfpDfp_MIN_EXP - ((IOSIntArray *) nil_chk(mant_))->size_;
    }
    result = [self subtractWithId:inc];
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(result)) classify] == OrgApacheCommonsMathDfpDfp_INFINITE && [self classify] != OrgApacheCommonsMathDfpDfp_INFINITE) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT withNSString:OrgApacheCommonsMathDfpDfp_NEXT_AFTER_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(result)) isEqual:[self getZero]] && [self isEqual:[self getZero]] == NO) {
    [field_ setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT withNSString:OrgApacheCommonsMathDfpDfp_NEXT_AFTER_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  return result;
}

- (jdouble)toDouble {
  if ([self isInfinite]) {
    if ([self lessThanWithOrgApacheCommonsMathDfpDfp:[self getZero]]) {
      return JavaLangDouble_NEGATIVE_INFINITY;
    }
    else {
      return JavaLangDouble_POSITIVE_INFINITY;
    }
  }
  if ([self isNaN]) {
    return JavaLangDouble_NaN;
  }
  OrgApacheCommonsMathDfpDfp *y = self;
  jboolean negate = NO;
  if ([self lessThanWithOrgApacheCommonsMathDfpDfp:[self getZero]]) {
    y = [self negate];
    negate = YES;
  }
  jint exponent = J2ObjCFpToInt(([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) log10] * 3.32));
  if (exponent < 0) {
    exponent--;
  }
  OrgApacheCommonsMathDfpDfp *tempDfp = OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withInt_([self getTwo], exponent);
  while ([((OrgApacheCommonsMathDfpDfp *) nil_chk(tempDfp)) lessThanWithOrgApacheCommonsMathDfpDfp:y] || [tempDfp isEqual:y]) {
    tempDfp = [tempDfp multiplyWithInt:2];
    exponent++;
  }
  exponent--;
  y = [y divideWithId:OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withInt_([self getTwo], exponent)];
  if (exponent > -1023) {
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) subtractWithId:[self getOne]];
  }
  if (exponent < -1074) {
    return 0;
  }
  if (exponent > 1023) {
    return negate ? JavaLangDouble_NEGATIVE_INFINITY : JavaLangDouble_POSITIVE_INFINITY;
  }
  y = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) multiplyWithId:[self newInstanceWithLong:4503599627370496l]])) rint];
  NSString *str = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) description];
  str = [str substring:0 endIndex:((jint) [((NSString *) nil_chk(str)) length]) - 1];
  jlong mantissa = JavaLangLong_parseLongWithNSString_(str);
  if (mantissa == 4503599627370496LL) {
    mantissa = 0;
    exponent++;
  }
  if (exponent <= -1023) {
    exponent--;
  }
  while (exponent < -1023) {
    exponent++;
    URShiftAssignLong(&mantissa, 1);
  }
  jlong bits = mantissa | (LShift64((exponent + 1023LL), 52));
  jdouble x = JavaLangDouble_longBitsToDoubleWithLong_(bits);
  if (negate) {
    x = -x;
  }
  return x;
}

- (IOSDoubleArray *)toSplitDouble {
  IOSDoubleArray *split = [IOSDoubleArray arrayWithLength:2];
  jlong mask = (jlong) 0xffffffffc0000000LL;
  *IOSDoubleArray_GetRef(split, 0) = JavaLangDouble_longBitsToDoubleWithLong_(JavaLangDouble_doubleToLongBitsWithDouble_([self toDouble]) & mask);
  *IOSDoubleArray_GetRef(split, 1) = [((OrgApacheCommonsMathDfpDfp *) nil_chk([self subtractWithId:[self newInstanceWithDouble:IOSDoubleArray_Get(split, 0)]])) toDouble];
  return split;
}

- (void)dealloc {
  RELEASE_(mant_);
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathDfpDfpField:", "Dfp", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withByte:", "Dfp", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withInt:", "Dfp", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withLong:", "Dfp", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withDouble:", "Dfp", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfp:", "Dfp", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withNSString:", "Dfp", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withByte:withByte:", "Dfp", NULL, 0x4, NULL, NULL },
    { "newInstance", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithByte:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithInt:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithLong:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithDouble:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithOrgApacheCommonsMathDfpDfp:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithNSString:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithByte:withByte:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "getField", NULL, "Lorg.apache.commons.math.dfp.DfpField;", 0x1, NULL, NULL },
    { "getRadixDigits", NULL, "I", 0x1, NULL, NULL },
    { "getZero", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "getOne", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "getTwo", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "shiftLeft", NULL, "V", 0x4, NULL, NULL },
    { "shiftRight", NULL, "V", 0x4, NULL, NULL },
    { "alignWithInt:", "align", "I", 0x4, NULL, NULL },
    { "lessThanWithOrgApacheCommonsMathDfpDfp:", "lessThan", "Z", 0x1, NULL, NULL },
    { "greaterThanWithOrgApacheCommonsMathDfpDfp:", "greaterThan", "Z", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL, NULL },
    { "isNaN", NULL, "Z", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "unequalWithOrgApacheCommonsMathDfpDfp:", "unequal", "Z", 0x1, NULL, NULL },
    { "compareWithOrgApacheCommonsMathDfpDfp:withOrgApacheCommonsMathDfpDfp:", "compare", "I", 0xa, NULL, NULL },
    { "rint", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "floor", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "ceil", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "remainderWithOrgApacheCommonsMathDfpDfp:", "remainder", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "truncWithOrgApacheCommonsMathDfpDfpField_RoundingModeEnum:", "trunc", "Lorg.apache.commons.math.dfp.Dfp;", 0x4, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "log10K", NULL, "I", 0x1, NULL, NULL },
    { "power10KWithInt:", "power10K", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "log10", NULL, "I", 0x1, NULL, NULL },
    { "power10WithInt:", "power10", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "complementWithInt:", "complement", "I", 0x4, NULL, NULL },
    { "addWithId:", "add", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "negate", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "subtractWithId:", "subtract", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "roundWithInt:", "round", "I", 0x4, NULL, NULL },
    { "multiplyWithId:", "multiply", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "multiplyWithInt:", "multiply", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "divideWithId:", "divide", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "divideWithInt:", "divide", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "sqrt", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "dfp2sci", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "dfp2string", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "dotrapWithInt:withNSString:withOrgApacheCommonsMathDfpDfp:withOrgApacheCommonsMathDfpDfp:", "dotrap", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "trapWithInt:withNSString:withOrgApacheCommonsMathDfpDfp:withOrgApacheCommonsMathDfpDfp:withOrgApacheCommonsMathDfpDfp:", "trap", "Lorg.apache.commons.math.dfp.Dfp;", 0x4, NULL, NULL },
    { "classify", NULL, "I", 0x1, NULL, NULL },
    { "copysignWithOrgApacheCommonsMathDfpDfp:withOrgApacheCommonsMathDfpDfp:", "copysign", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "nextAfterWithOrgApacheCommonsMathDfpDfp:", "nextAfter", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "toDouble", NULL, "D", 0x1, NULL, NULL },
    { "toSplitDouble", NULL, "[D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "RADIX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathDfpDfp_RADIX },
    { "MIN_EXP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathDfpDfp_MIN_EXP },
    { "MAX_EXP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathDfpDfp_MAX_EXP },
    { "ERR_SCALE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathDfpDfp_ERR_SCALE },
    { "FINITE_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgApacheCommonsMathDfpDfp_FINITE },
    { "INFINITE_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgApacheCommonsMathDfpDfp_INFINITE },
    { "SNAN_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgApacheCommonsMathDfpDfp_SNAN },
    { "QNAN_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgApacheCommonsMathDfpDfp_QNAN },
    { "NAN_STRING_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_NAN_STRING_, NULL,  },
    { "POS_INFINITY_STRING_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_POS_INFINITY_STRING_, NULL,  },
    { "NEG_INFINITY_STRING_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_NEG_INFINITY_STRING_, NULL,  },
    { "ADD_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_ADD_TRAP_, NULL,  },
    { "MULTIPLY_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_MULTIPLY_TRAP_, NULL,  },
    { "DIVIDE_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_DIVIDE_TRAP_, NULL,  },
    { "SQRT_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_SQRT_TRAP_, NULL,  },
    { "ALIGN_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_ALIGN_TRAP_, NULL,  },
    { "TRUNC_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_TRUNC_TRAP_, NULL,  },
    { "NEXT_AFTER_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_NEXT_AFTER_TRAP_, NULL,  },
    { "LESS_THAN_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_LESS_THAN_TRAP_, NULL,  },
    { "GREATER_THAN_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_GREATER_THAN_TRAP_, NULL,  },
    { "NEW_INSTANCE_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfp_NEW_INSTANCE_TRAP_, NULL,  },
    { "mant_", NULL, 0x4, "[I", NULL, NULL,  },
    { "sign_", NULL, 0x4, "B", NULL, NULL,  },
    { "exp_", NULL, 0x4, "I", NULL, NULL,  },
    { "nans_", NULL, 0x4, "B", NULL, NULL,  },
    { "field_", NULL, 0x12, "Lorg.apache.commons.math.dfp.DfpField;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDfpDfp = { 2, "Dfp", "org.apache.commons.math.dfp", NULL, 0x1, 62, methods, 26, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lorg/apache/commons/math/FieldElement<Lorg/apache/commons/math/dfp/Dfp;>;" };
  return &_OrgApacheCommonsMathDfpDfp;
}

@end

void OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_(OrgApacheCommonsMathDfpDfp *self, OrgApacheCommonsMathDfpDfpField *field) {
  NSObject_init(self);
  OrgApacheCommonsMathDfpDfp_setAndConsume_mant_(self, [IOSIntArray newArrayWithLength:[((OrgApacheCommonsMathDfpDfpField *) nil_chk(field)) getRadixDigits]]);
  self->sign_ = 1;
  self->exp_ = 0;
  self->nans_ = OrgApacheCommonsMathDfpDfp_FINITE;
  OrgApacheCommonsMathDfpDfp_set_field_(self, field);
}

OrgApacheCommonsMathDfpDfp *new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_(OrgApacheCommonsMathDfpDfpField *field) {
  OrgApacheCommonsMathDfpDfp *self = [OrgApacheCommonsMathDfpDfp alloc];
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_(self, field);
  return self;
}

void OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_(OrgApacheCommonsMathDfpDfp *self, OrgApacheCommonsMathDfpDfpField *field, jbyte x) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(self, field, (jlong) x);
}

OrgApacheCommonsMathDfpDfp *new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_(OrgApacheCommonsMathDfpDfpField *field, jbyte x) {
  OrgApacheCommonsMathDfpDfp *self = [OrgApacheCommonsMathDfpDfp alloc];
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_(self, field, x);
  return self;
}

void OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withInt_(OrgApacheCommonsMathDfpDfp *self, OrgApacheCommonsMathDfpDfpField *field, jint x) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(self, field, (jlong) x);
}

OrgApacheCommonsMathDfpDfp *new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withInt_(OrgApacheCommonsMathDfpDfpField *field, jint x) {
  OrgApacheCommonsMathDfpDfp *self = [OrgApacheCommonsMathDfpDfp alloc];
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withInt_(self, field, x);
  return self;
}

void OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(OrgApacheCommonsMathDfpDfp *self, OrgApacheCommonsMathDfpDfpField *field, jlong x) {
  NSObject_init(self);
  OrgApacheCommonsMathDfpDfp_setAndConsume_mant_(self, [IOSIntArray newArrayWithLength:[((OrgApacheCommonsMathDfpDfpField *) nil_chk(field)) getRadixDigits]]);
  self->nans_ = OrgApacheCommonsMathDfpDfp_FINITE;
  OrgApacheCommonsMathDfpDfp_set_field_(self, field);
  jboolean isLongMin = NO;
  if (x == JavaLangLong_MIN_VALUE) {
    isLongMin = YES;
    ++x;
  }
  if (x < 0) {
    self->sign_ = -1;
    x = -x;
  }
  else {
    self->sign_ = 1;
  }
  self->exp_ = 0;
  while (x != 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->mant_, self->mant_->size_ - self->exp_, self->mant_, self->mant_->size_ - 1 - self->exp_, self->exp_);
    *IOSIntArray_GetRef(self->mant_, self->mant_->size_ - 1) = (jint) (x % OrgApacheCommonsMathDfpDfp_RADIX);
    x /= OrgApacheCommonsMathDfpDfp_RADIX;
    self->exp_++;
  }
  if (isLongMin) {
    for (jint i = 0; i < self->mant_->size_ - 1; i++) {
      if (IOSIntArray_Get(self->mant_, i) != 0) {
        (*IOSIntArray_GetRef(self->mant_, i))++;
        break;
      }
    }
  }
}

OrgApacheCommonsMathDfpDfp *new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(OrgApacheCommonsMathDfpDfpField *field, jlong x) {
  OrgApacheCommonsMathDfpDfp *self = [OrgApacheCommonsMathDfpDfp alloc];
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(self, field, x);
  return self;
}

void OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(OrgApacheCommonsMathDfpDfp *self, OrgApacheCommonsMathDfpDfpField *field, jdouble x) {
  NSObject_init(self);
  OrgApacheCommonsMathDfpDfp_setAndConsume_mant_(self, [IOSIntArray newArrayWithLength:[((OrgApacheCommonsMathDfpDfpField *) nil_chk(field)) getRadixDigits]]);
  self->sign_ = 1;
  self->exp_ = 0;
  self->nans_ = OrgApacheCommonsMathDfpDfp_FINITE;
  OrgApacheCommonsMathDfpDfp_set_field_(self, field);
  jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(x);
  jlong mantissa = bits & (jlong) 0x000fffffffffffffLL;
  jint exponent = (jint) (RShift64((bits & (jlong) 0x7ff0000000000000LL), 52)) - 1023;
  if (exponent == -1023) {
    if (x == 0) {
      return;
    }
    exponent++;
    while ((mantissa & (jlong) 0x0010000000000000LL) == 0) {
      exponent--;
      LShiftAssignLong(&mantissa, 1);
    }
    mantissa &= (jlong) 0x000fffffffffffffLL;
  }
  if (exponent == 1024) {
    if (x != x) {
      self->sign_ = (jbyte) 1;
      self->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    }
    else if (x < 0) {
      self->sign_ = (jbyte) -1;
      self->nans_ = OrgApacheCommonsMathDfpDfp_INFINITE;
    }
    else {
      self->sign_ = (jbyte) 1;
      self->nans_ = OrgApacheCommonsMathDfpDfp_INFINITE;
    }
    return;
  }
  OrgApacheCommonsMathDfpDfp *xdfp = [new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(field, mantissa) autorelease];
  xdfp = [((OrgApacheCommonsMathDfpDfp *) nil_chk([xdfp divideWithId:[new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(field, 4503599627370496l) autorelease]])) addWithId:[field getOne]];
  xdfp = [((OrgApacheCommonsMathDfpDfp *) nil_chk(xdfp)) multiplyWithId:OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withInt_([field getTwo], exponent)];
  if ((bits & -0x7fffffffffffffffLL - 1) != 0) {
    xdfp = [((OrgApacheCommonsMathDfpDfp *) nil_chk(xdfp)) negate];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgApacheCommonsMathDfpDfp *) nil_chk(xdfp))->mant_, 0, self->mant_, 0, self->mant_->size_);
  self->sign_ = xdfp->sign_;
  self->exp_ = xdfp->exp_;
  self->nans_ = xdfp->nans_;
}

OrgApacheCommonsMathDfpDfp *new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(OrgApacheCommonsMathDfpDfpField *field, jdouble x) {
  OrgApacheCommonsMathDfpDfp *self = [OrgApacheCommonsMathDfpDfp alloc];
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(self, field, x);
  return self;
}

void OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *self, OrgApacheCommonsMathDfpDfp *d) {
  NSObject_init(self);
  OrgApacheCommonsMathDfpDfp_set_mant_(self, [((IOSIntArray *) nil_chk(((OrgApacheCommonsMathDfpDfp *) nil_chk(d))->mant_)) clone]);
  self->sign_ = d->sign_;
  self->exp_ = d->exp_;
  self->nans_ = d->nans_;
  OrgApacheCommonsMathDfpDfp_set_field_(self, d->field_);
}

OrgApacheCommonsMathDfpDfp *new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *d) {
  OrgApacheCommonsMathDfpDfp *self = [OrgApacheCommonsMathDfpDfp alloc];
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(self, d);
  return self;
}

void OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(OrgApacheCommonsMathDfpDfp *self, OrgApacheCommonsMathDfpDfpField *field, NSString *s) {
  NSObject_init(self);
  OrgApacheCommonsMathDfpDfp_setAndConsume_mant_(self, [IOSIntArray newArrayWithLength:[((OrgApacheCommonsMathDfpDfpField *) nil_chk(field)) getRadixDigits]]);
  self->sign_ = 1;
  self->exp_ = 0;
  self->nans_ = OrgApacheCommonsMathDfpDfp_FINITE;
  OrgApacheCommonsMathDfpDfp_set_field_(self, field);
  jboolean decimalFound = NO;
  jint rsize = 4;
  jint offset = 4;
  IOSCharArray *striped = [IOSCharArray arrayWithLength:[self getRadixDigits] * rsize + offset * 2];
  if ([((NSString *) nil_chk(s)) isEqual:OrgApacheCommonsMathDfpDfp_POS_INFINITY_STRING_]) {
    self->sign_ = (jbyte) 1;
    self->nans_ = OrgApacheCommonsMathDfpDfp_INFINITE;
    return;
  }
  if ([s isEqual:OrgApacheCommonsMathDfpDfp_NEG_INFINITY_STRING_]) {
    self->sign_ = (jbyte) -1;
    self->nans_ = OrgApacheCommonsMathDfpDfp_INFINITE;
    return;
  }
  if ([s isEqual:OrgApacheCommonsMathDfpDfp_NAN_STRING_]) {
    self->sign_ = (jbyte) 1;
    self->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return;
  }
  jint p = [s indexOfString:@"e"];
  if (p == -1) {
    p = [s indexOfString:@"E"];
  }
  NSString *fpdecimal;
  jint sciexp = 0;
  if (p != -1) {
    fpdecimal = [s substring:0 endIndex:p];
    NSString *fpexp = [s substring:p + 1];
    jboolean negative = NO;
    for (jint i = 0; i < ((jint) [((NSString *) nil_chk(fpexp)) length]); i++) {
      if ([fpexp charAtWithInt:i] == '-') {
        negative = YES;
        continue;
      }
      if ([fpexp charAtWithInt:i] >= '0' && [fpexp charAtWithInt:i] <= '9') sciexp = sciexp * 10 + [fpexp charAtWithInt:i] - '0';
    }
    if (negative) {
      sciexp = -sciexp;
    }
  }
  else {
    fpdecimal = s;
  }
  if ([((NSString *) nil_chk(fpdecimal)) indexOfString:@"-"] != -1) {
    self->sign_ = -1;
  }
  p = 0;
  jint decimalPos = 0;
  for (; ; ) {
    if ([fpdecimal charAtWithInt:p] >= '1' && [fpdecimal charAtWithInt:p] <= '9') {
      break;
    }
    if (decimalFound && [fpdecimal charAtWithInt:p] == '0') {
      decimalPos--;
    }
    if ([fpdecimal charAtWithInt:p] == '.') {
      decimalFound = YES;
    }
    p++;
    if (p == ((jint) [fpdecimal length])) {
      break;
    }
  }
  jint q = offset;
  *IOSCharArray_GetRef(striped, 0) = '0';
  *IOSCharArray_GetRef(striped, 1) = '0';
  *IOSCharArray_GetRef(striped, 2) = '0';
  *IOSCharArray_GetRef(striped, 3) = '0';
  jint significantDigits = 0;
  for (; ; ) {
    if (p == (((jint) [fpdecimal length]))) {
      break;
    }
    if (q == self->mant_->size_ * rsize + offset + 1) {
      break;
    }
    if ([fpdecimal charAtWithInt:p] == '.') {
      decimalFound = YES;
      decimalPos = significantDigits;
      p++;
      continue;
    }
    if ([fpdecimal charAtWithInt:p] < '0' || [fpdecimal charAtWithInt:p] > '9') {
      p++;
      continue;
    }
    *IOSCharArray_GetRef(striped, q) = [fpdecimal charAtWithInt:p];
    q++;
    p++;
    significantDigits++;
  }
  if (decimalFound && q != offset) {
    for (; ; ) {
      q--;
      if (q == offset) {
        break;
      }
      if (IOSCharArray_Get(striped, q) == '0') {
        significantDigits--;
      }
      else {
        break;
      }
    }
  }
  if (decimalFound && significantDigits == 0) {
    decimalPos = 0;
  }
  if (!decimalFound) {
    decimalPos = q - offset;
  }
  q = offset;
  p = significantDigits - 1 + offset;
  while (p > q) {
    if (IOSCharArray_Get(striped, p) != '0') {
      break;
    }
    p--;
  }
  jint i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;
  q -= i;
  decimalPos += i;
  while ((p - q) < (self->mant_->size_ * rsize)) {
    for (i = 0; i < rsize; i++) {
      *IOSCharArray_GetRef(striped, ++p) = '0';
    }
  }
  for (i = self->mant_->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(self->mant_, i) = (IOSCharArray_Get(striped, q) - '0') * 1000 + (IOSCharArray_Get(striped, q + 1) - '0') * 100 + (IOSCharArray_Get(striped, q + 2) - '0') * 10 + (IOSCharArray_Get(striped, q + 3) - '0');
    q += 4;
  }
  self->exp_ = (decimalPos + sciexp) / rsize;
  if (q < striped->size_) {
    [self roundWithInt:(IOSCharArray_Get(striped, q) - '0') * 1000];
  }
}

OrgApacheCommonsMathDfpDfp *new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(OrgApacheCommonsMathDfpDfpField *field, NSString *s) {
  OrgApacheCommonsMathDfpDfp *self = [OrgApacheCommonsMathDfpDfp alloc];
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(self, field, s);
  return self;
}

void OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(OrgApacheCommonsMathDfpDfp *self, OrgApacheCommonsMathDfpDfpField *field, jbyte sign, jbyte nans) {
  NSObject_init(self);
  OrgApacheCommonsMathDfpDfp_set_field_(self, field);
  OrgApacheCommonsMathDfpDfp_setAndConsume_mant_(self, [IOSIntArray newArrayWithLength:[((OrgApacheCommonsMathDfpDfpField *) nil_chk(field)) getRadixDigits]]);
  self->sign_ = sign;
  self->exp_ = 0;
  self->nans_ = nans;
}

OrgApacheCommonsMathDfpDfp *new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(OrgApacheCommonsMathDfpDfpField *field, jbyte sign, jbyte nans) {
  OrgApacheCommonsMathDfpDfp *self = [OrgApacheCommonsMathDfpDfp alloc];
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(self, field, sign, nans);
  return self;
}

jint OrgApacheCommonsMathDfpDfp_compareWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a, OrgApacheCommonsMathDfpDfp *b) {
  OrgApacheCommonsMathDfpDfp_initialize();
  if (IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(a))->mant_, ((IOSIntArray *) nil_chk(a->mant_))->size_ - 1) == 0 && IOSIntArray_Get(((OrgApacheCommonsMathDfpDfp *) nil_chk(b))->mant_, b->mant_->size_ - 1) == 0 && a->nans_ == OrgApacheCommonsMathDfpDfp_FINITE && b->nans_ == OrgApacheCommonsMathDfpDfp_FINITE) {
    return 0;
  }
  if (a->sign_ != ((OrgApacheCommonsMathDfpDfp *) nil_chk(b))->sign_) {
    if (a->sign_ == -1) {
      return -1;
    }
    else {
      return 1;
    }
  }
  if (a->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && b->nans_ == OrgApacheCommonsMathDfpDfp_FINITE) {
    return a->sign_;
  }
  if (a->nans_ == OrgApacheCommonsMathDfpDfp_FINITE && b->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE) {
    return -b->sign_;
  }
  if (a->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE && b->nans_ == OrgApacheCommonsMathDfpDfp_INFINITE) {
    return 0;
  }
  if (IOSIntArray_Get(b->mant_, b->mant_->size_ - 1) != 0 && IOSIntArray_Get(a->mant_, b->mant_->size_ - 1) != 0) {
    if (a->exp_ < b->exp_) {
      return -a->sign_;
    }
    if (a->exp_ > b->exp_) {
      return a->sign_;
    }
  }
  for (jint i = a->mant_->size_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(a->mant_, i) > IOSIntArray_Get(b->mant_, i)) {
      return a->sign_;
    }
    if (IOSIntArray_Get(a->mant_, i) < IOSIntArray_Get(b->mant_, i)) {
      return -a->sign_;
    }
  }
  return 0;
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *x, OrgApacheCommonsMathDfpDfp *y) {
  OrgApacheCommonsMathDfpDfp_initialize();
  OrgApacheCommonsMathDfpDfp *result = [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) newInstanceWithOrgApacheCommonsMathDfpDfp:x];
  ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->sign_ = ((OrgApacheCommonsMathDfpDfp *) nil_chk(y))->sign_;
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDfpDfp)
