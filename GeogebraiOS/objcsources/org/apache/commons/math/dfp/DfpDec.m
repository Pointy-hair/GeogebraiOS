//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/dfp/DfpDec.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/math/dfp/Dfp.h"
#include "org/apache/commons/math/dfp/DfpDec.h"
#include "org/apache/commons/math/dfp/DfpField.h"

@implementation OrgApacheCommonsMathDfpDfpDec

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)factory {
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_(self, factory);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)factory
                                               withByte:(jbyte)x {
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_(self, factory, x);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)factory
                                                withInt:(jint)x {
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withInt_(self, factory, x);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)factory
                                               withLong:(jlong)x {
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withLong_(self, factory, x);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)factory
                                             withDouble:(jdouble)x {
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(self, factory, x);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)d {
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfp_(self, d);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)factory
                                           withNSString:(NSString *)s {
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(self, factory, s);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)factory
                                               withByte:(jbyte)sign
                                               withByte:(jbyte)nans {
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(self, factory, sign, nans);
  return self;
}

- (OrgApacheCommonsMathDfpDfp *)newInstance {
  return [new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_([self getField]) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithByte:(jbyte)x {
  return [new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_([self getField], x) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithInt:(jint)x {
  return [new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withInt_([self getField], x) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithLong:(jlong)x {
  return [new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withLong_([self getField], x) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithDouble:(jdouble)x {
  return [new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withDouble_([self getField], x) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)d {
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) getRadixDigits] != [((OrgApacheCommonsMathDfpDfpField *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(d)) getField])) getRadixDigits]) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:@"newInstance" withOrgApacheCommonsMathDfpDfp:d withOrgApacheCommonsMathDfpDfp:result];
  }
  return [new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfp_(d) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithNSString:(NSString *)s {
  return [new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withNSString_([self getField], s) autorelease];
}

- (OrgApacheCommonsMathDfpDfp *)newInstanceWithByte:(jbyte)sign
                                           withByte:(jbyte)nans {
  return [new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_([self getField], sign, nans) autorelease];
}

- (jint)getDecimalDigits {
  return [self getRadixDigits] * 4 - 3;
}

- (jint)roundWithInt:(jint)inArg {
  jint msb = IOSIntArray_Get(mant_, ((IOSIntArray *) nil_chk(mant_))->size_ - 1);
  if (msb == 0) {
    return 0;
  }
  jint cmaxdigits = mant_->size_ * 4;
  jint lsbthreshold = 1000;
  while (lsbthreshold > msb) {
    lsbthreshold /= 10;
    cmaxdigits--;
  }
  jint digits = [self getDecimalDigits];
  jint lsbshift = cmaxdigits - digits;
  jint lsd = lsbshift / 4;
  lsbthreshold = 1;
  for (jint i = 0; i < lsbshift % 4; i++) {
    lsbthreshold *= 10;
  }
  jint lsb = IOSIntArray_Get(mant_, lsd);
  if (lsbthreshold <= 1 && digits == 4 * mant_->size_ - 3) {
    return [super roundWithInt:inArg];
  }
  jint discarded = inArg;
  jint n;
  if (lsbthreshold == 1) {
    n = (IOSIntArray_Get(mant_, lsd - 1) / 1000) % 10;
    *IOSIntArray_GetRef(mant_, lsd - 1) %= 1000;
    discarded |= IOSIntArray_Get(mant_, lsd - 1);
  }
  else {
    n = (lsb * 10 / lsbthreshold) % 10;
    discarded |= lsb % (lsbthreshold / 10);
  }
  for (jint i = 0; i < lsd; i++) {
    discarded |= IOSIntArray_Get(mant_, i);
    *IOSIntArray_GetRef(mant_, i) = 0;
  }
  *IOSIntArray_GetRef(mant_, lsd) = lsb / lsbthreshold * lsbthreshold;
  jboolean inc;
  switch ([[((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) getRoundingMode] ordinal]) {
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_DOWN:
    inc = NO;
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_UP:
    inc = ((n != 0) || (discarded != 0));
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_UP:
    inc = (n >= 5);
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_DOWN:
    inc = (n > 5);
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_EVEN:
    inc = ((n > 5) || (n == 5 && discarded != 0) || (n == 5 && discarded == 0 && ((lsb / lsbthreshold) & 1) == 1));
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_HALF_ODD:
    inc = ((n > 5) || (n == 5 && discarded != 0) || (n == 5 && discarded == 0 && ((lsb / lsbthreshold) & 1) == 0));
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_CEIL:
    inc = ((sign_ == 1) && (n != 0 || discarded != 0));
    break;
    case OrgApacheCommonsMathDfpDfpField_RoundingMode_ROUND_FLOOR:
    default:
    inc = ((sign_ == -1) && (n != 0 || discarded != 0));
    break;
  }
  if (inc) {
    jint rh = lsbthreshold;
    for (jint i = lsd; i < mant_->size_; i++) {
      jint r = IOSIntArray_Get(mant_, i) + rh;
      rh = r / OrgApacheCommonsMathDfpDfp_RADIX;
      *IOSIntArray_GetRef(mant_, i) = r % OrgApacheCommonsMathDfpDfp_RADIX;
    }
    if (rh != 0) {
      [self shiftRight];
      *IOSIntArray_GetRef(mant_, mant_->size_ - 1) = rh;
    }
  }
  if (exp_ < OrgApacheCommonsMathDfpDfp_MIN_EXP) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_UNDERFLOW];
    return OrgApacheCommonsMathDfpDfpField_FLAG_UNDERFLOW;
  }
  if (exp_ > OrgApacheCommonsMathDfpDfp_MAX_EXP) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_OVERFLOW];
    return OrgApacheCommonsMathDfpDfpField_FLAG_OVERFLOW;
  }
  if (n != 0 || discarded != 0) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    return OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT;
  }
  return 0;
}

- (OrgApacheCommonsMathDfpDfp *)nextAfterWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)x {
  NSString *trapName = @"nextAfter";
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) getRadixDigits] != [((OrgApacheCommonsMathDfpDfpField *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) getField])) getRadixDigits]) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:trapName withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  jboolean up = NO;
  OrgApacheCommonsMathDfpDfp *result;
  OrgApacheCommonsMathDfpDfp *inc;
  if ([self lessThanWithOrgApacheCommonsMathDfpDfp:x]) {
    up = YES;
  }
  if ([self isEqual:x]) {
    return [self newInstanceWithOrgApacheCommonsMathDfpDfp:x];
  }
  if ([self lessThanWithOrgApacheCommonsMathDfpDfp:[self getZero]]) {
    up = !up;
  }
  if (up) {
    inc = [self power10WithInt:[self log10] - [self getDecimalDigits] + 1];
    inc = OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(inc, self);
    if ([self isEqual:[self getZero]]) {
      inc = [self power10KWithInt:OrgApacheCommonsMathDfpDfp_MIN_EXP - ((IOSIntArray *) nil_chk(mant_))->size_ - 1];
    }
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(inc)) isEqual:[self getZero]]) {
      result = OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_([self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]], self);
    }
    else {
      result = [self addWithId:inc];
    }
  }
  else {
    inc = [self power10WithInt:[self log10]];
    inc = OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(inc, self);
    if ([self isEqual:inc]) {
      inc = [((OrgApacheCommonsMathDfpDfp *) nil_chk(inc)) divideWithId:[self power10WithInt:[self getDecimalDigits]]];
    }
    else {
      inc = [((OrgApacheCommonsMathDfpDfp *) nil_chk(inc)) divideWithId:[self power10WithInt:[self getDecimalDigits] - 1]];
    }
    if ([self isEqual:[self getZero]]) {
      inc = [self power10KWithInt:OrgApacheCommonsMathDfpDfp_MIN_EXP - ((IOSIntArray *) nil_chk(mant_))->size_ - 1];
    }
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(inc)) isEqual:[self getZero]]) {
      result = OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_([self newInstanceWithOrgApacheCommonsMathDfpDfp:[self getZero]], self);
    }
    else {
      result = [self subtractWithId:inc];
    }
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(result)) classify] == OrgApacheCommonsMathDfpDfp_INFINITE && [self classify] != OrgApacheCommonsMathDfpDfp_INFINITE) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT withNSString:trapName withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(result)) isEqual:[self getZero]] && [self isEqual:[self getZero]] == NO) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([self getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT];
    result = [self dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INEXACT withNSString:trapName withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathDfpDfpField:", "DfpDec", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withByte:", "DfpDec", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withInt:", "DfpDec", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withLong:", "DfpDec", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withDouble:", "DfpDec", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfp:", "DfpDec", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withNSString:", "DfpDec", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathDfpDfpField:withByte:withByte:", "DfpDec", NULL, 0x4, NULL, NULL },
    { "newInstance", NULL, "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithByte:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithInt:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithLong:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithDouble:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithOrgApacheCommonsMathDfpDfp:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithNSString:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "newInstanceWithByte:withByte:", "newInstance", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
    { "getDecimalDigits", NULL, "I", 0x4, NULL, NULL },
    { "roundWithInt:", "round", "I", 0x4, NULL, NULL },
    { "nextAfterWithOrgApacheCommonsMathDfpDfp:", "nextAfter", "Lorg.apache.commons.math.dfp.Dfp;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDfpDfpDec = { 2, "DfpDec", "org.apache.commons.math.dfp", NULL, 0x1, 19, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDfpDfpDec;
}

@end

void OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_(OrgApacheCommonsMathDfpDfpDec *self, OrgApacheCommonsMathDfpDfpField *factory) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_(self, factory);
}

OrgApacheCommonsMathDfpDfpDec *new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_(OrgApacheCommonsMathDfpDfpField *factory) {
  OrgApacheCommonsMathDfpDfpDec *self = [OrgApacheCommonsMathDfpDfpDec alloc];
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_(self, factory);
  return self;
}

void OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_(OrgApacheCommonsMathDfpDfpDec *self, OrgApacheCommonsMathDfpDfpField *factory, jbyte x) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_(self, factory, x);
}

OrgApacheCommonsMathDfpDfpDec *new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_(OrgApacheCommonsMathDfpDfpField *factory, jbyte x) {
  OrgApacheCommonsMathDfpDfpDec *self = [OrgApacheCommonsMathDfpDfpDec alloc];
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_(self, factory, x);
  return self;
}

void OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withInt_(OrgApacheCommonsMathDfpDfpDec *self, OrgApacheCommonsMathDfpDfpField *factory, jint x) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withInt_(self, factory, x);
}

OrgApacheCommonsMathDfpDfpDec *new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withInt_(OrgApacheCommonsMathDfpDfpField *factory, jint x) {
  OrgApacheCommonsMathDfpDfpDec *self = [OrgApacheCommonsMathDfpDfpDec alloc];
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withInt_(self, factory, x);
  return self;
}

void OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withLong_(OrgApacheCommonsMathDfpDfpDec *self, OrgApacheCommonsMathDfpDfpField *factory, jlong x) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withLong_(self, factory, x);
}

OrgApacheCommonsMathDfpDfpDec *new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withLong_(OrgApacheCommonsMathDfpDfpField *factory, jlong x) {
  OrgApacheCommonsMathDfpDfpDec *self = [OrgApacheCommonsMathDfpDfpDec alloc];
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withLong_(self, factory, x);
  return self;
}

void OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(OrgApacheCommonsMathDfpDfpDec *self, OrgApacheCommonsMathDfpDfpField *factory, jdouble x) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(self, factory, x);
  [self roundWithInt:0];
}

OrgApacheCommonsMathDfpDfpDec *new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(OrgApacheCommonsMathDfpDfpField *factory, jdouble x) {
  OrgApacheCommonsMathDfpDfpDec *self = [OrgApacheCommonsMathDfpDfpDec alloc];
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withDouble_(self, factory, x);
  return self;
}

void OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfpDec *self, OrgApacheCommonsMathDfpDfp *d) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(self, d);
  [self roundWithInt:0];
}

OrgApacheCommonsMathDfpDfpDec *new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *d) {
  OrgApacheCommonsMathDfpDfpDec *self = [OrgApacheCommonsMathDfpDfpDec alloc];
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfp_(self, d);
  return self;
}

void OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(OrgApacheCommonsMathDfpDfpDec *self, OrgApacheCommonsMathDfpDfpField *factory, NSString *s) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(self, factory, s);
  [self roundWithInt:0];
}

OrgApacheCommonsMathDfpDfpDec *new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(OrgApacheCommonsMathDfpDfpField *factory, NSString *s) {
  OrgApacheCommonsMathDfpDfpDec *self = [OrgApacheCommonsMathDfpDfpDec alloc];
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withNSString_(self, factory, s);
  return self;
}

void OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(OrgApacheCommonsMathDfpDfpDec *self, OrgApacheCommonsMathDfpDfpField *factory, jbyte sign, jbyte nans) {
  OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(self, factory, sign, nans);
}

OrgApacheCommonsMathDfpDfpDec *new_OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(OrgApacheCommonsMathDfpDfpField *factory, jbyte sign, jbyte nans) {
  OrgApacheCommonsMathDfpDfpDec *self = [OrgApacheCommonsMathDfpDfpDec alloc];
  OrgApacheCommonsMathDfpDfpDec_initWithOrgApacheCommonsMathDfpDfpField_withByte_withByte_(self, factory, sign, nans);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDfpDfpDec)
