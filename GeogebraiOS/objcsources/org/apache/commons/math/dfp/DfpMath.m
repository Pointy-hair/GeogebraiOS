//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/dfp/DfpMath.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/commons/math/dfp/Dfp.h"
#include "org/apache/commons/math/dfp/DfpField.h"
#include "org/apache/commons/math/dfp/DfpMath.h"

@interface OrgApacheCommonsMathDfpDfpMath ()

- (instancetype)init;

@end

static NSString *OrgApacheCommonsMathDfpDfpMath_POW_TRAP_ = @"pow";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDfpDfpMath, POW_TRAP_, NSString *)

__attribute__((unused)) static void OrgApacheCommonsMathDfpDfpMath_init(OrgApacheCommonsMathDfpDfpMath *self);

__attribute__((unused)) static OrgApacheCommonsMathDfpDfpMath *new_OrgApacheCommonsMathDfpDfpMath_init() NS_RETURNS_RETAINED;

@implementation OrgApacheCommonsMathDfpDfpMath

- (instancetype)init {
  OrgApacheCommonsMathDfpDfpMath_init(self);
  return self;
}

+ (IOSObjectArray *)splitWithOrgApacheCommonsMathDfpDfpField:(OrgApacheCommonsMathDfpDfpField *)field
                                                withNSString:(NSString *)a {
  return OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfpField_withNSString_(field, a);
}

+ (IOSObjectArray *)splitWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (IOSObjectArray *)splitMultWithOrgApacheCommonsMathDfpDfpArray:(IOSObjectArray *)a
                             withOrgApacheCommonsMathDfpDfpArray:(IOSObjectArray *)b {
  return OrgApacheCommonsMathDfpDfpMath_splitMultWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_(a, b);
}

+ (IOSObjectArray *)splitDivWithOrgApacheCommonsMathDfpDfpArray:(IOSObjectArray *)a
                            withOrgApacheCommonsMathDfpDfpArray:(IOSObjectArray *)b {
  return OrgApacheCommonsMathDfpDfpMath_splitDivWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_(a, b);
}

+ (OrgApacheCommonsMathDfpDfp *)splitPowWithOrgApacheCommonsMathDfpDfpArray:(IOSObjectArray *)base
                                                                    withInt:(jint)a {
  return OrgApacheCommonsMathDfpDfpMath_splitPowWithOrgApacheCommonsMathDfpDfpArray_withInt_(base, a);
}

+ (OrgApacheCommonsMathDfpDfp *)powWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)base
                                                          withInt:(jint)a {
  return OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withInt_(base, a);
}

+ (OrgApacheCommonsMathDfpDfp *)expWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_expWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)expInternalWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_expInternalWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)logWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_logWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (IOSObjectArray *)logInternalWithOrgApacheCommonsMathDfpDfpArray:(IOSObjectArray *)a {
  return OrgApacheCommonsMathDfpDfpMath_logInternalWithOrgApacheCommonsMathDfpDfpArray_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)powWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)x
                                   withOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)y {
  return OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(x, y);
}

+ (OrgApacheCommonsMathDfpDfp *)sinInternalWithOrgApacheCommonsMathDfpDfpArray:(IOSObjectArray *)a {
  return OrgApacheCommonsMathDfpDfpMath_sinInternalWithOrgApacheCommonsMathDfpDfpArray_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)cosInternalWithOrgApacheCommonsMathDfpDfpArray:(IOSObjectArray *)a {
  return OrgApacheCommonsMathDfpDfpMath_cosInternalWithOrgApacheCommonsMathDfpDfpArray_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)sinWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_sinWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)cosWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_cosWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)tanWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_tanWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)atanInternalWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_atanInternalWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)atanWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_atanWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)asinWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_asinWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (OrgApacheCommonsMathDfpDfp *)acosWithOrgApacheCommonsMathDfpDfp:(OrgApacheCommonsMathDfpDfp *)a {
  return OrgApacheCommonsMathDfpDfpMath_acosWithOrgApacheCommonsMathDfpDfp_(a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DfpMath", NULL, 0x2, NULL, NULL },
    { "splitWithOrgApacheCommonsMathDfpDfpField:withNSString:", "split", "[Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "splitWithOrgApacheCommonsMathDfpDfp:", "split", "[Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "splitMultWithOrgApacheCommonsMathDfpDfpArray:withOrgApacheCommonsMathDfpDfpArray:", "splitMult", "[Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "splitDivWithOrgApacheCommonsMathDfpDfpArray:withOrgApacheCommonsMathDfpDfpArray:", "splitDiv", "[Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "splitPowWithOrgApacheCommonsMathDfpDfpArray:withInt:", "splitPow", "Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "powWithOrgApacheCommonsMathDfpDfp:withInt:", "pow", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "expWithOrgApacheCommonsMathDfpDfp:", "exp", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "expInternalWithOrgApacheCommonsMathDfpDfp:", "expInternal", "Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "logWithOrgApacheCommonsMathDfpDfp:", "log", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "logInternalWithOrgApacheCommonsMathDfpDfpArray:", "logInternal", "[Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "powWithOrgApacheCommonsMathDfpDfp:withOrgApacheCommonsMathDfpDfp:", "pow", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "sinInternalWithOrgApacheCommonsMathDfpDfpArray:", "sinInternal", "Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "cosInternalWithOrgApacheCommonsMathDfpDfpArray:", "cosInternal", "Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "sinWithOrgApacheCommonsMathDfpDfp:", "sin", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "cosWithOrgApacheCommonsMathDfpDfp:", "cos", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "tanWithOrgApacheCommonsMathDfpDfp:", "tan", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "atanInternalWithOrgApacheCommonsMathDfpDfp:", "atanInternal", "Lorg.apache.commons.math.dfp.Dfp;", 0xc, NULL, NULL },
    { "atanWithOrgApacheCommonsMathDfpDfp:", "atan", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "asinWithOrgApacheCommonsMathDfpDfp:", "asin", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
    { "acosWithOrgApacheCommonsMathDfpDfp:", "acos", "Lorg.apache.commons.math.dfp.Dfp;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "POW_TRAP_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathDfpDfpMath_POW_TRAP_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDfpDfpMath = { 2, "DfpMath", "org.apache.commons.math.dfp", NULL, 0x1, 21, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDfpDfpMath;
}

@end

void OrgApacheCommonsMathDfpDfpMath_init(OrgApacheCommonsMathDfpDfpMath *self) {
  (void) NSObject_init(self);
}

OrgApacheCommonsMathDfpDfpMath *new_OrgApacheCommonsMathDfpDfpMath_init() {
  OrgApacheCommonsMathDfpDfpMath *self = [OrgApacheCommonsMathDfpDfpMath alloc];
  OrgApacheCommonsMathDfpDfpMath_init(self);
  return self;
}

IOSObjectArray *OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfpField_withNSString_(OrgApacheCommonsMathDfpDfpField *field, NSString *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
  IOSCharArray *buf;
  jboolean leading = YES;
  jint sp = 0;
  jint sig = 0;
  buf = [IOSCharArray newArrayWithLength:((jint) [((NSString *) nil_chk(a)) length])];
  for (jint i = 0; i < buf->size_; i++) {
    *IOSCharArray_GetRef(buf, i) = [a charAtWithInt:i];
    if (IOSCharArray_Get(buf, i) >= '1' && IOSCharArray_Get(buf, i) <= '9') {
      leading = NO;
    }
    if (IOSCharArray_Get(buf, i) == '.') {
      sig += (400 - sig) % 4;
      leading = NO;
    }
    if (sig == ([((OrgApacheCommonsMathDfpDfpField *) nil_chk(field)) getRadixDigits] / 2) * 4) {
      sp = i;
      break;
    }
    if (IOSCharArray_Get(buf, i) >= '0' && IOSCharArray_Get(buf, i) <= '9' && !leading) {
      sig++;
    }
  }
  (void) IOSObjectArray_Set(result, 0, [((OrgApacheCommonsMathDfpDfpField *) nil_chk(field)) newDfpWithNSString:[NSString stringWithCharacters:buf offset:0 length:sp]]);
  for (jint i = 0; i < buf->size_; i++) {
    *IOSCharArray_GetRef(buf, i) = [a charAtWithInt:i];
    if (IOSCharArray_Get(buf, i) >= '0' && IOSCharArray_Get(buf, i) <= '9' && i < sp) {
      *IOSCharArray_GetRef(buf, i) = '0';
    }
  }
  (void) IOSObjectArray_Set(result, 1, [field newDfpWithNSString:[NSString stringWithCharacters:buf]]);
  return result;
}

IOSObjectArray *OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
  OrgApacheCommonsMathDfpDfp *shift = [a multiplyWithId:[a power10KWithInt:[((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getRadixDigits] / 2]];
  (void) IOSObjectArray_Set(result, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk([a addWithId:shift])) subtractWithId:shift]);
  (void) IOSObjectArray_Set(result, 1, [a subtractWithId:IOSObjectArray_Get(result, 0)]);
  return result;
}

IOSObjectArray *OrgApacheCommonsMathDfpDfpMath_splitMultWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_(IOSObjectArray *a, IOSObjectArray *b) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
  (void) IOSObjectArray_Set(result, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(a), 0))) getZero]);
  (void) IOSObjectArray_Set(result, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithId:IOSObjectArray_Get(nil_chk(b), 0)]);
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(result, 0))) classify] == OrgApacheCommonsMathDfpDfp_INFINITE || [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(result, 0))) isEqual:IOSObjectArray_Get(result, 1)]) {
    return result;
  }
  (void) IOSObjectArray_Set(result, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithId:IOSObjectArray_Get(b, 1)])) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 1))) multiplyWithId:IOSObjectArray_Get(b, 0)]])) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 1))) multiplyWithId:IOSObjectArray_Get(b, 1)]]);
  return result;
}

IOSObjectArray *OrgApacheCommonsMathDfpDfpMath_splitDivWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_(IOSObjectArray *a, IOSObjectArray *b) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  IOSObjectArray *result;
  result = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
  (void) IOSObjectArray_Set(result, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(a), 0))) divideWithId:IOSObjectArray_Get(nil_chk(b), 0)]);
  (void) IOSObjectArray_Set(result, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 1))) multiplyWithId:IOSObjectArray_Get(b, 0)])) subtractWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithId:IOSObjectArray_Get(b, 1)]]);
  (void) IOSObjectArray_Set(result, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(result, 1))) divideWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(b, 0))) multiplyWithId:IOSObjectArray_Get(b, 0)])) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(b, 0))) multiplyWithId:IOSObjectArray_Get(b, 1)]]]);
  return result;
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_splitPowWithOrgApacheCommonsMathDfpDfpArray_withInt_(IOSObjectArray *base, jint a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  jboolean invert = NO;
  IOSObjectArray *r = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
  (void) IOSObjectArray_Set(result, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(base), 0))) getOne]);
  (void) IOSObjectArray_Set(result, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(base, 0))) getZero]);
  if (a == 0) {
    return [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(result, 0))) addWithId:IOSObjectArray_Get(result, 1)];
  }
  if (a < 0) {
    invert = YES;
    a = -a;
  }
  do {
    (void) IOSObjectArray_Set(r, 0, new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(IOSObjectArray_Get(base, 0)));
    (void) IOSObjectArray_Set(r, 1, new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(IOSObjectArray_Get(base, 1)));
    jint trial = 1;
    jint prevtrial;
    while (YES) {
      prevtrial = trial;
      trial = trial * 2;
      if (trial > a) {
        break;
      }
      r = OrgApacheCommonsMathDfpDfpMath_splitMultWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_(r, r);
    }
    trial = prevtrial;
    a -= trial;
    result = OrgApacheCommonsMathDfpDfpMath_splitMultWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_(result, r);
  }
  while (a >= 1);
  (void) IOSObjectArray_Set(nil_chk(result), 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(result, 0))) addWithId:IOSObjectArray_Get(result, 1)]);
  if (invert) {
    (void) IOSObjectArray_Set(result, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(base, 0))) getOne])) divideWithId:IOSObjectArray_Get(result, 0)]);
  }
  return IOSObjectArray_Get(result, 0);
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withInt_(OrgApacheCommonsMathDfpDfp *base, jint a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  jboolean invert = NO;
  OrgApacheCommonsMathDfpDfp *result = [((OrgApacheCommonsMathDfpDfp *) nil_chk(base)) getOne];
  if (a == 0) {
    return result;
  }
  if (a < 0) {
    invert = YES;
    a = -a;
  }
  do {
    OrgApacheCommonsMathDfpDfp *r = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(base);
    OrgApacheCommonsMathDfpDfp *prevr;
    jint trial = 1;
    jint prevtrial;
    do {
      prevr = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(r);
      prevtrial = trial;
      r = [r multiplyWithId:r];
      trial = trial * 2;
    }
    while (a > trial);
    r = prevr;
    trial = prevtrial;
    a = a - trial;
    result = [((OrgApacheCommonsMathDfpDfp *) nil_chk(result)) multiplyWithId:r];
  }
  while (a >= 1);
  if (invert) {
    result = [((OrgApacheCommonsMathDfpDfp *) nil_chk([base getOne])) divideWithId:result];
  }
  return [base newInstanceWithOrgApacheCommonsMathDfpDfp:result];
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_expWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *inta = [((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) rint];
  OrgApacheCommonsMathDfpDfp *fraca = [a subtractWithId:inta];
  jint ia = [((OrgApacheCommonsMathDfpDfp *) nil_chk(inta)) intValue];
  if (ia > 2147483646) {
    return [a newInstanceWithByte:(jbyte) 1 withByte:OrgApacheCommonsMathDfpDfp_INFINITE];
  }
  if (ia < -2147483646) {
    return [a newInstance];
  }
  OrgApacheCommonsMathDfpDfp *einta = OrgApacheCommonsMathDfpDfpMath_splitPowWithOrgApacheCommonsMathDfpDfpArray_withInt_([((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getESplit], ia);
  OrgApacheCommonsMathDfpDfp *efraca = OrgApacheCommonsMathDfpDfpMath_expInternalWithOrgApacheCommonsMathDfpDfp_(fraca);
  return [((OrgApacheCommonsMathDfpDfp *) nil_chk(einta)) multiplyWithId:efraca];
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_expInternalWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getOne];
  OrgApacheCommonsMathDfpDfp *x = [a getOne];
  OrgApacheCommonsMathDfpDfp *fact = [a getOne];
  OrgApacheCommonsMathDfpDfp *py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  for (jint i = 1; i < 90; i++) {
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) multiplyWithId:a];
    fact = [((OrgApacheCommonsMathDfpDfp *) nil_chk(fact)) divideWithInt:i];
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) multiplyWithId:fact]];
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) isEqual:py]) {
      break;
    }
    py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  }
  return y;
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_logWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  jint lr;
  OrgApacheCommonsMathDfpDfp *x;
  jint ix;
  jint p2 = 0;
  if ([a isEqual:[((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getZero]] || [a lessThanWithOrgApacheCommonsMathDfpDfp:[a getZero]] || [a isNaN]) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    return [a dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:@"ln" withOrgApacheCommonsMathDfpDfp:a withOrgApacheCommonsMathDfpDfp:[a newInstanceWithByte:(jbyte) 1 withByte:OrgApacheCommonsMathDfpDfp_QNAN]];
  }
  if ([a classify] == OrgApacheCommonsMathDfpDfp_INFINITE) {
    return a;
  }
  x = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(a);
  lr = [x log10K];
  x = [x divideWithId:OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withInt_([a newInstanceWithInt:10000], lr)];
  ix = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) floor])) intValue];
  while (ix > 2) {
    RShiftAssignInt(&ix, 1);
    p2++;
  }
  IOSObjectArray *spx = OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfp_(x);
  IOSObjectArray *spy = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
  (void) IOSObjectArray_Set(spy, 0, OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withInt_([a getTwo], p2));
  (void) IOSObjectArray_Set(nil_chk(spx), 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spx, 0))) divideWithId:IOSObjectArray_Get(spy, 0)]);
  (void) IOSObjectArray_Set(spx, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spx, 1))) divideWithId:IOSObjectArray_Get(spy, 0)]);
  (void) IOSObjectArray_Set(spy, 0, [a newInstanceWithNSString:@"1.33333"]);
  while ([((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spx, 0))) addWithId:IOSObjectArray_Get(spx, 1)])) greaterThanWithOrgApacheCommonsMathDfpDfp:IOSObjectArray_Get(spy, 0)]) {
    (void) IOSObjectArray_Set(spx, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spx, 0))) divideWithInt:2]);
    (void) IOSObjectArray_Set(spx, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spx, 1))) divideWithInt:2]);
    p2++;
  }
  IOSObjectArray *spz = OrgApacheCommonsMathDfpDfpMath_logInternalWithOrgApacheCommonsMathDfpDfpArray_(spx);
  (void) IOSObjectArray_Set(spx, 0, [a newInstanceWithNSString:[((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_init() appendWithInt:p2 + 4 * lr])) description]]);
  (void) IOSObjectArray_Set(spx, 1, [a getZero]);
  spy = OrgApacheCommonsMathDfpDfpMath_splitMultWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_([((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getLn2Split], spx);
  (void) IOSObjectArray_Set(nil_chk(spz), 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spz, 0))) addWithId:IOSObjectArray_Get(nil_chk(spy), 0)]);
  (void) IOSObjectArray_Set(spz, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spz, 1))) addWithId:IOSObjectArray_Get(spy, 1)]);
  (void) IOSObjectArray_Set(spx, 0, [a newInstanceWithNSString:[((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_init() appendWithInt:4 * lr])) description]]);
  (void) IOSObjectArray_Set(spx, 1, [a getZero]);
  spy = OrgApacheCommonsMathDfpDfpMath_splitMultWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_([((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getLn5Split], spx);
  (void) IOSObjectArray_Set(spz, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spz, 0))) addWithId:IOSObjectArray_Get(nil_chk(spy), 0)]);
  (void) IOSObjectArray_Set(spz, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spz, 1))) addWithId:IOSObjectArray_Get(spy, 1)]);
  return [a newInstanceWithOrgApacheCommonsMathDfpDfp:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(spz, 0))) addWithId:IOSObjectArray_Get(spz, 1)]];
}

IOSObjectArray *OrgApacheCommonsMathDfpDfpMath_logInternalWithOrgApacheCommonsMathDfpDfpArray_(IOSObjectArray *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *t = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(a), 0))) divideWithInt:4])) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 1))) divideWithInt:4]];
  OrgApacheCommonsMathDfpDfp *x = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(t)) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 0))) newInstanceWithNSString:@"-0.25"]])) divideWithId:[t addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 0))) newInstanceWithNSString:@"0.25"]]];
  OrgApacheCommonsMathDfpDfp *y = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(x);
  OrgApacheCommonsMathDfpDfp *num = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(x);
  OrgApacheCommonsMathDfpDfp *py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  jint den = 1;
  for (jint i = 0; i < 10000; i++) {
    num = [num multiplyWithId:x];
    num = [((OrgApacheCommonsMathDfpDfp *) nil_chk(num)) multiplyWithId:x];
    den = den + 2;
    t = [((OrgApacheCommonsMathDfpDfp *) nil_chk(num)) divideWithInt:den];
    y = [y addWithId:t];
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) isEqual:py]) {
      break;
    }
    py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  }
  y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) multiplyWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 0))) getTwo]];
  return OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfp_(y);
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *x, OrgApacheCommonsMathDfpDfp *y) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  if ([((OrgApacheCommonsMathDfpDfpField *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) getField])) getRadixDigits] != [((OrgApacheCommonsMathDfpDfpField *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) getField])) getRadixDigits]) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([x getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    OrgApacheCommonsMathDfpDfp *result = [x newInstanceWithOrgApacheCommonsMathDfpDfp:[x getZero]];
    ((OrgApacheCommonsMathDfpDfp *) nil_chk(result))->nans_ = OrgApacheCommonsMathDfpDfp_QNAN;
    return [x dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfpMath_POW_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:result];
  }
  OrgApacheCommonsMathDfpDfp *zero = [x getZero];
  OrgApacheCommonsMathDfpDfp *one = [x getOne];
  OrgApacheCommonsMathDfpDfp *two = [x getTwo];
  jboolean invert = NO;
  jint ui;
  if ([y isEqual:zero]) {
    return [x newInstanceWithOrgApacheCommonsMathDfpDfp:one];
  }
  if ([y isEqual:one]) {
    if ([x isNaN]) {
      [((OrgApacheCommonsMathDfpDfpField *) nil_chk([x getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
      return [x dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfpMath_POW_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:x];
    }
    return x;
  }
  if ([x isNaN] || [y isNaN]) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([x getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    return [x dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfpMath_POW_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:[x newInstanceWithByte:(jbyte) 1 withByte:OrgApacheCommonsMathDfpDfp_QNAN]];
  }
  if ([x isEqual:zero]) {
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(one, x))) greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
      if ([y greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
        return [x newInstanceWithOrgApacheCommonsMathDfpDfp:zero];
      }
      else {
        return [x newInstanceWithOrgApacheCommonsMathDfpDfp:[x newInstanceWithByte:(jbyte) 1 withByte:OrgApacheCommonsMathDfpDfp_INFINITE]];
      }
    }
    else {
      if ([y classify] == OrgApacheCommonsMathDfpDfp_FINITE && [((OrgApacheCommonsMathDfpDfp *) nil_chk([y rint])) isEqual:y] && ![((OrgApacheCommonsMathDfpDfp *) nil_chk([y remainderWithOrgApacheCommonsMathDfpDfp:two])) isEqual:zero]) {
        if ([y greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
          return [x newInstanceWithOrgApacheCommonsMathDfpDfp:[((OrgApacheCommonsMathDfpDfp *) nil_chk(zero)) negate]];
        }
        else {
          return [x newInstanceWithOrgApacheCommonsMathDfpDfp:[x newInstanceWithByte:(jbyte) -1 withByte:OrgApacheCommonsMathDfpDfp_INFINITE]];
        }
      }
      else {
        if ([y greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
          return [x newInstanceWithOrgApacheCommonsMathDfpDfp:zero];
        }
        else {
          return [x newInstanceWithOrgApacheCommonsMathDfpDfp:[x newInstanceWithByte:(jbyte) 1 withByte:OrgApacheCommonsMathDfpDfp_INFINITE]];
        }
      }
    }
  }
  if ([x lessThanWithOrgApacheCommonsMathDfpDfp:zero]) {
    x = [x negate];
    invert = YES;
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) greaterThanWithOrgApacheCommonsMathDfpDfp:one] && [y classify] == OrgApacheCommonsMathDfpDfp_INFINITE) {
    if ([y greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
      return y;
    }
    else {
      return [x newInstanceWithOrgApacheCommonsMathDfpDfp:zero];
    }
  }
  if ([x lessThanWithOrgApacheCommonsMathDfpDfp:one] && [y classify] == OrgApacheCommonsMathDfpDfp_INFINITE) {
    if ([y greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
      return [x newInstanceWithOrgApacheCommonsMathDfpDfp:zero];
    }
    else {
      return [x newInstanceWithOrgApacheCommonsMathDfpDfp:OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(y, one)];
    }
  }
  if ([x isEqual:one] && [y classify] == OrgApacheCommonsMathDfpDfp_INFINITE) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([x getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    return [x dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfpMath_POW_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:[x newInstanceWithByte:(jbyte) 1 withByte:OrgApacheCommonsMathDfpDfp_QNAN]];
  }
  if ([x classify] == OrgApacheCommonsMathDfpDfp_INFINITE) {
    if (invert) {
      if ([y classify] == OrgApacheCommonsMathDfpDfp_FINITE && [((OrgApacheCommonsMathDfpDfp *) nil_chk([y rint])) isEqual:y] && ![((OrgApacheCommonsMathDfpDfp *) nil_chk([y remainderWithOrgApacheCommonsMathDfpDfp:two])) isEqual:zero]) {
        if ([y greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
          return [x newInstanceWithOrgApacheCommonsMathDfpDfp:[x newInstanceWithByte:(jbyte) -1 withByte:OrgApacheCommonsMathDfpDfp_INFINITE]];
        }
        else {
          return [x newInstanceWithOrgApacheCommonsMathDfpDfp:[((OrgApacheCommonsMathDfpDfp *) nil_chk(zero)) negate]];
        }
      }
      else {
        if ([y greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
          return [x newInstanceWithOrgApacheCommonsMathDfpDfp:[x newInstanceWithByte:(jbyte) 1 withByte:OrgApacheCommonsMathDfpDfp_INFINITE]];
        }
        else {
          return [x newInstanceWithOrgApacheCommonsMathDfpDfp:zero];
        }
      }
    }
    else {
      if ([y greaterThanWithOrgApacheCommonsMathDfpDfp:zero]) {
        return x;
      }
      else {
        return [x newInstanceWithOrgApacheCommonsMathDfpDfp:zero];
      }
    }
  }
  if (invert && ![((OrgApacheCommonsMathDfpDfp *) nil_chk([y rint])) isEqual:y]) {
    [((OrgApacheCommonsMathDfpDfpField *) nil_chk([x getField])) setIEEEFlagsBitsWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID];
    return [x dotrapWithInt:OrgApacheCommonsMathDfpDfpField_FLAG_INVALID withNSString:OrgApacheCommonsMathDfpDfpMath_POW_TRAP_ withOrgApacheCommonsMathDfpDfp:x withOrgApacheCommonsMathDfpDfp:[x newInstanceWithByte:(jbyte) 1 withByte:OrgApacheCommonsMathDfpDfp_QNAN]];
  }
  OrgApacheCommonsMathDfpDfp *r;
  if ([y lessThanWithOrgApacheCommonsMathDfpDfp:[x newInstanceWithInt:100000000]] && [y greaterThanWithOrgApacheCommonsMathDfpDfp:[x newInstanceWithInt:-100000000]]) {
    OrgApacheCommonsMathDfpDfp *u = [y rint];
    ui = [((OrgApacheCommonsMathDfpDfp *) nil_chk(u)) intValue];
    OrgApacheCommonsMathDfpDfp *v = [y subtractWithId:u];
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(v)) unequalWithOrgApacheCommonsMathDfpDfp:zero]) {
      OrgApacheCommonsMathDfpDfp *a = [v multiplyWithId:OrgApacheCommonsMathDfpDfpMath_logWithOrgApacheCommonsMathDfpDfp_(x)];
      OrgApacheCommonsMathDfpDfp *b = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) divideWithId:[((OrgApacheCommonsMathDfpDfpField *) nil_chk([x getField])) getLn2]])) rint];
      OrgApacheCommonsMathDfpDfp *c = [a subtractWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(b)) multiplyWithId:[((OrgApacheCommonsMathDfpDfpField *) nil_chk([x getField])) getLn2]]];
      r = OrgApacheCommonsMathDfpDfpMath_splitPowWithOrgApacheCommonsMathDfpDfpArray_withInt_(OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfp_(x), ui);
      r = [((OrgApacheCommonsMathDfpDfp *) nil_chk(r)) multiplyWithId:OrgApacheCommonsMathDfpDfpMath_powWithOrgApacheCommonsMathDfpDfp_withInt_(two, [b intValue])];
      r = [((OrgApacheCommonsMathDfpDfp *) nil_chk(r)) multiplyWithId:OrgApacheCommonsMathDfpDfpMath_expWithOrgApacheCommonsMathDfpDfp_(c)];
    }
    else {
      r = OrgApacheCommonsMathDfpDfpMath_splitPowWithOrgApacheCommonsMathDfpDfpArray_withInt_(OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfp_(x), ui);
    }
  }
  else {
    r = OrgApacheCommonsMathDfpDfpMath_expWithOrgApacheCommonsMathDfpDfp_([((OrgApacheCommonsMathDfpDfp *) nil_chk(OrgApacheCommonsMathDfpDfpMath_logWithOrgApacheCommonsMathDfpDfp_(x))) multiplyWithId:y]);
  }
  if (invert) {
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk([y rint])) isEqual:y] && ![((OrgApacheCommonsMathDfpDfp *) nil_chk([y remainderWithOrgApacheCommonsMathDfpDfp:two])) isEqual:zero]) {
      r = [((OrgApacheCommonsMathDfpDfp *) nil_chk(r)) negate];
    }
  }
  return [x newInstanceWithOrgApacheCommonsMathDfpDfp:r];
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_sinInternalWithOrgApacheCommonsMathDfpDfpArray_(IOSObjectArray *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *c = [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(a), 0))) addWithId:IOSObjectArray_Get(a, 1)];
  OrgApacheCommonsMathDfpDfp *y = c;
  c = [((OrgApacheCommonsMathDfpDfp *) nil_chk(c)) multiplyWithId:c];
  OrgApacheCommonsMathDfpDfp *x = y;
  OrgApacheCommonsMathDfpDfp *fact = [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 0))) getOne];
  OrgApacheCommonsMathDfpDfp *py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  for (jint i = 3; i < 90; i += 2) {
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) multiplyWithId:c];
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) negate];
    fact = [((OrgApacheCommonsMathDfpDfp *) nil_chk(fact)) divideWithInt:(i - 1) * i];
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) multiplyWithId:fact]];
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) isEqual:py]) break;
    py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  }
  return y;
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_cosInternalWithOrgApacheCommonsMathDfpDfpArray_(IOSObjectArray *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *one = [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(a), 0))) getOne];
  OrgApacheCommonsMathDfpDfp *x = one;
  OrgApacheCommonsMathDfpDfp *y = one;
  OrgApacheCommonsMathDfpDfp *c = [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(a, 0))) addWithId:IOSObjectArray_Get(a, 1)];
  c = [((OrgApacheCommonsMathDfpDfp *) nil_chk(c)) multiplyWithId:c];
  OrgApacheCommonsMathDfpDfp *fact = one;
  OrgApacheCommonsMathDfpDfp *py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  for (jint i = 2; i < 90; i += 2) {
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) multiplyWithId:c];
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) negate];
    fact = [((OrgApacheCommonsMathDfpDfp *) nil_chk(fact)) divideWithInt:(i - 1) * i];
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) multiplyWithId:fact]];
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) isEqual:py]) {
      break;
    }
    py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  }
  return y;
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_sinWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *pi = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getField])) getPi];
  OrgApacheCommonsMathDfpDfp *zero = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getZero];
  jboolean neg = NO;
  OrgApacheCommonsMathDfpDfp *x = [a remainderWithOrgApacheCommonsMathDfpDfp:[((OrgApacheCommonsMathDfpDfp *) nil_chk(pi)) multiplyWithInt:2]];
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) lessThanWithOrgApacheCommonsMathDfpDfp:zero]) {
    x = [x negate];
    neg = YES;
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) greaterThanWithOrgApacheCommonsMathDfpDfp:[pi divideWithInt:2]]) {
    x = [pi subtractWithId:x];
  }
  OrgApacheCommonsMathDfpDfp *y;
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) lessThanWithOrgApacheCommonsMathDfpDfp:[pi divideWithInt:4]]) {
    IOSObjectArray *c = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
    (void) IOSObjectArray_Set(c, 0, x);
    (void) IOSObjectArray_Set(c, 1, zero);
    y = OrgApacheCommonsMathDfpDfpMath_sinInternalWithOrgApacheCommonsMathDfpDfpArray_(OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfp_(x));
  }
  else {
    IOSObjectArray *c = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
    IOSObjectArray *piSplit = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getPiSplit];
    (void) IOSObjectArray_Set(c, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(piSplit), 0))) divideWithInt:2])) subtractWithId:x]);
    (void) IOSObjectArray_Set(c, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(piSplit, 1))) divideWithInt:2]);
    y = OrgApacheCommonsMathDfpDfpMath_cosInternalWithOrgApacheCommonsMathDfpDfpArray_(c);
  }
  if (neg) {
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) negate];
  }
  return [a newInstanceWithOrgApacheCommonsMathDfpDfp:y];
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_cosWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *pi = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getField])) getPi];
  OrgApacheCommonsMathDfpDfp *zero = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getZero];
  jboolean neg = NO;
  OrgApacheCommonsMathDfpDfp *x = [a remainderWithOrgApacheCommonsMathDfpDfp:[((OrgApacheCommonsMathDfpDfp *) nil_chk(pi)) multiplyWithInt:2]];
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) lessThanWithOrgApacheCommonsMathDfpDfp:zero]) {
    x = [x negate];
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) greaterThanWithOrgApacheCommonsMathDfpDfp:[pi divideWithInt:2]]) {
    x = [pi subtractWithId:x];
    neg = YES;
  }
  OrgApacheCommonsMathDfpDfp *y;
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) lessThanWithOrgApacheCommonsMathDfpDfp:[pi divideWithInt:4]]) {
    IOSObjectArray *c = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
    (void) IOSObjectArray_Set(c, 0, x);
    (void) IOSObjectArray_Set(c, 1, zero);
    y = OrgApacheCommonsMathDfpDfpMath_cosInternalWithOrgApacheCommonsMathDfpDfpArray_(c);
  }
  else {
    IOSObjectArray *c = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
    IOSObjectArray *piSplit = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getPiSplit];
    (void) IOSObjectArray_Set(c, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(piSplit), 0))) divideWithInt:2])) subtractWithId:x]);
    (void) IOSObjectArray_Set(c, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(piSplit, 1))) divideWithInt:2]);
    y = OrgApacheCommonsMathDfpDfpMath_sinInternalWithOrgApacheCommonsMathDfpDfpArray_(c);
  }
  if (neg) {
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) negate];
  }
  return [a newInstanceWithOrgApacheCommonsMathDfpDfp:y];
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_tanWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  return [((OrgApacheCommonsMathDfpDfp *) nil_chk(OrgApacheCommonsMathDfpDfpMath_sinWithOrgApacheCommonsMathDfpDfp_(a))) divideWithId:OrgApacheCommonsMathDfpDfpMath_cosWithOrgApacheCommonsMathDfpDfp_(a)];
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_atanInternalWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *y = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(a);
  OrgApacheCommonsMathDfpDfp *x = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  OrgApacheCommonsMathDfpDfp *py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  for (jint i = 3; i < 90; i += 2) {
    x = [x multiplyWithId:a];
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) multiplyWithId:a];
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) negate];
    y = [y addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) divideWithInt:i]];
    if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) isEqual:py]) {
      break;
    }
    py = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(y);
  }
  return y;
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_atanWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *zero = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getField])) getZero];
  OrgApacheCommonsMathDfpDfp *one = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getOne];
  IOSObjectArray *sqr2Split = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getSqr2Split];
  IOSObjectArray *piSplit = [((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getPiSplit];
  jboolean recp = NO;
  jboolean neg = NO;
  jboolean sub = NO;
  OrgApacheCommonsMathDfpDfp *ty = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(sqr2Split), 0))) subtractWithId:one])) addWithId:IOSObjectArray_Get(sqr2Split, 1)];
  OrgApacheCommonsMathDfpDfp *x = new_OrgApacheCommonsMathDfpDfp_initWithOrgApacheCommonsMathDfpDfp_(a);
  if ([x lessThanWithOrgApacheCommonsMathDfpDfp:zero]) {
    neg = YES;
    x = [x negate];
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) greaterThanWithOrgApacheCommonsMathDfpDfp:one]) {
    recp = YES;
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(one)) divideWithId:x];
  }
  if ([((OrgApacheCommonsMathDfpDfp *) nil_chk(x)) greaterThanWithOrgApacheCommonsMathDfpDfp:ty]) {
    IOSObjectArray *sty = [IOSObjectArray newArrayWithLength:2 type:OrgApacheCommonsMathDfpDfp_class_()];
    sub = YES;
    (void) IOSObjectArray_Set(sty, 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(sqr2Split, 0))) subtractWithId:one]);
    (void) IOSObjectArray_Set(sty, 1, IOSObjectArray_Get(sqr2Split, 1));
    IOSObjectArray *xs = OrgApacheCommonsMathDfpDfpMath_splitWithOrgApacheCommonsMathDfpDfp_(x);
    IOSObjectArray *ds = OrgApacheCommonsMathDfpDfpMath_splitMultWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_(xs, sty);
    (void) IOSObjectArray_Set(nil_chk(ds), 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(ds, 0))) addWithId:one]);
    (void) IOSObjectArray_Set(nil_chk(xs), 0, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(xs, 0))) subtractWithId:IOSObjectArray_Get(sty, 0)]);
    (void) IOSObjectArray_Set(xs, 1, [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(xs, 1))) subtractWithId:IOSObjectArray_Get(sty, 1)]);
    xs = OrgApacheCommonsMathDfpDfpMath_splitDivWithOrgApacheCommonsMathDfpDfpArray_withOrgApacheCommonsMathDfpDfpArray_(xs, ds);
    x = [((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(xs), 0))) addWithId:IOSObjectArray_Get(xs, 1)];
  }
  OrgApacheCommonsMathDfpDfp *y = OrgApacheCommonsMathDfpDfpMath_atanInternalWithOrgApacheCommonsMathDfpDfp_(x);
  if (sub) {
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(piSplit), 0))) divideWithInt:8]])) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(piSplit, 1))) divideWithInt:8]];
  }
  if (recp) {
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(nil_chk(piSplit), 0))) divideWithInt:2])) subtractWithId:y])) addWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk(IOSObjectArray_Get(piSplit, 1))) divideWithInt:2]];
  }
  if (neg) {
    y = [((OrgApacheCommonsMathDfpDfp *) nil_chk(y)) negate];
  }
  return [a newInstanceWithOrgApacheCommonsMathDfpDfp:y];
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_asinWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  return OrgApacheCommonsMathDfpDfpMath_atanWithOrgApacheCommonsMathDfpDfp_([a divideWithId:[((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getOne])) subtractWithId:[a multiplyWithId:a]])) sqrt]]);
}

OrgApacheCommonsMathDfpDfp *OrgApacheCommonsMathDfpDfpMath_acosWithOrgApacheCommonsMathDfpDfp_(OrgApacheCommonsMathDfpDfp *a) {
  OrgApacheCommonsMathDfpDfpMath_initialize();
  OrgApacheCommonsMathDfpDfp *result;
  jboolean negative = NO;
  if ([a lessThanWithOrgApacheCommonsMathDfpDfp:[((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getZero]]) {
    negative = YES;
  }
  a = OrgApacheCommonsMathDfpDfp_copysignWithOrgApacheCommonsMathDfpDfp_withOrgApacheCommonsMathDfpDfp_(a, [a getOne]);
  result = OrgApacheCommonsMathDfpDfpMath_atanWithOrgApacheCommonsMathDfpDfp_([((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfp *) nil_chk(a)) getOne])) subtractWithId:[a multiplyWithId:a]])) sqrt])) divideWithId:a]);
  if (negative) {
    result = [((OrgApacheCommonsMathDfpDfp *) nil_chk([((OrgApacheCommonsMathDfpDfpField *) nil_chk([a getField])) getPi])) subtractWithId:result];
  }
  return [a newInstanceWithOrgApacheCommonsMathDfpDfp:result];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDfpDfpMath)
