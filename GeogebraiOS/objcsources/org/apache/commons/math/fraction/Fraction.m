//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/fraction/Fraction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/NullArgumentException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/fraction/Fraction.h"
#include "org/apache/commons/math/fraction/FractionConversionException.h"
#include "org/apache/commons/math/fraction/FractionField.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

#define OrgApacheCommonsMathFractionFraction_serialVersionUID 3698073679419233275LL

@interface OrgApacheCommonsMathFractionFraction () {
 @public
  jint denominator_;
  jint numerator_;
}

- (instancetype)initWithDouble:(jdouble)value
                    withDouble:(jdouble)epsilon
                       withInt:(jint)maxDenominator
                       withInt:(jint)maxIterations;

- (OrgApacheCommonsMathFractionFraction *)addSubWithOrgApacheCommonsMathFractionFraction:(OrgApacheCommonsMathFractionFraction *)fraction
                                                                             withBoolean:(jboolean)isAdd;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathFractionFraction, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_withInt_(OrgApacheCommonsMathFractionFraction *self, jdouble value, jdouble epsilon, jint maxDenominator, jint maxIterations);

__attribute__((unused)) static OrgApacheCommonsMathFractionFraction *new_OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_withInt_(jdouble value, jdouble epsilon, jint maxDenominator, jint maxIterations) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_addSubWithOrgApacheCommonsMathFractionFraction_withBoolean_(OrgApacheCommonsMathFractionFraction *self, OrgApacheCommonsMathFractionFraction *fraction, jboolean isAdd);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathFractionFraction)

OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_TWO_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_ONE_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_ZERO_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_FOUR_FIFTHS_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_ONE_FIFTH_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_ONE_HALF_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_ONE_QUARTER_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_ONE_THIRD_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_THREE_FIFTHS_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_THREE_QUARTERS_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_TWO_FIFTHS_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_TWO_QUARTERS_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_TWO_THIRDS_;
OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_MINUS_ONE_;

@implementation OrgApacheCommonsMathFractionFraction

- (instancetype)initWithDouble:(jdouble)value {
  OrgApacheCommonsMathFractionFraction_initWithDouble_(self, value);
  return self;
}

- (instancetype)initWithDouble:(jdouble)value
                    withDouble:(jdouble)epsilon
                       withInt:(jint)maxIterations {
  OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_(self, value, epsilon, maxIterations);
  return self;
}

- (instancetype)initWithDouble:(jdouble)value
                       withInt:(jint)maxDenominator {
  OrgApacheCommonsMathFractionFraction_initWithDouble_withInt_(self, value, maxDenominator);
  return self;
}

- (instancetype)initWithDouble:(jdouble)value
                    withDouble:(jdouble)epsilon
                       withInt:(jint)maxDenominator
                       withInt:(jint)maxIterations {
  OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_withInt_(self, value, epsilon, maxDenominator, maxIterations);
  return self;
}

- (instancetype)initWithInt:(jint)num {
  OrgApacheCommonsMathFractionFraction_initWithInt_(self, num);
  return self;
}

- (instancetype)initWithInt:(jint)num
                    withInt:(jint)den {
  OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(self, num, den);
  return self;
}

- (OrgApacheCommonsMathFractionFraction *)abs {
  OrgApacheCommonsMathFractionFraction *ret;
  if (numerator_ >= 0) {
    ret = self;
  }
  else {
    ret = [self negate];
  }
  return ret;
}

- (jint)compareToWithId:(OrgApacheCommonsMathFractionFraction *)object {
  (void) check_class_cast(object, [OrgApacheCommonsMathFractionFraction class]);
  jlong nOd = ((jlong) numerator_) * ((OrgApacheCommonsMathFractionFraction *) nil_chk(object))->denominator_;
  jlong dOn = ((jlong) denominator_) * object->numerator_;
  return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
}

- (jdouble)doubleValue {
  return (jdouble) numerator_ / (jdouble) denominator_;
}

- (jboolean)isEqual:(id)other {
  if (self == other) {
    return YES;
  }
  if ([other isKindOfClass:[OrgApacheCommonsMathFractionFraction class]]) {
    OrgApacheCommonsMathFractionFraction *rhs = (OrgApacheCommonsMathFractionFraction *) check_class_cast(other, [OrgApacheCommonsMathFractionFraction class]);
    return (numerator_ == ((OrgApacheCommonsMathFractionFraction *) nil_chk(rhs))->numerator_) && (denominator_ == rhs->denominator_);
  }
  return NO;
}

- (jfloat)floatValue {
  return (jfloat) [self doubleValue];
}

- (jint)getDenominator {
  return denominator_;
}

- (jint)getNumerator {
  return numerator_;
}

- (NSUInteger)hash {
  return 37 * (37 * 17 + numerator_) + denominator_;
}

- (jint)intValue {
  return J2ObjCFpToInt([self doubleValue]);
}

- (jlong)longLongValue {
  return J2ObjCFpToLong([self doubleValue]);
}

- (OrgApacheCommonsMathFractionFraction *)negate {
  if (numerator_ == JavaLangInteger_MIN_VALUE) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OVERFLOW_IN_FRACTION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numerator_), JavaLangInteger_valueOfWithInt_(denominator_) } count:2 type:NSObject_class_()]);
  }
  return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(-numerator_, denominator_);
}

- (OrgApacheCommonsMathFractionFraction *)reciprocal {
  return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(denominator_, numerator_);
}

- (OrgApacheCommonsMathFractionFraction *)addWithId:(OrgApacheCommonsMathFractionFraction *)fraction {
  return OrgApacheCommonsMathFractionFraction_addSubWithOrgApacheCommonsMathFractionFraction_withBoolean_(self, fraction, YES);
}

- (OrgApacheCommonsMathFractionFraction *)addWithInt:(jint)i {
  return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(numerator_ + i * denominator_, denominator_);
}

- (OrgApacheCommonsMathFractionFraction *)subtractWithId:(OrgApacheCommonsMathFractionFraction *)fraction {
  return OrgApacheCommonsMathFractionFraction_addSubWithOrgApacheCommonsMathFractionFraction_withBoolean_(self, fraction, NO);
}

- (OrgApacheCommonsMathFractionFraction *)subtractWithInt:(jint)i {
  return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(numerator_ - i * denominator_, denominator_);
}

- (OrgApacheCommonsMathFractionFraction *)addSubWithOrgApacheCommonsMathFractionFraction:(OrgApacheCommonsMathFractionFraction *)fraction
                                                                             withBoolean:(jboolean)isAdd {
  return OrgApacheCommonsMathFractionFraction_addSubWithOrgApacheCommonsMathFractionFraction_withBoolean_(self, fraction, isAdd);
}

- (OrgApacheCommonsMathFractionFraction *)multiplyWithId:(OrgApacheCommonsMathFractionFraction *)fraction {
  if (fraction == nil) {
    @throw new_OrgApacheCommonsMathExceptionNullArgumentException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FRACTION());
  }
  if (numerator_ == 0 || ((OrgApacheCommonsMathFractionFraction *) nil_chk(fraction))->numerator_ == 0) {
    return OrgApacheCommonsMathFractionFraction_ZERO_;
  }
  jint d1 = OrgApacheCommonsMathUtilMathUtils_gcdWithInt_withInt_(numerator_, ((OrgApacheCommonsMathFractionFraction *) nil_chk(fraction))->denominator_);
  jint d2 = OrgApacheCommonsMathUtilMathUtils_gcdWithInt_withInt_(fraction->numerator_, denominator_);
  return OrgApacheCommonsMathFractionFraction_getReducedFractionWithInt_withInt_(OrgApacheCommonsMathUtilMathUtils_mulAndCheckWithInt_withInt_(numerator_ / d1, fraction->numerator_ / d2), OrgApacheCommonsMathUtilMathUtils_mulAndCheckWithInt_withInt_(denominator_ / d2, fraction->denominator_ / d1));
}

- (OrgApacheCommonsMathFractionFraction *)multiplyWithInt:(jint)i {
  return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(numerator_ * i, denominator_);
}

- (OrgApacheCommonsMathFractionFraction *)divideWithId:(OrgApacheCommonsMathFractionFraction *)fraction {
  if (fraction == nil) {
    @throw new_OrgApacheCommonsMathExceptionNullArgumentException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FRACTION());
  }
  if (((OrgApacheCommonsMathFractionFraction *) nil_chk(fraction))->numerator_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_ZERO_FRACTION_TO_DIVIDE_BY(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(fraction->numerator_), JavaLangInteger_valueOfWithInt_(fraction->denominator_) } count:2 type:NSObject_class_()]);
  }
  return [self multiplyWithId:[fraction reciprocal]];
}

- (OrgApacheCommonsMathFractionFraction *)divideWithInt:(jint)i {
  return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(numerator_, denominator_ * i);
}

+ (OrgApacheCommonsMathFractionFraction *)getReducedFractionWithInt:(jint)numerator
                                                            withInt:(jint)denominator {
  return OrgApacheCommonsMathFractionFraction_getReducedFractionWithInt_withInt_(numerator, denominator);
}

- (NSString *)description {
  NSString *str = nil;
  if (denominator_ == 1) {
    str = JavaLangInteger_toStringWithInt_(numerator_);
  }
  else if (numerator_ == 0) {
    str = @"0";
  }
  else {
    str = JreStrcat("I$I", numerator_, @" / ", denominator_);
  }
  return str;
}

- (OrgApacheCommonsMathFractionFractionField *)getField {
  return OrgApacheCommonsMathFractionFractionField_getInstance();
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathFractionFraction class]) {
    OrgApacheCommonsMathFractionFraction_TWO_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(2, 1);
    OrgApacheCommonsMathFractionFraction_ONE_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(1, 1);
    OrgApacheCommonsMathFractionFraction_ZERO_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(0, 1);
    OrgApacheCommonsMathFractionFraction_FOUR_FIFTHS_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(4, 5);
    OrgApacheCommonsMathFractionFraction_ONE_FIFTH_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(1, 5);
    OrgApacheCommonsMathFractionFraction_ONE_HALF_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(1, 2);
    OrgApacheCommonsMathFractionFraction_ONE_QUARTER_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(1, 4);
    OrgApacheCommonsMathFractionFraction_ONE_THIRD_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(1, 3);
    OrgApacheCommonsMathFractionFraction_THREE_FIFTHS_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(3, 5);
    OrgApacheCommonsMathFractionFraction_THREE_QUARTERS_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(3, 4);
    OrgApacheCommonsMathFractionFraction_TWO_FIFTHS_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(2, 5);
    OrgApacheCommonsMathFractionFraction_TWO_QUARTERS_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(2, 4);
    OrgApacheCommonsMathFractionFraction_TWO_THIRDS_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(2, 3);
    OrgApacheCommonsMathFractionFraction_MINUS_ONE_ = new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(-1, 1);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathFractionFraction)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:", "Fraction", NULL, 0x1, "Lorg.apache.commons.math.fraction.FractionConversionException;", NULL },
    { "initWithDouble:withDouble:withInt:", "Fraction", NULL, 0x1, "Lorg.apache.commons.math.fraction.FractionConversionException;", NULL },
    { "initWithDouble:withInt:", "Fraction", NULL, 0x1, "Lorg.apache.commons.math.fraction.FractionConversionException;", NULL },
    { "initWithDouble:withDouble:withInt:withInt:", "Fraction", NULL, 0x2, "Lorg.apache.commons.math.fraction.FractionConversionException;", NULL },
    { "initWithInt:", "Fraction", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "Fraction", NULL, 0x1, NULL, NULL },
    { "abs", NULL, "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "floatValue", NULL, "F", 0x1, NULL, NULL },
    { "getDenominator", NULL, "I", 0x1, NULL, NULL },
    { "getNumerator", NULL, "I", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
    { "negate", NULL, "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "reciprocal", NULL, "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "addWithId:", "add", "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "addWithInt:", "add", "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "subtractWithId:", "subtract", "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "subtractWithInt:", "subtract", "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "addSubWithOrgApacheCommonsMathFractionFraction:withBoolean:", "addSub", "Lorg.apache.commons.math.fraction.Fraction;", 0x2, NULL, NULL },
    { "multiplyWithId:", "multiply", "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "multiplyWithInt:", "multiply", "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "divideWithId:", "divide", "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "divideWithInt:", "divide", "Lorg.apache.commons.math.fraction.Fraction;", 0x1, NULL, NULL },
    { "getReducedFractionWithInt:withInt:", "getReducedFraction", "Lorg.apache.commons.math.fraction.Fraction;", 0x9, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getField", NULL, "Lorg.apache.commons.math.fraction.FractionField;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TWO_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_TWO_, NULL,  },
    { "ONE_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_ONE_, NULL,  },
    { "ZERO_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_ZERO_, NULL,  },
    { "FOUR_FIFTHS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_FOUR_FIFTHS_, NULL,  },
    { "ONE_FIFTH_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_ONE_FIFTH_, NULL,  },
    { "ONE_HALF_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_ONE_HALF_, NULL,  },
    { "ONE_QUARTER_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_ONE_QUARTER_, NULL,  },
    { "ONE_THIRD_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_ONE_THIRD_, NULL,  },
    { "THREE_FIFTHS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_THREE_FIFTHS_, NULL,  },
    { "THREE_QUARTERS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_THREE_QUARTERS_, NULL,  },
    { "TWO_FIFTHS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_TWO_FIFTHS_, NULL,  },
    { "TWO_QUARTERS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_TWO_QUARTERS_, NULL,  },
    { "TWO_THIRDS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_TWO_THIRDS_, NULL,  },
    { "MINUS_ONE_", NULL, 0x19, "Lorg.apache.commons.math.fraction.Fraction;", &OrgApacheCommonsMathFractionFraction_MINUS_ONE_, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathFractionFraction_serialVersionUID },
    { "denominator_", NULL, 0x12, "I", NULL, NULL,  },
    { "numerator_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathFractionFraction = { 2, "Fraction", "org.apache.commons.math.fraction", NULL, 0x1, 30, methods, 17, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Number;Lorg/apache/commons/math/FieldElement<Lorg/apache/commons/math/fraction/Fraction;>;Ljava/lang/Comparable<Lorg/apache/commons/math/fraction/Fraction;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsMathFractionFraction;
}

@end

void OrgApacheCommonsMathFractionFraction_initWithDouble_(OrgApacheCommonsMathFractionFraction *self, jdouble value) {
  (void) OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_(self, value, 1.0e-5, 100);
}

OrgApacheCommonsMathFractionFraction *new_OrgApacheCommonsMathFractionFraction_initWithDouble_(jdouble value) {
  OrgApacheCommonsMathFractionFraction *self = [OrgApacheCommonsMathFractionFraction alloc];
  OrgApacheCommonsMathFractionFraction_initWithDouble_(self, value);
  return self;
}

void OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_(OrgApacheCommonsMathFractionFraction *self, jdouble value, jdouble epsilon, jint maxIterations) {
  (void) OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_withInt_(self, value, epsilon, JavaLangInteger_MAX_VALUE, maxIterations);
}

OrgApacheCommonsMathFractionFraction *new_OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_(jdouble value, jdouble epsilon, jint maxIterations) {
  OrgApacheCommonsMathFractionFraction *self = [OrgApacheCommonsMathFractionFraction alloc];
  OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_(self, value, epsilon, maxIterations);
  return self;
}

void OrgApacheCommonsMathFractionFraction_initWithDouble_withInt_(OrgApacheCommonsMathFractionFraction *self, jdouble value, jint maxDenominator) {
  (void) OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_withInt_(self, value, 0, maxDenominator, 100);
}

OrgApacheCommonsMathFractionFraction *new_OrgApacheCommonsMathFractionFraction_initWithDouble_withInt_(jdouble value, jint maxDenominator) {
  OrgApacheCommonsMathFractionFraction *self = [OrgApacheCommonsMathFractionFraction alloc];
  OrgApacheCommonsMathFractionFraction_initWithDouble_withInt_(self, value, maxDenominator);
  return self;
}

void OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_withInt_(OrgApacheCommonsMathFractionFraction *self, jdouble value, jdouble epsilon, jint maxDenominator, jint maxIterations) {
  (void) NSNumber_init(self);
  jlong overflow = JavaLangInteger_MAX_VALUE;
  jdouble r0 = value;
  jlong a0 = J2ObjCFpToLong(OrgApacheCommonsMathUtilFastMath_floorWithDouble_(r0));
  if (a0 > overflow) {
    @throw new_OrgApacheCommonsMathFractionFractionConversionException_initWithDouble_withLong_withLong_(value, a0, 1l);
  }
  if (OrgApacheCommonsMathUtilFastMath_absWithDouble_(a0 - value) < epsilon) {
    self->numerator_ = (jint) a0;
    self->denominator_ = 1;
    return;
  }
  jlong p0 = 1;
  jlong q0 = 0;
  jlong p1 = a0;
  jlong q1 = 1;
  jlong p2 = 0;
  jlong q2 = 1;
  jint n = 0;
  jboolean stop = NO;
  do {
    ++n;
    jdouble r1 = 1.0 / (r0 - a0);
    jlong a1 = J2ObjCFpToLong(OrgApacheCommonsMathUtilFastMath_floorWithDouble_(r1));
    p2 = (a1 * p1) + p0;
    q2 = (a1 * q1) + q0;
    if ((p2 > overflow) || (q2 > overflow)) {
      @throw new_OrgApacheCommonsMathFractionFractionConversionException_initWithDouble_withLong_withLong_(value, p2, q2);
    }
    jdouble convergent = (jdouble) p2 / (jdouble) q2;
    if (n < maxIterations && OrgApacheCommonsMathUtilFastMath_absWithDouble_(convergent - value) > epsilon && q2 < maxDenominator) {
      p0 = p1;
      p1 = p2;
      q0 = q1;
      q1 = q2;
      a0 = a1;
      r0 = r1;
    }
    else {
      stop = YES;
    }
  }
  while (!stop);
  if (n >= maxIterations) {
    @throw new_OrgApacheCommonsMathFractionFractionConversionException_initWithDouble_withInt_(value, maxIterations);
  }
  if (q2 < maxDenominator) {
    self->numerator_ = (jint) p2;
    self->denominator_ = (jint) q2;
  }
  else {
    self->numerator_ = (jint) p1;
    self->denominator_ = (jint) q1;
  }
}

OrgApacheCommonsMathFractionFraction *new_OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_withInt_(jdouble value, jdouble epsilon, jint maxDenominator, jint maxIterations) {
  OrgApacheCommonsMathFractionFraction *self = [OrgApacheCommonsMathFractionFraction alloc];
  OrgApacheCommonsMathFractionFraction_initWithDouble_withDouble_withInt_withInt_(self, value, epsilon, maxDenominator, maxIterations);
  return self;
}

void OrgApacheCommonsMathFractionFraction_initWithInt_(OrgApacheCommonsMathFractionFraction *self, jint num) {
  (void) OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(self, num, 1);
}

OrgApacheCommonsMathFractionFraction *new_OrgApacheCommonsMathFractionFraction_initWithInt_(jint num) {
  OrgApacheCommonsMathFractionFraction *self = [OrgApacheCommonsMathFractionFraction alloc];
  OrgApacheCommonsMathFractionFraction_initWithInt_(self, num);
  return self;
}

void OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(OrgApacheCommonsMathFractionFraction *self, jint num, jint den) {
  (void) NSNumber_init(self);
  if (den == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_ZERO_DENOMINATOR_IN_FRACTION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(num), JavaLangInteger_valueOfWithInt_(den) } count:2 type:NSObject_class_()]);
  }
  if (den < 0) {
    if (num == JavaLangInteger_MIN_VALUE || den == JavaLangInteger_MIN_VALUE) {
      @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OVERFLOW_IN_FRACTION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(num), JavaLangInteger_valueOfWithInt_(den) } count:2 type:NSObject_class_()]);
    }
    num = -num;
    den = -den;
  }
  jint d = OrgApacheCommonsMathUtilMathUtils_gcdWithInt_withInt_(num, den);
  if (d > 1) {
    num /= d;
    den /= d;
  }
  if (den < 0) {
    num = -num;
    den = -den;
  }
  self->numerator_ = num;
  self->denominator_ = den;
}

OrgApacheCommonsMathFractionFraction *new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(jint num, jint den) {
  OrgApacheCommonsMathFractionFraction *self = [OrgApacheCommonsMathFractionFraction alloc];
  OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(self, num, den);
  return self;
}

OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_addSubWithOrgApacheCommonsMathFractionFraction_withBoolean_(OrgApacheCommonsMathFractionFraction *self, OrgApacheCommonsMathFractionFraction *fraction, jboolean isAdd) {
  if (fraction == nil) {
    @throw new_OrgApacheCommonsMathExceptionNullArgumentException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FRACTION());
  }
  if (self->numerator_ == 0) {
    return isAdd ? fraction : [((OrgApacheCommonsMathFractionFraction *) nil_chk(fraction)) negate];
  }
  if (((OrgApacheCommonsMathFractionFraction *) nil_chk(fraction))->numerator_ == 0) {
    return self;
  }
  jint d1 = OrgApacheCommonsMathUtilMathUtils_gcdWithInt_withInt_(self->denominator_, fraction->denominator_);
  if (d1 == 1) {
    jint uvp = OrgApacheCommonsMathUtilMathUtils_mulAndCheckWithInt_withInt_(self->numerator_, fraction->denominator_);
    jint upv = OrgApacheCommonsMathUtilMathUtils_mulAndCheckWithInt_withInt_(fraction->numerator_, self->denominator_);
    return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(isAdd ? OrgApacheCommonsMathUtilMathUtils_addAndCheckWithInt_withInt_(uvp, upv) : OrgApacheCommonsMathUtilMathUtils_subAndCheckWithInt_withInt_(uvp, upv), OrgApacheCommonsMathUtilMathUtils_mulAndCheckWithInt_withInt_(self->denominator_, fraction->denominator_));
  }
  JavaMathBigInteger *uvp = [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(self->numerator_))) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(fraction->denominator_ / d1)];
  JavaMathBigInteger *upv = [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(fraction->numerator_))) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(self->denominator_ / d1)];
  JavaMathBigInteger *t = isAdd ? [((JavaMathBigInteger *) nil_chk(uvp)) addWithJavaMathBigInteger:upv] : [((JavaMathBigInteger *) nil_chk(uvp)) subtractWithJavaMathBigInteger:upv];
  jint tmodd1 = [((JavaMathBigInteger *) nil_chk([t modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(d1)])) intValue];
  jint d2 = (tmodd1 == 0) ? d1 : OrgApacheCommonsMathUtilMathUtils_gcdWithInt_withInt_(tmodd1, d1);
  JavaMathBigInteger *w = [t divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(d2)];
  if ([((JavaMathBigInteger *) nil_chk(w)) bitLength] > 31) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NUMERATOR_OVERFLOW_AFTER_MULTIPLY(), [IOSObjectArray newArrayWithObjects:(id[]){ w } count:1 type:NSObject_class_()]);
  }
  return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_([w intValue], OrgApacheCommonsMathUtilMathUtils_mulAndCheckWithInt_withInt_(self->denominator_ / d1, fraction->denominator_ / d2));
}

OrgApacheCommonsMathFractionFraction *OrgApacheCommonsMathFractionFraction_getReducedFractionWithInt_withInt_(jint numerator, jint denominator) {
  OrgApacheCommonsMathFractionFraction_initialize();
  if (denominator == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_ZERO_DENOMINATOR_IN_FRACTION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numerator), JavaLangInteger_valueOfWithInt_(denominator) } count:2 type:NSObject_class_()]);
  }
  if (numerator == 0) {
    return OrgApacheCommonsMathFractionFraction_ZERO_;
  }
  if (denominator == JavaLangInteger_MIN_VALUE && (numerator & 1) == 0) {
    numerator /= 2;
    denominator /= 2;
  }
  if (denominator < 0) {
    if (numerator == JavaLangInteger_MIN_VALUE || denominator == JavaLangInteger_MIN_VALUE) {
      @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OVERFLOW_IN_FRACTION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numerator), JavaLangInteger_valueOfWithInt_(denominator) } count:2 type:NSObject_class_()]);
    }
    numerator = -numerator;
    denominator = -denominator;
  }
  jint gcd = OrgApacheCommonsMathUtilMathUtils_gcdWithInt_withInt_(numerator, denominator);
  numerator /= gcd;
  denominator /= gcd;
  return new_OrgApacheCommonsMathFractionFraction_initWithInt_withInt_(numerator, denominator);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathFractionFraction)
