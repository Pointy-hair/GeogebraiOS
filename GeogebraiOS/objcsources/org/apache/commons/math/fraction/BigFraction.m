//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/fraction/BigFraction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/fraction/BigFraction.h"
#include "org/apache/commons/math/fraction/BigFractionField.h"
#include "org/apache/commons/math/fraction/FractionConversionException.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

#define OrgApacheCommonsMathFractionBigFraction_serialVersionUID -5630213147331578515LL

@interface OrgApacheCommonsMathFractionBigFraction () {
 @public
  JavaMathBigInteger *numerator_;
  JavaMathBigInteger *denominator_;
}

- (instancetype)initWithDouble:(jdouble)value
                    withDouble:(jdouble)epsilon
                       withInt:(jint)maxDenominator
                       withInt:(jint)maxIterations;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathFractionBigFraction, numerator_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathFractionBigFraction, denominator_, JavaMathBigInteger *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathFractionBigFraction, serialVersionUID, jlong)

static JavaMathBigInteger *OrgApacheCommonsMathFractionBigFraction_ONE_HUNDRED_DOUBLE_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathFractionBigFraction, ONE_HUNDRED_DOUBLE_, JavaMathBigInteger *)

__attribute__((unused)) static void OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_withInt_(OrgApacheCommonsMathFractionBigFraction *self, jdouble value, jdouble epsilon, jint maxDenominator, jint maxIterations);

__attribute__((unused)) static OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_withInt_(jdouble value, jdouble epsilon, jint maxDenominator, jint maxIterations) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathFractionBigFraction)

OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_TWO_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_ONE_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_ZERO_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_MINUS_ONE_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_FOUR_FIFTHS_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_ONE_FIFTH_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_ONE_HALF_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_ONE_QUARTER_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_ONE_THIRD_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_THREE_FIFTHS_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_THREE_QUARTERS_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_TWO_FIFTHS_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_TWO_QUARTERS_;
OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_TWO_THIRDS_;

@implementation OrgApacheCommonsMathFractionBigFraction

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)num {
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_(self, num);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)num
                    withJavaMathBigInteger:(JavaMathBigInteger *)den {
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, num, den);
  return self;
}

- (instancetype)initWithDouble:(jdouble)value {
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_(self, value);
  return self;
}

- (instancetype)initWithDouble:(jdouble)value
                    withDouble:(jdouble)epsilon
                       withInt:(jint)maxIterations {
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_(self, value, epsilon, maxIterations);
  return self;
}

- (instancetype)initWithDouble:(jdouble)value
                    withDouble:(jdouble)epsilon
                       withInt:(jint)maxDenominator
                       withInt:(jint)maxIterations {
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_withInt_(self, value, epsilon, maxDenominator, maxIterations);
  return self;
}

- (instancetype)initWithDouble:(jdouble)value
                       withInt:(jint)maxDenominator {
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_withInt_(self, value, maxDenominator);
  return self;
}

- (instancetype)initWithInt:(jint)num {
  OrgApacheCommonsMathFractionBigFraction_initWithInt_(self, num);
  return self;
}

- (instancetype)initWithInt:(jint)num
                    withInt:(jint)den {
  OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(self, num, den);
  return self;
}

- (instancetype)initWithLong:(jlong)num {
  OrgApacheCommonsMathFractionBigFraction_initWithLong_(self, num);
  return self;
}

- (instancetype)initWithLong:(jlong)num
                    withLong:(jlong)den {
  OrgApacheCommonsMathFractionBigFraction_initWithLong_withLong_(self, num, den);
  return self;
}

+ (OrgApacheCommonsMathFractionBigFraction *)getReducedFractionWithInt:(jint)numerator
                                                               withInt:(jint)denominator {
  return OrgApacheCommonsMathFractionBigFraction_getReducedFractionWithInt_withInt_(numerator, denominator);
}

- (OrgApacheCommonsMathFractionBigFraction *)abs {
  return ([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ZERO_())) compareToWithId:numerator_] <= 0) ? self : [self negate];
}

- (OrgApacheCommonsMathFractionBigFraction *)addWithJavaMathBigInteger:(JavaMathBigInteger *)bg {
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(numerator_)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(denominator_)) multiplyWithJavaMathBigInteger:bg]], denominator_) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)addWithInt:(jint)i {
  return [self addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(i)];
}

- (OrgApacheCommonsMathFractionBigFraction *)addWithLong:(jlong)l {
  return [self addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(l)];
}

- (OrgApacheCommonsMathFractionBigFraction *)addWithId:(OrgApacheCommonsMathFractionBigFraction *)fraction {
  if (fraction == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_([((OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum *) nil_chk(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FRACTION())) getSourceString]) autorelease];
  }
  if ([((OrgApacheCommonsMathFractionBigFraction *) nil_chk(OrgApacheCommonsMathFractionBigFraction_ZERO_)) isEqual:fraction]) {
    return self;
  }
  JavaMathBigInteger *num = nil;
  JavaMathBigInteger *den = nil;
  if ([((JavaMathBigInteger *) nil_chk(denominator_)) isEqual:((OrgApacheCommonsMathFractionBigFraction *) nil_chk(fraction))->denominator_]) {
    num = [((JavaMathBigInteger *) nil_chk(numerator_)) addWithJavaMathBigInteger:fraction->numerator_];
    den = denominator_;
  }
  else {
    num = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(numerator_)) multiplyWithJavaMathBigInteger:fraction->denominator_]))) addWithJavaMathBigInteger:[(fraction->numerator_) multiplyWithJavaMathBigInteger:denominator_]];
    den = [denominator_ multiplyWithJavaMathBigInteger:fraction->denominator_];
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(num, den) autorelease];
}

- (JavaMathBigDecimal *)bigDecimalValue {
  return [((JavaMathBigDecimal *) [new_JavaMathBigDecimal_initWithJavaMathBigInteger_(numerator_) autorelease]) divideWithJavaMathBigDecimal:[new_JavaMathBigDecimal_initWithJavaMathBigInteger_(denominator_) autorelease]];
}

- (JavaMathBigDecimal *)bigDecimalValueWithInt:(jint)roundingMode {
  return [((JavaMathBigDecimal *) [new_JavaMathBigDecimal_initWithJavaMathBigInteger_(numerator_) autorelease]) divideWithJavaMathBigDecimal:[new_JavaMathBigDecimal_initWithJavaMathBigInteger_(denominator_) autorelease] withInt:roundingMode];
}

- (JavaMathBigDecimal *)bigDecimalValueWithInt:(jint)scale_
                                       withInt:(jint)roundingMode {
  return [((JavaMathBigDecimal *) [new_JavaMathBigDecimal_initWithJavaMathBigInteger_(numerator_) autorelease]) divideWithJavaMathBigDecimal:[new_JavaMathBigDecimal_initWithJavaMathBigInteger_(denominator_) autorelease] withInt:scale_ withInt:roundingMode];
}

- (jint)compareToWithId:(OrgApacheCommonsMathFractionBigFraction *)object {
  check_class_cast(object, [OrgApacheCommonsMathFractionBigFraction class]);
  JavaMathBigInteger *nOd = [((JavaMathBigInteger *) nil_chk(numerator_)) multiplyWithJavaMathBigInteger:((OrgApacheCommonsMathFractionBigFraction *) nil_chk(object))->denominator_];
  JavaMathBigInteger *dOn = [((JavaMathBigInteger *) nil_chk(denominator_)) multiplyWithJavaMathBigInteger:object->numerator_];
  return [((JavaMathBigInteger *) nil_chk(nOd)) compareToWithId:dOn];
}

- (OrgApacheCommonsMathFractionBigFraction *)divideWithJavaMathBigInteger:(JavaMathBigInteger *)bg {
  if ([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ZERO_())) isEqual:bg]) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_ZERO_DENOMINATOR(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(numerator_, [((JavaMathBigInteger *) nil_chk(denominator_)) multiplyWithJavaMathBigInteger:bg]) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)divideWithInt:(jint)i {
  return [self divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(i)];
}

- (OrgApacheCommonsMathFractionBigFraction *)divideWithLong:(jlong)l {
  return [self divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(l)];
}

- (OrgApacheCommonsMathFractionBigFraction *)divideWithId:(OrgApacheCommonsMathFractionBigFraction *)fraction {
  if (fraction == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_([((OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum *) nil_chk(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FRACTION())) getSourceString]) autorelease];
  }
  if ([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ZERO_())) isEqual:((OrgApacheCommonsMathFractionBigFraction *) nil_chk(fraction))->numerator_]) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_ZERO_DENOMINATOR(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  return [self multiplyWithId:[fraction reciprocal]];
}

- (jdouble)doubleValue {
  return [((JavaMathBigInteger *) nil_chk(numerator_)) doubleValue] / [((JavaMathBigInteger *) nil_chk(denominator_)) doubleValue];
}

- (jboolean)isEqual:(id)other {
  jboolean ret = NO;
  if (self == other) {
    ret = YES;
  }
  else if ([other isKindOfClass:[OrgApacheCommonsMathFractionBigFraction class]]) {
    OrgApacheCommonsMathFractionBigFraction *rhs = [((OrgApacheCommonsMathFractionBigFraction *) nil_chk(((OrgApacheCommonsMathFractionBigFraction *) check_class_cast(other, [OrgApacheCommonsMathFractionBigFraction class])))) reduce];
    OrgApacheCommonsMathFractionBigFraction *thisOne = [self reduce];
    ret = ([((JavaMathBigInteger *) nil_chk(((OrgApacheCommonsMathFractionBigFraction *) nil_chk(thisOne))->numerator_)) isEqual:((OrgApacheCommonsMathFractionBigFraction *) nil_chk(rhs))->numerator_] && [((JavaMathBigInteger *) nil_chk(thisOne->denominator_)) isEqual:rhs->denominator_]);
  }
  return ret;
}

- (jfloat)floatValue {
  return [((JavaMathBigInteger *) nil_chk(numerator_)) floatValue] / [((JavaMathBigInteger *) nil_chk(denominator_)) floatValue];
}

- (JavaMathBigInteger *)getDenominator {
  return denominator_;
}

- (jint)getDenominatorAsInt {
  return [((JavaMathBigInteger *) nil_chk(denominator_)) intValue];
}

- (jlong)getDenominatorAsLong {
  return [((JavaMathBigInteger *) nil_chk(denominator_)) longLongValue];
}

- (JavaMathBigInteger *)getNumerator {
  return numerator_;
}

- (jint)getNumeratorAsInt {
  return [((JavaMathBigInteger *) nil_chk(numerator_)) intValue];
}

- (jlong)getNumeratorAsLong {
  return [((JavaMathBigInteger *) nil_chk(numerator_)) longLongValue];
}

- (NSUInteger)hash {
  return 37 * (37 * 17 + ((jint) [((JavaMathBigInteger *) nil_chk(numerator_)) hash])) + ((jint) [((JavaMathBigInteger *) nil_chk(denominator_)) hash]);
}

- (jint)intValue {
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(numerator_)) divideWithJavaMathBigInteger:denominator_])) intValue];
}

- (jlong)longLongValue {
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(numerator_)) divideWithJavaMathBigInteger:denominator_])) longLongValue];
}

- (OrgApacheCommonsMathFractionBigFraction *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)bg {
  if (bg == nil) {
    @throw [new_JavaLangNullPointerException_init() autorelease];
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(bg)) multiplyWithJavaMathBigInteger:numerator_], denominator_) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)multiplyWithInt:(jint)i {
  return [self multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(i)];
}

- (OrgApacheCommonsMathFractionBigFraction *)multiplyWithLong:(jlong)l {
  return [self multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(l)];
}

- (OrgApacheCommonsMathFractionBigFraction *)multiplyWithId:(OrgApacheCommonsMathFractionBigFraction *)fraction {
  if (fraction == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_([((OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum *) nil_chk(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FRACTION())) getSourceString]) autorelease];
  }
  if ([((JavaMathBigInteger *) nil_chk(numerator_)) isEqual:JavaMathBigInteger_get_ZERO_()] || [((OrgApacheCommonsMathFractionBigFraction *) nil_chk(fraction))->numerator_ isEqual:JavaMathBigInteger_get_ZERO_()]) {
    return OrgApacheCommonsMathFractionBigFraction_ZERO_;
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_([numerator_ multiplyWithJavaMathBigInteger:((OrgApacheCommonsMathFractionBigFraction *) nil_chk(fraction))->numerator_], [((JavaMathBigInteger *) nil_chk(denominator_)) multiplyWithJavaMathBigInteger:fraction->denominator_]) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)negate {
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(numerator_)) negate], denominator_) autorelease];
}

- (jdouble)percentageValue {
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(numerator_)) divideWithJavaMathBigInteger:denominator_]))) multiplyWithJavaMathBigInteger:OrgApacheCommonsMathFractionBigFraction_ONE_HUNDRED_DOUBLE_])) doubleValue];
}

- (OrgApacheCommonsMathFractionBigFraction *)powWithInt:(jint)exponent {
  if (exponent < 0) {
    return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(denominator_)) powWithInt:-exponent], [((JavaMathBigInteger *) nil_chk(numerator_)) powWithInt:-exponent]) autorelease];
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(numerator_)) powWithInt:exponent], [((JavaMathBigInteger *) nil_chk(denominator_)) powWithInt:exponent]) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)powWithLong:(jlong)exponent {
  if (exponent < 0) {
    return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withLong_(denominator_, -exponent), OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withLong_(numerator_, -exponent)) autorelease];
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withLong_(numerator_, exponent), OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withLong_(denominator_, exponent)) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)powWithJavaMathBigInteger:(JavaMathBigInteger *)exponent {
  if ([((JavaMathBigInteger *) nil_chk(exponent)) compareToWithId:JavaMathBigInteger_get_ZERO_()] < 0) {
    JavaMathBigInteger *eNeg = [exponent negate];
    return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withJavaMathBigInteger_(denominator_, eNeg), OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withJavaMathBigInteger_(numerator_, eNeg)) autorelease];
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withJavaMathBigInteger_(numerator_, exponent), OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withJavaMathBigInteger_(denominator_, exponent)) autorelease];
}

- (jdouble)powWithDouble:(jdouble)exponent {
  return OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_([((JavaMathBigInteger *) nil_chk(numerator_)) doubleValue], exponent) / OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_([((JavaMathBigInteger *) nil_chk(denominator_)) doubleValue], exponent);
}

- (OrgApacheCommonsMathFractionBigFraction *)reciprocal {
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(denominator_, numerator_) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)reduce {
  JavaMathBigInteger *gcd = [((JavaMathBigInteger *) nil_chk(numerator_)) gcdWithJavaMathBigInteger:denominator_];
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_([numerator_ divideWithJavaMathBigInteger:gcd], [((JavaMathBigInteger *) nil_chk(denominator_)) divideWithJavaMathBigInteger:gcd]) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)subtractWithJavaMathBigInteger:(JavaMathBigInteger *)bg {
  if (bg == nil) {
    @throw [new_JavaLangNullPointerException_init() autorelease];
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(numerator_)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(denominator_)) multiplyWithJavaMathBigInteger:bg]], denominator_) autorelease];
}

- (OrgApacheCommonsMathFractionBigFraction *)subtractWithInt:(jint)i {
  return [self subtractWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(i)];
}

- (OrgApacheCommonsMathFractionBigFraction *)subtractWithLong:(jlong)l {
  return [self subtractWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(l)];
}

- (OrgApacheCommonsMathFractionBigFraction *)subtractWithId:(OrgApacheCommonsMathFractionBigFraction *)fraction {
  if (fraction == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_([((OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum *) nil_chk(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FRACTION())) getSourceString]) autorelease];
  }
  if ([((OrgApacheCommonsMathFractionBigFraction *) nil_chk(OrgApacheCommonsMathFractionBigFraction_ZERO_)) isEqual:fraction]) {
    return self;
  }
  JavaMathBigInteger *num = nil;
  JavaMathBigInteger *den = nil;
  if ([((JavaMathBigInteger *) nil_chk(denominator_)) isEqual:((OrgApacheCommonsMathFractionBigFraction *) nil_chk(fraction))->denominator_]) {
    num = [((JavaMathBigInteger *) nil_chk(numerator_)) subtractWithJavaMathBigInteger:fraction->numerator_];
    den = denominator_;
  }
  else {
    num = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(numerator_)) multiplyWithJavaMathBigInteger:fraction->denominator_]))) subtractWithJavaMathBigInteger:[(fraction->numerator_) multiplyWithJavaMathBigInteger:denominator_]];
    den = [denominator_ multiplyWithJavaMathBigInteger:fraction->denominator_];
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(num, den) autorelease];
}

- (NSString *)description {
  NSString *str = nil;
  if ([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ONE_())) isEqual:denominator_]) {
    str = [((JavaMathBigInteger *) nil_chk(numerator_)) description];
  }
  else if ([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ZERO_())) isEqual:numerator_]) {
    str = @"0";
  }
  else {
    str = JreStrcat("@$@", numerator_, @" / ", denominator_);
  }
  return str;
}

- (OrgApacheCommonsMathFractionBigFractionField *)getField {
  return OrgApacheCommonsMathFractionBigFractionField_getInstance();
}

- (void)dealloc {
  RELEASE_(numerator_);
  RELEASE_(denominator_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathFractionBigFraction class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_TWO_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_(2));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_ONE_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_(1));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_ZERO_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_(0));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_MINUS_ONE_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_(-1));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_FOUR_FIFTHS_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(4, 5));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_ONE_FIFTH_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(1, 5));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_ONE_HALF_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(1, 2));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_ONE_QUARTER_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(1, 4));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_ONE_THIRD_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(1, 3));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_THREE_FIFTHS_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(3, 5));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_THREE_QUARTERS_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(3, 4));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_TWO_FIFTHS_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(2, 5));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_TWO_QUARTERS_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(2, 4));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathFractionBigFraction_TWO_THIRDS_, nil, new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(2, 3));
    JreStrongAssign(&OrgApacheCommonsMathFractionBigFraction_ONE_HUNDRED_DOUBLE_, nil, JavaMathBigInteger_valueOfWithLong_(100));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathFractionBigFraction)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigFraction", NULL, 0x1, NULL, NULL },
    { "initWithJavaMathBigInteger:withJavaMathBigInteger:", "BigFraction", NULL, 0x1, NULL, NULL },
    { "initWithDouble:", "BigFraction", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithDouble:withDouble:withInt:", "BigFraction", NULL, 0x1, "Lorg.apache.commons.math.fraction.FractionConversionException;", NULL },
    { "initWithDouble:withDouble:withInt:withInt:", "BigFraction", NULL, 0x2, "Lorg.apache.commons.math.fraction.FractionConversionException;", NULL },
    { "initWithDouble:withInt:", "BigFraction", NULL, 0x1, "Lorg.apache.commons.math.fraction.FractionConversionException;", NULL },
    { "initWithInt:", "BigFraction", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "BigFraction", NULL, 0x1, NULL, NULL },
    { "initWithLong:", "BigFraction", NULL, 0x1, NULL, NULL },
    { "initWithLong:withLong:", "BigFraction", NULL, 0x1, NULL, NULL },
    { "getReducedFractionWithInt:withInt:", "getReducedFraction", "Lorg.apache.commons.math.fraction.BigFraction;", 0x9, NULL, NULL },
    { "abs", NULL, "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "addWithJavaMathBigInteger:", "add", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "addWithInt:", "add", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "addWithLong:", "add", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "addWithId:", "add", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "bigDecimalValue", NULL, "Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "bigDecimalValueWithInt:", "bigDecimalValue", "Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "bigDecimalValueWithInt:withInt:", "bigDecimalValue", "Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "divideWithJavaMathBigInteger:", "divide", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "divideWithInt:", "divide", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "divideWithLong:", "divide", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "divideWithId:", "divide", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "floatValue", NULL, "F", 0x1, NULL, NULL },
    { "getDenominator", NULL, "Ljava.math.BigInteger;", 0x1, NULL, NULL },
    { "getDenominatorAsInt", NULL, "I", 0x1, NULL, NULL },
    { "getDenominatorAsLong", NULL, "J", 0x1, NULL, NULL },
    { "getNumerator", NULL, "Ljava.math.BigInteger;", 0x1, NULL, NULL },
    { "getNumeratorAsInt", NULL, "I", 0x1, NULL, NULL },
    { "getNumeratorAsLong", NULL, "J", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
    { "multiplyWithJavaMathBigInteger:", "multiply", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "multiplyWithInt:", "multiply", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "multiplyWithLong:", "multiply", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "multiplyWithId:", "multiply", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "negate", NULL, "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "percentageValue", NULL, "D", 0x1, NULL, NULL },
    { "powWithInt:", "pow", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "powWithLong:", "pow", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "powWithJavaMathBigInteger:", "pow", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "powWithDouble:", "pow", "D", 0x1, NULL, NULL },
    { "reciprocal", NULL, "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "reduce", NULL, "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "subtractWithJavaMathBigInteger:", "subtract", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "subtractWithInt:", "subtract", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "subtractWithLong:", "subtract", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "subtractWithId:", "subtract", "Lorg.apache.commons.math.fraction.BigFraction;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getField", NULL, "Lorg.apache.commons.math.fraction.BigFractionField;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TWO_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_TWO_, NULL,  },
    { "ONE_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_ONE_, NULL,  },
    { "ZERO_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_ZERO_, NULL,  },
    { "MINUS_ONE_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_MINUS_ONE_, NULL,  },
    { "FOUR_FIFTHS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_FOUR_FIFTHS_, NULL,  },
    { "ONE_FIFTH_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_ONE_FIFTH_, NULL,  },
    { "ONE_HALF_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_ONE_HALF_, NULL,  },
    { "ONE_QUARTER_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_ONE_QUARTER_, NULL,  },
    { "ONE_THIRD_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_ONE_THIRD_, NULL,  },
    { "THREE_FIFTHS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_THREE_FIFTHS_, NULL,  },
    { "THREE_QUARTERS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_THREE_QUARTERS_, NULL,  },
    { "TWO_FIFTHS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_TWO_FIFTHS_, NULL,  },
    { "TWO_QUARTERS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_TWO_QUARTERS_, NULL,  },
    { "TWO_THIRDS_", NULL, 0x19, "Lorg.apache.commons.math.fraction.BigFraction;", &OrgApacheCommonsMathFractionBigFraction_TWO_THIRDS_, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathFractionBigFraction_serialVersionUID },
    { "ONE_HUNDRED_DOUBLE_", NULL, 0x1a, "Ljava.math.BigInteger;", &OrgApacheCommonsMathFractionBigFraction_ONE_HUNDRED_DOUBLE_, NULL,  },
    { "numerator_", NULL, 0x12, "Ljava.math.BigInteger;", NULL, NULL,  },
    { "denominator_", NULL, 0x12, "Ljava.math.BigInteger;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathFractionBigFraction = { 2, "BigFraction", "org.apache.commons.math.fraction", NULL, 0x1, 54, methods, 18, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Number;Lorg/apache/commons/math/FieldElement<Lorg/apache/commons/math/fraction/BigFraction;>;Ljava/lang/Comparable<Lorg/apache/commons/math/fraction/BigFraction;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsMathFractionBigFraction;
}

@end

void OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_(OrgApacheCommonsMathFractionBigFraction *self, JavaMathBigInteger *num) {
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, num, JavaMathBigInteger_get_ONE_());
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_(JavaMathBigInteger *num) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_(self, num);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgApacheCommonsMathFractionBigFraction *self, JavaMathBigInteger *num, JavaMathBigInteger *den) {
  NSNumber_init(self);
  if (num == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_([((OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum *) nil_chk(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NUMERATOR())) getSourceString]) autorelease];
  }
  if (den == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_([((OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum *) nil_chk(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DENOMINATOR())) getSourceString]) autorelease];
  }
  if ([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ZERO_())) isEqual:den]) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_ZERO_DENOMINATOR(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  if ([JavaMathBigInteger_get_ZERO_() isEqual:num]) {
    OrgApacheCommonsMathFractionBigFraction_set_numerator_(self, JavaMathBigInteger_get_ZERO_());
    OrgApacheCommonsMathFractionBigFraction_set_denominator_(self, JavaMathBigInteger_get_ONE_());
  }
  else {
    JavaMathBigInteger *gcd = [((JavaMathBigInteger *) nil_chk(num)) gcdWithJavaMathBigInteger:den];
    if ([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ONE_())) compareToWithId:gcd] < 0) {
      num = [num divideWithJavaMathBigInteger:gcd];
      den = [((JavaMathBigInteger *) nil_chk(den)) divideWithJavaMathBigInteger:gcd];
    }
    if ([JavaMathBigInteger_get_ZERO_() compareToWithId:den] > 0) {
      num = [((JavaMathBigInteger *) nil_chk(num)) negate];
      den = [((JavaMathBigInteger *) nil_chk(den)) negate];
    }
    OrgApacheCommonsMathFractionBigFraction_set_numerator_(self, num);
    OrgApacheCommonsMathFractionBigFraction_set_denominator_(self, den);
  }
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *num, JavaMathBigInteger *den) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, num, den);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithDouble_(OrgApacheCommonsMathFractionBigFraction *self, jdouble value) {
  NSNumber_init(self);
  if (JavaLangDouble_isNaNWithDouble_(value)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NAN_VALUE_CONVERSION(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  if (JavaLangDouble_isInfiniteWithDouble_(value)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INFINITE_VALUE_CONVERSION(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(value);
  jlong sign = bits & -0x7fffffffffffffffLL - 1;
  jlong exponent = bits & (jlong) 0x7ff0000000000000LL;
  jlong m = bits & (jlong) 0x000fffffffffffffLL;
  if (exponent != 0) {
    m |= (jlong) 0x0010000000000000LL;
  }
  if (sign != 0) {
    m = -m;
  }
  jint k = ((jint) (RShift64(exponent, 52))) - 1075;
  while (((m & (jlong) 0x001ffffffffffffeLL) != 0) && ((m & (jint) 0x1) == 0)) {
    m = RShift64(m, 1);
    ++k;
  }
  if (k < 0) {
    OrgApacheCommonsMathFractionBigFraction_set_numerator_(self, JavaMathBigInteger_valueOfWithLong_(m));
    OrgApacheCommonsMathFractionBigFraction_set_denominator_(self, [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ZERO_())) flipBitWithInt:-k]);
  }
  else {
    OrgApacheCommonsMathFractionBigFraction_set_numerator_(self, [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(m))) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_get_ZERO_())) flipBitWithInt:k]]);
    OrgApacheCommonsMathFractionBigFraction_set_denominator_(self, JavaMathBigInteger_get_ONE_());
  }
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithDouble_(jdouble value) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_(self, value);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_(OrgApacheCommonsMathFractionBigFraction *self, jdouble value, jdouble epsilon, jint maxIterations) {
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_withInt_(self, value, epsilon, JavaLangInteger_MAX_VALUE, maxIterations);
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_(jdouble value, jdouble epsilon, jint maxIterations) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_(self, value, epsilon, maxIterations);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_withInt_(OrgApacheCommonsMathFractionBigFraction *self, jdouble value, jdouble epsilon, jint maxDenominator, jint maxIterations) {
  NSNumber_init(self);
  jlong overflow = JavaLangInteger_MAX_VALUE;
  jdouble r0 = value;
  jlong a0 = J2ObjCFpToLong(OrgApacheCommonsMathUtilFastMath_floorWithDouble_(r0));
  if (a0 > overflow) {
    @throw [new_OrgApacheCommonsMathFractionFractionConversionException_initWithDouble_withLong_withLong_(value, a0, 1l) autorelease];
  }
  if (OrgApacheCommonsMathUtilFastMath_absWithDouble_(a0 - value) < epsilon) {
    OrgApacheCommonsMathFractionBigFraction_set_numerator_(self, JavaMathBigInteger_valueOfWithLong_(a0));
    OrgApacheCommonsMathFractionBigFraction_set_denominator_(self, JavaMathBigInteger_get_ONE_());
    return;
  }
  jlong p0 = 1;
  jlong q0 = 0;
  jlong p1 = a0;
  jlong q1 = 1;
  jlong p2 = 0;
  jlong q2 = 1;
  jint n = 0;
  jboolean stop = NO;
  do {
    ++n;
    jdouble r1 = 1.0 / (r0 - a0);
    jlong a1 = J2ObjCFpToLong(OrgApacheCommonsMathUtilFastMath_floorWithDouble_(r1));
    p2 = (a1 * p1) + p0;
    q2 = (a1 * q1) + q0;
    if ((p2 > overflow) || (q2 > overflow)) {
      @throw [new_OrgApacheCommonsMathFractionFractionConversionException_initWithDouble_withLong_withLong_(value, p2, q2) autorelease];
    }
    jdouble convergent = (jdouble) p2 / (jdouble) q2;
    if ((n < maxIterations) && (OrgApacheCommonsMathUtilFastMath_absWithDouble_(convergent - value) > epsilon) && (q2 < maxDenominator)) {
      p0 = p1;
      p1 = p2;
      q0 = q1;
      q1 = q2;
      a0 = a1;
      r0 = r1;
    }
    else {
      stop = YES;
    }
  }
  while (!stop);
  if (n >= maxIterations) {
    @throw [new_OrgApacheCommonsMathFractionFractionConversionException_initWithDouble_withInt_(value, maxIterations) autorelease];
  }
  if (q2 < maxDenominator) {
    OrgApacheCommonsMathFractionBigFraction_set_numerator_(self, JavaMathBigInteger_valueOfWithLong_(p2));
    OrgApacheCommonsMathFractionBigFraction_set_denominator_(self, JavaMathBigInteger_valueOfWithLong_(q2));
  }
  else {
    OrgApacheCommonsMathFractionBigFraction_set_numerator_(self, JavaMathBigInteger_valueOfWithLong_(p1));
    OrgApacheCommonsMathFractionBigFraction_set_denominator_(self, JavaMathBigInteger_valueOfWithLong_(q1));
  }
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_withInt_(jdouble value, jdouble epsilon, jint maxDenominator, jint maxIterations) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_withInt_(self, value, epsilon, maxDenominator, maxIterations);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithDouble_withInt_(OrgApacheCommonsMathFractionBigFraction *self, jdouble value, jint maxDenominator) {
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_withDouble_withInt_withInt_(self, value, 0, maxDenominator, 100);
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithDouble_withInt_(jdouble value, jint maxDenominator) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithDouble_withInt_(self, value, maxDenominator);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithInt_(OrgApacheCommonsMathFractionBigFraction *self, jint num) {
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, JavaMathBigInteger_valueOfWithLong_(num), JavaMathBigInteger_get_ONE_());
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithInt_(jint num) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithInt_(self, num);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(OrgApacheCommonsMathFractionBigFraction *self, jint num, jint den) {
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, JavaMathBigInteger_valueOfWithLong_(num), JavaMathBigInteger_valueOfWithLong_(den));
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(jint num, jint den) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(self, num, den);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithLong_(OrgApacheCommonsMathFractionBigFraction *self, jlong num) {
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, JavaMathBigInteger_valueOfWithLong_(num), JavaMathBigInteger_get_ONE_());
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithLong_(jlong num) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithLong_(self, num);
  return self;
}

void OrgApacheCommonsMathFractionBigFraction_initWithLong_withLong_(OrgApacheCommonsMathFractionBigFraction *self, jlong num, jlong den) {
  OrgApacheCommonsMathFractionBigFraction_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, JavaMathBigInteger_valueOfWithLong_(num), JavaMathBigInteger_valueOfWithLong_(den));
}

OrgApacheCommonsMathFractionBigFraction *new_OrgApacheCommonsMathFractionBigFraction_initWithLong_withLong_(jlong num, jlong den) {
  OrgApacheCommonsMathFractionBigFraction *self = [OrgApacheCommonsMathFractionBigFraction alloc];
  OrgApacheCommonsMathFractionBigFraction_initWithLong_withLong_(self, num, den);
  return self;
}

OrgApacheCommonsMathFractionBigFraction *OrgApacheCommonsMathFractionBigFraction_getReducedFractionWithInt_withInt_(jint numerator, jint denominator) {
  OrgApacheCommonsMathFractionBigFraction_initialize();
  if (numerator == 0) {
    return OrgApacheCommonsMathFractionBigFraction_ZERO_;
  }
  return [new_OrgApacheCommonsMathFractionBigFraction_initWithInt_withInt_(numerator, denominator) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathFractionBigFraction)
