//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/util/CompositeFormat.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/text/FieldPosition.h"
#include "java/text/Format.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParsePosition.h"
#include "java/util/Locale.h"
#include "org/apache/commons/math/util/CompositeFormat.h"

#define OrgApacheCommonsMathUtilCompositeFormat_serialVersionUID 5358685519349262494LL

@interface OrgApacheCommonsMathUtilCompositeFormat ()

- (NSNumber *)parseNumberWithNSString:(NSString *)source
                           withDouble:(jdouble)value
            withJavaTextParsePosition:(JavaTextParsePosition *)pos;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilCompositeFormat, serialVersionUID, jlong)

__attribute__((unused)) static NSNumber *OrgApacheCommonsMathUtilCompositeFormat_parseNumberWithNSString_withDouble_withJavaTextParsePosition_(OrgApacheCommonsMathUtilCompositeFormat *self, NSString *source, jdouble value, JavaTextParsePosition *pos);

@implementation OrgApacheCommonsMathUtilCompositeFormat

+ (JavaTextNumberFormat *)getDefaultNumberFormat {
  return OrgApacheCommonsMathUtilCompositeFormat_getDefaultNumberFormat();
}

+ (JavaTextNumberFormat *)getDefaultNumberFormatWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsMathUtilCompositeFormat_getDefaultNumberFormatWithJavaUtilLocale_(locale);
}

- (void)parseAndIgnoreWhitespaceWithNSString:(NSString *)source
                   withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  [self parseNextCharacterWithNSString:source withJavaTextParsePosition:pos];
  [pos setIndexWithInt:[((JavaTextParsePosition *) nil_chk(pos)) getIndex] - 1];
}

- (jchar)parseNextCharacterWithNSString:(NSString *)source
              withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  jint index = [((JavaTextParsePosition *) nil_chk(pos)) getIndex];
  jint n = ((jint) [((NSString *) nil_chk(source)) length]);
  jchar ret = 0;
  if (index < n) {
    jchar c;
    do {
      c = [source charAtWithInt:index++];
    }
    while (JavaLangCharacter_isWhitespaceWithChar_(c) && index < n);
    [pos setIndexWithInt:index];
    if (index < n) {
      ret = c;
    }
  }
  return ret;
}

- (NSNumber *)parseNumberWithNSString:(NSString *)source
                           withDouble:(jdouble)value
            withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  return OrgApacheCommonsMathUtilCompositeFormat_parseNumberWithNSString_withDouble_withJavaTextParsePosition_(self, source, value, pos);
}

- (NSNumber *)parseNumberWithNSString:(NSString *)source
             withJavaTextNumberFormat:(JavaTextNumberFormat *)format
            withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  jint startIndex = [((JavaTextParsePosition *) nil_chk(pos)) getIndex];
  NSNumber *number = [((JavaTextNumberFormat *) nil_chk(format)) parseWithNSString:source withJavaTextParsePosition:pos];
  jint endIndex = [pos getIndex];
  if (startIndex == endIndex) {
    IOSDoubleArray *special = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangDouble_NaN, JavaLangDouble_POSITIVE_INFINITY, JavaLangDouble_NEGATIVE_INFINITY } count:3];
    for (jint i = 0; i < special->size_; ++i) {
      number = OrgApacheCommonsMathUtilCompositeFormat_parseNumberWithNSString_withDouble_withJavaTextParsePosition_(self, source, IOSDoubleArray_Get(special, i), pos);
      if (number != nil) {
        break;
      }
    }
  }
  return number;
}

- (jboolean)parseFixedstringWithNSString:(NSString *)source
                            withNSString:(NSString *)expected
               withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  jint startIndex = [((JavaTextParsePosition *) nil_chk(pos)) getIndex];
  jint endIndex = startIndex + ((jint) [((NSString *) nil_chk(expected)) length]);
  if ((startIndex >= ((jint) [((NSString *) nil_chk(source)) length])) || (endIndex > ((jint) [source length])) || ([((NSString *) nil_chk([source substring:startIndex endIndex:endIndex])) compareToWithId:expected] != 0)) {
    [pos setIndexWithInt:startIndex];
    [pos setErrorIndexWithInt:startIndex];
    return NO;
  }
  [pos setIndexWithInt:endIndex];
  return YES;
}

- (JavaLangStringBuffer *)formatDoubleWithDouble:(jdouble)value
                        withJavaTextNumberFormat:(JavaTextNumberFormat *)format
                        withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
                       withJavaTextFieldPosition:(JavaTextFieldPosition *)pos {
  if (JavaLangDouble_isNaNWithDouble_(value) || JavaLangDouble_isInfiniteWithDouble_(value)) {
    [((JavaLangStringBuffer *) nil_chk(toAppendTo)) appendWithChar:'('];
    [toAppendTo appendWithDouble:value];
    [toAppendTo appendWithChar:')'];
  }
  else {
    [((JavaTextNumberFormat *) nil_chk(format)) formatWithDouble:value withJavaLangStringBuffer:toAppendTo withJavaTextFieldPosition:pos];
  }
  return toAppendTo;
}

- (instancetype)init {
  OrgApacheCommonsMathUtilCompositeFormat_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDefaultNumberFormat", NULL, "Ljava.text.NumberFormat;", 0xc, NULL, NULL },
    { "getDefaultNumberFormatWithJavaUtilLocale:", "getDefaultNumberFormat", "Ljava.text.NumberFormat;", 0xc, NULL, NULL },
    { "parseAndIgnoreWhitespaceWithNSString:withJavaTextParsePosition:", "parseAndIgnoreWhitespace", "V", 0x4, NULL, NULL },
    { "parseNextCharacterWithNSString:withJavaTextParsePosition:", "parseNextCharacter", "C", 0x4, NULL, NULL },
    { "parseNumberWithNSString:withDouble:withJavaTextParsePosition:", "parseNumber", "Ljava.lang.Number;", 0x2, NULL, NULL },
    { "parseNumberWithNSString:withJavaTextNumberFormat:withJavaTextParsePosition:", "parseNumber", "Ljava.lang.Number;", 0x4, NULL, NULL },
    { "parseFixedstringWithNSString:withNSString:withJavaTextParsePosition:", "parseFixedstring", "Z", 0x4, NULL, NULL },
    { "formatDoubleWithDouble:withJavaTextNumberFormat:withJavaLangStringBuffer:withJavaTextFieldPosition:", "formatDouble", "Ljava.lang.StringBuffer;", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathUtilCompositeFormat_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathUtilCompositeFormat = { 2, "CompositeFormat", "org.apache.commons.math.util", NULL, 0x401, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathUtilCompositeFormat;
}

@end

JavaTextNumberFormat *OrgApacheCommonsMathUtilCompositeFormat_getDefaultNumberFormat() {
  OrgApacheCommonsMathUtilCompositeFormat_initialize();
  return OrgApacheCommonsMathUtilCompositeFormat_getDefaultNumberFormatWithJavaUtilLocale_(JavaUtilLocale_getDefault());
}

JavaTextNumberFormat *OrgApacheCommonsMathUtilCompositeFormat_getDefaultNumberFormatWithJavaUtilLocale_(JavaUtilLocale *locale) {
  OrgApacheCommonsMathUtilCompositeFormat_initialize();
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getInstanceWithJavaUtilLocale_(locale);
  [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:2];
  return nf;
}

NSNumber *OrgApacheCommonsMathUtilCompositeFormat_parseNumberWithNSString_withDouble_withJavaTextParsePosition_(OrgApacheCommonsMathUtilCompositeFormat *self, NSString *source, jdouble value, JavaTextParsePosition *pos) {
  NSNumber *ret = nil;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithChar:'('];
  [sb appendWithDouble:value];
  [sb appendWithChar:')'];
  jint n = [sb length];
  jint startIndex = [((JavaTextParsePosition *) nil_chk(pos)) getIndex];
  jint endIndex = startIndex + n;
  if (endIndex < ((jint) [((NSString *) nil_chk(source)) length])) {
    if ([((NSString *) nil_chk([source substring:startIndex endIndex:endIndex])) compareToWithId:[sb description]] == 0) {
      ret = JavaLangDouble_valueOfWithDouble_(value);
      [pos setIndexWithInt:endIndex];
    }
  }
  return ret;
}

void OrgApacheCommonsMathUtilCompositeFormat_init(OrgApacheCommonsMathUtilCompositeFormat *self) {
  JavaTextFormat_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathUtilCompositeFormat)
