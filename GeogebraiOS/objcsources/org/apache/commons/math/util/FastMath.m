//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/util/FastMath.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/StrictMath.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

#define OrgApacheCommonsMathUtilFastMath_LN_2_A 0.6931470632553101
#define OrgApacheCommonsMathUtilFastMath_LN_2_B 1.1730463525082348E-7
#define OrgApacheCommonsMathUtilFastMath_HEX_40000000 1073741824LL
#define OrgApacheCommonsMathUtilFastMath_MASK_30BITS -1073741824LL
#define OrgApacheCommonsMathUtilFastMath_TWO_POWER_52 4.503599627370496E15

@interface OrgApacheCommonsMathUtilFastMath ()

- (instancetype)init;

+ (jdouble)doubleHighPartWithDouble:(jdouble)d;

+ (jdouble)expWithDouble:(jdouble)x
              withDouble:(jdouble)extra
         withDoubleArray:(IOSDoubleArray *)hiPrec;

+ (jdouble)expm1WithDouble:(jdouble)x
           withDoubleArray:(IOSDoubleArray *)hiPrecOut;

+ (jdouble)slowexpWithDouble:(jdouble)x
             withDoubleArray:(IOSDoubleArray *)result;

+ (void)splitWithDouble:(jdouble)d
        withDoubleArray:(IOSDoubleArray *)split;

+ (void)resplitWithDoubleArray:(IOSDoubleArray *)a;

+ (void)splitMultWithDoubleArray:(IOSDoubleArray *)a
                 withDoubleArray:(IOSDoubleArray *)b
                 withDoubleArray:(IOSDoubleArray *)ans;

+ (void)splitAddWithDoubleArray:(IOSDoubleArray *)a
                withDoubleArray:(IOSDoubleArray *)b
                withDoubleArray:(IOSDoubleArray *)ans;

+ (void)splitReciprocalWithDoubleArray:(IOSDoubleArray *)inArg
                       withDoubleArray:(IOSDoubleArray *)result;

+ (void)quadMultWithDoubleArray:(IOSDoubleArray *)a
                withDoubleArray:(IOSDoubleArray *)b
                withDoubleArray:(IOSDoubleArray *)result;

+ (jdouble)expintWithInt:(jint)p
         withDoubleArray:(IOSDoubleArray *)result;

+ (jdouble)logWithDouble:(jdouble)x
         withDoubleArray:(IOSDoubleArray *)hiPrec;

+ (IOSDoubleArray *)slowLogWithDouble:(jdouble)xi;

+ (jdouble)slowSinWithDouble:(jdouble)x
             withDoubleArray:(IOSDoubleArray *)result;

+ (jdouble)slowCosWithDouble:(jdouble)x
             withDoubleArray:(IOSDoubleArray *)result;

+ (void)buildSinCosTables;

+ (jdouble)polySineWithDouble:(jdouble)x;

+ (jdouble)polyCosineWithDouble:(jdouble)x;

+ (jdouble)sinQWithDouble:(jdouble)xa
               withDouble:(jdouble)xb;

+ (jdouble)cosQWithDouble:(jdouble)xa
               withDouble:(jdouble)xb;

+ (jdouble)tanQWithDouble:(jdouble)xa
               withDouble:(jdouble)xb
              withBoolean:(jboolean)cotanFlag;

+ (void)reducePayneHanekWithDouble:(jdouble)x
                   withDoubleArray:(IOSDoubleArray *)result;

+ (jdouble)atanWithDouble:(jdouble)xa
               withDouble:(jdouble)xb
              withBoolean:(jboolean)leftPlane;

@end

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_A_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, EXP_INT_TABLE_A_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_B_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, EXP_INT_TABLE_B_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_A_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, EXP_FRAC_TABLE_A_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_B_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, EXP_FRAC_TABLE_B_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_FACT_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, FACT_, IOSDoubleArray *)

static IOSObjectArray *OrgApacheCommonsMathUtilFastMath_LN_MANT_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, LN_MANT_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, LN_2_A, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, LN_2_B, jdouble)

static IOSObjectArray *OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, LN_SPLIT_COEF_, IOSObjectArray *)

static IOSObjectArray *OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, LN_QUICK_COEF_, IOSObjectArray *)

static IOSObjectArray *OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, LN_HI_PREC_COEF_, IOSObjectArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, SINE_TABLE_A_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, SINE_TABLE_B_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, COSINE_TABLE_A_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, COSINE_TABLE_B_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, TANGENT_TABLE_A_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_B_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, TANGENT_TABLE_B_, IOSDoubleArray *)

static IOSLongArray *OrgApacheCommonsMathUtilFastMath_RECIP_2PI_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, RECIP_2PI_, IOSLongArray *)

static IOSLongArray *OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, PI_O_4_BITS_, IOSLongArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_EIGHTHS_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, EIGHTHS_, IOSDoubleArray *)

static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_CBRTTWO_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, CBRTTWO_, IOSDoubleArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, HEX_40000000, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, MASK_30BITS, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilFastMath, TWO_POWER_52, jdouble)

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_init(OrgApacheCommonsMathUtilFastMath *self);

__attribute__((unused)) static OrgApacheCommonsMathUtilFastMath *new_OrgApacheCommonsMathUtilFastMath_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_doubleHighPartWithDouble_(jdouble d);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(jdouble x, jdouble extra, IOSDoubleArray *hiPrec);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_expm1WithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *hiPrecOut);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_slowexpWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *result);

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(jdouble d, IOSDoubleArray *split);

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(IOSDoubleArray *a);

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, IOSDoubleArray *ans);

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, IOSDoubleArray *ans);

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(IOSDoubleArray *inArg, IOSDoubleArray *result);

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_quadMultWithDoubleArray_withDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, IOSDoubleArray *result);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_expintWithInt_withDoubleArray_(jint p, IOSDoubleArray *result);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_logWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *hiPrec);

__attribute__((unused)) static IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_slowLogWithDouble_(jdouble xi);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_slowSinWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *result);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_slowCosWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *result);

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_buildSinCosTables();

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_polySineWithDouble_(jdouble x);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_polyCosineWithDouble_(jdouble x);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_sinQWithDouble_withDouble_(jdouble xa, jdouble xb);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_cosQWithDouble_withDouble_(jdouble xa, jdouble xb);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_tanQWithDouble_withDouble_withBoolean_(jdouble xa, jdouble xb, jboolean cotanFlag);

__attribute__((unused)) static void OrgApacheCommonsMathUtilFastMath_reducePayneHanekWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *result);

__attribute__((unused)) static jdouble OrgApacheCommonsMathUtilFastMath_atanWithDouble_withDouble_withBoolean_(jdouble xa, jdouble xb, jboolean leftPlane);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathUtilFastMath)

@implementation OrgApacheCommonsMathUtilFastMath

- (instancetype)init {
  OrgApacheCommonsMathUtilFastMath_init(self);
  return self;
}

+ (jdouble)doubleHighPartWithDouble:(jdouble)d {
  return OrgApacheCommonsMathUtilFastMath_doubleHighPartWithDouble_(d);
}

+ (jdouble)sqrtWithDouble:(jdouble)a {
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(a);
}

+ (jdouble)coshWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_coshWithDouble_(x);
}

+ (jdouble)sinhWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_sinhWithDouble_(x);
}

+ (jdouble)tanhWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_tanhWithDouble_(x);
}

+ (jdouble)acoshWithDouble:(jdouble)a {
  return OrgApacheCommonsMathUtilFastMath_acoshWithDouble_(a);
}

+ (jdouble)asinhWithDouble:(jdouble)a {
  return OrgApacheCommonsMathUtilFastMath_asinhWithDouble_(a);
}

+ (jdouble)atanhWithDouble:(jdouble)a {
  return OrgApacheCommonsMathUtilFastMath_atanhWithDouble_(a);
}

+ (jdouble)signumWithDouble:(jdouble)a {
  return OrgApacheCommonsMathUtilFastMath_signumWithDouble_(a);
}

+ (jfloat)signumWithFloat:(jfloat)a {
  return OrgApacheCommonsMathUtilFastMath_signumWithFloat_(a);
}

+ (jdouble)nextUpWithDouble:(jdouble)a {
  return OrgApacheCommonsMathUtilFastMath_nextUpWithDouble_(a);
}

+ (jfloat)nextUpWithFloat:(jfloat)a {
  return OrgApacheCommonsMathUtilFastMath_nextUpWithFloat_(a);
}

+ (jdouble)random {
  return OrgApacheCommonsMathUtilFastMath_random();
}

+ (jdouble)expWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_expWithDouble_(x);
}

+ (jdouble)expWithDouble:(jdouble)x
              withDouble:(jdouble)extra
         withDoubleArray:(IOSDoubleArray *)hiPrec {
  return OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(x, extra, hiPrec);
}

+ (jdouble)expm1WithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_expm1WithDouble_(x);
}

+ (jdouble)expm1WithDouble:(jdouble)x
           withDoubleArray:(IOSDoubleArray *)hiPrecOut {
  return OrgApacheCommonsMathUtilFastMath_expm1WithDouble_withDoubleArray_(x, hiPrecOut);
}

+ (jdouble)slowexpWithDouble:(jdouble)x
             withDoubleArray:(IOSDoubleArray *)result {
  return OrgApacheCommonsMathUtilFastMath_slowexpWithDouble_withDoubleArray_(x, result);
}

+ (void)splitWithDouble:(jdouble)d
        withDoubleArray:(IOSDoubleArray *)split {
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(d, split);
}

+ (void)resplitWithDoubleArray:(IOSDoubleArray *)a {
  OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(a);
}

+ (void)splitMultWithDoubleArray:(IOSDoubleArray *)a
                 withDoubleArray:(IOSDoubleArray *)b
                 withDoubleArray:(IOSDoubleArray *)ans {
  OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(a, b, ans);
}

+ (void)splitAddWithDoubleArray:(IOSDoubleArray *)a
                withDoubleArray:(IOSDoubleArray *)b
                withDoubleArray:(IOSDoubleArray *)ans {
  OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(a, b, ans);
}

+ (void)splitReciprocalWithDoubleArray:(IOSDoubleArray *)inArg
                       withDoubleArray:(IOSDoubleArray *)result {
  OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(inArg, result);
}

+ (void)quadMultWithDoubleArray:(IOSDoubleArray *)a
                withDoubleArray:(IOSDoubleArray *)b
                withDoubleArray:(IOSDoubleArray *)result {
  OrgApacheCommonsMathUtilFastMath_quadMultWithDoubleArray_withDoubleArray_withDoubleArray_(a, b, result);
}

+ (jdouble)expintWithInt:(jint)p
         withDoubleArray:(IOSDoubleArray *)result {
  return OrgApacheCommonsMathUtilFastMath_expintWithInt_withDoubleArray_(p, result);
}

+ (jdouble)logWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_logWithDouble_(x);
}

+ (jdouble)logWithDouble:(jdouble)x
         withDoubleArray:(IOSDoubleArray *)hiPrec {
  return OrgApacheCommonsMathUtilFastMath_logWithDouble_withDoubleArray_(x, hiPrec);
}

+ (jdouble)log1pWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_log1pWithDouble_(x);
}

+ (jdouble)log10WithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_log10WithDouble_(x);
}

+ (jdouble)powWithDouble:(jdouble)x
              withDouble:(jdouble)y {
  return OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(x, y);
}

+ (IOSDoubleArray *)slowLogWithDouble:(jdouble)xi {
  return OrgApacheCommonsMathUtilFastMath_slowLogWithDouble_(xi);
}

+ (jdouble)slowSinWithDouble:(jdouble)x
             withDoubleArray:(IOSDoubleArray *)result {
  return OrgApacheCommonsMathUtilFastMath_slowSinWithDouble_withDoubleArray_(x, result);
}

+ (jdouble)slowCosWithDouble:(jdouble)x
             withDoubleArray:(IOSDoubleArray *)result {
  return OrgApacheCommonsMathUtilFastMath_slowCosWithDouble_withDoubleArray_(x, result);
}

+ (void)buildSinCosTables {
  OrgApacheCommonsMathUtilFastMath_buildSinCosTables();
}

+ (jdouble)polySineWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_polySineWithDouble_(x);
}

+ (jdouble)polyCosineWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_polyCosineWithDouble_(x);
}

+ (jdouble)sinQWithDouble:(jdouble)xa
               withDouble:(jdouble)xb {
  return OrgApacheCommonsMathUtilFastMath_sinQWithDouble_withDouble_(xa, xb);
}

+ (jdouble)cosQWithDouble:(jdouble)xa
               withDouble:(jdouble)xb {
  return OrgApacheCommonsMathUtilFastMath_cosQWithDouble_withDouble_(xa, xb);
}

+ (jdouble)tanQWithDouble:(jdouble)xa
               withDouble:(jdouble)xb
              withBoolean:(jboolean)cotanFlag {
  return OrgApacheCommonsMathUtilFastMath_tanQWithDouble_withDouble_withBoolean_(xa, xb, cotanFlag);
}

+ (void)reducePayneHanekWithDouble:(jdouble)x
                   withDoubleArray:(IOSDoubleArray *)result {
  OrgApacheCommonsMathUtilFastMath_reducePayneHanekWithDouble_withDoubleArray_(x, result);
}

+ (jdouble)sinWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_sinWithDouble_(x);
}

+ (jdouble)cosWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_cosWithDouble_(x);
}

+ (jdouble)tanWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_tanWithDouble_(x);
}

+ (jdouble)atanWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_atanWithDouble_(x);
}

+ (jdouble)atanWithDouble:(jdouble)xa
               withDouble:(jdouble)xb
              withBoolean:(jboolean)leftPlane {
  return OrgApacheCommonsMathUtilFastMath_atanWithDouble_withDouble_withBoolean_(xa, xb, leftPlane);
}

+ (jdouble)atan2WithDouble:(jdouble)y
                withDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_atan2WithDouble_withDouble_(y, x);
}

+ (jdouble)asinWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_asinWithDouble_(x);
}

+ (jdouble)acosWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_acosWithDouble_(x);
}

+ (jdouble)cbrtWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_cbrtWithDouble_(x);
}

+ (jdouble)toRadiansWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_toRadiansWithDouble_(x);
}

+ (jdouble)toDegreesWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_toDegreesWithDouble_(x);
}

+ (jint)absWithInt:(jint)x {
  return OrgApacheCommonsMathUtilFastMath_absWithInt_(x);
}

+ (jlong)absWithLong:(jlong)x {
  return OrgApacheCommonsMathUtilFastMath_absWithLong_(x);
}

+ (jfloat)absWithFloat:(jfloat)x {
  return OrgApacheCommonsMathUtilFastMath_absWithFloat_(x);
}

+ (jdouble)absWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_absWithDouble_(x);
}

+ (jdouble)ulpWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_ulpWithDouble_(x);
}

+ (jfloat)ulpWithFloat:(jfloat)x {
  return OrgApacheCommonsMathUtilFastMath_ulpWithFloat_(x);
}

+ (jdouble)scalbWithDouble:(jdouble)d
                   withInt:(jint)n {
  return OrgApacheCommonsMathUtilFastMath_scalbWithDouble_withInt_(d, n);
}

+ (jfloat)scalbWithFloat:(jfloat)f
                 withInt:(jint)n {
  return OrgApacheCommonsMathUtilFastMath_scalbWithFloat_withInt_(f, n);
}

+ (jdouble)nextAfterWithDouble:(jdouble)d
                    withDouble:(jdouble)direction {
  return OrgApacheCommonsMathUtilFastMath_nextAfterWithDouble_withDouble_(d, direction);
}

+ (jfloat)nextAfterWithFloat:(jfloat)f
                  withDouble:(jdouble)direction {
  return OrgApacheCommonsMathUtilFastMath_nextAfterWithFloat_withDouble_(f, direction);
}

+ (jdouble)floorWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_floorWithDouble_(x);
}

+ (jdouble)ceilWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_ceilWithDouble_(x);
}

+ (jdouble)rintWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_rintWithDouble_(x);
}

+ (jlong)roundWithDouble:(jdouble)x {
  return OrgApacheCommonsMathUtilFastMath_roundWithDouble_(x);
}

+ (jint)roundWithFloat:(jfloat)x {
  return OrgApacheCommonsMathUtilFastMath_roundWithFloat_(x);
}

+ (jint)minWithInt:(jint)a
           withInt:(jint)b {
  return OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(a, b);
}

+ (jlong)minWithLong:(jlong)a
            withLong:(jlong)b {
  return OrgApacheCommonsMathUtilFastMath_minWithLong_withLong_(a, b);
}

+ (jfloat)minWithFloat:(jfloat)a
             withFloat:(jfloat)b {
  return OrgApacheCommonsMathUtilFastMath_minWithFloat_withFloat_(a, b);
}

+ (jdouble)minWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return OrgApacheCommonsMathUtilFastMath_minWithDouble_withDouble_(a, b);
}

+ (jint)maxWithInt:(jint)a
           withInt:(jint)b {
  return OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(a, b);
}

+ (jlong)maxWithLong:(jlong)a
            withLong:(jlong)b {
  return OrgApacheCommonsMathUtilFastMath_maxWithLong_withLong_(a, b);
}

+ (jfloat)maxWithFloat:(jfloat)a
             withFloat:(jfloat)b {
  return OrgApacheCommonsMathUtilFastMath_maxWithFloat_withFloat_(a, b);
}

+ (jdouble)maxWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(a, b);
}

+ (jdouble)hypotWithDouble:(jdouble)x
                withDouble:(jdouble)y {
  return OrgApacheCommonsMathUtilFastMath_hypotWithDouble_withDouble_(x, y);
}

+ (jdouble)IEEEremainderWithDouble:(jdouble)dividend
                        withDouble:(jdouble)divisor {
  return OrgApacheCommonsMathUtilFastMath_IEEEremainderWithDouble_withDouble_(dividend, divisor);
}

+ (jdouble)copySignWithDouble:(jdouble)magnitude
                   withDouble:(jdouble)sign {
  return OrgApacheCommonsMathUtilFastMath_copySignWithDouble_withDouble_(magnitude, sign);
}

+ (jfloat)copySignWithFloat:(jfloat)magnitude
                  withFloat:(jfloat)sign {
  return OrgApacheCommonsMathUtilFastMath_copySignWithFloat_withFloat_(magnitude, sign);
}

+ (jint)getExponentWithDouble:(jdouble)d {
  return OrgApacheCommonsMathUtilFastMath_getExponentWithDouble_(d);
}

+ (jint)getExponentWithFloat:(jfloat)f {
  return OrgApacheCommonsMathUtilFastMath_getExponentWithFloat_(f);
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathUtilFastMath class]) {
    OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_A_ = [IOSDoubleArray newArrayWithLength:1500];
    OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_B_ = [IOSDoubleArray newArrayWithLength:1500];
    OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_A_ = [IOSDoubleArray newArrayWithLength:1025];
    OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_B_ = [IOSDoubleArray newArrayWithLength:1025];
    OrgApacheCommonsMathUtilFastMath_FACT_ = [IOSDoubleArray newArrayWithLength:20];
    OrgApacheCommonsMathUtilFastMath_LN_MANT_ = [IOSObjectArray newArrayWithLength:1024 type:IOSClass_doubleArray(1)];
    OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_ = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2.0, 0.0 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.6666666269302368, 3.9736429850260626E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.3999999761581421, 2.3841857910019882E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.2857142686843872, 1.7029898543501842E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.2222222089767456, 1.3245471311735498E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.1818181574344635, 2.4384203044354907E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.1538461446762085, 9.140260083262505E-9 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.13333332538604736, 9.220590270857665E-9 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.11764700710773468, 1.2393345855018391E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.10526403784751892, 8.251545029714408E-9 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.0952233225107193, 1.2675934823758863E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.08713622391223907, 1.1430250008909141E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.07842259109020233, 2.404307984052299E-9 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.08371849358081818, 1.176342548272881E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.030589580535888672, 1.2958646899018938E-9 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.14982303977012634, 1.225743062930824E-8 } count:2] } count:16 type:IOSClass_doubleArray(1)];
    OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_ = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1.0, 5.669184079525E-24 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -0.25, -0.25 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.3333333134651184, 1.986821492305628E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -0.25, -6.663542893624021E-14 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.19999998807907104, 1.1921056801463227E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -0.1666666567325592, -7.800414592973399E-9 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.1428571343421936, 5.650007086920087E-9 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -0.12502530217170715, -7.44321345601866E-11 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.11113807559013367, 9.219544613762692E-9 } count:2] } count:9 type:IOSClass_doubleArray(1)];
    OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_ = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1.0, -6.032174644509064E-23 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -0.25, -0.25 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.3333333134651184, 1.9868161777724352E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -0.2499999701976776, -2.957007209750105E-8 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.19999954104423523, 1.5830993332061267E-10 } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -0.16624879837036133, -2.6033824355191673E-8 } count:2] } count:6 type:IOSClass_doubleArray(1)];
    OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_ = [IOSDoubleArray newArrayWithLength:14];
    OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_ = [IOSDoubleArray newArrayWithLength:14];
    OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_ = [IOSDoubleArray newArrayWithLength:14];
    OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_ = [IOSDoubleArray newArrayWithLength:14];
    OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_ = [IOSDoubleArray newArrayWithLength:14];
    OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_B_ = [IOSDoubleArray newArrayWithLength:14];
    OrgApacheCommonsMathUtilFastMath_RECIP_2PI_ = [IOSLongArray newArrayWithLongs:(jlong[]){ (LShift64((jlong) 0x28be60dbLL, 32)) | (jlong) 0x9391054aLL, (LShift64((jlong) 0x7f09d5f4LL, 32)) | (jlong) 0x7d4d3770LL, (LShift64((jlong) 0x36d8a566LL, 32)) | (jlong) 0x4f10e410LL, (LShift64((jlong) 0x7f9458eaLL, 32)) | (jlong) 0xf7aef158LL, (LShift64((jlong) 0x6dc91b8eLL, 32)) | (jlong) 0x909374b8LL, (LShift64((jlong) 0x01924bbaLL, 32)) | (jlong) 0x82746487LL, (LShift64((jlong) 0x3f877ac7LL, 32)) | (jlong) 0x2c4a69cfLL, (LShift64((jlong) 0xba208d7dLL, 32)) | (jlong) 0x4baed121LL, (LShift64((jlong) 0x3a671c09LL, 32)) | (jlong) 0xad17df90LL, (LShift64((jlong) 0x4e64758eLL, 32)) | (jlong) 0x60d4ce7dLL, (LShift64((jlong) 0x272117e2LL, 32)) | (jlong) 0xef7e4a0eLL, (LShift64((jlong) 0xc7fe25ffLL, 32)) | (jlong) 0xf7816603LL, (LShift64((jlong) 0xfbcbc462LL, 32)) | (jlong) 0xd6829b47LL, (LShift64((jlong) 0xdb4d9fb3LL, 32)) | (jlong) 0xc9f2c26dLL, (LShift64((jlong) 0xd3d18fd9LL, 32)) | (jlong) 0xa797fa8bLL, (LShift64((jlong) 0x5d49eeb1LL, 32)) | (jlong) 0xfaf97c5eLL, (LShift64((jlong) 0xcf41ce7dLL, 32)) | (jlong) 0xe294a4baLL, LShift64((jlong) 0x9afed7ecLL, 32) } count:18];
    OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_ = [IOSLongArray newArrayWithLongs:(jlong[]){ (LShift64((jlong) 0xc90fdaa2LL, 32)) | (jlong) 0x2168c234LL, (LShift64((jlong) 0xc4c6628bLL, 32)) | (jlong) 0x80dc1cd1LL } count:2];
    OrgApacheCommonsMathUtilFastMath_EIGHTHS_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 } count:14];
    OrgApacheCommonsMathUtilFastMath_CBRTTWO_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 } count:5];
    {
      jint i;
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_FACT_, 0) = 1.0;
      for (i = 1; i < OrgApacheCommonsMathUtilFastMath_FACT_->size_; i++) {
        *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_FACT_, i) = IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_FACT_, i - 1) * i;
      }
      IOSDoubleArray *tmp = [IOSDoubleArray newArrayWithLength:2];
      IOSDoubleArray *recip = [IOSDoubleArray newArrayWithLength:2];
      for (i = 0; i < 750; i++) {
        OrgApacheCommonsMathUtilFastMath_expintWithInt_withDoubleArray_(i, tmp);
        *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_A_, i + 750) = IOSDoubleArray_Get(tmp, 0);
        *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_B_, i + 750) = IOSDoubleArray_Get(tmp, 1);
        if (i != 0) {
          OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(tmp, recip);
          *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_A_, 750 - i) = IOSDoubleArray_Get(recip, 0);
          *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_B_, 750 - i) = IOSDoubleArray_Get(recip, 1);
        }
      }
      for (i = 0; i < OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_A_->size_; i++) {
        OrgApacheCommonsMathUtilFastMath_slowexpWithDouble_withDoubleArray_(i / 1024.0, tmp);
        *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_A_, i) = IOSDoubleArray_Get(tmp, 0);
        *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_B_, i) = IOSDoubleArray_Get(tmp, 1);
      }
      for (i = 0; i < OrgApacheCommonsMathUtilFastMath_LN_MANT_->size_; i++) {
        jdouble d = JavaLangDouble_longBitsToDoubleWithLong_((LShift64(((jlong) i), 42)) | (jlong) 0x3ff0000000000000LL);
        (void) IOSObjectArray_Set(OrgApacheCommonsMathUtilFastMath_LN_MANT_, i, OrgApacheCommonsMathUtilFastMath_slowLogWithDouble_(d));
      }
      OrgApacheCommonsMathUtilFastMath_buildSinCosTables();
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathUtilFastMath)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FastMath", NULL, 0x2, NULL, NULL },
    { "doubleHighPartWithDouble:", "doubleHighPart", "D", 0xa, NULL, NULL },
    { "sqrtWithDouble:", "sqrt", "D", 0x9, NULL, NULL },
    { "coshWithDouble:", "cosh", "D", 0x9, NULL, NULL },
    { "sinhWithDouble:", "sinh", "D", 0x9, NULL, NULL },
    { "tanhWithDouble:", "tanh", "D", 0x9, NULL, NULL },
    { "acoshWithDouble:", "acosh", "D", 0x9, NULL, NULL },
    { "asinhWithDouble:", "asinh", "D", 0x9, NULL, NULL },
    { "atanhWithDouble:", "atanh", "D", 0x9, NULL, NULL },
    { "signumWithDouble:", "signum", "D", 0x9, NULL, NULL },
    { "signumWithFloat:", "signum", "F", 0x9, NULL, NULL },
    { "nextUpWithDouble:", "nextUp", "D", 0x9, NULL, NULL },
    { "nextUpWithFloat:", "nextUp", "F", 0x9, NULL, NULL },
    { "random", NULL, "D", 0x9, NULL, NULL },
    { "expWithDouble:", "exp", "D", 0x9, NULL, NULL },
    { "expWithDouble:withDouble:withDoubleArray:", "exp", "D", 0xa, NULL, NULL },
    { "expm1WithDouble:", "expm1", "D", 0x9, NULL, NULL },
    { "expm1WithDouble:withDoubleArray:", "expm1", "D", 0xa, NULL, NULL },
    { "slowexpWithDouble:withDoubleArray:", "slowexp", "D", 0xa, NULL, NULL },
    { "splitWithDouble:withDoubleArray:", "split", "V", 0xa, NULL, NULL },
    { "resplitWithDoubleArray:", "resplit", "V", 0xa, NULL, NULL },
    { "splitMultWithDoubleArray:withDoubleArray:withDoubleArray:", "splitMult", "V", 0xa, NULL, NULL },
    { "splitAddWithDoubleArray:withDoubleArray:withDoubleArray:", "splitAdd", "V", 0xa, NULL, NULL },
    { "splitReciprocalWithDoubleArray:withDoubleArray:", "splitReciprocal", "V", 0xa, NULL, NULL },
    { "quadMultWithDoubleArray:withDoubleArray:withDoubleArray:", "quadMult", "V", 0xa, NULL, NULL },
    { "expintWithInt:withDoubleArray:", "expint", "D", 0xa, NULL, NULL },
    { "logWithDouble:", "log", "D", 0x9, NULL, NULL },
    { "logWithDouble:withDoubleArray:", "log", "D", 0xa, NULL, NULL },
    { "log1pWithDouble:", "log1p", "D", 0x9, NULL, NULL },
    { "log10WithDouble:", "log10", "D", 0x9, NULL, NULL },
    { "powWithDouble:withDouble:", "pow", "D", 0x9, NULL, NULL },
    { "slowLogWithDouble:", "slowLog", "[D", 0xa, NULL, NULL },
    { "slowSinWithDouble:withDoubleArray:", "slowSin", "D", 0xa, NULL, NULL },
    { "slowCosWithDouble:withDoubleArray:", "slowCos", "D", 0xa, NULL, NULL },
    { "buildSinCosTables", NULL, "V", 0xa, NULL, NULL },
    { "polySineWithDouble:", "polySine", "D", 0xa, NULL, NULL },
    { "polyCosineWithDouble:", "polyCosine", "D", 0xa, NULL, NULL },
    { "sinQWithDouble:withDouble:", "sinQ", "D", 0xa, NULL, NULL },
    { "cosQWithDouble:withDouble:", "cosQ", "D", 0xa, NULL, NULL },
    { "tanQWithDouble:withDouble:withBoolean:", "tanQ", "D", 0xa, NULL, NULL },
    { "reducePayneHanekWithDouble:withDoubleArray:", "reducePayneHanek", "V", 0xa, NULL, NULL },
    { "sinWithDouble:", "sin", "D", 0x9, NULL, NULL },
    { "cosWithDouble:", "cos", "D", 0x9, NULL, NULL },
    { "tanWithDouble:", "tan", "D", 0x9, NULL, NULL },
    { "atanWithDouble:", "atan", "D", 0x9, NULL, NULL },
    { "atanWithDouble:withDouble:withBoolean:", "atan", "D", 0xa, NULL, NULL },
    { "atan2WithDouble:withDouble:", "atan2", "D", 0x9, NULL, NULL },
    { "asinWithDouble:", "asin", "D", 0x9, NULL, NULL },
    { "acosWithDouble:", "acos", "D", 0x9, NULL, NULL },
    { "cbrtWithDouble:", "cbrt", "D", 0x9, NULL, NULL },
    { "toRadiansWithDouble:", "toRadians", "D", 0x9, NULL, NULL },
    { "toDegreesWithDouble:", "toDegrees", "D", 0x9, NULL, NULL },
    { "absWithInt:", "abs", "I", 0x9, NULL, NULL },
    { "absWithLong:", "abs", "J", 0x9, NULL, NULL },
    { "absWithFloat:", "abs", "F", 0x9, NULL, NULL },
    { "absWithDouble:", "abs", "D", 0x9, NULL, NULL },
    { "ulpWithDouble:", "ulp", "D", 0x9, NULL, NULL },
    { "ulpWithFloat:", "ulp", "F", 0x9, NULL, NULL },
    { "scalbWithDouble:withInt:", "scalb", "D", 0x9, NULL, NULL },
    { "scalbWithFloat:withInt:", "scalb", "F", 0x9, NULL, NULL },
    { "nextAfterWithDouble:withDouble:", "nextAfter", "D", 0x9, NULL, NULL },
    { "nextAfterWithFloat:withDouble:", "nextAfter", "F", 0x9, NULL, NULL },
    { "floorWithDouble:", "floor", "D", 0x9, NULL, NULL },
    { "ceilWithDouble:", "ceil", "D", 0x9, NULL, NULL },
    { "rintWithDouble:", "rint", "D", 0x9, NULL, NULL },
    { "roundWithDouble:", "round", "J", 0x9, NULL, NULL },
    { "roundWithFloat:", "round", "I", 0x9, NULL, NULL },
    { "minWithInt:withInt:", "min", "I", 0x9, NULL, NULL },
    { "minWithLong:withLong:", "min", "J", 0x9, NULL, NULL },
    { "minWithFloat:withFloat:", "min", "F", 0x9, NULL, NULL },
    { "minWithDouble:withDouble:", "min", "D", 0x9, NULL, NULL },
    { "maxWithInt:withInt:", "max", "I", 0x9, NULL, NULL },
    { "maxWithLong:withLong:", "max", "J", 0x9, NULL, NULL },
    { "maxWithFloat:withFloat:", "max", "F", 0x9, NULL, NULL },
    { "maxWithDouble:withDouble:", "max", "D", 0x9, NULL, NULL },
    { "hypotWithDouble:withDouble:", "hypot", "D", 0x9, NULL, NULL },
    { "IEEEremainderWithDouble:withDouble:", "IEEEremainder", "D", 0x9, NULL, NULL },
    { "copySignWithDouble:withDouble:", "copySign", "D", 0x9, NULL, NULL },
    { "copySignWithFloat:withFloat:", "copySign", "F", 0x9, NULL, NULL },
    { "getExponentWithDouble:", "getExponent", "I", 0x9, NULL, NULL },
    { "getExponentWithFloat:", "getExponent", "I", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PI_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathUtilFastMath_PI },
    { "E_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathUtilFastMath_E },
    { "EXP_INT_TABLE_A_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_A_, NULL,  },
    { "EXP_INT_TABLE_B_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_B_, NULL,  },
    { "EXP_FRAC_TABLE_A_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_A_, NULL,  },
    { "EXP_FRAC_TABLE_B_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_B_, NULL,  },
    { "FACT_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_FACT_, NULL,  },
    { "LN_MANT_", NULL, 0x1a, "[[D", &OrgApacheCommonsMathUtilFastMath_LN_MANT_, NULL,  },
    { "LN_2_A_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathUtilFastMath_LN_2_A },
    { "LN_2_B_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathUtilFastMath_LN_2_B },
    { "LN_SPLIT_COEF_", NULL, 0x1a, "[[D", &OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_, NULL,  },
    { "LN_QUICK_COEF_", NULL, 0x1a, "[[D", &OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_, NULL,  },
    { "LN_HI_PREC_COEF_", NULL, 0x1a, "[[D", &OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_, NULL,  },
    { "SINE_TABLE_A_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_, NULL,  },
    { "SINE_TABLE_B_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_, NULL,  },
    { "COSINE_TABLE_A_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_, NULL,  },
    { "COSINE_TABLE_B_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_, NULL,  },
    { "TANGENT_TABLE_A_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_, NULL,  },
    { "TANGENT_TABLE_B_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_B_, NULL,  },
    { "RECIP_2PI_", NULL, 0x1a, "[J", &OrgApacheCommonsMathUtilFastMath_RECIP_2PI_, NULL,  },
    { "PI_O_4_BITS_", NULL, 0x1a, "[J", &OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_, NULL,  },
    { "EIGHTHS_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_EIGHTHS_, NULL,  },
    { "CBRTTWO_", NULL, 0x1a, "[D", &OrgApacheCommonsMathUtilFastMath_CBRTTWO_, NULL,  },
    { "HEX_40000000_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathUtilFastMath_HEX_40000000 },
    { "MASK_30BITS_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathUtilFastMath_MASK_30BITS },
    { "TWO_POWER_52_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathUtilFastMath_TWO_POWER_52 },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathUtilFastMath = { 2, "FastMath", "org.apache.commons.math.util", NULL, 0x1, 81, methods, 26, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathUtilFastMath;
}

@end

void OrgApacheCommonsMathUtilFastMath_init(OrgApacheCommonsMathUtilFastMath *self) {
  (void) NSObject_init(self);
}

OrgApacheCommonsMathUtilFastMath *new_OrgApacheCommonsMathUtilFastMath_init() {
  OrgApacheCommonsMathUtilFastMath *self = [OrgApacheCommonsMathUtilFastMath alloc];
  OrgApacheCommonsMathUtilFastMath_init(self);
  return self;
}

jdouble OrgApacheCommonsMathUtilFastMath_doubleHighPartWithDouble_(jdouble d) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (d > -OrgApacheCommonsMathUtilMathUtils_SAFE_MIN && d < OrgApacheCommonsMathUtilMathUtils_SAFE_MIN) {
    return d;
  }
  jlong xl = JavaLangDouble_doubleToLongBitsWithDouble_(d);
  xl = xl & OrgApacheCommonsMathUtilFastMath_MASK_30BITS;
  return JavaLangDouble_longBitsToDoubleWithLong_(xl);
}

jdouble OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(jdouble a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return JavaLangMath_sqrtWithDouble_(a);
}

jdouble OrgApacheCommonsMathUtilFastMath_coshWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (x != x) {
    return x;
  }
  if (x > 20.0) {
    return OrgApacheCommonsMathUtilFastMath_expWithDouble_(x) / 2.0;
  }
  if (x < -20) {
    return OrgApacheCommonsMathUtilFastMath_expWithDouble_(-x) / 2.0;
  }
  IOSDoubleArray *hiPrec = [IOSDoubleArray newArrayWithLength:2];
  if (x < 0.0) {
    x = -x;
  }
  OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(x, 0.0, hiPrec);
  jdouble ya = IOSDoubleArray_Get(hiPrec, 0) + IOSDoubleArray_Get(hiPrec, 1);
  jdouble yb = -(ya - IOSDoubleArray_Get(hiPrec, 0) - IOSDoubleArray_Get(hiPrec, 1));
  jdouble temp = ya * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble yaa = ya + temp - temp;
  jdouble yab = ya - yaa;
  jdouble recip = 1.0 / ya;
  temp = recip * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble recipa = recip + temp - temp;
  jdouble recipb = recip - recipa;
  recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
  recipb += -yb * recip * recip;
  temp = ya + recipa;
  yb += -(temp - ya - recipa);
  ya = temp;
  temp = ya + recipb;
  yb += -(temp - ya - recipb);
  ya = temp;
  jdouble result = ya + yb;
  result *= 0.5;
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_sinhWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jboolean negate = NO;
  if (x != x) {
    return x;
  }
  if (x > 20.0) {
    return OrgApacheCommonsMathUtilFastMath_expWithDouble_(x) / 2.0;
  }
  if (x < -20) {
    return -OrgApacheCommonsMathUtilFastMath_expWithDouble_(-x) / 2.0;
  }
  if (x == 0) {
    return x;
  }
  if (x < 0.0) {
    x = -x;
    negate = YES;
  }
  jdouble result;
  if (x > 0.25) {
    IOSDoubleArray *hiPrec = [IOSDoubleArray newArrayWithLength:2];
    OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(x, 0.0, hiPrec);
    jdouble ya = IOSDoubleArray_Get(hiPrec, 0) + IOSDoubleArray_Get(hiPrec, 1);
    jdouble yb = -(ya - IOSDoubleArray_Get(hiPrec, 0) - IOSDoubleArray_Get(hiPrec, 1));
    jdouble temp = ya * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble yaa = ya + temp - temp;
    jdouble yab = ya - yaa;
    jdouble recip = 1.0 / ya;
    temp = recip * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble recipa = recip + temp - temp;
    jdouble recipb = recip - recipa;
    recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;
    recipb += -yb * recip * recip;
    recipa = -recipa;
    recipb = -recipb;
    temp = ya + recipa;
    yb += -(temp - ya - recipa);
    ya = temp;
    temp = ya + recipb;
    yb += -(temp - ya - recipb);
    ya = temp;
    result = ya + yb;
    result *= 0.5;
  }
  else {
    IOSDoubleArray *hiPrec = [IOSDoubleArray newArrayWithLength:2];
    OrgApacheCommonsMathUtilFastMath_expm1WithDouble_withDoubleArray_(x, hiPrec);
    jdouble ya = IOSDoubleArray_Get(hiPrec, 0) + IOSDoubleArray_Get(hiPrec, 1);
    jdouble yb = -(ya - IOSDoubleArray_Get(hiPrec, 0) - IOSDoubleArray_Get(hiPrec, 1));
    jdouble denom = 1.0 + ya;
    jdouble denomr = 1.0 / denom;
    jdouble denomb = -(denom - 1.0 - ya) + yb;
    jdouble ratio = ya * denomr;
    jdouble temp = ratio * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble ra = ratio + temp - temp;
    jdouble rb = ratio - ra;
    temp = denom * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble za = denom + temp - temp;
    jdouble zb = denom - za;
    rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
    rb += yb * denomr;
    rb += -ya * denomb * denomr * denomr;
    temp = ya + ra;
    yb += -(temp - ya - ra);
    ya = temp;
    temp = ya + rb;
    yb += -(temp - ya - rb);
    ya = temp;
    result = ya + yb;
    result *= 0.5;
  }
  if (negate) {
    result = -result;
  }
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_tanhWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jboolean negate = NO;
  if (x != x) {
    return x;
  }
  if (x > 20.0) {
    return 1.0;
  }
  if (x < -20) {
    return -1.0;
  }
  if (x == 0) {
    return x;
  }
  if (x < 0.0) {
    x = -x;
    negate = YES;
  }
  jdouble result;
  if (x >= 0.5) {
    IOSDoubleArray *hiPrec = [IOSDoubleArray newArrayWithLength:2];
    OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(x * 2.0, 0.0, hiPrec);
    jdouble ya = IOSDoubleArray_Get(hiPrec, 0) + IOSDoubleArray_Get(hiPrec, 1);
    jdouble yb = -(ya - IOSDoubleArray_Get(hiPrec, 0) - IOSDoubleArray_Get(hiPrec, 1));
    jdouble na = -1.0 + ya;
    jdouble nb = -(na + 1.0 - ya);
    jdouble temp = na + yb;
    nb += -(temp - na - yb);
    na = temp;
    jdouble da = 1.0 + ya;
    jdouble db = -(da - 1.0 - ya);
    temp = da + yb;
    db += -(temp - da - yb);
    da = temp;
    temp = da * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble daa = da + temp - temp;
    jdouble dab = da - daa;
    jdouble ratio = na / da;
    temp = ratio * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble ratioa = ratio + temp - temp;
    jdouble ratiob = ratio - ratioa;
    ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
    ratiob += nb / da;
    ratiob += -db * na / da / da;
    result = ratioa + ratiob;
  }
  else {
    IOSDoubleArray *hiPrec = [IOSDoubleArray newArrayWithLength:2];
    OrgApacheCommonsMathUtilFastMath_expm1WithDouble_withDoubleArray_(x * 2.0, hiPrec);
    jdouble ya = IOSDoubleArray_Get(hiPrec, 0) + IOSDoubleArray_Get(hiPrec, 1);
    jdouble yb = -(ya - IOSDoubleArray_Get(hiPrec, 0) - IOSDoubleArray_Get(hiPrec, 1));
    jdouble na = ya;
    jdouble nb = yb;
    jdouble da = 2.0 + ya;
    jdouble db = -(da - 2.0 - ya);
    jdouble temp = da + yb;
    db += -(temp - da - yb);
    da = temp;
    temp = da * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble daa = da + temp - temp;
    jdouble dab = da - daa;
    jdouble ratio = na / da;
    temp = ratio * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble ratioa = ratio + temp - temp;
    jdouble ratiob = ratio - ratioa;
    ratiob += (na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;
    ratiob += nb / da;
    ratiob += -db * na / da / da;
    result = ratioa + ratiob;
  }
  if (negate) {
    result = -result;
  }
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_acoshWithDouble_(jdouble a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return OrgApacheCommonsMathUtilFastMath_logWithDouble_(a + OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(a * a - 1));
}

jdouble OrgApacheCommonsMathUtilFastMath_asinhWithDouble_(jdouble a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jboolean negative = NO;
  if (a < 0) {
    negative = YES;
    a = -a;
  }
  jdouble absAsinh;
  if (a > 0.167) {
    absAsinh = OrgApacheCommonsMathUtilFastMath_logWithDouble_(OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(a * a + 1) + a);
  }
  else {
    jdouble a2 = a * a;
    if (a > 0.097) {
      absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
    }
    else if (a > 0.036) {
      absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
    }
    else if (a > 0.0036) {
      absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
    }
    else {
      absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);
    }
  }
  return negative ? -absAsinh : absAsinh;
}

jdouble OrgApacheCommonsMathUtilFastMath_atanhWithDouble_(jdouble a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jboolean negative = NO;
  if (a < 0) {
    negative = YES;
    a = -a;
  }
  jdouble absAtanh;
  if (a > 0.15) {
    absAtanh = 0.5 * OrgApacheCommonsMathUtilFastMath_logWithDouble_((1 + a) / (1 - a));
  }
  else {
    jdouble a2 = a * a;
    if (a > 0.087) {
      absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));
    }
    else if (a > 0.031) {
      absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));
    }
    else if (a > 0.003) {
      absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));
    }
    else {
      absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));
    }
  }
  return negative ? -absAtanh : absAtanh;
}

jdouble OrgApacheCommonsMathUtilFastMath_signumWithDouble_(jdouble a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);
}

jfloat OrgApacheCommonsMathUtilFastMath_signumWithFloat_(jfloat a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a);
}

jdouble OrgApacheCommonsMathUtilFastMath_nextUpWithDouble_(jdouble a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return OrgApacheCommonsMathUtilFastMath_nextAfterWithDouble_withDouble_(a, JavaLangDouble_POSITIVE_INFINITY);
}

jfloat OrgApacheCommonsMathUtilFastMath_nextUpWithFloat_(jfloat a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return OrgApacheCommonsMathUtilFastMath_nextAfterWithFloat_withDouble_(a, JavaLangFloat_POSITIVE_INFINITY);
}

jdouble OrgApacheCommonsMathUtilFastMath_random() {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return JavaLangMath_random();
}

jdouble OrgApacheCommonsMathUtilFastMath_expWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(x, 0.0, nil);
}

jdouble OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(jdouble x, jdouble extra, IOSDoubleArray *hiPrec) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble intPartA;
  jdouble intPartB;
  jint intVal;
  if (x < 0.0) {
    intVal = J2ObjCFpToInt(-x);
    if (intVal > 746) {
      if (hiPrec != nil) {
        *IOSDoubleArray_GetRef(hiPrec, 0) = 0.0;
        *IOSDoubleArray_GetRef(hiPrec, 1) = 0.0;
      }
      return 0.0;
    }
    if (intVal > 709) {
      jdouble result = OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(x + 40.19140625, extra, hiPrec) / 285040095144011776.0;
      if (hiPrec != nil) {
        *IOSDoubleArray_GetRef(hiPrec, 0) /= 285040095144011776.0;
        *IOSDoubleArray_GetRef(hiPrec, 1) /= 285040095144011776.0;
      }
      return result;
    }
    if (intVal == 709) {
      jdouble result = OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(x + 1.494140625, extra, hiPrec) / 4.455505956692756620;
      if (hiPrec != nil) {
        *IOSDoubleArray_GetRef(hiPrec, 0) /= 4.455505956692756620;
        *IOSDoubleArray_GetRef(hiPrec, 1) /= 4.455505956692756620;
      }
      return result;
    }
    intVal++;
    intPartA = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_A_), 750 - intVal);
    intPartB = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_B_), 750 - intVal);
    intVal = -intVal;
  }
  else {
    intVal = J2ObjCFpToInt(x);
    if (intVal > 709) {
      if (hiPrec != nil) {
        *IOSDoubleArray_GetRef(hiPrec, 0) = JavaLangDouble_POSITIVE_INFINITY;
        *IOSDoubleArray_GetRef(hiPrec, 1) = 0.0;
      }
      return JavaLangDouble_POSITIVE_INFINITY;
    }
    intPartA = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_A_), 750 + intVal);
    intPartB = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EXP_INT_TABLE_B_), 750 + intVal);
  }
  jint intFrac = J2ObjCFpToInt(((x - intVal) * 1024.0));
  jdouble fracPartA = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_A_), intFrac);
  jdouble fracPartB = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_B_), intFrac);
  jdouble epsilon = x - (intVal + intFrac / 1024.0);
  jdouble z = 0.04168701738764507;
  z = z * epsilon + 0.1666666505023083;
  z = z * epsilon + 0.5000000000042687;
  z = z * epsilon + 1.0;
  z = z * epsilon + -3.940510424527919E-20;
  jdouble tempA = intPartA * fracPartA;
  jdouble tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
  jdouble tempC = tempB + tempA;
  jdouble result;
  if (extra != 0.0) {
    result = tempC * extra * z + tempC * extra + tempC * z + tempB + tempA;
  }
  else {
    result = tempC * z + tempB + tempA;
  }
  if (hiPrec != nil) {
    *IOSDoubleArray_GetRef(hiPrec, 0) = tempA;
    *IOSDoubleArray_GetRef(hiPrec, 1) = tempC * extra * z + tempC * extra + tempC * z + tempB;
  }
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_expm1WithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return OrgApacheCommonsMathUtilFastMath_expm1WithDouble_withDoubleArray_(x, nil);
}

jdouble OrgApacheCommonsMathUtilFastMath_expm1WithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *hiPrecOut) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (x != x || x == 0.0) {
    return x;
  }
  if (x <= -1.0 || x >= 1.0) {
    IOSDoubleArray *hiPrec = [IOSDoubleArray newArrayWithLength:2];
    OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(x, 0.0, hiPrec);
    if (x > 0.0) {
      return -1.0 + IOSDoubleArray_Get(hiPrec, 0) + IOSDoubleArray_Get(hiPrec, 1);
    }
    else {
      jdouble ra = -1.0 + IOSDoubleArray_Get(hiPrec, 0);
      jdouble rb = -(ra + 1.0 - IOSDoubleArray_Get(hiPrec, 0));
      rb += IOSDoubleArray_Get(hiPrec, 1);
      return ra + rb;
    }
  }
  jdouble baseA;
  jdouble baseB;
  jdouble epsilon;
  jboolean negative = NO;
  if (x < 0.0) {
    x = -x;
    negative = YES;
  }
  {
    jint intFrac = J2ObjCFpToInt((x * 1024.0));
    jdouble tempA = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_A_), intFrac) - 1.0;
    jdouble tempB = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EXP_FRAC_TABLE_B_), intFrac);
    jdouble temp = tempA + tempB;
    tempB = -(temp - tempA - tempB);
    tempA = temp;
    temp = tempA * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    baseA = tempA + temp - temp;
    baseB = tempB + (tempA - baseA);
    epsilon = x - intFrac / 1024.0;
  }
  jdouble zb = 0.008336750013465571;
  zb = zb * epsilon + 0.041666663879186654;
  zb = zb * epsilon + 0.16666666666745392;
  zb = zb * epsilon + 0.49999999999999994;
  zb = zb * epsilon;
  zb = zb * epsilon;
  jdouble za = epsilon;
  jdouble temp = za + zb;
  zb = -(temp - za - zb);
  za = temp;
  temp = za * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  temp = za + temp - temp;
  zb += za - temp;
  za = temp;
  jdouble ya = za * baseA;
  temp = ya + za * baseB;
  jdouble yb = -(temp - ya - za * baseB);
  ya = temp;
  temp = ya + zb * baseA;
  yb += -(temp - ya - zb * baseA);
  ya = temp;
  temp = ya + zb * baseB;
  yb += -(temp - ya - zb * baseB);
  ya = temp;
  temp = ya + baseA;
  yb += -(temp - baseA - ya);
  ya = temp;
  temp = ya + za;
  yb += -(temp - ya - za);
  ya = temp;
  temp = ya + baseB;
  yb += -(temp - ya - baseB);
  ya = temp;
  temp = ya + zb;
  yb += -(temp - ya - zb);
  ya = temp;
  if (negative) {
    jdouble denom = 1.0 + ya;
    jdouble denomr = 1.0 / denom;
    jdouble denomb = -(denom - 1.0 - ya) + yb;
    jdouble ratio = ya * denomr;
    temp = ratio * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble ra = ratio + temp - temp;
    jdouble rb = ratio - ra;
    temp = denom * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    za = denom + temp - temp;
    zb = denom - za;
    rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
    rb += yb * denomr;
    rb += -ya * denomb * denomr * denomr;
    ya = -ra;
    yb = -rb;
  }
  if (hiPrecOut != nil) {
    *IOSDoubleArray_GetRef(hiPrecOut, 0) = ya;
    *IOSDoubleArray_GetRef(hiPrecOut, 1) = yb;
  }
  return ya + yb;
}

jdouble OrgApacheCommonsMathUtilFastMath_slowexpWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *result) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *xs = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *ys = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *facts = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *as = [IOSDoubleArray newArrayWithLength:2];
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(x, xs);
  *IOSDoubleArray_GetRef(ys, 0) = *IOSDoubleArray_GetRef(ys, 1) = 0.0;
  for (jint i = 19; i >= 0; i--) {
    OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, as);
    *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(as, 0);
    *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(as, 1);
    OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_FACT_), i), as);
    OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(as, facts);
    OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(ys, facts, as);
    *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(as, 0);
    *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(as, 1);
  }
  if (result != nil) {
    *IOSDoubleArray_GetRef(result, 0) = IOSDoubleArray_Get(ys, 0);
    *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(ys, 1);
  }
  return IOSDoubleArray_Get(ys, 0) + IOSDoubleArray_Get(ys, 1);
}

void OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(jdouble d, IOSDoubleArray *split) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (d < 8e298 && d > -8e298) {
    jdouble a = d * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    *IOSDoubleArray_GetRef(nil_chk(split), 0) = (d + a) - a;
    *IOSDoubleArray_GetRef(split, 1) = d - IOSDoubleArray_Get(split, 0);
  }
  else {
    jdouble a = d * 9.31322574615478515625E-10;
    *IOSDoubleArray_GetRef(nil_chk(split), 0) = (d + a - d) * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    *IOSDoubleArray_GetRef(split, 1) = d - IOSDoubleArray_Get(split, 0);
  }
}

void OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(IOSDoubleArray *a) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble c = IOSDoubleArray_Get(nil_chk(a), 0) + IOSDoubleArray_Get(a, 1);
  jdouble d = -(c - IOSDoubleArray_Get(a, 0) - IOSDoubleArray_Get(a, 1));
  if (c < 8e298 && c > -8e298) {
    jdouble z = c * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    *IOSDoubleArray_GetRef(a, 0) = (c + z) - z;
    *IOSDoubleArray_GetRef(a, 1) = c - IOSDoubleArray_Get(a, 0) + d;
  }
  else {
    jdouble z = c * 9.31322574615478515625E-10;
    *IOSDoubleArray_GetRef(a, 0) = (c + z - c) * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    *IOSDoubleArray_GetRef(a, 1) = c - IOSDoubleArray_Get(a, 0) + d;
  }
}

void OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, IOSDoubleArray *ans) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  *IOSDoubleArray_GetRef(nil_chk(ans), 0) = IOSDoubleArray_Get(nil_chk(a), 0) * IOSDoubleArray_Get(nil_chk(b), 0);
  *IOSDoubleArray_GetRef(ans, 1) = IOSDoubleArray_Get(a, 0) * IOSDoubleArray_Get(b, 1) + IOSDoubleArray_Get(a, 1) * IOSDoubleArray_Get(b, 0) + IOSDoubleArray_Get(a, 1) * IOSDoubleArray_Get(b, 1);
  OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(ans);
}

void OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, IOSDoubleArray *ans) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  *IOSDoubleArray_GetRef(nil_chk(ans), 0) = IOSDoubleArray_Get(nil_chk(a), 0) + IOSDoubleArray_Get(nil_chk(b), 0);
  *IOSDoubleArray_GetRef(ans, 1) = IOSDoubleArray_Get(a, 1) + IOSDoubleArray_Get(b, 1);
  OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(ans);
}

void OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(IOSDoubleArray *inArg, IOSDoubleArray *result) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble b = 1.0 / 4194304.0;
  jdouble a = 1.0 - b;
  if (IOSDoubleArray_Get(nil_chk(inArg), 0) == 0.0) {
    *IOSDoubleArray_GetRef(inArg, 0) = IOSDoubleArray_Get(inArg, 1);
    *IOSDoubleArray_GetRef(inArg, 1) = 0.0;
  }
  *IOSDoubleArray_GetRef(nil_chk(result), 0) = a / IOSDoubleArray_Get(inArg, 0);
  *IOSDoubleArray_GetRef(result, 1) = (b * IOSDoubleArray_Get(inArg, 0) - a * IOSDoubleArray_Get(inArg, 1)) / (IOSDoubleArray_Get(inArg, 0) * IOSDoubleArray_Get(inArg, 0) + IOSDoubleArray_Get(inArg, 0) * IOSDoubleArray_Get(inArg, 1));
  if (IOSDoubleArray_Get(result, 1) != IOSDoubleArray_Get(result, 1)) {
    *IOSDoubleArray_GetRef(result, 1) = 0.0;
  }
  OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(result);
  for (jint i = 0; i < 2; i++) {
    jdouble err = 1.0 - IOSDoubleArray_Get(result, 0) * IOSDoubleArray_Get(inArg, 0) - IOSDoubleArray_Get(result, 0) * IOSDoubleArray_Get(inArg, 1) - IOSDoubleArray_Get(result, 1) * IOSDoubleArray_Get(inArg, 0) - IOSDoubleArray_Get(result, 1) * IOSDoubleArray_Get(inArg, 1);
    err = err * (IOSDoubleArray_Get(result, 0) + IOSDoubleArray_Get(result, 1));
    *IOSDoubleArray_GetRef(result, 1) += err;
  }
}

void OrgApacheCommonsMathUtilFastMath_quadMultWithDoubleArray_withDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, IOSDoubleArray *result) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *xs = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *ys = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *zs = [IOSDoubleArray newArrayWithLength:2];
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(nil_chk(a), 0), xs);
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(nil_chk(b), 0), ys);
  OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, zs);
  *IOSDoubleArray_GetRef(nil_chk(result), 0) = IOSDoubleArray_Get(zs, 0);
  *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(zs, 1);
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(b, 1), ys);
  OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, zs);
  jdouble tmp = IOSDoubleArray_Get(result, 0) + IOSDoubleArray_Get(zs, 0);
  *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(result, 1) - (tmp - IOSDoubleArray_Get(result, 0) - IOSDoubleArray_Get(zs, 0));
  *IOSDoubleArray_GetRef(result, 0) = tmp;
  tmp = IOSDoubleArray_Get(result, 0) + IOSDoubleArray_Get(zs, 1);
  *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(result, 1) - (tmp - IOSDoubleArray_Get(result, 0) - IOSDoubleArray_Get(zs, 1));
  *IOSDoubleArray_GetRef(result, 0) = tmp;
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(a, 1), xs);
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(b, 0), ys);
  OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, zs);
  tmp = IOSDoubleArray_Get(result, 0) + IOSDoubleArray_Get(zs, 0);
  *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(result, 1) - (tmp - IOSDoubleArray_Get(result, 0) - IOSDoubleArray_Get(zs, 0));
  *IOSDoubleArray_GetRef(result, 0) = tmp;
  tmp = IOSDoubleArray_Get(result, 0) + IOSDoubleArray_Get(zs, 1);
  *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(result, 1) - (tmp - IOSDoubleArray_Get(result, 0) - IOSDoubleArray_Get(zs, 1));
  *IOSDoubleArray_GetRef(result, 0) = tmp;
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(a, 1), xs);
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(b, 1), ys);
  OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, zs);
  tmp = IOSDoubleArray_Get(result, 0) + IOSDoubleArray_Get(zs, 0);
  *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(result, 1) - (tmp - IOSDoubleArray_Get(result, 0) - IOSDoubleArray_Get(zs, 0));
  *IOSDoubleArray_GetRef(result, 0) = tmp;
  tmp = IOSDoubleArray_Get(result, 0) + IOSDoubleArray_Get(zs, 1);
  *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(result, 1) - (tmp - IOSDoubleArray_Get(result, 0) - IOSDoubleArray_Get(zs, 1));
  *IOSDoubleArray_GetRef(result, 0) = tmp;
}

jdouble OrgApacheCommonsMathUtilFastMath_expintWithInt_withDoubleArray_(jint p, IOSDoubleArray *result) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *xs = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *as = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *ys = [IOSDoubleArray newArrayWithLength:2];
  *IOSDoubleArray_GetRef(xs, 0) = 2.718281828459045;
  *IOSDoubleArray_GetRef(xs, 1) = 1.4456468917292502E-16;
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(1.0, ys);
  while (p > 0) {
    if ((p & 1) != 0) {
      OrgApacheCommonsMathUtilFastMath_quadMultWithDoubleArray_withDoubleArray_withDoubleArray_(ys, xs, as);
      *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(as, 0);
      *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(as, 1);
    }
    OrgApacheCommonsMathUtilFastMath_quadMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, xs, as);
    *IOSDoubleArray_GetRef(xs, 0) = IOSDoubleArray_Get(as, 0);
    *IOSDoubleArray_GetRef(xs, 1) = IOSDoubleArray_Get(as, 1);
    RShiftAssignInt(&p, 1);
  }
  if (result != nil) {
    *IOSDoubleArray_GetRef(result, 0) = IOSDoubleArray_Get(ys, 0);
    *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(ys, 1);
    OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(result);
  }
  return IOSDoubleArray_Get(ys, 0) + IOSDoubleArray_Get(ys, 1);
}

jdouble OrgApacheCommonsMathUtilFastMath_logWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return OrgApacheCommonsMathUtilFastMath_logWithDouble_withDoubleArray_(x, nil);
}

jdouble OrgApacheCommonsMathUtilFastMath_logWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *hiPrec) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (x == 0) {
    return JavaLangDouble_NEGATIVE_INFINITY;
  }
  jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(x);
  if ((bits & -0x7fffffffffffffffLL - 1) != 0 || x != x) {
    if (x != 0.0) {
      if (hiPrec != nil) {
        *IOSDoubleArray_GetRef(hiPrec, 0) = JavaLangDouble_NaN;
      }
      return JavaLangDouble_NaN;
    }
  }
  if (x == JavaLangDouble_POSITIVE_INFINITY) {
    if (hiPrec != nil) {
      *IOSDoubleArray_GetRef(hiPrec, 0) = JavaLangDouble_POSITIVE_INFINITY;
    }
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  jint exp = (jint) (RShift64(bits, 52)) - 1023;
  if ((bits & (jlong) 0x7ff0000000000000LL) == 0) {
    if (x == 0) {
      if (hiPrec != nil) {
        *IOSDoubleArray_GetRef(hiPrec, 0) = JavaLangDouble_NEGATIVE_INFINITY;
      }
      return JavaLangDouble_NEGATIVE_INFINITY;
    }
    LShiftAssignLong(&bits, 1);
    while ((bits & (jlong) 0x0010000000000000LL) == 0) {
      exp--;
      LShiftAssignLong(&bits, 1);
    }
  }
  if (exp == -1 || exp == 0) {
    if (x < 1.01 && x > 0.99 && hiPrec == nil) {
      jdouble xa = x - 1.0;
      jdouble xb = xa - x + 1.0;
      jdouble tmp = xa * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
      jdouble aa = xa + tmp - tmp;
      jdouble ab = xa - aa;
      xa = aa;
      xb = ab;
      jdouble ya = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_, ((IOSObjectArray *) nil_chk(OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_))->size_ - 1)), 0);
      jdouble yb = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_, OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_->size_ - 1)), 1);
      for (jint i = OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_->size_ - 2; i >= 0; i--) {
        aa = ya * xa;
        ab = ya * xb + yb * xa + yb * xb;
        tmp = aa * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
        ya = aa + tmp - tmp;
        yb = aa - ya + ab;
        aa = ya + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_, i)), 0);
        ab = yb + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_QUICK_COEF_, i)), 1);
        tmp = aa * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
        ya = aa + tmp - tmp;
        yb = aa - ya + ab;
      }
      aa = ya * xa;
      ab = ya * xb + yb * xa + yb * xb;
      tmp = aa * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
      ya = aa + tmp - tmp;
      yb = aa - ya + ab;
      return ya + yb;
    }
  }
  IOSDoubleArray *lnm = IOSObjectArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_LN_MANT_), (jint) (RShift64((bits & (jlong) 0x000ffc0000000000LL), 42)));
  jdouble epsilon = (bits & (jlong) 0x3ffffffffffLL) / (OrgApacheCommonsMathUtilFastMath_TWO_POWER_52 + (bits & (jlong) 0x000ffc0000000000LL));
  jdouble lnza = 0.0;
  jdouble lnzb = 0.0;
  if (hiPrec != nil) {
    jdouble tmp = epsilon * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble aa = epsilon + tmp - tmp;
    jdouble ab = epsilon - aa;
    jdouble xa = aa;
    jdouble xb = ab;
    jdouble numer = bits & (jlong) 0x3ffffffffffLL;
    jdouble denom = OrgApacheCommonsMathUtilFastMath_TWO_POWER_52 + (bits & (jlong) 0x000ffc0000000000LL);
    aa = numer - xa * denom - xb * denom;
    xb += aa / denom;
    jdouble ya = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_, ((IOSObjectArray *) nil_chk(OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_))->size_ - 1)), 0);
    jdouble yb = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_, OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_->size_ - 1)), 1);
    for (jint i = OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_->size_ - 2; i >= 0; i--) {
      aa = ya * xa;
      ab = ya * xb + yb * xa + yb * xb;
      tmp = aa * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
      ya = aa + tmp - tmp;
      yb = aa - ya + ab;
      aa = ya + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_, i)), 0);
      ab = yb + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_HI_PREC_COEF_, i)), 1);
      tmp = aa * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
      ya = aa + tmp - tmp;
      yb = aa - ya + ab;
    }
    aa = ya * xa;
    ab = ya * xb + yb * xa + yb * xb;
    lnza = aa + ab;
    lnzb = -(lnza - aa - ab);
  }
  else {
    lnza = -0.16624882440418567;
    lnza = lnza * epsilon + 0.19999954120254515;
    lnza = lnza * epsilon + -0.2499999997677497;
    lnza = lnza * epsilon + 0.3333333333332802;
    lnza = lnza * epsilon + -0.5;
    lnza = lnza * epsilon + 1.0;
    lnza = lnza * epsilon;
  }
  jdouble a = OrgApacheCommonsMathUtilFastMath_LN_2_A * exp;
  jdouble b = 0.0;
  jdouble c = a + IOSDoubleArray_Get(nil_chk(lnm), 0);
  jdouble d = -(c - a - IOSDoubleArray_Get(lnm, 0));
  a = c;
  b = b + d;
  c = a + lnza;
  d = -(c - a - lnza);
  a = c;
  b = b + d;
  c = a + OrgApacheCommonsMathUtilFastMath_LN_2_B * exp;
  d = -(c - a - OrgApacheCommonsMathUtilFastMath_LN_2_B * exp);
  a = c;
  b = b + d;
  c = a + IOSDoubleArray_Get(lnm, 1);
  d = -(c - a - IOSDoubleArray_Get(lnm, 1));
  a = c;
  b = b + d;
  c = a + lnzb;
  d = -(c - a - lnzb);
  a = c;
  b = b + d;
  if (hiPrec != nil) {
    *IOSDoubleArray_GetRef(hiPrec, 0) = a;
    *IOSDoubleArray_GetRef(hiPrec, 1) = b;
  }
  return a + b;
}

jdouble OrgApacheCommonsMathUtilFastMath_log1pWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble xpa = 1.0 + x;
  jdouble xpb = -(xpa - 1.0 - x);
  if (x == -1) {
    return x / 0.0;
  }
  if (x > 0 && 1 / x == 0) {
    return x;
  }
  if (x > 1e-6 || x < -1e-6) {
    IOSDoubleArray *hiPrec = [IOSDoubleArray newArrayWithLength:2];
    jdouble lores = OrgApacheCommonsMathUtilFastMath_logWithDouble_withDoubleArray_(xpa, hiPrec);
    if (JavaLangDouble_isInfiniteWithDouble_(lores)) {
      return lores;
    }
    jdouble fx1 = xpb / xpa;
    jdouble epsilon = 0.5 * fx1 + 1.0;
    epsilon = epsilon * fx1;
    return epsilon + IOSDoubleArray_Get(hiPrec, 1) + IOSDoubleArray_Get(hiPrec, 0);
  }
  jdouble y = x * 0.333333333333333 - 0.5;
  y = y * x + 1.0;
  y = y * x;
  return y;
}

jdouble OrgApacheCommonsMathUtilFastMath_log10WithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *hiPrec = [IOSDoubleArray newArrayWithLength:2];
  jdouble lores = OrgApacheCommonsMathUtilFastMath_logWithDouble_withDoubleArray_(x, hiPrec);
  if (JavaLangDouble_isInfiniteWithDouble_(lores)) {
    return lores;
  }
  jdouble tmp = IOSDoubleArray_Get(hiPrec, 0) * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble lna = IOSDoubleArray_Get(hiPrec, 0) + tmp - tmp;
  jdouble lnb = IOSDoubleArray_Get(hiPrec, 0) - lna + IOSDoubleArray_Get(hiPrec, 1);
  jdouble rln10a = 0.4342944622039795;
  jdouble rln10b = 1.9699272335463627E-8;
  return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
}

jdouble OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(jdouble x, jdouble y) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *lns = [IOSDoubleArray newArrayWithLength:2];
  if (y == 0.0) {
    return 1.0;
  }
  if (x != x) {
    return x;
  }
  if (x == 0) {
    jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(x);
    if ((bits & -0x7fffffffffffffffLL - 1) != 0) {
      jlong yi = J2ObjCFpToLong(y);
      if (y < 0 && y == yi && (yi & 1) == 1) {
        return JavaLangDouble_NEGATIVE_INFINITY;
      }
      if (y < 0 && y == yi && (yi & 1) == 1) {
        return -0.0;
      }
      if (y > 0 && y == yi && (yi & 1) == 1) {
        return -0.0;
      }
    }
    if (y < 0) {
      return JavaLangDouble_POSITIVE_INFINITY;
    }
    if (y > 0) {
      return 0.0;
    }
    return JavaLangDouble_NaN;
  }
  if (x == JavaLangDouble_POSITIVE_INFINITY) {
    if (y != y) {
      return y;
    }
    if (y < 0.0) {
      return 0.0;
    }
    else {
      return JavaLangDouble_POSITIVE_INFINITY;
    }
  }
  if (y == JavaLangDouble_POSITIVE_INFINITY) {
    if (x * x == 1.0) return JavaLangDouble_NaN;
    if (x * x > 1.0) {
      return JavaLangDouble_POSITIVE_INFINITY;
    }
    else {
      return 0.0;
    }
  }
  if (x == JavaLangDouble_NEGATIVE_INFINITY) {
    if (y != y) {
      return y;
    }
    if (y < 0) {
      jlong yi = J2ObjCFpToLong(y);
      if (y == yi && (yi & 1) == 1) {
        return -0.0;
      }
      return 0.0;
    }
    if (y > 0) {
      jlong yi = J2ObjCFpToLong(y);
      if (y == yi && (yi & 1) == 1) {
        return JavaLangDouble_NEGATIVE_INFINITY;
      }
      return JavaLangDouble_POSITIVE_INFINITY;
    }
  }
  if (y == JavaLangDouble_NEGATIVE_INFINITY) {
    if (x * x == 1.0) {
      return JavaLangDouble_NaN;
    }
    if (x * x < 1.0) {
      return JavaLangDouble_POSITIVE_INFINITY;
    }
    else {
      return 0.0;
    }
  }
  if (x < 0) {
    if (y >= OrgApacheCommonsMathUtilFastMath_TWO_POWER_52 || y <= -OrgApacheCommonsMathUtilFastMath_TWO_POWER_52) {
      return OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(-x, y);
    }
    if (y == J2ObjCFpToLong(y)) {
      return (J2ObjCFpToLong(y) & 1) == 0 ? OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(-x, y) : -OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(-x, y);
    }
    else {
      return JavaLangDouble_NaN;
    }
  }
  jdouble ya;
  jdouble yb;
  if (y < 8e298 && y > -8e298) {
    jdouble tmp1 = y * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    ya = y + tmp1 - tmp1;
    yb = y - ya;
  }
  else {
    jdouble tmp1 = y * 9.31322574615478515625E-10;
    jdouble tmp2 = tmp1 * 9.31322574615478515625E-10;
    ya = (tmp1 + tmp2 - tmp1) * OrgApacheCommonsMathUtilFastMath_HEX_40000000 * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    yb = y - ya;
  }
  jdouble lores = OrgApacheCommonsMathUtilFastMath_logWithDouble_withDoubleArray_(x, lns);
  if (JavaLangDouble_isInfiniteWithDouble_(lores)) {
    return lores;
  }
  jdouble lna = IOSDoubleArray_Get(lns, 0);
  jdouble lnb = IOSDoubleArray_Get(lns, 1);
  jdouble tmp1 = lna * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble tmp2 = lna + tmp1 - tmp1;
  lnb += lna - tmp2;
  lna = tmp2;
  jdouble aa = lna * ya;
  jdouble ab = lna * yb + lnb * ya + lnb * yb;
  lna = aa + ab;
  lnb = -(lna - aa - ab);
  jdouble z = 1.0 / 120.0;
  z = z * lnb + (1.0 / 24.0);
  z = z * lnb + (1.0 / 6.0);
  z = z * lnb + 0.5;
  z = z * lnb + 1.0;
  z = z * lnb;
  jdouble result = OrgApacheCommonsMathUtilFastMath_expWithDouble_withDouble_withDoubleArray_(lna, z, nil);
  return result;
}

IOSDoubleArray *OrgApacheCommonsMathUtilFastMath_slowLogWithDouble_(jdouble xi) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *x = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *x2 = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *y = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *a = [IOSDoubleArray newArrayWithLength:2];
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(xi, x);
  *IOSDoubleArray_GetRef(x, 0) += 1.0;
  OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(x);
  OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(x, a);
  *IOSDoubleArray_GetRef(x, 0) -= 2.0;
  OrgApacheCommonsMathUtilFastMath_resplitWithDoubleArray_(x);
  OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(x, a, y);
  *IOSDoubleArray_GetRef(x, 0) = IOSDoubleArray_Get(y, 0);
  *IOSDoubleArray_GetRef(x, 1) = IOSDoubleArray_Get(y, 1);
  OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(x, x, x2);
  *IOSDoubleArray_GetRef(y, 0) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_, ((IOSObjectArray *) nil_chk(OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_))->size_ - 1)), 0);
  *IOSDoubleArray_GetRef(y, 1) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_, OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_->size_ - 1)), 1);
  for (jint i = OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_->size_ - 2; i >= 0; i--) {
    OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(y, x2, a);
    *IOSDoubleArray_GetRef(y, 0) = IOSDoubleArray_Get(a, 0);
    *IOSDoubleArray_GetRef(y, 1) = IOSDoubleArray_Get(a, 1);
    OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(y, IOSObjectArray_Get(OrgApacheCommonsMathUtilFastMath_LN_SPLIT_COEF_, i), a);
    *IOSDoubleArray_GetRef(y, 0) = IOSDoubleArray_Get(a, 0);
    *IOSDoubleArray_GetRef(y, 1) = IOSDoubleArray_Get(a, 1);
  }
  OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(y, x, a);
  *IOSDoubleArray_GetRef(y, 0) = IOSDoubleArray_Get(a, 0);
  *IOSDoubleArray_GetRef(y, 1) = IOSDoubleArray_Get(a, 1);
  return y;
}

jdouble OrgApacheCommonsMathUtilFastMath_slowSinWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *result) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *xs = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *ys = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *facts = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *as = [IOSDoubleArray newArrayWithLength:2];
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(x, xs);
  *IOSDoubleArray_GetRef(ys, 0) = *IOSDoubleArray_GetRef(ys, 1) = 0.0;
  for (jint i = 19; i >= 0; i--) {
    OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, as);
    *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(as, 0);
    *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(as, 1);
    if ((i & 1) == 0) {
      continue;
    }
    OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_FACT_), i), as);
    OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(as, facts);
    if ((i & 2) != 0) {
      *IOSDoubleArray_GetRef(facts, 0) = -IOSDoubleArray_Get(facts, 0);
      *IOSDoubleArray_GetRef(facts, 1) = -IOSDoubleArray_Get(facts, 1);
    }
    OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(ys, facts, as);
    *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(as, 0);
    *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(as, 1);
  }
  if (result != nil) {
    *IOSDoubleArray_GetRef(result, 0) = IOSDoubleArray_Get(ys, 0);
    *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(ys, 1);
  }
  return IOSDoubleArray_Get(ys, 0) + IOSDoubleArray_Get(ys, 1);
}

jdouble OrgApacheCommonsMathUtilFastMath_slowCosWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *result) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *xs = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *ys = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *facts = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *as = [IOSDoubleArray newArrayWithLength:2];
  OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(x, xs);
  *IOSDoubleArray_GetRef(ys, 0) = *IOSDoubleArray_GetRef(ys, 1) = 0.0;
  for (jint i = 19; i >= 0; i--) {
    OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, as);
    *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(as, 0);
    *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(as, 1);
    if ((i & 1) != 0) {
      continue;
    }
    OrgApacheCommonsMathUtilFastMath_splitWithDouble_withDoubleArray_(IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_FACT_), i), as);
    OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(as, facts);
    if ((i & 2) != 0) {
      *IOSDoubleArray_GetRef(facts, 0) = -IOSDoubleArray_Get(facts, 0);
      *IOSDoubleArray_GetRef(facts, 1) = -IOSDoubleArray_Get(facts, 1);
    }
    OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(ys, facts, as);
    *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(as, 0);
    *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(as, 1);
  }
  if (result != nil) {
    *IOSDoubleArray_GetRef(result, 0) = IOSDoubleArray_Get(ys, 0);
    *IOSDoubleArray_GetRef(result, 1) = IOSDoubleArray_Get(ys, 1);
  }
  return IOSDoubleArray_Get(ys, 0) + IOSDoubleArray_Get(ys, 1);
}

void OrgApacheCommonsMathUtilFastMath_buildSinCosTables() {
  OrgApacheCommonsMathUtilFastMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:2];
  for (jint i = 0; i < 7; i++) {
    jdouble x = i / 8.0;
    OrgApacheCommonsMathUtilFastMath_slowSinWithDouble_withDoubleArray_(x, result);
    *IOSDoubleArray_GetRef(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_), i) = IOSDoubleArray_Get(result, 0);
    *IOSDoubleArray_GetRef(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_), i) = IOSDoubleArray_Get(result, 1);
    OrgApacheCommonsMathUtilFastMath_slowCosWithDouble_withDoubleArray_(x, result);
    *IOSDoubleArray_GetRef(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_), i) = IOSDoubleArray_Get(result, 0);
    *IOSDoubleArray_GetRef(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_), i) = IOSDoubleArray_Get(result, 1);
  }
  for (jint i = 7; i < 14; i++) {
    IOSDoubleArray *xs = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *ys = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *as = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *bs = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *temps = [IOSDoubleArray newArrayWithLength:2];
    if ((i & 1) == 0) {
      *IOSDoubleArray_GetRef(xs, 0) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_), i / 2);
      *IOSDoubleArray_GetRef(xs, 1) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_), i / 2);
      *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_), i / 2);
      *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_), i / 2);
      OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, result);
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_, i) = IOSDoubleArray_Get(result, 0) * 2.0;
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_, i) = IOSDoubleArray_Get(result, 1) * 2.0;
      OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(ys, ys, as);
      OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, xs, temps);
      *IOSDoubleArray_GetRef(temps, 0) = -IOSDoubleArray_Get(temps, 0);
      *IOSDoubleArray_GetRef(temps, 1) = -IOSDoubleArray_Get(temps, 1);
      OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(as, temps, result);
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_, i) = IOSDoubleArray_Get(result, 0);
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_, i) = IOSDoubleArray_Get(result, 1);
    }
    else {
      *IOSDoubleArray_GetRef(xs, 0) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_), i / 2);
      *IOSDoubleArray_GetRef(xs, 1) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_), i / 2);
      *IOSDoubleArray_GetRef(ys, 0) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_), i / 2);
      *IOSDoubleArray_GetRef(ys, 1) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_), i / 2);
      *IOSDoubleArray_GetRef(as, 0) = IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_, i / 2 + 1);
      *IOSDoubleArray_GetRef(as, 1) = IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_, i / 2 + 1);
      *IOSDoubleArray_GetRef(bs, 0) = IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_, i / 2 + 1);
      *IOSDoubleArray_GetRef(bs, 1) = IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_, i / 2 + 1);
      OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, bs, temps);
      OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(ys, as, result);
      OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(result, temps, result);
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_, i) = IOSDoubleArray_Get(result, 0);
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_, i) = IOSDoubleArray_Get(result, 1);
      OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(ys, bs, result);
      OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, as, temps);
      *IOSDoubleArray_GetRef(temps, 0) = -IOSDoubleArray_Get(temps, 0);
      *IOSDoubleArray_GetRef(temps, 1) = -IOSDoubleArray_Get(temps, 1);
      OrgApacheCommonsMathUtilFastMath_splitAddWithDoubleArray_withDoubleArray_withDoubleArray_(result, temps, result);
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_, i) = IOSDoubleArray_Get(result, 0);
      *IOSDoubleArray_GetRef(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_, i) = IOSDoubleArray_Get(result, 1);
    }
  }
  for (jint i = 0; i < 14; i++) {
    IOSDoubleArray *xs = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *ys = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *as = [IOSDoubleArray newArrayWithLength:2];
    *IOSDoubleArray_GetRef(as, 0) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_), i);
    *IOSDoubleArray_GetRef(as, 1) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_), i);
    OrgApacheCommonsMathUtilFastMath_splitReciprocalWithDoubleArray_withDoubleArray_(as, ys);
    *IOSDoubleArray_GetRef(xs, 0) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_), i);
    *IOSDoubleArray_GetRef(xs, 1) = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_), i);
    OrgApacheCommonsMathUtilFastMath_splitMultWithDoubleArray_withDoubleArray_withDoubleArray_(xs, ys, as);
    *IOSDoubleArray_GetRef(nil_chk(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_), i) = IOSDoubleArray_Get(as, 0);
    *IOSDoubleArray_GetRef(nil_chk(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_B_), i) = IOSDoubleArray_Get(as, 1);
  }
}

jdouble OrgApacheCommonsMathUtilFastMath_polySineWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble x2 = x * x;
  jdouble p = 2.7553817452272217E-6;
  p = p * x2 + -1.9841269659586505E-4;
  p = p * x2 + 0.008333333333329196;
  p = p * x2 + -0.16666666666666666;
  p = p * x2 * x;
  return p;
}

jdouble OrgApacheCommonsMathUtilFastMath_polyCosineWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble x2 = x * x;
  jdouble p = 2.479773539153719E-5;
  p = p * x2 + -0.0013888888689039883;
  p = p * x2 + 0.041666666666621166;
  p = p * x2 + -0.49999999999999994;
  p *= x2;
  return p;
}

jdouble OrgApacheCommonsMathUtilFastMath_sinQWithDouble_withDouble_(jdouble xa, jdouble xb) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jint idx = J2ObjCFpToInt(((xa * 8.0) + 0.5));
  jdouble epsilon = xa - IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EIGHTHS_), idx);
  jdouble sintA = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_), idx);
  jdouble sintB = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_), idx);
  jdouble costA = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_), idx);
  jdouble costB = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_), idx);
  jdouble sinEpsA = epsilon;
  jdouble sinEpsB = OrgApacheCommonsMathUtilFastMath_polySineWithDouble_(epsilon);
  jdouble cosEpsA = 1.0;
  jdouble cosEpsB = OrgApacheCommonsMathUtilFastMath_polyCosineWithDouble_(epsilon);
  jdouble temp = sinEpsA * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble temp2 = (sinEpsA + temp) - temp;
  sinEpsB += sinEpsA - temp2;
  sinEpsA = temp2;
  jdouble result;
  jdouble a = 0;
  jdouble b = 0;
  jdouble t = sintA;
  jdouble c = a + t;
  jdouble d = -(c - a - t);
  a = c;
  b = b + d;
  t = costA * sinEpsA;
  c = a + t;
  d = -(c - a - t);
  a = c;
  b = b + d;
  b = b + sintA * cosEpsB + costA * sinEpsB;
  b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
  if (xb != 0.0) {
    t = ((costA + costB) * (cosEpsA + cosEpsB) - (sintA + sintB) * (sinEpsA + sinEpsB)) * xb;
    c = a + t;
    d = -(c - a - t);
    a = c;
    b = b + d;
  }
  result = a + b;
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_cosQWithDouble_withDouble_(jdouble xa, jdouble xb) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble pi2a = 1.5707963267948966;
  jdouble pi2b = 6.123233995736766E-17;
  jdouble a = pi2a - xa;
  jdouble b = -(a - pi2a + xa);
  b += pi2b - xb;
  return OrgApacheCommonsMathUtilFastMath_sinQWithDouble_withDouble_(a, b);
}

jdouble OrgApacheCommonsMathUtilFastMath_tanQWithDouble_withDouble_withBoolean_(jdouble xa, jdouble xb, jboolean cotanFlag) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jint idx = J2ObjCFpToInt(((xa * 8.0) + 0.5));
  jdouble epsilon = xa - IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EIGHTHS_), idx);
  jdouble sintA = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_A_), idx);
  jdouble sintB = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_SINE_TABLE_B_), idx);
  jdouble costA = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_A_), idx);
  jdouble costB = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_COSINE_TABLE_B_), idx);
  jdouble sinEpsA = epsilon;
  jdouble sinEpsB = OrgApacheCommonsMathUtilFastMath_polySineWithDouble_(epsilon);
  jdouble cosEpsA = 1.0;
  jdouble cosEpsB = OrgApacheCommonsMathUtilFastMath_polyCosineWithDouble_(epsilon);
  jdouble temp = sinEpsA * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble temp2 = (sinEpsA + temp) - temp;
  sinEpsB += sinEpsA - temp2;
  sinEpsA = temp2;
  jdouble a = 0;
  jdouble b = 0;
  jdouble t = sintA;
  jdouble c = a + t;
  jdouble d = -(c - a - t);
  a = c;
  b = b + d;
  t = costA * sinEpsA;
  c = a + t;
  d = -(c - a - t);
  a = c;
  b = b + d;
  b = b + sintA * cosEpsB + costA * sinEpsB;
  b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
  jdouble sina = a + b;
  jdouble sinb = -(sina - a - b);
  a = b = c = d = 0.0;
  t = costA * cosEpsA;
  c = a + t;
  d = -(c - a - t);
  a = c;
  b = b + d;
  t = -sintA * sinEpsA;
  c = a + t;
  d = -(c - a - t);
  a = c;
  b = b + d;
  b = b + costB * cosEpsA + costA * cosEpsB + costB * cosEpsB;
  b = b - (sintB * sinEpsA + sintA * sinEpsB + sintB * sinEpsB);
  jdouble cosa = a + b;
  jdouble cosb = -(cosa - a - b);
  if (cotanFlag) {
    jdouble tmp;
    tmp = cosa;
    cosa = sina;
    sina = tmp;
    tmp = cosb;
    cosb = sinb;
    sinb = tmp;
  }
  jdouble est = sina / cosa;
  temp = est * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble esta = (est + temp) - temp;
  jdouble estb = est - esta;
  temp = cosa * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble cosaa = (cosa + temp) - temp;
  jdouble cosab = cosa - cosaa;
  jdouble err = (sina - esta * cosaa - esta * cosab - estb * cosaa - estb * cosab) / cosa;
  err += sinb / cosa;
  err += -sina * cosb / cosa / cosa;
  if (xb != 0.0) {
    jdouble xbadj = xb + est * est * xb;
    if (cotanFlag) {
      xbadj = -xbadj;
    }
    err += xbadj;
  }
  return est + err;
}

void OrgApacheCommonsMathUtilFastMath_reducePayneHanekWithDouble_withDoubleArray_(jdouble x, IOSDoubleArray *result) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jlong inbits = JavaLangDouble_doubleToLongBitsWithDouble_(x);
  jint exponent = (jint) ((RShift64(inbits, 52)) & (jint) 0x7ff) - 1023;
  inbits &= (jlong) 0x000fffffffffffffLL;
  inbits |= (jlong) 0x0010000000000000LL;
  exponent++;
  LShiftAssignLong(&inbits, 11);
  jlong shpi0;
  jlong shpiA;
  jlong shpiB;
  jint idx = RShift32(exponent, 6);
  jint shift = exponent - (LShift32(idx, 6));
  if (shift != 0) {
    shpi0 = (idx == 0) ? 0 : (LShift64(IOSLongArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_), idx - 1), shift));
    shpi0 |= URShift64(IOSLongArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_), idx), (64 - shift));
    shpiA = (LShift64(IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_, idx), shift)) | (URShift64(IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_, idx + 1), (64 - shift)));
    shpiB = (LShift64(IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_, idx + 1), shift)) | (URShift64(IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_, idx + 2), (64 - shift)));
  }
  else {
    shpi0 = (idx == 0) ? 0 : IOSLongArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_), idx - 1);
    shpiA = IOSLongArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_), idx);
    shpiB = IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_RECIP_2PI_, idx + 1);
  }
  jlong a = URShift64(inbits, 32);
  jlong b = inbits & (jlong) 0xffffffffLL;
  jlong c = URShift64(shpiA, 32);
  jlong d = shpiA & (jlong) 0xffffffffLL;
  jlong ac = a * c;
  jlong bd = b * d;
  jlong bc = b * c;
  jlong ad = a * d;
  jlong prodB = bd + (LShift64(ad, 32));
  jlong prodA = ac + (URShift64(ad, 32));
  jboolean bita = (bd & -0x7fffffffffffffffLL - 1) != 0;
  jboolean bitb = (ad & (jlong) 0x80000000LL) != 0;
  jboolean bitsum = (prodB & -0x7fffffffffffffffLL - 1) != 0;
  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {
    prodA++;
  }
  bita = ((prodB & -0x7fffffffffffffffLL - 1) != 0);
  bitb = ((bc & (jlong) 0x80000000LL) != 0);
  prodB = prodB + (LShift64(bc, 32));
  prodA = prodA + (URShift64(bc, 32));
  bitsum = ((prodB & -0x7fffffffffffffffLL - 1) != 0);
  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {
    prodA++;
  }
  c = URShift64(shpiB, 32);
  d = shpiB & (jlong) 0xffffffffLL;
  ac = a * c;
  bc = b * c;
  ad = a * d;
  ac = ac + (URShift64((bc + ad), 32));
  bita = ((prodB & -0x7fffffffffffffffLL - 1) != 0);
  bitb = ((ac & -0x7fffffffffffffffLL - 1) != 0);
  prodB += ac;
  bitsum = ((prodB & -0x7fffffffffffffffLL - 1) != 0);
  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {
    prodA++;
  }
  c = URShift64(shpi0, 32);
  d = shpi0 & (jlong) 0xffffffffLL;
  bd = b * d;
  bc = b * c;
  ad = a * d;
  prodA += bd + (LShift64((bc + ad), 32));
  jint intPart = (jint) (URShift64(prodA, 62));
  LShiftAssignLong(&prodA, 2);
  prodA |= URShift64(prodB, 62);
  LShiftAssignLong(&prodB, 2);
  a = URShift64(prodA, 32);
  b = prodA & (jlong) 0xffffffffLL;
  c = URShift64(IOSLongArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_), 0), 32);
  d = IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_, 0) & (jlong) 0xffffffffLL;
  ac = a * c;
  bd = b * d;
  bc = b * c;
  ad = a * d;
  jlong prod2B = bd + (LShift64(ad, 32));
  jlong prod2A = ac + (URShift64(ad, 32));
  bita = ((bd & -0x7fffffffffffffffLL - 1) != 0);
  bitb = ((ad & (jlong) 0x80000000LL) != 0);
  bitsum = ((prod2B & -0x7fffffffffffffffLL - 1) != 0);
  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {
    prod2A++;
  }
  bita = ((prod2B & -0x7fffffffffffffffLL - 1) != 0);
  bitb = ((bc & (jlong) 0x80000000LL) != 0);
  prod2B = prod2B + (LShift64(bc, 32));
  prod2A = prod2A + (URShift64(bc, 32));
  bitsum = ((prod2B & -0x7fffffffffffffffLL - 1) != 0);
  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {
    prod2A++;
  }
  c = URShift64(IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_, 1), 32);
  d = IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_, 1) & (jlong) 0xffffffffLL;
  ac = a * c;
  bc = b * c;
  ad = a * d;
  ac = ac + (URShift64((bc + ad), 32));
  bita = ((prod2B & -0x7fffffffffffffffLL - 1) != 0);
  bitb = ((ac & -0x7fffffffffffffffLL - 1) != 0);
  prod2B += ac;
  bitsum = ((prod2B & -0x7fffffffffffffffLL - 1) != 0);
  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {
    prod2A++;
  }
  a = URShift64(prodB, 32);
  b = prodB & (jlong) 0xffffffffLL;
  c = URShift64(IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_, 0), 32);
  d = IOSLongArray_Get(OrgApacheCommonsMathUtilFastMath_PI_O_4_BITS_, 0) & (jlong) 0xffffffffLL;
  ac = a * c;
  bc = b * c;
  ad = a * d;
  ac = ac + (URShift64((bc + ad), 32));
  bita = ((prod2B & -0x7fffffffffffffffLL - 1) != 0);
  bitb = ((ac & -0x7fffffffffffffffLL - 1) != 0);
  prod2B += ac;
  bitsum = ((prod2B & -0x7fffffffffffffffLL - 1) != 0);
  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {
    prod2A++;
  }
  jdouble tmpA = (URShift64(prod2A, 12)) / OrgApacheCommonsMathUtilFastMath_TWO_POWER_52;
  jdouble tmpB = ((LShift64((prod2A & (jlong) 0xfffLL), 40)) + (URShift64(prod2B, 24))) / OrgApacheCommonsMathUtilFastMath_TWO_POWER_52 / OrgApacheCommonsMathUtilFastMath_TWO_POWER_52;
  jdouble sumA = tmpA + tmpB;
  jdouble sumB = -(sumA - tmpA - tmpB);
  *IOSDoubleArray_GetRef(nil_chk(result), 0) = intPart;
  *IOSDoubleArray_GetRef(result, 1) = sumA * 2.0;
  *IOSDoubleArray_GetRef(result, 2) = sumB * 2.0;
}

jdouble OrgApacheCommonsMathUtilFastMath_sinWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jboolean negative = NO;
  jint quadrant = 0;
  jdouble xa;
  jdouble xb = 0.0;
  xa = x;
  if (x < 0) {
    negative = YES;
    xa = -xa;
  }
  if (xa == 0.0) {
    jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(x);
    if (bits < 0) {
      return -0.0;
    }
    return 0.0;
  }
  if (xa != xa || xa == JavaLangDouble_POSITIVE_INFINITY) {
    return JavaLangDouble_NaN;
  }
  if (xa > 3294198.0) {
    IOSDoubleArray *reduceResults = [IOSDoubleArray newArrayWithLength:3];
    OrgApacheCommonsMathUtilFastMath_reducePayneHanekWithDouble_withDoubleArray_(xa, reduceResults);
    quadrant = (J2ObjCFpToInt(IOSDoubleArray_Get(reduceResults, 0))) & 3;
    xa = IOSDoubleArray_Get(reduceResults, 1);
    xb = IOSDoubleArray_Get(reduceResults, 2);
  }
  else if (xa > 1.5707963267948966) {
    jint k = J2ObjCFpToInt((xa * 0.6366197723675814));
    jdouble remA;
    jdouble remB;
    while (YES) {
      jdouble a = -k * 1.570796251296997;
      remA = xa + a;
      remB = -(remA - xa - a);
      a = -k * 7.549789948768648E-8;
      jdouble b = remA;
      remA = a + b;
      remB += -(remA - b - a);
      a = -k * 6.123233995736766E-17;
      b = remA;
      remA = a + b;
      remB += -(remA - b - a);
      if (remA > 0.0) break;
      k--;
    }
    quadrant = k & 3;
    xa = remA;
    xb = remB;
  }
  if (negative) {
    quadrant ^= 2;
  }
  switch (quadrant) {
    case 0:
    return OrgApacheCommonsMathUtilFastMath_sinQWithDouble_withDouble_(xa, xb);
    case 1:
    return OrgApacheCommonsMathUtilFastMath_cosQWithDouble_withDouble_(xa, xb);
    case 2:
    return -OrgApacheCommonsMathUtilFastMath_sinQWithDouble_withDouble_(xa, xb);
    case 3:
    return -OrgApacheCommonsMathUtilFastMath_cosQWithDouble_withDouble_(xa, xb);
    default:
    return JavaLangDouble_NaN;
  }
}

jdouble OrgApacheCommonsMathUtilFastMath_cosWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jint quadrant = 0;
  jdouble xa = x;
  if (x < 0) {
    xa = -xa;
  }
  if (xa != xa || xa == JavaLangDouble_POSITIVE_INFINITY) {
    return JavaLangDouble_NaN;
  }
  jdouble xb = 0;
  if (xa > 3294198.0) {
    IOSDoubleArray *reduceResults = [IOSDoubleArray newArrayWithLength:3];
    OrgApacheCommonsMathUtilFastMath_reducePayneHanekWithDouble_withDoubleArray_(xa, reduceResults);
    quadrant = (J2ObjCFpToInt(IOSDoubleArray_Get(reduceResults, 0))) & 3;
    xa = IOSDoubleArray_Get(reduceResults, 1);
    xb = IOSDoubleArray_Get(reduceResults, 2);
  }
  else if (xa > 1.5707963267948966) {
    jint k = J2ObjCFpToInt((xa * 0.6366197723675814));
    jdouble remA;
    jdouble remB;
    while (YES) {
      jdouble a = -k * 1.570796251296997;
      remA = xa + a;
      remB = -(remA - xa - a);
      a = -k * 7.549789948768648E-8;
      jdouble b = remA;
      remA = a + b;
      remB += -(remA - b - a);
      a = -k * 6.123233995736766E-17;
      b = remA;
      remA = a + b;
      remB += -(remA - b - a);
      if (remA > 0.0) break;
      k--;
    }
    quadrant = k & 3;
    xa = remA;
    xb = remB;
  }
  switch (quadrant) {
    case 0:
    return OrgApacheCommonsMathUtilFastMath_cosQWithDouble_withDouble_(xa, xb);
    case 1:
    return -OrgApacheCommonsMathUtilFastMath_sinQWithDouble_withDouble_(xa, xb);
    case 2:
    return -OrgApacheCommonsMathUtilFastMath_cosQWithDouble_withDouble_(xa, xb);
    case 3:
    return OrgApacheCommonsMathUtilFastMath_sinQWithDouble_withDouble_(xa, xb);
    default:
    return JavaLangDouble_NaN;
  }
}

jdouble OrgApacheCommonsMathUtilFastMath_tanWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jboolean negative = NO;
  jint quadrant = 0;
  jdouble xa = x;
  if (x < 0) {
    negative = YES;
    xa = -xa;
  }
  if (xa == 0.0) {
    jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(x);
    if (bits < 0) {
      return -0.0;
    }
    return 0.0;
  }
  if (xa != xa || xa == JavaLangDouble_POSITIVE_INFINITY) {
    return JavaLangDouble_NaN;
  }
  jdouble xb = 0;
  if (xa > 3294198.0) {
    IOSDoubleArray *reduceResults = [IOSDoubleArray newArrayWithLength:3];
    OrgApacheCommonsMathUtilFastMath_reducePayneHanekWithDouble_withDoubleArray_(xa, reduceResults);
    quadrant = (J2ObjCFpToInt(IOSDoubleArray_Get(reduceResults, 0))) & 3;
    xa = IOSDoubleArray_Get(reduceResults, 1);
    xb = IOSDoubleArray_Get(reduceResults, 2);
  }
  else if (xa > 1.5707963267948966) {
    jint k = J2ObjCFpToInt((xa * 0.6366197723675814));
    jdouble remA;
    jdouble remB;
    while (YES) {
      jdouble a = -k * 1.570796251296997;
      remA = xa + a;
      remB = -(remA - xa - a);
      a = -k * 7.549789948768648E-8;
      jdouble b = remA;
      remA = a + b;
      remB += -(remA - b - a);
      a = -k * 6.123233995736766E-17;
      b = remA;
      remA = a + b;
      remB += -(remA - b - a);
      if (remA > 0.0) break;
      k--;
    }
    quadrant = k & 3;
    xa = remA;
    xb = remB;
  }
  if (xa > 1.5) {
    jdouble pi2a = 1.5707963267948966;
    jdouble pi2b = 6.123233995736766E-17;
    jdouble a = pi2a - xa;
    jdouble b = -(a - pi2a + xa);
    b += pi2b - xb;
    xa = a + b;
    xb = -(xa - a - b);
    quadrant ^= 1;
    negative ^= YES;
  }
  jdouble result;
  if ((quadrant & 1) == 0) {
    result = OrgApacheCommonsMathUtilFastMath_tanQWithDouble_withDouble_withBoolean_(xa, xb, NO);
  }
  else {
    result = -OrgApacheCommonsMathUtilFastMath_tanQWithDouble_withDouble_withBoolean_(xa, xb, YES);
  }
  if (negative) {
    result = -result;
  }
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_atanWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return OrgApacheCommonsMathUtilFastMath_atanWithDouble_withDouble_withBoolean_(x, 0.0, NO);
}

jdouble OrgApacheCommonsMathUtilFastMath_atanWithDouble_withDouble_withBoolean_(jdouble xa, jdouble xb, jboolean leftPlane) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jboolean negate = NO;
  jint idx;
  if (xa == 0.0) {
    return leftPlane ? OrgApacheCommonsMathUtilFastMath_copySignWithDouble_withDouble_(JavaLangMath_PI, xa) : xa;
  }
  if (xa < 0) {
    xa = -xa;
    xb = -xb;
    negate = YES;
  }
  if (xa > 1.633123935319537E16) {
    return (negate ^ leftPlane) ? (-JavaLangMath_PI / 2.0) : (JavaLangMath_PI / 2.0);
  }
  if (xa < 1.0) {
    idx = J2ObjCFpToInt((((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5));
  }
  else {
    jdouble temp = 1.0 / xa;
    idx = J2ObjCFpToInt((-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07));
  }
  jdouble epsA = xa - IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_), idx);
  jdouble epsB = -(epsA - xa + IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_, idx));
  epsB += xb - IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_B_), idx);
  jdouble temp = epsA + epsB;
  epsB = -(temp - epsA - epsB);
  epsA = temp;
  temp = xa * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble ya = xa + temp - temp;
  jdouble yb = xb + xa - ya;
  xa = ya;
  xb += yb;
  if (idx == 0) {
    jdouble denom = 1.0 / (1.0 + (xa + xb) * (IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_, idx) + IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_B_, idx)));
    ya = epsA * denom;
    yb = epsB * denom;
  }
  else {
    jdouble temp2 = xa * IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_, idx);
    jdouble za = 1.0 + temp2;
    jdouble zb = -(za - 1.0 - temp2);
    temp2 = xb * IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_A_, idx) + xa * IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_B_, idx);
    temp = za + temp2;
    zb += -(temp - za - temp2);
    za = temp;
    zb += xb * IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_TANGENT_TABLE_B_, idx);
    ya = epsA / za;
    temp = ya * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble yaa = (ya + temp) - temp;
    jdouble yab = ya - yaa;
    temp = za * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
    jdouble zaa = (za + temp) - temp;
    jdouble zab = za - zaa;
    yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
    yb += -epsA * zb / za / za;
    yb += epsB / za;
  }
  epsA = ya;
  epsB = yb;
  jdouble epsA2 = epsA * epsA;
  yb = 0.07490822288864472;
  yb = yb * epsA2 + -0.09088450866185192;
  yb = yb * epsA2 + 0.11111095942313305;
  yb = yb * epsA2 + -0.1428571423679182;
  yb = yb * epsA2 + 0.19999999999923582;
  yb = yb * epsA2 + -0.33333333333333287;
  yb = yb * epsA2 * epsA;
  ya = epsA;
  temp = ya + yb;
  yb = -(temp - ya - yb);
  ya = temp;
  yb += epsB / (1.0 + epsA * epsA);
  jdouble result;
  jdouble resultb;
  jdouble za = IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_EIGHTHS_), idx) + ya;
  jdouble zb = -(za - IOSDoubleArray_Get(OrgApacheCommonsMathUtilFastMath_EIGHTHS_, idx) - ya);
  temp = za + yb;
  zb += -(temp - za - yb);
  za = temp;
  result = za + zb;
  resultb = -(result - za - zb);
  if (leftPlane) {
    jdouble pia = 1.5707963267948966 * 2.0;
    jdouble pib = 6.123233995736766E-17 * 2.0;
    za = pia - result;
    zb = -(za - pia + result);
    zb += pib - resultb;
    result = za + zb;
    resultb = -(result - za - zb);
  }
  if (negate ^ leftPlane) {
    result = -result;
  }
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_atan2WithDouble_withDouble_(jdouble y, jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (x != x || y != y) {
    return JavaLangDouble_NaN;
  }
  if (y == 0.0) {
    jdouble result = x * y;
    jdouble invx = 1.0 / x;
    jdouble invy = 1.0 / y;
    if (invx == 0.0) {
      if (x > 0) {
        return y;
      }
      else {
        return OrgApacheCommonsMathUtilFastMath_copySignWithDouble_withDouble_(JavaLangMath_PI, y);
      }
    }
    if (x < 0.0 || invx < 0.0) {
      if (y < 0.0 || invy < 0.0) {
        return -JavaLangMath_PI;
      }
      else {
        return JavaLangMath_PI;
      }
    }
    else {
      return result;
    }
  }
  if (y == JavaLangDouble_POSITIVE_INFINITY) {
    if (x == JavaLangDouble_POSITIVE_INFINITY) {
      return JavaLangMath_PI / 4.0;
    }
    if (x == JavaLangDouble_NEGATIVE_INFINITY) {
      return JavaLangMath_PI * 3.0 / 4.0;
    }
    return JavaLangMath_PI / 2.0;
  }
  if (y == JavaLangDouble_NEGATIVE_INFINITY) {
    if (x == JavaLangDouble_POSITIVE_INFINITY) {
      return -JavaLangMath_PI / 4.0;
    }
    if (x == JavaLangDouble_NEGATIVE_INFINITY) {
      return -JavaLangMath_PI * 3.0 / 4.0;
    }
    return -JavaLangMath_PI / 2.0;
  }
  if (x == JavaLangDouble_POSITIVE_INFINITY) {
    if (y > 0.0 || 1 / y > 0.0) {
      return 0.0;
    }
    if (y < 0.0 || 1 / y < 0.0) {
      return -0.0;
    }
  }
  if (x == JavaLangDouble_NEGATIVE_INFINITY) {
    if (y > 0.0 || 1 / y > 0.0) {
      return JavaLangMath_PI;
    }
    if (y < 0.0 || 1 / y < 0.0) {
      return -JavaLangMath_PI;
    }
  }
  if (x == 0) {
    if (y > 0.0 || 1 / y > 0.0) {
      return JavaLangMath_PI / 2.0;
    }
    if (y < 0.0 || 1 / y < 0.0) {
      return -JavaLangMath_PI / 2.0;
    }
  }
  jdouble r = y / x;
  if (JavaLangDouble_isInfiniteWithDouble_(r)) {
    return OrgApacheCommonsMathUtilFastMath_atanWithDouble_withDouble_withBoolean_(r, 0, x < 0);
  }
  jdouble ra = OrgApacheCommonsMathUtilFastMath_doubleHighPartWithDouble_(r);
  jdouble rb = r - ra;
  jdouble xa = OrgApacheCommonsMathUtilFastMath_doubleHighPartWithDouble_(x);
  jdouble xb = x - xa;
  rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
  jdouble temp = ra + rb;
  rb = -(temp - ra - rb);
  ra = temp;
  if (ra == 0) {
    ra = OrgApacheCommonsMathUtilFastMath_copySignWithDouble_withDouble_(0.0, y);
  }
  jdouble result = OrgApacheCommonsMathUtilFastMath_atanWithDouble_withDouble_withBoolean_(ra, rb, x < 0);
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_asinWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (x != x) {
    return JavaLangDouble_NaN;
  }
  if (x > 1.0 || x < -1.0) {
    return JavaLangDouble_NaN;
  }
  if (x == 1.0) {
    return JavaLangMath_PI / 2.0;
  }
  if (x == -1.0) {
    return -JavaLangMath_PI / 2.0;
  }
  if (x == 0.0) {
    return x;
  }
  jdouble temp = x * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble xa = x + temp - temp;
  jdouble xb = x - xa;
  jdouble ya = xa * xa;
  jdouble yb = xa * xb * 2.0 + xb * xb;
  ya = -ya;
  yb = -yb;
  jdouble za = 1.0 + ya;
  jdouble zb = -(za - 1.0 - ya);
  temp = za + yb;
  zb += -(temp - za - yb);
  za = temp;
  jdouble y;
  y = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(za);
  temp = y * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  ya = y + temp - temp;
  yb = y - ya;
  yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
  jdouble dx = zb / (2.0 * y);
  jdouble r = x / y;
  temp = r * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble ra = r + temp - temp;
  jdouble rb = r - ra;
  rb += (x - ra * ya - ra * yb - rb * ya - rb * yb) / y;
  rb += -x * dx / y / y;
  temp = ra + rb;
  rb = -(temp - ra - rb);
  ra = temp;
  return OrgApacheCommonsMathUtilFastMath_atanWithDouble_withDouble_withBoolean_(ra, rb, NO);
}

jdouble OrgApacheCommonsMathUtilFastMath_acosWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (x != x) {
    return JavaLangDouble_NaN;
  }
  if (x > 1.0 || x < -1.0) {
    return JavaLangDouble_NaN;
  }
  if (x == -1.0) {
    return JavaLangMath_PI;
  }
  if (x == 1.0) {
    return 0.0;
  }
  if (x == 0) {
    return JavaLangMath_PI / 2.0;
  }
  jdouble temp = x * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble xa = x + temp - temp;
  jdouble xb = x - xa;
  jdouble ya = xa * xa;
  jdouble yb = xa * xb * 2.0 + xb * xb;
  ya = -ya;
  yb = -yb;
  jdouble za = 1.0 + ya;
  jdouble zb = -(za - 1.0 - ya);
  temp = za + yb;
  zb += -(temp - za - yb);
  za = temp;
  jdouble y = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(za);
  temp = y * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  ya = y + temp - temp;
  yb = y - ya;
  yb += (za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);
  yb += zb / (2.0 * y);
  y = ya + yb;
  yb = -(y - ya - yb);
  jdouble r = y / x;
  if (JavaLangDouble_isInfiniteWithDouble_(r)) {
    return JavaLangMath_PI / 2;
  }
  jdouble ra = OrgApacheCommonsMathUtilFastMath_doubleHighPartWithDouble_(r);
  jdouble rb = r - ra;
  rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
  rb += yb / x;
  temp = ra + rb;
  rb = -(temp - ra - rb);
  ra = temp;
  return OrgApacheCommonsMathUtilFastMath_atanWithDouble_withDouble_withBoolean_(ra, rb, x < 0);
}

jdouble OrgApacheCommonsMathUtilFastMath_cbrtWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jlong inbits = JavaLangDouble_doubleToLongBitsWithDouble_(x);
  jint exponent = (jint) ((RShift64(inbits, 52)) & (jint) 0x7ff) - 1023;
  jboolean subnormal = NO;
  if (exponent == -1023) {
    if (x == 0) {
      return x;
    }
    subnormal = YES;
    x *= 1.8014398509481984E16;
    inbits = JavaLangDouble_doubleToLongBitsWithDouble_(x);
    exponent = (jint) ((RShift64(inbits, 52)) & (jint) 0x7ff) - 1023;
  }
  if (exponent == 1024) {
    return x;
  }
  jint exp3 = exponent / 3;
  jdouble p2 = JavaLangDouble_longBitsToDoubleWithLong_((inbits & -0x7fffffffffffffffLL - 1) | (LShift64((jlong) (((exp3 + 1023) & (jint) 0x7ff)), 52)));
  jdouble mant = JavaLangDouble_longBitsToDoubleWithLong_((inbits & (jlong) 0x000fffffffffffffLL) | (jlong) 0x3ff0000000000000LL);
  jdouble est = -0.010714690733195933;
  est = est * mant + 0.0875862700108075;
  est = est * mant + -0.3058015757857271;
  est = est * mant + 0.7249995199969751;
  est = est * mant + 0.5039018405998233;
  est *= IOSDoubleArray_Get(nil_chk(OrgApacheCommonsMathUtilFastMath_CBRTTWO_), exponent % 3 + 2);
  jdouble xs = x / (p2 * p2 * p2);
  est += (xs - est * est * est) / (3 * est * est);
  est += (xs - est * est * est) / (3 * est * est);
  jdouble temp = est * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble ya = est + temp - temp;
  jdouble yb = est - ya;
  jdouble za = ya * ya;
  jdouble zb = ya * yb * 2.0 + yb * yb;
  temp = za * OrgApacheCommonsMathUtilFastMath_HEX_40000000;
  jdouble temp2 = za + temp - temp;
  zb += za - temp2;
  za = temp2;
  zb = za * yb + ya * zb + zb * yb;
  za = za * ya;
  jdouble na = xs - za;
  jdouble nb = -(na - xs + za);
  nb -= zb;
  est += (na + nb) / (3 * est * est);
  est *= p2;
  if (subnormal) {
    est *= 3.814697265625E-6;
  }
  return est;
}

jdouble OrgApacheCommonsMathUtilFastMath_toRadiansWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (JavaLangDouble_isInfiniteWithDouble_(x) || x == 0.0) {
    return x;
  }
  jdouble facta = 0.01745329052209854;
  jdouble factb = 1.997844754509471E-9;
  jdouble xa = OrgApacheCommonsMathUtilFastMath_doubleHighPartWithDouble_(x);
  jdouble xb = x - xa;
  jdouble result = xb * factb + xb * facta + xa * factb + xa * facta;
  if (result == 0) {
    result = result * x;
  }
  return result;
}

jdouble OrgApacheCommonsMathUtilFastMath_toDegreesWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (JavaLangDouble_isInfiniteWithDouble_(x) || x == 0.0) {
    return x;
  }
  jdouble facta = 57.2957763671875;
  jdouble factb = 3.145894820876798E-6;
  jdouble xa = OrgApacheCommonsMathUtilFastMath_doubleHighPartWithDouble_(x);
  jdouble xb = x - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}

jint OrgApacheCommonsMathUtilFastMath_absWithInt_(jint x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (x < 0) ? -x : x;
}

jlong OrgApacheCommonsMathUtilFastMath_absWithLong_(jlong x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (x < 0l) ? -x : x;
}

jfloat OrgApacheCommonsMathUtilFastMath_absWithFloat_(jfloat x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x;
}

jdouble OrgApacheCommonsMathUtilFastMath_absWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x;
}

jdouble OrgApacheCommonsMathUtilFastMath_ulpWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (JavaLangDouble_isInfiniteWithDouble_(x)) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  return OrgApacheCommonsMathUtilFastMath_absWithDouble_(x - JavaLangDouble_longBitsToDoubleWithLong_(JavaLangDouble_doubleToLongBitsWithDouble_(x) ^ 1));
}

jfloat OrgApacheCommonsMathUtilFastMath_ulpWithFloat_(jfloat x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (JavaLangFloat_isInfiniteWithFloat_(x)) {
    return JavaLangFloat_POSITIVE_INFINITY;
  }
  return OrgApacheCommonsMathUtilFastMath_absWithFloat_(x - JavaLangFloat_intBitsToFloatWithInt_(JavaLangFloat_floatToIntBitsWithFloat_(x) ^ 1));
}

jdouble OrgApacheCommonsMathUtilFastMath_scalbWithDouble_withInt_(jdouble d, jint n) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if ((n > -1023) && (n < 1024)) {
    return d * JavaLangDouble_longBitsToDoubleWithLong_(LShift64(((jlong) (n + 1023)), 52));
  }
  if (JavaLangDouble_isNaNWithDouble_(d) || JavaLangDouble_isInfiniteWithDouble_(d) || (d == 0)) {
    return d;
  }
  if (n < -2098) {
    return (d > 0) ? 0.0 : -0.0;
  }
  if (n > 2097) {
    return (d > 0) ? JavaLangDouble_POSITIVE_INFINITY : JavaLangDouble_NEGATIVE_INFINITY;
  }
  jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(d);
  jlong sign = bits & -0x7fffffffffffffffLL - 1;
  jint exponent = ((jint) (URShift64(bits, 52))) & (jint) 0x7ff;
  jlong mantissa = bits & (jlong) 0x000fffffffffffffLL;
  jint scaledExponent = exponent + n;
  if (n < 0) {
    if (scaledExponent > 0) {
      return JavaLangDouble_longBitsToDoubleWithLong_(sign | (LShift64(((jlong) scaledExponent), 52)) | mantissa);
    }
    else if (scaledExponent > -53) {
      mantissa = mantissa | (LShift64(1LL, 52));
      jlong mostSignificantLostBit = mantissa & (LShift64(1LL, (-scaledExponent)));
      mantissa = URShift64(mantissa, (1 - scaledExponent));
      if (mostSignificantLostBit != 0) {
        mantissa++;
      }
      return JavaLangDouble_longBitsToDoubleWithLong_(sign | mantissa);
    }
    else {
      return (sign == 0LL) ? 0.0 : -0.0;
    }
  }
  else {
    if (exponent == 0) {
      while ((URShift64(mantissa, 52)) != 1) {
        mantissa = LShift64(mantissa, 1);
        --scaledExponent;
      }
      ++scaledExponent;
      mantissa = mantissa & (jlong) 0x000fffffffffffffLL;
      if (scaledExponent < 2047) {
        return JavaLangDouble_longBitsToDoubleWithLong_(sign | (LShift64(((jlong) scaledExponent), 52)) | mantissa);
      }
      else {
        return (sign == 0LL) ? JavaLangDouble_POSITIVE_INFINITY : JavaLangDouble_NEGATIVE_INFINITY;
      }
    }
    else if (scaledExponent < 2047) {
      return JavaLangDouble_longBitsToDoubleWithLong_(sign | (LShift64(((jlong) scaledExponent), 52)) | mantissa);
    }
    else {
      return (sign == 0LL) ? JavaLangDouble_POSITIVE_INFINITY : JavaLangDouble_NEGATIVE_INFINITY;
    }
  }
}

jfloat OrgApacheCommonsMathUtilFastMath_scalbWithFloat_withInt_(jfloat f, jint n) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if ((n > -127) && (n < 128)) {
    return f * JavaLangFloat_intBitsToFloatWithInt_(LShift32((n + 127), 23));
  }
  if (JavaLangFloat_isNaNWithFloat_(f) || JavaLangFloat_isInfiniteWithFloat_(f) || (f == 0.0f)) {
    return f;
  }
  if (n < -277) {
    return (f > 0) ? 0.0f : -0.0f;
  }
  if (n > 276) {
    return (f > 0) ? JavaLangFloat_POSITIVE_INFINITY : JavaLangFloat_NEGATIVE_INFINITY;
  }
  jint bits = JavaLangFloat_floatToIntBitsWithFloat_(f);
  jint sign = bits & -0x7fffffff - 1;
  jint exponent = (URShift32(bits, 23)) & (jint) 0xff;
  jint mantissa = bits & (jint) 0x007fffff;
  jint scaledExponent = exponent + n;
  if (n < 0) {
    if (scaledExponent > 0) {
      return JavaLangFloat_intBitsToFloatWithInt_(sign | (LShift32(scaledExponent, 23)) | mantissa);
    }
    else if (scaledExponent > -24) {
      mantissa = mantissa | (LShift32(1, 23));
      jint mostSignificantLostBit = mantissa & (LShift32(1, (-scaledExponent)));
      mantissa = URShift32(mantissa, (1 - scaledExponent));
      if (mostSignificantLostBit != 0) {
        mantissa++;
      }
      return JavaLangFloat_intBitsToFloatWithInt_(sign | mantissa);
    }
    else {
      return (sign == 0) ? 0.0f : -0.0f;
    }
  }
  else {
    if (exponent == 0) {
      while ((URShift32(mantissa, 23)) != 1) {
        mantissa = LShift32(mantissa, 1);
        --scaledExponent;
      }
      ++scaledExponent;
      mantissa = mantissa & (jint) 0x007fffff;
      if (scaledExponent < 255) {
        return JavaLangFloat_intBitsToFloatWithInt_(sign | (LShift32(scaledExponent, 23)) | mantissa);
      }
      else {
        return (sign == 0) ? JavaLangFloat_POSITIVE_INFINITY : JavaLangFloat_NEGATIVE_INFINITY;
      }
    }
    else if (scaledExponent < 255) {
      return JavaLangFloat_intBitsToFloatWithInt_(sign | (LShift32(scaledExponent, 23)) | mantissa);
    }
    else {
      return (sign == 0) ? JavaLangFloat_POSITIVE_INFINITY : JavaLangFloat_NEGATIVE_INFINITY;
    }
  }
}

jdouble OrgApacheCommonsMathUtilFastMath_nextAfterWithDouble_withDouble_(jdouble d, jdouble direction) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (JavaLangDouble_isNaNWithDouble_(d) || JavaLangDouble_isNaNWithDouble_(direction)) {
    return JavaLangDouble_NaN;
  }
  else if (d == direction) {
    return direction;
  }
  else if (JavaLangDouble_isInfiniteWithDouble_(d)) {
    return (d < 0) ? -JavaLangDouble_MAX_VALUE : JavaLangDouble_MAX_VALUE;
  }
  else if (d == 0) {
    return (direction < 0) ? -JavaLangDouble_MIN_VALUE : JavaLangDouble_MIN_VALUE;
  }
  jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(d);
  jlong sign = bits & -0x7fffffffffffffffLL - 1;
  if ((direction < d) ^ (sign == 0LL)) {
    return JavaLangDouble_longBitsToDoubleWithLong_(sign | ((bits & (jlong) 0x7fffffffffffffffLL) + 1));
  }
  else {
    return JavaLangDouble_longBitsToDoubleWithLong_(sign | ((bits & (jlong) 0x7fffffffffffffffLL) - 1));
  }
}

jfloat OrgApacheCommonsMathUtilFastMath_nextAfterWithFloat_withDouble_(jfloat f, jdouble direction) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (JavaLangDouble_isNaNWithDouble_(f) || JavaLangDouble_isNaNWithDouble_(direction)) {
    return JavaLangFloat_NaN;
  }
  else if (f == direction) {
    return (jfloat) direction;
  }
  else if (JavaLangFloat_isInfiniteWithFloat_(f)) {
    return (f < 0.0f) ? -JavaLangFloat_MAX_VALUE : JavaLangFloat_MAX_VALUE;
  }
  else if (f == 0.0f) {
    return (direction < 0) ? -JavaLangFloat_MIN_VALUE : JavaLangFloat_MIN_VALUE;
  }
  jint bits = JavaLangFloat_floatToIntBitsWithFloat_(f);
  jint sign = bits & -0x7fffffff - 1;
  if ((direction < f) ^ (sign == 0)) {
    return JavaLangFloat_intBitsToFloatWithInt_(sign | ((bits & (jint) 0x7fffffff) + 1));
  }
  else {
    return JavaLangFloat_intBitsToFloatWithInt_(sign | ((bits & (jint) 0x7fffffff) - 1));
  }
}

jdouble OrgApacheCommonsMathUtilFastMath_floorWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jlong y;
  if (x != x) {
    return x;
  }
  if (x >= OrgApacheCommonsMathUtilFastMath_TWO_POWER_52 || x <= -OrgApacheCommonsMathUtilFastMath_TWO_POWER_52) {
    return x;
  }
  y = J2ObjCFpToLong(x);
  if (x < 0 && y != x) {
    y--;
  }
  if (y == 0) {
    return x * y;
  }
  return y;
}

jdouble OrgApacheCommonsMathUtilFastMath_ceilWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble y;
  if (x != x) {
    return x;
  }
  y = OrgApacheCommonsMathUtilFastMath_floorWithDouble_(x);
  if (y == x) {
    return y;
  }
  y += 1.0;
  if (y == 0) {
    return x * y;
  }
  return y;
}

jdouble OrgApacheCommonsMathUtilFastMath_rintWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jdouble y = OrgApacheCommonsMathUtilFastMath_floorWithDouble_(x);
  jdouble d = x - y;
  if (d > 0.5) {
    if (y == -1.0) {
      return -0.0;
    }
    return y + 1.0;
  }
  if (d < 0.5) {
    return y;
  }
  jlong z = J2ObjCFpToLong(y);
  return (z & 1) == 0 ? y : y + 1.0;
}

jlong OrgApacheCommonsMathUtilFastMath_roundWithDouble_(jdouble x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return J2ObjCFpToLong(OrgApacheCommonsMathUtilFastMath_floorWithDouble_(x + 0.5));
}

jint OrgApacheCommonsMathUtilFastMath_roundWithFloat_(jfloat x) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return J2ObjCFpToInt(OrgApacheCommonsMathUtilFastMath_floorWithDouble_(x + 0.5f));
}

jint OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(jint a, jint b) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (a <= b) ? a : b;
}

jlong OrgApacheCommonsMathUtilFastMath_minWithLong_withLong_(jlong a, jlong b) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (a <= b) ? a : b;
}

jfloat OrgApacheCommonsMathUtilFastMath_minWithFloat_withFloat_(jfloat a, jfloat b) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (a > b) {
    return b;
  }
  if (a < b) {
    return a;
  }
  if (a != b) {
    return JavaLangFloat_NaN;
  }
  jint bits = JavaLangFloat_floatToRawIntBitsWithFloat_(a);
  if (bits == -0x7fffffff - 1) {
    return a;
  }
  return b;
}

jdouble OrgApacheCommonsMathUtilFastMath_minWithDouble_withDouble_(jdouble a, jdouble b) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (a > b) {
    return b;
  }
  if (a < b) {
    return a;
  }
  if (a != b) {
    return JavaLangDouble_NaN;
  }
  jlong bits = JavaLangDouble_doubleToRawLongBitsWithDouble_(a);
  if (bits == -0x7fffffffffffffffLL - 1) {
    return a;
  }
  return b;
}

jint OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(jint a, jint b) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (a <= b) ? b : a;
}

jlong OrgApacheCommonsMathUtilFastMath_maxWithLong_withLong_(jlong a, jlong b) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (a <= b) ? b : a;
}

jfloat OrgApacheCommonsMathUtilFastMath_maxWithFloat_withFloat_(jfloat a, jfloat b) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return JavaLangFloat_NaN;
  }
  jint bits = JavaLangFloat_floatToRawIntBitsWithFloat_(a);
  if (bits == -0x7fffffff - 1) {
    return b;
  }
  return a;
}

jdouble OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(jdouble a, jdouble b) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return JavaLangDouble_NaN;
  }
  jlong bits = JavaLangDouble_doubleToRawLongBitsWithDouble_(a);
  if (bits == -0x7fffffffffffffffLL - 1) {
    return b;
  }
  return a;
}

jdouble OrgApacheCommonsMathUtilFastMath_hypotWithDouble_withDouble_(jdouble x, jdouble y) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  if (JavaLangDouble_isInfiniteWithDouble_(x) || JavaLangDouble_isInfiniteWithDouble_(y)) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  else if (JavaLangDouble_isNaNWithDouble_(x) || JavaLangDouble_isNaNWithDouble_(y)) {
    return JavaLangDouble_NaN;
  }
  else {
    jint expX = OrgApacheCommonsMathUtilFastMath_getExponentWithDouble_(x);
    jint expY = OrgApacheCommonsMathUtilFastMath_getExponentWithDouble_(y);
    if (expX > expY + 27) {
      return OrgApacheCommonsMathUtilFastMath_absWithDouble_(x);
    }
    else if (expY > expX + 27) {
      return OrgApacheCommonsMathUtilFastMath_absWithDouble_(y);
    }
    else {
      jint middleExp = (expX + expY) / 2;
      jdouble scaledX = OrgApacheCommonsMathUtilFastMath_scalbWithDouble_withInt_(x, -middleExp);
      jdouble scaledY = OrgApacheCommonsMathUtilFastMath_scalbWithDouble_withInt_(y, -middleExp);
      jdouble scaledH = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(scaledX * scaledX + scaledY * scaledY);
      return OrgApacheCommonsMathUtilFastMath_scalbWithDouble_withInt_(scaledH, middleExp);
    }
  }
}

jdouble OrgApacheCommonsMathUtilFastMath_IEEEremainderWithDouble_withDouble_(jdouble dividend, jdouble divisor) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return JavaLangStrictMath_IEEEremainderWithDouble_withDouble_(dividend, divisor);
}

jdouble OrgApacheCommonsMathUtilFastMath_copySignWithDouble_withDouble_(jdouble magnitude, jdouble sign) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jlong m = JavaLangDouble_doubleToLongBitsWithDouble_(magnitude);
  jlong s = JavaLangDouble_doubleToLongBitsWithDouble_(sign);
  if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
    return magnitude;
  }
  return -magnitude;
}

jfloat OrgApacheCommonsMathUtilFastMath_copySignWithFloat_withFloat_(jfloat magnitude, jfloat sign) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  jint m = JavaLangFloat_floatToIntBitsWithFloat_(magnitude);
  jint s = JavaLangFloat_floatToIntBitsWithFloat_(sign);
  if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) {
    return magnitude;
  }
  return -magnitude;
}

jint OrgApacheCommonsMathUtilFastMath_getExponentWithDouble_(jdouble d) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return (jint) ((URShift64(JavaLangDouble_doubleToLongBitsWithDouble_(d), 52)) & (jint) 0x7ff) - 1023;
}

jint OrgApacheCommonsMathUtilFastMath_getExponentWithFloat_(jfloat f) {
  OrgApacheCommonsMathUtilFastMath_initialize();
  return ((URShift32(JavaLangFloat_floatToIntBitsWithFloat_(f), 23)) & (jint) 0xff) - 127;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathUtilFastMath)
