//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/util/ContinuedFraction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/math/ConvergenceException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/MaxIterationsExceededException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/util/ContinuedFraction.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathUtilContinuedFraction_DEFAULT_EPSILON 1.0E-8

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilContinuedFraction, DEFAULT_EPSILON, jdouble)

@implementation OrgApacheCommonsMathUtilContinuedFraction

- (instancetype)init {
  OrgApacheCommonsMathUtilContinuedFraction_init(self);
  return self;
}

- (jdouble)getAWithInt:(jint)n
            withDouble:(jdouble)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getBWithInt:(jint)n
            withDouble:(jdouble)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)evaluateWithDouble:(jdouble)x {
  return [self evaluateWithDouble:x withDouble:OrgApacheCommonsMathUtilContinuedFraction_DEFAULT_EPSILON withInt:JavaLangInteger_MAX_VALUE];
}

- (jdouble)evaluateWithDouble:(jdouble)x
                   withDouble:(jdouble)epsilon {
  return [self evaluateWithDouble:x withDouble:epsilon withInt:JavaLangInteger_MAX_VALUE];
}

- (jdouble)evaluateWithDouble:(jdouble)x
                      withInt:(jint)maxIterations {
  return [self evaluateWithDouble:x withDouble:OrgApacheCommonsMathUtilContinuedFraction_DEFAULT_EPSILON withInt:maxIterations];
}

- (jdouble)evaluateWithDouble:(jdouble)x
                   withDouble:(jdouble)epsilon
                      withInt:(jint)maxIterations {
  jdouble p0 = 1.0;
  jdouble p1 = [self getAWithInt:0 withDouble:x];
  jdouble q0 = 0.0;
  jdouble q1 = 1.0;
  jdouble c = p1 / q1;
  jint n = 0;
  jdouble relativeError = JavaLangDouble_MAX_VALUE;
  while (n < maxIterations && relativeError > epsilon) {
    ++n;
    jdouble a = [self getAWithInt:n withDouble:x];
    jdouble b = [self getBWithInt:n withDouble:x];
    jdouble p2 = a * p1 + b * p0;
    jdouble q2 = a * q1 + b * q0;
    jboolean infinite = NO;
    if (JavaLangDouble_isInfiniteWithDouble_(p2) || JavaLangDouble_isInfiniteWithDouble_(q2)) {
      jdouble scaleFactor = 1.0;
      jdouble lastScaleFactor = 1.0;
      jint maxPower = 5;
      jdouble scale_ = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(a, b);
      if (scale_ <= 0) {
        @throw new_OrgApacheCommonsMathConvergenceException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CONTINUED_FRACTION_INFINITY_DIVERGENCE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(x) } count:1 type:NSObject_class_()]);
      }
      infinite = YES;
      for (jint i = 0; i < maxPower; i++) {
        lastScaleFactor = scaleFactor;
        scaleFactor *= scale_;
        if (a != 0.0 && a > b) {
          p2 = p1 / lastScaleFactor + (b / scaleFactor * p0);
          q2 = q1 / lastScaleFactor + (b / scaleFactor * q0);
        }
        else if (b != 0) {
          p2 = (a / scaleFactor * p1) + p0 / lastScaleFactor;
          q2 = (a / scaleFactor * q1) + q0 / lastScaleFactor;
        }
        infinite = (JavaLangDouble_isInfiniteWithDouble_(p2) || JavaLangDouble_isInfiniteWithDouble_(q2));
        if (!infinite) {
          break;
        }
      }
    }
    if (infinite) {
      @throw new_OrgApacheCommonsMathConvergenceException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CONTINUED_FRACTION_INFINITY_DIVERGENCE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(x) } count:1 type:NSObject_class_()]);
    }
    jdouble r = p2 / q2;
    if (JavaLangDouble_isNaNWithDouble_(r)) {
      @throw new_OrgApacheCommonsMathConvergenceException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CONTINUED_FRACTION_NAN_DIVERGENCE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(x) } count:1 type:NSObject_class_()]);
    }
    relativeError = OrgApacheCommonsMathUtilFastMath_absWithDouble_(r / c - 1.0);
    c = p2 / q2;
    p0 = p1;
    p1 = p2;
    q0 = q1;
    q1 = q2;
  }
  if (n >= maxIterations) {
    @throw new_OrgApacheCommonsMathMaxIterationsExceededException_initWithInt_withOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(maxIterations, OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NON_CONVERGENT_CONTINUED_FRACTION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(x) } count:1 type:NSObject_class_()]);
  }
  return c;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ContinuedFraction", NULL, 0x4, NULL, NULL },
    { "getAWithInt:withDouble:", "getA", "D", 0x404, NULL, NULL },
    { "getBWithInt:withDouble:", "getB", "D", 0x404, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "evaluateWithDouble:withDouble:", "evaluate", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "evaluateWithDouble:withInt:", "evaluate", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "evaluateWithDouble:withDouble:withInt:", "evaluate", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_EPSILON_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathUtilContinuedFraction_DEFAULT_EPSILON },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathUtilContinuedFraction = { 2, "ContinuedFraction", "org.apache.commons.math.util", NULL, 0x401, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathUtilContinuedFraction;
}

@end

void OrgApacheCommonsMathUtilContinuedFraction_init(OrgApacheCommonsMathUtilContinuedFraction *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathUtilContinuedFraction)
