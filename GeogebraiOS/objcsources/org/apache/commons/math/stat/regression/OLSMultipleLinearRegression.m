//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/LUDecompositionImpl.h"
#include "org/apache/commons/math/linear/QRDecomposition.h"
#include "org/apache/commons/math/linear/QRDecompositionImpl.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/stat/StatUtils.h"
#include "org/apache/commons/math/stat/descriptive/moment/SecondMoment.h"
#include "org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.h"
#include "org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.h"

@interface OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression () {
 @public
  id<OrgApacheCommonsMathLinearQRDecomposition> qr_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression, qr_, id<OrgApacheCommonsMathLinearQRDecomposition>)

@implementation OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression

- (void)newSampleDataWithDoubleArray:(IOSDoubleArray *)y
                    withDoubleArray2:(IOSObjectArray *)x {
  [self validateSampleDataWithDoubleArray2:x withDoubleArray:y];
  [self newYSampleDataWithDoubleArray:y];
  [self newXSampleDataWithDoubleArray2:x];
}

- (void)newSampleDataWithDoubleArray:(IOSDoubleArray *)data
                             withInt:(jint)nobs
                             withInt:(jint)nvars {
  [super newSampleDataWithDoubleArray:data withInt:nobs withInt:nvars];
  OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression_setAndConsume_qr_(self, new_OrgApacheCommonsMathLinearQRDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(X_));
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)calculateHat {
  id<OrgApacheCommonsMathLinearRealMatrix> Q = [((id<OrgApacheCommonsMathLinearQRDecomposition>) nil_chk(qr_)) getQ];
  jint p = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([qr_ getR])) getColumnDimension];
  jint n = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(Q)) getColumnDimension];
  OrgApacheCommonsMathLinearArray2DRowRealMatrix *augI = [new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(n, n) autorelease];
  IOSObjectArray *augIData = [augI getDataRef];
  for (jint i = 0; i < n; i++) {
    for (jint j = 0; j < n; j++) {
      if (i == j && i < p) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(augIData), i)), j) = 1.0;
      }
      else {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(augIData), i)), j) = 0.0;
      }
    }
  }
  return [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([Q multiplyWithOrgApacheCommonsMathLinearRealMatrix:augI])) multiplyWithOrgApacheCommonsMathLinearRealMatrix:[Q transpose]];
}

- (jdouble)calculateTotalSumOfSquares {
  if ([self isNoIntercept]) {
    return OrgApacheCommonsMathStatStatUtils_sumSqWithDoubleArray_([((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(Y_)) getData]);
  }
  else {
    return [((OrgApacheCommonsMathStatDescriptiveMomentSecondMoment *) [new_OrgApacheCommonsMathStatDescriptiveMomentSecondMoment_init() autorelease]) evaluateWithDoubleArray:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(Y_)) getData]];
  }
}

- (jdouble)calculateResidualSumOfSquares {
  id<OrgApacheCommonsMathLinearRealVector> residuals = [self calculateResiduals];
  return [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(residuals)) dotProductWithOrgApacheCommonsMathLinearRealVector:residuals];
}

- (jdouble)calculateRSquared {
  return 1 - [self calculateResidualSumOfSquares] / [self calculateTotalSumOfSquares];
}

- (jdouble)calculateAdjustedRSquared {
  jdouble n = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(X_)) getRowDimension];
  if ([self isNoIntercept]) {
    return 1 - (1 - [self calculateRSquared]) * (n / (n - [X_ getColumnDimension]));
  }
  else {
    return 1 - ([self calculateResidualSumOfSquares] * (n - 1)) / ([self calculateTotalSumOfSquares] * (n - [X_ getColumnDimension]));
  }
}

- (void)newXSampleDataWithDoubleArray2:(IOSObjectArray *)x {
  [super newXSampleDataWithDoubleArray2:x];
  OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression_setAndConsume_qr_(self, new_OrgApacheCommonsMathLinearQRDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(X_));
}

- (id<OrgApacheCommonsMathLinearRealVector>)calculateBeta {
  return [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk([((id<OrgApacheCommonsMathLinearQRDecomposition>) nil_chk(qr_)) getSolver])) solveWithOrgApacheCommonsMathLinearRealVector:Y_];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)calculateBetaVariance {
  jint p = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(X_)) getColumnDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> Raug = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([((id<OrgApacheCommonsMathLinearQRDecomposition>) nil_chk(qr_)) getR])) getSubMatrixWithInt:0 withInt:p - 1 withInt:0 withInt:p - 1];
  id<OrgApacheCommonsMathLinearRealMatrix> Rinv = [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk([((OrgApacheCommonsMathLinearLUDecompositionImpl *) [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(Raug) autorelease]) getSolver])) getInverse];
  return [Rinv multiplyWithOrgApacheCommonsMathLinearRealMatrix:[((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(Rinv)) transpose]];
}

- (instancetype)init {
  OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(qr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newSampleDataWithDoubleArray:withDoubleArray2:", "newSampleData", "V", 0x1, NULL, NULL },
    { "newSampleDataWithDoubleArray:withInt:withInt:", "newSampleData", "V", 0x1, NULL, NULL },
    { "calculateHat", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "calculateTotalSumOfSquares", NULL, "D", 0x1, NULL, NULL },
    { "calculateResidualSumOfSquares", NULL, "D", 0x1, NULL, NULL },
    { "calculateRSquared", NULL, "D", 0x1, NULL, NULL },
    { "calculateAdjustedRSquared", NULL, "D", 0x1, NULL, NULL },
    { "newXSampleDataWithDoubleArray2:", "newXSampleData", "V", 0x4, NULL, NULL },
    { "calculateBeta", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x4, NULL, NULL },
    { "calculateBetaVariance", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "qr_", NULL, 0x2, "Lorg.apache.commons.math.linear.QRDecomposition;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression = { 2, "OLSMultipleLinearRegression", "org.apache.commons.math.stat.regression", NULL, 0x1, 11, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression;
}

@end

void OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression_init(OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression *self) {
  OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression_init(self);
  OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression_set_qr_(self, nil);
}

OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression *new_OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression_init() {
  OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression *self = [OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression alloc];
  OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathStatRegressionOLSMultipleLinearRegression)
