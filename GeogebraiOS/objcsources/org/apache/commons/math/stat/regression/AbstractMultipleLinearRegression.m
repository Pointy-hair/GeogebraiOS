//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/ArrayRealVector.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/stat/descriptive/moment/Variance.h"
#include "org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression () {
 @public
  jboolean noIntercept_;
}

@end

@implementation OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression

- (jboolean)isNoIntercept {
  return noIntercept_;
}

- (void)setNoInterceptWithBoolean:(jboolean)noIntercept {
  self->noIntercept_ = noIntercept;
}

- (void)newSampleDataWithDoubleArray:(IOSDoubleArray *)data
                             withInt:(jint)nobs
                             withInt:(jint)nvars {
  if (data == nil) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NULL_NOT_ALLOWED(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  if (((IOSDoubleArray *) nil_chk(data))->size_ != nobs * (nvars + 1)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INVALID_REGRESSION_ARRAY(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(data->size_), JavaLangInteger_valueOfWithInt_(nobs), JavaLangInteger_valueOfWithInt_(nvars) } count:3 type:NSObject_class_()]);
  }
  if (nobs <= nvars) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  IOSDoubleArray *y = [IOSDoubleArray newArrayWithLength:nobs];
  jint cols = noIntercept_ ? nvars : nvars + 1;
  IOSObjectArray *x = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ nobs, cols }];
  jint pointer = 0;
  for (jint i = 0; i < nobs; i++) {
    *IOSDoubleArray_GetRef(y, i) = IOSDoubleArray_Get(data, pointer++);
    if (!noIntercept_) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(x, i)), 0) = 1.0;
    }
    for (jint j = noIntercept_ ? 0 : 1; j < cols; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(x, i)), j) = IOSDoubleArray_Get(data, pointer++);
    }
  }
  self->X_ = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithDoubleArray2_(x);
  self->Y_ = new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(y);
}

- (void)newYSampleDataWithDoubleArray:(IOSDoubleArray *)y {
  if (y == nil) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NULL_NOT_ALLOWED(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  if (((IOSDoubleArray *) nil_chk(y))->size_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_DATA(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  self->Y_ = new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(y);
}

- (void)newXSampleDataWithDoubleArray2:(IOSObjectArray *)x {
  if (x == nil) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NULL_NOT_ALLOWED(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  if (((IOSObjectArray *) nil_chk(x))->size_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_DATA(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  if (noIntercept_) {
    self->X_ = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithDoubleArray2_withBoolean_(x, YES);
  }
  else {
    jint nVars = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(x, 0)))->size_;
    IOSObjectArray *xAug = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ x->size_, nVars + 1 }];
    for (jint i = 0; i < x->size_; i++) {
      if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(x, i)))->size_ != nVars) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(x, i)))->size_), JavaLangInteger_valueOfWithInt_(nVars) } count:2 type:NSObject_class_()]);
      }
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(xAug, i)), 0) = 1.0;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(x, i), 0, IOSObjectArray_Get(xAug, i), 1, nVars);
    }
    self->X_ = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithDoubleArray2_withBoolean_(xAug, NO);
  }
}

- (void)validateSampleDataWithDoubleArray2:(IOSObjectArray *)x
                           withDoubleArray:(IOSDoubleArray *)y {
  if ((x == nil) || (y == nil) || (x->size_ != y->size_)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_SIMPLE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_((x == nil) ? 0 : x->size_), JavaLangInteger_valueOfWithInt_((y == nil) ? 0 : y->size_) } count:2 type:NSObject_class_()]);
  }
  if (((IOSObjectArray *) nil_chk(x))->size_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_DATA(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(x, 0)))->size_ + 1 > x->size_) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(x->size_), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(x, 0)))->size_) } count:2 type:NSObject_class_()]);
  }
}

- (void)validateCovarianceDataWithDoubleArray2:(IOSObjectArray *)x
                              withDoubleArray2:(IOSObjectArray *)covariance {
  if (((IOSObjectArray *) nil_chk(x))->size_ != ((IOSObjectArray *) nil_chk(covariance))->size_) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_SIMPLE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(x->size_), JavaLangInteger_valueOfWithInt_(covariance->size_) } count:2 type:NSObject_class_()]);
  }
  if (covariance->size_ > 0 && covariance->size_ != ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(covariance, 0)))->size_) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NON_SQUARE_MATRIX(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(covariance->size_), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(covariance, 0)))->size_) } count:2 type:NSObject_class_()]);
  }
}

- (IOSDoubleArray *)estimateRegressionParameters {
  id<OrgApacheCommonsMathLinearRealVector> b = [self calculateBeta];
  return [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(b)) getData];
}

- (IOSDoubleArray *)estimateResiduals {
  id<OrgApacheCommonsMathLinearRealVector> b = [self calculateBeta];
  id<OrgApacheCommonsMathLinearRealVector> e = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(Y_)) subtractWithOrgApacheCommonsMathLinearRealVector:[((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(X_)) operateWithOrgApacheCommonsMathLinearRealVector:b]];
  return [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(e)) getData];
}

- (IOSObjectArray *)estimateRegressionParametersVariance {
  return [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([self calculateBetaVariance])) getData];
}

- (IOSDoubleArray *)estimateRegressionParametersStandardErrors {
  IOSObjectArray *betaVariance = [self estimateRegressionParametersVariance];
  jdouble sigma = [self calculateErrorVariance];
  jint length = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(betaVariance), 0)))->size_;
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:length];
  for (jint i = 0; i < length; i++) {
    *IOSDoubleArray_GetRef(result, i) = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(sigma * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(betaVariance, i)), i));
  }
  return result;
}

- (jdouble)estimateRegressandVariance {
  return [self calculateYVariance];
}

- (jdouble)estimateErrorVariance {
  return [self calculateErrorVariance];
}

- (jdouble)estimateRegressionStandardError {
  return JavaLangMath_sqrtWithDouble_([self estimateErrorVariance]);
}

- (id<OrgApacheCommonsMathLinearRealVector>)calculateBeta {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)calculateBetaVariance {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)calculateYVariance {
  return [new_OrgApacheCommonsMathStatDescriptiveMomentVariance_init() evaluateWithDoubleArray:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(Y_)) getData]];
}

- (jdouble)calculateErrorVariance {
  id<OrgApacheCommonsMathLinearRealVector> residuals = [self calculateResiduals];
  return [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(residuals)) dotProductWithOrgApacheCommonsMathLinearRealVector:residuals] / ([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(X_)) getRowDimension] - [X_ getColumnDimension]);
}

- (id<OrgApacheCommonsMathLinearRealVector>)calculateResiduals {
  id<OrgApacheCommonsMathLinearRealVector> b = [self calculateBeta];
  return [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(Y_)) subtractWithOrgApacheCommonsMathLinearRealVector:[((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(X_)) operateWithOrgApacheCommonsMathLinearRealVector:b]];
}

- (instancetype)init {
  OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isNoIntercept", NULL, "Z", 0x1, NULL, NULL },
    { "setNoInterceptWithBoolean:", "setNoIntercept", "V", 0x1, NULL, NULL },
    { "newSampleDataWithDoubleArray:withInt:withInt:", "newSampleData", "V", 0x1, NULL, NULL },
    { "newYSampleDataWithDoubleArray:", "newYSampleData", "V", 0x4, NULL, NULL },
    { "newXSampleDataWithDoubleArray2:", "newXSampleData", "V", 0x4, NULL, NULL },
    { "validateSampleDataWithDoubleArray2:withDoubleArray:", "validateSampleData", "V", 0x4, NULL, NULL },
    { "validateCovarianceDataWithDoubleArray2:withDoubleArray2:", "validateCovarianceData", "V", 0x4, NULL, NULL },
    { "estimateRegressionParameters", NULL, "[D", 0x1, NULL, NULL },
    { "estimateResiduals", NULL, "[D", 0x1, NULL, NULL },
    { "estimateRegressionParametersVariance", NULL, "[[D", 0x1, NULL, NULL },
    { "estimateRegressionParametersStandardErrors", NULL, "[D", 0x1, NULL, NULL },
    { "estimateRegressandVariance", NULL, "D", 0x1, NULL, NULL },
    { "estimateErrorVariance", NULL, "D", 0x1, NULL, NULL },
    { "estimateRegressionStandardError", NULL, "D", 0x1, NULL, NULL },
    { "calculateBeta", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x404, NULL, NULL },
    { "calculateBetaVariance", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x404, NULL, NULL },
    { "calculateYVariance", NULL, "D", 0x4, NULL, NULL },
    { "calculateErrorVariance", NULL, "D", 0x4, NULL, NULL },
    { "calculateResiduals", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "X_", NULL, 0x4, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
    { "Y_", NULL, 0x4, "Lorg.apache.commons.math.linear.RealVector;", NULL, NULL,  },
    { "noIntercept_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression = { 2, "AbstractMultipleLinearRegression", "org.apache.commons.math.stat.regression", NULL, 0x401, 20, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression;
}

@end

void OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression_init(OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression *self) {
  (void) NSObject_init(self);
  self->noIntercept_ = NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression)
