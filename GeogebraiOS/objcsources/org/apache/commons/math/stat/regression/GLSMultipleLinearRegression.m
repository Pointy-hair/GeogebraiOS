//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/LUDecompositionImpl.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.h"
#include "org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.h"

@interface OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression () {
 @public
  id<OrgApacheCommonsMathLinearRealMatrix> Omega_;
  id<OrgApacheCommonsMathLinearRealMatrix> OmegaInverse_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression, Omega_, id<OrgApacheCommonsMathLinearRealMatrix>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression, OmegaInverse_, id<OrgApacheCommonsMathLinearRealMatrix>)

@implementation OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression

- (void)newSampleDataWithDoubleArray:(IOSDoubleArray *)y
                    withDoubleArray2:(IOSObjectArray *)x
                    withDoubleArray2:(IOSObjectArray *)covariance {
  [self validateSampleDataWithDoubleArray2:x withDoubleArray:y];
  [self newYSampleDataWithDoubleArray:y];
  [self newXSampleDataWithDoubleArray2:x];
  [self validateCovarianceDataWithDoubleArray2:x withDoubleArray2:covariance];
  [self newCovarianceDataWithDoubleArray2:covariance];
}

- (void)newCovarianceDataWithDoubleArray2:(IOSObjectArray *)omega {
  OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression_setAndConsume_Omega_(self, new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithDoubleArray2_(omega));
  OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression_set_OmegaInverse_(self, nil);
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getOmegaInverse {
  if (OmegaInverse_ == nil) {
    OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression_set_OmegaInverse_(self, [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk([((OrgApacheCommonsMathLinearLUDecompositionImpl *) [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(Omega_) autorelease]) getSolver])) getInverse]);
  }
  return OmegaInverse_;
}

- (id<OrgApacheCommonsMathLinearRealVector>)calculateBeta {
  id<OrgApacheCommonsMathLinearRealMatrix> OI = [self getOmegaInverse];
  id<OrgApacheCommonsMathLinearRealMatrix> XT = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(X_)) transpose];
  id<OrgApacheCommonsMathLinearRealMatrix> XTOIX = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(XT)) multiplyWithOrgApacheCommonsMathLinearRealMatrix:OI])) multiplyWithOrgApacheCommonsMathLinearRealMatrix:X_];
  id<OrgApacheCommonsMathLinearRealMatrix> inverse = [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk([((OrgApacheCommonsMathLinearLUDecompositionImpl *) [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(XTOIX) autorelease]) getSolver])) getInverse];
  return [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(inverse)) multiplyWithOrgApacheCommonsMathLinearRealMatrix:XT])) multiplyWithOrgApacheCommonsMathLinearRealMatrix:OI])) operateWithOrgApacheCommonsMathLinearRealVector:Y_];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)calculateBetaVariance {
  id<OrgApacheCommonsMathLinearRealMatrix> OI = [self getOmegaInverse];
  id<OrgApacheCommonsMathLinearRealMatrix> XTOIX = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(X_)) transpose])) multiplyWithOrgApacheCommonsMathLinearRealMatrix:OI])) multiplyWithOrgApacheCommonsMathLinearRealMatrix:X_];
  return [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk([((OrgApacheCommonsMathLinearLUDecompositionImpl *) [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(XTOIX) autorelease]) getSolver])) getInverse];
}

- (jdouble)calculateErrorVariance {
  id<OrgApacheCommonsMathLinearRealVector> residuals = [self calculateResiduals];
  jdouble t = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(residuals)) dotProductWithOrgApacheCommonsMathLinearRealVector:[((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([self getOmegaInverse])) operateWithOrgApacheCommonsMathLinearRealVector:residuals]];
  return t / ([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(X_)) getRowDimension] - [X_ getColumnDimension]);
}

- (instancetype)init {
  OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(Omega_);
  RELEASE_(OmegaInverse_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newSampleDataWithDoubleArray:withDoubleArray2:withDoubleArray2:", "newSampleData", "V", 0x1, NULL, NULL },
    { "newCovarianceDataWithDoubleArray2:", "newCovarianceData", "V", 0x4, NULL, NULL },
    { "getOmegaInverse", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x4, NULL, NULL },
    { "calculateBeta", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x4, NULL, NULL },
    { "calculateBetaVariance", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x4, NULL, NULL },
    { "calculateErrorVariance", NULL, "D", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "Omega_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
    { "OmegaInverse_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression = { 2, "GLSMultipleLinearRegression", "org.apache.commons.math.stat.regression", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression;
}

@end

void OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression_init(OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression *self) {
  OrgApacheCommonsMathStatRegressionAbstractMultipleLinearRegression_init(self);
}

OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression *new_OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression_init() {
  OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression *self = [OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression alloc];
  OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathStatRegressionGLSMultipleLinearRegression)
