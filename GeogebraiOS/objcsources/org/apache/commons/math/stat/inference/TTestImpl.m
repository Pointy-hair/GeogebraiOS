//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/stat/inference/TTestImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/distribution/TDistribution.h"
#include "org/apache/commons/math/distribution/TDistributionImpl.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/stat/StatUtils.h"
#include "org/apache/commons/math/stat/descriptive/StatisticalSummary.h"
#include "org/apache/commons/math/stat/inference/TTestImpl.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathStatInferenceTTestImpl () {
 @public
  id<OrgApacheCommonsMathDistributionTDistribution> distribution_;
}

- (void)checkSignificanceLevelWithDouble:(jdouble)alpha;

- (void)checkSampleDataWithDoubleArray:(IOSDoubleArray *)data;

- (void)checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)stat;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathStatInferenceTTestImpl, distribution_, id<OrgApacheCommonsMathDistributionTDistribution>)

__attribute__((unused)) static void OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(OrgApacheCommonsMathStatInferenceTTestImpl *self, jdouble alpha);

__attribute__((unused)) static void OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(OrgApacheCommonsMathStatInferenceTTestImpl *self, IOSDoubleArray *data);

__attribute__((unused)) static void OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(OrgApacheCommonsMathStatInferenceTTestImpl *self, id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary> stat);

@implementation OrgApacheCommonsMathStatInferenceTTestImpl

- (instancetype)init {
  OrgApacheCommonsMathStatInferenceTTestImpl_init(self);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathDistributionTDistribution:(id<OrgApacheCommonsMathDistributionTDistribution>)t {
  OrgApacheCommonsMathStatInferenceTTestImpl_initWithOrgApacheCommonsMathDistributionTDistribution_(self, t);
  return self;
}

- (jdouble)pairedTWithDoubleArray:(IOSDoubleArray *)sample1
                  withDoubleArray:(IOSDoubleArray *)sample2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample2);
  jdouble meanDifference = OrgApacheCommonsMathStatStatUtils_meanDifferenceWithDoubleArray_withDoubleArray_(sample1, sample2);
  return [self tWithDouble:meanDifference withDouble:0 withDouble:OrgApacheCommonsMathStatStatUtils_varianceDifferenceWithDoubleArray_withDoubleArray_withDouble_(sample1, sample2, meanDifference) withDouble:((IOSDoubleArray *) nil_chk(sample1))->size_];
}

- (jdouble)pairedTTestWithDoubleArray:(IOSDoubleArray *)sample1
                      withDoubleArray:(IOSDoubleArray *)sample2 {
  jdouble meanDifference = OrgApacheCommonsMathStatStatUtils_meanDifferenceWithDoubleArray_withDoubleArray_(sample1, sample2);
  return [self tTestWithDouble:meanDifference withDouble:0 withDouble:OrgApacheCommonsMathStatStatUtils_varianceDifferenceWithDoubleArray_withDoubleArray_withDouble_(sample1, sample2, meanDifference) withDouble:((IOSDoubleArray *) nil_chk(sample1))->size_];
}

- (jboolean)pairedTTestWithDoubleArray:(IOSDoubleArray *)sample1
                       withDoubleArray:(IOSDoubleArray *)sample2
                            withDouble:(jdouble)alpha {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(self, alpha);
  return [self pairedTTestWithDoubleArray:sample1 withDoubleArray:sample2] < alpha;
}

- (jdouble)tWithDouble:(jdouble)mu
       withDoubleArray:(IOSDoubleArray *)observed {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, observed);
  return [self tWithDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(observed) withDouble:mu withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(observed) withDouble:((IOSDoubleArray *) nil_chk(observed))->size_];
}

- (jdouble)tWithDouble:(jdouble)mu
withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats);
  return [self tWithDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats)) getMean] withDouble:mu withDouble:[sampleStats getVariance] withDouble:[sampleStats getN]];
}

- (jdouble)homoscedasticTWithDoubleArray:(IOSDoubleArray *)sample1
                         withDoubleArray:(IOSDoubleArray *)sample2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample2);
  return [self homoscedasticTWithDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample1) withDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample2) withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample1) withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample2) withDouble:((IOSDoubleArray *) nil_chk(sample1))->size_ withDouble:((IOSDoubleArray *) nil_chk(sample2))->size_];
}

- (jdouble)tWithDoubleArray:(IOSDoubleArray *)sample1
            withDoubleArray:(IOSDoubleArray *)sample2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample2);
  return [self tWithDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample1) withDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample2) withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample1) withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample2) withDouble:((IOSDoubleArray *) nil_chk(sample1))->size_ withDouble:((IOSDoubleArray *) nil_chk(sample2))->size_];
}

- (jdouble)tWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats1
            withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats2);
  return [self tWithDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats1)) getMean] withDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats2)) getMean] withDouble:[sampleStats1 getVariance] withDouble:[sampleStats2 getVariance] withDouble:[sampleStats1 getN] withDouble:[sampleStats2 getN]];
}

- (jdouble)homoscedasticTWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats1
                         withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats2);
  return [self homoscedasticTWithDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats1)) getMean] withDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats2)) getMean] withDouble:[sampleStats1 getVariance] withDouble:[sampleStats2 getVariance] withDouble:[sampleStats1 getN] withDouble:[sampleStats2 getN]];
}

- (jdouble)tTestWithDouble:(jdouble)mu
           withDoubleArray:(IOSDoubleArray *)sample {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample);
  return [self tTestWithDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample) withDouble:mu withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample) withDouble:((IOSDoubleArray *) nil_chk(sample))->size_];
}

- (jboolean)tTestWithDouble:(jdouble)mu
            withDoubleArray:(IOSDoubleArray *)sample
                 withDouble:(jdouble)alpha {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(self, alpha);
  return [self tTestWithDouble:mu withDoubleArray:sample] < alpha;
}

- (jdouble)tTestWithDouble:(jdouble)mu
withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats);
  return [self tTestWithDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats)) getMean] withDouble:mu withDouble:[sampleStats getVariance] withDouble:[sampleStats getN]];
}

- (jboolean)tTestWithDouble:(jdouble)mu
withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats
                 withDouble:(jdouble)alpha {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(self, alpha);
  return [self tTestWithDouble:mu withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sampleStats] < alpha;
}

- (jdouble)tTestWithDoubleArray:(IOSDoubleArray *)sample1
                withDoubleArray:(IOSDoubleArray *)sample2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample2);
  return [self tTestWithDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample1) withDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample2) withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample1) withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample2) withDouble:((IOSDoubleArray *) nil_chk(sample1))->size_ withDouble:((IOSDoubleArray *) nil_chk(sample2))->size_];
}

- (jdouble)homoscedasticTTestWithDoubleArray:(IOSDoubleArray *)sample1
                             withDoubleArray:(IOSDoubleArray *)sample2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, sample2);
  return [self homoscedasticTTestWithDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample1) withDouble:OrgApacheCommonsMathStatStatUtils_meanWithDoubleArray_(sample2) withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample1) withDouble:OrgApacheCommonsMathStatStatUtils_varianceWithDoubleArray_(sample2) withDouble:((IOSDoubleArray *) nil_chk(sample1))->size_ withDouble:((IOSDoubleArray *) nil_chk(sample2))->size_];
}

- (jboolean)tTestWithDoubleArray:(IOSDoubleArray *)sample1
                 withDoubleArray:(IOSDoubleArray *)sample2
                      withDouble:(jdouble)alpha {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(self, alpha);
  return [self tTestWithDoubleArray:sample1 withDoubleArray:sample2] < alpha;
}

- (jboolean)homoscedasticTTestWithDoubleArray:(IOSDoubleArray *)sample1
                              withDoubleArray:(IOSDoubleArray *)sample2
                                   withDouble:(jdouble)alpha {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(self, alpha);
  return [self homoscedasticTTestWithDoubleArray:sample1 withDoubleArray:sample2] < alpha;
}

- (jdouble)tTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats1
                withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats2);
  return [self tTestWithDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats1)) getMean] withDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats2)) getMean] withDouble:[sampleStats1 getVariance] withDouble:[sampleStats2 getVariance] withDouble:[sampleStats1 getN] withDouble:[sampleStats2 getN]];
}

- (jdouble)homoscedasticTTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats1
                             withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats2 {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats1);
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, sampleStats2);
  return [self homoscedasticTTestWithDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats1)) getMean] withDouble:[((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk(sampleStats2)) getMean] withDouble:[sampleStats1 getVariance] withDouble:[sampleStats2 getVariance] withDouble:[sampleStats1 getN] withDouble:[sampleStats2 getN]];
}

- (jboolean)tTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats1
                 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)sampleStats2
                                                                withDouble:(jdouble)alpha {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(self, alpha);
  return [self tTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sampleStats1 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sampleStats2] < alpha;
}

- (jdouble)dfWithDouble:(jdouble)v1
             withDouble:(jdouble)v2
             withDouble:(jdouble)n1
             withDouble:(jdouble)n2 {
  return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) / ((v1 * v1) / (n1 * n1 * (n1 - 1.0)) + (v2 * v2) / (n2 * n2 * (n2 - 1.0)));
}

- (jdouble)tWithDouble:(jdouble)m
            withDouble:(jdouble)mu
            withDouble:(jdouble)v
            withDouble:(jdouble)n {
  return (m - mu) / OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(v / n);
}

- (jdouble)tWithDouble:(jdouble)m1
            withDouble:(jdouble)m2
            withDouble:(jdouble)v1
            withDouble:(jdouble)v2
            withDouble:(jdouble)n1
            withDouble:(jdouble)n2 {
  return (m1 - m2) / OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_((v1 / n1) + (v2 / n2));
}

- (jdouble)homoscedasticTWithDouble:(jdouble)m1
                         withDouble:(jdouble)m2
                         withDouble:(jdouble)v1
                         withDouble:(jdouble)v2
                         withDouble:(jdouble)n1
                         withDouble:(jdouble)n2 {
  jdouble pooledVariance = ((n1 - 1) * v1 + (n2 - 1) * v2) / (n1 + n2 - 2);
  return (m1 - m2) / OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(pooledVariance * (1.0 / n1 + 1.0 / n2));
}

- (jdouble)tTestWithDouble:(jdouble)m
                withDouble:(jdouble)mu
                withDouble:(jdouble)v
                withDouble:(jdouble)n {
  jdouble t = OrgApacheCommonsMathUtilFastMath_absWithDouble_([self tWithDouble:m withDouble:mu withDouble:v withDouble:n]);
  [((id<OrgApacheCommonsMathDistributionTDistribution>) nil_chk(distribution_)) setDegreesOfFreedomWithDouble:n - 1];
  return 2.0 * [distribution_ cumulativeProbabilityWithDouble:-t];
}

- (jdouble)tTestWithDouble:(jdouble)m1
                withDouble:(jdouble)m2
                withDouble:(jdouble)v1
                withDouble:(jdouble)v2
                withDouble:(jdouble)n1
                withDouble:(jdouble)n2 {
  jdouble t = OrgApacheCommonsMathUtilFastMath_absWithDouble_([self tWithDouble:m1 withDouble:m2 withDouble:v1 withDouble:v2 withDouble:n1 withDouble:n2]);
  jdouble degreesOfFreedom = 0;
  degreesOfFreedom = [self dfWithDouble:v1 withDouble:v2 withDouble:n1 withDouble:n2];
  [((id<OrgApacheCommonsMathDistributionTDistribution>) nil_chk(distribution_)) setDegreesOfFreedomWithDouble:degreesOfFreedom];
  return 2.0 * [distribution_ cumulativeProbabilityWithDouble:-t];
}

- (jdouble)homoscedasticTTestWithDouble:(jdouble)m1
                             withDouble:(jdouble)m2
                             withDouble:(jdouble)v1
                             withDouble:(jdouble)v2
                             withDouble:(jdouble)n1
                             withDouble:(jdouble)n2 {
  jdouble t = OrgApacheCommonsMathUtilFastMath_absWithDouble_([self homoscedasticTWithDouble:m1 withDouble:m2 withDouble:v1 withDouble:v2 withDouble:n1 withDouble:n2]);
  jdouble degreesOfFreedom = n1 + n2 - 2;
  [((id<OrgApacheCommonsMathDistributionTDistribution>) nil_chk(distribution_)) setDegreesOfFreedomWithDouble:degreesOfFreedom];
  return 2.0 * [distribution_ cumulativeProbabilityWithDouble:-t];
}

- (void)setDistributionWithOrgApacheCommonsMathDistributionTDistribution:(id<OrgApacheCommonsMathDistributionTDistribution>)value {
  OrgApacheCommonsMathStatInferenceTTestImpl_set_distribution_(self, value);
}

- (void)checkSignificanceLevelWithDouble:(jdouble)alpha {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(self, alpha);
}

- (void)checkSampleDataWithDoubleArray:(IOSDoubleArray *)data {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(self, data);
}

- (void)checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:(id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>)stat {
  OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(self, stat);
}

- (void)dealloc {
  RELEASE_(distribution_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_initWithOrgApacheCommonsMathDistributionTDistribution_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setDistributionWithOrgApacheCommonsMathDistributionTDistribution_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_distribution_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TTestImpl", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathDistributionTDistribution:", "TTestImpl", NULL, 0x1, NULL, NULL },
    { "pairedTWithDoubleArray:withDoubleArray:", "pairedT", "D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "pairedTTestWithDoubleArray:withDoubleArray:", "pairedTTest", "D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "pairedTTestWithDoubleArray:withDoubleArray:withDouble:", "pairedTTest", "Z", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "tWithDouble:withDoubleArray:", "t", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "tWithDouble:withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:", "t", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "homoscedasticTWithDoubleArray:withDoubleArray:", "homoscedasticT", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "tWithDoubleArray:withDoubleArray:", "t", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "tWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:", "t", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "homoscedasticTWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:", "homoscedasticT", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "tTestWithDouble:withDoubleArray:", "tTest", "D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "tTestWithDouble:withDoubleArray:withDouble:", "tTest", "Z", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "tTestWithDouble:withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:", "tTest", "D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "tTestWithDouble:withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:withDouble:", "tTest", "Z", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "tTestWithDoubleArray:withDoubleArray:", "tTest", "D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "homoscedasticTTestWithDoubleArray:withDoubleArray:", "homoscedasticTTest", "D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "tTestWithDoubleArray:withDoubleArray:withDouble:", "tTest", "Z", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "homoscedasticTTestWithDoubleArray:withDoubleArray:withDouble:", "homoscedasticTTest", "Z", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "tTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:", "tTest", "D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "homoscedasticTTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:", "homoscedasticTTest", "D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "tTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:withDouble:", "tTest", "Z", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.MathException;", NULL },
    { "dfWithDouble:withDouble:withDouble:withDouble:", "df", "D", 0x4, NULL, NULL },
    { "tWithDouble:withDouble:withDouble:withDouble:", "t", "D", 0x4, NULL, NULL },
    { "tWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "t", "D", 0x4, NULL, NULL },
    { "homoscedasticTWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "homoscedasticT", "D", 0x4, NULL, NULL },
    { "tTestWithDouble:withDouble:withDouble:withDouble:", "tTest", "D", 0x4, "Lorg.apache.commons.math.MathException;", NULL },
    { "tTestWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "tTest", "D", 0x4, "Lorg.apache.commons.math.MathException;", NULL },
    { "homoscedasticTTestWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "homoscedasticTTest", "D", 0x4, "Lorg.apache.commons.math.MathException;", NULL },
    { "setDistributionWithOrgApacheCommonsMathDistributionTDistribution:", "setDistribution", "V", 0x1, NULL, NULL },
    { "checkSignificanceLevelWithDouble:", "checkSignificanceLevel", "V", 0x2, "Ljava.lang.IllegalArgumentException;", NULL },
    { "checkSampleDataWithDoubleArray:", "checkSampleData", "V", 0x2, "Ljava.lang.IllegalArgumentException;", NULL },
    { "checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:", "checkSampleData", "V", 0x2, "Ljava.lang.IllegalArgumentException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "distribution_", NULL, 0x2, "Lorg.apache.commons.math.distribution.TDistribution;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathStatInferenceTTestImpl = { 2, "TTestImpl", "org.apache.commons.math.stat.inference", NULL, 0x1, 33, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathStatInferenceTTestImpl;
}

@end

void OrgApacheCommonsMathStatInferenceTTestImpl_init(OrgApacheCommonsMathStatInferenceTTestImpl *self) {
  OrgApacheCommonsMathStatInferenceTTestImpl_initWithOrgApacheCommonsMathDistributionTDistribution_(self, [new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(1.0) autorelease]);
}

OrgApacheCommonsMathStatInferenceTTestImpl *new_OrgApacheCommonsMathStatInferenceTTestImpl_init() {
  OrgApacheCommonsMathStatInferenceTTestImpl *self = [OrgApacheCommonsMathStatInferenceTTestImpl alloc];
  OrgApacheCommonsMathStatInferenceTTestImpl_init(self);
  return self;
}

void OrgApacheCommonsMathStatInferenceTTestImpl_initWithOrgApacheCommonsMathDistributionTDistribution_(OrgApacheCommonsMathStatInferenceTTestImpl *self, id<OrgApacheCommonsMathDistributionTDistribution> t) {
  NSObject_init(self);
  [self setDistributionWithOrgApacheCommonsMathDistributionTDistribution:t];
}

OrgApacheCommonsMathStatInferenceTTestImpl *new_OrgApacheCommonsMathStatInferenceTTestImpl_initWithOrgApacheCommonsMathDistributionTDistribution_(id<OrgApacheCommonsMathDistributionTDistribution> t) {
  OrgApacheCommonsMathStatInferenceTTestImpl *self = [OrgApacheCommonsMathStatInferenceTTestImpl alloc];
  OrgApacheCommonsMathStatInferenceTTestImpl_initWithOrgApacheCommonsMathDistributionTDistribution_(self, t);
  return self;
}

void OrgApacheCommonsMathStatInferenceTTestImpl_checkSignificanceLevelWithDouble_(OrgApacheCommonsMathStatInferenceTTestImpl *self, jdouble alpha) {
  if ((alpha <= 0) || (alpha > 0.5)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OUT_OF_BOUND_SIGNIFICANCE_LEVEL(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(alpha), JavaLangDouble_valueOfWithDouble_(0.0), JavaLangDouble_valueOfWithDouble_(0.5) } count:3 type:NSObject_class_()]);
  }
}

void OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithDoubleArray_(OrgApacheCommonsMathStatInferenceTTestImpl *self, IOSDoubleArray *data) {
  if ((data == nil) || (data->size_ < 2)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INSUFFICIENT_DATA_FOR_T_STATISTIC(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_((data == nil) ? 0 : data->size_) } count:1 type:NSObject_class_()]);
  }
}

void OrgApacheCommonsMathStatInferenceTTestImpl_checkSampleDataWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary_(OrgApacheCommonsMathStatInferenceTTestImpl *self, id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary> stat) {
  if ((stat == nil) || ([stat getN] < 2)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INSUFFICIENT_DATA_FOR_T_STATISTIC(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_((stat == nil) ? 0 : [stat getN]) } count:1 type:NSObject_class_()]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathStatInferenceTTestImpl)
