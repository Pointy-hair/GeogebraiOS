//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/DimensionMismatchException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.h"

#define OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance_serialVersionUID 4118372414238930270LL

@interface OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance () {
 @public
  IOSDoubleArray *sums_;
  IOSDoubleArray *productsSums_;
  jboolean isBiasCorrected_;
  jlong n_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance, sums_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance, productsSums_, IOSDoubleArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance, serialVersionUID, jlong)

@implementation OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance

- (instancetype)initWithInt:(jint)dimension
                withBoolean:(jboolean)isBiasCorrected {
  OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance_initWithInt_withBoolean_(self, dimension, isBiasCorrected);
  return self;
}

- (void)incrementWithDoubleArray:(IOSDoubleArray *)v {
  if (((IOSDoubleArray *) nil_chk(v))->size_ != ((IOSDoubleArray *) nil_chk(sums_))->size_) {
    @throw [new_OrgApacheCommonsMathDimensionMismatchException_initWithInt_withInt_(v->size_, sums_->size_) autorelease];
  }
  jint k = 0;
  for (jint i = 0; i < v->size_; ++i) {
    *IOSDoubleArray_GetRef(sums_, i) += IOSDoubleArray_Get(v, i);
    for (jint j = 0; j <= i; ++j) {
      *IOSDoubleArray_GetRef(nil_chk(productsSums_), k++) += IOSDoubleArray_Get(v, i) * IOSDoubleArray_Get(v, j);
    }
  }
  n_++;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getResult {
  jint dimension = ((IOSDoubleArray *) nil_chk(sums_))->size_;
  id<OrgApacheCommonsMathLinearRealMatrix> result = OrgApacheCommonsMathLinearMatrixUtils_createRealMatrixWithInt_withInt_(dimension, dimension);
  if (n_ > 1) {
    jdouble c = 1.0 / (n_ * (isBiasCorrected_ ? (n_ - 1) : n_));
    jint k = 0;
    for (jint i = 0; i < dimension; ++i) {
      for (jint j = 0; j <= i; ++j) {
        jdouble e = c * (n_ * IOSDoubleArray_Get(nil_chk(productsSums_), k++) - IOSDoubleArray_Get(sums_, i) * IOSDoubleArray_Get(sums_, j));
        [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(result)) setEntryWithInt:i withInt:j withDouble:e];
        [result setEntryWithInt:j withInt:i withDouble:e];
      }
    }
  }
  return result;
}

- (jlong)getN {
  return n_;
}

- (void)clear {
  n_ = 0;
  JavaUtilArrays_fillWithDoubleArray_withDouble_(sums_, 0.0);
  JavaUtilArrays_fillWithDoubleArray_withDouble_(productsSums_, 0.0);
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + (isBiasCorrected_ ? 1231 : 1237);
  result = prime * result + (jint) (n_ ^ (URShift64(n_, 32)));
  result = prime * result + JavaUtilArrays_hashCodeWithDoubleArray_(productsSums_);
  result = prime * result + JavaUtilArrays_hashCodeWithDoubleArray_(sums_);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (!([obj isKindOfClass:[OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance class]])) return NO;
  OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance *other = (OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance *) check_class_cast(obj, [OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance class]);
  if (isBiasCorrected_ != ((OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance *) nil_chk(other))->isBiasCorrected_) return NO;
  if (n_ != other->n_) return NO;
  if (!JavaUtilArrays_equalsWithDoubleArray_withDoubleArray_(productsSums_, other->productsSums_)) return NO;
  if (!JavaUtilArrays_equalsWithDoubleArray_withDoubleArray_(sums_, other->sums_)) return NO;
  return YES;
}

- (void)dealloc {
  RELEASE_(sums_);
  RELEASE_(productsSums_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withBoolean:", "VectorialCovariance", NULL, 0x1, NULL, NULL },
    { "incrementWithDoubleArray:", "increment", "V", 0x1, "Lorg.apache.commons.math.DimensionMismatchException;", NULL },
    { "getResult", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "getN", NULL, "J", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance_serialVersionUID },
    { "sums_", NULL, 0x12, "[D", NULL, NULL,  },
    { "productsSums_", NULL, 0x12, "[D", NULL, NULL,  },
    { "isBiasCorrected_", NULL, 0x12, "Z", NULL, NULL,  },
    { "n_", NULL, 0x2, "J", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance = { 2, "VectorialCovariance", "org.apache.commons.math.stat.descriptive.moment", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance;
}

@end

void OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance_initWithInt_withBoolean_(OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance *self, jint dimension, jboolean isBiasCorrected) {
  NSObject_init(self);
  OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance_setAndConsume_sums_(self, [IOSDoubleArray newArrayWithLength:dimension]);
  OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance_setAndConsume_productsSums_(self, [IOSDoubleArray newArrayWithLength:dimension * (dimension + 1) / 2]);
  self->n_ = 0;
  self->isBiasCorrected_ = isBiasCorrected;
}

OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance *new_OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance_initWithInt_withBoolean_(jint dimension, jboolean isBiasCorrected) {
  OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance *self = [OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance alloc];
  OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance_initWithInt_withBoolean_(self, dimension, isBiasCorrected);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathStatDescriptiveMomentVectorialCovariance)
