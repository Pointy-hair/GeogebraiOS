//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/stat/descriptive/rank/Percentile.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.h"
#include "org/apache/commons/math/stat/descriptive/rank/Percentile.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathStatDescriptiveRankPercentile_serialVersionUID -8091216485095130416LL
#define OrgApacheCommonsMathStatDescriptiveRankPercentile_MIN_SELECT_SIZE 15
#define OrgApacheCommonsMathStatDescriptiveRankPercentile_MAX_CACHED_LEVELS 10

@interface OrgApacheCommonsMathStatDescriptiveRankPercentile () {
 @public
  jdouble quantile_;
  IOSIntArray *cachedPivots_;
}

- (jdouble)selectWithDoubleArray:(IOSDoubleArray *)work
                    withIntArray:(IOSIntArray *)pivotsHeap
                         withInt:(jint)k;

- (jint)partitionWithDoubleArray:(IOSDoubleArray *)work
                         withInt:(jint)begin
                         withInt:(jint)end
                         withInt:(jint)pivot;

- (void)insertionSortWithDoubleArray:(IOSDoubleArray *)work
                             withInt:(jint)begin
                             withInt:(jint)end;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathStatDescriptiveRankPercentile, cachedPivots_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathStatDescriptiveRankPercentile, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathStatDescriptiveRankPercentile, MIN_SELECT_SIZE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathStatDescriptiveRankPercentile, MAX_CACHED_LEVELS, jint)

__attribute__((unused)) static jdouble OrgApacheCommonsMathStatDescriptiveRankPercentile_selectWithDoubleArray_withIntArray_withInt_(OrgApacheCommonsMathStatDescriptiveRankPercentile *self, IOSDoubleArray *work, IOSIntArray *pivotsHeap, jint k);

__attribute__((unused)) static jint OrgApacheCommonsMathStatDescriptiveRankPercentile_partitionWithDoubleArray_withInt_withInt_withInt_(OrgApacheCommonsMathStatDescriptiveRankPercentile *self, IOSDoubleArray *work, jint begin, jint end, jint pivot);

__attribute__((unused)) static void OrgApacheCommonsMathStatDescriptiveRankPercentile_insertionSortWithDoubleArray_withInt_withInt_(OrgApacheCommonsMathStatDescriptiveRankPercentile *self, IOSDoubleArray *work, jint begin, jint end);

@implementation OrgApacheCommonsMathStatDescriptiveRankPercentile

- (instancetype)init {
  OrgApacheCommonsMathStatDescriptiveRankPercentile_init(self);
  return self;
}

- (instancetype)initWithDouble:(jdouble)p {
  OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithDouble_(self, p);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathStatDescriptiveRankPercentile:(OrgApacheCommonsMathStatDescriptiveRankPercentile *)original {
  OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithOrgApacheCommonsMathStatDescriptiveRankPercentile_(self, original);
  return self;
}

- (void)setDataWithDoubleArray:(IOSDoubleArray *)values {
  if (values == nil) {
    cachedPivots_ = nil;
  }
  else {
    cachedPivots_ = [IOSIntArray newArrayWithLength:(LShift32((jint) 0x1, OrgApacheCommonsMathStatDescriptiveRankPercentile_MAX_CACHED_LEVELS)) - 1];
    JavaUtilArrays_fillWithIntArray_withInt_(cachedPivots_, -1);
  }
  [super setDataWithDoubleArray:values];
}

- (void)setDataWithDoubleArray:(IOSDoubleArray *)values
                       withInt:(jint)begin
                       withInt:(jint)length {
  if (values == nil) {
    cachedPivots_ = nil;
  }
  else {
    cachedPivots_ = [IOSIntArray newArrayWithLength:(LShift32((jint) 0x1, OrgApacheCommonsMathStatDescriptiveRankPercentile_MAX_CACHED_LEVELS)) - 1];
    JavaUtilArrays_fillWithIntArray_withInt_(cachedPivots_, -1);
  }
  [super setDataWithDoubleArray:values withInt:begin withInt:length];
}

- (jdouble)evaluateWithDouble:(jdouble)p {
  return [self evaluateWithDoubleArray:[self getDataRef] withDouble:p];
}

- (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)values
                        withDouble:(jdouble)p {
  [self testWithDoubleArray:values withInt:0 withInt:0];
  return [self evaluateWithDoubleArray:values withInt:0 withInt:((IOSDoubleArray *) nil_chk(values))->size_ withDouble:p];
}

- (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)values
                           withInt:(jint)start
                           withInt:(jint)length {
  return [self evaluateWithDoubleArray:values withInt:start withInt:length withDouble:quantile_];
}

- (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)values
                           withInt:(jint)begin
                           withInt:(jint)length
                        withDouble:(jdouble)p {
  [self testWithDoubleArray:values withInt:begin withInt:length];
  if ((p > 100) || (p <= 0)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OUT_OF_BOUNDS_QUANTILE_VALUE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(p) } count:1 type:NSObject_class_()]);
  }
  if (length == 0) {
    return JavaLangDouble_NaN;
  }
  if (length == 1) {
    return IOSDoubleArray_Get(nil_chk(values), begin);
  }
  jdouble n = length;
  jdouble pos = p * (n + 1) / 100;
  jdouble fpos = OrgApacheCommonsMathUtilFastMath_floorWithDouble_(pos);
  jint intPos = J2ObjCFpToInt(fpos);
  jdouble dif = pos - fpos;
  IOSDoubleArray *work;
  IOSIntArray *pivotsHeap;
  if (values == [self getDataRef]) {
    work = [self getDataRef];
    pivotsHeap = cachedPivots_;
  }
  else {
    work = [IOSDoubleArray newArrayWithLength:length];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, begin, work, 0, length);
    pivotsHeap = [IOSIntArray newArrayWithLength:(LShift32((jint) 0x1, OrgApacheCommonsMathStatDescriptiveRankPercentile_MAX_CACHED_LEVELS)) - 1];
    JavaUtilArrays_fillWithIntArray_withInt_(pivotsHeap, -1);
  }
  if (pos < 1) {
    return OrgApacheCommonsMathStatDescriptiveRankPercentile_selectWithDoubleArray_withIntArray_withInt_(self, work, pivotsHeap, 0);
  }
  if (pos >= n) {
    return OrgApacheCommonsMathStatDescriptiveRankPercentile_selectWithDoubleArray_withIntArray_withInt_(self, work, pivotsHeap, length - 1);
  }
  jdouble lower = OrgApacheCommonsMathStatDescriptiveRankPercentile_selectWithDoubleArray_withIntArray_withInt_(self, work, pivotsHeap, intPos - 1);
  jdouble upper = OrgApacheCommonsMathStatDescriptiveRankPercentile_selectWithDoubleArray_withIntArray_withInt_(self, work, pivotsHeap, intPos);
  return lower + dif * (upper - lower);
}

- (jdouble)selectWithDoubleArray:(IOSDoubleArray *)work
                    withIntArray:(IOSIntArray *)pivotsHeap
                         withInt:(jint)k {
  return OrgApacheCommonsMathStatDescriptiveRankPercentile_selectWithDoubleArray_withIntArray_withInt_(self, work, pivotsHeap, k);
}

- (jint)medianOf3WithDoubleArray:(IOSDoubleArray *)work
                         withInt:(jint)begin
                         withInt:(jint)end {
  jint inclusiveEnd = end - 1;
  jint middle = begin + (inclusiveEnd - begin) / 2;
  jdouble wBegin = IOSDoubleArray_Get(nil_chk(work), begin);
  jdouble wMiddle = IOSDoubleArray_Get(work, middle);
  jdouble wEnd = IOSDoubleArray_Get(work, inclusiveEnd);
  if (wBegin < wMiddle) {
    if (wMiddle < wEnd) {
      return middle;
    }
    else {
      return (wBegin < wEnd) ? inclusiveEnd : begin;
    }
  }
  else {
    if (wBegin < wEnd) {
      return begin;
    }
    else {
      return (wMiddle < wEnd) ? inclusiveEnd : middle;
    }
  }
}

- (jint)partitionWithDoubleArray:(IOSDoubleArray *)work
                         withInt:(jint)begin
                         withInt:(jint)end
                         withInt:(jint)pivot {
  return OrgApacheCommonsMathStatDescriptiveRankPercentile_partitionWithDoubleArray_withInt_withInt_withInt_(self, work, begin, end, pivot);
}

- (void)insertionSortWithDoubleArray:(IOSDoubleArray *)work
                             withInt:(jint)begin
                             withInt:(jint)end {
  OrgApacheCommonsMathStatDescriptiveRankPercentile_insertionSortWithDoubleArray_withInt_withInt_(self, work, begin, end);
}

- (jdouble)getQuantile {
  return quantile_;
}

- (void)setQuantileWithDouble:(jdouble)p {
  if (p <= 0 || p > 100) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OUT_OF_BOUNDS_QUANTILE_VALUE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(p) } count:1 type:NSObject_class_()]);
  }
  quantile_ = p;
}

- (OrgApacheCommonsMathStatDescriptiveRankPercentile *)copy__ {
  OrgApacheCommonsMathStatDescriptiveRankPercentile *result = new_OrgApacheCommonsMathStatDescriptiveRankPercentile_init();
  OrgApacheCommonsMathStatDescriptiveRankPercentile_copy__WithOrgApacheCommonsMathStatDescriptiveRankPercentile_withOrgApacheCommonsMathStatDescriptiveRankPercentile_(self, result);
  return result;
}

+ (void)copy__WithOrgApacheCommonsMathStatDescriptiveRankPercentile:(OrgApacheCommonsMathStatDescriptiveRankPercentile *)source
              withOrgApacheCommonsMathStatDescriptiveRankPercentile:(OrgApacheCommonsMathStatDescriptiveRankPercentile *)dest {
  OrgApacheCommonsMathStatDescriptiveRankPercentile_copy__WithOrgApacheCommonsMathStatDescriptiveRankPercentile_withOrgApacheCommonsMathStatDescriptiveRankPercentile_(source, dest);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Percentile", NULL, 0x1, NULL, NULL },
    { "initWithDouble:", "Percentile", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathStatDescriptiveRankPercentile:", "Percentile", NULL, 0x1, NULL, NULL },
    { "setDataWithDoubleArray:", "setData", "V", 0x1, NULL, NULL },
    { "setDataWithDoubleArray:withInt:withInt:", "setData", "V", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:withDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:withInt:withInt:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:withInt:withInt:withDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "selectWithDoubleArray:withIntArray:withInt:", "select", "D", 0x2, NULL, NULL },
    { "medianOf3WithDoubleArray:withInt:withInt:", "medianOf3", "I", 0x0, NULL, NULL },
    { "partitionWithDoubleArray:withInt:withInt:withInt:", "partition", "I", 0x2, NULL, NULL },
    { "insertionSortWithDoubleArray:withInt:withInt:", "insertionSort", "V", 0x2, NULL, NULL },
    { "getQuantile", NULL, "D", 0x1, NULL, NULL },
    { "setQuantileWithDouble:", "setQuantile", "V", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.stat.descriptive.rank.Percentile;", 0x1, NULL, NULL },
    { "copy__WithOrgApacheCommonsMathStatDescriptiveRankPercentile:withOrgApacheCommonsMathStatDescriptiveRankPercentile:", "copy", "V", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathStatDescriptiveRankPercentile_serialVersionUID },
    { "MIN_SELECT_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathStatDescriptiveRankPercentile_MIN_SELECT_SIZE },
    { "MAX_CACHED_LEVELS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathStatDescriptiveRankPercentile_MAX_CACHED_LEVELS },
    { "quantile_", NULL, 0x2, "D", NULL, NULL,  },
    { "cachedPivots_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathStatDescriptiveRankPercentile = { 2, "Percentile", "org.apache.commons.math.stat.descriptive.rank", NULL, 0x1, 17, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathStatDescriptiveRankPercentile;
}

@end

void OrgApacheCommonsMathStatDescriptiveRankPercentile_init(OrgApacheCommonsMathStatDescriptiveRankPercentile *self) {
  (void) OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithDouble_(self, 50.0);
}

OrgApacheCommonsMathStatDescriptiveRankPercentile *new_OrgApacheCommonsMathStatDescriptiveRankPercentile_init() {
  OrgApacheCommonsMathStatDescriptiveRankPercentile *self = [OrgApacheCommonsMathStatDescriptiveRankPercentile alloc];
  OrgApacheCommonsMathStatDescriptiveRankPercentile_init(self);
  return self;
}

void OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithDouble_(OrgApacheCommonsMathStatDescriptiveRankPercentile *self, jdouble p) {
  (void) OrgApacheCommonsMathStatDescriptiveAbstractUnivariateStatistic_init(self);
  self->quantile_ = 0.0;
  [self setQuantileWithDouble:p];
  self->cachedPivots_ = nil;
}

OrgApacheCommonsMathStatDescriptiveRankPercentile *new_OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithDouble_(jdouble p) {
  OrgApacheCommonsMathStatDescriptiveRankPercentile *self = [OrgApacheCommonsMathStatDescriptiveRankPercentile alloc];
  OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithDouble_(self, p);
  return self;
}

void OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithOrgApacheCommonsMathStatDescriptiveRankPercentile_(OrgApacheCommonsMathStatDescriptiveRankPercentile *self, OrgApacheCommonsMathStatDescriptiveRankPercentile *original) {
  (void) OrgApacheCommonsMathStatDescriptiveAbstractUnivariateStatistic_init(self);
  self->quantile_ = 0.0;
  OrgApacheCommonsMathStatDescriptiveRankPercentile_copy__WithOrgApacheCommonsMathStatDescriptiveRankPercentile_withOrgApacheCommonsMathStatDescriptiveRankPercentile_(original, self);
}

OrgApacheCommonsMathStatDescriptiveRankPercentile *new_OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithOrgApacheCommonsMathStatDescriptiveRankPercentile_(OrgApacheCommonsMathStatDescriptiveRankPercentile *original) {
  OrgApacheCommonsMathStatDescriptiveRankPercentile *self = [OrgApacheCommonsMathStatDescriptiveRankPercentile alloc];
  OrgApacheCommonsMathStatDescriptiveRankPercentile_initWithOrgApacheCommonsMathStatDescriptiveRankPercentile_(self, original);
  return self;
}

jdouble OrgApacheCommonsMathStatDescriptiveRankPercentile_selectWithDoubleArray_withIntArray_withInt_(OrgApacheCommonsMathStatDescriptiveRankPercentile *self, IOSDoubleArray *work, IOSIntArray *pivotsHeap, jint k) {
  jint begin = 0;
  jint end = ((IOSDoubleArray *) nil_chk(work))->size_;
  jint node = 0;
  while (end - begin > OrgApacheCommonsMathStatDescriptiveRankPercentile_MIN_SELECT_SIZE) {
    jint pivot;
    if ((node < ((IOSIntArray *) nil_chk(pivotsHeap))->size_) && (IOSIntArray_Get(pivotsHeap, node) >= 0)) {
      pivot = IOSIntArray_Get(pivotsHeap, node);
    }
    else {
      pivot = OrgApacheCommonsMathStatDescriptiveRankPercentile_partitionWithDoubleArray_withInt_withInt_withInt_(self, work, begin, end, [self medianOf3WithDoubleArray:work withInt:begin withInt:end]);
      if (node < pivotsHeap->size_) {
        *IOSIntArray_GetRef(pivotsHeap, node) = pivot;
      }
    }
    if (k == pivot) {
      return IOSDoubleArray_Get(work, k);
    }
    else if (k < pivot) {
      end = pivot;
      node = JavaLangMath_minWithInt_withInt_(2 * node + 1, pivotsHeap->size_);
    }
    else {
      begin = pivot + 1;
      node = JavaLangMath_minWithInt_withInt_(2 * node + 2, pivotsHeap->size_);
    }
  }
  OrgApacheCommonsMathStatDescriptiveRankPercentile_insertionSortWithDoubleArray_withInt_withInt_(self, work, begin, end);
  return IOSDoubleArray_Get(work, k);
}

jint OrgApacheCommonsMathStatDescriptiveRankPercentile_partitionWithDoubleArray_withInt_withInt_withInt_(OrgApacheCommonsMathStatDescriptiveRankPercentile *self, IOSDoubleArray *work, jint begin, jint end, jint pivot) {
  jdouble value = IOSDoubleArray_Get(nil_chk(work), pivot);
  *IOSDoubleArray_GetRef(work, pivot) = IOSDoubleArray_Get(work, begin);
  jint i = begin + 1;
  jint j = end - 1;
  while (i < j) {
    while ((i < j) && (IOSDoubleArray_Get(work, j) >= value)) {
      --j;
    }
    while ((i < j) && (IOSDoubleArray_Get(work, i) <= value)) {
      ++i;
    }
    if (i < j) {
      jdouble tmp = IOSDoubleArray_Get(work, i);
      *IOSDoubleArray_GetRef(work, i++) = IOSDoubleArray_Get(work, j);
      *IOSDoubleArray_GetRef(work, j--) = tmp;
    }
  }
  if ((i >= end) || (IOSDoubleArray_Get(work, i) > value)) {
    --i;
  }
  *IOSDoubleArray_GetRef(work, begin) = IOSDoubleArray_Get(work, i);
  *IOSDoubleArray_GetRef(work, i) = value;
  return i;
}

void OrgApacheCommonsMathStatDescriptiveRankPercentile_insertionSortWithDoubleArray_withInt_withInt_(OrgApacheCommonsMathStatDescriptiveRankPercentile *self, IOSDoubleArray *work, jint begin, jint end) {
  for (jint j = begin + 1; j < end; j++) {
    jdouble saved = IOSDoubleArray_Get(nil_chk(work), j);
    jint i = j - 1;
    while ((i >= begin) && (saved < IOSDoubleArray_Get(work, i))) {
      *IOSDoubleArray_GetRef(work, i + 1) = IOSDoubleArray_Get(work, i);
      i--;
    }
    *IOSDoubleArray_GetRef(work, i + 1) = saved;
  }
}

void OrgApacheCommonsMathStatDescriptiveRankPercentile_copy__WithOrgApacheCommonsMathStatDescriptiveRankPercentile_withOrgApacheCommonsMathStatDescriptiveRankPercentile_(OrgApacheCommonsMathStatDescriptiveRankPercentile *source, OrgApacheCommonsMathStatDescriptiveRankPercentile *dest) {
  OrgApacheCommonsMathStatDescriptiveRankPercentile_initialize();
  [((OrgApacheCommonsMathStatDescriptiveRankPercentile *) nil_chk(dest)) setDataWithDoubleArray:[((OrgApacheCommonsMathStatDescriptiveRankPercentile *) nil_chk(source)) getDataRef]];
  if (source->cachedPivots_ != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(source->cachedPivots_, 0, dest->cachedPivots_, 0, source->cachedPivots_->size_);
  }
  dest->quantile_ = source->quantile_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathStatDescriptiveRankPercentile)
