//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/complex/Complex.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/complex/Complex.h"
#include "org/apache/commons/math/complex/ComplexField.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

#define OrgApacheCommonsMathComplexComplex_serialVersionUID -6195664516687396620LL

@interface OrgApacheCommonsMathComplexComplex () {
 @public
  jdouble imaginary_;
  jdouble real_;
  jboolean isNaN__;
  jboolean isInfinite__;
}

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathComplexComplex, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathComplexComplex)

OrgApacheCommonsMathComplexComplex *OrgApacheCommonsMathComplexComplex_I_;
OrgApacheCommonsMathComplexComplex *OrgApacheCommonsMathComplexComplex_NaN_;
OrgApacheCommonsMathComplexComplex *OrgApacheCommonsMathComplexComplex_INF_;
OrgApacheCommonsMathComplexComplex *OrgApacheCommonsMathComplexComplex_ONE_;
OrgApacheCommonsMathComplexComplex *OrgApacheCommonsMathComplexComplex_ZERO_;

@implementation OrgApacheCommonsMathComplexComplex

- (instancetype)initWithDouble:(jdouble)real
                    withDouble:(jdouble)imaginary {
  OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(self, real, imaginary);
  return self;
}

- (jdouble)abs {
  if ([self isNaN]) {
    return JavaLangDouble_NaN;
  }
  if ([self isInfinite]) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  if (OrgApacheCommonsMathUtilFastMath_absWithDouble_(real_) < OrgApacheCommonsMathUtilFastMath_absWithDouble_(imaginary_)) {
    if (imaginary_ == 0.0) {
      return OrgApacheCommonsMathUtilFastMath_absWithDouble_(real_);
    }
    jdouble q = real_ / imaginary_;
    return OrgApacheCommonsMathUtilFastMath_absWithDouble_(imaginary_) * OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(1 + q * q);
  }
  else {
    if (real_ == 0.0) {
      return OrgApacheCommonsMathUtilFastMath_absWithDouble_(imaginary_);
    }
    jdouble q = imaginary_ / real_;
    return OrgApacheCommonsMathUtilFastMath_absWithDouble_(real_) * OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(1 + q * q);
  }
}

- (OrgApacheCommonsMathComplexComplex *)addWithId:(OrgApacheCommonsMathComplexComplex *)rhs {
  return [self createComplexWithDouble:real_ + [((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs)) getReal] withDouble:imaginary_ + [rhs getImaginary]];
}

- (OrgApacheCommonsMathComplexComplex *)conjugate {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [self createComplexWithDouble:real_ withDouble:-imaginary_];
}

- (OrgApacheCommonsMathComplexComplex *)divideWithId:(OrgApacheCommonsMathComplexComplex *)rhs {
  if ([self isNaN] || [((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs)) isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  jdouble c = [((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs)) getReal];
  jdouble d = [rhs getImaginary];
  if (c == 0.0 && d == 0.0) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  if ([rhs isInfinite] && ![self isInfinite]) {
    return OrgApacheCommonsMathComplexComplex_ZERO_;
  }
  if (OrgApacheCommonsMathUtilFastMath_absWithDouble_(c) < OrgApacheCommonsMathUtilFastMath_absWithDouble_(d)) {
    jdouble q = c / d;
    jdouble denominator = c * q + d;
    return [self createComplexWithDouble:(real_ * q + imaginary_) / denominator withDouble:(imaginary_ * q - real_) / denominator];
  }
  else {
    jdouble q = d / c;
    jdouble denominator = d * q + c;
    return [self createComplexWithDouble:(imaginary_ * q + real_) / denominator withDouble:(imaginary_ - real_ * q) / denominator];
  }
}

- (jboolean)isEqual:(id)other {
  if (self == other) {
    return YES;
  }
  if ([other isKindOfClass:[OrgApacheCommonsMathComplexComplex class]]) {
    OrgApacheCommonsMathComplexComplex *rhs = (OrgApacheCommonsMathComplexComplex *) check_class_cast(other, [OrgApacheCommonsMathComplexComplex class]);
    if ([((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs)) isNaN]) {
      return [self isNaN];
    }
    else {
      return (real_ == rhs->real_) && (imaginary_ == rhs->imaginary_);
    }
  }
  return NO;
}

- (NSUInteger)hash {
  if ([self isNaN]) {
    return 7;
  }
  return 37 * (17 * OrgApacheCommonsMathUtilMathUtils_hash__WithDouble_(imaginary_) + OrgApacheCommonsMathUtilMathUtils_hash__WithDouble_(real_));
}

- (jdouble)getImaginary {
  return imaginary_;
}

- (jdouble)getReal {
  return real_;
}

- (jboolean)isNaN {
  return isNaN__;
}

- (jboolean)isInfinite {
  return isInfinite__;
}

- (OrgApacheCommonsMathComplexComplex *)multiplyWithId:(OrgApacheCommonsMathComplexComplex *)rhs {
  if ([self isNaN] || [((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs)) isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(real_) || JavaLangDouble_isInfiniteWithDouble_(imaginary_) || JavaLangDouble_isInfiniteWithDouble_(((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs))->real_) || JavaLangDouble_isInfiniteWithDouble_(rhs->imaginary_)) {
    return OrgApacheCommonsMathComplexComplex_INF_;
  }
  return [self createComplexWithDouble:real_ * ((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs))->real_ - imaginary_ * rhs->imaginary_ withDouble:real_ * rhs->imaginary_ + imaginary_ * rhs->real_];
}

- (OrgApacheCommonsMathComplexComplex *)multiplyWithDouble:(jdouble)rhs {
  if ([self isNaN] || JavaLangDouble_isNaNWithDouble_(rhs)) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(real_) || JavaLangDouble_isInfiniteWithDouble_(imaginary_) || JavaLangDouble_isInfiniteWithDouble_(rhs)) {
    return OrgApacheCommonsMathComplexComplex_INF_;
  }
  return [self createComplexWithDouble:real_ * rhs withDouble:imaginary_ * rhs];
}

- (OrgApacheCommonsMathComplexComplex *)negate {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [self createComplexWithDouble:-real_ withDouble:-imaginary_];
}

- (OrgApacheCommonsMathComplexComplex *)subtractWithId:(OrgApacheCommonsMathComplexComplex *)rhs {
  if ([self isNaN] || [((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs)) isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [self createComplexWithDouble:real_ - [((OrgApacheCommonsMathComplexComplex *) nil_chk(rhs)) getReal] withDouble:imaginary_ - [rhs getImaginary]];
}

- (OrgApacheCommonsMathComplexComplex *)acos {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [((OrgApacheCommonsMathComplexComplex *) nil_chk([((OrgApacheCommonsMathComplexComplex *) nil_chk([self addWithId:[((OrgApacheCommonsMathComplexComplex *) nil_chk([self sqrt1z])) multiplyWithId:OrgApacheCommonsMathComplexComplex_I_]])) log])) multiplyWithId:[((OrgApacheCommonsMathComplexComplex *) nil_chk(OrgApacheCommonsMathComplexComplex_I_)) negate]];
}

- (OrgApacheCommonsMathComplexComplex *)asin {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [((OrgApacheCommonsMathComplexComplex *) nil_chk([((OrgApacheCommonsMathComplexComplex *) nil_chk([((OrgApacheCommonsMathComplexComplex *) nil_chk([self sqrt1z])) addWithId:[self multiplyWithId:OrgApacheCommonsMathComplexComplex_I_]])) log])) multiplyWithId:[((OrgApacheCommonsMathComplexComplex *) nil_chk(OrgApacheCommonsMathComplexComplex_I_)) negate]];
}

- (OrgApacheCommonsMathComplexComplex *)atan {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [((OrgApacheCommonsMathComplexComplex *) nil_chk([((OrgApacheCommonsMathComplexComplex *) nil_chk([((OrgApacheCommonsMathComplexComplex *) nil_chk([self addWithId:OrgApacheCommonsMathComplexComplex_I_])) divideWithId:[((OrgApacheCommonsMathComplexComplex *) nil_chk(OrgApacheCommonsMathComplexComplex_I_)) subtractWithId:self]])) log])) multiplyWithId:[OrgApacheCommonsMathComplexComplex_I_ divideWithId:[self createComplexWithDouble:2.0 withDouble:0.0]]];
}

- (OrgApacheCommonsMathComplexComplex *)cos {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [self createComplexWithDouble:OrgApacheCommonsMathUtilFastMath_cosWithDouble_(real_) * OrgApacheCommonsMathUtilMathUtils_coshWithDouble_(imaginary_) withDouble:-OrgApacheCommonsMathUtilFastMath_sinWithDouble_(real_) * OrgApacheCommonsMathUtilMathUtils_sinhWithDouble_(imaginary_)];
}

- (OrgApacheCommonsMathComplexComplex *)cosh {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [self createComplexWithDouble:OrgApacheCommonsMathUtilMathUtils_coshWithDouble_(real_) * OrgApacheCommonsMathUtilFastMath_cosWithDouble_(imaginary_) withDouble:OrgApacheCommonsMathUtilMathUtils_sinhWithDouble_(real_) * OrgApacheCommonsMathUtilFastMath_sinWithDouble_(imaginary_)];
}

- (OrgApacheCommonsMathComplexComplex *)exp {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  jdouble expReal = OrgApacheCommonsMathUtilFastMath_expWithDouble_(real_);
  return [self createComplexWithDouble:expReal * OrgApacheCommonsMathUtilFastMath_cosWithDouble_(imaginary_) withDouble:expReal * OrgApacheCommonsMathUtilFastMath_sinWithDouble_(imaginary_)];
}

- (OrgApacheCommonsMathComplexComplex *)log {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [self createComplexWithDouble:OrgApacheCommonsMathUtilFastMath_logWithDouble_([self abs]) withDouble:OrgApacheCommonsMathUtilFastMath_atan2WithDouble_withDouble_(imaginary_, real_)];
}

- (OrgApacheCommonsMathComplexComplex *)powWithOrgApacheCommonsMathComplexComplex:(OrgApacheCommonsMathComplexComplex *)x {
  if (x == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  return [((OrgApacheCommonsMathComplexComplex *) nil_chk([((OrgApacheCommonsMathComplexComplex *) nil_chk([self log])) multiplyWithId:x])) exp];
}

- (OrgApacheCommonsMathComplexComplex *)sin {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [self createComplexWithDouble:OrgApacheCommonsMathUtilFastMath_sinWithDouble_(real_) * OrgApacheCommonsMathUtilMathUtils_coshWithDouble_(imaginary_) withDouble:OrgApacheCommonsMathUtilFastMath_cosWithDouble_(real_) * OrgApacheCommonsMathUtilMathUtils_sinhWithDouble_(imaginary_)];
}

- (OrgApacheCommonsMathComplexComplex *)sinh {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  return [self createComplexWithDouble:OrgApacheCommonsMathUtilMathUtils_sinhWithDouble_(real_) * OrgApacheCommonsMathUtilFastMath_cosWithDouble_(imaginary_) withDouble:OrgApacheCommonsMathUtilMathUtils_coshWithDouble_(real_) * OrgApacheCommonsMathUtilFastMath_sinWithDouble_(imaginary_)];
}

- (OrgApacheCommonsMathComplexComplex *)sqrt {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  if (real_ == 0.0 && imaginary_ == 0.0) {
    return [self createComplexWithDouble:0.0 withDouble:0.0];
  }
  jdouble t = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_((OrgApacheCommonsMathUtilFastMath_absWithDouble_(real_) + [self abs]) / 2.0);
  if (real_ >= 0.0) {
    return [self createComplexWithDouble:t withDouble:imaginary_ / (2.0 * t)];
  }
  else {
    return [self createComplexWithDouble:OrgApacheCommonsMathUtilFastMath_absWithDouble_(imaginary_) / (2.0 * t) withDouble:OrgApacheCommonsMathUtilMathUtils_indicatorWithDouble_(imaginary_) * t];
  }
}

- (OrgApacheCommonsMathComplexComplex *)sqrt1z {
  return [((OrgApacheCommonsMathComplexComplex *) nil_chk([((OrgApacheCommonsMathComplexComplex *) nil_chk([self createComplexWithDouble:1.0 withDouble:0.0])) subtractWithId:[self multiplyWithId:self]])) sqrt];
}

- (OrgApacheCommonsMathComplexComplex *)tan {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  jdouble real2 = 2.0 * real_;
  jdouble imaginary2 = 2.0 * imaginary_;
  jdouble d = OrgApacheCommonsMathUtilFastMath_cosWithDouble_(real2) + OrgApacheCommonsMathUtilMathUtils_coshWithDouble_(imaginary2);
  return [self createComplexWithDouble:OrgApacheCommonsMathUtilFastMath_sinWithDouble_(real2) / d withDouble:OrgApacheCommonsMathUtilMathUtils_sinhWithDouble_(imaginary2) / d];
}

- (OrgApacheCommonsMathComplexComplex *)tanh {
  if ([self isNaN]) {
    return OrgApacheCommonsMathComplexComplex_NaN_;
  }
  jdouble real2 = 2.0 * real_;
  jdouble imaginary2 = 2.0 * imaginary_;
  jdouble d = OrgApacheCommonsMathUtilMathUtils_coshWithDouble_(real2) + OrgApacheCommonsMathUtilFastMath_cosWithDouble_(imaginary2);
  return [self createComplexWithDouble:OrgApacheCommonsMathUtilMathUtils_sinhWithDouble_(real2) / d withDouble:OrgApacheCommonsMathUtilFastMath_sinWithDouble_(imaginary2) / d];
}

- (jdouble)getArgument {
  return OrgApacheCommonsMathUtilFastMath_atan2WithDouble_withDouble_([self getImaginary], [self getReal]);
}

- (id<JavaUtilList>)nthRootWithInt:(jint)n {
  if (n <= 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(n) } count:1 type:NSObject_class_()]);
  }
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  if ([self isNaN]) {
    [result addWithId:OrgApacheCommonsMathComplexComplex_NaN_];
    return result;
  }
  if ([self isInfinite]) {
    [result addWithId:OrgApacheCommonsMathComplexComplex_INF_];
    return result;
  }
  jdouble nthRootOfAbs = OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_([self abs], 1.0 / n);
  jdouble nthPhi = [self getArgument] / n;
  jdouble slice = 2 * OrgApacheCommonsMathUtilFastMath_PI / n;
  jdouble innerPart = nthPhi;
  for (jint k = 0; k < n; k++) {
    jdouble realPart = nthRootOfAbs * OrgApacheCommonsMathUtilFastMath_cosWithDouble_(innerPart);
    jdouble imaginaryPart = nthRootOfAbs * OrgApacheCommonsMathUtilFastMath_sinWithDouble_(innerPart);
    [result addWithId:[self createComplexWithDouble:realPart withDouble:imaginaryPart]];
    innerPart += slice;
  }
  return result;
}

- (OrgApacheCommonsMathComplexComplex *)createComplexWithDouble:(jdouble)realPart
                                                     withDouble:(jdouble)imaginaryPart {
  return new_OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(realPart, imaginaryPart);
}

- (id)readResolve {
  return [self createComplexWithDouble:real_ withDouble:imaginary_];
}

- (OrgApacheCommonsMathComplexComplexField *)getField {
  return OrgApacheCommonsMathComplexComplexField_getInstance();
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathComplexComplex class]) {
    OrgApacheCommonsMathComplexComplex_I_ = new_OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(0.0, 1.0);
    OrgApacheCommonsMathComplexComplex_NaN_ = new_OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(JavaLangDouble_NaN, JavaLangDouble_NaN);
    OrgApacheCommonsMathComplexComplex_INF_ = new_OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(JavaLangDouble_POSITIVE_INFINITY, JavaLangDouble_POSITIVE_INFINITY);
    OrgApacheCommonsMathComplexComplex_ONE_ = new_OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(1.0, 0.0);
    OrgApacheCommonsMathComplexComplex_ZERO_ = new_OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(0.0, 0.0);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathComplexComplex)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:", "Complex", NULL, 0x1, NULL, NULL },
    { "abs", NULL, "D", 0x1, NULL, NULL },
    { "addWithId:", "add", "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "conjugate", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "divideWithId:", "divide", "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "getImaginary", NULL, "D", 0x1, NULL, NULL },
    { "getReal", NULL, "D", 0x1, NULL, NULL },
    { "isNaN", NULL, "Z", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL, NULL },
    { "multiplyWithId:", "multiply", "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "multiplyWithDouble:", "multiply", "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "negate", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "subtractWithId:", "subtract", "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "acos", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "asin", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "atan", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "cos", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "cosh", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "exp", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "log", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "powWithOrgApacheCommonsMathComplexComplex:", "pow", "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "sin", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "sinh", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "sqrt", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "sqrt1z", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "tan", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "tanh", NULL, "Lorg.apache.commons.math.complex.Complex;", 0x1, NULL, NULL },
    { "getArgument", NULL, "D", 0x1, NULL, NULL },
    { "nthRootWithInt:", "nthRoot", "Ljava.util.List;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "createComplexWithDouble:withDouble:", "createComplex", "Lorg.apache.commons.math.complex.Complex;", 0x4, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x14, NULL, NULL },
    { "getField", NULL, "Lorg.apache.commons.math.complex.ComplexField;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "I_", NULL, 0x19, "Lorg.apache.commons.math.complex.Complex;", &OrgApacheCommonsMathComplexComplex_I_, NULL,  },
    { "NaN_", NULL, 0x19, "Lorg.apache.commons.math.complex.Complex;", &OrgApacheCommonsMathComplexComplex_NaN_, NULL,  },
    { "INF_", NULL, 0x19, "Lorg.apache.commons.math.complex.Complex;", &OrgApacheCommonsMathComplexComplex_INF_, NULL,  },
    { "ONE_", NULL, 0x19, "Lorg.apache.commons.math.complex.Complex;", &OrgApacheCommonsMathComplexComplex_ONE_, NULL,  },
    { "ZERO_", NULL, 0x19, "Lorg.apache.commons.math.complex.Complex;", &OrgApacheCommonsMathComplexComplex_ZERO_, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathComplexComplex_serialVersionUID },
    { "imaginary_", NULL, 0x12, "D", NULL, NULL,  },
    { "real_", NULL, 0x12, "D", NULL, NULL,  },
    { "isNaN__", "isNaN", 0x92, "Z", NULL, NULL,  },
    { "isInfinite__", "isInfinite", 0x92, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathComplexComplex = { 2, "Complex", "org.apache.commons.math.complex", NULL, 0x1, 34, methods, 10, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lorg/apache/commons/math/FieldElement<Lorg/apache/commons/math/complex/Complex;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsMathComplexComplex;
}

@end

void OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(OrgApacheCommonsMathComplexComplex *self, jdouble real, jdouble imaginary) {
  (void) NSObject_init(self);
  self->real_ = real;
  self->imaginary_ = imaginary;
  self->isNaN__ = (JavaLangDouble_isNaNWithDouble_(real) || JavaLangDouble_isNaNWithDouble_(imaginary));
  self->isInfinite__ = (!self->isNaN__ && (JavaLangDouble_isInfiniteWithDouble_(real) || JavaLangDouble_isInfiniteWithDouble_(imaginary)));
}

OrgApacheCommonsMathComplexComplex *new_OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(jdouble real, jdouble imaginary) {
  OrgApacheCommonsMathComplexComplex *self = [OrgApacheCommonsMathComplexComplex alloc];
  OrgApacheCommonsMathComplexComplex_initWithDouble_withDouble_(self, real, imaginary);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathComplexComplex)
