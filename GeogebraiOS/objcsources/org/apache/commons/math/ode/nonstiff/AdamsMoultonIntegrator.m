//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/RealMatrixPreservingVisitor.h"
#include "org/apache/commons/math/ode/AbstractIntegrator.h"
#include "org/apache/commons/math/ode/DerivativeException.h"
#include "org/apache/commons/math/ode/FirstOrderDifferentialEquations.h"
#include "org/apache/commons/math/ode/IntegratorException.h"
#include "org/apache/commons/math/ode/MultistepIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/AdamsIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.h"
#include "org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/StepHandler.h"
#include "org/apache/commons/math/util/FastMath.h"

static NSString *OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_METHOD_NAME_ = @"Adams-Moulton";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator, METHOD_NAME_, NSString *)

@interface OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector : NSObject < OrgApacheCommonsMathLinearRealMatrixPreservingVisitor > {
 @public
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *this$0_;
  IOSDoubleArray *previous_;
  IOSDoubleArray *scaled1_;
  IOSDoubleArray *before_;
  IOSDoubleArray *after_;
}

- (instancetype)initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator:(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *)outer$
                                                              withDoubleArray:(IOSDoubleArray *)previous
                                                              withDoubleArray:(IOSDoubleArray *)scaled
                                                              withDoubleArray:(IOSDoubleArray *)state;

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn;

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value;

- (jdouble)end;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector, this$0_, OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector, previous_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector, scaled1_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector, before_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector, after_, IOSDoubleArray *)

__attribute__((unused)) static void OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector_initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_withDoubleArray_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector *self, OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *outer$, IOSDoubleArray *previous, IOSDoubleArray *scaled, IOSDoubleArray *state);

__attribute__((unused)) static OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector *new_OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector_initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_withDoubleArray_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *outer$, IOSDoubleArray *previous, IOSDoubleArray *scaled, IOSDoubleArray *state) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector)

@implementation OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator

- (instancetype)initWithInt:(jint)nSteps
                 withDouble:(jdouble)minStep
                 withDouble:(jdouble)maxStep
                 withDouble:(jdouble)scalAbsoluteTolerance
                 withDouble:(jdouble)scalRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_initWithInt_withDouble_withDouble_withDouble_withDouble_(self, nSteps, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  return self;
}

- (instancetype)initWithInt:(jint)nSteps
                 withDouble:(jdouble)minStep
                 withDouble:(jdouble)maxStep
            withDoubleArray:(IOSDoubleArray *)vecAbsoluteTolerance
            withDoubleArray:(IOSDoubleArray *)vecRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_initWithInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, nSteps, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  return self;
}

- (jdouble)integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:(id<OrgApacheCommonsMathOdeFirstOrderDifferentialEquations>)equations
                                                                    withDouble:(jdouble)t0
                                                               withDoubleArray:(IOSDoubleArray *)y0
                                                                    withDouble:(jdouble)t
                                                               withDoubleArray:(IOSDoubleArray *)y {
  jint n = ((IOSDoubleArray *) nil_chk(y0))->size_;
  [self sanityChecksWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations withDouble:t0 withDoubleArray:y0 withDouble:t withDoubleArray:y];
  [self setEquationsWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations];
  [self resetEvaluations];
  jboolean forward = t > t0;
  if (y != y0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(y0, 0, y, 0, n);
  }
  IOSDoubleArray *yDot = [IOSDoubleArray newArrayWithLength:y0->size_];
  IOSDoubleArray *yTmp = [IOSDoubleArray newArrayWithLength:y0->size_];
  IOSDoubleArray *predictedScaled = [IOSDoubleArray newArrayWithLength:y0->size_];
  OrgApacheCommonsMathLinearArray2DRowRealMatrix *nordsieckTmp = nil;
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *interpolator = new_OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_init();
  [interpolator reinitializeWithDoubleArray:y withBoolean:forward];
  for (id<OrgApacheCommonsMathOdeSamplingStepHandler> __strong handler in nil_chk(stepHandlers_)) {
    [((id<OrgApacheCommonsMathOdeSamplingStepHandler>) nil_chk(handler)) reset];
  }
  [self setStateInitializedWithBoolean:NO];
  [self startWithDouble:t0 withDoubleArray:y withDouble:t];
  [interpolator reinitializeWithDouble:stepStart_ withDouble:stepSize_ withDoubleArray:scaled_ withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieck_];
  [interpolator storeTimeWithDouble:stepStart_];
  jdouble hNew = stepSize_;
  [interpolator rescaleWithDouble:hNew];
  isLastStep_ = NO;
  do {
    jdouble error = 10;
    while (error >= 1.0) {
      stepSize_ = hNew;
      jdouble stepEnd = stepStart_ + stepSize_;
      [interpolator setInterpolatedTimeWithDouble:stepEnd];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([interpolator getInterpolatedState], 0, yTmp, 0, y0->size_);
      [self computeDerivativesWithDouble:stepEnd withDoubleArray:yTmp withDoubleArray:yDot];
      for (jint j = 0; j < y0->size_; ++j) {
        *IOSDoubleArray_GetRef(predictedScaled, j) = stepSize_ * IOSDoubleArray_Get(yDot, j);
      }
      nordsieckTmp = [self updateHighOrderDerivativesPhase1WithOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieck_];
      [self updateHighOrderDerivativesPhase2WithDoubleArray:scaled_ withDoubleArray:predictedScaled withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieckTmp];
      error = [((OrgApacheCommonsMathLinearArray2DRowRealMatrix *) nil_chk(nordsieckTmp)) walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:new_OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector_initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_withDoubleArray_withDoubleArray_withDoubleArray_(self, y, predictedScaled, yTmp)];
      if (error >= 1.0) {
        jdouble factor = [self computeStepGrowShrinkFactorWithDouble:error];
        hNew = [self filterStepWithDouble:stepSize_ * factor withBoolean:forward withBoolean:NO];
        [interpolator rescaleWithDouble:hNew];
      }
    }
    jdouble stepEnd = stepStart_ + stepSize_;
    [self computeDerivativesWithDouble:stepEnd withDoubleArray:yTmp withDoubleArray:yDot];
    IOSDoubleArray *correctedScaled = [IOSDoubleArray newArrayWithLength:y0->size_];
    for (jint j = 0; j < y0->size_; ++j) {
      *IOSDoubleArray_GetRef(correctedScaled, j) = stepSize_ * IOSDoubleArray_Get(yDot, j);
    }
    [self updateHighOrderDerivativesPhase2WithDoubleArray:predictedScaled withDoubleArray:correctedScaled withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieckTmp];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yTmp, 0, y, 0, n);
    [interpolator reinitializeWithDouble:stepEnd withDouble:stepSize_ withDoubleArray:correctedScaled withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieckTmp];
    [interpolator storeTimeWithDouble:stepStart_];
    [interpolator shift];
    [interpolator storeTimeWithDouble:stepEnd];
    stepStart_ = [self acceptStepWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator:interpolator withDoubleArray:y withDoubleArray:yDot withDouble:t];
    scaled_ = correctedScaled;
    nordsieck_ = nordsieckTmp;
    if (!isLastStep_) {
      [interpolator storeTimeWithDouble:stepStart_];
      if (resetOccurred_) {
        [self startWithDouble:stepStart_ withDoubleArray:y withDouble:t];
        [interpolator reinitializeWithDouble:stepStart_ withDouble:stepSize_ withDoubleArray:scaled_ withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieck_];
      }
      jdouble factor = [self computeStepGrowShrinkFactorWithDouble:error];
      jdouble scaledH = stepSize_ * factor;
      jdouble nextT = stepStart_ + scaledH;
      jboolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
      hNew = [self filterStepWithDouble:scaledH withBoolean:forward withBoolean:nextIsLast];
      jdouble filteredNextT = stepStart_ + hNew;
      jboolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
      if (filteredNextIsLast) {
        hNew = t - stepStart_;
      }
      [interpolator rescaleWithDouble:hNew];
    }
  }
  while (!isLastStep_);
  jdouble stopTime = stepStart_;
  stepStart_ = JavaLangDouble_NaN;
  stepSize_ = JavaLangDouble_NaN;
  return stopTime;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withDouble:withDouble:withDouble:withDouble:", "AdamsMoultonIntegrator", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithInt:withDouble:withDouble:withDoubleArray:withDoubleArray:", "AdamsMoultonIntegrator", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:withDouble:withDoubleArray:withDouble:withDoubleArray:", "integrate", "D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;Lorg.apache.commons.math.ode.IntegratorException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "METHOD_NAME_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_METHOD_NAME_, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator = { 2, "AdamsMoultonIntegrator", "org.apache.commons.math.ode.nonstiff", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator;
}

@end

void OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_initWithInt_withDouble_withDouble_withDouble_withDouble_(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *self, jint nSteps, jdouble minStep, jdouble maxStep, jdouble scalAbsoluteTolerance, jdouble scalRelativeTolerance) {
  (void) OrgApacheCommonsMathOdeNonstiffAdamsIntegrator_initWithNSString_withInt_withInt_withDouble_withDouble_withDouble_withDouble_(self, OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_METHOD_NAME_, nSteps, nSteps + 1, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
}

OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *new_OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_initWithInt_withDouble_withDouble_withDouble_withDouble_(jint nSteps, jdouble minStep, jdouble maxStep, jdouble scalAbsoluteTolerance, jdouble scalRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *self = [OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator alloc];
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_initWithInt_withDouble_withDouble_withDouble_withDouble_(self, nSteps, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  return self;
}

void OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_initWithInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *self, jint nSteps, jdouble minStep, jdouble maxStep, IOSDoubleArray *vecAbsoluteTolerance, IOSDoubleArray *vecRelativeTolerance) {
  (void) OrgApacheCommonsMathOdeNonstiffAdamsIntegrator_initWithNSString_withInt_withInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_METHOD_NAME_, nSteps, nSteps + 1, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
}

OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *new_OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_initWithInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(jint nSteps, jdouble minStep, jdouble maxStep, IOSDoubleArray *vecAbsoluteTolerance, IOSDoubleArray *vecRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *self = [OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator alloc];
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_initWithInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, nSteps, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator)

@implementation OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector

- (instancetype)initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator:(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *)outer$
                                                              withDoubleArray:(IOSDoubleArray *)previous
                                                              withDoubleArray:(IOSDoubleArray *)scaled
                                                              withDoubleArray:(IOSDoubleArray *)state {
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector_initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_withDoubleArray_withDoubleArray_withDoubleArray_(self, outer$, previous, scaled, state);
  return self;
}

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn {
  JavaUtilArrays_fillWithDoubleArray_withDouble_(after_, 0.0);
}

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value {
  if ((row & (jint) 0x1) == 0) {
    *IOSDoubleArray_GetRef(nil_chk(after_), column) -= value;
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(after_), column) += value;
  }
}

- (jdouble)end {
  jdouble error = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(after_))->size_; ++i) {
    *IOSDoubleArray_GetRef(after_, i) += IOSDoubleArray_Get(nil_chk(previous_), i) + IOSDoubleArray_Get(nil_chk(scaled1_), i);
    if (i < this$0_->mainSetDimension_) {
      jdouble yScale = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(previous_, i)), OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(after_, i)));
      jdouble tol = (this$0_->vecAbsoluteTolerance_ == nil) ? (this$0_->scalAbsoluteTolerance_ + this$0_->scalRelativeTolerance_ * yScale) : (IOSDoubleArray_Get(this$0_->vecAbsoluteTolerance_, i) + IOSDoubleArray_Get(nil_chk(this$0_->vecRelativeTolerance_), i) * yScale);
      jdouble ratio = (IOSDoubleArray_Get(after_, i) - IOSDoubleArray_Get(nil_chk(before_), i)) / tol;
      error += ratio * ratio;
    }
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(error / this$0_->mainSetDimension_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator:withDoubleArray:withDoubleArray:withDoubleArray:", "Corrector", NULL, 0x1, NULL, NULL },
    { "startWithInt:withInt:withInt:withInt:withInt:withInt:", "start", "V", 0x1, NULL, NULL },
    { "visitWithInt:withInt:withDouble:", "visit", "V", 0x1, NULL, NULL },
    { "end", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;", NULL, NULL,  },
    { "previous_", NULL, 0x12, "[D", NULL, NULL,  },
    { "scaled1_", NULL, 0x12, "[D", NULL, NULL,  },
    { "before_", NULL, 0x12, "[D", NULL, NULL,  },
    { "after_", NULL, 0x12, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector = { 2, "Corrector", "org.apache.commons.math.ode.nonstiff", "AdamsMoultonIntegrator", 0x2, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector;
}

@end

void OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector_initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_withDoubleArray_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector *self, OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *outer$, IOSDoubleArray *previous, IOSDoubleArray *scaled, IOSDoubleArray *state) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  self->previous_ = previous;
  self->scaled1_ = scaled;
  self->after_ = state;
  self->before_ = [((IOSDoubleArray *) nil_chk(state)) clone];
}

OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector *new_OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector_initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_withDoubleArray_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator *outer$, IOSDoubleArray *previous, IOSDoubleArray *scaled, IOSDoubleArray *state) {
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector *self = [OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector alloc];
  OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector_initWithOrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_withDoubleArray_withDoubleArray_withDoubleArray_(self, outer$, previous, scaled, state);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeNonstiffAdamsMoultonIntegrator_Corrector)
