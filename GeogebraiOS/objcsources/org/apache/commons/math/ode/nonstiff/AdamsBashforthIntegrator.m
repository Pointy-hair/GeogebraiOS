//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/ode/AbstractIntegrator.h"
#include "org/apache/commons/math/ode/DerivativeException.h"
#include "org/apache/commons/math/ode/FirstOrderDifferentialEquations.h"
#include "org/apache/commons/math/ode/IntegratorException.h"
#include "org/apache/commons/math/ode/MultistepIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/AdamsIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.h"
#include "org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/StepHandler.h"
#include "org/apache/commons/math/util/FastMath.h"

static NSString *OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_METHOD_NAME_ = @"Adams-Bashforth";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator, METHOD_NAME_, NSString *)

@implementation OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator

- (instancetype)initWithInt:(jint)nSteps
                 withDouble:(jdouble)minStep
                 withDouble:(jdouble)maxStep
                 withDouble:(jdouble)scalAbsoluteTolerance
                 withDouble:(jdouble)scalRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_initWithInt_withDouble_withDouble_withDouble_withDouble_(self, nSteps, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  return self;
}

- (instancetype)initWithInt:(jint)nSteps
                 withDouble:(jdouble)minStep
                 withDouble:(jdouble)maxStep
            withDoubleArray:(IOSDoubleArray *)vecAbsoluteTolerance
            withDoubleArray:(IOSDoubleArray *)vecRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_initWithInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, nSteps, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  return self;
}

- (jdouble)integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:(id<OrgApacheCommonsMathOdeFirstOrderDifferentialEquations>)equations
                                                                    withDouble:(jdouble)t0
                                                               withDoubleArray:(IOSDoubleArray *)y0
                                                                    withDouble:(jdouble)t
                                                               withDoubleArray:(IOSDoubleArray *)y {
  jint n = ((IOSDoubleArray *) nil_chk(y0))->size_;
  [self sanityChecksWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations withDouble:t0 withDoubleArray:y0 withDouble:t withDoubleArray:y];
  [self setEquationsWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations];
  [self resetEvaluations];
  jboolean forward = t > t0;
  if (y != y0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(y0, 0, y, 0, n);
  }
  IOSDoubleArray *yDot = [IOSDoubleArray newArrayWithLength:n];
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *interpolator = new_OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_init();
  [interpolator reinitializeWithDoubleArray:y withBoolean:forward];
  for (id<OrgApacheCommonsMathOdeSamplingStepHandler> __strong handler in nil_chk(stepHandlers_)) {
    [((id<OrgApacheCommonsMathOdeSamplingStepHandler>) nil_chk(handler)) reset];
  }
  [self setStateInitializedWithBoolean:NO];
  [self startWithDouble:t0 withDoubleArray:y withDouble:t];
  [interpolator reinitializeWithDouble:stepStart_ withDouble:stepSize_ withDoubleArray:scaled_ withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieck_];
  [interpolator storeTimeWithDouble:stepStart_];
  jint lastRow = [((OrgApacheCommonsMathLinearArray2DRowRealMatrix *) nil_chk(nordsieck_)) getRowDimension] - 1;
  jdouble hNew = stepSize_;
  [interpolator rescaleWithDouble:hNew];
  isLastStep_ = NO;
  do {
    jdouble error = 10;
    while (error >= 1.0) {
      stepSize_ = hNew;
      error = 0;
      for (jint i = 0; i < mainSetDimension_; ++i) {
        jdouble yScale = OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(y), i));
        jdouble tol = (vecAbsoluteTolerance_ == nil) ? (scalAbsoluteTolerance_ + scalRelativeTolerance_ * yScale) : (IOSDoubleArray_Get(vecAbsoluteTolerance_, i) + IOSDoubleArray_Get(nil_chk(vecRelativeTolerance_), i) * yScale);
        jdouble ratio = [nordsieck_ getEntryWithInt:lastRow withInt:i] / tol;
        error += ratio * ratio;
      }
      error = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(error / mainSetDimension_);
      if (error >= 1.0) {
        jdouble factor = [self computeStepGrowShrinkFactorWithDouble:error];
        hNew = [self filterStepWithDouble:stepSize_ * factor withBoolean:forward withBoolean:NO];
        [interpolator rescaleWithDouble:hNew];
      }
    }
    jdouble stepEnd = stepStart_ + stepSize_;
    [interpolator shift];
    [interpolator setInterpolatedTimeWithDouble:stepEnd];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([interpolator getInterpolatedState], 0, y, 0, y0->size_);
    [self computeDerivativesWithDouble:stepEnd withDoubleArray:y withDoubleArray:yDot];
    IOSDoubleArray *predictedScaled = [IOSDoubleArray newArrayWithLength:y0->size_];
    for (jint j = 0; j < y0->size_; ++j) {
      *IOSDoubleArray_GetRef(predictedScaled, j) = stepSize_ * IOSDoubleArray_Get(yDot, j);
    }
    OrgApacheCommonsMathLinearArray2DRowRealMatrix *nordsieckTmp = [self updateHighOrderDerivativesPhase1WithOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieck_];
    [self updateHighOrderDerivativesPhase2WithDoubleArray:scaled_ withDoubleArray:predictedScaled withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieckTmp];
    [interpolator reinitializeWithDouble:stepEnd withDouble:stepSize_ withDoubleArray:predictedScaled withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieckTmp];
    [interpolator storeTimeWithDouble:stepEnd];
    stepStart_ = [self acceptStepWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator:interpolator withDoubleArray:y withDoubleArray:yDot withDouble:t];
    scaled_ = predictedScaled;
    nordsieck_ = nordsieckTmp;
    [interpolator reinitializeWithDouble:stepEnd withDouble:stepSize_ withDoubleArray:scaled_ withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieck_];
    if (!isLastStep_) {
      [interpolator storeTimeWithDouble:stepStart_];
      if (resetOccurred_) {
        [self startWithDouble:stepStart_ withDoubleArray:y withDouble:t];
        [interpolator reinitializeWithDouble:stepStart_ withDouble:stepSize_ withDoubleArray:scaled_ withOrgApacheCommonsMathLinearArray2DRowRealMatrix:nordsieck_];
      }
      jdouble factor = [self computeStepGrowShrinkFactorWithDouble:error];
      jdouble scaledH = stepSize_ * factor;
      jdouble nextT = stepStart_ + scaledH;
      jboolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
      hNew = [self filterStepWithDouble:scaledH withBoolean:forward withBoolean:nextIsLast];
      jdouble filteredNextT = stepStart_ + hNew;
      jboolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
      if (filteredNextIsLast) {
        hNew = t - stepStart_;
      }
      [interpolator rescaleWithDouble:hNew];
    }
  }
  while (!isLastStep_);
  jdouble stopTime = stepStart_;
  [self resetInternalState];
  return stopTime;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withDouble:withDouble:withDouble:withDouble:", "AdamsBashforthIntegrator", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithInt:withDouble:withDouble:withDoubleArray:withDoubleArray:", "AdamsBashforthIntegrator", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:withDouble:withDoubleArray:withDouble:withDoubleArray:", "integrate", "D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;Lorg.apache.commons.math.ode.IntegratorException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "METHOD_NAME_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_METHOD_NAME_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator = { 2, "AdamsBashforthIntegrator", "org.apache.commons.math.ode.nonstiff", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator;
}

@end

void OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_initWithInt_withDouble_withDouble_withDouble_withDouble_(OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator *self, jint nSteps, jdouble minStep, jdouble maxStep, jdouble scalAbsoluteTolerance, jdouble scalRelativeTolerance) {
  (void) OrgApacheCommonsMathOdeNonstiffAdamsIntegrator_initWithNSString_withInt_withInt_withDouble_withDouble_withDouble_withDouble_(self, OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_METHOD_NAME_, nSteps, nSteps, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
}

OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator *new_OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_initWithInt_withDouble_withDouble_withDouble_withDouble_(jint nSteps, jdouble minStep, jdouble maxStep, jdouble scalAbsoluteTolerance, jdouble scalRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator *self = [OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator alloc];
  OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_initWithInt_withDouble_withDouble_withDouble_withDouble_(self, nSteps, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  return self;
}

void OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_initWithInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator *self, jint nSteps, jdouble minStep, jdouble maxStep, IOSDoubleArray *vecAbsoluteTolerance, IOSDoubleArray *vecRelativeTolerance) {
  (void) OrgApacheCommonsMathOdeNonstiffAdamsIntegrator_initWithNSString_withInt_withInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_METHOD_NAME_, nSteps, nSteps, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
}

OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator *new_OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_initWithInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(jint nSteps, jdouble minStep, jdouble maxStep, IOSDoubleArray *vecAbsoluteTolerance, IOSDoubleArray *vecRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator *self = [OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator alloc];
  OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator_initWithInt_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, nSteps, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeNonstiffAdamsBashforthIntegrator)
