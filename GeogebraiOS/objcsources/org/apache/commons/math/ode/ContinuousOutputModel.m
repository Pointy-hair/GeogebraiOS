//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/ode/ContinuousOutputModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/ode/ContinuousOutputModel.h"
#include "org/apache/commons/math/ode/DerivativeException.h"
#include "org/apache/commons/math/ode/sampling/StepInterpolator.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathOdeContinuousOutputModel_serialVersionUID -1417964919405031606LL

@interface OrgApacheCommonsMathOdeContinuousOutputModel () {
 @public
  jdouble initialTime_;
  jdouble finalTime_;
  jboolean forward_;
  jint index_;
  id<JavaUtilList> steps_;
}

- (jint)locatePointWithDouble:(jdouble)time
withOrgApacheCommonsMathOdeSamplingStepInterpolator:(id<OrgApacheCommonsMathOdeSamplingStepInterpolator>)interval;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeContinuousOutputModel, steps_, id<JavaUtilList>)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathOdeContinuousOutputModel, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgApacheCommonsMathOdeContinuousOutputModel_locatePointWithDouble_withOrgApacheCommonsMathOdeSamplingStepInterpolator_(OrgApacheCommonsMathOdeContinuousOutputModel *self, jdouble time, id<OrgApacheCommonsMathOdeSamplingStepInterpolator> interval);

@implementation OrgApacheCommonsMathOdeContinuousOutputModel

- (instancetype)init {
  OrgApacheCommonsMathOdeContinuousOutputModel_init(self);
  return self;
}

- (void)appendWithOrgApacheCommonsMathOdeContinuousOutputModel:(OrgApacheCommonsMathOdeContinuousOutputModel *)model {
  if ([((id<JavaUtilList>) nil_chk(((OrgApacheCommonsMathOdeContinuousOutputModel *) nil_chk(model))->steps_)) size] == 0) {
    return;
  }
  if ([steps_ size] == 0) {
    initialTime_ = model->initialTime_;
    forward_ = model->forward_;
  }
  else {
    if (((IOSDoubleArray *) nil_chk([self getInterpolatedState]))->size_ != ((IOSDoubleArray *) nil_chk([model getInterpolatedState]))->size_) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_SIMPLE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk([self getInterpolatedState]))->size_), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk([model getInterpolatedState]))->size_) } count:2 type:NSObject_class_()]);
    }
    if (forward_ ^ model->forward_) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_PROPAGATION_DIRECTION_MISMATCH(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
    id<OrgApacheCommonsMathOdeSamplingStepInterpolator> lastInterpolator = [steps_ getWithInt:index_];
    jdouble current = [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(lastInterpolator)) getCurrentTime];
    jdouble previous = [lastInterpolator getPreviousTime];
    jdouble step = current - previous;
    jdouble gap = [model getInitialTime] - current;
    if (OrgApacheCommonsMathUtilFastMath_absWithDouble_(gap) > 1.0e-3 * OrgApacheCommonsMathUtilFastMath_absWithDouble_(step)) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_HOLE_BETWEEN_MODELS_TIME_RANGES(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_(gap)) } count:1 type:NSObject_class_()]);
    }
  }
  for (id<OrgApacheCommonsMathOdeSamplingStepInterpolator> __strong interpolator in model->steps_) {
    [steps_ addWithId:[((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(interpolator)) copy__]];
  }
  index_ = [steps_ size] - 1;
  finalTime_ = [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(([steps_ getWithInt:index_]))) getCurrentTime];
}

- (jboolean)requiresDenseOutput {
  return YES;
}

- (void)reset {
  initialTime_ = JavaLangDouble_NaN;
  finalTime_ = JavaLangDouble_NaN;
  forward_ = YES;
  index_ = 0;
  [((id<JavaUtilList>) nil_chk(steps_)) clear];
}

- (void)handleStepWithOrgApacheCommonsMathOdeSamplingStepInterpolator:(id<OrgApacheCommonsMathOdeSamplingStepInterpolator>)interpolator
                                                          withBoolean:(jboolean)isLast {
  if ([((id<JavaUtilList>) nil_chk(steps_)) size] == 0) {
    initialTime_ = [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(interpolator)) getPreviousTime];
    forward_ = [interpolator isForward];
  }
  [steps_ addWithId:[((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(interpolator)) copy__]];
  if (isLast) {
    finalTime_ = [interpolator getCurrentTime];
    index_ = [steps_ size] - 1;
  }
}

- (jdouble)getInitialTime {
  return initialTime_;
}

- (jdouble)getFinalTime {
  return finalTime_;
}

- (jdouble)getInterpolatedTime {
  return [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk([((id<JavaUtilList>) nil_chk(steps_)) getWithInt:index_])) getInterpolatedTime];
}

- (void)setInterpolatedTimeWithDouble:(jdouble)time {
  jint iMin = 0;
  id<OrgApacheCommonsMathOdeSamplingStepInterpolator> sMin = [((id<JavaUtilList>) nil_chk(steps_)) getWithInt:iMin];
  jdouble tMin = 0.5 * ([((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(sMin)) getPreviousTime] + [sMin getCurrentTime]);
  jint iMax = [steps_ size] - 1;
  id<OrgApacheCommonsMathOdeSamplingStepInterpolator> sMax = [steps_ getWithInt:iMax];
  jdouble tMax = 0.5 * ([((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(sMax)) getPreviousTime] + [sMax getCurrentTime]);
  if (OrgApacheCommonsMathOdeContinuousOutputModel_locatePointWithDouble_withOrgApacheCommonsMathOdeSamplingStepInterpolator_(self, time, sMin) <= 0) {
    index_ = iMin;
    [sMin setInterpolatedTimeWithDouble:time];
    return;
  }
  if (OrgApacheCommonsMathOdeContinuousOutputModel_locatePointWithDouble_withOrgApacheCommonsMathOdeSamplingStepInterpolator_(self, time, sMax) >= 0) {
    index_ = iMax;
    [sMax setInterpolatedTimeWithDouble:time];
    return;
  }
  while (iMax - iMin > 5) {
    id<OrgApacheCommonsMathOdeSamplingStepInterpolator> si = [steps_ getWithInt:index_];
    jint location = OrgApacheCommonsMathOdeContinuousOutputModel_locatePointWithDouble_withOrgApacheCommonsMathOdeSamplingStepInterpolator_(self, time, si);
    if (location < 0) {
      iMax = index_;
      tMax = 0.5 * ([((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(si)) getPreviousTime] + [si getCurrentTime]);
    }
    else if (location > 0) {
      iMin = index_;
      tMin = 0.5 * ([((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(si)) getPreviousTime] + [si getCurrentTime]);
    }
    else {
      [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(si)) setInterpolatedTimeWithDouble:time];
      return;
    }
    jint iMed = (iMin + iMax) / 2;
    id<OrgApacheCommonsMathOdeSamplingStepInterpolator> sMed = [steps_ getWithInt:iMed];
    jdouble tMed = 0.5 * ([((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(sMed)) getPreviousTime] + [sMed getCurrentTime]);
    if ((OrgApacheCommonsMathUtilFastMath_absWithDouble_(tMed - tMin) < 1e-6) || (OrgApacheCommonsMathUtilFastMath_absWithDouble_(tMax - tMed) < 1e-6)) {
      index_ = iMed;
    }
    else {
      jdouble d12 = tMax - tMed;
      jdouble d23 = tMed - tMin;
      jdouble d13 = tMax - tMin;
      jdouble dt1 = time - tMax;
      jdouble dt2 = time - tMed;
      jdouble dt3 = time - tMin;
      jdouble iLagrange = ((dt2 * dt3 * d23) * iMax - (dt1 * dt3 * d13) * iMed + (dt1 * dt2 * d12) * iMin) / (d12 * d23 * d13);
      index_ = J2ObjCFpToInt(OrgApacheCommonsMathUtilFastMath_rintWithDouble_(iLagrange));
    }
    jint low = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(iMin + 1, (9 * iMin + iMax) / 10);
    jint high = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(iMax - 1, (iMin + 9 * iMax) / 10);
    if (index_ < low) {
      index_ = low;
    }
    else if (index_ > high) {
      index_ = high;
    }
  }
  index_ = iMin;
  while ((index_ <= iMax) && (OrgApacheCommonsMathOdeContinuousOutputModel_locatePointWithDouble_withOrgApacheCommonsMathOdeSamplingStepInterpolator_(self, time, [steps_ getWithInt:index_]) > 0)) {
    ++index_;
  }
  [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk([steps_ getWithInt:index_])) setInterpolatedTimeWithDouble:time];
}

- (IOSDoubleArray *)getInterpolatedState {
  return [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk([((id<JavaUtilList>) nil_chk(steps_)) getWithInt:index_])) getInterpolatedState];
}

- (jint)locatePointWithDouble:(jdouble)time
withOrgApacheCommonsMathOdeSamplingStepInterpolator:(id<OrgApacheCommonsMathOdeSamplingStepInterpolator>)interval {
  return OrgApacheCommonsMathOdeContinuousOutputModel_locatePointWithDouble_withOrgApacheCommonsMathOdeSamplingStepInterpolator_(self, time, interval);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ContinuousOutputModel", NULL, 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathOdeContinuousOutputModel:", "append", "V", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "requiresDenseOutput", NULL, "Z", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "handleStepWithOrgApacheCommonsMathOdeSamplingStepInterpolator:withBoolean:", "handleStep", "V", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "getInitialTime", NULL, "D", 0x1, NULL, NULL },
    { "getFinalTime", NULL, "D", 0x1, NULL, NULL },
    { "getInterpolatedTime", NULL, "D", 0x1, NULL, NULL },
    { "setInterpolatedTimeWithDouble:", "setInterpolatedTime", "V", 0x1, NULL, NULL },
    { "getInterpolatedState", NULL, "[D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "locatePointWithDouble:withOrgApacheCommonsMathOdeSamplingStepInterpolator:", "locatePoint", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathOdeContinuousOutputModel_serialVersionUID },
    { "initialTime_", NULL, 0x2, "D", NULL, NULL,  },
    { "finalTime_", NULL, 0x2, "D", NULL, NULL,  },
    { "forward_", NULL, 0x2, "Z", NULL, NULL,  },
    { "index_", NULL, 0x2, "I", NULL, NULL,  },
    { "steps_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/commons/math/ode/sampling/StepInterpolator;>;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeContinuousOutputModel = { 2, "ContinuousOutputModel", "org.apache.commons.math.ode", NULL, 0x1, 11, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOdeContinuousOutputModel;
}

@end

void OrgApacheCommonsMathOdeContinuousOutputModel_init(OrgApacheCommonsMathOdeContinuousOutputModel *self) {
  (void) NSObject_init(self);
  self->steps_ = new_JavaUtilArrayList_init();
  [self reset];
}

OrgApacheCommonsMathOdeContinuousOutputModel *new_OrgApacheCommonsMathOdeContinuousOutputModel_init() {
  OrgApacheCommonsMathOdeContinuousOutputModel *self = [OrgApacheCommonsMathOdeContinuousOutputModel alloc];
  OrgApacheCommonsMathOdeContinuousOutputModel_init(self);
  return self;
}

jint OrgApacheCommonsMathOdeContinuousOutputModel_locatePointWithDouble_withOrgApacheCommonsMathOdeSamplingStepInterpolator_(OrgApacheCommonsMathOdeContinuousOutputModel *self, jdouble time, id<OrgApacheCommonsMathOdeSamplingStepInterpolator> interval) {
  if (self->forward_) {
    if (time < [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(interval)) getPreviousTime]) {
      return -1;
    }
    else if (time > [interval getCurrentTime]) {
      return +1;
    }
    else {
      return 0;
    }
  }
  if (time > [((id<OrgApacheCommonsMathOdeSamplingStepInterpolator>) nil_chk(interval)) getPreviousTime]) {
    return -1;
  }
  else if (time < [interval getCurrentTime]) {
    return +1;
  }
  else {
    return 0;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeContinuousOutputModel)
