//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/linear/BigMatrixImpl.java
//

#ifndef _OrgApacheCommonsMathLinearBigMatrixImpl_H_
#define _OrgApacheCommonsMathLinearBigMatrixImpl_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "org/apache/commons/math/linear/BigMatrix.h"

@class IOSDoubleArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigDecimal;

@interface OrgApacheCommonsMathLinearBigMatrixImpl : NSObject < OrgApacheCommonsMathLinearBigMatrix, JavaIoSerializable > {
 @public
  IOSObjectArray *data_;
  IOSObjectArray *lu_;
  IOSIntArray *permutation_;
  jint parity_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaMathBigDecimalArray:(IOSObjectArray *)v;

- (instancetype)initWithJavaMathBigDecimalArray2:(IOSObjectArray *)d;

- (instancetype)initWithJavaMathBigDecimalArray2:(IOSObjectArray *)d
                                     withBoolean:(jboolean)copyArray;

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)d;

- (instancetype)initWithInt:(jint)rowDimension
                    withInt:(jint)columnDimension;

- (instancetype)initWithNSStringArray2:(IOSObjectArray *)d;

- (id<OrgApacheCommonsMathLinearBigMatrix>)addWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)m;

- (OrgApacheCommonsMathLinearBigMatrixImpl *)addWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *)m;

- (id<OrgApacheCommonsMathLinearBigMatrix>)copy__ OBJC_METHOD_FAMILY_NONE;

- (jboolean)isEqual:(id)object;

- (IOSObjectArray *)getColumnWithInt:(jint)col;

- (IOSDoubleArray *)getColumnAsDoubleArrayWithInt:(jint)col;

- (jint)getColumnDimension;

- (id<OrgApacheCommonsMathLinearBigMatrix>)getColumnMatrixWithInt:(jint)column;

- (IOSObjectArray *)getData;

- (IOSObjectArray *)getDataAsDoubleArray;

- (IOSObjectArray *)getDataRef;

- (JavaMathBigDecimal *)getDeterminant;

- (JavaMathBigDecimal *)getEntryWithInt:(jint)row
                                withInt:(jint)column;

- (jdouble)getEntryAsDoubleWithInt:(jint)row
                           withInt:(jint)column;

- (JavaMathBigDecimal *)getNorm;

- (jint)getRoundingMode;

- (IOSObjectArray *)getRowWithInt:(jint)row;

- (IOSDoubleArray *)getRowAsDoubleArrayWithInt:(jint)row;

- (jint)getRowDimension;

- (id<OrgApacheCommonsMathLinearBigMatrix>)getRowMatrixWithInt:(jint)row;

- (jint)getScale;

- (id<OrgApacheCommonsMathLinearBigMatrix>)getSubMatrixWithInt:(jint)startRow
                                                       withInt:(jint)endRow
                                                       withInt:(jint)startColumn
                                                       withInt:(jint)endColumn;

- (id<OrgApacheCommonsMathLinearBigMatrix>)getSubMatrixWithIntArray:(IOSIntArray *)selectedRows
                                                       withIntArray:(IOSIntArray *)selectedColumns;

- (JavaMathBigDecimal *)getTrace;

- (NSUInteger)hash;

- (id<OrgApacheCommonsMathLinearBigMatrix>)inverse;

- (jboolean)isSingular;

- (jboolean)isSquare;

- (void)luDecompose;

- (id<OrgApacheCommonsMathLinearBigMatrix>)multiplyWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)m;

- (OrgApacheCommonsMathLinearBigMatrixImpl *)multiplyWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *)m;

- (IOSObjectArray *)operateWithJavaMathBigDecimalArray:(IOSObjectArray *)v;

- (IOSObjectArray *)operateWithDoubleArray:(IOSDoubleArray *)v;

- (IOSObjectArray *)preMultiplyWithJavaMathBigDecimalArray:(IOSObjectArray *)v;

- (id<OrgApacheCommonsMathLinearBigMatrix>)preMultiplyWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)m;

- (id<OrgApacheCommonsMathLinearBigMatrix>)scalarAddWithJavaMathBigDecimal:(JavaMathBigDecimal *)d;

- (id<OrgApacheCommonsMathLinearBigMatrix>)scalarMultiplyWithJavaMathBigDecimal:(JavaMathBigDecimal *)d;

- (void)setRoundingModeWithInt:(jint)roundingMode;

- (void)setScaleWithInt:(jint)scale_;

- (void)setSubMatrixWithJavaMathBigDecimalArray2:(IOSObjectArray *)subMatrix
                                         withInt:(jint)row
                                         withInt:(jint)column;

- (IOSObjectArray *)solveWithJavaMathBigDecimalArray:(IOSObjectArray *)b;

- (id<OrgApacheCommonsMathLinearBigMatrix>)solveWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)b;

- (IOSObjectArray *)solveWithDoubleArray:(IOSDoubleArray *)b;

- (id<OrgApacheCommonsMathLinearBigMatrix>)subtractWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)m;

- (OrgApacheCommonsMathLinearBigMatrixImpl *)subtractWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *)m;

- (NSString *)description;

- (id<OrgApacheCommonsMathLinearBigMatrix>)transpose;

#pragma mark Protected

- (id<OrgApacheCommonsMathLinearBigMatrix>)getLUMatrix;

- (IOSIntArray *)getPermutation;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsMathLinearBigMatrixImpl)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearBigMatrixImpl, data_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearBigMatrixImpl, lu_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearBigMatrixImpl, permutation_, IOSIntArray *)

FOUNDATION_EXPORT JavaMathBigDecimal *OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearBigMatrixImpl, ZERO_, JavaMathBigDecimal *)

FOUNDATION_EXPORT JavaMathBigDecimal *OrgApacheCommonsMathLinearBigMatrixImpl_ONE_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearBigMatrixImpl, ONE_, JavaMathBigDecimal *)

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearBigMatrixImpl_init(OrgApacheCommonsMathLinearBigMatrixImpl *self);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearBigMatrixImpl_initWithInt_withInt_(OrgApacheCommonsMathLinearBigMatrixImpl *self, jint rowDimension, jint columnDimension);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithInt_withInt_(jint rowDimension, jint columnDimension) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *d);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_(IOSObjectArray *d) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *d, jboolean copyArray);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(IOSObjectArray *d, jboolean copyArray) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearBigMatrixImpl_initWithDoubleArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *d);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithDoubleArray2_(IOSObjectArray *d) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearBigMatrixImpl_initWithNSStringArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *d);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithNSStringArray2_(IOSObjectArray *d) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *v);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray_(IOSObjectArray *v) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearBigMatrixImpl)

#endif // _OrgApacheCommonsMathLinearBigMatrixImpl_H_
