//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/linear/SparseFieldMatrix.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/Field.h"
#include "org/apache/commons/math/FieldElement.h"
#include "org/apache/commons/math/linear/AbstractFieldMatrix.h"
#include "org/apache/commons/math/linear/FieldMatrix.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/SparseFieldMatrix.h"
#include "org/apache/commons/math/util/OpenIntToFieldHashMap.h"

#define OrgApacheCommonsMathLinearSparseFieldMatrix_serialVersionUID 9078068119297757342LL

@interface OrgApacheCommonsMathLinearSparseFieldMatrix () {
 @public
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap *entries_;
  jint rows_;
  jint columns_;
}

- (jint)computeKeyWithInt:(jint)row
                  withInt:(jint)column;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearSparseFieldMatrix, entries_, OrgApacheCommonsMathUtilOpenIntToFieldHashMap *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearSparseFieldMatrix, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgApacheCommonsMathLinearSparseFieldMatrix_computeKeyWithInt_withInt_(OrgApacheCommonsMathLinearSparseFieldMatrix *self, jint row, jint column);

@implementation OrgApacheCommonsMathLinearSparseFieldMatrix

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field {
  OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                          withInt:(jint)rowDimension
                                          withInt:(jint)columnDimension {
  OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rowDimension, columnDimension);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearSparseFieldMatrix:(OrgApacheCommonsMathLinearSparseFieldMatrix *)other {
  OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearSparseFieldMatrix_(self, other);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)other {
  OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearFieldMatrix_(self, other);
  return self;
}

- (void)addToEntryWithInt:(jint)row
                  withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)increment {
  [self checkRowIndexWithInt:row];
  [self checkColumnIndexWithInt:column];
  jint key = OrgApacheCommonsMathLinearSparseFieldMatrix_computeKeyWithInt_withInt_(self, row, column);
  id<OrgApacheCommonsMathFieldElement> value = [((id<OrgApacheCommonsMathFieldElement>) nil_chk([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) getWithInt:key])) addWithId:increment];
  if ([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero])) isEqual:value]) {
    (void) [entries_ removeWithInt:key];
  }
  else {
    (void) [entries_ putWithInt:key withOrgApacheCommonsMathFieldElement:value];
  }
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)copy__ {
  return new_OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearSparseFieldMatrix_(self);
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)createMatrixWithInt:(jint)rowDimension
                                                         withInt:(jint)columnDimension {
  return new_OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rowDimension, columnDimension);
}

- (jint)getColumnDimension {
  return columns_;
}

- (id)getEntryWithInt:(jint)row
              withInt:(jint)column {
  [self checkRowIndexWithInt:row];
  [self checkColumnIndexWithInt:column];
  return [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) getWithInt:OrgApacheCommonsMathLinearSparseFieldMatrix_computeKeyWithInt_withInt_(self, row, column)];
}

- (jint)getRowDimension {
  return rows_;
}

- (void)multiplyEntryWithInt:(jint)row
                     withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)factor {
  [self checkRowIndexWithInt:row];
  [self checkColumnIndexWithInt:column];
  jint key = OrgApacheCommonsMathLinearSparseFieldMatrix_computeKeyWithInt_withInt_(self, row, column);
  id<OrgApacheCommonsMathFieldElement> value = [((id<OrgApacheCommonsMathFieldElement>) nil_chk([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) getWithInt:key])) multiplyWithId:factor];
  if ([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero])) isEqual:value]) {
    (void) [entries_ removeWithInt:key];
  }
  else {
    (void) [entries_ putWithInt:key withOrgApacheCommonsMathFieldElement:value];
  }
}

- (void)setEntryWithInt:(jint)row
                withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  [self checkRowIndexWithInt:row];
  [self checkColumnIndexWithInt:column];
  if ([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero])) isEqual:value]) {
    (void) [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) removeWithInt:OrgApacheCommonsMathLinearSparseFieldMatrix_computeKeyWithInt_withInt_(self, row, column)];
  }
  else {
    (void) [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) putWithInt:OrgApacheCommonsMathLinearSparseFieldMatrix_computeKeyWithInt_withInt_(self, row, column) withOrgApacheCommonsMathFieldElement:value];
  }
}

- (jint)computeKeyWithInt:(jint)row
                  withInt:(jint)column {
  return OrgApacheCommonsMathLinearSparseFieldMatrix_computeKeyWithInt_withInt_(self, row, column);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathField:", "SparseFieldMatrix", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:withInt:withInt:", "SparseFieldMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithOrgApacheCommonsMathLinearSparseFieldMatrix:", "SparseFieldMatrix", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearFieldMatrix:", "SparseFieldMatrix", NULL, 0x1, NULL, NULL },
    { "addToEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "addToEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, NULL, NULL },
    { "createMatrixWithInt:withInt:", "createMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getColumnDimension", NULL, "I", 0x1, NULL, NULL },
    { "getEntryWithInt:withInt:", "getEntry", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(II)TT;" },
    { "getRowDimension", NULL, "I", 0x1, NULL, NULL },
    { "multiplyEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "multiplyEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "setEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "setEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "computeKeyWithInt:withInt:", "computeKey", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearSparseFieldMatrix_serialVersionUID },
    { "entries_", NULL, 0x12, "Lorg.apache.commons.math.util.OpenIntToFieldHashMap;", NULL, "Lorg/apache/commons/math/util/OpenIntToFieldHashMap<TT;>;",  },
    { "rows_", NULL, 0x12, "I", NULL, NULL,  },
    { "columns_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearSparseFieldMatrix = { 2, "SparseFieldMatrix", "org.apache.commons.math.linear", NULL, 0x1, 13, methods, 4, fields, 1, superclass_type_args, 0, NULL, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>Lorg/apache/commons/math/linear/AbstractFieldMatrix<TT;>;" };
  return &_OrgApacheCommonsMathLinearSparseFieldMatrix;
}

@end

void OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_(OrgApacheCommonsMathLinearSparseFieldMatrix *self, id<OrgApacheCommonsMathField> field) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_(self, field);
  self->rows_ = 0;
  self->columns_ = 0;
  self->entries_ = new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathField_(field);
}

OrgApacheCommonsMathLinearSparseFieldMatrix *new_OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_(id<OrgApacheCommonsMathField> field) {
  OrgApacheCommonsMathLinearSparseFieldMatrix *self = [OrgApacheCommonsMathLinearSparseFieldMatrix alloc];
  OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

void OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(OrgApacheCommonsMathLinearSparseFieldMatrix *self, id<OrgApacheCommonsMathField> field, jint rowDimension, jint columnDimension) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rowDimension, columnDimension);
  self->rows_ = rowDimension;
  self->columns_ = columnDimension;
  self->entries_ = new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathField_(field);
}

OrgApacheCommonsMathLinearSparseFieldMatrix *new_OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(id<OrgApacheCommonsMathField> field, jint rowDimension, jint columnDimension) {
  OrgApacheCommonsMathLinearSparseFieldMatrix *self = [OrgApacheCommonsMathLinearSparseFieldMatrix alloc];
  OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rowDimension, columnDimension);
  return self;
}

void OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearSparseFieldMatrix_(OrgApacheCommonsMathLinearSparseFieldMatrix *self, OrgApacheCommonsMathLinearSparseFieldMatrix *other) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, [((OrgApacheCommonsMathLinearSparseFieldMatrix *) nil_chk(other)) getField], [other getRowDimension], [other getColumnDimension]);
  self->rows_ = [other getRowDimension];
  self->columns_ = [other getColumnDimension];
  self->entries_ = new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathUtilOpenIntToFieldHashMap_(other->entries_);
}

OrgApacheCommonsMathLinearSparseFieldMatrix *new_OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearSparseFieldMatrix_(OrgApacheCommonsMathLinearSparseFieldMatrix *other) {
  OrgApacheCommonsMathLinearSparseFieldMatrix *self = [OrgApacheCommonsMathLinearSparseFieldMatrix alloc];
  OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearSparseFieldMatrix_(self, other);
  return self;
}

void OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearFieldMatrix_(OrgApacheCommonsMathLinearSparseFieldMatrix *self, id<OrgApacheCommonsMathLinearFieldMatrix> other) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(other)) getField], [other getRowDimension], [other getColumnDimension]);
  self->rows_ = [other getRowDimension];
  self->columns_ = [other getColumnDimension];
  self->entries_ = new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathField_([self getField]);
  for (jint i = 0; i < self->rows_; i++) {
    for (jint j = 0; j < self->columns_; j++) {
      [self setEntryWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:[other getEntryWithInt:i withInt:j]];
    }
  }
}

OrgApacheCommonsMathLinearSparseFieldMatrix *new_OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearFieldMatrix_(id<OrgApacheCommonsMathLinearFieldMatrix> other) {
  OrgApacheCommonsMathLinearSparseFieldMatrix *self = [OrgApacheCommonsMathLinearSparseFieldMatrix alloc];
  OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathLinearFieldMatrix_(self, other);
  return self;
}

jint OrgApacheCommonsMathLinearSparseFieldMatrix_computeKeyWithInt_withInt_(OrgApacheCommonsMathLinearSparseFieldMatrix *self, jint row, jint column) {
  return row * self->columns_ + column;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearSparseFieldMatrix)
