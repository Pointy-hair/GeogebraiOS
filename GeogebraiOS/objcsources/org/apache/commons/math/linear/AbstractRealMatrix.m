//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/linear/AbstractRealMatrix.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractRealMatrix.h"
#include "org/apache/commons/math/linear/ArrayRealVector.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/DefaultRealMatrixChangingVisitor.h"
#include "org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/LUDecompositionImpl.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/MatrixVisitorException.h"
#include "org/apache/commons/math/linear/NonSquareMatrixException.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealMatrixChangingVisitor.h"
#include "org/apache/commons/math/linear/RealMatrixPreservingVisitor.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

@interface OrgApacheCommonsMathLinearAbstractRealMatrix () {
 @public
  id<OrgApacheCommonsMathLinearDecompositionSolver> lu_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealMatrix, lu_, id<OrgApacheCommonsMathLinearDecompositionSolver>)

@interface OrgApacheCommonsMathLinearAbstractRealMatrix_$1 : NSObject < OrgApacheCommonsMathLinearRealMatrixPreservingVisitor > {
 @public
  jdouble endRow_;
  jdouble columnSum_;
  jdouble maxColSum_;
}

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn;

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value;

- (jdouble)end;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealMatrix_$1)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractRealMatrix_$1_init(OrgApacheCommonsMathLinearAbstractRealMatrix_$1 *self);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractRealMatrix_$1 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealMatrix_$1)

@interface OrgApacheCommonsMathLinearAbstractRealMatrix_$2 : NSObject < OrgApacheCommonsMathLinearRealMatrixPreservingVisitor > {
 @public
  jdouble sum_;
}

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn;

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value;

- (jdouble)end;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealMatrix_$2)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractRealMatrix_$2_init(OrgApacheCommonsMathLinearAbstractRealMatrix_$2 *self);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractRealMatrix_$2 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$2_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealMatrix_$2)

@interface OrgApacheCommonsMathLinearAbstractRealMatrix_$3 : OrgApacheCommonsMathLinearDefaultRealMatrixChangingVisitor {
 @public
  OrgApacheCommonsMathLinearAbstractRealMatrix *this$0_;
  IOSIntArray *val$selectedRows_;
  IOSIntArray *val$selectedColumns_;
}

- (jdouble)visitWithInt:(jint)row
                withInt:(jint)column
             withDouble:(jdouble)value;

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractRealMatrix:(OrgApacheCommonsMathLinearAbstractRealMatrix *)outer$
                                                        withIntArray:(IOSIntArray *)capture$0
                                                        withIntArray:(IOSIntArray *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealMatrix_$3)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealMatrix_$3, this$0_, OrgApacheCommonsMathLinearAbstractRealMatrix *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealMatrix_$3, val$selectedRows_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealMatrix_$3, val$selectedColumns_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractRealMatrix_$3_initWithOrgApacheCommonsMathLinearAbstractRealMatrix_withIntArray_withIntArray_(OrgApacheCommonsMathLinearAbstractRealMatrix_$3 *self, OrgApacheCommonsMathLinearAbstractRealMatrix *outer$, IOSIntArray *capture$0, IOSIntArray *capture$1);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractRealMatrix_$3 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$3_initWithOrgApacheCommonsMathLinearAbstractRealMatrix_withIntArray_withIntArray_(OrgApacheCommonsMathLinearAbstractRealMatrix *outer$, IOSIntArray *capture$0, IOSIntArray *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealMatrix_$3)

@interface OrgApacheCommonsMathLinearAbstractRealMatrix_$4 : OrgApacheCommonsMathLinearDefaultRealMatrixPreservingVisitor {
 @public
  jint startRow1_;
  jint startColumn1_;
  IOSObjectArray *val$destination_;
}

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn;

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value;

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealMatrix_$4)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealMatrix_$4, val$destination_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractRealMatrix_$4_initWithDoubleArray2_(OrgApacheCommonsMathLinearAbstractRealMatrix_$4 *self, IOSObjectArray *capture$0);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractRealMatrix_$4 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$4_initWithDoubleArray2_(IOSObjectArray *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealMatrix_$4)

@interface OrgApacheCommonsMathLinearAbstractRealMatrix_$5 : OrgApacheCommonsMathLinearDefaultRealMatrixPreservingVisitor {
 @public
  id<OrgApacheCommonsMathLinearRealMatrix> val$out_;
}

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value;

- (instancetype)initWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealMatrix_$5)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealMatrix_$5, val$out_, id<OrgApacheCommonsMathLinearRealMatrix>)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractRealMatrix_$5_initWithOrgApacheCommonsMathLinearRealMatrix_(OrgApacheCommonsMathLinearAbstractRealMatrix_$5 *self, id<OrgApacheCommonsMathLinearRealMatrix> capture$0);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractRealMatrix_$5 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$5_initWithOrgApacheCommonsMathLinearRealMatrix_(id<OrgApacheCommonsMathLinearRealMatrix> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealMatrix_$5)

@implementation OrgApacheCommonsMathLinearAbstractRealMatrix

- (instancetype)init {
  OrgApacheCommonsMathLinearAbstractRealMatrix_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)rowDimension
                    withInt:(jint)columnDimension {
  OrgApacheCommonsMathLinearAbstractRealMatrix_initWithInt_withInt_(self, rowDimension, columnDimension);
  return self;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)createMatrixWithInt:(jint)rowDimension
                                                        withInt:(jint)columnDimension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)copy__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)addWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkAdditionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> out = [self createMatrixWithInt:rowCount withInt:columnCount];
  for (jint row = 0; row < rowCount; ++row) {
    for (jint col = 0; col < columnCount; ++col) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withDouble:[self getEntryWithInt:row withInt:col] + [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) getEntryWithInt:row withInt:col]];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)subtractWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubtractionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> out = [self createMatrixWithInt:rowCount withInt:columnCount];
  for (jint row = 0; row < rowCount; ++row) {
    for (jint col = 0; col < columnCount; ++col) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withDouble:[self getEntryWithInt:row withInt:col] - [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) getEntryWithInt:row withInt:col]];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)scalarAddWithDouble:(jdouble)d {
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> out = [self createMatrixWithInt:rowCount withInt:columnCount];
  for (jint row = 0; row < rowCount; ++row) {
    for (jint col = 0; col < columnCount; ++col) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withDouble:[self getEntryWithInt:row withInt:col] + d];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)scalarMultiplyWithDouble:(jdouble)d {
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> out = [self createMatrixWithInt:rowCount withInt:columnCount];
  for (jint row = 0; row < rowCount; ++row) {
    for (jint col = 0; col < columnCount; ++col) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withDouble:[self getEntryWithInt:row withInt:col] * d];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)multiplyWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint nRows = [self getRowDimension];
  jint nCols = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) getColumnDimension];
  jint nSum = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> out = [self createMatrixWithInt:nRows withInt:nCols];
  for (jint row = 0; row < nRows; ++row) {
    for (jint col = 0; col < nCols; ++col) {
      jdouble sum = 0;
      for (jint i = 0; i < nSum; ++i) {
        sum += [self getEntryWithInt:row withInt:i] * [m getEntryWithInt:i withInt:col];
      }
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withDouble:sum];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)preMultiplyWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  return [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) multiplyWithOrgApacheCommonsMathLinearRealMatrix:self];
}

- (IOSObjectArray *)getData {
  IOSObjectArray *data = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ [self getRowDimension], [self getColumnDimension] }];
  for (jint i = 0; i < data->size_; ++i) {
    IOSDoubleArray *dataI = IOSObjectArray_Get(data, i);
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(dataI))->size_; ++j) {
      *IOSDoubleArray_GetRef(dataI, j) = [self getEntryWithInt:i withInt:j];
    }
  }
  return data;
}

- (jdouble)getNorm {
  return [self walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:new_OrgApacheCommonsMathLinearAbstractRealMatrix_$1_init()];
}

- (jdouble)getFrobeniusNorm {
  return [self walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:new_OrgApacheCommonsMathLinearAbstractRealMatrix_$2_init()];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getSubMatrixWithInt:(jint)startRow
                                                        withInt:(jint)endRow
                                                        withInt:(jint)startColumn
                                                        withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  id<OrgApacheCommonsMathLinearRealMatrix> subMatrix = [self createMatrixWithInt:endRow - startRow + 1 withInt:endColumn - startColumn + 1];
  for (jint i = startRow; i <= endRow; ++i) {
    for (jint j = startColumn; j <= endColumn; ++j) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(subMatrix)) setEntryWithInt:i - startRow withInt:j - startColumn withDouble:[self getEntryWithInt:i withInt:j]];
    }
  }
  return subMatrix;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getSubMatrixWithIntArray:(IOSIntArray *)selectedRows
                                                        withIntArray:(IOSIntArray *)selectedColumns {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withIntArray_withIntArray_(self, selectedRows, selectedColumns);
  id<OrgApacheCommonsMathLinearRealMatrix> subMatrix = [self createMatrixWithInt:((IOSIntArray *) nil_chk(selectedRows))->size_ withInt:((IOSIntArray *) nil_chk(selectedColumns))->size_];
  [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(subMatrix)) walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:new_OrgApacheCommonsMathLinearAbstractRealMatrix_$3_initWithOrgApacheCommonsMathLinearAbstractRealMatrix_withIntArray_withIntArray_(self, selectedRows, selectedColumns)];
  return subMatrix;
}

- (void)copySubMatrixWithInt:(jint)startRow
                     withInt:(jint)endRow
                     withInt:(jint)startColumn
                     withInt:(jint)endColumn
            withDoubleArray2:(IOSObjectArray *)destination {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  jint rowsCount = endRow + 1 - startRow;
  jint columnsCount = endColumn + 1 - startColumn;
  if ((((IOSObjectArray *) nil_chk(destination))->size_ < rowsCount) || (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(destination, 0)))->size_ < columnsCount)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(destination->size_), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(destination, 0)))->size_), JavaLangInteger_valueOfWithInt_(rowsCount), JavaLangInteger_valueOfWithInt_(columnsCount) } count:4 type:NSObject_class_()]);
  }
  [self walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:new_OrgApacheCommonsMathLinearAbstractRealMatrix_$4_initWithDoubleArray2_(destination) withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
}

- (void)copySubMatrixWithIntArray:(IOSIntArray *)selectedRows
                     withIntArray:(IOSIntArray *)selectedColumns
                 withDoubleArray2:(IOSObjectArray *)destination {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withIntArray_withIntArray_(self, selectedRows, selectedColumns);
  if ((((IOSObjectArray *) nil_chk(destination))->size_ < ((IOSIntArray *) nil_chk(selectedRows))->size_) || (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(destination, 0)))->size_ < ((IOSIntArray *) nil_chk(selectedColumns))->size_)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(destination->size_), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(destination, 0)))->size_), JavaLangInteger_valueOfWithInt_(selectedRows->size_), JavaLangInteger_valueOfWithInt_(((IOSIntArray *) nil_chk(selectedColumns))->size_) } count:4 type:NSObject_class_()]);
  }
  for (jint i = 0; i < selectedRows->size_; i++) {
    IOSDoubleArray *destinationI = IOSObjectArray_Get(destination, i);
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(selectedColumns))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(destinationI), j) = [self getEntryWithInt:IOSIntArray_Get(selectedRows, i) withInt:IOSIntArray_Get(selectedColumns, j)];
    }
  }
}

- (void)setSubMatrixWithDoubleArray2:(IOSObjectArray *)subMatrix
                             withInt:(jint)row
                             withInt:(jint)column {
  jint nRows = ((IOSObjectArray *) nil_chk(subMatrix))->size_;
  if (nRows == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  jint nCols = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(subMatrix, 0)))->size_;
  if (nCols == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  for (jint r = 1; r < nRows; ++r) {
    if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(subMatrix, r)))->size_ != nCols) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(subMatrix, r)))->size_) } count:2 type:NSObject_class_()]);
    }
  }
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, nRows + row - 1);
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, nCols + column - 1);
  for (jint i = 0; i < nRows; ++i) {
    for (jint j = 0; j < nCols; ++j) {
      [self setEntryWithInt:row + i withInt:column + j withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(subMatrix, i)), j)];
    }
  }
  lu_ = nil;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getRowMatrixWithInt:(jint)row {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint nCols = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> out = [self createMatrixWithInt:1 withInt:nCols];
  for (jint i = 0; i < nCols; ++i) {
    [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:0 withInt:i withDouble:[self getEntryWithInt:row withInt:i]];
  }
  return out;
}

- (void)setRowMatrixWithInt:(jint)row
withOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)matrix {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint nCols = [self getColumnDimension];
  if (([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(matrix)) getRowDimension] != 1) || ([matrix getColumnDimension] != nCols)) {
    @throw new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([matrix getRowDimension]), JavaLangInteger_valueOfWithInt_([matrix getColumnDimension]), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]);
  }
  for (jint i = 0; i < nCols; ++i) {
    [self setEntryWithInt:row withInt:i withDouble:[matrix getEntryWithInt:0 withInt:i]];
  }
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getColumnMatrixWithInt:(jint)column {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint nRows = [self getRowDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> out = [self createMatrixWithInt:nRows withInt:1];
  for (jint i = 0; i < nRows; ++i) {
    [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:i withInt:0 withDouble:[self getEntryWithInt:i withInt:column]];
  }
  return out;
}

- (void)setColumnMatrixWithInt:(jint)column
withOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)matrix {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint nRows = [self getRowDimension];
  if (([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(matrix)) getRowDimension] != nRows) || ([matrix getColumnDimension] != 1)) {
    @throw new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([matrix getRowDimension]), JavaLangInteger_valueOfWithInt_([matrix getColumnDimension]), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]);
  }
  for (jint i = 0; i < nRows; ++i) {
    [self setEntryWithInt:i withInt:column withDouble:[matrix getEntryWithInt:i withInt:0]];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)getRowVectorWithInt:(jint)row {
  return new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_([self getRowWithInt:row], NO);
}

- (void)setRowVectorWithInt:(jint)row
withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)vector {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint nCols = [self getColumnDimension];
  if ([((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(vector)) getDimension] != nCols) {
    @throw new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_([vector getDimension]), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]);
  }
  for (jint i = 0; i < nCols; ++i) {
    [self setEntryWithInt:row withInt:i withDouble:[vector getEntryWithInt:i]];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)getColumnVectorWithInt:(jint)column {
  return new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_([self getColumnWithInt:column], NO);
}

- (void)setColumnVectorWithInt:(jint)column
withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)vector {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint nRows = [self getRowDimension];
  if ([((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(vector)) getDimension] != nRows) {
    @throw new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([vector getDimension]), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]);
  }
  for (jint i = 0; i < nRows; ++i) {
    [self setEntryWithInt:i withInt:column withDouble:[vector getEntryWithInt:i]];
  }
}

- (IOSDoubleArray *)getRowWithInt:(jint)row {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint nCols = [self getColumnDimension];
  IOSDoubleArray *out = [IOSDoubleArray newArrayWithLength:nCols];
  for (jint i = 0; i < nCols; ++i) {
    *IOSDoubleArray_GetRef(out, i) = [self getEntryWithInt:row withInt:i];
  }
  return out;
}

- (void)setRowWithInt:(jint)row
      withDoubleArray:(IOSDoubleArray *)array {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint nCols = [self getColumnDimension];
  if (((IOSDoubleArray *) nil_chk(array))->size_ != nCols) {
    @throw new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(array->size_), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]);
  }
  for (jint i = 0; i < nCols; ++i) {
    [self setEntryWithInt:row withInt:i withDouble:IOSDoubleArray_Get(array, i)];
  }
}

- (IOSDoubleArray *)getColumnWithInt:(jint)column {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint nRows = [self getRowDimension];
  IOSDoubleArray *out = [IOSDoubleArray newArrayWithLength:nRows];
  for (jint i = 0; i < nRows; ++i) {
    *IOSDoubleArray_GetRef(out, i) = [self getEntryWithInt:i withInt:column];
  }
  return out;
}

- (void)setColumnWithInt:(jint)column
         withDoubleArray:(IOSDoubleArray *)array {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint nRows = [self getRowDimension];
  if (((IOSDoubleArray *) nil_chk(array))->size_ != nRows) {
    @throw new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(array->size_), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]);
  }
  for (jint i = 0; i < nRows; ++i) {
    [self setEntryWithInt:i withInt:column withDouble:IOSDoubleArray_Get(array, i)];
  }
}

- (jdouble)getEntryWithInt:(jint)row
                   withInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setEntryWithInt:(jint)row
                withInt:(jint)column
             withDouble:(jdouble)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addToEntryWithInt:(jint)row
                  withInt:(jint)column
               withDouble:(jdouble)increment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)multiplyEntryWithInt:(jint)row
                     withInt:(jint)column
                  withDouble:(jdouble)factor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)transpose {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearRealMatrix> out = [self createMatrixWithInt:nCols withInt:nRows];
  [self walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:new_OrgApacheCommonsMathLinearAbstractRealMatrix_$5_initWithOrgApacheCommonsMathLinearRealMatrix_(out)];
  return out;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)inverse {
  if (lu_ == nil) {
    lu_ = [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, OrgApacheCommonsMathUtilMathUtils_SAFE_MIN) getSolver];
  }
  return [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(lu_)) getInverse];
}

- (jdouble)getDeterminant {
  return [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, OrgApacheCommonsMathUtilMathUtils_SAFE_MIN) getDeterminant];
}

- (jboolean)isSquare {
  return [self getColumnDimension] == [self getRowDimension];
}

- (jboolean)isSingular {
  if (lu_ == nil) {
    lu_ = [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, OrgApacheCommonsMathUtilMathUtils_SAFE_MIN) getSolver];
  }
  return ![((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(lu_)) isNonSingular];
}

- (jint)getRowDimension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getColumnDimension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getTrace {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (nRows != nCols) {
    @throw new_OrgApacheCommonsMathLinearNonSquareMatrixException_initWithInt_withInt_(nRows, nCols);
  }
  jdouble trace = 0;
  for (jint i = 0; i < nRows; ++i) {
    trace += [self getEntryWithInt:i withInt:i];
  }
  return trace;
}

- (IOSDoubleArray *)operateWithDoubleArray:(IOSDoubleArray *)v {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (((IOSDoubleArray *) nil_chk(v))->size_ != nCols) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nCols) } count:2 type:NSObject_class_()]);
  }
  IOSDoubleArray *out = [IOSDoubleArray newArrayWithLength:nRows];
  for (jint row = 0; row < nRows; ++row) {
    jdouble sum = 0;
    for (jint i = 0; i < nCols; ++i) {
      sum += [self getEntryWithInt:row withInt:i] * IOSDoubleArray_Get(v, i);
    }
    *IOSDoubleArray_GetRef(out, row) = sum;
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealVector>)operateWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  @try {
    return new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_([self operateWithDoubleArray:[((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])))) getDataRef]], NO);
  }
  @catch (JavaLangClassCastException *cce) {
    jint nRows = [self getRowDimension];
    jint nCols = [self getColumnDimension];
    if ([((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension] != nCols) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([v getDimension]), JavaLangInteger_valueOfWithInt_(nCols) } count:2 type:NSObject_class_()]);
    }
    IOSDoubleArray *out = [IOSDoubleArray newArrayWithLength:nRows];
    for (jint row = 0; row < nRows; ++row) {
      jdouble sum = 0;
      for (jint i = 0; i < nCols; ++i) {
        sum += [self getEntryWithInt:row withInt:i] * [v getEntryWithInt:i];
      }
      *IOSDoubleArray_GetRef(out, row) = sum;
    }
    return new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO);
  }
}

- (IOSDoubleArray *)preMultiplyWithDoubleArray:(IOSDoubleArray *)v {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (((IOSDoubleArray *) nil_chk(v))->size_ != nRows) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nRows) } count:2 type:NSObject_class_()]);
  }
  IOSDoubleArray *out = [IOSDoubleArray newArrayWithLength:nCols];
  for (jint col = 0; col < nCols; ++col) {
    jdouble sum = 0;
    for (jint i = 0; i < nRows; ++i) {
      sum += [self getEntryWithInt:i withInt:col] * IOSDoubleArray_Get(v, i);
    }
    *IOSDoubleArray_GetRef(out, col) = sum;
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealVector>)preMultiplyWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  @try {
    return new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_([self preMultiplyWithDoubleArray:[((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])))) getDataRef]], NO);
  }
  @catch (JavaLangClassCastException *cce) {
    jint nRows = [self getRowDimension];
    jint nCols = [self getColumnDimension];
    if ([((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension] != nRows) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([v getDimension]), JavaLangInteger_valueOfWithInt_(nRows) } count:2 type:NSObject_class_()]);
    }
    IOSDoubleArray *out = [IOSDoubleArray newArrayWithLength:nCols];
    for (jint col = 0; col < nCols; ++col) {
      jdouble sum = 0;
      for (jint i = 0; i < nRows; ++i) {
        sum += [self getEntryWithInt:i withInt:col] * [v getEntryWithInt:i];
      }
      *IOSDoubleArray_GetRef(out, col) = sum;
    }
    return new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(out);
  }
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint row = 0; row < rows; ++row) {
    for (jint column = 0; column < columns; ++column) {
      jdouble oldValue = [self getEntryWithInt:row withInt:column];
      jdouble newValue = [visitor visitWithInt:row withInt:column withDouble:oldValue];
      [self setEntryWithInt:row withInt:column withDouble:newValue];
    }
  }
  lu_ = nil;
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint row = 0; row < rows; ++row) {
    for (jint column = 0; column < columns; ++column) {
      [visitor visitWithInt:row withInt:column withDouble:[self getEntryWithInt:row withInt:column]];
    }
  }
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor
                                                                         withInt:(jint)startRow
                                                                         withInt:(jint)endRow
                                                                         withInt:(jint)startColumn
                                                                         withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint row = startRow; row <= endRow; ++row) {
    for (jint column = startColumn; column <= endColumn; ++column) {
      jdouble oldValue = [self getEntryWithInt:row withInt:column];
      jdouble newValue = [visitor visitWithInt:row withInt:column withDouble:oldValue];
      [self setEntryWithInt:row withInt:column withDouble:newValue];
    }
  }
  lu_ = nil;
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor
                                                                           withInt:(jint)startRow
                                                                           withInt:(jint)endRow
                                                                           withInt:(jint)startColumn
                                                                           withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint row = startRow; row <= endRow; ++row) {
    for (jint column = startColumn; column <= endColumn; ++column) {
      [visitor visitWithInt:row withInt:column withDouble:[self getEntryWithInt:row withInt:column]];
    }
  }
  return [visitor end];
}

- (jdouble)walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint column = 0; column < columns; ++column) {
    for (jint row = 0; row < rows; ++row) {
      jdouble oldValue = [self getEntryWithInt:row withInt:column];
      jdouble newValue = [visitor visitWithInt:row withInt:column withDouble:oldValue];
      [self setEntryWithInt:row withInt:column withDouble:newValue];
    }
  }
  lu_ = nil;
  return [visitor end];
}

- (jdouble)walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint column = 0; column < columns; ++column) {
    for (jint row = 0; row < rows; ++row) {
      [visitor visitWithInt:row withInt:column withDouble:[self getEntryWithInt:row withInt:column]];
    }
  }
  return [visitor end];
}

- (jdouble)walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor
                                                                            withInt:(jint)startRow
                                                                            withInt:(jint)endRow
                                                                            withInt:(jint)startColumn
                                                                            withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint column = startColumn; column <= endColumn; ++column) {
    for (jint row = startRow; row <= endRow; ++row) {
      jdouble oldValue = [self getEntryWithInt:row withInt:column];
      jdouble newValue = [visitor visitWithInt:row withInt:column withDouble:oldValue];
      [self setEntryWithInt:row withInt:column withDouble:newValue];
    }
  }
  lu_ = nil;
  return [visitor end];
}

- (jdouble)walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor
                                                                              withInt:(jint)startRow
                                                                              withInt:(jint)endRow
                                                                              withInt:(jint)startColumn
                                                                              withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint column = startColumn; column <= endColumn; ++column) {
    for (jint row = startRow; row <= endRow; ++row) {
      [visitor visitWithInt:row withInt:column withDouble:[self getEntryWithInt:row withInt:column]];
    }
  }
  return [visitor end];
}

- (jdouble)walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor {
  return [self walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:visitor];
}

- (jdouble)walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor {
  return [self walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:visitor];
}

- (jdouble)walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor
                                                                               withInt:(jint)startRow
                                                                               withInt:(jint)endRow
                                                                               withInt:(jint)startColumn
                                                                               withInt:(jint)endColumn {
  return [self walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:visitor withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
}

- (jdouble)walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor
                                                                                 withInt:(jint)startRow
                                                                                 withInt:(jint)endRow
                                                                                 withInt:(jint)startColumn
                                                                                 withInt:(jint)endColumn {
  return [self walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:visitor withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
}

- (IOSDoubleArray *)solveWithDoubleArray:(IOSDoubleArray *)b {
  if (lu_ == nil) {
    lu_ = [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, OrgApacheCommonsMathUtilMathUtils_SAFE_MIN) getSolver];
  }
  return [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(lu_)) solveWithDoubleArray:b];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)solveWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)b {
  if (lu_ == nil) {
    lu_ = [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, OrgApacheCommonsMathUtilMathUtils_SAFE_MIN) getSolver];
  }
  return [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(lu_)) solveWithOrgApacheCommonsMathLinearRealMatrix:b];
}

- (void)luDecompose {
  if (lu_ == nil) {
    lu_ = [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, OrgApacheCommonsMathUtilMathUtils_SAFE_MIN) getSolver];
  }
}

- (NSString *)description {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  JavaLangStringBuilder *res = new_JavaLangStringBuilder_init();
  NSString *fullClassName = [[self getClass] getName];
  NSString *shortClassName = [fullClassName substring:[((NSString *) nil_chk(fullClassName)) lastIndexOf:'.'] + 1];
  (void) [((JavaLangStringBuilder *) nil_chk([res appendWithNSString:shortClassName])) appendWithNSString:@"{"];
  for (jint i = 0; i < nRows; ++i) {
    if (i > 0) {
      (void) [res appendWithNSString:@","];
    }
    (void) [res appendWithNSString:@"{"];
    for (jint j = 0; j < nCols; ++j) {
      if (j > 0) {
        (void) [res appendWithNSString:@","];
      }
      (void) [res appendWithDouble:[self getEntryWithInt:i withInt:j]];
    }
    (void) [res appendWithNSString:@"}"];
  }
  (void) [res appendWithNSString:@"}"];
  return [res description];
}

- (jboolean)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  if ([OrgApacheCommonsMathLinearRealMatrix_class_() isInstance:object] == NO) {
    return NO;
  }
  id<OrgApacheCommonsMathLinearRealMatrix> m = (id<OrgApacheCommonsMathLinearRealMatrix>) check_protocol_cast(object, @protocol(OrgApacheCommonsMathLinearRealMatrix));
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if ([((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) getColumnDimension] != nCols || [m getRowDimension] != nRows) {
    return NO;
  }
  for (jint row = 0; row < nRows; ++row) {
    for (jint col = 0; col < nCols; ++col) {
      if ([self getEntryWithInt:row withInt:col] != [m getEntryWithInt:row withInt:col]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint ret = 7;
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  ret = ret * 31 + nRows;
  ret = ret * 31 + nCols;
  for (jint row = 0; row < nRows; ++row) {
    for (jint col = 0; col < nCols; ++col) {
      ret = ret * 31 + (11 * (row + 1) + 17 * (col + 1)) * OrgApacheCommonsMathUtilMathUtils_hash__WithDouble_([self getEntryWithInt:row withInt:col]);
    }
  }
  return ret;
}

+ (IOSObjectArray *)__annotations_inverse {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getDeterminant {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isSingular {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_solveWithDoubleArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_solveWithOrgApacheCommonsMathLinearRealMatrix_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_luDecompose {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_lu_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractRealMatrix", NULL, 0x4, NULL, NULL },
    { "initWithInt:withInt:", "AbstractRealMatrix", NULL, 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "createMatrixWithInt:withInt:", "createMatrix", "Lorg.apache.commons.math.linear.RealMatrix;", 0x401, "Ljava.lang.IllegalArgumentException;", NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.RealMatrix;", 0x401, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearRealMatrix:", "add", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearRealMatrix:", "subtract", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "scalarAddWithDouble:", "scalarAdd", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "scalarMultiplyWithDouble:", "scalarMultiply", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "multiplyWithOrgApacheCommonsMathLinearRealMatrix:", "multiply", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithOrgApacheCommonsMathLinearRealMatrix:", "preMultiply", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[[D", 0x1, NULL, NULL },
    { "getNorm", NULL, "D", 0x1, NULL, NULL },
    { "getFrobeniusNorm", NULL, "D", 0x1, NULL, NULL },
    { "getSubMatrixWithInt:withInt:withInt:withInt:", "getSubMatrix", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getSubMatrixWithIntArray:withIntArray:", "getSubMatrix", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "copySubMatrixWithInt:withInt:withInt:withInt:withDoubleArray2:", "copySubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Ljava.lang.IllegalArgumentException;", NULL },
    { "copySubMatrixWithIntArray:withIntArray:withDoubleArray2:", "copySubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Ljava.lang.IllegalArgumentException;", NULL },
    { "setSubMatrixWithDoubleArray2:withInt:withInt:", "setSubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowMatrixWithInt:", "getRowMatrix", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowMatrixWithInt:withOrgApacheCommonsMathLinearRealMatrix:", "setRowMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnMatrixWithInt:", "getColumnMatrix", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnMatrixWithInt:withOrgApacheCommonsMathLinearRealMatrix:", "setColumnMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getRowVectorWithInt:", "getRowVector", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowVectorWithInt:withOrgApacheCommonsMathLinearRealVector:", "setRowVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnVectorWithInt:", "getColumnVector", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnVectorWithInt:withOrgApacheCommonsMathLinearRealVector:", "setColumnVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getRowWithInt:", "getRow", "[D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowWithInt:withDoubleArray:", "setRow", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnWithInt:", "getColumn", "[D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnWithInt:withDoubleArray:", "setColumn", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getEntryWithInt:withInt:", "getEntry", "D", 0x401, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setEntryWithInt:withInt:withDouble:", "setEntry", "V", 0x401, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "addToEntryWithInt:withInt:withDouble:", "addToEntry", "V", 0x401, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "multiplyEntryWithInt:withInt:withDouble:", "multiplyEntry", "V", 0x401, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "transpose", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "inverse", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getDeterminant", NULL, "D", 0x1, "Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "isSquare", NULL, "Z", 0x1, NULL, NULL },
    { "isSingular", NULL, "Z", 0x1, NULL, NULL },
    { "getRowDimension", NULL, "I", 0x401, NULL, NULL },
    { "getColumnDimension", NULL, "I", 0x401, NULL, NULL },
    { "getTrace", NULL, "D", 0x1, "Lorg.apache.commons.math.linear.NonSquareMatrixException;", NULL },
    { "operateWithDoubleArray:", "operate", "[D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "operateWithOrgApacheCommonsMathLinearRealVector:", "operate", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithDoubleArray:", "preMultiply", "[D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithOrgApacheCommonsMathLinearRealVector:", "preMultiply", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:", "walkInColumnOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:", "walkInColumnOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInColumnOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInColumnOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:", "walkInOptimizedOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:", "walkInOptimizedOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInOptimizedOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInOptimizedOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "solveWithDoubleArray:", "solve", "[D", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "solveWithOrgApacheCommonsMathLinearRealMatrix:", "solve", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "luDecompose", NULL, "V", 0x1, "Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lu_", NULL, 0x2, "Lorg.apache.commons.math.linear.DecompositionSolver;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealMatrix = { 2, "AbstractRealMatrix", "org.apache.commons.math.linear", NULL, 0x401, 64, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearAbstractRealMatrix;
}

@end

void OrgApacheCommonsMathLinearAbstractRealMatrix_init(OrgApacheCommonsMathLinearAbstractRealMatrix *self) {
  (void) NSObject_init(self);
  self->lu_ = nil;
}

void OrgApacheCommonsMathLinearAbstractRealMatrix_initWithInt_withInt_(OrgApacheCommonsMathLinearAbstractRealMatrix *self, jint rowDimension, jint columnDimension) {
  (void) NSObject_init(self);
  if (rowDimension < 1) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INSUFFICIENT_DIMENSION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(rowDimension), JavaLangInteger_valueOfWithInt_(1) } count:2 type:NSObject_class_()]);
  }
  if (columnDimension <= 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INSUFFICIENT_DIMENSION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(columnDimension), JavaLangInteger_valueOfWithInt_(1) } count:2 type:NSObject_class_()]);
  }
  self->lu_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealMatrix)

@implementation OrgApacheCommonsMathLinearAbstractRealMatrix_$1

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn {
  self->endRow_ = endRow;
  columnSum_ = 0;
  maxColSum_ = 0;
}

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value {
  columnSum_ += OrgApacheCommonsMathUtilFastMath_absWithDouble_(value);
  if (row == endRow_) {
    maxColSum_ = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(maxColSum_, columnSum_);
    columnSum_ = 0;
  }
}

- (jdouble)end {
  return maxColSum_;
}

- (instancetype)init {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "startWithInt:withInt:withInt:withInt:withInt:withInt:", "start", "V", 0x1, NULL, NULL },
    { "visitWithInt:withInt:withDouble:", "visit", "V", 0x1, NULL, NULL },
    { "end", NULL, "D", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "endRow_", NULL, 0x2, "D", NULL, NULL,  },
    { "columnSum_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxColSum_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractRealMatrix", "getNorm" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealMatrix_$1 = { 2, "", "org.apache.commons.math.linear", "AbstractRealMatrix", 0x8008, 4, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheCommonsMathLinearAbstractRealMatrix_$1;
}

@end

void OrgApacheCommonsMathLinearAbstractRealMatrix_$1_init(OrgApacheCommonsMathLinearAbstractRealMatrix_$1 *self) {
  (void) NSObject_init(self);
}

OrgApacheCommonsMathLinearAbstractRealMatrix_$1 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$1_init() {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$1 *self = [OrgApacheCommonsMathLinearAbstractRealMatrix_$1 alloc];
  OrgApacheCommonsMathLinearAbstractRealMatrix_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealMatrix_$1)

@implementation OrgApacheCommonsMathLinearAbstractRealMatrix_$2

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn {
  sum_ = 0;
}

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value {
  sum_ += value * value;
}

- (jdouble)end {
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(sum_);
}

- (instancetype)init {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$2_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "startWithInt:withInt:withInt:withInt:withInt:withInt:", "start", "V", 0x1, NULL, NULL },
    { "visitWithInt:withInt:withDouble:", "visit", "V", 0x1, NULL, NULL },
    { "end", NULL, "D", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sum_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractRealMatrix", "getFrobeniusNorm" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealMatrix_$2 = { 2, "", "org.apache.commons.math.linear", "AbstractRealMatrix", 0x8008, 4, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheCommonsMathLinearAbstractRealMatrix_$2;
}

@end

void OrgApacheCommonsMathLinearAbstractRealMatrix_$2_init(OrgApacheCommonsMathLinearAbstractRealMatrix_$2 *self) {
  (void) NSObject_init(self);
}

OrgApacheCommonsMathLinearAbstractRealMatrix_$2 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$2_init() {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$2 *self = [OrgApacheCommonsMathLinearAbstractRealMatrix_$2 alloc];
  OrgApacheCommonsMathLinearAbstractRealMatrix_$2_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealMatrix_$2)

@implementation OrgApacheCommonsMathLinearAbstractRealMatrix_$3

- (jdouble)visitWithInt:(jint)row
                withInt:(jint)column
             withDouble:(jdouble)value {
  return [this$0_ getEntryWithInt:IOSIntArray_Get(nil_chk(val$selectedRows_), row) withInt:IOSIntArray_Get(nil_chk(val$selectedColumns_), column)];
}

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractRealMatrix:(OrgApacheCommonsMathLinearAbstractRealMatrix *)outer$
                                                        withIntArray:(IOSIntArray *)capture$0
                                                        withIntArray:(IOSIntArray *)capture$1 {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$3_initWithOrgApacheCommonsMathLinearAbstractRealMatrix_withIntArray_withIntArray_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "visitWithInt:withInt:withDouble:", "visit", "D", 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearAbstractRealMatrix:withIntArray:withIntArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.commons.math.linear.AbstractRealMatrix;", NULL, NULL,  },
    { "val$selectedRows_", NULL, 0x1012, "[I", NULL, NULL,  },
    { "val$selectedColumns_", NULL, 0x1012, "[I", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractRealMatrix", "getSubMatrixWithIntArray:withIntArray:" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealMatrix_$3 = { 2, "", "org.apache.commons.math.linear", "AbstractRealMatrix", 0x8008, 2, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheCommonsMathLinearAbstractRealMatrix_$3;
}

@end

void OrgApacheCommonsMathLinearAbstractRealMatrix_$3_initWithOrgApacheCommonsMathLinearAbstractRealMatrix_withIntArray_withIntArray_(OrgApacheCommonsMathLinearAbstractRealMatrix_$3 *self, OrgApacheCommonsMathLinearAbstractRealMatrix *outer$, IOSIntArray *capture$0, IOSIntArray *capture$1) {
  self->this$0_ = outer$;
  self->val$selectedRows_ = capture$0;
  self->val$selectedColumns_ = capture$1;
  (void) OrgApacheCommonsMathLinearDefaultRealMatrixChangingVisitor_init(self);
}

OrgApacheCommonsMathLinearAbstractRealMatrix_$3 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$3_initWithOrgApacheCommonsMathLinearAbstractRealMatrix_withIntArray_withIntArray_(OrgApacheCommonsMathLinearAbstractRealMatrix *outer$, IOSIntArray *capture$0, IOSIntArray *capture$1) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$3 *self = [OrgApacheCommonsMathLinearAbstractRealMatrix_$3 alloc];
  OrgApacheCommonsMathLinearAbstractRealMatrix_$3_initWithOrgApacheCommonsMathLinearAbstractRealMatrix_withIntArray_withIntArray_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealMatrix_$3)

@implementation OrgApacheCommonsMathLinearAbstractRealMatrix_$4

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn {
  self->startRow1_ = startRow;
  self->startColumn1_ = startColumn;
}

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value {
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(val$destination_), row - startRow1_)), column - startColumn1_) = value;
}

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)capture$0 {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$4_initWithDoubleArray2_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "startWithInt:withInt:withInt:withInt:withInt:withInt:", "start", "V", 0x1, NULL, NULL },
    { "visitWithInt:withInt:withDouble:", "visit", "V", 0x1, NULL, NULL },
    { "initWithDoubleArray2:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "startRow1_", NULL, 0x2, "I", NULL, NULL,  },
    { "startColumn1_", NULL, 0x2, "I", NULL, NULL,  },
    { "val$destination_", NULL, 0x1012, "[[D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractRealMatrix", "copySubMatrixWithInt:withInt:withInt:withInt:withDoubleArray2:" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealMatrix_$4 = { 2, "", "org.apache.commons.math.linear", "AbstractRealMatrix", 0x8008, 3, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheCommonsMathLinearAbstractRealMatrix_$4;
}

@end

void OrgApacheCommonsMathLinearAbstractRealMatrix_$4_initWithDoubleArray2_(OrgApacheCommonsMathLinearAbstractRealMatrix_$4 *self, IOSObjectArray *capture$0) {
  self->val$destination_ = capture$0;
  (void) OrgApacheCommonsMathLinearDefaultRealMatrixPreservingVisitor_init(self);
}

OrgApacheCommonsMathLinearAbstractRealMatrix_$4 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$4_initWithDoubleArray2_(IOSObjectArray *capture$0) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$4 *self = [OrgApacheCommonsMathLinearAbstractRealMatrix_$4 alloc];
  OrgApacheCommonsMathLinearAbstractRealMatrix_$4_initWithDoubleArray2_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealMatrix_$4)

@implementation OrgApacheCommonsMathLinearAbstractRealMatrix_$5

- (void)visitWithInt:(jint)row
             withInt:(jint)column
          withDouble:(jdouble)value {
  [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(val$out_)) setEntryWithInt:column withInt:row withDouble:value];
}

- (instancetype)initWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)capture$0 {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$5_initWithOrgApacheCommonsMathLinearRealMatrix_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "visitWithInt:withInt:withDouble:", "visit", "V", 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearRealMatrix:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$out_", NULL, 0x1012, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractRealMatrix", "transpose" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealMatrix_$5 = { 2, "", "org.apache.commons.math.linear", "AbstractRealMatrix", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheCommonsMathLinearAbstractRealMatrix_$5;
}

@end

void OrgApacheCommonsMathLinearAbstractRealMatrix_$5_initWithOrgApacheCommonsMathLinearRealMatrix_(OrgApacheCommonsMathLinearAbstractRealMatrix_$5 *self, id<OrgApacheCommonsMathLinearRealMatrix> capture$0) {
  self->val$out_ = capture$0;
  (void) OrgApacheCommonsMathLinearDefaultRealMatrixPreservingVisitor_init(self);
}

OrgApacheCommonsMathLinearAbstractRealMatrix_$5 *new_OrgApacheCommonsMathLinearAbstractRealMatrix_$5_initWithOrgApacheCommonsMathLinearRealMatrix_(id<OrgApacheCommonsMathLinearRealMatrix> capture$0) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_$5 *self = [OrgApacheCommonsMathLinearAbstractRealMatrix_$5 alloc];
  OrgApacheCommonsMathLinearAbstractRealMatrix_$5_initWithOrgApacheCommonsMathLinearRealMatrix_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealMatrix_$5)
