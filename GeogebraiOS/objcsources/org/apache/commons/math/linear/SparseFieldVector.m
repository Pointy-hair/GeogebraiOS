//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/linear/SparseFieldVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/reflect/Array.h"
#include "org/apache/commons/math/Field.h"
#include "org/apache/commons/math/FieldElement.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/FieldMatrix.h"
#include "org/apache/commons/math/linear/FieldVector.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/SparseFieldMatrix.h"
#include "org/apache/commons/math/linear/SparseFieldVector.h"
#include "org/apache/commons/math/util/OpenIntToFieldHashMap.h"

#define OrgApacheCommonsMathLinearSparseFieldVector_serialVersionUID 7841233292190413362LL

@interface OrgApacheCommonsMathLinearSparseFieldVector () {
 @public
  id<OrgApacheCommonsMathField> field_;
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap *entries_;
  jint virtualSize_;
}

- (OrgApacheCommonsMathUtilOpenIntToFieldHashMap *)getEntries;

- (void)checkIndexWithInt:(jint)index;

- (IOSObjectArray *)buildArrayWithInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearSparseFieldVector, field_, id<OrgApacheCommonsMathField>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearSparseFieldVector, entries_, OrgApacheCommonsMathUtilOpenIntToFieldHashMap *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearSparseFieldVector, serialVersionUID, jlong)

__attribute__((unused)) static OrgApacheCommonsMathUtilOpenIntToFieldHashMap *OrgApacheCommonsMathLinearSparseFieldVector_getEntries(OrgApacheCommonsMathLinearSparseFieldVector *self);

__attribute__((unused)) static void OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(OrgApacheCommonsMathLinearSparseFieldVector *self, jint index);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsMathLinearSparseFieldVector_buildArrayWithInt_(OrgApacheCommonsMathLinearSparseFieldVector *self, jint length);

@implementation OrgApacheCommonsMathLinearSparseFieldVector

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field {
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                          withInt:(jint)dimension {
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_(self, field, dimension);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *)v
                                                            withInt:(jint)resize {
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_withInt_(self, v, resize);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                          withInt:(jint)dimension
                                          withInt:(jint)expectedSize {
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, dimension, expectedSize);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
        withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)values {
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(self, field, values);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *)v {
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(self, v);
  return self;
}

- (OrgApacheCommonsMathUtilOpenIntToFieldHashMap *)getEntries {
  return OrgApacheCommonsMathLinearSparseFieldVector_getEntries(self);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)addWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *)v {
  [self checkVectorDimensionsWithInt:[((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(v)) getDimension]];
  OrgApacheCommonsMathLinearSparseFieldVector *res = (OrgApacheCommonsMathLinearSparseFieldVector *) check_class_cast([self copy__], [OrgApacheCommonsMathLinearSparseFieldVector class]);
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(OrgApacheCommonsMathLinearSparseFieldVector_getEntries(v))) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    id<OrgApacheCommonsMathFieldElement> value = [iter value];
    if ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) containsKeyWithInt:key]) {
      [((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(res)) setEntryWithInt:key withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([entries_ getWithInt:key])) addWithId:value]];
    }
    else {
      [((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(res)) setEntryWithInt:key withOrgApacheCommonsMathFieldElement:value];
    }
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)addWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  OrgApacheCommonsMathLinearSparseFieldVector *res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_(field_, [self getDimension]) autorelease];
  for (jint i = 0; i < v->size_; i++) {
    [res setEntryWithInt:i withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(v, i))) addWithId:[self getEntryWithInt:i]]];
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)appendWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *)v {
  OrgApacheCommonsMathLinearSparseFieldVector *res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_withInt_(self, [((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(v)) getDimension]) autorelease];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(v->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] + virtualSize_ withOrgApacheCommonsMathFieldElement:[iter value]];
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)appendWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearSparseFieldVector class]]) {
    return [self appendWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearSparseFieldVector class])];
  }
  else {
    return [self appendWithOrgApacheCommonsMathFieldElementArray:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) toArray]];
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)appendWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  id<OrgApacheCommonsMathLinearFieldVector> res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_withInt_(self, 1) autorelease];
  [res setEntryWithInt:virtualSize_ withOrgApacheCommonsMathFieldElement:d];
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)appendWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)a {
  id<OrgApacheCommonsMathLinearFieldVector> res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_withInt_(self, ((IOSObjectArray *) nil_chk(a))->size_) autorelease];
  for (jint i = 0; i < a->size_; i++) {
    [res setEntryWithInt:i + virtualSize_ withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(a, i)];
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)copy__ {
  return [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(self) autorelease];
}

- (id)dotProductWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension]];
  id<OrgApacheCommonsMathFieldElement> res = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    res = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(res)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([v getEntryWithInt:[iter key]])) multiplyWithId:[iter value]]];
  }
  return res;
}

- (id)dotProductWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  id<OrgApacheCommonsMathFieldElement> res = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    jint idx = [iter key];
    id<OrgApacheCommonsMathFieldElement> value = [field_ getZero];
    if (idx < v->size_) {
      value = IOSObjectArray_Get(v, idx);
    }
    res = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(res)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(value)) multiplyWithId:[iter value]]];
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)ebeDivideWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension]];
  OrgApacheCommonsMathLinearSparseFieldVector *res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(self) autorelease];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(res->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([iter value])) divideWithId:[v getEntryWithInt:[iter key]]]];
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)ebeDivideWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  OrgApacheCommonsMathLinearSparseFieldVector *res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(self) autorelease];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(res->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([iter value])) divideWithId:IOSObjectArray_Get(v, [iter key])]];
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)ebeMultiplyWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension]];
  OrgApacheCommonsMathLinearSparseFieldVector *res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(self) autorelease];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(res->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([iter value])) multiplyWithId:[v getEntryWithInt:[iter key]]]];
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)ebeMultiplyWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  OrgApacheCommonsMathLinearSparseFieldVector *res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(self) autorelease];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(res->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([iter value])) multiplyWithId:IOSObjectArray_Get(v, [iter key])]];
  }
  return res;
}

- (IOSObjectArray *)getData {
  IOSObjectArray *res = OrgApacheCommonsMathLinearSparseFieldVector_buildArrayWithInt_(self, virtualSize_);
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    IOSObjectArray_Set(nil_chk(res), [iter key], [iter value]);
  }
  return res;
}

- (jint)getDimension {
  return virtualSize_;
}

- (id)getEntryWithInt:(jint)index {
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index);
  return [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) getWithInt:index];
}

- (id<OrgApacheCommonsMathField>)getField {
  return field_;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)getSubVectorWithInt:(jint)index
                                                         withInt:(jint)n {
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index);
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index + n - 1);
  OrgApacheCommonsMathLinearSparseFieldVector *res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_(field_, n) autorelease];
  jint end = index + n;
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    if (key >= index && key < end) {
      [res setEntryWithInt:key - index withOrgApacheCommonsMathFieldElement:[iter value]];
    }
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapAddWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  return [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk([self copy__])) mapAddToSelfWithOrgApacheCommonsMathFieldElement:d];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapAddToSelfWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  for (jint i = 0; i < virtualSize_; i++) {
    [self setEntryWithInt:i withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:i])) addWithId:d]];
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapDivideWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  return [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk([self copy__])) mapDivideToSelfWithOrgApacheCommonsMathFieldElement:d];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapDivideToSelfWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [entries_ putWithInt:[iter key] withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([iter value])) divideWithId:d]];
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapInv {
  return [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk([self copy__])) mapInvToSelf];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapInvToSelf {
  for (jint i = 0; i < virtualSize_; i++) {
    [self setEntryWithInt:i withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(field_)) getOne])) divideWithId:[self getEntryWithInt:i]]];
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapMultiplyWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  return [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk([self copy__])) mapMultiplyToSelfWithOrgApacheCommonsMathFieldElement:d];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapMultiplyToSelfWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [entries_ putWithInt:[iter key] withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([iter value])) multiplyWithId:d]];
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapSubtractWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  return [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk([self copy__])) mapSubtractToSelfWithOrgApacheCommonsMathFieldElement:d];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapSubtractToSelfWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  return [self mapAddToSelfWithOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero])) subtractWithId:d]];
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)outerProductWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *)v {
  [self checkVectorDimensionsWithInt:[((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(v)) getDimension]];
  OrgApacheCommonsMathLinearSparseFieldMatrix *res = [new_OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(field_, virtualSize_, virtualSize_) autorelease];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter2 = [v->entries_ iterator];
    while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter2)) hasNext]) {
      [iter2 advance];
      [res setEntryWithInt:[iter key] withInt:[iter2 key] withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([iter value])) multiplyWithId:[iter2 value]]];
    }
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)outerProductWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  id<OrgApacheCommonsMathLinearFieldMatrix> res = [new_OrgApacheCommonsMathLinearSparseFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(field_, virtualSize_, virtualSize_) autorelease];
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint row = [iter key];
    id<OrgApacheCommonsMathFieldElement> value = [iter value];
    for (jint col = 0; col < virtualSize_; col++) {
      [res setEntryWithInt:row withInt:col withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(value)) multiplyWithId:IOSObjectArray_Get(v, col)]];
    }
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)outerProductWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearSparseFieldVector class]]) return [self outerProductWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearSparseFieldVector class])];
  else return [self outerProductWithOrgApacheCommonsMathFieldElementArray:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) toArray]];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)projectionWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension]];
  return [v mapMultiplyWithOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self dotProductWithOrgApacheCommonsMathLinearFieldVector:v])) divideWithId:[v dotProductWithOrgApacheCommonsMathLinearFieldVector:v]]];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)projectionWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  return [self projectionWithOrgApacheCommonsMathLinearFieldVector:[new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(field_, v) autorelease]];
}

- (void)setWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  for (jint i = 0; i < virtualSize_; i++) {
    [self setEntryWithInt:i withOrgApacheCommonsMathFieldElement:value];
  }
}

- (void)setEntryWithInt:(jint)index
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index);
  [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) putWithInt:index withOrgApacheCommonsMathFieldElement:value];
}

- (void)setSubVectorWithInt:(jint)index
withOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index);
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index + [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension] - 1);
  [self setSubVectorWithInt:index withOrgApacheCommonsMathFieldElementArray:[v getData]];
}

- (void)setSubVectorWithInt:(jint)index
withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index);
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index + ((IOSObjectArray *) nil_chk(v))->size_ - 1);
  for (jint i = 0; i < v->size_; i++) {
    [self setEntryWithInt:i + index withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(v, i)];
  }
}

- (OrgApacheCommonsMathLinearSparseFieldVector *)subtractWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *)v {
  [self checkVectorDimensionsWithInt:[((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(v)) getDimension]];
  OrgApacheCommonsMathLinearSparseFieldVector *res = (OrgApacheCommonsMathLinearSparseFieldVector *) check_class_cast([self copy__], [OrgApacheCommonsMathLinearSparseFieldVector class]);
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(OrgApacheCommonsMathLinearSparseFieldVector_getEntries(v))) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    if ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) containsKeyWithInt:key]) {
      [((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(res)) setEntryWithInt:key withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([entries_ getWithInt:key])) subtractWithId:[iter value]]];
    }
    else {
      [((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(res)) setEntryWithInt:key withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero])) subtractWithId:[iter value]]];
    }
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)subtractWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearSparseFieldVector class]]) return [self subtractWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearSparseFieldVector class])];
  else return [self subtractWithOrgApacheCommonsMathFieldElementArray:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) toArray]];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)subtractWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  OrgApacheCommonsMathLinearSparseFieldVector *res = [new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(self) autorelease];
  for (jint i = 0; i < v->size_; i++) {
    if ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) containsKeyWithInt:i]) {
      [res setEntryWithInt:i withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([entries_ getWithInt:i])) subtractWithId:IOSObjectArray_Get(v, i)]];
    }
    else {
      [res setEntryWithInt:i withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero])) subtractWithId:IOSObjectArray_Get(v, i)]];
    }
  }
  return res;
}

- (IOSObjectArray *)toArray {
  return [self getData];
}

- (void)checkIndexWithInt:(jint)index {
  OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(self, index);
}

- (void)checkVectorDimensionsWithInt:(jint)n {
  if ([self getDimension] != n) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([self getDimension]), JavaLangInteger_valueOfWithInt_(n) } count:2 type:NSObject_class_()]);
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)addWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearSparseFieldVector class]]) {
    return [self addWithOrgApacheCommonsMathLinearSparseFieldVector:(OrgApacheCommonsMathLinearSparseFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearSparseFieldVector class])];
  }
  else {
    return [self addWithOrgApacheCommonsMathFieldElementArray:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) toArray]];
  }
}

- (IOSObjectArray *)buildArrayWithInt:(jint)length {
  return OrgApacheCommonsMathLinearSparseFieldVector_buildArrayWithInt_(self, length);
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((field_ == nil) ? 0 : ((jint) [field_ hash]));
  result = prime * result + virtualSize_;
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint temp = ((jint) [((id<OrgApacheCommonsMathFieldElement>) nil_chk([iter value])) hash]);
    result = prime * result + temp;
  }
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (!([obj isKindOfClass:[OrgApacheCommonsMathLinearSparseFieldVector class]])) {
    return NO;
  }
  OrgApacheCommonsMathLinearSparseFieldVector *other = (OrgApacheCommonsMathLinearSparseFieldVector *) check_class_cast(obj, [OrgApacheCommonsMathLinearSparseFieldVector class]);
  if (field_ == nil) {
    if (((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(other))->field_ != nil) {
      return NO;
    }
  }
  else if (![field_ isEqual:((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(other))->field_]) {
    return NO;
  }
  if (virtualSize_ != ((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(other))->virtualSize_) {
    return NO;
  }
  OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    id<OrgApacheCommonsMathFieldElement> test = [other getEntryWithInt:[iter key]];
    if (![((id<OrgApacheCommonsMathFieldElement>) nil_chk(test)) isEqual:[iter value]]) {
      return NO;
    }
  }
  iter = [((OrgApacheCommonsMathUtilOpenIntToFieldHashMap *) nil_chk(OrgApacheCommonsMathLinearSparseFieldVector_getEntries(other))) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToFieldHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    id<OrgApacheCommonsMathFieldElement> test = [iter value];
    if (![((id<OrgApacheCommonsMathFieldElement>) nil_chk(test)) isEqual:[self getEntryWithInt:[iter key]]]) {
      return NO;
    }
  }
  return YES;
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(entries_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathField:", "SparseFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:withInt:", "SparseFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearSparseFieldVector:withInt:", "SparseFieldVector", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:withInt:withInt:", "SparseFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:withOrgApacheCommonsMathFieldElementArray:", "SparseFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearSparseFieldVector:", "SparseFieldVector", NULL, 0x1, NULL, NULL },
    { "getEntries", NULL, "Lorg.apache.commons.math.util.OpenIntToFieldHashMap;", 0x2, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearSparseFieldVector:", "add", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathFieldElementArray:", "add", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "appendWithOrgApacheCommonsMathLinearSparseFieldVector:", "append", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathLinearFieldVector:", "append", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathFieldElement:", "append", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "appendWithOrgApacheCommonsMathFieldElementArray:", "append", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "dotProductWithOrgApacheCommonsMathLinearFieldVector:", "dotProduct", "TT;", 0x1, "Ljava.lang.IllegalArgumentException;", "(Lorg/apache/commons/math/linear/FieldVector<TT;>;)TT;" },
    { "dotProductWithOrgApacheCommonsMathFieldElementArray:", "dotProduct", "TT;", 0x1, "Ljava.lang.IllegalArgumentException;", "([TT;)TT;" },
    { "ebeDivideWithOrgApacheCommonsMathLinearFieldVector:", "ebeDivide", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithOrgApacheCommonsMathFieldElementArray:", "ebeDivide", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithOrgApacheCommonsMathLinearFieldVector:", "ebeMultiply", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithOrgApacheCommonsMathFieldElementArray:", "ebeMultiply", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "getEntryWithInt:", "getEntry", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(I)TT;" },
    { "getField", NULL, "Lorg.apache.commons.math.Field;", 0x1, NULL, NULL },
    { "getSubVectorWithInt:withInt:", "getSubVector", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "mapAddWithOrgApacheCommonsMathFieldElement:", "mapAdd", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapAddToSelfWithOrgApacheCommonsMathFieldElement:", "mapAddToSelf", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapDivideWithOrgApacheCommonsMathFieldElement:", "mapDivide", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapDivideToSelfWithOrgApacheCommonsMathFieldElement:", "mapDivideToSelf", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapInv", NULL, "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "mapInvToSelf", NULL, "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "mapMultiplyWithOrgApacheCommonsMathFieldElement:", "mapMultiply", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapMultiplyToSelfWithOrgApacheCommonsMathFieldElement:", "mapMultiplyToSelf", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapSubtractWithOrgApacheCommonsMathFieldElement:", "mapSubtract", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapSubtractToSelfWithOrgApacheCommonsMathFieldElement:", "mapSubtractToSelf", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "outerProductWithOrgApacheCommonsMathLinearSparseFieldVector:", "outerProduct", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "outerProductWithOrgApacheCommonsMathFieldElementArray:", "outerProduct", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "outerProductWithOrgApacheCommonsMathLinearFieldVector:", "outerProduct", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "projectionWithOrgApacheCommonsMathLinearFieldVector:", "projection", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "projectionWithOrgApacheCommonsMathFieldElementArray:", "projection", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "setWithOrgApacheCommonsMathFieldElement:", "set", "V", 0x1, NULL, "(TT;)V" },
    { "setEntryWithInt:withOrgApacheCommonsMathFieldElement:", "setEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(ITT;)V" },
    { "setSubVectorWithInt:withOrgApacheCommonsMathLinearFieldVector:", "setSubVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setSubVectorWithInt:withOrgApacheCommonsMathFieldElementArray:", "setSubVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearSparseFieldVector:", "subtract", "Lorg.apache.commons.math.linear.SparseFieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearFieldVector:", "subtract", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathFieldElementArray:", "subtract", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "toArray", NULL, "[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "checkIndexWithInt:", "checkIndex", "V", 0x2, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "checkVectorDimensionsWithInt:", "checkVectorDimensions", "V", 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearFieldVector:", "add", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "buildArrayWithInt:", "buildArray", "[Lorg.apache.commons.math.FieldElement;", 0x2, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearSparseFieldVector_serialVersionUID },
    { "field_", NULL, 0x12, "Lorg.apache.commons.math.Field;", NULL, "Lorg/apache/commons/math/Field<TT;>;",  },
    { "entries_", NULL, 0x12, "Lorg.apache.commons.math.util.OpenIntToFieldHashMap;", NULL, "Lorg/apache/commons/math/util/OpenIntToFieldHashMap<TT;>;",  },
    { "virtualSize_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearSparseFieldVector = { 2, "SparseFieldVector", "org.apache.commons.math.linear", NULL, 0x1, 54, methods, 4, fields, 0, NULL, 0, NULL, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>Ljava/lang/Object;Lorg/apache/commons/math/linear/FieldVector<TT;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsMathLinearSparseFieldVector;
}

@end

void OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_(OrgApacheCommonsMathLinearSparseFieldVector *self, id<OrgApacheCommonsMathField> field) {
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_(self, field, 0);
}

OrgApacheCommonsMathLinearSparseFieldVector *new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_(id<OrgApacheCommonsMathField> field) {
  OrgApacheCommonsMathLinearSparseFieldVector *self = [OrgApacheCommonsMathLinearSparseFieldVector alloc];
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

void OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_(OrgApacheCommonsMathLinearSparseFieldVector *self, id<OrgApacheCommonsMathField> field, jint dimension) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearSparseFieldVector_set_field_(self, field);
  self->virtualSize_ = dimension;
  OrgApacheCommonsMathLinearSparseFieldVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathField_(field));
}

OrgApacheCommonsMathLinearSparseFieldVector *new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_(id<OrgApacheCommonsMathField> field, jint dimension) {
  OrgApacheCommonsMathLinearSparseFieldVector *self = [OrgApacheCommonsMathLinearSparseFieldVector alloc];
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_(self, field, dimension);
  return self;
}

void OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_withInt_(OrgApacheCommonsMathLinearSparseFieldVector *self, OrgApacheCommonsMathLinearSparseFieldVector *v, jint resize) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearSparseFieldVector_set_field_(self, ((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(v))->field_);
  self->virtualSize_ = [v getDimension] + resize;
  OrgApacheCommonsMathLinearSparseFieldVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathUtilOpenIntToFieldHashMap_(v->entries_));
}

OrgApacheCommonsMathLinearSparseFieldVector *new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_withInt_(OrgApacheCommonsMathLinearSparseFieldVector *v, jint resize) {
  OrgApacheCommonsMathLinearSparseFieldVector *self = [OrgApacheCommonsMathLinearSparseFieldVector alloc];
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_withInt_(self, v, resize);
  return self;
}

void OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_withInt_(OrgApacheCommonsMathLinearSparseFieldVector *self, id<OrgApacheCommonsMathField> field, jint dimension, jint expectedSize) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearSparseFieldVector_set_field_(self, field);
  self->virtualSize_ = dimension;
  OrgApacheCommonsMathLinearSparseFieldVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathField_withInt_(field, expectedSize));
}

OrgApacheCommonsMathLinearSparseFieldVector *new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_withInt_(id<OrgApacheCommonsMathField> field, jint dimension, jint expectedSize) {
  OrgApacheCommonsMathLinearSparseFieldVector *self = [OrgApacheCommonsMathLinearSparseFieldVector alloc];
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, dimension, expectedSize);
  return self;
}

void OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(OrgApacheCommonsMathLinearSparseFieldVector *self, id<OrgApacheCommonsMathField> field, IOSObjectArray *values) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearSparseFieldVector_set_field_(self, field);
  self->virtualSize_ = ((IOSObjectArray *) nil_chk(values))->size_;
  OrgApacheCommonsMathLinearSparseFieldVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathField_(field));
  for (jint key = 0; key < values->size_; key++) {
    id<OrgApacheCommonsMathFieldElement> value = IOSObjectArray_Get(values, key);
    [self->entries_ putWithInt:key withOrgApacheCommonsMathFieldElement:value];
  }
}

OrgApacheCommonsMathLinearSparseFieldVector *new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(id<OrgApacheCommonsMathField> field, IOSObjectArray *values) {
  OrgApacheCommonsMathLinearSparseFieldVector *self = [OrgApacheCommonsMathLinearSparseFieldVector alloc];
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(self, field, values);
  return self;
}

void OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(OrgApacheCommonsMathLinearSparseFieldVector *self, OrgApacheCommonsMathLinearSparseFieldVector *v) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearSparseFieldVector_set_field_(self, ((OrgApacheCommonsMathLinearSparseFieldVector *) nil_chk(v))->field_);
  self->virtualSize_ = [v getDimension];
  OrgApacheCommonsMathLinearSparseFieldVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToFieldHashMap_initWithOrgApacheCommonsMathUtilOpenIntToFieldHashMap_(OrgApacheCommonsMathLinearSparseFieldVector_getEntries(v)));
}

OrgApacheCommonsMathLinearSparseFieldVector *new_OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(OrgApacheCommonsMathLinearSparseFieldVector *v) {
  OrgApacheCommonsMathLinearSparseFieldVector *self = [OrgApacheCommonsMathLinearSparseFieldVector alloc];
  OrgApacheCommonsMathLinearSparseFieldVector_initWithOrgApacheCommonsMathLinearSparseFieldVector_(self, v);
  return self;
}

OrgApacheCommonsMathUtilOpenIntToFieldHashMap *OrgApacheCommonsMathLinearSparseFieldVector_getEntries(OrgApacheCommonsMathLinearSparseFieldVector *self) {
  return self->entries_;
}

void OrgApacheCommonsMathLinearSparseFieldVector_checkIndexWithInt_(OrgApacheCommonsMathLinearSparseFieldVector *self, jint index) {
  if (index < 0 || index >= [self getDimension]) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INDEX_OUT_OF_RANGE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_([self getDimension] - 1) } count:3 type:NSObject_class_()]) autorelease];
  }
}

IOSObjectArray *OrgApacheCommonsMathLinearSparseFieldVector_buildArrayWithInt_(OrgApacheCommonsMathLinearSparseFieldVector *self, jint length) {
  return (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(self->field_)) getZero])) getClass], length), [IOSObjectArray class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearSparseFieldVector)
