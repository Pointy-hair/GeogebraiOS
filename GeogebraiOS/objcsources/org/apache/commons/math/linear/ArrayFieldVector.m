//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/linear/ArrayFieldVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/Field.h"
#include "org/apache/commons/math/FieldElement.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/Array2DRowFieldMatrix.h"
#include "org/apache/commons/math/linear/ArrayFieldVector.h"
#include "org/apache/commons/math/linear/FieldMatrix.h"
#include "org/apache/commons/math/linear/FieldVector.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"

#define OrgApacheCommonsMathLinearArrayFieldVector_serialVersionUID 7648186910365927050LL

@interface OrgApacheCommonsMathLinearArrayFieldVector () {
 @public
  id<OrgApacheCommonsMathField> field_;
}

- (IOSObjectArray *)buildArrayWithInt:(jint)length;

- (void)checkIndexWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearArrayFieldVector, field_, id<OrgApacheCommonsMathField>)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearArrayFieldVector, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(OrgApacheCommonsMathLinearArrayFieldVector *self, jint length);

__attribute__((unused)) static void OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(OrgApacheCommonsMathLinearArrayFieldVector *self, jint index);

@implementation OrgApacheCommonsMathLinearArrayFieldVector

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                          withInt:(jint)size {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withInt_(self, field, size);
  return self;
}

- (instancetype)initWithInt:(jint)size
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)preset {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithInt_withOrgApacheCommonsMathFieldElement_(self, size, preset);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)d {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(self, d);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
        withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)d {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(self, field, d);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)d
                                                  withBoolean:(jboolean)copyArray {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_(self, d, copyArray);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
        withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)d
                                      withBoolean:(jboolean)copyArray {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_withBoolean_(self, field, d, copyArray);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)d
                                                      withInt:(jint)pos
                                                      withInt:(jint)size {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_(self, d, pos, size);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearFieldVector_(self, v);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_(self, v);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v
                                                       withBoolean:(jboolean)deep {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withBoolean_(self, v, deep);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v1
                    withOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v2 {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathLinearArrayFieldVector_(self, v1, v2);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v1
                         withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v2 {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathFieldElementArray_(self, v1, v2);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v1
               withOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v2 {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathLinearArrayFieldVector_(self, v1, v2);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v1
                    withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v2 {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathFieldElementArray_(self, v1, v2);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
        withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v1
        withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v2 {
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathFieldElementArray_(self, field, v1, v2);
  return self;
}

- (IOSObjectArray *)buildArrayWithInt:(jint)length {
  return OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, length);
}

- (id<OrgApacheCommonsMathField>)getField {
  return field_;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)copy__ {
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withBoolean_(self, YES);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)addWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [self addWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearFieldVector:v];
    IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
    for (jint i = 0; i < data_->size_; i++) {
      (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) addWithId:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getEntryWithInt:i]]);
    }
    return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)addWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) addWithId:IOSObjectArray_Get(v, i)]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (OrgApacheCommonsMathLinearArrayFieldVector *)addWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  return (OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast([self addWithOrgApacheCommonsMathFieldElementArray:((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v))->data_], [OrgApacheCommonsMathLinearArrayFieldVector class]);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)subtractWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [self subtractWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearFieldVector:v];
    IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
    for (jint i = 0; i < data_->size_; i++) {
      (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) subtractWithId:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getEntryWithInt:i]]);
    }
    return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)subtractWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) subtractWithId:IOSObjectArray_Get(v, i)]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (OrgApacheCommonsMathLinearArrayFieldVector *)subtractWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  return (OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast([self subtractWithOrgApacheCommonsMathFieldElementArray:((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v))->data_], [OrgApacheCommonsMathLinearArrayFieldVector class]);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapAddWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) addWithId:d]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapAddToSelfWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; i++) {
    (void) IOSObjectArray_Set(data_, i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) addWithId:d]);
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapSubtractWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) subtractWithId:d]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapSubtractToSelfWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; i++) {
    (void) IOSObjectArray_Set(data_, i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) subtractWithId:d]);
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapMultiplyWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) multiplyWithId:d]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapMultiplyToSelfWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; i++) {
    (void) IOSObjectArray_Set(data_, i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) multiplyWithId:d]);
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapDivideWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) divideWithId:d]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapDivideToSelfWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; i++) {
    (void) IOSObjectArray_Set(data_, i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) divideWithId:d]);
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapInv {
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  id<OrgApacheCommonsMathFieldElement> one = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getOne];
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(one)) divideWithId:IOSObjectArray_Get(data_, i)]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)mapInvToSelf {
  id<OrgApacheCommonsMathFieldElement> one = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getOne];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; i++) {
    (void) IOSObjectArray_Set(data_, i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(one)) divideWithId:IOSObjectArray_Get(data_, i)]);
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)ebeMultiplyWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [self ebeMultiplyWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearFieldVector:v];
    IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
    for (jint i = 0; i < data_->size_; i++) {
      (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) multiplyWithId:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getEntryWithInt:i]]);
    }
    return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)ebeMultiplyWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) multiplyWithId:IOSObjectArray_Get(v, i)]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (OrgApacheCommonsMathLinearArrayFieldVector *)ebeMultiplyWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  return (OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast([self ebeMultiplyWithOrgApacheCommonsMathFieldElementArray:((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v))->data_], [OrgApacheCommonsMathLinearArrayFieldVector class]);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)ebeDivideWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [self ebeDivideWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearFieldVector:v];
    IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
    for (jint i = 0; i < data_->size_; i++) {
      (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) divideWithId:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getEntryWithInt:i]]);
    }
    return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)ebeDivideWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_);
  for (jint i = 0; i < data_->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(out), i, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) divideWithId:IOSObjectArray_Get(v, i)]);
  }
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (OrgApacheCommonsMathLinearArrayFieldVector *)ebeDivideWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  return (OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast([self ebeDivideWithOrgApacheCommonsMathFieldElementArray:((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v))->data_], [OrgApacheCommonsMathLinearArrayFieldVector class]);
}

- (IOSObjectArray *)getData {
  return [((IOSObjectArray *) nil_chk(data_)) clone];
}

- (IOSObjectArray *)getDataRef {
  return data_;
}

- (id)dotProductWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [self dotProductWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearFieldVector:v];
    id<OrgApacheCommonsMathFieldElement> dot = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; i++) {
      dot = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(dot)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) multiplyWithId:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getEntryWithInt:i]]];
    }
    return dot;
  }
}

- (id)dotProductWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  id<OrgApacheCommonsMathFieldElement> dot = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; i++) {
    dot = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(dot)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) multiplyWithId:IOSObjectArray_Get(v, i)]];
  }
  return dot;
}

- (id)dotProductWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  return [self dotProductWithOrgApacheCommonsMathFieldElementArray:((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v))->data_];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)projectionWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  return [v mapMultiplyWithOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self dotProductWithOrgApacheCommonsMathLinearFieldVector:v])) divideWithId:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) dotProductWithOrgApacheCommonsMathLinearFieldVector:v]]];
}

- (id<OrgApacheCommonsMathLinearFieldVector>)projectionWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  return [self projectionWithOrgApacheCommonsMathLinearArrayFieldVector:new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_(v, NO)];
}

- (OrgApacheCommonsMathLinearArrayFieldVector *)projectionWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  return (OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast([v mapMultiplyWithOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self dotProductWithOrgApacheCommonsMathLinearArrayFieldVector:v])) divideWithId:[((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v)) dotProductWithOrgApacheCommonsMathLinearArrayFieldVector:v]]], [OrgApacheCommonsMathLinearArrayFieldVector class]);
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)outerProductWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [self outerProductWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearFieldVector:v];
    jint m = ((IOSObjectArray *) nil_chk(data_))->size_;
    id<OrgApacheCommonsMathLinearFieldMatrix> out = new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(field_, m, m);
    for (jint i = 0; i < data_->size_; i++) {
      for (jint j = 0; j < data_->size_; j++) {
        [out setEntryWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) multiplyWithId:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getEntryWithInt:j]]];
      }
    }
    return out;
  }
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)outerProductWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  return [self outerProductWithOrgApacheCommonsMathFieldElementArray:((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v))->data_];
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)outerProductWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  [self checkVectorDimensionsWithInt:((IOSObjectArray *) nil_chk(v))->size_];
  jint m = ((IOSObjectArray *) nil_chk(data_))->size_;
  id<OrgApacheCommonsMathLinearFieldMatrix> out = new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(field_, m, m);
  for (jint i = 0; i < data_->size_; i++) {
    for (jint j = 0; j < data_->size_; j++) {
      [out setEntryWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) multiplyWithId:IOSObjectArray_Get(v, j)]];
    }
  }
  return out;
}

- (id)getEntryWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(data_), index);
}

- (jint)getDimension {
  return ((IOSObjectArray *) nil_chk(data_))->size_;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)appendWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [self appendWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathLinearArrayFieldVector_(self, new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearFieldVector_(v));
  }
}

- (OrgApacheCommonsMathLinearArrayFieldVector *)appendWithOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathLinearArrayFieldVector_(self, v);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)appendWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)inArg {
  IOSObjectArray *out = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(data_))->size_ + 1);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, 0, out, 0, data_->size_);
  (void) IOSObjectArray_Set(nil_chk(out), data_->size_, inArg);
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)appendWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)inArg {
  return new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathFieldElementArray_(self, inArg);
}

- (id<OrgApacheCommonsMathLinearFieldVector>)getSubVectorWithInt:(jint)index
                                                         withInt:(jint)n {
  OrgApacheCommonsMathLinearArrayFieldVector *out = new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withInt_(field_, n);
  @try {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, index, out->data_, 0, n);
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(self, index);
    OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(self, index + n - 1);
  }
  return out;
}

- (void)setEntryWithInt:(jint)index
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  @try {
    (void) IOSObjectArray_Set(nil_chk(data_), index, value);
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(self, index);
  }
}

- (void)setSubVectorWithInt:(jint)index
withOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    @try {
      [self setWithInt:index withOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])];
    }
    @catch (JavaLangClassCastException *cce) {
      for (jint i = index; i < index + [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension]; ++i) {
        (void) IOSObjectArray_Set(nil_chk(data_), i, [v getEntryWithInt:i - index]);
      }
    }
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(self, index);
    OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(self, index + [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension] - 1);
  }
}

- (void)setSubVectorWithInt:(jint)index
withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  @try {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v, 0, data_, index, ((IOSObjectArray *) nil_chk(v))->size_);
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(self, index);
    OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(self, index + ((IOSObjectArray *) nil_chk(v))->size_ - 1);
  }
}

- (void)setWithInt:(jint)index
withOrgApacheCommonsMathLinearArrayFieldVector:(OrgApacheCommonsMathLinearArrayFieldVector *)v {
  [self setSubVectorWithInt:index withOrgApacheCommonsMathFieldElementArray:((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v))->data_];
}

- (void)setWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  JavaUtilArrays_fillWithNSObjectArray_withId_(data_, value);
}

- (IOSObjectArray *)toArray {
  return [((IOSObjectArray *) nil_chk(data_)) clone];
}

- (void)checkVectorDimensionsWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension]];
}

- (void)checkVectorDimensionsWithInt:(jint)n {
  if (((IOSObjectArray *) nil_chk(data_))->size_ != n) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(data_->size_), JavaLangInteger_valueOfWithInt_(n) } count:2 type:NSObject_class_()]);
  }
}

- (jboolean)isEqual:(id)other {
  if (self == other) {
    return YES;
  }
  if (other == nil) {
    return NO;
  }
  @try {
    id<OrgApacheCommonsMathLinearFieldVector> rhs = (id<OrgApacheCommonsMathLinearFieldVector>) check_protocol_cast(other, @protocol(OrgApacheCommonsMathLinearFieldVector));
    if (((IOSObjectArray *) nil_chk(data_))->size_ != [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(rhs)) getDimension]) {
      return NO;
    }
    for (jint i = 0; i < data_->size_; ++i) {
      if (![((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(data_, i))) isEqual:[rhs getEntryWithInt:i]]) {
        return NO;
      }
    }
    return YES;
  }
  @catch (JavaLangClassCastException *ex) {
    return NO;
  }
}

- (NSUInteger)hash {
  jint h = 3542;
  {
    IOSObjectArray *a__ = data_;
    id<OrgApacheCommonsMathFieldElement> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OrgApacheCommonsMathFieldElement> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OrgApacheCommonsMathFieldElement> a = *b__++;
      h = h ^ ((jint) [((id<OrgApacheCommonsMathFieldElement>) nil_chk(a)) hash]);
    }
  }
  return h;
}

- (void)checkIndexWithInt:(jint)index {
  OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(self, index);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathField:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:withInt:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithInt:withOrgApacheCommonsMathFieldElement:", "ArrayFieldVector", NULL, 0x1, NULL, "(ITT;)V" },
    { "initWithOrgApacheCommonsMathFieldElementArray:", "ArrayFieldVector", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithOrgApacheCommonsMathField:withOrgApacheCommonsMathFieldElementArray:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathFieldElementArray:withBoolean:", "ArrayFieldVector", NULL, 0x1, "Ljava.lang.NullPointerException;Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithOrgApacheCommonsMathField:withOrgApacheCommonsMathFieldElementArray:withBoolean:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathFieldElementArray:withInt:withInt:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearFieldVector:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayFieldVector:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayFieldVector:withBoolean:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayFieldVector:withOrgApacheCommonsMathLinearArrayFieldVector:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayFieldVector:withOrgApacheCommonsMathFieldElementArray:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathFieldElementArray:withOrgApacheCommonsMathLinearArrayFieldVector:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathFieldElementArray:withOrgApacheCommonsMathFieldElementArray:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:withOrgApacheCommonsMathFieldElementArray:withOrgApacheCommonsMathFieldElementArray:", "ArrayFieldVector", NULL, 0x1, NULL, NULL },
    { "buildArrayWithInt:", "buildArray", "[Lorg.apache.commons.math.FieldElement;", 0x2, NULL, NULL },
    { "getField", NULL, "Lorg.apache.commons.math.Field;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearFieldVector:", "add", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathFieldElementArray:", "add", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearArrayFieldVector:", "add", "Lorg.apache.commons.math.linear.ArrayFieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearFieldVector:", "subtract", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathFieldElementArray:", "subtract", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearArrayFieldVector:", "subtract", "Lorg.apache.commons.math.linear.ArrayFieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "mapAddWithOrgApacheCommonsMathFieldElement:", "mapAdd", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapAddToSelfWithOrgApacheCommonsMathFieldElement:", "mapAddToSelf", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapSubtractWithOrgApacheCommonsMathFieldElement:", "mapSubtract", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapSubtractToSelfWithOrgApacheCommonsMathFieldElement:", "mapSubtractToSelf", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapMultiplyWithOrgApacheCommonsMathFieldElement:", "mapMultiply", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapMultiplyToSelfWithOrgApacheCommonsMathFieldElement:", "mapMultiplyToSelf", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapDivideWithOrgApacheCommonsMathFieldElement:", "mapDivide", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapDivideToSelfWithOrgApacheCommonsMathFieldElement:", "mapDivideToSelf", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "mapInv", NULL, "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "mapInvToSelf", NULL, "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "ebeMultiplyWithOrgApacheCommonsMathLinearFieldVector:", "ebeMultiply", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithOrgApacheCommonsMathFieldElementArray:", "ebeMultiply", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithOrgApacheCommonsMathLinearArrayFieldVector:", "ebeMultiply", "Lorg.apache.commons.math.linear.ArrayFieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithOrgApacheCommonsMathLinearFieldVector:", "ebeDivide", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithOrgApacheCommonsMathFieldElementArray:", "ebeDivide", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithOrgApacheCommonsMathLinearArrayFieldVector:", "ebeDivide", "Lorg.apache.commons.math.linear.ArrayFieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "getDataRef", NULL, "[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "dotProductWithOrgApacheCommonsMathLinearFieldVector:", "dotProduct", "TT;", 0x1, "Ljava.lang.IllegalArgumentException;", "(Lorg/apache/commons/math/linear/FieldVector<TT;>;)TT;" },
    { "dotProductWithOrgApacheCommonsMathFieldElementArray:", "dotProduct", "TT;", 0x1, "Ljava.lang.IllegalArgumentException;", "([TT;)TT;" },
    { "dotProductWithOrgApacheCommonsMathLinearArrayFieldVector:", "dotProduct", "TT;", 0x1, "Ljava.lang.IllegalArgumentException;", "(Lorg/apache/commons/math/linear/ArrayFieldVector<TT;>;)TT;" },
    { "projectionWithOrgApacheCommonsMathLinearFieldVector:", "projection", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "projectionWithOrgApacheCommonsMathFieldElementArray:", "projection", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "projectionWithOrgApacheCommonsMathLinearArrayFieldVector:", "projection", "Lorg.apache.commons.math.linear.ArrayFieldVector;", 0x1, NULL, NULL },
    { "outerProductWithOrgApacheCommonsMathLinearFieldVector:", "outerProduct", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "outerProductWithOrgApacheCommonsMathLinearArrayFieldVector:", "outerProduct", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "outerProductWithOrgApacheCommonsMathFieldElementArray:", "outerProduct", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getEntryWithInt:", "getEntry", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(I)TT;" },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathLinearFieldVector:", "append", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathLinearArrayFieldVector:", "append", "Lorg.apache.commons.math.linear.ArrayFieldVector;", 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathFieldElement:", "append", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldVector<TT;>;" },
    { "appendWithOrgApacheCommonsMathFieldElementArray:", "append", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "getSubVectorWithInt:withInt:", "getSubVector", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, NULL, NULL },
    { "setEntryWithInt:withOrgApacheCommonsMathFieldElement:", "setEntry", "V", 0x1, NULL, "(ITT;)V" },
    { "setSubVectorWithInt:withOrgApacheCommonsMathLinearFieldVector:", "setSubVector", "V", 0x1, NULL, NULL },
    { "setSubVectorWithInt:withOrgApacheCommonsMathFieldElementArray:", "setSubVector", "V", 0x1, NULL, NULL },
    { "setWithInt:withOrgApacheCommonsMathLinearArrayFieldVector:", "set", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setWithOrgApacheCommonsMathFieldElement:", "set", "V", 0x1, NULL, "(TT;)V" },
    { "toArray", NULL, "[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "checkVectorDimensionsWithOrgApacheCommonsMathLinearFieldVector:", "checkVectorDimensions", "V", 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "checkVectorDimensionsWithInt:", "checkVectorDimensions", "V", 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "checkIndexWithInt:", "checkIndex", "V", 0x2, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearArrayFieldVector_serialVersionUID },
    { "data_", NULL, 0x4, "[Lorg.apache.commons.math.FieldElement;", NULL, "[TT;",  },
    { "field_", NULL, 0x12, "Lorg.apache.commons.math.Field;", NULL, "Lorg/apache/commons/math/Field<TT;>;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearArrayFieldVector = { 2, "ArrayFieldVector", "org.apache.commons.math.linear", NULL, 0x1, 70, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>Ljava/lang/Object;Lorg/apache/commons/math/linear/FieldVector<TT;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsMathLinearArrayFieldVector;
}

@end

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_(OrgApacheCommonsMathLinearArrayFieldVector *self, id<OrgApacheCommonsMathField> field) {
  (void) OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withInt_(self, field, 0);
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_(id<OrgApacheCommonsMathField> field) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withInt_(OrgApacheCommonsMathLinearArrayFieldVector *self, id<OrgApacheCommonsMathField> field, jint size) {
  (void) NSObject_init(self);
  self->field_ = field;
  self->data_ = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, size);
  JavaUtilArrays_fillWithNSObjectArray_withId_(self->data_, [((id<OrgApacheCommonsMathField>) nil_chk(field)) getZero]);
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withInt_(id<OrgApacheCommonsMathField> field, jint size) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withInt_(self, field, size);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithInt_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearArrayFieldVector *self, jint size, id<OrgApacheCommonsMathFieldElement> preset) {
  (void) OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withInt_(self, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(preset)) getField], size);
  JavaUtilArrays_fillWithNSObjectArray_withId_(self->data_, preset);
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithInt_withOrgApacheCommonsMathFieldElement_(jint size, id<OrgApacheCommonsMathFieldElement> preset) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithInt_withOrgApacheCommonsMathFieldElement_(self, size, preset);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(OrgApacheCommonsMathLinearArrayFieldVector *self, IOSObjectArray *d) {
  (void) NSObject_init(self);
  @try {
    self->field_ = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(d), 0))) getField];
    self->data_ = [d clone];
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(self, d);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(OrgApacheCommonsMathLinearArrayFieldVector *self, id<OrgApacheCommonsMathField> field, IOSObjectArray *d) {
  (void) NSObject_init(self);
  self->field_ = field;
  self->data_ = [((IOSObjectArray *) nil_chk(d)) clone];
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(id<OrgApacheCommonsMathField> field, IOSObjectArray *d) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_(self, field, d);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_(OrgApacheCommonsMathLinearArrayFieldVector *self, IOSObjectArray *d, jboolean copyArray) {
  (void) NSObject_init(self);
  if (((IOSObjectArray *) nil_chk(d))->size_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  self->field_ = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(d, 0))) getField];
  self->data_ = copyArray ? [d clone] : d;
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_(IOSObjectArray *d, jboolean copyArray) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_(self, d, copyArray);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_withBoolean_(OrgApacheCommonsMathLinearArrayFieldVector *self, id<OrgApacheCommonsMathField> field, IOSObjectArray *d, jboolean copyArray) {
  (void) NSObject_init(self);
  self->field_ = field;
  self->data_ = copyArray ? [((IOSObjectArray *) nil_chk(d)) clone] : d;
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_withBoolean_(id<OrgApacheCommonsMathField> field, IOSObjectArray *d, jboolean copyArray) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_withBoolean_(self, field, d, copyArray);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_(OrgApacheCommonsMathLinearArrayFieldVector *self, IOSObjectArray *d, jint pos, jint size) {
  (void) NSObject_init(self);
  if (((IOSObjectArray *) nil_chk(d))->size_ < pos + size) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_POSITION_SIZE_MISMATCH_INPUT_ARRAY(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(pos), JavaLangInteger_valueOfWithInt_(size), JavaLangInteger_valueOfWithInt_(d->size_) } count:3 type:NSObject_class_()]);
  }
  self->field_ = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(d, 0))) getField];
  self->data_ = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, size);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(d, pos, self->data_, 0, size);
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_(IOSObjectArray *d, jint pos, jint size) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_(self, d, pos, size);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearFieldVector_(OrgApacheCommonsMathLinearArrayFieldVector *self, id<OrgApacheCommonsMathLinearFieldVector> v) {
  (void) NSObject_init(self);
  self->field_ = [((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getField];
  self->data_ = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, [v getDimension]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->data_))->size_; ++i) {
    (void) IOSObjectArray_Set(self->data_, i, [v getEntryWithInt:i]);
  }
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearFieldVector_(id<OrgApacheCommonsMathLinearFieldVector> v) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearFieldVector_(self, v);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_(OrgApacheCommonsMathLinearArrayFieldVector *self, OrgApacheCommonsMathLinearArrayFieldVector *v) {
  (void) NSObject_init(self);
  self->field_ = [((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v)) getField];
  self->data_ = [((IOSObjectArray *) nil_chk(v->data_)) clone];
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_(OrgApacheCommonsMathLinearArrayFieldVector *v) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_(self, v);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withBoolean_(OrgApacheCommonsMathLinearArrayFieldVector *self, OrgApacheCommonsMathLinearArrayFieldVector *v, jboolean deep) {
  (void) NSObject_init(self);
  self->field_ = [((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v)) getField];
  self->data_ = deep ? [((IOSObjectArray *) nil_chk(v->data_)) clone] : v->data_;
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withBoolean_(OrgApacheCommonsMathLinearArrayFieldVector *v, jboolean deep) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withBoolean_(self, v, deep);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathLinearArrayFieldVector_(OrgApacheCommonsMathLinearArrayFieldVector *self, OrgApacheCommonsMathLinearArrayFieldVector *v1, OrgApacheCommonsMathLinearArrayFieldVector *v2) {
  (void) NSObject_init(self);
  self->field_ = [((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v1)) getField];
  self->data_ = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(v1->data_))->size_ + ((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v2))->data_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1->data_, 0, self->data_, 0, ((IOSObjectArray *) nil_chk(v1->data_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2->data_, 0, self->data_, v1->data_->size_, v2->data_->size_);
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathLinearArrayFieldVector_(OrgApacheCommonsMathLinearArrayFieldVector *v1, OrgApacheCommonsMathLinearArrayFieldVector *v2) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathLinearArrayFieldVector_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathFieldElementArray_(OrgApacheCommonsMathLinearArrayFieldVector *self, OrgApacheCommonsMathLinearArrayFieldVector *v1, IOSObjectArray *v2) {
  (void) NSObject_init(self);
  self->field_ = [((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v1)) getField];
  self->data_ = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(v1->data_))->size_ + ((IOSObjectArray *) nil_chk(v2))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1->data_, 0, self->data_, 0, ((IOSObjectArray *) nil_chk(v1->data_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2, 0, self->data_, v1->data_->size_, v2->size_);
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathFieldElementArray_(OrgApacheCommonsMathLinearArrayFieldVector *v1, IOSObjectArray *v2) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathLinearArrayFieldVector_withOrgApacheCommonsMathFieldElementArray_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathLinearArrayFieldVector_(OrgApacheCommonsMathLinearArrayFieldVector *self, IOSObjectArray *v1, OrgApacheCommonsMathLinearArrayFieldVector *v2) {
  (void) NSObject_init(self);
  self->field_ = [((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(v2)) getField];
  self->data_ = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(v1))->size_ + ((IOSObjectArray *) nil_chk(v2->data_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1, 0, self->data_, 0, v1->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2->data_, 0, self->data_, v1->size_, ((IOSObjectArray *) nil_chk(v2->data_))->size_);
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathLinearArrayFieldVector_(IOSObjectArray *v1, OrgApacheCommonsMathLinearArrayFieldVector *v2) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathLinearArrayFieldVector_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathFieldElementArray_(OrgApacheCommonsMathLinearArrayFieldVector *self, IOSObjectArray *v1, IOSObjectArray *v2) {
  (void) NSObject_init(self);
  @try {
    self->data_ = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, ((IOSObjectArray *) nil_chk(v1))->size_ + ((IOSObjectArray *) nil_chk(v2))->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1, 0, self->data_, 0, v1->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2, 0, self->data_, v1->size_, v2->size_);
    self->field_ = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(self->data_), 0))) getField];
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathFieldElementArray_(IOSObjectArray *v1, IOSObjectArray *v2) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathFieldElementArray_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathFieldElementArray_(OrgApacheCommonsMathLinearArrayFieldVector *self, id<OrgApacheCommonsMathField> field, IOSObjectArray *v1, IOSObjectArray *v2) {
  (void) NSObject_init(self);
  if (((IOSObjectArray *) nil_chk(v1))->size_ + ((IOSObjectArray *) nil_chk(v2))->size_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  self->data_ = OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(self, v1->size_ + v2->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1, 0, self->data_, 0, v1->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2, 0, self->data_, v1->size_, v2->size_);
  self->field_ = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(self->data_), 0))) getField];
}

OrgApacheCommonsMathLinearArrayFieldVector *new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathFieldElementArray_(id<OrgApacheCommonsMathField> field, IOSObjectArray *v1, IOSObjectArray *v2) {
  OrgApacheCommonsMathLinearArrayFieldVector *self = [OrgApacheCommonsMathLinearArrayFieldVector alloc];
  OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathField_withOrgApacheCommonsMathFieldElementArray_withOrgApacheCommonsMathFieldElementArray_(self, field, v1, v2);
  return self;
}

IOSObjectArray *OrgApacheCommonsMathLinearArrayFieldVector_buildArrayWithInt_(OrgApacheCommonsMathLinearArrayFieldVector *self, jint length) {
  return (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(self->field_)) getZero])) getClass], length), [IOSObjectArray class]);
}

void OrgApacheCommonsMathLinearArrayFieldVector_checkIndexWithInt_(OrgApacheCommonsMathLinearArrayFieldVector *self, jint index) {
  if (index < 0 || index >= [self getDimension]) {
    @throw new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INDEX_OUT_OF_RANGE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_([self getDimension] - 1) } count:3 type:NSObject_class_()]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearArrayFieldVector)
