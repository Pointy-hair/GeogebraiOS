//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/linear/BlockRealMatrix.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractRealMatrix.h"
#include "org/apache/commons/math/linear/ArrayRealVector.h"
#include "org/apache/commons/math/linear/BlockRealMatrix.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/MatrixVisitorException.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealMatrixChangingVisitor.h"
#include "org/apache/commons/math/linear/RealMatrixPreservingVisitor.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathLinearBlockRealMatrix_serialVersionUID 4991895511313664478LL

@interface OrgApacheCommonsMathLinearBlockRealMatrix () {
 @public
  IOSObjectArray *blocks_;
  jint rows_;
  jint columns_;
  jint blockRows_;
  jint blockColumns_;
}

- (void)copyBlockPartWithDoubleArray:(IOSDoubleArray *)srcBlock
                             withInt:(jint)srcWidth
                             withInt:(jint)srcStartRow
                             withInt:(jint)srcEndRow
                             withInt:(jint)srcStartColumn
                             withInt:(jint)srcEndColumn
                     withDoubleArray:(IOSDoubleArray *)dstBlock
                             withInt:(jint)dstWidth
                             withInt:(jint)dstStartRow
                             withInt:(jint)dstStartColumn OBJC_METHOD_FAMILY_NONE;

- (jint)blockHeightWithInt:(jint)blockRow;

- (jint)blockWidthWithInt:(jint)blockColumn;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearBlockRealMatrix, blocks_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearBlockRealMatrix, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(OrgApacheCommonsMathLinearBlockRealMatrix *self, IOSDoubleArray *srcBlock, jint srcWidth, jint srcStartRow, jint srcEndRow, jint srcStartColumn, jint srcEndColumn, IOSDoubleArray *dstBlock, jint dstWidth, jint dstStartRow, jint dstStartColumn);

__attribute__((unused)) static jint OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(OrgApacheCommonsMathLinearBlockRealMatrix *self, jint blockRow);

__attribute__((unused)) static jint OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(OrgApacheCommonsMathLinearBlockRealMatrix *self, jint blockColumn);

@implementation OrgApacheCommonsMathLinearBlockRealMatrix

- (instancetype)initWithInt:(jint)rows
                    withInt:(jint)columns {
  OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(self, rows, columns);
  return self;
}

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)rawData {
  OrgApacheCommonsMathLinearBlockRealMatrix_initWithDoubleArray2_(self, rawData);
  return self;
}

- (instancetype)initWithInt:(jint)rows
                    withInt:(jint)columns
           withDoubleArray2:(IOSObjectArray *)blockData
                withBoolean:(jboolean)copyArray {
  OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_withDoubleArray2_withBoolean_(self, rows, columns, blockData, copyArray);
  return self;
}

+ (IOSObjectArray *)toBlocksLayoutWithDoubleArray2:(IOSObjectArray *)rawData {
  return OrgApacheCommonsMathLinearBlockRealMatrix_toBlocksLayoutWithDoubleArray2_(rawData);
}

+ (IOSObjectArray *)createBlocksLayoutWithInt:(jint)rows
                                      withInt:(jint)columns {
  return OrgApacheCommonsMathLinearBlockRealMatrix_createBlocksLayoutWithInt_withInt_(rows, columns);
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)createMatrixWithInt:(jint)rowDimension
                                                           withInt:(jint)columnDimension {
  return [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rowDimension, columnDimension) autorelease];
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)copy__ {
  OrgApacheCommonsMathLinearBlockRealMatrix *copied = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, columns_) autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(blocks_))->size_; ++i) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(blocks_, i), 0, IOSObjectArray_Get(copied->blocks_, i), 0, ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(blocks_, i)))->size_);
  }
  return copied;
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)addWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self addWithOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearBlockRealMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    OrgApacheCommonsMathLinearMatrixUtils_checkAdditionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
    OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, columns_) autorelease];
    jint blockIndex = 0;
    for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
      for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
        IOSDoubleArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
        IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
        jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
        jint k = 0;
        for (jint p = pStart; p < pEnd; ++p) {
          for (jint q = qStart; q < qEnd; ++q) {
            *IOSDoubleArray_GetRef(nil_chk(outBlock), k) = IOSDoubleArray_Get(nil_chk(tBlock), k) + [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) getEntryWithInt:p withInt:q];
            ++k;
          }
        }
        ++blockIndex;
      }
    }
    return out;
  }
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)addWithOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkAdditionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, columns_) autorelease];
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(out->blocks_))->size_; ++blockIndex) {
    IOSDoubleArray *outBlock = IOSObjectArray_Get(out->blocks_, blockIndex);
    IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
    IOSDoubleArray *mBlock = IOSObjectArray_Get(((OrgApacheCommonsMathLinearBlockRealMatrix *) nil_chk(m))->blocks_, blockIndex);
    for (jint k = 0; k < ((IOSDoubleArray *) nil_chk(outBlock))->size_; ++k) {
      *IOSDoubleArray_GetRef(outBlock, k) = IOSDoubleArray_Get(nil_chk(tBlock), k) + IOSDoubleArray_Get(nil_chk(mBlock), k);
    }
  }
  return out;
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)subtractWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self subtractWithOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearBlockRealMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    OrgApacheCommonsMathLinearMatrixUtils_checkSubtractionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
    OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, columns_) autorelease];
    jint blockIndex = 0;
    for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
      for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
        IOSDoubleArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
        IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
        jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
        jint k = 0;
        for (jint p = pStart; p < pEnd; ++p) {
          for (jint q = qStart; q < qEnd; ++q) {
            *IOSDoubleArray_GetRef(nil_chk(outBlock), k) = IOSDoubleArray_Get(nil_chk(tBlock), k) - [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) getEntryWithInt:p withInt:q];
            ++k;
          }
        }
        ++blockIndex;
      }
    }
    return out;
  }
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)subtractWithOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubtractionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, columns_) autorelease];
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(out->blocks_))->size_; ++blockIndex) {
    IOSDoubleArray *outBlock = IOSObjectArray_Get(out->blocks_, blockIndex);
    IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
    IOSDoubleArray *mBlock = IOSObjectArray_Get(((OrgApacheCommonsMathLinearBlockRealMatrix *) nil_chk(m))->blocks_, blockIndex);
    for (jint k = 0; k < ((IOSDoubleArray *) nil_chk(outBlock))->size_; ++k) {
      *IOSDoubleArray_GetRef(outBlock, k) = IOSDoubleArray_Get(nil_chk(tBlock), k) - IOSDoubleArray_Get(nil_chk(mBlock), k);
    }
  }
  return out;
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)scalarAddWithDouble:(jdouble)d {
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, columns_) autorelease];
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(out->blocks_))->size_; ++blockIndex) {
    IOSDoubleArray *outBlock = IOSObjectArray_Get(out->blocks_, blockIndex);
    IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
    for (jint k = 0; k < ((IOSDoubleArray *) nil_chk(outBlock))->size_; ++k) {
      *IOSDoubleArray_GetRef(outBlock, k) = IOSDoubleArray_Get(nil_chk(tBlock), k) + d;
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)scalarMultiplyWithDouble:(jdouble)d {
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, columns_) autorelease];
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(out->blocks_))->size_; ++blockIndex) {
    IOSDoubleArray *outBlock = IOSObjectArray_Get(out->blocks_, blockIndex);
    IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
    for (jint k = 0; k < ((IOSDoubleArray *) nil_chk(outBlock))->size_; ++k) {
      *IOSDoubleArray_GetRef(outBlock, k) = IOSDoubleArray_Get(nil_chk(tBlock), k) * d;
    }
  }
  return out;
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)multiplyWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self multiplyWithOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearBlockRealMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    OrgApacheCommonsMathLinearMatrixUtils_checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
    OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) getColumnDimension]) autorelease];
    jint blockIndex = 0;
    for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
      jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
      for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, [m getColumnDimension]);
        IOSDoubleArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
        for (jint kBlock = 0; kBlock < blockColumns_; ++kBlock) {
          jint kWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, kBlock);
          IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + kBlock);
          jint rStart = kBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
          jint k = 0;
          for (jint p = pStart; p < pEnd; ++p) {
            jint lStart = (p - pStart) * kWidth;
            jint lEnd = lStart + kWidth;
            for (jint q = qStart; q < qEnd; ++q) {
              jdouble sum = 0;
              jint r = rStart;
              for (jint l = lStart; l < lEnd; ++l) {
                sum += IOSDoubleArray_Get(nil_chk(tBlock), l) * [m getEntryWithInt:r withInt:q];
                ++r;
              }
              *IOSDoubleArray_GetRef(nil_chk(outBlock), k) += sum;
              ++k;
            }
          }
        }
        ++blockIndex;
      }
    }
    return out;
  }
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)multiplyWithOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, ((OrgApacheCommonsMathLinearBlockRealMatrix *) nil_chk(m))->columns_) autorelease];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
    for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(out, jBlock);
      jint jWidth2 = jWidth + jWidth;
      jint jWidth3 = jWidth2 + jWidth;
      jint jWidth4 = jWidth3 + jWidth;
      IOSDoubleArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
      for (jint kBlock = 0; kBlock < blockColumns_; ++kBlock) {
        jint kWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, kBlock);
        IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + kBlock);
        IOSDoubleArray *mBlock = IOSObjectArray_Get(m->blocks_, kBlock * m->blockColumns_ + jBlock);
        jint k = 0;
        for (jint p = pStart; p < pEnd; ++p) {
          jint lStart = (p - pStart) * kWidth;
          jint lEnd = lStart + kWidth;
          for (jint nStart = 0; nStart < jWidth; ++nStart) {
            jdouble sum = 0;
            jint l = lStart;
            jint n = nStart;
            while (l < lEnd - 3) {
              sum += IOSDoubleArray_Get(nil_chk(tBlock), l) * IOSDoubleArray_Get(nil_chk(mBlock), n) + IOSDoubleArray_Get(tBlock, l + 1) * IOSDoubleArray_Get(mBlock, n + jWidth) + IOSDoubleArray_Get(tBlock, l + 2) * IOSDoubleArray_Get(mBlock, n + jWidth2) + IOSDoubleArray_Get(tBlock, l + 3) * IOSDoubleArray_Get(mBlock, n + jWidth3);
              l += 4;
              n += jWidth4;
            }
            while (l < lEnd) {
              sum += IOSDoubleArray_Get(nil_chk(tBlock), l++) * IOSDoubleArray_Get(nil_chk(mBlock), n);
              n += jWidth;
            }
            *IOSDoubleArray_GetRef(nil_chk(outBlock), k) += sum;
            ++k;
          }
        }
      }
      ++blockIndex;
    }
  }
  return out;
}

- (IOSObjectArray *)getData {
  IOSObjectArray *data = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ [self getRowDimension], [self getColumnDimension] }];
  jint lastColumns = columns_ - (blockColumns_ - 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
    jint regularPos = 0;
    jint lastPos = 0;
    for (jint p = pStart; p < pEnd; ++p) {
      IOSDoubleArray *dataP = IOSObjectArray_Get(data, p);
      jint blockIndex = iBlock * blockColumns_;
      jint dataPos = 0;
      for (jint jBlock = 0; jBlock < blockColumns_ - 1; ++jBlock) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(blocks_), blockIndex++), regularPos, dataP, dataPos, OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE);
        dataPos += OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(blocks_), blockIndex), lastPos, dataP, dataPos, lastColumns);
      regularPos += OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      lastPos += lastColumns;
    }
  }
  return data;
}

- (jdouble)getNorm {
  IOSDoubleArray *colSums = [IOSDoubleArray arrayWithLength:OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE];
  jdouble maxColSum = 0;
  for (jint jBlock = 0; jBlock < blockColumns_; jBlock++) {
    jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
    JavaUtilArrays_fillWithDoubleArray_withInt_withInt_withDouble_(colSums, 0, jWidth, 0.0);
    for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
      jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, iBlock);
      IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      for (jint j = 0; j < jWidth; ++j) {
        jdouble sum = 0;
        for (jint i = 0; i < iHeight; ++i) {
          sum += OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(block), i * jWidth + j));
        }
        *IOSDoubleArray_GetRef(colSums, j) += sum;
      }
    }
    for (jint j = 0; j < jWidth; ++j) {
      maxColSum = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(maxColSum, IOSDoubleArray_Get(colSums, j));
    }
  }
  return maxColSum;
}

- (jdouble)getFrobeniusNorm {
  jdouble sum2 = 0;
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(blocks_))->size_; ++blockIndex) {
    {
      IOSDoubleArray *a__ = IOSObjectArray_Get(blocks_, blockIndex);
      jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
      jdouble const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jdouble entry_ = *b__++;
        sum2 += entry_ * entry_;
      }
    }
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(sum2);
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)getSubMatrixWithInt:(jint)startRow
                                                           withInt:(jint)endRow
                                                           withInt:(jint)startColumn
                                                           withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(endRow - startRow + 1, endColumn - startColumn + 1) autorelease];
  jint blockStartRow = startRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint rowsShift = startRow % OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint blockStartColumn = startColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint columnsShift = startColumn % OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint pBlock = blockStartRow;
  for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(out, iBlock);
    jint qBlock = blockStartColumn;
    for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(out, jBlock);
      jint outIndex = iBlock * out->blockColumns_ + jBlock;
      IOSDoubleArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), outIndex);
      jint index = pBlock * blockColumns_ + qBlock;
      jint width = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, qBlock);
      jint heightExcess = iHeight + rowsShift - OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint widthExcess = jWidth + columnsShift - OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      if (heightExcess > 0) {
        if (widthExcess > 0) {
          jint width2 = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, qBlock + 1);
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index), width, rowsShift, OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columnsShift, OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, outBlock, jWidth, 0, 0);
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + 1), width2, rowsShift, OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 0, widthExcess, outBlock, jWidth, 0, jWidth - widthExcess);
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + blockColumns_), width, 0, heightExcess, columnsShift, OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, outBlock, jWidth, iHeight - heightExcess, 0);
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + blockColumns_ + 1), width2, 0, heightExcess, 0, widthExcess, outBlock, jWidth, iHeight - heightExcess, jWidth - widthExcess);
        }
        else {
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index), width, rowsShift, OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columnsShift, jWidth + columnsShift, outBlock, jWidth, 0, 0);
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + blockColumns_), width, 0, heightExcess, columnsShift, jWidth + columnsShift, outBlock, jWidth, iHeight - heightExcess, 0);
        }
      }
      else {
        if (widthExcess > 0) {
          jint width2 = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, qBlock + 1);
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index), width, rowsShift, iHeight + rowsShift, columnsShift, OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, outBlock, jWidth, 0, 0);
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + 1), width2, rowsShift, iHeight + rowsShift, 0, widthExcess, outBlock, jWidth, 0, jWidth - widthExcess);
        }
        else {
          OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index), width, rowsShift, iHeight + rowsShift, columnsShift, jWidth + columnsShift, outBlock, jWidth, 0, 0);
        }
      }
      ++qBlock;
    }
    ++pBlock;
  }
  return out;
}

- (void)copyBlockPartWithDoubleArray:(IOSDoubleArray *)srcBlock
                             withInt:(jint)srcWidth
                             withInt:(jint)srcStartRow
                             withInt:(jint)srcEndRow
                             withInt:(jint)srcStartColumn
                             withInt:(jint)srcEndColumn
                     withDoubleArray:(IOSDoubleArray *)dstBlock
                             withInt:(jint)dstWidth
                             withInt:(jint)dstStartRow
                             withInt:(jint)dstStartColumn {
  OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(self, srcBlock, srcWidth, srcStartRow, srcEndRow, srcStartColumn, srcEndColumn, dstBlock, dstWidth, dstStartRow, dstStartColumn);
}

- (void)setSubMatrixWithDoubleArray2:(IOSObjectArray *)subMatrix
                             withInt:(jint)row
                             withInt:(jint)column {
  jint refLength = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(subMatrix), 0)))->size_;
  if (refLength < 1) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jint endRow = row + subMatrix->size_ - 1;
  jint endColumn = column + refLength - 1;
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, row, endRow, column, endColumn);
  {
    IOSObjectArray *a__ = subMatrix;
    IOSDoubleArray * const *b__ = a__->buffer_;
    IOSDoubleArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSDoubleArray *subRow = *b__++;
      if (((IOSDoubleArray *) nil_chk(subRow))->size_ != refLength) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(refLength), JavaLangInteger_valueOfWithInt_(subRow->size_) } count:2 type:NSObject_class_()]);
      }
    }
  }
  jint blockStartRow = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint blockEndRow = (endRow + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint blockStartColumn = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint blockEndColumn = (endColumn + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  for (jint iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, iBlock);
    jint firstRow = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint iStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(row, firstRow);
    jint iEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(endRow + 1, firstRow + iHeight);
    for (jint jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
      jint firstColumn = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint jStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(column, firstColumn);
      jint jEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(endColumn + 1, firstColumn + jWidth);
      jint jLength = jEnd - jStart;
      IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      for (jint i = iStart; i < iEnd; ++i) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(subMatrix, i - row), jStart - column, block, (i - firstRow) * jWidth + (jStart - firstColumn), jLength);
      }
    }
  }
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)getRowMatrixWithInt:(jint)row {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(1, columns_) autorelease];
  jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint outBlockIndex = 0;
  jint outIndex = 0;
  IOSDoubleArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), outBlockIndex);
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + jBlock);
    jint available = ((IOSDoubleArray *) nil_chk(outBlock))->size_ - outIndex;
    if (jWidth > available) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, outBlock, outIndex, available);
      outBlock = IOSObjectArray_Get(out->blocks_, ++outBlockIndex);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, outBlock, 0, jWidth - available);
      outIndex = jWidth - available;
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, outBlock, outIndex, jWidth);
      outIndex += jWidth;
    }
  }
  return out;
}

- (void)setRowMatrixWithInt:(jint)row
withOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)matrix {
  @try {
    [self setRowMatrixWithInt:row withOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *) check_class_cast(matrix, [OrgApacheCommonsMathLinearBlockRealMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [super setRowMatrixWithInt:row withOrgApacheCommonsMathLinearRealMatrix:matrix];
  }
}

- (void)setRowMatrixWithInt:(jint)row
withOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *)matrix {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint nCols = [self getColumnDimension];
  if (([((OrgApacheCommonsMathLinearBlockRealMatrix *) nil_chk(matrix)) getRowDimension] != 1) || ([matrix getColumnDimension] != nCols)) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([matrix getRowDimension]), JavaLangInteger_valueOfWithInt_([matrix getColumnDimension]), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]) autorelease];
  }
  jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint mBlockIndex = 0;
  jint mIndex = 0;
  IOSDoubleArray *mBlock = IOSObjectArray_Get(nil_chk(matrix->blocks_), mBlockIndex);
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + jBlock);
    jint available = ((IOSDoubleArray *) nil_chk(mBlock))->size_ - mIndex;
    if (jWidth > available) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBlock, mIndex, block, iRow * jWidth, available);
      mBlock = IOSObjectArray_Get(matrix->blocks_, ++mBlockIndex);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBlock, 0, block, iRow * jWidth, jWidth - available);
      mIndex = jWidth - available;
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBlock, mIndex, block, iRow * jWidth, jWidth);
      mIndex += jWidth;
    }
  }
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)getColumnMatrixWithInt:(jint)column {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, 1) autorelease];
  jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
  jint outBlockIndex = 0;
  jint outIndex = 0;
  IOSDoubleArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), outBlockIndex);
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, iBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      if (outIndex >= ((IOSDoubleArray *) nil_chk(outBlock))->size_) {
        outBlock = IOSObjectArray_Get(out->blocks_, ++outBlockIndex);
        outIndex = 0;
      }
      *IOSDoubleArray_GetRef(nil_chk(outBlock), outIndex++) = IOSDoubleArray_Get(nil_chk(block), i * jWidth + jColumn);
    }
  }
  return out;
}

- (void)setColumnMatrixWithInt:(jint)column
withOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)matrix {
  @try {
    [self setColumnMatrixWithInt:column withOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *) check_class_cast(matrix, [OrgApacheCommonsMathLinearBlockRealMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [super setColumnMatrixWithInt:column withOrgApacheCommonsMathLinearRealMatrix:matrix];
  }
}

- (void)setColumnMatrixWithInt:(jint)column
withOrgApacheCommonsMathLinearBlockRealMatrix:(OrgApacheCommonsMathLinearBlockRealMatrix *)matrix {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint nRows = [self getRowDimension];
  if (([((OrgApacheCommonsMathLinearBlockRealMatrix *) nil_chk(matrix)) getRowDimension] != nRows) || ([matrix getColumnDimension] != 1)) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([matrix getRowDimension]), JavaLangInteger_valueOfWithInt_([matrix getColumnDimension]), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]) autorelease];
  }
  jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
  jint mBlockIndex = 0;
  jint mIndex = 0;
  IOSDoubleArray *mBlock = IOSObjectArray_Get(nil_chk(matrix->blocks_), mBlockIndex);
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, iBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      if (mIndex >= ((IOSDoubleArray *) nil_chk(mBlock))->size_) {
        mBlock = IOSObjectArray_Get(matrix->blocks_, ++mBlockIndex);
        mIndex = 0;
      }
      *IOSDoubleArray_GetRef(nil_chk(block), i * jWidth + jColumn) = IOSDoubleArray_Get(nil_chk(mBlock), mIndex++);
    }
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)getRowVectorWithInt:(jint)row {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  IOSDoubleArray *outData = [IOSDoubleArray arrayWithLength:columns_];
  jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint outIndex = 0;
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, outData, outIndex, jWidth);
    outIndex += jWidth;
  }
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(outData, NO) autorelease];
}

- (void)setRowVectorWithInt:(jint)row
withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)vector {
  @try {
    [self setRowWithInt:row withDoubleArray:[((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(vector, [OrgApacheCommonsMathLinearArrayRealVector class])))) getDataRef]];
  }
  @catch (JavaLangClassCastException *cce) {
    [super setRowVectorWithInt:row withOrgApacheCommonsMathLinearRealVector:vector];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)getColumnVectorWithInt:(jint)column {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  IOSDoubleArray *outData = [IOSDoubleArray arrayWithLength:rows_];
  jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
  jint outIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, iBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      *IOSDoubleArray_GetRef(outData, outIndex++) = IOSDoubleArray_Get(nil_chk(block), i * jWidth + jColumn);
    }
  }
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(outData, NO) autorelease];
}

- (void)setColumnVectorWithInt:(jint)column
withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)vector {
  @try {
    [self setColumnWithInt:column withDoubleArray:[((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(vector, [OrgApacheCommonsMathLinearArrayRealVector class])))) getDataRef]];
  }
  @catch (JavaLangClassCastException *cce) {
    [super setColumnVectorWithInt:column withOrgApacheCommonsMathLinearRealVector:vector];
  }
}

- (IOSDoubleArray *)getRowWithInt:(jint)row {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:columns_];
  jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint outIndex = 0;
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, out, outIndex, jWidth);
    outIndex += jWidth;
  }
  return out;
}

- (void)setRowWithInt:(jint)row
      withDoubleArray:(IOSDoubleArray *)array {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint nCols = [self getColumnDimension];
  if (((IOSDoubleArray *) nil_chk(array))->size_ != nCols) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(array->size_), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]) autorelease];
  }
  jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint outIndex = 0;
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, outIndex, block, iRow * jWidth, jWidth);
    outIndex += jWidth;
  }
}

- (IOSDoubleArray *)getColumnWithInt:(jint)column {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:rows_];
  jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
  jint outIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, iBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      *IOSDoubleArray_GetRef(out, outIndex++) = IOSDoubleArray_Get(nil_chk(block), i * jWidth + jColumn);
    }
  }
  return out;
}

- (void)setColumnWithInt:(jint)column
         withDoubleArray:(IOSDoubleArray *)array {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint nRows = [self getRowDimension];
  if (((IOSDoubleArray *) nil_chk(array))->size_ != nRows) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(array->size_), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]) autorelease];
  }
  jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
  jint outIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, iBlock);
    IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      *IOSDoubleArray_GetRef(nil_chk(block), i * jWidth + jColumn) = IOSDoubleArray_Get(array, outIndex++);
    }
  }
}

- (jdouble)getEntryWithInt:(jint)row
                   withInt:(jint)column {
  @try {
    jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint k = (row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE) * OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock) + (column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE);
    return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock)), k);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)setEntryWithInt:(jint)row
                withInt:(jint)column
             withDouble:(jdouble)value {
  @try {
    jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint k = (row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE) * OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock) + (column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock)), k) = value;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)addToEntryWithInt:(jint)row
                  withInt:(jint)column
               withDouble:(jdouble)increment {
  @try {
    jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint k = (row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE) * OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock) + (column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock)), k) += increment;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)multiplyEntryWithInt:(jint)row
                     withInt:(jint)column
                  withDouble:(jdouble)factor {
  @try {
    jint iBlock = row / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint jBlock = column / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint k = (row - iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE) * OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock) + (column - jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock)), k) *= factor;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (OrgApacheCommonsMathLinearBlockRealMatrix *)transpose {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  OrgApacheCommonsMathLinearBlockRealMatrix *out = [new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(nCols, nRows) autorelease];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockColumns_; ++iBlock) {
    for (jint jBlock = 0; jBlock < blockRows_; ++jBlock) {
      IOSDoubleArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
      IOSDoubleArray *tBlock = IOSObjectArray_Get(blocks_, jBlock * blockColumns_ + iBlock);
      jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
      jint k = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        jint lInc = pEnd - pStart;
        jint l = p - pStart;
        for (jint q = qStart; q < qEnd; ++q) {
          *IOSDoubleArray_GetRef(nil_chk(outBlock), k) = IOSDoubleArray_Get(nil_chk(tBlock), l);
          ++k;
          l += lInc;
        }
      }
      ++blockIndex;
    }
  }
  return out;
}

- (jint)getRowDimension {
  return rows_;
}

- (jint)getColumnDimension {
  return columns_;
}

- (IOSDoubleArray *)operateWithDoubleArray:(IOSDoubleArray *)v {
  if (((IOSDoubleArray *) nil_chk(v))->size_ != columns_) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(columns_) } count:2 type:NSObject_class_()]);
  }
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:rows_];
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
    for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
      IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
      jint k = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        jdouble sum = 0;
        jint q = qStart;
        while (q < qEnd - 3) {
          sum += IOSDoubleArray_Get(nil_chk(block), k) * IOSDoubleArray_Get(v, q) + IOSDoubleArray_Get(block, k + 1) * IOSDoubleArray_Get(v, q + 1) + IOSDoubleArray_Get(block, k + 2) * IOSDoubleArray_Get(v, q + 2) + IOSDoubleArray_Get(block, k + 3) * IOSDoubleArray_Get(v, q + 3);
          k += 4;
          q += 4;
        }
        while (q < qEnd) {
          sum += IOSDoubleArray_Get(nil_chk(block), k++) * IOSDoubleArray_Get(v, q++);
        }
        *IOSDoubleArray_GetRef(out, p) += sum;
      }
    }
  }
  return out;
}

- (IOSDoubleArray *)preMultiplyWithDoubleArray:(IOSDoubleArray *)v {
  if (((IOSDoubleArray *) nil_chk(v))->size_ != rows_) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(rows_) } count:2 type:NSObject_class_()]);
  }
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:columns_];
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
    jint jWidth2 = jWidth + jWidth;
    jint jWidth3 = jWidth2 + jWidth;
    jint jWidth4 = jWidth3 + jWidth;
    jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
    for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
      IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
      for (jint q = qStart; q < qEnd; ++q) {
        jint k = q - qStart;
        jdouble sum = 0;
        jint p = pStart;
        while (p < pEnd - 3) {
          sum += IOSDoubleArray_Get(nil_chk(block), k) * IOSDoubleArray_Get(v, p) + IOSDoubleArray_Get(block, k + jWidth) * IOSDoubleArray_Get(v, p + 1) + IOSDoubleArray_Get(block, k + jWidth2) * IOSDoubleArray_Get(v, p + 2) + IOSDoubleArray_Get(block, k + jWidth3) * IOSDoubleArray_Get(v, p + 3);
          k += jWidth4;
          p += 4;
        }
        while (p < pEnd) {
          sum += IOSDoubleArray_Get(nil_chk(block), k) * IOSDoubleArray_Get(v, p++);
          k += jWidth;
        }
        *IOSDoubleArray_GetRef(out, q) += sum;
      }
    }
  }
  return out;
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor {
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:0 withInt:rows_ - 1 withInt:0 withInt:columns_ - 1];
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
    for (jint p = pStart; p < pEnd; ++p) {
      for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
        jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
        IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
        jint k = (p - pStart) * jWidth;
        for (jint q = qStart; q < qEnd; ++q) {
          *IOSDoubleArray_GetRef(nil_chk(block), k) = [visitor visitWithInt:p withInt:q withDouble:IOSDoubleArray_Get(block, k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor {
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:0 withInt:rows_ - 1 withInt:0 withInt:columns_ - 1];
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
    for (jint p = pStart; p < pEnd; ++p) {
      for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
        jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
        IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
        jint k = (p - pStart) * jWidth;
        for (jint q = qStart; q < qEnd; ++q) {
          [visitor visitWithInt:p withInt:q withDouble:IOSDoubleArray_Get(nil_chk(block), k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor
                                                                         withInt:(jint)startRow
                                                                         withInt:(jint)endRow
                                                                         withInt:(jint)startColumn
                                                                         withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint iBlock = startRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; iBlock < 1 + endRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; ++iBlock) {
    jint p0 = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startRow, p0);
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((iBlock + 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 1 + endRow);
    for (jint p = pStart; p < pEnd; ++p) {
      for (jint jBlock = startColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; jBlock < 1 + endColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; ++jBlock) {
        jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
        jint q0 = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint qStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startColumn, q0);
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((jBlock + 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 1 + endColumn);
        IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
        jint k = (p - p0) * jWidth + qStart - q0;
        for (jint q = qStart; q < qEnd; ++q) {
          *IOSDoubleArray_GetRef(nil_chk(block), k) = [visitor visitWithInt:p withInt:q withDouble:IOSDoubleArray_Get(block, k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor
                                                                           withInt:(jint)startRow
                                                                           withInt:(jint)endRow
                                                                           withInt:(jint)startColumn
                                                                           withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint iBlock = startRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; iBlock < 1 + endRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; ++iBlock) {
    jint p0 = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startRow, p0);
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((iBlock + 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 1 + endRow);
    for (jint p = pStart; p < pEnd; ++p) {
      for (jint jBlock = startColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; jBlock < 1 + endColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; ++jBlock) {
        jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
        jint q0 = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
        jint qStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startColumn, q0);
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((jBlock + 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 1 + endColumn);
        IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
        jint k = (p - p0) * jWidth + qStart - q0;
        for (jint q = qStart; q < qEnd; ++q) {
          [visitor visitWithInt:p withInt:q withDouble:IOSDoubleArray_Get(nil_chk(block), k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (jdouble)walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor {
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:0 withInt:rows_ - 1 withInt:0 withInt:columns_ - 1];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
    for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
      IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), blockIndex);
      jint k = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        for (jint q = qStart; q < qEnd; ++q) {
          *IOSDoubleArray_GetRef(nil_chk(block), k) = [visitor visitWithInt:p withInt:q withDouble:IOSDoubleArray_Get(block, k)];
          ++k;
        }
      }
      ++blockIndex;
    }
  }
  return [visitor end];
}

- (jdouble)walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor {
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:0 withInt:rows_ - 1 withInt:0 withInt:columns_ - 1];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows_);
    for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns_);
      IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), blockIndex);
      jint k = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        for (jint q = qStart; q < qEnd; ++q) {
          [visitor visitWithInt:p withInt:q withDouble:IOSDoubleArray_Get(nil_chk(block), k)];
          ++k;
        }
      }
      ++blockIndex;
    }
  }
  return [visitor end];
}

- (jdouble)walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor
                                                                               withInt:(jint)startRow
                                                                               withInt:(jint)endRow
                                                                               withInt:(jint)startColumn
                                                                               withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint iBlock = startRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; iBlock < 1 + endRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; ++iBlock) {
    jint p0 = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startRow, p0);
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((iBlock + 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 1 + endRow);
    for (jint jBlock = startColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; jBlock < 1 + endColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
      jint q0 = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint qStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startColumn, q0);
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((jBlock + 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 1 + endColumn);
      IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      for (jint p = pStart; p < pEnd; ++p) {
        jint k = (p - p0) * jWidth + qStart - q0;
        for (jint q = qStart; q < qEnd; ++q) {
          *IOSDoubleArray_GetRef(nil_chk(block), k) = [visitor visitWithInt:p withInt:q withDouble:IOSDoubleArray_Get(block, k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (jdouble)walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor
                                                                                 withInt:(jint)startRow
                                                                                 withInt:(jint)endRow
                                                                                 withInt:(jint)startColumn
                                                                                 withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint iBlock = startRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; iBlock < 1 + endRow / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; ++iBlock) {
    jint p0 = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startRow, p0);
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((iBlock + 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 1 + endRow);
    for (jint jBlock = startColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; jBlock < 1 + endColumn / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock);
      jint q0 = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint qStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startColumn, q0);
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((jBlock + 1) * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, 1 + endColumn);
      IOSDoubleArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      for (jint p = pStart; p < pEnd; ++p) {
        jint k = (p - p0) * jWidth + qStart - q0;
        for (jint q = qStart; q < qEnd; ++q) {
          [visitor visitWithInt:p withInt:q withDouble:IOSDoubleArray_Get(nil_chk(block), k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (jint)blockHeightWithInt:(jint)blockRow {
  return OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, blockRow);
}

- (jint)blockWidthWithInt:(jint)blockColumn {
  return OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, blockColumn);
}

- (void)dealloc {
  RELEASE_(blocks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "BlockRealMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithDoubleArray2:", "BlockRealMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithInt:withInt:withDoubleArray2:withBoolean:", "BlockRealMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "toBlocksLayoutWithDoubleArray2:", "toBlocksLayout", "[[D", 0x9, "Ljava.lang.IllegalArgumentException;", NULL },
    { "createBlocksLayoutWithInt:withInt:", "createBlocksLayout", "[[D", 0x9, NULL, NULL },
    { "createMatrixWithInt:withInt:", "createMatrix", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearRealMatrix:", "add", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearBlockRealMatrix:", "add", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearRealMatrix:", "subtract", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearBlockRealMatrix:", "subtract", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "scalarAddWithDouble:", "scalarAdd", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "scalarMultiplyWithDouble:", "scalarMultiply", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearRealMatrix:", "multiply", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearBlockRealMatrix:", "multiply", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[[D", 0x1, NULL, NULL },
    { "getNorm", NULL, "D", 0x1, NULL, NULL },
    { "getFrobeniusNorm", NULL, "D", 0x1, NULL, NULL },
    { "getSubMatrixWithInt:withInt:withInt:withInt:", "getSubMatrix", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "copyBlockPartWithDoubleArray:withInt:withInt:withInt:withInt:withInt:withDoubleArray:withInt:withInt:withInt:", "copyBlockPart", "V", 0x2, NULL, NULL },
    { "setSubMatrixWithDoubleArray2:withInt:withInt:", "setSubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowMatrixWithInt:", "getRowMatrix", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowMatrixWithInt:withOrgApacheCommonsMathLinearRealMatrix:", "setRowMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "setRowMatrixWithInt:withOrgApacheCommonsMathLinearBlockRealMatrix:", "setRowMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnMatrixWithInt:", "getColumnMatrix", "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnMatrixWithInt:withOrgApacheCommonsMathLinearRealMatrix:", "setColumnMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "setColumnMatrixWithInt:withOrgApacheCommonsMathLinearBlockRealMatrix:", "setColumnMatrix", "V", 0x0, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getRowVectorWithInt:", "getRowVector", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowVectorWithInt:withOrgApacheCommonsMathLinearRealVector:", "setRowVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnVectorWithInt:", "getColumnVector", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnVectorWithInt:withOrgApacheCommonsMathLinearRealVector:", "setColumnVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getRowWithInt:", "getRow", "[D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowWithInt:withDoubleArray:", "setRow", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnWithInt:", "getColumn", "[D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnWithInt:withDoubleArray:", "setColumn", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getEntryWithInt:withInt:", "getEntry", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setEntryWithInt:withInt:withDouble:", "setEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "addToEntryWithInt:withInt:withDouble:", "addToEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "multiplyEntryWithInt:withInt:withDouble:", "multiplyEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "transpose", NULL, "Lorg.apache.commons.math.linear.BlockRealMatrix;", 0x1, NULL, NULL },
    { "getRowDimension", NULL, "I", 0x1, NULL, NULL },
    { "getColumnDimension", NULL, "I", 0x1, NULL, NULL },
    { "operateWithDoubleArray:", "operate", "[D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithDoubleArray:", "preMultiply", "[D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:", "walkInOptimizedOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:", "walkInOptimizedOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInOptimizedOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInOptimizedOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "blockHeightWithInt:", "blockHeight", "I", 0x2, NULL, NULL },
    { "blockWidthWithInt:", "blockWidth", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearBlockRealMatrix_serialVersionUID },
    { "blocks_", NULL, 0x12, "[[D", NULL, NULL,  },
    { "rows_", NULL, 0x12, "I", NULL, NULL,  },
    { "columns_", NULL, 0x12, "I", NULL, NULL,  },
    { "blockRows_", NULL, 0x12, "I", NULL, NULL,  },
    { "blockColumns_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearBlockRealMatrix = { 2, "BlockRealMatrix", "org.apache.commons.math.linear", NULL, 0x1, 54, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearBlockRealMatrix;
}

@end

void OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(OrgApacheCommonsMathLinearBlockRealMatrix *self, jint rows, jint columns) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_initWithInt_withInt_(self, rows, columns);
  self->rows_ = rows;
  self->columns_ = columns;
  self->blockRows_ = (rows + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  self->blockColumns_ = (columns + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  OrgApacheCommonsMathLinearBlockRealMatrix_set_blocks_(self, OrgApacheCommonsMathLinearBlockRealMatrix_createBlocksLayoutWithInt_withInt_(rows, columns));
}

OrgApacheCommonsMathLinearBlockRealMatrix *new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(jint rows, jint columns) {
  OrgApacheCommonsMathLinearBlockRealMatrix *self = [OrgApacheCommonsMathLinearBlockRealMatrix alloc];
  OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(self, rows, columns);
  return self;
}

void OrgApacheCommonsMathLinearBlockRealMatrix_initWithDoubleArray2_(OrgApacheCommonsMathLinearBlockRealMatrix *self, IOSObjectArray *rawData) {
  OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_withDoubleArray2_withBoolean_(self, ((IOSObjectArray *) nil_chk(rawData))->size_, ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(rawData, 0)))->size_, OrgApacheCommonsMathLinearBlockRealMatrix_toBlocksLayoutWithDoubleArray2_(rawData), NO);
}

OrgApacheCommonsMathLinearBlockRealMatrix *new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithDoubleArray2_(IOSObjectArray *rawData) {
  OrgApacheCommonsMathLinearBlockRealMatrix *self = [OrgApacheCommonsMathLinearBlockRealMatrix alloc];
  OrgApacheCommonsMathLinearBlockRealMatrix_initWithDoubleArray2_(self, rawData);
  return self;
}

void OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_withDoubleArray2_withBoolean_(OrgApacheCommonsMathLinearBlockRealMatrix *self, jint rows, jint columns, IOSObjectArray *blockData, jboolean copyArray) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_initWithInt_withInt_(self, rows, columns);
  self->rows_ = rows;
  self->columns_ = columns;
  self->blockRows_ = (rows + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  self->blockColumns_ = (columns + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  if (copyArray) {
    OrgApacheCommonsMathLinearBlockRealMatrix_setAndConsume_blocks_(self, [IOSObjectArray newArrayWithLength:self->blockRows_ * self->blockColumns_ type:IOSClass_doubleArray(1)]);
  }
  else {
    OrgApacheCommonsMathLinearBlockRealMatrix_set_blocks_(self, blockData);
  }
  jint index = 0;
  for (jint iBlock = 0; iBlock < self->blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(self, iBlock);
    for (jint jBlock = 0; jBlock < self->blockColumns_; ++jBlock, ++index) {
      if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(blockData), index)))->size_ != iHeight * OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock)) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_WRONG_BLOCK_LENGTH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(blockData, index)))->size_), JavaLangInteger_valueOfWithInt_(iHeight * OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(self, jBlock)) } count:2 type:NSObject_class_()]);
      }
      if (copyArray) {
        IOSObjectArray_Set(nil_chk(self->blocks_), index, [((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(blockData, index))) clone]);
      }
    }
  }
}

OrgApacheCommonsMathLinearBlockRealMatrix *new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_withDoubleArray2_withBoolean_(jint rows, jint columns, IOSObjectArray *blockData, jboolean copyArray) {
  OrgApacheCommonsMathLinearBlockRealMatrix *self = [OrgApacheCommonsMathLinearBlockRealMatrix alloc];
  OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_withDoubleArray2_withBoolean_(self, rows, columns, blockData, copyArray);
  return self;
}

IOSObjectArray *OrgApacheCommonsMathLinearBlockRealMatrix_toBlocksLayoutWithDoubleArray2_(IOSObjectArray *rawData) {
  OrgApacheCommonsMathLinearBlockRealMatrix_initialize();
  jint rows = ((IOSObjectArray *) nil_chk(rawData))->size_;
  jint columns = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(rawData, 0)))->size_;
  jint blockRows = (rows + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint blockColumns = (columns + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  for (jint i = 0; i < rawData->size_; ++i) {
    jint length = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(rawData, i)))->size_;
    if (length != columns) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(columns), JavaLangInteger_valueOfWithInt_(length) } count:2 type:NSObject_class_()]);
    }
  }
  IOSObjectArray *blocks = [IOSObjectArray arrayWithLength:blockRows * blockColumns type:IOSClass_doubleArray(1)];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows);
    jint iHeight = pEnd - pStart;
    for (jint jBlock = 0; jBlock < blockColumns; ++jBlock) {
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns);
      jint jWidth = qEnd - qStart;
      IOSDoubleArray *block = [IOSDoubleArray arrayWithLength:iHeight * jWidth];
      IOSObjectArray_Set(blocks, blockIndex, block);
      jint index = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(rawData, p), qStart, block, index, jWidth);
        index += jWidth;
      }
      ++blockIndex;
    }
  }
  return blocks;
}

IOSObjectArray *OrgApacheCommonsMathLinearBlockRealMatrix_createBlocksLayoutWithInt_withInt_(jint rows, jint columns) {
  OrgApacheCommonsMathLinearBlockRealMatrix_initialize();
  jint blockRows = (rows + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  jint blockColumns = (columns + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
  IOSObjectArray *blocks = [IOSObjectArray arrayWithLength:blockRows * blockColumns type:IOSClass_doubleArray(1)];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, rows);
    jint iHeight = pEnd - pStart;
    for (jint jBlock = 0; jBlock < blockColumns; ++jBlock) {
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE, columns);
      jint jWidth = qEnd - qStart;
      IOSObjectArray_SetAndConsume(blocks, blockIndex, [IOSDoubleArray newArrayWithLength:iHeight * jWidth]);
      ++blockIndex;
    }
  }
  return blocks;
}

void OrgApacheCommonsMathLinearBlockRealMatrix_copyBlockPartWithDoubleArray_withInt_withInt_withInt_withInt_withInt_withDoubleArray_withInt_withInt_withInt_(OrgApacheCommonsMathLinearBlockRealMatrix *self, IOSDoubleArray *srcBlock, jint srcWidth, jint srcStartRow, jint srcEndRow, jint srcStartColumn, jint srcEndColumn, IOSDoubleArray *dstBlock, jint dstWidth, jint dstStartRow, jint dstStartColumn) {
  jint length = srcEndColumn - srcStartColumn;
  jint srcPos = srcStartRow * srcWidth + srcStartColumn;
  jint dstPos = dstStartRow * dstWidth + dstStartColumn;
  for (jint srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcBlock, srcPos, dstBlock, dstPos, length);
    srcPos += srcWidth;
    dstPos += dstWidth;
  }
}

jint OrgApacheCommonsMathLinearBlockRealMatrix_blockHeightWithInt_(OrgApacheCommonsMathLinearBlockRealMatrix *self, jint blockRow) {
  return (blockRow == self->blockRows_ - 1) ? self->rows_ - blockRow * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE : OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
}

jint OrgApacheCommonsMathLinearBlockRealMatrix_blockWidthWithInt_(OrgApacheCommonsMathLinearBlockRealMatrix *self, jint blockColumn) {
  return (blockColumn == self->blockColumns_ - 1) ? self->columns_ - blockColumn * OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE : OrgApacheCommonsMathLinearBlockRealMatrix_BLOCK_SIZE;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearBlockRealMatrix)
