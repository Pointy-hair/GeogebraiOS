//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/linear/OpenMapRealMatrix.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/linear/AbstractRealMatrix.h"
#include "org/apache/commons/math/linear/BlockRealMatrix.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/OpenMapRealMatrix.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/util/OpenIntToDoubleHashMap.h"

#define OrgApacheCommonsMathLinearOpenMapRealMatrix_serialVersionUID -5962461716457143437LL

@interface OrgApacheCommonsMathLinearOpenMapRealMatrix () {
 @public
  jint rows_;
  jint columns_;
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *entries_;
}

- (jint)computeKeyWithInt:(jint)row
                  withInt:(jint)column;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearOpenMapRealMatrix, entries_, OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearOpenMapRealMatrix, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(OrgApacheCommonsMathLinearOpenMapRealMatrix *self, jint row, jint column);

@implementation OrgApacheCommonsMathLinearOpenMapRealMatrix

- (instancetype)initWithInt:(jint)rowDimension
                    withInt:(jint)columnDimension {
  OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithInt_withInt_(self, rowDimension, columnDimension);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearOpenMapRealMatrix:(OrgApacheCommonsMathLinearOpenMapRealMatrix *)matrix {
  OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithOrgApacheCommonsMathLinearOpenMapRealMatrix_(self, matrix);
  return self;
}

- (OrgApacheCommonsMathLinearOpenMapRealMatrix *)copy__ {
  return new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithOrgApacheCommonsMathLinearOpenMapRealMatrix_(self);
}

- (OrgApacheCommonsMathLinearOpenMapRealMatrix *)createMatrixWithInt:(jint)rowDimension
                                                             withInt:(jint)columnDimension {
  return new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithInt_withInt_(rowDimension, columnDimension);
}

- (jint)getColumnDimension {
  return columns_;
}

- (OrgApacheCommonsMathLinearOpenMapRealMatrix *)addWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self addWithOrgApacheCommonsMathLinearOpenMapRealMatrix:(OrgApacheCommonsMathLinearOpenMapRealMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearOpenMapRealMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return (OrgApacheCommonsMathLinearOpenMapRealMatrix *) check_class_cast([super addWithOrgApacheCommonsMathLinearRealMatrix:m], [OrgApacheCommonsMathLinearOpenMapRealMatrix class]);
  }
}

- (OrgApacheCommonsMathLinearOpenMapRealMatrix *)addWithOrgApacheCommonsMathLinearOpenMapRealMatrix:(OrgApacheCommonsMathLinearOpenMapRealMatrix *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkAdditionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  OrgApacheCommonsMathLinearOpenMapRealMatrix *out = new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithOrgApacheCommonsMathLinearOpenMapRealMatrix_(self);
  for (OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iterator = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(((OrgApacheCommonsMathLinearOpenMapRealMatrix *) nil_chk(m))->entries_)) iterator]; [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iterator)) hasNext]; ) {
    [iterator advance];
    jint row = [iterator key] / columns_;
    jint col = [iterator key] - row * columns_;
    [out setEntryWithInt:row withInt:col withDouble:[self getEntryWithInt:row withInt:col] + [iterator value]];
  }
  return out;
}

- (OrgApacheCommonsMathLinearOpenMapRealMatrix *)subtractWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self subtractWithOrgApacheCommonsMathLinearOpenMapRealMatrix:(OrgApacheCommonsMathLinearOpenMapRealMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearOpenMapRealMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return (OrgApacheCommonsMathLinearOpenMapRealMatrix *) check_class_cast([super subtractWithOrgApacheCommonsMathLinearRealMatrix:m], [OrgApacheCommonsMathLinearOpenMapRealMatrix class]);
  }
}

- (OrgApacheCommonsMathLinearOpenMapRealMatrix *)subtractWithOrgApacheCommonsMathLinearOpenMapRealMatrix:(OrgApacheCommonsMathLinearOpenMapRealMatrix *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkAdditionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  OrgApacheCommonsMathLinearOpenMapRealMatrix *out = new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithOrgApacheCommonsMathLinearOpenMapRealMatrix_(self);
  for (OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iterator = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(((OrgApacheCommonsMathLinearOpenMapRealMatrix *) nil_chk(m))->entries_)) iterator]; [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iterator)) hasNext]; ) {
    [iterator advance];
    jint row = [iterator key] / columns_;
    jint col = [iterator key] - row * columns_;
    [out setEntryWithInt:row withInt:col withDouble:[self getEntryWithInt:row withInt:col] - [iterator value]];
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)multiplyWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self multiplyWithOrgApacheCommonsMathLinearOpenMapRealMatrix:(OrgApacheCommonsMathLinearOpenMapRealMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearOpenMapRealMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    OrgApacheCommonsMathLinearMatrixUtils_checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
    jint outCols = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(m)) getColumnDimension];
    OrgApacheCommonsMathLinearBlockRealMatrix *out = new_OrgApacheCommonsMathLinearBlockRealMatrix_initWithInt_withInt_(rows_, outCols);
    for (OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iterator = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator]; [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iterator)) hasNext]; ) {
      [iterator advance];
      jdouble value = [iterator value];
      jint key = [iterator key];
      jint i = key / columns_;
      jint k = key % columns_;
      for (jint j = 0; j < outCols; ++j) {
        [out addToEntryWithInt:i withInt:j withDouble:value * [m getEntryWithInt:k withInt:j]];
      }
    }
    return out;
  }
}

- (OrgApacheCommonsMathLinearOpenMapRealMatrix *)multiplyWithOrgApacheCommonsMathLinearOpenMapRealMatrix:(OrgApacheCommonsMathLinearOpenMapRealMatrix *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint outCols = [((OrgApacheCommonsMathLinearOpenMapRealMatrix *) nil_chk(m)) getColumnDimension];
  OrgApacheCommonsMathLinearOpenMapRealMatrix *out = new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithInt_withInt_(rows_, outCols);
  for (OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iterator = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator]; [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iterator)) hasNext]; ) {
    [iterator advance];
    jdouble value = [iterator value];
    jint key = [iterator key];
    jint i = key / columns_;
    jint k = key % columns_;
    for (jint j = 0; j < outCols; ++j) {
      jint rightKey = OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(m, k, j);
      if ([m->entries_ containsKeyWithInt:rightKey]) {
        jint outKey = OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(out, i, j);
        jdouble outValue = [out->entries_ getWithInt:outKey] + value * [m->entries_ getWithInt:rightKey];
        if (outValue == 0.0) {
          [out->entries_ removeWithInt:outKey];
        }
        else {
          [out->entries_ putWithInt:outKey withDouble:outValue];
        }
      }
    }
  }
  return out;
}

- (jdouble)getEntryWithInt:(jint)row
                   withInt:(jint)column {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  return [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) getWithInt:OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(self, row, column)];
}

- (jint)getRowDimension {
  return rows_;
}

- (void)setEntryWithInt:(jint)row
                withInt:(jint)column
             withDouble:(jdouble)value {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  if (value == 0.0) {
    [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) removeWithInt:OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(self, row, column)];
  }
  else {
    [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) putWithInt:OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(self, row, column) withDouble:value];
  }
}

- (void)addToEntryWithInt:(jint)row
                  withInt:(jint)column
               withDouble:(jdouble)increment {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint key = OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(self, row, column);
  jdouble value = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) getWithInt:key] + increment;
  if (value == 0.0) {
    [entries_ removeWithInt:key];
  }
  else {
    [entries_ putWithInt:key withDouble:value];
  }
}

- (void)multiplyEntryWithInt:(jint)row
                     withInt:(jint)column
                  withDouble:(jdouble)factor {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint key = OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(self, row, column);
  jdouble value = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) getWithInt:key] * factor;
  if (value == 0.0) {
    [entries_ removeWithInt:key];
  }
  else {
    [entries_ putWithInt:key withDouble:value];
  }
}

- (jint)computeKeyWithInt:(jint)row
                  withInt:(jint)column {
  return OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(self, row, column);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "OpenMapRealMatrix", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearOpenMapRealMatrix:", "OpenMapRealMatrix", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.OpenMapRealMatrix;", 0x1, NULL, NULL },
    { "createMatrixWithInt:withInt:", "createMatrix", "Lorg.apache.commons.math.linear.OpenMapRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getColumnDimension", NULL, "I", 0x1, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearRealMatrix:", "add", "Lorg.apache.commons.math.linear.OpenMapRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearOpenMapRealMatrix:", "add", "Lorg.apache.commons.math.linear.OpenMapRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearRealMatrix:", "subtract", "Lorg.apache.commons.math.linear.OpenMapRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearOpenMapRealMatrix:", "subtract", "Lorg.apache.commons.math.linear.OpenMapRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearRealMatrix:", "multiply", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearOpenMapRealMatrix:", "multiply", "Lorg.apache.commons.math.linear.OpenMapRealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getEntryWithInt:withInt:", "getEntry", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowDimension", NULL, "I", 0x1, NULL, NULL },
    { "setEntryWithInt:withInt:withDouble:", "setEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "addToEntryWithInt:withInt:withDouble:", "addToEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "multiplyEntryWithInt:withInt:withDouble:", "multiplyEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "computeKeyWithInt:withInt:", "computeKey", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearOpenMapRealMatrix_serialVersionUID },
    { "rows_", NULL, 0x12, "I", NULL, NULL,  },
    { "columns_", NULL, 0x12, "I", NULL, NULL,  },
    { "entries_", NULL, 0x12, "Lorg.apache.commons.math.util.OpenIntToDoubleHashMap;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearOpenMapRealMatrix = { 2, "OpenMapRealMatrix", "org.apache.commons.math.linear", NULL, 0x1, 17, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearOpenMapRealMatrix;
}

@end

void OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithInt_withInt_(OrgApacheCommonsMathLinearOpenMapRealMatrix *self, jint rowDimension, jint columnDimension) {
  (void) OrgApacheCommonsMathLinearAbstractRealMatrix_initWithInt_withInt_(self, rowDimension, columnDimension);
  self->rows_ = rowDimension;
  self->columns_ = columnDimension;
  self->entries_ = new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithDouble_(0.0);
}

OrgApacheCommonsMathLinearOpenMapRealMatrix *new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithInt_withInt_(jint rowDimension, jint columnDimension) {
  OrgApacheCommonsMathLinearOpenMapRealMatrix *self = [OrgApacheCommonsMathLinearOpenMapRealMatrix alloc];
  OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithInt_withInt_(self, rowDimension, columnDimension);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithOrgApacheCommonsMathLinearOpenMapRealMatrix_(OrgApacheCommonsMathLinearOpenMapRealMatrix *self, OrgApacheCommonsMathLinearOpenMapRealMatrix *matrix) {
  (void) OrgApacheCommonsMathLinearAbstractRealMatrix_init(self);
  self->rows_ = ((OrgApacheCommonsMathLinearOpenMapRealMatrix *) nil_chk(matrix))->rows_;
  self->columns_ = matrix->columns_;
  self->entries_ = new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_(matrix->entries_);
}

OrgApacheCommonsMathLinearOpenMapRealMatrix *new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithOrgApacheCommonsMathLinearOpenMapRealMatrix_(OrgApacheCommonsMathLinearOpenMapRealMatrix *matrix) {
  OrgApacheCommonsMathLinearOpenMapRealMatrix *self = [OrgApacheCommonsMathLinearOpenMapRealMatrix alloc];
  OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithOrgApacheCommonsMathLinearOpenMapRealMatrix_(self, matrix);
  return self;
}

jint OrgApacheCommonsMathLinearOpenMapRealMatrix_computeKeyWithInt_withInt_(OrgApacheCommonsMathLinearOpenMapRealMatrix *self, jint row, jint column) {
  return row * self->columns_ + column;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearOpenMapRealMatrix)
