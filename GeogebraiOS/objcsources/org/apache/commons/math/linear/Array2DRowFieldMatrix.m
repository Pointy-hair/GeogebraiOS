//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/linear/Array2DRowFieldMatrix.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "org/apache/commons/math/Field.h"
#include "org/apache/commons/math/FieldElement.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractFieldMatrix.h"
#include "org/apache/commons/math/linear/Array2DRowFieldMatrix.h"
#include "org/apache/commons/math/linear/FieldMatrix.h"
#include "org/apache/commons/math/linear/FieldMatrixChangingVisitor.h"
#include "org/apache/commons/math/linear/FieldMatrixPreservingVisitor.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixVisitorException.h"

#define OrgApacheCommonsMathLinearArray2DRowFieldMatrix_serialVersionUID 7260756672015356458LL

@interface OrgApacheCommonsMathLinearArray2DRowFieldMatrix ()

- (IOSObjectArray *)copyOut OBJC_METHOD_FAMILY_NONE;

- (void)copyInWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearArray2DRowFieldMatrix, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyOut(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self);

__attribute__((unused)) static void OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyInWithOrgApacheCommonsMathFieldElementArray2_(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self, IOSObjectArray *inArg);

@implementation OrgApacheCommonsMathLinearArray2DRowFieldMatrix

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                          withInt:(jint)rowDimension
                                          withInt:(jint)columnDimension {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rowDimension, columnDimension);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)d {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_(self, d);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)d
                                                   withBoolean:(jboolean)copyArray {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_withBoolean_(self, d, copyArray);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray_(self, v);
  return self;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)createMatrixWithInt:(jint)rowDimension
                                                         withInt:(jint)columnDimension {
  return new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rowDimension, columnDimension);
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)copy__ {
  return new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_withBoolean_(OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyOut(self), NO);
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)addWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  @try {
    return [self addWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearArray2DRowFieldMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return [super addWithOrgApacheCommonsMathLinearFieldMatrix:m];
  }
}

- (OrgApacheCommonsMathLinearArray2DRowFieldMatrix *)addWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *)m {
  [self checkAdditionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  IOSObjectArray *outData = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rowCount, columnCount);
  for (jint row = 0; row < rowCount; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSObjectArray *mRow = IOSObjectArray_Get(((OrgApacheCommonsMathLinearArray2DRowFieldMatrix *) nil_chk(m))->data_, row);
    IOSObjectArray *outDataRow = IOSObjectArray_Get(nil_chk(outData), row);
    for (jint col = 0; col < columnCount; col++) {
      (void) IOSObjectArray_Set(nil_chk(outDataRow), col, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) addWithId:IOSObjectArray_Get(nil_chk(mRow), col)]);
    }
  }
  return new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_withBoolean_(outData, NO);
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)subtractWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  @try {
    return [self subtractWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearArray2DRowFieldMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return [super subtractWithOrgApacheCommonsMathLinearFieldMatrix:m];
  }
}

- (OrgApacheCommonsMathLinearArray2DRowFieldMatrix *)subtractWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *)m {
  [self checkSubtractionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  IOSObjectArray *outData = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rowCount, columnCount);
  for (jint row = 0; row < rowCount; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSObjectArray *mRow = IOSObjectArray_Get(((OrgApacheCommonsMathLinearArray2DRowFieldMatrix *) nil_chk(m))->data_, row);
    IOSObjectArray *outDataRow = IOSObjectArray_Get(nil_chk(outData), row);
    for (jint col = 0; col < columnCount; col++) {
      (void) IOSObjectArray_Set(nil_chk(outDataRow), col, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) subtractWithId:IOSObjectArray_Get(nil_chk(mRow), col)]);
    }
  }
  return new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_withBoolean_(outData, NO);
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)multiplyWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  @try {
    return [self multiplyWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearArray2DRowFieldMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return [super multiplyWithOrgApacheCommonsMathLinearFieldMatrix:m];
  }
}

- (OrgApacheCommonsMathLinearArray2DRowFieldMatrix *)multiplyWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *)m {
  [self checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  jint nRows = [self getRowDimension];
  jint nCols = [((OrgApacheCommonsMathLinearArray2DRowFieldMatrix *) nil_chk(m)) getColumnDimension];
  jint nSum = [self getColumnDimension];
  IOSObjectArray *outData = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_([self getField], nRows, nCols);
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSObjectArray *outDataRow = IOSObjectArray_Get(nil_chk(outData), row);
    for (jint col = 0; col < nCols; col++) {
      id<OrgApacheCommonsMathFieldElement> sum = [((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero];
      for (jint i = 0; i < nSum; i++) {
        sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), i))) multiplyWithId:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(m->data_, i)), col)]];
      }
      (void) IOSObjectArray_Set(nil_chk(outDataRow), col, sum);
    }
  }
  return new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_withBoolean_(outData, NO);
}

- (IOSObjectArray *)getData {
  return OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyOut(self);
}

- (IOSObjectArray *)getDataRef {
  return data_;
}

- (void)setSubMatrixWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)subMatrix
                                                       withInt:(jint)row
                                                       withInt:(jint)column {
  if (data_ == nil) {
    if (row > 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalStateExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FIRST_ROWS_NOT_INITIALIZED_YET(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row) } count:1 type:NSObject_class_()]);
    }
    if (column > 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalStateExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FIRST_COLUMNS_NOT_INITIALIZED_YET(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(column) } count:1 type:NSObject_class_()]);
    }
    jint nRows = ((IOSObjectArray *) nil_chk(subMatrix))->size_;
    if (nRows == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
    jint nCols = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, 0)))->size_;
    if (nCols == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
    data_ = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_([self getField], subMatrix->size_, nCols);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; ++i) {
      if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, i)))->size_ != nCols) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, i)))->size_) } count:2 type:NSObject_class_()]);
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(subMatrix, i), 0, IOSObjectArray_Get(data_, i + row), column, nCols);
    }
  }
  else {
    [super setSubMatrixWithOrgApacheCommonsMathFieldElementArray2:subMatrix withInt:row withInt:column];
  }
}

- (id)getEntryWithInt:(jint)row
              withInt:(jint)column {
  @try {
    return IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]);
  }
}

- (void)setEntryWithInt:(jint)row
                withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  @try {
    (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column, value);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]);
  }
}

- (void)addToEntryWithInt:(jint)row
                  withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)increment {
  @try {
    (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data_, row)), column))) addWithId:increment]);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]);
  }
}

- (void)multiplyEntryWithInt:(jint)row
                     withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)factor {
  @try {
    (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data_, row)), column))) multiplyWithId:factor]);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]);
  }
}

- (jint)getRowDimension {
  return (data_ == nil) ? 0 : data_->size_;
}

- (jint)getColumnDimension {
  return ((data_ == nil) || (IOSObjectArray_Get(data_, 0) == nil)) ? 0 : ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data_, 0)))->size_;
}

- (IOSObjectArray *)operateWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (((IOSObjectArray *) nil_chk(v))->size_ != nCols) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nCols) } count:2 type:NSObject_class_()]);
  }
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_([self getField], nRows);
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    id<OrgApacheCommonsMathFieldElement> sum = [((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero];
    for (jint i = 0; i < nCols; i++) {
      sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), i))) multiplyWithId:IOSObjectArray_Get(v, i)]];
    }
    (void) IOSObjectArray_Set(nil_chk(out), row, sum);
  }
  return out;
}

- (IOSObjectArray *)preMultiplyWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (((IOSObjectArray *) nil_chk(v))->size_ != nRows) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nRows) } count:2 type:NSObject_class_()]);
  }
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_([self getField], nCols);
  for (jint col = 0; col < nCols; ++col) {
    id<OrgApacheCommonsMathFieldElement> sum = [((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero];
    for (jint i = 0; i < nRows; ++i) {
      sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), col))) multiplyWithId:IOSObjectArray_Get(v, i)]];
    }
    (void) IOSObjectArray_Set(nil_chk(out), col, sum);
  }
  return out;
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint i = 0; i < rows; ++i) {
    IOSObjectArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
    for (jint j = 0; j < columns; ++j) {
      (void) IOSObjectArray_Set(nil_chk(rowI), j, [visitor visitWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(rowI, j)]);
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint i = 0; i < rows; ++i) {
    IOSObjectArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
    for (jint j = 0; j < columns; ++j) {
      [visitor visitWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(rowI), j)];
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor
                                                                     withInt:(jint)startRow
                                                                     withInt:(jint)endRow
                                                                     withInt:(jint)startColumn
                                                                     withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint i = startRow; i <= endRow; ++i) {
    IOSObjectArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
    for (jint j = startColumn; j <= endColumn; ++j) {
      (void) IOSObjectArray_Set(nil_chk(rowI), j, [visitor visitWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(rowI, j)]);
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor
                                                                       withInt:(jint)startRow
                                                                       withInt:(jint)endRow
                                                                       withInt:(jint)startColumn
                                                                       withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint i = startRow; i <= endRow; ++i) {
    IOSObjectArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
    for (jint j = startColumn; j <= endColumn; ++j) {
      [visitor visitWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(rowI), j)];
    }
  }
  return [visitor end];
}

- (id)walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint j = 0; j < columns; ++j) {
    for (jint i = 0; i < rows; ++i) {
      IOSObjectArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
      (void) IOSObjectArray_Set(nil_chk(rowI), j, [visitor visitWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(rowI, j)]);
    }
  }
  return [visitor end];
}

- (id)walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint j = 0; j < columns; ++j) {
    for (jint i = 0; i < rows; ++i) {
      [visitor visitWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), j)];
    }
  }
  return [visitor end];
}

- (id)walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor
                                                                        withInt:(jint)startRow
                                                                        withInt:(jint)endRow
                                                                        withInt:(jint)startColumn
                                                                        withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint j = startColumn; j <= endColumn; ++j) {
    for (jint i = startRow; i <= endRow; ++i) {
      IOSObjectArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
      (void) IOSObjectArray_Set(nil_chk(rowI), j, [visitor visitWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(rowI, j)]);
    }
  }
  return [visitor end];
}

- (id)walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor
                                                                          withInt:(jint)startRow
                                                                          withInt:(jint)endRow
                                                                          withInt:(jint)startColumn
                                                                          withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint j = startColumn; j <= endColumn; ++j) {
    for (jint i = startRow; i <= endRow; ++i) {
      [visitor visitWithInt:i withInt:j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), j)];
    }
  }
  return [visitor end];
}

- (IOSObjectArray *)copyOut {
  return OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyOut(self);
}

- (void)copyInWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)inArg {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyInWithOrgApacheCommonsMathFieldElementArray2_(self, inArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathField:", "Array2DRowFieldMatrix", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:withInt:withInt:", "Array2DRowFieldMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithOrgApacheCommonsMathFieldElementArray2:", "Array2DRowFieldMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;Ljava.lang.NullPointerException;", NULL },
    { "initWithOrgApacheCommonsMathFieldElementArray2:withBoolean:", "Array2DRowFieldMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;Ljava.lang.NullPointerException;", NULL },
    { "initWithOrgApacheCommonsMathFieldElementArray:", "Array2DRowFieldMatrix", NULL, 0x1, NULL, NULL },
    { "createMatrixWithInt:withInt:", "createMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearFieldMatrix:", "add", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:", "add", "Lorg.apache.commons.math.linear.Array2DRowFieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearFieldMatrix:", "subtract", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:", "subtract", "Lorg.apache.commons.math.linear.Array2DRowFieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearFieldMatrix:", "multiply", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearArray2DRowFieldMatrix:", "multiply", "Lorg.apache.commons.math.linear.Array2DRowFieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "getDataRef", NULL, "[[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "setSubMatrixWithOrgApacheCommonsMathFieldElementArray2:withInt:withInt:", "setSubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getEntryWithInt:withInt:", "getEntry", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(II)TT;" },
    { "setEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "setEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "addToEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "addToEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "multiplyEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "multiplyEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "getRowDimension", NULL, "I", 0x1, NULL, NULL },
    { "getColumnDimension", NULL, "I", 0x1, NULL, NULL },
    { "operateWithOrgApacheCommonsMathFieldElementArray:", "operate", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithOrgApacheCommonsMathFieldElementArray:", "preMultiply", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;IIII)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;IIII)TT;" },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:", "walkInColumnOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;)TT;" },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:", "walkInColumnOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;)TT;" },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInColumnOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;IIII)TT;" },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInColumnOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;IIII)TT;" },
    { "copyOut", NULL, "[[Lorg.apache.commons.math.FieldElement;", 0x2, NULL, NULL },
    { "copyInWithOrgApacheCommonsMathFieldElementArray2:", "copyIn", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearArray2DRowFieldMatrix_serialVersionUID },
    { "data_", NULL, 0x4, "[[Lorg.apache.commons.math.FieldElement;", NULL, "[[TT;",  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearArray2DRowFieldMatrix = { 2, "Array2DRowFieldMatrix", "org.apache.commons.math.linear", NULL, 0x1, 34, methods, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>Lorg/apache/commons/math/linear/AbstractFieldMatrix<TT;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsMathLinearArray2DRowFieldMatrix;
}

@end

void OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self, id<OrgApacheCommonsMathField> field) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_(self, field);
}

OrgApacheCommonsMathLinearArray2DRowFieldMatrix *new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_(id<OrgApacheCommonsMathField> field) {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self = [OrgApacheCommonsMathLinearArray2DRowFieldMatrix alloc];
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

void OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self, id<OrgApacheCommonsMathField> field, jint rowDimension, jint columnDimension) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rowDimension, columnDimension);
  self->data_ = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_(field, rowDimension, columnDimension);
}

OrgApacheCommonsMathLinearArray2DRowFieldMatrix *new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(id<OrgApacheCommonsMathField> field, jint rowDimension, jint columnDimension) {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self = [OrgApacheCommonsMathLinearArray2DRowFieldMatrix alloc];
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rowDimension, columnDimension);
  return self;
}

void OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self, IOSObjectArray *d) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_(self, OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray2_(d));
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyInWithOrgApacheCommonsMathFieldElementArray2_(self, d);
}

OrgApacheCommonsMathLinearArray2DRowFieldMatrix *new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self = [OrgApacheCommonsMathLinearArray2DRowFieldMatrix alloc];
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_(self, d);
  return self;
}

void OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_withBoolean_(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self, IOSObjectArray *d, jboolean copyArray) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_(self, OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray2_(d));
  if (copyArray) {
    OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyInWithOrgApacheCommonsMathFieldElementArray2_(self, d);
  }
  else {
    if (d == nil) {
      @throw new_JavaLangNullPointerException_init();
    }
    jint nRows = ((IOSObjectArray *) nil_chk(d))->size_;
    if (nRows == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
    jint nCols = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, 0)))->size_;
    if (nCols == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
    for (jint r = 1; r < nRows; r++) {
      if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, r)))->size_ != nCols) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, r)))->size_) } count:2 type:NSObject_class_()]);
      }
    }
    self->data_ = d;
  }
}

OrgApacheCommonsMathLinearArray2DRowFieldMatrix *new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_withBoolean_(IOSObjectArray *d, jboolean copyArray) {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self = [OrgApacheCommonsMathLinearArray2DRowFieldMatrix alloc];
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_withBoolean_(self, d, copyArray);
  return self;
}

void OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray_(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self, IOSObjectArray *v) {
  (void) OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_(self, OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray_(v));
  jint nRows = ((IOSObjectArray *) nil_chk(v))->size_;
  self->data_ = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_([self getField], nRows, 1);
  for (jint row = 0; row < nRows; row++) {
    (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(self->data_), row)), 0, IOSObjectArray_Get(v, row));
  }
}

OrgApacheCommonsMathLinearArray2DRowFieldMatrix *new_OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray_(IOSObjectArray *v) {
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self = [OrgApacheCommonsMathLinearArray2DRowFieldMatrix alloc];
  OrgApacheCommonsMathLinearArray2DRowFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray_(self, v);
  return self;
}

IOSObjectArray *OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyOut(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self) {
  jint nRows = [self getRowDimension];
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_([self getField], nRows, [self getColumnDimension]);
  for (jint i = 0; i < nRows; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(self->data_), i), 0, IOSObjectArray_Get(nil_chk(out), i), 0, ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->data_, i)))->size_);
  }
  return out;
}

void OrgApacheCommonsMathLinearArray2DRowFieldMatrix_copyInWithOrgApacheCommonsMathFieldElementArray2_(OrgApacheCommonsMathLinearArray2DRowFieldMatrix *self, IOSObjectArray *inArg) {
  [self setSubMatrixWithOrgApacheCommonsMathFieldElementArray2:inArg withInt:0 withInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearArray2DRowFieldMatrix)
