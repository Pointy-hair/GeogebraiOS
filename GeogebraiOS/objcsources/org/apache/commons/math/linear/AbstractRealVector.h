//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/linear/AbstractRealVector.java
//

#ifndef _OrgApacheCommonsMathLinearAbstractRealVector_H_
#define _OrgApacheCommonsMathLinearAbstractRealVector_H_

#include "J2ObjC_header.h"
#include "java/util/Iterator.h"
#include "org/apache/commons/math/linear/RealVector.h"

@class IOSDoubleArray;
@protocol OrgApacheCommonsMathAnalysisUnivariateRealFunction;
@protocol OrgApacheCommonsMathLinearRealMatrix;

@interface OrgApacheCommonsMathLinearAbstractRealVector : NSObject < OrgApacheCommonsMathLinearRealVector >

#pragma mark Public

- (instancetype)init;

- (id<OrgApacheCommonsMathLinearRealVector>)addWithDoubleArray:(IOSDoubleArray *)v;

- (id<OrgApacheCommonsMathLinearRealVector>)addWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

- (OrgApacheCommonsMathLinearAbstractRealVector *)copy__ OBJC_METHOD_FAMILY_NONE;

- (jdouble)dotProductWithDoubleArray:(IOSDoubleArray *)v;

- (jdouble)dotProductWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

- (id<OrgApacheCommonsMathLinearRealVector>)ebeDivideWithDoubleArray:(IOSDoubleArray *)v;

- (id<OrgApacheCommonsMathLinearRealVector>)ebeMultiplyWithDoubleArray:(IOSDoubleArray *)v;

- (IOSDoubleArray *)getData;

- (jdouble)getDistanceWithDoubleArray:(IOSDoubleArray *)v;

- (jdouble)getDistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

- (jdouble)getL1DistanceWithDoubleArray:(IOSDoubleArray *)v;

- (jdouble)getL1DistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

- (jdouble)getL1Norm;

- (jdouble)getLInfDistanceWithDoubleArray:(IOSDoubleArray *)v;

- (jdouble)getLInfDistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

- (jdouble)getLInfNorm;

- (jint)getMaxIndex;

- (jdouble)getMaxValue;

- (jint)getMinIndex;

- (jdouble)getMinValue;

- (jdouble)getNorm;

- (id<JavaUtilIterator>)iterator;

- (id<OrgApacheCommonsMathLinearRealVector>)mapWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:(id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>)function;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAbs;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAbsToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAcos;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAcosToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAddWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAddToSelfWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAsin;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAsinToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAtan;

- (id<OrgApacheCommonsMathLinearRealVector>)mapAtanToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapCbrt;

- (id<OrgApacheCommonsMathLinearRealVector>)mapCbrtToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapCeil;

- (id<OrgApacheCommonsMathLinearRealVector>)mapCeilToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapCos;

- (id<OrgApacheCommonsMathLinearRealVector>)mapCosh;

- (id<OrgApacheCommonsMathLinearRealVector>)mapCoshToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapCosToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapDivideWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapDivideToSelfWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapExp;

- (id<OrgApacheCommonsMathLinearRealVector>)mapExpm1;

- (id<OrgApacheCommonsMathLinearRealVector>)mapExpm1ToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapExpToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapFloor;

- (id<OrgApacheCommonsMathLinearRealVector>)mapFloorToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapInv;

- (id<OrgApacheCommonsMathLinearRealVector>)mapInvToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog;

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog10;

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog10ToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog1p;

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog1pToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapLogToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapMultiplyWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapMultiplyToSelfWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapPowWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapPowToSelfWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapRint;

- (id<OrgApacheCommonsMathLinearRealVector>)mapRintToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSignum;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSignumToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSin;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSinh;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSinhToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSinToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSqrt;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSqrtToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSubtractWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapSubtractToSelfWithDouble:(jdouble)d;

- (id<OrgApacheCommonsMathLinearRealVector>)mapTan;

- (id<OrgApacheCommonsMathLinearRealVector>)mapTanh;

- (id<OrgApacheCommonsMathLinearRealVector>)mapTanhToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapTanToSelf;

- (id<OrgApacheCommonsMathLinearRealVector>)mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:(id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>)function;

- (id<OrgApacheCommonsMathLinearRealVector>)mapUlp;

- (id<OrgApacheCommonsMathLinearRealVector>)mapUlpToSelf;

- (id<OrgApacheCommonsMathLinearRealMatrix>)outerProductWithDoubleArray:(IOSDoubleArray *)v;

- (id<OrgApacheCommonsMathLinearRealMatrix>)outerProductWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

- (id<OrgApacheCommonsMathLinearRealVector>)projectionWithDoubleArray:(IOSDoubleArray *)v;

- (void)setWithDouble:(jdouble)value;

- (void)setSubVectorWithInt:(jint)index
            withDoubleArray:(IOSDoubleArray *)v;

- (void)setSubVectorWithInt:(jint)index
withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

- (id<JavaUtilIterator>)sparseIterator;

- (id<OrgApacheCommonsMathLinearRealVector>)subtractWithDoubleArray:(IOSDoubleArray *)v;

- (id<OrgApacheCommonsMathLinearRealVector>)subtractWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

- (IOSDoubleArray *)toArray;

- (void)unitize;

- (id<OrgApacheCommonsMathLinearRealVector>)unitVector;

#pragma mark Protected

- (void)checkIndexWithInt:(jint)index;

- (void)checkVectorDimensionsWithInt:(jint)n;

- (void)checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealVector)

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearAbstractRealVector_init(OrgApacheCommonsMathLinearAbstractRealVector *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealVector)

@interface OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl : OrgApacheCommonsMathLinearRealVector_Entry

#pragma mark Public

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractRealVector:(OrgApacheCommonsMathLinearAbstractRealVector *)outer$;

- (jdouble)getValue;

- (void)setValueWithDouble:(jdouble)newValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl)

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *self, OrgApacheCommonsMathLinearAbstractRealVector *outer$);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *new_OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(OrgApacheCommonsMathLinearAbstractRealVector *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl)

@interface OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator : NSObject < JavaUtilIterator >

#pragma mark Public

- (jboolean)hasNext;

- (OrgApacheCommonsMathLinearRealVector_Entry *)next;

- (void)remove;

#pragma mark Protected

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractRealVector:(OrgApacheCommonsMathLinearAbstractRealVector *)outer$;

- (void)advanceWithOrgApacheCommonsMathLinearAbstractRealVector_EntryImpl:(OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator)

FOUNDATION_EXPORT void OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_initWithOrgApacheCommonsMathLinearAbstractRealVector_(OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator *self, OrgApacheCommonsMathLinearAbstractRealVector *outer$);

FOUNDATION_EXPORT OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator *new_OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_initWithOrgApacheCommonsMathLinearAbstractRealVector_(OrgApacheCommonsMathLinearAbstractRealVector *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator)

#endif // _OrgApacheCommonsMathLinearAbstractRealVector_H_
