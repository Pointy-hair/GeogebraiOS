//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/transform/FastHadamardTransformer.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/math/FunctionEvaluationException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/analysis/UnivariateRealFunction.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/transform/FastFourierTransformer.h"
#include "org/apache/commons/math/transform/FastHadamardTransformer.h"

@implementation OrgApacheCommonsMathTransformFastHadamardTransformer

- (IOSDoubleArray *)transformWithDoubleArray:(IOSDoubleArray *)f {
  return [self fhtWithDoubleArray:f];
}

- (IOSDoubleArray *)transformWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:(id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>)f
                                                                         withDouble:(jdouble)min
                                                                         withDouble:(jdouble)max
                                                                            withInt:(jint)n {
  return [self fhtWithDoubleArray:OrgApacheCommonsMathTransformFastFourierTransformer_sampleWithOrgApacheCommonsMathAnalysisUnivariateRealFunction_withDouble_withDouble_withInt_(f, min, max, n)];
}

- (IOSDoubleArray *)inversetransformWithDoubleArray:(IOSDoubleArray *)f {
  return OrgApacheCommonsMathTransformFastFourierTransformer_scaleArrayWithDoubleArray_withDouble_([self fhtWithDoubleArray:f], 1.0 / ((IOSDoubleArray *) nil_chk(f))->size_);
}

- (IOSDoubleArray *)inversetransformWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:(id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>)f
                                                                                withDouble:(jdouble)min
                                                                                withDouble:(jdouble)max
                                                                                   withInt:(jint)n {
  IOSDoubleArray *unscaled = [self fhtWithDoubleArray:OrgApacheCommonsMathTransformFastFourierTransformer_sampleWithOrgApacheCommonsMathAnalysisUnivariateRealFunction_withDouble_withDouble_withInt_(f, min, max, n)];
  return OrgApacheCommonsMathTransformFastFourierTransformer_scaleArrayWithDoubleArray_withDouble_(unscaled, 1.0 / n);
}

- (IOSIntArray *)transformWithIntArray:(IOSIntArray *)f {
  return [self fhtWithIntArray:f];
}

- (IOSDoubleArray *)fhtWithDoubleArray:(IOSDoubleArray *)x {
  jint n = ((IOSDoubleArray *) nil_chk(x))->size_;
  jint halfN = n / 2;
  if (!OrgApacheCommonsMathTransformFastFourierTransformer_isPowerOf2WithLong_(n)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POWER_OF_TWO(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(n) } count:1 type:NSObject_class_()]);
  }
  IOSDoubleArray *yPrevious = [IOSDoubleArray arrayWithLength:n];
  IOSDoubleArray *yCurrent = [x clone];
  for (jint j = 1; j < n; LShiftAssignInt(&j, 1)) {
    IOSDoubleArray *yTmp = yCurrent;
    yCurrent = yPrevious;
    yPrevious = yTmp;
    for (jint i = 0; i < halfN; ++i) {
      jint twoI = 2 * i;
      *IOSDoubleArray_GetRef(yCurrent, i) = IOSDoubleArray_Get(nil_chk(yPrevious), twoI) + IOSDoubleArray_Get(yPrevious, twoI + 1);
    }
    for (jint i = halfN; i < n; ++i) {
      jint twoI = 2 * i;
      *IOSDoubleArray_GetRef(yCurrent, i) = IOSDoubleArray_Get(nil_chk(yPrevious), twoI - n) - IOSDoubleArray_Get(yPrevious, twoI - n + 1);
    }
  }
  return yCurrent;
}

- (IOSIntArray *)fhtWithIntArray:(IOSIntArray *)x {
  jint n = ((IOSIntArray *) nil_chk(x))->size_;
  jint halfN = n / 2;
  if (!OrgApacheCommonsMathTransformFastFourierTransformer_isPowerOf2WithLong_(n)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POWER_OF_TWO(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(n) } count:1 type:NSObject_class_()]);
  }
  IOSIntArray *yPrevious = [IOSIntArray arrayWithLength:n];
  IOSIntArray *yCurrent = [x clone];
  for (jint j = 1; j < n; LShiftAssignInt(&j, 1)) {
    IOSIntArray *yTmp = yCurrent;
    yCurrent = yPrevious;
    yPrevious = yTmp;
    for (jint i = 0; i < halfN; ++i) {
      jint twoI = 2 * i;
      *IOSIntArray_GetRef(yCurrent, i) = IOSIntArray_Get(nil_chk(yPrevious), twoI) + IOSIntArray_Get(yPrevious, twoI + 1);
    }
    for (jint i = halfN; i < n; ++i) {
      jint twoI = 2 * i;
      *IOSIntArray_GetRef(yCurrent, i) = IOSIntArray_Get(nil_chk(yPrevious), twoI - n) - IOSIntArray_Get(yPrevious, twoI - n + 1);
    }
  }
  return yCurrent;
}

- (instancetype)init {
  OrgApacheCommonsMathTransformFastHadamardTransformer_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "transformWithDoubleArray:", "transform", "[D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "transformWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:withDouble:withDouble:withInt:", "transform", "[D", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;Ljava.lang.IllegalArgumentException;", NULL },
    { "inversetransformWithDoubleArray:", "inversetransform", "[D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "inversetransformWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:withDouble:withDouble:withInt:", "inversetransform", "[D", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;Ljava.lang.IllegalArgumentException;", NULL },
    { "transformWithIntArray:", "transform", "[I", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "fhtWithDoubleArray:", "fht", "[D", 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "fhtWithIntArray:", "fht", "[I", 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathTransformFastHadamardTransformer = { 2, "FastHadamardTransformer", "org.apache.commons.math.transform", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathTransformFastHadamardTransformer;
}

@end

void OrgApacheCommonsMathTransformFastHadamardTransformer_init(OrgApacheCommonsMathTransformFastHadamardTransformer *self) {
  NSObject_init(self);
}

OrgApacheCommonsMathTransformFastHadamardTransformer *new_OrgApacheCommonsMathTransformFastHadamardTransformer_init() {
  OrgApacheCommonsMathTransformFastHadamardTransformer *self = [OrgApacheCommonsMathTransformFastHadamardTransformer alloc];
  OrgApacheCommonsMathTransformFastHadamardTransformer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathTransformFastHadamardTransformer)
