//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/math/DimensionMismatchException.h"
#include "org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.h"
#include "org/apache/commons/math/exception/NoDataException.h"
#include "org/apache/commons/math/linear/ArrayRealVector.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/random/UnitSphereRandomVectorGenerator.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction () {
 @public
  jint dimension_;
  id<JavaUtilList> microsphere_;
  jdouble brightnessExponent_;
  id<JavaUtilMap> samples_;
}

- (jdouble)cosAngleWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v
                   withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)w;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction, microsphere_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction, samples_, id<JavaUtilMap>)

__attribute__((unused)) static jdouble OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_cosAngleWithOrgApacheCommonsMathLinearRealVector_withOrgApacheCommonsMathLinearRealVector_(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction *self, id<OrgApacheCommonsMathLinearRealVector> v, id<OrgApacheCommonsMathLinearRealVector> w);

@interface OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement : NSObject {
 @public
  id<OrgApacheCommonsMathLinearRealVector> normal__;
  jdouble brightestIllumination_;
  id<JavaUtilMap_Entry> brightestSample_;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)n;

- (id<OrgApacheCommonsMathLinearRealVector>)normal;

- (void)reset;

- (void)storeWithDouble:(jdouble)illuminationFromSample
  withJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)sample;

- (jdouble)illumination;

- (id<JavaUtilMap_Entry>)sample;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement, normal__, id<OrgApacheCommonsMathLinearRealVector>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement, brightestSample_, id<JavaUtilMap_Entry>)

__attribute__((unused)) static void OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement_initWithDoubleArray_(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement *self, IOSDoubleArray *n);

__attribute__((unused)) static OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement *new_OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement_initWithDoubleArray_(IOSDoubleArray *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement)

@implementation OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)xval
                     withDoubleArray:(IOSDoubleArray *)yval
                             withInt:(jint)brightnessExponent
                             withInt:(jint)microsphereElements
withOrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator:(OrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator *)rand {
  OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_initWithDoubleArray2_withDoubleArray_withInt_withInt_withOrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator_(self, xval, yval, brightnessExponent, microsphereElements, rand);
  return self;
}

- (jdouble)valueWithDoubleArray:(IOSDoubleArray *)point {
  id<OrgApacheCommonsMathLinearRealVector> p = new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(point);
  for (OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement * __strong md in nil_chk(microsphere_)) {
    [((OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement *) nil_chk(md)) reset];
  }
  for (id<JavaUtilMap_Entry> __strong sd in nil_chk([((id<JavaUtilMap>) nil_chk(samples_)) entrySet])) {
    id<OrgApacheCommonsMathLinearRealVector> diff = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(sd)) getKey])) subtractWithOrgApacheCommonsMathLinearRealVector:p];
    jdouble diffNorm = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(diff)) getNorm];
    if (OrgApacheCommonsMathUtilFastMath_absWithDouble_(diffNorm) < OrgApacheCommonsMathUtilFastMath_ulpWithDouble_(1.0)) {
      return [((JavaLangDouble *) nil_chk([sd getValue])) doubleValue];
    }
    for (OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement * __strong md in microsphere_) {
      jdouble w = OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(diffNorm, -brightnessExponent_);
      [md storeWithDouble:OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_cosAngleWithOrgApacheCommonsMathLinearRealVector_withOrgApacheCommonsMathLinearRealVector_(self, diff, [((OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement *) nil_chk(md)) normal]) * w withJavaUtilMap_Entry:sd];
    }
  }
  jdouble value = 0;
  jdouble totalWeight = 0;
  for (OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement * __strong md in microsphere_) {
    jdouble iV = [((OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement *) nil_chk(md)) illumination];
    id<JavaUtilMap_Entry> sd = [md sample];
    if (sd != nil) {
      value += iV * [((JavaLangDouble *) nil_chk([sd getValue])) doubleValue];
      totalWeight += iV;
    }
  }
  return value / totalWeight;
}

- (jdouble)cosAngleWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v
                   withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)w {
  return OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_cosAngleWithOrgApacheCommonsMathLinearRealVector_withOrgApacheCommonsMathLinearRealVector_(self, v, w);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDoubleArray2:withDoubleArray:withInt:withInt:withOrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator:", "MicrosphereInterpolatingFunction", NULL, 0x1, "Lorg.apache.commons.math.DimensionMismatchException;Lorg.apache.commons.math.exception.NoDataException;", NULL },
    { "valueWithDoubleArray:", "value", "D", 0x1, NULL, NULL },
    { "cosAngleWithOrgApacheCommonsMathLinearRealVector:withOrgApacheCommonsMathLinearRealVector:", "cosAngle", "D", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dimension_", NULL, 0x12, "I", NULL, NULL,  },
    { "microsphere_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;>;",  },
    { "brightnessExponent_", NULL, 0x12, "D", NULL, NULL,  },
    { "samples_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/apache/commons/math/linear/RealVector;Ljava/lang/Double;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction = { 2, "MicrosphereInterpolatingFunction", "org.apache.commons.math.analysis.interpolation", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction;
}

@end

void OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_initWithDoubleArray2_withDoubleArray_withInt_withInt_withOrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator_(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction *self, IOSObjectArray *xval, IOSDoubleArray *yval, jint brightnessExponent, jint microsphereElements, OrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator *rand) {
  (void) NSObject_init(self);
  if (((IOSObjectArray *) nil_chk(xval))->size_ == 0 || IOSObjectArray_Get(xval, 0) == nil) {
    @throw new_OrgApacheCommonsMathExceptionNoDataException_init();
  }
  if (xval->size_ != ((IOSDoubleArray *) nil_chk(yval))->size_) {
    @throw new_OrgApacheCommonsMathDimensionMismatchException_initWithInt_withInt_(xval->size_, yval->size_);
  }
  self->dimension_ = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(xval, 0)))->size_;
  self->brightnessExponent_ = brightnessExponent;
  self->samples_ = new_JavaUtilHashMap_initWithInt_(yval->size_);
  for (jint i = 0; i < xval->size_; ++i) {
    IOSDoubleArray *xvalI = IOSObjectArray_Get(xval, i);
    if (((IOSDoubleArray *) nil_chk(xvalI))->size_ != self->dimension_) {
      @throw new_OrgApacheCommonsMathDimensionMismatchException_initWithInt_withInt_(xvalI->size_, self->dimension_);
    }
    (void) [self->samples_ putWithId:new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(xvalI) withId:JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(yval, i))];
  }
  self->microsphere_ = new_JavaUtilArrayList_initWithInt_(microsphereElements);
  for (jint i = 0; i < microsphereElements; i++) {
    [self->microsphere_ addWithId:new_OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement_initWithDoubleArray_([((OrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator *) nil_chk(rand)) nextVector])];
  }
}

OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction *new_OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_initWithDoubleArray2_withDoubleArray_withInt_withInt_withOrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator_(IOSObjectArray *xval, IOSDoubleArray *yval, jint brightnessExponent, jint microsphereElements, OrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator *rand) {
  OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction *self = [OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction alloc];
  OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_initWithDoubleArray2_withDoubleArray_withInt_withInt_withOrgApacheCommonsMathRandomUnitSphereRandomVectorGenerator_(self, xval, yval, brightnessExponent, microsphereElements, rand);
  return self;
}

jdouble OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_cosAngleWithOrgApacheCommonsMathLinearRealVector_withOrgApacheCommonsMathLinearRealVector_(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction *self, id<OrgApacheCommonsMathLinearRealVector> v, id<OrgApacheCommonsMathLinearRealVector> w) {
  return [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) dotProductWithOrgApacheCommonsMathLinearRealVector:w] / ([v getNorm] * [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(w)) getNorm]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction)

@implementation OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)n {
  OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement_initWithDoubleArray_(self, n);
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)normal {
  return normal__;
}

- (void)reset {
  brightestIllumination_ = 0;
  brightestSample_ = nil;
}

- (void)storeWithDouble:(jdouble)illuminationFromSample
  withJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)sample {
  if (illuminationFromSample > self->brightestIllumination_) {
    self->brightestIllumination_ = illuminationFromSample;
    self->brightestSample_ = sample;
  }
}

- (jdouble)illumination {
  return brightestIllumination_;
}

- (id<JavaUtilMap_Entry>)sample {
  return brightestSample_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDoubleArray:", "MicrosphereSurfaceElement", NULL, 0x0, NULL, NULL },
    { "normal", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x0, NULL, NULL },
    { "reset", NULL, "V", 0x0, NULL, NULL },
    { "storeWithDouble:withJavaUtilMap_Entry:", "store", "V", 0x0, NULL, NULL },
    { "illumination", NULL, "D", 0x0, NULL, NULL },
    { "sample", NULL, "Ljava.util.Map$Entry;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "normal__", "normal", 0x12, "Lorg.apache.commons.math.linear.RealVector;", NULL, NULL,  },
    { "brightestIllumination_", NULL, 0x2, "D", NULL, NULL,  },
    { "brightestSample_", NULL, 0x2, "Ljava.util.Map$Entry;", NULL, "Ljava/util/Map$Entry<Lorg/apache/commons/math/linear/RealVector;Ljava/lang/Double;>;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement = { 2, "MicrosphereSurfaceElement", "org.apache.commons.math.analysis.interpolation", "MicrosphereInterpolatingFunction", 0xa, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement;
}

@end

void OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement_initWithDoubleArray_(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement *self, IOSDoubleArray *n) {
  (void) NSObject_init(self);
  self->normal__ = new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(n);
}

OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement *new_OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement_initWithDoubleArray_(IOSDoubleArray *n) {
  OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement *self = [OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement alloc];
  OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement_initWithDoubleArray_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisInterpolationMicrosphereInterpolatingFunction_MicrosphereSurfaceElement)
