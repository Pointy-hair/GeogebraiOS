//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/math/analysis/interpolation/LinearInterpolator.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.h"
#include "org/apache/commons/math/exception/DimensionMismatchException.h"
#include "org/apache/commons/math/exception/NumberIsTooSmallException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/util/MathUtils.h"

@implementation OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction *)interpolateWithDoubleArray:(IOSDoubleArray *)x
                                                                                withDoubleArray:(IOSDoubleArray *)y {
  if (((IOSDoubleArray *) nil_chk(x))->size_ != ((IOSDoubleArray *) nil_chk(y))->size_) {
    @throw [new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(x->size_, y->size_) autorelease];
  }
  if (x->size_ < 2) {
    @throw [new_OrgApacheCommonsMathExceptionNumberIsTooSmallException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NUMBER_OF_POINTS(), JavaLangInteger_valueOfWithInt_(x->size_), JavaLangInteger_valueOfWithInt_(2), YES) autorelease];
  }
  jint n = x->size_ - 1;
  OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_(x);
  IOSDoubleArray *m = [IOSDoubleArray arrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSDoubleArray_GetRef(m, i) = (IOSDoubleArray_Get(y, i + 1) - IOSDoubleArray_Get(y, i)) / (IOSDoubleArray_Get(x, i + 1) - IOSDoubleArray_Get(x, i));
  }
  IOSObjectArray *polynomials = [IOSObjectArray arrayWithLength:n type:OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_class_()];
  IOSDoubleArray *coefficients = [IOSDoubleArray arrayWithLength:2];
  for (jint i = 0; i < n; i++) {
    *IOSDoubleArray_GetRef(coefficients, 0) = IOSDoubleArray_Get(y, i);
    *IOSDoubleArray_GetRef(coefficients, 1) = IOSDoubleArray_Get(m, i);
    IOSObjectArray_SetAndConsume(polynomials, i, new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(coefficients));
  }
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_initWithDoubleArray_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray_(x, polynomials) autorelease];
}

- (instancetype)init {
  OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "interpolateWithDoubleArray:withDoubleArray:", "interpolate", "Lorg.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator = { 2, "LinearInterpolator", "org.apache.commons.math.analysis.interpolation", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator;
}

@end

void OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator_init(OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator *self) {
  NSObject_init(self);
}

OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator *new_OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator_init() {
  OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator *self = [OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator alloc];
  OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisInterpolationLinearInterpolator)
