//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/math/analysis/interpolation/SplineInterpolator.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.h"
#include "org/apache/commons/math/exception/DimensionMismatchException.h"
#include "org/apache/commons/math/exception/NumberIsTooSmallException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/util/MathUtils.h"

@implementation OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction *)interpolateWithDoubleArray:(IOSDoubleArray *)x
                                                                                withDoubleArray:(IOSDoubleArray *)y {
  if (((IOSDoubleArray *) nil_chk(x))->size_ != ((IOSDoubleArray *) nil_chk(y))->size_) {
    @throw [new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(x->size_, y->size_) autorelease];
  }
  if (x->size_ < 3) {
    @throw [new_OrgApacheCommonsMathExceptionNumberIsTooSmallException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NUMBER_OF_POINTS(), JavaLangInteger_valueOfWithInt_(x->size_), JavaLangInteger_valueOfWithInt_(3), YES) autorelease];
  }
  jint n = x->size_ - 1;
  OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_(x);
  IOSDoubleArray *h = [IOSDoubleArray arrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSDoubleArray_GetRef(h, i) = IOSDoubleArray_Get(x, i + 1) - IOSDoubleArray_Get(x, i);
  }
  IOSDoubleArray *mu = [IOSDoubleArray arrayWithLength:n];
  IOSDoubleArray *z = [IOSDoubleArray arrayWithLength:n + 1];
  *IOSDoubleArray_GetRef(mu, 0) = 0.0;
  *IOSDoubleArray_GetRef(z, 0) = 0.0;
  jdouble g = 0;
  for (jint i = 1; i < n; i++) {
    g = 2.0 * (IOSDoubleArray_Get(x, i + 1) - IOSDoubleArray_Get(x, i - 1)) - IOSDoubleArray_Get(h, i - 1) * IOSDoubleArray_Get(mu, i - 1);
    *IOSDoubleArray_GetRef(mu, i) = IOSDoubleArray_Get(h, i) / g;
    *IOSDoubleArray_GetRef(z, i) = (3.0 * (IOSDoubleArray_Get(y, i + 1) * IOSDoubleArray_Get(h, i - 1) - IOSDoubleArray_Get(y, i) * (IOSDoubleArray_Get(x, i + 1) - IOSDoubleArray_Get(x, i - 1)) + IOSDoubleArray_Get(y, i - 1) * IOSDoubleArray_Get(h, i)) / (IOSDoubleArray_Get(h, i - 1) * IOSDoubleArray_Get(h, i)) - IOSDoubleArray_Get(h, i - 1) * IOSDoubleArray_Get(z, i - 1)) / g;
  }
  IOSDoubleArray *b = [IOSDoubleArray arrayWithLength:n];
  IOSDoubleArray *c = [IOSDoubleArray arrayWithLength:n + 1];
  IOSDoubleArray *d = [IOSDoubleArray arrayWithLength:n];
  *IOSDoubleArray_GetRef(z, n) = 0.0;
  *IOSDoubleArray_GetRef(c, n) = 0.0;
  for (jint j = n - 1; j >= 0; j--) {
    *IOSDoubleArray_GetRef(c, j) = IOSDoubleArray_Get(z, j) - IOSDoubleArray_Get(mu, j) * IOSDoubleArray_Get(c, j + 1);
    *IOSDoubleArray_GetRef(b, j) = (IOSDoubleArray_Get(y, j + 1) - IOSDoubleArray_Get(y, j)) / IOSDoubleArray_Get(h, j) - IOSDoubleArray_Get(h, j) * (IOSDoubleArray_Get(c, j + 1) + 2.0 * IOSDoubleArray_Get(c, j)) / 3.0;
    *IOSDoubleArray_GetRef(d, j) = (IOSDoubleArray_Get(c, j + 1) - IOSDoubleArray_Get(c, j)) / (3.0 * IOSDoubleArray_Get(h, j));
  }
  IOSObjectArray *polynomials = [IOSObjectArray arrayWithLength:n type:OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_class_()];
  IOSDoubleArray *coefficients = [IOSDoubleArray arrayWithLength:4];
  for (jint i = 0; i < n; i++) {
    *IOSDoubleArray_GetRef(coefficients, 0) = IOSDoubleArray_Get(y, i);
    *IOSDoubleArray_GetRef(coefficients, 1) = IOSDoubleArray_Get(b, i);
    *IOSDoubleArray_GetRef(coefficients, 2) = IOSDoubleArray_Get(c, i);
    *IOSDoubleArray_GetRef(coefficients, 3) = IOSDoubleArray_Get(d, i);
    IOSObjectArray_SetAndConsume(polynomials, i, new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(coefficients));
  }
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_initWithDoubleArray_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray_(x, polynomials) autorelease];
}

- (instancetype)init {
  OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "interpolateWithDoubleArray:withDoubleArray:", "interpolate", "Lorg.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator = { 2, "SplineInterpolator", "org.apache.commons.math.analysis.interpolation", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator;
}

@end

void OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator_init(OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator *self) {
  NSObject_init(self);
}

OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator *new_OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator_init() {
  OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator *self = [OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator alloc];
  OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisInterpolationSplineInterpolator)
