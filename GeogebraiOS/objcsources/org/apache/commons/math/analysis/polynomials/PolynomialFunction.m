//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/analysis/UnivariateRealFunction.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"
#include "org/apache/commons/math/exception/NoDataException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_serialVersionUID -7726511984200295583LL

@interface OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction () {
 @public
  IOSDoubleArray *coefficients_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction, coefficients_, IOSDoubleArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction, serialVersionUID, jlong)

@implementation OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)c {
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(self, c);
  return self;
}

- (jdouble)valueWithDouble:(jdouble)x {
  return OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_evaluateWithDoubleArray_withDouble_(coefficients_, x);
}

- (jint)degree {
  return ((IOSDoubleArray *) nil_chk(coefficients_))->size_ - 1;
}

- (IOSDoubleArray *)getCoefficients {
  return [((IOSDoubleArray *) nil_chk(coefficients_)) clone];
}

+ (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)coefficients
                        withDouble:(jdouble)argument {
  return OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_evaluateWithDoubleArray_withDouble_(coefficients, argument);
}

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)addWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)p {
  jint lowLength = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(((IOSDoubleArray *) nil_chk(coefficients_))->size_, ((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(p))->coefficients_->size_);
  jint highLength = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(coefficients_->size_, p->coefficients_->size_);
  IOSDoubleArray *newCoefficients = [IOSDoubleArray arrayWithLength:highLength];
  for (jint i = 0; i < lowLength; ++i) {
    *IOSDoubleArray_GetRef(newCoefficients, i) = IOSDoubleArray_Get(coefficients_, i) + IOSDoubleArray_Get(p->coefficients_, i);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_((coefficients_->size_ < p->coefficients_->size_) ? p->coefficients_ : coefficients_, lowLength, newCoefficients, lowLength, highLength - lowLength);
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(newCoefficients) autorelease];
}

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)subtractWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)p {
  jint lowLength = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(((IOSDoubleArray *) nil_chk(coefficients_))->size_, ((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(p))->coefficients_->size_);
  jint highLength = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(coefficients_->size_, p->coefficients_->size_);
  IOSDoubleArray *newCoefficients = [IOSDoubleArray arrayWithLength:highLength];
  for (jint i = 0; i < lowLength; ++i) {
    *IOSDoubleArray_GetRef(newCoefficients, i) = IOSDoubleArray_Get(coefficients_, i) - IOSDoubleArray_Get(p->coefficients_, i);
  }
  if (coefficients_->size_ < p->coefficients_->size_) {
    for (jint i = lowLength; i < highLength; ++i) {
      *IOSDoubleArray_GetRef(newCoefficients, i) = -IOSDoubleArray_Get(p->coefficients_, i);
    }
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(coefficients_, lowLength, newCoefficients, lowLength, highLength - lowLength);
  }
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(newCoefficients) autorelease];
}

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)negate {
  IOSDoubleArray *newCoefficients = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(coefficients_))->size_];
  for (jint i = 0; i < coefficients_->size_; ++i) {
    *IOSDoubleArray_GetRef(newCoefficients, i) = -IOSDoubleArray_Get(coefficients_, i);
  }
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(newCoefficients) autorelease];
}

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)multiplyWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)p {
  IOSDoubleArray *newCoefficients = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(coefficients_))->size_ + ((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(p))->coefficients_->size_ - 1];
  for (jint i = 0; i < newCoefficients->size_; ++i) {
    *IOSDoubleArray_GetRef(newCoefficients, i) = 0.0;
    for (jint j = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(0, i + 1 - p->coefficients_->size_); j < OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(coefficients_->size_, i + 1); ++j) {
      *IOSDoubleArray_GetRef(newCoefficients, i) += IOSDoubleArray_Get(coefficients_, j) * IOSDoubleArray_Get(p->coefficients_, i - j);
    }
  }
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(newCoefficients) autorelease];
}

+ (IOSDoubleArray *)differentiateWithDoubleArray:(IOSDoubleArray *)coefficients {
  return OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_differentiateWithDoubleArray_(coefficients);
}

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)polynomialDerivative {
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_differentiateWithDoubleArray_(coefficients_)) autorelease];
}

- (id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>)derivative {
  return [self polynomialDerivative];
}

- (NSString *)description {
  JavaLangStringBuilder *s = [new_JavaLangStringBuilder_init() autorelease];
  if (IOSDoubleArray_Get(nil_chk(coefficients_), 0) == 0.0) {
    if (coefficients_->size_ == 1) {
      return @"0";
    }
  }
  else {
    [s appendWithNSString:JavaLangDouble_toStringWithDouble_(IOSDoubleArray_Get(coefficients_, 0))];
  }
  for (jint i = 1; i < coefficients_->size_; ++i) {
    if (IOSDoubleArray_Get(coefficients_, i) != 0) {
      if ([s length] > 0) {
        if (IOSDoubleArray_Get(coefficients_, i) < 0) {
          [s appendWithNSString:@" - "];
        }
        else {
          [s appendWithNSString:@" + "];
        }
      }
      else {
        if (IOSDoubleArray_Get(coefficients_, i) < 0) {
          [s appendWithNSString:@"-"];
        }
      }
      jdouble absAi = OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(coefficients_, i));
      if ((absAi - 1) != 0) {
        [s appendWithNSString:JavaLangDouble_toStringWithDouble_(absAi)];
        [s appendWithChar:' '];
      }
      [s appendWithNSString:@"x"];
      if (i > 1) {
        [s appendWithChar:'^'];
        [s appendWithNSString:JavaLangInteger_toStringWithInt_(i)];
      }
    }
  }
  return [s description];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + JavaUtilArrays_hashCodeWithDoubleArray_(coefficients_);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (!([obj isKindOfClass:[OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction class]])) return NO;
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *other = (OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) check_class_cast(obj, [OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction class]);
  if (!JavaUtilArrays_equalsWithDoubleArray_withDoubleArray_(coefficients_, ((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(other))->coefficients_)) return NO;
  return YES;
}

- (void)dealloc {
  RELEASE_(coefficients_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDoubleArray:", "PolynomialFunction", NULL, 0x1, NULL, NULL },
    { "valueWithDouble:", "value", "D", 0x1, NULL, NULL },
    { "degree", NULL, "I", 0x1, NULL, NULL },
    { "getCoefficients", NULL, "[D", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:withDouble:", "evaluate", "D", 0xc, NULL, NULL },
    { "addWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:", "add", "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", 0x1, NULL, NULL },
    { "subtractWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:", "subtract", "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", 0x1, NULL, NULL },
    { "negate", NULL, "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", 0x1, NULL, NULL },
    { "multiplyWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:", "multiply", "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", 0x1, NULL, NULL },
    { "differentiateWithDoubleArray:", "differentiate", "[D", 0xc, NULL, NULL },
    { "polynomialDerivative", NULL, "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", 0x1, NULL, NULL },
    { "derivative", NULL, "Lorg.apache.commons.math.analysis.UnivariateRealFunction;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_serialVersionUID },
    { "coefficients_", NULL, 0x12, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction = { 2, "PolynomialFunction", "org.apache.commons.math.analysis.polynomials", NULL, 0x1, 15, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction;
}

@end

void OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *self, IOSDoubleArray *c) {
  NSObject_init(self);
  jint n = ((IOSDoubleArray *) nil_chk(c))->size_;
  if (n == 0) {
    @throw [new_OrgApacheCommonsMathExceptionNoDataException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY()) autorelease];
  }
  while ((n > 1) && (IOSDoubleArray_Get(c, n - 1) == 0)) {
    --n;
  }
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_setAndConsume_coefficients_(self, [IOSDoubleArray newArrayWithLength:n]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, self->coefficients_, 0, n);
}

OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(IOSDoubleArray *c) {
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *self = [OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction alloc];
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(self, c);
  return self;
}

jdouble OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_evaluateWithDoubleArray_withDouble_(IOSDoubleArray *coefficients, jdouble argument) {
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initialize();
  jint n = ((IOSDoubleArray *) nil_chk(coefficients))->size_;
  if (n == 0) {
    @throw [new_OrgApacheCommonsMathExceptionNoDataException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY()) autorelease];
  }
  jdouble result = IOSDoubleArray_Get(coefficients, n - 1);
  for (jint j = n - 2; j >= 0; j--) {
    result = argument * result + IOSDoubleArray_Get(coefficients, j);
  }
  return result;
}

IOSDoubleArray *OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_differentiateWithDoubleArray_(IOSDoubleArray *coefficients) {
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initialize();
  jint n = ((IOSDoubleArray *) nil_chk(coefficients))->size_;
  if (n == 0) {
    @throw [new_OrgApacheCommonsMathExceptionNoDataException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY()) autorelease];
  }
  if (n == 1) {
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0 } count:1];
  }
  IOSDoubleArray *result = [IOSDoubleArray arrayWithLength:n - 1];
  for (jint i = n - 1; i > 0; i--) {
    *IOSDoubleArray_GetRef(result, i - 1) = i * IOSDoubleArray_Get(coefficients, i);
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction)
