//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/ArgumentOutsideDomainException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/analysis/UnivariateRealFunction.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"

@interface OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction () {
 @public
  IOSDoubleArray *knots_;
  IOSObjectArray *polynomials_;
  jint n_;
}

+ (jboolean)isStrictlyIncreasingWithDoubleArray:(IOSDoubleArray *)x;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction, knots_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction, polynomials_, IOSObjectArray *)

__attribute__((unused)) static jboolean OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_isStrictlyIncreasingWithDoubleArray_(IOSDoubleArray *x);

@implementation OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)knots
withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray:(IOSObjectArray *)polynomials {
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_initWithDoubleArray_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray_(self, knots, polynomials);
  return self;
}

- (jdouble)valueWithDouble:(jdouble)v {
  if (v < IOSDoubleArray_Get(nil_chk(knots_), 0) || v > IOSDoubleArray_Get(knots_, n_)) {
    @throw new_OrgApacheCommonsMathArgumentOutsideDomainException_initWithDouble_withDouble_withDouble_(v, IOSDoubleArray_Get(knots_, 0), IOSDoubleArray_Get(knots_, n_));
  }
  jint i = JavaUtilArrays_binarySearchWithDoubleArray_withDouble_(knots_, v);
  if (i < 0) {
    i = -i - 2;
  }
  if (i >= ((IOSObjectArray *) nil_chk(polynomials_))->size_) {
    i--;
  }
  return [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(IOSObjectArray_Get(polynomials_, i))) valueWithDouble:v - IOSDoubleArray_Get(knots_, i)];
}

- (id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>)derivative {
  return [self polynomialSplineDerivative];
}

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction *)polynomialSplineDerivative {
  IOSObjectArray *derivativePolynomials = [IOSObjectArray newArrayWithLength:n_ type:OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_class_()];
  for (jint i = 0; i < n_; i++) {
    (void) IOSObjectArray_Set(derivativePolynomials, i, [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(IOSObjectArray_Get(nil_chk(polynomials_), i))) polynomialDerivative]);
  }
  return new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_initWithDoubleArray_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray_(knots_, derivativePolynomials);
}

- (jint)getN {
  return n_;
}

- (IOSObjectArray *)getPolynomials {
  IOSObjectArray *p = [IOSObjectArray newArrayWithLength:n_ type:OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(polynomials_, 0, p, 0, n_);
  return p;
}

- (IOSDoubleArray *)getKnots {
  IOSDoubleArray *out = [IOSDoubleArray newArrayWithLength:n_ + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(knots_, 0, out, 0, n_ + 1);
  return out;
}

+ (jboolean)isStrictlyIncreasingWithDoubleArray:(IOSDoubleArray *)x {
  return OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_isStrictlyIncreasingWithDoubleArray_(x);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDoubleArray:withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray:", "PolynomialSplineFunction", NULL, 0x1, NULL, NULL },
    { "valueWithDouble:", "value", "D", 0x1, "Lorg.apache.commons.math.ArgumentOutsideDomainException;", NULL },
    { "derivative", NULL, "Lorg.apache.commons.math.analysis.UnivariateRealFunction;", 0x1, NULL, NULL },
    { "polynomialSplineDerivative", NULL, "Lorg.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;", 0x1, NULL, NULL },
    { "getN", NULL, "I", 0x1, NULL, NULL },
    { "getPolynomials", NULL, "[Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", 0x1, NULL, NULL },
    { "getKnots", NULL, "[D", 0x1, NULL, NULL },
    { "isStrictlyIncreasingWithDoubleArray:", "isStrictlyIncreasing", "Z", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "knots_", NULL, 0x12, "[D", NULL, NULL,  },
    { "polynomials_", NULL, 0x12, "[Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", NULL, NULL,  },
    { "n_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction = { 2, "PolynomialSplineFunction", "org.apache.commons.math.analysis.polynomials", NULL, 0x1, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction;
}

@end

void OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_initWithDoubleArray_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray_(OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction *self, IOSDoubleArray *knots, IOSObjectArray *polynomials) {
  (void) NSObject_init(self);
  if (((IOSDoubleArray *) nil_chk(knots))->size_ < 2) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(knots->size_) } count:2 type:NSObject_class_()]);
  }
  if (knots->size_ - 1 != ((IOSObjectArray *) nil_chk(polynomials))->size_) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(polynomials->size_), JavaLangInteger_valueOfWithInt_(knots->size_) } count:2 type:NSObject_class_()]);
  }
  if (!OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_isStrictlyIncreasingWithDoubleArray_(knots)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_STRICTLY_INCREASING_KNOT_VALUES(), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  self->n_ = knots->size_ - 1;
  self->knots_ = [IOSDoubleArray newArrayWithLength:self->n_ + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(knots, 0, self->knots_, 0, self->n_ + 1);
  self->polynomials_ = [IOSObjectArray newArrayWithLength:self->n_ type:OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(polynomials, 0, self->polynomials_, 0, self->n_);
}

OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction *new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_initWithDoubleArray_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray_(IOSDoubleArray *knots, IOSObjectArray *polynomials) {
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction *self = [OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction alloc];
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_initWithDoubleArray_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionArray_(self, knots, polynomials);
  return self;
}

jboolean OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_isStrictlyIncreasingWithDoubleArray_(IOSDoubleArray *x) {
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction_initialize();
  for (jint i = 1; i < ((IOSDoubleArray *) nil_chk(x))->size_; ++i) {
    if (IOSDoubleArray_Get(x, i - 1) >= IOSDoubleArray_Get(x, i)) {
      return NO;
    }
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisPolynomialsPolynomialSplineFunction)
