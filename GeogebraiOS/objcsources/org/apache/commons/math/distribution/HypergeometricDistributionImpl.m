//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/distribution/AbstractIntegerDistribution.h"
#include "org/apache/commons/math/distribution/HypergeometricDistributionImpl.h"
#include "org/apache/commons/math/distribution/SaddlePointExpansion.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

#define OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_serialVersionUID -436928820673516179LL

@interface OrgApacheCommonsMathDistributionHypergeometricDistributionImpl () {
 @public
  jint numberOfSuccesses_;
  jint populationSize_;
  jint sampleSize_;
}

- (IOSIntArray *)getDomainWithInt:(jint)n
                          withInt:(jint)m
                          withInt:(jint)k;

- (jint)getLowerDomainWithInt:(jint)n
                      withInt:(jint)m
                      withInt:(jint)k;

- (jint)getUpperDomainWithInt:(jint)m
                      withInt:(jint)k;

- (jdouble)probabilityWithInt:(jint)n
                      withInt:(jint)m
                      withInt:(jint)k
                      withInt:(jint)x;

- (void)setNumberOfSuccessesInternalWithInt:(jint)num;

- (void)setPopulationSizeInternalWithInt:(jint)size;

- (void)setSampleSizeInternalWithInt:(jint)size;

- (jdouble)innerCumulativeProbabilityWithInt:(jint)x0
                                     withInt:(jint)x1
                                     withInt:(jint)dx
                                     withInt:(jint)n
                                     withInt:(jint)m
                                     withInt:(jint)k;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl, serialVersionUID, jlong)

__attribute__((unused)) static IOSIntArray *OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getDomainWithInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint n, jint m, jint k);

__attribute__((unused)) static jint OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getLowerDomainWithInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint n, jint m, jint k);

__attribute__((unused)) static jint OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getUpperDomainWithInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint m, jint k);

__attribute__((unused)) static jdouble OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_probabilityWithInt_withInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint n, jint m, jint k, jint x);

__attribute__((unused)) static void OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setNumberOfSuccessesInternalWithInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint num);

__attribute__((unused)) static void OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setPopulationSizeInternalWithInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint size);

__attribute__((unused)) static void OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setSampleSizeInternalWithInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint size);

__attribute__((unused)) static jdouble OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_innerCumulativeProbabilityWithInt_withInt_withInt_withInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint x0, jint x1, jint dx, jint n, jint m, jint k);

@implementation OrgApacheCommonsMathDistributionHypergeometricDistributionImpl

- (instancetype)initWithInt:(jint)populationSize
                    withInt:(jint)numberOfSuccesses
                    withInt:(jint)sampleSize {
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_initWithInt_withInt_withInt_(self, populationSize, numberOfSuccesses, sampleSize);
  return self;
}

- (jdouble)cumulativeProbabilityWithInt:(jint)x {
  jdouble ret;
  IOSIntArray *domain = OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getDomainWithInt_withInt_withInt_(self, populationSize_, numberOfSuccesses_, sampleSize_);
  if (x < IOSIntArray_Get(nil_chk(domain), 0)) {
    ret = 0.0;
  }
  else if (x >= IOSIntArray_Get(domain, 1)) {
    ret = 1.0;
  }
  else {
    ret = OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_innerCumulativeProbabilityWithInt_withInt_withInt_withInt_withInt_withInt_(self, IOSIntArray_Get(domain, 0), x, 1, populationSize_, numberOfSuccesses_, sampleSize_);
  }
  return ret;
}

- (IOSIntArray *)getDomainWithInt:(jint)n
                          withInt:(jint)m
                          withInt:(jint)k {
  return OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getDomainWithInt_withInt_withInt_(self, n, m, k);
}

- (jint)getDomainLowerBoundWithDouble:(jdouble)p {
  return OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getLowerDomainWithInt_withInt_withInt_(self, populationSize_, numberOfSuccesses_, sampleSize_);
}

- (jint)getDomainUpperBoundWithDouble:(jdouble)p {
  return OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getUpperDomainWithInt_withInt_(self, sampleSize_, numberOfSuccesses_);
}

- (jint)getLowerDomainWithInt:(jint)n
                      withInt:(jint)m
                      withInt:(jint)k {
  return OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getLowerDomainWithInt_withInt_withInt_(self, n, m, k);
}

- (jint)getNumberOfSuccesses {
  return numberOfSuccesses_;
}

- (jint)getPopulationSize {
  return populationSize_;
}

- (jint)getSampleSize {
  return sampleSize_;
}

- (jint)getUpperDomainWithInt:(jint)m
                      withInt:(jint)k {
  return OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getUpperDomainWithInt_withInt_(self, m, k);
}

- (jdouble)probabilityWithInt:(jint)x {
  jdouble ret;
  IOSIntArray *domain = OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getDomainWithInt_withInt_withInt_(self, populationSize_, numberOfSuccesses_, sampleSize_);
  if (x < IOSIntArray_Get(nil_chk(domain), 0) || x > IOSIntArray_Get(domain, 1)) {
    ret = 0.0;
  }
  else {
    jdouble p = (jdouble) sampleSize_ / (jdouble) populationSize_;
    jdouble q = (jdouble) (populationSize_ - sampleSize_) / (jdouble) populationSize_;
    jdouble p1 = OrgApacheCommonsMathDistributionSaddlePointExpansion_logBinomialProbabilityWithInt_withInt_withDouble_withDouble_(x, numberOfSuccesses_, p, q);
    jdouble p2 = OrgApacheCommonsMathDistributionSaddlePointExpansion_logBinomialProbabilityWithInt_withInt_withDouble_withDouble_(sampleSize_ - x, populationSize_ - numberOfSuccesses_, p, q);
    jdouble p3 = OrgApacheCommonsMathDistributionSaddlePointExpansion_logBinomialProbabilityWithInt_withInt_withDouble_withDouble_(sampleSize_, populationSize_, p, q);
    ret = OrgApacheCommonsMathUtilFastMath_expWithDouble_(p1 + p2 - p3);
  }
  return ret;
}

- (jdouble)probabilityWithInt:(jint)n
                      withInt:(jint)m
                      withInt:(jint)k
                      withInt:(jint)x {
  return OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_probabilityWithInt_withInt_withInt_withInt_(self, n, m, k, x);
}

- (void)setNumberOfSuccessesWithInt:(jint)num {
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setNumberOfSuccessesInternalWithInt_(self, num);
}

- (void)setNumberOfSuccessesInternalWithInt:(jint)num {
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setNumberOfSuccessesInternalWithInt_(self, num);
}

- (void)setPopulationSizeWithInt:(jint)size {
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setPopulationSizeInternalWithInt_(self, size);
}

- (void)setPopulationSizeInternalWithInt:(jint)size {
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setPopulationSizeInternalWithInt_(self, size);
}

- (void)setSampleSizeWithInt:(jint)size {
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setSampleSizeInternalWithInt_(self, size);
}

- (void)setSampleSizeInternalWithInt:(jint)size {
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setSampleSizeInternalWithInt_(self, size);
}

- (jdouble)upperCumulativeProbabilityWithInt:(jint)x {
  jdouble ret;
  IOSIntArray *domain = OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getDomainWithInt_withInt_withInt_(self, populationSize_, numberOfSuccesses_, sampleSize_);
  if (x < IOSIntArray_Get(nil_chk(domain), 0)) {
    ret = 1.0;
  }
  else if (x > IOSIntArray_Get(domain, 1)) {
    ret = 0.0;
  }
  else {
    ret = OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_innerCumulativeProbabilityWithInt_withInt_withInt_withInt_withInt_withInt_(self, IOSIntArray_Get(domain, 1), x, -1, populationSize_, numberOfSuccesses_, sampleSize_);
  }
  return ret;
}

- (jdouble)innerCumulativeProbabilityWithInt:(jint)x0
                                     withInt:(jint)x1
                                     withInt:(jint)dx
                                     withInt:(jint)n
                                     withInt:(jint)m
                                     withInt:(jint)k {
  return OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_innerCumulativeProbabilityWithInt_withInt_withInt_withInt_withInt_withInt_(self, x0, x1, dx, n, m, k);
}

- (jint)getSupportLowerBound {
  return OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(0, [self getSampleSize] + [self getNumberOfSuccesses] - [self getPopulationSize]);
}

- (jint)getSupportUpperBound {
  return OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_([self getNumberOfSuccesses], [self getSampleSize]);
}

- (jdouble)getNumericalMean {
  return (jdouble) ([self getSampleSize] * [self getNumberOfSuccesses]) / (jdouble) [self getPopulationSize];
}

- (jdouble)getNumericalVariance {
  jdouble N = [self getPopulationSize];
  jdouble m = [self getNumberOfSuccesses];
  jdouble n = [self getSampleSize];
  return (n * m * (N - n) * (N - m)) / ((N * N * (N - 1)));
}

+ (IOSObjectArray *)__annotations_setNumberOfSuccessesWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setPopulationSizeWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setSampleSizeWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:", "HypergeometricDistributionImpl", NULL, 0x1, NULL, NULL },
    { "cumulativeProbabilityWithInt:", "cumulativeProbability", "D", 0x1, NULL, NULL },
    { "getDomainWithInt:withInt:withInt:", "getDomain", "[I", 0x2, NULL, NULL },
    { "getDomainLowerBoundWithDouble:", "getDomainLowerBound", "I", 0x4, NULL, NULL },
    { "getDomainUpperBoundWithDouble:", "getDomainUpperBound", "I", 0x4, NULL, NULL },
    { "getLowerDomainWithInt:withInt:withInt:", "getLowerDomain", "I", 0x2, NULL, NULL },
    { "getNumberOfSuccesses", NULL, "I", 0x1, NULL, NULL },
    { "getPopulationSize", NULL, "I", 0x1, NULL, NULL },
    { "getSampleSize", NULL, "I", 0x1, NULL, NULL },
    { "getUpperDomainWithInt:withInt:", "getUpperDomain", "I", 0x2, NULL, NULL },
    { "probabilityWithInt:", "probability", "D", 0x1, NULL, NULL },
    { "probabilityWithInt:withInt:withInt:withInt:", "probability", "D", 0x2, NULL, NULL },
    { "setNumberOfSuccessesWithInt:", "setNumberOfSuccesses", "V", 0x1, NULL, NULL },
    { "setNumberOfSuccessesInternalWithInt:", "setNumberOfSuccessesInternal", "V", 0x2, NULL, NULL },
    { "setPopulationSizeWithInt:", "setPopulationSize", "V", 0x1, NULL, NULL },
    { "setPopulationSizeInternalWithInt:", "setPopulationSizeInternal", "V", 0x2, NULL, NULL },
    { "setSampleSizeWithInt:", "setSampleSize", "V", 0x1, NULL, NULL },
    { "setSampleSizeInternalWithInt:", "setSampleSizeInternal", "V", 0x2, NULL, NULL },
    { "upperCumulativeProbabilityWithInt:", "upperCumulativeProbability", "D", 0x1, NULL, NULL },
    { "innerCumulativeProbabilityWithInt:withInt:withInt:withInt:withInt:withInt:", "innerCumulativeProbability", "D", 0x2, NULL, NULL },
    { "getSupportLowerBound", NULL, "I", 0x1, NULL, NULL },
    { "getSupportUpperBound", NULL, "I", 0x1, NULL, NULL },
    { "getNumericalMean", NULL, "D", 0x4, NULL, NULL },
    { "getNumericalVariance", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_serialVersionUID },
    { "numberOfSuccesses_", NULL, 0x2, "I", NULL, NULL,  },
    { "populationSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "sampleSize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDistributionHypergeometricDistributionImpl = { 2, "HypergeometricDistributionImpl", "org.apache.commons.math.distribution", NULL, 0x1, 24, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDistributionHypergeometricDistributionImpl;
}

@end

void OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_initWithInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint populationSize, jint numberOfSuccesses, jint sampleSize) {
  OrgApacheCommonsMathDistributionAbstractIntegerDistribution_init(self);
  if (numberOfSuccesses > populationSize) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numberOfSuccesses), JavaLangInteger_valueOfWithInt_(populationSize) } count:2 type:NSObject_class_()]);
  }
  if (sampleSize > populationSize) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(sampleSize), JavaLangInteger_valueOfWithInt_(populationSize) } count:2 type:NSObject_class_()]);
  }
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setPopulationSizeInternalWithInt_(self, populationSize);
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setSampleSizeInternalWithInt_(self, sampleSize);
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setNumberOfSuccessesInternalWithInt_(self, numberOfSuccesses);
}

OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *new_OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_initWithInt_withInt_withInt_(jint populationSize, jint numberOfSuccesses, jint sampleSize) {
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self = [OrgApacheCommonsMathDistributionHypergeometricDistributionImpl alloc];
  OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_initWithInt_withInt_withInt_(self, populationSize, numberOfSuccesses, sampleSize);
  return self;
}

IOSIntArray *OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getDomainWithInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint n, jint m, jint k) {
  return [IOSIntArray arrayWithInts:(jint[]){ OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getLowerDomainWithInt_withInt_withInt_(self, n, m, k), OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getUpperDomainWithInt_withInt_(self, m, k) } count:2];
}

jint OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getLowerDomainWithInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint n, jint m, jint k) {
  return OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(0, m - (n - k));
}

jint OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_getUpperDomainWithInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint m, jint k) {
  return OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(k, m);
}

jdouble OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_probabilityWithInt_withInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint n, jint m, jint k, jint x) {
  return OrgApacheCommonsMathUtilFastMath_expWithDouble_(OrgApacheCommonsMathUtilMathUtils_binomialCoefficientLogWithInt_withInt_(m, x) + OrgApacheCommonsMathUtilMathUtils_binomialCoefficientLogWithInt_withInt_(n - m, k - x) - OrgApacheCommonsMathUtilMathUtils_binomialCoefficientLogWithInt_withInt_(n, k));
}

void OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setNumberOfSuccessesInternalWithInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint num) {
  if (num < 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NEGATIVE_NUMBER_OF_SUCCESSES(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(num) } count:1 type:NSObject_class_()]);
  }
  self->numberOfSuccesses_ = num;
}

void OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setPopulationSizeInternalWithInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint size) {
  if (size <= 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POSITIVE_POPULATION_SIZE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(size) } count:1 type:NSObject_class_()]);
  }
  self->populationSize_ = size;
}

void OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_setSampleSizeInternalWithInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint size) {
  if (size < 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POSITIVE_SAMPLE_SIZE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(size) } count:1 type:NSObject_class_()]);
  }
  self->sampleSize_ = size;
}

jdouble OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_innerCumulativeProbabilityWithInt_withInt_withInt_withInt_withInt_withInt_(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl *self, jint x0, jint x1, jint dx, jint n, jint m, jint k) {
  jdouble ret = OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_probabilityWithInt_withInt_withInt_withInt_(self, n, m, k, x0);
  while (x0 != x1) {
    x0 += dx;
    ret += OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_probabilityWithInt_withInt_withInt_withInt_(self, n, m, k, x0);
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDistributionHypergeometricDistributionImpl)
