//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/distribution/NormalDistributionImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/distribution/AbstractContinuousDistribution.h"
#include "org/apache/commons/math/distribution/NormalDistributionImpl.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/random/RandomDataImpl.h"
#include "org/apache/commons/math/special/Erf.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathDistributionNormalDistributionImpl_serialVersionUID 8589540077390120676LL

@interface OrgApacheCommonsMathDistributionNormalDistributionImpl () {
 @public
  jdouble mean_;
  jdouble standardDeviation_;
  jdouble solverAbsoluteAccuracy_NormalDistributionImpl_;
}

- (void)setMeanInternalWithDouble:(jdouble)newMean;

- (void)setStandardDeviationInternalWithDouble:(jdouble)sd;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDistributionNormalDistributionImpl, serialVersionUID, jlong)

static jdouble OrgApacheCommonsMathDistributionNormalDistributionImpl_SQRT2PI_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDistributionNormalDistributionImpl, SQRT2PI_, jdouble)

__attribute__((unused)) static void OrgApacheCommonsMathDistributionNormalDistributionImpl_setMeanInternalWithDouble_(OrgApacheCommonsMathDistributionNormalDistributionImpl *self, jdouble newMean);

__attribute__((unused)) static void OrgApacheCommonsMathDistributionNormalDistributionImpl_setStandardDeviationInternalWithDouble_(OrgApacheCommonsMathDistributionNormalDistributionImpl *self, jdouble sd);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathDistributionNormalDistributionImpl)

@implementation OrgApacheCommonsMathDistributionNormalDistributionImpl

- (instancetype)initWithDouble:(jdouble)mean
                    withDouble:(jdouble)sd {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(self, mean, sd);
  return self;
}

- (instancetype)initWithDouble:(jdouble)mean
                    withDouble:(jdouble)sd
                    withDouble:(jdouble)inverseCumAccuracy {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_withDouble_(self, mean, sd, inverseCumAccuracy);
  return self;
}

- (instancetype)init {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_init(self);
  return self;
}

- (jdouble)getMean {
  return mean_;
}

- (void)setMeanWithDouble:(jdouble)mean {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_setMeanInternalWithDouble_(self, mean);
}

- (void)setMeanInternalWithDouble:(jdouble)newMean {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_setMeanInternalWithDouble_(self, newMean);
}

- (jdouble)getStandardDeviation {
  return standardDeviation_;
}

- (void)setStandardDeviationWithDouble:(jdouble)sd {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_setStandardDeviationInternalWithDouble_(self, sd);
}

- (void)setStandardDeviationInternalWithDouble:(jdouble)sd {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_setStandardDeviationInternalWithDouble_(self, sd);
}

- (jdouble)densityWithId:(JavaLangDouble *)x {
  return [self densityWithDouble:[((JavaLangDouble *) nil_chk(x)) doubleValue]];
}

- (jdouble)densityWithDouble:(jdouble)x {
  jdouble x0 = x - mean_;
  return OrgApacheCommonsMathUtilFastMath_expWithDouble_(-x0 * x0 / (2 * standardDeviation_ * standardDeviation_)) / (standardDeviation_ * OrgApacheCommonsMathDistributionNormalDistributionImpl_SQRT2PI_);
}

- (jdouble)cumulativeProbabilityWithDouble:(jdouble)x {
  jdouble dev = x - mean_;
  if (OrgApacheCommonsMathUtilFastMath_absWithDouble_(dev) > 40 * standardDeviation_) {
    return dev < 0 ? 0.0 : 1.0;
  }
  return 0.5 * (1.0 + OrgApacheCommonsMathSpecialErf_erfWithDouble_(dev / (standardDeviation_ * OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(2.0))));
}

- (jdouble)getSolverAbsoluteAccuracy {
  return solverAbsoluteAccuracy_NormalDistributionImpl_;
}

- (jdouble)inverseCumulativeProbabilityWithDouble:(jdouble)p {
  if (p == 0) {
    return JavaLangDouble_NEGATIVE_INFINITY;
  }
  if (p == 1) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  return [super inverseCumulativeProbabilityWithDouble:p];
}

- (jdouble)sample {
  return [((OrgApacheCommonsMathRandomRandomDataImpl *) nil_chk(randomData_)) nextGaussianWithDouble:mean_ withDouble:standardDeviation_];
}

- (jdouble)getDomainLowerBoundWithDouble:(jdouble)p {
  jdouble ret;
  if (p < .5) {
    ret = -JavaLangDouble_MAX_VALUE;
  }
  else {
    ret = mean_;
  }
  return ret;
}

- (jdouble)getDomainUpperBoundWithDouble:(jdouble)p {
  jdouble ret;
  if (p < .5) {
    ret = mean_;
  }
  else {
    ret = JavaLangDouble_MAX_VALUE;
  }
  return ret;
}

- (jdouble)getInitialDomainWithDouble:(jdouble)p {
  jdouble ret;
  if (p < .5) {
    ret = mean_ - standardDeviation_;
  }
  else if (p > .5) {
    ret = mean_ + standardDeviation_;
  }
  else {
    ret = mean_;
  }
  return ret;
}

- (jdouble)getSupportLowerBound {
  return JavaLangDouble_NEGATIVE_INFINITY;
}

- (jdouble)getSupportUpperBound {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jdouble)getNumericalVariance {
  jdouble s = [self getStandardDeviation];
  return s * s;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathDistributionNormalDistributionImpl class]) {
    OrgApacheCommonsMathDistributionNormalDistributionImpl_SQRT2PI_ = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(2 * OrgApacheCommonsMathUtilFastMath_PI);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathDistributionNormalDistributionImpl)
  }
}

+ (IOSObjectArray *)__annotations_setMeanWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setStandardDeviationWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_densityWithJavaLangDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:", "NormalDistributionImpl", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:", "NormalDistributionImpl", NULL, 0x1, NULL, NULL },
    { "init", "NormalDistributionImpl", NULL, 0x1, NULL, NULL },
    { "getMean", NULL, "D", 0x1, NULL, NULL },
    { "setMeanWithDouble:", "setMean", "V", 0x1, NULL, NULL },
    { "setMeanInternalWithDouble:", "setMeanInternal", "V", 0x2, NULL, NULL },
    { "getStandardDeviation", NULL, "D", 0x1, NULL, NULL },
    { "setStandardDeviationWithDouble:", "setStandardDeviation", "V", 0x1, NULL, NULL },
    { "setStandardDeviationInternalWithDouble:", "setStandardDeviationInternal", "V", 0x2, NULL, NULL },
    { "densityWithId:", "density", "D", 0x1, NULL, NULL },
    { "densityWithDouble:", "density", "D", 0x1, NULL, NULL },
    { "cumulativeProbabilityWithDouble:", "cumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "getSolverAbsoluteAccuracy", NULL, "D", 0x4, NULL, NULL },
    { "inverseCumulativeProbabilityWithDouble:", "inverseCumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "sample", NULL, "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "getDomainLowerBoundWithDouble:", "getDomainLowerBound", "D", 0x4, NULL, NULL },
    { "getDomainUpperBoundWithDouble:", "getDomainUpperBound", "D", 0x4, NULL, NULL },
    { "getInitialDomainWithDouble:", "getInitialDomain", "D", 0x4, NULL, NULL },
    { "getSupportLowerBound", NULL, "D", 0x1, NULL, NULL },
    { "getSupportUpperBound", NULL, "D", 0x1, NULL, NULL },
    { "getNumericalVariance", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INVERSE_ABSOLUTE_ACCURACY_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathDistributionNormalDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathDistributionNormalDistributionImpl_serialVersionUID },
    { "SQRT2PI_", NULL, 0x1a, "D", &OrgApacheCommonsMathDistributionNormalDistributionImpl_SQRT2PI_, NULL,  },
    { "mean_", NULL, 0x2, "D", NULL, NULL,  },
    { "standardDeviation_", NULL, 0x2, "D", NULL, NULL,  },
    { "solverAbsoluteAccuracy_NormalDistributionImpl_", "solverAbsoluteAccuracy", 0x12, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDistributionNormalDistributionImpl = { 2, "NormalDistributionImpl", "org.apache.commons.math.distribution", NULL, 0x1, 21, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDistributionNormalDistributionImpl;
}

@end

void OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(OrgApacheCommonsMathDistributionNormalDistributionImpl *self, jdouble mean, jdouble sd) {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_withDouble_(self, mean, sd, OrgApacheCommonsMathDistributionNormalDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
}

OrgApacheCommonsMathDistributionNormalDistributionImpl *new_OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(jdouble mean, jdouble sd) {
  OrgApacheCommonsMathDistributionNormalDistributionImpl *self = [OrgApacheCommonsMathDistributionNormalDistributionImpl alloc];
  OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(self, mean, sd);
  return self;
}

void OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_withDouble_(OrgApacheCommonsMathDistributionNormalDistributionImpl *self, jdouble mean, jdouble sd, jdouble inverseCumAccuracy) {
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_init(self);
  self->mean_ = 0;
  self->standardDeviation_ = 1;
  OrgApacheCommonsMathDistributionNormalDistributionImpl_setMeanInternalWithDouble_(self, mean);
  OrgApacheCommonsMathDistributionNormalDistributionImpl_setStandardDeviationInternalWithDouble_(self, sd);
  self->solverAbsoluteAccuracy_NormalDistributionImpl_ = inverseCumAccuracy;
}

OrgApacheCommonsMathDistributionNormalDistributionImpl *new_OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_withDouble_(jdouble mean, jdouble sd, jdouble inverseCumAccuracy) {
  OrgApacheCommonsMathDistributionNormalDistributionImpl *self = [OrgApacheCommonsMathDistributionNormalDistributionImpl alloc];
  OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_withDouble_(self, mean, sd, inverseCumAccuracy);
  return self;
}

void OrgApacheCommonsMathDistributionNormalDistributionImpl_init(OrgApacheCommonsMathDistributionNormalDistributionImpl *self) {
  OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(self, 0.0, 1.0);
}

OrgApacheCommonsMathDistributionNormalDistributionImpl *new_OrgApacheCommonsMathDistributionNormalDistributionImpl_init() {
  OrgApacheCommonsMathDistributionNormalDistributionImpl *self = [OrgApacheCommonsMathDistributionNormalDistributionImpl alloc];
  OrgApacheCommonsMathDistributionNormalDistributionImpl_init(self);
  return self;
}

void OrgApacheCommonsMathDistributionNormalDistributionImpl_setMeanInternalWithDouble_(OrgApacheCommonsMathDistributionNormalDistributionImpl *self, jdouble newMean) {
  self->mean_ = newMean;
}

void OrgApacheCommonsMathDistributionNormalDistributionImpl_setStandardDeviationInternalWithDouble_(OrgApacheCommonsMathDistributionNormalDistributionImpl *self, jdouble sd) {
  if (sd <= 0.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POSITIVE_STANDARD_DEVIATION(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(sd) } count:1 type:NSObject_class_()]);
  }
  self->standardDeviation_ = sd;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDistributionNormalDistributionImpl)
