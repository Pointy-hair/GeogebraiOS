//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/distribution/TDistributionImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/distribution/AbstractContinuousDistribution.h"
#include "org/apache/commons/math/distribution/TDistributionImpl.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/special/Beta.h"
#include "org/apache/commons/math/special/Gamma.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathDistributionTDistributionImpl_serialVersionUID -5852615386664158222LL

@interface OrgApacheCommonsMathDistributionTDistributionImpl () {
 @public
  jdouble degreesOfFreedom_;
  jdouble solverAbsoluteAccuracy_TDistributionImpl_;
}

- (void)setDegreesOfFreedomInternalWithDouble:(jdouble)newDegreesOfFreedom;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDistributionTDistributionImpl, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsMathDistributionTDistributionImpl_setDegreesOfFreedomInternalWithDouble_(OrgApacheCommonsMathDistributionTDistributionImpl *self, jdouble newDegreesOfFreedom);

@implementation OrgApacheCommonsMathDistributionTDistributionImpl

- (instancetype)initWithDouble:(jdouble)degreesOfFreedom
                    withDouble:(jdouble)inverseCumAccuracy {
  OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_withDouble_(self, degreesOfFreedom, inverseCumAccuracy);
  return self;
}

- (instancetype)initWithDouble:(jdouble)degreesOfFreedom {
  OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(self, degreesOfFreedom);
  return self;
}

- (void)setDegreesOfFreedomWithDouble:(jdouble)degreesOfFreedom {
  OrgApacheCommonsMathDistributionTDistributionImpl_setDegreesOfFreedomInternalWithDouble_(self, degreesOfFreedom);
}

- (void)setDegreesOfFreedomInternalWithDouble:(jdouble)newDegreesOfFreedom {
  OrgApacheCommonsMathDistributionTDistributionImpl_setDegreesOfFreedomInternalWithDouble_(self, newDegreesOfFreedom);
}

- (jdouble)getDegreesOfFreedom {
  return degreesOfFreedom_;
}

- (jdouble)densityWithDouble:(jdouble)x {
  jdouble n = degreesOfFreedom_;
  jdouble nPlus1Over2 = (n + 1) / 2;
  return OrgApacheCommonsMathUtilFastMath_expWithDouble_(OrgApacheCommonsMathSpecialGamma_logGammaWithDouble_(nPlus1Over2) - 0.5 * (OrgApacheCommonsMathUtilFastMath_logWithDouble_(OrgApacheCommonsMathUtilFastMath_PI) + OrgApacheCommonsMathUtilFastMath_logWithDouble_(n)) - OrgApacheCommonsMathSpecialGamma_logGammaWithDouble_(n / 2) - nPlus1Over2 * OrgApacheCommonsMathUtilFastMath_logWithDouble_(1 + x * x / n));
}

- (jdouble)cumulativeProbabilityWithDouble:(jdouble)x {
  jdouble ret;
  if (x == 0.0) {
    ret = 0.5;
  }
  else {
    jdouble t = OrgApacheCommonsMathSpecialBeta_regularizedBetaWithDouble_withDouble_withDouble_(degreesOfFreedom_ / (degreesOfFreedom_ + (x * x)), 0.5 * degreesOfFreedom_, 0.5);
    if (x < 0.0) {
      ret = 0.5 * t;
    }
    else {
      ret = 1.0 - 0.5 * t;
    }
  }
  return ret;
}

- (jdouble)inverseCumulativeProbabilityWithDouble:(jdouble)p {
  if (p == 0) {
    return JavaLangDouble_NEGATIVE_INFINITY;
  }
  if (p == 1) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  return [super inverseCumulativeProbabilityWithDouble:p];
}

- (jdouble)getDomainLowerBoundWithDouble:(jdouble)p {
  return -JavaLangDouble_MAX_VALUE;
}

- (jdouble)getDomainUpperBoundWithDouble:(jdouble)p {
  return JavaLangDouble_MAX_VALUE;
}

- (jdouble)getInitialDomainWithDouble:(jdouble)p {
  return 0.0;
}

- (jdouble)getSolverAbsoluteAccuracy {
  return solverAbsoluteAccuracy_TDistributionImpl_;
}

- (jdouble)getSupportLowerBound {
  return JavaLangDouble_NEGATIVE_INFINITY;
}

- (jdouble)getSupportUpperBound {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jdouble)getNumericalMean {
  jdouble df = [self getDegreesOfFreedom];
  if (df > 1) {
    return 0;
  }
  return JavaLangDouble_NaN;
}

- (jdouble)getNumericalVariance {
  jdouble df = [self getDegreesOfFreedom];
  if (df > 2) {
    return df / (df - 2);
  }
  if (df > 1 && df <= 2) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  return JavaLangDouble_NaN;
}

+ (IOSObjectArray *)__annotations_setDegreesOfFreedomWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:", "TDistributionImpl", NULL, 0x1, NULL, NULL },
    { "initWithDouble:", "TDistributionImpl", NULL, 0x1, NULL, NULL },
    { "setDegreesOfFreedomWithDouble:", "setDegreesOfFreedom", "V", 0x1, NULL, NULL },
    { "setDegreesOfFreedomInternalWithDouble:", "setDegreesOfFreedomInternal", "V", 0x2, NULL, NULL },
    { "getDegreesOfFreedom", NULL, "D", 0x1, NULL, NULL },
    { "densityWithDouble:", "density", "D", 0x1, NULL, NULL },
    { "cumulativeProbabilityWithDouble:", "cumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "inverseCumulativeProbabilityWithDouble:", "inverseCumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "getDomainLowerBoundWithDouble:", "getDomainLowerBound", "D", 0x4, NULL, NULL },
    { "getDomainUpperBoundWithDouble:", "getDomainUpperBound", "D", 0x4, NULL, NULL },
    { "getInitialDomainWithDouble:", "getInitialDomain", "D", 0x4, NULL, NULL },
    { "getSolverAbsoluteAccuracy", NULL, "D", 0x4, NULL, NULL },
    { "getSupportLowerBound", NULL, "D", 0x1, NULL, NULL },
    { "getSupportUpperBound", NULL, "D", 0x1, NULL, NULL },
    { "getNumericalMean", NULL, "D", 0x1, NULL, NULL },
    { "getNumericalVariance", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INVERSE_ABSOLUTE_ACCURACY_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathDistributionTDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathDistributionTDistributionImpl_serialVersionUID },
    { "degreesOfFreedom_", NULL, 0x2, "D", NULL, NULL,  },
    { "solverAbsoluteAccuracy_TDistributionImpl_", "solverAbsoluteAccuracy", 0x12, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDistributionTDistributionImpl = { 2, "TDistributionImpl", "org.apache.commons.math.distribution", NULL, 0x1, 16, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDistributionTDistributionImpl;
}

@end

void OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_withDouble_(OrgApacheCommonsMathDistributionTDistributionImpl *self, jdouble degreesOfFreedom, jdouble inverseCumAccuracy) {
  (void) OrgApacheCommonsMathDistributionAbstractContinuousDistribution_init(self);
  OrgApacheCommonsMathDistributionTDistributionImpl_setDegreesOfFreedomInternalWithDouble_(self, degreesOfFreedom);
  self->solverAbsoluteAccuracy_TDistributionImpl_ = inverseCumAccuracy;
}

OrgApacheCommonsMathDistributionTDistributionImpl *new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_withDouble_(jdouble degreesOfFreedom, jdouble inverseCumAccuracy) {
  OrgApacheCommonsMathDistributionTDistributionImpl *self = [OrgApacheCommonsMathDistributionTDistributionImpl alloc];
  OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_withDouble_(self, degreesOfFreedom, inverseCumAccuracy);
  return self;
}

void OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(OrgApacheCommonsMathDistributionTDistributionImpl *self, jdouble degreesOfFreedom) {
  (void) OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_withDouble_(self, degreesOfFreedom, OrgApacheCommonsMathDistributionTDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
}

OrgApacheCommonsMathDistributionTDistributionImpl *new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(jdouble degreesOfFreedom) {
  OrgApacheCommonsMathDistributionTDistributionImpl *self = [OrgApacheCommonsMathDistributionTDistributionImpl alloc];
  OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(self, degreesOfFreedom);
  return self;
}

void OrgApacheCommonsMathDistributionTDistributionImpl_setDegreesOfFreedomInternalWithDouble_(OrgApacheCommonsMathDistributionTDistributionImpl *self, jdouble newDegreesOfFreedom) {
  if (newDegreesOfFreedom <= 0.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POSITIVE_DEGREES_OF_FREEDOM(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(newDegreesOfFreedom) } count:1 type:NSObject_class_()]);
  }
  self->degreesOfFreedom_ = newDegreesOfFreedom;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDistributionTDistributionImpl)
