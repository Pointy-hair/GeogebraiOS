//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/math/distribution/WeibullDistributionImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/distribution/AbstractContinuousDistribution.h"
#include "org/apache/commons/math/distribution/WeibullDistributionImpl.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/special/Gamma.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathDistributionWeibullDistributionImpl_serialVersionUID 8589540077390120676LL

@interface OrgApacheCommonsMathDistributionWeibullDistributionImpl () {
 @public
  jdouble shape_;
  jdouble scale__;
  jdouble solverAbsoluteAccuracy_WeibullDistributionImpl_;
  jdouble numericalMean_;
  jboolean numericalMeanIsCalculated_;
  jdouble numericalVariance_;
  jboolean numericalVarianceIsCalculated_;
}

- (void)setShapeInternalWithDouble:(jdouble)alpha;

- (void)setScaleInternalWithDouble:(jdouble)beta;

- (jdouble)calculateNumericalVariance;

- (void)invalidateParameterDependentMoments;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDistributionWeibullDistributionImpl, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsMathDistributionWeibullDistributionImpl_setShapeInternalWithDouble_(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self, jdouble alpha);

__attribute__((unused)) static void OrgApacheCommonsMathDistributionWeibullDistributionImpl_setScaleInternalWithDouble_(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self, jdouble beta);

__attribute__((unused)) static jdouble OrgApacheCommonsMathDistributionWeibullDistributionImpl_calculateNumericalVariance(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self);

__attribute__((unused)) static void OrgApacheCommonsMathDistributionWeibullDistributionImpl_invalidateParameterDependentMoments(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self);

@implementation OrgApacheCommonsMathDistributionWeibullDistributionImpl

- (instancetype)initWithDouble:(jdouble)alpha
                    withDouble:(jdouble)beta {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_(self, alpha, beta);
  return self;
}

- (instancetype)initWithDouble:(jdouble)alpha
                    withDouble:(jdouble)beta
                    withDouble:(jdouble)inverseCumAccuracy {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_withDouble_(self, alpha, beta, inverseCumAccuracy);
  return self;
}

- (jdouble)cumulativeProbabilityWithDouble:(jdouble)x {
  jdouble ret;
  if (x <= 0.0) {
    ret = 0.0;
  }
  else {
    ret = 1.0 - OrgApacheCommonsMathUtilFastMath_expWithDouble_(-OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(x / scale__, shape_));
  }
  return ret;
}

- (jdouble)getShape {
  return shape_;
}

- (jdouble)getScale {
  return scale__;
}

- (jdouble)densityWithDouble:(jdouble)x {
  if (x < 0) {
    return 0;
  }
  jdouble xscale = x / scale__;
  jdouble xscalepow = OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(xscale, shape_ - 1);
  jdouble xscalepowshape = xscalepow * xscale;
  return (shape_ / scale__) * xscalepow * OrgApacheCommonsMathUtilFastMath_expWithDouble_(-xscalepowshape);
}

- (jdouble)inverseCumulativeProbabilityWithDouble:(jdouble)p {
  jdouble ret;
  if (p < 0.0 || p > 1.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OUT_OF_RANGE_SIMPLE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(p), JavaLangDouble_valueOfWithDouble_(0.0), JavaLangDouble_valueOfWithDouble_(1.0) } count:3 type:NSObject_class_()]);
  }
  else if (p == 0) {
    ret = 0.0;
  }
  else if (p == 1) {
    ret = JavaLangDouble_POSITIVE_INFINITY;
  }
  else {
    ret = scale__ * OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(-OrgApacheCommonsMathUtilFastMath_logWithDouble_(1.0 - p), 1.0 / shape_);
  }
  return ret;
}

- (void)setShapeWithDouble:(jdouble)alpha {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_setShapeInternalWithDouble_(self, alpha);
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_invalidateParameterDependentMoments(self);
}

- (void)setShapeInternalWithDouble:(jdouble)alpha {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_setShapeInternalWithDouble_(self, alpha);
}

- (void)setScaleWithDouble:(jdouble)beta {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_setScaleInternalWithDouble_(self, beta);
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_invalidateParameterDependentMoments(self);
}

- (void)setScaleInternalWithDouble:(jdouble)beta {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_setScaleInternalWithDouble_(self, beta);
}

- (jdouble)getDomainLowerBoundWithDouble:(jdouble)p {
  return 0.0;
}

- (jdouble)getDomainUpperBoundWithDouble:(jdouble)p {
  return JavaLangDouble_MAX_VALUE;
}

- (jdouble)getInitialDomainWithDouble:(jdouble)p {
  return OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(scale__ * OrgApacheCommonsMathUtilFastMath_logWithDouble_(2.0), 1.0 / shape_);
}

- (jdouble)getSolverAbsoluteAccuracy {
  return solverAbsoluteAccuracy_WeibullDistributionImpl_;
}

- (jdouble)getSupportLowerBound {
  return 0;
}

- (jdouble)getSupportUpperBound {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jdouble)calculateNumericalMean {
  jdouble sh = [self getShape];
  jdouble sc = [self getScale];
  return sc * OrgApacheCommonsMathUtilFastMath_expWithDouble_(OrgApacheCommonsMathSpecialGamma_logGammaWithDouble_(1 + (1 / sh)));
}

- (jdouble)calculateNumericalVariance {
  return OrgApacheCommonsMathDistributionWeibullDistributionImpl_calculateNumericalVariance(self);
}

- (jdouble)getNumericalMean {
  if (!numericalMeanIsCalculated_) {
    numericalMean_ = [self calculateNumericalMean];
    numericalMeanIsCalculated_ = YES;
  }
  return numericalMean_;
}

- (jdouble)getNumericalVariance {
  if (!numericalVarianceIsCalculated_) {
    numericalVariance_ = OrgApacheCommonsMathDistributionWeibullDistributionImpl_calculateNumericalVariance(self);
    numericalVarianceIsCalculated_ = YES;
  }
  return numericalVariance_;
}

- (void)invalidateParameterDependentMoments {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_invalidateParameterDependentMoments(self);
}

+ (IOSObjectArray *)__annotations_setShapeWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setScaleWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:", "WeibullDistributionImpl", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:", "WeibullDistributionImpl", NULL, 0x1, NULL, NULL },
    { "cumulativeProbabilityWithDouble:", "cumulativeProbability", "D", 0x1, NULL, NULL },
    { "getShape", NULL, "D", 0x1, NULL, NULL },
    { "getScale", NULL, "D", 0x1, NULL, NULL },
    { "densityWithDouble:", "density", "D", 0x1, NULL, NULL },
    { "inverseCumulativeProbabilityWithDouble:", "inverseCumulativeProbability", "D", 0x1, NULL, NULL },
    { "setShapeWithDouble:", "setShape", "V", 0x1, NULL, NULL },
    { "setShapeInternalWithDouble:", "setShapeInternal", "V", 0x2, NULL, NULL },
    { "setScaleWithDouble:", "setScale", "V", 0x1, NULL, NULL },
    { "setScaleInternalWithDouble:", "setScaleInternal", "V", 0x2, NULL, NULL },
    { "getDomainLowerBoundWithDouble:", "getDomainLowerBound", "D", 0x4, NULL, NULL },
    { "getDomainUpperBoundWithDouble:", "getDomainUpperBound", "D", 0x4, NULL, NULL },
    { "getInitialDomainWithDouble:", "getInitialDomain", "D", 0x4, NULL, NULL },
    { "getSolverAbsoluteAccuracy", NULL, "D", 0x4, NULL, NULL },
    { "getSupportLowerBound", NULL, "D", 0x1, NULL, NULL },
    { "getSupportUpperBound", NULL, "D", 0x1, NULL, NULL },
    { "calculateNumericalMean", NULL, "D", 0x4, NULL, NULL },
    { "calculateNumericalVariance", NULL, "D", 0x2, NULL, NULL },
    { "getNumericalMean", NULL, "D", 0x1, NULL, NULL },
    { "getNumericalVariance", NULL, "D", 0x1, NULL, NULL },
    { "invalidateParameterDependentMoments", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INVERSE_ABSOLUTE_ACCURACY_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathDistributionWeibullDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathDistributionWeibullDistributionImpl_serialVersionUID },
    { "shape_", NULL, 0x2, "D", NULL, NULL,  },
    { "scale__", "scale", 0x2, "D", NULL, NULL,  },
    { "solverAbsoluteAccuracy_WeibullDistributionImpl_", "solverAbsoluteAccuracy", 0x12, "D", NULL, NULL,  },
    { "numericalMean_", NULL, 0x2, "D", NULL, NULL,  },
    { "numericalMeanIsCalculated_", NULL, 0x2, "Z", NULL, NULL,  },
    { "numericalVariance_", NULL, 0x2, "D", NULL, NULL,  },
    { "numericalVarianceIsCalculated_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDistributionWeibullDistributionImpl = { 2, "WeibullDistributionImpl", "org.apache.commons.math.distribution", NULL, 0x1, 22, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDistributionWeibullDistributionImpl;
}

@end

void OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self, jdouble alpha, jdouble beta) {
  (void) OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_withDouble_(self, alpha, beta, OrgApacheCommonsMathDistributionWeibullDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
}

OrgApacheCommonsMathDistributionWeibullDistributionImpl *new_OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_(jdouble alpha, jdouble beta) {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl *self = [OrgApacheCommonsMathDistributionWeibullDistributionImpl alloc];
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_(self, alpha, beta);
  return self;
}

void OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_withDouble_(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self, jdouble alpha, jdouble beta, jdouble inverseCumAccuracy) {
  (void) OrgApacheCommonsMathDistributionAbstractContinuousDistribution_init(self);
  self->numericalMean_ = JavaLangDouble_NaN;
  self->numericalMeanIsCalculated_ = NO;
  self->numericalVariance_ = JavaLangDouble_NaN;
  self->numericalVarianceIsCalculated_ = NO;
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_setShapeInternalWithDouble_(self, alpha);
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_setScaleInternalWithDouble_(self, beta);
  self->solverAbsoluteAccuracy_WeibullDistributionImpl_ = inverseCumAccuracy;
}

OrgApacheCommonsMathDistributionWeibullDistributionImpl *new_OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_withDouble_(jdouble alpha, jdouble beta, jdouble inverseCumAccuracy) {
  OrgApacheCommonsMathDistributionWeibullDistributionImpl *self = [OrgApacheCommonsMathDistributionWeibullDistributionImpl alloc];
  OrgApacheCommonsMathDistributionWeibullDistributionImpl_initWithDouble_withDouble_withDouble_(self, alpha, beta, inverseCumAccuracy);
  return self;
}

void OrgApacheCommonsMathDistributionWeibullDistributionImpl_setShapeInternalWithDouble_(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self, jdouble alpha) {
  if (alpha <= 0.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POSITIVE_SHAPE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(alpha) } count:1 type:NSObject_class_()]);
  }
  self->shape_ = alpha;
}

void OrgApacheCommonsMathDistributionWeibullDistributionImpl_setScaleInternalWithDouble_(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self, jdouble beta) {
  if (beta <= 0.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POSITIVE_SCALE(), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(beta) } count:1 type:NSObject_class_()]);
  }
  self->scale__ = beta;
}

jdouble OrgApacheCommonsMathDistributionWeibullDistributionImpl_calculateNumericalVariance(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self) {
  jdouble sh = [self getShape];
  jdouble sc = [self getScale];
  jdouble mn = [self getNumericalMean];
  return (sc * sc) * OrgApacheCommonsMathUtilFastMath_expWithDouble_(OrgApacheCommonsMathSpecialGamma_logGammaWithDouble_(1 + (2 / sh))) - (mn * mn);
}

void OrgApacheCommonsMathDistributionWeibullDistributionImpl_invalidateParameterDependentMoments(OrgApacheCommonsMathDistributionWeibullDistributionImpl *self) {
  self->numericalMeanIsCalculated_ = NO;
  self->numericalVarianceIsCalculated_ = NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDistributionWeibullDistributionImpl)
