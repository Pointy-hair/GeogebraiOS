//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/apache/commons/math/distribution/BetaDistributionImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/distribution/AbstractContinuousDistribution.h"
#include "org/apache/commons/math/distribution/BetaDistributionImpl.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/special/Beta.h"
#include "org/apache/commons/math/special/Gamma.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathDistributionBetaDistributionImpl_serialVersionUID -1221965979403477668LL

@interface OrgApacheCommonsMathDistributionBetaDistributionImpl () {
 @public
  jdouble alpha_;
  jdouble beta_;
  jdouble z_;
  jdouble solverAbsoluteAccuracy_BetaDistributionImpl_;
}

- (void)recomputeZ;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDistributionBetaDistributionImpl, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsMathDistributionBetaDistributionImpl_recomputeZ(OrgApacheCommonsMathDistributionBetaDistributionImpl *self);

@implementation OrgApacheCommonsMathDistributionBetaDistributionImpl

- (instancetype)initWithDouble:(jdouble)alpha
                    withDouble:(jdouble)beta
                    withDouble:(jdouble)inverseCumAccuracy {
  OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_withDouble_(self, alpha, beta, inverseCumAccuracy);
  return self;
}

- (instancetype)initWithDouble:(jdouble)alpha
                    withDouble:(jdouble)beta {
  OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_(self, alpha, beta);
  return self;
}

- (void)setAlphaWithDouble:(jdouble)alpha {
  self->alpha_ = alpha;
  z_ = JavaLangDouble_NaN;
}

- (jdouble)getAlpha {
  return alpha_;
}

- (void)setBetaWithDouble:(jdouble)beta {
  self->beta_ = beta;
  z_ = JavaLangDouble_NaN;
}

- (jdouble)getBeta {
  return beta_;
}

- (void)recomputeZ {
  OrgApacheCommonsMathDistributionBetaDistributionImpl_recomputeZ(self);
}

- (jdouble)densityWithId:(JavaLangDouble *)x {
  return [self densityWithDouble:[((JavaLangDouble *) nil_chk(x)) doubleValue]];
}

- (jdouble)densityWithDouble:(jdouble)x {
  OrgApacheCommonsMathDistributionBetaDistributionImpl_recomputeZ(self);
  if (x < 0 || x > 1) {
    return 0;
  }
  else if (x == 0) {
    if (alpha_ < 1) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(alpha_) } count:1 type:NSObject_class_()]);
    }
    return 0;
  }
  else if (x == 1) {
    if (beta_ < 1) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(beta_) } count:1 type:NSObject_class_()]);
    }
    return 0;
  }
  else {
    jdouble logX = OrgApacheCommonsMathUtilFastMath_logWithDouble_(x);
    jdouble log1mX = OrgApacheCommonsMathUtilFastMath_log1pWithDouble_(-x);
    return OrgApacheCommonsMathUtilFastMath_expWithDouble_((alpha_ - 1) * logX + (beta_ - 1) * log1mX - z_);
  }
}

- (jdouble)inverseCumulativeProbabilityWithDouble:(jdouble)p {
  if (p == 0) {
    return 0;
  }
  else if (p == 1) {
    return 1;
  }
  else {
    return [super inverseCumulativeProbabilityWithDouble:p];
  }
}

- (jdouble)getInitialDomainWithDouble:(jdouble)p {
  return p;
}

- (jdouble)getDomainLowerBoundWithDouble:(jdouble)p {
  return 0;
}

- (jdouble)getDomainUpperBoundWithDouble:(jdouble)p {
  return 1;
}

- (jdouble)cumulativeProbabilityWithDouble:(jdouble)x {
  if (x <= 0) {
    return 0;
  }
  else if (x >= 1) {
    return 1;
  }
  else {
    return OrgApacheCommonsMathSpecialBeta_regularizedBetaWithDouble_withDouble_withDouble_(x, alpha_, beta_);
  }
}

- (jdouble)cumulativeProbabilityWithDouble:(jdouble)x0
                                withDouble:(jdouble)x1 {
  return [self cumulativeProbabilityWithDouble:x1] - [self cumulativeProbabilityWithDouble:x0];
}

- (jdouble)getSolverAbsoluteAccuracy {
  return solverAbsoluteAccuracy_BetaDistributionImpl_;
}

- (jdouble)getSupportLowerBound {
  return 0;
}

- (jdouble)getSupportUpperBound {
  return 1;
}

- (jdouble)getNumericalMean {
  jdouble a = [self getAlpha];
  return a / (a + [self getBeta]);
}

- (jdouble)getNumericalVariance {
  jdouble a = [self getAlpha];
  jdouble b = [self getBeta];
  jdouble alphabetasum = a + b;
  return (a * b) / ((alphabetasum * alphabetasum) * (alphabetasum + 1));
}

+ (IOSObjectArray *)__annotations_setAlphaWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setBetaWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_densityWithJavaLangDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:", "BetaDistributionImpl", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:", "BetaDistributionImpl", NULL, 0x1, NULL, NULL },
    { "setAlphaWithDouble:", "setAlpha", "V", 0x1, NULL, NULL },
    { "getAlpha", NULL, "D", 0x1, NULL, NULL },
    { "setBetaWithDouble:", "setBeta", "V", 0x1, NULL, NULL },
    { "getBeta", NULL, "D", 0x1, NULL, NULL },
    { "recomputeZ", NULL, "V", 0x2, NULL, NULL },
    { "densityWithId:", "density", "D", 0x1, NULL, NULL },
    { "densityWithDouble:", "density", "D", 0x1, NULL, NULL },
    { "inverseCumulativeProbabilityWithDouble:", "inverseCumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "getInitialDomainWithDouble:", "getInitialDomain", "D", 0x4, NULL, NULL },
    { "getDomainLowerBoundWithDouble:", "getDomainLowerBound", "D", 0x4, NULL, NULL },
    { "getDomainUpperBoundWithDouble:", "getDomainUpperBound", "D", 0x4, NULL, NULL },
    { "cumulativeProbabilityWithDouble:", "cumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "cumulativeProbabilityWithDouble:withDouble:", "cumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "getSolverAbsoluteAccuracy", NULL, "D", 0x4, NULL, NULL },
    { "getSupportLowerBound", NULL, "D", 0x1, NULL, NULL },
    { "getSupportUpperBound", NULL, "D", 0x1, NULL, NULL },
    { "getNumericalMean", NULL, "D", 0x1, NULL, NULL },
    { "getNumericalVariance", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INVERSE_ABSOLUTE_ACCURACY_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathDistributionBetaDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathDistributionBetaDistributionImpl_serialVersionUID },
    { "alpha_", NULL, 0x2, "D", NULL, NULL,  },
    { "beta_", NULL, 0x2, "D", NULL, NULL,  },
    { "z_", NULL, 0x2, "D", NULL, NULL,  },
    { "solverAbsoluteAccuracy_BetaDistributionImpl_", "solverAbsoluteAccuracy", 0x12, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDistributionBetaDistributionImpl = { 2, "BetaDistributionImpl", "org.apache.commons.math.distribution", NULL, 0x1, 20, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDistributionBetaDistributionImpl;
}

@end

void OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_withDouble_(OrgApacheCommonsMathDistributionBetaDistributionImpl *self, jdouble alpha, jdouble beta, jdouble inverseCumAccuracy) {
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_init(self);
  self->alpha_ = alpha;
  self->beta_ = beta;
  self->z_ = JavaLangDouble_NaN;
  self->solverAbsoluteAccuracy_BetaDistributionImpl_ = inverseCumAccuracy;
}

OrgApacheCommonsMathDistributionBetaDistributionImpl *new_OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_withDouble_(jdouble alpha, jdouble beta, jdouble inverseCumAccuracy) {
  OrgApacheCommonsMathDistributionBetaDistributionImpl *self = [OrgApacheCommonsMathDistributionBetaDistributionImpl alloc];
  OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_withDouble_(self, alpha, beta, inverseCumAccuracy);
  return self;
}

void OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_(OrgApacheCommonsMathDistributionBetaDistributionImpl *self, jdouble alpha, jdouble beta) {
  OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_withDouble_(self, alpha, beta, OrgApacheCommonsMathDistributionBetaDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
}

OrgApacheCommonsMathDistributionBetaDistributionImpl *new_OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_(jdouble alpha, jdouble beta) {
  OrgApacheCommonsMathDistributionBetaDistributionImpl *self = [OrgApacheCommonsMathDistributionBetaDistributionImpl alloc];
  OrgApacheCommonsMathDistributionBetaDistributionImpl_initWithDouble_withDouble_(self, alpha, beta);
  return self;
}

void OrgApacheCommonsMathDistributionBetaDistributionImpl_recomputeZ(OrgApacheCommonsMathDistributionBetaDistributionImpl *self) {
  if (JavaLangDouble_isNaNWithDouble_(self->z_)) {
    self->z_ = OrgApacheCommonsMathSpecialGamma_logGammaWithDouble_(self->alpha_) + OrgApacheCommonsMathSpecialGamma_logGammaWithDouble_(self->beta_) - OrgApacheCommonsMathSpecialGamma_logGammaWithDouble_(self->alpha_ + self->beta_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDistributionBetaDistributionImpl)
