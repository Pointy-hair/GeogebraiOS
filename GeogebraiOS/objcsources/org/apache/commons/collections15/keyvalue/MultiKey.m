//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/collections15/keyvalue/MultiKey.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/apache/commons/collections15/keyvalue/MultiKey.h"

#define OrgApacheCommonsCollections15KeyvalueMultiKey_serialVersionUID 4465448607415788805LL

@interface OrgApacheCommonsCollections15KeyvalueMultiKey () {
 @public
  IOSObjectArray *keys_;
  jint hashCode__;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15KeyvalueMultiKey, keys_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15KeyvalueMultiKey, serialVersionUID, jlong)

@implementation OrgApacheCommonsCollections15KeyvalueMultiKey

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)keys {
  OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_(self, keys);
  return self;
}

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)keys
                          withBoolean:(jboolean)makeClone {
  OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_withBoolean_(self, keys, makeClone);
  return self;
}

- (IOSObjectArray *)getKeys {
  return [((IOSObjectArray *) nil_chk(keys_)) clone];
}

- (id)getKeyWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(keys_), index);
}

- (jint)size {
  return ((IOSObjectArray *) nil_chk(keys_))->size_;
}

- (jboolean)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if ([other isKindOfClass:[OrgApacheCommonsCollections15KeyvalueMultiKey class]]) {
    OrgApacheCommonsCollections15KeyvalueMultiKey *otherMulti = (OrgApacheCommonsCollections15KeyvalueMultiKey *) check_class_cast(other, [OrgApacheCommonsCollections15KeyvalueMultiKey class]);
    return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(keys_, ((OrgApacheCommonsCollections15KeyvalueMultiKey *) nil_chk(otherMulti))->keys_);
  }
  return NO;
}

- (NSUInteger)hash {
  return hashCode__;
}

- (NSString *)description {
  return JreStrcat("$$", @"MultiKey", [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(keys_))) description]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSObjectArray:", "MultiKey", NULL, 0x81, NULL, NULL },
    { "initWithNSObjectArray:withBoolean:", "MultiKey", NULL, 0x1, NULL, NULL },
    { "getKeys", NULL, "[Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getKeyWithInt:", "getKey", "TK;", 0x1, NULL, "(I)TK;" },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsCollections15KeyvalueMultiKey_serialVersionUID },
    { "keys_", NULL, 0x12, "[Ljava.lang.Object;", NULL, "[TK;",  },
    { "hashCode__", "hashCode", 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15KeyvalueMultiKey = { 2, "MultiKey", "org.apache.commons.collections15.keyvalue", NULL, 0x1, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<K:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsCollections15KeyvalueMultiKey;
}

@end

void OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_(OrgApacheCommonsCollections15KeyvalueMultiKey *self, IOSObjectArray *keys) {
  (void) OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_withBoolean_(self, keys, YES);
}

OrgApacheCommonsCollections15KeyvalueMultiKey *new_OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_(IOSObjectArray *keys) {
  OrgApacheCommonsCollections15KeyvalueMultiKey *self = [OrgApacheCommonsCollections15KeyvalueMultiKey alloc];
  OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_(self, keys);
  return self;
}

void OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_withBoolean_(OrgApacheCommonsCollections15KeyvalueMultiKey *self, IOSObjectArray *keys, jboolean makeClone) {
  (void) NSObject_init(self);
  if (keys == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The array of keys must not be null");
  }
  if (makeClone) {
    self->keys_ = [((IOSObjectArray *) nil_chk(keys)) clone];
  }
  else {
    self->keys_ = keys;
  }
  jint total = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(keys))->size_; i++) {
    if (IOSObjectArray_Get(keys, i) != nil) {
      total ^= ((jint) [nil_chk(IOSObjectArray_Get(keys, i)) hash]);
    }
  }
  self->hashCode__ = total;
}

OrgApacheCommonsCollections15KeyvalueMultiKey *new_OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_withBoolean_(IOSObjectArray *keys, jboolean makeClone) {
  OrgApacheCommonsCollections15KeyvalueMultiKey *self = [OrgApacheCommonsCollections15KeyvalueMultiKey alloc];
  OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_withBoolean_(self, keys, makeClone);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15KeyvalueMultiKey)
