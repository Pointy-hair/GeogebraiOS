//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/collections15/set/MapBackedSet.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/set/MapBackedSet.h"

#define OrgApacheCommonsCollections15SetMapBackedSet_serialVersionUID 6723912213766056587LL

@interface OrgApacheCommonsCollections15SetMapBackedSet ()

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
                             withId:(id)dummyValue;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15SetMapBackedSet, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsCollections15SetMapBackedSet_initWithJavaUtilMap_withId_(OrgApacheCommonsCollections15SetMapBackedSet *self, id<JavaUtilMap> map, id dummyValue);

__attribute__((unused)) static OrgApacheCommonsCollections15SetMapBackedSet *new_OrgApacheCommonsCollections15SetMapBackedSet_initWithJavaUtilMap_withId_(id<JavaUtilMap> map, id dummyValue) NS_RETURNS_RETAINED;

@implementation OrgApacheCommonsCollections15SetMapBackedSet

+ (id<JavaUtilSet>)decorateWithJavaUtilMap:(id<JavaUtilMap>)map {
  return OrgApacheCommonsCollections15SetMapBackedSet_decorateWithJavaUtilMap_(map);
}

+ (id<JavaUtilSet>)decorateWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)dummyValue {
  return OrgApacheCommonsCollections15SetMapBackedSet_decorateWithJavaUtilMap_withId_(map, dummyValue);
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
                             withId:(id)dummyValue {
  OrgApacheCommonsCollections15SetMapBackedSet_initWithJavaUtilMap_withId_(self, map, dummyValue);
  return self;
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(map_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) iterator];
}

- (jboolean)containsWithId:(id)obj {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:obj];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) containsAllWithJavaUtilCollection:coll];
}

- (jboolean)addWithId:(id)obj {
  jint size = [((id<JavaUtilMap>) nil_chk(map_)) size];
  (void) [map_ putWithId:obj withId:dummyValue_];
  return ([map_ size] != size);
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  jint size = [((id<JavaUtilMap>) nil_chk(map_)) size];
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(coll)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id obj = [it next];
    (void) [map_ putWithId:obj withId:dummyValue_];
  }
  return ([map_ size] != size);
}

- (jboolean)removeWithId:(id)obj {
  jint size = [((id<JavaUtilMap>) nil_chk(map_)) size];
  (void) [map_ removeWithId:obj];
  return ([map_ size] != size);
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) removeAllWithJavaUtilCollection:coll];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) retainAllWithJavaUtilCollection:coll];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) toArrayWithNSObjectArray:array];
}

- (jboolean)isEqual:(id)obj {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) isEqual:obj];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) hash]);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decorateWithJavaUtilMap:", "decorate", "Ljava.util.Set;", 0x9, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;)Ljava/util/Set<TK;>;" },
    { "decorateWithJavaUtilMap:withId:", "decorate", "Ljava.util.Set;", 0x9, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;TV;)Ljava/util/Set<TK;>;" },
    { "initWithJavaUtilMap:withId:", "MapBackedSet", NULL, 0x2, NULL, "(Ljava/util/Map<TK;TV;>;TV;)V" },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "containsWithId:", "contains", "Z", 0x1, NULL, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, "(TK;)Z" },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "Z", 0x1, NULL, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "toArray", NULL, "[Ljava.lang.Object;", 0x1, NULL, NULL },
    { "toArrayWithNSObjectArray:", "toArray", "[Ljava.lang.Object;", 0x1, NULL, "<T:Ljava/lang/Object;>([TT;)[TT;" },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsCollections15SetMapBackedSet_serialVersionUID },
    { "map_", NULL, 0x14, "Ljava.util.Map;", NULL, "Ljava/util/Map<TK;TV;>;",  },
    { "dummyValue_", NULL, 0x14, "TV;", NULL, "TV;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15SetMapBackedSet = { 2, "MapBackedSet", "org.apache.commons.collections15.set", NULL, 0x11, 18, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Set<TK;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsCollections15SetMapBackedSet;
}

@end

id<JavaUtilSet> OrgApacheCommonsCollections15SetMapBackedSet_decorateWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgApacheCommonsCollections15SetMapBackedSet_initialize();
  return OrgApacheCommonsCollections15SetMapBackedSet_decorateWithJavaUtilMap_withId_(map, nil);
}

id<JavaUtilSet> OrgApacheCommonsCollections15SetMapBackedSet_decorateWithJavaUtilMap_withId_(id<JavaUtilMap> map, id dummyValue) {
  OrgApacheCommonsCollections15SetMapBackedSet_initialize();
  if (map == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The map must not be null");
  }
  return new_OrgApacheCommonsCollections15SetMapBackedSet_initWithJavaUtilMap_withId_(map, dummyValue);
}

void OrgApacheCommonsCollections15SetMapBackedSet_initWithJavaUtilMap_withId_(OrgApacheCommonsCollections15SetMapBackedSet *self, id<JavaUtilMap> map, id dummyValue) {
  (void) NSObject_init(self);
  self->map_ = map;
  self->dummyValue_ = dummyValue;
}

OrgApacheCommonsCollections15SetMapBackedSet *new_OrgApacheCommonsCollections15SetMapBackedSet_initWithJavaUtilMap_withId_(id<JavaUtilMap> map, id dummyValue) {
  OrgApacheCommonsCollections15SetMapBackedSet *self = [OrgApacheCommonsCollections15SetMapBackedSet alloc];
  OrgApacheCommonsCollections15SetMapBackedSet_initWithJavaUtilMap_withId_(self, map, dummyValue);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15SetMapBackedSet)
