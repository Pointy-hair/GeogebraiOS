//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/collections15/map/CaseInsensitiveMap.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/map/AbstractHashedMap.h"
#include "org/apache/commons/collections15/map/CaseInsensitiveMap.h"

#define OrgApacheCommonsCollections15MapCaseInsensitiveMap_serialVersionUID -7074655917369299456LL

@interface OrgApacheCommonsCollections15MapCaseInsensitiveMap ()

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15MapCaseInsensitiveMap, serialVersionUID, jlong)

@implementation OrgApacheCommonsCollections15MapCaseInsensitiveMap

- (instancetype)init {
  OrgApacheCommonsCollections15MapCaseInsensitiveMap_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor {
  OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithInt_withFloat_(self, initialCapacity, loadFactor);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithJavaUtilMap_(self, map);
  return self;
}

- (NSString *)convertKeyWithNSString:(NSString *)key {
  if (key != nil) {
    return [((NSString *) nil_chk([key description])) lowercaseString];
  }
  else {
    return nil;
  }
}

- (id)getWithId:(id)key {
  if (!([key isKindOfClass:[NSString class]])) {
    return [super getWithId:key];
  }
  return [super getWithId:[self convertKeyWithNSString:(NSString *) check_class_cast(key, [NSString class])]];
}

- (id)putWithId:(NSString *)s
         withId:(id)v {
  return [super putWithId:[self convertKeyWithNSString:s] withId:v];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  id<JavaUtilSet> entries = [((id<JavaUtilMap>) nil_chk(map)) entrySet];
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk(entries)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [iterator next];
    (void) [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
  }
}

- (id)clone {
  return [super clone];
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  [self doWriteObjectWithJavaIoObjectOutputStream:outArg];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  [self doReadObjectWithJavaIoObjectInputStream:inArg];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CaseInsensitiveMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "CaseInsensitiveMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:withFloat:", "CaseInsensitiveMap", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "CaseInsensitiveMap", NULL, 0x1, NULL, NULL },
    { "convertKeyWithNSString:", "convertKey", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getWithId:", "get", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "putWithId:withId:", "put", "TV;", 0x1, NULL, "(Ljava/lang/String;TV;)TV;" },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsCollections15MapCaseInsensitiveMap_serialVersionUID },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.String;", "TV;"};
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15MapCaseInsensitiveMap = { 2, "CaseInsensitiveMap", "org.apache.commons.collections15.map", NULL, 0x1, 11, methods, 1, fields, 2, superclass_type_args, 0, NULL, NULL, "<V:Ljava/lang/Object;>Lorg/apache/commons/collections15/map/AbstractHashedMap<Ljava/lang/String;TV;>;Ljava/io/Serializable;Ljava/lang/Cloneable;" };
  return &_OrgApacheCommonsCollections15MapCaseInsensitiveMap;
}

@end

void OrgApacheCommonsCollections15MapCaseInsensitiveMap_init(OrgApacheCommonsCollections15MapCaseInsensitiveMap *self) {
  (void) OrgApacheCommonsCollections15MapAbstractHashedMap_initWithInt_withFloat_withInt_(self, OrgApacheCommonsCollections15MapAbstractHashedMap_DEFAULT_CAPACITY, OrgApacheCommonsCollections15MapAbstractHashedMap_DEFAULT_LOAD_FACTOR, OrgApacheCommonsCollections15MapAbstractHashedMap_DEFAULT_THRESHOLD);
}

OrgApacheCommonsCollections15MapCaseInsensitiveMap *new_OrgApacheCommonsCollections15MapCaseInsensitiveMap_init() {
  OrgApacheCommonsCollections15MapCaseInsensitiveMap *self = [OrgApacheCommonsCollections15MapCaseInsensitiveMap alloc];
  OrgApacheCommonsCollections15MapCaseInsensitiveMap_init(self);
  return self;
}

void OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithInt_(OrgApacheCommonsCollections15MapCaseInsensitiveMap *self, jint initialCapacity) {
  (void) OrgApacheCommonsCollections15MapAbstractHashedMap_initWithInt_(self, initialCapacity);
}

OrgApacheCommonsCollections15MapCaseInsensitiveMap *new_OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithInt_(jint initialCapacity) {
  OrgApacheCommonsCollections15MapCaseInsensitiveMap *self = [OrgApacheCommonsCollections15MapCaseInsensitiveMap alloc];
  OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithInt_(self, initialCapacity);
  return self;
}

void OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithInt_withFloat_(OrgApacheCommonsCollections15MapCaseInsensitiveMap *self, jint initialCapacity, jfloat loadFactor) {
  (void) OrgApacheCommonsCollections15MapAbstractHashedMap_initWithInt_withFloat_(self, initialCapacity, loadFactor);
}

OrgApacheCommonsCollections15MapCaseInsensitiveMap *new_OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithInt_withFloat_(jint initialCapacity, jfloat loadFactor) {
  OrgApacheCommonsCollections15MapCaseInsensitiveMap *self = [OrgApacheCommonsCollections15MapCaseInsensitiveMap alloc];
  OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithInt_withFloat_(self, initialCapacity, loadFactor);
  return self;
}

void OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithJavaUtilMap_(OrgApacheCommonsCollections15MapCaseInsensitiveMap *self, id<JavaUtilMap> map) {
  (void) OrgApacheCommonsCollections15MapAbstractHashedMap_initWithJavaUtilMap_(self, map);
}

OrgApacheCommonsCollections15MapCaseInsensitiveMap *new_OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgApacheCommonsCollections15MapCaseInsensitiveMap *self = [OrgApacheCommonsCollections15MapCaseInsensitiveMap alloc];
  OrgApacheCommonsCollections15MapCaseInsensitiveMap_initWithJavaUtilMap_(self, map);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15MapCaseInsensitiveMap)
