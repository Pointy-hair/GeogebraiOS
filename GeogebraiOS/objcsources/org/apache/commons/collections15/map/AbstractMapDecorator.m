//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/collections15/map/AbstractMapDecorator.java
//


#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/map/AbstractMapDecorator.h"

@implementation OrgApacheCommonsCollections15MapAbstractMapDecorator

- (instancetype)init {
  OrgApacheCommonsCollections15MapAbstractMapDecorator_init(self);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  OrgApacheCommonsCollections15MapAbstractMapDecorator_initWithJavaUtilMap_(self, map);
  return self;
}

- (id<JavaUtilMap>)getMap {
  return map_;
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key];
}

- (jboolean)containsValueWithId:(id)value {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsValueWithId:value];
}

- (id<JavaUtilSet>)entrySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) entrySet];
}

- (id)getWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(map_)) isEmpty];
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) keySet];
}

- (id)putWithId:(id)key
         withId:(id)value {
  return [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:value];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)mapToCopy {
  [((id<JavaUtilMap>) nil_chk(map_)) putAllWithJavaUtilMap:mapToCopy];
}

- (id)removeWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (id<JavaUtilCollection>)values {
  return [((id<JavaUtilMap>) nil_chk(map_)) values];
}

- (jboolean)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  return [((id<JavaUtilMap>) nil_chk(map_)) isEqual:object];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(map_)) hash]);
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(map_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractMapDecorator", NULL, 0x4, NULL, NULL },
    { "initWithJavaUtilMap:", "AbstractMapDecorator", NULL, 0x1, NULL, NULL },
    { "getMap", NULL, "Ljava.util.Map;", 0x4, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL, NULL },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "getWithId:", "get", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "TV;", 0x1, NULL, "(TK;TV;)TV;" },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x84, "Ljava.util.Map;", NULL, "Ljava/util/Map<TK;TV;>;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15MapAbstractMapDecorator = { 2, "AbstractMapDecorator", "org.apache.commons.collections15.map", NULL, 0x401, 18, methods, 1, fields, 0, NULL, 0, NULL, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map<TK;TV;>;" };
  return &_OrgApacheCommonsCollections15MapAbstractMapDecorator;
}

@end

void OrgApacheCommonsCollections15MapAbstractMapDecorator_init(OrgApacheCommonsCollections15MapAbstractMapDecorator *self) {
  (void) NSObject_init(self);
}

void OrgApacheCommonsCollections15MapAbstractMapDecorator_initWithJavaUtilMap_(OrgApacheCommonsCollections15MapAbstractMapDecorator *self, id<JavaUtilMap> map) {
  (void) NSObject_init(self);
  if (map == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Map must not be null");
  }
  self->map_ = map;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15MapAbstractMapDecorator)
