//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/collections15/map/LRUMap.java
//

#ifndef _OrgApacheCommonsCollections15MapLRUMap_H_
#define _OrgApacheCommonsCollections15MapLRUMap_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "org/apache/commons/collections15/BoundedMap.h"
#include "org/apache/commons/collections15/map/AbstractLinkedMap.h"

@class JavaIoObjectInputStream;
@class JavaIoObjectOutputStream;
@class OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry;
@protocol JavaUtilMap;

#define OrgApacheCommonsCollections15MapLRUMap_serialVersionUID -612114643488955218LL
#define OrgApacheCommonsCollections15MapLRUMap_DEFAULT_MAX_SIZE 100

@interface OrgApacheCommonsCollections15MapLRUMap : OrgApacheCommonsCollections15MapAbstractLinkedMap < OrgApacheCommonsCollections15BoundedMap, JavaIoSerializable, NSCopying >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)maxSize;

- (instancetype)initWithInt:(jint)maxSize
                withBoolean:(jboolean)scanUntilRemovable;

- (instancetype)initWithInt:(jint)maxSize
                  withFloat:(jfloat)loadFactor;

- (instancetype)initWithInt:(jint)maxSize
                  withFloat:(jfloat)loadFactor
                withBoolean:(jboolean)scanUntilRemovable;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
                        withBoolean:(jboolean)scanUntilRemovable;

- (id)clone;

- (id)getWithId:(id)key;

- (jboolean)isFull;

- (jboolean)isScanUntilRemovable;

- (jint)maxSize;

#pragma mark Protected

- (void)addMappingWithInt:(jint)hashIndex
                  withInt:(jint)hashCode
                   withId:(id)key
                   withId:(id)value;

- (void)doReadObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)doWriteObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)moveToMRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:(OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *)entry_;

- (jboolean)removeLRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:(OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *)entry_;

- (void)reuseMappingWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:(OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *)entry_
                                                                            withInt:(jint)hashIndex
                                                                            withInt:(jint)hashCode
                                                                             withId:(id)key
                                                                             withId:(id)value;

- (void)updateEntryWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:(OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *)entry_
                                                                            withId:(id)newValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCollections15MapLRUMap)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15MapLRUMap, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15MapLRUMap, DEFAULT_MAX_SIZE, jint)

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapLRUMap_init(OrgApacheCommonsCollections15MapLRUMap *self);

FOUNDATION_EXPORT OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapLRUMap_initWithInt_(OrgApacheCommonsCollections15MapLRUMap *self, jint maxSize);

FOUNDATION_EXPORT OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapLRUMap_initWithInt_withBoolean_(OrgApacheCommonsCollections15MapLRUMap *self, jint maxSize, jboolean scanUntilRemovable);

FOUNDATION_EXPORT OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithInt_withBoolean_(jint maxSize, jboolean scanUntilRemovable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_(OrgApacheCommonsCollections15MapLRUMap *self, jint maxSize, jfloat loadFactor);

FOUNDATION_EXPORT OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_(jint maxSize, jfloat loadFactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(OrgApacheCommonsCollections15MapLRUMap *self, jint maxSize, jfloat loadFactor, jboolean scanUntilRemovable);

FOUNDATION_EXPORT OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(jint maxSize, jfloat loadFactor, jboolean scanUntilRemovable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_(OrgApacheCommonsCollections15MapLRUMap *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_withBoolean_(OrgApacheCommonsCollections15MapLRUMap *self, id<JavaUtilMap> map, jboolean scanUntilRemovable);

FOUNDATION_EXPORT OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_withBoolean_(id<JavaUtilMap> map, jboolean scanUntilRemovable) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCollections15MapLRUMap)

#endif // _OrgApacheCommonsCollections15MapLRUMap_H_
