//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/collections15/iterators/ObjectGraphIterator.java
//


#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "org/apache/commons/collections15/ArrayStack.h"
#include "org/apache/commons/collections15/Transformer.h"
#include "org/apache/commons/collections15/iterators/ObjectGraphIterator.h"

@implementation OrgApacheCommonsCollections15IteratorsObjectGraphIterator

- (instancetype)initWithId:(id)root
withOrgApacheCommonsCollections15Transformer:(id<OrgApacheCommonsCollections15Transformer>)transformer {
  OrgApacheCommonsCollections15IteratorsObjectGraphIterator_initWithId_withOrgApacheCommonsCollections15Transformer_(self, root, transformer);
  return self;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)rootIterator {
  OrgApacheCommonsCollections15IteratorsObjectGraphIterator_initWithJavaUtilIterator_(self, rootIterator);
  return self;
}

- (void)updateCurrentIterator {
  if (hasNext__) {
    return;
  }
  if (currentIterator_ == nil) {
    if (root_ == nil) {
    }
    else {
      if (transformer_ == nil) {
        [self findNextWithId:root_];
      }
      else {
        [self findNextWithId:[transformer_ transformWithId:root_]];
      }
      root_ = nil;
    }
  }
  else {
    [self findNextByIteratorWithJavaUtilIterator:currentIterator_];
  }
}

- (void)findNextWithId:(id)value {
  if ([JavaUtilIterator_class_() isInstance:value]) {
    [self findNextByIteratorWithJavaUtilIterator:(id<JavaUtilIterator>) check_protocol_cast(value, @protocol(JavaUtilIterator))];
  }
  else {
    currentValue_ = value;
    hasNext__ = YES;
  }
}

- (void)findNextByIteratorWithJavaUtilIterator:(id<JavaUtilIterator>)iterator {
  if (iterator != currentIterator_) {
    if (currentIterator_ != nil) {
      (void) [((OrgApacheCommonsCollections15ArrayStack *) nil_chk(stack_)) pushWithId:currentIterator_];
    }
    currentIterator_ = iterator;
  }
  while ([((id<JavaUtilIterator>) nil_chk(currentIterator_)) hasNext] && hasNext__ == NO) {
    id next = [currentIterator_ next];
    if (transformer_ != nil) {
      next = [transformer_ transformWithId:next];
    }
    [self findNextWithId:next];
  }
  if (hasNext__) {
  }
  else if ([((OrgApacheCommonsCollections15ArrayStack *) nil_chk(stack_)) isEmpty]) {
  }
  else {
    currentIterator_ = (id<JavaUtilIterator>) check_protocol_cast([stack_ pop], @protocol(JavaUtilIterator));
    [self findNextByIteratorWithJavaUtilIterator:currentIterator_];
  }
}

- (jboolean)hasNext {
  [self updateCurrentIterator];
  return hasNext__;
}

- (id)next {
  [self updateCurrentIterator];
  if (hasNext__ == NO) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"No more elements in the iteration");
  }
  lastUsedIterator_ = currentIterator_;
  id result = currentValue_;
  currentValue_ = nil;
  hasNext__ = NO;
  return result;
}

- (void)remove {
  if (lastUsedIterator_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Iterator remove() cannot be called at this time");
  }
  [((id<JavaUtilIterator>) nil_chk(lastUsedIterator_)) remove];
  lastUsedIterator_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withOrgApacheCommonsCollections15Transformer:", "ObjectGraphIterator", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilIterator:", "ObjectGraphIterator", NULL, 0x1, NULL, NULL },
    { "updateCurrentIterator", NULL, "V", 0x4, NULL, NULL },
    { "findNextWithId:", "findNext", "V", 0x4, NULL, NULL },
    { "findNextByIteratorWithJavaUtilIterator:", "findNextByIterator", "V", 0x4, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "stack_", NULL, 0x14, "Lorg.apache.commons.collections15.ArrayStack;", NULL, NULL,  },
    { "root_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
    { "transformer_", NULL, 0x4, "Lorg.apache.commons.collections15.Transformer;", NULL, NULL,  },
    { "hasNext__", "hasNext", 0x4, "Z", NULL, NULL,  },
    { "currentIterator_", NULL, 0x4, "Ljava.util.Iterator;", NULL, NULL,  },
    { "currentValue_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
    { "lastUsedIterator_", NULL, 0x4, "Ljava.util.Iterator;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15IteratorsObjectGraphIterator = { 2, "ObjectGraphIterator", "org.apache.commons.collections15.iterators", NULL, 0x1, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsCollections15IteratorsObjectGraphIterator;
}

@end

void OrgApacheCommonsCollections15IteratorsObjectGraphIterator_initWithId_withOrgApacheCommonsCollections15Transformer_(OrgApacheCommonsCollections15IteratorsObjectGraphIterator *self, id root, id<OrgApacheCommonsCollections15Transformer> transformer) {
  (void) NSObject_init(self);
  self->stack_ = new_OrgApacheCommonsCollections15ArrayStack_initWithInt_(8);
  self->hasNext__ = NO;
  if ([JavaUtilIterator_class_() isInstance:root]) {
    self->currentIterator_ = (id<JavaUtilIterator>) check_protocol_cast(root, @protocol(JavaUtilIterator));
  }
  else {
    self->root_ = root;
  }
  self->transformer_ = transformer;
}

OrgApacheCommonsCollections15IteratorsObjectGraphIterator *new_OrgApacheCommonsCollections15IteratorsObjectGraphIterator_initWithId_withOrgApacheCommonsCollections15Transformer_(id root, id<OrgApacheCommonsCollections15Transformer> transformer) {
  OrgApacheCommonsCollections15IteratorsObjectGraphIterator *self = [OrgApacheCommonsCollections15IteratorsObjectGraphIterator alloc];
  OrgApacheCommonsCollections15IteratorsObjectGraphIterator_initWithId_withOrgApacheCommonsCollections15Transformer_(self, root, transformer);
  return self;
}

void OrgApacheCommonsCollections15IteratorsObjectGraphIterator_initWithJavaUtilIterator_(OrgApacheCommonsCollections15IteratorsObjectGraphIterator *self, id<JavaUtilIterator> rootIterator) {
  (void) NSObject_init(self);
  self->stack_ = new_OrgApacheCommonsCollections15ArrayStack_initWithInt_(8);
  self->hasNext__ = NO;
  self->currentIterator_ = rootIterator;
  self->transformer_ = nil;
}

OrgApacheCommonsCollections15IteratorsObjectGraphIterator *new_OrgApacheCommonsCollections15IteratorsObjectGraphIterator_initWithJavaUtilIterator_(id<JavaUtilIterator> rootIterator) {
  OrgApacheCommonsCollections15IteratorsObjectGraphIterator *self = [OrgApacheCommonsCollections15IteratorsObjectGraphIterator alloc];
  OrgApacheCommonsCollections15IteratorsObjectGraphIterator_initWithJavaUtilIterator_(self, rootIterator);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15IteratorsObjectGraphIterator)
