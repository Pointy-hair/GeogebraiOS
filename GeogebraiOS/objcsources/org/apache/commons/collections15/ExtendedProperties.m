//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/collections15/ExtendedProperties.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/LineNumberReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Properties.h"
#include "java/util/StringTokenizer.h"
#include "java/util/Vector.h"
#include "org/apache/commons/collections15/ExtendedProperties.h"

@interface OrgApacheCommonsCollections15ExtendedProperties () {
 @public
  OrgApacheCommonsCollections15ExtendedProperties *defaults_;
}

+ (NSString *)escapeWithNSString:(NSString *)s;

+ (NSString *)unescapeWithNSString:(NSString *)s;

+ (jint)countPrecedingWithNSString:(NSString *)line
                           withInt:(jint)index
                          withChar:(jchar)ch;

+ (jboolean)endsWithSlashWithNSString:(NSString *)line;

- (void)addPropertyDirectWithNSString:(NSString *)key
                               withId:(id)value;

- (void)addPropertyInternalWithNSString:(NSString *)key
                                 withId:(id)value;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15ExtendedProperties, defaults_, OrgApacheCommonsCollections15ExtendedProperties *)

__attribute__((unused)) static NSString *OrgApacheCommonsCollections15ExtendedProperties_escapeWithNSString_(NSString *s);

__attribute__((unused)) static NSString *OrgApacheCommonsCollections15ExtendedProperties_unescapeWithNSString_(NSString *s);

__attribute__((unused)) static jint OrgApacheCommonsCollections15ExtendedProperties_countPrecedingWithNSString_withInt_withChar_(NSString *line, jint index, jchar ch);

__attribute__((unused)) static jboolean OrgApacheCommonsCollections15ExtendedProperties_endsWithSlashWithNSString_(NSString *line);

__attribute__((unused)) static void OrgApacheCommonsCollections15ExtendedProperties_addPropertyDirectWithNSString_withId_(OrgApacheCommonsCollections15ExtendedProperties *self, NSString *key, id value);

__attribute__((unused)) static void OrgApacheCommonsCollections15ExtendedProperties_addPropertyInternalWithNSString_withId_(OrgApacheCommonsCollections15ExtendedProperties *self, NSString *key, id value);

NSString *OrgApacheCommonsCollections15ExtendedProperties_include_ = @"include";
NSString *OrgApacheCommonsCollections15ExtendedProperties_START_TOKEN_ = @"${";
NSString *OrgApacheCommonsCollections15ExtendedProperties_END_TOKEN_ = @"}";

@implementation OrgApacheCommonsCollections15ExtendedProperties

- (NSString *)interpolateWithNSString:(NSString *)base {
  return ([self interpolateHelperWithNSString:base withJavaUtilList:nil]);
}

- (NSString *)interpolateHelperWithNSString:(NSString *)base
                           withJavaUtilList:(id<JavaUtilList>)priorVariables {
  if (base == nil) {
    return nil;
  }
  if (priorVariables == nil) {
    priorVariables = new_JavaUtilArrayList_init();
    [priorVariables addWithId:base];
  }
  jint begin = -1;
  jint end = -1;
  jint prec = 0 - ((jint) [((NSString *) nil_chk(OrgApacheCommonsCollections15ExtendedProperties_END_TOKEN_)) length]);
  NSString *variable = nil;
  JavaLangStringBuffer *result = new_JavaLangStringBuffer_init();
  while (((begin = [((NSString *) nil_chk(base)) indexOfString:OrgApacheCommonsCollections15ExtendedProperties_START_TOKEN_ fromIndex:prec + ((jint) [OrgApacheCommonsCollections15ExtendedProperties_END_TOKEN_ length])]) > -1) && ((end = [base indexOfString:OrgApacheCommonsCollections15ExtendedProperties_END_TOKEN_ fromIndex:begin]) > -1)) {
    (void) [result appendWithNSString:[base substring:prec + ((jint) [OrgApacheCommonsCollections15ExtendedProperties_END_TOKEN_ length]) endIndex:begin]];
    variable = [base substring:begin + ((jint) [((NSString *) nil_chk(OrgApacheCommonsCollections15ExtendedProperties_START_TOKEN_)) length]) endIndex:end];
    if ([((id<JavaUtilList>) nil_chk(priorVariables)) containsWithId:variable]) {
      NSString *initialBase = [nil_chk([priorVariables removeWithInt:0]) description];
      [priorVariables addWithId:variable];
      JavaLangStringBuffer *priorVariableSb = new_JavaLangStringBuffer_init();
      for (id<JavaUtilIterator> it = [priorVariables iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        (void) [priorVariableSb appendWithId:[it next]];
        if ([it hasNext]) {
          (void) [priorVariableSb appendWithNSString:@"->"];
        }
      }
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$", @"infinite loop in property interpolation of ", initialBase, @": ", [priorVariableSb description]));
    }
    else {
      [priorVariables addWithId:variable];
    }
    id value = [self getPropertyWithNSString:variable];
    if (value != nil) {
      (void) [result appendWithNSString:[self interpolateHelperWithNSString:[value description] withJavaUtilList:priorVariables]];
      (void) [priorVariables removeWithInt:[priorVariables size] - 1];
    }
    else if (defaults_ != nil && [defaults_ getStringWithNSString:variable withNSString:nil] != nil) {
      (void) [result appendWithNSString:[defaults_ getStringWithNSString:variable]];
    }
    else {
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([result appendWithNSString:OrgApacheCommonsCollections15ExtendedProperties_START_TOKEN_])) appendWithNSString:variable])) appendWithNSString:OrgApacheCommonsCollections15ExtendedProperties_END_TOKEN_];
    }
    prec = end;
  }
  (void) [result appendWithNSString:[base substring:prec + ((jint) [OrgApacheCommonsCollections15ExtendedProperties_END_TOKEN_ length]) endIndex:((jint) [base length])]];
  return [result description];
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  return OrgApacheCommonsCollections15ExtendedProperties_escapeWithNSString_(s);
}

+ (NSString *)unescapeWithNSString:(NSString *)s {
  return OrgApacheCommonsCollections15ExtendedProperties_unescapeWithNSString_(s);
}

+ (jint)countPrecedingWithNSString:(NSString *)line
                           withInt:(jint)index
                          withChar:(jchar)ch {
  return OrgApacheCommonsCollections15ExtendedProperties_countPrecedingWithNSString_withInt_withChar_(line, index, ch);
}

+ (jboolean)endsWithSlashWithNSString:(NSString *)line {
  return OrgApacheCommonsCollections15ExtendedProperties_endsWithSlashWithNSString_(line);
}

- (instancetype)init {
  OrgApacheCommonsCollections15ExtendedProperties_init(self);
  return self;
}

- (instancetype)initWithNSString:(NSString *)file {
  OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_(self, file);
  return self;
}

- (instancetype)initWithNSString:(NSString *)file
                    withNSString:(NSString *)defaultFile {
  OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_withNSString_(self, file, defaultFile);
  return self;
}

- (jboolean)isInitialized {
  return isInitialized__;
}

- (NSString *)getInclude {
  return OrgApacheCommonsCollections15ExtendedProperties_include_;
}

- (void)setIncludeWithNSString:(NSString *)inc {
  OrgApacheCommonsCollections15ExtendedProperties_include_ = inc;
}

- (void)load__WithJavaIoInputStream:(JavaIoInputStream *)input {
  [self load__WithJavaIoInputStream:input withNSString:nil];
}

- (void)load__WithJavaIoInputStream:(JavaIoInputStream *)input
                       withNSString:(NSString *)enc {
  @synchronized(self) {
    OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader *reader = nil;
    if (enc != nil) {
      @try {
        reader = new_OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(input, enc));
      }
      @catch (JavaIoUnsupportedEncodingException *ex) {
      }
    }
    if (reader == nil) {
      @try {
        reader = new_OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(input, @"8859_1"));
      }
      @catch (JavaIoUnsupportedEncodingException *ex) {
        reader = new_OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(input));
      }
    }
    @try {
      while (YES) {
        NSString *line = [((OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader *) nil_chk(reader)) readProperty];
        jint equalSign = [((NSString *) nil_chk(line)) indexOf:'='];
        if (equalSign > 0) {
          NSString *key = [((NSString *) nil_chk([line substring:0 endIndex:equalSign])) trim];
          NSString *value = [((NSString *) nil_chk([line substring:equalSign + 1])) trim];
          if ([@"" isEqual:value]) {
            continue;
          }
          if ([self getInclude] != nil && [((NSString *) nil_chk(key)) equalsIgnoreCase:[self getInclude]]) {
            JavaIoFile *file = nil;
            if ([((NSString *) nil_chk(value)) hasPrefix:fileSeparator_]) {
              file = new_JavaIoFile_initWithNSString_(value);
            }
            else {
              if ([value hasPrefix:JreStrcat("C$", '.', fileSeparator_)]) {
                value = [value substring:2];
              }
              file = new_JavaIoFile_initWithNSString_(JreStrcat("$$", basePath_, value));
            }
            if ([((JavaIoFile *) nil_chk(file)) exists] && [file canRead]) {
              [self load__WithJavaIoInputStream:new_JavaIoFileInputStream_initWithJavaIoFile_(file)];
            }
          }
          else {
            [self addPropertyWithNSString:key withId:value];
          }
        }
      }
    }
    @catch (JavaLangNullPointerException *ex) {
      return;
    }
    @finally {
      isInitialized__ = YES;
    }
  }
}

- (id)getPropertyWithNSString:(NSString *)key {
  id obj = [self getWithId:key];
  if (obj == nil) {
    if (defaults_ != nil) {
      obj = [defaults_ getWithId:key];
    }
  }
  return obj;
}

- (void)addPropertyWithNSString:(NSString *)key
                         withId:(id)value {
  if ([value isKindOfClass:[NSString class]]) {
    NSString *str = (NSString *) check_class_cast(value, [NSString class]);
    if ([((NSString *) nil_chk(str)) indexOfString:OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_get_DELIMITER_()] > 0) {
      OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer *tokenizer = new_OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_initWithNSString_(str);
      while ([tokenizer hasMoreTokens]) {
        NSString *token = [tokenizer nextToken];
        OrgApacheCommonsCollections15ExtendedProperties_addPropertyInternalWithNSString_withId_(self, key, OrgApacheCommonsCollections15ExtendedProperties_unescapeWithNSString_(token));
      }
    }
    else {
      OrgApacheCommonsCollections15ExtendedProperties_addPropertyInternalWithNSString_withId_(self, key, OrgApacheCommonsCollections15ExtendedProperties_unescapeWithNSString_(str));
    }
  }
  else {
    OrgApacheCommonsCollections15ExtendedProperties_addPropertyInternalWithNSString_withId_(self, key, value);
  }
  isInitialized__ = YES;
}

- (void)addPropertyDirectWithNSString:(NSString *)key
                               withId:(id)value {
  OrgApacheCommonsCollections15ExtendedProperties_addPropertyDirectWithNSString_withId_(self, key, value);
}

- (void)addPropertyInternalWithNSString:(NSString *)key
                                 withId:(id)value {
  OrgApacheCommonsCollections15ExtendedProperties_addPropertyInternalWithNSString_withId_(self, key, value);
}

- (void)setPropertyWithNSString:(NSString *)key
                         withId:(id)value {
  [self clearPropertyWithNSString:key];
  [self addPropertyWithNSString:key withId:value];
}

- (void)saveWithJavaIoOutputStream:(JavaIoOutputStream *)output
                      withNSString:(NSString *)header {
  @synchronized(self) {
    if (output == nil) {
      return;
    }
    JavaIoPrintWriter *theWrtr = new_JavaIoPrintWriter_initWithJavaIoOutputStream_(output);
    if (header != nil) {
      [theWrtr printlnWithNSString:header];
    }
    id<JavaUtilEnumeration> theKeys = [self keys];
    while ([((id<JavaUtilEnumeration>) nil_chk(theKeys)) hasMoreElements]) {
      NSString *key = (NSString *) check_class_cast([theKeys nextElement], [NSString class]);
      id value = [self getWithId:key];
      if (value != nil) {
        if ([value isKindOfClass:[NSString class]]) {
          JavaLangStringBuffer *currentOutput = new_JavaLangStringBuffer_init();
          (void) [currentOutput appendWithNSString:key];
          (void) [currentOutput appendWithNSString:@"="];
          (void) [currentOutput appendWithNSString:OrgApacheCommonsCollections15ExtendedProperties_escapeWithNSString_((NSString *) check_class_cast(value, [NSString class]))];
          [theWrtr printlnWithNSString:[currentOutput description]];
        }
        else if ([value isKindOfClass:[JavaUtilVector class]]) {
          JavaUtilVector *values = (JavaUtilVector *) check_class_cast(value, [JavaUtilVector class]);
          id<JavaUtilEnumeration> valuesEnum = [values elements];
          while ([((id<JavaUtilEnumeration>) nil_chk(valuesEnum)) hasMoreElements]) {
            NSString *currentElement = (NSString *) check_class_cast([valuesEnum nextElement], [NSString class]);
            JavaLangStringBuffer *currentOutput = new_JavaLangStringBuffer_init();
            (void) [currentOutput appendWithNSString:key];
            (void) [currentOutput appendWithNSString:@"="];
            (void) [currentOutput appendWithNSString:OrgApacheCommonsCollections15ExtendedProperties_escapeWithNSString_(currentElement)];
            [theWrtr printlnWithNSString:[currentOutput description]];
          }
        }
      }
      [theWrtr println];
      [theWrtr flush];
    }
  }
}

- (void)combineWithOrgApacheCommonsCollections15ExtendedProperties:(OrgApacheCommonsCollections15ExtendedProperties *)props {
  for (id<JavaUtilIterator> it = [((OrgApacheCommonsCollections15ExtendedProperties *) nil_chk(props)) getKeys]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    NSString *key = (NSString *) check_class_cast([it next], [NSString class]);
    [self setPropertyWithNSString:key withId:[props getWithId:key]];
  }
}

- (void)clearPropertyWithNSString:(NSString *)key {
  if ([self containsKeyWithId:key]) {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(keysAsListed_)) size]; i++) {
      if ([((NSString *) nil_chk(([keysAsListed_ getWithInt:i]))) isEqual:key]) {
        (void) [keysAsListed_ removeWithInt:i];
        break;
      }
    }
    (void) [self removeWithId:key];
  }
}

- (id<JavaUtilIterator>)getKeys {
  return [((JavaUtilArrayList *) nil_chk(keysAsListed_)) iterator];
}

- (id<JavaUtilIterator>)getKeysWithNSString:(NSString *)prefix {
  id<JavaUtilIterator> keys = [self getKeys];
  JavaUtilArrayList *matchingKeys = new_JavaUtilArrayList_init();
  while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
    id key = [keys next];
    if ([key isKindOfClass:[NSString class]] && [((NSString *) nil_chk(((NSString *) check_class_cast(key, [NSString class])))) hasPrefix:prefix]) {
      [matchingKeys addWithId:key];
    }
  }
  return [matchingKeys iterator];
}

- (OrgApacheCommonsCollections15ExtendedProperties *)subsetWithNSString:(NSString *)prefix {
  OrgApacheCommonsCollections15ExtendedProperties *c = new_OrgApacheCommonsCollections15ExtendedProperties_init();
  id<JavaUtilIterator> keys = [self getKeys];
  jboolean validSubset = NO;
  while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
    id key = [keys next];
    if ([key isKindOfClass:[NSString class]] && [((NSString *) nil_chk(((NSString *) check_class_cast(key, [NSString class])))) hasPrefix:prefix]) {
      if (!validSubset) {
        validSubset = YES;
      }
      NSString *newKey = nil;
      if (((jint) [((NSString *) nil_chk(((NSString *) check_class_cast(key, [NSString class])))) length]) == ((jint) [((NSString *) nil_chk(prefix)) length])) {
        newKey = prefix;
      }
      else {
        newKey = [((NSString *) nil_chk(((NSString *) check_class_cast(key, [NSString class])))) substring:((jint) [prefix length]) + 1];
      }
      OrgApacheCommonsCollections15ExtendedProperties_addPropertyDirectWithNSString_withId_(c, newKey, [self getWithId:key]);
    }
  }
  if (validSubset) {
    return c;
  }
  else {
    return nil;
  }
}

- (void)display {
  id<JavaUtilIterator> i = [self getKeys];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    NSString *key = (NSString *) check_class_cast([i next], [NSString class]);
    id value = [self getWithId:key];
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$@", key, @" => ", value)];
  }
}

- (NSString *)getStringWithNSString:(NSString *)key {
  return [self getStringWithNSString:key withNSString:nil];
}

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[NSString class]]) {
    return [self interpolateWithNSString:(NSString *) check_class_cast(value, [NSString class])];
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [self interpolateWithNSString:[defaults_ getStringWithNSString:key withNSString:defaultValue]];
    }
    else {
      return [self interpolateWithNSString:defaultValue];
    }
  }
  else if ([value isKindOfClass:[JavaUtilVector class]]) {
    return [self interpolateWithNSString:(NSString *) check_class_cast([((JavaUtilVector *) check_class_cast(value, [JavaUtilVector class])) getWithInt:0], [NSString class])];
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a String object"));
  }
}

- (JavaUtilProperties *)getPropertiesWithNSString:(NSString *)key {
  return [self getPropertiesWithNSString:key withJavaUtilProperties:new_JavaUtilProperties_init()];
}

- (JavaUtilProperties *)getPropertiesWithNSString:(NSString *)key
                           withJavaUtilProperties:(JavaUtilProperties *)defaults {
  IOSObjectArray *tokens = [self getStringArrayWithNSString:key];
  JavaUtilProperties *props = new_JavaUtilProperties_initWithJavaUtilProperties_(defaults);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(tokens))->size_; i++) {
    NSString *token = IOSObjectArray_Get(tokens, i);
    jint equalSign = [((NSString *) nil_chk(token)) indexOf:'='];
    if (equalSign > 0) {
      NSString *pkey = [((NSString *) nil_chk([token substring:0 endIndex:equalSign])) trim];
      NSString *pvalue = [((NSString *) nil_chk([token substring:equalSign + 1])) trim];
      (void) [props putWithId:pkey withId:pvalue];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("C$$", '\'', token, @"' does not contain an equals sign"));
    }
  }
  return props;
}

- (IOSObjectArray *)getStringArrayWithNSString:(NSString *)key {
  id value = [self getWithId:key];
  JavaUtilVector *vector;
  if ([value isKindOfClass:[NSString class]]) {
    vector = new_JavaUtilVector_initWithInt_(1);
    [vector addElementWithId:value];
  }
  else if ([value isKindOfClass:[JavaUtilVector class]]) {
    vector = (JavaUtilVector *) check_class_cast(value, [JavaUtilVector class]);
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getStringArrayWithNSString:key];
    }
    else {
      return [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a String/Vector object"));
  }
  IOSObjectArray *tokens = [IOSObjectArray newArrayWithLength:[((JavaUtilVector *) nil_chk(vector)) size] type:NSString_class_()];
  for (jint i = 0; i < tokens->size_; i++) {
    (void) IOSObjectArray_Set(tokens, i, (NSString *) check_class_cast([vector elementAtWithInt:i], [NSString class]));
  }
  return tokens;
}

- (JavaUtilVector *)getVectorWithNSString:(NSString *)key {
  return [self getVectorWithNSString:key withJavaUtilVector:nil];
}

- (JavaUtilVector *)getVectorWithNSString:(NSString *)key
                       withJavaUtilVector:(JavaUtilVector *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[JavaUtilVector class]]) {
    return (JavaUtilVector *) check_class_cast(value, [JavaUtilVector class]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    JavaUtilVector *v = new_JavaUtilVector_initWithInt_(1);
    [v addElementWithId:value];
    (void) [self putWithId:key withId:v];
    return v;
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getVectorWithNSString:key withJavaUtilVector:defaultValue];
    }
    else {
      return ((defaultValue == nil) ? new_JavaUtilVector_init() : defaultValue);
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a Vector object"));
  }
}

- (jboolean)getBooleanWithNSString:(NSString *)key {
  JavaLangBoolean *b = [self getBooleanWithNSString:key withJavaLangBoolean:nil];
  if (b != nil) {
    return [b booleanValue];
  }
  else {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to an existing object"));
  }
}

- (jboolean)getBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue {
  return [((JavaLangBoolean *) nil_chk([self getBooleanWithNSString:key withJavaLangBoolean:new_JavaLangBoolean_initWithBoolean_(defaultValue)])) booleanValue];
}

- (JavaLangBoolean *)getBooleanWithNSString:(NSString *)key
                        withJavaLangBoolean:(JavaLangBoolean *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[JavaLangBoolean class]]) {
    return (JavaLangBoolean *) check_class_cast(value, [JavaLangBoolean class]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    NSString *s = [self testBooleanWithNSString:(NSString *) check_class_cast(value, [NSString class])];
    JavaLangBoolean *b = new_JavaLangBoolean_initWithNSString_(s);
    (void) [self putWithId:key withId:b];
    return b;
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getBooleanWithNSString:key withJavaLangBoolean:defaultValue];
    }
    else {
      return defaultValue;
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a Boolean object"));
  }
}

- (NSString *)testBooleanWithNSString:(NSString *)value {
  NSString *s = [((NSString *) nil_chk(value)) lowercaseString];
  if ([((NSString *) nil_chk(s)) isEqual:@"true"] || [s isEqual:@"on"] || [s isEqual:@"yes"]) {
    return @"true";
  }
  else if ([s isEqual:@"false"] || [s isEqual:@"off"] || [s isEqual:@"no"]) {
    return @"false";
  }
  else {
    return nil;
  }
}

- (jbyte)getByteWithNSString:(NSString *)key {
  JavaLangByte *b = [self getByteWithNSString:key withJavaLangByte:nil];
  if (b != nil) {
    return [b charValue];
  }
  else {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("C$$", '\'', key, @" doesn't map to an existing object"));
  }
}

- (jbyte)getByteWithNSString:(NSString *)key
                    withByte:(jbyte)defaultValue {
  return [((JavaLangByte *) nil_chk([self getByteWithNSString:key withJavaLangByte:new_JavaLangByte_initWithByte_(defaultValue)])) charValue];
}

- (JavaLangByte *)getByteWithNSString:(NSString *)key
                     withJavaLangByte:(JavaLangByte *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[JavaLangByte class]]) {
    return (JavaLangByte *) check_class_cast(value, [JavaLangByte class]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    JavaLangByte *b = new_JavaLangByte_initWithNSString_((NSString *) check_class_cast(value, [NSString class]));
    (void) [self putWithId:key withId:b];
    return b;
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getByteWithNSString:key withJavaLangByte:defaultValue];
    }
    else {
      return defaultValue;
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a Byte object"));
  }
}

- (jshort)getShortWithNSString:(NSString *)key {
  JavaLangShort *s = [self getShortWithNSString:key withJavaLangShort:nil];
  if (s != nil) {
    return [s shortValue];
  }
  else {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to an existing object"));
  }
}

- (jshort)getShortWithNSString:(NSString *)key
                     withShort:(jshort)defaultValue {
  return [((JavaLangShort *) nil_chk([self getShortWithNSString:key withJavaLangShort:new_JavaLangShort_initWithShort_(defaultValue)])) shortValue];
}

- (JavaLangShort *)getShortWithNSString:(NSString *)key
                      withJavaLangShort:(JavaLangShort *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[JavaLangShort class]]) {
    return (JavaLangShort *) check_class_cast(value, [JavaLangShort class]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    JavaLangShort *s = new_JavaLangShort_initWithNSString_((NSString *) check_class_cast(value, [NSString class]));
    (void) [self putWithId:key withId:s];
    return s;
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getShortWithNSString:key withJavaLangShort:defaultValue];
    }
    else {
      return defaultValue;
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a Short object"));
  }
}

- (jint)getIntWithNSString:(NSString *)name {
  return [self getIntegerWithNSString:name];
}

- (jint)getIntWithNSString:(NSString *)name
                   withInt:(jint)def {
  return [self getIntegerWithNSString:name withInt:def];
}

- (jint)getIntegerWithNSString:(NSString *)key {
  JavaLangInteger *i = [self getIntegerWithNSString:key withJavaLangInteger:nil];
  if (i != nil) {
    return [i intValue];
  }
  else {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to an existing object"));
  }
}

- (jint)getIntegerWithNSString:(NSString *)key
                       withInt:(jint)defaultValue {
  JavaLangInteger *i = [self getIntegerWithNSString:key withJavaLangInteger:nil];
  if (i == nil) {
    return defaultValue;
  }
  return [((JavaLangInteger *) nil_chk(i)) intValue];
}

- (JavaLangInteger *)getIntegerWithNSString:(NSString *)key
                        withJavaLangInteger:(JavaLangInteger *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[JavaLangInteger class]]) {
    return (JavaLangInteger *) check_class_cast(value, [JavaLangInteger class]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    JavaLangInteger *i = new_JavaLangInteger_initWithNSString_((NSString *) check_class_cast(value, [NSString class]));
    (void) [self putWithId:key withId:i];
    return i;
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getIntegerWithNSString:key withJavaLangInteger:defaultValue];
    }
    else {
      return defaultValue;
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a Integer object"));
  }
}

- (jlong)getLongWithNSString:(NSString *)key {
  JavaLangLong *l = [self getLongWithNSString:key withJavaLangLong:nil];
  if (l != nil) {
    return [l longLongValue];
  }
  else {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to an existing object"));
  }
}

- (jlong)getLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue {
  return [((JavaLangLong *) nil_chk([self getLongWithNSString:key withJavaLangLong:new_JavaLangLong_initWithLong_(defaultValue)])) longLongValue];
}

- (JavaLangLong *)getLongWithNSString:(NSString *)key
                     withJavaLangLong:(JavaLangLong *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[JavaLangLong class]]) {
    return (JavaLangLong *) check_class_cast(value, [JavaLangLong class]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    JavaLangLong *l = new_JavaLangLong_initWithNSString_((NSString *) check_class_cast(value, [NSString class]));
    (void) [self putWithId:key withId:l];
    return l;
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getLongWithNSString:key withJavaLangLong:defaultValue];
    }
    else {
      return defaultValue;
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a Long object"));
  }
}

- (jfloat)getFloatWithNSString:(NSString *)key {
  JavaLangFloat *f = [self getFloatWithNSString:key withJavaLangFloat:nil];
  if (f != nil) {
    return [f floatValue];
  }
  else {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to an existing object"));
  }
}

- (jfloat)getFloatWithNSString:(NSString *)key
                     withFloat:(jfloat)defaultValue {
  return [((JavaLangFloat *) nil_chk([self getFloatWithNSString:key withJavaLangFloat:new_JavaLangFloat_initWithFloat_(defaultValue)])) floatValue];
}

- (JavaLangFloat *)getFloatWithNSString:(NSString *)key
                      withJavaLangFloat:(JavaLangFloat *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[JavaLangFloat class]]) {
    return (JavaLangFloat *) check_class_cast(value, [JavaLangFloat class]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    JavaLangFloat *f = new_JavaLangFloat_initWithNSString_((NSString *) check_class_cast(value, [NSString class]));
    (void) [self putWithId:key withId:f];
    return f;
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getFloatWithNSString:key withJavaLangFloat:defaultValue];
    }
    else {
      return defaultValue;
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a Float object"));
  }
}

- (jdouble)getDoubleWithNSString:(NSString *)key {
  JavaLangDouble *d = [self getDoubleWithNSString:key withJavaLangDouble:nil];
  if (d != nil) {
    return [d doubleValue];
  }
  else {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to an existing object"));
  }
}

- (jdouble)getDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue {
  return [((JavaLangDouble *) nil_chk([self getDoubleWithNSString:key withJavaLangDouble:new_JavaLangDouble_initWithDouble_(defaultValue)])) doubleValue];
}

- (JavaLangDouble *)getDoubleWithNSString:(NSString *)key
                       withJavaLangDouble:(JavaLangDouble *)defaultValue {
  id value = [self getWithId:key];
  if ([value isKindOfClass:[JavaLangDouble class]]) {
    return (JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]);
  }
  else if ([value isKindOfClass:[NSString class]]) {
    JavaLangDouble *d = new_JavaLangDouble_initWithNSString_((NSString *) check_class_cast(value, [NSString class]));
    (void) [self putWithId:key withId:d];
    return d;
  }
  else if (value == nil) {
    if (defaults_ != nil) {
      return [defaults_ getDoubleWithNSString:key withJavaLangDouble:defaultValue];
    }
    else {
      return defaultValue;
    }
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("C$$", '\'', key, @"' doesn't map to a Double object"));
  }
}

+ (OrgApacheCommonsCollections15ExtendedProperties *)convertPropertiesWithJavaUtilProperties:(JavaUtilProperties *)props {
  return OrgApacheCommonsCollections15ExtendedProperties_convertPropertiesWithJavaUtilProperties_(props);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "interpolateWithNSString:", "interpolate", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "interpolateHelperWithNSString:withJavaUtilList:", "interpolateHelper", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "escapeWithNSString:", "escape", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "unescapeWithNSString:", "unescape", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "countPrecedingWithNSString:withInt:withChar:", "countPreceding", "I", 0xa, NULL, NULL },
    { "endsWithSlashWithNSString:", "endsWithSlash", "Z", 0xa, NULL, NULL },
    { "init", "ExtendedProperties", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "ExtendedProperties", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withNSString:", "ExtendedProperties", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "isInitialized", NULL, "Z", 0x1, NULL, NULL },
    { "getInclude", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setIncludeWithNSString:", "setInclude", "V", 0x1, NULL, NULL },
    { "load__WithJavaIoInputStream:", "load", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "load__WithJavaIoInputStream:withNSString:", "load", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "getPropertyWithNSString:", "getProperty", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "addPropertyWithNSString:withId:", "addProperty", "V", 0x1, NULL, NULL },
    { "addPropertyDirectWithNSString:withId:", "addPropertyDirect", "V", 0x2, NULL, NULL },
    { "addPropertyInternalWithNSString:withId:", "addPropertyInternal", "V", 0x2, NULL, NULL },
    { "setPropertyWithNSString:withId:", "setProperty", "V", 0x1, NULL, NULL },
    { "saveWithJavaIoOutputStream:withNSString:", "save", "V", 0x21, "Ljava.io.IOException;", NULL },
    { "combineWithOrgApacheCommonsCollections15ExtendedProperties:", "combine", "V", 0x1, NULL, NULL },
    { "clearPropertyWithNSString:", "clearProperty", "V", 0x1, NULL, NULL },
    { "getKeys", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "getKeysWithNSString:", "getKeys", "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "subsetWithNSString:", "subset", "Lorg.apache.commons.collections15.ExtendedProperties;", 0x1, NULL, NULL },
    { "display", NULL, "V", 0x1, NULL, NULL },
    { "getStringWithNSString:", "getString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getStringWithNSString:withNSString:", "getString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPropertiesWithNSString:", "getProperties", "Ljava.util.Properties;", 0x1, NULL, NULL },
    { "getPropertiesWithNSString:withJavaUtilProperties:", "getProperties", "Ljava.util.Properties;", 0x1, NULL, NULL },
    { "getStringArrayWithNSString:", "getStringArray", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getVectorWithNSString:", "getVector", "Ljava.util.Vector;", 0x1, NULL, NULL },
    { "getVectorWithNSString:withJavaUtilVector:", "getVector", "Ljava.util.Vector;", 0x1, NULL, NULL },
    { "getBooleanWithNSString:", "getBoolean", "Z", 0x1, NULL, NULL },
    { "getBooleanWithNSString:withBoolean:", "getBoolean", "Z", 0x1, NULL, NULL },
    { "getBooleanWithNSString:withJavaLangBoolean:", "getBoolean", "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "testBooleanWithNSString:", "testBoolean", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getByteWithNSString:", "getByte", "B", 0x1, NULL, NULL },
    { "getByteWithNSString:withByte:", "getByte", "B", 0x1, NULL, NULL },
    { "getByteWithNSString:withJavaLangByte:", "getByte", "Ljava.lang.Byte;", 0x1, NULL, NULL },
    { "getShortWithNSString:", "getShort", "S", 0x1, NULL, NULL },
    { "getShortWithNSString:withShort:", "getShort", "S", 0x1, NULL, NULL },
    { "getShortWithNSString:withJavaLangShort:", "getShort", "Ljava.lang.Short;", 0x1, NULL, NULL },
    { "getIntWithNSString:", "getInt", "I", 0x1, NULL, NULL },
    { "getIntWithNSString:withInt:", "getInt", "I", 0x1, NULL, NULL },
    { "getIntegerWithNSString:", "getInteger", "I", 0x1, NULL, NULL },
    { "getIntegerWithNSString:withInt:", "getInteger", "I", 0x1, NULL, NULL },
    { "getIntegerWithNSString:withJavaLangInteger:", "getInteger", "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "getLongWithNSString:", "getLong", "J", 0x1, NULL, NULL },
    { "getLongWithNSString:withLong:", "getLong", "J", 0x1, NULL, NULL },
    { "getLongWithNSString:withJavaLangLong:", "getLong", "Ljava.lang.Long;", 0x1, NULL, NULL },
    { "getFloatWithNSString:", "getFloat", "F", 0x1, NULL, NULL },
    { "getFloatWithNSString:withFloat:", "getFloat", "F", 0x1, NULL, NULL },
    { "getFloatWithNSString:withJavaLangFloat:", "getFloat", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "getDoubleWithNSString:", "getDouble", "D", 0x1, NULL, NULL },
    { "getDoubleWithNSString:withDouble:", "getDouble", "D", 0x1, NULL, NULL },
    { "getDoubleWithNSString:withJavaLangDouble:", "getDouble", "Ljava.lang.Double;", 0x1, NULL, NULL },
    { "convertPropertiesWithJavaUtilProperties:", "convertProperties", "Lorg.apache.commons.collections15.ExtendedProperties;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaults_", NULL, 0x2, "Lorg.apache.commons.collections15.ExtendedProperties;", NULL, NULL,  },
    { "file_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "basePath_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "fileSeparator_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "isInitialized__", "isInitialized", 0x4, "Z", NULL, NULL,  },
    { "include_", NULL, 0xc, "Ljava.lang.String;", &OrgApacheCommonsCollections15ExtendedProperties_include_, NULL,  },
    { "keysAsListed_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "START_TOKEN_", NULL, 0x1c, "Ljava.lang.String;", &OrgApacheCommonsCollections15ExtendedProperties_START_TOKEN_, NULL,  },
    { "END_TOKEN_", NULL, 0x1c, "Ljava.lang.String;", &OrgApacheCommonsCollections15ExtendedProperties_END_TOKEN_, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.apache.commons.collections15.ExtendedProperties$PropertiesReader;", "Lorg.apache.commons.collections15.ExtendedProperties$PropertiesTokenizer;"};
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15ExtendedProperties = { 2, "ExtendedProperties", "org.apache.commons.collections15", NULL, 0x1, 58, methods, 9, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheCommonsCollections15ExtendedProperties;
}

@end

NSString *OrgApacheCommonsCollections15ExtendedProperties_escapeWithNSString_(NSString *s) {
  OrgApacheCommonsCollections15ExtendedProperties_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(s);
  for (jint i = 0; i < [buf length]; i++) {
    jchar c = [buf charAtWithInt:i];
    if (c == ',' || c == '\\') {
      (void) [buf insertWithInt:i withChar:'\\'];
      i++;
    }
  }
  return [buf description];
}

NSString *OrgApacheCommonsCollections15ExtendedProperties_unescapeWithNSString_(NSString *s) {
  OrgApacheCommonsCollections15ExtendedProperties_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(s);
  for (jint i = 0; i < [buf length] - 1; i++) {
    jchar c1 = [buf charAtWithInt:i];
    jchar c2 = [buf charAtWithInt:i + 1];
    if (c1 == '\\' && c2 == '\\') {
      (void) [buf deleteCharAtWithInt:i];
    }
  }
  return [buf description];
}

jint OrgApacheCommonsCollections15ExtendedProperties_countPrecedingWithNSString_withInt_withChar_(NSString *line, jint index, jchar ch) {
  OrgApacheCommonsCollections15ExtendedProperties_initialize();
  jint i;
  for (i = index - 1; i >= 0; i--) {
    if ([((NSString *) nil_chk(line)) charAtWithInt:i] != ch) {
      break;
    }
  }
  return index - 1 - i;
}

jboolean OrgApacheCommonsCollections15ExtendedProperties_endsWithSlashWithNSString_(NSString *line) {
  OrgApacheCommonsCollections15ExtendedProperties_initialize();
  if (![((NSString *) nil_chk(line)) hasSuffix:@"\\"]) {
    return NO;
  }
  return OrgApacheCommonsCollections15ExtendedProperties_countPrecedingWithNSString_withInt_withChar_(line, ((jint) [line length]) - 1, '\\') % 2 == 0;
}

void OrgApacheCommonsCollections15ExtendedProperties_init(OrgApacheCommonsCollections15ExtendedProperties *self) {
  (void) JavaUtilHashtable_init(self);
  self->fileSeparator_ = JavaLangSystem_getPropertyWithNSString_(@"file.separator");
  self->isInitialized__ = NO;
  self->keysAsListed_ = new_JavaUtilArrayList_init();
}

OrgApacheCommonsCollections15ExtendedProperties *new_OrgApacheCommonsCollections15ExtendedProperties_init() {
  OrgApacheCommonsCollections15ExtendedProperties *self = [OrgApacheCommonsCollections15ExtendedProperties alloc];
  OrgApacheCommonsCollections15ExtendedProperties_init(self);
  return self;
}

void OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_(OrgApacheCommonsCollections15ExtendedProperties *self, NSString *file) {
  (void) OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_withNSString_(self, file, nil);
}

OrgApacheCommonsCollections15ExtendedProperties *new_OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_(NSString *file) {
  OrgApacheCommonsCollections15ExtendedProperties *self = [OrgApacheCommonsCollections15ExtendedProperties alloc];
  OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_(self, file);
  return self;
}

void OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_withNSString_(OrgApacheCommonsCollections15ExtendedProperties *self, NSString *file, NSString *defaultFile) {
  (void) JavaUtilHashtable_init(self);
  self->fileSeparator_ = JavaLangSystem_getPropertyWithNSString_(@"file.separator");
  self->isInitialized__ = NO;
  self->keysAsListed_ = new_JavaUtilArrayList_init();
  self->file_ = file;
  self->basePath_ = [new_JavaIoFile_initWithNSString_(file) getAbsolutePath];
  self->basePath_ = [self->basePath_ substring:0 endIndex:[((NSString *) nil_chk(self->basePath_)) lastIndexOfString:self->fileSeparator_] + 1];
  JavaIoFileInputStream *in = nil;
  @try {
    in = new_JavaIoFileInputStream_initWithNSString_(file);
    [self load__WithJavaIoInputStream:in];
  }
  @finally {
    @try {
      if (in != nil) {
        [in close];
      }
    }
    @catch (JavaIoIOException *ex) {
    }
  }
  if (defaultFile != nil) {
    self->defaults_ = new_OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_(defaultFile);
  }
}

OrgApacheCommonsCollections15ExtendedProperties *new_OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_withNSString_(NSString *file, NSString *defaultFile) {
  OrgApacheCommonsCollections15ExtendedProperties *self = [OrgApacheCommonsCollections15ExtendedProperties alloc];
  OrgApacheCommonsCollections15ExtendedProperties_initWithNSString_withNSString_(self, file, defaultFile);
  return self;
}

void OrgApacheCommonsCollections15ExtendedProperties_addPropertyDirectWithNSString_withId_(OrgApacheCommonsCollections15ExtendedProperties *self, NSString *key, id value) {
  if (![self containsKeyWithId:key]) {
    [((JavaUtilArrayList *) nil_chk(self->keysAsListed_)) addWithId:key];
  }
  (void) [self putWithId:key withId:value];
}

void OrgApacheCommonsCollections15ExtendedProperties_addPropertyInternalWithNSString_withId_(OrgApacheCommonsCollections15ExtendedProperties *self, NSString *key, id value) {
  id current = [self getWithId:key];
  if ([current isKindOfClass:[NSString class]]) {
    JavaUtilVector *v = new_JavaUtilVector_initWithInt_(2);
    [v addElementWithId:current];
    [v addElementWithId:value];
    (void) [self putWithId:key withId:v];
  }
  else if ([current isKindOfClass:[JavaUtilVector class]]) {
    [((JavaUtilVector *) nil_chk(((JavaUtilVector *) check_class_cast(current, [JavaUtilVector class])))) addElementWithId:value];
  }
  else {
    if (![self containsKeyWithId:key]) {
      [((JavaUtilArrayList *) nil_chk(self->keysAsListed_)) addWithId:key];
    }
    (void) [self putWithId:key withId:value];
  }
}

OrgApacheCommonsCollections15ExtendedProperties *OrgApacheCommonsCollections15ExtendedProperties_convertPropertiesWithJavaUtilProperties_(JavaUtilProperties *props) {
  OrgApacheCommonsCollections15ExtendedProperties_initialize();
  OrgApacheCommonsCollections15ExtendedProperties *c = new_OrgApacheCommonsCollections15ExtendedProperties_init();
  for (id<JavaUtilEnumeration> e = [((JavaUtilProperties *) nil_chk(props)) keys]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
    NSString *s = (NSString *) check_class_cast([e nextElement], [NSString class]);
    [c setPropertyWithNSString:s withId:[props getPropertyWithNSString:s]];
  }
  return c;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15ExtendedProperties)

@implementation OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader {
  OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader_initWithJavaIoReader_(self, reader);
  return self;
}

- (NSString *)readProperty {
  JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
  @try {
    while (YES) {
      NSString *line = [((NSString *) nil_chk([self readLine])) trim];
      if ((((jint) [((NSString *) nil_chk(line)) length]) != 0) && ([line charAtWithInt:0] != '#')) {
        if (OrgApacheCommonsCollections15ExtendedProperties_endsWithSlashWithNSString_(line)) {
          line = [line substring:0 endIndex:((jint) [line length]) - 1];
          (void) [buffer appendWithNSString:line];
        }
        else {
          (void) [buffer appendWithNSString:line];
          break;
        }
      }
    }
  }
  @catch (JavaLangNullPointerException *ex) {
    return nil;
  }
  return [buffer description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoReader:", "PropertiesReader", NULL, 0x1, NULL, NULL },
    { "readProperty", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader = { 2, "PropertiesReader", "org.apache.commons.collections15", "ExtendedProperties", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader;
}

@end

void OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader_initWithJavaIoReader_(OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader *self, JavaIoReader *reader) {
  (void) JavaIoLineNumberReader_initWithJavaIoReader_(self, reader);
}

OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader *new_OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader_initWithJavaIoReader_(JavaIoReader *reader) {
  OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader *self = [OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader alloc];
  OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader_initWithJavaIoReader_(self, reader);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15ExtendedProperties_PropertiesReader)

NSString *OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_DELIMITER_ = @",";

@implementation OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer

- (instancetype)initWithNSString:(NSString *)string {
  OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_initWithNSString_(self, string);
  return self;
}

- (jboolean)hasMoreTokens {
  return [super hasMoreTokens];
}

- (NSString *)nextToken {
  JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
  while ([self hasMoreTokens]) {
    NSString *token = [super nextToken];
    if (OrgApacheCommonsCollections15ExtendedProperties_endsWithSlashWithNSString_(token)) {
      (void) [buffer appendWithNSString:[token substring:0 endIndex:((jint) [((NSString *) nil_chk(token)) length]) - 1]];
      (void) [buffer appendWithNSString:OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_DELIMITER_];
    }
    else {
      (void) [buffer appendWithNSString:token];
      break;
    }
  }
  return [((NSString *) nil_chk([buffer description])) trim];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "PropertiesTokenizer", NULL, 0x1, NULL, NULL },
    { "hasMoreTokens", NULL, "Z", 0x1, NULL, NULL },
    { "nextToken", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DELIMITER_", NULL, 0x18, "Ljava.lang.String;", &OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_DELIMITER_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer = { 2, "PropertiesTokenizer", "org.apache.commons.collections15", "ExtendedProperties", 0x8, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer;
}

@end

void OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_initWithNSString_(OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer *self, NSString *string) {
  (void) JavaUtilStringTokenizer_initWithNSString_withNSString_(self, string, OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_DELIMITER_);
}

OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer *new_OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_initWithNSString_(NSString *string) {
  OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer *self = [OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer alloc];
  OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer_initWithNSString_(self, string);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15ExtendedProperties_PropertiesTokenizer)
