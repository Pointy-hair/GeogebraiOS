//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/apache/commons/collections15/comparators/FixedOrderComparator.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/apache/commons/collections15/comparators/FixedOrderComparator.h"

@interface OrgApacheCommonsCollections15ComparatorsFixedOrderComparator () {
 @public
  id<JavaUtilMap> map_;
  jint counter_;
  jboolean isLocked__;
  jint unknownObjectBehavior_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15ComparatorsFixedOrderComparator, map_, id<JavaUtilMap>)

@implementation OrgApacheCommonsCollections15ComparatorsFixedOrderComparator

- (instancetype)init {
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_init(self);
  return self;
}

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)items {
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_initWithNSObjectArray_(self, items);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)items {
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_initWithJavaUtilList_(self, items);
  return self;
}

- (jboolean)isLocked {
  return isLocked__;
}

- (void)checkLocked {
  if ([self isLocked]) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot modify a FixedOrderComparator after a comparison");
  }
}

- (jint)getUnknownObjectBehavior {
  return unknownObjectBehavior_;
}

- (void)setUnknownObjectBehaviorWithInt:(jint)unknownObjectBehavior {
  [self checkLocked];
  if (unknownObjectBehavior != OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_AFTER && unknownObjectBehavior != OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_BEFORE && unknownObjectBehavior != OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_THROW_EXCEPTION) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Unrecognised value for unknown behaviour flag");
  }
  self->unknownObjectBehavior_ = unknownObjectBehavior;
}

- (jboolean)addWithId:(id)obj {
  [self checkLocked];
  JavaLangInteger *position = [((id<JavaUtilMap>) nil_chk(map_)) putWithId:obj withId:new_JavaLangInteger_initWithInt_(counter_++)];
  return position == nil;
}

- (jboolean)addAsEqualWithId:(id)existingObj
                      withId:(id)newObj {
  [self checkLocked];
  JavaLangInteger *position = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:existingObj];
  if (position == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$@", existingObj, @" not known to ", self));
  }
  JavaLangInteger *result = [map_ putWithId:newObj withId:position];
  return result == nil;
}

- (jint)compareWithId:(id)obj1
               withId:(id)obj2 {
  isLocked__ = YES;
  JavaLangInteger *position1 = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:obj1];
  JavaLangInteger *position2 = [map_ getWithId:obj2];
  if (position1 == nil || position2 == nil) {
    {
      id unknownObj;
      switch (unknownObjectBehavior_) {
        case OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_BEFORE:
        if (position1 == nil) {
          return (position2 == nil) ? 0 : -1;
        }
        else {
          return 1;
        }
        case OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_AFTER:
        if (position1 == nil) {
          return (position2 == nil) ? 0 : 1;
        }
        else {
          return -1;
        }
        case OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_THROW_EXCEPTION:
        unknownObj = (position1 == nil) ? obj1 : obj2;
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Attempting to compare unknown object ", unknownObj));
        default:
        @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$I", @"Unknown unknownObjectBehavior: ", unknownObjectBehavior_));
      }
    }
  }
  else {
    return [position1 compareToWithId:position2];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FixedOrderComparator", NULL, 0x1, NULL, NULL },
    { "initWithNSObjectArray:", "FixedOrderComparator", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilList:", "FixedOrderComparator", NULL, 0x1, NULL, NULL },
    { "isLocked", NULL, "Z", 0x1, NULL, NULL },
    { "checkLocked", NULL, "V", 0x4, NULL, NULL },
    { "getUnknownObjectBehavior", NULL, "I", 0x1, NULL, NULL },
    { "setUnknownObjectBehaviorWithInt:", "setUnknownObjectBehavior", "V", 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, "(TT;)Z" },
    { "addAsEqualWithId:withId:", "addAsEqual", "Z", 0x1, NULL, "(TT;TT;)Z" },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, "(TT;TT;)I" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UNKNOWN_BEFORE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_BEFORE },
    { "UNKNOWN_AFTER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_AFTER },
    { "UNKNOWN_THROW_EXCEPTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_THROW_EXCEPTION },
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<TT;Ljava/lang/Integer;>;",  },
    { "counter_", NULL, 0x2, "I", NULL, NULL,  },
    { "isLocked__", "isLocked", 0x2, "Z", NULL, NULL,  },
    { "unknownObjectBehavior_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15ComparatorsFixedOrderComparator = { 2, "FixedOrderComparator", "org.apache.commons.collections15.comparators", NULL, 0x1, 10, methods, 7, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<TT;>;" };
  return &_OrgApacheCommonsCollections15ComparatorsFixedOrderComparator;
}

@end

void OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_init(OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *self) {
  (void) NSObject_init(self);
  self->map_ = new_JavaUtilHashMap_init();
  self->counter_ = 0;
  self->isLocked__ = NO;
  self->unknownObjectBehavior_ = OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_THROW_EXCEPTION;
}

OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *new_OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_init() {
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *self = [OrgApacheCommonsCollections15ComparatorsFixedOrderComparator alloc];
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_init(self);
  return self;
}

void OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_initWithNSObjectArray_(OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *self, IOSObjectArray *items) {
  (void) NSObject_init(self);
  self->map_ = new_JavaUtilHashMap_init();
  self->counter_ = 0;
  self->isLocked__ = NO;
  self->unknownObjectBehavior_ = OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_THROW_EXCEPTION;
  if (items == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The list of items must not be null");
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(items))->size_; i++) {
    [self addWithId:IOSObjectArray_Get(items, i)];
  }
}

OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *new_OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_initWithNSObjectArray_(IOSObjectArray *items) {
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *self = [OrgApacheCommonsCollections15ComparatorsFixedOrderComparator alloc];
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_initWithNSObjectArray_(self, items);
  return self;
}

void OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_initWithJavaUtilList_(OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *self, id<JavaUtilList> items) {
  (void) NSObject_init(self);
  self->map_ = new_JavaUtilHashMap_init();
  self->counter_ = 0;
  self->isLocked__ = NO;
  self->unknownObjectBehavior_ = OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_UNKNOWN_THROW_EXCEPTION;
  if (items == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The list of items must not be null");
  }
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(items)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    [self addWithId:[it next]];
  }
}

OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *new_OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_initWithJavaUtilList_(id<JavaUtilList> items) {
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator *self = [OrgApacheCommonsCollections15ComparatorsFixedOrderComparator alloc];
  OrgApacheCommonsCollections15ComparatorsFixedOrderComparator_initWithJavaUtilList_(self, items);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15ComparatorsFixedOrderComparator)
