//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/iOS/awt/GPathIteratorI.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/iOS/awt/GPathIteratorI.h"

@implementation GPathIteratorI

- (instancetype)initWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)pathIterator {
  GPathIteratorI_initWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_(self, pathIterator);
  return self;
}

- (jint)getWindingRule {
  return [((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(impl_)) getWindingRule];
}

- (jboolean)isDone {
  return [((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(impl_)) isDone];
}

- (void)next {
  [((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(impl_)) next];
}

- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  return [((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(impl_)) currentSegmentWithFloatArray:coords];
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  return [((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(impl_)) currentSegmentWithDoubleArray:coords];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:", "GPathIteratorI", NULL, 0x1, NULL, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL, NULL },
    { "isDone", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "V", 0x1, NULL, NULL },
    { "currentSegmentWithFloatArray:", "currentSegment", "I", 0x1, NULL, NULL },
    { "currentSegmentWithDoubleArray:", "currentSegment", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "impl_", NULL, 0x0, "Lorg.geogebra.ggbjdk.java.awt.geom.PathIterator;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GPathIteratorI = { 2, "GPathIteratorI", "org.geogebra.iOS.awt", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GPathIteratorI;
}

@end

void GPathIteratorI_initWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_(GPathIteratorI *self, id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator> pathIterator) {
  (void) NSObject_init(self);
  self->impl_ = pathIterator;
}

GPathIteratorI *new_GPathIteratorI_initWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator> pathIterator) {
  GPathIteratorI *self = [GPathIteratorI alloc];
  GPathIteratorI_initWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_(self, pathIterator);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GPathIteratorI)
