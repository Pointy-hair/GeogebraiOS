//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/iOS/awt/GBasicStrokeI.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GPathIterator.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/ggbjdk/java/awt/geom/GeneralPath.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Shape.h"
#include "org/geogebra/iOS/awt/GBasicStrokeI.h"

@interface GBasicStrokeI () {
 @public
  jfloat lineWidth_;
  jint lineCap_;
  jint lineJoin_;
  IOSFloatArray *dasharray_;
}

@end

J2OBJC_FIELD_SETTER(GBasicStrokeI, dasharray_, IOSFloatArray *)

#define GBasicStrokeI_BufferedPath_bufCapacity 10

J2OBJC_STATIC_FIELD_GETTER(GBasicStrokeI_BufferedPath, bufCapacity, jint)

J2OBJC_INITIALIZED_DEFN(GBasicStrokeI)

jdouble GBasicStrokeI_CUBIC_ARC_;

@implementation GBasicStrokeI

- (instancetype)init {
  GBasicStrokeI_init(self);
  return self;
}

- (instancetype)initWithFloat:(jfloat)width
                      withInt:(jint)cap
                      withInt:(jint)join
                    withFloat:(jfloat)miterLimit
               withFloatArray:(IOSFloatArray *)dash
                    withFloat:(jfloat)dashPhase {
  GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_withFloatArray_withFloat_(self, width, cap, join, miterLimit, dash, dashPhase);
  return self;
}

- (instancetype)initWithFloat:(jfloat)width
                      withInt:(jint)cap
                      withInt:(jint)join
                    withFloat:(jfloat)miterLimit {
  GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_(self, width, cap, join, miterLimit);
  return self;
}

- (instancetype)initWithFloat:(jfloat)width
                      withInt:(jint)cap
                      withInt:(jint)join {
  GBasicStrokeI_initWithFloat_withInt_withInt_(self, width, cap, join);
  return self;
}

- (instancetype)initWithFloat:(jfloat)width {
  GBasicStrokeI_initWithFloat_(self, width);
  return self;
}

- (jfloat)getLineWidth {
  return width_;
}

- (jint)getEndCap {
  return cap_;
}

- (jint)getLineJoin {
  return join_;
}

- (jfloat)getMiterLimit {
  return miterLimit_;
}

- (IOSFloatArray *)getDashArray {
  return dash_;
}

- (jfloat)getDashPhase {
  return dashPhase_;
}

- (jdouble)getCurveDeltaWithDouble:(jdouble)width {
  jdouble a = width + GBasicStrokeI_CURVE_DELTA;
  jdouble cos = 1.0 - 2.0 * width * width / (a * a);
  jdouble sin = JavaLangMath_sqrtWithDouble_(1.0 - cos * cos);
  return JavaLangMath_absWithDouble_(sin / cos);
}

- (jdouble)getCornerDeltaWithDouble:(jdouble)width {
  return width * width * JavaLangMath_sinWithDouble_(JavaLangMath_PI * GBasicStrokeI_CORNER_ANGLE / 180.0);
}

- (jdouble)getZeroDeltaWithDouble:(jdouble)width {
  return width * width * JavaLangMath_sinWithDouble_(JavaLangMath_PI * GBasicStrokeI_CORNER_ZERO / 180.0);
}

- (id<OrgGeogebraCommonAwtGShape>)createStrokedShapeWithOrgGeogebraCommonAwtGShape:(id<OrgGeogebraCommonAwtGShape>)s {
  w2_ = width_ / 2.0;
  curveDelta_ = [self getCurveDeltaWithDouble:w2_];
  cornerDelta_ = [self getCornerDeltaWithDouble:w2_];
  zeroDelta_ = [self getZeroDeltaWithDouble:w2_];
  dst_ = new_GBasicStrokeI_BufferedPath_init();
  lp_ = new_GBasicStrokeI_BufferedPath_init();
  rp_ = new_GBasicStrokeI_BufferedPath_init();
  if (dash_ == nil) {
    [self createSolidShapeWithOrgGeogebraCommonAwtGPathIterator:[((id<OrgGeogebraCommonAwtGShape>) nil_chk(s)) getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:nil]];
  }
  else {
    [self createDashedShapeWithOrgGeogebraCommonAwtGPathIterator:[((id<OrgGeogebraCommonAwtGShape>) nil_chk(s)) getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:nil]];
  }
  return [dst_ createGeneralPath];
}

- (void)createSolidShapeWithOrgGeogebraCommonAwtGPathIterator:(id<OrgGeogebraCommonAwtGPathIterator>)pathIterator {
  IOSDoubleArray *coords = [IOSDoubleArray newArrayWithLength:6];
  mx_ = my_ = cx_ = cy_ = 0.0;
  isMove_ = NO;
  isFirst_ = NO;
  checkMove_ = YES;
  jboolean isClosed = YES;
  while (![((id<OrgGeogebraCommonAwtGPathIterator>) nil_chk(pathIterator)) isDone]) {
    switch ([pathIterator currentSegmentWithDoubleArray:coords]) {
      case OrgGeogebraCommonAwtGPathIterator_SEG_MOVETO:
      if (!isClosed) {
        [self closeSolidShape];
      }
      [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) clean];
      mx_ = cx_ = IOSDoubleArray_Get(coords, 0);
      my_ = cy_ = IOSDoubleArray_Get(coords, 1);
      isMove_ = YES;
      isClosed = NO;
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_LINETO:
      {
        jdouble unseq$1 = cx_;
        jdouble unseq$2 = cy_;
        [self addLineWithDouble:unseq$1 withDouble:unseq$2 withDouble:cx_ = IOSDoubleArray_Get(coords, 0) withDouble:cy_ = IOSDoubleArray_Get(coords, 1) withBoolean:YES];
      }
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_QUADTO:
      {
        jdouble unseq$3 = cx_;
        jdouble unseq$4 = cy_;
        [self addQuadWithDouble:unseq$3 withDouble:unseq$4 withDouble:IOSDoubleArray_Get(coords, 0) withDouble:IOSDoubleArray_Get(coords, 1) withDouble:cx_ = IOSDoubleArray_Get(coords, 2) withDouble:cy_ = IOSDoubleArray_Get(coords, 3)];
      }
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_CUBICTO:
      {
        jdouble unseq$5 = cx_;
        jdouble unseq$6 = cy_;
        [self addCubicWithDouble:unseq$5 withDouble:unseq$6 withDouble:IOSDoubleArray_Get(coords, 0) withDouble:IOSDoubleArray_Get(coords, 1) withDouble:IOSDoubleArray_Get(coords, 2) withDouble:IOSDoubleArray_Get(coords, 3) withDouble:cx_ = IOSDoubleArray_Get(coords, 4) withDouble:cy_ = IOSDoubleArray_Get(coords, 5)];
      }
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_CLOSE:
      [self addLineWithDouble:cx_ withDouble:cy_ withDouble:mx_ withDouble:my_ withBoolean:NO];
      [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:mx_ withDouble:my_ withDouble:((GBasicStrokeI_BufferedPath *) nil_chk(lp_))->xMove_ withDouble:lp_->yMove_ withBoolean:YES];
      [self addJoinWithGBasicStrokeI_BufferedPath:rp_ withDouble:mx_ withDouble:my_ withDouble:((GBasicStrokeI_BufferedPath *) nil_chk(rp_))->xMove_ withDouble:rp_->yMove_ withBoolean:NO];
      [lp_ closePath];
      [rp_ closePath];
      [lp_ appendReverseWithGBasicStrokeI_BufferedPath:rp_];
      isClosed = YES;
      break;
    }
    [pathIterator next];
  }
  if (!isClosed) {
    [self closeSolidShape];
  }
  dst_ = lp_;
}

- (void)closeSolidShape {
  [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:cx_ withDouble:cy_ withDouble:((GBasicStrokeI_BufferedPath *) nil_chk(rp_))->xLast_ withDouble:rp_->yLast_];
  [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) combineWithGBasicStrokeI_BufferedPath:rp_];
  [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:mx_ withDouble:my_ withDouble:lp_->xMove_ withDouble:lp_->yMove_];
  [lp_ closePath];
}

- (void)createDashedShapeWithOrgGeogebraCommonAwtGPathIterator:(id<OrgGeogebraCommonAwtGPathIterator>)pathIterator {
  IOSDoubleArray *coords = [IOSDoubleArray newArrayWithLength:6];
  mx_ = my_ = cx_ = cy_ = 0.0;
  smx_ = smy_ = scx_ = scy_ = 0.0;
  isMove_ = NO;
  checkMove_ = NO;
  jboolean isClosed = YES;
  while (![((id<OrgGeogebraCommonAwtGPathIterator>) nil_chk(pathIterator)) isDone]) {
    switch ([pathIterator currentSegmentWithDoubleArray:coords]) {
      case OrgGeogebraCommonAwtGPathIterator_SEG_MOVETO:
      if (!isClosed) {
        [self closeDashedShape];
      }
      dasher_ = new_GBasicStrokeI_Dasher_initWithGBasicStrokeI_withFloatArray_withFloat_(self, dash_, dashPhase_);
      [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) clean];
      [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) clean];
      sp_ = nil;
      isFirst_ = YES;
      isMove_ = YES;
      isClosed = NO;
      mx_ = cx_ = IOSDoubleArray_Get(coords, 0);
      my_ = cy_ = IOSDoubleArray_Get(coords, 1);
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_LINETO:
      {
        jdouble unseq$1 = cx_;
        jdouble unseq$2 = cy_;
        [self addDashLineWithDouble:unseq$1 withDouble:unseq$2 withDouble:cx_ = IOSDoubleArray_Get(coords, 0) withDouble:cy_ = IOSDoubleArray_Get(coords, 1)];
      }
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_QUADTO:
      {
        jdouble unseq$3 = cx_;
        jdouble unseq$4 = cy_;
        [self addDashQuadWithDouble:unseq$3 withDouble:unseq$4 withDouble:IOSDoubleArray_Get(coords, 0) withDouble:IOSDoubleArray_Get(coords, 1) withDouble:cx_ = IOSDoubleArray_Get(coords, 2) withDouble:cy_ = IOSDoubleArray_Get(coords, 3)];
      }
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_CUBICTO:
      {
        jdouble unseq$5 = cx_;
        jdouble unseq$6 = cy_;
        [self addDashCubicWithDouble:unseq$5 withDouble:unseq$6 withDouble:IOSDoubleArray_Get(coords, 0) withDouble:IOSDoubleArray_Get(coords, 1) withDouble:IOSDoubleArray_Get(coords, 2) withDouble:IOSDoubleArray_Get(coords, 3) withDouble:cx_ = IOSDoubleArray_Get(coords, 4) withDouble:cy_ = IOSDoubleArray_Get(coords, 5)];
      }
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_CLOSE:
      {
        jdouble unseq$7 = cx_;
        jdouble unseq$8 = cy_;
        [self addDashLineWithDouble:unseq$7 withDouble:unseq$8 withDouble:cx_ = mx_ withDouble:cy_ = my_];
      }
      if ([((GBasicStrokeI_Dasher *) nil_chk(dasher_)) isConnected]) {
        [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:fmx_ withDouble:fmy_ withDouble:((GBasicStrokeI_BufferedPath *) nil_chk(sp_))->xMove_ withDouble:sp_->yMove_ withBoolean:YES];
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) joinWithGBasicStrokeI_BufferedPath:sp_];
        [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:fmx_ withDouble:fmy_ withDouble:((GBasicStrokeI_BufferedPath *) nil_chk(rp_))->xLast_ withDouble:rp_->yLast_ withBoolean:YES];
        [lp_ combineWithGBasicStrokeI_BufferedPath:rp_];
        [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:smx_ withDouble:smy_ withDouble:lp_->xMove_ withDouble:lp_->yMove_];
        [lp_ closePath];
        [((GBasicStrokeI_BufferedPath *) nil_chk(dst_)) appendWithGBasicStrokeI_BufferedPath:lp_];
        sp_ = nil;
      }
      else {
        [self closeDashedShape];
      }
      isClosed = YES;
      break;
    }
    [pathIterator next];
  }
  if (!isClosed) {
    [self closeDashedShape];
  }
}

- (void)closeDashedShape {
  if (sp_ != nil) {
    [self addCapWithGBasicStrokeI_BufferedPath:sp_ withDouble:fmx_ withDouble:fmy_ withDouble:sp_->xMove_ withDouble:sp_->yMove_];
    [sp_ closePath];
    [((GBasicStrokeI_BufferedPath *) nil_chk(dst_)) appendWithGBasicStrokeI_BufferedPath:sp_];
  }
  if (((GBasicStrokeI_BufferedPath *) nil_chk(lp_))->typeSize_ > 0) {
    if (![((GBasicStrokeI_Dasher *) nil_chk(dasher_)) isClosed]) {
      [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:scx_ withDouble:scy_ withDouble:((GBasicStrokeI_BufferedPath *) nil_chk(rp_))->xLast_ withDouble:rp_->yLast_];
      [lp_ combineWithGBasicStrokeI_BufferedPath:rp_];
      [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:smx_ withDouble:smy_ withDouble:lp_->xMove_ withDouble:lp_->yMove_];
      [lp_ closePath];
    }
    [((GBasicStrokeI_BufferedPath *) nil_chk(dst_)) appendWithGBasicStrokeI_BufferedPath:lp_];
  }
}

- (void)addCapWithGBasicStrokeI_BufferedPath:(GBasicStrokeI_BufferedPath *)p
                                  withDouble:(jdouble)x0
                                  withDouble:(jdouble)y0
                                  withDouble:(jdouble)x2
                                  withDouble:(jdouble)y2 {
  jdouble x1 = ((GBasicStrokeI_BufferedPath *) nil_chk(p))->xLast_;
  jdouble y1 = p->yLast_;
  jdouble x10 = x1 - x0;
  jdouble y10 = y1 - y0;
  jdouble x20 = x2 - x0;
  jdouble y20 = y2 - y0;
  {
    jdouble mx;
    jdouble my;
    jdouble x3;
    jdouble y3;
    switch (cap_) {
      case GBasicStrokeI_CAP_BUTT:
      [p lineToWithDouble:x2 withDouble:y2];
      break;
      case GBasicStrokeI_CAP_ROUND:
      mx = x10 * GBasicStrokeI_CUBIC_ARC_;
      my = y10 * GBasicStrokeI_CUBIC_ARC_;
      x3 = x0 + y10;
      y3 = y0 - x10;
      x10 *= GBasicStrokeI_CUBIC_ARC_;
      y10 *= GBasicStrokeI_CUBIC_ARC_;
      x20 *= GBasicStrokeI_CUBIC_ARC_;
      y20 *= GBasicStrokeI_CUBIC_ARC_;
      [p cubicToWithDouble:x1 + y10 withDouble:y1 - x10 withDouble:x3 + mx withDouble:y3 + my withDouble:x3 withDouble:y3];
      [p cubicToWithDouble:x3 - mx withDouble:y3 - my withDouble:x2 - y20 withDouble:y2 + x20 withDouble:x2 withDouble:y2];
      break;
      case GBasicStrokeI_CAP_SQUARE:
      [p lineToWithDouble:x1 + y10 withDouble:y1 - x10];
      [p lineToWithDouble:x2 - y20 withDouble:y2 + x20];
      [p lineToWithDouble:x2 withDouble:y2];
      break;
    }
  }
}

- (void)addJoinWithGBasicStrokeI_BufferedPath:(GBasicStrokeI_BufferedPath *)p
                                   withDouble:(jdouble)x0
                                   withDouble:(jdouble)y0
                                   withDouble:(jdouble)x2
                                   withDouble:(jdouble)y2
                                  withBoolean:(jboolean)isLeft {
  jdouble x1 = ((GBasicStrokeI_BufferedPath *) nil_chk(p))->xLast_;
  jdouble y1 = p->yLast_;
  jdouble x10 = x1 - x0;
  jdouble y10 = y1 - y0;
  jdouble x20 = x2 - x0;
  jdouble y20 = y2 - y0;
  jdouble sin0 = x10 * y20 - y10 * x20;
  if (-cornerDelta_ < sin0 && sin0 < cornerDelta_) {
    jdouble cos0 = x10 * x20 + y10 * y20;
    if (cos0 > 0.0) {
      if (-zeroDelta_ > sin0 || sin0 > zeroDelta_) {
        jdouble x3 = x0 + w2_ * w2_ * (y20 - y10) / sin0;
        jdouble y3 = y0 + w2_ * w2_ * (x10 - x20) / sin0;
        [p setLastWithDouble:x3 withDouble:y3];
      }
      return;
    }
    if (-zeroDelta_ < sin0 && sin0 < zeroDelta_) {
      [p lineToWithDouble:x2 withDouble:y2];
    }
    return;
  }
  if (isLeft ^ (sin0 < 0.0)) {
    [p lineToWithDouble:x0 withDouble:y0];
    [p lineToWithDouble:x2 withDouble:y2];
  }
  else {
    {
      jdouble s1;
      jdouble s2;
      jdouble x3;
      jdouble y3;
      jdouble x30;
      jdouble y30;
      jdouble miterLength;
      switch (join_) {
        case GBasicStrokeI_JOIN_BEVEL:
        [p lineToWithDouble:x2 withDouble:y2];
        break;
        case GBasicStrokeI_JOIN_MITER:
        s1 = x1 * x10 + y1 * y10;
        s2 = x2 * x20 + y2 * y20;
        x3 = (s1 * y20 - s2 * y10) / sin0;
        y3 = (s2 * x10 - s1 * x20) / sin0;
        x30 = x3 - x0;
        y30 = y3 - y0;
        miterLength = JavaLangMath_sqrtWithDouble_(x30 * x30 + y30 * y30);
        if (miterLength < miterLimit_ * w2_) {
          [p lineToWithDouble:x3 withDouble:y3];
        }
        [p lineToWithDouble:x2 withDouble:y2];
        break;
        case GBasicStrokeI_JOIN_ROUND:
        [self addRoundJoinWithGBasicStrokeI_BufferedPath:p withDouble:x0 withDouble:y0 withDouble:x2 withDouble:y2 withBoolean:isLeft];
        break;
      }
    }
  }
}

- (void)addRoundJoinWithGBasicStrokeI_BufferedPath:(GBasicStrokeI_BufferedPath *)p
                                        withDouble:(jdouble)x0
                                        withDouble:(jdouble)y0
                                        withDouble:(jdouble)x2
                                        withDouble:(jdouble)y2
                                       withBoolean:(jboolean)isLeft {
  jdouble x1 = ((GBasicStrokeI_BufferedPath *) nil_chk(p))->xLast_;
  jdouble y1 = p->yLast_;
  jdouble x10 = x1 - x0;
  jdouble y10 = y1 - y0;
  jdouble x20 = x2 - x0;
  jdouble y20 = y2 - y0;
  jdouble x30 = x10 + x20;
  jdouble y30 = y10 + y20;
  jdouble l30 = JavaLangMath_sqrtWithDouble_(x30 * x30 + y30 * y30);
  if (l30 < 1E-5) {
    [p lineToWithDouble:x2 withDouble:y2];
    return;
  }
  jdouble w = w2_ / l30;
  x30 *= w;
  y30 *= w;
  jdouble x3 = x0 + x30;
  jdouble y3 = y0 + y30;
  jdouble cos = x10 * x20 + y10 * y20;
  jdouble a = JavaLangMath_acosWithDouble_(cos / (w2_ * w2_));
  if (cos >= 0.0) {
    jdouble k = 4.0 / 3.0 * JavaLangMath_tanWithDouble_(a / 4.0);
    if (isLeft) {
      k = -k;
    }
    x10 *= k;
    y10 *= k;
    x20 *= k;
    y20 *= k;
    [p cubicToWithDouble:x1 - y10 withDouble:y1 + x10 withDouble:x2 + y20 withDouble:y2 - x20 withDouble:x2 withDouble:y2];
  }
  else {
    jdouble k = 4.0 / 3.0 * JavaLangMath_tanWithDouble_(a / 8.0);
    if (isLeft) {
      k = -k;
    }
    x10 *= k;
    y10 *= k;
    x20 *= k;
    y20 *= k;
    x30 *= k;
    y30 *= k;
    [p cubicToWithDouble:x1 - y10 withDouble:y1 + x10 withDouble:x3 + y30 withDouble:y3 - x30 withDouble:x3 withDouble:y3];
    [p cubicToWithDouble:x3 - y30 withDouble:y3 + x30 withDouble:x2 + y20 withDouble:y2 - x20 withDouble:x2 withDouble:y2];
  }
}

- (void)addLineWithDouble:(jdouble)x1
               withDouble:(jdouble)y1
               withDouble:(jdouble)x2
               withDouble:(jdouble)y2
              withBoolean:(jboolean)zero {
  jdouble dx = x2 - x1;
  jdouble dy = y2 - y1;
  if (dx == 0.0 && dy == 0.0) {
    if (!zero) {
      return;
    }
    dx = w2_;
    dy = 0;
  }
  else {
    jdouble w = w2_ / JavaLangMath_sqrtWithDouble_(dx * dx + dy * dy);
    dx *= w;
    dy *= w;
  }
  jdouble lx1 = x1 - dy;
  jdouble ly1 = y1 + dx;
  jdouble rx1 = x1 + dy;
  jdouble ry1 = y1 - dx;
  if (checkMove_) {
    if (isMove_) {
      isMove_ = NO;
      [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) moveToWithDouble:lx1 withDouble:ly1];
      [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) moveToWithDouble:rx1 withDouble:ry1];
    }
    else {
      [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:x1 withDouble:y1 withDouble:lx1 withDouble:ly1 withBoolean:YES];
      [self addJoinWithGBasicStrokeI_BufferedPath:rp_ withDouble:x1 withDouble:y1 withDouble:rx1 withDouble:ry1 withBoolean:NO];
    }
  }
  [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) lineToWithDouble:x2 - dy withDouble:y2 + dx];
  [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) lineToWithDouble:x2 + dy withDouble:y2 - dx];
}

- (void)addQuadWithDouble:(jdouble)x1
               withDouble:(jdouble)y1
               withDouble:(jdouble)x2
               withDouble:(jdouble)y2
               withDouble:(jdouble)x3
               withDouble:(jdouble)y3 {
  jdouble x21 = x2 - x1;
  jdouble y21 = y2 - y1;
  jdouble x23 = x2 - x3;
  jdouble y23 = y2 - y3;
  jdouble l21 = JavaLangMath_sqrtWithDouble_(x21 * x21 + y21 * y21);
  jdouble l23 = JavaLangMath_sqrtWithDouble_(x23 * x23 + y23 * y23);
  if (l21 == 0.0 && l23 == 0.0) {
    [self addLineWithDouble:x1 withDouble:y1 withDouble:x3 withDouble:y3 withBoolean:NO];
    return;
  }
  if (l21 == 0.0) {
    [self addLineWithDouble:x2 withDouble:y2 withDouble:x3 withDouble:y3 withBoolean:NO];
    return;
  }
  if (l23 == 0.0) {
    [self addLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withBoolean:NO];
    return;
  }
  jdouble w;
  w = w2_ / l21;
  jdouble mx1 = -y21 * w;
  jdouble my1 = x21 * w;
  w = w2_ / l23;
  jdouble mx3 = y23 * w;
  jdouble my3 = -x23 * w;
  jdouble lx1 = x1 + mx1;
  jdouble ly1 = y1 + my1;
  jdouble rx1 = x1 - mx1;
  jdouble ry1 = y1 - my1;
  if (checkMove_) {
    if (isMove_) {
      isMove_ = NO;
      [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) moveToWithDouble:lx1 withDouble:ly1];
      [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) moveToWithDouble:rx1 withDouble:ry1];
    }
    else {
      [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:x1 withDouble:y1 withDouble:lx1 withDouble:ly1 withBoolean:YES];
      [self addJoinWithGBasicStrokeI_BufferedPath:rp_ withDouble:x1 withDouble:y1 withDouble:rx1 withDouble:ry1 withBoolean:NO];
    }
  }
  if (x21 * y23 - y21 * x23 == 0.0) {
    if (x21 * x23 + y21 * y23 > 0.0) {
      if (l21 == l23) {
        jdouble px = x1 + (x21 + x23) / 4.0;
        jdouble py = y1 + (y21 + y23) / 4.0;
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) lineToWithDouble:px + mx1 withDouble:py + my1];
        [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) lineToWithDouble:px - mx1 withDouble:py - my1];
        [lp_ lineToWithDouble:px - mx1 withDouble:py - my1];
        [rp_ lineToWithDouble:px + mx1 withDouble:py + my1];
        [lp_ lineToWithDouble:x3 - mx1 withDouble:y3 - my1];
        [rp_ lineToWithDouble:x3 + mx1 withDouble:y3 + my1];
      }
      else {
        jdouble px1, py1;
        jdouble k = l21 / (l21 + l23);
        jdouble px = x1 + (x21 + x23) * k * k;
        jdouble py = y1 + (y21 + y23) * k * k;
        px1 = (x1 + px) / 2.0;
        py1 = (y1 + py) / 2.0;
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) quadToWithDouble:px1 + mx1 withDouble:py1 + my1 withDouble:px + mx1 withDouble:py + my1];
        [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) quadToWithDouble:px1 - mx1 withDouble:py1 - my1 withDouble:px - mx1 withDouble:py - my1];
        [lp_ lineToWithDouble:px - mx1 withDouble:py - my1];
        [rp_ lineToWithDouble:px + mx1 withDouble:py + my1];
        px1 = (x3 + px) / 2.0;
        py1 = (y3 + py) / 2.0;
        [lp_ quadToWithDouble:px1 - mx1 withDouble:py1 - my1 withDouble:x3 - mx1 withDouble:y3 - my1];
        [rp_ quadToWithDouble:px1 + mx1 withDouble:py1 + my1 withDouble:x3 + mx1 withDouble:y3 + my1];
      }
    }
    else {
      [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) quadToWithDouble:x2 + mx1 withDouble:y2 + my1 withDouble:x3 + mx3 withDouble:y3 + my3];
      [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) quadToWithDouble:x2 - mx1 withDouble:y2 - my1 withDouble:x3 - mx3 withDouble:y3 - my3];
    }
  }
  else {
    [self addSubQuadWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withDouble:x3 withDouble:y3 withInt:0];
  }
}

- (void)addSubQuadWithDouble:(jdouble)x1
                  withDouble:(jdouble)y1
                  withDouble:(jdouble)x2
                  withDouble:(jdouble)y2
                  withDouble:(jdouble)x3
                  withDouble:(jdouble)y3
                     withInt:(jint)level {
  jdouble x21 = x2 - x1;
  jdouble y21 = y2 - y1;
  jdouble x23 = x2 - x3;
  jdouble y23 = y2 - y3;
  jdouble cos = x21 * x23 + y21 * y23;
  jdouble sin = x21 * y23 - y21 * x23;
  if (level < GBasicStrokeI_MAX_LEVEL && (cos >= 0.0 || (JavaLangMath_absWithDouble_(sin / cos) > curveDelta_))) {
    jdouble c1x = (x2 + x1) / 2.0;
    jdouble c1y = (y2 + y1) / 2.0;
    jdouble c2x = (x2 + x3) / 2.0;
    jdouble c2y = (y2 + y3) / 2.0;
    jdouble c3x = (c1x + c2x) / 2.0;
    jdouble c3y = (c1y + c2y) / 2.0;
    [self addSubQuadWithDouble:x1 withDouble:y1 withDouble:c1x withDouble:c1y withDouble:c3x withDouble:c3y withInt:level + 1];
    [self addSubQuadWithDouble:c3x withDouble:c3y withDouble:c2x withDouble:c2y withDouble:x3 withDouble:y3 withInt:level + 1];
  }
  else {
    jdouble w;
    jdouble l21 = JavaLangMath_sqrtWithDouble_(x21 * x21 + y21 * y21);
    jdouble l23 = JavaLangMath_sqrtWithDouble_(x23 * x23 + y23 * y23);
    w = w2_ / sin;
    jdouble mx2 = (x21 * l23 + x23 * l21) * w;
    jdouble my2 = (y21 * l23 + y23 * l21) * w;
    w = w2_ / l23;
    jdouble mx3 = y23 * w;
    jdouble my3 = -x23 * w;
    [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) quadToWithDouble:x2 + mx2 withDouble:y2 + my2 withDouble:x3 + mx3 withDouble:y3 + my3];
    [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) quadToWithDouble:x2 - mx2 withDouble:y2 - my2 withDouble:x3 - mx3 withDouble:y3 - my3];
  }
}

- (void)addCubicWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2
                withDouble:(jdouble)x3
                withDouble:(jdouble)y3
                withDouble:(jdouble)x4
                withDouble:(jdouble)y4 {
  jdouble x12 = x1 - x2;
  jdouble y12 = y1 - y2;
  jdouble x23 = x2 - x3;
  jdouble y23 = y2 - y3;
  jdouble x34 = x3 - x4;
  jdouble y34 = y3 - y4;
  jdouble l12 = JavaLangMath_sqrtWithDouble_(x12 * x12 + y12 * y12);
  jdouble l23 = JavaLangMath_sqrtWithDouble_(x23 * x23 + y23 * y23);
  jdouble l34 = JavaLangMath_sqrtWithDouble_(x34 * x34 + y34 * y34);
  if (l12 == 0.0 && l23 == 0.0 && l34 == 0.0) {
    [self addLineWithDouble:x1 withDouble:y1 withDouble:x4 withDouble:y4 withBoolean:NO];
    return;
  }
  if (l12 == 0.0 && l23 == 0.0) {
    [self addLineWithDouble:x3 withDouble:y3 withDouble:x4 withDouble:y4 withBoolean:NO];
    return;
  }
  if (l23 == 0.0 && l34 == 0.0) {
    [self addLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withBoolean:NO];
    return;
  }
  if (l12 == 0.0 && l34 == 0.0) {
    [self addLineWithDouble:x2 withDouble:y2 withDouble:x3 withDouble:y3 withBoolean:NO];
    return;
  }
  jdouble w, mx1, my1, mx4, my4;
  jboolean onLine;
  if (l12 == 0.0) {
    w = w2_ / l23;
    mx1 = y23 * w;
    my1 = -x23 * w;
    w = w2_ / l34;
    mx4 = y34 * w;
    my4 = -x34 * w;
    onLine = (-x23 * y34 + y23 * x34 == 0.0);
  }
  else if (l34 == 0.0) {
    w = w2_ / l12;
    mx1 = y12 * w;
    my1 = -x12 * w;
    w = w2_ / l23;
    mx4 = y23 * w;
    my4 = -x23 * w;
    onLine = (-x12 * y23 + y12 * x23 == 0.0);
  }
  else {
    w = w2_ / l12;
    mx1 = y12 * w;
    my1 = -x12 * w;
    w = w2_ / l34;
    mx4 = y34 * w;
    my4 = -x34 * w;
    if (l23 == 0.0) {
      onLine = (-x12 * y34 + y12 * x34 == 0.0);
    }
    else {
      onLine = (-x12 * y34 + y12 * x34 == 0.0 && -x12 * y23 + y12 * x23 == 0.0 && -x23 * y34 + y23 * x34 == 0.0);
    }
  }
  jdouble lx1 = x1 + mx1;
  jdouble ly1 = y1 + my1;
  jdouble rx1 = x1 - mx1;
  jdouble ry1 = y1 - my1;
  if (checkMove_) {
    if (isMove_) {
      isMove_ = NO;
      [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) moveToWithDouble:lx1 withDouble:ly1];
      [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) moveToWithDouble:rx1 withDouble:ry1];
    }
    else {
      [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:x1 withDouble:y1 withDouble:lx1 withDouble:ly1 withBoolean:YES];
      [self addJoinWithGBasicStrokeI_BufferedPath:rp_ withDouble:x1 withDouble:y1 withDouble:rx1 withDouble:ry1 withBoolean:NO];
    }
  }
  if (onLine) {
    if ((x1 == x2 && y1 < y2) || x1 < x2) {
      l12 = -l12;
    }
    if ((x2 == x3 && y2 < y3) || x2 < x3) {
      l23 = -l23;
    }
    if ((x3 == x4 && y3 < y4) || x3 < x4) {
      l34 = -l34;
    }
    jdouble d = l23 * l23 - l12 * l34;
    IOSDoubleArray *roots = [IOSDoubleArray newArrayWithLength:3];
    jint rc = 0;
    if (d == 0.0) {
      jdouble t = (l12 - l23) / (l12 + l34 - l23 - l23);
      if (0.0 < t && t < 1.0) {
        *IOSDoubleArray_GetRef(roots, rc++) = t;
      }
    }
    else if (d > 0.0) {
      d = JavaLangMath_sqrtWithDouble_(d);
      jdouble z = l12 + l34 - l23 - l23;
      jdouble t;
      t = (l12 - l23 + d) / z;
      if (0.0 < t && t < 1.0) {
        *IOSDoubleArray_GetRef(roots, rc++) = t;
      }
      t = (l12 - l23 - d) / z;
      if (0.0 < t && t < 1.0) {
        *IOSDoubleArray_GetRef(roots, rc++) = t;
      }
    }
    if (rc > 0) {
      if (rc == 2 && IOSDoubleArray_Get(roots, 0) > IOSDoubleArray_Get(roots, 1)) {
        jdouble tmp = IOSDoubleArray_Get(roots, 0);
        *IOSDoubleArray_GetRef(roots, 0) = IOSDoubleArray_Get(roots, 1);
        *IOSDoubleArray_GetRef(roots, 1) = tmp;
      }
      *IOSDoubleArray_GetRef(roots, rc++) = 1.0;
      jdouble ax = -x34 - x12 + x23 + x23;
      jdouble ay = -y34 - y12 + y23 + y23;
      jdouble bx = 3.0 * (-x23 + x12);
      jdouble by = 3.0 * (-y23 + y12);
      jdouble cx = 3.0 * (-x12);
      jdouble cy = 3.0 * (-y12);
      jdouble xPrev = x1;
      jdouble yPrev = y1;
      for (jint i = 0; i < rc; i++) {
        jdouble t = IOSDoubleArray_Get(roots, i);
        jdouble px = t * (t * (t * ax + bx) + cx) + x1;
        jdouble py = t * (t * (t * ay + by) + cy) + y1;
        jdouble px1 = (xPrev + px) / 2.0;
        jdouble py1 = (yPrev + py) / 2.0;
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) cubicToWithDouble:px1 + mx1 withDouble:py1 + my1 withDouble:px1 + mx1 withDouble:py1 + my1 withDouble:px + mx1 withDouble:py + my1];
        [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) cubicToWithDouble:px1 - mx1 withDouble:py1 - my1 withDouble:px1 - mx1 withDouble:py1 - my1 withDouble:px - mx1 withDouble:py - my1];
        if (i < rc - 1) {
          [lp_ lineToWithDouble:px - mx1 withDouble:py - my1];
          [rp_ lineToWithDouble:px + mx1 withDouble:py + my1];
        }
        xPrev = px;
        yPrev = py;
        mx1 = -mx1;
        my1 = -my1;
      }
    }
    else {
      [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) cubicToWithDouble:x2 + mx1 withDouble:y2 + my1 withDouble:x3 + mx4 withDouble:y3 + my4 withDouble:x4 + mx4 withDouble:y4 + my4];
      [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) cubicToWithDouble:x2 - mx1 withDouble:y2 - my1 withDouble:x3 - mx4 withDouble:y3 - my4 withDouble:x4 - mx4 withDouble:y4 - my4];
    }
  }
  else {
    [self addSubCubicWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withDouble:x3 withDouble:y3 withDouble:x4 withDouble:y4 withInt:0];
  }
}

- (void)addSubCubicWithDouble:(jdouble)x1
                   withDouble:(jdouble)y1
                   withDouble:(jdouble)x2
                   withDouble:(jdouble)y2
                   withDouble:(jdouble)x3
                   withDouble:(jdouble)y3
                   withDouble:(jdouble)x4
                   withDouble:(jdouble)y4
                      withInt:(jint)level {
  jdouble x12 = x1 - x2;
  jdouble y12 = y1 - y2;
  jdouble x23 = x2 - x3;
  jdouble y23 = y2 - y3;
  jdouble x34 = x3 - x4;
  jdouble y34 = y3 - y4;
  jdouble cos2 = -x12 * x23 - y12 * y23;
  jdouble cos3 = -x23 * x34 - y23 * y34;
  jdouble sin2 = -x12 * y23 + y12 * x23;
  jdouble sin3 = -x23 * y34 + y23 * x34;
  jdouble sin0 = -x12 * y34 + y12 * x34;
  jdouble cos0 = -x12 * x34 - y12 * y34;
  if (level < GBasicStrokeI_MAX_LEVEL && (sin2 != 0.0 || sin3 != 0.0 || sin0 != 0.0) && (cos2 >= 0.0 || cos3 >= 0.0 || cos0 >= 0.0 || (JavaLangMath_absWithDouble_(sin2 / cos2) > curveDelta_) || (JavaLangMath_absWithDouble_(sin3 / cos3) > curveDelta_) || (JavaLangMath_absWithDouble_(sin0 / cos0) > curveDelta_))) {
    jdouble cx = (x2 + x3) / 2.0;
    jdouble cy = (y2 + y3) / 2.0;
    jdouble lx2 = (x2 + x1) / 2.0;
    jdouble ly2 = (y2 + y1) / 2.0;
    jdouble rx3 = (x3 + x4) / 2.0;
    jdouble ry3 = (y3 + y4) / 2.0;
    jdouble lx3 = (cx + lx2) / 2.0;
    jdouble ly3 = (cy + ly2) / 2.0;
    jdouble rx2 = (cx + rx3) / 2.0;
    jdouble ry2 = (cy + ry3) / 2.0;
    cx = (lx3 + rx2) / 2.0;
    cy = (ly3 + ry2) / 2.0;
    [self addSubCubicWithDouble:x1 withDouble:y1 withDouble:lx2 withDouble:ly2 withDouble:lx3 withDouble:ly3 withDouble:cx withDouble:cy withInt:level + 1];
    [self addSubCubicWithDouble:cx withDouble:cy withDouble:rx2 withDouble:ry2 withDouble:rx3 withDouble:ry3 withDouble:x4 withDouble:y4 withInt:level + 1];
  }
  else {
    jdouble w, mx1, my1, mx2, my2, mx3, my3, mx4, my4;
    jdouble l12 = JavaLangMath_sqrtWithDouble_(x12 * x12 + y12 * y12);
    jdouble l23 = JavaLangMath_sqrtWithDouble_(x23 * x23 + y23 * y23);
    jdouble l34 = JavaLangMath_sqrtWithDouble_(x34 * x34 + y34 * y34);
    if (l12 == 0.0) {
      w = w2_ / l23;
      mx1 = y23 * w;
      my1 = -x23 * w;
      w = w2_ / l34;
      mx4 = y34 * w;
      my4 = -x34 * w;
    }
    else if (l34 == 0.0) {
      w = w2_ / l12;
      mx1 = y12 * w;
      my1 = -x12 * w;
      w = w2_ / l23;
      mx4 = y23 * w;
      my4 = -x23 * w;
    }
    else {
      w = w2_ / l12;
      mx1 = y12 * w;
      my1 = -x12 * w;
      w = w2_ / l34;
      mx4 = y34 * w;
      my4 = -x34 * w;
    }
    if (sin2 == 0.0) {
      mx2 = mx1;
      my2 = my1;
    }
    else {
      w = w2_ / sin2;
      mx2 = -(x12 * l23 - x23 * l12) * w;
      my2 = -(y12 * l23 - y23 * l12) * w;
    }
    if (sin3 == 0.0) {
      mx3 = mx4;
      my3 = my4;
    }
    else {
      w = w2_ / sin3;
      mx3 = -(x23 * l34 - x34 * l23) * w;
      my3 = -(y23 * l34 - y34 * l23) * w;
    }
    [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) cubicToWithDouble:x2 + mx2 withDouble:y2 + my2 withDouble:x3 + mx3 withDouble:y3 + my3 withDouble:x4 + mx4 withDouble:y4 + my4];
    [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) cubicToWithDouble:x2 - mx2 withDouble:y2 - my2 withDouble:x3 - mx3 withDouble:y3 - my3 withDouble:x4 - mx4 withDouble:y4 - my4];
  }
}

- (void)addDashLineWithDouble:(jdouble)x1
                   withDouble:(jdouble)y1
                   withDouble:(jdouble)x2
                   withDouble:(jdouble)y2 {
  jdouble x21 = x2 - x1;
  jdouble y21 = y2 - y1;
  jdouble l21 = JavaLangMath_sqrtWithDouble_(x21 * x21 + y21 * y21);
  if (l21 == 0.0) {
    return;
  }
  jdouble px1, py1;
  px1 = py1 = 0.0;
  jdouble w = w2_ / l21;
  jdouble mx = -y21 * w;
  jdouble my = x21 * w;
  [((GBasicStrokeI_Dasher *) nil_chk(dasher_)) init__WithGBasicStrokeI_DashIterator:new_GBasicStrokeI_DashIterator_Line_initWithDouble_(l21)];
  while (![dasher_ eof]) {
    jdouble t = [dasher_ getValue];
    scx_ = x1 + t * x21;
    scy_ = y1 + t * y21;
    if ([dasher_ isOpen]) {
      px1 = scx_;
      py1 = scy_;
      jdouble lx1 = px1 + mx;
      jdouble ly1 = py1 + my;
      jdouble rx1 = px1 - mx;
      jdouble ry1 = py1 - my;
      if (isMove_) {
        isMove_ = NO;
        smx_ = px1;
        smy_ = py1;
        [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) clean];
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) moveToWithDouble:lx1 withDouble:ly1];
        [rp_ moveToWithDouble:rx1 withDouble:ry1];
      }
      else {
        [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:x1 withDouble:y1 withDouble:lx1 withDouble:ly1 withBoolean:YES];
        [self addJoinWithGBasicStrokeI_BufferedPath:rp_ withDouble:x1 withDouble:y1 withDouble:rx1 withDouble:ry1 withBoolean:NO];
      }
    }
    else if ([dasher_ isContinue]) {
      jdouble px2 = scx_;
      jdouble py2 = scy_;
      [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) lineToWithDouble:px2 + mx withDouble:py2 + my];
      [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) lineToWithDouble:px2 - mx withDouble:py2 - my];
      if (dasher_->close_) {
        [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:px2 withDouble:py2 withDouble:rp_->xLast_ withDouble:rp_->yLast_];
        [lp_ combineWithGBasicStrokeI_BufferedPath:rp_];
        if (isFirst_) {
          isFirst_ = NO;
          fmx_ = smx_;
          fmy_ = smy_;
          sp_ = lp_;
          lp_ = new_GBasicStrokeI_BufferedPath_init();
        }
        else {
          [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:smx_ withDouble:smy_ withDouble:lp_->xMove_ withDouble:lp_->yMove_];
          [lp_ closePath];
        }
        isMove_ = YES;
      }
    }
    [dasher_ next];
  }
}

- (void)addDashQuadWithDouble:(jdouble)x1
                   withDouble:(jdouble)y1
                   withDouble:(jdouble)x2
                   withDouble:(jdouble)y2
                   withDouble:(jdouble)x3
                   withDouble:(jdouble)y3 {
  jdouble x21 = x2 - x1;
  jdouble y21 = y2 - y1;
  jdouble x23 = x2 - x3;
  jdouble y23 = y2 - y3;
  jdouble l21 = JavaLangMath_sqrtWithDouble_(x21 * x21 + y21 * y21);
  jdouble l23 = JavaLangMath_sqrtWithDouble_(x23 * x23 + y23 * y23);
  if (l21 == 0.0 && l23 == 0.0) {
    return;
  }
  if (l21 == 0.0) {
    [self addDashLineWithDouble:x2 withDouble:y2 withDouble:x3 withDouble:y3];
    return;
  }
  if (l23 == 0.0) {
    [self addDashLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
    return;
  }
  jdouble ax = x1 + x3 - x2 - x2;
  jdouble ay = y1 + y3 - y2 - y2;
  jdouble bx = x2 - x1;
  jdouble by = y2 - y1;
  jdouble cx = x1;
  jdouble cy = y1;
  jdouble px1, py1, dx1, dy1;
  px1 = py1 = dx1 = dy1 = 0.0;
  jdouble prev = 0.0;
  [((GBasicStrokeI_Dasher *) nil_chk(dasher_)) init__WithGBasicStrokeI_DashIterator:new_GBasicStrokeI_DashIterator_Quad_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, x3, y3)];
  while (![dasher_ eof]) {
    jdouble t = [dasher_ getValue];
    jdouble dx = t * ax + bx;
    jdouble dy = t * ay + by;
    scx_ = t * (dx + bx) + cx;
    scy_ = t * (dy + by) + cy;
    if ([dasher_ isOpen]) {
      px1 = scx_;
      py1 = scy_;
      dx1 = dx;
      dy1 = dy;
      jdouble w = w2_ / JavaLangMath_sqrtWithDouble_(dx1 * dx1 + dy1 * dy1);
      jdouble mx1 = -dy1 * w;
      jdouble my1 = dx1 * w;
      jdouble lx1 = px1 + mx1;
      jdouble ly1 = py1 + my1;
      jdouble rx1 = px1 - mx1;
      jdouble ry1 = py1 - my1;
      if (isMove_) {
        isMove_ = NO;
        smx_ = px1;
        smy_ = py1;
        [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) clean];
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) moveToWithDouble:lx1 withDouble:ly1];
        [rp_ moveToWithDouble:rx1 withDouble:ry1];
      }
      else {
        [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:x1 withDouble:y1 withDouble:lx1 withDouble:ly1 withBoolean:YES];
        [self addJoinWithGBasicStrokeI_BufferedPath:rp_ withDouble:x1 withDouble:y1 withDouble:rx1 withDouble:ry1 withBoolean:NO];
      }
    }
    else if ([dasher_ isContinue]) {
      jdouble px3 = scx_;
      jdouble py3 = scy_;
      jdouble sx = x2 - x23 * prev;
      jdouble sy = y2 - y23 * prev;
      jdouble t2 = (t - prev) / (1 - prev);
      jdouble px2 = px1 + (sx - px1) * t2;
      jdouble py2 = py1 + (sy - py1) * t2;
      [self addQuadWithDouble:px1 withDouble:py1 withDouble:px2 withDouble:py2 withDouble:px3 withDouble:py3];
      if ([dasher_ isClosed]) {
        [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:px3 withDouble:py3 withDouble:((GBasicStrokeI_BufferedPath *) nil_chk(rp_))->xLast_ withDouble:rp_->yLast_];
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) combineWithGBasicStrokeI_BufferedPath:rp_];
        if (isFirst_) {
          isFirst_ = NO;
          fmx_ = smx_;
          fmy_ = smy_;
          sp_ = lp_;
          lp_ = new_GBasicStrokeI_BufferedPath_init();
        }
        else {
          [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:smx_ withDouble:smy_ withDouble:lp_->xMove_ withDouble:lp_->yMove_];
          [lp_ closePath];
        }
        isMove_ = YES;
      }
    }
    prev = t;
    [dasher_ next];
  }
}

- (void)addDashCubicWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2
                    withDouble:(jdouble)x3
                    withDouble:(jdouble)y3
                    withDouble:(jdouble)x4
                    withDouble:(jdouble)y4 {
  jdouble x12 = x1 - x2;
  jdouble y12 = y1 - y2;
  jdouble x23 = x2 - x3;
  jdouble y23 = y2 - y3;
  jdouble x34 = x3 - x4;
  jdouble y34 = y3 - y4;
  jdouble l12 = JavaLangMath_sqrtWithDouble_(x12 * x12 + y12 * y12);
  jdouble l23 = JavaLangMath_sqrtWithDouble_(x23 * x23 + y23 * y23);
  jdouble l34 = JavaLangMath_sqrtWithDouble_(x34 * x34 + y34 * y34);
  if (l12 == 0.0 && l23 == 0.0 && l34 == 0.0) {
    return;
  }
  if (l12 == 0.0 && l23 == 0.0) {
    [self addDashLineWithDouble:x3 withDouble:y3 withDouble:x4 withDouble:y4];
    return;
  }
  if (l23 == 0.0 && l34 == 0.0) {
    [self addDashLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
    return;
  }
  if (l12 == 0.0 && l34 == 0.0) {
    [self addDashLineWithDouble:x2 withDouble:y2 withDouble:x3 withDouble:y3];
    return;
  }
  jdouble ax = x4 - x1 + 3.0 * (x2 - x3);
  jdouble ay = y4 - y1 + 3.0 * (y2 - y3);
  jdouble bx = 3.0 * (x1 + x3 - x2 - x2);
  jdouble by = 3.0 * (y1 + y3 - y2 - y2);
  jdouble cx = 3.0 * (x2 - x1);
  jdouble cy = 3.0 * (y2 - y1);
  jdouble dx = x1;
  jdouble dy = y1;
  jdouble px1 = 0.0;
  jdouble py1 = 0.0;
  jdouble prev = 0.0;
  [((GBasicStrokeI_Dasher *) nil_chk(dasher_)) init__WithGBasicStrokeI_DashIterator:new_GBasicStrokeI_DashIterator_Cubic_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, x3, y3, x4, y4)];
  while (![dasher_ eof]) {
    jdouble t = [dasher_ getValue];
    scx_ = t * (t * (t * ax + bx) + cx) + dx;
    scy_ = t * (t * (t * ay + by) + cy) + dy;
    if ([dasher_ isOpen]) {
      px1 = scx_;
      py1 = scy_;
      jdouble dx1 = t * (t * (ax + ax + ax) + bx + bx) + cx;
      jdouble dy1 = t * (t * (ay + ay + ay) + by + by) + cy;
      jdouble w = w2_ / JavaLangMath_sqrtWithDouble_(dx1 * dx1 + dy1 * dy1);
      jdouble mx1 = -dy1 * w;
      jdouble my1 = dx1 * w;
      jdouble lx1 = px1 + mx1;
      jdouble ly1 = py1 + my1;
      jdouble rx1 = px1 - mx1;
      jdouble ry1 = py1 - my1;
      if (isMove_) {
        isMove_ = NO;
        smx_ = px1;
        smy_ = py1;
        [((GBasicStrokeI_BufferedPath *) nil_chk(rp_)) clean];
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) moveToWithDouble:lx1 withDouble:ly1];
        [rp_ moveToWithDouble:rx1 withDouble:ry1];
      }
      else {
        [self addJoinWithGBasicStrokeI_BufferedPath:lp_ withDouble:x1 withDouble:y1 withDouble:lx1 withDouble:ly1 withBoolean:YES];
        [self addJoinWithGBasicStrokeI_BufferedPath:rp_ withDouble:x1 withDouble:y1 withDouble:rx1 withDouble:ry1 withBoolean:NO];
      }
    }
    else if ([dasher_ isContinue]) {
      jdouble sx1 = x2 - x23 * prev;
      jdouble sy1 = y2 - y23 * prev;
      jdouble sx2 = x3 - x34 * prev;
      jdouble sy2 = y3 - y34 * prev;
      jdouble sx3 = sx1 + (sx2 - sx1) * prev;
      jdouble sy3 = sy1 + (sy2 - sy1) * prev;
      jdouble t2 = (t - prev) / (1 - prev);
      jdouble sx4 = sx3 + (sx2 - sx3) * t2;
      jdouble sy4 = sy3 + (sy2 - sy3) * t2;
      jdouble px4 = scx_;
      jdouble py4 = scy_;
      jdouble px2 = px1 + (sx3 - px1) * t2;
      jdouble py2 = py1 + (sy3 - py1) * t2;
      jdouble px3 = px2 + (sx4 - px2) * t2;
      jdouble py3 = py2 + (sy4 - py2) * t2;
      [self addCubicWithDouble:px1 withDouble:py1 withDouble:px2 withDouble:py2 withDouble:px3 withDouble:py3 withDouble:px4 withDouble:py4];
      if ([dasher_ isClosed]) {
        [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:px4 withDouble:py4 withDouble:((GBasicStrokeI_BufferedPath *) nil_chk(rp_))->xLast_ withDouble:rp_->yLast_];
        [((GBasicStrokeI_BufferedPath *) nil_chk(lp_)) combineWithGBasicStrokeI_BufferedPath:rp_];
        if (isFirst_) {
          isFirst_ = NO;
          fmx_ = smx_;
          fmy_ = smy_;
          sp_ = lp_;
          lp_ = new_GBasicStrokeI_BufferedPath_init();
        }
        else {
          [self addCapWithGBasicStrokeI_BufferedPath:lp_ withDouble:smx_ withDouble:smy_ withDouble:lp_->xMove_ withDouble:lp_->yMove_];
          [lp_ closePath];
        }
        isMove_ = YES;
      }
    }
    prev = t;
    [dasher_ next];
  }
}

- (instancetype)initWithOrgGeogebraCommonAwtGBasicStroke:(id<OrgGeogebraCommonAwtGBasicStroke>)objStroke {
  GBasicStrokeI_initWithOrgGeogebraCommonAwtGBasicStroke_(self, objStroke);
  return self;
}

- (jint)getLineCap {
  return lineCap_;
}

- (id<OrgGeogebraGgbjdkJavaAwtGeomShape>)createStrokedShapeWithOrgGeogebraGgbjdkJavaAwtGeomShape:(id<OrgGeogebraGgbjdkJavaAwtGeomShape>)shape {
  return shape;
}

+ (jint)getJoinWithNSString:(NSString *)join {
  return GBasicStrokeI_getJoinWithNSString_(join);
}

+ (jint)getCapWithNSString:(NSString *)join {
  return GBasicStrokeI_getCapWithNSString_(join);
}

+ (void)initialize {
  if (self == [GBasicStrokeI class]) {
    GBasicStrokeI_CUBIC_ARC_ = 4.0 / 3.0 * (JavaLangMath_sqrtWithDouble_(2.0) - 1);
    J2OBJC_SET_INITIALIZED(GBasicStrokeI)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GBasicStrokeI", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withInt:withInt:withFloat:withFloatArray:withFloat:", "GBasicStrokeI", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withInt:withInt:withFloat:", "GBasicStrokeI", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withInt:withInt:", "GBasicStrokeI", NULL, 0x1, NULL, NULL },
    { "initWithFloat:", "GBasicStrokeI", NULL, 0x1, NULL, NULL },
    { "getLineWidth", NULL, "F", 0x1, NULL, NULL },
    { "getEndCap", NULL, "I", 0x1, NULL, NULL },
    { "getLineJoin", NULL, "I", 0x1, NULL, NULL },
    { "getMiterLimit", NULL, "F", 0x1, NULL, NULL },
    { "getDashArray", NULL, "[F", 0x1, NULL, NULL },
    { "getDashPhase", NULL, "F", 0x1, NULL, NULL },
    { "getCurveDeltaWithDouble:", "getCurveDelta", "D", 0x0, NULL, NULL },
    { "getCornerDeltaWithDouble:", "getCornerDelta", "D", 0x0, NULL, NULL },
    { "getZeroDeltaWithDouble:", "getZeroDelta", "D", 0x0, NULL, NULL },
    { "createStrokedShapeWithOrgGeogebraCommonAwtGShape:", "createStrokedShape", "Lorg.geogebra.common.awt.GShape;", 0x1, NULL, NULL },
    { "createSolidShapeWithOrgGeogebraCommonAwtGPathIterator:", "createSolidShape", "V", 0x0, NULL, NULL },
    { "closeSolidShape", NULL, "V", 0x0, NULL, NULL },
    { "createDashedShapeWithOrgGeogebraCommonAwtGPathIterator:", "createDashedShape", "V", 0x0, NULL, NULL },
    { "closeDashedShape", NULL, "V", 0x0, NULL, NULL },
    { "addCapWithGBasicStrokeI_BufferedPath:withDouble:withDouble:withDouble:withDouble:", "addCap", "V", 0x0, NULL, NULL },
    { "addJoinWithGBasicStrokeI_BufferedPath:withDouble:withDouble:withDouble:withDouble:withBoolean:", "addJoin", "V", 0x0, NULL, NULL },
    { "addRoundJoinWithGBasicStrokeI_BufferedPath:withDouble:withDouble:withDouble:withDouble:withBoolean:", "addRoundJoin", "V", 0x0, NULL, NULL },
    { "addLineWithDouble:withDouble:withDouble:withDouble:withBoolean:", "addLine", "V", 0x0, NULL, NULL },
    { "addQuadWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "addQuad", "V", 0x0, NULL, NULL },
    { "addSubQuadWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "addSubQuad", "V", 0x0, NULL, NULL },
    { "addCubicWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "addCubic", "V", 0x0, NULL, NULL },
    { "addSubCubicWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "addSubCubic", "V", 0x0, NULL, NULL },
    { "addDashLineWithDouble:withDouble:withDouble:withDouble:", "addDashLine", "V", 0x0, NULL, NULL },
    { "addDashQuadWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "addDashQuad", "V", 0x0, NULL, NULL },
    { "addDashCubicWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "addDashCubic", "V", 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonAwtGBasicStroke:", "GBasicStrokeI", NULL, 0x1, NULL, NULL },
    { "getLineCap", NULL, "I", 0x1, NULL, NULL },
    { "createStrokedShapeWithOrgGeogebraGgbjdkJavaAwtGeomShape:", "createStrokedShape", "Lorg.geogebra.ggbjdk.java.awt.geom.Shape;", 0x1, NULL, NULL },
    { "getJoinWithNSString:", "getJoin", "I", 0x9, NULL, NULL },
    { "getCapWithNSString:", "getCap", "I", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CAP_BUTT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GBasicStrokeI_CAP_BUTT },
    { "CAP_ROUND_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GBasicStrokeI_CAP_ROUND },
    { "CAP_SQUARE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GBasicStrokeI_CAP_SQUARE },
    { "JOIN_MITER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GBasicStrokeI_JOIN_MITER },
    { "JOIN_ROUND_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GBasicStrokeI_JOIN_ROUND },
    { "JOIN_BEVEL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GBasicStrokeI_JOIN_BEVEL },
    { "MAX_LEVEL_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GBasicStrokeI_MAX_LEVEL },
    { "CURVE_DELTA_", NULL, 0x18, "D", NULL, NULL, .constantValue.asDouble = GBasicStrokeI_CURVE_DELTA },
    { "CORNER_ANGLE_", NULL, 0x18, "D", NULL, NULL, .constantValue.asDouble = GBasicStrokeI_CORNER_ANGLE },
    { "CORNER_ZERO_", NULL, 0x18, "D", NULL, NULL, .constantValue.asDouble = GBasicStrokeI_CORNER_ZERO },
    { "CUBIC_ARC_", NULL, 0x18, "D", &GBasicStrokeI_CUBIC_ARC_, NULL,  },
    { "width_", NULL, 0x0, "F", NULL, NULL,  },
    { "cap_", NULL, 0x0, "I", NULL, NULL,  },
    { "join_", NULL, 0x0, "I", NULL, NULL,  },
    { "miterLimit_", NULL, 0x0, "F", NULL, NULL,  },
    { "dash_", NULL, 0x0, "[F", NULL, NULL,  },
    { "dashPhase_", NULL, 0x0, "F", NULL, NULL,  },
    { "curveDelta_", NULL, 0x0, "D", NULL, NULL,  },
    { "cornerDelta_", NULL, 0x0, "D", NULL, NULL,  },
    { "zeroDelta_", NULL, 0x0, "D", NULL, NULL,  },
    { "w2_", NULL, 0x0, "D", NULL, NULL,  },
    { "fmx_", NULL, 0x0, "D", NULL, NULL,  },
    { "fmy_", NULL, 0x0, "D", NULL, NULL,  },
    { "scx_", NULL, 0x0, "D", NULL, NULL,  },
    { "scy_", NULL, 0x0, "D", NULL, NULL,  },
    { "smx_", NULL, 0x0, "D", NULL, NULL,  },
    { "smy_", NULL, 0x0, "D", NULL, NULL,  },
    { "mx_", NULL, 0x0, "D", NULL, NULL,  },
    { "my_", NULL, 0x0, "D", NULL, NULL,  },
    { "cx_", NULL, 0x0, "D", NULL, NULL,  },
    { "cy_", NULL, 0x0, "D", NULL, NULL,  },
    { "isMove_", NULL, 0x0, "Z", NULL, NULL,  },
    { "isFirst_", NULL, 0x0, "Z", NULL, NULL,  },
    { "checkMove_", NULL, 0x0, "Z", NULL, NULL,  },
    { "dst_", NULL, 0x0, "Lorg.geogebra.iOS.awt.GBasicStrokeI$BufferedPath;", NULL, NULL,  },
    { "lp_", NULL, 0x0, "Lorg.geogebra.iOS.awt.GBasicStrokeI$BufferedPath;", NULL, NULL,  },
    { "rp_", NULL, 0x0, "Lorg.geogebra.iOS.awt.GBasicStrokeI$BufferedPath;", NULL, NULL,  },
    { "sp_", NULL, 0x0, "Lorg.geogebra.iOS.awt.GBasicStrokeI$BufferedPath;", NULL, NULL,  },
    { "dasher_", NULL, 0x0, "Lorg.geogebra.iOS.awt.GBasicStrokeI$Dasher;", NULL, NULL,  },
    { "lineWidth_", NULL, 0x2, "F", NULL, NULL,  },
    { "lineCap_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineJoin_", NULL, 0x2, "I", NULL, NULL,  },
    { "dasharray_", NULL, 0x2, "[F", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.iOS.awt.GBasicStrokeI$Dasher;", "Lorg.geogebra.iOS.awt.GBasicStrokeI$DashIterator;", "Lorg.geogebra.iOS.awt.GBasicStrokeI$BufferedPath;"};
  static const J2ObjcClassInfo _GBasicStrokeI = { 2, "GBasicStrokeI", "org.geogebra.iOS.awt", NULL, 0x1, 35, methods, 43, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_GBasicStrokeI;
}

@end

void GBasicStrokeI_init(GBasicStrokeI *self) {
  (void) GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_withFloatArray_withFloat_(self, 1.0f, GBasicStrokeI_CAP_SQUARE, GBasicStrokeI_JOIN_MITER, 10.0f, nil, 0.0f);
}

GBasicStrokeI *new_GBasicStrokeI_init() {
  GBasicStrokeI *self = [GBasicStrokeI alloc];
  GBasicStrokeI_init(self);
  return self;
}

void GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_withFloatArray_withFloat_(GBasicStrokeI *self, jfloat width, jint cap, jint join, jfloat miterLimit, IOSFloatArray *dash, jfloat dashPhase) {
  (void) NSObject_init(self);
  self->lineWidth_ = 1;
  self->lineCap_ = GBasicStrokeI_CAP_BUTT;
  self->lineJoin_ = GBasicStrokeI_JOIN_MITER;
  self->dasharray_ = nil;
  if (width < 0.0f) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_((@"Negative width awt.133"));
  }
  if (cap != GBasicStrokeI_CAP_BUTT && cap != GBasicStrokeI_CAP_ROUND && cap != GBasicStrokeI_CAP_SQUARE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_((@"Illegal cap awt.134"));
  }
  if (join != GBasicStrokeI_JOIN_MITER && join != GBasicStrokeI_JOIN_ROUND && join != GBasicStrokeI_JOIN_BEVEL) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_((@"Illegal join awt.135"));
  }
  if (join == GBasicStrokeI_JOIN_MITER && miterLimit < 1.0f) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_((@"miterLimit less than 1.0f awt.136"));
  }
  if (dash != nil) {
    if (dashPhase < 0.0f) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_((@"Negative dashPhase awt.137"));
    }
    if (dash->size_ == 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_((@"Zero dash length awt.138"));
    }
    {
      for (jint i = 0; i < dash->size_; i++) {
        if (IOSFloatArray_Get(dash, i) < 0.0) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_((@"Negative dash[{0}] awt.139"));
        }
        if (IOSFloatArray_Get(dash, i) > 0.0) {
          goto break_ZERO;
        }
      }
      @throw new_JavaLangIllegalArgumentException_initWithNSString_((@"All dash lengths zero awt.13A"));
    }
    break_ZERO: ;
  }
  self->width_ = width;
  self->cap_ = cap;
  self->join_ = join;
  self->miterLimit_ = miterLimit;
  self->dash_ = dash;
  self->dashPhase_ = dashPhase;
}

GBasicStrokeI *new_GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_withFloatArray_withFloat_(jfloat width, jint cap, jint join, jfloat miterLimit, IOSFloatArray *dash, jfloat dashPhase) {
  GBasicStrokeI *self = [GBasicStrokeI alloc];
  GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_withFloatArray_withFloat_(self, width, cap, join, miterLimit, dash, dashPhase);
  return self;
}

void GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_(GBasicStrokeI *self, jfloat width, jint cap, jint join, jfloat miterLimit) {
  (void) GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_withFloatArray_withFloat_(self, width, cap, join, miterLimit, nil, 0.0f);
}

GBasicStrokeI *new_GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_(jfloat width, jint cap, jint join, jfloat miterLimit) {
  GBasicStrokeI *self = [GBasicStrokeI alloc];
  GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_(self, width, cap, join, miterLimit);
  return self;
}

void GBasicStrokeI_initWithFloat_withInt_withInt_(GBasicStrokeI *self, jfloat width, jint cap, jint join) {
  (void) GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_withFloatArray_withFloat_(self, width, cap, join, 10.0f, nil, 0.0f);
}

GBasicStrokeI *new_GBasicStrokeI_initWithFloat_withInt_withInt_(jfloat width, jint cap, jint join) {
  GBasicStrokeI *self = [GBasicStrokeI alloc];
  GBasicStrokeI_initWithFloat_withInt_withInt_(self, width, cap, join);
  return self;
}

void GBasicStrokeI_initWithFloat_(GBasicStrokeI *self, jfloat width) {
  (void) GBasicStrokeI_initWithFloat_withInt_withInt_withFloat_withFloatArray_withFloat_(self, width, GBasicStrokeI_CAP_SQUARE, GBasicStrokeI_JOIN_MITER, 10.0f, nil, 0.0f);
}

GBasicStrokeI *new_GBasicStrokeI_initWithFloat_(jfloat width) {
  GBasicStrokeI *self = [GBasicStrokeI alloc];
  GBasicStrokeI_initWithFloat_(self, width);
  return self;
}

void GBasicStrokeI_initWithOrgGeogebraCommonAwtGBasicStroke_(GBasicStrokeI *self, id<OrgGeogebraCommonAwtGBasicStroke> objStroke) {
  (void) NSObject_init(self);
  self->lineWidth_ = 1;
  self->lineCap_ = GBasicStrokeI_CAP_BUTT;
  self->lineJoin_ = GBasicStrokeI_JOIN_MITER;
  self->dasharray_ = nil;
  self->lineWidth_ = [((GBasicStrokeI *) nil_chk(((GBasicStrokeI *) check_class_cast(objStroke, [GBasicStrokeI class])))) getLineWidth];
  self->lineCap_ = [((GBasicStrokeI *) nil_chk(((GBasicStrokeI *) check_class_cast(objStroke, [GBasicStrokeI class])))) getLineCap];
  self->lineJoin_ = [((GBasicStrokeI *) nil_chk(((GBasicStrokeI *) check_class_cast(objStroke, [GBasicStrokeI class])))) getLineJoin];
  self->dasharray_ = [((GBasicStrokeI *) nil_chk(((GBasicStrokeI *) check_class_cast(objStroke, [GBasicStrokeI class])))) getDashArray];
}

GBasicStrokeI *new_GBasicStrokeI_initWithOrgGeogebraCommonAwtGBasicStroke_(id<OrgGeogebraCommonAwtGBasicStroke> objStroke) {
  GBasicStrokeI *self = [GBasicStrokeI alloc];
  GBasicStrokeI_initWithOrgGeogebraCommonAwtGBasicStroke_(self, objStroke);
  return self;
}

jint GBasicStrokeI_getJoinWithNSString_(NSString *join) {
  GBasicStrokeI_initialize();
  switch ([((NSString *) nil_chk(join)) charAtWithInt:0]) {
    case 'r':
    return GBasicStrokeI_JOIN_ROUND;
    case 'b':
    return GBasicStrokeI_JOIN_BEVEL;
  }
  return GBasicStrokeI_JOIN_MITER;
}

jint GBasicStrokeI_getCapWithNSString_(NSString *join) {
  GBasicStrokeI_initialize();
  switch ([((NSString *) nil_chk(join)) charAtWithInt:0]) {
    case 'r':
    return GBasicStrokeI_CAP_ROUND;
    case 's':
    return GBasicStrokeI_CAP_SQUARE;
  }
  return GBasicStrokeI_CAP_BUTT;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GBasicStrokeI)

@implementation GBasicStrokeI_Dasher

- (instancetype)initWithGBasicStrokeI:(GBasicStrokeI *)outer$
                       withFloatArray:(IOSFloatArray *)dash
                            withFloat:(jfloat)phase {
  GBasicStrokeI_Dasher_initWithGBasicStrokeI_withFloatArray_withFloat_(self, outer$, dash, phase);
  return self;
}

- (void)init__WithGBasicStrokeI_DashIterator:(GBasicStrokeI_DashIterator *)iter {
  self->iter_ = iter;
  close_ = YES;
}

- (jboolean)isOpen {
  return visible_ && pos_ < ((GBasicStrokeI_DashIterator *) nil_chk(iter_))->length_;
}

- (jboolean)isContinue {
  return !visible_ && pos_ > 0;
}

- (jboolean)isClosed {
  return close_;
}

- (jboolean)isConnected {
  return first_ && !close_;
}

- (jboolean)eof {
  if (!close_) {
    pos_ -= ((GBasicStrokeI_DashIterator *) nil_chk(iter_))->length_;
    return YES;
  }
  if (pos_ >= ((GBasicStrokeI_DashIterator *) nil_chk(iter_))->length_) {
    if (visible_) {
      pos_ -= iter_->length_;
      return YES;
    }
    close_ = (pos_ == iter_->length_);
  }
  return NO;
}

- (void)next {
  if (close_) {
    pos_ += IOSFloatArray_Get(nil_chk(dash_), index_);
    index_ = (index_ + 1) % dash_->size_;
  }
  else {
    index_ = (index_ + ((IOSFloatArray *) nil_chk(dash_))->size_ - 1) % dash_->size_;
    pos_ -= IOSFloatArray_Get(dash_, index_);
  }
  visible_ = !visible_;
}

- (jdouble)getValue {
  jdouble t = [((GBasicStrokeI_DashIterator *) nil_chk(iter_)) getNextWithDouble:pos_];
  return t < 0 ? 0 : (t > 1 ? 1 : t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGBasicStrokeI:withFloatArray:withFloat:", "Dasher", NULL, 0x0, NULL, NULL },
    { "init__WithGBasicStrokeI_DashIterator:", "init", "V", 0x0, NULL, NULL },
    { "isOpen", NULL, "Z", 0x0, NULL, NULL },
    { "isContinue", NULL, "Z", 0x0, NULL, NULL },
    { "isClosed", NULL, "Z", 0x0, NULL, NULL },
    { "isConnected", NULL, "Z", 0x0, NULL, NULL },
    { "eof", NULL, "Z", 0x0, NULL, NULL },
    { "next", NULL, "V", 0x0, NULL, NULL },
    { "getValue", NULL, "D", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pos_", NULL, 0x0, "D", NULL, NULL,  },
    { "close_", NULL, 0x0, "Z", NULL, NULL,  },
    { "visible_", NULL, 0x0, "Z", NULL, NULL,  },
    { "first_", NULL, 0x0, "Z", NULL, NULL,  },
    { "dash_", NULL, 0x0, "[F", NULL, NULL,  },
    { "phase_", NULL, 0x0, "F", NULL, NULL,  },
    { "index_", NULL, 0x0, "I", NULL, NULL,  },
    { "iter_", NULL, 0x0, "Lorg.geogebra.iOS.awt.GBasicStrokeI$DashIterator;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GBasicStrokeI_Dasher = { 2, "Dasher", "org.geogebra.iOS.awt", "GBasicStrokeI", 0x0, 9, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GBasicStrokeI_Dasher;
}

@end

void GBasicStrokeI_Dasher_initWithGBasicStrokeI_withFloatArray_withFloat_(GBasicStrokeI_Dasher *self, GBasicStrokeI *outer$, IOSFloatArray *dash, jfloat phase) {
  (void) NSObject_init(self);
  self->dash_ = dash;
  self->phase_ = phase;
  self->index_ = 0;
  self->pos_ = phase;
  self->visible_ = YES;
  while (self->pos_ >= IOSFloatArray_Get(nil_chk(dash), self->index_)) {
    self->visible_ = !self->visible_;
    self->pos_ -= IOSFloatArray_Get(dash, self->index_);
    self->index_ = (self->index_ + 1) % dash->size_;
  }
  self->pos_ = -self->pos_;
  self->first_ = self->visible_;
}

GBasicStrokeI_Dasher *new_GBasicStrokeI_Dasher_initWithGBasicStrokeI_withFloatArray_withFloat_(GBasicStrokeI *outer$, IOSFloatArray *dash, jfloat phase) {
  GBasicStrokeI_Dasher *self = [GBasicStrokeI_Dasher alloc];
  GBasicStrokeI_Dasher_initWithGBasicStrokeI_withFloatArray_withFloat_(self, outer$, dash, phase);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GBasicStrokeI_Dasher)

@implementation GBasicStrokeI_DashIterator

- (jdouble)getNextWithDouble:(jdouble)dashPos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  GBasicStrokeI_DashIterator_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getNextWithDouble:", "getNext", "D", 0x400, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FLATNESS_", NULL, 0x18, "D", NULL, NULL, .constantValue.asDouble = GBasicStrokeI_DashIterator_FLATNESS },
    { "length_", NULL, 0x0, "D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.iOS.awt.GBasicStrokeI$DashIterator$Line;", "Lorg.geogebra.iOS.awt.GBasicStrokeI$DashIterator$Quad;", "Lorg.geogebra.iOS.awt.GBasicStrokeI$DashIterator$Cubic;"};
  static const J2ObjcClassInfo _GBasicStrokeI_DashIterator = { 2, "DashIterator", "org.geogebra.iOS.awt", "GBasicStrokeI", 0x408, 2, methods, 2, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_GBasicStrokeI_DashIterator;
}

@end

void GBasicStrokeI_DashIterator_init(GBasicStrokeI_DashIterator *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GBasicStrokeI_DashIterator)

@implementation GBasicStrokeI_DashIterator_Line

- (instancetype)initWithDouble:(jdouble)len {
  GBasicStrokeI_DashIterator_Line_initWithDouble_(self, len);
  return self;
}

- (jdouble)getNextWithDouble:(jdouble)dashPos {
  return dashPos / length_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:", "Line", NULL, 0x0, NULL, NULL },
    { "getNextWithDouble:", "getNext", "D", 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _GBasicStrokeI_DashIterator_Line = { 2, "Line", "org.geogebra.iOS.awt", "GBasicStrokeI$DashIterator", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GBasicStrokeI_DashIterator_Line;
}

@end

void GBasicStrokeI_DashIterator_Line_initWithDouble_(GBasicStrokeI_DashIterator_Line *self, jdouble len) {
  (void) GBasicStrokeI_DashIterator_init(self);
  self->length_ = len;
}

GBasicStrokeI_DashIterator_Line *new_GBasicStrokeI_DashIterator_Line_initWithDouble_(jdouble len) {
  GBasicStrokeI_DashIterator_Line *self = [GBasicStrokeI_DashIterator_Line alloc];
  GBasicStrokeI_DashIterator_Line_initWithDouble_(self, len);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GBasicStrokeI_DashIterator_Line)

@implementation GBasicStrokeI_DashIterator_Quad

- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2
                    withDouble:(jdouble)x3
                    withDouble:(jdouble)y3 {
  GBasicStrokeI_DashIterator_Quad_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2, x3, y3);
  return self;
}

- (jdouble)getNextWithDouble:(jdouble)dashPos {
  jdouble t = 2.0;
  while (curLen_ <= dashPos && valPos_ < valSize_) {
    prevLen_ = curLen_;
    curLen_ += lastLen_ = IOSDoubleArray_Get(nil_chk(values_), valPos_++);
  }
  if (curLen_ > dashPos) {
    t = (valPos_ - 1 + (dashPos - prevLen_) / lastLen_) * step_;
  }
  return t;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "Quad", NULL, 0x0, NULL, NULL },
    { "getNextWithDouble:", "getNext", "D", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "valSize_", NULL, 0x0, "I", NULL, NULL,  },
    { "valPos_", NULL, 0x0, "I", NULL, NULL,  },
    { "curLen_", NULL, 0x0, "D", NULL, NULL,  },
    { "prevLen_", NULL, 0x0, "D", NULL, NULL,  },
    { "lastLen_", NULL, 0x0, "D", NULL, NULL,  },
    { "values_", NULL, 0x0, "[D", NULL, NULL,  },
    { "step_", NULL, 0x0, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GBasicStrokeI_DashIterator_Quad = { 2, "Quad", "org.geogebra.iOS.awt", "GBasicStrokeI$DashIterator", 0x8, 2, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GBasicStrokeI_DashIterator_Quad;
}

@end

void GBasicStrokeI_DashIterator_Quad_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(GBasicStrokeI_DashIterator_Quad *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x3, jdouble y3) {
  (void) GBasicStrokeI_DashIterator_init(self);
  jdouble nx = x1 + x3 - x2 - x2;
  jdouble ny = y1 + y3 - y2 - y2;
  jint n = J2ObjCFpToInt((1 + JavaLangMath_sqrtWithDouble_(0.75 * (JavaLangMath_absWithDouble_(nx) + JavaLangMath_absWithDouble_(ny)) * GBasicStrokeI_DashIterator_FLATNESS)));
  self->step_ = 1.0 / n;
  jdouble ax = x1 + x3 - x2 - x2;
  jdouble ay = y1 + y3 - y2 - y2;
  jdouble bx = 2.0 * (x2 - x1);
  jdouble by = 2.0 * (y2 - y1);
  jdouble dx1 = self->step_ * (self->step_ * ax + bx);
  jdouble dy1 = self->step_ * (self->step_ * ay + by);
  jdouble dx2 = self->step_ * (self->step_ * ax * 2.0);
  jdouble dy2 = self->step_ * (self->step_ * ay * 2.0);
  jdouble vx = x1;
  jdouble vy = y1;
  self->valSize_ = n;
  self->values_ = [IOSDoubleArray newArrayWithLength:self->valSize_];
  jdouble pvx = vx;
  jdouble pvy = vy;
  self->length_ = 0.0;
  for (jint i = 0; i < n; i++) {
    vx += dx1;
    vy += dy1;
    dx1 += dx2;
    dy1 += dy2;
    jdouble lx = vx - pvx;
    jdouble ly = vy - pvy;
    *IOSDoubleArray_GetRef(self->values_, i) = JavaLangMath_sqrtWithDouble_(lx * lx + ly * ly);
    self->length_ += IOSDoubleArray_Get(self->values_, i);
    pvx = vx;
    pvy = vy;
  }
  self->valPos_ = 0;
  self->curLen_ = 0.0;
  self->prevLen_ = 0.0;
}

GBasicStrokeI_DashIterator_Quad *new_GBasicStrokeI_DashIterator_Quad_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x3, jdouble y3) {
  GBasicStrokeI_DashIterator_Quad *self = [GBasicStrokeI_DashIterator_Quad alloc];
  GBasicStrokeI_DashIterator_Quad_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2, x3, y3);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GBasicStrokeI_DashIterator_Quad)

@implementation GBasicStrokeI_DashIterator_Cubic

- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2
                    withDouble:(jdouble)x3
                    withDouble:(jdouble)y3
                    withDouble:(jdouble)x4
                    withDouble:(jdouble)y4 {
  GBasicStrokeI_DashIterator_Cubic_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2, x3, y3, x4, y4);
  return self;
}

- (jdouble)getNextWithDouble:(jdouble)dashPos {
  jdouble t = 2.0;
  while (curLen_ <= dashPos && valPos_ < valSize_) {
    prevLen_ = curLen_;
    curLen_ += lastLen_ = IOSDoubleArray_Get(nil_chk(values_), valPos_++);
  }
  if (curLen_ > dashPos) {
    t = (valPos_ - 1 + (dashPos - prevLen_) / lastLen_) * step_;
  }
  return t;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "Cubic", NULL, 0x0, NULL, NULL },
    { "getNextWithDouble:", "getNext", "D", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "valSize_", NULL, 0x0, "I", NULL, NULL,  },
    { "valPos_", NULL, 0x0, "I", NULL, NULL,  },
    { "curLen_", NULL, 0x0, "D", NULL, NULL,  },
    { "prevLen_", NULL, 0x0, "D", NULL, NULL,  },
    { "lastLen_", NULL, 0x0, "D", NULL, NULL,  },
    { "values_", NULL, 0x0, "[D", NULL, NULL,  },
    { "step_", NULL, 0x0, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GBasicStrokeI_DashIterator_Cubic = { 2, "Cubic", "org.geogebra.iOS.awt", "GBasicStrokeI$DashIterator", 0x8, 2, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GBasicStrokeI_DashIterator_Cubic;
}

@end

void GBasicStrokeI_DashIterator_Cubic_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(GBasicStrokeI_DashIterator_Cubic *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x3, jdouble y3, jdouble x4, jdouble y4) {
  (void) GBasicStrokeI_DashIterator_init(self);
  jdouble nx1 = x1 + x3 - x2 - x2;
  jdouble ny1 = y1 + y3 - y2 - y2;
  jdouble nx2 = x2 + x4 - x3 - x3;
  jdouble ny2 = y2 + y4 - y3 - y3;
  jdouble max = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(nx1) + JavaLangMath_absWithDouble_(ny1), JavaLangMath_absWithDouble_(nx2) + JavaLangMath_absWithDouble_(ny2));
  jint n = J2ObjCFpToInt((1 + JavaLangMath_sqrtWithDouble_(0.75 * max) * GBasicStrokeI_DashIterator_FLATNESS));
  self->step_ = 1.0 / n;
  jdouble ax = x4 - x1 + 3.0 * (x2 - x3);
  jdouble ay = y4 - y1 + 3.0 * (y2 - y3);
  jdouble bx = 3.0 * (x1 + x3 - x2 - x2);
  jdouble by = 3.0 * (y1 + y3 - y2 - y2);
  jdouble cx = 3.0 * (x2 - x1);
  jdouble cy = 3.0 * (y2 - y1);
  jdouble dx1 = self->step_ * (self->step_ * (self->step_ * ax + bx) + cx);
  jdouble dy1 = self->step_ * (self->step_ * (self->step_ * ay + by) + cy);
  jdouble dx2 = self->step_ * (self->step_ * (self->step_ * ax * 6.0 + bx * 2.0));
  jdouble dy2 = self->step_ * (self->step_ * (self->step_ * ay * 6.0 + by * 2.0));
  jdouble dx3 = self->step_ * (self->step_ * (self->step_ * ax * 6.0));
  jdouble dy3 = self->step_ * (self->step_ * (self->step_ * ay * 6.0));
  jdouble vx = x1;
  jdouble vy = y1;
  self->valSize_ = n;
  self->values_ = [IOSDoubleArray newArrayWithLength:self->valSize_];
  jdouble pvx = vx;
  jdouble pvy = vy;
  self->length_ = 0.0;
  for (jint i = 0; i < n; i++) {
    vx += dx1;
    vy += dy1;
    dx1 += dx2;
    dy1 += dy2;
    dx2 += dx3;
    dy2 += dy3;
    jdouble lx = vx - pvx;
    jdouble ly = vy - pvy;
    *IOSDoubleArray_GetRef(self->values_, i) = JavaLangMath_sqrtWithDouble_(lx * lx + ly * ly);
    self->length_ += IOSDoubleArray_Get(self->values_, i);
    pvx = vx;
    pvy = vy;
  }
  self->valPos_ = 0;
  self->curLen_ = 0.0;
  self->prevLen_ = 0.0;
}

GBasicStrokeI_DashIterator_Cubic *new_GBasicStrokeI_DashIterator_Cubic_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x3, jdouble y3, jdouble x4, jdouble y4) {
  GBasicStrokeI_DashIterator_Cubic *self = [GBasicStrokeI_DashIterator_Cubic alloc];
  GBasicStrokeI_DashIterator_Cubic_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2, x3, y3, x4, y4);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GBasicStrokeI_DashIterator_Cubic)

J2OBJC_INITIALIZED_DEFN(GBasicStrokeI_BufferedPath)

IOSIntArray *GBasicStrokeI_BufferedPath_pointShift_;

@implementation GBasicStrokeI_BufferedPath

- (instancetype)init {
  GBasicStrokeI_BufferedPath_init(self);
  return self;
}

- (void)checkBufWithInt:(jint)typeCount
                withInt:(jint)pointCount {
  if (typeSize_ + typeCount > ((IOSByteArray *) nil_chk(types_))->size_) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:typeSize_ + JavaLangMath_maxWithInt_withInt_(GBasicStrokeI_BufferedPath_bufCapacity, typeCount)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(types_, 0, tmp, 0, typeSize_);
    types_ = tmp;
  }
  if (pointSize_ + pointCount > ((IOSFloatArray *) nil_chk(points_))->size_) {
    IOSFloatArray *tmp = [IOSFloatArray newArrayWithLength:pointSize_ + JavaLangMath_maxWithInt_withInt_(GBasicStrokeI_BufferedPath_bufCapacity * 2, pointCount)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(points_, 0, tmp, 0, pointSize_);
    points_ = tmp;
  }
}

- (jboolean)isEmpty {
  return typeSize_ == 0;
}

- (void)clean {
  typeSize_ = 0;
  pointSize_ = 0;
}

- (void)moveToWithDouble:(jdouble)x
              withDouble:(jdouble)y {
  [self checkBufWithInt:1 withInt:2];
  *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = OrgGeogebraCommonAwtGPathIterator_SEG_MOVETO;
  *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = xMove_ = (jfloat) x;
  *IOSFloatArray_GetRef(points_, pointSize_++) = yMove_ = (jfloat) y;
}

- (void)lineToWithDouble:(jdouble)x
              withDouble:(jdouble)y {
  [self checkBufWithInt:1 withInt:2];
  *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = OrgGeogebraCommonAwtGPathIterator_SEG_LINETO;
  *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = xLast_ = (jfloat) x;
  *IOSFloatArray_GetRef(points_, pointSize_++) = yLast_ = (jfloat) y;
}

- (void)quadToWithDouble:(jdouble)x1
              withDouble:(jdouble)y1
              withDouble:(jdouble)x2
              withDouble:(jdouble)y2 {
  [self checkBufWithInt:1 withInt:4];
  *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = OrgGeogebraCommonAwtGPathIterator_SEG_QUADTO;
  *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = (jfloat) x1;
  *IOSFloatArray_GetRef(points_, pointSize_++) = (jfloat) y1;
  *IOSFloatArray_GetRef(points_, pointSize_++) = xLast_ = (jfloat) x2;
  *IOSFloatArray_GetRef(points_, pointSize_++) = yLast_ = (jfloat) y2;
}

- (void)cubicToWithDouble:(jdouble)x1
               withDouble:(jdouble)y1
               withDouble:(jdouble)x2
               withDouble:(jdouble)y2
               withDouble:(jdouble)x3
               withDouble:(jdouble)y3 {
  [self checkBufWithInt:1 withInt:6];
  *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = OrgGeogebraCommonAwtGPathIterator_SEG_CUBICTO;
  *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = (jfloat) x1;
  *IOSFloatArray_GetRef(points_, pointSize_++) = (jfloat) y1;
  *IOSFloatArray_GetRef(points_, pointSize_++) = (jfloat) x2;
  *IOSFloatArray_GetRef(points_, pointSize_++) = (jfloat) y2;
  *IOSFloatArray_GetRef(points_, pointSize_++) = xLast_ = (jfloat) x3;
  *IOSFloatArray_GetRef(points_, pointSize_++) = yLast_ = (jfloat) y3;
}

- (void)closePath {
  [self checkBufWithInt:1 withInt:0];
  *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = OrgGeogebraCommonAwtGPathIterator_SEG_CLOSE;
}

- (void)setLastWithDouble:(jdouble)x
               withDouble:(jdouble)y {
  *IOSFloatArray_GetRef(nil_chk(points_), pointSize_ - 2) = xLast_ = (jfloat) x;
  *IOSFloatArray_GetRef(points_, pointSize_ - 1) = yLast_ = (jfloat) y;
}

- (void)appendWithGBasicStrokeI_BufferedPath:(GBasicStrokeI_BufferedPath *)p {
  [self checkBufWithInt:((GBasicStrokeI_BufferedPath *) nil_chk(p))->typeSize_ withInt:p->pointSize_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(p->points_, 0, points_, pointSize_, p->pointSize_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(p->types_, 0, types_, typeSize_, p->typeSize_);
  pointSize_ += p->pointSize_;
  typeSize_ += p->typeSize_;
  xLast_ = IOSFloatArray_Get(nil_chk(points_), pointSize_ - 2);
  yLast_ = IOSFloatArray_Get(points_, pointSize_ - 1);
}

- (void)appendReverseWithGBasicStrokeI_BufferedPath:(GBasicStrokeI_BufferedPath *)p {
  [self checkBufWithInt:((GBasicStrokeI_BufferedPath *) nil_chk(p))->typeSize_ withInt:p->pointSize_];
  for (jint i = p->pointSize_ - 2; i >= 0; i -= 2) {
    *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = IOSFloatArray_Get(p->points_, i + 0);
    *IOSFloatArray_GetRef(points_, pointSize_++) = IOSFloatArray_Get(p->points_, i + 1);
  }
  jint closeIndex = 0;
  for (jint i = p->typeSize_ - 1; i >= 0; i--) {
    jbyte type = IOSByteArray_Get(nil_chk(p->types_), i);
    if (type == OrgGeogebraCommonAwtGPathIterator_SEG_MOVETO) {
      *IOSByteArray_GetRef(types_, closeIndex) = OrgGeogebraCommonAwtGPathIterator_SEG_MOVETO;
      *IOSByteArray_GetRef(types_, typeSize_++) = OrgGeogebraCommonAwtGPathIterator_SEG_CLOSE;
    }
    else {
      if (type == OrgGeogebraCommonAwtGPathIterator_SEG_CLOSE) {
        closeIndex = typeSize_;
      }
      *IOSByteArray_GetRef(types_, typeSize_++) = type;
    }
  }
  xLast_ = IOSFloatArray_Get(nil_chk(points_), pointSize_ - 2);
  yLast_ = IOSFloatArray_Get(points_, pointSize_ - 1);
}

- (void)joinWithGBasicStrokeI_BufferedPath:(GBasicStrokeI_BufferedPath *)p {
  [self checkBufWithInt:((GBasicStrokeI_BufferedPath *) nil_chk(p))->typeSize_ - 1 withInt:p->pointSize_ - 2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(p->points_, 2, points_, pointSize_, p->pointSize_ - 2);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(p->types_, 1, types_, typeSize_, p->typeSize_ - 1);
  pointSize_ += p->pointSize_ - 2;
  typeSize_ += p->typeSize_ - 1;
  xLast_ = IOSFloatArray_Get(nil_chk(points_), pointSize_ - 2);
  yLast_ = IOSFloatArray_Get(points_, pointSize_ - 1);
}

- (void)combineWithGBasicStrokeI_BufferedPath:(GBasicStrokeI_BufferedPath *)p {
  [self checkBufWithInt:((GBasicStrokeI_BufferedPath *) nil_chk(p))->typeSize_ - 1 withInt:p->pointSize_ - 2];
  for (jint i = p->pointSize_ - 4; i >= 0; i -= 2) {
    *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = IOSFloatArray_Get(p->points_, i + 0);
    *IOSFloatArray_GetRef(points_, pointSize_++) = IOSFloatArray_Get(p->points_, i + 1);
  }
  for (jint i = p->typeSize_ - 1; i >= 1; i--) {
    *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = IOSByteArray_Get(p->types_, i);
  }
  xLast_ = IOSFloatArray_Get(nil_chk(points_), pointSize_ - 2);
  yLast_ = IOSFloatArray_Get(points_, pointSize_ - 1);
}

- (id<OrgGeogebraCommonAwtGGeneralPath>)createGeneralPath {
  OrgGeogebraGgbjdkJavaAwtGeomGeneralPath *p = new_OrgGeogebraGgbjdkJavaAwtGeomGeneralPath_init();
  jint j = 0;
  for (jint i = 0; i < typeSize_; i++) {
    jint type = IOSByteArray_Get(nil_chk(types_), i);
    switch (type) {
      case OrgGeogebraCommonAwtGPathIterator_SEG_MOVETO:
      [p moveToWithFloat:IOSFloatArray_Get(nil_chk(points_), j) withFloat:IOSFloatArray_Get(points_, j + 1)];
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_LINETO:
      [p lineToWithFloat:IOSFloatArray_Get(nil_chk(points_), j) withFloat:IOSFloatArray_Get(points_, j + 1)];
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_QUADTO:
      [p quadToWithFloat:IOSFloatArray_Get(nil_chk(points_), j) withFloat:IOSFloatArray_Get(points_, j + 1) withFloat:IOSFloatArray_Get(points_, j + 2) withFloat:IOSFloatArray_Get(points_, j + 3)];
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_CUBICTO:
      [p curveToWithFloat:IOSFloatArray_Get(nil_chk(points_), j) withFloat:IOSFloatArray_Get(points_, j + 1) withFloat:IOSFloatArray_Get(points_, j + 2) withFloat:IOSFloatArray_Get(points_, j + 3) withFloat:IOSFloatArray_Get(points_, j + 4) withFloat:IOSFloatArray_Get(points_, j + 5)];
      break;
      case OrgGeogebraCommonAwtGPathIterator_SEG_CLOSE:
      [p closePath];
      break;
    }
    j += IOSIntArray_Get(nil_chk(GBasicStrokeI_BufferedPath_pointShift_), type);
  }
  return p;
}

+ (void)initialize {
  if (self == [GBasicStrokeI_BufferedPath class]) {
    GBasicStrokeI_BufferedPath_pointShift_ = [IOSIntArray newArrayWithInts:(jint[]){ 2, 2, 4, 6, 0 } count:5];
    J2OBJC_SET_INITIALIZED(GBasicStrokeI_BufferedPath)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BufferedPath", NULL, 0x1, NULL, NULL },
    { "checkBufWithInt:withInt:", "checkBuf", "V", 0x0, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x0, NULL, NULL },
    { "clean", NULL, "V", 0x0, NULL, NULL },
    { "moveToWithDouble:withDouble:", "moveTo", "V", 0x0, NULL, NULL },
    { "lineToWithDouble:withDouble:", "lineTo", "V", 0x0, NULL, NULL },
    { "quadToWithDouble:withDouble:withDouble:withDouble:", "quadTo", "V", 0x0, NULL, NULL },
    { "cubicToWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "cubicTo", "V", 0x0, NULL, NULL },
    { "closePath", NULL, "V", 0x0, NULL, NULL },
    { "setLastWithDouble:withDouble:", "setLast", "V", 0x0, NULL, NULL },
    { "appendWithGBasicStrokeI_BufferedPath:", "append", "V", 0x0, NULL, NULL },
    { "appendReverseWithGBasicStrokeI_BufferedPath:", "appendReverse", "V", 0x0, NULL, NULL },
    { "joinWithGBasicStrokeI_BufferedPath:", "join", "V", 0x0, NULL, NULL },
    { "combineWithGBasicStrokeI_BufferedPath:", "combine", "V", 0x0, NULL, NULL },
    { "createGeneralPath", NULL, "Lorg.geogebra.common.awt.GGeneralPath;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bufCapacity_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GBasicStrokeI_BufferedPath_bufCapacity },
    { "pointShift_", NULL, 0x8, "[I", &GBasicStrokeI_BufferedPath_pointShift_, NULL,  },
    { "types_", NULL, 0x0, "[B", NULL, NULL,  },
    { "points_", NULL, 0x0, "[F", NULL, NULL,  },
    { "typeSize_", NULL, 0x0, "I", NULL, NULL,  },
    { "pointSize_", NULL, 0x0, "I", NULL, NULL,  },
    { "xLast_", NULL, 0x0, "F", NULL, NULL,  },
    { "yLast_", NULL, 0x0, "F", NULL, NULL,  },
    { "xMove_", NULL, 0x0, "F", NULL, NULL,  },
    { "yMove_", NULL, 0x0, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GBasicStrokeI_BufferedPath = { 2, "BufferedPath", "org.geogebra.iOS.awt", "GBasicStrokeI", 0x8, 15, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GBasicStrokeI_BufferedPath;
}

@end

void GBasicStrokeI_BufferedPath_init(GBasicStrokeI_BufferedPath *self) {
  (void) NSObject_init(self);
  self->types_ = [IOSByteArray newArrayWithLength:GBasicStrokeI_BufferedPath_bufCapacity];
  self->points_ = [IOSFloatArray newArrayWithLength:GBasicStrokeI_BufferedPath_bufCapacity * 2];
}

GBasicStrokeI_BufferedPath *new_GBasicStrokeI_BufferedPath_init() {
  GBasicStrokeI_BufferedPath *self = [GBasicStrokeI_BufferedPath alloc];
  GBasicStrokeI_BufferedPath_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GBasicStrokeI_BufferedPath)
