//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/java/awt/geom/Polygon.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NegativeArraySizeException.h"
#include "java/lang/System.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Point.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Polygon.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Crossings.h"

#define OrgGeogebraGgbjdkJavaAwtGeomPolygon_serialVersionUID -6460061437900069969LL
#define OrgGeogebraGgbjdkJavaAwtGeomPolygon_MIN_LENGTH 4

@interface OrgGeogebraGgbjdkJavaAwtGeomPolygon ()

- (IOSIntArray *)copyOfWithIntArray:(IOSIntArray *)source
                            withInt:(jint)newLen OBJC_METHOD_FAMILY_NONE;

- (OrgGeogebraGgbjdkSunAwtGeomCrossings *)getCrossingsWithDouble:(jdouble)xlo
                                                      withDouble:(jdouble)ylo
                                                      withDouble:(jdouble)xhi
                                                      withDouble:(jdouble)yhi;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomPolygon, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomPolygon, MIN_LENGTH, jint)

__attribute__((unused)) static IOSIntArray *OrgGeogebraGgbjdkJavaAwtGeomPolygon_copyOfWithIntArray_withInt_(OrgGeogebraGgbjdkJavaAwtGeomPolygon *self, IOSIntArray *source, jint newLen);

__attribute__((unused)) static OrgGeogebraGgbjdkSunAwtGeomCrossings *OrgGeogebraGgbjdkJavaAwtGeomPolygon_getCrossingsWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraGgbjdkJavaAwtGeomPolygon *self, jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi);

@implementation OrgGeogebraGgbjdkJavaAwtGeomPolygon

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_init(self);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)xpoints
                    withIntArray:(IOSIntArray *)ypoints
                         withInt:(jint)npoints {
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_initWithIntArray_withIntArray_withInt_(self, xpoints, ypoints, npoints);
  return self;
}

- (IOSIntArray *)copyOfWithIntArray:(IOSIntArray *)source
                            withInt:(jint)newLen {
  return OrgGeogebraGgbjdkJavaAwtGeomPolygon_copyOfWithIntArray_withInt_(self, source, newLen);
}

- (void)reset {
  npoints_ = 0;
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_set_bounds_(self, nil);
}

- (void)invalidate {
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_set_bounds_(self, nil);
}

- (void)translateWithInt:(jint)deltaX
                 withInt:(jint)deltaY {
  for (jint i = 0; i < npoints_; i++) {
    *IOSIntArray_GetRef(nil_chk(xpoints_), i) += deltaX;
    *IOSIntArray_GetRef(nil_chk(ypoints_), i) += deltaY;
  }
  if (bounds_ != nil) {
    [bounds_ translateWithInt:deltaX withInt:deltaY];
  }
}

- (void)calculateBoundsWithIntArray:(IOSIntArray *)xpoints
                       withIntArray:(IOSIntArray *)ypoints
                            withInt:(jint)npoints {
  jint boundsMinX = JavaLangInteger_MAX_VALUE;
  jint boundsMinY = JavaLangInteger_MAX_VALUE;
  jint boundsMaxX = JavaLangInteger_MIN_VALUE;
  jint boundsMaxY = JavaLangInteger_MIN_VALUE;
  for (jint i = 0; i < npoints; i++) {
    jint x = IOSIntArray_Get(nil_chk(xpoints), i);
    boundsMinX = JavaLangMath_minWithInt_withInt_(boundsMinX, x);
    boundsMaxX = JavaLangMath_maxWithInt_withInt_(boundsMaxX, x);
    jint y = IOSIntArray_Get(nil_chk(ypoints), i);
    boundsMinY = JavaLangMath_minWithInt_withInt_(boundsMinY, y);
    boundsMaxY = JavaLangMath_maxWithInt_withInt_(boundsMaxY, y);
  }
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_setAndConsume_bounds_(self, new_OrgGeogebraGgbjdkJavaAwtGeomRectangle_initWithInt_withInt_withInt_withInt_(boundsMinX, boundsMinY, boundsMaxX - boundsMinX, boundsMaxY - boundsMinY));
}

- (void)updateBoundsWithInt:(jint)x
                    withInt:(jint)y {
  if (x < ((OrgGeogebraGgbjdkJavaAwtGeomRectangle *) nil_chk(bounds_))->x_) {
    bounds_->width_ = bounds_->width_ + (bounds_->x_ - x);
    bounds_->x_ = x;
  }
  else {
    bounds_->width_ = JavaLangMath_maxWithInt_withInt_(bounds_->width_, x - bounds_->x_);
  }
  if (y < bounds_->y_) {
    bounds_->height_ = bounds_->height_ + (bounds_->y_ - y);
    bounds_->y_ = y;
  }
  else {
    bounds_->height_ = JavaLangMath_maxWithInt_withInt_(bounds_->height_, y - bounds_->y_);
  }
}

- (void)addPointWithInt:(jint)x
                withInt:(jint)y {
  if (npoints_ >= ((IOSIntArray *) nil_chk(xpoints_))->size_ || npoints_ >= ((IOSIntArray *) nil_chk(ypoints_))->size_) {
    jint newLength = npoints_ * 2;
    if (newLength < OrgGeogebraGgbjdkJavaAwtGeomPolygon_MIN_LENGTH) {
      newLength = OrgGeogebraGgbjdkJavaAwtGeomPolygon_MIN_LENGTH;
    }
    else if ((newLength & (newLength - 1)) != 0) {
      newLength = JavaLangInteger_highestOneBitWithInt_(newLength);
    }
    OrgGeogebraGgbjdkJavaAwtGeomPolygon_set_xpoints_(self, OrgGeogebraGgbjdkJavaAwtGeomPolygon_copyOfWithIntArray_withInt_(self, xpoints_, newLength));
    OrgGeogebraGgbjdkJavaAwtGeomPolygon_set_ypoints_(self, OrgGeogebraGgbjdkJavaAwtGeomPolygon_copyOfWithIntArray_withInt_(self, ypoints_, newLength));
  }
  *IOSIntArray_GetRef(nil_chk(xpoints_), npoints_) = x;
  *IOSIntArray_GetRef(nil_chk(ypoints_), npoints_) = y;
  npoints_++;
  if (bounds_ != nil) {
    [self updateBoundsWithInt:x withInt:y];
  }
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle *)getBounds {
  return [self getBoundingBox];
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle *)getBoundingBox {
  if (npoints_ == 0) {
    return [new_OrgGeogebraGgbjdkJavaAwtGeomRectangle_init() autorelease];
  }
  if (bounds_ == nil) {
    [self calculateBoundsWithIntArray:xpoints_ withIntArray:ypoints_ withInt:npoints_];
  }
  return [((OrgGeogebraGgbjdkJavaAwtGeomRectangle *) nil_chk(bounds_)) getBounds];
}

- (jboolean)containsWithOrgGeogebraGgbjdkJavaAwtGeomPoint:(OrgGeogebraGgbjdkJavaAwtGeomPoint *)p {
  return [self containsWithInt:((OrgGeogebraGgbjdkJavaAwtGeomPoint *) nil_chk(p))->x_ withInt:p->y_];
}

- (jboolean)containsWithInt:(jint)x
                    withInt:(jint)y {
  return [self containsWithDouble:(jdouble) x withDouble:(jdouble) y];
}

- (jboolean)insideWithInt:(jint)x
                  withInt:(jint)y {
  return [self containsWithDouble:(jdouble) x withDouble:(jdouble) y];
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)getBounds2D {
  return [self getBounds];
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  if (npoints_ <= 2 || ![((OrgGeogebraGgbjdkJavaAwtGeomRectangle *) nil_chk([self getBoundingBox])) containsWithDouble:x withDouble:y]) {
    return NO;
  }
  jint hits = 0;
  jint lastx = IOSIntArray_Get(nil_chk(xpoints_), npoints_ - 1);
  jint lasty = IOSIntArray_Get(nil_chk(ypoints_), npoints_ - 1);
  jint curx, cury;
  for (jint i = 0; i < npoints_; lastx = curx, lasty = cury, i++) {
    curx = IOSIntArray_Get(xpoints_, i);
    cury = IOSIntArray_Get(ypoints_, i);
    if (cury == lasty) {
      continue;
    }
    jint leftx;
    if (curx < lastx) {
      if (x >= lastx) {
        continue;
      }
      leftx = curx;
    }
    else {
      if (x >= curx) {
        continue;
      }
      leftx = lastx;
    }
    jdouble test1, test2;
    if (cury < lasty) {
      if (y < cury || y >= lasty) {
        continue;
      }
      if (x < leftx) {
        hits++;
        continue;
      }
      test1 = x - curx;
      test2 = y - cury;
    }
    else {
      if (y < lasty || y >= cury) {
        continue;
      }
      if (x < leftx) {
        hits++;
        continue;
      }
      test1 = x - lastx;
      test2 = y - lasty;
    }
    if (test1 < (test2 / (lasty - cury) * (lastx - curx))) {
      hits++;
    }
  }
  return ((hits & 1) != 0);
}

- (OrgGeogebraGgbjdkSunAwtGeomCrossings *)getCrossingsWithDouble:(jdouble)xlo
                                                      withDouble:(jdouble)ylo
                                                      withDouble:(jdouble)xhi
                                                      withDouble:(jdouble)yhi {
  return OrgGeogebraGgbjdkJavaAwtGeomPolygon_getCrossingsWithDouble_withDouble_withDouble_withDouble_(self, xlo, ylo, xhi, yhi);
}

- (jboolean)containsWithOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)p {
  return [self containsWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}

- (jboolean)intersectsWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)w
                      withDouble:(jdouble)h {
  if (npoints_ <= 0 || ![((OrgGeogebraGgbjdkJavaAwtGeomRectangle *) nil_chk([self getBoundingBox])) intersectsWithDouble:x withDouble:y withDouble:w withDouble:h]) {
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCrossings *cross = OrgGeogebraGgbjdkJavaAwtGeomPolygon_getCrossingsWithDouble_withDouble_withDouble_withDouble_(self, x, y, x + w, y + h);
  return (cross == nil || ![cross isEmpty]);
}

- (jboolean)intersectsWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)w
                      withInt:(jint)h {
  if (npoints_ <= 0 || ![((OrgGeogebraGgbjdkJavaAwtGeomRectangle *) nil_chk([self getBoundingBox])) intersectsWithInt:x withInt:y withInt:w withInt:h]) {
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCrossings *cross = OrgGeogebraGgbjdkJavaAwtGeomPolygon_getCrossingsWithDouble_withDouble_withDouble_withDouble_(self, x, y, x + w, y + h);
  return (cross == nil || ![cross isEmpty]);
}

- (jboolean)intersectsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)r {
  return [self intersectsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h {
  if (npoints_ <= 0 || ![((OrgGeogebraGgbjdkJavaAwtGeomRectangle *) nil_chk([self getBoundingBox])) intersectsWithDouble:x withDouble:y withDouble:w withDouble:h]) {
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCrossings *cross = OrgGeogebraGgbjdkJavaAwtGeomPolygon_getCrossingsWithDouble_withDouble_withDouble_withDouble_(self, x, y, x + w, y + h);
  return (cross != nil && [cross coversWithDouble:y withDouble:y + h]);
}

- (jboolean)containsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)r {
  return [self containsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}

- (id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraCommonAwtGAffineTransform_(self, self, at) autorelease];
}

- (void)dealloc {
  RELEASE_(xpoints_);
  RELEASE_(ypoints_);
  RELEASE_(bounds_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_getBoundingBox {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_insideWithInt_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Polygon", NULL, 0x1, NULL, NULL },
    { "initWithIntArray:withIntArray:withInt:", "Polygon", NULL, 0x1, NULL, NULL },
    { "copyOfWithIntArray:withInt:", "copyOf", "[I", 0x2, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "invalidate", NULL, "V", 0x1, NULL, NULL },
    { "translateWithInt:withInt:", "translate", "V", 0x1, NULL, NULL },
    { "calculateBoundsWithIntArray:withIntArray:withInt:", "calculateBounds", "V", 0x0, NULL, NULL },
    { "updateBoundsWithInt:withInt:", "updateBounds", "V", 0x0, NULL, NULL },
    { "addPointWithInt:withInt:", "addPoint", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle;", 0x1, NULL, NULL },
    { "getBoundingBox", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle;", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraGgbjdkJavaAwtGeomPoint:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithInt:withInt:", "contains", "Z", 0x1, NULL, NULL },
    { "insideWithInt:withInt:", "inside", "Z", 0x1, NULL, NULL },
    { "getBounds2D", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "getCrossingsWithDouble:withDouble:withDouble:withDouble:", "getCrossings", "Lorg.geogebra.ggbjdk.sun.awt.geom.Crossings;", 0x2, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGPoint2D:", "contains", "Z", 0x1, NULL, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithOrgGeogebraCommonAwtGRectangle2D:", "intersects", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGRectangle2D:", "contains", "Z", 0x1, NULL, NULL },
    { "getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:", "getPathIterator", "Lorg.geogebra.ggbjdk.java.awt.geom.PathIterator;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "npoints_", NULL, 0x1, "I", NULL, NULL,  },
    { "xpoints_", NULL, 0x1, "[I", NULL, NULL,  },
    { "ypoints_", NULL, 0x1, "[I", NULL, NULL,  },
    { "bounds_", NULL, 0x4, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle;", NULL, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraGgbjdkJavaAwtGeomPolygon_serialVersionUID },
    { "MIN_LENGTH_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomPolygon_MIN_LENGTH },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.ggbjdk.java.awt.geom.Polygon$PolygonPathIterator;"};
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomPolygon = { 2, "Polygon", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x1, 24, methods, 6, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomPolygon;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomPolygon_init(OrgGeogebraGgbjdkJavaAwtGeomPolygon *self) {
  NSObject_init(self);
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_setAndConsume_xpoints_(self, [IOSIntArray newArrayWithLength:OrgGeogebraGgbjdkJavaAwtGeomPolygon_MIN_LENGTH]);
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_setAndConsume_ypoints_(self, [IOSIntArray newArrayWithLength:OrgGeogebraGgbjdkJavaAwtGeomPolygon_MIN_LENGTH]);
}

OrgGeogebraGgbjdkJavaAwtGeomPolygon *new_OrgGeogebraGgbjdkJavaAwtGeomPolygon_init() {
  OrgGeogebraGgbjdkJavaAwtGeomPolygon *self = [OrgGeogebraGgbjdkJavaAwtGeomPolygon alloc];
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomPolygon_initWithIntArray_withIntArray_withInt_(OrgGeogebraGgbjdkJavaAwtGeomPolygon *self, IOSIntArray *xpoints, IOSIntArray *ypoints, jint npoints) {
  NSObject_init(self);
  if (npoints > ((IOSIntArray *) nil_chk(xpoints))->size_ || npoints > ((IOSIntArray *) nil_chk(ypoints))->size_) {
    @throw [new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"npoints > xpoints.length || npoints > ypoints.length") autorelease];
  }
  if (npoints < 0) {
    @throw [new_JavaLangNegativeArraySizeException_initWithNSString_(@"npoints < 0") autorelease];
  }
  self->npoints_ = npoints;
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_set_xpoints_(self, OrgGeogebraGgbjdkJavaAwtGeomPolygon_copyOfWithIntArray_withInt_(self, xpoints, npoints));
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_set_ypoints_(self, OrgGeogebraGgbjdkJavaAwtGeomPolygon_copyOfWithIntArray_withInt_(self, ypoints, npoints));
}

OrgGeogebraGgbjdkJavaAwtGeomPolygon *new_OrgGeogebraGgbjdkJavaAwtGeomPolygon_initWithIntArray_withIntArray_withInt_(IOSIntArray *xpoints, IOSIntArray *ypoints, jint npoints) {
  OrgGeogebraGgbjdkJavaAwtGeomPolygon *self = [OrgGeogebraGgbjdkJavaAwtGeomPolygon alloc];
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_initWithIntArray_withIntArray_withInt_(self, xpoints, ypoints, npoints);
  return self;
}

IOSIntArray *OrgGeogebraGgbjdkJavaAwtGeomPolygon_copyOfWithIntArray_withInt_(OrgGeogebraGgbjdkJavaAwtGeomPolygon *self, IOSIntArray *source, jint newLen) {
  IOSIntArray *output = [IOSIntArray arrayWithLength:newLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(source, 0, output, 0, JavaLangMath_minWithInt_withInt_(((IOSIntArray *) nil_chk(source))->size_, newLen));
  return output;
}

OrgGeogebraGgbjdkSunAwtGeomCrossings *OrgGeogebraGgbjdkJavaAwtGeomPolygon_getCrossingsWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraGgbjdkJavaAwtGeomPolygon *self, jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi) {
  OrgGeogebraGgbjdkSunAwtGeomCrossings *cross = [new_OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd_initWithDouble_withDouble_withDouble_withDouble_(xlo, ylo, xhi, yhi) autorelease];
  jint lastx = IOSIntArray_Get(nil_chk(self->xpoints_), self->npoints_ - 1);
  jint lasty = IOSIntArray_Get(nil_chk(self->ypoints_), self->npoints_ - 1);
  jint curx, cury;
  for (jint i = 0; i < self->npoints_; i++) {
    curx = IOSIntArray_Get(self->xpoints_, i);
    cury = IOSIntArray_Get(self->ypoints_, i);
    if ([cross accumulateLineWithDouble:lastx withDouble:lasty withDouble:curx withDouble:cury]) {
      return nil;
    }
    lastx = curx;
    lasty = cury;
  }
  return cross;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomPolygon)

@implementation OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator

- (instancetype)initWithOrgGeogebraGgbjdkJavaAwtGeomPolygon:(OrgGeogebraGgbjdkJavaAwtGeomPolygon *)outer$
                    withOrgGeogebraGgbjdkJavaAwtGeomPolygon:(OrgGeogebraGgbjdkJavaAwtGeomPolygon *)pg
                   withOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at {
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraCommonAwtGAffineTransform_(self, outer$, pg, at);
  return self;
}

- (jint)getWindingRule {
  return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_WIND_EVEN_ODD;
}

- (jboolean)isDone {
  return index_ > ((OrgGeogebraGgbjdkJavaAwtGeomPolygon *) nil_chk(poly_))->npoints_;
}

- (void)next {
  index_++;
}

- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if (index_ >= ((OrgGeogebraGgbjdkJavaAwtGeomPolygon *) nil_chk(poly_))->npoints_) {
    return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  *IOSFloatArray_GetRef(nil_chk(coords), 0) = IOSIntArray_Get(nil_chk(poly_->xpoints_), index_);
  *IOSFloatArray_GetRef(coords, 1) = IOSIntArray_Get(nil_chk(poly_->ypoints_), index_);
  if (transform_ != nil) {
    [transform_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:1];
  }
  return (index_ == 0 ? OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO : OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO);
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if (index_ >= ((OrgGeogebraGgbjdkJavaAwtGeomPolygon *) nil_chk(poly_))->npoints_) {
    return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  *IOSDoubleArray_GetRef(nil_chk(coords), 0) = IOSIntArray_Get(nil_chk(poly_->xpoints_), index_);
  *IOSDoubleArray_GetRef(coords, 1) = IOSIntArray_Get(nil_chk(poly_->ypoints_), index_);
  if (transform_ != nil) {
    [transform_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:1];
  }
  return (index_ == 0 ? OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO : OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO);
}

- (void)dealloc {
  RELEASE_(poly_);
  RELEASE_(transform_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraGgbjdkJavaAwtGeomPolygon:withOrgGeogebraGgbjdkJavaAwtGeomPolygon:withOrgGeogebraCommonAwtGAffineTransform:", "PolygonPathIterator", NULL, 0x1, NULL, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL, NULL },
    { "isDone", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "V", 0x1, NULL, NULL },
    { "currentSegmentWithFloatArray:", "currentSegment", "I", 0x1, NULL, NULL },
    { "currentSegmentWithDoubleArray:", "currentSegment", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "poly_", NULL, 0x0, "Lorg.geogebra.ggbjdk.java.awt.geom.Polygon;", NULL, NULL,  },
    { "transform_", NULL, 0x0, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "index_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator = { 2, "PolygonPathIterator", "org.geogebra.ggbjdk.java.awt.geom", "Polygon", 0x0, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraCommonAwtGAffineTransform_(OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator *self, OrgGeogebraGgbjdkJavaAwtGeomPolygon *outer$, OrgGeogebraGgbjdkJavaAwtGeomPolygon *pg, id<OrgGeogebraCommonAwtGAffineTransform> at) {
  NSObject_init(self);
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator_set_poly_(self, pg);
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator_set_transform_(self, at);
  if (((OrgGeogebraGgbjdkJavaAwtGeomPolygon *) nil_chk(pg))->npoints_ == 0) {
    self->index_ = 1;
  }
}

OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator *new_OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraCommonAwtGAffineTransform_(OrgGeogebraGgbjdkJavaAwtGeomPolygon *outer$, OrgGeogebraGgbjdkJavaAwtGeomPolygon *pg, id<OrgGeogebraCommonAwtGAffineTransform> at) {
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator *self = [OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator alloc];
  OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraGgbjdkJavaAwtGeomPolygon_withOrgGeogebraCommonAwtGAffineTransform_(self, outer$, pg, at);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomPolygon_PolygonPathIterator)
