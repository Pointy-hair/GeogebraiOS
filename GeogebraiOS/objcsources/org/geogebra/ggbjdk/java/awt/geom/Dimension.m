//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/java/awt/geom/Dimension.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Dimension.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Dimension2D.h"

#define OrgGeogebraGgbjdkJavaAwtGeomDimension_serialVersionUID 4723952579491349524LL

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomDimension, serialVersionUID, jlong)

@implementation OrgGeogebraGgbjdkJavaAwtGeomDimension

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomDimension_init(self);
  return self;
}

- (instancetype)initWithOrgGeogebraGgbjdkJavaAwtGeomDimension:(OrgGeogebraGgbjdkJavaAwtGeomDimension *)d {
  OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithOrgGeogebraGgbjdkJavaAwtGeomDimension_(self, d);
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithInt_withInt_(self, width, height);
  return self;
}

- (jdouble)getWidth {
  return width_;
}

- (jdouble)getHeight {
  return height_;
}

- (void)setSizeWithDouble:(jdouble)width
               withDouble:(jdouble)height {
  self->width_ = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(width));
  self->height_ = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(height));
}

- (OrgGeogebraGgbjdkJavaAwtGeomDimension *)getSize {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithInt_withInt_(width_, height_) autorelease];
}

- (void)setSizeWithOrgGeogebraGgbjdkJavaAwtGeomDimension:(OrgGeogebraGgbjdkJavaAwtGeomDimension *)d {
  [self setSizeWithInt:((OrgGeogebraGgbjdkJavaAwtGeomDimension *) nil_chk(d))->width_ withInt:d->height_];
}

- (void)setSizeWithInt:(jint)width
               withInt:(jint)height {
  self->width_ = width;
  self->height_ = height;
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgGeogebraGgbjdkJavaAwtGeomDimension class]]) {
    OrgGeogebraGgbjdkJavaAwtGeomDimension *d = (OrgGeogebraGgbjdkJavaAwtGeomDimension *) check_class_cast(obj, [OrgGeogebraGgbjdkJavaAwtGeomDimension class]);
    return (width_ == ((OrgGeogebraGgbjdkJavaAwtGeomDimension *) nil_chk(d))->width_) && (height_ == d->height_);
  }
  return NO;
}

- (NSUInteger)hash {
  jint sum = width_ + height_;
  return sum * (sum + 1) / 2 + width_;
}

- (NSString *)description {
  return JreStrcat("$$I$IC", [[self getClass] getName], @"[width=", width_, @",height=", height_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Dimension", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraGgbjdkJavaAwtGeomDimension:", "Dimension", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "Dimension", NULL, 0x1, NULL, NULL },
    { "getWidth", NULL, "D", 0x1, NULL, NULL },
    { "getHeight", NULL, "D", 0x1, NULL, NULL },
    { "setSizeWithDouble:withDouble:", "setSize", "V", 0x1, NULL, NULL },
    { "getSize", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Dimension;", 0x1, NULL, NULL },
    { "setSizeWithOrgGeogebraGgbjdkJavaAwtGeomDimension:", "setSize", "V", 0x1, NULL, NULL },
    { "setSizeWithInt:withInt:", "setSize", "V", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "width_", NULL, 0x1, "I", NULL, NULL,  },
    { "height_", NULL, 0x1, "I", NULL, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraGgbjdkJavaAwtGeomDimension_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomDimension = { 2, "Dimension", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x1, 12, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomDimension;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomDimension_init(OrgGeogebraGgbjdkJavaAwtGeomDimension *self) {
  OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithInt_withInt_(self, 0, 0);
}

OrgGeogebraGgbjdkJavaAwtGeomDimension *new_OrgGeogebraGgbjdkJavaAwtGeomDimension_init() {
  OrgGeogebraGgbjdkJavaAwtGeomDimension *self = [OrgGeogebraGgbjdkJavaAwtGeomDimension alloc];
  OrgGeogebraGgbjdkJavaAwtGeomDimension_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithOrgGeogebraGgbjdkJavaAwtGeomDimension_(OrgGeogebraGgbjdkJavaAwtGeomDimension *self, OrgGeogebraGgbjdkJavaAwtGeomDimension *d) {
  OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithInt_withInt_(self, ((OrgGeogebraGgbjdkJavaAwtGeomDimension *) nil_chk(d))->width_, d->height_);
}

OrgGeogebraGgbjdkJavaAwtGeomDimension *new_OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithOrgGeogebraGgbjdkJavaAwtGeomDimension_(OrgGeogebraGgbjdkJavaAwtGeomDimension *d) {
  OrgGeogebraGgbjdkJavaAwtGeomDimension *self = [OrgGeogebraGgbjdkJavaAwtGeomDimension alloc];
  OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithOrgGeogebraGgbjdkJavaAwtGeomDimension_(self, d);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithInt_withInt_(OrgGeogebraGgbjdkJavaAwtGeomDimension *self, jint width, jint height) {
  OrgGeogebraGgbjdkJavaAwtGeomDimension2D_init(self);
  self->width_ = width;
  self->height_ = height;
}

OrgGeogebraGgbjdkJavaAwtGeomDimension *new_OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithInt_withInt_(jint width, jint height) {
  OrgGeogebraGgbjdkJavaAwtGeomDimension *self = [OrgGeogebraGgbjdkJavaAwtGeomDimension alloc];
  OrgGeogebraGgbjdkJavaAwtGeomDimension_initWithInt_withInt_(self, width, height);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomDimension)
