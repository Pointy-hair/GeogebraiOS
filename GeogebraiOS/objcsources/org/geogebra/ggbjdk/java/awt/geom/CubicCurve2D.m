//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/java/awt/geom/CubicCurve2D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/CubicCurve2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/CubicIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Line2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Point2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/QuadCurve2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Shape.h"

#pragma clang diagnostic ignored "-Wprotocol"

#define OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_BELOW -2
#define OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_LOWEDGE -1
#define OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE 0
#define OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_HIGHEDGE 1
#define OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_ABOVE 2

@interface OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D ()

+ (jint)evalCubicWithDoubleArray:(IOSDoubleArray *)vals
                         withInt:(jint)num
                     withBoolean:(jboolean)include0
                     withBoolean:(jboolean)include1
                 withDoubleArray:(IOSDoubleArray *)inflect
                      withDouble:(jdouble)c1
                      withDouble:(jdouble)cp1
                      withDouble:(jdouble)cp2
                      withDouble:(jdouble)c2;

+ (void)fillEqnWithDoubleArray:(IOSDoubleArray *)eqn
                    withDouble:(jdouble)val
                    withDouble:(jdouble)c1
                    withDouble:(jdouble)cp1
                    withDouble:(jdouble)cp2
                    withDouble:(jdouble)c2;

+ (jdouble)findZeroWithDouble:(jdouble)t
                   withDouble:(jdouble)target
              withDoubleArray:(IOSDoubleArray *)eqn;

+ (void)fixRootsWithDoubleArray:(IOSDoubleArray *)res
                withDoubleArray:(IOSDoubleArray *)eqn;

+ (jint)getTagWithDouble:(jdouble)coord
              withDouble:(jdouble)low
              withDouble:(jdouble)high;

+ (jboolean)inwardsWithInt:(jint)pttag
                   withInt:(jint)opt1tag
                   withInt:(jint)opt2tag;

+ (jdouble)solveEqnWithDoubleArray:(IOSDoubleArray *)eqn
                           withInt:(jint)order
                        withDouble:(jdouble)t;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D, BELOW, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D, LOWEDGE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D, INSIDE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D, HIGHEDGE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D, ABOVE, jint)

__attribute__((unused)) static jint OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray *vals, jint num, jboolean include0, jboolean include1, IOSDoubleArray *inflect, jdouble c1, jdouble cp1, jdouble cp2, jdouble c2);

__attribute__((unused)) static void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray *eqn, jdouble val, jdouble c1, jdouble cp1, jdouble cp2, jdouble c2);

__attribute__((unused)) static jdouble OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_findZeroWithDouble_withDouble_withDoubleArray_(jdouble t, jdouble target, IOSDoubleArray *eqn);

__attribute__((unused)) static void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fixRootsWithDoubleArray_withDoubleArray_(IOSDoubleArray *res, IOSDoubleArray *eqn);

__attribute__((unused)) static jint OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(jdouble coord, jdouble low, jdouble high);

__attribute__((unused)) static jboolean OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(jint pttag, jint opt1tag, jint opt2tag);

__attribute__((unused)) static jdouble OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveEqnWithDoubleArray_withInt_withDouble_(IOSDoubleArray *eqn, jint order, jdouble t);

@implementation OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D

+ (jdouble)getFlatnessWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)ctrlx1
                      withDouble:(jdouble)ctrly1
                      withDouble:(jdouble)ctrlx2
                      withDouble:(jdouble)ctrly2
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2 {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
}

+ (jdouble)getFlatnessWithDoubleArray:(IOSDoubleArray *)coords
                              withInt:(jint)offset {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessWithDoubleArray_withInt_(coords, offset);
}

+ (jdouble)getFlatnessSqWithDouble:(jdouble)x1
                        withDouble:(jdouble)y1
                        withDouble:(jdouble)ctrlx1
                        withDouble:(jdouble)ctrly1
                        withDouble:(jdouble)ctrlx2
                        withDouble:(jdouble)ctrly2
                        withDouble:(jdouble)x2
                        withDouble:(jdouble)y2 {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
}

+ (jdouble)getFlatnessSqWithDoubleArray:(IOSDoubleArray *)coords
                                withInt:(jint)offset {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessSqWithDoubleArray_withInt_(coords, offset);
}

+ (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_(eqn);
}

+ (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn
                  withDoubleArray:(IOSDoubleArray *)res {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
}

+ (void)subdivideWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *)src
                 withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *)left
                 withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *)right {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_subdivideWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_(src, left, right);
}

+ (void)subdivideWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(jint)srcoff
                 withDoubleArray:(IOSDoubleArray *)left
                         withInt:(jint)leftoff
                 withDoubleArray:(IOSDoubleArray *)right
                         withInt:(jint)rightoff {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_subdivideWithDoubleArray_withInt_withDoubleArray_withInt_withDoubleArray_withInt_(src, srcoff, left, leftoff, right, rightoff);
}

+ (jint)evalCubicWithDoubleArray:(IOSDoubleArray *)vals
                         withInt:(jint)num
                     withBoolean:(jboolean)include0
                     withBoolean:(jboolean)include1
                 withDoubleArray:(IOSDoubleArray *)inflect
                      withDouble:(jdouble)c1
                      withDouble:(jdouble)cp1
                      withDouble:(jdouble)cp2
                      withDouble:(jdouble)c2 {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(vals, num, include0, include1, inflect, c1, cp1, cp2, c2);
}

+ (void)fillEqnWithDoubleArray:(IOSDoubleArray *)eqn
                    withDouble:(jdouble)val
                    withDouble:(jdouble)c1
                    withDouble:(jdouble)cp1
                    withDouble:(jdouble)cp2
                    withDouble:(jdouble)c2 {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, val, c1, cp1, cp2, c2);
}

+ (jdouble)findZeroWithDouble:(jdouble)t
                   withDouble:(jdouble)target
              withDoubleArray:(IOSDoubleArray *)eqn {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_findZeroWithDouble_withDouble_withDoubleArray_(t, target, eqn);
}

+ (void)fixRootsWithDoubleArray:(IOSDoubleArray *)res
                withDoubleArray:(IOSDoubleArray *)eqn {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fixRootsWithDoubleArray_withDoubleArray_(res, eqn);
}

+ (jint)getTagWithDouble:(jdouble)coord
              withDouble:(jdouble)low
              withDouble:(jdouble)high {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(coord, low, high);
}

+ (jboolean)inwardsWithInt:(jint)pttag
                   withInt:(jint)opt1tag
                   withInt:(jint)opt2tag {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(pttag, opt1tag, opt2tag);
}

+ (jdouble)solveEqnWithDoubleArray:(IOSDoubleArray *)eqn
                           withInt:(jint)order
                        withDouble:(jdouble)t {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveEqnWithDoubleArray_withInt_withDouble_(eqn, order, t);
}

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_init(self);
  return self;
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  jint crossings = 0;
  jdouble x1 = [self getX1];
  jdouble y1 = [self getY1];
  jdouble x2 = [self getX2];
  jdouble y2 = [self getY2];
  jdouble dy = y2 - y1;
  if ((dy > 0.0 && y >= y1 && y <= y2) || (dy < 0.0 && y <= y1 && y >= y2)) {
    if (x < x1 + (y - y1) * (x2 - x1) / dy) {
      crossings++;
    }
  }
  jdouble ctrlx1 = [self getCtrlX1];
  jdouble ctrly1 = [self getCtrlY1];
  jdouble ctrlx2 = [self getCtrlX2];
  jdouble ctrly2 = [self getCtrlY2];
  jboolean include0 = ((y2 - y1) * (ctrly1 - y1) >= 0);
  jboolean include1 = ((y1 - y2) * (ctrly2 - y2) >= 0);
  IOSDoubleArray *eqn = [IOSDoubleArray arrayWithLength:4];
  IOSDoubleArray *res = [IOSDoubleArray arrayWithLength:4];
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, y, y1, ctrly1, ctrly2, y2);
  jint roots = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
  roots = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(res, roots, include0, include1, eqn, x1, ctrlx1, ctrlx2, x2);
  while (--roots >= 0) {
    if (x < IOSDoubleArray_Get(res, roots)) {
      crossings++;
    }
  }
  return (crossings & 1) == 1;
}

- (jboolean)containsWithInt:(jint)x
                    withInt:(jint)y {
  jint crossings = 0;
  jdouble x1 = [self getX1];
  jdouble y1 = [self getY1];
  jdouble x2 = [self getX2];
  jdouble y2 = [self getY2];
  jdouble dy = y2 - y1;
  if ((dy > 0.0 && y >= y1 && y <= y2) || (dy < 0.0 && y <= y1 && y >= y2)) {
    if (x < x1 + (y - y1) * (x2 - x1) / dy) {
      crossings++;
    }
  }
  jdouble ctrlx1 = [self getCtrlX1];
  jdouble ctrly1 = [self getCtrlY1];
  jdouble ctrlx2 = [self getCtrlX2];
  jdouble ctrly2 = [self getCtrlY2];
  jboolean include0 = ((y2 - y1) * (ctrly1 - y1) >= 0);
  jboolean include1 = ((y1 - y2) * (ctrly2 - y2) >= 0);
  IOSDoubleArray *eqn = [IOSDoubleArray arrayWithLength:4];
  IOSDoubleArray *res = [IOSDoubleArray arrayWithLength:4];
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, y, y1, ctrly1, ctrly2, y2);
  jint roots = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
  roots = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(res, roots, include0, include1, eqn, x1, ctrlx1, ctrlx2, x2);
  while (--roots >= 0) {
    if (x < IOSDoubleArray_Get(res, roots)) {
      crossings++;
    }
  }
  return (crossings & 1) == 1;
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h {
  if (!([self containsWithDouble:x withDouble:y] && [self containsWithDouble:x + w withDouble:y] && [self containsWithDouble:x + w withDouble:y + h] && [self containsWithDouble:x withDouble:y + h])) {
    return NO;
  }
  OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *rect = [new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x, y, w, h) autorelease];
  return ![rect intersectsLineWithDouble:[self getX1] withDouble:[self getY1] withDouble:[self getX2] withDouble:[self getY2]];
}

- (jboolean)containsWithOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)p {
  return [self containsWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}

- (jboolean)containsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)r {
  return [self containsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  return [((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk([self getBounds2D])) getBounds];
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getCtrlP1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getCtrlP2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getCtrlX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getCtrlX2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getCtrlY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getCtrlY2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getFlatness {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_([self getX1], [self getY1], [self getCtrlX1], [self getCtrlY1], [self getCtrlX2], [self getCtrlY2], [self getX2], [self getY2]);
}

- (jdouble)getFlatnessSq {
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_([self getX1], [self getY1], [self getCtrlX1], [self getCtrlY1], [self getCtrlX2], [self getCtrlY2], [self getX2], [self getY2]);
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getP1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getP2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomCubicIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_withOrgGeogebraCommonAwtGAffineTransform_(self, at) autorelease];
}

- (jdouble)getX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getX2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getY2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)intersectsWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)w
                      withDouble:(jdouble)h {
  if (w < 0 || h < 0) {
    return NO;
  }
  jdouble x1 = [self getX1];
  jdouble y1 = [self getY1];
  jint x1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(x1, x, x + w);
  jint y1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(y1, y, y + h);
  if (x1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return YES;
  }
  jdouble x2 = [self getX2];
  jdouble y2 = [self getY2];
  jint x2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(x2, x, x + w);
  jint y2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(y2, y, y + h);
  if (x2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return YES;
  }
  jdouble ctrlx1 = [self getCtrlX1];
  jdouble ctrly1 = [self getCtrlY1];
  jdouble ctrlx2 = [self getCtrlX2];
  jdouble ctrly2 = [self getCtrlY2];
  jint ctrlx1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(ctrlx1, x, x + w);
  jint ctrly1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(ctrly1, y, y + h);
  jint ctrlx2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(ctrlx2, x, x + w);
  jint ctrly2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(ctrly2, y, y + h);
  if (x1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && x2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrlx1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrlx2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return NO;
  }
  if (y1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrly1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrly2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return NO;
  }
  if (x1tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && x2tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrlx1tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrlx2tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return NO;
  }
  if (y1tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y2tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrly1tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrly2tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return NO;
  }
  if (OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(x1tag, x2tag, ctrlx1tag) && OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(y1tag, y2tag, ctrly1tag)) {
    return YES;
  }
  if (OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(x2tag, x1tag, ctrlx2tag) && OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(y2tag, y1tag, ctrly2tag)) {
    return YES;
  }
  jboolean xoverlap = (x1tag * x2tag <= 0);
  jboolean yoverlap = (y1tag * y2tag <= 0);
  if (x1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && x2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && yoverlap) {
    return YES;
  }
  if (y1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && xoverlap) {
    return YES;
  }
  IOSDoubleArray *eqn = [IOSDoubleArray arrayWithLength:4];
  IOSDoubleArray *res = [IOSDoubleArray arrayWithLength:4];
  if (!yoverlap) {
    OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, (y1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? y : y + h), y1, ctrly1, ctrly2, y2);
    jint num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
    num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(res, num, YES, YES, nil, x1, ctrlx1, ctrlx2, x2);
    return (num == 2 && OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, 0), x, x + w) * OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, 1), x, x + w) <= 0);
  }
  if (!xoverlap) {
    OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, (x1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? x : x + w), x1, ctrlx1, ctrlx2, x2);
    jint num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
    num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(res, num, YES, YES, nil, y1, ctrly1, ctrly2, y2);
    return (num == 2 && OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, 0), y, y + h) * OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, 1), y, y + h) <= 0);
  }
  jdouble dx = x2 - x1;
  jdouble dy = y2 - y1;
  jdouble k = y2 * x1 - x2 * y1;
  jint c1tag, c2tag;
  if (y1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    c1tag = x1tag;
  }
  else {
    c1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_((k + dx * (y1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? y : y + h)) / dy, x, x + w);
  }
  if (y2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    c2tag = x2tag;
  }
  else {
    c2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_((k + dx * (y2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? y : y + h)) / dy, x, x + w);
  }
  if (c1tag * c2tag <= 0) {
    return YES;
  }
  c1tag = ((c1tag * x1tag <= 0) ? y1tag : y2tag);
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, (c2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? x : x + w), x1, ctrlx1, ctrlx2, x2);
  jint num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
  num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(res, num, YES, YES, nil, y1, ctrly1, ctrly2, y2);
  IOSIntArray *tags = [IOSIntArray arrayWithLength:num + 1];
  for (jint i = 0; i < num; i++) {
    *IOSIntArray_GetRef(tags, i) = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, i), y, y + h);
  }
  *IOSIntArray_GetRef(tags, num) = c1tag;
  JavaUtilArrays_sortWithIntArray_(tags);
  return ((num >= 1 && IOSIntArray_Get(tags, 0) * IOSIntArray_Get(tags, 1) <= 0) || (num >= 3 && IOSIntArray_Get(tags, 2) * IOSIntArray_Get(tags, 3) <= 0));
}

- (jboolean)intersectsWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)w
                      withInt:(jint)h {
  if (w < 0 || h < 0) {
    return NO;
  }
  jdouble x1 = [self getX1];
  jdouble y1 = [self getY1];
  jint x1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(x1, x, x + w);
  jint y1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(y1, y, y + h);
  if (x1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return YES;
  }
  jdouble x2 = [self getX2];
  jdouble y2 = [self getY2];
  jint x2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(x2, x, x + w);
  jint y2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(y2, y, y + h);
  if (x2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return YES;
  }
  jdouble ctrlx1 = [self getCtrlX1];
  jdouble ctrly1 = [self getCtrlY1];
  jdouble ctrlx2 = [self getCtrlX2];
  jdouble ctrly2 = [self getCtrlY2];
  jint ctrlx1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(ctrlx1, x, x + w);
  jint ctrly1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(ctrly1, y, y + h);
  jint ctrlx2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(ctrlx2, x, x + w);
  jint ctrly2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(ctrly2, y, y + h);
  if (x1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && x2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrlx1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrlx2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return NO;
  }
  if (y1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrly1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrly2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return NO;
  }
  if (x1tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && x2tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrlx1tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrlx2tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return NO;
  }
  if (y1tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y2tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrly1tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && ctrly2tag > OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    return NO;
  }
  if (OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(x1tag, x2tag, ctrlx1tag) && OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(y1tag, y2tag, ctrly1tag)) {
    return YES;
  }
  if (OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(x2tag, x1tag, ctrlx2tag) && OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(y2tag, y1tag, ctrly2tag)) {
    return YES;
  }
  jboolean xoverlap = (x1tag * x2tag <= 0);
  jboolean yoverlap = (y1tag * y2tag <= 0);
  if (x1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && x2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && yoverlap) {
    return YES;
  }
  if (y1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && y2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE && xoverlap) {
    return YES;
  }
  IOSDoubleArray *eqn = [IOSDoubleArray arrayWithLength:4];
  IOSDoubleArray *res = [IOSDoubleArray arrayWithLength:4];
  if (!yoverlap) {
    OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, (y1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? y : y + h), y1, ctrly1, ctrly2, y2);
    jint num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
    num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(res, num, YES, YES, nil, x1, ctrlx1, ctrlx2, x2);
    return (num == 2 && OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, 0), x, x + w) * OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, 1), x, x + w) <= 0);
  }
  if (!xoverlap) {
    OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, (x1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? x : x + w), x1, ctrlx1, ctrlx2, x2);
    jint num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
    num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(res, num, YES, YES, nil, y1, ctrly1, ctrly2, y2);
    return (num == 2 && OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, 0), y, y + h) * OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, 1), y, y + h) <= 0);
  }
  jdouble dx = x2 - x1;
  jdouble dy = y2 - y1;
  jdouble k = y2 * x1 - x2 * y1;
  jint c1tag, c2tag;
  if (y1tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    c1tag = x1tag;
  }
  else {
    c1tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_((k + dx * (y1tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? y : y + h)) / dy, x, x + w);
  }
  if (y2tag == OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
    c2tag = x2tag;
  }
  else {
    c2tag = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_((k + dx * (y2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? y : y + h)) / dy, x, x + w);
  }
  if (c1tag * c2tag <= 0) {
    return YES;
  }
  c1tag = ((c1tag * x1tag <= 0) ? y1tag : y2tag);
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(eqn, (c2tag < OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE ? x : x + w), x1, ctrlx1, ctrlx2, x2);
  jint num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
  num = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(res, num, YES, YES, nil, y1, ctrly1, ctrly2, y2);
  IOSIntArray *tags = [IOSIntArray arrayWithLength:num + 1];
  for (jint i = 0; i < num; i++) {
    *IOSIntArray_GetRef(tags, i) = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(res, i), y, y + h);
  }
  *IOSIntArray_GetRef(tags, num) = c1tag;
  JavaUtilArrays_sortWithIntArray_(tags);
  return ((num >= 1 && IOSIntArray_Get(tags, 0) * IOSIntArray_Get(tags, 1) <= 0) || (num >= 3 && IOSIntArray_Get(tags, 2) * IOSIntArray_Get(tags, 3) <= 0));
}

- (jboolean)intersectsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)r {
  return [self intersectsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}

- (void)setCurveWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *)c {
  [self setCurveWithDouble:[((OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *) nil_chk(c)) getX1] withDouble:[c getY1] withDouble:[c getCtrlX1] withDouble:[c getCtrlY1] withDouble:[c getCtrlX2] withDouble:[c getCtrlY2] withDouble:[c getX2] withDouble:[c getY2]];
}

- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCurveWithDoubleArray:(IOSDoubleArray *)coords
                        withInt:(jint)offset {
  [self setCurveWithDouble:IOSDoubleArray_Get(nil_chk(coords), offset + 0) withDouble:IOSDoubleArray_Get(coords, offset + 1) withDouble:IOSDoubleArray_Get(coords, offset + 2) withDouble:IOSDoubleArray_Get(coords, offset + 3) withDouble:IOSDoubleArray_Get(coords, offset + 4) withDouble:IOSDoubleArray_Get(coords, offset + 5) withDouble:IOSDoubleArray_Get(coords, offset + 6) withDouble:IOSDoubleArray_Get(coords, offset + 7)];
}

- (void)setCurveWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)p1
                withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)cp1
                withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)cp2
                withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)p2 {
  [self setCurveWithDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(cp1)) getX] withDouble:[cp1 getY] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(cp2)) getX] withDouble:[cp2 getY] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]];
}

- (void)setCurveWithOrgGeogebraGgbjdkJavaAwtGeomPoint2DArray:(IOSObjectArray *)pts
                                                     withInt:(jint)offset {
  [self setCurveWithDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(nil_chk(pts), offset + 0))) getX] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(pts, offset + 0))) getY] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(pts, offset + 1))) getX] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(pts, offset + 1))) getY] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(pts, offset + 2))) getX] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(pts, offset + 2))) getY] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(pts, offset + 3))) getX] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(pts, offset + 3))) getY]];
}

- (void)subdivideWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *)left
                 withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *)right {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_subdivideWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_(self, left, right);
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFlatnessWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "getFlatness", "D", 0x9, NULL, NULL },
    { "getFlatnessWithDoubleArray:withInt:", "getFlatness", "D", 0x9, NULL, NULL },
    { "getFlatnessSqWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "getFlatnessSq", "D", 0x9, NULL, NULL },
    { "getFlatnessSqWithDoubleArray:withInt:", "getFlatnessSq", "D", 0x9, NULL, NULL },
    { "solveCubicWithDoubleArray:", "solveCubic", "I", 0x9, NULL, NULL },
    { "solveCubicWithDoubleArray:withDoubleArray:", "solveCubic", "I", 0x9, NULL, NULL },
    { "subdivideWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:", "subdivide", "V", 0x9, NULL, NULL },
    { "subdivideWithDoubleArray:withInt:withDoubleArray:withInt:withDoubleArray:withInt:", "subdivide", "V", 0x9, NULL, NULL },
    { "evalCubicWithDoubleArray:withInt:withBoolean:withBoolean:withDoubleArray:withDouble:withDouble:withDouble:withDouble:", "evalCubic", "I", 0xa, NULL, NULL },
    { "fillEqnWithDoubleArray:withDouble:withDouble:withDouble:withDouble:withDouble:", "fillEqn", "V", 0xa, NULL, NULL },
    { "findZeroWithDouble:withDouble:withDoubleArray:", "findZero", "D", 0xa, NULL, NULL },
    { "fixRootsWithDoubleArray:withDoubleArray:", "fixRoots", "V", 0xa, NULL, NULL },
    { "getTagWithDouble:withDouble:withDouble:", "getTag", "I", 0xa, NULL, NULL },
    { "inwardsWithInt:withInt:withInt:", "inwards", "Z", 0xa, NULL, NULL },
    { "solveEqnWithDoubleArray:withInt:withDouble:", "solveEqn", "D", 0xa, NULL, NULL },
    { "init", "CubicCurve2D", NULL, 0x4, NULL, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithInt:withInt:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGPoint2D:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGRectangle2D:", "contains", "Z", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "getCtrlP1", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x401, NULL, NULL },
    { "getCtrlP2", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x401, NULL, NULL },
    { "getCtrlX1", NULL, "D", 0x401, NULL, NULL },
    { "getCtrlX2", NULL, "D", 0x401, NULL, NULL },
    { "getCtrlY1", NULL, "D", 0x401, NULL, NULL },
    { "getCtrlY2", NULL, "D", 0x401, NULL, NULL },
    { "getFlatness", NULL, "D", 0x1, NULL, NULL },
    { "getFlatnessSq", NULL, "D", 0x1, NULL, NULL },
    { "getP1", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x401, NULL, NULL },
    { "getP2", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x401, NULL, NULL },
    { "getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:", "getPathIterator", "Lorg.geogebra.ggbjdk.java.awt.geom.PathIterator;", 0x1, NULL, NULL },
    { "getX1", NULL, "D", 0x401, NULL, NULL },
    { "getX2", NULL, "D", 0x401, NULL, NULL },
    { "getY1", NULL, "D", 0x401, NULL, NULL },
    { "getY2", NULL, "D", 0x401, NULL, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithOrgGeogebraCommonAwtGRectangle2D:", "intersects", "Z", 0x1, NULL, NULL },
    { "setCurveWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:", "setCurve", "V", 0x1, NULL, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x401, NULL, NULL },
    { "setCurveWithDoubleArray:withInt:", "setCurve", "V", 0x1, NULL, NULL },
    { "setCurveWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:", "setCurve", "V", 0x1, NULL, NULL },
    { "setCurveWithOrgGeogebraGgbjdkJavaAwtGeomPoint2DArray:withInt:", "setCurve", "V", 0x1, NULL, NULL },
    { "subdivideWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D:", "subdivide", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BELOW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_BELOW },
    { "LOWEDGE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_LOWEDGE },
    { "INSIDE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE },
    { "HIGHEDGE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_HIGHEDGE },
    { "ABOVE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_ABOVE },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.ggbjdk.java.awt.geom.CubicCurve2D$Double;", "Lorg.geogebra.ggbjdk.java.awt.geom.CubicCurve2D$Float;"};
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D = { 2, "CubicCurve2D", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x401, 46, methods, 5, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D;
}

@end

jdouble OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  return JavaLangMath_sqrtWithDouble_(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2));
}

jdouble OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessWithDoubleArray_withInt_(IOSDoubleArray *coords, jint offset) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(coords), offset + 0), IOSDoubleArray_Get(coords, offset + 1), IOSDoubleArray_Get(coords, offset + 2), IOSDoubleArray_Get(coords, offset + 3), IOSDoubleArray_Get(coords, offset + 4), IOSDoubleArray_Get(coords, offset + 5), IOSDoubleArray_Get(coords, offset + 6), IOSDoubleArray_Get(coords, offset + 7));
}

jdouble OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  return JavaLangMath_maxWithDouble_withDouble_(OrgGeogebraGgbjdkJavaAwtGeomLine2D_ptSegDistSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, ctrlx1, ctrly1), OrgGeogebraGgbjdkJavaAwtGeomLine2D_ptSegDistSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, ctrlx2, ctrly2));
}

jdouble OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessSqWithDoubleArray_withInt_(IOSDoubleArray *coords, jint offset) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(coords), offset + 0), IOSDoubleArray_Get(coords, offset + 1), IOSDoubleArray_Get(coords, offset + 2), IOSDoubleArray_Get(coords, offset + 3), IOSDoubleArray_Get(coords, offset + 4), IOSDoubleArray_Get(coords, offset + 5), IOSDoubleArray_Get(coords, offset + 6), IOSDoubleArray_Get(coords, offset + 7));
}

jint OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_(IOSDoubleArray *eqn) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, eqn);
}

jint OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(IOSDoubleArray *eqn, IOSDoubleArray *res) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  jdouble d = IOSDoubleArray_Get(nil_chk(eqn), 3);
  if (d == 0.0) {
    return OrgGeogebraGgbjdkJavaAwtGeomQuadCurve2D_solveQuadraticWithDoubleArray_withDoubleArray_(eqn, res);
  }
  jdouble a = IOSDoubleArray_Get(eqn, 2) / d;
  jdouble b = IOSDoubleArray_Get(eqn, 1) / d;
  jdouble c = IOSDoubleArray_Get(eqn, 0) / d;
  jint roots = 0;
  jdouble Q = (a * a - 3.0 * b) / 9.0;
  jdouble R = (2.0 * a * a * a - 9.0 * a * b + 27.0 * c) / 54.0;
  jdouble R2 = R * R;
  jdouble Q3 = Q * Q * Q;
  a = a / 3.0;
  if (R2 < Q3) {
    jdouble theta = JavaLangMath_acosWithDouble_(R / JavaLangMath_sqrtWithDouble_(Q3));
    Q = -2.0 * JavaLangMath_sqrtWithDouble_(Q);
    if (res == eqn) {
      eqn = [IOSDoubleArray arrayWithLength:4];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(res, 0, eqn, 0, 4);
    }
    *IOSDoubleArray_GetRef(nil_chk(res), roots++) = Q * JavaLangMath_cosWithDouble_(theta / 3.0) - a;
    *IOSDoubleArray_GetRef(res, roots++) = Q * JavaLangMath_cosWithDouble_((theta + JavaLangMath_PI * 2.0) / 3.0) - a;
    *IOSDoubleArray_GetRef(res, roots++) = Q * JavaLangMath_cosWithDouble_((theta - JavaLangMath_PI * 2.0) / 3.0) - a;
    OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fixRootsWithDoubleArray_withDoubleArray_(res, eqn);
  }
  else {
    jboolean neg = (R < 0.0);
    jdouble S = JavaLangMath_sqrtWithDouble_(R2 - Q3);
    if (neg) {
      R = -R;
    }
    jdouble A = JavaLangMath_powWithDouble_withDouble_(R + S, 1.0 / 3.0);
    if (!neg) {
      A = -A;
    }
    jdouble B = (A == 0.0) ? 0.0 : (Q / A);
    *IOSDoubleArray_GetRef(nil_chk(res), roots++) = (A + B) - a;
  }
  return roots;
}

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_subdivideWithOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_withOrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *src, OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *left, OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *right) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  jdouble x1 = [((OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *) nil_chk(src)) getX1];
  jdouble y1 = [src getY1];
  jdouble ctrlx1 = [src getCtrlX1];
  jdouble ctrly1 = [src getCtrlY1];
  jdouble ctrlx2 = [src getCtrlX2];
  jdouble ctrly2 = [src getCtrlY2];
  jdouble x2 = [src getX2];
  jdouble y2 = [src getY2];
  jdouble centerx = (ctrlx1 + ctrlx2) / 2.0;
  jdouble centery = (ctrly1 + ctrly2) / 2.0;
  ctrlx1 = (x1 + ctrlx1) / 2.0;
  ctrly1 = (y1 + ctrly1) / 2.0;
  ctrlx2 = (x2 + ctrlx2) / 2.0;
  ctrly2 = (y2 + ctrly2) / 2.0;
  jdouble ctrlx12 = (ctrlx1 + centerx) / 2.0;
  jdouble ctrly12 = (ctrly1 + centery) / 2.0;
  jdouble ctrlx21 = (ctrlx2 + centerx) / 2.0;
  jdouble ctrly21 = (ctrly2 + centery) / 2.0;
  centerx = (ctrlx12 + ctrlx21) / 2.0;
  centery = (ctrly12 + ctrly21) / 2.0;
  if (left != nil) {
    [left setCurveWithDouble:x1 withDouble:y1 withDouble:ctrlx1 withDouble:ctrly1 withDouble:ctrlx12 withDouble:ctrly12 withDouble:centerx withDouble:centery];
  }
  if (right != nil) {
    [right setCurveWithDouble:centerx withDouble:centery withDouble:ctrlx21 withDouble:ctrly21 withDouble:ctrlx2 withDouble:ctrly2 withDouble:x2 withDouble:y2];
  }
}

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_subdivideWithDoubleArray_withInt_withDoubleArray_withInt_withDoubleArray_withInt_(IOSDoubleArray *src, jint srcoff, IOSDoubleArray *left, jint leftoff, IOSDoubleArray *right, jint rightoff) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  jdouble x1 = IOSDoubleArray_Get(nil_chk(src), srcoff + 0);
  jdouble y1 = IOSDoubleArray_Get(src, srcoff + 1);
  jdouble ctrlx1 = IOSDoubleArray_Get(src, srcoff + 2);
  jdouble ctrly1 = IOSDoubleArray_Get(src, srcoff + 3);
  jdouble ctrlx2 = IOSDoubleArray_Get(src, srcoff + 4);
  jdouble ctrly2 = IOSDoubleArray_Get(src, srcoff + 5);
  jdouble x2 = IOSDoubleArray_Get(src, srcoff + 6);
  jdouble y2 = IOSDoubleArray_Get(src, srcoff + 7);
  if (left != nil) {
    *IOSDoubleArray_GetRef(left, leftoff + 0) = x1;
    *IOSDoubleArray_GetRef(left, leftoff + 1) = y1;
  }
  if (right != nil) {
    *IOSDoubleArray_GetRef(right, rightoff + 6) = x2;
    *IOSDoubleArray_GetRef(right, rightoff + 7) = y2;
  }
  x1 = (x1 + ctrlx1) / 2.0;
  y1 = (y1 + ctrly1) / 2.0;
  x2 = (x2 + ctrlx2) / 2.0;
  y2 = (y2 + ctrly2) / 2.0;
  jdouble centerx = (ctrlx1 + ctrlx2) / 2.0;
  jdouble centery = (ctrly1 + ctrly2) / 2.0;
  ctrlx1 = (x1 + centerx) / 2.0;
  ctrly1 = (y1 + centery) / 2.0;
  ctrlx2 = (x2 + centerx) / 2.0;
  ctrly2 = (y2 + centery) / 2.0;
  centerx = (ctrlx1 + ctrlx2) / 2.0;
  centery = (ctrly1 + ctrly2) / 2.0;
  if (left != nil) {
    *IOSDoubleArray_GetRef(left, leftoff + 2) = x1;
    *IOSDoubleArray_GetRef(left, leftoff + 3) = y1;
    *IOSDoubleArray_GetRef(left, leftoff + 4) = ctrlx1;
    *IOSDoubleArray_GetRef(left, leftoff + 5) = ctrly1;
    *IOSDoubleArray_GetRef(left, leftoff + 6) = centerx;
    *IOSDoubleArray_GetRef(left, leftoff + 7) = centery;
  }
  if (right != nil) {
    *IOSDoubleArray_GetRef(right, rightoff + 0) = centerx;
    *IOSDoubleArray_GetRef(right, rightoff + 1) = centery;
    *IOSDoubleArray_GetRef(right, rightoff + 2) = ctrlx2;
    *IOSDoubleArray_GetRef(right, rightoff + 3) = ctrly2;
    *IOSDoubleArray_GetRef(right, rightoff + 4) = x2;
    *IOSDoubleArray_GetRef(right, rightoff + 5) = y2;
  }
}

jint OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_evalCubicWithDoubleArray_withInt_withBoolean_withBoolean_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray *vals, jint num, jboolean include0, jboolean include1, IOSDoubleArray *inflect, jdouble c1, jdouble cp1, jdouble cp2, jdouble c2) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  jint j = 0;
  for (jint i = 0; i < num; i++) {
    jdouble t = IOSDoubleArray_Get(nil_chk(vals), i);
    if ((include0 ? t >= 0 : t > 0) && (include1 ? t <= 1 : t < 1) && (inflect == nil || IOSDoubleArray_Get(inflect, 1) + (2 * IOSDoubleArray_Get(inflect, 2) + 3 * IOSDoubleArray_Get(inflect, 3) * t) * t != 0)) {
      jdouble u = 1 - t;
      *IOSDoubleArray_GetRef(vals, j++) = c1 * u * u * u + 3 * cp1 * t * u * u + 3 * cp2 * t * t * u + c2 * t * t * t;
    }
  }
  return j;
}

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fillEqnWithDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray *eqn, jdouble val, jdouble c1, jdouble cp1, jdouble cp2, jdouble c2) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  *IOSDoubleArray_GetRef(nil_chk(eqn), 0) = c1 - val;
  *IOSDoubleArray_GetRef(eqn, 1) = (cp1 - c1) * 3.0;
  *IOSDoubleArray_GetRef(eqn, 2) = (cp2 - cp1 - cp1 + c1) * 3.0;
  *IOSDoubleArray_GetRef(eqn, 3) = c2 + (cp1 - cp2) * 3.0 - c1;
  return;
}

jdouble OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_findZeroWithDouble_withDouble_withDoubleArray_(jdouble t, jdouble target, IOSDoubleArray *eqn) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  IOSDoubleArray *slopeqn = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(nil_chk(eqn), 1), 2 * IOSDoubleArray_Get(eqn, 2), 3 * IOSDoubleArray_Get(eqn, 3) } count:3];
  jdouble slope;
  jdouble origdelta = 0;
  jdouble origt = t;
  while (YES) {
    slope = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveEqnWithDoubleArray_withInt_withDouble_(slopeqn, 2, t);
    if (slope == 0) {
      return t;
    }
    jdouble y = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveEqnWithDoubleArray_withInt_withDouble_(eqn, 3, t);
    if (y == 0) {
      return t;
    }
    jdouble delta = -(y / slope);
    if (origdelta == 0) {
      origdelta = delta;
    }
    if (t < target) {
      if (delta < 0) return t;
    }
    else if (t > target) {
      if (delta > 0) return t;
    }
    else {
      return (delta > 0 ? (target + JavaLangDouble_MIN_VALUE) : (target - JavaLangDouble_MIN_VALUE));
    }
    jdouble newt = t + delta;
    if (t == newt) {
      return t;
    }
    if (delta * origdelta < 0) {
      jint tag = (origt < t ? OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(target, origt, t) : OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(target, t, origt));
      if (tag != OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE) {
        return (origt + t) / 2;
      }
      t = target;
    }
    else {
      t = newt;
    }
  }
}

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_fixRootsWithDoubleArray_withDoubleArray_(IOSDoubleArray *res, IOSDoubleArray *eqn) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  jdouble EPSILON = 1E-5;
  for (jint i = 0; i < 3; i++) {
    jdouble t = IOSDoubleArray_Get(nil_chk(res), i);
    if (JavaLangMath_absWithDouble_(t) < EPSILON) {
      *IOSDoubleArray_GetRef(res, i) = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_findZeroWithDouble_withDouble_withDoubleArray_(t, 0, eqn);
    }
    else if (JavaLangMath_absWithDouble_(t - 1) < EPSILON) {
      *IOSDoubleArray_GetRef(res, i) = OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_findZeroWithDouble_withDouble_withDoubleArray_(t, 1, eqn);
    }
  }
}

jint OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_getTagWithDouble_withDouble_withDouble_(jdouble coord, jdouble low, jdouble high) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  if (coord <= low) {
    return (coord < low ? OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_BELOW : OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_LOWEDGE);
  }
  if (coord >= high) {
    return (coord > high ? OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_ABOVE : OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_HIGHEDGE);
  }
  return OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE;
}

jboolean OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_inwardsWithInt_withInt_withInt_(jint pttag, jint opt1tag, jint opt2tag) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  switch (pttag) {
    case OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_BELOW:
    case OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_ABOVE:
    default:
    return NO;
    case OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_LOWEDGE:
    return (opt1tag >= OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE || opt2tag >= OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE);
    case OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE:
    return YES;
    case OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_HIGHEDGE:
    return (opt1tag <= OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE || opt2tag <= OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_INSIDE);
  }
}

jdouble OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_solveEqnWithDoubleArray_withInt_withDouble_(IOSDoubleArray *eqn, jint order, jdouble t) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_initialize();
  jdouble v = IOSDoubleArray_Get(nil_chk(eqn), order);
  while (--order >= 0) {
    v = v * t + IOSDoubleArray_Get(eqn, order);
  }
  return v;
}

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_init(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D)

@implementation OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double_init(self);
  return self;
}

- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)ctrlx1
                    withDouble:(jdouble)ctrly1
                    withDouble:(jdouble)ctrlx2
                    withDouble:(jdouble)ctrly2
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
  return self;
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)getBounds2D {
  jdouble left = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(x1_, x2_), JavaLangMath_minWithDouble_withDouble_(ctrlx1_, ctrlx2_));
  jdouble top = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(y1_, y2_), JavaLangMath_minWithDouble_withDouble_(ctrly1_, ctrly2_));
  jdouble right = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(x1_, x2_), JavaLangMath_maxWithDouble_withDouble_(ctrlx1_, ctrlx2_));
  jdouble bottom = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(y1_, y2_), JavaLangMath_maxWithDouble_withDouble_(ctrly1_, ctrly2_));
  return [new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(left, top, right - left, bottom - top) autorelease];
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getCtrlP1 {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(ctrlx1_, ctrly1_) autorelease];
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getCtrlP2 {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(ctrlx2_, ctrly2_) autorelease];
}

- (jdouble)getCtrlX1 {
  return ctrlx1_;
}

- (jdouble)getCtrlX2 {
  return ctrlx2_;
}

- (jdouble)getCtrlY1 {
  return ctrly1_;
}

- (jdouble)getCtrlY2 {
  return ctrly2_;
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getP1 {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(x1_, y1_) autorelease];
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getP2 {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(x2_, y2_) autorelease];
}

- (jdouble)getX1 {
  return x1_;
}

- (jdouble)getX2 {
  return x2_;
}

- (jdouble)getY1 {
  return y1_;
}

- (jdouble)getY2 {
  return y2_;
}

- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  self->x1_ = x1;
  self->y1_ = y1;
  self->ctrlx1_ = ctrlx1;
  self->ctrly1_ = ctrly1;
  self->ctrlx2_ = ctrlx2;
  self->ctrly2_ = ctrly2;
  self->x2_ = x2;
  self->y2_ = y2;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Double", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "Double", NULL, 0x1, NULL, NULL },
    { "getBounds2D", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x1, NULL, NULL },
    { "getCtrlP1", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getCtrlP2", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getCtrlX1", NULL, "D", 0x1, NULL, NULL },
    { "getCtrlX2", NULL, "D", 0x1, NULL, NULL },
    { "getCtrlY1", NULL, "D", 0x1, NULL, NULL },
    { "getCtrlY2", NULL, "D", 0x1, NULL, NULL },
    { "getP1", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getP2", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getX1", NULL, "D", 0x1, NULL, NULL },
    { "getX2", NULL, "D", 0x1, NULL, NULL },
    { "getY1", NULL, "D", 0x1, NULL, NULL },
    { "getY2", NULL, "D", 0x1, NULL, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x1_", NULL, 0x1, "D", NULL, NULL,  },
    { "y1_", NULL, 0x1, "D", NULL, NULL,  },
    { "ctrlx1_", NULL, 0x1, "D", NULL, NULL,  },
    { "ctrly1_", NULL, 0x1, "D", NULL, NULL,  },
    { "ctrlx2_", NULL, 0x1, "D", NULL, NULL,  },
    { "ctrly2_", NULL, 0x1, "D", NULL, NULL,  },
    { "x2_", NULL, 0x1, "D", NULL, NULL,  },
    { "y2_", NULL, 0x1, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double = { 2, "Double", "org.geogebra.ggbjdk.java.awt.geom", "CubicCurve2D", 0x9, 16, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double_init(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double *self) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_init(self);
}

OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double *new_OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double_init() {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double *self = [OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double alloc];
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double *self, jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_init(self);
  [self setCurveWithDouble:x1 withDouble:y1 withDouble:ctrlx1 withDouble:ctrly1 withDouble:ctrlx2 withDouble:ctrly2 withDouble:x2 withDouble:y2];
}

OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double *new_OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double *self = [OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double alloc];
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Double)

@implementation OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float_init(self);
  return self;
}

- (instancetype)initWithFloat:(jfloat)x1
                    withFloat:(jfloat)y1
                    withFloat:(jfloat)ctrlx1
                    withFloat:(jfloat)ctrly1
                    withFloat:(jfloat)ctrlx2
                    withFloat:(jfloat)ctrly2
                    withFloat:(jfloat)x2
                    withFloat:(jfloat)y2 {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
  return self;
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)getBounds2D {
  jfloat left = JavaLangMath_minWithFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(x1_, x2_), JavaLangMath_minWithFloat_withFloat_(ctrlx1_, ctrlx2_));
  jfloat top = JavaLangMath_minWithFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(y1_, y2_), JavaLangMath_minWithFloat_withFloat_(ctrly1_, ctrly2_));
  jfloat right = JavaLangMath_maxWithFloat_withFloat_(JavaLangMath_maxWithFloat_withFloat_(x1_, x2_), JavaLangMath_maxWithFloat_withFloat_(ctrlx1_, ctrlx2_));
  jfloat bottom = JavaLangMath_maxWithFloat_withFloat_(JavaLangMath_maxWithFloat_withFloat_(y1_, y2_), JavaLangMath_maxWithFloat_withFloat_(ctrly1_, ctrly2_));
  return [new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(left, top, right - left, bottom - top) autorelease];
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getCtrlP1 {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Float_initWithFloat_withFloat_(ctrlx1_, ctrly1_) autorelease];
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getCtrlP2 {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Float_initWithFloat_withFloat_(ctrlx2_, ctrly2_) autorelease];
}

- (jdouble)getCtrlX1 {
  return (jdouble) ctrlx1_;
}

- (jdouble)getCtrlX2 {
  return (jdouble) ctrlx2_;
}

- (jdouble)getCtrlY1 {
  return (jdouble) ctrly1_;
}

- (jdouble)getCtrlY2 {
  return (jdouble) ctrly2_;
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getP1 {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Float_initWithFloat_withFloat_(x1_, y1_) autorelease];
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getP2 {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Float_initWithFloat_withFloat_(x2_, y2_) autorelease];
}

- (jdouble)getX1 {
  return (jdouble) x1_;
}

- (jdouble)getX2 {
  return (jdouble) x2_;
}

- (jdouble)getY1 {
  return (jdouble) y1_;
}

- (jdouble)getY2 {
  return (jdouble) y2_;
}

- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  self->x1_ = (jfloat) x1;
  self->y1_ = (jfloat) y1;
  self->ctrlx1_ = (jfloat) ctrlx1;
  self->ctrly1_ = (jfloat) ctrly1;
  self->ctrlx2_ = (jfloat) ctrlx2;
  self->ctrly2_ = (jfloat) ctrly2;
  self->x2_ = (jfloat) x2;
  self->y2_ = (jfloat) y2;
}

- (void)setCurveWithFloat:(jfloat)x1
                withFloat:(jfloat)y1
                withFloat:(jfloat)ctrlx1
                withFloat:(jfloat)ctrly1
                withFloat:(jfloat)ctrlx2
                withFloat:(jfloat)ctrly2
                withFloat:(jfloat)x2
                withFloat:(jfloat)y2 {
  self->x1_ = x1;
  self->y1_ = y1;
  self->ctrlx1_ = ctrlx1;
  self->ctrly1_ = ctrly1;
  self->ctrlx2_ = ctrlx2;
  self->ctrly2_ = ctrly2;
  self->x2_ = x2;
  self->y2_ = y2;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Float", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "Float", NULL, 0x1, NULL, NULL },
    { "getBounds2D", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x1, NULL, NULL },
    { "getCtrlP1", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getCtrlP2", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getCtrlX1", NULL, "D", 0x1, NULL, NULL },
    { "getCtrlX2", NULL, "D", 0x1, NULL, NULL },
    { "getCtrlY1", NULL, "D", 0x1, NULL, NULL },
    { "getCtrlY2", NULL, "D", 0x1, NULL, NULL },
    { "getP1", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getP2", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getX1", NULL, "D", 0x1, NULL, NULL },
    { "getX2", NULL, "D", 0x1, NULL, NULL },
    { "getY1", NULL, "D", 0x1, NULL, NULL },
    { "getY2", NULL, "D", 0x1, NULL, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x1, NULL, NULL },
    { "setCurveWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "setCurve", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x1_", NULL, 0x1, "F", NULL, NULL,  },
    { "y1_", NULL, 0x1, "F", NULL, NULL,  },
    { "ctrlx1_", NULL, 0x1, "F", NULL, NULL,  },
    { "ctrly1_", NULL, 0x1, "F", NULL, NULL,  },
    { "ctrlx2_", NULL, 0x1, "F", NULL, NULL,  },
    { "ctrly2_", NULL, 0x1, "F", NULL, NULL,  },
    { "x2_", NULL, 0x1, "F", NULL, NULL,  },
    { "y2_", NULL, 0x1, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float = { 2, "Float", "org.geogebra.ggbjdk.java.awt.geom", "CubicCurve2D", 0x9, 17, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float_init(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float *self) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_init(self);
}

OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float *new_OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float_init() {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float *self = [OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float alloc];
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float *self, jfloat x1, jfloat y1, jfloat ctrlx1, jfloat ctrly1, jfloat ctrlx2, jfloat ctrly2, jfloat x2, jfloat y2) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_init(self);
  [self setCurveWithFloat:x1 withFloat:y1 withFloat:ctrlx1 withFloat:ctrly1 withFloat:ctrlx2 withFloat:ctrly2 withFloat:x2 withFloat:y2];
}

OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float *new_OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat x1, jfloat y1, jfloat ctrlx1, jfloat ctrly1, jfloat ctrlx2, jfloat ctrly2, jfloat x2, jfloat y2) {
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float *self = [OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float alloc];
  OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomCubicCurve2D_Float)
