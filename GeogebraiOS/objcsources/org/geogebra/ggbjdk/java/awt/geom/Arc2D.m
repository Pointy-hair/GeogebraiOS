//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/ggbjdk/java/awt/geom/Arc2D.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Arc2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/ArcIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Dimension2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Line2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Point2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/RectangularShape.h"

@interface OrgGeogebraGgbjdkJavaAwtGeomArc2D () {
 @public
  jint type_;
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h
withOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)origrect;

@end

__attribute__((unused)) static jboolean OrgGeogebraGgbjdkJavaAwtGeomArc2D_containsWithDouble_withDouble_withDouble_withDouble_withOrgGeogebraCommonAwtGRectangle2D_(OrgGeogebraGgbjdkJavaAwtGeomArc2D *self, jdouble x, jdouble y, jdouble w, jdouble h, id<OrgGeogebraCommonAwtGRectangle2D> origrect);

@implementation OrgGeogebraGgbjdkJavaAwtGeomArc2D

+ (jdouble)remainderWithDouble:(jdouble)a
                    withDouble:(jdouble)b {
  return OrgGeogebraGgbjdkJavaAwtGeomArc2D_remainderWithDouble_withDouble_(a, b);
}

+ (jdouble)normalizeDegreesWithDouble:(jdouble)angle {
  return OrgGeogebraGgbjdkJavaAwtGeomArc2D_normalizeDegreesWithDouble_(angle);
}

- (instancetype)initWithInt:(jint)type {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, type);
  return self;
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  jdouble ellw = [self getWidth];
  if (ellw <= 0.0) {
    return NO;
  }
  jdouble normx = (x - [self getX]) / ellw - 0.5;
  jdouble ellh = [self getHeight];
  if (ellh <= 0.0) {
    return NO;
  }
  jdouble normy = (y - [self getY]) / ellh - 0.5;
  jdouble distSq = (normx * normx + normy * normy);
  if (distSq >= 0.25) {
    return NO;
  }
  jdouble angExt = JavaLangMath_absWithDouble_([self getAngleExtent]);
  if (angExt >= 360.0) {
    return YES;
  }
  jboolean inarc = [self containsAngleWithDouble:-JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(normy, normx))];
  if (type_ == OrgGeogebraGgbjdkJavaAwtGeomArc2D_PIE) {
    return inarc;
  }
  if (inarc) {
    if (angExt >= 180.0) {
      return YES;
    }
  }
  else {
    if (angExt <= 180.0) {
      return NO;
    }
  }
  jdouble angle = JavaLangMath_toRadiansWithDouble_(-[self getAngleStart]);
  jdouble x1 = JavaLangMath_cosWithDouble_(angle);
  jdouble y1 = JavaLangMath_sinWithDouble_(angle);
  angle += JavaLangMath_toRadiansWithDouble_(-[self getAngleExtent]);
  jdouble x2 = JavaLangMath_cosWithDouble_(angle);
  jdouble y2 = JavaLangMath_sinWithDouble_(angle);
  jboolean inside = (OrgGeogebraGgbjdkJavaAwtGeomLine2D_relativeCCWWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, 2 * normx, 2 * normy) * OrgGeogebraGgbjdkJavaAwtGeomLine2D_relativeCCWWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, 0, 0) >= 0);
  return inarc ? !inside : inside;
}

- (jboolean)containsWithInt:(jint)x
                    withInt:(jint)y {
  jdouble ellw = [self getWidth];
  if (ellw <= 0.0) {
    return NO;
  }
  jdouble normx = (x - [self getX]) / ellw - 0.5;
  jdouble ellh = [self getHeight];
  if (ellh <= 0.0) {
    return NO;
  }
  jdouble normy = (y - [self getY]) / ellh - 0.5;
  jdouble distSq = (normx * normx + normy * normy);
  if (distSq >= 0.25) {
    return NO;
  }
  jdouble angExt = JavaLangMath_absWithDouble_([self getAngleExtent]);
  if (angExt >= 360.0) {
    return YES;
  }
  jboolean inarc = [self containsAngleWithDouble:-JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(normy, normx))];
  if (type_ == OrgGeogebraGgbjdkJavaAwtGeomArc2D_PIE) {
    return inarc;
  }
  if (inarc) {
    if (angExt >= 180.0) {
      return YES;
    }
  }
  else {
    if (angExt <= 180.0) {
      return NO;
    }
  }
  jdouble angle = JavaLangMath_toRadiansWithDouble_(-[self getAngleStart]);
  jdouble x1 = JavaLangMath_cosWithDouble_(angle);
  jdouble y1 = JavaLangMath_sinWithDouble_(angle);
  angle += JavaLangMath_toRadiansWithDouble_(-[self getAngleExtent]);
  jdouble x2 = JavaLangMath_cosWithDouble_(angle);
  jdouble y2 = JavaLangMath_sinWithDouble_(angle);
  jboolean inside = (OrgGeogebraGgbjdkJavaAwtGeomLine2D_relativeCCWWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, 2 * normx, 2 * normy) * OrgGeogebraGgbjdkJavaAwtGeomLine2D_relativeCCWWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, 0, 0) >= 0);
  return inarc ? !inside : inside;
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h {
  return OrgGeogebraGgbjdkJavaAwtGeomArc2D_containsWithDouble_withDouble_withDouble_withDouble_withOrgGeogebraCommonAwtGRectangle2D_(self, x, y, w, h, nil);
}

- (jboolean)containsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)r {
  return OrgGeogebraGgbjdkJavaAwtGeomArc2D_containsWithDouble_withDouble_withDouble_withDouble_withOrgGeogebraCommonAwtGRectangle2D_(self, [((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(r)) getX], [r getY], [r getWidth], [r getHeight], r);
}

- (jboolean)containsAngleWithDouble:(jdouble)angle {
  jdouble angExt = [self getAngleExtent];
  jboolean backwards = (angExt < 0.0);
  if (backwards) {
    angExt = -angExt;
  }
  if (angExt >= 360.0) {
    return YES;
  }
  angle = OrgGeogebraGgbjdkJavaAwtGeomArc2D_normalizeDegreesWithDouble_(angle) - OrgGeogebraGgbjdkJavaAwtGeomArc2D_normalizeDegreesWithDouble_([self getAngleStart]);
  if (backwards) {
    angle = -angle;
  }
  if (angle < 0.0) {
    angle += 360.0;
  }
  return (angle >= 0.0) && (angle < angExt);
}

- (jdouble)getAngleExtent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getAngleStart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getArcType {
  return type_;
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)getBounds2D {
  if ([self isEmpty]) {
    return [self makeBoundsWithDouble:[self getX] withDouble:[self getY] withDouble:[self getWidth] withDouble:[self getHeight]];
  }
  jdouble x1, y1, x2, y2;
  if ([self getArcType] == OrgGeogebraGgbjdkJavaAwtGeomArc2D_PIE) {
    x1 = y1 = x2 = y2 = 0.0;
  }
  else {
    x1 = y1 = 1.0;
    x2 = y2 = -1.0;
  }
  jdouble angle = 0.0;
  for (jint i = 0; i < 6; i++) {
    if (i < 4) {
      angle += 90.0;
      if (![self containsAngleWithDouble:angle]) {
        continue;
      }
    }
    else if (i == 4) {
      angle = [self getAngleStart];
    }
    else {
      angle += [self getAngleExtent];
    }
    jdouble rads = JavaLangMath_toRadiansWithDouble_(-angle);
    jdouble xe = JavaLangMath_cosWithDouble_(rads);
    jdouble ye = JavaLangMath_sinWithDouble_(rads);
    x1 = JavaLangMath_minWithDouble_withDouble_(x1, xe);
    y1 = JavaLangMath_minWithDouble_withDouble_(y1, ye);
    x2 = JavaLangMath_maxWithDouble_withDouble_(x2, xe);
    y2 = JavaLangMath_maxWithDouble_withDouble_(y2, ye);
  }
  jdouble w = [self getWidth];
  jdouble h = [self getHeight];
  x2 = (x2 - x1) * 0.5 * w;
  y2 = (y2 - y1) * 0.5 * h;
  x1 = [self getX] + (x1 * 0.5 + 0.5) * w;
  y1 = [self getY] + (y1 * 0.5 + 0.5) * h;
  return [self makeBoundsWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getEndPoint {
  jdouble angle = JavaLangMath_toRadiansWithDouble_(-[self getAngleStart] - [self getAngleExtent]);
  jdouble x = [self getX] + (JavaLangMath_cosWithDouble_(angle) * 0.5 + 0.5) * [self getWidth];
  jdouble y = [self getY] + (JavaLangMath_sinWithDouble_(angle) * 0.5 + 0.5) * [self getHeight];
  return new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(x, y);
}

- (id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at {
  return new_OrgGeogebraGgbjdkJavaAwtGeomArcIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomArc2D_withOrgGeogebraCommonAwtGAffineTransform_(self, at);
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)getStartPoint {
  jdouble angle = JavaLangMath_toRadiansWithDouble_(-[self getAngleStart]);
  jdouble x = [self getX] + (JavaLangMath_cosWithDouble_(angle) * 0.5 + 0.5) * [self getWidth];
  jdouble y = [self getY] + (JavaLangMath_sinWithDouble_(angle) * 0.5 + 0.5) * [self getHeight];
  return new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(x, y);
}

- (jboolean)intersectsWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)w
                      withDouble:(jdouble)h {
  jdouble aw = [self getWidth];
  jdouble ah = [self getHeight];
  if (w <= 0 || h <= 0 || aw <= 0 || ah <= 0) {
    return NO;
  }
  jdouble ext = [self getAngleExtent];
  if (ext == 0) {
    return NO;
  }
  jdouble ax = [self getX];
  jdouble ay = [self getY];
  jdouble axw = ax + aw;
  jdouble ayh = ay + ah;
  jdouble xw = x + w;
  jdouble yh = y + h;
  if (x >= axw || y >= ayh || xw <= ax || yh <= ay) {
    return NO;
  }
  jdouble axc = [self getCenterX];
  jdouble ayc = [self getCenterY];
  OrgGeogebraGgbjdkJavaAwtGeomPoint2D *sp = [self getStartPoint];
  OrgGeogebraGgbjdkJavaAwtGeomPoint2D *ep = [self getEndPoint];
  jdouble sx = [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(sp)) getX];
  jdouble sy = [sp getY];
  jdouble ex = [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ep)) getX];
  jdouble ey = [ep getY];
  if (ayc >= y && ayc <= yh) {
    if ((sx < xw && ex < xw && axc < xw && axw > x && [self containsAngleWithDouble:0]) || (sx > x && ex > x && axc > x && ax < xw && [self containsAngleWithDouble:180])) {
      return YES;
    }
  }
  if (axc >= x && axc <= xw) {
    if ((sy > y && ey > y && ayc > y && ay < yh && [self containsAngleWithDouble:90]) || (sy < yh && ey < yh && ayc < yh && ayh > y && [self containsAngleWithDouble:270])) {
      return YES;
    }
  }
  OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *rect = new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x, y, w, h);
  if (type_ == OrgGeogebraGgbjdkJavaAwtGeomArc2D_PIE || JavaLangMath_absWithDouble_(ext) > 180) {
    if ([rect intersectsLineWithDouble:axc withDouble:ayc withDouble:sx withDouble:sy] || [rect intersectsLineWithDouble:axc withDouble:ayc withDouble:ex withDouble:ey]) {
      return YES;
    }
  }
  else {
    if ([rect intersectsLineWithDouble:sx withDouble:sy withDouble:ex withDouble:ey]) {
      return YES;
    }
  }
  if ([self containsWithDouble:x withDouble:y] || [self containsWithDouble:x + w withDouble:y] || [self containsWithDouble:x withDouble:y + h] || [self containsWithDouble:x + w withDouble:y + h]) {
    return YES;
  }
  return NO;
}

- (jboolean)intersectsWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)w
                      withInt:(jint)h {
  jdouble aw = [self getWidth];
  jdouble ah = [self getHeight];
  if (w <= 0 || h <= 0 || aw <= 0 || ah <= 0) {
    return NO;
  }
  jdouble ext = [self getAngleExtent];
  if (ext == 0) {
    return NO;
  }
  jdouble ax = [self getX];
  jdouble ay = [self getY];
  jdouble axw = ax + aw;
  jdouble ayh = ay + ah;
  jdouble xw = x + w;
  jdouble yh = y + h;
  if (x >= axw || y >= ayh || xw <= ax || yh <= ay) {
    return NO;
  }
  jdouble axc = [self getCenterX];
  jdouble ayc = [self getCenterY];
  OrgGeogebraGgbjdkJavaAwtGeomPoint2D *sp = [self getStartPoint];
  OrgGeogebraGgbjdkJavaAwtGeomPoint2D *ep = [self getEndPoint];
  jdouble sx = [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(sp)) getX];
  jdouble sy = [sp getY];
  jdouble ex = [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ep)) getX];
  jdouble ey = [ep getY];
  if (ayc >= y && ayc <= yh) {
    if ((sx < xw && ex < xw && axc < xw && axw > x && [self containsAngleWithDouble:0]) || (sx > x && ex > x && axc > x && ax < xw && [self containsAngleWithDouble:180])) {
      return YES;
    }
  }
  if (axc >= x && axc <= xw) {
    if ((sy > y && ey > y && ayc > y && ay < yh && [self containsAngleWithDouble:90]) || (sy < yh && ey < yh && ayc < yh && ayh > y && [self containsAngleWithDouble:270])) {
      return YES;
    }
  }
  OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *rect = new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x, y, w, h);
  if (type_ == OrgGeogebraGgbjdkJavaAwtGeomArc2D_PIE || JavaLangMath_absWithDouble_(ext) > 180) {
    if ([rect intersectsLineWithDouble:axc withDouble:ayc withDouble:sx withDouble:sy] || [rect intersectsLineWithDouble:axc withDouble:ayc withDouble:ex withDouble:ey]) {
      return YES;
    }
  }
  else {
    if ([rect intersectsLineWithDouble:sx withDouble:sy withDouble:ex withDouble:ey]) {
      return YES;
    }
  }
  if ([self containsWithInt:x withInt:y] || [self containsWithInt:x + w withInt:y] || [self containsWithInt:x withInt:y + h] || [self containsWithInt:x + w withInt:y + h]) {
    return YES;
  }
  return NO;
}

- (void)setAngleExtentWithDouble:(jdouble)angExt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setAnglesWithDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2 {
  jdouble x = [self getCenterX];
  jdouble y = [self getCenterY];
  jdouble w = [self getWidth];
  jdouble h = [self getHeight];
  jdouble ang1 = JavaLangMath_atan2WithDouble_withDouble_(w * (y - y1), h * (x1 - x));
  jdouble ang2 = JavaLangMath_atan2WithDouble_withDouble_(w * (y - y2), h * (x2 - x));
  ang2 -= ang1;
  if (ang2 <= 0.0) {
    ang2 += JavaLangMath_PI * 2.0;
  }
  [self setAngleStartWithDouble:JavaLangMath_toDegreesWithDouble_(ang1)];
  [self setAngleExtentWithDouble:JavaLangMath_toDegreesWithDouble_(ang2)];
}

- (void)setAnglesWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)p1
                 withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)p2 {
  [self setAnglesWithDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]];
}

- (void)setAngleStartWithDouble:(jdouble)angSt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setAngleStartWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)p {
  jdouble dx = [self getHeight] * ([((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(p)) getX] - [self getCenterX]);
  jdouble dy = [self getWidth] * ([p getY] - [self getCenterY]);
  [self setAngleStartWithDouble:-JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(dy, dx))];
}

- (void)setArcWithOrgGeogebraGgbjdkJavaAwtGeomArc2D:(OrgGeogebraGgbjdkJavaAwtGeomArc2D *)a {
  [self setArcWithDouble:[((OrgGeogebraGgbjdkJavaAwtGeomArc2D *) nil_chk(a)) getX] withDouble:[a getY] withDouble:[a getWidth] withDouble:[a getHeight] withDouble:[a getAngleStart] withDouble:[a getAngleExtent] withInt:a->type_];
}

- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)w
              withDouble:(jdouble)h
              withDouble:(jdouble)angSt
              withDouble:(jdouble)angExt
                 withInt:(jint)closure {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setArcWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)loc
          withOrgGeogebraGgbjdkJavaAwtGeomDimension2D:(OrgGeogebraGgbjdkJavaAwtGeomDimension2D *)size
                                           withDouble:(jdouble)angSt
                                           withDouble:(jdouble)angExt
                                              withInt:(jint)closure {
  [self setArcWithDouble:[((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(loc)) getX] withDouble:[loc getY] withDouble:[((OrgGeogebraGgbjdkJavaAwtGeomDimension2D *) nil_chk(size)) getWidth] withDouble:[size getHeight] withDouble:angSt withDouble:angExt withInt:closure];
}

- (void)setArcWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)rect
                                               withDouble:(jdouble)angSt
                                               withDouble:(jdouble)angExt
                                                  withInt:(jint)closure {
  [self setArcWithDouble:[((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(rect)) getX] withDouble:[rect getY] withDouble:[rect getWidth] withDouble:[rect getHeight] withDouble:angSt withDouble:angExt withInt:closure];
}

- (void)setArcByCenterWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)radius
                      withDouble:(jdouble)angSt
                      withDouble:(jdouble)angExt
                         withInt:(jint)closure {
  [self setArcWithDouble:x - radius withDouble:y - radius withDouble:radius * 2.0 withDouble:radius * 2.0 withDouble:angSt withDouble:angExt withInt:closure];
}

- (void)setArcByTangentWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)p1
                       withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)p2
                       withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)p3
                                                    withDouble:(jdouble)radius {
  jdouble ang1 = JavaLangMath_atan2WithDouble_withDouble_([((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(p1)) getY] - [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(p2)) getY], [p1 getX] - [p2 getX]);
  jdouble ang2 = JavaLangMath_atan2WithDouble_withDouble_([((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(p3)) getY] - [p2 getY], [p3 getX] - [p2 getX]);
  jdouble diff = ang2 - ang1;
  if (diff > JavaLangMath_PI) {
    ang2 -= JavaLangMath_PI * 2.0;
  }
  else if (diff < -JavaLangMath_PI) {
    ang2 += JavaLangMath_PI * 2.0;
  }
  jdouble bisect = (ang1 + ang2) / 2.0;
  jdouble theta = JavaLangMath_absWithDouble_(ang2 - bisect);
  jdouble dist = radius / JavaLangMath_sinWithDouble_(theta);
  jdouble x = [p2 getX] + dist * JavaLangMath_cosWithDouble_(bisect);
  jdouble y = [p2 getY] + dist * JavaLangMath_sinWithDouble_(bisect);
  if (ang1 < ang2) {
    ang1 -= JavaLangMath_PI / 2.0;
    ang2 += JavaLangMath_PI / 2.0;
  }
  else {
    ang1 += JavaLangMath_PI / 2.0;
    ang2 -= JavaLangMath_PI / 2.0;
  }
  ang1 = JavaLangMath_toDegreesWithDouble_(-ang1);
  ang2 = JavaLangMath_toDegreesWithDouble_(-ang2);
  diff = ang2 - ang1;
  if (diff < 0) {
    diff += 360;
  }
  else {
    diff -= 360;
  }
  [self setArcByCenterWithDouble:x withDouble:y withDouble:radius withDouble:ang1 withDouble:diff withInt:type_];
}

- (void)setArcTypeWithInt:(jint)type {
  if (type < OrgGeogebraGgbjdkJavaAwtGeomArc2D_OPEN || type > OrgGeogebraGgbjdkJavaAwtGeomArc2D_PIE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"invalid type for Arc: ", type));
  }
  self->type_ = type;
}

- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)w
                withDouble:(jdouble)h {
  [self setArcWithDouble:x withDouble:y withDouble:w withDouble:h withDouble:[self getAngleStart] withDouble:[self getAngleExtent] withInt:type_];
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h
withOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)origrect {
  return OrgGeogebraGgbjdkJavaAwtGeomArc2D_containsWithDouble_withDouble_withDouble_withDouble_withOrgGeogebraCommonAwtGRectangle2D_(self, x, y, w, h, origrect);
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                                       withDouble:(jdouble)y
                                                       withDouble:(jdouble)w
                                                       withDouble:(jdouble)h {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "remainderWithDouble:withDouble:", "remainder", "D", 0x9, NULL, NULL },
    { "normalizeDegreesWithDouble:", "normalizeDegrees", "D", 0x8, NULL, NULL },
    { "initWithInt:", "Arc2D", NULL, 0x4, NULL, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithInt:withInt:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGRectangle2D:", "contains", "Z", 0x1, NULL, NULL },
    { "containsAngleWithDouble:", "containsAngle", "Z", 0x1, NULL, NULL },
    { "getAngleExtent", NULL, "D", 0x401, NULL, NULL },
    { "getAngleStart", NULL, "D", 0x401, NULL, NULL },
    { "getArcType", NULL, "I", 0x1, NULL, NULL },
    { "getBounds2D", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x1, NULL, NULL },
    { "getEndPoint", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:", "getPathIterator", "Lorg.geogebra.ggbjdk.java.awt.geom.PathIterator;", 0x1, NULL, NULL },
    { "getStartPoint", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
    { "setAngleExtentWithDouble:", "setAngleExtent", "V", 0x401, NULL, NULL },
    { "setAnglesWithDouble:withDouble:withDouble:withDouble:", "setAngles", "V", 0x1, NULL, NULL },
    { "setAnglesWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:", "setAngles", "V", 0x1, NULL, NULL },
    { "setAngleStartWithDouble:", "setAngleStart", "V", 0x401, NULL, NULL },
    { "setAngleStartWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:", "setAngleStart", "V", 0x1, NULL, NULL },
    { "setArcWithOrgGeogebraGgbjdkJavaAwtGeomArc2D:", "setArc", "V", 0x1, NULL, NULL },
    { "setArcWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "setArc", "V", 0x401, NULL, NULL },
    { "setArcWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomDimension2D:withDouble:withDouble:withInt:", "setArc", "V", 0x1, NULL, NULL },
    { "setArcWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:withDouble:withDouble:withInt:", "setArc", "V", 0x1, NULL, NULL },
    { "setArcByCenterWithDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "setArcByCenter", "V", 0x1, NULL, NULL },
    { "setArcByTangentWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withDouble:", "setArcByTangent", "V", 0x1, NULL, NULL },
    { "setArcTypeWithInt:", "setArcType", "V", 0x1, NULL, NULL },
    { "setFrameWithDouble:withDouble:withDouble:withDouble:", "setFrame", "V", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:withOrgGeogebraCommonAwtGRectangle2D:", "contains", "Z", 0x2, NULL, NULL },
    { "makeBoundsWithDouble:withDouble:withDouble:withDouble:", "makeBounds", "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "OPEN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomArc2D_OPEN },
    { "CHORD_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomArc2D_CHORD },
    { "PIE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomArc2D_PIE },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.ggbjdk.java.awt.geom.Arc2D$Double;", "Lorg.geogebra.ggbjdk.java.awt.geom.Arc2D$Float;"};
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomArc2D = { 2, "Arc2D", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x401, 32, methods, 4, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomArc2D;
}

@end

jdouble OrgGeogebraGgbjdkJavaAwtGeomArc2D_remainderWithDouble_withDouble_(jdouble a, jdouble b) {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_initialize();
  return JavaLangMath_signumWithDouble_(a) * (JavaLangMath_absWithDouble_(a) - JavaLangMath_absWithDouble_(b) * JavaLangMath_floorWithDouble_(JavaLangMath_absWithDouble_(a) / JavaLangMath_absWithDouble_(b)));
}

jdouble OrgGeogebraGgbjdkJavaAwtGeomArc2D_normalizeDegreesWithDouble_(jdouble angle) {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_initialize();
  if (angle > 180.0) {
    if (angle <= (180.0 + 360.0)) {
      angle = angle - 360.0;
    }
    else {
      angle = OrgGeogebraGgbjdkJavaAwtGeomArc2D_remainderWithDouble_withDouble_(angle, 360.0);
      if (angle == -180.0) {
        angle = 180.0;
      }
    }
  }
  else if (angle <= -180.0) {
    if (angle > (-180.0 - 360.0)) {
      angle = angle + 360.0;
    }
    else {
      angle = OrgGeogebraGgbjdkJavaAwtGeomArc2D_remainderWithDouble_withDouble_(angle, 360.0);
      if (angle == -180.0) {
        angle = 180.0;
      }
    }
  }
  return angle;
}

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(OrgGeogebraGgbjdkJavaAwtGeomArc2D *self, jint type) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomRectangularShape_init(self);
  [self setArcTypeWithInt:type];
}

jboolean OrgGeogebraGgbjdkJavaAwtGeomArc2D_containsWithDouble_withDouble_withDouble_withDouble_withOrgGeogebraCommonAwtGRectangle2D_(OrgGeogebraGgbjdkJavaAwtGeomArc2D *self, jdouble x, jdouble y, jdouble w, jdouble h, id<OrgGeogebraCommonAwtGRectangle2D> origrect) {
  if (!([self containsWithDouble:x withDouble:y] && [self containsWithDouble:x + w withDouble:y] && [self containsWithDouble:x withDouble:y + h] && [self containsWithDouble:x + w withDouble:y + h])) {
    return NO;
  }
  if (self->type_ != OrgGeogebraGgbjdkJavaAwtGeomArc2D_PIE || JavaLangMath_absWithDouble_([self getAngleExtent]) <= 180.0) {
    return YES;
  }
  if (origrect == nil) {
    origrect = new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x, y, w, h);
  }
  jdouble halfW = [self getWidth] / 2.0;
  jdouble halfH = [self getHeight] / 2.0;
  jdouble xc = [self getX] + halfW;
  jdouble yc = [self getY] + halfH;
  jdouble angle = JavaLangMath_toRadiansWithDouble_(-[self getAngleStart]);
  jdouble xe = xc + halfW * JavaLangMath_cosWithDouble_(angle);
  jdouble ye = yc + halfH * JavaLangMath_sinWithDouble_(angle);
  if ([((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(origrect)) intersectsLineWithDouble:xc withDouble:yc withDouble:xe withDouble:ye]) {
    return NO;
  }
  angle += JavaLangMath_toRadiansWithDouble_(-[self getAngleExtent]);
  xe = xc + halfW * JavaLangMath_cosWithDouble_(angle);
  ye = yc + halfH * JavaLangMath_sinWithDouble_(angle);
  return ![origrect intersectsLineWithDouble:xc withDouble:yc withDouble:xe withDouble:ye];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomArc2D)

@implementation OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_init(self);
  return self;
}

- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h
                    withDouble:(jdouble)start
                    withDouble:(jdouble)extent
                       withInt:(jint)type {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, x, y, w, h, start, extent, type);
  return self;
}

- (instancetype)initWithInt:(jint)type {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithInt_(self, type);
  return self;
}

- (instancetype)initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)ellipseBounds
                                                     withDouble:(jdouble)start
                                                     withDouble:(jdouble)extent
                                                        withInt:(jint)type {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(self, ellipseBounds, start, extent, type);
  return self;
}

- (jdouble)getAngleExtent {
  return extent_;
}

- (jdouble)getAngleStart {
  return start_;
}

- (jdouble)getHeight {
  return height_;
}

- (jdouble)getWidth {
  return width_;
}

- (jdouble)getX {
  return x_;
}

- (jdouble)getY {
  return y_;
}

- (jboolean)isEmpty {
  return (width_ <= 0.0 || height_ <= 0.0);
}

- (void)setAngleExtentWithDouble:(jdouble)angExt {
  self->extent_ = angExt;
}

- (void)setAngleStartWithDouble:(jdouble)angSt {
  self->start_ = angSt;
}

- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)w
              withDouble:(jdouble)h
              withDouble:(jdouble)angSt
              withDouble:(jdouble)angExt
                 withInt:(jint)closure {
  [self setArcTypeWithInt:closure];
  self->x_ = x;
  self->y_ = y;
  self->width_ = w;
  self->height_ = h;
  self->start_ = angSt;
  self->extent_ = angExt;
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                                       withDouble:(jdouble)y
                                                       withDouble:(jdouble)w
                                                       withDouble:(jdouble)h {
  return new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x, y, w, h);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Double", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "Double", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "Double", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:withDouble:withDouble:withInt:", "Double", NULL, 0x1, NULL, NULL },
    { "getAngleExtent", NULL, "D", 0x1, NULL, NULL },
    { "getAngleStart", NULL, "D", 0x1, NULL, NULL },
    { "getHeight", NULL, "D", 0x1, NULL, NULL },
    { "getWidth", NULL, "D", 0x1, NULL, NULL },
    { "getX", NULL, "D", 0x1, NULL, NULL },
    { "getY", NULL, "D", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "setAngleExtentWithDouble:", "setAngleExtent", "V", 0x1, NULL, NULL },
    { "setAngleStartWithDouble:", "setAngleStart", "V", 0x1, NULL, NULL },
    { "setArcWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "setArc", "V", 0x1, NULL, NULL },
    { "makeBoundsWithDouble:withDouble:withDouble:withDouble:", "makeBounds", "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x1, "D", NULL, NULL,  },
    { "y_", NULL, 0x1, "D", NULL, NULL,  },
    { "width_", NULL, 0x1, "D", NULL, NULL,  },
    { "height_", NULL, 0x1, "D", NULL, NULL,  },
    { "start_", NULL, 0x1, "D", NULL, NULL,  },
    { "extent_", NULL, 0x1, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double = { 2, "Double", "org.geogebra.ggbjdk.java.awt.geom", "Arc2D", 0x9, 15, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_init(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *self) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, OrgGeogebraGgbjdkJavaAwtGeomArc2D_OPEN);
}

OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *new_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_init() {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *self = [OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *self, jdouble x, jdouble y, jdouble w, jdouble h, jdouble start, jdouble extent, jint type) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, type);
  self->x_ = x;
  self->y_ = y;
  self->width_ = w;
  self->height_ = h;
  self->start_ = start;
  self->extent_ = extent;
}

OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *new_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble x, jdouble y, jdouble w, jdouble h, jdouble start, jdouble extent, jint type) {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *self = [OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, x, y, w, h, start, extent, type);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithInt_(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *self, jint type) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, type);
}

OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *new_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithInt_(jint type) {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *self = [OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithInt_(self, type);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *self, OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *ellipseBounds, jdouble start, jdouble extent, jint type) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, type);
  self->x_ = [((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(ellipseBounds)) getX];
  self->y_ = [ellipseBounds getY];
  self->width_ = [ellipseBounds getWidth];
  self->height_ = [ellipseBounds getHeight];
  self->start_ = start;
  self->extent_ = extent;
}

OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *new_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *ellipseBounds, jdouble start, jdouble extent, jint type) {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double *self = [OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(self, ellipseBounds, start, extent, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Double)

@implementation OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_init(self);
  return self;
}

- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)w
                    withFloat:(jfloat)h
                    withFloat:(jfloat)start
                    withFloat:(jfloat)extent
                      withInt:(jint)type {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(self, x, y, w, h, start, extent, type);
  return self;
}

- (instancetype)initWithInt:(jint)type {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithInt_(self, type);
  return self;
}

- (instancetype)initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)ellipseBounds
                                                      withFloat:(jfloat)start
                                                      withFloat:(jfloat)extent
                                                        withInt:(jint)type {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(self, ellipseBounds, start, extent, type);
  return self;
}

- (jdouble)getAngleExtent {
  return (jdouble) extent_;
}

- (jdouble)getAngleStart {
  return (jdouble) start_;
}

- (jdouble)getHeight {
  return (jdouble) height_;
}

- (jdouble)getWidth {
  return (jdouble) width_;
}

- (jdouble)getX {
  return (jdouble) x_;
}

- (jdouble)getY {
  return (jdouble) y_;
}

- (jboolean)isEmpty {
  return (width_ <= 0.0 || height_ <= 0.0);
}

- (void)setAngleExtentWithDouble:(jdouble)angExt {
  self->extent_ = (jfloat) angExt;
}

- (void)setAngleStartWithDouble:(jdouble)angSt {
  self->start_ = (jfloat) angSt;
}

- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)w
              withDouble:(jdouble)h
              withDouble:(jdouble)angSt
              withDouble:(jdouble)angExt
                 withInt:(jint)closure {
  [self setArcTypeWithInt:closure];
  self->x_ = (jfloat) x;
  self->y_ = (jfloat) y;
  self->width_ = (jfloat) w;
  self->height_ = (jfloat) h;
  self->start_ = (jfloat) angSt;
  self->extent_ = (jfloat) angExt;
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                                       withDouble:(jdouble)y
                                                       withDouble:(jdouble)w
                                                       withDouble:(jdouble)h {
  return new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_((jfloat) x, (jfloat) y, (jfloat) w, (jfloat) h);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Float", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withInt:", "Float", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "Float", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:withFloat:withFloat:withInt:", "Float", NULL, 0x1, NULL, NULL },
    { "getAngleExtent", NULL, "D", 0x1, NULL, NULL },
    { "getAngleStart", NULL, "D", 0x1, NULL, NULL },
    { "getHeight", NULL, "D", 0x1, NULL, NULL },
    { "getWidth", NULL, "D", 0x1, NULL, NULL },
    { "getX", NULL, "D", 0x1, NULL, NULL },
    { "getY", NULL, "D", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "setAngleExtentWithDouble:", "setAngleExtent", "V", 0x1, NULL, NULL },
    { "setAngleStartWithDouble:", "setAngleStart", "V", 0x1, NULL, NULL },
    { "setArcWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "setArc", "V", 0x1, NULL, NULL },
    { "makeBoundsWithDouble:withDouble:withDouble:withDouble:", "makeBounds", "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x1, "F", NULL, NULL,  },
    { "y_", NULL, 0x1, "F", NULL, NULL,  },
    { "width_", NULL, 0x1, "F", NULL, NULL,  },
    { "height_", NULL, 0x1, "F", NULL, NULL,  },
    { "start_", NULL, 0x1, "F", NULL, NULL,  },
    { "extent_", NULL, 0x1, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float = { 2, "Float", "org.geogebra.ggbjdk.java.awt.geom", "Arc2D", 0x9, 15, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_init(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *self) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, OrgGeogebraGgbjdkJavaAwtGeomArc2D_OPEN);
}

OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *new_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_init() {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *self = [OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *self, jfloat x, jfloat y, jfloat w, jfloat h, jfloat start, jfloat extent, jint type) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, type);
  self->x_ = x;
  self->y_ = y;
  self->width_ = w;
  self->height_ = h;
  self->start_ = start;
  self->extent_ = extent;
}

OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *new_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(jfloat x, jfloat y, jfloat w, jfloat h, jfloat start, jfloat extent, jint type) {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *self = [OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(self, x, y, w, h, start, extent, type);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithInt_(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *self, jint type) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, type);
}

OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *new_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithInt_(jint type) {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *self = [OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithInt_(self, type);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *self, OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *ellipseBounds, jfloat start, jfloat extent, jint type) {
  (void) OrgGeogebraGgbjdkJavaAwtGeomArc2D_initWithInt_(self, type);
  self->x_ = (jfloat) [((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(ellipseBounds)) getX];
  self->y_ = (jfloat) [ellipseBounds getY];
  self->width_ = (jfloat) [ellipseBounds getWidth];
  self->height_ = (jfloat) [ellipseBounds getHeight];
  self->start_ = start;
  self->extent_ = extent;
}

OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *new_OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *ellipseBounds, jfloat start, jfloat extent, jint type) {
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float *self = [OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(self, ellipseBounds, start, extent, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomArc2D_Float)
