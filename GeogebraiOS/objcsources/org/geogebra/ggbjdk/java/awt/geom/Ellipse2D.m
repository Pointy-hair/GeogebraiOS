//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/java/awt/geom/Ellipse2D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Ellipse2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/EllipseIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/RectangularShape.h"

@implementation OrgGeogebraGgbjdkJavaAwtGeomEllipse2D

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_init(self);
  return self;
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  jdouble ellw = [self getWidth];
  if (ellw <= 0.0) {
    return NO;
  }
  jdouble normx = (x - [self getX]) / ellw - 0.5;
  jdouble ellh = [self getHeight];
  if (ellh <= 0.0) {
    return NO;
  }
  jdouble normy = (y - [self getY]) / ellh - 0.5;
  return (normx * normx + normy * normy) < 0.25;
}

- (jboolean)containsWithInt:(jint)x
                    withInt:(jint)y {
  jdouble ellw = [self getWidth];
  if (ellw <= 0.0) {
    return NO;
  }
  jdouble normx = (x - [self getX]) / ellw - 0.5;
  jdouble ellh = [self getHeight];
  if (ellh <= 0.0) {
    return NO;
  }
  jdouble normy = (y - [self getY]) / ellh - 0.5;
  return (normx * normx + normy * normy) < 0.25;
}

- (jboolean)intersectsWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)w
                      withDouble:(jdouble)h {
  if (w <= 0.0 || h <= 0.0) {
    return NO;
  }
  jdouble ellw = [self getWidth];
  if (ellw <= 0.0) {
    return NO;
  }
  jdouble normx0 = (x - [self getX]) / ellw - 0.5;
  jdouble normx1 = normx0 + w / ellw;
  jdouble ellh = [self getHeight];
  if (ellh <= 0.0) {
    return NO;
  }
  jdouble normy0 = (y - [self getY]) / ellh - 0.5;
  jdouble normy1 = normy0 + h / ellh;
  jdouble nearx, neary;
  if (normx0 > 0.0) {
    nearx = normx0;
  }
  else if (normx1 < 0.0) {
    nearx = normx1;
  }
  else {
    nearx = 0.0;
  }
  if (normy0 > 0.0) {
    neary = normy0;
  }
  else if (normy1 < 0.0) {
    neary = normy1;
  }
  else {
    neary = 0.0;
  }
  return (nearx * nearx + neary * neary) < 0.25;
}

- (jboolean)intersectsWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)w
                      withInt:(jint)h {
  if (w <= 0.0 || h <= 0.0) {
    return NO;
  }
  jdouble ellw = [self getWidth];
  if (ellw <= 0.0) {
    return NO;
  }
  jdouble normx0 = (x - [self getX]) / ellw - 0.5;
  jdouble normx1 = normx0 + w / ellw;
  jdouble ellh = [self getHeight];
  if (ellh <= 0.0) {
    return NO;
  }
  jdouble normy0 = (y - [self getY]) / ellh - 0.5;
  jdouble normy1 = normy0 + h / ellh;
  jdouble nearx, neary;
  if (normx0 > 0.0) {
    nearx = normx0;
  }
  else if (normx1 < 0.0) {
    nearx = normx1;
  }
  else {
    nearx = 0.0;
  }
  if (normy0 > 0.0) {
    neary = normy0;
  }
  else if (normy1 < 0.0) {
    neary = normy1;
  }
  else {
    neary = 0.0;
  }
  return (nearx * nearx + neary * neary) < 0.25;
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h {
  return ([self containsWithDouble:x withDouble:y] && [self containsWithDouble:x + w withDouble:y] && [self containsWithDouble:x withDouble:y + h] && [self containsWithDouble:x + w withDouble:y + h]);
}

- (id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomEllipseIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomEllipse2D_withOrgGeogebraCommonAwtGAffineTransform_(self, at) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Ellipse2D", NULL, 0x4, NULL, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithInt:withInt:", "contains", "Z", 0x1, NULL, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:", "getPathIterator", "Lorg.geogebra.ggbjdk.java.awt.geom.PathIterator;", 0x1, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.ggbjdk.java.awt.geom.Ellipse2D$Float;", "Lorg.geogebra.ggbjdk.java.awt.geom.Ellipse2D$Double;"};
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomEllipse2D = { 2, "Ellipse2D", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x401, 7, methods, 0, NULL, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomEllipse2D;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_init(OrgGeogebraGgbjdkJavaAwtGeomEllipse2D *self) {
  OrgGeogebraGgbjdkJavaAwtGeomRectangularShape_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomEllipse2D)

@implementation OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float_init(self);
  return self;
}

- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)w
                    withFloat:(jfloat)h {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float_initWithFloat_withFloat_withFloat_withFloat_(self, x, y, w, h);
  return self;
}

- (jdouble)getX {
  return (jdouble) x_;
}

- (jdouble)getY {
  return (jdouble) y_;
}

- (jdouble)getWidth {
  return (jdouble) width_;
}

- (jdouble)getHeight {
  return (jdouble) height_;
}

- (jboolean)isEmpty {
  return (width_ <= 0.0 || height_ <= 0.0);
}

- (void)setFrameWithFloat:(jfloat)x
                withFloat:(jfloat)y
                withFloat:(jfloat)w
                withFloat:(jfloat)h {
  self->x_ = x;
  self->y_ = y;
  self->width_ = w;
  self->height_ = h;
}

- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)w
                withDouble:(jdouble)h {
  self->x_ = (jfloat) x;
  self->y_ = (jfloat) y;
  self->width_ = (jfloat) w;
  self->height_ = (jfloat) h;
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)getBounds2D {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(x_, y_, width_, height_) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Float", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withFloat:withFloat:withFloat:", "Float", NULL, 0x1, NULL, NULL },
    { "getX", NULL, "D", 0x1, NULL, NULL },
    { "getY", NULL, "D", 0x1, NULL, NULL },
    { "getWidth", NULL, "D", 0x1, NULL, NULL },
    { "getHeight", NULL, "D", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "setFrameWithFloat:withFloat:withFloat:withFloat:", "setFrame", "V", 0x1, NULL, NULL },
    { "setFrameWithDouble:withDouble:withDouble:withDouble:", "setFrame", "V", 0x1, NULL, NULL },
    { "getBounds2D", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x1, "F", NULL, NULL,  },
    { "y_", NULL, 0x1, "F", NULL, NULL,  },
    { "width_", NULL, 0x1, "F", NULL, NULL,  },
    { "height_", NULL, 0x1, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float = { 2, "Float", "org.geogebra.ggbjdk.java.awt.geom", "Ellipse2D", 0x9, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float_init(OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float *self) {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_init(self);
}

OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float *new_OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float_init() {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float *self = [OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float alloc];
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float_initWithFloat_withFloat_withFloat_withFloat_(OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float *self, jfloat x, jfloat y, jfloat w, jfloat h) {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_init(self);
  [self setFrameWithFloat:x withFloat:y withFloat:w withFloat:h];
}

OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float *new_OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float_initWithFloat_withFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat w, jfloat h) {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float *self = [OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float alloc];
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float_initWithFloat_withFloat_withFloat_withFloat_(self, x, y, w, h);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Float)

@implementation OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double_init(self);
  return self;
}

- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double_initWithDouble_withDouble_withDouble_withDouble_(self, x, y, w, h);
  return self;
}

- (jdouble)getX {
  return x_;
}

- (jdouble)getY {
  return y_;
}

- (jdouble)getWidth {
  return width_;
}

- (jdouble)getHeight {
  return height_;
}

- (jboolean)isEmpty {
  return (width_ <= 0.0 || height_ <= 0.0);
}

- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)w
                withDouble:(jdouble)h {
  self->x_ = x;
  self->y_ = y;
  self->width_ = w;
  self->height_ = h;
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)getBounds2D {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x_, y_, width_, height_) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Double", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:", "Double", NULL, 0x1, NULL, NULL },
    { "getX", NULL, "D", 0x1, NULL, NULL },
    { "getY", NULL, "D", 0x1, NULL, NULL },
    { "getWidth", NULL, "D", 0x1, NULL, NULL },
    { "getHeight", NULL, "D", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "setFrameWithDouble:withDouble:withDouble:withDouble:", "setFrame", "V", 0x1, NULL, NULL },
    { "getBounds2D", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x1, "D", NULL, NULL,  },
    { "y_", NULL, 0x1, "D", NULL, NULL,  },
    { "width_", NULL, 0x1, "D", NULL, NULL,  },
    { "height_", NULL, 0x1, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double = { 2, "Double", "org.geogebra.ggbjdk.java.awt.geom", "Ellipse2D", 0x9, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double_init(OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double *self) {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_init(self);
}

OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double *new_OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double_init() {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double *self = [OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double alloc];
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double_initWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double *self, jdouble x, jdouble y, jdouble w, jdouble h) {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_init(self);
  [self setFrameWithDouble:x withDouble:y withDouble:w withDouble:h];
}

OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double *new_OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double_initWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble w, jdouble h) {
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double *self = [OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double alloc];
  OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double_initWithDouble_withDouble_withDouble_withDouble_(self, x, y, w, h);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomEllipse2D_Double)
