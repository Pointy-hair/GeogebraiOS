//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/ggbjdk/java/awt/geom/IllegalPathStateException.java
//


#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "org/geogebra/ggbjdk/java/awt/geom/IllegalPathStateException.h"

#define OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_serialVersionUID 1LL

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException, serialVersionUID, jlong)

@implementation OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_init(self);
  return self;
}

- (instancetype)initWithNSString:(NSString *)s {
  OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_initWithNSString_(self, s);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "IllegalPathStateException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "IllegalPathStateException", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException = { 2, "IllegalPathStateException", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_init(OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException *self) {
  (void) JavaLangRuntimeException_init(self);
}

OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException *new_OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_init() {
  OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException *self = [OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException alloc];
  OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_initWithNSString_(OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException *self, NSString *s) {
  (void) JavaLangRuntimeException_initWithNSString_(self, s);
}

OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException *new_OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_initWithNSString_(NSString *s) {
  OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException *self = [OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException alloc];
  OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_initWithNSString_(self, s);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException)
