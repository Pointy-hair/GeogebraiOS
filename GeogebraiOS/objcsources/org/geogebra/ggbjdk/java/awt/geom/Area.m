//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/java/awt/geom/Area.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Enumeration.h"
#include "java/util/Vector.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GPathIterator.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/ggbjdk/java/awt/geom/AffineTransform.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Area.h"
#include "org/geogebra/ggbjdk/java/awt/geom/AreaIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Shape.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/AreaOp.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Crossings.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Curve.h"

@interface OrgGeogebraGgbjdkJavaAwtGeomArea () {
 @public
  JavaUtilVector *curves_;
  OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *cachedBounds_;
}

- (void)invalidateBounds;

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)getCachedBounds;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraGgbjdkJavaAwtGeomArea, curves_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgGeogebraGgbjdkJavaAwtGeomArea, cachedBounds_, OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)

static JavaUtilVector *OrgGeogebraGgbjdkJavaAwtGeomArea_EmptyCurves_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomArea, EmptyCurves_, JavaUtilVector *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraGgbjdkJavaAwtGeomArea, EmptyCurves_, JavaUtilVector *)

__attribute__((unused)) static void OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(OrgGeogebraGgbjdkJavaAwtGeomArea *self);

__attribute__((unused)) static OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(OrgGeogebraGgbjdkJavaAwtGeomArea *self);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraGgbjdkJavaAwtGeomArea)

@implementation OrgGeogebraGgbjdkJavaAwtGeomArea

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomArea_init(self);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonAwtGShape:(id<OrgGeogebraCommonAwtGShape>)s {
  OrgGeogebraGgbjdkJavaAwtGeomArea_initWithOrgGeogebraCommonAwtGShape_(self, s);
  return self;
}

- (void)addWithOrgGeogebraCommonAwtGArea:(id<OrgGeogebraCommonAwtGArea>)rhs {
  OrgGeogebraGgbjdkJavaAwtGeomArea_set_curves_(self, [((OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp *) [new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp_init() autorelease]) calculateWithJavaUtilVector:self->curves_ withJavaUtilVector:((OrgGeogebraGgbjdkJavaAwtGeomArea *) nil_chk(((OrgGeogebraGgbjdkJavaAwtGeomArea *) check_class_cast(rhs, [OrgGeogebraGgbjdkJavaAwtGeomArea class]))))->curves_]);
  OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(self);
}

- (void)subtractWithOrgGeogebraCommonAwtGArea:(id<OrgGeogebraCommonAwtGArea>)rhs {
  OrgGeogebraGgbjdkJavaAwtGeomArea_set_curves_(self, [((OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp *) [new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp_init() autorelease]) calculateWithJavaUtilVector:self->curves_ withJavaUtilVector:((OrgGeogebraGgbjdkJavaAwtGeomArea *) nil_chk(((OrgGeogebraGgbjdkJavaAwtGeomArea *) check_class_cast(rhs, [OrgGeogebraGgbjdkJavaAwtGeomArea class]))))->curves_]);
  OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(self);
}

- (void)intersectWithOrgGeogebraCommonAwtGArea:(id<OrgGeogebraCommonAwtGArea>)rhs {
  OrgGeogebraGgbjdkJavaAwtGeomArea_set_curves_(self, [((OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp *) [new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp_init() autorelease]) calculateWithJavaUtilVector:self->curves_ withJavaUtilVector:((OrgGeogebraGgbjdkJavaAwtGeomArea *) nil_chk(((OrgGeogebraGgbjdkJavaAwtGeomArea *) check_class_cast(rhs, [OrgGeogebraGgbjdkJavaAwtGeomArea class]))))->curves_]);
  OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(self);
}

- (void)exclusiveOrWithOrgGeogebraCommonAwtGArea:(id<OrgGeogebraCommonAwtGArea>)rhs {
  OrgGeogebraGgbjdkJavaAwtGeomArea_set_curves_(self, [((OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp *) [new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp_init() autorelease]) calculateWithJavaUtilVector:self->curves_ withJavaUtilVector:((OrgGeogebraGgbjdkJavaAwtGeomArea *) nil_chk(((OrgGeogebraGgbjdkJavaAwtGeomArea *) check_class_cast(rhs, [OrgGeogebraGgbjdkJavaAwtGeomArea class]))))->curves_]);
  OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(self);
}

- (void)reset {
  OrgGeogebraGgbjdkJavaAwtGeomArea_setAndConsume_curves_(self, new_JavaUtilVector_init());
  OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(self);
}

- (jboolean)isEmpty {
  return [((JavaUtilVector *) nil_chk(curves_)) size] == 0;
}

- (jboolean)isPolygonal {
  id<JavaUtilEnumeration> enum_ = [((JavaUtilVector *) nil_chk(curves_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(enum_)) hasMoreElements]) {
    if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(((OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurve class])))) getOrder] > 1) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)isRectangular {
  jint size = [((JavaUtilVector *) nil_chk(curves_)) size];
  if (size == 0) {
    return YES;
  }
  if (size > 3) {
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCurve *c1 = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([curves_ getWithInt:1], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
  OrgGeogebraGgbjdkSunAwtGeomCurve *c2 = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([curves_ getWithInt:2], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
  if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c1)) getOrder] != 1 || [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c2)) getOrder] != 1) {
    return NO;
  }
  if ([c1 getXTop] != [c1 getXBot] || [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c2)) getXTop] != [c2 getXBot]) {
    return NO;
  }
  if ([c1 getYTop] != [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c2)) getYTop] || [c1 getYBot] != [c2 getYBot]) {
    return NO;
  }
  return YES;
}

- (jboolean)isSingular {
  if ([((JavaUtilVector *) nil_chk(curves_)) size] < 3) {
    return YES;
  }
  id<JavaUtilEnumeration> enum_ = [curves_ elements];
  [((id<JavaUtilEnumeration>) nil_chk(enum_)) nextElement];
  while ([enum_ hasMoreElements]) {
    if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(((OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurve class])))) getOrder] == 0) {
      return NO;
    }
  }
  return YES;
}

- (void)invalidateBounds {
  OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(self);
}

- (OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)getCachedBounds {
  return OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(self);
}

- (id<OrgGeogebraCommonAwtGRectangle2D>)getBounds2D {
  return [((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(self))) getBounds2D];
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  return [((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(self))) getBounds];
}

- (id)clone {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomArea_initWithOrgGeogebraCommonAwtGShape_(self) autorelease];
}

- (jboolean)equalsWithOrgGeogebraGgbjdkJavaAwtGeomArea:(OrgGeogebraGgbjdkJavaAwtGeomArea *)other {
  if (other == self) {
    return YES;
  }
  if (other == nil) {
    return NO;
  }
  JavaUtilVector *c = [((OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp *) [new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp_init() autorelease]) calculateWithJavaUtilVector:self->curves_ withJavaUtilVector:((OrgGeogebraGgbjdkJavaAwtGeomArea *) nil_chk(other))->curves_];
  return [((JavaUtilVector *) nil_chk(c)) isEmpty];
}

- (void)transformWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform:(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)t {
  OrgGeogebraGgbjdkJavaAwtGeomArea_set_curves_(self, ((OrgGeogebraGgbjdkJavaAwtGeomArea *) [new_OrgGeogebraGgbjdkJavaAwtGeomArea_initWithOrgGeogebraCommonAwtGShape_([((OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) nil_chk(t)) createTransformedShapeWithOrgGeogebraCommonAwtGShape:self]) autorelease])->curves_);
  OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(self);
}

- (OrgGeogebraGgbjdkJavaAwtGeomArea *)createTransformedAreaWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform:(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)t {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomArea_initWithOrgGeogebraCommonAwtGShape_([((OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) nil_chk(t)) createTransformedShapeWithOrgGeogebraCommonAwtGShape:self]) autorelease];
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  if (![((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(self))) containsWithDouble:x withDouble:y]) {
    return NO;
  }
  id<JavaUtilEnumeration> enum_ = [((JavaUtilVector *) nil_chk(curves_)) elements];
  jint crossings = 0;
  while ([((id<JavaUtilEnumeration>) nil_chk(enum_)) hasMoreElements]) {
    OrgGeogebraGgbjdkSunAwtGeomCurve *c = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
    crossings += [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c)) crossingsForWithDouble:x withDouble:y];
  }
  return (crossings & 1) == 1;
}

- (jboolean)containsWithInt:(jint)x
                    withInt:(jint)y {
  if (![((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(self))) containsWithInt:x withInt:y]) {
    return NO;
  }
  id<JavaUtilEnumeration> enum_ = [((JavaUtilVector *) nil_chk(curves_)) elements];
  jint crossings = 0;
  while ([((id<JavaUtilEnumeration>) nil_chk(enum_)) hasMoreElements]) {
    OrgGeogebraGgbjdkSunAwtGeomCurve *c = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
    crossings += [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c)) crossingsForWithDouble:x withDouble:y];
  }
  return (crossings & 1) == 1;
}

- (jboolean)containsWithOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)p {
  return [self containsWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)w
                    withDouble:(jdouble)h {
  if (w < 0 || h < 0) {
    return NO;
  }
  if (![((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(self))) containsWithDouble:x withDouble:y withDouble:w withDouble:h]) {
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCrossings *c = OrgGeogebraGgbjdkSunAwtGeomCrossings_findCrossingsWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(curves_, x, y, x + w, y + h);
  return (c != nil && [c coversWithDouble:y withDouble:y + h]);
}

- (jboolean)containsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)p {
  return [self containsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(p)) getX] withDouble:[p getY] withDouble:[p getWidth] withDouble:[p getHeight]];
}

- (jboolean)intersectsWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)w
                      withDouble:(jdouble)h {
  if (w < 0 || h < 0) {
    return NO;
  }
  if (![((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(self))) intersectsWithDouble:x withDouble:y withDouble:w withDouble:h]) {
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCrossings *c = OrgGeogebraGgbjdkSunAwtGeomCrossings_findCrossingsWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(curves_, x, y, x + w, y + h);
  return (c == nil || ![c isEmpty]);
}

- (jboolean)intersectsWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)w
                      withInt:(jint)h {
  if (w < 0 || h < 0) {
    return NO;
  }
  if (![((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(self))) intersectsWithInt:x withInt:y withInt:w withInt:h]) {
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCrossings *c = OrgGeogebraGgbjdkSunAwtGeomCrossings_findCrossingsWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(curves_, x, y, x + w, y + h);
  return (c == nil || ![c isEmpty]);
}

- (jboolean)intersectsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)p {
  return [self intersectsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(p)) getX] withDouble:[p getY] withDouble:[p getWidth] withDouble:[p getHeight]];
}

- (id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at {
  return [new_OrgGeogebraGgbjdkJavaAwtGeomAreaIterator_initWithJavaUtilVector_withOrgGeogebraCommonAwtGAffineTransform_(curves_, at) autorelease];
}

- (void)dealloc {
  RELEASE_(curves_);
  RELEASE_(cachedBounds_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraGgbjdkJavaAwtGeomArea class]) {
    JreStrongAssignAndConsume(&OrgGeogebraGgbjdkJavaAwtGeomArea_EmptyCurves_, nil, new_JavaUtilVector_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraGgbjdkJavaAwtGeomArea)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Area", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonAwtGShape:", "Area", NULL, 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonAwtGArea:", "add", "V", 0x1, NULL, NULL },
    { "subtractWithOrgGeogebraCommonAwtGArea:", "subtract", "V", 0x1, NULL, NULL },
    { "intersectWithOrgGeogebraCommonAwtGArea:", "intersect", "V", 0x1, NULL, NULL },
    { "exclusiveOrWithOrgGeogebraCommonAwtGArea:", "exclusiveOr", "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "isPolygonal", NULL, "Z", 0x1, NULL, NULL },
    { "isRectangular", NULL, "Z", 0x1, NULL, NULL },
    { "isSingular", NULL, "Z", 0x1, NULL, NULL },
    { "invalidateBounds", NULL, "V", 0x2, NULL, NULL },
    { "getCachedBounds", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", 0x2, NULL, NULL },
    { "getBounds2D", NULL, "Lorg.geogebra.common.awt.GRectangle2D;", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "equalsWithOrgGeogebraGgbjdkJavaAwtGeomArea:", "equals", "Z", 0x1, NULL, NULL },
    { "transformWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform:", "transform", "V", 0x1, NULL, NULL },
    { "createTransformedAreaWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform:", "createTransformedArea", "Lorg.geogebra.ggbjdk.java.awt.geom.Area;", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithInt:withInt:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGPoint2D:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGRectangle2D:", "contains", "Z", 0x1, NULL, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithOrgGeogebraCommonAwtGRectangle2D:", "intersects", "Z", 0x1, NULL, NULL },
    { "getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:", "getPathIterator", "Lorg.geogebra.ggbjdk.java.awt.geom.PathIterator;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EmptyCurves_", NULL, 0xa, "Ljava.util.Vector;", &OrgGeogebraGgbjdkJavaAwtGeomArea_EmptyCurves_, NULL,  },
    { "curves_", NULL, 0x2, "Ljava.util.Vector;", NULL, NULL,  },
    { "cachedBounds_", NULL, 0x2, "Lorg.geogebra.ggbjdk.java.awt.geom.Rectangle2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomArea = { 2, "Area", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x1, 28, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomArea;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomArea_init(OrgGeogebraGgbjdkJavaAwtGeomArea *self) {
  NSObject_init(self);
  OrgGeogebraGgbjdkJavaAwtGeomArea_set_curves_(self, OrgGeogebraGgbjdkJavaAwtGeomArea_EmptyCurves_);
}

OrgGeogebraGgbjdkJavaAwtGeomArea *new_OrgGeogebraGgbjdkJavaAwtGeomArea_init() {
  OrgGeogebraGgbjdkJavaAwtGeomArea *self = [OrgGeogebraGgbjdkJavaAwtGeomArea alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArea_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomArea_initWithOrgGeogebraCommonAwtGShape_(OrgGeogebraGgbjdkJavaAwtGeomArea *self, id<OrgGeogebraCommonAwtGShape> s) {
  NSObject_init(self);
  if ([s isKindOfClass:[OrgGeogebraGgbjdkJavaAwtGeomArea class]]) {
    OrgGeogebraGgbjdkJavaAwtGeomArea_set_curves_(self, ((OrgGeogebraGgbjdkJavaAwtGeomArea *) nil_chk(((OrgGeogebraGgbjdkJavaAwtGeomArea *) check_class_cast(s, [OrgGeogebraGgbjdkJavaAwtGeomArea class]))))->curves_);
    return;
  }
  OrgGeogebraGgbjdkJavaAwtGeomArea_setAndConsume_curves_(self, new_JavaUtilVector_init());
  id<OrgGeogebraCommonAwtGPathIterator> pi = [((id<OrgGeogebraCommonAwtGShape>) nil_chk(s)) getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:nil];
  jint windingRule = [((id<OrgGeogebraCommonAwtGPathIterator>) nil_chk(pi)) getWindingRule];
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:23];
  jdouble movx = 0, movy = 0;
  jdouble curx = 0, cury = 0;
  jdouble newx, newy;
  while (![pi isDone]) {
    switch ([pi currentSegmentWithDoubleArray:coords]) {
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO:
      OrgGeogebraGgbjdkSunAwtGeomCurve_insertLineWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(self->curves_, curx, cury, movx, movy);
      curx = movx = IOSDoubleArray_Get(coords, 0);
      cury = movy = IOSDoubleArray_Get(coords, 1);
      OrgGeogebraGgbjdkSunAwtGeomCurve_insertMoveWithJavaUtilVector_withDouble_withDouble_(self->curves_, movx, movy);
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO:
      newx = IOSDoubleArray_Get(coords, 0);
      newy = IOSDoubleArray_Get(coords, 1);
      OrgGeogebraGgbjdkSunAwtGeomCurve_insertLineWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(self->curves_, curx, cury, newx, newy);
      curx = newx;
      cury = newy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_QUADTO:
      newx = IOSDoubleArray_Get(coords, 2);
      newy = IOSDoubleArray_Get(coords, 3);
      OrgGeogebraGgbjdkSunAwtGeomCurve_insertQuadWithJavaUtilVector_withDouble_withDouble_withDoubleArray_(self->curves_, curx, cury, coords);
      curx = newx;
      cury = newy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CUBICTO:
      newx = IOSDoubleArray_Get(coords, 4);
      newy = IOSDoubleArray_Get(coords, 5);
      OrgGeogebraGgbjdkSunAwtGeomCurve_insertCubicWithJavaUtilVector_withDouble_withDouble_withDoubleArray_(self->curves_, curx, cury, coords);
      curx = newx;
      cury = newy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE:
      OrgGeogebraGgbjdkSunAwtGeomCurve_insertLineWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(self->curves_, curx, cury, movx, movy);
      curx = movx;
      cury = movy;
      break;
    }
    [pi next];
  }
  OrgGeogebraGgbjdkSunAwtGeomCurve_insertLineWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(self->curves_, curx, cury, movx, movy);
  OrgGeogebraGgbjdkSunAwtGeomAreaOp *operator_;
  if (windingRule == OrgGeogebraGgbjdkJavaAwtGeomPathIterator_WIND_EVEN_ODD) {
    operator_ = [new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp_init() autorelease];
  }
  else {
    operator_ = [new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp_init() autorelease];
  }
  OrgGeogebraGgbjdkJavaAwtGeomArea_set_curves_(self, [((OrgGeogebraGgbjdkSunAwtGeomAreaOp *) nil_chk(operator_)) calculateWithJavaUtilVector:self->curves_ withJavaUtilVector:OrgGeogebraGgbjdkJavaAwtGeomArea_EmptyCurves_]);
}

OrgGeogebraGgbjdkJavaAwtGeomArea *new_OrgGeogebraGgbjdkJavaAwtGeomArea_initWithOrgGeogebraCommonAwtGShape_(id<OrgGeogebraCommonAwtGShape> s) {
  OrgGeogebraGgbjdkJavaAwtGeomArea *self = [OrgGeogebraGgbjdkJavaAwtGeomArea alloc];
  OrgGeogebraGgbjdkJavaAwtGeomArea_initWithOrgGeogebraCommonAwtGShape_(self, s);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomArea_invalidateBounds(OrgGeogebraGgbjdkJavaAwtGeomArea *self) {
  OrgGeogebraGgbjdkJavaAwtGeomArea_set_cachedBounds_(self, nil);
}

OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *OrgGeogebraGgbjdkJavaAwtGeomArea_getCachedBounds(OrgGeogebraGgbjdkJavaAwtGeomArea *self) {
  if (self->cachedBounds_ != nil) {
    return self->cachedBounds_;
  }
  OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *r = [new_OrgGeogebraGgbjdkJavaAwtGeomRectangle2D_Double_init() autorelease];
  if ([((JavaUtilVector *) nil_chk(self->curves_)) size] > 0) {
    OrgGeogebraGgbjdkSunAwtGeomCurve *c = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([self->curves_ getWithInt:0], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
    [r setRectWithDouble:[((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c)) getX0] withDouble:[c getY0] withDouble:0 withDouble:0];
    for (jint i = 1; i < [self->curves_ size]; i++) {
      [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(((OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([self->curves_ getWithInt:i], [OrgGeogebraGgbjdkSunAwtGeomCurve class])))) enlargeWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:r];
    }
  }
  return (OrgGeogebraGgbjdkJavaAwtGeomArea_set_cachedBounds_(self, r));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomArea)
