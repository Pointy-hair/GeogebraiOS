//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/java/awt/geom/RectIterator.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/NoSuchElementException.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/RectIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"

@implementation OrgGeogebraGgbjdkJavaAwtGeomRectIterator

- (instancetype)initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)r
                       withOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at {
  OrgGeogebraGgbjdkJavaAwtGeomRectIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withOrgGeogebraCommonAwtGAffineTransform_(self, r, at);
  return self;
}

- (jint)getWindingRule {
  return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_WIND_NON_ZERO;
}

- (jboolean)isDone {
  return index_ > 5;
}

- (void)next {
  index_++;
}

- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    @throw [new_JavaUtilNoSuchElementException_initWithNSString_(@"rect iterator out of bounds") autorelease];
  }
  if (index_ == 5) {
    return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) x_;
  *IOSFloatArray_GetRef(coords, 1) = (jfloat) y_;
  if (index_ == 1 || index_ == 2) {
    *IOSFloatArray_GetRef(coords, 0) += (jfloat) w_;
  }
  if (index_ == 2 || index_ == 3) {
    *IOSFloatArray_GetRef(coords, 1) += (jfloat) h_;
  }
  if (affine_ != nil) {
    [affine_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:1];
  }
  return (index_ == 0 ? OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO : OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO);
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    @throw [new_JavaUtilNoSuchElementException_initWithNSString_(@"rect iterator out of bounds") autorelease];
  }
  if (index_ == 5) {
    return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_;
  *IOSDoubleArray_GetRef(coords, 1) = y_;
  if (index_ == 1 || index_ == 2) {
    *IOSDoubleArray_GetRef(coords, 0) += w_;
  }
  if (index_ == 2 || index_ == 3) {
    *IOSDoubleArray_GetRef(coords, 1) += h_;
  }
  if (affine_ != nil) {
    [affine_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:1];
  }
  return (index_ == 0 ? OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO : OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO);
}

- (void)dealloc {
  RELEASE_(affine_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:withOrgGeogebraCommonAwtGAffineTransform:", "RectIterator", NULL, 0x0, NULL, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL, NULL },
    { "isDone", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "V", 0x1, NULL, NULL },
    { "currentSegmentWithFloatArray:", "currentSegment", "I", 0x1, NULL, NULL },
    { "currentSegmentWithDoubleArray:", "currentSegment", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x0, "D", NULL, NULL,  },
    { "y_", NULL, 0x0, "D", NULL, NULL,  },
    { "w_", NULL, 0x0, "D", NULL, NULL,  },
    { "h_", NULL, 0x0, "D", NULL, NULL,  },
    { "affine_", NULL, 0x0, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "index_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomRectIterator = { 2, "RectIterator", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x0, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomRectIterator;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomRectIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withOrgGeogebraCommonAwtGAffineTransform_(OrgGeogebraGgbjdkJavaAwtGeomRectIterator *self, OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *r, id<OrgGeogebraCommonAwtGAffineTransform> at) {
  NSObject_init(self);
  self->x_ = [((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(r)) getX];
  self->y_ = [r getY];
  self->w_ = [r getWidth];
  self->h_ = [r getHeight];
  OrgGeogebraGgbjdkJavaAwtGeomRectIterator_set_affine_(self, at);
  if (self->w_ < 0 || self->h_ < 0) {
    self->index_ = 6;
  }
}

OrgGeogebraGgbjdkJavaAwtGeomRectIterator *new_OrgGeogebraGgbjdkJavaAwtGeomRectIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withOrgGeogebraCommonAwtGAffineTransform_(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *r, id<OrgGeogebraCommonAwtGAffineTransform> at) {
  OrgGeogebraGgbjdkJavaAwtGeomRectIterator *self = [OrgGeogebraGgbjdkJavaAwtGeomRectIterator alloc];
  OrgGeogebraGgbjdkJavaAwtGeomRectIterator_initWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D_withOrgGeogebraCommonAwtGAffineTransform_(self, r, at);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomRectIterator)
