//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/java/awt/geom/AffineTransform.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GPathIterator.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/ggbjdk/java/awt/geom/AffineTransform.h"
#include "org/geogebra/ggbjdk/java/awt/geom/GeneralPath.h"
#include "org/geogebra/ggbjdk/java/awt/geom/NoninvertibleTransformException.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Point2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Shape.h"

#define OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN -1
#define OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHIFT 3
#define OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY 0
#define OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE 8
#define OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE 16
#define OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR 32

@interface OrgGeogebraGgbjdkJavaAwtGeomAffineTransform () {
 @public
  jint type_;
}

+ (jdouble)_matroundWithDouble:(jdouble)matval;

- (instancetype)initWithDouble:(jdouble)m00
                    withDouble:(jdouble)m10
                    withDouble:(jdouble)m01
                    withDouble:(jdouble)m11
                    withDouble:(jdouble)m02
                    withDouble:(jdouble)m12
                       withInt:(jint)state;

- (void)calculateType;

- (void)stateError;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform, TYPE_UNKNOWN, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform, HI_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform, HI_IDENTITY, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform, HI_TRANSLATE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform, HI_SCALE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform, HI_SHEAR, jint)

static IOSIntArray *OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_rot90conversion_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform, rot90conversion_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform, rot90conversion_, IOSIntArray *)

__attribute__((unused)) static jdouble OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(jdouble matval);

__attribute__((unused)) static void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self, jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12, jint state);

__attribute__((unused)) static OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12, jint state) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_calculateType(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self);

__attribute__((unused)) static void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform)

@implementation OrgGeogebraGgbjdkJavaAwtGeomAffineTransform

+ (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)getRotateInstanceWithDouble:(jdouble)theta {
  return OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_(theta);
}

+ (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)getRotateInstanceWithDouble:(jdouble)theta
                                                                  withDouble:(jdouble)x
                                                                  withDouble:(jdouble)y {
  return OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_withDouble_withDouble_(theta, x, y);
}

+ (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)getScaleInstanceWithDouble:(jdouble)sx
                                                                 withDouble:(jdouble)sy {
  return OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getScaleInstanceWithDouble_withDouble_(sx, sy);
}

+ (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)getShearInstanceWithDouble:(jdouble)shx
                                                                 withDouble:(jdouble)shy {
  return OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getShearInstanceWithDouble_withDouble_(shx, shy);
}

+ (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)getTranslateInstanceWithDouble:(jdouble)tx
                                                                     withDouble:(jdouble)ty {
  return OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getTranslateInstanceWithDouble_withDouble_(tx, ty);
}

+ (jdouble)_matroundWithDouble:(jdouble)matval {
  return OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(matval);
}

- (instancetype)init {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init(self);
  return self;
}

- (instancetype)initWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform:(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)Tx {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform_(self, Tx);
  return self;
}

- (instancetype)initWithDouble:(jdouble)m00
                    withDouble:(jdouble)m10
                    withDouble:(jdouble)m01
                    withDouble:(jdouble)m11
                    withDouble:(jdouble)m02
                    withDouble:(jdouble)m12 {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, m00, m10, m01, m11, m02, m12);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)flatmatrix {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDoubleArray_(self, flatmatrix);
  return self;
}

- (instancetype)initWithFloat:(jfloat)m00
                    withFloat:(jfloat)m10
                    withFloat:(jfloat)m01
                    withFloat:(jfloat)m11
                    withFloat:(jfloat)m02
                    withFloat:(jfloat)m12 {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, m00, m10, m01, m11, m02, m12);
  return self;
}

- (instancetype)initWithFloatArray:(IOSFloatArray *)flatmatrix {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithFloatArray_(self, flatmatrix);
  return self;
}

- (instancetype)initWithDouble:(jdouble)m00
                    withDouble:(jdouble)m10
                    withDouble:(jdouble)m01
                    withDouble:(jdouble)m11
                    withDouble:(jdouble)m02
                    withDouble:(jdouble)m12
                       withInt:(jint)state {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, m00, m10, m01, m11, m02, m12, state);
  return self;
}

- (void)concatenateWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)TxA {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx = (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) check_class_cast(TxA, [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform class]);
  jdouble M0, M1;
  jdouble T00, T01, T10, T11;
  jdouble T02, T12;
  jint mystate = state_;
  jint txstate = ((OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) nil_chk(Tx))->state_;
  switch ((LShift32(txstate, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHIFT)) | mystate) {
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m01_ = Tx->m01_;
    m10_ = Tx->m10_;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m00_ = Tx->m00_;
    m11_ = Tx->m11_;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m02_ = Tx->m02_;
    m12_ = Tx->m12_;
    state_ = txstate;
    type_ = Tx->type_;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m01_ = Tx->m01_;
    m10_ = Tx->m10_;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m00_ = Tx->m00_;
    m11_ = Tx->m11_;
    state_ = txstate;
    type_ = Tx->type_;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m02_ = Tx->m02_;
    m12_ = Tx->m12_;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m01_ = Tx->m01_;
    m10_ = Tx->m10_;
    m00_ = m11_ = 0.0;
    state_ = txstate;
    type_ = Tx->type_;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    [self translateWithDouble:Tx->m02_ withDouble:Tx->m12_];
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    [self scale__WithDouble:Tx->m00_ withDouble:Tx->m11_];
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    T01 = Tx->m01_;
    T10 = Tx->m10_;
    M0 = m00_;
    m00_ = m01_ * T10;
    m01_ = M0 * T01;
    M0 = m10_;
    m10_ = m11_ * T10;
    m11_ = M0 * T01;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    m00_ = m01_ * Tx->m10_;
    m01_ = 0.0;
    m11_ = m10_ * Tx->m01_;
    m10_ = 0.0;
    state_ = mystate ^ (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE);
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    m01_ = m00_ * Tx->m01_;
    m00_ = 0.0;
    m10_ = m11_ * Tx->m10_;
    m11_ = 0.0;
    state_ = mystate ^ (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE);
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    m00_ = 0.0;
    m01_ = Tx->m01_;
    m10_ = Tx->m10_;
    m11_ = 0.0;
    state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
  }
  T00 = Tx->m00_;
  T01 = Tx->m01_;
  T02 = Tx->m02_;
  T10 = Tx->m10_;
  T11 = Tx->m11_;
  T12 = Tx->m12_;
  switch (mystate) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    state_ = mystate | txstate;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M0 = m00_;
    M1 = m01_;
    m00_ = T00 * M0 + T10 * M1;
    m01_ = T01 * M0 + T11 * M1;
    m02_ += T02 * M0 + T12 * M1;
    M0 = m10_;
    M1 = m11_;
    m10_ = T00 * M0 + T10 * M1;
    m11_ = T01 * M0 + T11 * M1;
    m12_ += T02 * M0 + T12 * M1;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    M0 = m01_;
    m00_ = T10 * M0;
    m01_ = T11 * M0;
    m02_ += T12 * M0;
    M0 = m10_;
    m10_ = T00 * M0;
    m11_ = T01 * M0;
    m12_ += T02 * M0;
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M0 = m00_;
    m00_ = T00 * M0;
    m01_ = T01 * M0;
    m02_ += T02 * M0;
    M0 = m11_;
    m10_ = T10 * M0;
    m11_ = T11 * M0;
    m12_ += T12 * M0;
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    m00_ = T00;
    m01_ = T01;
    m02_ += T02;
    m10_ = T10;
    m11_ = T11;
    m12_ += T12;
    state_ = txstate | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
  }
  [self updateState];
}

- (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)createInverse {
  jdouble det;
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    det = m00_ * m11_ - m01_ * m10_;
    if (JavaLangMath_absWithDouble_(det) <= JavaLangDouble_MIN_VALUE) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(JreStrcat("$D", @"Determinant is ", det)) autorelease];
    }
    return [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(m11_ / det, -m10_ / det, -m01_ / det, m00_ / det, (m01_ * m12_ - m11_ * m02_) / det, (m10_ * m02_ - m00_ * m12_) / det, (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE)) autorelease];
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    det = m00_ * m11_ - m01_ * m10_;
    if (JavaLangMath_absWithDouble_(det) <= JavaLangDouble_MIN_VALUE) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(JreStrcat("$D", @"Determinant is ", det)) autorelease];
    }
    return [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(m11_ / det, -m10_ / det, -m01_ / det, m00_ / det, 0.0, 0.0, (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE)) autorelease];
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    if (m01_ == 0.0 || m10_ == 0.0) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
    }
    return [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(0.0, 1.0 / m01_, 1.0 / m10_, 0.0, -m12_ / m10_, -m02_ / m01_, (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE)) autorelease];
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    if (m01_ == 0.0 || m10_ == 0.0) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
    }
    return [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(0.0, 1.0 / m01_, 1.0 / m10_, 0.0, 0.0, 0.0, (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR)) autorelease];
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    if (m00_ == 0.0 || m11_ == 0.0) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
    }
    return [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(1.0 / m00_, 0.0, 0.0, 1.0 / m11_, -m02_ / m00_, -m12_ / m11_, (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE)) autorelease];
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    if (m00_ == 0.0 || m11_ == 0.0) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
    }
    return [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(1.0 / m00_, 0.0, 0.0, 1.0 / m11_, 0.0, 0.0, (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE)) autorelease];
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    return [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(1.0, 0.0, 0.0, 1.0, -m02_, -m12_, (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE)) autorelease];
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    return [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init() autorelease];
  }
}

- (id<OrgGeogebraGgbjdkJavaAwtGeomShape>)createTransformedShapeWithOrgGeogebraCommonAwtGShape:(id<OrgGeogebraCommonAwtGShape>)pSrc {
  if (pSrc == nil) {
    return nil;
  }
  if ([pSrc isKindOfClass:[OrgGeogebraGgbjdkJavaAwtGeomGeneralPath class]]) {
    return [((OrgGeogebraGgbjdkJavaAwtGeomGeneralPath *) nil_chk(((OrgGeogebraGgbjdkJavaAwtGeomGeneralPath *) check_class_cast(pSrc, [OrgGeogebraGgbjdkJavaAwtGeomGeneralPath class])))) createTransformedShapeWithOrgGeogebraCommonAwtGAffineTransform:self];
  }
  else {
    id<OrgGeogebraCommonAwtGPathIterator> pi = [((id<OrgGeogebraCommonAwtGShape>) nil_chk(pSrc)) getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:self];
    OrgGeogebraGgbjdkJavaAwtGeomGeneralPath *gp = [new_OrgGeogebraGgbjdkJavaAwtGeomGeneralPath_initWithInt_([((id<OrgGeogebraCommonAwtGPathIterator>) nil_chk(pi)) getWindingRule]) autorelease];
    [gp appendWithOrgGeogebraCommonAwtGPathIterator:pi withBoolean:NO];
    return gp;
  }
}

- (void)deltaTransformWithDoubleArray:(IOSDoubleArray *)srcPts
                              withInt:(jint)srcOff
                      withDoubleArray:(IOSDoubleArray *)dstPts
                              withInt:(jint)dstOff
                              withInt:(jint)numPts {
  jdouble M00, M01, M10, M11;
  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcPts, srcOff, dstPts, dstOff, numPts * 2);
    srcOff = dstOff;
  }
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M01 = m01_;
    M10 = m10_;
    M11 = m11_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSDoubleArray_Get(srcPts, srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = x * M00 + y * M01;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = x * M10 + y * M11;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    M01 = m01_;
    M10 = m10_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = IOSDoubleArray_Get(srcPts, srcOff++) * M01;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = x * M10;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M11 = m11_;
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) * M00;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = IOSDoubleArray_Get(srcPts, srcOff++) * M11;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    if (srcPts != dstPts || srcOff != dstOff) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcPts, srcOff, dstPts, dstOff, numPts * 2);
    }
    return;
  }
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)deltaTransformWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)ptSrc
                                                       withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)ptDst {
  if (ptDst == nil) {
    if ([ptSrc isKindOfClass:[OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double class]]) {
      ptDst = [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_init() autorelease];
    }
    else {
      ptDst = [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Float_init() autorelease];
    }
  }
  jdouble x = [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptSrc)) getX];
  jdouble y = [ptSrc getY];
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x * m00_ + y * m01_ withDouble:x * m10_ + y * m11_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:y * m01_ withDouble:x * m10_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x * m00_ withDouble:y * m11_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x withDouble:y];
    return ptDst;
  }
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgGeogebraGgbjdkJavaAwtGeomAffineTransform class]])) {
    return NO;
  }
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *a = (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) check_class_cast(obj, [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform class]);
  return ((m00_ == ((OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) nil_chk(a))->m00_) && (m01_ == a->m01_) && (m02_ == a->m02_) && (m10_ == a->m10_) && (m11_ == a->m11_) && (m12_ == a->m12_));
}

- (jdouble)getDeterminant {
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    return m00_ * m11_ - m01_ * m10_;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    return -(m01_ * m10_);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    return m00_ * m11_;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    return 1.0;
  }
}

- (void)getMatrixWithDoubleArray:(IOSDoubleArray *)flatmatrix {
  *IOSDoubleArray_GetRef(nil_chk(flatmatrix), 0) = m00_;
  *IOSDoubleArray_GetRef(flatmatrix, 1) = m10_;
  *IOSDoubleArray_GetRef(flatmatrix, 2) = m01_;
  *IOSDoubleArray_GetRef(flatmatrix, 3) = m11_;
  if (flatmatrix->size_ > 5) {
    *IOSDoubleArray_GetRef(flatmatrix, 4) = m02_;
    *IOSDoubleArray_GetRef(flatmatrix, 5) = m12_;
  }
}

- (jdouble)getScaleX {
  return m00_;
}

- (jdouble)getScaleY {
  return m11_;
}

- (jdouble)getShearX {
  return m01_;
}

- (jdouble)getShearY {
  return m10_;
}

- (jdouble)getTranslateX {
  return m02_;
}

- (jdouble)getTranslateY {
  return m12_;
}

- (jint)getType {
  if (type_ == OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN) {
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_calculateType(self);
  }
  return type_;
}

- (void)inverseTransformWithDoubleArray:(IOSDoubleArray *)srcPts
                                withInt:(jint)srcOff
                        withDoubleArray:(IOSDoubleArray *)dstPts
                                withInt:(jint)dstOff
                                withInt:(jint)numPts {
  jdouble M00, M01, M02, M10, M11, M12;
  jdouble det;
  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcPts, srcOff, dstPts, dstOff, numPts * 2);
    srcOff = dstOff;
  }
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M11 = m11_;
    M12 = m12_;
    det = M00 * M11 - M01 * M10;
    if (JavaLangMath_absWithDouble_(det) <= JavaLangDouble_MIN_VALUE) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(JreStrcat("$D", @"Determinant is ", det)) autorelease];
    }
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) - M02;
      jdouble y = IOSDoubleArray_Get(srcPts, srcOff++) - M12;
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = (x * M11 - y * M01) / det;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = (y * M00 - x * M10) / det;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M01 = m01_;
    M10 = m10_;
    M11 = m11_;
    det = M00 * M11 - M01 * M10;
    if (JavaLangMath_absWithDouble_(det) <= JavaLangDouble_MIN_VALUE) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(JreStrcat("$D", @"Determinant is ", det)) autorelease];
    }
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSDoubleArray_Get(srcPts, srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = (x * M11 - y * M01) / det;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = (y * M00 - x * M10) / det;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M12 = m12_;
    if (M01 == 0.0 || M10 == 0.0) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
    }
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) - M02;
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = (IOSDoubleArray_Get(srcPts, srcOff++) - M12) / M10;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = x / M01;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    M01 = m01_;
    M10 = m10_;
    if (M01 == 0.0 || M10 == 0.0) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
    }
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = IOSDoubleArray_Get(srcPts, srcOff++) / M10;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = x / M01;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M02 = m02_;
    M11 = m11_;
    M12 = m12_;
    if (M00 == 0.0 || M11 == 0.0) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
    }
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = (IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) - M02) / M00;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = (IOSDoubleArray_Get(srcPts, srcOff++) - M12) / M11;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M11 = m11_;
    if (M00 == 0.0 || M11 == 0.0) {
      @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
    }
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) / M00;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = IOSDoubleArray_Get(srcPts, srcOff++) / M11;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M02 = m02_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) - M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = IOSDoubleArray_Get(srcPts, srcOff++) - M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    if (srcPts != dstPts || srcOff != dstOff) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcPts, srcOff, dstPts, dstOff, numPts * 2);
    }
    return;
  }
}

- (OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)inverseTransformWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)ptSrc
                                                         withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:(OrgGeogebraGgbjdkJavaAwtGeomPoint2D *)ptDst {
  if (ptDst == nil) {
    if ([ptSrc isKindOfClass:[OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double class]]) {
      ptDst = [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_init() autorelease];
    }
    else {
      ptDst = [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Float_init() autorelease];
    }
  }
  jdouble x = [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptSrc)) getX];
  jdouble y = [ptSrc getY];
  {
    jdouble det;
    switch (state_) {
      default:
      OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      x -= m02_;
      y -= m12_;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
      det = m00_ * m11_ - m01_ * m10_;
      if (JavaLangMath_absWithDouble_(det) <= JavaLangDouble_MIN_VALUE) {
        @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(JreStrcat("$D", @"Determinant is ", det)) autorelease];
      }
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:(x * m11_ - y * m01_) / det withDouble:(y * m00_ - x * m10_) / det];
      return ptDst;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      x -= m02_;
      y -= m12_;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
      if (m01_ == 0.0 || m10_ == 0.0) {
        @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
      }
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:y / m10_ withDouble:x / m01_];
      return ptDst;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      x -= m02_;
      y -= m12_;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
      if (m00_ == 0.0 || m11_ == 0.0) {
        @throw [new_OrgGeogebraGgbjdkJavaAwtGeomNoninvertibleTransformException_initWithNSString_(@"Determinant is 0") autorelease];
      }
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x / m00_ withDouble:y / m11_];
      return ptDst;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x - m02_ withDouble:y - m12_];
      return ptDst;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x withDouble:y];
      return ptDst;
    }
  }
}

- (jboolean)isIdentity {
  return (state_ == OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY || ([self getType] == OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY));
}

- (void)preConcatenateWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform:(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *)Tx {
  jdouble M0, M1;
  jdouble T00, T01, T10, T11;
  jdouble T02, T12;
  jint mystate = state_;
  jint txstate = ((OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) nil_chk(Tx))->state_;
  switch ((LShift32(txstate, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHIFT)) | mystate) {
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    m02_ = Tx->m02_;
    m12_ = Tx->m12_;
    state_ = mystate | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
    type_ |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    m02_ = m02_ + Tx->m02_;
    m12_ = m12_ + Tx->m12_;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    state_ = mystate | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    T00 = Tx->m00_;
    T11 = Tx->m11_;
    if ((mystate & OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR) != 0) {
      m01_ = m01_ * T00;
      m10_ = m10_ * T11;
      if ((mystate & OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE) != 0) {
        m00_ = m00_ * T00;
        m11_ = m11_ * T11;
      }
    }
    else {
      m00_ = m00_ * T00;
      m11_ = m11_ * T11;
    }
    if ((mystate & OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE) != 0) {
      m02_ = m02_ * T00;
      m12_ = m12_ * T11;
    }
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    mystate = mystate | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    state_ = mystate ^ OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    T01 = Tx->m01_;
    T10 = Tx->m10_;
    M0 = m00_;
    m00_ = m10_ * T01;
    m10_ = M0 * T10;
    M0 = m01_;
    m01_ = m11_ * T01;
    m11_ = M0 * T10;
    M0 = m02_;
    m02_ = m12_ * T01;
    m12_ = M0 * T10;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
  }
  T00 = Tx->m00_;
  T01 = Tx->m01_;
  T02 = Tx->m02_;
  T10 = Tx->m10_;
  T11 = Tx->m11_;
  T12 = Tx->m12_;
  switch (mystate) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M0 = m02_;
    M1 = m12_;
    T02 += M0 * T00 + M1 * T01;
    T12 += M0 * T10 + M1 * T11;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    m02_ = T02;
    m12_ = T12;
    M0 = m00_;
    M1 = m10_;
    m00_ = M0 * T00 + M1 * T01;
    m10_ = M0 * T10 + M1 * T11;
    M0 = m01_;
    M1 = m11_;
    m01_ = M0 * T00 + M1 * T01;
    m11_ = M0 * T10 + M1 * T11;
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M0 = m02_;
    M1 = m12_;
    T02 += M0 * T00 + M1 * T01;
    T12 += M0 * T10 + M1 * T11;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    m02_ = T02;
    m12_ = T12;
    M0 = m10_;
    m00_ = M0 * T01;
    m10_ = M0 * T11;
    M0 = m01_;
    m01_ = M0 * T00;
    m11_ = M0 * T10;
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M0 = m02_;
    M1 = m12_;
    T02 += M0 * T00 + M1 * T01;
    T12 += M0 * T10 + M1 * T11;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    m02_ = T02;
    m12_ = T12;
    M0 = m00_;
    m00_ = M0 * T00;
    m10_ = M0 * T10;
    M0 = m11_;
    m01_ = M0 * T01;
    m11_ = M0 * T11;
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M0 = m02_;
    M1 = m12_;
    T02 += M0 * T00 + M1 * T01;
    T12 += M0 * T10 + M1 * T11;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m02_ = T02;
    m12_ = T12;
    m00_ = T00;
    m10_ = T10;
    m01_ = T01;
    m11_ = T11;
    state_ = mystate | txstate;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
  }
  [self updateState];
}

- (void)rotateWithDouble:(jdouble)theta {
  jdouble sin = JavaLangMath_sinWithDouble_(theta);
  jdouble cos = JavaLangMath_cosWithDouble_(theta);
  if (JavaLangMath_absWithDouble_(sin) < 1E-15) {
    if (cos < 0.0) {
      m00_ = -m00_;
      m11_ = -m11_;
      jint state = self->state_;
      if ((state & (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR)) != 0) {
        m01_ = -m01_;
        m10_ = -m10_;
      }
      else {
        if (m00_ == 1.0 && m11_ == 1.0) {
          self->state_ = state & ~OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
        }
        else {
          self->state_ = state | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
        }
      }
      type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    }
    return;
  }
  if (JavaLangMath_absWithDouble_(cos) < 1E-15) {
    if (sin < 0.0) {
      jdouble M0 = m00_;
      m00_ = -m01_;
      m01_ = M0;
      M0 = m10_;
      m10_ = -m11_;
      m11_ = M0;
    }
    else {
      jdouble M0 = m00_;
      m00_ = m01_;
      m01_ = -M0;
      M0 = m10_;
      m10_ = m11_;
      m11_ = -M0;
    }
    jint state = IOSIntArray_Get(nil_chk(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_rot90conversion_), self->state_);
    if ((state & (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE)) == OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE && m00_ == 1.0 && m11_ == 1.0) {
      state -= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
    }
    self->state_ = state;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
  }
  jdouble M0, M1;
  M0 = m00_;
  M1 = m01_;
  m00_ = cos * M0 + sin * M1;
  m01_ = -sin * M0 + cos * M1;
  M0 = m10_;
  M1 = m11_;
  m10_ = cos * M0 + sin * M1;
  m11_ = -sin * M0 + cos * M1;
  [self updateState];
}

- (void)rotateWithDouble:(jdouble)theta
              withDouble:(jdouble)x
              withDouble:(jdouble)y {
  [self translateWithDouble:x withDouble:y];
  [self rotateWithDouble:theta];
  [self translateWithDouble:-x withDouble:-y];
}

- (void)scale__WithDouble:(jdouble)sx
               withDouble:(jdouble)sy {
  jint state = self->state_;
  switch (state) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    m00_ *= sx;
    m11_ *= sy;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    m01_ *= sy;
    m10_ *= sx;
    if (m01_ == 0 && m10_ == 0) {
      self->state_ = state - OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR;
    }
    self->type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    m00_ *= sx;
    m11_ *= sy;
    if (m00_ == 1.0 && m11_ == 1.0) {
      self->state_ = (state &= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE);
      self->type_ = (state == OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY ? OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY : OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION);
    }
    else {
      self->type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m00_ = sx;
    m11_ = sy;
    if (sx != 1.0 || sy != 1.0) {
      self->state_ = state | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
      self->type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
    }
    return;
  }
}

- (void)setToIdentity {
  m00_ = m11_ = 1.0;
  m10_ = m01_ = m02_ = m12_ = 0.0;
  state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY;
  type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY;
}

- (void)setToRotationWithDouble:(jdouble)theta {
  m02_ = 0.0;
  m12_ = 0.0;
  jdouble sin = JavaLangMath_sinWithDouble_(theta);
  jdouble cos = JavaLangMath_cosWithDouble_(theta);
  if (JavaLangMath_absWithDouble_(sin) < 1E-15) {
    m01_ = m10_ = 0.0;
    if (cos < 0) {
      m00_ = m11_ = -1.0;
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
      type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION;
    }
    else {
      m00_ = m11_ = 1.0;
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY;
      type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY;
    }
    return;
  }
  if (JavaLangMath_absWithDouble_(cos) < 1E-15) {
    m00_ = m11_ = 0.0;
    if (sin < 0.0) {
      m01_ = 1.0;
      m10_ = -1.0;
    }
    else {
      m01_ = -1.0;
      m10_ = 1.0;
    }
    state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION;
    return;
  }
  m00_ = cos;
  m01_ = -sin;
  m10_ = sin;
  m11_ = cos;
  state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
  type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION;
  return;
}

- (void)setToRotationWithDouble:(jdouble)theta
                     withDouble:(jdouble)x
                     withDouble:(jdouble)y {
  [self setToRotationWithDouble:theta];
  jdouble sin = m10_;
  jdouble oneMinusCos = 1.0 - m00_;
  m02_ = x * oneMinusCos + y * sin;
  m12_ = y * oneMinusCos - x * sin;
  if (m02_ != 0.0 || m12_ != 0.0) {
    state_ |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
    type_ |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
  }
  return;
}

- (void)setToScaleWithDouble:(jdouble)sx
                  withDouble:(jdouble)sy {
  m00_ = sx;
  m10_ = 0.0;
  m01_ = 0.0;
  m11_ = sy;
  m02_ = 0.0;
  m12_ = 0.0;
  if (sx != 1.0 || sy != 1.0) {
    state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  }
  else {
    state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  }
}

- (void)setToShearWithDouble:(jdouble)shx
                  withDouble:(jdouble)shy {
  m00_ = 1.0;
  m01_ = shx;
  m10_ = shy;
  m11_ = 1.0;
  m02_ = 0.0;
  m12_ = 0.0;
  if (shx != 0.0 || shy != 0.0) {
    state_ = (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE);
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  }
  else {
    state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  }
}

- (void)setToTranslationWithDouble:(jdouble)tx
                        withDouble:(jdouble)ty {
  m00_ = 1.0;
  m10_ = 0.0;
  m01_ = 0.0;
  m11_ = 1.0;
  m02_ = tx;
  m12_ = ty;
  if (tx != 0.0 || ty != 0.0) {
    state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
  }
  else {
    state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY;
    type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  }
}

- (void)setTransformWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)TxA {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx = (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) check_class_cast(TxA, [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform class]);
  self->m00_ = ((OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) nil_chk(Tx))->m00_;
  self->m10_ = Tx->m10_;
  self->m01_ = Tx->m01_;
  self->m11_ = Tx->m11_;
  self->m02_ = Tx->m02_;
  self->m12_ = Tx->m12_;
  self->state_ = Tx->state_;
  self->type_ = Tx->type_;
}

- (void)setTransformWithDouble:(jdouble)m00
                    withDouble:(jdouble)m10
                    withDouble:(jdouble)m01
                    withDouble:(jdouble)m11
                    withDouble:(jdouble)m02
                    withDouble:(jdouble)m12 {
  self->m00_ = m00;
  self->m10_ = m10;
  self->m01_ = m01;
  self->m11_ = m11;
  self->m02_ = m02;
  self->m12_ = m12;
  [self updateState];
}

- (void)shearWithDouble:(jdouble)shx
             withDouble:(jdouble)shy {
  jint state = self->state_;
  {
    jdouble M0, M1;
    switch (state) {
      default:
      OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
      M0 = m00_;
      M1 = m01_;
      m00_ = M0 + M1 * shy;
      m01_ = M0 * shx + M1;
      M0 = m10_;
      M1 = m11_;
      m10_ = M0 + M1 * shy;
      m11_ = M0 * shx + M1;
      [self updateState];
      return;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
      m00_ = m01_ * shy;
      m11_ = m10_ * shx;
      if (m00_ != 0.0 || m11_ != 0.0) {
        self->state_ = state | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
      }
      self->type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      return;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
      m01_ = m00_ * shx;
      m10_ = m11_ * shy;
      if (m01_ != 0.0 || m10_ != 0.0) {
        self->state_ = state | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR;
      }
      self->type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      return;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
      m01_ = shx;
      m10_ = shy;
      if (m01_ != 0.0 || m10_ != 0.0) {
        self->state_ = state | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR;
        self->type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      }
      return;
    }
  }
}

- (NSString *)description {
  return (JreStrcat("$D$D$D$D$D$D$", @"AffineTransform[[", OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(m00_), @", ", OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(m01_), @", ", OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(m02_), @"], [", OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(m10_), @", ", OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(m11_), @", ", OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(m12_), @"]]"));
}

- (void)transformWithDoubleArray:(IOSDoubleArray *)srcPts
                         withInt:(jint)srcOff
                 withDoubleArray:(IOSDoubleArray *)dstPts
                         withInt:(jint)dstOff
                         withInt:(jint)numPts {
  jdouble M00, M01, M02, M10, M11, M12;
  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcPts, srcOff, dstPts, dstOff, numPts * 2);
    srcOff = dstOff;
  }
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M11 = m11_;
    M12 = m12_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSDoubleArray_Get(srcPts, srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M00 * x + M01 * y + M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M10 * x + M11 * y + M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M01 = m01_;
    M10 = m10_;
    M11 = m11_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSDoubleArray_Get(srcPts, srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M00 * x + M01 * y;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M10 * x + M11 * y;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M12 = m12_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M01 * IOSDoubleArray_Get(srcPts, srcOff++) + M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M10 * x + M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    M01 = m01_;
    M10 = m10_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M01 * IOSDoubleArray_Get(srcPts, srcOff++);
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M10 * x;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M02 = m02_;
    M11 = m11_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M00 * IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) + M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M11 * IOSDoubleArray_Get(srcPts, srcOff++) + M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M11 = m11_;
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M00 * IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M11 * IOSDoubleArray_Get(srcPts, srcOff++);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M02 = m02_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) + M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = IOSDoubleArray_Get(srcPts, srcOff++) + M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    if (srcPts != dstPts || srcOff != dstOff) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcPts, srcOff, dstPts, dstOff, numPts * 2);
    }
    return;
  }
}

- (void)transformWithDoubleArray:(IOSDoubleArray *)srcPts
                         withInt:(jint)srcOff
                  withFloatArray:(IOSFloatArray *)dstPts
                         withInt:(jint)dstOff
                         withInt:(jint)numPts {
  jdouble M00, M01, M02, M10, M11, M12;
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M11 = m11_;
    M12 = m12_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSDoubleArray_Get(srcPts, srcOff++);
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M00 * x + M01 * y + M02);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M10 * x + M11 * y + M12);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M01 = m01_;
    M10 = m10_;
    M11 = m11_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSDoubleArray_Get(srcPts, srcOff++);
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M00 * x + M01 * y);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M10 * x + M11 * y);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M12 = m12_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M01 * IOSDoubleArray_Get(srcPts, srcOff++) + M02);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M10 * x + M12);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    M01 = m01_;
    M10 = m10_;
    while (--numPts >= 0) {
      jdouble x = IOSDoubleArray_Get(nil_chk(srcPts), srcOff++);
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M01 * IOSDoubleArray_Get(srcPts, srcOff++));
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M10 * x);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M02 = m02_;
    M11 = m11_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M00 * IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) + M02);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M11 * IOSDoubleArray_Get(srcPts, srcOff++) + M12);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M11 = m11_;
    while (--numPts >= 0) {
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M00 * IOSDoubleArray_Get(nil_chk(srcPts), srcOff++));
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M11 * IOSDoubleArray_Get(srcPts, srcOff++));
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M02 = m02_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (IOSDoubleArray_Get(nil_chk(srcPts), srcOff++) + M02);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (IOSDoubleArray_Get(srcPts, srcOff++) + M12);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    while (--numPts >= 0) {
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (IOSDoubleArray_Get(nil_chk(srcPts), srcOff++));
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (IOSDoubleArray_Get(srcPts, srcOff++));
    }
    return;
  }
}

- (void)transformWithFloatArray:(IOSFloatArray *)srcPts
                        withInt:(jint)srcOff
                withDoubleArray:(IOSDoubleArray *)dstPts
                        withInt:(jint)dstOff
                        withInt:(jint)numPts {
  jdouble M00, M01, M02, M10, M11, M12;
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M11 = m11_;
    M12 = m12_;
    while (--numPts >= 0) {
      jdouble x = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSFloatArray_Get(srcPts, srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M00 * x + M01 * y + M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M10 * x + M11 * y + M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M01 = m01_;
    M10 = m10_;
    M11 = m11_;
    while (--numPts >= 0) {
      jdouble x = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSFloatArray_Get(srcPts, srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M00 * x + M01 * y;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M10 * x + M11 * y;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M12 = m12_;
    while (--numPts >= 0) {
      jdouble x = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M01 * IOSFloatArray_Get(srcPts, srcOff++) + M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M10 * x + M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    M01 = m01_;
    M10 = m10_;
    while (--numPts >= 0) {
      jdouble x = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M01 * IOSFloatArray_Get(srcPts, srcOff++);
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M10 * x;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M02 = m02_;
    M11 = m11_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M00 * IOSFloatArray_Get(nil_chk(srcPts), srcOff++) + M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M11 * IOSFloatArray_Get(srcPts, srcOff++) + M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M11 = m11_;
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = M00 * IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = M11 * IOSFloatArray_Get(srcPts, srcOff++);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M02 = m02_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = IOSFloatArray_Get(nil_chk(srcPts), srcOff++) + M02;
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = IOSFloatArray_Get(srcPts, srcOff++) + M12;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    while (--numPts >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(dstPts), dstOff++) = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      *IOSDoubleArray_GetRef(dstPts, dstOff++) = IOSFloatArray_Get(srcPts, srcOff++);
    }
    return;
  }
}

- (void)transformWithFloatArray:(IOSFloatArray *)srcPts
                        withInt:(jint)srcOff
                 withFloatArray:(IOSFloatArray *)dstPts
                        withInt:(jint)dstOff
                        withInt:(jint)numPts {
  jdouble M00, M01, M02, M10, M11, M12;
  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcPts, srcOff, dstPts, dstOff, numPts * 2);
    srcOff = dstOff;
  }
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M11 = m11_;
    M12 = m12_;
    while (--numPts >= 0) {
      jdouble x = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSFloatArray_Get(srcPts, srcOff++);
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M00 * x + M01 * y + M02);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M10 * x + M11 * y + M12);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M01 = m01_;
    M10 = m10_;
    M11 = m11_;
    while (--numPts >= 0) {
      jdouble x = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      jdouble y = IOSFloatArray_Get(srcPts, srcOff++);
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M00 * x + M01 * y);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M10 * x + M11 * y);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M01 = m01_;
    M02 = m02_;
    M10 = m10_;
    M12 = m12_;
    while (--numPts >= 0) {
      jdouble x = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M01 * IOSFloatArray_Get(srcPts, srcOff++) + M02);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M10 * x + M12);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    M01 = m01_;
    M10 = m10_;
    while (--numPts >= 0) {
      jdouble x = IOSFloatArray_Get(nil_chk(srcPts), srcOff++);
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M01 * IOSFloatArray_Get(srcPts, srcOff++));
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M10 * x);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M00 = m00_;
    M02 = m02_;
    M11 = m11_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M00 * IOSFloatArray_Get(nil_chk(srcPts), srcOff++) + M02);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M11 * IOSFloatArray_Get(srcPts, srcOff++) + M12);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    M00 = m00_;
    M11 = m11_;
    while (--numPts >= 0) {
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (M00 * IOSFloatArray_Get(nil_chk(srcPts), srcOff++));
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (M11 * IOSFloatArray_Get(srcPts, srcOff++));
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    M02 = m02_;
    M12 = m12_;
    while (--numPts >= 0) {
      *IOSFloatArray_GetRef(nil_chk(dstPts), dstOff++) = (jfloat) (IOSFloatArray_Get(nil_chk(srcPts), srcOff++) + M02);
      *IOSFloatArray_GetRef(dstPts, dstOff++) = (jfloat) (IOSFloatArray_Get(srcPts, srcOff++) + M12);
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    if (srcPts != dstPts || srcOff != dstOff) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcPts, srcOff, dstPts, dstOff, numPts * 2);
    }
    return;
  }
}

- (OrgGeogebraCommonAwtGPoint2D *)transformWithOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)ptSrc
                                           withOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)ptDst {
  if (ptDst == nil) {
    if ([ptSrc isKindOfClass:[OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double class]]) {
      ptDst = [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_init() autorelease];
    }
    else {
      ptDst = [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Float_init() autorelease];
    }
  }
  jdouble x = [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptSrc)) getX];
  jdouble y = [ptSrc getY];
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x * m00_ + y * m01_ + m02_ withDouble:x * m10_ + y * m11_ + m12_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x * m00_ + y * m01_ withDouble:x * m10_ + y * m11_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptDst)) setLocationWithDouble:y * m01_ + m02_ withDouble:x * m10_ + m12_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptDst)) setLocationWithDouble:y * m01_ withDouble:x * m10_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x * m00_ + m02_ withDouble:y * m11_ + m12_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x * m00_ withDouble:y * m11_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x + m02_ withDouble:y + m12_];
    return ptDst;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ptDst)) setLocationWithDouble:x withDouble:y];
    return ptDst;
  }
}

- (void)transformWithOrgGeogebraGgbjdkJavaAwtGeomPoint2DArray:(IOSObjectArray *)ptSrc
                                                      withInt:(jint)srcOff
                 withOrgGeogebraGgbjdkJavaAwtGeomPoint2DArray:(IOSObjectArray *)ptDst
                                                      withInt:(jint)dstOff
                                                      withInt:(jint)numPts {
  jint state = self->state_;
  while (--numPts >= 0) {
    OrgGeogebraGgbjdkJavaAwtGeomPoint2D *src = IOSObjectArray_Get(nil_chk(ptSrc), srcOff++);
    jdouble x = [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(src)) getX];
    jdouble y = [src getY];
    OrgGeogebraGgbjdkJavaAwtGeomPoint2D *dst = IOSObjectArray_Get(nil_chk(ptDst), dstOff++);
    if (dst == nil) {
      if ([src isKindOfClass:[OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double class]]) {
        dst = [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Double_init() autorelease];
      }
      else {
        dst = [new_OrgGeogebraGgbjdkJavaAwtGeomPoint2D_Float_init() autorelease];
      }
      IOSObjectArray_Set(ptDst, dstOff - 1, dst);
    }
    switch (state) {
      default:
      OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:x * m00_ + y * m01_ + m02_ withDouble:x * m10_ + y * m11_ + m12_];
      break;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:x * m00_ + y * m01_ withDouble:x * m10_ + y * m11_];
      break;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:y * m01_ + m02_ withDouble:x * m10_ + m12_];
      break;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:y * m01_ withDouble:x * m10_];
      break;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:x * m00_ + m02_ withDouble:y * m11_ + m12_];
      break;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:x * m00_ withDouble:y * m11_];
      break;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:x + m02_ withDouble:y + m12_];
      break;
      case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
      [((OrgGeogebraGgbjdkJavaAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:x withDouble:y];
      break;
    }
  }
}

- (void)translateWithDouble:(jdouble)tx
                 withDouble:(jdouble)ty {
  switch (state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    m02_ = tx * m00_ + ty * m01_ + m02_;
    m12_ = tx * m10_ + ty * m11_ + m12_;
    if (m02_ == 0.0 && m12_ == 0.0) {
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
      if (type_ != OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN) {
        type_ -= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
      }
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    m02_ = tx * m00_ + ty * m01_;
    m12_ = tx * m10_ + ty * m11_;
    if (m02_ != 0.0 || m12_ != 0.0) {
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
      type_ |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    m02_ = ty * m01_ + m02_;
    m12_ = tx * m10_ + m12_;
    if (m02_ == 0.0 && m12_ == 0.0) {
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR;
      if (type_ != OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN) {
        type_ -= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
      }
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    m02_ = ty * m01_;
    m12_ = tx * m10_;
    if (m02_ != 0.0 || m12_ != 0.0) {
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
      type_ |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    m02_ = tx * m00_ + m02_;
    m12_ = ty * m11_ + m12_;
    if (m02_ == 0.0 && m12_ == 0.0) {
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
      if (type_ != OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN) {
        type_ -= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
      }
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    m02_ = tx * m00_;
    m12_ = ty * m11_;
    if (m02_ != 0.0 || m12_ != 0.0) {
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
      type_ |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    m02_ = tx + m02_;
    m12_ = ty + m12_;
    if (m02_ == 0.0 && m12_ == 0.0) {
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY;
      type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY;
    }
    return;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    m02_ = tx;
    m12_ = ty;
    if (tx != 0.0 || ty != 0.0) {
      state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
      type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    }
    return;
  }
}

- (void)calculateType {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_calculateType(self);
}

- (void)stateError {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
}

- (void)updateState {
  if (m01_ == 0.0 && m10_ == 0.0) {
    if (m00_ == 1.0 && m11_ == 1.0) {
      if (m02_ == 0.0 && m12_ == 0.0) {
        state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY;
        type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY;
      }
      else {
        state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE;
        type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
      }
    }
    else {
      if (m02_ == 0.0 && m12_ == 0.0) {
        state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE;
        type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      }
      else {
        state_ = (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE);
        type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      }
    }
  }
  else {
    if (m00_ == 0.0 && m11_ == 0.0) {
      if (m02_ == 0.0 && m12_ == 0.0) {
        state_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR;
        type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      }
      else {
        state_ = (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE);
        type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      }
    }
    else {
      if (m02_ == 0.0 && m12_ == 0.0) {
        state_ = (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE);
        type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      }
      else {
        state_ = (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE);
        type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
      }
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform class]) {
    JreStrongAssignAndConsume(&OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_rot90conversion_, nil, [IOSIntArray newArrayWithInts:(jint[]){ OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE } count:8]);
    J2OBJC_SET_INITIALIZED(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getRotateInstanceWithDouble:", "getRotateInstance", "Lorg.geogebra.ggbjdk.java.awt.geom.AffineTransform;", 0x9, NULL, NULL },
    { "getRotateInstanceWithDouble:withDouble:withDouble:", "getRotateInstance", "Lorg.geogebra.ggbjdk.java.awt.geom.AffineTransform;", 0x9, NULL, NULL },
    { "getScaleInstanceWithDouble:withDouble:", "getScaleInstance", "Lorg.geogebra.ggbjdk.java.awt.geom.AffineTransform;", 0x9, NULL, NULL },
    { "getShearInstanceWithDouble:withDouble:", "getShearInstance", "Lorg.geogebra.ggbjdk.java.awt.geom.AffineTransform;", 0x9, NULL, NULL },
    { "getTranslateInstanceWithDouble:withDouble:", "getTranslateInstance", "Lorg.geogebra.ggbjdk.java.awt.geom.AffineTransform;", 0x9, NULL, NULL },
    { "_matroundWithDouble:", "_matround", "D", 0xa, NULL, NULL },
    { "init", "AffineTransform", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform:", "AffineTransform", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "AffineTransform", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:", "AffineTransform", NULL, 0x1, NULL, NULL },
    { "initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "AffineTransform", NULL, 0x1, NULL, NULL },
    { "initWithFloatArray:", "AffineTransform", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "AffineTransform", NULL, 0x2, NULL, NULL },
    { "concatenateWithOrgGeogebraCommonAwtGAffineTransform:", "concatenate", "V", 0x1, NULL, NULL },
    { "createInverse", NULL, "Lorg.geogebra.ggbjdk.java.awt.geom.AffineTransform;", 0x1, "Lorg.geogebra.ggbjdk.java.awt.geom.NoninvertibleTransformException;", NULL },
    { "createTransformedShapeWithOrgGeogebraCommonAwtGShape:", "createTransformedShape", "Lorg.geogebra.ggbjdk.java.awt.geom.Shape;", 0x1, NULL, NULL },
    { "deltaTransformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:", "deltaTransform", "V", 0x1, NULL, NULL },
    { "deltaTransformWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:", "deltaTransform", "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "getDeterminant", NULL, "D", 0x1, NULL, NULL },
    { "getMatrixWithDoubleArray:", "getMatrix", "V", 0x1, NULL, NULL },
    { "getScaleX", NULL, "D", 0x1, NULL, NULL },
    { "getScaleY", NULL, "D", 0x1, NULL, NULL },
    { "getShearX", NULL, "D", 0x1, NULL, NULL },
    { "getShearY", NULL, "D", 0x1, NULL, NULL },
    { "getTranslateX", NULL, "D", 0x1, NULL, NULL },
    { "getTranslateY", NULL, "D", 0x1, NULL, NULL },
    { "getType", NULL, "I", 0x1, NULL, NULL },
    { "inverseTransformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:", "inverseTransform", "V", 0x1, "Lorg.geogebra.ggbjdk.java.awt.geom.NoninvertibleTransformException;", NULL },
    { "inverseTransformWithOrgGeogebraGgbjdkJavaAwtGeomPoint2D:withOrgGeogebraGgbjdkJavaAwtGeomPoint2D:", "inverseTransform", "Lorg.geogebra.ggbjdk.java.awt.geom.Point2D;", 0x1, "Lorg.geogebra.ggbjdk.java.awt.geom.NoninvertibleTransformException;", NULL },
    { "isIdentity", NULL, "Z", 0x1, NULL, NULL },
    { "preConcatenateWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform:", "preConcatenate", "V", 0x1, NULL, NULL },
    { "rotateWithDouble:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithDouble:withDouble:withDouble:", "rotate", "V", 0x1, NULL, NULL },
    { "scale__WithDouble:withDouble:", "scale", "V", 0x1, NULL, NULL },
    { "setToIdentity", NULL, "V", 0x1, NULL, NULL },
    { "setToRotationWithDouble:", "setToRotation", "V", 0x1, NULL, NULL },
    { "setToRotationWithDouble:withDouble:withDouble:", "setToRotation", "V", 0x1, NULL, NULL },
    { "setToScaleWithDouble:withDouble:", "setToScale", "V", 0x1, NULL, NULL },
    { "setToShearWithDouble:withDouble:", "setToShear", "V", 0x1, NULL, NULL },
    { "setToTranslationWithDouble:withDouble:", "setToTranslation", "V", 0x1, NULL, NULL },
    { "setTransformWithOrgGeogebraCommonAwtGAffineTransform:", "setTransform", "V", 0x1, NULL, NULL },
    { "setTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setTransform", "V", 0x1, NULL, NULL },
    { "shearWithDouble:withDouble:", "shear", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "transformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:", "transform", "V", 0x1, NULL, NULL },
    { "transformWithDoubleArray:withInt:withFloatArray:withInt:withInt:", "transform", "V", 0x1, NULL, NULL },
    { "transformWithFloatArray:withInt:withDoubleArray:withInt:withInt:", "transform", "V", 0x1, NULL, NULL },
    { "transformWithFloatArray:withInt:withFloatArray:withInt:withInt:", "transform", "V", 0x1, NULL, NULL },
    { "transformWithOrgGeogebraCommonAwtGPoint2D:withOrgGeogebraCommonAwtGPoint2D:", "transform", "Lorg.geogebra.common.awt.GPoint2D;", 0x1, NULL, NULL },
    { "transformWithOrgGeogebraGgbjdkJavaAwtGeomPoint2DArray:withInt:withOrgGeogebraGgbjdkJavaAwtGeomPoint2DArray:withInt:withInt:", "transform", "V", 0x1, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x1, NULL, NULL },
    { "calculateType", NULL, "V", 0x2, NULL, NULL },
    { "stateError", NULL, "V", 0x2, NULL, NULL },
    { "updateState", NULL, "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_UNKNOWN_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN },
    { "TYPE_IDENTITY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY },
    { "TYPE_TRANSLATION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION },
    { "TYPE_UNIFORM_SCALE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE },
    { "TYPE_GENERAL_SCALE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE },
    { "TYPE_MASK_SCALE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_MASK_SCALE },
    { "TYPE_FLIP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP },
    { "TYPE_QUADRANT_ROTATION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION },
    { "TYPE_GENERAL_ROTATION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION },
    { "TYPE_MASK_ROTATION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_MASK_ROTATION },
    { "TYPE_GENERAL_TRANSFORM_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_TRANSFORM },
    { "APPLY_IDENTITY_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY },
    { "APPLY_TRANSLATE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE },
    { "APPLY_SCALE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE },
    { "APPLY_SHEAR_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR },
    { "HI_SHIFT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHIFT },
    { "HI_IDENTITY_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_IDENTITY },
    { "HI_TRANSLATE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_TRANSLATE },
    { "HI_SCALE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SCALE },
    { "HI_SHEAR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_HI_SHEAR },
    { "rot90conversion_", NULL, 0xa, "[I", &OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_rot90conversion_, NULL,  },
    { "m00_", NULL, 0x1, "D", NULL, NULL,  },
    { "m10_", NULL, 0x1, "D", NULL, NULL,  },
    { "m01_", NULL, 0x1, "D", NULL, NULL,  },
    { "m11_", NULL, 0x1, "D", NULL, NULL,  },
    { "m02_", NULL, 0x1, "D", NULL, NULL,  },
    { "m12_", NULL, 0x1, "D", NULL, NULL,  },
    { "state_", NULL, 0x80, "I", NULL, NULL,  },
    { "type_", NULL, 0x82, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomAffineTransform = { 2, "AffineTransform", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x1, 55, methods, 29, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform;
}

@end

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_(jdouble theta) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initialize();
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx = [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init() autorelease];
  [Tx setToRotationWithDouble:theta];
  return Tx;
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_withDouble_withDouble_(jdouble theta, jdouble x, jdouble y) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initialize();
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx = [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init() autorelease];
  [Tx setToRotationWithDouble:theta withDouble:x withDouble:y];
  return Tx;
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getScaleInstanceWithDouble_withDouble_(jdouble sx, jdouble sy) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initialize();
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx = [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init() autorelease];
  [Tx setToScaleWithDouble:sx withDouble:sy];
  return Tx;
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getShearInstanceWithDouble_withDouble_(jdouble shx, jdouble shy) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initialize();
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx = [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init() autorelease];
  [Tx setToShearWithDouble:shx withDouble:shy];
  return Tx;
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_getTranslateInstanceWithDouble_withDouble_(jdouble tx, jdouble ty) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initialize();
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx = [new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init() autorelease];
  [Tx setToTranslationWithDouble:tx withDouble:ty];
  return Tx;
}

jdouble OrgGeogebraGgbjdkJavaAwtGeomAffineTransform__matroundWithDouble_(jdouble matval) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initialize();
  return JavaLangMath_rintWithDouble_(matval * 1E15) / 1E15;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self) {
  NSObject_init(self);
  self->m00_ = self->m11_ = 1.0;
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init() {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self = [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform alloc];
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_init(self);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform_(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self, OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx) {
  NSObject_init(self);
  self->m00_ = ((OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *) nil_chk(Tx))->m00_;
  self->m10_ = Tx->m10_;
  self->m01_ = Tx->m01_;
  self->m11_ = Tx->m11_;
  self->m02_ = Tx->m02_;
  self->m12_ = Tx->m12_;
  self->state_ = Tx->state_;
  self->type_ = Tx->type_;
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform_(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *Tx) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self = [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform alloc];
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithOrgGeogebraGgbjdkJavaAwtGeomAffineTransform_(self, Tx);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self, jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12) {
  NSObject_init(self);
  self->m00_ = m00;
  self->m10_ = m10;
  self->m01_ = m01;
  self->m11_ = m11;
  self->m02_ = m02;
  self->m12_ = m12;
  [self updateState];
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self = [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform alloc];
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, m00, m10, m01, m11, m02, m12);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDoubleArray_(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self, IOSDoubleArray *flatmatrix) {
  NSObject_init(self);
  self->m00_ = IOSDoubleArray_Get(nil_chk(flatmatrix), 0);
  self->m10_ = IOSDoubleArray_Get(flatmatrix, 1);
  self->m01_ = IOSDoubleArray_Get(flatmatrix, 2);
  self->m11_ = IOSDoubleArray_Get(flatmatrix, 3);
  if (flatmatrix->size_ > 5) {
    self->m02_ = IOSDoubleArray_Get(flatmatrix, 4);
    self->m12_ = IOSDoubleArray_Get(flatmatrix, 5);
  }
  [self updateState];
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDoubleArray_(IOSDoubleArray *flatmatrix) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self = [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform alloc];
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDoubleArray_(self, flatmatrix);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self, jfloat m00, jfloat m10, jfloat m01, jfloat m11, jfloat m02, jfloat m12) {
  NSObject_init(self);
  self->m00_ = m00;
  self->m10_ = m10;
  self->m01_ = m01;
  self->m11_ = m11;
  self->m02_ = m02;
  self->m12_ = m12;
  [self updateState];
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat m00, jfloat m10, jfloat m01, jfloat m11, jfloat m02, jfloat m12) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self = [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform alloc];
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, m00, m10, m01, m11, m02, m12);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithFloatArray_(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self, IOSFloatArray *flatmatrix) {
  NSObject_init(self);
  self->m00_ = IOSFloatArray_Get(nil_chk(flatmatrix), 0);
  self->m10_ = IOSFloatArray_Get(flatmatrix, 1);
  self->m01_ = IOSFloatArray_Get(flatmatrix, 2);
  self->m11_ = IOSFloatArray_Get(flatmatrix, 3);
  if (flatmatrix->size_ > 5) {
    self->m02_ = IOSFloatArray_Get(flatmatrix, 4);
    self->m12_ = IOSFloatArray_Get(flatmatrix, 5);
  }
  [self updateState];
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithFloatArray_(IOSFloatArray *flatmatrix) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self = [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform alloc];
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithFloatArray_(self, flatmatrix);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self, jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12, jint state) {
  NSObject_init(self);
  self->m00_ = m00;
  self->m10_ = m10;
  self->m01_ = m01;
  self->m11_ = m11;
  self->m02_ = m02;
  self->m12_ = m12;
  self->state_ = state;
  self->type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
}

OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *new_OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12, jint state) {
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self = [OrgGeogebraGgbjdkJavaAwtGeomAffineTransform alloc];
  OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, m00, m10, m01, m11, m02, m12, state);
  return self;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_calculateType(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self) {
  jint ret = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  jboolean sgn0, sgn1;
  jdouble M0, M1, M2, M3;
  [self updateState];
  switch (self->state_) {
    default:
    OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(self);
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    ret = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    if ((M0 = self->m00_) * (M2 = self->m01_) + (M3 = self->m10_) * (M1 = self->m11_) != 0) {
      self->type_ = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_TRANSFORM;
      return;
    }
    sgn0 = (M0 >= 0.0);
    sgn1 = (M1 >= 0.0);
    if (sgn0 == sgn1) {
      if (M0 != M1 || M2 != -M3) {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE);
      }
      else if (M0 * M1 - M2 * M3 != 1.0) {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE);
      }
      else {
        ret |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION;
      }
    }
    else {
      if (M0 != -M1 || M2 != M3) {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE);
      }
      else if (M0 * M1 - M2 * M3 != 1.0) {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE);
      }
      else {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP);
      }
    }
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    ret = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SHEAR):
    sgn0 = ((M0 = self->m01_) >= 0.0);
    sgn1 = ((M1 = self->m10_) >= 0.0);
    if (sgn0 != sgn1) {
      if (M0 != -M1) {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE);
      }
      else if (M0 != 1.0 && M0 != -1.0) {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE);
      }
      else {
        ret |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION;
      }
    }
    else {
      if (M0 == M1) {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE);
      }
      else {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE);
      }
    }
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    ret = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_SCALE):
    sgn0 = ((M0 = self->m00_) >= 0.0);
    sgn1 = ((M1 = self->m11_) >= 0.0);
    if (sgn0 == sgn1) {
      if (sgn0) {
        if (M0 == M1) {
          ret |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE;
        }
        else {
          ret |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE;
        }
      }
      else {
        if (M0 != M1) {
          ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE);
        }
        else if (M0 != -1.0) {
          ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE);
        }
        else {
          ret |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION;
        }
      }
    }
    else {
      if (M0 == -M1) {
        if (M0 == 1.0 || M0 == -1.0) {
          ret |= OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP;
        }
        else {
          ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE);
        }
      }
      else {
        ret |= (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_FLIP | OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE);
      }
    }
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_TRANSLATE):
    ret = OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
    break;
    case (OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_APPLY_IDENTITY):
    break;
  }
  self->type_ = ret;
}

void OrgGeogebraGgbjdkJavaAwtGeomAffineTransform_stateError(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform *self) {
  @throw [new_JavaLangRuntimeException_initWithNSString_(@"missing case in transform state switch") autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomAffineTransform)
