//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/ggbjdk/java/awt/geom/AreaIterator.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Vector.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/ggbjdk/java/awt/geom/AreaIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Curve.h"

@interface OrgGeogebraGgbjdkJavaAwtGeomAreaIterator () {
 @public
  id<OrgGeogebraCommonAwtGAffineTransform> transform_;
  JavaUtilVector *curves_;
  jint index_;
  OrgGeogebraGgbjdkSunAwtGeomCurve *prevcurve_;
  OrgGeogebraGgbjdkSunAwtGeomCurve *thiscurve_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraGgbjdkJavaAwtGeomAreaIterator, transform_, id<OrgGeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(OrgGeogebraGgbjdkJavaAwtGeomAreaIterator, curves_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgGeogebraGgbjdkJavaAwtGeomAreaIterator, prevcurve_, OrgGeogebraGgbjdkSunAwtGeomCurve *)
J2OBJC_FIELD_SETTER(OrgGeogebraGgbjdkJavaAwtGeomAreaIterator, thiscurve_, OrgGeogebraGgbjdkSunAwtGeomCurve *)

@implementation OrgGeogebraGgbjdkJavaAwtGeomAreaIterator

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)curves
withOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at {
  OrgGeogebraGgbjdkJavaAwtGeomAreaIterator_initWithJavaUtilVector_withOrgGeogebraCommonAwtGAffineTransform_(self, curves, at);
  return self;
}

- (jint)getWindingRule {
  return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_WIND_NON_ZERO;
}

- (jboolean)isDone {
  return (prevcurve_ == nil && thiscurve_ == nil);
}

- (void)next {
  if (prevcurve_ != nil) {
    prevcurve_ = nil;
  }
  else {
    prevcurve_ = thiscurve_;
    index_++;
    if (index_ < [((JavaUtilVector *) nil_chk(curves_)) size]) {
      thiscurve_ = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([curves_ getWithInt:index_], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
      if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(thiscurve_)) getOrder] != 0 && [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(prevcurve_)) getX1] == [thiscurve_ getX0] && [prevcurve_ getY1] == [thiscurve_ getY0]) {
        prevcurve_ = nil;
      }
    }
    else {
      thiscurve_ = nil;
    }
  }
}

- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  IOSDoubleArray *dcoords = [IOSDoubleArray newArrayWithLength:6];
  jint segtype = [self currentSegmentWithDoubleArray:dcoords];
  jint numpoints = (segtype == OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE ? 0 : (segtype == OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_QUADTO ? 2 : (segtype == OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CUBICTO ? 3 : 1)));
  for (jint i = 0; i < numpoints * 2; i++) {
    *IOSFloatArray_GetRef(nil_chk(coords), i) = (jfloat) IOSDoubleArray_Get(dcoords, i);
  }
  return segtype;
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  jint segtype;
  jint numpoints;
  if (prevcurve_ != nil) {
    if (thiscurve_ == nil || [thiscurve_ getOrder] == 0) {
      return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE;
    }
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(thiscurve_)) getX0];
    *IOSDoubleArray_GetRef(coords, 1) = [thiscurve_ getY0];
    segtype = OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO;
    numpoints = 1;
  }
  else if (thiscurve_ == nil) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"area iterator out of bounds");
  }
  else {
    segtype = [thiscurve_ getSegmentWithDoubleArray:coords];
    numpoints = [thiscurve_ getOrder];
    if (numpoints == 0) {
      numpoints = 1;
    }
  }
  if (transform_ != nil) {
    [transform_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:numpoints];
  }
  return segtype;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilVector:withOrgGeogebraCommonAwtGAffineTransform:", "AreaIterator", NULL, 0x1, NULL, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL, NULL },
    { "isDone", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "V", 0x1, NULL, NULL },
    { "currentSegmentWithFloatArray:", "currentSegment", "I", 0x1, NULL, NULL },
    { "currentSegmentWithDoubleArray:", "currentSegment", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "transform_", NULL, 0x2, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "curves_", NULL, 0x2, "Ljava.util.Vector;", NULL, NULL,  },
    { "index_", NULL, 0x2, "I", NULL, NULL,  },
    { "prevcurve_", NULL, 0x2, "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", NULL, NULL,  },
    { "thiscurve_", NULL, 0x2, "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkJavaAwtGeomAreaIterator = { 2, "AreaIterator", "org.geogebra.ggbjdk.java.awt.geom", NULL, 0x0, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkJavaAwtGeomAreaIterator;
}

@end

void OrgGeogebraGgbjdkJavaAwtGeomAreaIterator_initWithJavaUtilVector_withOrgGeogebraCommonAwtGAffineTransform_(OrgGeogebraGgbjdkJavaAwtGeomAreaIterator *self, JavaUtilVector *curves, id<OrgGeogebraCommonAwtGAffineTransform> at) {
  (void) NSObject_init(self);
  self->curves_ = curves;
  self->transform_ = at;
  if ([((JavaUtilVector *) nil_chk(curves)) size] >= 1) {
    self->thiscurve_ = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([curves getWithInt:0], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
  }
}

OrgGeogebraGgbjdkJavaAwtGeomAreaIterator *new_OrgGeogebraGgbjdkJavaAwtGeomAreaIterator_initWithJavaUtilVector_withOrgGeogebraCommonAwtGAffineTransform_(JavaUtilVector *curves, id<OrgGeogebraCommonAwtGAffineTransform> at) {
  OrgGeogebraGgbjdkJavaAwtGeomAreaIterator *self = [OrgGeogebraGgbjdkJavaAwtGeomAreaIterator alloc];
  OrgGeogebraGgbjdkJavaAwtGeomAreaIterator_initWithJavaUtilVector_withOrgGeogebraCommonAwtGAffineTransform_(self, curves, at);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkJavaAwtGeomAreaIterator)
