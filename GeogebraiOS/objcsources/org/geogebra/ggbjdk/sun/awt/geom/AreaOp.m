//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/ggbjdk/sun/awt/geom/AreaOp.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/Enumeration.h"
#include "java/util/Vector.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/AreaOp.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/ChainEnd.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Curve.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/CurveLink.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Edge.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/InternalError.h"

@interface OrgGeogebraGgbjdkSunAwtGeomAreaOp ()

- (instancetype)init;

+ (void)addEdgesWithJavaUtilVector:(JavaUtilVector *)edges
                withJavaUtilVector:(JavaUtilVector *)curves
                           withInt:(jint)curvetag;

- (JavaUtilVector *)pruneEdgesWithJavaUtilVector:(JavaUtilVector *)edges;

@end

static id<JavaUtilComparator> OrgGeogebraGgbjdkSunAwtGeomAreaOp_YXTopComparator_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkSunAwtGeomAreaOp, YXTopComparator_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraGgbjdkSunAwtGeomAreaOp, YXTopComparator_, id<JavaUtilComparator>)

static IOSObjectArray *OrgGeogebraGgbjdkSunAwtGeomAreaOp_EmptyLinkList_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkSunAwtGeomAreaOp, EmptyLinkList_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraGgbjdkSunAwtGeomAreaOp, EmptyLinkList_, IOSObjectArray *)

static IOSObjectArray *OrgGeogebraGgbjdkSunAwtGeomAreaOp_EmptyChainList_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraGgbjdkSunAwtGeomAreaOp, EmptyChainList_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraGgbjdkSunAwtGeomAreaOp, EmptyChainList_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraGgbjdkSunAwtGeomAreaOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp *self);

__attribute__((unused)) static void OrgGeogebraGgbjdkSunAwtGeomAreaOp_addEdgesWithJavaUtilVector_withJavaUtilVector_withInt_(JavaUtilVector *edges, JavaUtilVector *curves, jint curvetag);

__attribute__((unused)) static JavaUtilVector *OrgGeogebraGgbjdkSunAwtGeomAreaOp_pruneEdgesWithJavaUtilVector_(OrgGeogebraGgbjdkSunAwtGeomAreaOp *self, JavaUtilVector *edges);

@interface OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp () {
 @public
  jint count_;
}

@end

@interface OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp () {
 @public
  jboolean inside_;
}

@end

@interface OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)o1
               withId:(id)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1)

__attribute__((unused)) static void OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1 *self);

__attribute__((unused)) static OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1 *new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraGgbjdkSunAwtGeomAreaOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_init(self);
  return self;
}

- (void)newRow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:(OrgGeogebraGgbjdkSunAwtGeomEdge *)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getState {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilVector *)calculateWithJavaUtilVector:(JavaUtilVector *)left
                             withJavaUtilVector:(JavaUtilVector *)right {
  JavaUtilVector *edges = new_JavaUtilVector_init();
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_addEdgesWithJavaUtilVector_withJavaUtilVector_withInt_(edges, left, OrgGeogebraGgbjdkSunAwtGeomAreaOp_CTAG_LEFT);
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_addEdgesWithJavaUtilVector_withJavaUtilVector_withInt_(edges, right, OrgGeogebraGgbjdkSunAwtGeomAreaOp_CTAG_RIGHT);
  edges = OrgGeogebraGgbjdkSunAwtGeomAreaOp_pruneEdgesWithJavaUtilVector_(self, edges);
  return edges;
}

+ (void)addEdgesWithJavaUtilVector:(JavaUtilVector *)edges
                withJavaUtilVector:(JavaUtilVector *)curves
                           withInt:(jint)curvetag {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_addEdgesWithJavaUtilVector_withJavaUtilVector_withInt_(edges, curves, curvetag);
}

- (JavaUtilVector *)pruneEdgesWithJavaUtilVector:(JavaUtilVector *)edges {
  return OrgGeogebraGgbjdkSunAwtGeomAreaOp_pruneEdgesWithJavaUtilVector_(self, edges);
}

+ (void)finalizeSubCurvesWithJavaUtilVector:(JavaUtilVector *)subcurves
                         withJavaUtilVector:(JavaUtilVector *)chains {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_finalizeSubCurvesWithJavaUtilVector_withJavaUtilVector_(subcurves, chains);
}

+ (void)resolveLinksWithJavaUtilVector:(JavaUtilVector *)subcurves
                    withJavaUtilVector:(JavaUtilVector *)chains
                    withJavaUtilVector:(JavaUtilVector *)links {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_resolveLinksWithJavaUtilVector_withJavaUtilVector_withJavaUtilVector_(subcurves, chains, links);
}

+ (jboolean)obstructsWithDouble:(jdouble)v1
                     withDouble:(jdouble)v2
                        withInt:(jint)phase {
  return OrgGeogebraGgbjdkSunAwtGeomAreaOp_obstructsWithDouble_withDouble_withInt_(v1, v2, phase);
}

+ (void)initialize {
  if (self == [OrgGeogebraGgbjdkSunAwtGeomAreaOp class]) {
    OrgGeogebraGgbjdkSunAwtGeomAreaOp_YXTopComparator_ = new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1_init();
    OrgGeogebraGgbjdkSunAwtGeomAreaOp_EmptyLinkList_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraGgbjdkSunAwtGeomCurveLink_class_()];
    OrgGeogebraGgbjdkSunAwtGeomAreaOp_EmptyChainList_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraGgbjdkSunAwtGeomChainEnd_class_()];
    J2OBJC_SET_INITIALIZED(OrgGeogebraGgbjdkSunAwtGeomAreaOp)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AreaOp", NULL, 0x2, NULL, NULL },
    { "newRow", NULL, "V", 0x401, NULL, NULL },
    { "classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:", "classify", "I", 0x401, NULL, NULL },
    { "getState", NULL, "I", 0x401, NULL, NULL },
    { "calculateWithJavaUtilVector:withJavaUtilVector:", "calculate", "Ljava.util.Vector;", 0x1, NULL, NULL },
    { "addEdgesWithJavaUtilVector:withJavaUtilVector:withInt:", "addEdges", "V", 0xa, NULL, NULL },
    { "pruneEdgesWithJavaUtilVector:", "pruneEdges", "Ljava.util.Vector;", 0x2, NULL, NULL },
    { "finalizeSubCurvesWithJavaUtilVector:withJavaUtilVector:", "finalizeSubCurves", "V", 0x9, NULL, NULL },
    { "resolveLinksWithJavaUtilVector:withJavaUtilVector:withJavaUtilVector:", "resolveLinks", "V", 0x9, NULL, NULL },
    { "obstructsWithDouble:withDouble:withInt:", "obstructs", "Z", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CTAG_LEFT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomAreaOp_CTAG_LEFT },
    { "CTAG_RIGHT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomAreaOp_CTAG_RIGHT },
    { "ETAG_IGNORE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_IGNORE },
    { "ETAG_ENTER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_ENTER },
    { "ETAG_EXIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_EXIT },
    { "RSTAG_INSIDE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_INSIDE },
    { "RSTAG_OUTSIDE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_OUTSIDE },
    { "YXTopComparator_", NULL, 0xa, "Ljava.util.Comparator;", &OrgGeogebraGgbjdkSunAwtGeomAreaOp_YXTopComparator_, NULL,  },
    { "EmptyLinkList_", NULL, 0xa, "[Lorg.geogebra.ggbjdk.sun.awt.geom.CurveLink;", &OrgGeogebraGgbjdkSunAwtGeomAreaOp_EmptyLinkList_, NULL,  },
    { "EmptyChainList_", NULL, 0xa, "[Lorg.geogebra.ggbjdk.sun.awt.geom.ChainEnd;", &OrgGeogebraGgbjdkSunAwtGeomAreaOp_EmptyChainList_, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.ggbjdk.sun.awt.geom.AreaOp$CAGOp;", "Lorg.geogebra.ggbjdk.sun.awt.geom.AreaOp$AddOp;", "Lorg.geogebra.ggbjdk.sun.awt.geom.AreaOp$SubOp;", "Lorg.geogebra.ggbjdk.sun.awt.geom.AreaOp$IntOp;", "Lorg.geogebra.ggbjdk.sun.awt.geom.AreaOp$XorOp;", "Lorg.geogebra.ggbjdk.sun.awt.geom.AreaOp$NZWindOp;", "Lorg.geogebra.ggbjdk.sun.awt.geom.AreaOp$EOWindOp;"};
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp = { 2, "AreaOp", "org.geogebra.ggbjdk.sun.awt.geom", NULL, 0x401, 10, methods, 10, fields, 0, NULL, 7, inner_classes, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp *self) {
  (void) NSObject_init(self);
}

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_addEdgesWithJavaUtilVector_withJavaUtilVector_withInt_(JavaUtilVector *edges, JavaUtilVector *curves, jint curvetag) {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_initialize();
  id<JavaUtilEnumeration> enum_ = [((JavaUtilVector *) nil_chk(curves)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(enum_)) hasMoreElements]) {
    OrgGeogebraGgbjdkSunAwtGeomCurve *c = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
    if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c)) getOrder] > 0) {
      [((JavaUtilVector *) nil_chk(edges)) addWithId:new_OrgGeogebraGgbjdkSunAwtGeomEdge_initWithOrgGeogebraGgbjdkSunAwtGeomCurve_withInt_(c, curvetag)];
    }
  }
}

JavaUtilVector *OrgGeogebraGgbjdkSunAwtGeomAreaOp_pruneEdgesWithJavaUtilVector_(OrgGeogebraGgbjdkSunAwtGeomAreaOp *self, JavaUtilVector *edges) {
  jint numedges = [((JavaUtilVector *) nil_chk(edges)) size];
  if (numedges < 2) {
    return edges;
  }
  IOSObjectArray *edgelist = (IOSObjectArray *) check_class_cast([edges toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:numedges type:OrgGeogebraGgbjdkSunAwtGeomEdge_class_()]], [IOSObjectArray class]);
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(edgelist, OrgGeogebraGgbjdkSunAwtGeomAreaOp_YXTopComparator_);
  OrgGeogebraGgbjdkSunAwtGeomEdge *e;
  jint left = 0;
  jint right = 0;
  jint cur = 0;
  jint next = 0;
  IOSDoubleArray *yrange = [IOSDoubleArray newArrayWithLength:2];
  JavaUtilVector *subcurves = new_JavaUtilVector_init();
  JavaUtilVector *chains = new_JavaUtilVector_init();
  JavaUtilVector *links = new_JavaUtilVector_init();
  while (left < numedges) {
    jdouble y = IOSDoubleArray_Get(yrange, 0);
    for (cur = next = right - 1; cur >= left; cur--) {
      e = IOSObjectArray_Get(nil_chk(edgelist), cur);
      if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk([((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(e)) getCurve])) getYBot] > y) {
        if (next > cur) {
          (void) IOSObjectArray_Set(edgelist, next, e);
        }
        next--;
      }
    }
    left = next + 1;
    if (left >= right) {
      if (right >= numedges) {
        break;
      }
      y = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk([((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(IOSObjectArray_Get(nil_chk(edgelist), right))) getCurve])) getYTop];
      if (y > IOSDoubleArray_Get(yrange, 0)) {
        OrgGeogebraGgbjdkSunAwtGeomAreaOp_finalizeSubCurvesWithJavaUtilVector_withJavaUtilVector_(subcurves, chains);
      }
      *IOSDoubleArray_GetRef(yrange, 0) = y;
    }
    while (right < numedges) {
      e = IOSObjectArray_Get(nil_chk(edgelist), right);
      if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk([((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(e)) getCurve])) getYTop] > y) {
        break;
      }
      right++;
    }
    *IOSDoubleArray_GetRef(yrange, 1) = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk([((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(IOSObjectArray_Get(nil_chk(edgelist), left))) getCurve])) getYBot];
    if (right < numedges) {
      y = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk([((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(IOSObjectArray_Get(edgelist, right))) getCurve])) getYTop];
      if (IOSDoubleArray_Get(yrange, 1) > y) {
        *IOSDoubleArray_GetRef(yrange, 1) = y;
      }
    }
    jint nexteq = 1;
    for (cur = left; cur < right; cur++) {
      e = IOSObjectArray_Get(edgelist, cur);
      [((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(e)) setEquivalenceWithInt:0];
      for (next = cur; next > left; next--) {
        OrgGeogebraGgbjdkSunAwtGeomEdge *prevedge = IOSObjectArray_Get(edgelist, next - 1);
        jint ordering = [e compareToWithOrgGeogebraGgbjdkSunAwtGeomEdge:prevedge withDoubleArray:yrange];
        if (IOSDoubleArray_Get(yrange, 1) <= IOSDoubleArray_Get(yrange, 0)) {
          @throw new_OrgGeogebraGgbjdkSunAwtGeomInternalError_initWithNSString_(JreStrcat("$D$D", @"backstepping to ", IOSDoubleArray_Get(yrange, 1), @" from ", IOSDoubleArray_Get(yrange, 0)));
        }
        if (ordering >= 0) {
          if (ordering == 0) {
            jint eq = [((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(prevedge)) getEquivalence];
            if (eq == 0) {
              eq = nexteq++;
              [prevedge setEquivalenceWithInt:eq];
            }
            [e setEquivalenceWithInt:eq];
          }
          break;
        }
        (void) IOSObjectArray_Set(edgelist, next, prevedge);
      }
      (void) IOSObjectArray_Set(edgelist, next, e);
    }
    [self newRow];
    jdouble ystart = IOSDoubleArray_Get(yrange, 0);
    jdouble yend = IOSDoubleArray_Get(yrange, 1);
    for (cur = left; cur < right; cur++) {
      e = IOSObjectArray_Get(edgelist, cur);
      jint etag;
      jint eq = [((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(e)) getEquivalence];
      if (eq != 0) {
        jint origstate = [self getState];
        etag = (origstate == OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_INSIDE ? OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_EXIT : OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_ENTER);
        OrgGeogebraGgbjdkSunAwtGeomEdge *activematch = nil;
        OrgGeogebraGgbjdkSunAwtGeomEdge *longestmatch = e;
        jdouble furthesty = yend;
        do {
          [self classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:e];
          if (activematch == nil && [e isActiveForWithDouble:ystart withInt:etag]) {
            activematch = e;
          }
          y = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk([e getCurve])) getYBot];
          if (y > furthesty) {
            longestmatch = e;
            furthesty = y;
          }
        }
        while (++cur < right && [(e = IOSObjectArray_Get(edgelist, cur)) getEquivalence] == eq);
        --cur;
        if ([self getState] == origstate) {
          etag = OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_IGNORE;
        }
        else {
          e = (activematch != nil ? activematch : longestmatch);
        }
      }
      else {
        etag = [self classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:e];
      }
      if (etag != OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_IGNORE) {
        [((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(e)) recordWithDouble:yend withInt:etag];
        [links addWithId:new_OrgGeogebraGgbjdkSunAwtGeomCurveLink_initWithOrgGeogebraGgbjdkSunAwtGeomCurve_withDouble_withDouble_withInt_([e getCurve], ystart, yend, etag)];
      }
    }
    if ([self getState] != OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_OUTSIDE) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Still inside at end of active edge list!"];
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"num curves = ", (right - left))];
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"num links = ", [links size])];
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$D", @"y top = ", IOSDoubleArray_Get(yrange, 0))];
      if (right < numedges) {
        [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$D", @"y top of next curve = ", [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk([((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(IOSObjectArray_Get(edgelist, right))) getCurve])) getYTop])];
      }
      else {
        [JavaLangSystem_get_out_() printlnWithNSString:@"no more curves"];
      }
      for (cur = left; cur < right; cur++) {
        e = IOSObjectArray_Get(edgelist, cur);
        [JavaLangSystem_get_out_() printlnWithId:e];
        jint eq = [((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(e)) getEquivalence];
        if (eq != 0) {
          [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I$", @"  was equal to ", eq, @"...")];
        }
      }
    }
    OrgGeogebraGgbjdkSunAwtGeomAreaOp_resolveLinksWithJavaUtilVector_withJavaUtilVector_withJavaUtilVector_(subcurves, chains, links);
    [links clear];
    *IOSDoubleArray_GetRef(yrange, 0) = yend;
  }
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_finalizeSubCurvesWithJavaUtilVector_withJavaUtilVector_(subcurves, chains);
  JavaUtilVector *ret = new_JavaUtilVector_init();
  id<JavaUtilEnumeration> enum_ = [subcurves elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(enum_)) hasMoreElements]) {
    OrgGeogebraGgbjdkSunAwtGeomCurveLink *link = (OrgGeogebraGgbjdkSunAwtGeomCurveLink *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurveLink class]);
    [ret addWithId:[((OrgGeogebraGgbjdkSunAwtGeomCurveLink *) nil_chk(link)) getMoveto]];
    OrgGeogebraGgbjdkSunAwtGeomCurveLink *nextlink = link;
    while ((nextlink = [nextlink getNext]) != nil) {
      if (![link absorbWithOrgGeogebraGgbjdkSunAwtGeomCurveLink:nextlink]) {
        [ret addWithId:[link getSubCurve]];
        link = nextlink;
      }
    }
    [ret addWithId:[((OrgGeogebraGgbjdkSunAwtGeomCurveLink *) nil_chk(link)) getSubCurve]];
  }
  return ret;
}

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_finalizeSubCurvesWithJavaUtilVector_withJavaUtilVector_(JavaUtilVector *subcurves, JavaUtilVector *chains) {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_initialize();
  jint numchains = [((JavaUtilVector *) nil_chk(chains)) size];
  if (numchains == 0) {
    return;
  }
  if ((numchains & 1) != 0) {
    @throw new_OrgGeogebraGgbjdkSunAwtGeomInternalError_initWithNSString_(@"Odd number of chains!");
  }
  IOSObjectArray *endlist = [IOSObjectArray newArrayWithLength:numchains type:OrgGeogebraGgbjdkSunAwtGeomChainEnd_class_()];
  (void) [chains toArrayWithNSObjectArray:endlist];
  for (jint i = 1; i < numchains; i += 2) {
    OrgGeogebraGgbjdkSunAwtGeomChainEnd *open = IOSObjectArray_Get(endlist, i - 1);
    OrgGeogebraGgbjdkSunAwtGeomChainEnd *close = IOSObjectArray_Get(endlist, i);
    OrgGeogebraGgbjdkSunAwtGeomCurveLink *subcurve = [((OrgGeogebraGgbjdkSunAwtGeomChainEnd *) nil_chk(open)) linkToWithOrgGeogebraGgbjdkSunAwtGeomChainEnd:close];
    if (subcurve != nil) {
      [((JavaUtilVector *) nil_chk(subcurves)) addWithId:subcurve];
    }
  }
  [chains clear];
}

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_resolveLinksWithJavaUtilVector_withJavaUtilVector_withJavaUtilVector_(JavaUtilVector *subcurves, JavaUtilVector *chains, JavaUtilVector *links) {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_initialize();
  jint numlinks = [((JavaUtilVector *) nil_chk(links)) size];
  IOSObjectArray *linklist;
  if (numlinks == 0) {
    linklist = OrgGeogebraGgbjdkSunAwtGeomAreaOp_EmptyLinkList_;
  }
  else {
    if ((numlinks & 1) != 0) {
      @throw new_OrgGeogebraGgbjdkSunAwtGeomInternalError_initWithNSString_(@"Odd number of new curves!");
    }
    linklist = [IOSObjectArray newArrayWithLength:numlinks + 2 type:OrgGeogebraGgbjdkSunAwtGeomCurveLink_class_()];
    (void) [links toArrayWithNSObjectArray:linklist];
  }
  jint numchains = [((JavaUtilVector *) nil_chk(chains)) size];
  IOSObjectArray *endlist;
  if (numchains == 0) {
    endlist = OrgGeogebraGgbjdkSunAwtGeomAreaOp_EmptyChainList_;
  }
  else {
    if ((numchains & 1) != 0) {
      @throw new_OrgGeogebraGgbjdkSunAwtGeomInternalError_initWithNSString_(@"Odd number of chains!");
    }
    endlist = [IOSObjectArray newArrayWithLength:numchains + 2 type:OrgGeogebraGgbjdkSunAwtGeomChainEnd_class_()];
    (void) [chains toArrayWithNSObjectArray:endlist];
  }
  jint curchain = 0;
  jint curlink = 0;
  [chains clear];
  OrgGeogebraGgbjdkSunAwtGeomChainEnd *chain = IOSObjectArray_Get(nil_chk(endlist), 0);
  OrgGeogebraGgbjdkSunAwtGeomChainEnd *nextchain = IOSObjectArray_Get(endlist, 1);
  OrgGeogebraGgbjdkSunAwtGeomCurveLink *link = IOSObjectArray_Get(nil_chk(linklist), 0);
  OrgGeogebraGgbjdkSunAwtGeomCurveLink *nextlink = IOSObjectArray_Get(linklist, 1);
  while (chain != nil || link != nil) {
    jboolean connectchains = link == nil;
    jboolean connectlinks = chain == nil;
    if (!connectchains && !connectlinks) {
      connectchains = ((curchain & 1) == 0 && [((OrgGeogebraGgbjdkSunAwtGeomChainEnd *) nil_chk(chain)) getX] == [((OrgGeogebraGgbjdkSunAwtGeomChainEnd *) nil_chk(nextchain)) getX]);
      connectlinks = ((curlink & 1) == 0 && [((OrgGeogebraGgbjdkSunAwtGeomCurveLink *) nil_chk(link)) getX] == [((OrgGeogebraGgbjdkSunAwtGeomCurveLink *) nil_chk(nextlink)) getX]);
      if (!connectchains && !connectlinks) {
        jdouble cx = [((OrgGeogebraGgbjdkSunAwtGeomChainEnd *) nil_chk(chain)) getX];
        jdouble lx = [((OrgGeogebraGgbjdkSunAwtGeomCurveLink *) nil_chk(link)) getX];
        connectchains = (nextchain != nil && cx < lx && OrgGeogebraGgbjdkSunAwtGeomAreaOp_obstructsWithDouble_withDouble_withInt_([nextchain getX], lx, curchain));
        connectlinks = (nextlink != nil && lx < cx && OrgGeogebraGgbjdkSunAwtGeomAreaOp_obstructsWithDouble_withDouble_withInt_([nextlink getX], cx, curlink));
      }
    }
    if (connectchains) {
      OrgGeogebraGgbjdkSunAwtGeomCurveLink *subcurve = [((OrgGeogebraGgbjdkSunAwtGeomChainEnd *) nil_chk(chain)) linkToWithOrgGeogebraGgbjdkSunAwtGeomChainEnd:nextchain];
      if (subcurve != nil) {
        [((JavaUtilVector *) nil_chk(subcurves)) addWithId:subcurve];
      }
      curchain += 2;
      chain = IOSObjectArray_Get(endlist, curchain);
      nextchain = IOSObjectArray_Get(endlist, curchain + 1);
    }
    if (connectlinks) {
      OrgGeogebraGgbjdkSunAwtGeomChainEnd *openend = new_OrgGeogebraGgbjdkSunAwtGeomChainEnd_initWithOrgGeogebraGgbjdkSunAwtGeomCurveLink_withOrgGeogebraGgbjdkSunAwtGeomChainEnd_(link, nil);
      OrgGeogebraGgbjdkSunAwtGeomChainEnd *closeend = new_OrgGeogebraGgbjdkSunAwtGeomChainEnd_initWithOrgGeogebraGgbjdkSunAwtGeomCurveLink_withOrgGeogebraGgbjdkSunAwtGeomChainEnd_(nextlink, openend);
      [openend setOtherEndWithOrgGeogebraGgbjdkSunAwtGeomChainEnd:closeend];
      [chains addWithId:openend];
      [chains addWithId:closeend];
      curlink += 2;
      link = IOSObjectArray_Get(linklist, curlink);
      nextlink = IOSObjectArray_Get(linklist, curlink + 1);
    }
    if (!connectchains && !connectlinks) {
      [((OrgGeogebraGgbjdkSunAwtGeomChainEnd *) nil_chk(chain)) addLinkWithOrgGeogebraGgbjdkSunAwtGeomCurveLink:link];
      [chains addWithId:chain];
      curchain++;
      chain = nextchain;
      nextchain = IOSObjectArray_Get(endlist, curchain + 1);
      curlink++;
      link = nextlink;
      nextlink = IOSObjectArray_Get(linklist, curlink + 1);
    }
  }
  if (([chains size] & 1) != 0) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Odd number of chains!"];
  }
}

jboolean OrgGeogebraGgbjdkSunAwtGeomAreaOp_obstructsWithDouble_withDouble_withInt_(jdouble v1, jdouble v2, jint phase) {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_initialize();
  return (((phase & 1) == 0) ? (v1 <= v2) : (v1 < v2));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp

- (void)newRow {
  inLeft_ = NO;
  inRight_ = NO;
  inResult_ = NO;
}

- (jint)classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:(OrgGeogebraGgbjdkSunAwtGeomEdge *)e {
  if ([((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(e)) getCurveTag] == OrgGeogebraGgbjdkSunAwtGeomAreaOp_CTAG_LEFT) {
    inLeft_ = !inLeft_;
  }
  else {
    inRight_ = !inRight_;
  }
  jboolean newClass = [self newClassificationWithBoolean:inLeft_ withBoolean:inRight_];
  if (inResult_ == newClass) {
    return OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_IGNORE;
  }
  inResult_ = newClass;
  return (newClass ? OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_ENTER : OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_EXIT);
}

- (jint)getState {
  return (inResult_ ? OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_INSIDE : OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_OUTSIDE);
}

- (jboolean)newClassificationWithBoolean:(jboolean)inLeft
                             withBoolean:(jboolean)inRight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newRow", NULL, "V", 0x1, NULL, NULL },
    { "classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:", "classify", "I", 0x1, NULL, NULL },
    { "getState", NULL, "I", 0x1, NULL, NULL },
    { "newClassificationWithBoolean:withBoolean:", "newClassification", "Z", 0x401, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inLeft_", NULL, 0x0, "Z", NULL, NULL,  },
    { "inRight_", NULL, 0x0, "Z", NULL, NULL,  },
    { "inResult_", NULL, 0x0, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp = { 2, "CAGOp", "org.geogebra.ggbjdk.sun.awt.geom", "AreaOp", 0x409, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp *self) {
  (void) OrgGeogebraGgbjdkSunAwtGeomAreaOp_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp

- (jboolean)newClassificationWithBoolean:(jboolean)inLeft
                             withBoolean:(jboolean)inRight {
  return (inLeft || inRight);
}

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newClassificationWithBoolean:withBoolean:", "newClassification", "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp = { 2, "AddOp", "org.geogebra.ggbjdk.sun.awt.geom", "AreaOp", 0x9, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp *self) {
  (void) OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp_init(self);
}

OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp *new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp_init() {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp *self = [OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp alloc];
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp_AddOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp

- (jboolean)newClassificationWithBoolean:(jboolean)inLeft
                             withBoolean:(jboolean)inRight {
  return (inLeft && !inRight);
}

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newClassificationWithBoolean:withBoolean:", "newClassification", "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp = { 2, "SubOp", "org.geogebra.ggbjdk.sun.awt.geom", "AreaOp", 0x9, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp *self) {
  (void) OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp_init(self);
}

OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp *new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp_init() {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp *self = [OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp alloc];
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp_SubOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp

- (jboolean)newClassificationWithBoolean:(jboolean)inLeft
                             withBoolean:(jboolean)inRight {
  return (inLeft && inRight);
}

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newClassificationWithBoolean:withBoolean:", "newClassification", "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp = { 2, "IntOp", "org.geogebra.ggbjdk.sun.awt.geom", "AreaOp", 0x9, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp *self) {
  (void) OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp_init(self);
}

OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp *new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp_init() {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp *self = [OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp alloc];
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp_IntOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp

- (jboolean)newClassificationWithBoolean:(jboolean)inLeft
                             withBoolean:(jboolean)inRight {
  return (inLeft != inRight);
}

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newClassificationWithBoolean:withBoolean:", "newClassification", "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp = { 2, "XorOp", "org.geogebra.ggbjdk.sun.awt.geom", "AreaOp", 0x9, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp *self) {
  (void) OrgGeogebraGgbjdkSunAwtGeomAreaOp_CAGOp_init(self);
}

OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp *new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp_init() {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp *self = [OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp alloc];
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp_XorOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp

- (void)newRow {
  count_ = 0;
}

- (jint)classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:(OrgGeogebraGgbjdkSunAwtGeomEdge *)e {
  jint newCount = count_;
  jint type = (newCount == 0 ? OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_ENTER : OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_IGNORE);
  newCount += [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk([((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(e)) getCurve])) getDirection];
  count_ = newCount;
  return (newCount == 0 ? OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_EXIT : type);
}

- (jint)getState {
  return ((count_ == 0) ? OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_OUTSIDE : OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_INSIDE);
}

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newRow", NULL, "V", 0x1, NULL, NULL },
    { "classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:", "classify", "I", 0x1, NULL, NULL },
    { "getState", NULL, "I", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "count_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp = { 2, "NZWindOp", "org.geogebra.ggbjdk.sun.awt.geom", "AreaOp", 0x9, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp *self) {
  (void) OrgGeogebraGgbjdkSunAwtGeomAreaOp_init(self);
}

OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp *new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp_init() {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp *self = [OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp alloc];
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp_NZWindOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp

- (void)newRow {
  inside_ = NO;
}

- (jint)classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:(OrgGeogebraGgbjdkSunAwtGeomEdge *)e {
  jboolean newInside = !inside_;
  inside_ = newInside;
  return (newInside ? OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_ENTER : OrgGeogebraGgbjdkSunAwtGeomAreaOp_ETAG_EXIT);
}

- (jint)getState {
  return (inside_ ? OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_INSIDE : OrgGeogebraGgbjdkSunAwtGeomAreaOp_RSTAG_OUTSIDE);
}

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newRow", NULL, "V", 0x1, NULL, NULL },
    { "classifyWithOrgGeogebraGgbjdkSunAwtGeomEdge:", "classify", "I", 0x1, NULL, NULL },
    { "getState", NULL, "I", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inside_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp = { 2, "EOWindOp", "org.geogebra.ggbjdk.sun.awt.geom", "AreaOp", 0x9, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp *self) {
  (void) OrgGeogebraGgbjdkSunAwtGeomAreaOp_init(self);
}

OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp *new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp_init() {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp *self = [OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp alloc];
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp_EOWindOp)

@implementation OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  OrgGeogebraGgbjdkSunAwtGeomCurve *c1 = [((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(((OrgGeogebraGgbjdkSunAwtGeomEdge *) check_class_cast(o1, [OrgGeogebraGgbjdkSunAwtGeomEdge class])))) getCurve];
  OrgGeogebraGgbjdkSunAwtGeomCurve *c2 = [((OrgGeogebraGgbjdkSunAwtGeomEdge *) nil_chk(((OrgGeogebraGgbjdkSunAwtGeomEdge *) check_class_cast(o2, [OrgGeogebraGgbjdkSunAwtGeomEdge class])))) getCurve];
  jdouble v1, v2;
  if ((v1 = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c1)) getYTop]) == (v2 = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c2)) getYTop])) {
    if ((v1 = [c1 getXTop]) == (v2 = [c2 getXTop])) {
      return 0;
    }
  }
  if (v1 < v2) {
    return -1;
  }
  return 1;
}

- (instancetype)init {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1 = { 2, "", "org.geogebra.ggbjdk.sun.awt.geom", "AreaOp", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1_init(OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1 *new_OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1_init() {
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1 *self = [OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1 alloc];
  OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomAreaOp_$1)
