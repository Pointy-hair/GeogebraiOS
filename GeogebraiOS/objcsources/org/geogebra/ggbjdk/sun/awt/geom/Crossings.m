//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/sun/awt/geom/Crossings.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Enumeration.h"
#include "java/util/Vector.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Crossings.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Curve.h"

@interface OrgGeogebraGgbjdkSunAwtGeomCrossings () {
 @public
  JavaUtilVector *tmp_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraGgbjdkSunAwtGeomCrossings, tmp_, JavaUtilVector *)

@interface OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero () {
 @public
  IOSIntArray *crosscounts_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero, crosscounts_, IOSIntArray *)

@implementation OrgGeogebraGgbjdkSunAwtGeomCrossings

- (instancetype)initWithDouble:(jdouble)xlo
                    withDouble:(jdouble)ylo
                    withDouble:(jdouble)xhi
                    withDouble:(jdouble)yhi {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_initWithDouble_withDouble_withDouble_withDouble_(self, xlo, ylo, xhi, yhi);
  return self;
}

- (jdouble)getXLo {
  return xlo_;
}

- (jdouble)getYLo {
  return ylo_;
}

- (jdouble)getXHi {
  return xhi_;
}

- (jdouble)getYHi {
  return yhi_;
}

- (void)recordWithDouble:(jdouble)ystart
              withDouble:(jdouble)yend
                 withInt:(jint)direction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)print {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Crossings ["];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$D$DC", @"  bounds = [", ylo_, @", ", yhi_, ']')];
  for (jint i = 0; i < limit_; i += 2) {
    [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$D$DC", @"  [", IOSDoubleArray_Get(nil_chk(yranges_), i), @", ", IOSDoubleArray_Get(yranges_, i + 1), ']')];
  }
  [JavaLangSystem_get_out_() printlnWithNSString:@"]"];
}

- (jboolean)isEmpty {
  return limit_ == 0;
}

- (jboolean)coversWithDouble:(jdouble)ystart
                  withDouble:(jdouble)yend {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (OrgGeogebraGgbjdkSunAwtGeomCrossings *)findCrossingsWithJavaUtilVector:(JavaUtilVector *)curves
                                                               withDouble:(jdouble)xlo
                                                               withDouble:(jdouble)ylo
                                                               withDouble:(jdouble)xhi
                                                               withDouble:(jdouble)yhi {
  return OrgGeogebraGgbjdkSunAwtGeomCrossings_findCrossingsWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(curves, xlo, ylo, xhi, yhi);
}

+ (OrgGeogebraGgbjdkSunAwtGeomCrossings *)findCrossingsWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)pi
                                                                                         withDouble:(jdouble)xlo
                                                                                         withDouble:(jdouble)ylo
                                                                                         withDouble:(jdouble)xhi
                                                                                         withDouble:(jdouble)yhi {
  return OrgGeogebraGgbjdkSunAwtGeomCrossings_findCrossingsWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_withDouble_withDouble_withDouble_withDouble_(pi, xlo, ylo, xhi, yhi);
}

- (jboolean)accumulateLineWithDouble:(jdouble)x0
                          withDouble:(jdouble)y0
                          withDouble:(jdouble)x1
                          withDouble:(jdouble)y1 {
  if (y0 <= y1) {
    return [self accumulateLineWithDouble:x0 withDouble:y0 withDouble:x1 withDouble:y1 withInt:1];
  }
  else {
    return [self accumulateLineWithDouble:x1 withDouble:y1 withDouble:x0 withDouble:y0 withInt:-1];
  }
}

- (jboolean)accumulateLineWithDouble:(jdouble)x0
                          withDouble:(jdouble)y0
                          withDouble:(jdouble)x1
                          withDouble:(jdouble)y1
                             withInt:(jint)direction {
  if (yhi_ <= y0 || ylo_ >= y1) {
    return NO;
  }
  if (x0 >= xhi_ && x1 >= xhi_) {
    return NO;
  }
  if (y0 == y1) {
    return (x0 >= xlo_ || x1 >= xlo_);
  }
  jdouble xstart, ystart, xend, yend;
  jdouble dx = (x1 - x0);
  jdouble dy = (y1 - y0);
  if (y0 < ylo_) {
    xstart = x0 + (ylo_ - y0) * dx / dy;
    ystart = ylo_;
  }
  else {
    xstart = x0;
    ystart = y0;
  }
  if (yhi_ < y1) {
    xend = x0 + (yhi_ - y0) * dx / dy;
    yend = yhi_;
  }
  else {
    xend = x1;
    yend = y1;
  }
  if (xstart >= xhi_ && xend >= xhi_) {
    return NO;
  }
  if (xstart > xlo_ || xend > xlo_) {
    return YES;
  }
  [self recordWithDouble:ystart withDouble:yend withInt:direction];
  return NO;
}

- (jboolean)accumulateQuadWithDouble:(jdouble)x0
                          withDouble:(jdouble)y0
                     withDoubleArray:(IOSDoubleArray *)coords {
  if (y0 < ylo_ && IOSDoubleArray_Get(nil_chk(coords), 1) < ylo_ && IOSDoubleArray_Get(coords, 3) < ylo_) {
    return NO;
  }
  if (y0 > yhi_ && IOSDoubleArray_Get(nil_chk(coords), 1) > yhi_ && IOSDoubleArray_Get(coords, 3) > yhi_) {
    return NO;
  }
  if (x0 > xhi_ && IOSDoubleArray_Get(nil_chk(coords), 0) > xhi_ && IOSDoubleArray_Get(coords, 2) > xhi_) {
    return NO;
  }
  if (x0 < xlo_ && IOSDoubleArray_Get(nil_chk(coords), 0) < xlo_ && IOSDoubleArray_Get(coords, 2) < xlo_) {
    if (y0 < IOSDoubleArray_Get(coords, 3)) {
      [self recordWithDouble:JavaLangMath_maxWithDouble_withDouble_(y0, ylo_) withDouble:JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(coords, 3), yhi_) withInt:1];
    }
    else if (y0 > IOSDoubleArray_Get(coords, 3)) {
      [self recordWithDouble:JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(coords, 3), ylo_) withDouble:JavaLangMath_minWithDouble_withDouble_(y0, yhi_) withInt:-1];
    }
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCurve_insertQuadWithJavaUtilVector_withDouble_withDouble_withDoubleArray_(tmp_, x0, y0, coords);
  id<JavaUtilEnumeration> enum_ = [((JavaUtilVector *) nil_chk(tmp_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(enum_)) hasMoreElements]) {
    OrgGeogebraGgbjdkSunAwtGeomCurve *c = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
    if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c)) accumulateCrossingsWithOrgGeogebraGgbjdkSunAwtGeomCrossings:self]) {
      return YES;
    }
  }
  [tmp_ clear];
  return NO;
}

- (jboolean)accumulateCubicWithDouble:(jdouble)x0
                           withDouble:(jdouble)y0
                      withDoubleArray:(IOSDoubleArray *)coords {
  if (y0 < ylo_ && IOSDoubleArray_Get(nil_chk(coords), 1) < ylo_ && IOSDoubleArray_Get(coords, 3) < ylo_ && IOSDoubleArray_Get(coords, 5) < ylo_) {
    return NO;
  }
  if (y0 > yhi_ && IOSDoubleArray_Get(nil_chk(coords), 1) > yhi_ && IOSDoubleArray_Get(coords, 3) > yhi_ && IOSDoubleArray_Get(coords, 5) > yhi_) {
    return NO;
  }
  if (x0 > xhi_ && IOSDoubleArray_Get(nil_chk(coords), 0) > xhi_ && IOSDoubleArray_Get(coords, 2) > xhi_ && IOSDoubleArray_Get(coords, 4) > xhi_) {
    return NO;
  }
  if (x0 < xlo_ && IOSDoubleArray_Get(nil_chk(coords), 0) < xlo_ && IOSDoubleArray_Get(coords, 2) < xlo_ && IOSDoubleArray_Get(coords, 4) < xlo_) {
    if (y0 <= IOSDoubleArray_Get(coords, 5)) {
      [self recordWithDouble:JavaLangMath_maxWithDouble_withDouble_(y0, ylo_) withDouble:JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(coords, 5), yhi_) withInt:1];
    }
    else {
      [self recordWithDouble:JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(coords, 5), ylo_) withDouble:JavaLangMath_minWithDouble_withDouble_(y0, yhi_) withInt:-1];
    }
    return NO;
  }
  OrgGeogebraGgbjdkSunAwtGeomCurve_insertCubicWithJavaUtilVector_withDouble_withDouble_withDoubleArray_(tmp_, x0, y0, coords);
  id<JavaUtilEnumeration> enum_ = [((JavaUtilVector *) nil_chk(tmp_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(enum_)) hasMoreElements]) {
    OrgGeogebraGgbjdkSunAwtGeomCurve *c = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
    if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c)) accumulateCrossingsWithOrgGeogebraGgbjdkSunAwtGeomCrossings:self]) {
      return YES;
    }
  }
  [tmp_ clear];
  return NO;
}

- (void)dealloc {
  RELEASE_(yranges_);
  RELEASE_(tmp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withDouble:", "Crossings", NULL, 0x1, NULL, NULL },
    { "getXLo", NULL, "D", 0x11, NULL, NULL },
    { "getYLo", NULL, "D", 0x11, NULL, NULL },
    { "getXHi", NULL, "D", 0x11, NULL, NULL },
    { "getYHi", NULL, "D", 0x11, NULL, NULL },
    { "recordWithDouble:withDouble:withInt:", "record", "V", 0x401, NULL, NULL },
    { "print", NULL, "V", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x11, NULL, NULL },
    { "coversWithDouble:withDouble:", "covers", "Z", 0x401, NULL, NULL },
    { "findCrossingsWithJavaUtilVector:withDouble:withDouble:withDouble:withDouble:", "findCrossings", "Lorg.geogebra.ggbjdk.sun.awt.geom.Crossings;", 0x9, NULL, NULL },
    { "findCrossingsWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:withDouble:withDouble:withDouble:withDouble:", "findCrossings", "Lorg.geogebra.ggbjdk.sun.awt.geom.Crossings;", 0x9, NULL, NULL },
    { "accumulateLineWithDouble:withDouble:withDouble:withDouble:", "accumulateLine", "Z", 0x1, NULL, NULL },
    { "accumulateLineWithDouble:withDouble:withDouble:withDouble:withInt:", "accumulateLine", "Z", 0x1, NULL, NULL },
    { "accumulateQuadWithDouble:withDouble:withDoubleArray:", "accumulateQuad", "Z", 0x1, NULL, NULL },
    { "accumulateCubicWithDouble:withDouble:withDoubleArray:", "accumulateCubic", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "debug_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = OrgGeogebraGgbjdkSunAwtGeomCrossings_debug },
    { "limit_", NULL, 0x0, "I", NULL, NULL,  },
    { "yranges_", NULL, 0x0, "[D", NULL, NULL,  },
    { "xlo_", NULL, 0x0, "D", NULL, NULL,  },
    { "ylo_", NULL, 0x0, "D", NULL, NULL,  },
    { "xhi_", NULL, 0x0, "D", NULL, NULL,  },
    { "yhi_", NULL, 0x0, "D", NULL, NULL,  },
    { "tmp_", NULL, 0x2, "Ljava.util.Vector;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.ggbjdk.sun.awt.geom.Crossings$EvenOdd;", "Lorg.geogebra.ggbjdk.sun.awt.geom.Crossings$NonZero;"};
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomCrossings = { 2, "Crossings", "org.geogebra.ggbjdk.sun.awt.geom", NULL, 0x401, 15, methods, 8, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomCrossings;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomCrossings_initWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraGgbjdkSunAwtGeomCrossings *self, jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi) {
  NSObject_init(self);
  self->limit_ = 0;
  OrgGeogebraGgbjdkSunAwtGeomCrossings_setAndConsume_yranges_(self, [IOSDoubleArray newArrayWithLength:10]);
  OrgGeogebraGgbjdkSunAwtGeomCrossings_setAndConsume_tmp_(self, new_JavaUtilVector_init());
  self->xlo_ = xlo;
  self->ylo_ = ylo;
  self->xhi_ = xhi;
  self->yhi_ = yhi;
}

OrgGeogebraGgbjdkSunAwtGeomCrossings *OrgGeogebraGgbjdkSunAwtGeomCrossings_findCrossingsWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(JavaUtilVector *curves, jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi) {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_initialize();
  OrgGeogebraGgbjdkSunAwtGeomCrossings *cross = [new_OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd_initWithDouble_withDouble_withDouble_withDouble_(xlo, ylo, xhi, yhi) autorelease];
  id<JavaUtilEnumeration> enum_ = [((JavaUtilVector *) nil_chk(curves)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(enum_)) hasMoreElements]) {
    OrgGeogebraGgbjdkSunAwtGeomCurve *c = (OrgGeogebraGgbjdkSunAwtGeomCurve *) check_class_cast([enum_ nextElement], [OrgGeogebraGgbjdkSunAwtGeomCurve class]);
    if ([((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(c)) accumulateCrossingsWithOrgGeogebraGgbjdkSunAwtGeomCrossings:cross]) {
      return nil;
    }
  }
  return cross;
}

OrgGeogebraGgbjdkSunAwtGeomCrossings *OrgGeogebraGgbjdkSunAwtGeomCrossings_findCrossingsWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_withDouble_withDouble_withDouble_withDouble_(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator> pi, jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi) {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_initialize();
  OrgGeogebraGgbjdkSunAwtGeomCrossings *cross;
  if ([((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(pi)) getWindingRule] == OrgGeogebraGgbjdkJavaAwtGeomPathIterator_WIND_EVEN_ODD) {
    cross = [new_OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd_initWithDouble_withDouble_withDouble_withDouble_(xlo, ylo, xhi, yhi) autorelease];
  }
  else {
    cross = [new_OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero_initWithDouble_withDouble_withDouble_withDouble_(xlo, ylo, xhi, yhi) autorelease];
  }
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:23];
  jdouble movx = 0;
  jdouble movy = 0;
  jdouble curx = 0;
  jdouble cury = 0;
  jdouble newx, newy;
  while (![pi isDone]) {
    jint type = [pi currentSegmentWithDoubleArray:coords];
    switch (type) {
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO:
      if (movy != cury && [((OrgGeogebraGgbjdkSunAwtGeomCrossings *) nil_chk(cross)) accumulateLineWithDouble:curx withDouble:cury withDouble:movx withDouble:movy]) {
        return nil;
      }
      movx = curx = IOSDoubleArray_Get(coords, 0);
      movy = cury = IOSDoubleArray_Get(coords, 1);
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO:
      newx = IOSDoubleArray_Get(coords, 0);
      newy = IOSDoubleArray_Get(coords, 1);
      if ([((OrgGeogebraGgbjdkSunAwtGeomCrossings *) nil_chk(cross)) accumulateLineWithDouble:curx withDouble:cury withDouble:newx withDouble:newy]) {
        return nil;
      }
      curx = newx;
      cury = newy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_QUADTO:
      newx = IOSDoubleArray_Get(coords, 2);
      newy = IOSDoubleArray_Get(coords, 3);
      if ([((OrgGeogebraGgbjdkSunAwtGeomCrossings *) nil_chk(cross)) accumulateQuadWithDouble:curx withDouble:cury withDoubleArray:coords]) {
        return nil;
      }
      curx = newx;
      cury = newy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CUBICTO:
      newx = IOSDoubleArray_Get(coords, 4);
      newy = IOSDoubleArray_Get(coords, 5);
      if ([((OrgGeogebraGgbjdkSunAwtGeomCrossings *) nil_chk(cross)) accumulateCubicWithDouble:curx withDouble:cury withDoubleArray:coords]) {
        return nil;
      }
      curx = newx;
      cury = newy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE:
      if (movy != cury && [((OrgGeogebraGgbjdkSunAwtGeomCrossings *) nil_chk(cross)) accumulateLineWithDouble:curx withDouble:cury withDouble:movx withDouble:movy]) {
        return nil;
      }
      curx = movx;
      cury = movy;
      break;
    }
    [pi next];
  }
  if (movy != cury) {
    if ([((OrgGeogebraGgbjdkSunAwtGeomCrossings *) nil_chk(cross)) accumulateLineWithDouble:curx withDouble:cury withDouble:movx withDouble:movy]) {
      return nil;
    }
  }
  return cross;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomCrossings)

@implementation OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd

- (instancetype)initWithDouble:(jdouble)xlo
                    withDouble:(jdouble)ylo
                    withDouble:(jdouble)xhi
                    withDouble:(jdouble)yhi {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd_initWithDouble_withDouble_withDouble_withDouble_(self, xlo, ylo, xhi, yhi);
  return self;
}

- (jboolean)coversWithDouble:(jdouble)ystart
                  withDouble:(jdouble)yend {
  return (limit_ == 2 && IOSDoubleArray_Get(nil_chk(yranges_), 0) <= ystart && IOSDoubleArray_Get(yranges_, 1) >= yend);
}

- (void)recordWithDouble:(jdouble)ystart
              withDouble:(jdouble)yend
                 withInt:(jint)direction {
  if (ystart >= yend) {
    return;
  }
  jint from = 0;
  while (from < limit_ && ystart > IOSDoubleArray_Get(nil_chk(yranges_), from + 1)) {
    from += 2;
  }
  jint to = from;
  while (from < limit_) {
    jdouble yrlo = IOSDoubleArray_Get(nil_chk(yranges_), from++);
    jdouble yrhi = IOSDoubleArray_Get(yranges_, from++);
    if (yend < yrlo) {
      *IOSDoubleArray_GetRef(yranges_, to++) = ystart;
      *IOSDoubleArray_GetRef(yranges_, to++) = yend;
      ystart = yrlo;
      yend = yrhi;
      continue;
    }
    jdouble yll, ylh, yhl, yhh;
    if (ystart < yrlo) {
      yll = ystart;
      ylh = yrlo;
    }
    else {
      yll = yrlo;
      ylh = ystart;
    }
    if (yend < yrhi) {
      yhl = yend;
      yhh = yrhi;
    }
    else {
      yhl = yrhi;
      yhh = yend;
    }
    if (ylh == yhl) {
      ystart = yll;
      yend = yhh;
    }
    else {
      if (ylh > yhl) {
        ystart = yhl;
        yhl = ylh;
        ylh = ystart;
      }
      if (yll != ylh) {
        *IOSDoubleArray_GetRef(yranges_, to++) = yll;
        *IOSDoubleArray_GetRef(yranges_, to++) = ylh;
      }
      ystart = yhl;
      yend = yhh;
    }
    if (ystart >= yend) {
      break;
    }
  }
  if (to < from && from < limit_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yranges_, from, yranges_, to, limit_ - from);
  }
  to += (limit_ - from);
  if (ystart < yend) {
    if (to >= ((IOSDoubleArray *) nil_chk(yranges_))->size_) {
      IOSDoubleArray *newranges = [IOSDoubleArray arrayWithLength:to + 10];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yranges_, 0, newranges, 0, to);
      OrgGeogebraGgbjdkSunAwtGeomCrossings_set_yranges_(self, newranges);
    }
    *IOSDoubleArray_GetRef(yranges_, to++) = ystart;
    *IOSDoubleArray_GetRef(yranges_, to++) = yend;
  }
  limit_ = to;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withDouble:", "EvenOdd", NULL, 0x1, NULL, NULL },
    { "coversWithDouble:withDouble:", "covers", "Z", 0x11, NULL, NULL },
    { "recordWithDouble:withDouble:withInt:", "record", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd = { 2, "EvenOdd", "org.geogebra.ggbjdk.sun.awt.geom", "Crossings", 0x19, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd_initWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd *self, jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi) {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_initWithDouble_withDouble_withDouble_withDouble_(self, xlo, ylo, xhi, yhi);
}

OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd *new_OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd_initWithDouble_withDouble_withDouble_withDouble_(jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi) {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd *self = [OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd alloc];
  OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd_initWithDouble_withDouble_withDouble_withDouble_(self, xlo, ylo, xhi, yhi);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomCrossings_EvenOdd)

@implementation OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero

- (instancetype)initWithDouble:(jdouble)xlo
                    withDouble:(jdouble)ylo
                    withDouble:(jdouble)xhi
                    withDouble:(jdouble)yhi {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero_initWithDouble_withDouble_withDouble_withDouble_(self, xlo, ylo, xhi, yhi);
  return self;
}

- (jboolean)coversWithDouble:(jdouble)ystart
                  withDouble:(jdouble)yend {
  jint i = 0;
  while (i < limit_) {
    jdouble ylo = IOSDoubleArray_Get(nil_chk(yranges_), i++);
    jdouble yhi = IOSDoubleArray_Get(yranges_, i++);
    if (ystart >= yhi) {
      continue;
    }
    if (ystart < ylo) {
      return NO;
    }
    if (yend <= yhi) {
      return YES;
    }
    ystart = yhi;
  }
  return (ystart >= yend);
}

- (void)removeWithInt:(jint)cur {
  limit_ -= 2;
  jint rem = limit_ - cur;
  if (rem > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yranges_, cur + 2, yranges_, cur, rem);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(crosscounts_, cur / 2 + 1, crosscounts_, cur / 2, rem / 2);
  }
}

- (void)insertWithInt:(jint)cur
           withDouble:(jdouble)lo
           withDouble:(jdouble)hi
              withInt:(jint)dir {
  jint rem = limit_ - cur;
  IOSDoubleArray *oldranges = yranges_;
  IOSIntArray *oldcounts = crosscounts_;
  if (limit_ >= ((IOSDoubleArray *) nil_chk(yranges_))->size_) {
    OrgGeogebraGgbjdkSunAwtGeomCrossings_setAndConsume_yranges_(self, [IOSDoubleArray newArrayWithLength:limit_ + 10]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldranges, 0, yranges_, 0, cur);
    OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero_setAndConsume_crosscounts_(self, [IOSIntArray newArrayWithLength:(limit_ + 10) / 2]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldcounts, 0, crosscounts_, 0, cur / 2);
  }
  if (rem > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldranges, cur, yranges_, cur + 2, rem);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldcounts, cur / 2, crosscounts_, cur / 2 + 1, rem / 2);
  }
  *IOSDoubleArray_GetRef(yranges_, cur + 0) = lo;
  *IOSDoubleArray_GetRef(yranges_, cur + 1) = hi;
  *IOSIntArray_GetRef(nil_chk(crosscounts_), cur / 2) = dir;
  limit_ += 2;
}

- (void)recordWithDouble:(jdouble)ystart
              withDouble:(jdouble)yend
                 withInt:(jint)direction {
  if (ystart >= yend) {
    return;
  }
  jint cur = 0;
  while (cur < limit_ && ystart > IOSDoubleArray_Get(nil_chk(yranges_), cur + 1)) {
    cur += 2;
  }
  if (cur < limit_) {
    jint rdir = IOSIntArray_Get(nil_chk(crosscounts_), cur / 2);
    jdouble yrlo = IOSDoubleArray_Get(nil_chk(yranges_), cur + 0);
    jdouble yrhi = IOSDoubleArray_Get(yranges_, cur + 1);
    if (yrhi == ystart && rdir == direction) {
      if (cur + 2 == limit_) {
        *IOSDoubleArray_GetRef(yranges_, cur + 1) = yend;
        return;
      }
      [self removeWithInt:cur];
      ystart = yrlo;
      rdir = IOSIntArray_Get(crosscounts_, cur / 2);
      yrlo = IOSDoubleArray_Get(yranges_, cur + 0);
      yrhi = IOSDoubleArray_Get(yranges_, cur + 1);
    }
    if (yend < yrlo) {
      [self insertWithInt:cur withDouble:ystart withDouble:yend withInt:direction];
      return;
    }
    if (yend == yrlo && rdir == direction) {
      *IOSDoubleArray_GetRef(yranges_, cur) = ystart;
      return;
    }
    if (ystart < yrlo) {
      [self insertWithInt:cur withDouble:ystart withDouble:yrlo withInt:direction];
      cur += 2;
      ystart = yrlo;
    }
    else if (yrlo < ystart) {
      [self insertWithInt:cur withDouble:yrlo withDouble:ystart withInt:rdir];
      cur += 2;
      yrlo = ystart;
    }
    jint newdir = rdir + direction;
    jdouble newend = JavaLangMath_minWithDouble_withDouble_(yend, yrhi);
    if (newdir == 0) {
      [self removeWithInt:cur];
    }
    else {
      *IOSIntArray_GetRef(crosscounts_, cur / 2) = newdir;
      *IOSDoubleArray_GetRef(yranges_, cur++) = ystart;
      *IOSDoubleArray_GetRef(yranges_, cur++) = newend;
    }
    ystart = yrlo = newend;
    if (yrlo < yrhi) {
      [self insertWithInt:cur withDouble:yrlo withDouble:yrhi withInt:rdir];
    }
  }
  if (ystart < yend) {
    [self insertWithInt:cur withDouble:ystart withDouble:yend withInt:direction];
  }
}

- (void)dealloc {
  RELEASE_(crosscounts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withDouble:", "NonZero", NULL, 0x1, NULL, NULL },
    { "coversWithDouble:withDouble:", "covers", "Z", 0x11, NULL, NULL },
    { "removeWithInt:", "remove", "V", 0x1, NULL, NULL },
    { "insertWithInt:withDouble:withDouble:withInt:", "insert", "V", 0x1, NULL, NULL },
    { "recordWithDouble:withDouble:withInt:", "record", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "crosscounts_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero = { 2, "NonZero", "org.geogebra.ggbjdk.sun.awt.geom", "Crossings", 0x19, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero_initWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero *self, jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi) {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_initWithDouble_withDouble_withDouble_withDouble_(self, xlo, ylo, xhi, yhi);
  OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero_setAndConsume_crosscounts_(self, [IOSIntArray newArrayWithLength:((IOSDoubleArray *) nil_chk(self->yranges_))->size_ / 2]);
}

OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero *new_OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero_initWithDouble_withDouble_withDouble_withDouble_(jdouble xlo, jdouble ylo, jdouble xhi, jdouble yhi) {
  OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero *self = [OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero alloc];
  OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero_initWithDouble_withDouble_withDouble_withDouble_(self, xlo, ylo, xhi, yhi);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomCrossings_NonZero)
