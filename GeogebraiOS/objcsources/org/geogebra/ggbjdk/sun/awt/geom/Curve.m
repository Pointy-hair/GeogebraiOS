//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/sun/awt/geom/Curve.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/Vector.h"
#include "org/geogebra/ggbjdk/java/awt/geom/IllegalPathStateException.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Crossings.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Curve.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/InternalError.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/NotImplementedException.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Order0.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Order1.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Order2.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Order3.h"

@implementation OrgGeogebraGgbjdkSunAwtGeomCurve

+ (void)insertMoveWithJavaUtilVector:(JavaUtilVector *)curves
                          withDouble:(jdouble)x
                          withDouble:(jdouble)y {
  OrgGeogebraGgbjdkSunAwtGeomCurve_insertMoveWithJavaUtilVector_withDouble_withDouble_(curves, x, y);
}

+ (void)insertLineWithJavaUtilVector:(JavaUtilVector *)curves
                          withDouble:(jdouble)x0
                          withDouble:(jdouble)y0
                          withDouble:(jdouble)x1
                          withDouble:(jdouble)y1 {
  OrgGeogebraGgbjdkSunAwtGeomCurve_insertLineWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(curves, x0, y0, x1, y1);
}

+ (void)insertQuadWithJavaUtilVector:(JavaUtilVector *)curves
                          withDouble:(jdouble)x0
                          withDouble:(jdouble)y0
                     withDoubleArray:(IOSDoubleArray *)coords {
  OrgGeogebraGgbjdkSunAwtGeomCurve_insertQuadWithJavaUtilVector_withDouble_withDouble_withDoubleArray_(curves, x0, y0, coords);
}

+ (void)insertCubicWithJavaUtilVector:(JavaUtilVector *)curves
                           withDouble:(jdouble)x0
                           withDouble:(jdouble)y0
                      withDoubleArray:(IOSDoubleArray *)coords {
  OrgGeogebraGgbjdkSunAwtGeomCurve_insertCubicWithJavaUtilVector_withDouble_withDouble_withDoubleArray_(curves, x0, y0, coords);
}

+ (jint)pointCrossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)pi
                                                               withDouble:(jdouble)px
                                                               withDouble:(jdouble)py {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_withDouble_withDouble_(pi, px, py);
}

+ (jint)pointCrossingsForLineWithDouble:(jdouble)px
                             withDouble:(jdouble)py
                             withDouble:(jdouble)x0
                             withDouble:(jdouble)y0
                             withDouble:(jdouble)x1
                             withDouble:(jdouble)y1 {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, x0, y0, x1, y1);
}

+ (jint)pointCrossingsForQuadWithDouble:(jdouble)px
                             withDouble:(jdouble)py
                             withDouble:(jdouble)x0
                             withDouble:(jdouble)y0
                             withDouble:(jdouble)xc
                             withDouble:(jdouble)yc
                             withDouble:(jdouble)x1
                             withDouble:(jdouble)y1
                                withInt:(jint)level {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, x0, y0, xc, yc, x1, y1, level);
}

+ (jint)pointCrossingsForCubicWithDouble:(jdouble)px
                              withDouble:(jdouble)py
                              withDouble:(jdouble)x0
                              withDouble:(jdouble)y0
                              withDouble:(jdouble)xc0
                              withDouble:(jdouble)yc0
                              withDouble:(jdouble)xc1
                              withDouble:(jdouble)yc1
                              withDouble:(jdouble)x1
                              withDouble:(jdouble)y1
                                 withInt:(jint)level {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, x0, y0, xc0, yc0, xc1, yc1, x1, y1, level);
}

+ (jint)rectCrossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)pi
                                                              withDouble:(jdouble)rxmin
                                                              withDouble:(jdouble)rymin
                                                              withDouble:(jdouble)rxmax
                                                              withDouble:(jdouble)rymax {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_withDouble_withDouble_withDouble_withDouble_(pi, rxmin, rymin, rxmax, rymax);
}

+ (jint)rectCrossingsForLineWithInt:(jint)crossings
                         withDouble:(jdouble)rxmin
                         withDouble:(jdouble)rymin
                         withDouble:(jdouble)rxmax
                         withDouble:(jdouble)rymax
                         withDouble:(jdouble)x0
                         withDouble:(jdouble)y0
                         withDouble:(jdouble)x1
                         withDouble:(jdouble)y1 {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForLineWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(crossings, rxmin, rymin, rxmax, rymax, x0, y0, x1, y1);
}

+ (jint)rectCrossingsForQuadWithInt:(jint)crossings
                         withDouble:(jdouble)rxmin
                         withDouble:(jdouble)rymin
                         withDouble:(jdouble)rxmax
                         withDouble:(jdouble)rymax
                         withDouble:(jdouble)x0
                         withDouble:(jdouble)y0
                         withDouble:(jdouble)xc
                         withDouble:(jdouble)yc
                         withDouble:(jdouble)x1
                         withDouble:(jdouble)y1
                            withInt:(jint)level {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForQuadWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(crossings, rxmin, rymin, rxmax, rymax, x0, y0, xc, yc, x1, y1, level);
}

+ (jint)rectCrossingsForCubicWithInt:(jint)crossings
                          withDouble:(jdouble)rxmin
                          withDouble:(jdouble)rymin
                          withDouble:(jdouble)rxmax
                          withDouble:(jdouble)rymax
                          withDouble:(jdouble)x0
                          withDouble:(jdouble)y0
                          withDouble:(jdouble)xc0
                          withDouble:(jdouble)yc0
                          withDouble:(jdouble)xc1
                          withDouble:(jdouble)yc1
                          withDouble:(jdouble)x1
                          withDouble:(jdouble)y1
                             withInt:(jint)level {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForCubicWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(crossings, rxmin, rymin, rxmax, rymax, x0, y0, xc0, yc0, xc1, yc1, x1, y1, level);
}

- (instancetype)initWithInt:(jint)direction {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initWithInt_(self, direction);
  return self;
}

- (jint)getDirection {
  return direction_;
}

- (OrgGeogebraGgbjdkSunAwtGeomCurve *)getWithDirectionWithInt:(jint)direction {
  return (self->direction_ == direction ? self : [self getReversedCurve]);
}

+ (jdouble)roundWithDouble:(jdouble)v {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_(v);
}

+ (jint)orderofWithDouble:(jdouble)x1
               withDouble:(jdouble)x2 {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_orderofWithDouble_withDouble_(x1, x2);
}

+ (jlong)signeddiffbitsWithDouble:(jdouble)y1
                       withDouble:(jdouble)y2 {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_signeddiffbitsWithDouble_withDouble_(y1, y2);
}

+ (jlong)diffbitsWithDouble:(jdouble)y1
                 withDouble:(jdouble)y2 {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_diffbitsWithDouble_withDouble_(y1, y2);
}

+ (jdouble)prevWithDouble:(jdouble)v {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_prevWithDouble_(v);
}

+ (jdouble)nextWithDouble:(jdouble)v {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_nextWithDouble_(v);
}

- (NSString *)description {
  return (JreStrcat("$I$$$$$C", @"Curve[", [self getOrder], @", ", (JreStrcat("CD$D$", '(', OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_([self getX0]), @", ", OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_([self getY0]), @"), ")), [self controlPointString], (JreStrcat("CD$D$", '(', OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_([self getX1]), @", ", OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_([self getY1]), @"), ")), (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING ? @"D" : @"U"), ']'));
}

- (NSString *)controlPointString {
  return @"";
}

- (jint)getOrder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getXTop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getYTop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getXBot {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getYBot {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getXMin {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getXMax {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getX0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getY0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)XforYWithDouble:(jdouble)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)TforYWithDouble:(jdouble)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)XforTWithDouble:(jdouble)t {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)YforTWithDouble:(jdouble)t {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)dXforTWithDouble:(jdouble)t
                    withInt:(jint)deriv {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)dYforTWithDouble:(jdouble)t
                    withInt:(jint)deriv {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)nextVerticalWithDouble:(jdouble)t0
                       withDouble:(jdouble)t1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)crossingsForWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  if (y >= [self getYTop] && y < [self getYBot]) {
    if (x < [self getXMax] && (x < [self getXMin] || x < [self XforYWithDouble:y])) {
      return 1;
    }
  }
  return 0;
}

- (jboolean)accumulateCrossingsWithOrgGeogebraGgbjdkSunAwtGeomCrossings:(OrgGeogebraGgbjdkSunAwtGeomCrossings *)c {
  jdouble xhi = [((OrgGeogebraGgbjdkSunAwtGeomCrossings *) nil_chk(c)) getXHi];
  if ([self getXMin] >= xhi) {
    return NO;
  }
  jdouble xlo = [c getXLo];
  jdouble ylo = [c getYLo];
  jdouble yhi = [c getYHi];
  jdouble y0 = [self getYTop];
  jdouble y1 = [self getYBot];
  jdouble tstart, ystart, tend, yend;
  if (y0 < ylo) {
    if (y1 <= ylo) {
      return NO;
    }
    ystart = ylo;
    tstart = [self TforYWithDouble:ylo];
  }
  else {
    if (y0 >= yhi) {
      return NO;
    }
    ystart = y0;
    tstart = 0;
  }
  if (y1 > yhi) {
    yend = yhi;
    tend = [self TforYWithDouble:yhi];
  }
  else {
    yend = y1;
    tend = 1;
  }
  jboolean hitLo = NO;
  jboolean hitHi = NO;
  while (YES) {
    jdouble x = [self XforTWithDouble:tstart];
    if (x < xhi) {
      if (hitHi || x > xlo) {
        return YES;
      }
      hitLo = YES;
    }
    else {
      if (hitLo) {
        return YES;
      }
      hitHi = YES;
    }
    if (tstart >= tend) {
      break;
    }
    tstart = [self nextVerticalWithDouble:tstart withDouble:tend];
  }
  if (hitLo) {
    [c recordWithDouble:ystart withDouble:yend withInt:direction_];
  }
  return NO;
}

- (void)enlargeWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgGeogebraGgbjdkSunAwtGeomCurve *)getSubCurveWithDouble:(jdouble)ystart
                                                 withDouble:(jdouble)yend {
  return [self getSubCurveWithDouble:ystart withDouble:yend withInt:direction_];
}

- (OrgGeogebraGgbjdkSunAwtGeomCurve *)getReversedCurve {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraGgbjdkSunAwtGeomCurve *)getSubCurveWithDouble:(jdouble)ystart
                                                 withDouble:(jdouble)yend
                                                    withInt:(jint)dir {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)compareToWithOrgGeogebraGgbjdkSunAwtGeomCurve:(OrgGeogebraGgbjdkSunAwtGeomCurve *)that
                                      withDoubleArray:(IOSDoubleArray *)yrange {
  jdouble y0 = IOSDoubleArray_Get(nil_chk(yrange), 0);
  jdouble y1 = IOSDoubleArray_Get(yrange, 1);
  y1 = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(y1, [self getYBot]), [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(that)) getYBot]);
  if (y1 <= IOSDoubleArray_Get(yrange, 0)) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"this == ", self)];
    [JavaLangSystem_get_err_() printlnWithNSString:JreStrcat("$@", @"that == ", that)];
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$D$D", @"target range = ", IOSDoubleArray_Get(yrange, 0), @"=>", IOSDoubleArray_Get(yrange, 1))];
    @throw [new_OrgGeogebraGgbjdkSunAwtGeomInternalError_initWithNSString_(JreStrcat("$D$D", @"backstepping from ", IOSDoubleArray_Get(yrange, 0), @" to ", y1)) autorelease];
  }
  *IOSDoubleArray_GetRef(yrange, 1) = y1;
  if ([self getXMax] <= [that getXMin]) {
    if ([self getXMin] == [that getXMax]) {
      return 0;
    }
    return -1;
  }
  if ([self getXMin] >= [that getXMax]) {
    return 1;
  }
  jdouble s0 = [self TforYWithDouble:y0];
  jdouble ys0 = [self YforTWithDouble:s0];
  if (ys0 < y0) {
    s0 = [self refineTforYWithDouble:s0 withDouble:ys0 withDouble:y0];
    ys0 = [self YforTWithDouble:s0];
  }
  jdouble s1 = [self TforYWithDouble:y1];
  if ([self YforTWithDouble:s1] < y0) {
    s1 = [self refineTforYWithDouble:s1 withDouble:[self YforTWithDouble:s1] withDouble:y0];
  }
  jdouble t0 = [that TforYWithDouble:y0];
  jdouble yt0 = [that YforTWithDouble:t0];
  if (yt0 < y0) {
    t0 = [that refineTforYWithDouble:t0 withDouble:yt0 withDouble:y0];
    yt0 = [that YforTWithDouble:t0];
  }
  jdouble t1 = [that TforYWithDouble:y1];
  if ([that YforTWithDouble:t1] < y0) {
    t1 = [that refineTforYWithDouble:t1 withDouble:[that YforTWithDouble:t1] withDouble:y0];
  }
  jdouble xs0 = [self XforTWithDouble:s0];
  jdouble xt0 = [that XforTWithDouble:t0];
  jdouble scale_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(y0), JavaLangMath_absWithDouble_(y1));
  jdouble ymin = JavaLangMath_maxWithDouble_withDouble_(scale_ * 1E-14, 1E-300);
  if ([self fairlyCloseWithDouble:xs0 withDouble:xt0]) {
    jdouble bump = ymin;
    jdouble maxbump = JavaLangMath_minWithDouble_withDouble_(ymin * 1E13, (y1 - y0) * .1);
    jdouble y = y0 + bump;
    while (y <= y1) {
      if ([self fairlyCloseWithDouble:[self XforYWithDouble:y] withDouble:[that XforYWithDouble:y]]) {
        if ((bump *= 2) > maxbump) {
          bump = maxbump;
        }
      }
      else {
        y -= bump;
        while (YES) {
          bump /= 2;
          jdouble newy = y + bump;
          if (newy <= y) {
            break;
          }
          if ([self fairlyCloseWithDouble:[self XforYWithDouble:newy] withDouble:[that XforYWithDouble:newy]]) {
            y = newy;
          }
        }
        break;
      }
      y += bump;
    }
    if (y > y0) {
      if (y < y1) {
        *IOSDoubleArray_GetRef(yrange, 1) = y;
      }
      return 0;
    }
  }
  if (ymin <= 0) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$D", @"ymin = ", ymin)];
  }
  while (s0 < s1 && t0 < t1) {
    jdouble sh = [self nextVerticalWithDouble:s0 withDouble:s1];
    jdouble xsh = [self XforTWithDouble:sh];
    jdouble ysh = [self YforTWithDouble:sh];
    jdouble th = [that nextVerticalWithDouble:t0 withDouble:t1];
    jdouble xth = [that XforTWithDouble:th];
    jdouble yth = [that YforTWithDouble:th];
    @try {
      if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:0 withInt:0 withDouble:s0 withDouble:xs0 withDouble:ys0 withDouble:sh withDouble:xsh withDouble:ysh withDouble:t0 withDouble:xt0 withDouble:yt0 withDouble:th withDouble:xth withDouble:yth]) {
        break;
      }
    }
    @catch (JavaLangThrowable *t) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"Error: ", t)];
      [JavaLangSystem_get_err_() printlnWithNSString:JreStrcat("$D$D", @"y range was ", IOSDoubleArray_Get(yrange, 0), @"=>", IOSDoubleArray_Get(yrange, 1))];
      [JavaLangSystem_get_err_() printlnWithNSString:JreStrcat("$D$D", @"s y range is ", ys0, @"=>", ysh)];
      [JavaLangSystem_get_err_() printlnWithNSString:JreStrcat("$D$D", @"t y range is ", yt0, @"=>", yth)];
      [JavaLangSystem_get_err_() printlnWithNSString:JreStrcat("$D", @"ymin is ", ymin)];
      return 0;
    }
    if (ysh < yth) {
      if (ysh > IOSDoubleArray_Get(yrange, 0)) {
        if (ysh < IOSDoubleArray_Get(yrange, 1)) {
          *IOSDoubleArray_GetRef(yrange, 1) = ysh;
        }
        break;
      }
      s0 = sh;
      xs0 = xsh;
      ys0 = ysh;
    }
    else {
      if (yth > IOSDoubleArray_Get(yrange, 0)) {
        if (yth < IOSDoubleArray_Get(yrange, 1)) {
          *IOSDoubleArray_GetRef(yrange, 1) = yth;
        }
        break;
      }
      t0 = th;
      xt0 = xth;
      yt0 = yth;
    }
  }
  jdouble ymid = (IOSDoubleArray_Get(yrange, 0) + IOSDoubleArray_Get(yrange, 1)) / 2;
  return OrgGeogebraGgbjdkSunAwtGeomCurve_orderofWithDouble_withDouble_([self XforYWithDouble:ymid], [that XforYWithDouble:ymid]);
}

- (jboolean)findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:(OrgGeogebraGgbjdkSunAwtGeomCurve *)that
                                              withDoubleArray:(IOSDoubleArray *)yrange
                                                   withDouble:(jdouble)ymin
                                                      withInt:(jint)slevel
                                                      withInt:(jint)tlevel
                                                   withDouble:(jdouble)s0
                                                   withDouble:(jdouble)xs0
                                                   withDouble:(jdouble)ys0
                                                   withDouble:(jdouble)s1
                                                   withDouble:(jdouble)xs1
                                                   withDouble:(jdouble)ys1
                                                   withDouble:(jdouble)t0
                                                   withDouble:(jdouble)xt0
                                                   withDouble:(jdouble)yt0
                                                   withDouble:(jdouble)t1
                                                   withDouble:(jdouble)xt1
                                                   withDouble:(jdouble)yt1 {
  if (ys0 > yt1 || yt0 > ys1) {
    return NO;
  }
  if (JavaLangMath_minWithDouble_withDouble_(xs0, xs1) > JavaLangMath_maxWithDouble_withDouble_(xt0, xt1) || JavaLangMath_maxWithDouble_withDouble_(xs0, xs1) < JavaLangMath_minWithDouble_withDouble_(xt0, xt1)) {
    return NO;
  }
  if (s1 - s0 > OrgGeogebraGgbjdkSunAwtGeomCurve_TMIN) {
    jdouble s = (s0 + s1) / 2;
    jdouble xs = [self XforTWithDouble:s];
    jdouble ys = [self YforTWithDouble:s];
    if (s == s0 || s == s1) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$D", @"s0 = ", s0)];
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$D", @"s1 = ", s1)];
      @throw [new_OrgGeogebraGgbjdkSunAwtGeomInternalError_initWithNSString_(@"no s progress!") autorelease];
    }
    if (t1 - t0 > OrgGeogebraGgbjdkSunAwtGeomCurve_TMIN) {
      jdouble t = (t0 + t1) / 2;
      jdouble xt = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(that)) XforTWithDouble:t];
      jdouble yt = [that YforTWithDouble:t];
      if (t == t0 || t == t1) {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$D", @"t0 = ", t0)];
        [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$D", @"t1 = ", t1)];
        @throw [new_OrgGeogebraGgbjdkSunAwtGeomInternalError_initWithNSString_(@"no t progress!") autorelease];
      }
      if (ys >= yt0 && yt >= ys0) {
        if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:slevel + 1 withInt:tlevel + 1 withDouble:s0 withDouble:xs0 withDouble:ys0 withDouble:s withDouble:xs withDouble:ys withDouble:t0 withDouble:xt0 withDouble:yt0 withDouble:t withDouble:xt withDouble:yt]) {
          return YES;
        }
      }
      if (ys >= yt) {
        if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:slevel + 1 withInt:tlevel + 1 withDouble:s0 withDouble:xs0 withDouble:ys0 withDouble:s withDouble:xs withDouble:ys withDouble:t withDouble:xt withDouble:yt withDouble:t1 withDouble:xt1 withDouble:yt1]) {
          return YES;
        }
      }
      if (yt >= ys) {
        if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:slevel + 1 withInt:tlevel + 1 withDouble:s withDouble:xs withDouble:ys withDouble:s1 withDouble:xs1 withDouble:ys1 withDouble:t0 withDouble:xt0 withDouble:yt0 withDouble:t withDouble:xt withDouble:yt]) {
          return YES;
        }
      }
      if (ys1 >= yt && yt1 >= ys) {
        if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:slevel + 1 withInt:tlevel + 1 withDouble:s withDouble:xs withDouble:ys withDouble:s1 withDouble:xs1 withDouble:ys1 withDouble:t withDouble:xt withDouble:yt withDouble:t1 withDouble:xt1 withDouble:yt1]) {
          return YES;
        }
      }
    }
    else {
      if (ys >= yt0) {
        if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:slevel + 1 withInt:tlevel withDouble:s0 withDouble:xs0 withDouble:ys0 withDouble:s withDouble:xs withDouble:ys withDouble:t0 withDouble:xt0 withDouble:yt0 withDouble:t1 withDouble:xt1 withDouble:yt1]) {
          return YES;
        }
      }
      if (yt1 >= ys) {
        if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:slevel + 1 withInt:tlevel withDouble:s withDouble:xs withDouble:ys withDouble:s1 withDouble:xs1 withDouble:ys1 withDouble:t0 withDouble:xt0 withDouble:yt0 withDouble:t1 withDouble:xt1 withDouble:yt1]) {
          return YES;
        }
      }
    }
  }
  else if (t1 - t0 > OrgGeogebraGgbjdkSunAwtGeomCurve_TMIN) {
    jdouble t = (t0 + t1) / 2;
    jdouble xt = [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(that)) XforTWithDouble:t];
    jdouble yt = [that YforTWithDouble:t];
    if (t == t0 || t == t1) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$D", @"t0 = ", t0)];
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$D", @"t1 = ", t1)];
      @throw [new_OrgGeogebraGgbjdkSunAwtGeomInternalError_initWithNSString_(@"no t progress!") autorelease];
    }
    if (yt >= ys0) {
      if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:slevel withInt:tlevel + 1 withDouble:s0 withDouble:xs0 withDouble:ys0 withDouble:s1 withDouble:xs1 withDouble:ys1 withDouble:t0 withDouble:xt0 withDouble:yt0 withDouble:t withDouble:xt withDouble:yt]) {
        return YES;
      }
    }
    if (ys1 >= yt) {
      if ([self findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:that withDoubleArray:yrange withDouble:ymin withInt:slevel withInt:tlevel + 1 withDouble:s0 withDouble:xs0 withDouble:ys0 withDouble:s1 withDouble:xs1 withDouble:ys1 withDouble:t withDouble:xt withDouble:yt withDouble:t1 withDouble:xt1 withDouble:yt1]) {
        return YES;
      }
    }
  }
  else {
    jdouble xlk = xs1 - xs0;
    jdouble ylk = ys1 - ys0;
    jdouble xnm = xt1 - xt0;
    jdouble ynm = yt1 - yt0;
    jdouble xmk = xt0 - xs0;
    jdouble ymk = yt0 - ys0;
    jdouble det = xnm * ylk - ynm * xlk;
    if (det != 0) {
      jdouble detinv = 1 / det;
      jdouble s = (xnm * ymk - ynm * xmk) * detinv;
      jdouble t = (xlk * ymk - ylk * xmk) * detinv;
      if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
        s = s0 + s * (s1 - s0);
        t = t0 + t * (t1 - t0);
        if (s < 0 || s > 1 || t < 0 || t > 1) {
          [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Uh oh!"];
        }
        jdouble y = ([self YforTWithDouble:s] + [((OrgGeogebraGgbjdkSunAwtGeomCurve *) nil_chk(that)) YforTWithDouble:t]) / 2;
        if (y <= IOSDoubleArray_Get(nil_chk(yrange), 1) && y > IOSDoubleArray_Get(yrange, 0)) {
          *IOSDoubleArray_GetRef(yrange, 1) = y;
          return YES;
        }
      }
    }
  }
  return NO;
}

- (jdouble)refineTforYWithDouble:(jdouble)t0
                      withDouble:(jdouble)yt0
                      withDouble:(jdouble)y0 {
  jdouble t1 = 1;
  while (YES) {
    jdouble th = (t0 + t1) / 2;
    if (th == t0 || th == t1) {
      return t1;
    }
    jdouble y = [self YforTWithDouble:th];
    if (y < y0) {
      t0 = th;
      yt0 = y;
    }
    else if (y > y0) {
      t1 = th;
    }
    else {
      return t1;
    }
  }
}

- (jboolean)fairlyCloseWithDouble:(jdouble)v1
                       withDouble:(jdouble)v2 {
  return (JavaLangMath_absWithDouble_(v1 - v2) < JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(v1), JavaLangMath_absWithDouble_(v2)) * 1E-10);
}

- (jint)getSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (jint)crossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>)pi
                                                          withDouble:(jdouble)px
                                                          withDouble:(jdouble)py {
  return OrgGeogebraGgbjdkSunAwtGeomCurve_crossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_withDouble_withDouble_(pi, px, py);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "insertMoveWithJavaUtilVector:withDouble:withDouble:", "insertMove", "V", 0x9, NULL, NULL },
    { "insertLineWithJavaUtilVector:withDouble:withDouble:withDouble:withDouble:", "insertLine", "V", 0x9, NULL, NULL },
    { "insertQuadWithJavaUtilVector:withDouble:withDouble:withDoubleArray:", "insertQuad", "V", 0x9, NULL, NULL },
    { "insertCubicWithJavaUtilVector:withDouble:withDouble:withDoubleArray:", "insertCubic", "V", 0x9, NULL, NULL },
    { "pointCrossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:withDouble:withDouble:", "pointCrossingsForPath", "I", 0x9, NULL, NULL },
    { "pointCrossingsForLineWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "pointCrossingsForLine", "I", 0x9, NULL, NULL },
    { "pointCrossingsForQuadWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "pointCrossingsForQuad", "I", 0x9, NULL, NULL },
    { "pointCrossingsForCubicWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "pointCrossingsForCubic", "I", 0x9, NULL, NULL },
    { "rectCrossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:withDouble:withDouble:withDouble:withDouble:", "rectCrossingsForPath", "I", 0x9, NULL, NULL },
    { "rectCrossingsForLineWithInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "rectCrossingsForLine", "I", 0x9, NULL, NULL },
    { "rectCrossingsForQuadWithInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "rectCrossingsForQuad", "I", 0x9, NULL, NULL },
    { "rectCrossingsForCubicWithInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "rectCrossingsForCubic", "I", 0x9, NULL, NULL },
    { "initWithInt:", "Curve", NULL, 0x1, NULL, NULL },
    { "getDirection", NULL, "I", 0x11, NULL, NULL },
    { "getWithDirectionWithInt:", "getWithDirection", "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", 0x11, NULL, NULL },
    { "roundWithDouble:", "round", "D", 0x9, NULL, NULL },
    { "orderofWithDouble:withDouble:", "orderof", "I", 0x9, NULL, NULL },
    { "signeddiffbitsWithDouble:withDouble:", "signeddiffbits", "J", 0x9, NULL, NULL },
    { "diffbitsWithDouble:withDouble:", "diffbits", "J", 0x9, NULL, NULL },
    { "prevWithDouble:", "prev", "D", 0x9, NULL, NULL },
    { "nextWithDouble:", "next", "D", 0x9, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "controlPointString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOrder", NULL, "I", 0x401, NULL, NULL },
    { "getXTop", NULL, "D", 0x401, NULL, NULL },
    { "getYTop", NULL, "D", 0x401, NULL, NULL },
    { "getXBot", NULL, "D", 0x401, NULL, NULL },
    { "getYBot", NULL, "D", 0x401, NULL, NULL },
    { "getXMin", NULL, "D", 0x401, NULL, NULL },
    { "getXMax", NULL, "D", 0x401, NULL, NULL },
    { "getX0", NULL, "D", 0x401, NULL, NULL },
    { "getY0", NULL, "D", 0x401, NULL, NULL },
    { "getX1", NULL, "D", 0x401, NULL, NULL },
    { "getY1", NULL, "D", 0x401, NULL, NULL },
    { "XforYWithDouble:", "XforY", "D", 0x401, NULL, NULL },
    { "TforYWithDouble:", "TforY", "D", 0x401, NULL, NULL },
    { "XforTWithDouble:", "XforT", "D", 0x401, NULL, NULL },
    { "YforTWithDouble:", "YforT", "D", 0x401, NULL, NULL },
    { "dXforTWithDouble:withInt:", "dXforT", "D", 0x401, NULL, NULL },
    { "dYforTWithDouble:withInt:", "dYforT", "D", 0x401, NULL, NULL },
    { "nextVerticalWithDouble:withDouble:", "nextVertical", "D", 0x401, NULL, NULL },
    { "crossingsForWithDouble:withDouble:", "crossingsFor", "I", 0x1, NULL, NULL },
    { "accumulateCrossingsWithOrgGeogebraGgbjdkSunAwtGeomCrossings:", "accumulateCrossings", "Z", 0x1, NULL, NULL },
    { "enlargeWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:", "enlarge", "V", 0x401, NULL, NULL },
    { "getSubCurveWithDouble:withDouble:", "getSubCurve", "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", 0x1, NULL, NULL },
    { "getReversedCurve", NULL, "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", 0x401, NULL, NULL },
    { "getSubCurveWithDouble:withDouble:withInt:", "getSubCurve", "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", 0x401, NULL, NULL },
    { "compareToWithOrgGeogebraGgbjdkSunAwtGeomCurve:withDoubleArray:", "compareTo", "I", 0x1, NULL, NULL },
    { "findIntersectWithOrgGeogebraGgbjdkSunAwtGeomCurve:withDoubleArray:withDouble:withInt:withInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "findIntersect", "Z", 0x1, NULL, NULL },
    { "refineTforYWithDouble:withDouble:withDouble:", "refineTforY", "D", 0x1, NULL, NULL },
    { "fairlyCloseWithDouble:withDouble:", "fairlyClose", "Z", 0x1, NULL, NULL },
    { "getSegmentWithDoubleArray:", "getSegment", "I", 0x401, NULL, NULL },
    { "crossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator:withDouble:withDouble:", "crossingsForPath", "I", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INCREASING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING },
    { "DECREASING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING },
    { "direction_", NULL, 0x4, "I", NULL, NULL,  },
    { "RECT_INTERSECTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS },
    { "TMIN_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraGgbjdkSunAwtGeomCurve_TMIN },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomCurve = { 2, "Curve", "org.geogebra.ggbjdk.sun.awt.geom", NULL, 0x401, 53, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomCurve;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomCurve_insertMoveWithJavaUtilVector_withDouble_withDouble_(JavaUtilVector *curves, jdouble x, jdouble y) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  [((JavaUtilVector *) nil_chk(curves)) addWithId:[new_OrgGeogebraGgbjdkSunAwtGeomOrder0_initWithDouble_withDouble_(x, y) autorelease]];
}

void OrgGeogebraGgbjdkSunAwtGeomCurve_insertLineWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_(JavaUtilVector *curves, jdouble x0, jdouble y0, jdouble x1, jdouble y1) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (y0 < y1) {
    [((JavaUtilVector *) nil_chk(curves)) addWithId:[new_OrgGeogebraGgbjdkSunAwtGeomOrder1_initWithDouble_withDouble_withDouble_withDouble_withInt_(x0, y0, x1, y1, OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) autorelease]];
  }
  else if (y0 > y1) {
    [((JavaUtilVector *) nil_chk(curves)) addWithId:[new_OrgGeogebraGgbjdkSunAwtGeomOrder1_initWithDouble_withDouble_withDouble_withDouble_withInt_(x1, y1, x0, y0, OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING) autorelease]];
  }
  else {
  }
}

void OrgGeogebraGgbjdkSunAwtGeomCurve_insertQuadWithJavaUtilVector_withDouble_withDouble_withDoubleArray_(JavaUtilVector *curves, jdouble x0, jdouble y0, IOSDoubleArray *coords) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  jdouble y1 = IOSDoubleArray_Get(nil_chk(coords), 3);
  if (y0 > y1) {
    OrgGeogebraGgbjdkSunAwtGeomOrder2_insertWithJavaUtilVector_withDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, coords, IOSDoubleArray_Get(coords, 2), y1, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), x0, y0, OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING);
  }
  else if (y0 == y1 && y0 == IOSDoubleArray_Get(coords, 1)) {
    return;
  }
  else {
    OrgGeogebraGgbjdkSunAwtGeomOrder2_insertWithJavaUtilVector_withDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, coords, x0, y0, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), IOSDoubleArray_Get(coords, 2), y1, OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING);
  }
}

void OrgGeogebraGgbjdkSunAwtGeomCurve_insertCubicWithJavaUtilVector_withDouble_withDouble_withDoubleArray_(JavaUtilVector *curves, jdouble x0, jdouble y0, IOSDoubleArray *coords) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  jdouble y1 = IOSDoubleArray_Get(nil_chk(coords), 5);
  if (y0 > y1) {
    OrgGeogebraGgbjdkSunAwtGeomOrder3_insertWithJavaUtilVector_withDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, coords, IOSDoubleArray_Get(coords, 4), y1, IOSDoubleArray_Get(coords, 2), IOSDoubleArray_Get(coords, 3), IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), x0, y0, OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING);
  }
  else if (y0 == y1 && y0 == IOSDoubleArray_Get(coords, 1) && y0 == IOSDoubleArray_Get(coords, 3)) {
    return;
  }
  else {
    OrgGeogebraGgbjdkSunAwtGeomOrder3_insertWithJavaUtilVector_withDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, coords, x0, y0, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), IOSDoubleArray_Get(coords, 2), IOSDoubleArray_Get(coords, 3), IOSDoubleArray_Get(coords, 4), y1, OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING);
  }
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_withDouble_withDouble_(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator> pi, jdouble px, jdouble py) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if ([((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(pi)) isDone]) {
    return 0;
  }
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:6];
  if ([pi currentSegmentWithDoubleArray:coords] != OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO) {
    @throw [new_OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_initWithNSString_(@"missing initial moveto in path definition") autorelease];
  }
  [pi next];
  jdouble movx = IOSDoubleArray_Get(coords, 0);
  jdouble movy = IOSDoubleArray_Get(coords, 1);
  jdouble curx = movx;
  jdouble cury = movy;
  jdouble endx, endy;
  jint crossings = 0;
  while (![pi isDone]) {
    switch ([pi currentSegmentWithDoubleArray:coords]) {
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO:
      if (cury != movy) {
        crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, curx, cury, movx, movy);
      }
      movx = curx = IOSDoubleArray_Get(coords, 0);
      movy = cury = IOSDoubleArray_Get(coords, 1);
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO:
      endx = IOSDoubleArray_Get(coords, 0);
      endy = IOSDoubleArray_Get(coords, 1);
      crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, curx, cury, endx, endy);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_QUADTO:
      endx = IOSDoubleArray_Get(coords, 2);
      endy = IOSDoubleArray_Get(coords, 3);
      crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, curx, cury, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), endx, endy, 0);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CUBICTO:
      endx = IOSDoubleArray_Get(coords, 4);
      endy = IOSDoubleArray_Get(coords, 5);
      crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, curx, cury, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), IOSDoubleArray_Get(coords, 2), IOSDoubleArray_Get(coords, 3), endx, endy, 0);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE:
      if (cury != movy) {
        crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, curx, cury, movx, movy);
      }
      curx = movx;
      cury = movy;
      break;
    }
    [pi next];
  }
  if (cury != movy) {
    crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, curx, cury, movx, movy);
  }
  return crossings;
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble px, jdouble py, jdouble x0, jdouble y0, jdouble x1, jdouble y1) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (py < y0 && py < y1) return 0;
  if (py >= y0 && py >= y1) return 0;
  if (px >= x0 && px >= x1) return 0;
  if (px < x0 && px < x1) return (y0 < y1) ? 1 : -1;
  jdouble xintercept = x0 + (py - y0) * (x1 - x0) / (y1 - y0);
  if (px >= xintercept) return 0;
  return (y0 < y1) ? 1 : -1;
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble px, jdouble py, jdouble x0, jdouble y0, jdouble xc, jdouble yc, jdouble x1, jdouble y1, jint level) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (py < y0 && py < yc && py < y1) return 0;
  if (py >= y0 && py >= yc && py >= y1) return 0;
  if (px >= x0 && px >= xc && px >= x1) return 0;
  if (px < x0 && px < xc && px < x1) {
    if (py >= y0) {
      if (py < y1) return 1;
    }
    else {
      if (py >= y1) return -1;
    }
    return 0;
  }
  if (level > 52) return OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, x0, y0, x1, y1);
  jdouble x0c = (x0 + xc) / 2;
  jdouble y0c = (y0 + yc) / 2;
  jdouble xc1 = (xc + x1) / 2;
  jdouble yc1 = (yc + y1) / 2;
  xc = (x0c + xc1) / 2;
  yc = (y0c + yc1) / 2;
  if (JavaLangDouble_isNaNWithDouble_(xc) || JavaLangDouble_isNaNWithDouble_(yc)) {
    return 0;
  }
  return (OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, x0, y0, x0c, y0c, xc, yc, level + 1) + OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, xc, yc, xc1, yc1, x1, y1, level + 1));
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble px, jdouble py, jdouble x0, jdouble y0, jdouble xc0, jdouble yc0, jdouble xc1, jdouble yc1, jdouble x1, jdouble y1, jint level) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (py < y0 && py < yc0 && py < yc1 && py < y1) return 0;
  if (py >= y0 && py >= yc0 && py >= yc1 && py >= y1) return 0;
  if (px >= x0 && px >= xc0 && px >= xc1 && px >= x1) return 0;
  if (px < x0 && px < xc0 && px < xc1 && px < x1) {
    if (py >= y0) {
      if (py < y1) return 1;
    }
    else {
      if (py >= y1) return -1;
    }
    return 0;
  }
  if (level > 52) return OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, x0, y0, x1, y1);
  jdouble xmid = (xc0 + xc1) / 2;
  jdouble ymid = (yc0 + yc1) / 2;
  xc0 = (x0 + xc0) / 2;
  yc0 = (y0 + yc0) / 2;
  xc1 = (xc1 + x1) / 2;
  yc1 = (yc1 + y1) / 2;
  jdouble xc0m = (xc0 + xmid) / 2;
  jdouble yc0m = (yc0 + ymid) / 2;
  jdouble xmc1 = (xmid + xc1) / 2;
  jdouble ymc1 = (ymid + yc1) / 2;
  xmid = (xc0m + xmc1) / 2;
  ymid = (yc0m + ymc1) / 2;
  if (JavaLangDouble_isNaNWithDouble_(xmid) || JavaLangDouble_isNaNWithDouble_(ymid)) {
    return 0;
  }
  return (OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, x0, y0, xc0, yc0, xc0m, yc0m, xmid, ymid, level + 1) + OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, xmid, ymid, xmc1, ymc1, xc1, yc1, x1, y1, level + 1));
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_withDouble_withDouble_withDouble_withDouble_(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator> pi, jdouble rxmin, jdouble rymin, jdouble rxmax, jdouble rymax) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (rxmax <= rxmin || rymax <= rymin) {
    return 0;
  }
  if ([((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(pi)) isDone]) {
    return 0;
  }
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:6];
  if ([pi currentSegmentWithDoubleArray:coords] != OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO) {
    @throw [new_OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_initWithNSString_(@"missing initial moveto in path definition") autorelease];
  }
  [pi next];
  jdouble curx, cury, movx, movy, endx, endy;
  curx = movx = IOSDoubleArray_Get(coords, 0);
  cury = movy = IOSDoubleArray_Get(coords, 1);
  jint crossings = 0;
  while (crossings != OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS && ![pi isDone]) {
    switch ([pi currentSegmentWithDoubleArray:coords]) {
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO:
      if (curx != movx || cury != movy) {
        crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForLineWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(crossings, rxmin, rymin, rxmax, rymax, curx, cury, movx, movy);
      }
      movx = curx = IOSDoubleArray_Get(coords, 0);
      movy = cury = IOSDoubleArray_Get(coords, 1);
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO:
      endx = IOSDoubleArray_Get(coords, 0);
      endy = IOSDoubleArray_Get(coords, 1);
      crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForLineWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(crossings, rxmin, rymin, rxmax, rymax, curx, cury, endx, endy);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_QUADTO:
      endx = IOSDoubleArray_Get(coords, 2);
      endy = IOSDoubleArray_Get(coords, 3);
      crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForQuadWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(crossings, rxmin, rymin, rxmax, rymax, curx, cury, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), endx, endy, 0);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CUBICTO:
      endx = IOSDoubleArray_Get(coords, 4);
      endy = IOSDoubleArray_Get(coords, 5);
      crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForCubicWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(crossings, rxmin, rymin, rxmax, rymax, curx, cury, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), IOSDoubleArray_Get(coords, 2), IOSDoubleArray_Get(coords, 3), endx, endy, 0);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE:
      if (curx != movx || cury != movy) {
        crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForLineWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(crossings, rxmin, rymin, rxmax, rymax, curx, cury, movx, movy);
      }
      curx = movx;
      cury = movy;
      break;
    }
    [pi next];
  }
  if (crossings != OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS && (curx != movx || cury != movy)) {
    crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForLineWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(crossings, rxmin, rymin, rxmax, rymax, curx, cury, movx, movy);
  }
  return crossings;
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForLineWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jint crossings, jdouble rxmin, jdouble rymin, jdouble rxmax, jdouble rymax, jdouble x0, jdouble y0, jdouble x1, jdouble y1) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (y0 >= rymax && y1 >= rymax) return crossings;
  if (y0 <= rymin && y1 <= rymin) return crossings;
  if (x0 <= rxmin && x1 <= rxmin) return crossings;
  if (x0 >= rxmax && x1 >= rxmax) {
    if (y0 < y1) {
      if (y0 <= rymin) crossings++;
      if (y1 >= rymax) crossings++;
    }
    else if (y1 < y0) {
      if (y1 <= rymin) crossings--;
      if (y0 >= rymax) crossings--;
    }
    return crossings;
  }
  if ((x0 > rxmin && x0 < rxmax && y0 > rymin && y0 < rymax) || (x1 > rxmin && x1 < rxmax && y1 > rymin && y1 < rymax)) {
    return OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS;
  }
  jdouble xi0 = x0;
  if (y0 < rymin) {
    xi0 += ((rymin - y0) * (x1 - x0) / (y1 - y0));
  }
  else if (y0 > rymax) {
    xi0 += ((rymax - y0) * (x1 - x0) / (y1 - y0));
  }
  jdouble xi1 = x1;
  if (y1 < rymin) {
    xi1 += ((rymin - y1) * (x0 - x1) / (y0 - y1));
  }
  else if (y1 > rymax) {
    xi1 += ((rymax - y1) * (x0 - x1) / (y0 - y1));
  }
  if (xi0 <= rxmin && xi1 <= rxmin) return crossings;
  if (xi0 >= rxmax && xi1 >= rxmax) {
    if (y0 < y1) {
      if (y0 <= rymin) crossings++;
      if (y1 >= rymax) crossings++;
    }
    else if (y1 < y0) {
      if (y1 <= rymin) crossings--;
      if (y0 >= rymax) crossings--;
    }
    return crossings;
  }
  return OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS;
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForQuadWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jint crossings, jdouble rxmin, jdouble rymin, jdouble rxmax, jdouble rymax, jdouble x0, jdouble y0, jdouble xc, jdouble yc, jdouble x1, jdouble y1, jint level) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (y0 >= rymax && yc >= rymax && y1 >= rymax) return crossings;
  if (y0 <= rymin && yc <= rymin && y1 <= rymin) return crossings;
  if (x0 <= rxmin && xc <= rxmin && x1 <= rxmin) return crossings;
  if (x0 >= rxmax && xc >= rxmax && x1 >= rxmax) {
    if (y0 < y1) {
      if (y0 <= rymin && y1 > rymin) crossings++;
      if (y0 < rymax && y1 >= rymax) crossings++;
    }
    else if (y1 < y0) {
      if (y1 <= rymin && y0 > rymin) crossings--;
      if (y1 < rymax && y0 >= rymax) crossings--;
    }
    return crossings;
  }
  if ((x0 < rxmax && x0 > rxmin && y0 < rymax && y0 > rymin) || (x1 < rxmax && x1 > rxmin && y1 < rymax && y1 > rymin)) {
    return OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS;
  }
  if (level > 52) {
    return OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForLineWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(crossings, rxmin, rymin, rxmax, rymax, x0, y0, x1, y1);
  }
  jdouble x0c = (x0 + xc) / 2;
  jdouble y0c = (y0 + yc) / 2;
  jdouble xc1 = (xc + x1) / 2;
  jdouble yc1 = (yc + y1) / 2;
  xc = (x0c + xc1) / 2;
  yc = (y0c + yc1) / 2;
  if (JavaLangDouble_isNaNWithDouble_(xc) || JavaLangDouble_isNaNWithDouble_(yc)) {
    return 0;
  }
  crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForQuadWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(crossings, rxmin, rymin, rxmax, rymax, x0, y0, x0c, y0c, xc, yc, level + 1);
  if (crossings != OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS) {
    crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForQuadWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(crossings, rxmin, rymin, rxmax, rymax, xc, yc, xc1, yc1, x1, y1, level + 1);
  }
  return crossings;
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForCubicWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jint crossings, jdouble rxmin, jdouble rymin, jdouble rxmax, jdouble rymax, jdouble x0, jdouble y0, jdouble xc0, jdouble yc0, jdouble xc1, jdouble yc1, jdouble x1, jdouble y1, jint level) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (y0 >= rymax && yc0 >= rymax && yc1 >= rymax && y1 >= rymax) {
    return crossings;
  }
  if (y0 <= rymin && yc0 <= rymin && yc1 <= rymin && y1 <= rymin) {
    return crossings;
  }
  if (x0 <= rxmin && xc0 <= rxmin && xc1 <= rxmin && x1 <= rxmin) {
    return crossings;
  }
  if (x0 >= rxmax && xc0 >= rxmax && xc1 >= rxmax && x1 >= rxmax) {
    if (y0 < y1) {
      if (y0 <= rymin && y1 > rymin) crossings++;
      if (y0 < rymax && y1 >= rymax) crossings++;
    }
    else if (y1 < y0) {
      if (y1 <= rymin && y0 > rymin) crossings--;
      if (y1 < rymax && y0 >= rymax) crossings--;
    }
    return crossings;
  }
  if ((x0 > rxmin && x0 < rxmax && y0 > rymin && y0 < rymax) || (x1 > rxmin && x1 < rxmax && y1 > rymin && y1 < rymax)) {
    return OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS;
  }
  if (level > 52) {
    return OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForLineWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(crossings, rxmin, rymin, rxmax, rymax, x0, y0, x1, y1);
  }
  jdouble xmid = (xc0 + xc1) / 2;
  jdouble ymid = (yc0 + yc1) / 2;
  xc0 = (x0 + xc0) / 2;
  yc0 = (y0 + yc0) / 2;
  xc1 = (xc1 + x1) / 2;
  yc1 = (yc1 + y1) / 2;
  jdouble xc0m = (xc0 + xmid) / 2;
  jdouble yc0m = (yc0 + ymid) / 2;
  jdouble xmc1 = (xmid + xc1) / 2;
  jdouble ymc1 = (ymid + yc1) / 2;
  xmid = (xc0m + xmc1) / 2;
  ymid = (yc0m + ymc1) / 2;
  if (JavaLangDouble_isNaNWithDouble_(xmid) || JavaLangDouble_isNaNWithDouble_(ymid)) {
    return 0;
  }
  crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForCubicWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(crossings, rxmin, rymin, rxmax, rymax, x0, y0, xc0, yc0, xc0m, yc0m, xmid, ymid, level + 1);
  if (crossings != OrgGeogebraGgbjdkSunAwtGeomCurve_RECT_INTERSECTS) {
    crossings = OrgGeogebraGgbjdkSunAwtGeomCurve_rectCrossingsForCubicWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(crossings, rxmin, rymin, rxmax, rymax, xmid, ymid, xmc1, ymc1, xc1, yc1, x1, y1, level + 1);
  }
  return crossings;
}

void OrgGeogebraGgbjdkSunAwtGeomCurve_initWithInt_(OrgGeogebraGgbjdkSunAwtGeomCurve *self, jint direction) {
  NSObject_init(self);
  self->direction_ = direction;
}

jdouble OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_(jdouble v) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  return v;
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_orderofWithDouble_withDouble_(jdouble x1, jdouble x2) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if (x1 < x2) {
    return -1;
  }
  if (x1 > x2) {
    return 1;
  }
  return 0;
}

jlong OrgGeogebraGgbjdkSunAwtGeomCurve_signeddiffbitsWithDouble_withDouble_(jdouble y1, jdouble y2) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  @throw [new_OrgGeogebraGgbjdkSunAwtGeomNotImplementedException_initWithNSString_(@"not possible in GWT") autorelease];
}

jlong OrgGeogebraGgbjdkSunAwtGeomCurve_diffbitsWithDouble_withDouble_(jdouble y1, jdouble y2) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  @throw [new_OrgGeogebraGgbjdkSunAwtGeomNotImplementedException_initWithNSString_(@"not possible in GWT") autorelease];
}

jdouble OrgGeogebraGgbjdkSunAwtGeomCurve_prevWithDouble_(jdouble v) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  @throw [new_OrgGeogebraGgbjdkSunAwtGeomNotImplementedException_initWithNSString_(@"not possible in GWT") autorelease];
}

jdouble OrgGeogebraGgbjdkSunAwtGeomCurve_nextWithDouble_(jdouble v) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  @throw [new_OrgGeogebraGgbjdkSunAwtGeomNotImplementedException_initWithNSString_(@"not possible in GWT") autorelease];
}

jint OrgGeogebraGgbjdkSunAwtGeomCurve_crossingsForPathWithOrgGeogebraGgbjdkJavaAwtGeomPathIterator_withDouble_withDouble_(id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator> pi, jdouble px, jdouble py) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initialize();
  if ([((id<OrgGeogebraGgbjdkJavaAwtGeomPathIterator>) nil_chk(pi)) isDone]) {
    return 0;
  }
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:6];
  if ([pi currentSegmentWithDoubleArray:coords] != OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO) {
    @throw [new_OrgGeogebraGgbjdkJavaAwtGeomIllegalPathStateException_initWithNSString_(@"missing initial moveto in path definition") autorelease];
  }
  [pi next];
  jdouble movx = IOSDoubleArray_Get(coords, 0);
  jdouble movy = IOSDoubleArray_Get(coords, 1);
  jdouble curx = movx;
  jdouble cury = movy;
  jdouble endx, endy;
  jint crossings = 0;
  while (![pi isDone]) {
    switch ([pi currentSegmentWithDoubleArray:coords]) {
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_MOVETO:
      if (cury != movy) {
        crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, curx, cury, movx, movy);
      }
      movx = curx = IOSDoubleArray_Get(coords, 0);
      movy = cury = IOSDoubleArray_Get(coords, 1);
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_LINETO:
      endx = IOSDoubleArray_Get(coords, 0);
      endy = IOSDoubleArray_Get(coords, 1);
      crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, curx, cury, endx, endy);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_QUADTO:
      endx = IOSDoubleArray_Get(coords, 2);
      endy = IOSDoubleArray_Get(coords, 3);
      crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, curx, cury, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), endx, endy, 0);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CUBICTO:
      endx = IOSDoubleArray_Get(coords, 4);
      endy = IOSDoubleArray_Get(coords, 5);
      crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(px, py, curx, cury, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), IOSDoubleArray_Get(coords, 2), IOSDoubleArray_Get(coords, 3), endx, endy, 0);
      curx = endx;
      cury = endy;
      break;
      case OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CLOSE:
      if (cury != movy) {
        crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, curx, cury, movx, movy);
      }
      curx = movx;
      cury = movy;
      break;
    }
    [pi next];
  }
  if (cury != movy) {
    crossings += OrgGeogebraGgbjdkSunAwtGeomCurve_pointCrossingsForLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(px, py, curx, cury, movx, movy);
  }
  return crossings;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomCurve)
