//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/ggbjdk/sun/awt/geom/Order2.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Vector.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Curve.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Order2.h"

@interface OrgGeogebraGgbjdkSunAwtGeomOrder2 () {
 @public
  jdouble x0_;
  jdouble y0_;
  jdouble cx0_;
  jdouble cy0_;
  jdouble x1_;
  jdouble y1_;
  jdouble xmin_;
  jdouble xmax_;
  jdouble xcoeff0_;
  jdouble xcoeff1_;
  jdouble xcoeff2_;
  jdouble ycoeff0_;
  jdouble ycoeff1_;
  jdouble ycoeff2_;
}

@end

@implementation OrgGeogebraGgbjdkSunAwtGeomOrder2

+ (void)insertWithJavaUtilVector:(JavaUtilVector *)curves
                 withDoubleArray:(IOSDoubleArray *)tmp
                      withDouble:(jdouble)x0
                      withDouble:(jdouble)y0
                      withDouble:(jdouble)cx0
                      withDouble:(jdouble)cy0
                      withDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                         withInt:(jint)direction {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_insertWithJavaUtilVector_withDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, tmp, x0, y0, cx0, cy0, x1, y1, direction);
}

+ (void)addInstanceWithJavaUtilVector:(JavaUtilVector *)curves
                           withDouble:(jdouble)x0
                           withDouble:(jdouble)y0
                           withDouble:(jdouble)cx0
                           withDouble:(jdouble)cy0
                           withDouble:(jdouble)x1
                           withDouble:(jdouble)y1
                              withInt:(jint)direction {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, x0, y0, cx0, cy0, x1, y1, direction);
}

+ (jint)getHorizontalParamsWithDouble:(jdouble)c0
                           withDouble:(jdouble)cp
                           withDouble:(jdouble)c1
                      withDoubleArray:(IOSDoubleArray *)ret {
  return OrgGeogebraGgbjdkSunAwtGeomOrder2_getHorizontalParamsWithDouble_withDouble_withDouble_withDoubleArray_(c0, cp, c1, ret);
}

+ (void)splitWithDoubleArray:(IOSDoubleArray *)coords
                     withInt:(jint)pos
                  withDouble:(jdouble)t {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_splitWithDoubleArray_withInt_withDouble_(coords, pos, t);
}

- (instancetype)initWithDouble:(jdouble)x0
                    withDouble:(jdouble)y0
                    withDouble:(jdouble)cx0
                    withDouble:(jdouble)cy0
                    withDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                       withInt:(jint)direction {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, x0, y0, cx0, cy0, x1, y1, direction);
  return self;
}

- (jint)getOrder {
  return 2;
}

- (jdouble)getXTop {
  return x0_;
}

- (jdouble)getYTop {
  return y0_;
}

- (jdouble)getXBot {
  return x1_;
}

- (jdouble)getYBot {
  return y1_;
}

- (jdouble)getXMin {
  return xmin_;
}

- (jdouble)getXMax {
  return xmax_;
}

- (jdouble)getX0 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) ? x0_ : x1_;
}

- (jdouble)getY0 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) ? y0_ : y1_;
}

- (jdouble)getCX0 {
  return cx0_;
}

- (jdouble)getCY0 {
  return cy0_;
}

- (jdouble)getX1 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING) ? x0_ : x1_;
}

- (jdouble)getY1 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING) ? y0_ : y1_;
}

- (jdouble)XforYWithDouble:(jdouble)y {
  if (y <= y0_) {
    return x0_;
  }
  if (y >= y1_) {
    return x1_;
  }
  return [self XforTWithDouble:[self TforYWithDouble:y]];
}

- (jdouble)TforYWithDouble:(jdouble)y {
  if (y <= y0_) {
    return 0;
  }
  if (y >= y1_) {
    return 1;
  }
  return OrgGeogebraGgbjdkSunAwtGeomOrder2_TforYWithDouble_withDouble_withDouble_withDouble_(y, ycoeff0_, ycoeff1_, ycoeff2_);
}

+ (jdouble)TforYWithDouble:(jdouble)y
                withDouble:(jdouble)ycoeff0
                withDouble:(jdouble)ycoeff1
                withDouble:(jdouble)ycoeff2 {
  return OrgGeogebraGgbjdkSunAwtGeomOrder2_TforYWithDouble_withDouble_withDouble_withDouble_(y, ycoeff0, ycoeff1, ycoeff2);
}

- (jdouble)XforTWithDouble:(jdouble)t {
  return (xcoeff2_ * t + xcoeff1_) * t + xcoeff0_;
}

- (jdouble)YforTWithDouble:(jdouble)t {
  return (ycoeff2_ * t + ycoeff1_) * t + ycoeff0_;
}

- (jdouble)dXforTWithDouble:(jdouble)t
                    withInt:(jint)deriv {
  switch (deriv) {
    case 0:
    return (xcoeff2_ * t + xcoeff1_) * t + xcoeff0_;
    case 1:
    return 2 * xcoeff2_ * t + xcoeff1_;
    case 2:
    return 2 * xcoeff2_;
    default:
    return 0;
  }
}

- (jdouble)dYforTWithDouble:(jdouble)t
                    withInt:(jint)deriv {
  switch (deriv) {
    case 0:
    return (ycoeff2_ * t + ycoeff1_) * t + ycoeff0_;
    case 1:
    return 2 * ycoeff2_ * t + ycoeff1_;
    case 2:
    return 2 * ycoeff2_;
    default:
    return 0;
  }
}

- (jdouble)nextVerticalWithDouble:(jdouble)t0
                       withDouble:(jdouble)t1 {
  jdouble t = -xcoeff1_ / (2 * xcoeff2_);
  if (t > t0 && t < t1) {
    return t;
  }
  return t1;
}

- (void)enlargeWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)r {
  [((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(r)) addWithDouble:x0_ withDouble:y0_];
  jdouble t = -xcoeff1_ / (2 * xcoeff2_);
  if (t > 0 && t < 1) {
    [r addWithDouble:[self XforTWithDouble:t] withDouble:[self YforTWithDouble:t]];
  }
  [r addWithDouble:x1_ withDouble:y1_];
}

- (OrgGeogebraGgbjdkSunAwtGeomCurve *)getSubCurveWithDouble:(jdouble)ystart
                                                 withDouble:(jdouble)yend
                                                    withInt:(jint)dir {
  jdouble t0, t1;
  if (ystart <= y0_) {
    if (yend >= y1_) {
      return [self getWithDirectionWithInt:dir];
    }
    t0 = 0;
  }
  else {
    t0 = OrgGeogebraGgbjdkSunAwtGeomOrder2_TforYWithDouble_withDouble_withDouble_withDouble_(ystart, ycoeff0_, ycoeff1_, ycoeff2_);
  }
  if (yend >= y1_) {
    t1 = 1;
  }
  else {
    t1 = OrgGeogebraGgbjdkSunAwtGeomOrder2_TforYWithDouble_withDouble_withDouble_withDouble_(yend, ycoeff0_, ycoeff1_, ycoeff2_);
  }
  IOSDoubleArray *eqn = [IOSDoubleArray arrayWithLength:10];
  *IOSDoubleArray_GetRef(eqn, 0) = x0_;
  *IOSDoubleArray_GetRef(eqn, 1) = y0_;
  *IOSDoubleArray_GetRef(eqn, 2) = cx0_;
  *IOSDoubleArray_GetRef(eqn, 3) = cy0_;
  *IOSDoubleArray_GetRef(eqn, 4) = x1_;
  *IOSDoubleArray_GetRef(eqn, 5) = y1_;
  if (t1 < 1) {
    OrgGeogebraGgbjdkSunAwtGeomOrder2_splitWithDoubleArray_withInt_withDouble_(eqn, 0, t1);
  }
  jint i;
  if (t0 <= 0) {
    i = 0;
  }
  else {
    OrgGeogebraGgbjdkSunAwtGeomOrder2_splitWithDoubleArray_withInt_withDouble_(eqn, 0, t0 / t1);
    i = 4;
  }
  return [new_OrgGeogebraGgbjdkSunAwtGeomOrder2_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(IOSDoubleArray_Get(eqn, i + 0), ystart, IOSDoubleArray_Get(eqn, i + 2), IOSDoubleArray_Get(eqn, i + 3), IOSDoubleArray_Get(eqn, i + 4), yend, dir) autorelease];
}

- (OrgGeogebraGgbjdkSunAwtGeomCurve *)getReversedCurve {
  return [new_OrgGeogebraGgbjdkSunAwtGeomOrder2_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(x0_, y0_, cx0_, cy0_, x1_, y1_, -direction_) autorelease];
}

- (jint)getSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  *IOSDoubleArray_GetRef(nil_chk(coords), 0) = cx0_;
  *IOSDoubleArray_GetRef(coords, 1) = cy0_;
  if (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) {
    *IOSDoubleArray_GetRef(coords, 2) = x1_;
    *IOSDoubleArray_GetRef(coords, 3) = y1_;
  }
  else {
    *IOSDoubleArray_GetRef(coords, 2) = x0_;
    *IOSDoubleArray_GetRef(coords, 3) = y0_;
  }
  return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_QUADTO;
}

- (NSString *)controlPointString {
  return (JreStrcat("CD$D$", '(', OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_(cx0_), @", ", OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_(cy0_), @"), "));
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "insertWithJavaUtilVector:withDoubleArray:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "insert", "V", 0x9, NULL, NULL },
    { "addInstanceWithJavaUtilVector:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "addInstance", "V", 0x9, NULL, NULL },
    { "getHorizontalParamsWithDouble:withDouble:withDouble:withDoubleArray:", "getHorizontalParams", "I", 0x9, NULL, NULL },
    { "splitWithDoubleArray:withInt:withDouble:", "split", "V", 0x9, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "Order2", NULL, 0x1, NULL, NULL },
    { "getOrder", NULL, "I", 0x1, NULL, NULL },
    { "getXTop", NULL, "D", 0x1, NULL, NULL },
    { "getYTop", NULL, "D", 0x1, NULL, NULL },
    { "getXBot", NULL, "D", 0x1, NULL, NULL },
    { "getYBot", NULL, "D", 0x1, NULL, NULL },
    { "getXMin", NULL, "D", 0x1, NULL, NULL },
    { "getXMax", NULL, "D", 0x1, NULL, NULL },
    { "getX0", NULL, "D", 0x1, NULL, NULL },
    { "getY0", NULL, "D", 0x1, NULL, NULL },
    { "getCX0", NULL, "D", 0x1, NULL, NULL },
    { "getCY0", NULL, "D", 0x1, NULL, NULL },
    { "getX1", NULL, "D", 0x1, NULL, NULL },
    { "getY1", NULL, "D", 0x1, NULL, NULL },
    { "XforYWithDouble:", "XforY", "D", 0x1, NULL, NULL },
    { "TforYWithDouble:", "TforY", "D", 0x1, NULL, NULL },
    { "TforYWithDouble:withDouble:withDouble:withDouble:", "TforY", "D", 0x9, NULL, NULL },
    { "XforTWithDouble:", "XforT", "D", 0x1, NULL, NULL },
    { "YforTWithDouble:", "YforT", "D", 0x1, NULL, NULL },
    { "dXforTWithDouble:withInt:", "dXforT", "D", 0x1, NULL, NULL },
    { "dYforTWithDouble:withInt:", "dYforT", "D", 0x1, NULL, NULL },
    { "nextVerticalWithDouble:withDouble:", "nextVertical", "D", 0x1, NULL, NULL },
    { "enlargeWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:", "enlarge", "V", 0x1, NULL, NULL },
    { "getSubCurveWithDouble:withDouble:withInt:", "getSubCurve", "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", 0x1, NULL, NULL },
    { "getReversedCurve", NULL, "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", 0x1, NULL, NULL },
    { "getSegmentWithDoubleArray:", "getSegment", "I", 0x1, NULL, NULL },
    { "controlPointString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x0_", NULL, 0x2, "D", NULL, NULL,  },
    { "y0_", NULL, 0x2, "D", NULL, NULL,  },
    { "cx0_", NULL, 0x2, "D", NULL, NULL,  },
    { "cy0_", NULL, 0x2, "D", NULL, NULL,  },
    { "x1_", NULL, 0x2, "D", NULL, NULL,  },
    { "y1_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmin_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "xcoeff0_", NULL, 0x2, "D", NULL, NULL,  },
    { "xcoeff1_", NULL, 0x2, "D", NULL, NULL,  },
    { "xcoeff2_", NULL, 0x2, "D", NULL, NULL,  },
    { "ycoeff0_", NULL, 0x2, "D", NULL, NULL,  },
    { "ycoeff1_", NULL, 0x2, "D", NULL, NULL,  },
    { "ycoeff2_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomOrder2 = { 2, "Order2", "org.geogebra.ggbjdk.sun.awt.geom", NULL, 0x10, 31, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomOrder2;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomOrder2_insertWithJavaUtilVector_withDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(JavaUtilVector *curves, IOSDoubleArray *tmp, jdouble x0, jdouble y0, jdouble cx0, jdouble cy0, jdouble x1, jdouble y1, jint direction) {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_initialize();
  jint numparams = OrgGeogebraGgbjdkSunAwtGeomOrder2_getHorizontalParamsWithDouble_withDouble_withDouble_withDoubleArray_(y0, cy0, y1, tmp);
  if (numparams == 0) {
    OrgGeogebraGgbjdkSunAwtGeomOrder2_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, x0, y0, cx0, cy0, x1, y1, direction);
    return;
  }
  jdouble t = IOSDoubleArray_Get(nil_chk(tmp), 0);
  *IOSDoubleArray_GetRef(tmp, 0) = x0;
  *IOSDoubleArray_GetRef(tmp, 1) = y0;
  *IOSDoubleArray_GetRef(tmp, 2) = cx0;
  *IOSDoubleArray_GetRef(tmp, 3) = cy0;
  *IOSDoubleArray_GetRef(tmp, 4) = x1;
  *IOSDoubleArray_GetRef(tmp, 5) = y1;
  OrgGeogebraGgbjdkSunAwtGeomOrder2_splitWithDoubleArray_withInt_withDouble_(tmp, 0, t);
  jint i0 = (direction == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) ? 0 : 4;
  jint i1 = 4 - i0;
  OrgGeogebraGgbjdkSunAwtGeomOrder2_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, IOSDoubleArray_Get(tmp, i0), IOSDoubleArray_Get(tmp, i0 + 1), IOSDoubleArray_Get(tmp, i0 + 2), IOSDoubleArray_Get(tmp, i0 + 3), IOSDoubleArray_Get(tmp, i0 + 4), IOSDoubleArray_Get(tmp, i0 + 5), direction);
  OrgGeogebraGgbjdkSunAwtGeomOrder2_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, IOSDoubleArray_Get(tmp, i1), IOSDoubleArray_Get(tmp, i1 + 1), IOSDoubleArray_Get(tmp, i1 + 2), IOSDoubleArray_Get(tmp, i1 + 3), IOSDoubleArray_Get(tmp, i1 + 4), IOSDoubleArray_Get(tmp, i1 + 5), direction);
}

void OrgGeogebraGgbjdkSunAwtGeomOrder2_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(JavaUtilVector *curves, jdouble x0, jdouble y0, jdouble cx0, jdouble cy0, jdouble x1, jdouble y1, jint direction) {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_initialize();
  if (y0 > y1) {
    [((JavaUtilVector *) nil_chk(curves)) addWithId:[new_OrgGeogebraGgbjdkSunAwtGeomOrder2_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(x1, y1, cx0, cy0, x0, y0, -direction) autorelease]];
  }
  else if (y1 > y0) {
    [((JavaUtilVector *) nil_chk(curves)) addWithId:[new_OrgGeogebraGgbjdkSunAwtGeomOrder2_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(x0, y0, cx0, cy0, x1, y1, direction) autorelease]];
  }
}

jint OrgGeogebraGgbjdkSunAwtGeomOrder2_getHorizontalParamsWithDouble_withDouble_withDouble_withDoubleArray_(jdouble c0, jdouble cp, jdouble c1, IOSDoubleArray *ret) {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_initialize();
  if (c0 <= cp && cp <= c1) {
    return 0;
  }
  c0 -= cp;
  c1 -= cp;
  jdouble denom = c0 + c1;
  if (denom == 0) {
    return 0;
  }
  jdouble t = c0 / denom;
  if (t <= 0 || t >= 1) {
    return 0;
  }
  *IOSDoubleArray_GetRef(nil_chk(ret), 0) = t;
  return 1;
}

void OrgGeogebraGgbjdkSunAwtGeomOrder2_splitWithDoubleArray_withInt_withDouble_(IOSDoubleArray *coords, jint pos, jdouble t) {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_initialize();
  jdouble x0, y0, cx, cy, x1, y1;
  *IOSDoubleArray_GetRef(nil_chk(coords), pos + 8) = x1 = IOSDoubleArray_Get(coords, pos + 4);
  *IOSDoubleArray_GetRef(coords, pos + 9) = y1 = IOSDoubleArray_Get(coords, pos + 5);
  cx = IOSDoubleArray_Get(coords, pos + 2);
  cy = IOSDoubleArray_Get(coords, pos + 3);
  x1 = cx + (x1 - cx) * t;
  y1 = cy + (y1 - cy) * t;
  x0 = IOSDoubleArray_Get(coords, pos + 0);
  y0 = IOSDoubleArray_Get(coords, pos + 1);
  x0 = x0 + (cx - x0) * t;
  y0 = y0 + (cy - y0) * t;
  cx = x0 + (x1 - x0) * t;
  cy = y0 + (y1 - y0) * t;
  *IOSDoubleArray_GetRef(coords, pos + 2) = x0;
  *IOSDoubleArray_GetRef(coords, pos + 3) = y0;
  *IOSDoubleArray_GetRef(coords, pos + 4) = cx;
  *IOSDoubleArray_GetRef(coords, pos + 5) = cy;
  *IOSDoubleArray_GetRef(coords, pos + 6) = x1;
  *IOSDoubleArray_GetRef(coords, pos + 7) = y1;
}

void OrgGeogebraGgbjdkSunAwtGeomOrder2_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(OrgGeogebraGgbjdkSunAwtGeomOrder2 *self, jdouble x0, jdouble y0, jdouble cx0, jdouble cy0, jdouble x1, jdouble y1, jint direction) {
  OrgGeogebraGgbjdkSunAwtGeomCurve_initWithInt_(self, direction);
  if (cy0 < y0) {
    cy0 = y0;
  }
  else if (cy0 > y1) {
    cy0 = y1;
  }
  self->x0_ = x0;
  self->y0_ = y0;
  self->cx0_ = cx0;
  self->cy0_ = cy0;
  self->x1_ = x1;
  self->y1_ = y1;
  self->xmin_ = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(x0, x1), cx0);
  self->xmax_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(x0, x1), cx0);
  self->xcoeff0_ = x0;
  self->xcoeff1_ = cx0 + cx0 - x0 - x0;
  self->xcoeff2_ = x0 - cx0 - cx0 + x1;
  self->ycoeff0_ = y0;
  self->ycoeff1_ = cy0 + cy0 - y0 - y0;
  self->ycoeff2_ = y0 - cy0 - cy0 + y1;
}

OrgGeogebraGgbjdkSunAwtGeomOrder2 *new_OrgGeogebraGgbjdkSunAwtGeomOrder2_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble x0, jdouble y0, jdouble cx0, jdouble cy0, jdouble x1, jdouble y1, jint direction) {
  OrgGeogebraGgbjdkSunAwtGeomOrder2 *self = [OrgGeogebraGgbjdkSunAwtGeomOrder2 alloc];
  OrgGeogebraGgbjdkSunAwtGeomOrder2_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, x0, y0, cx0, cy0, x1, y1, direction);
  return self;
}

jdouble OrgGeogebraGgbjdkSunAwtGeomOrder2_TforYWithDouble_withDouble_withDouble_withDouble_(jdouble y, jdouble ycoeff0, jdouble ycoeff1, jdouble ycoeff2) {
  OrgGeogebraGgbjdkSunAwtGeomOrder2_initialize();
  ycoeff0 -= y;
  if (ycoeff2 == 0.0) {
    jdouble root = -ycoeff0 / ycoeff1;
    if (root >= 0 && root <= 1) {
      return root;
    }
  }
  else {
    jdouble d = ycoeff1 * ycoeff1 - 4.0 * ycoeff2 * ycoeff0;
    if (d >= 0.0) {
      d = JavaLangMath_sqrtWithDouble_(d);
      if (ycoeff1 < 0.0) {
        d = -d;
      }
      jdouble q = (ycoeff1 + d) / -2.0;
      jdouble root = q / ycoeff2;
      if (root >= 0 && root <= 1) {
        return root;
      }
      if (q != 0.0) {
        root = ycoeff0 / q;
        if (root >= 0 && root <= 1) {
          return root;
        }
      }
    }
  }
  jdouble y0 = ycoeff0;
  jdouble y1 = ycoeff0 + ycoeff1 + ycoeff2;
  return (0 < (y0 + y1) / 2) ? 0.0 : 1.0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomOrder2)
