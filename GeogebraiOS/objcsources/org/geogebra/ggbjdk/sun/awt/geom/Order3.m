//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/ggbjdk/sun/awt/geom/Order3.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Vector.h"
#include "org/geogebra/ggbjdk/java/awt/geom/PathIterator.h"
#include "org/geogebra/ggbjdk/java/awt/geom/QuadCurve2D.h"
#include "org/geogebra/ggbjdk/java/awt/geom/Rectangle2D.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Curve.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Order2.h"
#include "org/geogebra/ggbjdk/sun/awt/geom/Order3.h"

@interface OrgGeogebraGgbjdkSunAwtGeomOrder3 () {
 @public
  jdouble x0_;
  jdouble y0_;
  jdouble cx0_;
  jdouble cy0_;
  jdouble cx1_;
  jdouble cy1_;
  jdouble x1_;
  jdouble y1_;
  jdouble xmin_;
  jdouble xmax_;
  jdouble xcoeff0_;
  jdouble xcoeff1_;
  jdouble xcoeff2_;
  jdouble xcoeff3_;
  jdouble ycoeff0_;
  jdouble ycoeff1_;
  jdouble ycoeff2_;
  jdouble ycoeff3_;
  jdouble TforY1_;
  jdouble YforT1_;
  jdouble TforY2_;
  jdouble YforT2_;
  jdouble TforY3_;
  jdouble YforT3_;
}

@end

@implementation OrgGeogebraGgbjdkSunAwtGeomOrder3

+ (void)insertWithJavaUtilVector:(JavaUtilVector *)curves
                 withDoubleArray:(IOSDoubleArray *)tmp
                      withDouble:(jdouble)x0
                      withDouble:(jdouble)y0
                      withDouble:(jdouble)cx0
                      withDouble:(jdouble)cy0
                      withDouble:(jdouble)cx1
                      withDouble:(jdouble)cy1
                      withDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                         withInt:(jint)direction {
  OrgGeogebraGgbjdkSunAwtGeomOrder3_insertWithJavaUtilVector_withDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, tmp, x0, y0, cx0, cy0, cx1, cy1, x1, y1, direction);
}

+ (void)addInstanceWithJavaUtilVector:(JavaUtilVector *)curves
                           withDouble:(jdouble)x0
                           withDouble:(jdouble)y0
                           withDouble:(jdouble)cx0
                           withDouble:(jdouble)cy0
                           withDouble:(jdouble)cx1
                           withDouble:(jdouble)cy1
                           withDouble:(jdouble)x1
                           withDouble:(jdouble)y1
                              withInt:(jint)direction {
  OrgGeogebraGgbjdkSunAwtGeomOrder3_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, x0, y0, cx0, cy0, cx1, cy1, x1, y1, direction);
}

+ (jint)getHorizontalParamsWithDouble:(jdouble)c0
                           withDouble:(jdouble)cp0
                           withDouble:(jdouble)cp1
                           withDouble:(jdouble)c1
                      withDoubleArray:(IOSDoubleArray *)ret {
  return OrgGeogebraGgbjdkSunAwtGeomOrder3_getHorizontalParamsWithDouble_withDouble_withDouble_withDouble_withDoubleArray_(c0, cp0, cp1, c1, ret);
}

+ (void)splitWithDoubleArray:(IOSDoubleArray *)coords
                     withInt:(jint)pos
                  withDouble:(jdouble)t {
  OrgGeogebraGgbjdkSunAwtGeomOrder3_splitWithDoubleArray_withInt_withDouble_(coords, pos, t);
}

- (instancetype)initWithDouble:(jdouble)x0
                    withDouble:(jdouble)y0
                    withDouble:(jdouble)cx0
                    withDouble:(jdouble)cy0
                    withDouble:(jdouble)cx1
                    withDouble:(jdouble)cy1
                    withDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                       withInt:(jint)direction {
  OrgGeogebraGgbjdkSunAwtGeomOrder3_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, x0, y0, cx0, cy0, cx1, cy1, x1, y1, direction);
  return self;
}

- (jint)getOrder {
  return 3;
}

- (jdouble)getXTop {
  return x0_;
}

- (jdouble)getYTop {
  return y0_;
}

- (jdouble)getXBot {
  return x1_;
}

- (jdouble)getYBot {
  return y1_;
}

- (jdouble)getXMin {
  return xmin_;
}

- (jdouble)getXMax {
  return xmax_;
}

- (jdouble)getX0 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) ? x0_ : x1_;
}

- (jdouble)getY0 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) ? y0_ : y1_;
}

- (jdouble)getCX0 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) ? cx0_ : cx1_;
}

- (jdouble)getCY0 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) ? cy0_ : cy1_;
}

- (jdouble)getCX1 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING) ? cx0_ : cx1_;
}

- (jdouble)getCY1 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING) ? cy0_ : cy1_;
}

- (jdouble)getX1 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING) ? x0_ : x1_;
}

- (jdouble)getY1 {
  return (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING) ? y0_ : y1_;
}

- (jdouble)TforYWithDouble:(jdouble)y {
  if (y <= y0_) return 0;
  if (y >= y1_) return 1;
  if (y == YforT1_) return TforY1_;
  if (y == YforT2_) return TforY2_;
  if (y == YforT3_) return TforY3_;
  if (ycoeff3_ == 0.0) {
    return OrgGeogebraGgbjdkSunAwtGeomOrder2_TforYWithDouble_withDouble_withDouble_withDouble_(y, ycoeff0_, ycoeff1_, ycoeff2_);
  }
  jdouble a = ycoeff2_ / ycoeff3_;
  jdouble b = ycoeff1_ / ycoeff3_;
  jdouble c = (ycoeff0_ - y) / ycoeff3_;
  jint roots = 0;
  jdouble Q = (a * a - 3.0 * b) / 9.0;
  jdouble R = (2.0 * a * a * a - 9.0 * a * b + 27.0 * c) / 54.0;
  jdouble R2 = R * R;
  jdouble Q3 = Q * Q * Q;
  jdouble a_3 = a / 3.0;
  jdouble t;
  if (R2 < Q3) {
    jdouble theta = JavaLangMath_acosWithDouble_(R / JavaLangMath_sqrtWithDouble_(Q3));
    Q = -2.0 * JavaLangMath_sqrtWithDouble_(Q);
    t = [self refineWithDouble:a withDouble:b withDouble:c withDouble:y withDouble:Q * JavaLangMath_cosWithDouble_(theta / 3.0) - a_3];
    if (t < 0) {
      t = [self refineWithDouble:a withDouble:b withDouble:c withDouble:y withDouble:Q * JavaLangMath_cosWithDouble_((theta + JavaLangMath_PI * 2.0) / 3.0) - a_3];
    }
    if (t < 0) {
      t = [self refineWithDouble:a withDouble:b withDouble:c withDouble:y withDouble:Q * JavaLangMath_cosWithDouble_((theta - JavaLangMath_PI * 2.0) / 3.0) - a_3];
    }
  }
  else {
    jboolean neg = (R < 0.0);
    jdouble S = JavaLangMath_sqrtWithDouble_(R2 - Q3);
    if (neg) {
      R = -R;
    }
    jdouble A = JavaLangMath_powWithDouble_withDouble_(R + S, 1.0 / 3.0);
    if (!neg) {
      A = -A;
    }
    jdouble B = (A == 0.0) ? 0.0 : (Q / A);
    t = [self refineWithDouble:a withDouble:b withDouble:c withDouble:y withDouble:(A + B) - a_3];
  }
  if (t < 0) {
    jdouble t0 = 0;
    jdouble t1 = 1;
    while (YES) {
      t = (t0 + t1) / 2;
      if (t == t0 || t == t1) {
        break;
      }
      jdouble yt = [self YforTWithDouble:t];
      if (yt < y) {
        t0 = t;
      }
      else if (yt > y) {
        t1 = t;
      }
      else {
        break;
      }
    }
  }
  if (t >= 0) {
    TforY3_ = TforY2_;
    YforT3_ = YforT2_;
    TforY2_ = TforY1_;
    YforT2_ = YforT1_;
    TforY1_ = t;
    YforT1_ = y;
  }
  return t;
}

- (jdouble)refineWithDouble:(jdouble)a
                 withDouble:(jdouble)b
                 withDouble:(jdouble)c
                 withDouble:(jdouble)target
                 withDouble:(jdouble)t {
  if (t < -0.1 || t > 1.1) {
    return -1;
  }
  jdouble y = [self YforTWithDouble:t];
  jdouble t0, t1;
  if (y < target) {
    t0 = t;
    t1 = 1;
  }
  else {
    t0 = 0;
    t1 = t;
  }
  jdouble origt = t;
  jdouble origy = y;
  jboolean useslope = YES;
  while (y != target) {
    if (!useslope) {
      jdouble t2 = (t0 + t1) / 2;
      if (t2 == t0 || t2 == t1) {
        break;
      }
      t = t2;
    }
    else {
      jdouble slope = [self dYforTWithDouble:t withInt:1];
      if (slope == 0) {
        useslope = NO;
        continue;
      }
      jdouble t2 = t + ((target - y) / slope);
      if (t2 == t || t2 <= t0 || t2 >= t1) {
        useslope = NO;
        continue;
      }
      t = t2;
    }
    y = [self YforTWithDouble:t];
    if (y < target) {
      t0 = t;
    }
    else if (y > target) {
      t1 = t;
    }
    else {
      break;
    }
  }
  return (t > 1) ? -1 : t;
}

- (jdouble)XforYWithDouble:(jdouble)y {
  if (y <= y0_) {
    return x0_;
  }
  if (y >= y1_) {
    return x1_;
  }
  return [self XforTWithDouble:[self TforYWithDouble:y]];
}

- (jdouble)XforTWithDouble:(jdouble)t {
  return (((xcoeff3_ * t) + xcoeff2_) * t + xcoeff1_) * t + xcoeff0_;
}

- (jdouble)YforTWithDouble:(jdouble)t {
  return (((ycoeff3_ * t) + ycoeff2_) * t + ycoeff1_) * t + ycoeff0_;
}

- (jdouble)dXforTWithDouble:(jdouble)t
                    withInt:(jint)deriv {
  switch (deriv) {
    case 0:
    return (((xcoeff3_ * t) + xcoeff2_) * t + xcoeff1_) * t + xcoeff0_;
    case 1:
    return ((3 * xcoeff3_ * t) + 2 * xcoeff2_) * t + xcoeff1_;
    case 2:
    return (6 * xcoeff3_ * t) + 2 * xcoeff2_;
    case 3:
    return 6 * xcoeff3_;
    default:
    return 0;
  }
}

- (jdouble)dYforTWithDouble:(jdouble)t
                    withInt:(jint)deriv {
  switch (deriv) {
    case 0:
    return (((ycoeff3_ * t) + ycoeff2_) * t + ycoeff1_) * t + ycoeff0_;
    case 1:
    return ((3 * ycoeff3_ * t) + 2 * ycoeff2_) * t + ycoeff1_;
    case 2:
    return (6 * ycoeff3_ * t) + 2 * ycoeff2_;
    case 3:
    return 6 * ycoeff3_;
    default:
    return 0;
  }
}

- (jdouble)nextVerticalWithDouble:(jdouble)t0
                       withDouble:(jdouble)t1 {
  IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ xcoeff1_, 2 * xcoeff2_, 3 * xcoeff3_ } count:3];
  jint numroots = OrgGeogebraGgbjdkJavaAwtGeomQuadCurve2D_solveQuadraticWithDoubleArray_withDoubleArray_(eqn, eqn);
  for (jint i = 0; i < numroots; i++) {
    if (IOSDoubleArray_Get(eqn, i) > t0 && IOSDoubleArray_Get(eqn, i) < t1) {
      t1 = IOSDoubleArray_Get(eqn, i);
    }
  }
  return t1;
}

- (void)enlargeWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:(OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *)r {
  [((OrgGeogebraGgbjdkJavaAwtGeomRectangle2D *) nil_chk(r)) addWithDouble:x0_ withDouble:y0_];
  IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ xcoeff1_, 2 * xcoeff2_, 3 * xcoeff3_ } count:3];
  jint numroots = OrgGeogebraGgbjdkJavaAwtGeomQuadCurve2D_solveQuadraticWithDoubleArray_withDoubleArray_(eqn, eqn);
  for (jint i = 0; i < numroots; i++) {
    jdouble t = IOSDoubleArray_Get(eqn, i);
    if (t > 0 && t < 1) {
      [r addWithDouble:[self XforTWithDouble:t] withDouble:[self YforTWithDouble:t]];
    }
  }
  [r addWithDouble:x1_ withDouble:y1_];
}

- (OrgGeogebraGgbjdkSunAwtGeomCurve *)getSubCurveWithDouble:(jdouble)ystart
                                                 withDouble:(jdouble)yend
                                                    withInt:(jint)dir {
  if (ystart <= y0_ && yend >= y1_) {
    return [self getWithDirectionWithInt:dir];
  }
  IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithLength:14];
  jdouble t0, t1;
  t0 = [self TforYWithDouble:ystart];
  t1 = [self TforYWithDouble:yend];
  *IOSDoubleArray_GetRef(eqn, 0) = x0_;
  *IOSDoubleArray_GetRef(eqn, 1) = y0_;
  *IOSDoubleArray_GetRef(eqn, 2) = cx0_;
  *IOSDoubleArray_GetRef(eqn, 3) = cy0_;
  *IOSDoubleArray_GetRef(eqn, 4) = cx1_;
  *IOSDoubleArray_GetRef(eqn, 5) = cy1_;
  *IOSDoubleArray_GetRef(eqn, 6) = x1_;
  *IOSDoubleArray_GetRef(eqn, 7) = y1_;
  if (t0 > t1) {
    jdouble t = t0;
    t0 = t1;
    t1 = t;
  }
  if (t1 < 1) {
    OrgGeogebraGgbjdkSunAwtGeomOrder3_splitWithDoubleArray_withInt_withDouble_(eqn, 0, t1);
  }
  jint i;
  if (t0 <= 0) {
    i = 0;
  }
  else {
    OrgGeogebraGgbjdkSunAwtGeomOrder3_splitWithDoubleArray_withInt_withDouble_(eqn, 0, t0 / t1);
    i = 6;
  }
  return new_OrgGeogebraGgbjdkSunAwtGeomOrder3_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(IOSDoubleArray_Get(eqn, i + 0), ystart, IOSDoubleArray_Get(eqn, i + 2), IOSDoubleArray_Get(eqn, i + 3), IOSDoubleArray_Get(eqn, i + 4), IOSDoubleArray_Get(eqn, i + 5), IOSDoubleArray_Get(eqn, i + 6), yend, dir);
}

- (OrgGeogebraGgbjdkSunAwtGeomCurve *)getReversedCurve {
  return new_OrgGeogebraGgbjdkSunAwtGeomOrder3_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(x0_, y0_, cx0_, cy0_, cx1_, cy1_, x1_, y1_, -direction_);
}

- (jint)getSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if (direction_ == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) {
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = cx0_;
    *IOSDoubleArray_GetRef(coords, 1) = cy0_;
    *IOSDoubleArray_GetRef(coords, 2) = cx1_;
    *IOSDoubleArray_GetRef(coords, 3) = cy1_;
    *IOSDoubleArray_GetRef(coords, 4) = x1_;
    *IOSDoubleArray_GetRef(coords, 5) = y1_;
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = cx1_;
    *IOSDoubleArray_GetRef(coords, 1) = cy1_;
    *IOSDoubleArray_GetRef(coords, 2) = cx0_;
    *IOSDoubleArray_GetRef(coords, 3) = cy0_;
    *IOSDoubleArray_GetRef(coords, 4) = x0_;
    *IOSDoubleArray_GetRef(coords, 5) = y0_;
  }
  return OrgGeogebraGgbjdkJavaAwtGeomPathIterator_SEG_CUBICTO;
}

- (NSString *)controlPointString {
  return (JreStrcat("$$", (JreStrcat("CD$D$", '(', OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_([self getCX0]), @", ", OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_([self getCY0]), @"), ")), (JreStrcat("CD$D$", '(', OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_([self getCX1]), @", ", OrgGeogebraGgbjdkSunAwtGeomCurve_roundWithDouble_([self getCY1]), @"), "))));
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "insertWithJavaUtilVector:withDoubleArray:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "insert", "V", 0x9, NULL, NULL },
    { "addInstanceWithJavaUtilVector:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "addInstance", "V", 0x9, NULL, NULL },
    { "getHorizontalParamsWithDouble:withDouble:withDouble:withDouble:withDoubleArray:", "getHorizontalParams", "I", 0x9, NULL, NULL },
    { "splitWithDoubleArray:withInt:withDouble:", "split", "V", 0x9, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "Order3", NULL, 0x1, NULL, NULL },
    { "getOrder", NULL, "I", 0x1, NULL, NULL },
    { "getXTop", NULL, "D", 0x1, NULL, NULL },
    { "getYTop", NULL, "D", 0x1, NULL, NULL },
    { "getXBot", NULL, "D", 0x1, NULL, NULL },
    { "getYBot", NULL, "D", 0x1, NULL, NULL },
    { "getXMin", NULL, "D", 0x1, NULL, NULL },
    { "getXMax", NULL, "D", 0x1, NULL, NULL },
    { "getX0", NULL, "D", 0x1, NULL, NULL },
    { "getY0", NULL, "D", 0x1, NULL, NULL },
    { "getCX0", NULL, "D", 0x1, NULL, NULL },
    { "getCY0", NULL, "D", 0x1, NULL, NULL },
    { "getCX1", NULL, "D", 0x1, NULL, NULL },
    { "getCY1", NULL, "D", 0x1, NULL, NULL },
    { "getX1", NULL, "D", 0x1, NULL, NULL },
    { "getY1", NULL, "D", 0x1, NULL, NULL },
    { "TforYWithDouble:", "TforY", "D", 0x1, NULL, NULL },
    { "refineWithDouble:withDouble:withDouble:withDouble:withDouble:", "refine", "D", 0x1, NULL, NULL },
    { "XforYWithDouble:", "XforY", "D", 0x1, NULL, NULL },
    { "XforTWithDouble:", "XforT", "D", 0x1, NULL, NULL },
    { "YforTWithDouble:", "YforT", "D", 0x1, NULL, NULL },
    { "dXforTWithDouble:withInt:", "dXforT", "D", 0x1, NULL, NULL },
    { "dYforTWithDouble:withInt:", "dYforT", "D", 0x1, NULL, NULL },
    { "nextVerticalWithDouble:withDouble:", "nextVertical", "D", 0x1, NULL, NULL },
    { "enlargeWithOrgGeogebraGgbjdkJavaAwtGeomRectangle2D:", "enlarge", "V", 0x1, NULL, NULL },
    { "getSubCurveWithDouble:withDouble:withInt:", "getSubCurve", "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", 0x1, NULL, NULL },
    { "getReversedCurve", NULL, "Lorg.geogebra.ggbjdk.sun.awt.geom.Curve;", 0x1, NULL, NULL },
    { "getSegmentWithDoubleArray:", "getSegment", "I", 0x1, NULL, NULL },
    { "controlPointString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x0_", NULL, 0x2, "D", NULL, NULL,  },
    { "y0_", NULL, 0x2, "D", NULL, NULL,  },
    { "cx0_", NULL, 0x2, "D", NULL, NULL,  },
    { "cy0_", NULL, 0x2, "D", NULL, NULL,  },
    { "cx1_", NULL, 0x2, "D", NULL, NULL,  },
    { "cy1_", NULL, 0x2, "D", NULL, NULL,  },
    { "x1_", NULL, 0x2, "D", NULL, NULL,  },
    { "y1_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmin_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "xcoeff0_", NULL, 0x2, "D", NULL, NULL,  },
    { "xcoeff1_", NULL, 0x2, "D", NULL, NULL,  },
    { "xcoeff2_", NULL, 0x2, "D", NULL, NULL,  },
    { "xcoeff3_", NULL, 0x2, "D", NULL, NULL,  },
    { "ycoeff0_", NULL, 0x2, "D", NULL, NULL,  },
    { "ycoeff1_", NULL, 0x2, "D", NULL, NULL,  },
    { "ycoeff2_", NULL, 0x2, "D", NULL, NULL,  },
    { "ycoeff3_", NULL, 0x2, "D", NULL, NULL,  },
    { "TforY1_", NULL, 0x2, "D", NULL, NULL,  },
    { "YforT1_", NULL, 0x2, "D", NULL, NULL,  },
    { "TforY2_", NULL, 0x2, "D", NULL, NULL,  },
    { "YforT2_", NULL, 0x2, "D", NULL, NULL,  },
    { "TforY3_", NULL, 0x2, "D", NULL, NULL,  },
    { "YforT3_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraGgbjdkSunAwtGeomOrder3 = { 2, "Order3", "org.geogebra.ggbjdk.sun.awt.geom", NULL, 0x10, 33, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraGgbjdkSunAwtGeomOrder3;
}

@end

void OrgGeogebraGgbjdkSunAwtGeomOrder3_insertWithJavaUtilVector_withDoubleArray_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(JavaUtilVector *curves, IOSDoubleArray *tmp, jdouble x0, jdouble y0, jdouble cx0, jdouble cy0, jdouble cx1, jdouble cy1, jdouble x1, jdouble y1, jint direction) {
  OrgGeogebraGgbjdkSunAwtGeomOrder3_initialize();
  jint numparams = OrgGeogebraGgbjdkSunAwtGeomOrder3_getHorizontalParamsWithDouble_withDouble_withDouble_withDouble_withDoubleArray_(y0, cy0, cy1, y1, tmp);
  if (numparams == 0) {
    OrgGeogebraGgbjdkSunAwtGeomOrder3_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, x0, y0, cx0, cy0, cx1, cy1, x1, y1, direction);
    return;
  }
  *IOSDoubleArray_GetRef(nil_chk(tmp), 3) = x0;
  *IOSDoubleArray_GetRef(tmp, 4) = y0;
  *IOSDoubleArray_GetRef(tmp, 5) = cx0;
  *IOSDoubleArray_GetRef(tmp, 6) = cy0;
  *IOSDoubleArray_GetRef(tmp, 7) = cx1;
  *IOSDoubleArray_GetRef(tmp, 8) = cy1;
  *IOSDoubleArray_GetRef(tmp, 9) = x1;
  *IOSDoubleArray_GetRef(tmp, 10) = y1;
  jdouble t = IOSDoubleArray_Get(tmp, 0);
  if (numparams > 1 && t > IOSDoubleArray_Get(tmp, 1)) {
    *IOSDoubleArray_GetRef(tmp, 0) = IOSDoubleArray_Get(tmp, 1);
    *IOSDoubleArray_GetRef(tmp, 1) = t;
    t = IOSDoubleArray_Get(tmp, 0);
  }
  OrgGeogebraGgbjdkSunAwtGeomOrder3_splitWithDoubleArray_withInt_withDouble_(tmp, 3, t);
  if (numparams > 1) {
    t = (IOSDoubleArray_Get(tmp, 1) - t) / (1 - t);
    OrgGeogebraGgbjdkSunAwtGeomOrder3_splitWithDoubleArray_withInt_withDouble_(tmp, 9, t);
  }
  jint index = 3;
  if (direction == OrgGeogebraGgbjdkSunAwtGeomCurve_DECREASING) {
    index += numparams * 6;
  }
  while (numparams >= 0) {
    OrgGeogebraGgbjdkSunAwtGeomOrder3_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(curves, IOSDoubleArray_Get(tmp, index + 0), IOSDoubleArray_Get(tmp, index + 1), IOSDoubleArray_Get(tmp, index + 2), IOSDoubleArray_Get(tmp, index + 3), IOSDoubleArray_Get(tmp, index + 4), IOSDoubleArray_Get(tmp, index + 5), IOSDoubleArray_Get(tmp, index + 6), IOSDoubleArray_Get(tmp, index + 7), direction);
    numparams--;
    if (direction == OrgGeogebraGgbjdkSunAwtGeomCurve_INCREASING) {
      index += 6;
    }
    else {
      index -= 6;
    }
  }
}

void OrgGeogebraGgbjdkSunAwtGeomOrder3_addInstanceWithJavaUtilVector_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(JavaUtilVector *curves, jdouble x0, jdouble y0, jdouble cx0, jdouble cy0, jdouble cx1, jdouble cy1, jdouble x1, jdouble y1, jint direction) {
  OrgGeogebraGgbjdkSunAwtGeomOrder3_initialize();
  if (y0 > y1) {
    [((JavaUtilVector *) nil_chk(curves)) addWithId:new_OrgGeogebraGgbjdkSunAwtGeomOrder3_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(x1, y1, cx1, cy1, cx0, cy0, x0, y0, -direction)];
  }
  else if (y1 > y0) {
    [((JavaUtilVector *) nil_chk(curves)) addWithId:new_OrgGeogebraGgbjdkSunAwtGeomOrder3_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(x0, y0, cx0, cy0, cx1, cy1, x1, y1, direction)];
  }
}

jint OrgGeogebraGgbjdkSunAwtGeomOrder3_getHorizontalParamsWithDouble_withDouble_withDouble_withDouble_withDoubleArray_(jdouble c0, jdouble cp0, jdouble cp1, jdouble c1, IOSDoubleArray *ret) {
  OrgGeogebraGgbjdkSunAwtGeomOrder3_initialize();
  if (c0 <= cp0 && cp0 <= cp1 && cp1 <= c1) {
    return 0;
  }
  c1 -= cp1;
  cp1 -= cp0;
  cp0 -= c0;
  *IOSDoubleArray_GetRef(nil_chk(ret), 0) = cp0;
  *IOSDoubleArray_GetRef(ret, 1) = (cp1 - cp0) * 2;
  *IOSDoubleArray_GetRef(ret, 2) = (c1 - cp1 - cp1 + cp0);
  jint numroots = OrgGeogebraGgbjdkJavaAwtGeomQuadCurve2D_solveQuadraticWithDoubleArray_withDoubleArray_(ret, ret);
  jint j = 0;
  for (jint i = 0; i < numroots; i++) {
    jdouble t = IOSDoubleArray_Get(ret, i);
    if (t > 0 && t < 1) {
      if (j < i) {
        *IOSDoubleArray_GetRef(ret, j) = t;
      }
      j++;
    }
  }
  return j;
}

void OrgGeogebraGgbjdkSunAwtGeomOrder3_splitWithDoubleArray_withInt_withDouble_(IOSDoubleArray *coords, jint pos, jdouble t) {
  OrgGeogebraGgbjdkSunAwtGeomOrder3_initialize();
  jdouble x0, y0, cx0, cy0, cx1, cy1, x1, y1;
  *IOSDoubleArray_GetRef(nil_chk(coords), pos + 12) = x1 = IOSDoubleArray_Get(coords, pos + 6);
  *IOSDoubleArray_GetRef(coords, pos + 13) = y1 = IOSDoubleArray_Get(coords, pos + 7);
  cx1 = IOSDoubleArray_Get(coords, pos + 4);
  cy1 = IOSDoubleArray_Get(coords, pos + 5);
  x1 = cx1 + (x1 - cx1) * t;
  y1 = cy1 + (y1 - cy1) * t;
  x0 = IOSDoubleArray_Get(coords, pos + 0);
  y0 = IOSDoubleArray_Get(coords, pos + 1);
  cx0 = IOSDoubleArray_Get(coords, pos + 2);
  cy0 = IOSDoubleArray_Get(coords, pos + 3);
  x0 = x0 + (cx0 - x0) * t;
  y0 = y0 + (cy0 - y0) * t;
  cx0 = cx0 + (cx1 - cx0) * t;
  cy0 = cy0 + (cy1 - cy0) * t;
  cx1 = cx0 + (x1 - cx0) * t;
  cy1 = cy0 + (y1 - cy0) * t;
  cx0 = x0 + (cx0 - x0) * t;
  cy0 = y0 + (cy0 - y0) * t;
  *IOSDoubleArray_GetRef(coords, pos + 2) = x0;
  *IOSDoubleArray_GetRef(coords, pos + 3) = y0;
  *IOSDoubleArray_GetRef(coords, pos + 4) = cx0;
  *IOSDoubleArray_GetRef(coords, pos + 5) = cy0;
  *IOSDoubleArray_GetRef(coords, pos + 6) = cx0 + (cx1 - cx0) * t;
  *IOSDoubleArray_GetRef(coords, pos + 7) = cy0 + (cy1 - cy0) * t;
  *IOSDoubleArray_GetRef(coords, pos + 8) = cx1;
  *IOSDoubleArray_GetRef(coords, pos + 9) = cy1;
  *IOSDoubleArray_GetRef(coords, pos + 10) = x1;
  *IOSDoubleArray_GetRef(coords, pos + 11) = y1;
}

void OrgGeogebraGgbjdkSunAwtGeomOrder3_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(OrgGeogebraGgbjdkSunAwtGeomOrder3 *self, jdouble x0, jdouble y0, jdouble cx0, jdouble cy0, jdouble cx1, jdouble cy1, jdouble x1, jdouble y1, jint direction) {
  (void) OrgGeogebraGgbjdkSunAwtGeomCurve_initWithInt_(self, direction);
  if (cy0 < y0) cy0 = y0;
  if (cy1 > y1) cy1 = y1;
  self->x0_ = x0;
  self->y0_ = y0;
  self->cx0_ = cx0;
  self->cy0_ = cy0;
  self->cx1_ = cx1;
  self->cy1_ = cy1;
  self->x1_ = x1;
  self->y1_ = y1;
  self->xmin_ = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(x0, x1), JavaLangMath_minWithDouble_withDouble_(cx0, cx1));
  self->xmax_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(x0, x1), JavaLangMath_maxWithDouble_withDouble_(cx0, cx1));
  self->xcoeff0_ = x0;
  self->xcoeff1_ = (cx0 - x0) * 3.0;
  self->xcoeff2_ = (cx1 - cx0 - cx0 + x0) * 3.0;
  self->xcoeff3_ = x1 - (cx1 - cx0) * 3.0 - x0;
  self->ycoeff0_ = y0;
  self->ycoeff1_ = (cy0 - y0) * 3.0;
  self->ycoeff2_ = (cy1 - cy0 - cy0 + y0) * 3.0;
  self->ycoeff3_ = y1 - (cy1 - cy0) * 3.0 - y0;
  self->YforT1_ = self->YforT2_ = self->YforT3_ = y0;
}

OrgGeogebraGgbjdkSunAwtGeomOrder3 *new_OrgGeogebraGgbjdkSunAwtGeomOrder3_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble x0, jdouble y0, jdouble cx0, jdouble cy0, jdouble cx1, jdouble cy1, jdouble x1, jdouble y1, jint direction) {
  OrgGeogebraGgbjdkSunAwtGeomOrder3 *self = [OrgGeogebraGgbjdkSunAwtGeomOrder3 alloc];
  OrgGeogebraGgbjdkSunAwtGeomOrder3_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, x0, y0, cx0, cy0, cx1, cy1, x1, y1, direction);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraGgbjdkSunAwtGeomOrder3)
