//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/awt/GColor.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/factories/AwtFactory.h"

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_WHITE_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_BLACK_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_RED_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_ORANGE_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_YELLOW_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_GREEN_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_BLUE_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_CYAN_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_DARK_CYAN_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_DARK_GREEN_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_MAGENTA_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_LIGHT_GRAY_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_GRAY_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonAwtGColor_DARK_GRAY_;

@implementation OrgGeogebraCommonAwtGColor

+ (void)initColorsWithOrgGeogebraCommonFactoriesAwtFactory:(OrgGeogebraCommonFactoriesAwtFactory *)f {
  OrgGeogebraCommonAwtGColor_initColorsWithOrgGeogebraCommonFactoriesAwtFactory_(f);
}

- (jint)getRed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getBlue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getGreen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getAlpha {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)getRGBColorComponentsWithFloatArray:(IOSFloatArray *)rgb {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (jint)HSBtoRGBWithFloat:(jfloat)hue
                withFloat:(jfloat)saturation
                withFloat:(jfloat)brightness {
  return OrgGeogebraCommonAwtGColor_HSBtoRGBWithFloat_withFloat_withFloat_(hue, saturation, brightness);
}

- (OrgGeogebraCommonAwtGColor *)darker {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonAwtGColor *)brighter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (NSString *)getColorStringWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)fillColor {
  return OrgGeogebraCommonAwtGColor_getColorStringWithOrgGeogebraCommonAwtGColor_(fillColor);
}

- (jint)getRGB {
  jint red = [self getRed];
  if (red > 255) red = 255;
  if (red < 0) red = 0;
  jint green = [self getGreen];
  if (green > 255) green = 255;
  if (green < 0) green = 0;
  jint blue = [self getBlue];
  if (blue > 255) blue = 255;
  if (blue < 0) blue = 0;
  jint alpha = [self getAlpha];
  if (alpha > 255) alpha = 255;
  if (alpha < 0) alpha = 0;
  return ((alpha * 256 + red) * 256 + green) * 256 + blue;
}

- (jdouble)getGrayScale {
  return 0.2989 * [self getRed] + 0.5870 * [self getGreen] + 0.1140 * [self getBlue];
}

- (instancetype)init {
  OrgGeogebraCommonAwtGColor_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initColorsWithOrgGeogebraCommonFactoriesAwtFactory:", "initColors", "V", 0x9, NULL, NULL },
    { "getRed", NULL, "I", 0x401, NULL, NULL },
    { "getBlue", NULL, "I", 0x401, NULL, NULL },
    { "getGreen", NULL, "I", 0x401, NULL, NULL },
    { "getAlpha", NULL, "I", 0x401, NULL, NULL },
    { "getRGBColorComponentsWithFloatArray:", "getRGBColorComponents", "V", 0x401, NULL, NULL },
    { "HSBtoRGBWithFloat:withFloat:withFloat:", "HSBtoRGB", "I", 0x9, NULL, NULL },
    { "darker", NULL, "Lorg.geogebra.common.awt.GColor;", 0x401, NULL, NULL },
    { "brighter", NULL, "Lorg.geogebra.common.awt.GColor;", 0x401, NULL, NULL },
    { "getColorStringWithOrgGeogebraCommonAwtGColor:", "getColorString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getRGB", NULL, "I", 0x1, NULL, NULL },
    { "getGrayScale", NULL, "D", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "WHITE_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_WHITE_, NULL,  },
    { "BLACK_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_BLACK_, NULL,  },
    { "RED_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_RED_, NULL,  },
    { "ORANGE_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_ORANGE_, NULL,  },
    { "YELLOW_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_YELLOW_, NULL,  },
    { "GREEN_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_GREEN_, NULL,  },
    { "BLUE_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_BLUE_, NULL,  },
    { "CYAN_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_CYAN_, NULL,  },
    { "DARK_CYAN_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_DARK_CYAN_, NULL,  },
    { "DARK_GREEN_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_DARK_GREEN_, NULL,  },
    { "MAGENTA_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_MAGENTA_, NULL,  },
    { "LIGHT_GRAY_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_LIGHT_GRAY_, NULL,  },
    { "GRAY_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_GRAY_, NULL,  },
    { "DARK_GRAY_", NULL, 0x9, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonAwtGColor_DARK_GRAY_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonAwtGColor = { 2, "GColor", "org.geogebra.common.awt", NULL, 0x401, 13, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonAwtGColor;
}

@end

void OrgGeogebraCommonAwtGColor_initColorsWithOrgGeogebraCommonFactoriesAwtFactory_(OrgGeogebraCommonFactoriesAwtFactory *f) {
  OrgGeogebraCommonAwtGColor_initialize();
  OrgGeogebraCommonAwtGColor_WHITE_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(f)) newColorWithInt:255 withInt:255 withInt:255];
  OrgGeogebraCommonAwtGColor_BLACK_ = [f newColorWithInt:0 withInt:0 withInt:0];
  OrgGeogebraCommonAwtGColor_RED_ = [f newColorWithInt:255 withInt:0 withInt:0];
  OrgGeogebraCommonAwtGColor_ORANGE_ = [f newColorWithInt:255 withInt:127 withInt:0];
  OrgGeogebraCommonAwtGColor_YELLOW_ = [f newColorWithInt:255 withInt:255 withInt:0];
  OrgGeogebraCommonAwtGColor_GREEN_ = [f newColorWithInt:0 withInt:255 withInt:0];
  OrgGeogebraCommonAwtGColor_BLUE_ = [f newColorWithInt:0 withInt:0 withInt:255];
  OrgGeogebraCommonAwtGColor_CYAN_ = [f newColorWithInt:0 withInt:255 withInt:255];
  OrgGeogebraCommonAwtGColor_DARK_CYAN_ = [f newColorWithInt:99 withInt:219 withInt:219];
  OrgGeogebraCommonAwtGColor_DARK_GREEN_ = [f newColorWithInt:0 withInt:127 withInt:0];
  OrgGeogebraCommonAwtGColor_MAGENTA_ = [f newColorWithInt:255 withInt:0 withInt:255];
  OrgGeogebraCommonAwtGColor_LIGHT_GRAY_ = [f newColorWithInt:192 withInt:192 withInt:192];
  OrgGeogebraCommonAwtGColor_GRAY_ = [f newColorWithInt:128 withInt:128 withInt:128];
  OrgGeogebraCommonAwtGColor_DARK_GRAY_ = [f newColorWithInt:68 withInt:68 withInt:68];
}

jint OrgGeogebraCommonAwtGColor_HSBtoRGBWithFloat_withFloat_withFloat_(jfloat hue, jfloat saturation, jfloat brightness) {
  OrgGeogebraCommonAwtGColor_initialize();
  jint r = 0, g = 0, b = 0;
  if (saturation == 0) {
    r = g = b = J2ObjCFpToInt((brightness * 255.0f + 0.5f));
  }
  else {
    jfloat h = (hue - (jfloat) JavaLangMath_floorWithDouble_(hue)) * 6.0f;
    jfloat f = h - (jfloat) JavaLangMath_floorWithDouble_(h);
    jfloat p = brightness * (1.0f - saturation);
    jfloat q = brightness * (1.0f - saturation * f);
    jfloat t = brightness * (1.0f - (saturation * (1.0f - f)));
    switch (J2ObjCFpToInt(h)) {
      case 0:
      r = J2ObjCFpToInt((brightness * 255.0f + 0.5f));
      g = J2ObjCFpToInt((t * 255.0f + 0.5f));
      b = J2ObjCFpToInt((p * 255.0f + 0.5f));
      break;
      case 1:
      r = J2ObjCFpToInt((q * 255.0f + 0.5f));
      g = J2ObjCFpToInt((brightness * 255.0f + 0.5f));
      b = J2ObjCFpToInt((p * 255.0f + 0.5f));
      break;
      case 2:
      r = J2ObjCFpToInt((p * 255.0f + 0.5f));
      g = J2ObjCFpToInt((brightness * 255.0f + 0.5f));
      b = J2ObjCFpToInt((t * 255.0f + 0.5f));
      break;
      case 3:
      r = J2ObjCFpToInt((p * 255.0f + 0.5f));
      g = J2ObjCFpToInt((q * 255.0f + 0.5f));
      b = J2ObjCFpToInt((brightness * 255.0f + 0.5f));
      break;
      case 4:
      r = J2ObjCFpToInt((t * 255.0f + 0.5f));
      g = J2ObjCFpToInt((p * 255.0f + 0.5f));
      b = J2ObjCFpToInt((brightness * 255.0f + 0.5f));
      break;
      case 5:
      r = J2ObjCFpToInt((brightness * 255.0f + 0.5f));
      g = J2ObjCFpToInt((p * 255.0f + 0.5f));
      b = J2ObjCFpToInt((q * 255.0f + 0.5f));
      break;
    }
  }
  return (jint) 0xff000000 | (LShift32(r, 16)) | (LShift32(g, 8)) | (LShift32(b, 0));
}

NSString *OrgGeogebraCommonAwtGColor_getColorStringWithOrgGeogebraCommonAwtGColor_(OrgGeogebraCommonAwtGColor *fillColor) {
  OrgGeogebraCommonAwtGColor_initialize();
  return JreStrcat("$ICICICDC", @"rgba(", [((OrgGeogebraCommonAwtGColor *) nil_chk(fillColor)) getRed], ',', [fillColor getGreen], ',', [fillColor getBlue], ',', ([fillColor getAlpha] / 255.0), ')');
}

void OrgGeogebraCommonAwtGColor_init(OrgGeogebraCommonAwtGColor *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonAwtGColor)
