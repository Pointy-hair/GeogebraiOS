//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/awt/GPoint.java
//


#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GPoint.h"

@implementation OrgGeogebraCommonAwtGPoint

- (instancetype)init {
  OrgGeogebraCommonAwtGPoint_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)x
                    withInt:(jint)y {
  OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(self, x, y);
  return self;
}

- (void)setLocationWithInt:(jint)x
                   withInt:(jint)y {
  self->x_ = x;
  self->y_ = y;
}

- (void)setLocationWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)p {
  self->x_ = ((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_;
  self->y_ = p->y_;
}

- (jint)getY {
  return y_;
}

- (jint)getX {
  return x_;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgGeogebraCommonAwtGPoint class]])) return NO;
  return ((OrgGeogebraCommonAwtGPoint *) nil_chk(((OrgGeogebraCommonAwtGPoint *) check_class_cast(o, [OrgGeogebraCommonAwtGPoint class]))))->x_ == x_ && ((OrgGeogebraCommonAwtGPoint *) nil_chk(((OrgGeogebraCommonAwtGPoint *) check_class_cast(o, [OrgGeogebraCommonAwtGPoint class]))))->y_ == y_;
}

- (NSUInteger)hash {
  return (LShift32(x_, 16)) ^ y_;
}

- (jdouble)distanceWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)d {
  return JavaLangMath_sqrtWithDouble_((x_ - ((OrgGeogebraCommonAwtGPoint *) nil_chk(d))->x_) * (x_ - d->x_) + (y_ - d->y_) * (y_ - d->y_));
}

- (jdouble)distanceWithDouble:(jdouble)dx
                   withDouble:(jdouble)dy {
  return J2ObjCFpToInt(JavaLangMath_sqrtWithDouble_((x_ - dx) * (x_ - dx) + (y_ - dy) * (y_ - dy)));
}

- (NSString *)description {
  return JreStrcat("I$I", x_, @" : ", y_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GPoint", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "GPoint", NULL, 0x1, NULL, NULL },
    { "setLocationWithInt:withInt:", "setLocation", "V", 0x1, NULL, NULL },
    { "setLocationWithOrgGeogebraCommonAwtGPoint:", "setLocation", "V", 0x1, NULL, NULL },
    { "getY", NULL, "I", 0x1, NULL, NULL },
    { "getX", NULL, "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "distanceWithOrgGeogebraCommonAwtGPoint:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithDouble:withDouble:", "distance", "D", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "y_", NULL, 0x1, "I", NULL, NULL,  },
    { "x_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonAwtGPoint = { 2, "GPoint", "org.geogebra.common.awt", NULL, 0x1, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonAwtGPoint;
}

@end

void OrgGeogebraCommonAwtGPoint_init(OrgGeogebraCommonAwtGPoint *self) {
  (void) NSObject_init(self);
  self->y_ = 0;
  self->x_ = 0;
  self->x_ = 0;
  self->y_ = 0;
}

OrgGeogebraCommonAwtGPoint *new_OrgGeogebraCommonAwtGPoint_init() {
  OrgGeogebraCommonAwtGPoint *self = [OrgGeogebraCommonAwtGPoint alloc];
  OrgGeogebraCommonAwtGPoint_init(self);
  return self;
}

void OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(OrgGeogebraCommonAwtGPoint *self, jint x, jint y) {
  (void) NSObject_init(self);
  self->y_ = 0;
  self->x_ = 0;
  self->x_ = x;
  self->y_ = y;
}

OrgGeogebraCommonAwtGPoint *new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(jint x, jint y) {
  OrgGeogebraCommonAwtGPoint *self = [OrgGeogebraCommonAwtGPoint alloc];
  OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(self, x, y);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonAwtGPoint)
