//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/dialog/ToolManagerDialogModel.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/gui/dialog/ToolManagerDialogModel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/SelectionManager.h"

@interface OrgGeogebraCommonGuiDialogToolManagerDialogModel () {
 @public
  OrgGeogebraCommonMainApp *app_;
  id<JavaUtilList> deletedMacros_;
  id<OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogToolManagerDialogModel, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogToolManagerDialogModel, deletedMacros_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogToolManagerDialogModel, listener_, id<OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener>)

@interface OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener : NSObject
@end

@implementation OrgGeogebraCommonGuiDialogToolManagerDialogModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener:(id<OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener>)listener {
  OrgGeogebraCommonGuiDialogToolManagerDialogModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener_(self, app, listener);
  return self;
}

- (void)addMacrosWithNSObjectArray:(IOSObjectArray *)macros {
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) removeAllMacros];
  {
    IOSObjectArray *a__ = macros;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id obj = *b__++;
      [kernel addMacroWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *) check_class_cast(obj, [OrgGeogebraCommonKernelMacro class])];
    }
  }
}

- (jboolean)deleteToolsWithNSObjectArray:(IOSObjectArray *)sel {
  if (sel == nil || sel->size_ == 0) return NO;
  jboolean didDeletion = NO;
  jboolean changeToolBar = NO;
  jboolean foundUsedMacro = NO;
  NSString *macroNames = @"";
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel];
  [((OrgGeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) setSelectedGeosWithJavaUtilArrayList:[new_JavaUtilArrayList_init() autorelease]];
  [((id<JavaUtilList>) nil_chk(deletedMacros_)) clear];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(sel))->size_; i++) {
    OrgGeogebraCommonKernelMacro *macro = (OrgGeogebraCommonKernelMacro *) check_class_cast(IOSObjectArray_Get(sel, i), [OrgGeogebraCommonKernelMacro class]);
    if (![((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) isUsed]) {
      changeToolBar = (changeToolBar || [macro isShowInToolBar]);
      [((id<OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener>) nil_chk(listener_)) removeMacroFromToolbarWithInt:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getMacroIDWithOrgGeogebraCommonKernelMacro:macro] + OrgGeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET];
      [kernel removeMacroWithOrgGeogebraCommonKernelMacro:macro];
      [listener_ refreshCustomToolsInToolBar];
      [deletedMacros_ addWithId:macro];
      didDeletion = YES;
    }
    else {
      JavaUtilArrayList *geos = [macro getDependentGeos];
      id<JavaUtilIterator> curr = [((JavaUtilArrayList *) nil_chk(geos)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(curr)) hasNext]) [((OrgGeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:[curr next]];
      foundUsedMacro = YES;
      macroNames = JreStrcat("$$", macroNames, JreStrcat("C$$$", 0x000a, [macro getToolOrCommandName], @": ", [macro getNeededTypesString]));
    }
  }
  if (didDeletion) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) initUndoInfo];
  }
  if (foundUsedMacro) [app_ showErrorWithNSString:JreStrcat("$C$", [((OrgGeogebraCommonMainLocalization *) nil_chk([app_ getLocalization])) getErrorWithNSString:@"Tool.DeleteUsed"], ' ', macroNames)];
  return changeToolBar;
}

- (id<JavaUtilList>)getDeletedMacros {
  return deletedMacros_;
}

- (void)uploadToGeoGebraTubeWithNSObjectArray:(IOSObjectArray *)sel {
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  @try {
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) clearSelectedGeosWithBoolean:YES withBoolean:NO];
    [app_ updateSelectionWithBoolean:NO];
    if (sel == nil || sel->size_ == 0) return;
    JavaUtilLinkedHashSet *tools = [new_JavaUtilLinkedHashSet_init() autorelease];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(sel))->size_; i++) {
      OrgGeogebraCommonKernelMacro *macro = (OrgGeogebraCommonKernelMacro *) check_class_cast(IOSObjectArray_Get(sel, i), [OrgGeogebraCommonKernelMacro class]);
      JavaUtilArrayList *macros = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) getUsedMacros];
      if (macros != nil) [tools addAllWithJavaUtilCollection:macros];
      [tools addWithId:macro];
    }
    JavaUtilArrayList *macros = [new_JavaUtilArrayList_initWithInt_([tools size]) autorelease];
    id<JavaUtilIterator> it = [tools iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      [macros addWithId:[it next]];
    }
    [((id<OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener>) nil_chk(listener_)) uploadWorksheetWithJavaUtilArrayList:macros];
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"Uploading failed");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  [app_ setDefaultCursor];
}

- (JavaUtilArrayList *)getAllToolsWithNSObjectArray:(IOSObjectArray *)sel {
  JavaUtilLinkedHashSet *tools = [new_JavaUtilLinkedHashSet_init() autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(sel))->size_; i++) {
    OrgGeogebraCommonKernelMacro *macro = (OrgGeogebraCommonKernelMacro *) check_class_cast(IOSObjectArray_Get(sel, i), [OrgGeogebraCommonKernelMacro class]);
    JavaUtilArrayList *macros = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) getUsedMacros];
    if (macros != nil) [tools addAllWithJavaUtilCollection:macros];
    [tools addWithId:macro];
  }
  JavaUtilArrayList *macros = [new_JavaUtilArrayList_initWithInt_([tools size]) autorelease];
  id<JavaUtilIterator> it = [tools iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [macros addWithId:[it next]];
  }
  return macros;
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(deletedMacros_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener:", "ToolManagerDialogModel", NULL, 0x1, NULL, NULL },
    { "addMacrosWithNSObjectArray:", "addMacros", "V", 0x1, NULL, NULL },
    { "deleteToolsWithNSObjectArray:", "deleteTools", "Z", 0x1, NULL, NULL },
    { "getDeletedMacros", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "uploadToGeoGebraTubeWithNSObjectArray:", "uploadToGeoGebraTube", "V", 0x1, NULL, NULL },
    { "getAllToolsWithNSObjectArray:", "getAllTools", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x10, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "deletedMacros_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/geogebra/common/kernel/Macro;>;",  },
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.ToolManagerDialogModel$ToolManagerDialogListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.ToolManagerDialogModel$ToolManagerDialogListener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogToolManagerDialogModel = { 2, "ToolManagerDialogModel", "org.geogebra.common.gui.dialog", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogToolManagerDialogModel;
}

@end

void OrgGeogebraCommonGuiDialogToolManagerDialogModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener_(OrgGeogebraCommonGuiDialogToolManagerDialogModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener> listener) {
  NSObject_init(self);
  OrgGeogebraCommonGuiDialogToolManagerDialogModel_set_app_(self, app);
  OrgGeogebraCommonGuiDialogToolManagerDialogModel_set_loc_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getLocalization]);
  OrgGeogebraCommonGuiDialogToolManagerDialogModel_set_listener_(self, listener);
  OrgGeogebraCommonGuiDialogToolManagerDialogModel_setAndConsume_deletedMacros_(self, new_JavaUtilArrayList_init());
}

OrgGeogebraCommonGuiDialogToolManagerDialogModel *new_OrgGeogebraCommonGuiDialogToolManagerDialogModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener> listener) {
  OrgGeogebraCommonGuiDialogToolManagerDialogModel *self = [OrgGeogebraCommonGuiDialogToolManagerDialogModel alloc];
  OrgGeogebraCommonGuiDialogToolManagerDialogModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener_(self, app, listener);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogToolManagerDialogModel)

@implementation OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "removeMacroFromToolbarWithInt:", "removeMacroFromToolbar", "V", 0x401, NULL, NULL },
    { "refreshCustomToolsInToolBar", NULL, "V", 0x401, NULL, NULL },
    { "uploadWorksheetWithJavaUtilArrayList:", "uploadWorksheet", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener = { 2, "ToolManagerDialogListener", "org.geogebra.common.gui.dialog", "ToolManagerDialogModel", 0x609, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogToolManagerDialogModel_ToolManagerDialogListener)
