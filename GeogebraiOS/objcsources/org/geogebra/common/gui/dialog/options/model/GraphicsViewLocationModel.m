//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/dialog/options/model/GraphicsViewLocationModel.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/gui/dialog/options/model/GraphicsViewLocationModel.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel () {
 @public
  id<OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener> listener_;
  OrgGeogebraCommonMainApp *app_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel, app_, OrgGeogebraCommonMainApp *)

@interface OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener : NSObject
@end

@implementation OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener:(id<OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener_(self, app, listener);
  return self;
}

- (void)updateProperties {
  jboolean isInEV = NO;
  jboolean isInEV2 = NO;
  jboolean isInEV3D = NO;
  jboolean isInEVForPlane = NO;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN]) isInEV = YES;
    if ([geo isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2]) isInEV2 = YES;
    if ([geo isVisibleInView3D]) isInEV3D = YES;
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianViewForPlane]) {
      if ([geo isVisibleInViewForPlane]) {
        isInEVForPlane = YES;
      }
    }
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener>) nil_chk(listener_)) selectViewWithInt:0 withBoolean:isInEV];
  [listener_ selectViewWithInt:1 withBoolean:isInEV2];
  [listener_ selectViewWithInt:2 withBoolean:isInEV3D];
  [listener_ selectViewWithInt:3 withBoolean:isInEVForPlane];
}

- (void)applyToEuclidianView1WithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (value) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) addToEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) removeFromEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)applyToEuclidianView2WithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    OrgGeogebraCommonEuclidianEuclidianView *ev2 = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView2WithInt:1];
    if (value) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev2)) addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev2)) removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)applyToEuclidianView3DWithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface> ev3D = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView3D];
    if (value) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
      [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev3D)) addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
      [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev3D)) removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)applyToEuclidianViewForPlaneWithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (value) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setVisibleInViewForPlaneWithBoolean:YES];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setVisibleInViewForPlaneWithBoolean:NO];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (jboolean)checkGeos {
  [((id<OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener>) nil_chk(listener_)) setCheckBox3DVisibleWithBoolean:YES];
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianViewForPlane]) {
    [listener_ setCheckBoxForPlaneVisibleWithBoolean:YES];
  }
  else {
    [listener_ setCheckBoxForPlaneVisibleWithBoolean:NO];
  }
  jboolean go = YES;
  for (jint i = 0; go && i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasDrawable3D]) {
      [listener_ setCheckBox3DVisibleWithBoolean:NO];
      [listener_ setCheckBoxForPlaneVisibleWithBoolean:NO];
      go = NO;
    }
  }
  return YES;
}

- (jboolean)isValidAtWithInt:(jint)index {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener:", "GraphicsViewLocationModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "applyToEuclidianView1WithBoolean:", "applyToEuclidianView1", "V", 0x1, NULL, NULL },
    { "applyToEuclidianView2WithBoolean:", "applyToEuclidianView2", "V", 0x1, NULL, NULL },
    { "applyToEuclidianView3DWithBoolean:", "applyToEuclidianView3D", "V", 0x1, NULL, NULL },
    { "applyToEuclidianViewForPlaneWithBoolean:", "applyToEuclidianViewForPlane", "V", 0x1, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.GraphicsViewLocationModel$IGraphicsViewLocationListener;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.options.model.GraphicsViewLocationModel$IGraphicsViewLocationListener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel = { 2, "GraphicsViewLocationModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener_(OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener> listener) {
  (void) OrgGeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  self->app_ = app;
  self->listener_ = listener;
}

OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel *new_OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel *self = [OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener_(self, app, listener);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel)

@implementation OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "selectViewWithInt:withBoolean:", "selectView", "V", 0x401, NULL, NULL },
    { "setCheckBox3DVisibleWithBoolean:", "setCheckBox3DVisible", "V", 0x401, NULL, NULL },
    { "setCheckBoxForPlaneVisibleWithBoolean:", "setCheckBoxForPlaneVisible", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener = { 2, "IGraphicsViewLocationListener", "org.geogebra.common.gui.dialog.options.model", "GraphicsViewLocationModel", 0x609, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener)
