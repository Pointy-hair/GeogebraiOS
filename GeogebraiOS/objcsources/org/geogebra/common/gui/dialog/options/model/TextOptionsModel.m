//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/dialog/options/model/TextOptionsModel.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/TextOptionsModel.h"
#include "org/geogebra/common/gui/inputfield/DynamicTextProcessor.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentText.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/TextProperties.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel () {
 @public
  id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener> listener_;
  jboolean justDisplayFontSize_;
  IOSObjectArray *fonts_;
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonMainLocalization *loc_;
  OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *dTProcessor_;
  OrgGeogebraCommonKernelGeosGeoText *editGeo_;
  OrgGeogebraCommonKernelGeosGeoText *lastGeo_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel, fonts_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel, loc_, OrgGeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel, dTProcessor_, OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel, editGeo_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel, lastGeo_, OrgGeogebraCommonKernelGeosGeoText *)

@interface OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener : NSObject
@end

@implementation OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener:(id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener_(self, app, listener);
  return self;
}

- (jboolean)checkGeos {
  if (![self hasGeos]) {
    return NO;
  }
  jboolean geosOK = YES;
  justDisplayFontSize_ = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (([OrgGeogebraCommonKernelGeosTextProperties_class_() isInstance:geo] && ![((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(((id<OrgGeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosTextProperties))))) justFontSize]) || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoButton]) {
      justDisplayFontSize_ = NO;
    }
    if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoElementForPropertiesDialog])) isGeoText])) {
      if (![geo isGeoButton]) {
        geosOK = NO;
        break;
      }
    }
  }
  return geosOK;
}

- (id<OrgGeogebraCommonKernelGeosTextProperties>)getTextPropertiesAtWithInt:(jint)index {
  return (id<OrgGeogebraCommonKernelGeosTextProperties>) check_protocol_cast([self getObjectAtWithInt:index], @protocol(OrgGeogebraCommonKernelGeosTextProperties));
}

- (OrgGeogebraCommonKernelGeosGeoText *)getGeoTextAtWithInt:(jint)index {
  id ret = [self getObjectAtWithInt:index];
  if ([ret isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]]) {
    return (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(ret, [OrgGeogebraCommonKernelGeosGeoText class]);
  }
  return nil;
}

- (void)updateProperties {
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:0];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoTextField]) {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) setFontSizeVisibleOnly];
  }
  else {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) setWidgetsVisibleWithBoolean:!justDisplayFontSize_ withBoolean:[geo isGeoButton]];
  }
  id<OrgGeogebraCommonKernelGeosTextProperties> geo0 = [self getTextPropertiesAtWithInt:0];
  [self setEditGeoWithOrgGeogebraCommonKernelGeosGeoText:[self getGeoTextAtWithInt:0]];
  [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) selectSizeWithInt:OrgGeogebraCommonKernelGeosGeoText_getFontSizeIndexWithDouble_([((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(geo0)) getFontSizeMultiplier])];
  [listener_ selectFontWithInt:[geo0 isSerifFont] ? 1 : 0];
  jint selItem = -1;
  jint decimals = [geo0 getPrintDecimals];
  if (decimals > 0 && decimals < ((IOSIntArray *) nil_chk(OrgGeogebraCommonMainApp_get_decimalsLookup_()))->size_ && ![geo0 useSignificantFigures]) selItem = IOSIntArray_Get(OrgGeogebraCommonMainApp_get_decimalsLookup_(), decimals);
  jint figures = [geo0 getPrintFigures];
  if (figures > 0 && figures < ((IOSIntArray *) nil_chk(OrgGeogebraCommonMainApp_get_figuresLookup_()))->size_ && [geo0 useSignificantFigures]) selItem = IOSIntArray_Get(OrgGeogebraCommonMainApp_get_figuresLookup_(), figures);
  [listener_ selectDecimalPlacesWithInt:selItem];
  [listener_ setSecondLineVisibleWithBoolean:([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:0])) isIndependent] || ([geo0 isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]))];
  if ([geo isGeoTextField]) {
    [listener_ setFontSizeVisibleOnly];
  }
  OrgGeogebraCommonKernelGeosGeoText *text0 = [self getGeoTextAtWithInt:0];
  if (text0 != nil) {
    if ([[text0 getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentText class]]) {
      [listener_ setEditorTextWithJavaUtilArrayList:[((OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *) nil_chk(dTProcessor_)) buildDynamicTextListWithOrgGeogebraCommonKernelGeosGeoText:text0]];
    }
    else {
      [listener_ setEditorTextWithNSString:[text0 getTextString]];
    }
  }
  [listener_ selectFontStyleWithInt:[geo0 getFontStyle]];
}

- (void)applyFontSizeFromStringWithNSString:(NSString *)percentStr {
  jdouble multiplier;
  if (percentStr == nil) {
    return;
  }
  percentStr = [((NSString *) nil_chk(percentStr)) replaceAll:@"%" withReplacement:@""];
  @try {
    multiplier = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(percentStr) / 100;
    if (multiplier < 0.01) {
      multiplier = 0.01;
    }
    else if (multiplier > 100) {
      multiplier = 100;
    }
  }
  @catch (JavaLangNumberFormatException *e2) {
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput"];
    return;
  }
  [self applyFontSizeWithDouble:multiplier];
}

- (void)applyFontSizeFromIndexWithInt:(jint)index {
  [self applyFontSizeWithDouble:OrgGeogebraCommonKernelGeosGeoText_getRelativeFontSizeWithInt_(index)];
}

- (void)applyFontSizeWithDouble:(jdouble)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<OrgGeogebraCommonKernelGeosTextProperties> text = [self getTextPropertiesAtWithInt:i];
    [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontSizeMultiplierWithDouble:value];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:i])) updateVisualStyleRepaint];
  }
  if (editGeo_ == nil) {
    return;
  }
  [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk((editGeo_))) setFontSizeMultiplierWithDouble:value];
  [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (IOSObjectArray *)getFonts {
  return fonts_;
}

- (IOSObjectArray *)getFontSizes {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getFontSizeStrings];
}

- (void)applyFontWithBoolean:(jboolean)isSerif {
  if (editGeo_ == nil) {
    return;
  }
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<OrgGeogebraCommonKernelGeosTextProperties> text = [self getTextPropertiesAtWithInt:i];
    [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setSerifFontWithBoolean:isSerif];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:i])) updateVisualStyleRepaint];
  }
  [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk((editGeo_))) setSerifFontWithBoolean:isSerif];
  [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (void)applyDecimalPlacesWithInt:(jint)decimals {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<OrgGeogebraCommonKernelGeosTextProperties> text = [self getTextPropertiesAtWithInt:i];
    if (decimals < 8) {
      [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setPrintDecimalsWithInt:IOSIntArray_Get(nil_chk(OrgGeogebraCommonMainApp_get_roundingMenuLookup_()), decimals) withBoolean:YES];
    }
    else {
      [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setPrintFiguresWithInt:IOSIntArray_Get(nil_chk(OrgGeogebraCommonMainApp_get_roundingMenuLookup_()), decimals) withBoolean:YES];
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(text, [OrgGeogebraCommonKernelGeosGeoElement class])))) updateRepaint];
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

+ (jint)getFontStyleWithBoolean:(jboolean)isBold
                    withBoolean:(jboolean)isItalic {
  return OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_getFontStyleWithBoolean_withBoolean_(isBold, isItalic);
}

- (void)applyFontStyleWithBoolean:(jboolean)isBold
                      withBoolean:(jboolean)isItalic {
  jint style = OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_getFontStyleWithBoolean_withBoolean_(isBold, isItalic);
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<OrgGeogebraCommonKernelGeosTextProperties> text = [self getTextPropertiesAtWithInt:i];
    [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontStyleWithInt:style];
    [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(text, [OrgGeogebraCommonKernelGeosGeoElement class])) updateVisualStyleRepaint];
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (NSString *)getGeoGebraStringWithJavaUtilArrayList:(JavaUtilArrayList *)list
                                         withBoolean:(jboolean)isLatex {
  return [((OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *) nil_chk(dTProcessor_)) buildGeoGebraStringWithJavaUtilArrayList:list withBoolean:isLatex];
}

- (OrgGeogebraCommonKernelGeosGeoText *)getEditGeo {
  return editGeo_;
}

- (void)setEditGeoWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)editGeo {
  self->editGeo_ = editGeo;
  lastGeo_ = editGeo;
}

- (void)setEditGeoTextWithNSString:(NSString *)text {
  if (editGeo_ == nil) {
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(editGeo_)) setTextStringWithNSString:text];
}

- (void)applyEditedGeoWithNSString:(NSString *)text
                       withBoolean:(jboolean)isLatex {
  OrgGeogebraCommonKernelGeosGeoText *geo0 = [self getGeoTextAtWithInt:0];
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(geo0)) setTextStringWithNSString:text];
  [geo0 setLaTeXWithBoolean:isLatex withBoolean:YES];
  [geo0 updateRepaint];
  editGeo_ = nil;
}

- (void)cancelEditGeo {
  if (editGeo_ == nil) {
    return;
  }
  editGeo_ = nil;
  [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (void)setLaTeXWithBoolean:(jboolean)isLatex
                withBoolean:(jboolean)updateAlgo {
  if (editGeo_ == nil) {
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(editGeo_)) setLaTeXWithBoolean:isLatex withBoolean:updateAlgo];
  [((id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (jboolean)isValidAtWithInt:(jint)index {
  return NO;
}

- (jboolean)isTextEditable {
  return [self getGeosLength] == 1 && [[self getObjectAtWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]] && ![((OrgGeogebraCommonKernelGeosGeoText *) nil_chk([self getGeoTextAtWithInt:0])) isTextCommand] && ![((OrgGeogebraCommonKernelGeosGeoText *) nil_chk([self getGeoTextAtWithInt:0])) isFixed];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener:", "TextOptionsModel", NULL, 0x1, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
    { "getTextPropertiesAtWithInt:", "getTextPropertiesAt", "Lorg.geogebra.common.kernel.geos.TextProperties;", 0x1, NULL, NULL },
    { "getGeoTextAtWithInt:", "getGeoTextAt", "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "applyFontSizeFromStringWithNSString:", "applyFontSizeFromString", "V", 0x1, NULL, NULL },
    { "applyFontSizeFromIndexWithInt:", "applyFontSizeFromIndex", "V", 0x1, NULL, NULL },
    { "applyFontSizeWithDouble:", "applyFontSize", "V", 0x1, NULL, NULL },
    { "getFonts", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFontSizes", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "applyFontWithBoolean:", "applyFont", "V", 0x1, NULL, NULL },
    { "applyDecimalPlacesWithInt:", "applyDecimalPlaces", "V", 0x1, NULL, NULL },
    { "getFontStyleWithBoolean:withBoolean:", "getFontStyle", "I", 0x9, NULL, NULL },
    { "applyFontStyleWithBoolean:withBoolean:", "applyFontStyle", "V", 0x1, NULL, NULL },
    { "getGeoGebraStringWithJavaUtilArrayList:withBoolean:", "getGeoGebraString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getEditGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "setEditGeoWithOrgGeogebraCommonKernelGeosGeoText:", "setEditGeo", "V", 0x1, NULL, NULL },
    { "setEditGeoTextWithNSString:", "setEditGeoText", "V", 0x1, NULL, NULL },
    { "applyEditedGeoWithNSString:withBoolean:", "applyEditedGeo", "V", 0x1, NULL, NULL },
    { "cancelEditGeo", NULL, "V", 0x1, NULL, NULL },
    { "setLaTeXWithBoolean:withBoolean:", "setLaTeX", "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
    { "isTextEditable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.TextOptionsModel$ITextOptionsListener;", NULL, NULL,  },
    { "justDisplayFontSize_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fonts_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x2, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "dTProcessor_", NULL, 0x2, "Lorg.geogebra.common.gui.inputfield.DynamicTextProcessor;", NULL, NULL,  },
    { "editGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "lastGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.options.model.TextOptionsModel$ITextOptionsListener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel = { 2, "TextOptionsModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 23, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener_(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener> listener) {
  (void) OrgGeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  self->fonts_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"Sans Serif", @"Serif" } count:2 type:NSString_class_()];
  self->listener_ = listener;
  self->app_ = app;
  self->loc_ = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getLocalization];
  self->dTProcessor_ = new_OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_initWithOrgGeogebraCommonMainApp_(app);
  self->editGeo_ = nil;
  self->lastGeo_ = nil;
}

OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel *new_OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel *self = [OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener_(self, app, listener);
  return self;
}

jint OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_getFontStyleWithBoolean_withBoolean_(jboolean isBold, jboolean isItalic) {
  OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_initialize();
  jint style = 0;
  if (isBold) style += 1;
  if (isItalic) style += 2;
  return style;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel)

@implementation OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setWidgetsVisibleWithBoolean:withBoolean:", "setWidgetsVisible", "V", 0x401, NULL, NULL },
    { "setFontSizeVisibleOnly", NULL, "V", 0x401, NULL, NULL },
    { "selectSizeWithInt:", "selectSize", "V", 0x401, NULL, NULL },
    { "selectFontWithInt:", "selectFont", "V", 0x401, NULL, NULL },
    { "selectDecimalPlacesWithInt:", "selectDecimalPlaces", "V", 0x401, NULL, NULL },
    { "setSecondLineVisibleWithBoolean:", "setSecondLineVisible", "V", 0x401, NULL, NULL },
    { "selectFontStyleWithInt:", "selectFontStyle", "V", 0x401, NULL, NULL },
    { "setEditorTextWithJavaUtilArrayList:", "setEditorText", "V", 0x401, NULL, NULL },
    { "setEditorTextWithNSString:", "setEditorText", "V", 0x401, NULL, NULL },
    { "updatePreview", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener = { 2, "ITextOptionsListener", "org.geogebra.common.gui.dialog.options.model", "TextOptionsModel", 0x609, 10, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener)
