//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/dialog/options/model/AxisModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/gui/dialog/options/model/AxisModel.h"
#include "org/geogebra/common/gui/util/TableSymbols.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelAxisModel () {
 @public
  id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener> listener_;
  OrgGeogebraCommonMainApp *app_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelAxisModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelAxisModel, app_, OrgGeogebraCommonMainApp *)

@interface OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener : NSObject
@end

@implementation OrgGeogebraCommonGuiDialogOptionsModelAxisModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
     withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                         withInt:(jint)axis
withOrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener:(id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelAxisModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_withInt_withOrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener_(self, app, view, axis, listener);
  return self;
}

- (void)fillTicksCombo {
  jchar big = '|';
  jchar small = '\'';
  [((id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener>) nil_chk(listener_)) addTickItemWithNSString:JreStrcat("CC$C$C$C$C", ' ', big, @"  ", small, @"  ", big, @"  ", small, @"  ", big)];
  [listener_ addTickItemWithNSString:JreStrcat("CC$C$C", ' ', big, @"     ", big, @"     ", big)];
  [listener_ addTickItemWithNSString:@" "];
}

- (NSString *)getAxisName {
  switch (axis_) {
    case OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_X:
    default:
    return @"xAxis";
    case OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_Y:
    return @"yAxis";
    case OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_Z:
    return @"zAxis";
  }
}

- (void)applyTickDistanceWithDouble:(jdouble)value {
  if (value > 0) {
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxesNumberingDistanceWithDouble:value withInt:axis_];
    }
    else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxesNumberingDistanceWithDouble:value withInt:axis_];
    }
    else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxesNumberingDistanceWithDouble:value withInt:axis_];
    }
    else {
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAxesNumberingDistanceWithDouble:value withInt:axis_];
    }
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateBackground];
  }
}

- (jdouble)parseDoubleWithNSString:(NSString *)text {
  if (text == nil || [text isEqual:@""]) return JavaLangDouble_NaN;
  return [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getAlgebraProcessor])) evaluateToDoubleWithNSString:text];
}

- (void)fillUnitLabel {
  [((id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener>) nil_chk(listener_)) addUnitLabelItemWithNSString:nil];
  [listener_ addUnitLabelItemWithNSString:OrgGeogebraCommonUtilUnicode_get_DEGREE_()];
  [listener_ addUnitLabelItemWithNSString:OrgGeogebraCommonUtilUnicode_get_PI_STRING_()];
  [listener_ addUnitLabelItemWithNSString:@"mm"];
  [listener_ addUnitLabelItemWithNSString:@"cm"];
  [listener_ addUnitLabelItemWithNSString:@"m"];
  [listener_ addUnitLabelItemWithNSString:@"km"];
}

- (void)showAxisWithBoolean:(jboolean)value {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setShowAxisWithInt:axis_ withBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setShowAxisWithInt:axis_ withBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setShowAxisWithInt:axis_ withBoolean:value];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowAxisWithInt:axis_ withBoolean:value withBoolean:YES];
  }
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateBackground];
}

- (void)showAxisNumbersWithBoolean:(jboolean)value {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowAxisNumbersWithInt:axis_ withBoolean:value];
  [view_ updateBackground];
}

- (void)applyTickDistanceWithBoolean:(jboolean)value {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAutomaticAxesNumberingDistanceWithBoolean:!value withInt:axis_ withBoolean:YES];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAutomaticAxesNumberingDistanceWithBoolean:!value withInt:axis_ withBoolean:YES];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAutomaticAxesNumberingDistanceWithBoolean:!value withInt:axis_ withBoolean:YES];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAutomaticAxesNumberingDistanceWithBoolean:!value withInt:axis_];
  }
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateBackground];
}

- (void)applyUnitLabelWithNSString:(NSString *)text {
  IOSObjectArray *labels = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getAxesUnitLabels];
  IOSObjectArray_Set(nil_chk(labels), axis_, text);
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxesUnitLabelsWithNSStringArray:labels];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxesUnitLabelsWithNSStringArray:labels];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxesUnitLabelsWithNSStringArray:labels];
  }
  else {
    [view_ setAxesUnitLabelsWithNSStringArray:labels];
  }
  [view_ updateBackground];
  [view_ repaintView];
}

- (void)applyAxisLabelWithNSString:(NSString *)text {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxisLabelWithInt:axis_ withNSString:text];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxisLabelWithInt:axis_ withNSString:text];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxisLabelWithInt:axis_ withNSString:text];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAxisLabelWithInt:axis_ withNSString:text];
  }
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateBoundsWithBoolean:YES withBoolean:YES];
  [view_ updateBackground];
  [view_ repaintView];
}

- (void)applyTickStyleWithInt:(jint)type {
  IOSIntArray *styles = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getAxesTickStyles];
  *IOSIntArray_GetRef(nil_chk(styles), axis_) = type;
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxisTickStyleWithInt:axis_ withInt:type];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxisTickStyleWithInt:axis_ withInt:type];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxisTickStyleWithInt:axis_ withInt:type];
  }
  else {
    [view_ setAxesTickStylesWithIntArray:styles];
  }
  [view_ updateBackground];
}

- (void)applyPositiveAxisWithBoolean:(jboolean)value {
  if (view_ == [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setPositiveAxisWithInt:axis_ withBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setPositiveAxisWithInt:axis_ withBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setPositiveAxisWithInt:axis_ withBoolean:value];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setPositiveAxisWithInt:axis_ withBoolean:value];
  }
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateBackground];
}

- (void)applyDrawAtBorderWithBoolean:(jboolean)value {
  IOSBooleanArray *border = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getDrawBorderAxes];
  *IOSBooleanArray_GetRef(nil_chk(border), axis_) = value;
  [view_ setDrawBorderAxesWithBooleanArray:border];
  if (!value) {
    [view_ setAxisCrossWithInt:axis_ withDouble:0.0];
  }
  [view_ updateBackground];
}

- (void)applyCrossingWithNSString:(NSString *)crossStr {
  NSString *str = crossStr;
  if ([@"" isEqual:str]) str = @"0";
  jdouble cross = [self parseDoubleWithNSString:str];
  if (!(JavaLangDouble_isInfiniteWithDouble_(cross) || JavaLangDouble_isNaNWithDouble_(cross))) {
    IOSDoubleArray *ac = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getAxesCross];
    *IOSDoubleArray_GetRef(nil_chk(ac), axis_) = cross;
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxisCrossWithInt:axis_ withDouble:cross];
    }
    else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxisCrossWithInt:axis_ withDouble:cross];
    }
    else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxisCrossWithInt:axis_ withDouble:cross];
    }
    else {
      [view_ setAxesCrossWithDoubleArray:ac];
    }
  }
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateBackground];
  [((id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener>) nil_chk(listener_)) setCrossTextWithNSString:JreStrcat("D", IOSDoubleArray_Get(nil_chk([view_ getAxesCross]), axis_))];
}

- (jint)getAxis {
  return axis_;
}

- (void)fillAxisCombo {
  [((id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener>) nil_chk(listener_)) addAxisLabelItemWithNSString:@""];
  NSString *defaultLabel;
  switch (axis_) {
    case OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_X:
    defaultLabel = @"x";
    break;
    case OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_Y:
    default:
    defaultLabel = @"y";
    break;
    case OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_Z:
    defaultLabel = @"z";
    break;
  }
  [listener_ addAxisLabelItemWithNSString:defaultLabel];
  IOSObjectArray *greeks = OrgGeogebraCommonGuiUtilTableSymbols_get_greekLowerCase_();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(greeks))->size_; i++) {
    [listener_ addAxisLabelItemWithNSString:IOSObjectArray_Get(greeks, i)];
  }
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(app_);
  RELEASE_(view_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonEuclidianEuclidianView:withInt:withOrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener:", "AxisModel", NULL, 0x1, NULL, NULL },
    { "fillTicksCombo", NULL, "V", 0x1, NULL, NULL },
    { "getAxisName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "applyTickDistanceWithDouble:", "applyTickDistance", "V", 0x1, NULL, NULL },
    { "parseDoubleWithNSString:", "parseDouble", "D", 0x4, NULL, NULL },
    { "fillUnitLabel", NULL, "V", 0x1, NULL, NULL },
    { "showAxisWithBoolean:", "showAxis", "V", 0x1, NULL, NULL },
    { "showAxisNumbersWithBoolean:", "showAxisNumbers", "V", 0x1, NULL, NULL },
    { "applyTickDistanceWithBoolean:", "applyTickDistance", "V", 0x1, NULL, NULL },
    { "applyUnitLabelWithNSString:", "applyUnitLabel", "V", 0x1, NULL, NULL },
    { "applyAxisLabelWithNSString:", "applyAxisLabel", "V", 0x1, NULL, NULL },
    { "applyTickStyleWithInt:", "applyTickStyle", "V", 0x1, NULL, NULL },
    { "applyPositiveAxisWithBoolean:", "applyPositiveAxis", "V", 0x1, NULL, NULL },
    { "applyDrawAtBorderWithBoolean:", "applyDrawAtBorder", "V", 0x1, NULL, NULL },
    { "applyCrossingWithNSString:", "applyCrossing", "V", 0x1, NULL, NULL },
    { "getAxis", NULL, "I", 0x1, NULL, NULL },
    { "fillAxisCombo", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.AxisModel$IAxisModelListener;", NULL, NULL,  },
    { "axis_", NULL, 0x4, "I", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "AXIS_X_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_X },
    { "AXIS_Y_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_Y },
    { "AXIS_Z_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiDialogOptionsModelAxisModel_AXIS_Z },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.options.model.AxisModel$IAxisModelListener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelAxisModel = { 2, "AxisModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 17, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelAxisModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelAxisModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_withInt_withOrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener_(OrgGeogebraCommonGuiDialogOptionsModelAxisModel *self, OrgGeogebraCommonMainApp *app, OrgGeogebraCommonEuclidianEuclidianView *view, jint axis, id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener> listener) {
  NSObject_init(self);
  OrgGeogebraCommonGuiDialogOptionsModelAxisModel_set_listener_(self, listener);
  OrgGeogebraCommonGuiDialogOptionsModelAxisModel_set_app_(self, app);
  self->axis_ = axis;
  OrgGeogebraCommonGuiDialogOptionsModelAxisModel_set_view_(self, view);
}

OrgGeogebraCommonGuiDialogOptionsModelAxisModel *new_OrgGeogebraCommonGuiDialogOptionsModelAxisModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_withInt_withOrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener_(OrgGeogebraCommonMainApp *app, OrgGeogebraCommonEuclidianEuclidianView *view, jint axis, id<OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelAxisModel *self = [OrgGeogebraCommonGuiDialogOptionsModelAxisModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelAxisModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_withInt_withOrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener_(self, app, view, axis, listener);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelAxisModel)

@implementation OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addTickItemWithNSString:", "addTickItem", "V", 0x401, NULL, NULL },
    { "addAxisLabelItemWithNSString:", "addAxisLabelItem", "V", 0x401, NULL, NULL },
    { "addUnitLabelItemWithNSString:", "addUnitLabelItem", "V", 0x401, NULL, NULL },
    { "setCrossTextWithNSString:", "setCrossText", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener = { 2, "IAxisModelListener", "org.geogebra.common.gui.dialog.options.model", "AxisModel", 0x609, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelAxisModel_IAxisModelListener)
