//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/dialog/options/model/LineEqnModel.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/geogebra/common/gui/dialog/options/model/IComboListener.h"
#include "org/geogebra/common/gui/dialog/options/model/LineEqnModel.h"
#include "org/geogebra/common/gui/dialog/options/model/MultipleOptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel () {
 @public
  id<JavaUtilList> eqnValues_;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getLineAtWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel, eqnValues_, id<JavaUtilList>)

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoLine *OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel *self, jint index);

@implementation OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel

- (instancetype)initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener:(id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  return self;
}

- (jboolean)isValidAtWithInt:(jint)index {
  jboolean valid = YES;
  id geo = [self getObjectAtWithInt:index];
  if (!([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) || [geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) {
    valid = NO;
  }
  return valid;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getLineAtWithInt:(jint)index {
  return OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(self, index);
}

- (void)updateProperties {
  jint value0 = [self getValueAtWithInt:0];
  jboolean equalMode = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    if ([self getValueAtWithInt:i] != value0) {
      equalMode = NO;
    }
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:equalMode ? [((id<JavaUtilList>) nil_chk(eqnValues_)) indexOfWithId:JavaLangInteger_valueOfWithInt_(value0)] : -1];
}

- (id<JavaUtilList>)getChoichesWithOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc {
  return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ [((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"ImplicitLineEquation"], [loc getPlainWithNSString:@"ExplicitLineEquation"], [loc getPlainWithNSString:@"ParametricForm"] } count:3 type:NSString_class_()]);
}

- (void)applyWithInt:(jint)index
             withInt:(jint)value {
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(self, index))) setModeWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(eqnValues_)) getWithInt:value])) intValue]];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:index])) updateRepaint];
}

- (jint)getValueAtWithInt:(jint)index {
  return [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(self, index))) getMode];
}

- (void)dealloc {
  RELEASE_(eqnValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener:", "LineEqnModel", NULL, 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "getLineAtWithInt:", "getLineAt", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x2, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "getChoichesWithOrgGeogebraCommonMainLocalization:", "getChoiches", "Ljava.util.List;", 0x1, NULL, NULL },
    { "applyWithInt:withInt:", "apply", "V", 0x4, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "eqnValues_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Integer;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel = { 2, "LineEqnModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel *self, id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_set_eqnValues_(self, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT), JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT), JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelGeosGeoLine_PARAMETRIC) } count:3 type:JavaLangInteger_class_()]));
}

OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel *new_OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel *self = [OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  return self;
}

OrgGeogebraCommonKernelGeosGeoLine *OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel_getLineAtWithInt_(OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel *self, jint index) {
  return (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast([self getObjectAtWithInt:index], [OrgGeogebraCommonKernelGeosGeoLine class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelLineEqnModel)
