//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/dialog/options/model/EuclidianOptionsModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/gui/dialog/options/model/EuclidianOptionsModel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel () {
 @public
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonEuclidianEuclidianView *view_;
  id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel, view_, OrgGeogebraCommonEuclidianEuclidianView *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>)

@interface OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener : NSObject
@end

__attribute__((unused)) static void OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *new_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
     withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
withOrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener:(id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener_(self, app, view, listener);
  return self;
}

- (void)applyBackgroundColor {
  if (view_ == [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setBackgroundWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) getEuclidianBackgroundWithInt:1]];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setBackgroundWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) getEuclidianBackgroundWithInt:2]];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setBackgroundWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) getEuclidianBackgroundWithInt:3]];
  }
  else {
    [view_ setBackgroundWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundCommon]];
  }
}

- (void)applyBackgroundColorWithInt:(jint)viewIdx
     withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color {
  if (viewIdx == 1 || viewIdx == 2 || viewIdx == 3) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSettings])) getEuclidianWithInt:viewIdx])) setBackgroundWithOrgGeogebraCommonAwtGColor:color];
  }
  else {
    [view_ setBackgroundWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundCommon]];
  }
}

- (void)applyAxesColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)col {
  if (view_ == [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxesColorWithOrgGeogebraCommonAwtGColor:col];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxesColorWithOrgGeogebraCommonAwtGColor:col];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxesColorWithOrgGeogebraCommonAwtGColor:col];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAxesColorWithOrgGeogebraCommonAwtGColor:col];
  }
}

- (void)applyGridColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)col {
  if (view_ == [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setGridColorWithOrgGeogebraCommonAwtGColor:col];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setGridColorWithOrgGeogebraCommonAwtGColor:col];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setGridColorWithOrgGeogebraCommonAwtGColor:col];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setGridColorWithOrgGeogebraCommonAwtGColor:col];
  }
}

- (void)applyTooltipModeWithInt:(jint)mode {
  if (mode == 0) {
    mode = OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_ON;
  }
  else if (mode == 1) {
    mode = OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC;
  }
  else if (mode == 2) {
    mode = OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_OFF;
  }
  if ([view_ isKindOfClass:[OrgGeogebraCommonEuclidianEuclidianView class]]) {
    if (view_ == [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAllowToolTipsWithInt:mode];
    }
    else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAllowToolTipsWithInt:mode];
    }
    else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAllowToolTipsWithInt:mode];
    }
    else {
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk((view_))) setAllowToolTipsWithInt:mode];
    }
  }
}

- (void)showAxesWithBoolean:(jboolean)value {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setShowAxesWithBoolean:value withBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setShowAxesWithBoolean:value withBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setShowAxesWithBoolean:value];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowAxesWithBoolean:value withBoolean:YES];
  }
}

- (void)applyBoldAxesWithBoolean:(jboolean)isBold
                     withBoolean:(jboolean)isVisible {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setBoldAxesWithBoolean:isBold];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setBoldAxesWithBoolean:isBold];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setBoldAxesWithBoolean:isBold];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setBoldAxesWithBoolean:isBold];
  }
}

- (void)showGridWithBoolean:(jboolean)value {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) showGridWithBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) showGridWithBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) showGridWithBoolean:value];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) showGridWithBoolean:value];
  }
}

- (void)applyBoldGridWithBoolean:(jboolean)value {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setGridIsBoldWithBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setGridIsBoldWithBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setGridIsBoldWithBoolean:value];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setGridIsBoldWithBoolean:value];
  }
}

- (void)applyMouseCoordsWithBoolean:(jboolean)value {
  if (view_ == [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAllowShowMouseCoordsWithBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAllowShowMouseCoordsWithBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAllowShowMouseCoordsWithBoolean:value];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAllowShowMouseCoordsWithBoolean:value];
  }
}

- (void)appyGridTypeWithInt:(jint)type {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setGridTypeWithInt:type];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setGridTypeWithInt:type];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setGridTypeWithInt:type];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setGridTypeWithInt:type];
  }
}

- (void)appyAxesStyleWithInt:(jint)style {
  if (view_ == [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxesLineStyleWithInt:style];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxesLineStyleWithInt:style];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxesLineStyleWithInt:style];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAxesLineStyleWithInt:style];
  }
}

- (void)appyGridStyleWithInt:(jint)style {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setGridLineStyleWithInt:style];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setGridLineStyleWithInt:style];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setGridLineStyleWithInt:style];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setGridLineStyleWithInt:style];
  }
}

- (void)appyGridManualTickWithBoolean:(jboolean)value {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAutomaticGridDistanceWithBoolean:!value withBoolean:YES];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAutomaticGridDistanceWithBoolean:!value withBoolean:YES];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAutomaticGridDistanceWithBoolean:!value withBoolean:YES];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAutomaticGridDistanceWithBoolean:!value];
  }
}

- (void)applyAxesRatioWithDouble:(jdouble)xval
                      withDouble:(jdouble)yval {
  if (!(JavaLangDouble_isInfiniteWithDouble_(xval) || JavaLangDouble_isNaNWithDouble_(xval) || JavaLangDouble_isInfiniteWithDouble_(yval) || JavaLangDouble_isNaNWithDouble_(yval))) {
    [view_ setCoordSystemWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXZero] withDouble:[view_ getYZero] withDouble:[view_ getXscale] withDouble:[view_ getXscale] * xval / yval];
  }
}

- (void)applyLockRatioWithJavaLangDouble:(JavaLangDouble *)value {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setLockedAxesRatioWithJavaLangDouble:value];
  [((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) enableAxesRatioWithBoolean:[view_ isZoomable] && ![view_ isLockedAxesRatio]];
}

- (void)applyMinMaxWithNSString:(NSString *)text
withOrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum:(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *)type {
  id<OrgGeogebraCommonKernelArithmeticNumberValue> minMax = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getAlgebraProcessor])) evaluateToNumericWithNSString:text withBoolean:NO];
  if (minMax == nil) {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) setMinMaxTextWithNSString:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXminObject])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()] withNSString:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk([view_ getXmaxObject])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()] withNSString:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk([view_ getYminObject])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()] withNSString:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk([view_ getYmaxObject])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()]];
  }
  else {
    switch ([type ordinal]) {
      case OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxType_maxX:
      if (view_ == [app_ getEuclidianView1]) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else {
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax];
      }
      break;
      case OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxType_maxY:
      if (view_ == [app_ getEuclidianView1]) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else {
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax];
      }
      break;
      case OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxType_minX:
      if (view_ == [app_ getEuclidianView1]) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else {
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax];
      }
      break;
      case OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxType_minY:
      if (view_ == [app_ getEuclidianView1]) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
        [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else {
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:minMax];
      }
      break;
      default:
      break;
    }
    [view_ setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXminObject]];
    [((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) enableAxesRatioWithBoolean:([view_ isZoomable] && ![view_ isLockedAxesRatio])];
    [view_ updateBoundsWithBoolean:YES withBoolean:YES];
  }
}

- (void)fillTooltipCombo {
  IOSObjectArray *tooltipItems = [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:@"On"], [app_ getPlainWithNSString:@"Automatic"], [app_ getPlainWithNSString:@"Off"] } count:3 type:NSString_class_()];
  {
    IOSObjectArray *a__ = tooltipItems;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *item = *b__++;
      [((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) addTooltipItemWithNSString:item];
    }
  }
}

- (void)updateProperties {
  [((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) updateAxesWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getAxesColor] withBoolean:[view_ getShowXaxis] && [view_ getShowYaxis] withBoolean:[view_ areAxesBold]];
  [listener_ updateGridWithOrgGeogebraCommonAwtGColor:[view_ getGridColor] withBoolean:[view_ getShowGrid] withBoolean:[view_ getGridIsBold] withInt:[view_ getGridType]];
  [listener_ updateBackgroundColorWithOrgGeogebraCommonAwtGColor:[self getBackgroundColor]];
  if ([view_ isKindOfClass:[OrgGeogebraCommonEuclidianEuclidianView class]]) {
    jint ind = [(view_) getAllowToolTips];
    jint idx = -1;
    if (ind == OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_ON) {
      idx = 0;
    }
    else if (ind == OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC) {
      idx = 1;
    }
    else if (ind == OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_OFF) {
      idx = 2;
    }
    [listener_ selectTooltipTypeWithInt:idx];
  }
  [listener_ showMouseCoordsWithBoolean:[view_ getAllowShowMouseCoords]];
  [listener_ enableAxesRatioWithBoolean:[view_ isZoomable] && ![view_ isLockedAxesRatio]];
  [listener_ enableLockWithBoolean:[view_ isZoomable]];
  [listener_ updateBounds];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(OrgGeogebraCommonPluginEuclidianStyleConstants_get_lineStyleOptions_()))->size_; i++) {
    if (OrgGeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(NO, [view_ getAxesLineStyle]) == [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(OrgGeogebraCommonPluginEuclidianStyleConstants_get_lineStyleOptions_(), i))) intValue]) {
      [listener_ selectAxesStyleWithInt:i];
      break;
    }
  }
  [listener_ selectGridStyleWithInt:[view_ getGridLineStyle]];
  [listener_ updateGridTicksWithBoolean:[view_ isAutomaticGridDistance] withDoubleArray:[view_ getGridDistances] withInt:[view_ getGridType]];
  [listener_ updateConsProtocolPanelWithBoolean:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) showConsProtNavigation]];
}

+ (jint)getAxesStyleLength {
  return OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_getAxesStyleLength();
}

- (void)fillGridTypeCombo {
  IOSObjectArray *gridTypes = [IOSObjectArray newArrayWithLength:3 type:NSString_class_()];
  (void) IOSObjectArray_Set(gridTypes, OrgGeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN, [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"Cartesian"]);
  (void) IOSObjectArray_Set(gridTypes, OrgGeogebraCommonEuclidianEuclidianView_GRID_ISOMETRIC, [app_ getMenuWithNSString:@"Isometric"]);
  (void) IOSObjectArray_Set(gridTypes, OrgGeogebraCommonEuclidianEuclidianView_GRID_POLAR, [app_ getMenuWithNSString:@"Polar"]);
  {
    IOSObjectArray *a__ = gridTypes;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *item = *b__++;
      [((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) addGridTypeItemWithNSString:item];
    }
  }
}

- (void)fillAngleOptions {
  IOSObjectArray *angleOptions = [IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$", OrgGeogebraCommonUtilUnicode_get_PI_STRING_(), @"/12"), JreStrcat("$$", OrgGeogebraCommonUtilUnicode_get_PI_STRING_(), @"/6"), JreStrcat("$$", OrgGeogebraCommonUtilUnicode_get_PI_STRING_(), @"/4"), JreStrcat("$$", OrgGeogebraCommonUtilUnicode_get_PI_STRING_(), @"/3"), JreStrcat("$$", OrgGeogebraCommonUtilUnicode_get_PI_STRING_(), @"/2") } count:5 type:NSString_class_()];
  {
    IOSObjectArray *a__ = angleOptions;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *item = *b__++;
      [((id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) addAngleOptionItemWithNSString:item];
    }
  }
  ;
}

- (void)applyGridTicksWithDouble:(jdouble)value
                         withInt:(jint)idx {
  if (value > 0) {
    IOSDoubleArray *ticks = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getGridDistances];
    *IOSDoubleArray_GetRef(nil_chk(ticks), idx) = value;
    [view_ setGridDistancesWithDoubleArray:ticks];
  }
}

- (void)applyGridTickAngleWithInt:(jint)value {
  if (value >= 0) {
    IOSDoubleArray *ticks = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getGridDistances];
    if (value == 4) value = 5;
    *IOSDoubleArray_GetRef(nil_chk(ticks), 2) = (value + 1) * JavaLangMath_PI / 12;
    [view_ setGridDistancesWithDoubleArray:ticks];
  }
}

- (OrgGeogebraCommonAwtGColor *)getAxesColor {
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getAxesColor];
}

- (OrgGeogebraCommonAwtGColor *)getGridColor {
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getGridColor];
}

- (OrgGeogebraCommonAwtGColor *)getBackgroundColor {
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundCommon];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener:", "EuclidianOptionsModel", NULL, 0x1, NULL, NULL },
    { "applyBackgroundColor", NULL, "V", 0x1, NULL, NULL },
    { "applyBackgroundColorWithInt:withOrgGeogebraCommonAwtGColor:", "applyBackgroundColor", "V", 0x1, NULL, NULL },
    { "applyAxesColorWithOrgGeogebraCommonAwtGColor:", "applyAxesColor", "V", 0x1, NULL, NULL },
    { "applyGridColorWithOrgGeogebraCommonAwtGColor:", "applyGridColor", "V", 0x1, NULL, NULL },
    { "applyTooltipModeWithInt:", "applyTooltipMode", "V", 0x1, NULL, NULL },
    { "showAxesWithBoolean:", "showAxes", "V", 0x1, NULL, NULL },
    { "applyBoldAxesWithBoolean:withBoolean:", "applyBoldAxes", "V", 0x1, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "V", 0x1, NULL, NULL },
    { "applyBoldGridWithBoolean:", "applyBoldGrid", "V", 0x1, NULL, NULL },
    { "applyMouseCoordsWithBoolean:", "applyMouseCoords", "V", 0x1, NULL, NULL },
    { "appyGridTypeWithInt:", "appyGridType", "V", 0x1, NULL, NULL },
    { "appyAxesStyleWithInt:", "appyAxesStyle", "V", 0x1, NULL, NULL },
    { "appyGridStyleWithInt:", "appyGridStyle", "V", 0x1, NULL, NULL },
    { "appyGridManualTickWithBoolean:", "appyGridManualTick", "V", 0x1, NULL, NULL },
    { "applyAxesRatioWithDouble:withDouble:", "applyAxesRatio", "V", 0x1, NULL, NULL },
    { "applyLockRatioWithJavaLangDouble:", "applyLockRatio", "V", 0x1, NULL, NULL },
    { "applyMinMaxWithNSString:withOrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum:", "applyMinMax", "V", 0x1, NULL, NULL },
    { "fillTooltipCombo", NULL, "V", 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "getAxesStyleLength", NULL, "I", 0x9, NULL, NULL },
    { "fillGridTypeCombo", NULL, "V", 0x1, NULL, NULL },
    { "fillAngleOptions", NULL, "V", 0x1, NULL, NULL },
    { "applyGridTicksWithDouble:withInt:", "applyGridTicks", "V", 0x1, NULL, NULL },
    { "applyGridTickAngleWithInt:", "applyGridTickAngle", "V", 0x1, NULL, NULL },
    { "getAxesColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getGridColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getBackgroundColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_AXES_STYLE_COUNT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MAX_AXES_STYLE_COUNT },
    { "X_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_X_AXIS },
    { "Y_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_Y_AXIS },
    { "Z_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_Z_AXIS },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "view_", NULL, 0x2, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.EuclidianOptionsModel$IEuclidianOptionsListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.options.model.EuclidianOptionsModel$IEuclidianOptionsListener;", "Lorg.geogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel = { 2, "EuclidianOptionsModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 28, methods, 7, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener_(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel *self, OrgGeogebraCommonMainApp *app, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener> listener) {
  (void) NSObject_init(self);
  self->app_ = app;
  self->view_ = view;
  self->listener_ = listener;
}

OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel *new_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener_(OrgGeogebraCommonMainApp *app, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel *self = [OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener_(self, app, view, listener);
  return self;
}

jint OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_getAxesStyleLength() {
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initialize();
  return OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MAX_AXES_STYLE_COUNT;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel)

@implementation OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getEuclidianBackgroundWithInt:", "getEuclidianBackground", "Lorg.geogebra.common.awt.GColor;", 0x401, NULL, NULL },
    { "enableAxesRatioWithBoolean:", "enableAxesRatio", "V", 0x401, NULL, NULL },
    { "setMinMaxTextWithNSString:withNSString:withNSString:withNSString:", "setMinMaxText", "V", 0x401, NULL, NULL },
    { "addTooltipItemWithNSString:", "addTooltipItem", "V", 0x401, NULL, NULL },
    { "addGridTypeItemWithNSString:", "addGridTypeItem", "V", 0x401, NULL, NULL },
    { "updateAxesWithOrgGeogebraCommonAwtGColor:withBoolean:withBoolean:", "updateAxes", "V", 0x401, NULL, NULL },
    { "updateBackgroundColorWithOrgGeogebraCommonAwtGColor:", "updateBackgroundColor", "V", 0x401, NULL, NULL },
    { "updateGridWithOrgGeogebraCommonAwtGColor:withBoolean:withBoolean:withInt:", "updateGrid", "V", 0x401, NULL, NULL },
    { "selectTooltipTypeWithInt:", "selectTooltipType", "V", 0x401, NULL, NULL },
    { "updateConsProtocolPanelWithBoolean:", "updateConsProtocolPanel", "V", 0x401, NULL, NULL },
    { "updateBounds", NULL, "V", 0x401, NULL, NULL },
    { "showMouseCoordsWithBoolean:", "showMouseCoords", "V", 0x401, NULL, NULL },
    { "selectAxesStyleWithInt:", "selectAxesStyle", "V", 0x401, NULL, NULL },
    { "updateGridTicksWithBoolean:withDoubleArray:withInt:", "updateGridTicks", "V", 0x401, NULL, NULL },
    { "enableLockWithBoolean:", "enableLock", "V", 0x401, NULL, NULL },
    { "selectGridStyleWithInt:", "selectGridStyle", "V", 0x401, NULL, NULL },
    { "addAngleOptionItemWithNSString:", "addAngleOptionItem", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener = { 2, "IEuclidianOptionsListener", "org.geogebra.common.gui.dialog.options.model", "EuclidianOptionsModel", 0x609, 17, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum)

OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values_[4];

@implementation OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values() {
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values_ count:4 type:OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values();
}

+ (OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initialize();
  for (int i = 0; i < 4; i++) {
    OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *e = OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum class]) {
    OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_minX = new_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(@"minX", 0);
    OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_maxX = new_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(@"maxX", 1);
    OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_minY = new_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(@"minY", 2);
    OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_maxY = new_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(@"maxY", 3);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "minX", "minX", 0x4019, "Lorg.geogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;", &OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_minX, NULL,  },
    { "maxX", "maxX", 0x4019, "Lorg.geogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;", &OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_maxX, NULL,  },
    { "minY", "minY", 0x4019, "Lorg.geogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;", &OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_minY, NULL,  },
    { "maxY", "maxY", 0x4019, "Lorg.geogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;", &OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_maxY, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum = { 2, "MinMaxType", "org.geogebra.common.gui.dialog.options.model", "EuclidianOptionsModel", 0x4019, 0, NULL, 4, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/gui/dialog/options/model/EuclidianOptionsModel$MinMaxType;>;" };
  return &_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *new_OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *self = [OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum alloc];
  OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum)
