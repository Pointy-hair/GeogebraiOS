//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/dialog/options/model/ImageCornerModel.java
//


#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/gui/dialog/options/model/IComboListener.h"
#include "org/geogebra/common/gui/dialog/options/model/ImageCornerModel.h"
#include "org/geogebra/common/gui/dialog/options/model/MultipleOptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel () {
 @public
  id<JavaUtilList> choices_;
  OrgGeogebraCommonKernelKernel *kernel_;
  jint cornerIdx_;
  OrgGeogebraCommonMainApp *app_;
}

- (jint)indexOfWithNSString:(NSString *)item;

- (OrgGeogebraCommonKernelGeosGeoImage *)getGeoImageAtWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel, choices_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel, app_, OrgGeogebraCommonMainApp *)

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoImage *OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_getGeoImageAtWithInt_(OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel *self, jint index);

@implementation OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelIComboListener:(id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, app, listener);
  return self;
}

- (void)updateProperties {
  OrgGeogebraCommonKernelGeosGeoPoint *p0 = [self getPointAtWithInt:0];
  jboolean isEqual = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    if (p0 != [self getPointAtWithInt:i]) {
      isEqual = NO;
      break;
    }
  }
  if (isEqual && p0 != nil) {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedItemWithNSString:[p0 getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  else {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:-1];
  }
}

- (jint)indexOfWithNSString:(NSString *)item {
  return [((id<JavaUtilList>) nil_chk(choices_)) indexOfWithId:item];
}

- (jint)getCornerNumber {
  return cornerIdx_ < 2 ? (cornerIdx_ + 1) : (cornerIdx_ + 2);
}

- (id<JavaUtilList>)getChoichesWithOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc {
  JavaUtilTreeSet *points = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrderWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_POINT()];
  [((id<JavaUtilList>) nil_chk(choices_)) clear];
  [choices_ addWithId:@""];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(points)) iterator];
  jint count = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] || ++count > OrgGeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_MAX_CHOICES) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([it next], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    [choices_ addWithId:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  return choices_;
}

- (OrgGeogebraCommonKernelGeosGeoImage *)getGeoImageAtWithInt:(jint)index {
  return OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_getGeoImageAtWithInt_(self, index);
}

- (void)applyWithInt:(jint)index
             withInt:(jint)value {
}

- (void)applyChangesWithNSString:(NSString *)strLoc {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> newLoc = nil;
  if (strLoc == nil || ((jint) [((NSString *) nil_chk([strLoc trim])) length]) == 0) {
  }
  else {
    newLoc = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToPointWithNSString:strLoc withBoolean:YES withBoolean:YES];
  }
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoImage *im = OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_getGeoImageAtWithInt_(self, i);
    [((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(im)) setCornerWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(newLoc, [OrgGeogebraCommonKernelGeosGeoPoint class]) withInt:cornerIdx_];
    [im updateRepaint];
  }
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getPointAtWithInt:(jint)index {
  return [((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_getGeoImageAtWithInt_(self, index))) getCornerWithInt:cornerIdx_];
}

- (jboolean)isValidAtWithInt:(jint)index {
  id geo = [self getObjectAtWithInt:index];
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoImage class]]) {
    OrgGeogebraCommonKernelGeosGeoImage *img = (OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class]);
    if ([((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(img)) isAbsoluteScreenLocActive] || ![img isIndependent]) {
      return NO;
    }
    return YES;
  }
  return NO;
}

- (jint)getCornerIdx {
  return cornerIdx_;
}

- (void)setCornerIdxWithInt:(jint)cornerIdx {
  self->cornerIdx_ = cornerIdx;
}

- (jint)getValueAtWithInt:(jint)index {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelIComboListener:", "ImageCornerModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "indexOfWithNSString:", "indexOf", "I", 0x2, NULL, NULL },
    { "getCornerNumber", NULL, "I", 0x1, NULL, NULL },
    { "getChoichesWithOrgGeogebraCommonMainLocalization:", "getChoiches", "Ljava.util.List;", 0x1, NULL, NULL },
    { "getGeoImageAtWithInt:", "getGeoImageAt", "Lorg.geogebra.common.kernel.geos.GeoImage;", 0x2, NULL, NULL },
    { "applyWithInt:withInt:", "apply", "V", 0x4, NULL, NULL },
    { "applyChangesWithNSString:", "applyChanges", "V", 0x1, NULL, NULL },
    { "getPointAtWithInt:", "getPointAt", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x4, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
    { "getCornerIdx", NULL, "I", 0x1, NULL, NULL },
    { "setCornerIdxWithInt:", "setCornerIdx", "V", 0x1, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "I", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "choices_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;",  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cornerIdx_", NULL, 0x2, "I", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel = { 2, "ImageCornerModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 13, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener> listener) {
  (void) OrgGeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  self->app_ = app;
  self->kernel_ = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel];
  self->choices_ = new_JavaUtilArrayList_init();
}

OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel *new_OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel *self = [OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, app, listener);
  return self;
}

OrgGeogebraCommonKernelGeosGeoImage *OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel_getGeoImageAtWithInt_(OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel *self, jint index) {
  return (OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast([self getObjectAtWithInt:index], [OrgGeogebraCommonKernelGeosGeoImage class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelImageCornerModel)
