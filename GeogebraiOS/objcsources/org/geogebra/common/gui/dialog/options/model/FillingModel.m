//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/dialog/options/model/FillingModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/gui/dialog/options/model/FillingModel.h"
#include "org/geogebra/common/gui/dialog/options/model/IComboListener.h"
#include "org/geogebra/common/gui/dialog/options/model/MultipleOptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoBarChart.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelFillingModel () {
 @public
  jboolean isBarChart__;
  OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *fillType_;
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonKernelKernel *kernel_;
  jboolean hasGeoButton__;
  jboolean hasGeoTurtle__;
}

- (void)setAlphaWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo
                                                  withDouble:(jdouble)alpha;

- (void)setSymbolWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo;

- (void)updateBarFillTypePanelWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo;

- (void)setDistanceWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo
                                                        withInt:(jint)distance;

- (void)setAngleWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo
                                                  withDouble:(jdouble)angle;

- (void)setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (NSString *)getSelectedSymbolText;

- (jfloat)getFillingValue;

- (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getSelectedFillType;

- (jint)getAngleValue;

- (jint)getDistanceValue;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelFillingModel, fillType_, OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelFillingModel, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelFillingModel, kernel_, OrgGeogebraCommonKernelKernel *)

__attribute__((unused)) static void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setAlphaWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withDouble_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelAlgosAlgoBarChart *algo, jdouble alpha);

__attribute__((unused)) static void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_updateBarFillTypePanelWithOrgGeogebraCommonKernelAlgosAlgoBarChart_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelAlgosAlgoBarChart *algo);

__attribute__((unused)) static void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setDistanceWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withInt_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelAlgosAlgoBarChart *algo, jint distance);

__attribute__((unused)) static void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setAngleWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withDouble_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelAlgosAlgoBarChart *algo, jdouble angle);

__attribute__((unused)) static void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static NSString *OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self);

__attribute__((unused)) static jfloat OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getFillingValue(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedFillType(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self);

__attribute__((unused)) static jint OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getAngleValue(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self);

__attribute__((unused)) static jint OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getDistanceValue(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self);

@interface OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener : NSObject
@end

@implementation OrgGeogebraCommonGuiDialogOptionsModelFillingModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener:(id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener_(self, app, listener);
  return self;
}

- (id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>)getFillingListener {
  return (id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) check_protocol_cast([self getListener], @protocol(OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener));
}

- (id<JavaUtilList>)getChoichesWithOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc {
  return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ [((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getMenuWithNSString:@"Filling.Standard"], [loc getMenuWithNSString:@"Filling.Hatch"], [loc getMenuWithNSString:@"Filling.Crosshatch"], [loc getMenuWithNSString:@"Filling.Chessboard"], [loc getMenuWithNSString:@"Filling.Dotted"], [loc getMenuWithNSString:@"Filling.Honeycomb"], [loc getMenuWithNSString:@"Filling.Brick"], [loc getMenuWithNSString:@"Filling.Weaving"], [loc getMenuWithNSString:@"Filling.Symbol"], [loc getMenuWithNSString:@"Filling.Image"] } count:10 type:NSString_class_()]);
}

- (void)updateFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)fillType {
  switch ([fillType ordinal]) {
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_STANDARD:
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setStandardFillType];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_HATCH:
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setHatchFillType];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_CROSSHATCHED:
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_CHESSBOARD:
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_WEAVING:
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setCrossHatchedFillType];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_BRICK:
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setBrickFillType];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_SYMBOLS:
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setSymbolFillType];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_HONEYCOMB:
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_DOTTED:
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setDottedFillType];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_FillType_IMAGE:
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setImageFillType];
    break;
  }
}

- (void)updateProperties {
  OrgGeogebraCommonKernelGeosGeoElement *geo0 = [self getGeoAtWithInt:0];
  id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener> fillListener = [self getFillingListener];
  if ([self isBarChart]) {
    OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo0);
  }
  else {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk(fillListener)) setSelectedIndexWithInt:[((OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getFillType])) ordinal]];
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk(fillListener)) setFillInverseSelectedWithBoolean:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) isInverseFill]];
  if ([[geo0 getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoBarChart class]]) {
    [self setBarChartWithBoolean:YES];
    OrgGeogebraCommonGuiDialogOptionsModelFillingModel_updateBarFillTypePanelWithOrgGeogebraCommonKernelAlgosAlgoBarChart_(self, (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([geo0 getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]));
  }
  else {
    [self setBarChartWithBoolean:NO];
    [self updateFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:[geo0 getFillType]];
  }
  jdouble alpha = [geo0 getAlphaValue];
  if ([self isBarChart]) {
    OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setAlphaWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withDouble_(self, (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([geo0 getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]), alpha);
  }
  else {
    [fillListener setFillValueWithInt:(jint) JavaLangMath_roundWithDouble_(alpha * 100)];
  }
  jdouble angle = [geo0 getHatchingAngle];
  if ([self isBarChart]) {
    OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setAngleWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withDouble_(self, (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([geo0 getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]), angle);
  }
  else {
    [fillListener setAngleValueWithInt:J2ObjCFpToInt(angle)];
  }
  jint distance = [geo0 getHatchingDistance];
  if ([self isBarChart]) {
    OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setDistanceWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withInt_(self, (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([geo0 getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]), distance);
  }
  else {
    [fillListener setDistanceValueWithInt:distance];
  }
  if ([self isBarChart]) {
    [fillListener selectSymbolWithNSString:[((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([geo0 getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class])))) getBarSymbolWithInt:[fillListener getSelectedBarIndex]]];
  }
  else {
    if ([geo0 getFillSymbol] != nil && ![((NSString *) nil_chk([((NSString *) nil_chk([geo0 getFillSymbol])) trim])) isEqual:@""]) {
      [fillListener selectSymbolWithNSString:[geo0 getFillSymbol]];
    }
  }
  [fillListener setFillingImageWithNSString:[geo0 getImageFileName]];
}

- (void)setAlphaWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo
                                                  withDouble:(jdouble)alpha {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setAlphaWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withDouble_(self, algo, alpha);
}

- (void)setSymbolWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo {
  jint idx = [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedBarIndex];
  NSString *symbol = nil;
  if ([((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) getBarSymbolWithInt:idx] != nil && ![((NSString *) nil_chk([algo getBarSymbolWithInt:idx])) isEqual:@""]) {
    symbol = [algo getBarSymbolWithInt:idx];
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) selectSymbolWithNSString:symbol];
}

- (void)updateBarFillTypePanelWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_updateBarFillTypePanelWithOrgGeogebraCommonKernelAlgosAlgoBarChart_(self, algo);
}

- (void)setDistanceWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo
                                                        withInt:(jint)distance {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setDistanceWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withInt_(self, algo, distance);
}

- (void)setAngleWithOrgGeogebraCommonKernelAlgosAlgoBarChart:(OrgGeogebraCommonKernelAlgosAlgoBarChart *)algo
                                                  withDouble:(jdouble)angle {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setAngleWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withDouble_(self, algo, angle);
}

- (void)setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)applyImageWithNSString:(NSString *)fileName {
  if (fileName == nil) {
    return;
  }
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if ([self isBarChart]) {
      if (![self updateBarsFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withInt:2 withNSString:fileName]) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setImageFileNameWithNSString:fileName];
      }
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setImageFileNameWithNSString:fileName];
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$C", @"geo.setImageFileName(", fileName, ')'));
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:[((NSString *) nil_chk(fileName)) isEmpty] ? 0.0f : 1.0f];
    [geo updateRepaint];
  }
}

- (void)applyUnicodeWithNSString:(NSString *)symbolText {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (![@"" isEqual:symbolText]) {
      if ([self isBarChart]) {
        if (![self updateBarsFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withInt:3 withNSString:nil]) {
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:fillType_];
          [geo setFillSymbolWithNSString:symbolText];
        }
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:fillType_];
        [geo setFillSymbolWithNSString:symbolText];
      }
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
    }
  }
}

- (void)applyOpacityWithInt:(jint)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if ([self isBarChart]) {
      [self updateBarsFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withInt:4 withNSString:nil];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:value / 100.0f];
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateVisualStyle];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)applyAngleAndDistanceWithInt:(jint)angle
                             withInt:(jint)distance {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if ([self isBarChart]) {
      if (![self updateBarsFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withInt:1 withNSString:nil]) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setHatchingAngleWithInt:angle];
        [geo setHatchingDistanceWithInt:distance];
      }
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setHatchingAngleWithInt:angle];
      [geo setHatchingDistanceWithInt:distance];
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateVisualStyle];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)applyWithInt:(jint)index
             withInt:(jint)value {
}

- (jint)getValueAtWithInt:(jint)index {
  return 0;
}

- (jboolean)isValidAtWithInt:(jint)index {
  return NO;
}

- (void)applyFillTypeWithInt:(jint)index {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_set_fillType_(self, [self getFillTypeAtWithInt:index]);
  OrgGeogebraCommonKernelGeosGeoElement *geo0 = [self getGeoAtWithInt:0];
  if (fillType_ == OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE() && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getFillImage] != nil) {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setFillingImageWithNSString:[geo0 getImageFileName]];
  }
  else {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setFillingImageWithNSString:nil];
  }
  if (fillType_ == OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_SYMBOLS()) {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setSymbolsVisibleWithBoolean:YES];
  }
  else {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setSymbolsVisibleWithBoolean:NO];
    for (jint i = 0; i < [self getGeosLength]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
      if ([self isBarChart]) {
        if (![self updateBarsFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withInt:1 withNSString:nil]) {
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:fillType_];
        }
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:fillType_];
      }
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
    }
  }
  [self updateFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:fillType_];
}

- (void)applyFillingInverseWithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setInverseFillWithBoolean:value];
    [geo updateRepaint];
  }
}

- (jboolean)updateBarsFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                withInt:(jint)type
                                                           withNSString:(NSString *)fileName {
  jint selectedBarIndex = [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedBarIndex];
  OrgGeogebraCommonKernelAlgosAlgoBarChart *algo = (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]);
  if (selectedBarIndex == 0) {
    jint numBar = [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) getIntervals];
    for (jint i = 1; i < numBar + 1; i++) {
      [algo setBarFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:nil withInt:i];
      [algo setBarHatchDistanceWithInt:-1 withInt:i];
      [algo setBarHatchAngleWithInt:-1 withInt:i];
      [algo setBarSymbolWithNSString:nil withInt:i];
      [algo setBarImageWithNSString:nil withInt:i];
    }
    return NO;
  }
  switch (type) {
    case 1:
    [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:[self getFillType] withInt:selectedBarIndex];
    [algo setBarHatchDistanceWithInt:OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getDistanceValue(self) withInt:selectedBarIndex];
    [algo setBarHatchAngleWithInt:OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getAngleValue(self) withInt:selectedBarIndex];
    [algo setBarImageWithNSString:nil withInt:selectedBarIndex];
    if (OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedFillType(self) == OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_SYMBOLS()) {
      if (OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(self) != nil && ![@"" isEqual:OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(self)]) {
        [algo setBarHatchAngleWithInt:-1 withInt:selectedBarIndex];
        [algo setBarSymbolWithNSString:OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(self) withInt:selectedBarIndex];
      }
      else {
        [algo setBarFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD() withInt:selectedBarIndex];
        [algo setBarSymbolWithNSString:nil withInt:selectedBarIndex];
      }
    }
    else {
      [algo setBarSymbolWithNSString:nil withInt:selectedBarIndex];
    }
    break;
    case 4:
    [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarAlphaWithFloat:OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getFillingValue(self) / 100.0f withInt:selectedBarIndex];
    break;
    case 2:
    [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:nil withInt:selectedBarIndex];
    [algo setBarHatchDistanceWithInt:-1 withInt:selectedBarIndex];
    [algo setBarHatchAngleWithInt:-1 withInt:selectedBarIndex];
    [algo setBarSymbolWithNSString:nil withInt:selectedBarIndex];
    [algo setBarImageWithNSString:fileName withInt:selectedBarIndex];
    [algo setBarFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE() withInt:selectedBarIndex];
    break;
    case 3:
    if (OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(self) != nil && ![@"" isEqual:OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(self)]) {
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_SYMBOLS() withInt:selectedBarIndex];
      [algo setBarHatchAngleWithInt:-1 withInt:selectedBarIndex];
      [algo setBarImageWithNSString:nil withInt:selectedBarIndex];
      [algo setBarSymbolWithNSString:OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(self) withInt:selectedBarIndex];
    }
    else {
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarSymbolWithNSString:nil withInt:selectedBarIndex];
    }
    break;
  }
  return YES;
}

- (NSString *)getSelectedSymbolText {
  return OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(self);
}

- (jfloat)getFillingValue {
  return OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getFillingValue(self);
}

- (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getSelectedFillType {
  return OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedFillType(self);
}

- (jint)getAngleValue {
  return OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getAngleValue(self);
}

- (jint)getDistanceValue {
  return OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getDistanceValue(self);
}

- (jboolean)checkGeos {
  jboolean geosOK = YES;
  hasGeoButton__ = NO;
  hasGeoTurtle__ = NO;
  [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setFillInverseVisibleWithBoolean:YES];
  [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setFillTypeVisibleWithBoolean:YES];
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    hasGeoButton__ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoButton];
    hasGeoTurtle__ = [geo isGeoTurtle];
    if (![geo isInverseFillable] || [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTransformation class]]) {
      [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setFillInverseVisibleWithBoolean:NO];
    }
    if (![geo isFillable] || [geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoImage class]] || [geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]]) {
      geosOK = NO;
      break;
    }
    if ([geo isGeoElement3D] || [geo isGeoImage]) {
      [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setFillTypeVisibleWithBoolean:NO];
    }
  }
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"geos is ", (geosOK ? @"OK" : @"Not OK")));
  return geosOK;
}

- (jboolean)isBarChart {
  return isBarChart__;
}

- (void)setBarChartWithBoolean:(jboolean)isBarChart {
  self->isBarChart__ = isBarChart;
}

- (jboolean)hasGeoButton {
  return hasGeoButton__;
}

- (jboolean)hasGeoTurtle {
  return hasGeoTurtle__;
}

- (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getFillType {
  return fillType_;
}

- (void)setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)fillType {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_set_fillType_(self, fillType);
}

- (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getFillTypeAtWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values()), index);
}

- (void)dealloc {
  RELEASE_(fillType_);
  RELEASE_(app_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener:", "FillingModel", NULL, 0x1, NULL, NULL },
    { "getFillingListener", NULL, "Lorg.geogebra.common.gui.dialog.options.model.FillingModel$IFillingListener;", 0x1, NULL, NULL },
    { "getChoichesWithOrgGeogebraCommonMainLocalization:", "getChoiches", "Ljava.util.List;", 0x1, NULL, NULL },
    { "updateFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:", "updateFillType", "V", 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "setAlphaWithOrgGeogebraCommonKernelAlgosAlgoBarChart:withDouble:", "setAlpha", "V", 0x2, NULL, NULL },
    { "setSymbolWithOrgGeogebraCommonKernelAlgosAlgoBarChart:", "setSymbol", "V", 0x2, NULL, NULL },
    { "updateBarFillTypePanelWithOrgGeogebraCommonKernelAlgosAlgoBarChart:", "updateBarFillTypePanel", "V", 0x2, NULL, NULL },
    { "setDistanceWithOrgGeogebraCommonKernelAlgosAlgoBarChart:withInt:", "setDistance", "V", 0x2, NULL, NULL },
    { "setAngleWithOrgGeogebraCommonKernelAlgosAlgoBarChart:withDouble:", "setAngle", "V", 0x2, NULL, NULL },
    { "setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:", "setFillType", "V", 0x2, NULL, NULL },
    { "applyImageWithNSString:", "applyImage", "V", 0x1, NULL, NULL },
    { "applyUnicodeWithNSString:", "applyUnicode", "V", 0x1, NULL, NULL },
    { "applyOpacityWithInt:", "applyOpacity", "V", 0x1, NULL, NULL },
    { "applyAngleAndDistanceWithInt:withInt:", "applyAngleAndDistance", "V", 0x1, NULL, NULL },
    { "applyWithInt:withInt:", "apply", "V", 0x4, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "I", 0x4, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
    { "applyFillTypeWithInt:", "applyFillType", "V", 0x1, NULL, NULL },
    { "applyFillingInverseWithBoolean:", "applyFillingInverse", "V", 0x1, NULL, NULL },
    { "updateBarsFillTypeWithOrgGeogebraCommonKernelGeosGeoElement:withInt:withNSString:", "updateBarsFillType", "Z", 0x1, NULL, NULL },
    { "getSelectedSymbolText", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getFillingValue", NULL, "F", 0x2, NULL, NULL },
    { "getSelectedFillType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", 0x2, NULL, NULL },
    { "getAngleValue", NULL, "I", 0x2, NULL, NULL },
    { "getDistanceValue", NULL, "I", 0x2, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
    { "isBarChart", NULL, "Z", 0x1, NULL, NULL },
    { "setBarChartWithBoolean:", "setBarChart", "V", 0x1, NULL, NULL },
    { "hasGeoButton", NULL, "Z", 0x1, NULL, NULL },
    { "hasGeoTurtle", NULL, "Z", 0x1, NULL, NULL },
    { "getFillType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
    { "setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:", "setFillType", "V", 0x1, NULL, NULL },
    { "getFillTypeAtWithInt:", "getFillTypeAt", "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isBarChart__", "isBarChart", 0x2, "Z", NULL, NULL,  },
    { "fillType_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "hasGeoButton__", "hasGeoButton", 0x2, "Z", NULL, NULL,  },
    { "hasGeoTurtle__", "hasGeoTurtle", 0x2, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.options.model.FillingModel$IFillingListener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelFillingModel = { 2, "FillingModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 34, methods, 6, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelFillingModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_set_app_(self, app);
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_set_kernel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel]);
}

OrgGeogebraCommonGuiDialogOptionsModelFillingModel *new_OrgGeogebraCommonGuiDialogOptionsModelFillingModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self = [OrgGeogebraCommonGuiDialogOptionsModelFillingModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener_(self, app, listener);
  return self;
}

void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setAlphaWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withDouble_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelAlgosAlgoBarChart *algo, jdouble alpha) {
  jint idx = [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedBarIndex];
  if (idx != 0) {
    if ([((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) getBarAlphaWithInt:idx] != -1) {
      alpha = [algo getBarAlphaWithInt:idx];
    }
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setFillValueWithInt:(jint) JavaLangMath_roundWithDouble_(alpha * 100)];
}

void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_updateBarFillTypePanelWithOrgGeogebraCommonKernelAlgosAlgoBarChart_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelAlgosAlgoBarChart *algo) {
  jint idx = [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedBarIndex];
  OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *type = OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD();
  if ([((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) getBarFillTypeWithInt:idx] != OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD()) {
    type = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values()), [((OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk([algo getBarFillTypeWithInt:idx])) ordinal]);
  }
  OrgGeogebraCommonGuiDialogOptionsModelFillingModel_set_fillType_(self, type);
  [self updateFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:type];
}

void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setDistanceWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withInt_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelAlgosAlgoBarChart *algo, jint distance) {
  jint idx = [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedBarIndex];
  if (idx != 0) {
    if ([((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) getBarHatchDistanceWithInt:idx] != -1) {
      distance = [algo getBarHatchDistanceWithInt:idx];
    }
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setDistanceValueWithInt:distance];
}

void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setAngleWithOrgGeogebraCommonKernelAlgosAlgoBarChart_withDouble_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelAlgosAlgoBarChart *algo, jdouble angle) {
  jint idx = [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedBarIndex];
  if (idx != 0) {
    if ([((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) getBarHatchAngleWithInt:idx] != -1) {
      angle = [algo getBarHatchAngleWithInt:idx];
    }
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setAngleValueWithInt:J2ObjCFpToInt(angle)];
}

void OrgGeogebraCommonGuiDialogOptionsModelFillingModel_setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  jint idx = [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedBarIndex];
  if (idx == 0) {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setSelectedIndexWithInt:[((OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getFillType])) ordinal]];
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoBarChart *algo = (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]);
    if (algo != nil && [algo getBarFillTypeWithInt:idx] != nil) {
      [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) setSelectedIndexWithInt:[((OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk([algo getBarFillTypeWithInt:idx])) ordinal]];
    }
  }
}

NSString *OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedSymbolText(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self) {
  return [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedSymbolText];
}

jfloat OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getFillingValue(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self) {
  return [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getFillingValue];
}

OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getSelectedFillType(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self) {
  return [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getSelectedFillType];
}

jint OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getAngleValue(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self) {
  return [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getAngleValue];
}

jint OrgGeogebraCommonGuiDialogOptionsModelFillingModel_getDistanceValue(OrgGeogebraCommonGuiDialogOptionsModelFillingModel *self) {
  return [((id<OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener>) nil_chk([self getFillingListener])) getDistanceValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelFillingModel)

@implementation OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setSymbolsVisibleWithBoolean:", "setSymbolsVisible", "V", 0x401, NULL, NULL },
    { "setFillingImageWithNSString:", "setFillingImage", "V", 0x401, NULL, NULL },
    { "setFillInverseVisibleWithBoolean:", "setFillInverseVisible", "V", 0x401, NULL, NULL },
    { "setFillTypeVisibleWithBoolean:", "setFillTypeVisible", "V", 0x401, NULL, NULL },
    { "setFillInverseSelectedWithBoolean:", "setFillInverseSelected", "V", 0x401, NULL, NULL },
    { "setFillValueWithInt:", "setFillValue", "V", 0x401, NULL, NULL },
    { "setAngleValueWithInt:", "setAngleValue", "V", 0x401, NULL, NULL },
    { "setDistanceValueWithInt:", "setDistanceValue", "V", 0x401, NULL, NULL },
    { "setImageFillType", NULL, "V", 0x401, NULL, NULL },
    { "setDottedFillType", NULL, "V", 0x401, NULL, NULL },
    { "setSymbolFillType", NULL, "V", 0x401, NULL, NULL },
    { "setBrickFillType", NULL, "V", 0x401, NULL, NULL },
    { "setCrossHatchedFillType", NULL, "V", 0x401, NULL, NULL },
    { "setHatchFillType", NULL, "V", 0x401, NULL, NULL },
    { "setStandardFillType", NULL, "V", 0x401, NULL, NULL },
    { "getSelectedBarIndex", NULL, "I", 0x401, NULL, NULL },
    { "selectSymbolWithNSString:", "selectSymbol", "V", 0x401, NULL, NULL },
    { "getSelectedSymbolText", NULL, "Ljava.lang.String;", 0x401, NULL, NULL },
    { "getFillingValue", NULL, "F", 0x401, NULL, NULL },
    { "getSelectedFillType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", 0x401, NULL, NULL },
    { "getDistanceValue", NULL, "I", 0x401, NULL, NULL },
    { "getAngleValue", NULL, "I", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener = { 2, "IFillingListener", "org.geogebra.common.gui.dialog.options.model", "FillingModel", 0x609, 22, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelFillingModel_IFillingListener)
