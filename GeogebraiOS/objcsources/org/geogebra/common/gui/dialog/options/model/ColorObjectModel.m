//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/gui/dialog/options/model/ColorObjectModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/gui/dialog/options/model/ColorObjectModel.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoButton.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/GeoGebraColorConstants.h"
#include "org/geogebra/common/util/StringUtil.h"

#define OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_serialVersionUID 1LL

@interface OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel () {
 @public
  jboolean allFillable_;
  jboolean hasBackground__;
  jboolean hasImageGeo__;
  id<OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener> listener_;
  OrgGeogebraCommonKernelKernel *kernel_;
  OrgGeogebraCommonMainApp *app_;
}

- (void)updateColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)col
                                        withFloat:(jfloat)alpha
                                      withBoolean:(jboolean)updateAlphaOnly;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel, app_, OrgGeogebraCommonMainApp *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel, serialVersionUID, jlong)

__attribute__((unused)) static void OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_updateColorWithOrgGeogebraCommonAwtGColor_withFloat_withBoolean_(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel *self, OrgGeogebraCommonAwtGColor *col, jfloat alpha, jboolean updateAlphaOnly);

@interface OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener : NSObject
@end

@implementation OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener:(id<OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener_(self, app, listener);
  return self;
}

- (void)updateProperties {
  OrgGeogebraCommonKernelGeosGeoElement *geo0 = [self getGeoAtWithInt:0];
  jboolean equalObjColor = YES;
  jboolean equalObjColorBackground = YES;
  hasImageGeo__ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) isGeoImage];
  allFillable_ = [geo0 isFillable];
  hasBackground__ = [geo0 hasBackgroundColor];
  OrgGeogebraCommonKernelGeosGeoElement *temp;
  for (jint i = 1; i < [self getGeosLength]; i++) {
    temp = [self getGeoAtWithInt:i];
    if (![((OrgGeogebraCommonAwtGColor *) nil_chk([geo0 getObjectColor])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) getObjectColor]]) {
      equalObjColor = NO;
    }
    if (![temp isFillable]) {
      allFillable_ = NO;
    }
    if (![temp hasBackgroundColor]) {
      hasBackground__ = NO;
    }
    if ([temp isGeoImage]) {
      hasImageGeo__ = YES;
    }
  }
  if (hasBackground__) {
    equalObjColorBackground = YES;
    if ([geo0 getBackgroundColor] == nil) for (jint i = 1; i < [self getGeosLength]; i++) {
      temp = [self getGeoAtWithInt:i];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) getBackgroundColor] != nil) {
        equalObjColorBackground = NO;
        break;
      }
    }
    else for (jint i = 1; i < [self getGeosLength]; i++) {
      temp = [self getGeoAtWithInt:i];
      if (![((OrgGeogebraCommonAwtGColor *) nil_chk([geo0 getBackgroundColor])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) getBackgroundColor]]) {
        equalObjColorBackground = NO;
        break;
      }
    }
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener>) nil_chk(listener_)) updateChooserWithBoolean:equalObjColor withBoolean:equalObjColorBackground withBoolean:allFillable_ withBoolean:hasBackground__ withBoolean:[self hasOpacityWithOrgGeogebraCommonKernelGeosGeoElement:geo0]];
}

- (jboolean)hasOpacityWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  jboolean hasOpacity = YES;
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoButton class]]) {
    hasOpacity = NO;
  }
  return hasOpacity;
}

- (void)updateColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)col
                                        withFloat:(jfloat)alpha
                                      withBoolean:(jboolean)updateAlphaOnly {
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_updateColorWithOrgGeogebraCommonAwtGColor_withFloat_withBoolean_(self, col, alpha, updateAlphaOnly);
}

- (void)clearBackgroundColor {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    geo = [self getGeoAtWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setBackgroundColorWithOrgGeogebraCommonAwtGColor:nil];
    [geo updateVisualStyle];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (jboolean)checkGeos {
  return YES;
}

- (void)applyChangesWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color
                                         withFloat:(jfloat)alpha
                                       withBoolean:(jboolean)alphaOnly {
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_updateColorWithOrgGeogebraCommonAwtGColor_withFloat_withBoolean_(self, color, alpha, alphaOnly);
}

- (jboolean)hasImageGeo {
  return hasImageGeo__;
}

- (jboolean)hasBackground {
  return hasBackground__;
}

- (jboolean)isValidAtWithInt:(jint)index {
  return NO;
}

+ (NSString *)getColorAsStringWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                            withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color {
  return OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_getColorAsStringWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGColor_(app, color);
}

- (void)setSequentialWithBoolean:(jboolean)b {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    geo = [self getGeoAtWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSequentialColorWithBoolean:b];
    [geo updateVisualStyle];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (jboolean)isSequentialColor {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:i])) isSequentialColor]) {
      return NO;
    }
  }
  return [self getGeosLength] > 0;
}

- (jboolean)hasDefaultGeos {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:i])) isDefaultGeo]) {
      return YES;
    }
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(kernel_);
  RELEASE_(app_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener:", "ColorObjectModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "hasOpacityWithOrgGeogebraCommonKernelGeosGeoElement:", "hasOpacity", "Z", 0x4, NULL, NULL },
    { "updateColorWithOrgGeogebraCommonAwtGColor:withFloat:withBoolean:", "updateColor", "V", 0x2, NULL, NULL },
    { "clearBackgroundColor", NULL, "V", 0x1, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
    { "applyChangesWithOrgGeogebraCommonAwtGColor:withFloat:withBoolean:", "applyChanges", "V", 0x1, NULL, NULL },
    { "hasImageGeo", NULL, "Z", 0x1, NULL, NULL },
    { "hasBackground", NULL, "Z", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
    { "getColorAsStringWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonAwtGColor:", "getColorAsString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "setSequentialWithBoolean:", "setSequential", "V", 0x1, NULL, NULL },
    { "isSequentialColor", NULL, "Z", 0x1, NULL, NULL },
    { "hasDefaultGeos", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_serialVersionUID },
    { "allFillable_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasBackground__", "hasBackground", 0x2, "Z", NULL, NULL,  },
    { "hasImageGeo__", "hasImageGeo", 0x2, "Z", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.ColorObjectModel$IColorObjectListener;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.options.model.ColorObjectModel$IColorObjectListener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel = { 2, "ColorObjectModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 14, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener_(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_set_listener_(self, listener);
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_set_app_(self, app);
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_set_kernel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel]);
}

OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel *new_OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel *self = [OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener_(self, app, listener);
  return self;
}

void OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_updateColorWithOrgGeogebraCommonAwtGColor_withFloat_withBoolean_(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel *self, OrgGeogebraCommonAwtGColor *col, jfloat alpha, jboolean updateAlphaOnly) {
  if (col == nil || [self getGeos] == nil) {
    return;
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener>) nil_chk(self->listener_)) updatePreviewWithOrgGeogebraCommonAwtGColor:col withFloat:alpha];
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    geo = [self getGeoAtWithInt:i];
    if (self->hasBackground__ && [self->listener_ isBackgroundColorSelected]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setBackgroundColorWithOrgGeogebraCommonAwtGColor:col];
    }
    else {
      [self->listener_ updateNoBackgroundWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonAwtGColor:col withFloat:alpha withBoolean:updateAlphaOnly withBoolean:self->allFillable_];
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateVisualStyle];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
}

NSString *OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_getColorAsStringWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGColor_(OrgGeogebraCommonMainApp *app, OrgGeogebraCommonAwtGColor *color) {
  OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_initialize();
  NSString *result = @"";
  jint blue = [((OrgGeogebraCommonAwtGColor *) nil_chk(color)) getBlue];
  NSString *rgbDec = JreStrcat("I$I$I", [color getRed], @", ", [color getGreen], @", ", blue);
  NSString *name = OrgGeogebraCommonMainGeoGebraColorConstants_getGeogebraColorNameWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGColor_(app, color);
  if (name != nil) {
    result = JreStrcat("$C$", name, ' ', rgbDec);
  }
  else {
    result = rgbDec;
  }
  result = JreStrcat("$$", result, JreStrcat("$$C", @" (", OrgGeogebraCommonUtilStringUtil_toHtmlColorWithOrgGeogebraCommonAwtGColor_(color), ')'));
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel)

@implementation OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateChooserWithBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "updateChooser", "V", 0x401, NULL, NULL },
    { "updatePreviewWithOrgGeogebraCommonAwtGColor:withFloat:", "updatePreview", "V", 0x401, NULL, NULL },
    { "isBackgroundColorSelected", NULL, "Z", 0x401, NULL, NULL },
    { "updateNoBackgroundWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonAwtGColor:withFloat:withBoolean:withBoolean:", "updateNoBackground", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener = { 2, "IColorObjectListener", "org.geogebra.common.gui.dialog.options.model", "ColorObjectModel", 0x609, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelColorObjectModel_IColorObjectListener)
