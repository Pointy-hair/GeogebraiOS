//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/dialog/options/model/ShowLabelModel.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/ShowLabelModel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/main/App.h"

#define OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_serialVersionUID 1LL

@interface OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel () {
 @public
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonKernelKernel *kernel_;
  jboolean showNameValue_;
  id<OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener> listener_;
}

- (jboolean)isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener>)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel, serialVersionUID, jlong)

__attribute__((unused)) static jboolean OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

@interface OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener : NSObject
@end

@implementation OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener:(id<OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener_(self, app, listener);
  return self;
}

- (void)updateProperties {
  OrgGeogebraCommonKernelGeosGeoElement *temp, *geo0 = [self getGeoAtWithInt:0];
  jboolean equalLabelVal = YES;
  jboolean equalLabelMode = YES;
  showNameValue_ = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) isLabelValueShowable] && !OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo0) && ![geo0 isGeoTextField]);
  for (jint i = 1; i < [self getGeosLength]; i++) {
    temp = [self getGeoAtWithInt:i];
    if ([geo0 isLabelVisible] != [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) isLabelVisible]) equalLabelVal = NO;
    if ([geo0 getLabelMode] != [temp getLabelMode]) equalLabelMode = NO;
    showNameValue_ = (showNameValue_ && [temp isLabelValueShowable] && !OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement_(self, temp) && ![temp isGeoTextField]);
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener>) nil_chk(listener_)) updateWithBoolean:equalLabelVal withBoolean:equalLabelMode];
}

- (jboolean)isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)applyShowChangesWithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelVisibleWithBoolean:value];
    [geo updateRepaint];
  }
  [self updateProperties];
}

- (void)applyModeChangesWithInt:(jint)mode {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    geo = [self getGeoAtWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelModeWithInt:mode];
    [geo updateVisualStyle];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (jboolean)isNameValueShown {
  return showNameValue_;
}

- (jboolean)isValidAtWithInt:(jint)index {
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelShowable] || OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo) || [geo isGeoTextField];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(kernel_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener:", "ShowLabelModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement:", "isDropDownList", "Z", 0x2, NULL, NULL },
    { "applyShowChangesWithBoolean:", "applyShowChanges", "V", 0x1, NULL, NULL },
    { "applyModeChangesWithInt:", "applyModeChanges", "V", 0x1, NULL, NULL },
    { "isNameValueShown", NULL, "Z", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_serialVersionUID },
    { "showNameValue_", NULL, 0x2, "Z", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.ShowLabelModel$IShowLabelListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.options.model.ShowLabelModel$IShowLabelListener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel = { 2, "ShowLabelModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener_(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_set_app_(self, app);
  OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_set_kernel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_set_listener_(self, listener);
}

OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel *new_OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel *self = [OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener_(self, app, listener);
  return self;
}

jboolean OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_isDropDownListWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  return ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList] && [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) drawAsComboBox]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel)

@implementation OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateWithBoolean:withBoolean:", "update", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener = { 2, "IShowLabelListener", "org.geogebra.common.gui.dialog.options.model", "ShowLabelModel", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelShowLabelModel_IShowLabelListener)
