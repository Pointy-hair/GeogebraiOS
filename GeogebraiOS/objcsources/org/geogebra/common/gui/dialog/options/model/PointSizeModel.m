//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/dialog/options/model/PointSizeModel.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/gui/dialog/options/model/ISliderListener.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/PointSizeModel.h"
#include "org/geogebra/common/gui/dialog/options/model/SliderOptionsModel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/PointProperties.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel ()

- (id<OrgGeogebraCommonKernelGeosPointProperties>)getPointPropertiesAtWithInt:(jint)index;

@end

__attribute__((unused)) static id<OrgGeogebraCommonKernelGeosPointProperties> OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_getPointPropertiesAtWithInt_(OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel *self, jint index);

@implementation OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel

- (instancetype)initWithOrgGeogebraCommonGuiDialogOptionsModelISliderListener:(id<OrgGeogebraCommonGuiDialogOptionsModelISliderListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_initWithOrgGeogebraCommonGuiDialogOptionsModelISliderListener_(self, listener);
  return self;
}

- (id<OrgGeogebraCommonKernelGeosPointProperties>)getPointPropertiesAtWithInt:(jint)index {
  return OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_getPointPropertiesAtWithInt_(self, index);
}

- (jboolean)isValidAtWithInt:(jint)index {
  jboolean valid = YES;
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoElementForPropertiesDialog])) isGeoPoint]) && (!([geo isGeoList] && [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) showPointProperties]))) {
    valid = NO;
  }
  return valid;
}

- (void)applyWithInt:(jint)index
             withInt:(jint)value {
  id<OrgGeogebraCommonKernelGeosPointProperties> point = OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_getPointPropertiesAtWithInt_(self, index);
  [((id<OrgGeogebraCommonKernelGeosPointProperties>) nil_chk(point)) setPointSizeWithInt:value];
  [point updateRepaint];
}

- (jint)getValueAtWithInt:(jint)index {
  return [((id<OrgGeogebraCommonKernelGeosPointProperties>) nil_chk(OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_getPointPropertiesAtWithInt_(self, index))) getPointSize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGuiDialogOptionsModelISliderListener:", "PointSizeModel", NULL, 0x1, NULL, NULL },
    { "getPointPropertiesAtWithInt:", "getPointPropertiesAt", "Lorg.geogebra.common.kernel.geos.PointProperties;", 0x2, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "applyWithInt:withInt:", "apply", "V", 0x1, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel = { 2, "PointSizeModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_initWithOrgGeogebraCommonGuiDialogOptionsModelISliderListener_(OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel *self, id<OrgGeogebraCommonGuiDialogOptionsModelISliderListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelSliderOptionsModel_initWithOrgGeogebraCommonGuiDialogOptionsModelISliderListener_(self, listener);
}

OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel *new_OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_initWithOrgGeogebraCommonGuiDialogOptionsModelISliderListener_(id<OrgGeogebraCommonGuiDialogOptionsModelISliderListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel *self = [OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_initWithOrgGeogebraCommonGuiDialogOptionsModelISliderListener_(self, listener);
  return self;
}

id<OrgGeogebraCommonKernelGeosPointProperties> OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel_getPointPropertiesAtWithInt_(OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel *self, jint index) {
  return (id<OrgGeogebraCommonKernelGeosPointProperties>) check_protocol_cast([self getObjectAtWithInt:index], @protocol(OrgGeogebraCommonKernelGeosPointProperties));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelPointSizeModel)
