//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/dialog/options/model/StartPointModel.java
//


#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/gui/dialog/options/model/IComboListener.h"
#include "org/geogebra/common/gui/dialog/options/model/MultipleOptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/StartPointModel.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Locateable.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoVector.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelStartPointModel () {
 @public
  OrgGeogebraCommonKernelKernel *kernel_;
  OrgGeogebraCommonMainApp *app_;
  id<JavaUtilList> choices_;
}

- (jint)indexOfWithNSString:(NSString *)item;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelStartPointModel, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelStartPointModel, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelStartPointModel, choices_, id<JavaUtilList>)

@implementation OrgGeogebraCommonGuiDialogOptionsModelStartPointModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelIComboListener:(id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelStartPointModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, app, listener);
  return self;
}

- (id<OrgGeogebraCommonKernelLocateable>)getLocateableAtWithInt:(jint)index {
  return (id<OrgGeogebraCommonKernelLocateable>) check_protocol_cast([self getObjectAtWithInt:index], @protocol(OrgGeogebraCommonKernelLocateable));
}

- (void)updateProperties {
  id<OrgGeogebraCommonKernelLocateable> temp, geo0 = [self getLocateableAtWithInt:0];
  jboolean equalLocation = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    if ([((id<OrgGeogebraCommonKernelLocateable>) nil_chk(geo0)) getStartPoint] != [((id<OrgGeogebraCommonKernelLocateable>) nil_chk([self getLocateableAtWithInt:i])) getStartPoint]) {
      equalLocation = NO;
      break;
    }
  }
  OrgGeogebraCommonKernelGeosGeoElement *p = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelLocateable>) nil_chk(geo0)) getStartPoint], [OrgGeogebraCommonKernelGeosGeoElement class]);
  if (equalLocation && p != nil) {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:0];
  }
  else {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:-1];
  }
}

- (id<JavaUtilList>)getChoichesWithOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc {
  JavaUtilTreeSet *points = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getPointSet];
  [((id<JavaUtilList>) nil_chk(choices_)) clear];
  [choices_ addWithId:@""];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(points)) iterator];
  jint count = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] || ++count > OrgGeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_MAX_CHOICES) {
    OrgGeogebraCommonKernelGeosGeoElement *p = [it next];
    [choices_ addWithId:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(p)) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()]];
  }
  return choices_;
}

- (jint)indexOfWithNSString:(NSString *)item {
  return [((id<JavaUtilList>) nil_chk(choices_)) indexOfWithId:item];
}

- (void)applyChangesWithNSString:(NSString *)strLoc {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> newLoc = nil;
  if (strLoc == nil || ((jint) [((NSString *) nil_chk([strLoc trim])) length]) == 0) {
  }
  else {
    newLoc = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToPointWithNSString:strLoc withBoolean:YES withBoolean:YES];
  }
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<OrgGeogebraCommonKernelLocateable> l = [self getLocateableAtWithInt:i];
    @try {
      [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(l)) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:newLoc];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([l toGeoElement])) updateRepaint];
    }
    @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
    }
  }
}

- (void)applyWithInt:(jint)index
             withInt:(jint)value {
}

- (jint)getValueAtWithInt:(jint)index {
  return 0;
}

- (jboolean)isValidAtWithInt:(jint)index {
  jboolean valid = YES;
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  if (!([OrgGeogebraCommonKernelLocateable_class_() isInstance:geo] && ![((id<OrgGeogebraCommonKernelLocateable>) nil_chk(((id<OrgGeogebraCommonKernelLocateable>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelLocateable))))) isAlwaysFixed]) || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoImage] || [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVector class]]) {
    valid = NO;
  }
  return valid;
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(app_);
  RELEASE_(choices_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelIComboListener:", "StartPointModel", NULL, 0x1, NULL, NULL },
    { "getLocateableAtWithInt:", "getLocateableAt", "Lorg.geogebra.common.kernel.Locateable;", 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "getChoichesWithOrgGeogebraCommonMainLocalization:", "getChoiches", "Ljava.util.List;", 0x1, NULL, NULL },
    { "indexOfWithNSString:", "indexOf", "I", 0x2, NULL, NULL },
    { "applyChangesWithNSString:", "applyChanges", "V", 0x1, NULL, NULL },
    { "applyWithInt:withInt:", "apply", "V", 0x4, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "I", 0x4, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "choices_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelStartPointModel = { 2, "StartPointModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelStartPointModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelStartPointModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(OrgGeogebraCommonGuiDialogOptionsModelStartPointModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_initWithOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  OrgGeogebraCommonGuiDialogOptionsModelStartPointModel_set_app_(self, app);
  OrgGeogebraCommonGuiDialogOptionsModelStartPointModel_set_kernel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  OrgGeogebraCommonGuiDialogOptionsModelStartPointModel_setAndConsume_choices_(self, new_JavaUtilArrayList_init());
}

OrgGeogebraCommonGuiDialogOptionsModelStartPointModel *new_OrgGeogebraCommonGuiDialogOptionsModelStartPointModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelIComboListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelStartPointModel *self = [OrgGeogebraCommonGuiDialogOptionsModelStartPointModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelStartPointModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelIComboListener_(self, app, listener);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelStartPointModel)
