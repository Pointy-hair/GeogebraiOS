//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/dialog/options/model/AnimationStepModel.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/gui/dialog/options/model/AnimationStepModel.h"
#include "org/geogebra/common/gui/dialog/options/model/ITextFieldListener.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel () {
 @public
  id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener> listener_;
  OrgGeogebraCommonKernelKernel *kernel_;
  jboolean partOfSlider_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel, kernel_, OrgGeogebraCommonKernelKernel *)

@implementation OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel

- (instancetype)initWithOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener:(id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>)listener
                                                    withOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel_initWithOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener_withOrgGeogebraCommonMainApp_(self, listener, app);
  return self;
}

- (void)updateProperties {
  OrgGeogebraCommonKernelGeosGeoElement *temp, *geo0 = [self getGeoAtWithInt:0];
  jboolean equalStep = YES;
  jboolean onlyAngles = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    temp = [self getGeoAtWithInt:i];
    if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getAnimationStep], [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) getAnimationStep])) equalStep = NO;
    if (!([temp isGeoAngle])) onlyAngles = NO;
  }
  OrgGeogebraCommonKernelStringTemplate *highPrecision = OrgGeogebraCommonKernelStringTemplate_printDecimalsWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel_TEXT_FIELD_FRACTION_DIGITS, NO);
  if (equalStep) {
    OrgGeogebraCommonKernelGeosGeoElement *stepGeo = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getAnimationStepObject])) toGeoElement];
    if (onlyAngles && (stepGeo == nil || (![stepGeo isLabelSet] && [stepGeo isIndependent]))) {
      [((id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:[((JavaLangStringBuilder *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatAngleWithDouble:[geo0 getAnimationStep] withOrgGeogebraCommonKernelStringTemplate:highPrecision withBoolean:[((OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo0, [OrgGeogebraCommonKernelGeosGeoAngle class])) getAngleStyle] == OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED()])) description]];
    }
    else {
      [((id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(stepGeo)) getLabelWithOrgGeogebraCommonKernelStringTemplate:highPrecision]];
    }
  }
  else {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:@""];
  }
}

- (jboolean)isValidAtWithInt:(jint)index {
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isChangeable] || [geo isGeoText] || [geo isGeoImage] || [geo isGeoList] || [geo isGeoBoolean] || [geo isGeoButton] || (![self isPartOfSlider] && [geo isGeoNumeric] && [geo isIndependent])) {
    return NO;
  }
  return YES;
}

- (void)applyChangesWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)value {
  if (value != nil && !JavaLangDouble_isNaNWithDouble_([value getDouble])) {
    for (jint i = 0; i < [self getGeosLength]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAnimationStepWithOrgGeogebraCommonKernelArithmeticNumberValue:value];
      [geo updateRepaint];
    }
  }
}

- (jboolean)isPartOfSlider {
  return partOfSlider_;
}

- (void)setPartOfSliderWithBoolean:(jboolean)partOfSlider {
  self->partOfSlider_ = partOfSlider;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener:withOrgGeogebraCommonMainApp:", "AnimationStepModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
    { "applyChangesWithOrgGeogebraCommonKernelArithmeticNumberValue:", "applyChanges", "V", 0x1, NULL, NULL },
    { "isPartOfSlider", NULL, "Z", 0x1, NULL, NULL },
    { "setPartOfSliderWithBoolean:", "setPartOfSlider", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.ITextFieldListener;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "partOfSlider_", NULL, 0x2, "Z", NULL, NULL,  },
    { "TEXT_FIELD_FRACTION_DIGITS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel_TEXT_FIELD_FRACTION_DIGITS },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel = { 2, "AnimationStepModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel_initWithOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener_withOrgGeogebraCommonMainApp_(OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel *self, id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener> listener, OrgGeogebraCommonMainApp *app) {
  (void) OrgGeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  self->listener_ = listener;
  self->kernel_ = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel];
}

OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel *new_OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel_initWithOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener_withOrgGeogebraCommonMainApp_(id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener> listener, OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel *self = [OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel_initWithOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener_withOrgGeogebraCommonMainApp_(self, listener, app);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelAnimationStepModel)
