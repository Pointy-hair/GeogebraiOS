//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/gui/dialog/options/model/TextFieldSizeModel.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/gui/dialog/options/model/ITextFieldListener.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/gui/dialog/options/model/TextFieldSizeModel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel () {
 @public
  id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener> listener_;
  OrgGeogebraCommonKernelKernel *kernel_;
}

- (OrgGeogebraCommonKernelGeosGeoTextField *)getTextFieldAtWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel, kernel_, OrgGeogebraCommonKernelKernel *)

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoTextField *OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *self, jint index);

@implementation OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener:(id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener_(self, app, listener);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTextField *)getTextFieldAtWithInt:(jint)index {
  return OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(self, index);
}

- (void)updateProperties {
  OrgGeogebraCommonKernelGeosGeoTextField *temp, *geo0 = OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(self, 0);
  jboolean equalSize = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    temp = OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(self, i);
    if ([((OrgGeogebraCommonKernelGeosGeoTextField *) nil_chk(geo0)) getLength] != [((OrgGeogebraCommonKernelGeosGeoTextField *) nil_chk(temp)) getLength]) equalSize = NO;
  }
  if (equalSize) {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:JreStrcat("I", [((OrgGeogebraCommonKernelGeosGeoTextField *) nil_chk(geo0)) getLength])];
  }
  else {
    [((id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:@""];
  }
}

- (void)applyChangesWithNSString:(NSString *)strValue {
  [self applyChangesWithOrgGeogebraCommonKernelArithmeticNumberValue:[((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:strValue withBoolean:YES]];
}

- (void)applyChangesWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)value {
  if (value != nil && !JavaLangDouble_isNaNWithDouble_([value getDouble])) {
    for (jint i = 0; i < [self getGeosLength]; i++) {
      OrgGeogebraCommonKernelGeosGeoTextField *geo = OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(self, i);
      [((OrgGeogebraCommonKernelGeosGeoTextField *) nil_chk(geo)) setLengthWithInt:J2ObjCFpToInt([value getDouble])];
      [geo updateRepaint];
    }
  }
}

- (jboolean)isValidAtWithInt:(jint)index {
  return ([[self getGeoAtWithInt:index] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]]);
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener:", "TextFieldSizeModel", NULL, 0x1, NULL, NULL },
    { "getTextFieldAtWithInt:", "getTextFieldAt", "Lorg.geogebra.common.kernel.geos.GeoTextField;", 0x2, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "applyChangesWithNSString:", "applyChanges", "V", 0x1, NULL, NULL },
    { "applyChangesWithOrgGeogebraCommonKernelArithmeticNumberValue:", "applyChanges", "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.ITextFieldListener;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel = { 2, "TextFieldSizeModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener_(OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_set_listener_(self, listener);
  OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_set_kernel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel]);
}

OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *new_OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelITextFieldListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *self = [OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelITextFieldListener_(self, app, listener);
  return self;
}

OrgGeogebraCommonKernelGeosGeoTextField *OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *self, jint index) {
  return (OrgGeogebraCommonKernelGeosGeoTextField *) check_class_cast([self getObjectAtWithInt:index], [OrgGeogebraCommonKernelGeosGeoTextField class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelTextFieldSizeModel)
