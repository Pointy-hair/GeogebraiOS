//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/dialog/options/model/ColorFunctionModel.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/gui/dialog/options/model/ColorFunctionModel.h"
#include "org/geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel () {
 @public
  id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener> listener_;
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonKernelKernel *kernel_;
}

- (void)setListenerRGBAWithNSString:(NSString *)strRed
                       withNSString:(NSString *)strGreen
                       withNSString:(NSString *)strBlue
                       withNSString:(NSString *)strAlpha;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel, listener_, id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel, kernel_, OrgGeogebraCommonKernelKernel *)

__attribute__((unused)) static void OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_setListenerRGBAWithNSString_withNSString_withNSString_withNSString_(OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel *self, NSString *strRed, NSString *strGreen, NSString *strBlue, NSString *strAlpha);

@interface OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener : NSObject
@end

@implementation OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener:(id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener>)listener {
  OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener_(self, app, listener);
  return self;
}

- (void)updateProperties {
  jboolean someFillable = NO;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:i])) isFillable]) {
      someFillable = YES;
      continue;
    }
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener>) nil_chk(listener_)) showAlphaWithBoolean:someFillable];
  OrgGeogebraCommonKernelGeosGeoElement *geo0 = [self getGeoAtWithInt:0];
  [listener_ setDefaultValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo0];
  NSString *strRed = @"";
  NSString *strGreen = @"";
  NSString *strBlue = @"";
  NSString *strAlpha = @"";
  OrgGeogebraCommonKernelGeosGeoList *colorList = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getColorFunction];
  if (colorList != nil) {
    strRed = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colorList getWithInt:0])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()];
    strGreen = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colorList getWithInt:1])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()];
    strBlue = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colorList getWithInt:2])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()];
    if ([colorList size] == 4) strAlpha = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colorList getWithInt:3])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()];
  }
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    OrgGeogebraCommonKernelGeosGeoList *colorListTemp = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getColorFunction];
    if (colorListTemp != nil) {
      NSString *strRedTemp = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colorListTemp getWithInt:0])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()];
      NSString *strGreenTemp = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colorListTemp getWithInt:1])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()];
      NSString *strBlueTemp = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colorListTemp getWithInt:2])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()];
      NSString *strAlphaTemp = @"";
      if ([colorListTemp size] == 4) strAlphaTemp = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colorListTemp getWithInt:3])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()];
      if (![((NSString *) nil_chk(strRed)) isEqual:strRedTemp]) strRed = @"";
      if (![((NSString *) nil_chk(strGreen)) isEqual:strGreenTemp]) strGreen = @"";
      if (![((NSString *) nil_chk(strBlue)) isEqual:strBlueTemp]) strBlue = @"";
      if (![((NSString *) nil_chk(strAlpha)) isEqual:strAlphaTemp]) strAlpha = @"";
    }
  }
  OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_setListenerRGBAWithNSString_withNSString_withNSString_withNSString_(self, strRed, strGreen, strBlue, strAlpha);
}

- (void)setListenerRGBAWithNSString:(NSString *)strRed
                       withNSString:(NSString *)strGreen
                       withNSString:(NSString *)strBlue
                       withNSString:(NSString *)strAlpha {
  OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_setListenerRGBAWithNSString_withNSString_withNSString_withNSString_(self, strRed, strGreen, strBlue, strAlpha);
}

- (void)applyChangesWithNSString:(NSString *)strRed
                    withNSString:(NSString *)strGreen
                    withNSString:(NSString *)strBlue
                    withNSString:(NSString *)strAlpha
                         withInt:(jint)colorSpace
                    withNSString:(NSString *)defaultRed
                    withNSString:(NSString *)defaultGreen
                    withNSString:(NSString *)defaultBlue
                    withNSString:(NSString *)defaultAlpha {
  OrgGeogebraCommonKernelGeosGeoList *list = nil;
  OrgGeogebraCommonKernelGeosGeoList *listAlpha = nil;
  if ((strRed == nil || ((jint) [((NSString *) nil_chk([strRed trim])) length]) == 0) && (strGreen == nil || ((jint) [((NSString *) nil_chk([strGreen trim])) length]) == 0) && (strAlpha == nil || ((jint) [((NSString *) nil_chk([strAlpha trim])) length]) == 0) && (strBlue == nil || ((jint) [((NSString *) nil_chk([strBlue trim])) length]) == 0)) {
  }
  else {
    if (strRed == nil || ((jint) [((NSString *) nil_chk([strRed trim])) length]) == 0) strRed = defaultRed;
    if (strGreen == nil || ((jint) [((NSString *) nil_chk([strGreen trim])) length]) == 0) strGreen = defaultGreen;
    if (strBlue == nil || ((jint) [((NSString *) nil_chk([strBlue trim])) length]) == 0) strBlue = defaultBlue;
    if (strAlpha == nil || ((jint) [((NSString *) nil_chk([strAlpha trim])) length]) == 0) strAlpha = defaultAlpha;
    list = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToListWithNSString:JreStrcat("C$C$C$C", '{', strRed, ',', strGreen, ',', strBlue, '}')];
    listAlpha = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) evaluateToListWithNSString:JreStrcat("C$C$C$C$C", '{', strRed, ',', strGreen, ',', strBlue, ',', strAlpha, '}')];
  }
  if (list != nil) {
    if ((([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[list getWithInt:0]])) && (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[list getWithInt:1]])) && (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[list getWithInt:2]])) && (([list size] == 3 || [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[list getWithInt:3]]))) for (jint i = 0; i < [self getGeosLength]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFillable] && listAlpha != nil) {
        [geo setColorFunctionWithOrgGeogebraCommonKernelGeosGeoList:listAlpha];
        list = listAlpha;
      }
      else [geo setColorFunctionWithOrgGeogebraCommonKernelGeosGeoList:list];
      [geo setColorSpaceWithInt:colorSpace];
    }
    [list updateRepaint];
    [((id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener>) nil_chk(listener_)) updateSelectionWithNSObjectArray:[self getGeos]];
  }
  else {
    OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_setListenerRGBAWithNSString_withNSString_withNSString_withNSString_(self, strRed, strGreen, strBlue, strAlpha);
  }
}

- (jboolean)checkGeos {
  return YES;
}

- (void)removeAll {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeColorFunction];
    [geo setObjColorWithOrgGeogebraCommonAwtGColor:[geo getObjectColor]];
    [geo updateRepaint];
  }
  [((id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener>) nil_chk(listener_)) setRedTextWithNSString:@""];
  [listener_ setGreenTextWithNSString:@""];
  [listener_ setBlueTextWithNSString:@""];
  [listener_ setAlphaTextWithNSString:@""];
}

- (jboolean)isValidAtWithInt:(jint)index {
  return NO;
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(app_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener:", "ColorFunctionModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "setListenerRGBAWithNSString:withNSString:withNSString:withNSString:", "setListenerRGBA", "V", 0x2, NULL, NULL },
    { "applyChangesWithNSString:withNSString:withNSString:withNSString:withInt:withNSString:withNSString:withNSString:withNSString:", "applyChanges", "V", 0x1, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
    { "removeAll", NULL, "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.model.ColorFunctionModel$IColorFunctionListener;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.dialog.options.model.ColorFunctionModel$IColorFunctionListener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel = { 2, "ColorFunctionModel", "org.geogebra.common.gui.dialog.options.model", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel;
}

@end

void OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener_(OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_set_app_(self, app);
  OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_set_kernel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_set_listener_(self, listener);
}

OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel *new_OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener> listener) {
  OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel *self = [OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel alloc];
  OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener_(self, app, listener);
  return self;
}

void OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_setListenerRGBAWithNSString_withNSString_withNSString_withNSString_(OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel *self, NSString *strRed, NSString *strGreen, NSString *strBlue, NSString *strAlpha) {
  [((id<OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener>) nil_chk(self->listener_)) setRedTextWithNSString:strRed];
  [self->listener_ setGreenTextWithNSString:strGreen];
  [self->listener_ setBlueTextWithNSString:strBlue];
  [self->listener_ setAlphaTextWithNSString:strAlpha];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel)

@implementation OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setRedTextWithNSString:", "setRedText", "V", 0x401, NULL, NULL },
    { "setGreenTextWithNSString:", "setGreenText", "V", 0x401, NULL, NULL },
    { "setBlueTextWithNSString:", "setBlueText", "V", 0x401, NULL, NULL },
    { "setAlphaTextWithNSString:", "setAlphaText", "V", 0x401, NULL, NULL },
    { "showAlphaWithBoolean:", "showAlpha", "V", 0x401, NULL, NULL },
    { "setDefaultValuesWithOrgGeogebraCommonKernelGeosGeoElement:", "setDefaultValues", "V", 0x401, NULL, NULL },
    { "updateSelectionWithNSObjectArray:", "updateSelection", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener = { 2, "IColorFunctionListener", "org.geogebra.common.gui.dialog.options.model", "ColorFunctionModel", 0x609, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiDialogOptionsModelColorFunctionModel_IColorFunctionListener)
