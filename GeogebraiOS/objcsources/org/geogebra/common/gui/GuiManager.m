//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/GuiManager.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "org/geogebra/common/GeoGebraConstants.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/gui/GuiManager.h"
#include "org/geogebra/common/gui/Layout.h"
#include "org/geogebra/common/gui/layout/DockManager.h"
#include "org/geogebra/common/gui/view/consprotocol/ConstructionProtocolNavigation.h"
#include "org/geogebra/common/gui/view/consprotocol/ConstructionProtocolView.h"
#include "org/geogebra/common/gui/view/data/PlotPanelEuclidianViewInterface.h"
#include "org/geogebra/common/gui/view/probcalculator/ProbabilityCalculatorView.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/ModeSetter.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/DialogManager.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/main/SpreadsheetTraceManager.h"
#include "org/geogebra/common/main/settings/ConstructionProtocolSettings.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/main/settings/ProbabilityCalculatorSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/move/ggtapi/models/AuthenticationModel.h"
#include "org/geogebra/common/move/ggtapi/models/GeoGebraTubeUser.h"
#include "org/geogebra/common/move/ggtapi/operations/LogInOperation.h"
#include "org/geogebra/common/util/debug/Log.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgGeogebraCommonGuiGuiManager () {
 @public
  JavaUtilHashMap *plotPanelIDMap_;
  jint lastUsedPlotPanelID_;
  jboolean setModeFinished_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiGuiManager, plotPanelIDMap_, JavaUtilHashMap *)

static NSString *OrgGeogebraCommonGuiGuiManager_ggbTubeOld_ = @"geogebratube.org/";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiGuiManager, ggbTubeOld_, NSString *)

static NSString *OrgGeogebraCommonGuiGuiManager_ggbTube_ = @"tube.geogebra.org/";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiGuiManager, ggbTube_, NSString *)

static NSString *OrgGeogebraCommonGuiGuiManager_ggbTubeBeta_ = @"tube-beta.geogebra.org/";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiGuiManager, ggbTubeBeta_, NSString *)

static NSString *OrgGeogebraCommonGuiGuiManager_ggbTubeShort_ = @"ggbtu.be/";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiGuiManager, ggbTubeShort_, NSString *)

static NSString *OrgGeogebraCommonGuiGuiManager_ggbTubeTest_ = @"tube-test.geogebratube.org";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiGuiManager, ggbTubeTest_, NSString *)

static NSString *OrgGeogebraCommonGuiGuiManager_material_ = @"/material/show/id/";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiGuiManager, material_, NSString *)

__attribute__((unused)) static void OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(OrgGeogebraCommonGuiGuiManager_HelpEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonGuiGuiManager_HelpEnum *new_OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation OrgGeogebraCommonGuiGuiManager

- (instancetype)init {
  OrgGeogebraCommonGuiGuiManager_init(self);
  return self;
}

- (void)updateMenubar {
}

- (jboolean)hasAlgebraView {
  return NO;
}

- (jboolean)isUsingConstructionProtocol {
  return NO;
}

- (void)getConsProtocolXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([self isUsingConstructionProtocol]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolView *) nil_chk([self getConstructionProtocolView])) getConsProtocolXML]];
  if ([((OrgGeogebraCommonMainApp *) nil_chk((app_))) showConsProtNavigation]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<consProtNavigationBar "];
    [sb appendWithNSString:@"show=\""];
    [sb appendWithBoolean:[((OrgGeogebraCommonMainApp *) nil_chk((app_))) showConsProtNavigation]];
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@" playButton=\""];
    [sb appendWithBoolean:[((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk([self getConstructionProtocolNavigation])) isPlayButtonVisible]];
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@" playDelay=\""];
    [sb appendWithDouble:[((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk([self getConstructionProtocolNavigation])) getPlayDelay]];
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@" protButton=\""];
    [sb appendWithBoolean:[((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk([self getConstructionProtocolNavigation])) isConsProtButtonVisible]];
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@" consStep=\""];
    [sb appendWithInt:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstructionStep]];
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@"/>\n"];
  }
}

- (jboolean)hasProbabilityCalculator {
  return NO;
}

- (void)getProbabilityCalculatorXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (probCalculator_ != nil) [probCalculator_ getXMLWithJavaLangStringBuilder:sb];
}

- (void)getSpreadsheetViewXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withBoolean:(jboolean)asPreference {
}

- (void)updateActions {
}

- (void)updateConstructionProtocol {
}

- (jboolean)loadURLWithNSString:(NSString *)urlString {
  return [self loadURLWithNSString:urlString withBoolean:YES];
}

- (jboolean)loadURLWithNSString:(NSString *)urlString
                    withBoolean:(jboolean)suppressErrorMsg {
  NSString *processedUrlString = [((NSString *) nil_chk(urlString)) trim];
  jboolean success = NO;
  jboolean isMacroFile = NO;
  [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) setWaitCursor];
  @try {
    if (([((NSString *) nil_chk(processedUrlString)) hasSuffix:@".ggb"] || [processedUrlString hasSuffix:@".ggt"]) && ([processedUrlString indexOfString:@"?"] == -1)) {
      [self loadURL_GGBWithNSString:processedUrlString];
    }
    else if ([processedUrlString indexOfString:OrgGeogebraCommonGuiGuiManager_ggbTube_] > -1 || [processedUrlString indexOfString:OrgGeogebraCommonGuiGuiManager_ggbTubeShort_] > -1 || [processedUrlString indexOfString:OrgGeogebraCommonGuiGuiManager_ggbTubeTest_] > -1 || [processedUrlString indexOfString:OrgGeogebraCommonGuiGuiManager_ggbTubeBeta_] > -1 || [processedUrlString indexOfString:OrgGeogebraCommonGuiGuiManager_ggbTubeOld_] > -1) {
      if ([processedUrlString indexOfString:@"://"] > -1) {
        processedUrlString = [processedUrlString substring:[processedUrlString indexOfString:@"://"] + 3 endIndex:((jint) [processedUrlString length])];
      }
      processedUrlString = [processedUrlString substring:[((NSString *) nil_chk(processedUrlString)) indexOf:'/'] endIndex:((jint) [processedUrlString length])];
      if ([((NSString *) nil_chk(processedUrlString)) hasSuffix:@"?mobile=true"] || [processedUrlString hasSuffix:@"?mobile=false"]) {
        jint i = [processedUrlString lastIndexOf:'?'];
        processedUrlString = [processedUrlString substring:0 endIndex:i];
      }
      NSString *id_;
      jint start = -1;
      if ([((NSString *) nil_chk(processedUrlString)) hasPrefix:OrgGeogebraCommonGuiGuiManager_material_]) {
        start = ((jint) [((NSString *) nil_chk(OrgGeogebraCommonGuiGuiManager_material_)) length]);
      }
      else {
        start = [processedUrlString lastIndexOfString:@"/m"] + 2;
      }
      if (start == -1) {
        OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"problem parsing: ", processedUrlString));
        return NO;
      }
      jint end = -1;
      if (start > -1) {
        end = [processedUrlString indexOf:'/' fromIndex:start];
      }
      if (end == -1) {
        end = ((jint) [processedUrlString length]);
      }
      id_ = [processedUrlString substring:start endIndex:end];
      if ([urlString indexOfString:OrgGeogebraCommonGuiGuiManager_ggbTubeTest_] > -1) {
        processedUrlString = @"http://tube-test.geogebra.org:8080/files/material-";
      }
      else {
        processedUrlString = @"http://tube.geogebra.org/files/material-";
      }
      processedUrlString = JreStrcat("$$", processedUrlString, JreStrcat("$$", id_, @".ggb"));
      if ([((OrgGeogebraCommonMoveGgtapiOperationsLogInOperation *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLoginOperation])) isLoggedIn]) {
        NSString *token = [((OrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser *) nil_chk([((OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([((OrgGeogebraCommonMoveGgtapiOperationsLogInOperation *) nil_chk([app_ getLoginOperation])) getModel])) getLoggedInUser])) getLoginToken];
        if (token != nil) {
          processedUrlString = JreStrcat("$$", processedUrlString, JreStrcat("$$", @"?lt=", token));
        }
      }
      OrgGeogebraCommonMainApp_debugWithNSString_(processedUrlString);
      success = [self loadURL_GGBWithNSString:processedUrlString];
    }
    else if ([processedUrlString hasPrefix:@"UEs"]) {
      success = [self loadURL_base64WithNSString:processedUrlString];
    }
    else if ([processedUrlString hasPrefix:@"<?xml "] && [processedUrlString hasSuffix:@"</geogebra>"]) {
      success = [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) loadXMLWithNSString:processedUrlString];
    }
    else {
      success = [self loadFromAppletWithNSString:processedUrlString];
      isMacroFile = [processedUrlString contains:@".ggt"];
    }
  }
  @catch (JavaLangException *ex) {
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
  }
  if (!success && !suppressErrorMsg) {
    [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) showErrorWithNSString:JreStrcat("$C$", [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getLocalization])) getErrorWithNSString:@"LoadFileFailed"], 0x000a, processedUrlString)];
  }
  [self updateGUIafterLoadFileWithBoolean:success withBoolean:isMacroFile];
  return success;
}

- (OrgGeogebraCommonMainApp *)getApp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)loadURL_GGBWithNSString:(NSString *)url {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)loadURL_base64WithNSString:(NSString *)url {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)loadFromAppletWithNSString:(NSString *)url {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)attachViewWithInt:(jint)viewId {
  switch (viewId) {
    case OrgGeogebraCommonMainApp_VIEW_ALGEBRA:
    [self attachAlgebraView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_SPREADSHEET:
    [self attachSpreadsheetView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_CAS:
    [self attachCasView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_CONSTRUCTION_PROTOCOL:
    [self attachConstructionProtocolView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR:
    [self attachProbabilityCalculatorView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_DATA_ANALYSIS:
    [self attachDataAnalysisView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_ASSIGNMENT:
    [self attachAssignmentView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_PROPERTIES:
    [self attachPropertiesView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN:
    case OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2:
    case OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D:
    break;
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"Error attaching VIEW: ", viewId));
  }
}

- (void)showAxesCmd {
  id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [self getActiveEuclidianView];
  jboolean bothAxesShown = [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) getShowXaxis] && [ev getShowYaxis];
  OrgGeogebraCommonMainApp *app = [self getApp];
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app)) getEuclidianView1] == ev) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getEuclidianWithInt:1])) setShowAxesWithBoolean:!bothAxesShown withBoolean:!bothAxesShown];
  }
  else if ([app hasEuclidianView2EitherShowingOrNotWithInt:1] && [app getEuclidianView2WithInt:1] == ev) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getEuclidianWithInt:2])) setShowAxesWithBoolean:!bothAxesShown withBoolean:!bothAxesShown];
  }
  else if ([app hasEuclidianView3D] && [app getEuclidianView3D] == ev) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getEuclidianWithInt:3])) setShowAxesWithBoolean:!bothAxesShown];
  }
  else [ev setShowAxesWithBoolean:!bothAxesShown withBoolean:YES];
  [ev repaint];
  [app storeUndoInfo];
  [app updateMenubar];
}

- (void)showGridCmd {
  OrgGeogebraCommonEuclidianEuclidianView *ev = [self getActiveEuclidianView];
  OrgGeogebraCommonMainApp *app = [self getApp];
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app)) getEuclidianView1] == ev) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getEuclidianWithInt:1])) showGridWithBoolean:![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) getShowGrid]];
  }
  else if ([app hasEuclidianView2EitherShowingOrNotWithInt:1] && [app getEuclidianView2WithInt:1] == ev) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getEuclidianWithInt:2])) showGridWithBoolean:![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) getShowGrid]];
  }
  else if ([app hasEuclidianView3D] && [app getEuclidianView3D] == ev) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getEuclidianWithInt:3])) showGridWithBoolean:![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) getShowGrid]];
  }
  else [ev showGridWithBoolean:![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) getShowGrid]];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) repaint];
  [app storeUndoInfo];
  [app updateMenubar];
}

- (void)doAfterRedefineWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetTrace]) {
    [((OrgGeogebraCommonMainSpreadsheetTraceManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getTraceManager])) addSpreadsheetTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)detachViewWithInt:(jint)viewId {
  switch (viewId) {
    case OrgGeogebraCommonMainApp_VIEW_ALGEBRA:
    [self detachAlgebraView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_SPREADSHEET:
    [self detachSpreadsheetView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_CAS:
    [self detachCasView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_CONSTRUCTION_PROTOCOL:
    [self detachConstructionProtocolView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR:
    [self detachProbabilityCalculatorView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_ASSIGNMENT:
    [self detachAssignmentView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_PROPERTIES:
    [self detachPropertiesView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_DATA_ANALYSIS:
    [self detachDataAnalysisView];
    break;
    case OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN:
    case OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2:
    OrgGeogebraCommonMainApp_debugWithNSString_(@"TODO: should we detach EV1/2?");
    break;
    case OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D:
    OrgGeogebraCommonMainApp_debugWithNSString_(@"TODO: should we detach EV3D?");
    break;
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"Error detaching VIEW: ", viewId));
  }
}

- (void)openCommandHelpWithNSString:(NSString *)command {
  NSString *internalCmd = nil;
  if (command != nil) @try {
    internalCmd = [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getReverseCommandWithNSString:command];
  }
  @catch (JavaLangException *e) {
  }
  [self openHelpWithNSString:internalCmd withOrgGeogebraCommonGuiGuiManager_HelpEnum:OrgGeogebraCommonGuiGuiManager_HelpEnum_get_COMMAND()];
}

- (void)openHelpWithNSString:(NSString *)internalCmd
withOrgGeogebraCommonGuiGuiManager_HelpEnum:(OrgGeogebraCommonGuiGuiManager_HelpEnum *)command {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)openHelpWithNSString:(NSString *)page {
  [self openHelpWithNSString:page withOrgGeogebraCommonGuiGuiManager_HelpEnum:OrgGeogebraCommonGuiGuiManager_HelpEnum_get_GENERIC()];
}

- (void)setShowConstructionProtocolNavigationWithBoolean:(jboolean)show {
  [((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk([self getConstructionProtocolNavigation])) setVisibleWithBoolean:show];
  if (show) {
    if ([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getActiveEuclidianView] != nil) [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getActiveEuclidianView])) resetMode];
    [self getConstructionProtocolView];
  }
}

- (void)setShowConstructionProtocolNavigationWithBoolean:(jboolean)show
                                             withBoolean:(jboolean)playButton
                                              withDouble:(jdouble)playDelay
                                             withBoolean:(jboolean)showProtButton {
  [self setShowConstructionProtocolNavigationWithBoolean:show];
  [((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk([self getConstructionProtocolNavigation])) setPlayButtonVisibleWithBoolean:playButton];
  [((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk([self getConstructionProtocolNavigation])) setPlayDelayWithDouble:playDelay];
  if (OrgGeogebraCommonMainApp_isFullAppGui()) {
    [((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk([self getConstructionProtocolNavigation])) setConsProtButtonVisibleWithBoolean:showProtButton];
  }
  else {
    [((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk([self getConstructionProtocolNavigation])) setConsProtButtonVisibleWithBoolean:NO];
  }
}

- (OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *)getConstructionProtocolNavigation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *)getConstructionProtocolNavigationIfExists {
  return constProtocolNavigation_;
}

- (void)updateCheckBoxesForShowConstructinProtocolNavigation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)applyCPsettingsWithOrgGeogebraCommonMainSettingsConstructionProtocolSettings:(OrgGeogebraCommonMainSettingsConstructionProtocolSettings *)cps {
  if (constProtocolNavigation_ == nil) {
    return;
  }
  [((OrgGeogebraCommonGuiViewConsprotocolConstructionProtocolNavigation *) nil_chk(constProtocolNavigation_)) setConsProtButtonVisibleWithBoolean:[((OrgGeogebraCommonMainSettingsConstructionProtocolSettings *) nil_chk(cps)) showConsProtButton]];
  [constProtocolNavigation_ setPlayDelayWithDouble:[cps getPlayDelay]];
  [constProtocolNavigation_ setPlayButtonVisibleWithBoolean:[cps showPlayButton]];
}

- (JavaUtilHashMap *)getPlotPanelIDMap {
  if (plotPanelIDMap_ == nil) OrgGeogebraCommonGuiGuiManager_setAndConsume_plotPanelIDMap_(self, new_JavaUtilHashMap_init());
  return plotPanelIDMap_;
}

- (jint)assignPlotPanelIDWithOrgGeogebraCommonGuiViewDataPlotPanelEuclidianViewInterface:(id<OrgGeogebraCommonGuiViewDataPlotPanelEuclidianViewInterface>)plotPanel {
  lastUsedPlotPanelID_--;
  jint viewID = lastUsedPlotPanelID_;
  [((JavaUtilHashMap *) nil_chk([self getPlotPanelIDMap])) putWithId:JavaLangInteger_valueOfWithInt_(viewID) withId:plotPanel];
  OrgGeogebraCommonUtilDebugLog_debugWithId_(JavaLangInteger_valueOfWithInt_(viewID));
  return viewID;
}

- (id<OrgGeogebraCommonGuiViewDataPlotPanelEuclidianViewInterface>)getPlotPanelViewWithInt:(jint)viewID {
  return [((JavaUtilHashMap *) nil_chk([self getPlotPanelIDMap])) getWithId:JavaLangInteger_valueOfWithInt_(viewID)];
}

- (void)setModeWithInt:(jint)mode
withOrgGeogebraCommonKernelModeSetterEnum:(OrgGeogebraCommonKernelModeSetterEnum *)m {
  setModeFinished_ = NO;
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyModeChangedWithInt:mode withOrgGeogebraCommonKernelModeSetterEnum:m];
  if (setModeFinished_) return;
  jint newMode = [self setToolbarModeWithInt:mode withOrgGeogebraCommonKernelModeSetterEnum:m];
  if (mode != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER && newMode != mode) {
    mode = newMode;
    [kernel_ notifyModeChangedWithInt:mode withOrgGeogebraCommonKernelModeSetterEnum:m];
  }
  if (mode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PROBABILITY_CALCULATOR) {
    if ([self showViewWithInt:OrgGeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR]) {
      [((OrgGeogebraCommonGuiLayoutDockManager *) nil_chk([((OrgGeogebraCommonGuiLayout *) nil_chk([self getLayout])) getDockManager])) setFocusedPanelWithInt:OrgGeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR];
    }
    else {
      [self setShowViewWithBoolean:YES withInt:OrgGeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR];
      [((OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *) nil_chk(probCalculator_)) setProbabilityCalculatorWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_NORMAL() withDoubleArray:nil withBoolean:NO];
    }
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setMoveMode];
  }
  if ((mode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_ONEVARSTATS || mode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_TWOVARSTATS || mode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_MULTIVARSTATS) && m == OrgGeogebraCommonKernelModeSetterEnum_get_TOOLBAR()) {
    JavaUtilArrayList *temp = [new_JavaUtilArrayList_init() autorelease];
    if ([((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) getSelectedGeos] != nil) {
      for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((OrgGeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) getSelectedGeos])) {
        [temp addWithId:geo];
      }
    }
    if ([app_ getGuiManager] != nil) {
      [((OrgGeogebraCommonMainDialogManager *) nil_chk([app_ getDialogManager])) showDataSourceDialogWithInt:mode withBoolean:YES];
      [app_ setMoveMode];
    }
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) setSelectedGeosWithJavaUtilArrayList:temp];
  }
  setModeFinished_ = YES;
}

- (jint)setToolbarModeWithInt:(jint)mode
withOrgGeogebraCommonKernelModeSetterEnum:(OrgGeogebraCommonKernelModeSetterEnum *)m {
  return 0;
}

- (void)setCallerApp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getHelpURLWithOrgGeogebraCommonGuiGuiManager_HelpEnum:(OrgGeogebraCommonGuiGuiManager_HelpEnum *)type
                                                       withNSString:(NSString *)pageName {
  JavaLangStringBuilder *urlSB = [new_JavaLangStringBuilder_init() autorelease];
  [urlSB appendWithNSString:OrgGeogebraCommonGeoGebraConstants_get_GEOGEBRA_WEBSITE_()];
  [urlSB appendWithNSString:@"help/"];
  [urlSB appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLocalization])) getLanguage]];
  switch ([type ordinal]) {
    case OrgGeogebraCommonGuiGuiManager_Help_COMMAND:
    pageName = [app_ getEnglishCommandWithNSString:pageName];
    [urlSB appendWithNSString:@"/cmd/"];
    [urlSB appendWithNSString:pageName];
    break;
    case OrgGeogebraCommonGuiGuiManager_Help_TOOL:
    [urlSB appendWithNSString:@"/tool/"];
    [urlSB appendWithNSString:pageName];
    break;
    case OrgGeogebraCommonGuiGuiManager_Help_GENERIC:
    [urlSB appendWithNSString:@"/article/"];
    [urlSB appendWithNSString:pageName];
    break;
    default:
    OrgGeogebraCommonUtilDebugLog_errorWithNSString_(@"Bad getHelpURL call");
  }
  return [urlSB description];
}

- (void)redo {
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) redo];
  [self updateActions];
  [(app_) resetPen];
  [app_ setDefaultCursor];
}

- (void)undo {
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) undo];
  [self updateActions];
  [(app_) resetPen];
  [app_ setDefaultCursor];
}

- (NSString *)getToolbarDefinition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setToolBarDefinitionWithNSString:(NSString *)toolBarDefinition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)refreshCustomToolsInToolBar {
  jint macroCount = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getMacroNumber];
  JavaLangStringBuilder *customToolBar = [new_JavaLangStringBuilder_initWithNSString_(@"") autorelease];
  for (jint i = 0; i < macroCount; i++) {
    OrgGeogebraCommonKernelMacro *macro = [kernel_ getMacroWithInt:i];
    jint macroMode = OrgGeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET + i;
    if ([((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) isShowInToolBar] && !([((NSString *) nil_chk([self getToolbarDefinition])) contains:NSString_valueOfInt_(macroMode)])) {
      [customToolBar appendWithNSString:JreStrcat("CI", ' ', macroMode)];
    }
  }
  NSString *toolbarDef = [((NSString *) nil_chk([self getToolbarDefinition])) trim];
  NSString *last = @"";
  @try {
    IOSObjectArray *tools = [((NSString *) nil_chk(toolbarDef)) split:@" "];
    last = IOSObjectArray_Get(tools, ((IOSObjectArray *) nil_chk(tools))->size_ - 1);
    jint lastToolId = JavaLangInteger_parseIntWithNSString_(last);
    if (lastToolId >= OrgGeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET) {
      [self setToolBarDefinitionWithNSString:JreStrcat("$$", toolbarDef, [customToolBar description])];
    }
    else {
      [self setToolBarDefinitionWithNSString:JreStrcat("$$$", toolbarDef, @" ||", [customToolBar description])];
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    if ([((NSString *) nil_chk(last)) contains:@"|"]) {
      [self setToolBarDefinitionWithNSString:JreStrcat("$$", toolbarDef, [customToolBar description])];
    }
    else {
      [self setToolBarDefinitionWithNSString:JreStrcat("$$$", toolbarDef, @" ||", [customToolBar description])];
    }
  }
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(app_);
  RELEASE_(constProtocolNavigation_);
  RELEASE_(plotPanelIDMap_);
  RELEASE_(probCalculator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GuiManager", NULL, 0x1, NULL, NULL },
    { "updateMenubar", NULL, "V", 0x1, NULL, NULL },
    { "hasAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "isUsingConstructionProtocol", NULL, "Z", 0x1, NULL, NULL },
    { "getConsProtocolXMLWithJavaLangStringBuilder:", "getConsProtocolXML", "V", 0x11, NULL, NULL },
    { "hasProbabilityCalculator", NULL, "Z", 0x1, NULL, NULL },
    { "getProbabilityCalculatorXMLWithJavaLangStringBuilder:", "getProbabilityCalculatorXML", "V", 0x1, NULL, NULL },
    { "getSpreadsheetViewXMLWithJavaLangStringBuilder:withBoolean:", "getSpreadsheetViewXML", "V", 0x1, NULL, NULL },
    { "updateActions", NULL, "V", 0x1, NULL, NULL },
    { "updateConstructionProtocol", NULL, "V", 0x1, NULL, NULL },
    { "loadURLWithNSString:", "loadURL", "Z", 0x1, NULL, NULL },
    { "loadURLWithNSString:withBoolean:", "loadURL", "Z", 0x1, NULL, NULL },
    { "getApp", NULL, "Lorg.geogebra.common.main.App;", 0x404, NULL, NULL },
    { "loadURL_GGBWithNSString:", "loadURL_GGB", "Z", 0x404, "Ljava.lang.Exception;", NULL },
    { "loadURL_base64WithNSString:", "loadURL_base64", "Z", 0x404, "Ljava.lang.Exception;", NULL },
    { "loadFromAppletWithNSString:", "loadFromApplet", "Z", 0x404, "Ljava.lang.Exception;", NULL },
    { "attachViewWithInt:", "attachView", "V", 0x1, NULL, NULL },
    { "showAxesCmd", NULL, "V", 0x1, NULL, NULL },
    { "showGridCmd", NULL, "V", 0x1, NULL, NULL },
    { "doAfterRedefineWithOrgGeogebraCommonKernelGeosGeoElement:", "doAfterRedefine", "V", 0x1, NULL, NULL },
    { "detachViewWithInt:", "detachView", "V", 0x1, NULL, NULL },
    { "openCommandHelpWithNSString:", "openCommandHelp", "V", 0x1, NULL, NULL },
    { "openHelpWithNSString:withOrgGeogebraCommonGuiGuiManager_HelpEnum:", "openHelp", "V", 0x404, NULL, NULL },
    { "openHelpWithNSString:", "openHelp", "V", 0x1, NULL, NULL },
    { "setShowConstructionProtocolNavigationWithBoolean:", "setShowConstructionProtocolNavigation", "V", 0x1, NULL, NULL },
    { "setShowConstructionProtocolNavigationWithBoolean:withBoolean:withDouble:withBoolean:", "setShowConstructionProtocolNavigation", "V", 0x1, NULL, NULL },
    { "getConstructionProtocolNavigation", NULL, "Lorg.geogebra.common.gui.view.consprotocol.ConstructionProtocolNavigation;", 0x401, NULL, NULL },
    { "getConstructionProtocolNavigationIfExists", NULL, "Lorg.geogebra.common.gui.view.consprotocol.ConstructionProtocolNavigation;", 0x1, NULL, NULL },
    { "updateCheckBoxesForShowConstructinProtocolNavigation", NULL, "V", 0x401, NULL, NULL },
    { "applyCPsettingsWithOrgGeogebraCommonMainSettingsConstructionProtocolSettings:", "applyCPsettings", "V", 0x1, NULL, NULL },
    { "getPlotPanelIDMap", NULL, "Ljava.util.HashMap;", 0x4, NULL, NULL },
    { "assignPlotPanelIDWithOrgGeogebraCommonGuiViewDataPlotPanelEuclidianViewInterface:", "assignPlotPanelID", "I", 0x1, NULL, NULL },
    { "getPlotPanelViewWithInt:", "getPlotPanelView", "Lorg.geogebra.common.gui.view.data.PlotPanelEuclidianViewInterface;", 0x1, NULL, NULL },
    { "setModeWithInt:withOrgGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "setToolbarModeWithInt:withOrgGeogebraCommonKernelModeSetterEnum:", "setToolbarMode", "I", 0x4, NULL, NULL },
    { "setCallerApp", NULL, "V", 0x404, NULL, NULL },
    { "getHelpURLWithOrgGeogebraCommonGuiGuiManager_HelpEnum:withNSString:", "getHelpURL", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "redo", NULL, "V", 0x1, NULL, NULL },
    { "undo", NULL, "V", 0x1, NULL, NULL },
    { "getToolbarDefinition", NULL, "Ljava.lang.String;", 0x401, NULL, NULL },
    { "setToolBarDefinitionWithNSString:", "setToolBarDefinition", "V", 0x401, NULL, NULL },
    { "refreshCustomToolsInToolBar", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ggbTubeOld_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiGuiManager_ggbTubeOld_, NULL,  },
    { "ggbTube_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiGuiManager_ggbTube_, NULL,  },
    { "ggbTubeBeta_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiGuiManager_ggbTubeBeta_, NULL,  },
    { "ggbTubeShort_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiGuiManager_ggbTubeShort_, NULL,  },
    { "ggbTubeTest_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiGuiManager_ggbTubeTest_, NULL,  },
    { "material_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiGuiManager_material_, NULL,  },
    { "DESKTOP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiGuiManager_DESKTOP },
    { "WEB_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiGuiManager_WEB },
    { "TOUCH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiGuiManager_TOUCH },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x4, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "constProtocolNavigation_", NULL, 0x4, "Lorg.geogebra.common.gui.view.consprotocol.ConstructionProtocolNavigation;", NULL, NULL,  },
    { "plotPanelIDMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Lorg/geogebra/common/gui/view/data/PlotPanelEuclidianViewInterface;>;",  },
    { "lastUsedPlotPanelID_", NULL, 0x2, "I", NULL, NULL,  },
    { "setModeFinished_", NULL, 0x2, "Z", NULL, NULL,  },
    { "probCalculator_", NULL, 0x4, "Lorg.geogebra.common.gui.view.probcalculator.ProbabilityCalculatorView;", NULL, NULL,  },
    { "caller_APP_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.GuiManager$Help;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiGuiManager = { 2, "GuiManager", "org.geogebra.common.gui", NULL, 0x401, 42, methods, 17, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiGuiManager;
}

@end

void OrgGeogebraCommonGuiGuiManager_init(OrgGeogebraCommonGuiGuiManager *self) {
  NSObject_init(self);
  self->lastUsedPlotPanelID_ = -OrgGeogebraCommonMainApp_VIEW_PLOT_PANEL;
  [self setCallerApp];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiGuiManager)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGuiGuiManager_HelpEnum)

OrgGeogebraCommonGuiGuiManager_HelpEnum *OrgGeogebraCommonGuiGuiManager_HelpEnum_values_[3];

@implementation OrgGeogebraCommonGuiGuiManager_HelpEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonGuiGuiManager_HelpEnum_values() {
  OrgGeogebraCommonGuiGuiManager_HelpEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonGuiGuiManager_HelpEnum_values_ count:3 type:OrgGeogebraCommonGuiGuiManager_HelpEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonGuiGuiManager_HelpEnum_values();
}

+ (OrgGeogebraCommonGuiGuiManager_HelpEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonGuiGuiManager_HelpEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonGuiGuiManager_HelpEnum *OrgGeogebraCommonGuiGuiManager_HelpEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonGuiGuiManager_HelpEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonGuiGuiManager_HelpEnum *e = OrgGeogebraCommonGuiGuiManager_HelpEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGuiGuiManager_HelpEnum class]) {
    OrgGeogebraCommonGuiGuiManager_HelpEnum_COMMAND = new_OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(@"COMMAND", 0);
    OrgGeogebraCommonGuiGuiManager_HelpEnum_TOOL = new_OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(@"TOOL", 1);
    OrgGeogebraCommonGuiGuiManager_HelpEnum_GENERIC = new_OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(@"GENERIC", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGuiGuiManager_HelpEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "COMMAND", "COMMAND", 0x4019, "Lorg.geogebra.common.gui.GuiManager$Help;", &OrgGeogebraCommonGuiGuiManager_HelpEnum_COMMAND, NULL,  },
    { "TOOL", "TOOL", 0x4019, "Lorg.geogebra.common.gui.GuiManager$Help;", &OrgGeogebraCommonGuiGuiManager_HelpEnum_TOOL, NULL,  },
    { "GENERIC", "GENERIC", 0x4019, "Lorg.geogebra.common.gui.GuiManager$Help;", &OrgGeogebraCommonGuiGuiManager_HelpEnum_GENERIC, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.gui.GuiManager$Help;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiGuiManager_HelpEnum = { 2, "Help", "org.geogebra.common.gui", "GuiManager", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/gui/GuiManager$Help;>;" };
  return &_OrgGeogebraCommonGuiGuiManager_HelpEnum;
}

@end

void OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(OrgGeogebraCommonGuiGuiManager_HelpEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonGuiGuiManager_HelpEnum *new_OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonGuiGuiManager_HelpEnum *self = [OrgGeogebraCommonGuiGuiManager_HelpEnum alloc];
  OrgGeogebraCommonGuiGuiManager_HelpEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiGuiManager_HelpEnum)
