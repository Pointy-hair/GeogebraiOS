//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/inputfield/DynamicTextProcessor.java
//


#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/gui/inputfield/DynamicTextElement.h"
#include "org/geogebra/common/gui/inputfield/DynamicTextProcessor.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentText.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonGuiInputfieldDynamicTextProcessor () {
 @public
  OrgGeogebraCommonMainApp *app_;
  JavaUtilArrayList *dList_;
}

- (void)splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                 withJavaUtilArrayList:(JavaUtilArrayList *)dList;

- (OrgGeogebraCommonGuiInputfieldDynamicTextElement *)createDynamicTextElementWithNSString:(NSString *)text;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiInputfieldDynamicTextProcessor, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiInputfieldDynamicTextProcessor, dList_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_(OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en, JavaUtilArrayList *dList);

__attribute__((unused)) static OrgGeogebraCommonGuiInputfieldDynamicTextElement *OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *self, NSString *text);

@implementation OrgGeogebraCommonGuiInputfieldDynamicTextProcessor

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (JavaUtilArrayList *)buildDynamicTextListWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)geo {
  [((JavaUtilArrayList *) nil_chk(dList_)) clear];
  if (geo == nil) return dList_;
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(geo)) isIndependent]) {
    [dList_ addWithId:[new_OrgGeogebraCommonGuiInputfieldDynamicTextElement_initWithNSString_withOrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_([geo getTextString], OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_STATIC()) autorelease]];
    return dList_;
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *root = [((OrgGeogebraCommonKernelAlgosAlgoDependentText *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoDependentText *) check_class_cast([geo getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoDependentText class])))) getRoot];
  OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_(self, root, dList_);
  return dList_;
}

- (void)splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                 withJavaUtilArrayList:(JavaUtilArrayList *)dList {
  OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_(self, en, dList);
}

- (OrgGeogebraCommonGuiInputfieldDynamicTextElement *)createDynamicTextElementWithNSString:(NSString *)text {
  return OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, text);
}

- (NSString *)buildGeoGebraStringWithJavaUtilArrayList:(JavaUtilArrayList *)list
                                           withBoolean:(jboolean)latex {
  if (list == nil || [list size] == 0) {
    return @"";
  }
  jchar currentQuote = OrgGeogebraCommonUtilUnicode_OPEN_DOUBLE_QUOTE;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  NSString *text;
  OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum *mode;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(list)) size]; i++) {
    text = ((OrgGeogebraCommonGuiInputfieldDynamicTextElement *) nil_chk([list getWithInt:i]))->text_;
    mode = ((OrgGeogebraCommonGuiInputfieldDynamicTextElement *) nil_chk([list getWithInt:i]))->type_;
    if (mode == OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_STATIC()) {
      for (jint k = 0; k < ((jint) [((NSString *) nil_chk(text)) length]); k++) {
        currentQuote = OrgGeogebraCommonUtilStringUtil_processQuotesWithJavaLangStringBuilder_withNSString_withChar_(sb, [text substring:k endIndex:k + 1], currentQuote);
      }
    }
    else {
      if (mode == OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_DEFINITION()) {
        [sb appendWithNSString:@"\"+"];
        [sb appendWithNSString:@"Name["];
        [sb appendWithNSString:text];
        [sb appendWithChar:']'];
        [sb appendWithNSString:@"+\""];
      }
      else if (latex || mode == OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_FORMULA_TEXT()) {
        [sb appendWithNSString:@"\"+"];
        [sb appendWithNSString:@"LaTeX["];
        [sb appendWithNSString:text];
        [sb appendWithChar:']'];
        [sb appendWithNSString:@"+\""];
      }
      else if (mode == OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_VALUE()) {
        [sb appendWithNSString:@"\"+("];
        [sb appendWithNSString:text];
        [sb appendWithNSString:@")+\""];
      }
    }
  }
  [sb insertWithInt:0 withChar:'"'];
  [sb appendWithChar:'"'];
  return [sb description];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(dList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "DynamicTextProcessor", NULL, 0x1, NULL, NULL },
    { "buildDynamicTextListWithOrgGeogebraCommonKernelGeosGeoText:", "buildDynamicTextList", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode:withJavaUtilArrayList:", "splitString", "V", 0x2, NULL, NULL },
    { "createDynamicTextElementWithNSString:", "createDynamicTextElement", "Lorg.geogebra.common.gui.inputfield.DynamicTextElement;", 0x2, NULL, NULL },
    { "buildGeoGebraStringWithJavaUtilArrayList:withBoolean:", "buildGeoGebraString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "dList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/gui/inputfield/DynamicTextElement;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiInputfieldDynamicTextProcessor = { 2, "DynamicTextProcessor", "org.geogebra.common.gui.inputfield", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiInputfieldDynamicTextProcessor;
}

@end

void OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *self, OrgGeogebraCommonMainApp *app) {
  NSObject_init(self);
  OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_set_app_(self, app);
  OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_setAndConsume_dList_(self, new_JavaUtilArrayList_init());
}

OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *new_OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *self = [OrgGeogebraCommonGuiInputfieldDynamicTextProcessor alloc];
  OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

void OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_(OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en, JavaUtilArrayList *dList) {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getLeft];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  if ([en isLeaf]) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement]) {
      OrgGeogebraCommonGuiInputfieldDynamicTextElement *d = OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
      [((JavaUtilArrayList *) nil_chk(dList)) addWithId:d];
    }
    else if ([left isExpressionNode]) OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), dList);
    else if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyStringBuffer class]]) {
      OrgGeogebraCommonGuiInputfieldDynamicTextElement *d = OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, [((NSString *) nil_chk([left toStringWithOrgGeogebraCommonKernelStringTemplate:tpl])) replaceAll:@"\"" withReplacement:@""]);
      [((JavaUtilArrayList *) nil_chk(dList)) addWithId:d];
    }
    else {
      OrgGeogebraCommonGuiInputfieldDynamicTextElement *d = OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, [left toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]);
      [((JavaUtilArrayList *) nil_chk(dList)) addWithId:d];
    }
  }
  else {
    if (right != nil && ![en containsMyStringBuffer]) {
      [((JavaUtilArrayList *) nil_chk(dList)) addWithId:OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, [en toStringWithOrgGeogebraCommonKernelStringTemplate:tpl])];
      return;
    }
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement]) {
      [((JavaUtilArrayList *) nil_chk(dList)) addWithId:OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl])];
    }
    else if ([left isExpressionNode]) OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), dList);
    else if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyStringBuffer class]]) {
      [((JavaUtilArrayList *) nil_chk(dList)) addWithId:[new_OrgGeogebraCommonGuiInputfieldDynamicTextElement_initWithNSString_withOrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_([((NSString *) nil_chk([left toStringWithOrgGeogebraCommonKernelStringTemplate:tpl])) replaceAll:@"\"" withReplacement:@""], OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_STATIC()) autorelease]];
    }
    else {
      [((JavaUtilArrayList *) nil_chk(dList)) addWithId:OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, [left toStringWithOrgGeogebraCommonKernelStringTemplate:tpl])];
    }
    if (right != nil) {
      if ([right isGeoElement]) {
        [((JavaUtilArrayList *) nil_chk(dList)) addWithId:OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl])];
      }
      else if ([right isExpressionNode]) OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_splitStringWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), dList);
      else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyStringBuffer class]]) {
        [((JavaUtilArrayList *) nil_chk(dList)) addWithId:[new_OrgGeogebraCommonGuiInputfieldDynamicTextElement_initWithNSString_withOrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_([((NSString *) nil_chk([right toStringWithOrgGeogebraCommonKernelStringTemplate:tpl])) replaceAll:@"\"" withReplacement:@""], OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_STATIC()) autorelease]];
      }
      else {
        [((JavaUtilArrayList *) nil_chk(dList)) addWithId:OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(self, [right toStringWithOrgGeogebraCommonKernelStringTemplate:tpl])];
      }
    }
  }
}

OrgGeogebraCommonGuiInputfieldDynamicTextElement *OrgGeogebraCommonGuiInputfieldDynamicTextProcessor_createDynamicTextElementWithNSString_(OrgGeogebraCommonGuiInputfieldDynamicTextProcessor *self, NSString *text) {
  NSString *contentString = text;
  OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum *type = OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_VALUE();
  NSString *prefix;
  if ([((NSString *) nil_chk(contentString)) hasSuffix:@"]"]) {
    if ([contentString hasPrefix:prefix = JreStrcat("$C", [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization])) getCommandWithNSString:@"LaTeX"], '[')]) {
      contentString = [contentString substring:((jint) [prefix length]) endIndex:((jint) [contentString length]) - 1];
      jint commaIndex = [((NSString *) nil_chk(contentString)) lastIndexOf:','];
      jint bracketCount = 0;
      for (jint i = commaIndex + 1; i < ((jint) [contentString length]); i++) {
        if ([contentString charAtWithInt:i] == '[') bracketCount++;
        else if ([contentString charAtWithInt:i] == ']') bracketCount--;
      }
      if (bracketCount != 0 || commaIndex == -1) {
        type = OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_FORMULA_TEXT();
      }
    }
    else if ([contentString hasPrefix:prefix = JreStrcat("$C", [((OrgGeogebraCommonMainLocalization *) nil_chk([self->app_ getLocalization])) getCommandWithNSString:@"Name"], '[')]) {
      contentString = [contentString substring:((jint) [prefix length]) endIndex:((jint) [contentString length]) - 1];
      type = OrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_get_DEFINITION();
    }
  }
  return [new_OrgGeogebraCommonGuiInputfieldDynamicTextElement_initWithNSString_withOrgGeogebraCommonGuiInputfieldDynamicTextElement_DynamicTextTypeEnum_(contentString, type) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiInputfieldDynamicTextProcessor)
