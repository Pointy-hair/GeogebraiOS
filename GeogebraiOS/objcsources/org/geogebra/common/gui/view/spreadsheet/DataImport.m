//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/view/spreadsheet/DataImport.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "org/geogebra/common/gui/view/spreadsheet/DataImport.h"
#include "org/geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/opencsv/CSVException.h"
#include "org/geogebra/common/util/opencsv/CSVParser.h"

@interface OrgGeogebraCommonGuiViewSpreadsheetDataImport ()

+ (OrgGeogebraCommonUtilOpencsvCSVParser *)getCommaParser;

+ (OrgGeogebraCommonUtilOpencsvCSVParser *)getTabParser;

+ (IOSObjectArray *)parseCSVdataWithNSString:(NSString *)input;

+ (NSString *)adjustNumberStringWithNSString:(NSString *)s;

@end

static NSString *OrgGeogebraCommonGuiViewSpreadsheetDataImport_groupingSeparator_ = @",";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetDataImport, groupingSeparator_, NSString *)

static ComGoogleGwtRegexpSharedRegExp *OrgGeogebraCommonGuiViewSpreadsheetDataImport_regex_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetDataImport, regex_, ComGoogleGwtRegexpSharedRegExp *)

__attribute__((unused)) static OrgGeogebraCommonUtilOpencsvCSVParser *OrgGeogebraCommonGuiViewSpreadsheetDataImport_getCommaParser();

__attribute__((unused)) static OrgGeogebraCommonUtilOpencsvCSVParser *OrgGeogebraCommonGuiViewSpreadsheetDataImport_getTabParser();

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseCSVdataWithNSString_(NSString *input);

__attribute__((unused)) static NSString *OrgGeogebraCommonGuiViewSpreadsheetDataImport_adjustNumberStringWithNSString_(NSString *s);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGuiViewSpreadsheetDataImport)

OrgGeogebraCommonUtilOpencsvCSVParser *OrgGeogebraCommonGuiViewSpreadsheetDataImport_commaParser_;
OrgGeogebraCommonUtilOpencsvCSVParser *OrgGeogebraCommonGuiViewSpreadsheetDataImport_tabParser_;
NSString *OrgGeogebraCommonGuiViewSpreadsheetDataImport_decimalSeparator_ = @".";

@implementation OrgGeogebraCommonGuiViewSpreadsheetDataImport

+ (IOSObjectArray *)parseExternalDataWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                                     withNSString:(NSString *)source
                                                      withBoolean:(jboolean)isCSV {
  return OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseExternalDataWithOrgGeogebraCommonMainApp_withNSString_withBoolean_(app, source, isCSV);
}

+ (OrgGeogebraCommonUtilOpencsvCSVParser *)getCommaParser {
  return OrgGeogebraCommonGuiViewSpreadsheetDataImport_getCommaParser();
}

+ (OrgGeogebraCommonUtilOpencsvCSVParser *)getTabParser {
  return OrgGeogebraCommonGuiViewSpreadsheetDataImport_getTabParser();
}

+ (IOSObjectArray *)parseCSVdataWithNSString:(NSString *)input {
  return OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseCSVdataWithNSString_(input);
}

+ (IOSObjectArray *)parseTabDataWithNSString:(NSString *)input {
  return OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseTabDataWithNSString_(input);
}

+ (NSString *)adjustNumberStringWithNSString:(NSString *)s {
  return OrgGeogebraCommonGuiViewSpreadsheetDataImport_adjustNumberStringWithNSString_(s);
}

- (instancetype)init {
  OrgGeogebraCommonGuiViewSpreadsheetDataImport_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGuiViewSpreadsheetDataImport class]) {
    OrgGeogebraCommonGuiViewSpreadsheetDataImport_regex_ = ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"^-?\\d?\\d?\\d,(\\d\\d\\d,)*\\d\\d\\d$");
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGuiViewSpreadsheetDataImport)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "parseExternalDataWithOrgGeogebraCommonMainApp:withNSString:withBoolean:", "parseExternalData", "[[Ljava.lang.String;", 0x9, NULL, NULL },
    { "getCommaParser", NULL, "Lorg.geogebra.common.util.opencsv.CSVParser;", 0xa, NULL, NULL },
    { "getTabParser", NULL, "Lorg.geogebra.common.util.opencsv.CSVParser;", 0xa, NULL, NULL },
    { "parseCSVdataWithNSString:", "parseCSVdata", "[[Ljava.lang.String;", 0xa, NULL, NULL },
    { "parseTabDataWithNSString:", "parseTabData", "[[Ljava.lang.String;", 0x9, NULL, NULL },
    { "adjustNumberStringWithNSString:", "adjustNumberString", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commaParser_", NULL, 0x8, "Lorg.geogebra.common.util.opencsv.CSVParser;", &OrgGeogebraCommonGuiViewSpreadsheetDataImport_commaParser_, NULL,  },
    { "tabParser_", NULL, 0x8, "Lorg.geogebra.common.util.opencsv.CSVParser;", &OrgGeogebraCommonGuiViewSpreadsheetDataImport_tabParser_, NULL,  },
    { "decimalSeparator_", NULL, 0x18, "Ljava.lang.String;", &OrgGeogebraCommonGuiViewSpreadsheetDataImport_decimalSeparator_, NULL,  },
    { "groupingSeparator_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiViewSpreadsheetDataImport_groupingSeparator_, NULL,  },
    { "regex_", NULL, 0x1a, "Lcom.google.gwt.regexp.shared.RegExp;", &OrgGeogebraCommonGuiViewSpreadsheetDataImport_regex_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewSpreadsheetDataImport = { 2, "DataImport", "org.geogebra.common.gui.view.spreadsheet", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewSpreadsheetDataImport;
}

@end

IOSObjectArray *OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseExternalDataWithOrgGeogebraCommonMainApp_withNSString_withBoolean_(OrgGeogebraCommonMainApp *app, NSString *source, jboolean isCSV) {
  OrgGeogebraCommonGuiViewSpreadsheetDataImport_initialize();
  IOSObjectArray *data;
  if (isCSV) {
    data = OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseCSVdataWithNSString_(source);
  }
  else {
    data = OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseTabDataWithNSString_(source);
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data))->size_; i++) {
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data, i)))->size_; k++) {
      if (((jint) [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data, i)), k))) length]) == 0) {
        (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(data, i)), k, @" ");
      }
      (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(data, i)), k, OrgGeogebraCommonGuiViewSpreadsheetDataImport_adjustNumberStringWithNSString_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data, i)), k)));
    }
  }
  return data;
}

OrgGeogebraCommonUtilOpencsvCSVParser *OrgGeogebraCommonGuiViewSpreadsheetDataImport_getCommaParser() {
  OrgGeogebraCommonGuiViewSpreadsheetDataImport_initialize();
  if (OrgGeogebraCommonGuiViewSpreadsheetDataImport_commaParser_ == nil) {
    OrgGeogebraCommonGuiViewSpreadsheetDataImport_commaParser_ = new_OrgGeogebraCommonUtilOpencsvCSVParser_init();
  }
  return OrgGeogebraCommonGuiViewSpreadsheetDataImport_commaParser_;
}

OrgGeogebraCommonUtilOpencsvCSVParser *OrgGeogebraCommonGuiViewSpreadsheetDataImport_getTabParser() {
  OrgGeogebraCommonGuiViewSpreadsheetDataImport_initialize();
  if (OrgGeogebraCommonGuiViewSpreadsheetDataImport_tabParser_ == nil) {
    OrgGeogebraCommonGuiViewSpreadsheetDataImport_tabParser_ = new_OrgGeogebraCommonUtilOpencsvCSVParser_initWithChar_(0x0009);
  }
  return OrgGeogebraCommonGuiViewSpreadsheetDataImport_tabParser_;
}

IOSObjectArray *OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseCSVdataWithNSString_(NSString *input) {
  OrgGeogebraCommonGuiViewSpreadsheetDataImport_initialize();
  IOSObjectArray *lines = [((NSString *) nil_chk(input)) split:@"\x0d?\n|\x0d" limit:-1];
  if (((IOSObjectArray *) nil_chk(lines))->size_ == 0) {
    return nil;
  }
  jint numLines = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(lines, lines->size_ - 1))) length]) == 0 ? lines->size_ - 1 : lines->size_;
  IOSObjectArray *data = [IOSObjectArray newArrayWithLength:numLines type:IOSClass_arrayType(NSString_class_(), 1)];
  for (jint i = 0; i < numLines; ++i) {
    @try {
      (void) IOSObjectArray_Set(data, i, [((OrgGeogebraCommonUtilOpencsvCSVParser *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetDataImport_getCommaParser())) parseLineMultiWithNSString:IOSObjectArray_Get(lines, i)]);
    }
    @catch (OrgGeogebraCommonUtilOpencsvCSVException *e) {
      [((OrgGeogebraCommonUtilOpencsvCSVException *) nil_chk(e)) printStackTrace];
      return nil;
    }
  }
  return data;
}

IOSObjectArray *OrgGeogebraCommonGuiViewSpreadsheetDataImport_parseTabDataWithNSString_(NSString *input) {
  OrgGeogebraCommonGuiViewSpreadsheetDataImport_initialize();
  IOSObjectArray *lines = [((NSString *) nil_chk(input)) split:@"\x0d?\n|\x0d" limit:-1];
  if (((IOSObjectArray *) nil_chk(lines))->size_ == 0) {
    return nil;
  }
  jint numLines = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(lines, lines->size_ - 1))) length]) == 0 ? lines->size_ - 1 : lines->size_;
  IOSObjectArray *data = [IOSObjectArray newArrayWithLength:numLines type:IOSClass_arrayType(NSString_class_(), 1)];
  for (jint i = 0; i < numLines; ++i) {
    @try {
      (void) IOSObjectArray_Set(data, i, [((OrgGeogebraCommonUtilOpencsvCSVParser *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetDataImport_getTabParser())) parseLineMultiWithNSString:IOSObjectArray_Get(lines, i)]);
    }
    @catch (OrgGeogebraCommonUtilOpencsvCSVException *e) {
      [((OrgGeogebraCommonUtilOpencsvCSVException *) nil_chk(e)) printStackTrace];
    }
  }
  return data;
}

NSString *OrgGeogebraCommonGuiViewSpreadsheetDataImport_adjustNumberStringWithNSString_(NSString *s) {
  OrgGeogebraCommonGuiViewSpreadsheetDataImport_initialize();
  if (s == nil || [s isEqual:@""]) {
    return s;
  }
  NSString *s2 = s;
  if ([((ComGoogleGwtRegexpSharedRegExp *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetDataImport_regex_)) testWithNSString:s]) {
    s2 = [((NSString *) nil_chk(s2)) replace:@"," withSequence:@""];
  }
  else {
    s2 = [((NSString *) nil_chk(s2)) replace:@"," withSequence:@"."];
  }
  if (OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_isNumberWithNSString_(s2)) {
    return s2;
  }
  return s;
}

void OrgGeogebraCommonGuiViewSpreadsheetDataImport_init(OrgGeogebraCommonGuiViewSpreadsheetDataImport *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonGuiViewSpreadsheetDataImport *new_OrgGeogebraCommonGuiViewSpreadsheetDataImport_init() {
  OrgGeogebraCommonGuiViewSpreadsheetDataImport *self = [OrgGeogebraCommonGuiViewSpreadsheetDataImport alloc];
  OrgGeogebraCommonGuiViewSpreadsheetDataImport_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewSpreadsheetDataImport)
