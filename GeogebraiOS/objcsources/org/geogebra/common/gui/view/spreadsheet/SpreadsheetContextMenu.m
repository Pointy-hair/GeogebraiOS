//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/view/spreadsheet/SpreadsheetContextMenu.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRangeProcessor.h"
#include "org/geogebra/common/gui/view/spreadsheet/CopyPasteCut.h"
#include "org/geogebra/common/gui/view/spreadsheet/MyTable.h"
#include "org/geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "org/geogebra/common/gui/view/spreadsheet/SpreadsheetContextMenu.h"
#include "org/geogebra/common/gui/view/spreadsheet/SpreadsheetViewInterface.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/DialogManager.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/OptionType.h"
#include "org/geogebra/common/main/SelectionManager.h"

@interface OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu () {
 @public
  JavaUtilArrayList *geos_;
  OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *cp_;
  JavaUtilArrayList *selectedCellRanges_;
  jint selectionType_;
  jint row1_;
  jint row2_;
  jint column1_;
  jint column2_;
}

- (NSString *)getTitleString;

- (jboolean)allFixed;

- (NSString *)getDeleteRowString;

- (NSString *)getDeleteColumnString;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu, geos_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu, cp_, OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu, selectedCellRanges_, JavaUtilArrayList *)

__attribute__((unused)) static NSString *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getTitleString(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_allFixed(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getDeleteRowString(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getDeleteColumnString(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu

- (instancetype)initWithOrgGeogebraCommonGuiViewSpreadsheetMyTable:(id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>)table {
  OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_initWithOrgGeogebraCommonGuiViewSpreadsheetMyTable_(self, table);
  return self;
}

- (void)updateFields {
  app_ = [((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getApplication];
  cp_ = [table_ getCellRangeProcessor];
  column1_ = [((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk([table_ getSelectedCellRanges])) getWithInt:0])) getMinColumn];
  column2_ = [((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk([table_ getSelectedCellRanges])) getWithInt:0])) getMaxColumn];
  row1_ = [((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk([table_ getSelectedCellRanges])) getWithInt:0])) getMinRow];
  row2_ = [((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk([table_ getSelectedCellRanges])) getWithInt:0])) getMaxRow];
  selectionType_ = [table_ getSelectionType];
  selectedCellRanges_ = [table_ getSelectedCellRanges];
  geos_ = [((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) getSelectedGeos];
}

- (void)initMenu {
  id subMenu = nil;
  NSString *cmdString = nil;
  [self setTitleWithNSString:OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getTitleString(self)];
  [self addSeparator];
  cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_Copy())) description];
  jboolean enabled = ![self isEmptySelection];
  [self addMenuItemWithNSString:cmdString withNSString:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:cmdString] withBoolean:enabled];
  cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_Paste())) description];
  enabled = YES;
  [self addMenuItemWithNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
  cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_Cut())) description];
  enabled = ![self isEmptySelection];
  [self addMenuItemWithNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
  if (geos_ != nil && [geos_ size] > 1) {
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_DeleteObjects())) description];
  }
  else {
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_Delete())) description];
  }
  enabled = !OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_allFixed(self);
  [self addMenuItemWithNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
  if (selectionType_ == OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_COLUMN_SELECT || selectionType_ == OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_ROW_SELECT) {
    [self addSeparator];
    subMenu = [self addSubMenuWithNSString:JreStrcat("$$", [app_ getPlainWithNSString:@"Insert"], @" ...") withNSString:nil];
    if (selectionType_ == OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_COLUMN_SELECT) {
      cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_InsertLeft())) description];
      [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:YES];
      cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_InsertRight())) description];
      [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:YES];
    }
    if (selectionType_ == OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_ROW_SELECT) {
      cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_InsertAbove())) description];
      [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:YES];
      cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_InsertBelow())) description];
      [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:YES];
    }
    if (selectionType_ == OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_COLUMN_SELECT) {
      cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_DeleteColumn())) description];
      enabled = YES;
      [self addMenuItemWithNSString:cmdString withNSString:OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getDeleteColumnString(self) withBoolean:enabled];
    }
    if (selectionType_ == OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_ROW_SELECT) {
      cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_DeleteRow())) description];
      enabled = YES;
      [self addMenuItemWithNSString:cmdString withNSString:OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getDeleteRowString(self) withBoolean:enabled];
    }
  }
  if (![self isEmptySelection]) {
    [self addSeparator];
    subMenu = [self addSubMenuWithNSString:[app_ getMenuWithNSString:@"Create"] withNSString:nil];
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_List())) description];
    enabled = YES;
    [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_ListOfPoints())) description];
    enabled = [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) isCreatePointListPossibleWithJavaUtilArrayList:selectedCellRanges_];
    [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_Matrix())) description];
    enabled = [cp_ isCreateMatrixPossibleWithJavaUtilArrayList:selectedCellRanges_];
    [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_Table())) description];
    enabled = [cp_ isCreateMatrixPossibleWithJavaUtilArrayList:selectedCellRanges_];
    [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_PolyLine())) description];
    enabled = [cp_ isCreatePointListPossibleWithJavaUtilArrayList:selectedCellRanges_];
    [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_OperationTable())) description];
    enabled = [cp_ isCreateOperationTablePossibleWithJavaUtilArrayList:selectedCellRanges_];
    [self addSubMenuItemWithId:subMenu withNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:enabled];
  }
  if (![self isEmptySelection]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((JavaUtilArrayList *) nil_chk(geos_)) getWithInt:0];
    jboolean doObjectMenu = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianShowable] && [geo getShowObjectCondition] == nil && (![geo isGeoBoolean] || [geo isIndependent]);
    jboolean doLabelMenu = [geo isLabelShowable];
    if (doObjectMenu || doLabelMenu) {
      [self addSeparator];
      if (doObjectMenu) {
        cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_ShowObject())) description];
        [self addCheckBoxMenuItemWithNSString:cmdString withNSString:[app_ getPlainWithNSString:cmdString] withBoolean:[geo isSetEuclidianVisible]];
      }
      if (doLabelMenu) {
        cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_ShowLabel())) description];
        [self addCheckBoxMenuItemWithNSString:cmdString withNSString:[app_ getPlainWithNSString:cmdString] withBoolean:[geo isLabelVisible]];
      }
    }
    if ([geo isSpreadsheetTraceable] && selectionType_ != OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_ROW_SELECT) {
      jboolean showRecordToSpreadsheet = YES;
      for (jint i = 1; i < [geos_ size] && showRecordToSpreadsheet; i++) showRecordToSpreadsheet &= [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([geos_ getWithInt:i])) isSpreadsheetTraceable];
      if (showRecordToSpreadsheet) {
        cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_RecordToSpreadsheet())) description];
        [self addCheckBoxMenuItemWithNSString:cmdString withNSString:[app_ getMenuWithNSString:cmdString] withBoolean:[geo getSpreadsheetTrace]];
      }
    }
  }
  if ([self enableDataImport]) {
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_ImportDataFile())) description];
    [self addMenuItemWithNSString:cmdString withNSString:JreStrcat("$$", [app_ getMenuWithNSString:cmdString], @" ...") withBoolean:YES];
  }
  if ([self isEmptySelection]) {
    [self addSeparator];
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_SpreadsheetOptions())) description];
    [self addMenuItemWithNSString:cmdString withNSString:JreStrcat("$$", [app_ getMenuWithNSString:cmdString], @" ...") withBoolean:YES];
  }
  if ([((OrgGeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) selectedGeosSize] > 0 && [app_ letShowPropertiesDialog]) {
    [self addSeparator];
    cmdString = [((OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_get_Properties())) description];
    [self addMenuItemWithNSString:cmdString withNSString:JreStrcat("$$", [app_ getPlainWithNSString:cmdString], @" ...") withBoolean:YES];
  }
}

- (NSString *)getTitleString {
  return OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getTitleString(self);
}

- (jboolean)enableDataImport {
  return NO;
}

- (jboolean)allFixed {
  return OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_allFixed(self);
}

- (jboolean)isEmptySelection {
  return ([((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) getSelectedGeos])) isEmpty]);
}

- (NSString *)getDeleteRowString {
  return OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getDeleteRowString(self);
}

- (NSString *)getDeleteColumnString {
  return OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getDeleteColumnString(self);
}

- (void)doCommandWithNSString:(NSString *)cmdString {
  jboolean succ = NO;
  switch ([OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_valueOfWithNSString_(cmdString) ordinal]) {
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_ShowObject:
    [self cmdShowObject];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_ShowLabel:
    [self cmdShowLabel];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_RecordToSpreadsheet:
    [self cmdRecordToSpreadsheet];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_Copy:
    [((OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut *) nil_chk([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCopyPasteCut])) copy__WithInt:column1_ withInt:row1_ withInt:column2_ withInt:row2_ withBoolean:NO];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_Paste:
    succ = [((OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut *) nil_chk([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCopyPasteCut])) pasteWithInt:column1_ withInt:row1_ withInt:column2_ withInt:row2_];
    if (succ) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
    [((id<OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) nil_chk([table_ getView])) rowHeaderRevalidate];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_Cut:
    succ = [((OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut *) nil_chk([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCopyPasteCut])) cutWithInt:column1_ withInt:row1_ withInt:column2_ withInt:row2_];
    if (succ) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_Delete:
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_DeleteObjects:
    succ = [((OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut *) nil_chk([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCopyPasteCut])) delete__WithInt:column1_ withInt:row1_ withInt:column2_ withInt:row2_];
    if (succ) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_InsertLeft:
    [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) insertColumnWithInt:column1_ withInt:column2_ withBoolean:YES];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_InsertRight:
    [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) insertColumnWithInt:column1_ withInt:column2_ withBoolean:NO];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_InsertAbove:
    [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) insertRowWithInt:row1_ withInt:row2_ withBoolean:YES];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_InsertBelow:
    [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) insertRowWithInt:row1_ withInt:row2_ withBoolean:NO];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_DeleteColumn:
    [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) deleteColumnsWithInt:column1_ withInt:column2_];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_DeleteRow:
    [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) deleteRowsWithInt:row1_ withInt:row2_];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_List:
    (void) [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createListWithJavaUtilArrayList:selectedCellRanges_ withBoolean:YES withBoolean:NO];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_ListOfPoints:
    [self cmdListOfPoints];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_Matrix:
    (void) [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createMatrixWithInt:column1_ withInt:column2_ withInt:row1_ withInt:row2_ withBoolean:NO];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_Table:
    (void) [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createTableTextWithInt:column1_ withInt:column2_ withInt:row1_ withInt:row2_ withBoolean:NO withBoolean:NO];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_PolyLine:
    [self cmdPolyLine];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_OperationTable:
    [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createOperationTableWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:[((JavaUtilArrayList *) nil_chk(selectedCellRanges_)) getWithInt:0] withOrgGeogebraCommonKernelGeosGeoFunctionNVar:nil];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_ImportDataFile:
    [self cmdImportDataFile];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_SpreadsheetOptions:
    [self cmdSpreadsheetOptions];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommand_Properties:
    [self cmdProperties];
    break;
  }
}

- (void)cmdShowObject {
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos_)) size] - 1; i >= 0; i--) {
    OrgGeogebraCommonKernelGeosGeoElement *geo1 = [geos_ getWithInt:i];
    [geo1 setEuclidianVisibleWithBoolean:![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isSetEuclidianVisible]];
    [geo1 updateRepaint];
  }
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)cmdShowLabel {
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos_)) size] - 1; i >= 0; i--) {
    OrgGeogebraCommonKernelGeosGeoElement *geo1 = [geos_ getWithInt:i];
    [geo1 setLabelVisibleWithBoolean:![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isLabelVisible]];
    [geo1 updateRepaint];
  }
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)cmdRecordToSpreadsheet {
  OrgGeogebraCommonKernelGeosGeoElement *geo = [((JavaUtilArrayList *) nil_chk(geos_)) getWithInt:0];
  OrgGeogebraCommonKernelGeosGeoElement *geoRecordToSpreadSheet;
  if ([geos_ size] == 1) geoRecordToSpreadSheet = geo;
  else {
    geoRecordToSpreadSheet = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getAlgoDispatcher])) ListWithNSString:nil withJavaUtilArrayList:geos_ withBoolean:NO];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geoRecordToSpreadSheet)) setAuxiliaryObjectWithBoolean:YES];
  }
  [((id<OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) nil_chk([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getView])) showTraceDialogWithOrgGeogebraCommonKernelGeosGeoElement:geoRecordToSpreadSheet withOrgGeogebraCommonGuiViewSpreadsheetCellRange:nil];
}

- (void)cmdListOfPoints {
  OrgGeogebraCommonKernelGeosGeoElement *newGeo = [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createPointGeoListWithJavaUtilArrayList:selectedCellRanges_ withBoolean:NO withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction])) addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) getParentAlgorithm] withBoolean:YES];
  [newGeo setLabelWithNSString:nil];
}

- (void)cmdPolyLine {
  OrgGeogebraCommonKernelGeosGeoElement *newGeo = [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createPolyLineWithJavaUtilArrayList:selectedCellRanges_ withBoolean:NO withBoolean:YES];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction])) addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) getParentAlgorithm] withBoolean:YES];
  [newGeo setLabelWithNSString:nil];
}

- (void)cmdImportDataFile {
}

- (void)cmdSpreadsheetOptions {
  [((OrgGeogebraCommonMainDialogManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showPropertiesDialogWithOrgGeogebraCommonMainOptionTypeEnum:OrgGeogebraCommonMainOptionTypeEnum_get_SPREADSHEET() withJavaUtilArrayList:nil];
}

- (void)cmdProperties {
  [((OrgGeogebraCommonMainDialogManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showPropertiesDialogWithOrgGeogebraCommonMainOptionTypeEnum:OrgGeogebraCommonMainOptionTypeEnum_get_OBJECTS() withJavaUtilArrayList:nil];
}

- (id)getMenuContainer {
  return nil;
}

- (void)createGUI {
}

- (void)addMenuItemWithNSString:(NSString *)cmdString
                   withNSString:(NSString *)text
                    withBoolean:(jboolean)enabled {
}

- (void)addCheckBoxMenuItemWithNSString:(NSString *)cmdString
                           withNSString:(NSString *)text
                            withBoolean:(jboolean)isSelected {
}

- (id)addSubMenuWithNSString:(NSString *)text
                withNSString:(NSString *)cmdString {
  return nil;
}

- (void)addSubMenuItemWithId:(id)menu
                withNSString:(NSString *)cmdString
                withNSString:(NSString *)text
                 withBoolean:(jboolean)enabled {
}

- (void)addSeparator {
}

- (void)setTitleWithNSString:(NSString *)str {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGuiViewSpreadsheetMyTable:", "SpreadsheetContextMenu", NULL, 0x1, NULL, NULL },
    { "updateFields", NULL, "V", 0x4, NULL, NULL },
    { "initMenu", NULL, "V", 0x4, NULL, NULL },
    { "getTitleString", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "enableDataImport", NULL, "Z", 0x1, NULL, NULL },
    { "allFixed", NULL, "Z", 0x2, NULL, NULL },
    { "isEmptySelection", NULL, "Z", 0x1, NULL, NULL },
    { "getDeleteRowString", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getDeleteColumnString", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "doCommandWithNSString:", "doCommand", "V", 0x1, NULL, NULL },
    { "cmdShowObject", NULL, "V", 0x1, NULL, NULL },
    { "cmdShowLabel", NULL, "V", 0x1, NULL, NULL },
    { "cmdRecordToSpreadsheet", NULL, "V", 0x1, NULL, NULL },
    { "cmdListOfPoints", NULL, "V", 0x1, NULL, NULL },
    { "cmdPolyLine", NULL, "V", 0x1, NULL, NULL },
    { "cmdImportDataFile", NULL, "V", 0x1, NULL, NULL },
    { "cmdSpreadsheetOptions", NULL, "V", 0x1, NULL, NULL },
    { "cmdProperties", NULL, "V", 0x1, NULL, NULL },
    { "getMenuContainer", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "createGUI", NULL, "V", 0x1, NULL, NULL },
    { "addMenuItemWithNSString:withNSString:withBoolean:", "addMenuItem", "V", 0x1, NULL, NULL },
    { "addCheckBoxMenuItemWithNSString:withNSString:withBoolean:", "addCheckBoxMenuItem", "V", 0x1, NULL, NULL },
    { "addSubMenuWithNSString:withNSString:", "addSubMenu", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "addSubMenuItemWithId:withNSString:withNSString:withBoolean:", "addSubMenuItem", "V", 0x1, NULL, NULL },
    { "addSeparator", NULL, "V", 0x1, NULL, NULL },
    { "setTitleWithNSString:", "setTitle", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x4, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "table_", NULL, 0x4, "Lorg.geogebra.common.gui.view.spreadsheet.MyTable;", NULL, NULL,  },
    { "geos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "cp_", NULL, 0x2, "Lorg.geogebra.common.gui.view.spreadsheet.CellRangeProcessor;", NULL, NULL,  },
    { "selectedCellRanges_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/gui/view/spreadsheet/CellRange;>;",  },
    { "selectionType_", NULL, 0x2, "I", NULL, NULL,  },
    { "row1_", NULL, 0x2, "I", NULL, NULL,  },
    { "row2_", NULL, 0x2, "I", NULL, NULL,  },
    { "column1_", NULL, 0x2, "I", NULL, NULL,  },
    { "column2_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu = { 2, "SpreadsheetContextMenu", "org.geogebra.common.gui.view.spreadsheet", NULL, 0x1, 26, methods, 10, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu;
}

@end

void OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_initWithOrgGeogebraCommonGuiViewSpreadsheetMyTable_(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self, id<OrgGeogebraCommonGuiViewSpreadsheetMyTable> table) {
  (void) NSObject_init(self);
  self->table_ = nil;
  self->row1_ = -1;
  self->row2_ = -1;
  self->column1_ = -1;
  self->column2_ = -1;
  self->table_ = table;
  [self updateFields];
  [self createGUI];
}

OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_initWithOrgGeogebraCommonGuiViewSpreadsheetMyTable_(id<OrgGeogebraCommonGuiViewSpreadsheetMyTable> table) {
  OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self = [OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu alloc];
  OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_initWithOrgGeogebraCommonGuiViewSpreadsheetMyTable_(self, table);
  return self;
}

NSString *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getTitleString(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self) {
  NSString *title = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(self->column1_, self->row1_);
  if (self->column1_ != self->column2_ || self->row1_ != self->row2_) {
    title = JreStrcat("$$", title, JreStrcat("C$", ':', OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(self->column2_, self->row2_)));
  }
  else if (self->geos_ != nil && [self->geos_ size] == 1) {
    OrgGeogebraCommonKernelGeosGeoElement *geo0 = [self->geos_ getWithInt:0];
    title = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getLongDescriptionHTMLWithBoolean:NO withBoolean:YES];
    if (((jint) [((NSString *) nil_chk(title)) length]) > 80) title = [geo0 getNameDescriptionHTMLWithBoolean:NO withBoolean:YES];
  }
  return title;
}

jboolean OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_allFixed(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self) {
  jboolean allFixed = YES;
  if (self->geos_ != nil && [self->geos_ size] > 0) {
    for (jint i = 0; (i < [self->geos_ size] && allFixed); i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [self->geos_ getWithInt:i];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) allFixed = NO;
    }
  }
  return allFixed;
}

NSString *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getDeleteRowString(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self) {
  NSString *strRows;
  if (self->row1_ == self->row2_) {
    strRows = [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization])) getPlainWithNSString:@"DeleteRowA" withNSString:JavaLangInteger_toStringWithInt_(self->row1_ + 1)];
  }
  else {
    strRows = [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization])) getPlainWithNSString:@"DeleteRowsAtoB" withNSString:JavaLangInteger_toStringWithInt_(self->row1_ + 1) withNSString:JavaLangInteger_toStringWithInt_(self->row2_ + 1)];
  }
  return strRows;
}

NSString *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_getDeleteColumnString(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu *self) {
  NSString *strColumns;
  if (self->column1_ == self->column2_) {
    strColumns = [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization])) getPlainWithNSString:@"DeleteColumnA" withNSString:OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(self->column1_)];
  }
  else {
    strColumns = [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization])) getPlainWithNSString:@"DeleteColumnsAtoB" withNSString:OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(self->column1_) withNSString:OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(self->column2_)];
  }
  return strColumns;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum)

OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_values_[25];

@implementation OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_values() {
  OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_values_ count:25 type:OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_values();
}

+ (OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initialize();
  for (int i = 0; i < 25; i++) {
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *e = OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum class]) {
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_ShowObject = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"ShowObject", 0);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_ShowLabel = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"ShowLabel", 1);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_RecordToSpreadsheet = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"RecordToSpreadsheet", 2);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Copy = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"Copy", 3);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Paste = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"Paste", 4);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Cut = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"Cut", 5);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Delete = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"Delete", 6);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteObjects = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"DeleteObjects", 7);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_InsertLeft = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"InsertLeft", 8);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_InsertRight = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"InsertRight", 9);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_InsertAbove = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"InsertAbove", 10);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_InsertBelow = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"InsertBelow", 11);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteRow = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"DeleteRow", 12);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteRows = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"DeleteRows", 13);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteColumn = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"DeleteColumn", 14);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteColumns = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"DeleteColumns", 15);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_List = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"List", 16);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_ListOfPoints = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"ListOfPoints", 17);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Matrix = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"Matrix", 18);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Table = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"Table", 19);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_PolyLine = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"PolyLine", 20);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_OperationTable = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"OperationTable", 21);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_ImportDataFile = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"ImportDataFile", 22);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_SpreadsheetOptions = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"SpreadsheetOptions", 23);
    OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Properties = new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(@"Properties", 24);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "ShowObject", "ShowObject", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_ShowObject, NULL,  },
    { "ShowLabel", "ShowLabel", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_ShowLabel, NULL,  },
    { "RecordToSpreadsheet", "RecordToSpreadsheet", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_RecordToSpreadsheet, NULL,  },
    { "Copy", "Copy", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Copy, NULL,  },
    { "Paste", "Paste", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Paste, NULL,  },
    { "Cut", "Cut", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Cut, NULL,  },
    { "Delete", "Delete", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Delete, NULL,  },
    { "DeleteObjects", "DeleteObjects", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteObjects, NULL,  },
    { "InsertLeft", "InsertLeft", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_InsertLeft, NULL,  },
    { "InsertRight", "InsertRight", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_InsertRight, NULL,  },
    { "InsertAbove", "InsertAbove", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_InsertAbove, NULL,  },
    { "InsertBelow", "InsertBelow", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_InsertBelow, NULL,  },
    { "DeleteRow", "DeleteRow", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteRow, NULL,  },
    { "DeleteRows", "DeleteRows", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteRows, NULL,  },
    { "DeleteColumn", "DeleteColumn", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteColumn, NULL,  },
    { "DeleteColumns", "DeleteColumns", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_DeleteColumns, NULL,  },
    { "List", "List", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_List, NULL,  },
    { "ListOfPoints", "ListOfPoints", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_ListOfPoints, NULL,  },
    { "Matrix", "Matrix", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Matrix, NULL,  },
    { "Table", "Table", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Table, NULL,  },
    { "PolyLine", "PolyLine", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_PolyLine, NULL,  },
    { "OperationTable", "OperationTable", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_OperationTable, NULL,  },
    { "ImportDataFile", "ImportDataFile", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_ImportDataFile, NULL,  },
    { "SpreadsheetOptions", "SpreadsheetOptions", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_SpreadsheetOptions, NULL,  },
    { "Properties", "Properties", 0x4019, "Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;", &OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_Properties, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.gui.view.spreadsheet.SpreadsheetContextMenu$MenuCommand;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum = { 2, "MenuCommand", "org.geogebra.common.gui.view.spreadsheet", "SpreadsheetContextMenu", 0x4019, 0, NULL, 25, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/gui/view/spreadsheet/SpreadsheetContextMenu$MenuCommand;>;" };
  return &_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum;
}

@end

void OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *new_OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum *self = [OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum alloc];
  OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetContextMenu_MenuCommandEnum)
