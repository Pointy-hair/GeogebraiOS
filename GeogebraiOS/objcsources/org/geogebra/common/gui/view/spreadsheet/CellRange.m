//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/view/spreadsheet/CellRange.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "org/geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/SpreadsheetTableModel.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGuiViewSpreadsheetCellRange () {
 @public
  jint minColumn_;
  jint minRow_;
  jint maxColumn_;
  jint maxRow_;
  jint anchorColumn_;
  jint anchorRow_;
  OrgGeogebraCommonMainSpreadsheetTableModel *tableModel_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewSpreadsheetCellRange, tableModel_, OrgGeogebraCommonMainSpreadsheetTableModel *)

@implementation OrgGeogebraCommonGuiViewSpreadsheetCellRange

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                         withInt:(jint)anchorColumn
                                         withInt:(jint)anchorRow
                                         withInt:(jint)minColumn
                                         withInt:(jint)minRow
                                         withInt:(jint)maxColumn
                                         withInt:(jint)maxRow {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_withInt_(self, app, anchorColumn, anchorRow, minColumn, minRow, maxColumn, maxRow);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                         withInt:(jint)anchorColumn
                                         withInt:(jint)anchorRow
                                         withInt:(jint)col2
                                         withInt:(jint)row2 {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(self, app, anchorColumn, anchorRow, col2, row2);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                         withInt:(jint)anchorColumn
                                         withInt:(jint)anchorRow {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_(self, app, anchorColumn, anchorRow);
  return self;
}

- (void)setCellRangeWithInt:(jint)anchorColumn
                    withInt:(jint)anchorRow {
  [self setCellRangeWithInt:anchorColumn withInt:anchorRow withInt:anchorColumn withInt:anchorRow];
}

- (void)setCellRangeWithInt:(jint)anchorColumn
                    withInt:(jint)anchorRow
                    withInt:(jint)col2
                    withInt:(jint)row2 {
  minColumn_ = JavaLangMath_minWithInt_withInt_(anchorColumn, col2);
  maxColumn_ = JavaLangMath_maxWithInt_withInt_(anchorColumn, col2);
  minRow_ = JavaLangMath_minWithInt_withInt_(anchorRow, row2);
  maxRow_ = JavaLangMath_maxWithInt_withInt_(anchorRow, row2);
  self->anchorColumn_ = anchorColumn;
  self->anchorRow_ = anchorRow;
}

- (jint)getAnchorColumn {
  return anchorColumn_;
}

- (jint)getAnchorRow {
  return anchorRow_;
}

- (jint)getMinColumn {
  return minColumn_;
}

- (jint)getMinRow {
  return minRow_;
}

- (jint)getMaxColumn {
  return maxColumn_;
}

- (jint)getMaxRow {
  return maxRow_;
}

- (jboolean)isSingleCell {
  return ((maxColumn_ - minColumn_ == 0) && (maxRow_ - minRow_ == 0));
}

- (jboolean)isColumn {
  return anchorRow_ == -1;
}

- (jboolean)isRow {
  return anchorColumn_ == -1;
}

- (IOSIntArray *)getActualDimensions {
  IOSIntArray *d = [IOSIntArray arrayWithLength:2];
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *cr = [self getActualRange];
  *IOSIntArray_GetRef(d, 0) = ((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr))->maxRow_ - cr->minRow_ + 1;
  *IOSIntArray_GetRef(d, 1) = cr->maxColumn_ - cr->minColumn_ + 1;
  return d;
}

- (jboolean)is2D {
  return (maxColumn_ - minColumn_ == 1) || (maxRow_ - minRow_ == 1);
}

- (jboolean)is1D {
  return ((maxColumn_ - minColumn_ == 0) || (maxRow_ - minRow_ == 0));
}

- (jboolean)isPartialRow {
  return ![self isSingleCell] && ![self isRow] && (maxRow_ - minRow_ == 0);
}

- (jboolean)isPartialColumn {
  return ![self isSingleCell] && ![self isColumn] && (maxColumn_ - minColumn_ == 0);
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk([self toGeoList])) size] == 0;
}

- (jboolean)isEmptyRange {
  return (minColumn_ == -1 && maxColumn_ == -1 && minRow_ == -1 && maxRow_ == -1);
}

- (jboolean)isPointList {
  for (jint col = minColumn_; col <= maxColumn_; ++col) {
    for (jint row = minRow_; row <= maxRow_; ++row) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
      if (geo != nil && ![geo isGeoPoint]) return NO;
    }
  }
  return YES;
}

- (OrgGeogebraCommonGuiViewSpreadsheetCellRange *)getActualRange {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *adjustedCellRange = [self clone];
  if (minRow_ == -1 && maxRow_ == -1 && minColumn_ != -1) {
    ((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(adjustedCellRange))->minRow_ = 0;
    adjustedCellRange->maxRow_ = [((OrgGeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getRowCount] - 1;
  }
  if (minColumn_ == -1 && maxColumn_ == -1 && minRow_ != -1) {
    ((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(adjustedCellRange))->minColumn_ = 0;
    adjustedCellRange->maxColumn_ = [((OrgGeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getColumnCount] - 1;
  }
  return adjustedCellRange;
}

- (void)setActualRange {
  if (minRow_ == -1 && maxRow_ == -1 && minColumn_ == -1 && maxColumn_ == -1) return;
  if (minRow_ == -1 && maxRow_ == -1) {
    minRow_ = 0;
    maxRow_ = [((OrgGeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getRowCount] - 1;
  }
  if (minColumn_ == -1 && maxColumn_ == -1) {
    minColumn_ = 0;
    maxColumn_ = [((OrgGeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getColumnCount] - 1;
  }
}

- (jint)getWidth {
  return maxColumn_ - minColumn_ + 1;
}

- (jint)getHeight {
  return maxRow_ - minRow_ + 1;
}

- (JavaUtilArrayList *)toGeoList {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (jint col = minColumn_; col <= maxColumn_; ++col) {
    for (jint row = minRow_; row <= maxRow_; ++row) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
      if (geo != nil) {
        [list addWithId:geo];
      }
    }
  }
  return list;
}

- (JavaUtilArrayList *)toGeoLabelListWithBoolean:(jboolean)scanByColumn
                                     withBoolean:(jboolean)copyByValue {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  if (scanByColumn) {
    for (jint col = minColumn_; col <= maxColumn_; ++col) {
      for (jint row = minRow_; row <= maxRow_; ++row) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
        if (geo != nil) {
          if (copyByValue) [list addWithId:[geo getValueForInputBar]];
          else [list addWithId:[geo getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        }
      }
    }
  }
  else {
    for (jint row = minRow_; row <= maxRow_; ++row) {
      for (jint col = minColumn_; col <= maxColumn_; ++col) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
        if (geo != nil) if (copyByValue) [list addWithId:[geo getValueForInputBar]];
        else [list addWithId:[geo getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
    }
  }
  return list;
}

- (JavaUtilArrayList *)toGeoValueListWithBoolean:(jboolean)scanByColumn {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *cr = [self getActualRange];
  if (scanByColumn) {
    for (jint col = ((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr))->minColumn_; col <= cr->maxColumn_; ++col) {
      for (jint row = cr->minRow_; row <= cr->maxRow_; ++row) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
        if (geo != nil) [list addWithId:[geo toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
    }
  }
  else {
    for (jint row = ((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr))->minRow_; row <= cr->maxRow_; ++row) {
      for (jint col = cr->minColumn_; col <= cr->maxColumn_; ++col) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
        if (geo != nil) [list addWithId:[geo toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
    }
  }
  return list;
}

- (JavaUtilArrayList *)toPartialColumnList {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  if ([self isColumn]) {
    for (jint col = minColumn_; col <= maxColumn_; col++) {
      OrgGeogebraCommonGuiViewSpreadsheetCellRange *cr = [new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_withInt_(app_, col, -1, col, 0, col, maxRow_) autorelease];
      [list addWithId:cr];
    }
  }
  else {
    for (jint col = minColumn_; col <= maxColumn_; col++) {
      [list addWithId:[new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, col, minRow_, col, maxRow_) autorelease]];
    }
  }
  return list;
}

- (JavaUtilArrayList *)toPartialRowList {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  if ([self isRow]) {
    for (jint row = minRow_; row <= maxRow_; row++) [list addWithId:[new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_withInt_(app_, 0, row, -1, row, maxColumn_, row) autorelease]];
  }
  else {
    for (jint row = minRow_; row <= maxRow_; row++) [list addWithId:[new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, minColumn_, row, maxColumn_, row) autorelease]];
  }
  return list;
}

- (JavaUtilArrayList *)toCellListWithBoolean:(jboolean)scanByColumn {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  if (scanByColumn) {
    for (jint col = minColumn_; col <= maxColumn_; ++col) {
      for (jint row = minRow_; row <= maxRow_; ++row) {
        [list addWithId:[new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(col, row) autorelease]];
      }
    }
  }
  else {
    for (jint row = minRow_; row <= maxRow_; ++row) {
      for (jint col = minColumn_; col <= maxColumn_; ++col) {
        [list addWithId:[new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(col, row) autorelease]];
      }
    }
  }
  return list;
}

- (jboolean)hasSameAnchorWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:(OrgGeogebraCommonGuiViewSpreadsheetCellRange *)cr {
  return (((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr))->anchorRow_ == anchorRow_) && (cr->anchorColumn_ == anchorColumn_);
}

- (jboolean)hasEmptyCells {
  jboolean hasEmptyCells = NO;
  for (jint col = minColumn_; col <= maxColumn_; ++col) {
    for (jint row = minRow_; row <= maxRow_; ++row) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
      if (geo == nil) {
        return YES;
      }
    }
  }
  return hasEmptyCells;
}

- (jint)getGeoCountWithOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)geoClass {
  jint count = 0;
  if (geoClass != nil) {
    for (jint col = [self getMinColumn]; col <= [self getMaxColumn]; ++col) {
      for (jint row = [self getMinRow]; row <= [self getMaxRow]; ++row) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
        if (geo != nil && [geo getGeoClassType] == geoClass) ++count;
      }
    }
  }
  else {
    for (jint col = [self getMinColumn]; col <= [self getMaxColumn]; ++col) {
      for (jint row = [self getMinRow]; row <= [self getMaxRow]; ++row) {
        if (OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row) != nil) ++count;
      }
    }
  }
  return count;
}

- (jboolean)containsGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)geoClass {
  for (jint col = [self getMinColumn]; col <= [self getMaxColumn]; ++col) {
    for (jint row = [self getMinRow]; row <= [self getMaxRow]; ++row) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
      if (geo != nil && [geo getGeoClassType] == geoClass) return YES;
    }
  }
  return NO;
}

- (jboolean)isValid {
  return (minRow_ >= -1 && minRow_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_DESKTOP_()) && (maxRow_ >= -1 && maxRow_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_DESKTOP_()) && (minColumn_ >= -1 && minColumn_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_COLUMNS_DESKTOP_()) && (maxColumn_ >= -1 && maxColumn_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_COLUMNS_DESKTOP_());
}

- (OrgGeogebraCommonGuiViewSpreadsheetCellRange *)clone {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *cr = [new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_(app_) autorelease];
  cr->anchorColumn_ = anchorColumn_;
  cr->anchorRow_ = anchorRow_;
  cr->minColumn_ = minColumn_;
  cr->maxColumn_ = maxColumn_;
  cr->minRow_ = minRow_;
  cr->maxRow_ = maxRow_;
  return cr;
}

- (jboolean)isEqual:(id)obj {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *cr;
  if ([obj isKindOfClass:[OrgGeogebraCommonGuiViewSpreadsheetCellRange class]]) {
    cr = (OrgGeogebraCommonGuiViewSpreadsheetCellRange *) check_class_cast(obj, [OrgGeogebraCommonGuiViewSpreadsheetCellRange class]);
    return (((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr))->minColumn_ == minColumn_ && cr->minRow_ == minRow_ && cr->maxColumn_ == maxColumn_ && cr->maxRow_ == maxRow_ && cr->anchorColumn_ == anchorColumn_ && cr->anchorRow_ == anchorRow_);
  }
  return NO;
}

- (NSUInteger)hash {
  return (LShift32(minColumn_, 24)) ^ (LShift32((maxColumn_ - minColumn_), 16)) ^ (LShift32(minRow_, 8)) ^ (maxRow_ - minRow_);
}

- (jboolean)containsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [self containsWithOrgGeogebraCommonAwtGPoint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetCoords]];
}

- (jboolean)containsWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)location {
  if (location != nil && location->x_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_COLUMNS_DESKTOP_() && location->y_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_DESKTOP_()) {
    [self setActualRange];
    return (location->y_ >= minRow_ && location->y_ <= maxRow_ && location->x_ >= minColumn_ && location->x_ <= maxColumn_);
  }
  return NO;
}

- (void)debug {
  OrgGeogebraCommonMainApp_debugWithNSString_(@"-------------------------");
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$ICIC", @"anchor cell:  (", anchorColumn_, ',', anchorRow_, ')'));
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$ICI$ICIC", @"corner cells: (", minColumn_, ',', minRow_, @")  (", maxColumn_, ',', maxRow_, ')'));
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$Z", @"isRow: ", [self isRow]));
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$Z", @"isColumn: ", [self isColumn]));
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(tableModel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "CellRange", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonMainApp:withInt:withInt:withInt:withInt:withInt:withInt:", "CellRange", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonMainApp:withInt:withInt:withInt:withInt:", "CellRange", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonMainApp:withInt:withInt:", "CellRange", NULL, 0x1, NULL, NULL },
    { "setCellRangeWithInt:withInt:", "setCellRange", "V", 0x1, NULL, NULL },
    { "setCellRangeWithInt:withInt:withInt:withInt:", "setCellRange", "V", 0x1, NULL, NULL },
    { "getAnchorColumn", NULL, "I", 0x1, NULL, NULL },
    { "getAnchorRow", NULL, "I", 0x1, NULL, NULL },
    { "getMinColumn", NULL, "I", 0x1, NULL, NULL },
    { "getMinRow", NULL, "I", 0x1, NULL, NULL },
    { "getMaxColumn", NULL, "I", 0x1, NULL, NULL },
    { "getMaxRow", NULL, "I", 0x1, NULL, NULL },
    { "isSingleCell", NULL, "Z", 0x1, NULL, NULL },
    { "isColumn", NULL, "Z", 0x1, NULL, NULL },
    { "isRow", NULL, "Z", 0x1, NULL, NULL },
    { "getActualDimensions", NULL, "[I", 0x1, NULL, NULL },
    { "is2D", NULL, "Z", 0x1, NULL, NULL },
    { "is1D", NULL, "Z", 0x1, NULL, NULL },
    { "isPartialRow", NULL, "Z", 0x1, NULL, NULL },
    { "isPartialColumn", NULL, "Z", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "isEmptyRange", NULL, "Z", 0x1, NULL, NULL },
    { "isPointList", NULL, "Z", 0x1, NULL, NULL },
    { "getActualRange", NULL, "Lorg.geogebra.common.gui.view.spreadsheet.CellRange;", 0x1, NULL, NULL },
    { "setActualRange", NULL, "V", 0x1, NULL, NULL },
    { "getWidth", NULL, "I", 0x1, NULL, NULL },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "toGeoList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toGeoLabelListWithBoolean:withBoolean:", "toGeoLabelList", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toGeoValueListWithBoolean:", "toGeoValueList", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toPartialColumnList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toPartialRowList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toCellListWithBoolean:", "toCellList", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "hasSameAnchorWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:", "hasSameAnchor", "Z", 0x1, NULL, NULL },
    { "hasEmptyCells", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoCountWithOrgGeogebraCommonPluginGeoClassEnum:", "getGeoCount", "I", 0x1, NULL, NULL },
    { "containsGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:", "containsGeoClass", "Z", 0x1, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
    { "clone", NULL, "Lorg.geogebra.common.gui.view.spreadsheet.CellRange;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelGeosGeoElement:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGPoint:", "contains", "Z", 0x1, NULL, NULL },
    { "debug", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "minColumn_", NULL, 0x2, "I", NULL, NULL,  },
    { "minRow_", NULL, 0x2, "I", NULL, NULL,  },
    { "maxColumn_", NULL, 0x2, "I", NULL, NULL,  },
    { "maxRow_", NULL, 0x2, "I", NULL, NULL,  },
    { "anchorColumn_", NULL, 0x2, "I", NULL, NULL,  },
    { "anchorRow_", NULL, 0x2, "I", NULL, NULL,  },
    { "app_", NULL, 0x0, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "tableModel_", NULL, 0x2, "Lorg.geogebra.common.main.SpreadsheetTableModel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewSpreadsheetCellRange = { 2, "CellRange", "org.geogebra.common.gui.view.spreadsheet", NULL, 0x1, 44, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewSpreadsheetCellRange;
}

@end

void OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonGuiViewSpreadsheetCellRange *self, OrgGeogebraCommonMainApp *app) {
  NSObject_init(self);
  self->minColumn_ = -1;
  self->minRow_ = -1;
  self->maxColumn_ = -1;
  self->maxRow_ = -1;
  self->anchorColumn_ = -1;
  self->anchorRow_ = -1;
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_set_tableModel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getSpreadsheetTableModel]);
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_set_app_(self, app);
}

OrgGeogebraCommonGuiViewSpreadsheetCellRange *new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *self = [OrgGeogebraCommonGuiViewSpreadsheetCellRange alloc];
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

void OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellRange *self, OrgGeogebraCommonMainApp *app, jint anchorColumn, jint anchorRow, jint minColumn, jint minRow, jint maxColumn, jint maxRow) {
  NSObject_init(self);
  self->minColumn_ = -1;
  self->minRow_ = -1;
  self->maxColumn_ = -1;
  self->maxRow_ = -1;
  self->anchorColumn_ = -1;
  self->anchorRow_ = -1;
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_set_tableModel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getSpreadsheetTableModel]);
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_set_app_(self, app);
  self->anchorColumn_ = anchorColumn;
  self->anchorRow_ = anchorRow;
  self->minColumn_ = minColumn;
  self->minRow_ = minRow;
  self->maxColumn_ = maxColumn;
  self->maxRow_ = maxRow;
}

OrgGeogebraCommonGuiViewSpreadsheetCellRange *new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_withInt_(OrgGeogebraCommonMainApp *app, jint anchorColumn, jint anchorRow, jint minColumn, jint minRow, jint maxColumn, jint maxRow) {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *self = [OrgGeogebraCommonGuiViewSpreadsheetCellRange alloc];
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_withInt_(self, app, anchorColumn, anchorRow, minColumn, minRow, maxColumn, maxRow);
  return self;
}

void OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellRange *self, OrgGeogebraCommonMainApp *app, jint anchorColumn, jint anchorRow, jint col2, jint row2) {
  NSObject_init(self);
  self->minColumn_ = -1;
  self->minRow_ = -1;
  self->maxColumn_ = -1;
  self->maxRow_ = -1;
  self->anchorColumn_ = -1;
  self->anchorRow_ = -1;
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_set_tableModel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getSpreadsheetTableModel]);
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_set_app_(self, app);
  [self setCellRangeWithInt:anchorColumn withInt:anchorRow withInt:col2 withInt:row2];
}

OrgGeogebraCommonGuiViewSpreadsheetCellRange *new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(OrgGeogebraCommonMainApp *app, jint anchorColumn, jint anchorRow, jint col2, jint row2) {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *self = [OrgGeogebraCommonGuiViewSpreadsheetCellRange alloc];
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(self, app, anchorColumn, anchorRow, col2, row2);
  return self;
}

void OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellRange *self, OrgGeogebraCommonMainApp *app, jint anchorColumn, jint anchorRow) {
  NSObject_init(self);
  self->minColumn_ = -1;
  self->minRow_ = -1;
  self->maxColumn_ = -1;
  self->maxRow_ = -1;
  self->anchorColumn_ = -1;
  self->anchorRow_ = -1;
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_set_tableModel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getSpreadsheetTableModel]);
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_set_app_(self, app);
  [self setCellRangeWithInt:anchorColumn withInt:anchorRow withInt:anchorColumn withInt:anchorRow];
}

OrgGeogebraCommonGuiViewSpreadsheetCellRange *new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_(OrgGeogebraCommonMainApp *app, jint anchorColumn, jint anchorRow) {
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *self = [OrgGeogebraCommonGuiViewSpreadsheetCellRange alloc];
  OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_(self, app, anchorColumn, anchorRow);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewSpreadsheetCellRange)
