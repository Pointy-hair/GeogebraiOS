//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/view/spreadsheet/CellFormat.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellFormat.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRangeProcessor.h"
#include "org/geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "org/geogebra/common/main/App.h"

@class OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap;

@interface OrgGeogebraCommonGuiViewSpreadsheetCellFormat () {
 @public
  jint highestIndexRow_;
  jint highestIndexColumn_;
  NSString *cellFormatString_;
  IOSObjectArray *formatMapArray_;
  jint formatCount_;
}

- (void)shiftRowsUpWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                       withInt:(jint)rowStart
                                                                       withInt:(jint)shiftAmount;

- (void)shiftRowsDownWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                         withInt:(jint)rowStart
                                                                         withInt:(jint)shiftAmount;

- (void)clearRowsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                     withInt:(jint)rowStart
                                                                     withInt:(jint)rowEnd;

- (void)shiftColumnsLeftWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                            withInt:(jint)columnStart
                                                                            withInt:(jint)shiftAmount;

- (void)shiftColumnsRightWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                             withInt:(jint)columnStart
                                                                             withInt:(jint)shiftAmount;

- (void)clearColumnsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                        withInt:(jint)columnStart
                                                                        withInt:(jint)columnEnd;

+ (void)printMapWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap;

- (void)setCellFormatString;

- (void)processCellFormatStringWithNSString:(NSString *)formatStr;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, cellFormatString_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, formatMapArray_, IOSObjectArray *)

static NSString *OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_ = @",";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, formatDelimiter_, NSString *)

static NSString *OrgGeogebraCommonGuiViewSpreadsheetCellFormat_cellDelimiter_ = @":";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, cellDelimiter_, NSString *)

static NSString *OrgGeogebraCommonGuiViewSpreadsheetCellFormat_alignToken_ = @"a";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, alignToken_, NSString *)

static NSString *OrgGeogebraCommonGuiViewSpreadsheetCellFormat_borderToken_ = @"b";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, borderToken_, NSString *)

static NSString *OrgGeogebraCommonGuiViewSpreadsheetCellFormat_fontStyleToken_ = @"f";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, fontStyleToken_, NSString *)

static NSString *OrgGeogebraCommonGuiViewSpreadsheetCellFormat_bgColorToken_ = @"c";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, bgColorToken_, NSString *)

static JavaUtilHashMap *OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatTokenMap_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, formatTokenMap_, JavaUtilHashMap *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat, formatTokenMap_, JavaUtilHashMap *)

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftRowsUpWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint rowStart, jint shiftAmount);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftRowsDownWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint rowStart, jint shiftAmount);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_clearRowsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint rowStart, jint rowEnd);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftColumnsLeftWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint columnStart, jint shiftAmount);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftColumnsRightWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint columnStart, jint shiftAmount);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_clearColumnsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint columnStart, jint columnEnd);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_printMapWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_setCellFormatString(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_processCellFormatStringWithNSString_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, NSString *formatStr);

#define OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_serialVersionUID 1LL

@interface OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap : JavaUtilHashMap

- (instancetype)init;

- (id)putWithId:(OrgGeogebraCommonAwtGPoint *)key
         withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap, serialVersionUID, jlong)

__attribute__((unused)) static void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_init(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *self);

__attribute__((unused)) static OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *new_OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGuiViewSpreadsheetCellFormat)

@implementation OrgGeogebraCommonGuiViewSpreadsheetCellFormat

- (instancetype)initWithOrgGeogebraCommonGuiViewSpreadsheetMyTableInterface:(id<OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface>)table {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_initWithOrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_(self, table);
  return self;
}

- (void)clearAll {
  highestIndexRow_ = 0;
  highestIndexColumn_ = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(formatMapArray_))->size_; i++) [((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(IOSObjectArray_Get(formatMapArray_, i))) clear];
}

- (void)shiftFormatsWithInt:(jint)startIndex
                    withInt:(jint)shiftAmount
withOrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum:(OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *)direction {
  if (startIndex - shiftAmount < 0) {
    return;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(formatMapArray_))->size_; i++) {
    if (direction == OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Up()) {
      OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftRowsUpWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, IOSObjectArray_Get(formatMapArray_, i), startIndex, shiftAmount);
    }
    if (direction == OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Down()) {
      OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftRowsDownWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, IOSObjectArray_Get(formatMapArray_, i), startIndex, shiftAmount);
    }
    if (direction == OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Left()) {
      OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftColumnsLeftWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, IOSObjectArray_Get(formatMapArray_, i), startIndex, shiftAmount);
    }
    else if (direction == OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Right()) {
      OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftColumnsRightWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, IOSObjectArray_Get(formatMapArray_, i), startIndex, shiftAmount);
    }
  }
  if (direction == OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Left()) {
    highestIndexColumn_ = highestIndexColumn_ - shiftAmount;
  }
  else if (direction == OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Right()) {
    highestIndexColumn_ = highestIndexColumn_ + shiftAmount;
  }
  else if (direction == OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Up()) {
    highestIndexRow_ = highestIndexRow_ - shiftAmount;
  }
  else if (direction == OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Down()) {
    highestIndexRow_ = highestIndexRow_ + shiftAmount;
  }
}

- (void)shiftRowsUpWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                       withInt:(jint)rowStart
                                                                       withInt:(jint)shiftAmount {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftRowsUpWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, formatMap, rowStart, shiftAmount);
}

- (void)shiftRowsDownWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                         withInt:(jint)rowStart
                                                                         withInt:(jint)shiftAmount {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftRowsDownWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, formatMap, rowStart, shiftAmount);
}

- (void)clearRowsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                     withInt:(jint)rowStart
                                                                     withInt:(jint)rowEnd {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_clearRowsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, formatMap, rowStart, rowEnd);
}

- (void)shiftColumnsLeftWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                            withInt:(jint)columnStart
                                                                            withInt:(jint)shiftAmount {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftColumnsLeftWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, formatMap, columnStart, shiftAmount);
}

- (void)shiftColumnsRightWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                             withInt:(jint)columnStart
                                                                             withInt:(jint)shiftAmount {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftColumnsRightWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, formatMap, columnStart, shiftAmount);
}

- (void)clearColumnsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap
                                                                        withInt:(jint)columnStart
                                                                        withInt:(jint)columnEnd {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_clearColumnsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, formatMap, columnStart, columnEnd);
}

+ (void)printMapWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *)formatMap {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_printMapWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_(formatMap);
}

- (JavaUtilHashMap *)getFormatMapWithInt:(jint)formatType {
  return IOSObjectArray_Get(nil_chk(formatMapArray_), formatType);
}

- (id)getCellFormatWithInt:(jint)x
                   withInt:(jint)y
                   withInt:(jint)formatType {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap = IOSObjectArray_Get(nil_chk(formatMapArray_), formatType);
  if (formatMap == nil || [formatMap isEmpty]) {
    return nil;
  }
  id formatObject = nil;
  OrgGeogebraCommonAwtGPoint *rowKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(-1, y);
  OrgGeogebraCommonAwtGPoint *columnKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(x, -1);
  OrgGeogebraCommonAwtGPoint *cellKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(x, y);
  if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:cellKey]) {
    formatObject = [formatMap getWithId:cellKey];
  }
  else if ([formatMap containsKeyWithId:rowKey]) {
    formatObject = [formatMap getWithId:rowKey];
  }
  else if ([formatMap containsKeyWithId:columnKey]) {
    formatObject = [formatMap getWithId:columnKey];
  }
  return formatObject;
}

- (id)getCellFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:(OrgGeogebraCommonGuiViewSpreadsheetCellRange *)cr
                                                            withInt:(jint)formatType {
  id format = [self getCellFormatWithInt:[((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinColumn] withInt:[cr getMinRow] withInt:formatType];
  if (format == nil) return nil;
  for (jint r = 0; r > [cr getMaxRow]; r++) {
    for (jint c = 0; c > [cr getMaxColumn]; c++) {
      if (![nil_chk(format) isEqual:[self getCellFormatWithInt:c withInt:r withInt:formatType]]) {
        format = nil;
        break;
      }
    }
  }
  return format;
}

- (void)setFormatWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)cell
                                        withInt:(jint)formatType
                                         withId:(id)formatValue {
  JavaUtilArrayList *crList = new_JavaUtilArrayList_init();
  [crList addWithId:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, ((OrgGeogebraCommonAwtGPoint *) nil_chk(cell))->x_, cell->y_)];
  [self setFormatWithJavaUtilArrayList:crList withInt:formatType withId:formatValue];
}

- (void)setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:(OrgGeogebraCommonGuiViewSpreadsheetCellRange *)cr
                                                          withInt:(jint)formatType
                                                           withId:(id)formatValue {
  JavaUtilArrayList *crList = new_JavaUtilArrayList_init();
  [crList addWithId:cr];
  [self setFormatWithJavaUtilArrayList:crList withInt:formatType withId:formatValue];
}

- (void)setFormatWithJavaUtilArrayList:(JavaUtilArrayList *)crList
                               withInt:(jint)formatType
                                withId:(id)value {
  JavaUtilHashMap *formatTable = IOSObjectArray_Get(nil_chk(formatMapArray_), formatType);
  if ([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface>) nil_chk(table_)) isSelectAll] && value == nil) {
    [((JavaUtilHashMap *) nil_chk(formatTable)) clear];
    return;
  }
  OrgGeogebraCommonAwtGPoint *testCell = new_OrgGeogebraCommonAwtGPoint_init();
  OrgGeogebraCommonAwtGPoint *testRow = new_OrgGeogebraCommonAwtGPoint_init();
  OrgGeogebraCommonAwtGPoint *testColumn = new_OrgGeogebraCommonAwtGPoint_init();
  for (OrgGeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(crList)) {
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) isRow]) {
      if (highestIndexRow_ < [cr getMaxRow]) highestIndexRow_ = [cr getMaxRow];
      for (jint r = [cr getMinRow]; r <= [cr getMaxRow]; ++r) {
        (void) [((JavaUtilHashMap *) nil_chk(formatTable)) putWithId:new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(-1, r) withId:value];
        for (jint col = 0; col < highestIndexColumn_; col++) {
          [testCell setLocationWithInt:col withInt:r];
          [testColumn setLocationWithInt:col withInt:-1];
          (void) [formatTable removeWithId:testCell];
          if ([formatTable containsKeyWithId:testColumn]) {
            (void) [formatTable putWithId:testCell withId:value];
          }
        }
      }
    }
    else if ([cr isColumn]) {
      if (highestIndexColumn_ < [cr getMaxColumn]) highestIndexColumn_ = [cr getMaxColumn];
      for (jint c = [cr getMinColumn]; c <= [cr getMaxColumn]; ++c) {
        (void) [((JavaUtilHashMap *) nil_chk(formatTable)) putWithId:new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, -1) withId:value];
        for (jint row = 0; row < highestIndexRow_; row++) {
          [testCell setLocationWithInt:c withInt:row];
          [testRow setLocationWithInt:-1 withInt:row];
          (void) [formatTable removeWithId:testCell];
          if ([formatTable containsKeyWithId:testRow]) {
            (void) [formatTable putWithId:testCell withId:value];
          }
        }
      }
    }
    else {
      if (highestIndexRow_ < [cr getMaxRow]) highestIndexRow_ = [cr getMaxRow];
      if (highestIndexColumn_ < [cr getMaxColumn]) highestIndexColumn_ = [cr getMaxColumn];
      for (OrgGeogebraCommonAwtGPoint * __strong cellPoint in nil_chk([cr toCellListWithBoolean:YES])) (void) [((JavaUtilHashMap *) nil_chk(formatTable)) putWithId:cellPoint withId:value];
    }
  }
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_setCellFormatString(self);
  [table_ repaint];
}

- (void)setCellFormatString {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_setCellFormatString(self);
}

- (void)setBorderStyleWithJavaUtilArrayList:(JavaUtilArrayList *)list
                                    withInt:(jint)borderStyle {
  for (OrgGeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(list)) [self setBorderStyleWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:borderStyle];
}

- (void)setBorderStyleWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:(OrgGeogebraCommonGuiViewSpreadsheetCellRange *)cr
                                                               withInt:(jint)borderStyle {
  jint r1 = [((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinRow];
  jint r2 = [cr getMaxRow];
  jint c1 = [cr getMinColumn];
  jint c2 = [cr getMaxColumn];
  OrgGeogebraCommonAwtGPoint *cell = new_OrgGeogebraCommonAwtGPoint_init();
  OrgGeogebraCommonAwtGPoint *cell2 = new_OrgGeogebraCommonAwtGPoint_init();
  if ([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface>) nil_chk(table_)) isSelectAll] && borderStyle == OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_NONE) {
    [((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(IOSObjectArray_Get(nil_chk(formatMapArray_), OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER))) clear];
    return;
  }
  if ([cr isRow]) {
    switch (borderStyle) {
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_NONE:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:nil];
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_LEFT:
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_RIGHT:
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_TOP:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP)];
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_BOTTOM:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM)];
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_ALL:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_ALL)];
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_INSIDE:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, -1, [cr getMinRow], -1, [cr getMinRow]) withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT)];
      if ([cr getMinRow] < [cr getMaxRow]) {
        jbyte b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP;
        [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, -1, [cr getMinRow] + 1, -1, [cr getMaxRow]) withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      }
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_FRAME:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, -1, [cr getMinRow], -1, [cr getMinRow]) withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP)];
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, -1, [cr getMaxRow], -1, [cr getMaxRow]) withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM)];
      break;
    }
    return;
  }
  if ([cr isColumn]) {
    switch (borderStyle) {
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_NONE:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:nil];
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_TOP:
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_BOTTOM:
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_LEFT:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT)];
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_RIGHT:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT)];
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_ALL:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_ALL)];
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_INSIDE:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, [cr getMinColumn], -1, [cr getMinColumn], -1) withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP)];
      if ([cr getMinColumn] < [cr getMaxColumn]) {
        jbyte b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP;
        [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, [cr getMinColumn] + 1, -1, [cr getMaxColumn], -1) withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      }
      break;
      case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_FRAME:
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, [cr getMinColumn], -1, [cr getMinColumn], -1) withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT)];
      [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, [cr getMaxColumn], -1, [cr getMaxColumn], -1) withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT)];
      break;
    }
    return;
  }
  switch (borderStyle) {
    case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_NONE:
    for (jint r = r1; r <= r2; r++) for (jint c = c1; c <= c2; c++) [self setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:cr withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:nil];
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_ALL:
    for (jint r = r1; r <= r2; r++) for (jint c = c1; c <= c2; c++) {
      cell->x_ = c;
      cell->y_ = r;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_ALL)];
    }
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_FRAME:
    if (r1 == r2 && c1 == c2) {
      cell->x_ = c1;
      cell->y_ = r1;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_ALL)];
      return;
    }
    cell->y_ = r1;
    cell2->y_ = r2;
    for (jint c = c1 + 1; c <= c2 - 1; c++) {
      cell->x_ = c;
      cell2->x_ = c;
      if (r1 == r2) {
        jbyte b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM;
        [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      }
      else {
        [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP)];
        [self setFormatWithOrgGeogebraCommonAwtGPoint:cell2 withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM)];
      }
    }
    cell->x_ = c1;
    cell2->x_ = c2;
    for (jint r = r1 + 1; r <= r2 - 1; r++) {
      cell->y_ = r;
      cell2->y_ = r;
      if (c1 == c2) {
        jbyte b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT;
        [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      }
      else {
        [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT)];
        [self setFormatWithOrgGeogebraCommonAwtGPoint:cell2 withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT)];
      }
    }
    if (c1 == c2) {
      cell->x_ = c1;
      cell->y_ = r1;
      jbyte b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      cell->x_ = c1;
      cell->y_ = r2;
      b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
    }
    else if (r1 == r2) {
      cell->x_ = c1;
      cell->y_ = r1;
      jbyte b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      cell->x_ = c2;
      cell->y_ = r1;
      b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
    }
    else {
      cell->y_ = r1;
      cell->x_ = c1;
      jbyte b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      cell->y_ = r1;
      cell->x_ = c2;
      b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      cell->y_ = r2;
      cell->x_ = c2;
      b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      cell->y_ = r2;
      cell->x_ = c1;
      b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
    }
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_INSIDE:
    for (jint r = r1 + 1; r <= r2; r++) {
      cell->x_ = c1;
      cell->y_ = r;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP)];
    }
    for (jint c = c1 + 1; c <= c2; c++) {
      cell->x_ = c;
      cell->y_ = r1;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT)];
    }
    for (jint r = r1 + 1; r <= r2; r++) {
      for (jint c = c1 + 1; c <= c2; c++) {
        cell->x_ = c;
        cell->y_ = r;
        jbyte b = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT + OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP;
        [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(b)];
      }
    }
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_TOP:
    cell->y_ = r1;
    for (jint c = c1; c <= c2; c++) {
      cell->x_ = c;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP)];
    }
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_BOTTOM:
    cell->y_ = r2;
    for (jint c = c1; c <= c2; c++) {
      cell->x_ = c;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM)];
    }
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_LEFT:
    cell->x_ = c1;
    for (jint r = r1; r <= r2; r++) {
      cell->y_ = r;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT)];
    }
    break;
    case OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_RIGHT:
    cell->x_ = c2;
    for (jint r = r1; r <= r2; r++) {
      cell->y_ = r;
      [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER withId:JavaLangByte_valueOfWithByte_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT)];
    }
    break;
  }
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  JavaLangStringBuilder *cellFormat = [self encodeFormats];
  if (cellFormat == nil) return;
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<spreadsheetCellFormat "];
  (void) [sb appendWithNSString:@" formatMap=\""];
  (void) [sb appendWithJavaLangCharSequence:cellFormat];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@"/>\n"];
}

- (JavaLangStringBuilder *)encodeFormats {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  JavaUtilHashSet *masterKeySet = new_JavaUtilHashSet_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(formatMapArray_))->size_; i++) [masterKeySet addAllWithJavaUtilCollection:[((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(IOSObjectArray_Get(formatMapArray_, i))) keySet]];
  if ([masterKeySet size] == 0) return nil;
  for (OrgGeogebraCommonAwtGPoint * __strong cell in masterKeySet) {
    (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_cellDelimiter_];
    (void) [sb appendWithInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(cell))->x_];
    (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
    (void) [sb appendWithInt:cell->y_];
    JavaLangInteger *align = (JavaLangInteger *) check_class_cast([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(IOSObjectArray_Get(formatMapArray_, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_ALIGN))) getWithId:cell], [JavaLangInteger class]);
    if (align != nil) {
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_alignToken_];
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
      (void) [sb appendWithId:align];
    }
    JavaLangByte *border = (JavaLangByte *) check_class_cast([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(IOSObjectArray_Get(formatMapArray_, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER))) getWithId:cell], [JavaLangByte class]);
    if (border != nil) {
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_borderToken_];
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
      (void) [sb appendWithId:border];
    }
    OrgGeogebraCommonAwtGColor *bgColor = (OrgGeogebraCommonAwtGColor *) check_class_cast([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(IOSObjectArray_Get(formatMapArray_, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BGCOLOR))) getWithId:cell], [OrgGeogebraCommonAwtGColor class]);
    if (bgColor != nil) {
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_bgColorToken_];
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
      (void) [sb appendWithInt:[bgColor getRGB]];
    }
    JavaLangInteger *fStyle = (JavaLangInteger *) check_class_cast([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(IOSObjectArray_Get(formatMapArray_, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_FONTSTYLE))) getWithId:cell], [JavaLangInteger class]);
    if (fStyle != nil) {
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_fontStyleToken_];
      (void) [sb appendWithNSString:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
      (void) [sb appendWithId:fStyle];
    }
  }
  (void) [sb deleteCharAtWithInt:0];
  return sb;
}

- (void)processXMLStringWithNSString:(NSString *)xml {
  [self clearAll];
  if (xml == nil) return;
  IOSObjectArray *cellGroup = [((NSString *) nil_chk(xml)) split:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_cellDelimiter_];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(cellGroup))->size_; i++) {
    if (cellGroup->size_ > 0) OrgGeogebraCommonGuiViewSpreadsheetCellFormat_processCellFormatStringWithNSString_(self, IOSObjectArray_Get(cellGroup, i));
  }
}

- (void)processCellFormatStringWithNSString:(NSString *)formatStr {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_processCellFormatStringWithNSString_(self, formatStr);
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGuiViewSpreadsheetCellFormat class]) {
    OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatTokenMap_ = new_JavaUtilHashMap_init();
    {
      (void) [OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatTokenMap_ putWithId:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_alignToken_ withId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_ALIGN)];
      (void) [OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatTokenMap_ putWithId:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_borderToken_ withId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER)];
      (void) [OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatTokenMap_ putWithId:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_fontStyleToken_ withId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_FONTSTYLE)];
      (void) [OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatTokenMap_ putWithId:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_bgColorToken_ withId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BGCOLOR)];
    }
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGuiViewSpreadsheetCellFormat)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGuiViewSpreadsheetMyTableInterface:", "CellFormat", NULL, 0x1, NULL, NULL },
    { "clearAll", NULL, "V", 0x1, NULL, NULL },
    { "shiftFormatsWithInt:withInt:withOrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum:", "shiftFormats", "V", 0x1, NULL, NULL },
    { "shiftRowsUpWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:withInt:withInt:", "shiftRowsUp", "V", 0x2, NULL, NULL },
    { "shiftRowsDownWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:withInt:withInt:", "shiftRowsDown", "V", 0x2, NULL, NULL },
    { "clearRowsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:withInt:withInt:", "clearRows", "V", 0x2, NULL, NULL },
    { "shiftColumnsLeftWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:withInt:withInt:", "shiftColumnsLeft", "V", 0x2, NULL, NULL },
    { "shiftColumnsRightWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:withInt:withInt:", "shiftColumnsRight", "V", 0x2, NULL, NULL },
    { "clearColumnsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:withInt:withInt:", "clearColumns", "V", 0x2, NULL, NULL },
    { "printMapWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap:", "printMap", "V", 0xa, NULL, NULL },
    { "getFormatMapWithInt:", "getFormatMap", "Ljava.util.HashMap;", 0x1, NULL, NULL },
    { "getCellFormatWithInt:withInt:withInt:", "getCellFormat", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getCellFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:withInt:", "getCellFormat", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setFormatWithOrgGeogebraCommonAwtGPoint:withInt:withId:", "setFormat", "V", 0x1, NULL, NULL },
    { "setFormatWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:withInt:withId:", "setFormat", "V", 0x1, NULL, NULL },
    { "setFormatWithJavaUtilArrayList:withInt:withId:", "setFormat", "V", 0x1, NULL, NULL },
    { "setCellFormatString", NULL, "V", 0x2, NULL, NULL },
    { "setBorderStyleWithJavaUtilArrayList:withInt:", "setBorderStyle", "V", 0x1, NULL, NULL },
    { "setBorderStyleWithOrgGeogebraCommonGuiViewSpreadsheetCellRange:withInt:", "setBorderStyle", "V", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
    { "encodeFormats", NULL, "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "processXMLStringWithNSString:", "processXMLString", "V", 0x1, NULL, NULL },
    { "processCellFormatStringWithNSString:", "processCellFormatString", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "table_", NULL, 0x0, "Lorg.geogebra.common.gui.view.spreadsheet.MyTableInterface;", NULL, NULL,  },
    { "app_", NULL, 0x0, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "highestIndexRow_", NULL, 0x2, "I", NULL, NULL,  },
    { "highestIndexColumn_", NULL, 0x2, "I", NULL, NULL,  },
    { "cellFormatString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "formatMapArray_", NULL, 0x2, "[Lorg.geogebra.common.gui.view.spreadsheet.CellFormat$MyHashMap;", NULL, NULL,  },
    { "FORMAT_ALIGN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_ALIGN },
    { "FORMAT_BORDER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER },
    { "FORMAT_BGCOLOR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BGCOLOR },
    { "FORMAT_FONTSTYLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_FONTSTYLE },
    { "formatCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "ALIGN_LEFT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_ALIGN_LEFT },
    { "ALIGN_CENTER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_ALIGN_CENTER },
    { "ALIGN_RIGHT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_ALIGN_RIGHT },
    { "STYLE_PLAIN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_STYLE_PLAIN },
    { "STYLE_BOLD_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_STYLE_BOLD },
    { "STYLE_ITALIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_STYLE_ITALIC },
    { "STYLE_BOLD_ITALIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_STYLE_BOLD_ITALIC },
    { "BORDER_STYLE_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_NONE },
    { "BORDER_STYLE_FRAME_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_FRAME },
    { "BORDER_STYLE_INSIDE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_INSIDE },
    { "BORDER_STYLE_ALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_ALL },
    { "BORDER_STYLE_TOP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_TOP },
    { "BORDER_STYLE_BOTTOM_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_BOTTOM },
    { "BORDER_STYLE_LEFT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_LEFT },
    { "BORDER_STYLE_RIGHT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_STYLE_RIGHT },
    { "BORDER_LEFT_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_LEFT },
    { "BORDER_TOP_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_TOP },
    { "BORDER_RIGHT_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_RIGHT },
    { "BORDER_BOTTOM_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_BOTTOM },
    { "BORDER_ALL_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_BORDER_ALL },
    { "formatDelimiter_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_, NULL,  },
    { "cellDelimiter_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiViewSpreadsheetCellFormat_cellDelimiter_, NULL,  },
    { "alignToken_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiViewSpreadsheetCellFormat_alignToken_, NULL,  },
    { "borderToken_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiViewSpreadsheetCellFormat_borderToken_, NULL,  },
    { "fontStyleToken_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiViewSpreadsheetCellFormat_fontStyleToken_, NULL,  },
    { "bgColorToken_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonGuiViewSpreadsheetCellFormat_bgColorToken_, NULL,  },
    { "formatTokenMap_", NULL, 0xa, "Ljava.util.HashMap;", &OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatTokenMap_, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.view.spreadsheet.CellFormat$MyHashMap;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewSpreadsheetCellFormat = { 2, "CellFormat", "org.geogebra.common.gui.view.spreadsheet", NULL, 0x1, 23, methods, 38, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewSpreadsheetCellFormat;
}

@end

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_initWithOrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, id<OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface> table) {
  (void) NSObject_init(self);
  self->highestIndexRow_ = 0;
  self->highestIndexColumn_ = 0;
  self->formatCount_ = 5;
  self->table_ = table;
  self->app_ = [((id<OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface>) nil_chk(table)) getApplication];
  self->formatMapArray_ = [IOSObjectArray newArrayWithLength:self->formatCount_ type:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_class_()];
  for (jint i = 0; i < self->formatCount_; i++) {
    (void) IOSObjectArray_Set(self->formatMapArray_, i, new_OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_init());
  }
}

OrgGeogebraCommonGuiViewSpreadsheetCellFormat *new_OrgGeogebraCommonGuiViewSpreadsheetCellFormat_initWithOrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_(id<OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface> table) {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self = [OrgGeogebraCommonGuiViewSpreadsheetCellFormat alloc];
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_initWithOrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_(self, table);
  return self;
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftRowsUpWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint rowStart, jint shiftAmount) {
  if (formatMap == nil || [formatMap isEmpty]) {
    return;
  }
  OrgGeogebraCommonAwtGPoint *key = nil;
  OrgGeogebraCommonAwtGPoint *shiftKey = nil;
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_clearRowsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, formatMap, rowStart - shiftAmount, rowStart - shiftAmount);
  for (jint r = rowStart; r <= self->highestIndexRow_; r++) {
    key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(-1, r);
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
      shiftKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(-1, r - shiftAmount);
      (void) [formatMap putWithId:shiftKey withId:[formatMap removeWithId:key]];
    }
  }
  for (jint r = rowStart; r <= self->highestIndexRow_; r++) {
    for (jint c = 0; c <= self->highestIndexColumn_; c++) {
      key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, r);
      if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
        shiftKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, r - shiftAmount);
        (void) [formatMap putWithId:shiftKey withId:[formatMap removeWithId:key]];
      }
    }
  }
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftRowsDownWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint rowStart, jint shiftAmount) {
  if (formatMap == nil || [formatMap isEmpty]) {
    return;
  }
  OrgGeogebraCommonAwtGPoint *key = nil;
  OrgGeogebraCommonAwtGPoint *shiftKey = nil;
  for (jint r = self->highestIndexRow_; r >= rowStart; r--) {
    key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(-1, r);
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
      shiftKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(-1, r + shiftAmount);
      (void) [formatMap putWithId:shiftKey withId:[formatMap removeWithId:key]];
    }
  }
  for (jint r = self->highestIndexRow_; r >= rowStart; r--) {
    for (jint c = 0; c <= self->highestIndexColumn_; c++) {
      key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, r);
      if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
        shiftKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, r + shiftAmount);
        (void) [formatMap putWithId:shiftKey withId:[formatMap removeWithId:key]];
      }
    }
  }
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_clearRowsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint rowStart, jint rowEnd) {
  if (formatMap == nil || [formatMap isEmpty]) {
    return;
  }
  OrgGeogebraCommonAwtGPoint *key = nil;
  for (jint r = rowStart; r <= rowEnd; r++) {
    key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(-1, r);
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
      (void) [formatMap removeWithId:key];
    }
  }
  for (jint r = rowStart; r <= rowEnd; r++) {
    for (jint c = 0; c <= self->highestIndexColumn_; c++) {
      key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, r);
      if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
        (void) [formatMap removeWithId:key];
      }
    }
  }
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftColumnsLeftWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint columnStart, jint shiftAmount) {
  if (formatMap == nil || [formatMap isEmpty]) {
    return;
  }
  OrgGeogebraCommonAwtGPoint *key = nil;
  OrgGeogebraCommonAwtGPoint *shiftKey = nil;
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_clearColumnsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(self, formatMap, columnStart - shiftAmount, columnStart - shiftAmount);
  for (jint c = columnStart; c <= self->highestIndexColumn_; c++) {
    key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, -1);
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
      shiftKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c - shiftAmount, -1);
      (void) [formatMap putWithId:shiftKey withId:[formatMap removeWithId:key]];
    }
  }
  for (jint c = columnStart; c <= self->highestIndexColumn_; c++) {
    for (jint r = 0; r <= self->highestIndexRow_; r++) {
      key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, r);
      if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
        shiftKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c - shiftAmount, r);
        (void) [formatMap putWithId:shiftKey withId:[formatMap removeWithId:key]];
      }
    }
  }
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_shiftColumnsRightWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint columnStart, jint shiftAmount) {
  if (formatMap == nil || [formatMap isEmpty]) {
    return;
  }
  OrgGeogebraCommonAwtGPoint *key = nil;
  OrgGeogebraCommonAwtGPoint *shiftKey = nil;
  for (jint c = self->highestIndexColumn_; c >= columnStart; c--) {
    key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, -1);
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
      shiftKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c + shiftAmount, -1);
      (void) [formatMap putWithId:shiftKey withId:[formatMap removeWithId:key]];
    }
  }
  for (jint c = self->highestIndexColumn_; c >= columnStart; c--) {
    for (jint r = 0; r <= self->highestIndexRow_; r++) {
      key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, r);
      if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
        shiftKey = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c + shiftAmount, r);
        (void) [formatMap putWithId:shiftKey withId:[formatMap removeWithId:key]];
      }
    }
  }
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_clearColumnsWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_withInt_withInt_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap, jint columnStart, jint columnEnd) {
  if (formatMap == nil || [formatMap isEmpty]) {
    return;
  }
  OrgGeogebraCommonAwtGPoint *key = nil;
  for (jint c = columnStart; c <= columnEnd; c++) {
    key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, -1);
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
      (void) [formatMap removeWithId:key];
    }
  }
  for (jint c = columnStart; c <= columnEnd; c++) {
    for (jint r = 0; r <= self->highestIndexRow_; r++) {
      key = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(c, r);
      if ([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) containsKeyWithId:key]) {
        (void) [formatMap removeWithId:key];
      }
    }
  }
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_printMapWithOrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *formatMap) {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_initialize();
  OrgGeogebraCommonMainApp_debugWithNSString_(@" =========  map contents ==========");
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *) nil_chk(formatMap)) entrySet])) {
    OrgGeogebraCommonAwtGPoint *key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id value = [entry_ getValue];
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$I$$", @" key: ", ((OrgGeogebraCommonAwtGPoint *) nil_chk(key))->x_, @" , ", key->y_, @"  value: ", [nil_chk(value) description]));
  }
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_setCellFormatString(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self) {
  JavaLangStringBuilder *sb = [self encodeFormats];
  if (sb == nil) {
    self->cellFormatString_ = nil;
  }
  else {
    self->cellFormatString_ = [sb description];
  }
  [((id<OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface>) nil_chk(self->table_)) updateCellFormatWithNSString:self->cellFormatString_];
}

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_processCellFormatStringWithNSString_(OrgGeogebraCommonGuiViewSpreadsheetCellFormat *self, NSString *formatStr) {
  if ([((NSString *) nil_chk(formatStr)) isEqual:@"null"]) {
    return;
  }
  IOSObjectArray *f = [formatStr split:OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatDelimiter_];
  OrgGeogebraCommonAwtGPoint *cell = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(f), 0)), JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(f, 1)));
  jint formatType;
  id formatValue;
  for (jint i = 2; i < f->size_; i = i + 2) {
    formatType = [((JavaLangInteger *) nil_chk([((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_formatTokenMap_)) getWithId:IOSObjectArray_Get(f, i)])) intValue];
    if (formatType == OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BGCOLOR) {
      jint fv = (jint) (JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(f, i + 1)) & (jint) 0x00ffffff);
      formatValue = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:fv];
    }
    else if (formatType == OrgGeogebraCommonGuiViewSpreadsheetCellFormat_FORMAT_BORDER) {
      jlong b = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(f, i + 1));
      formatValue = JavaLangByte_valueOfWithByte_((jbyte) b);
    }
    else {
      formatValue = JavaLangInteger_valueOfWithInt_(JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(f, i + 1)));
    }
    [self setFormatWithOrgGeogebraCommonAwtGPoint:cell withInt:formatType withId:formatValue];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewSpreadsheetCellFormat)

@implementation OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap

- (instancetype)init {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_init(self);
  return self;
}

- (id)putWithId:(OrgGeogebraCommonAwtGPoint *)key
         withId:(id)value {
  if (value == nil) {
    (void) [super removeWithId:key];
    return nil;
  }
  return [super putWithId:key withId:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MyHashMap", NULL, 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_serialVersionUID },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.awt.GPoint;", "Ljava.lang.Object;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap = { 2, "MyHashMap", "org.geogebra.common.gui.view.spreadsheet", "CellFormat", 0xa, 2, methods, 1, fields, 2, superclass_type_args, 0, NULL, NULL, "Ljava/util/HashMap<Lorg/geogebra/common/awt/GPoint;Ljava/lang/Object;>;" };
  return &_OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap;
}

@end

void OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_init(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *self) {
  (void) JavaUtilHashMap_init(self);
}

OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *new_OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_init() {
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap *self = [OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap alloc];
  OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewSpreadsheetCellFormat_MyHashMap)
