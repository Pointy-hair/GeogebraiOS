//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/view/data/StatGeo.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/gui/view/data/DataAnalysisModel.h"
#include "org/geogebra/common/gui/view/data/DataDisplayModel.h"
#include "org/geogebra/common/gui/view/data/DataVariable.h"
#include "org/geogebra/common/gui/view/data/StatGeo.h"
#include "org/geogebra/common/gui/view/data/StatPanelSettings.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/advanced/AlgoUnique.h"
#include "org/geogebra/common/kernel/algos/AlgoBarChart.h"
#include "org/geogebra/common/kernel/algos/AlgoBoxPlot.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentList.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentListExpression.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionAreaSums.h"
#include "org/geogebra/common/kernel/algos/AlgoListElement.h"
#include "org/geogebra/common/kernel/algos/AlgoListMax.h"
#include "org/geogebra/common/kernel/algos/AlgoListMin.h"
#include "org/geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "org/geogebra/common/kernel/algos/AlgoText.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/statistics/AlgoClasses.h"
#include "org/geogebra/common/kernel/statistics/AlgoDotPlot.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitExp.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitGrowth.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitLineY.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitLog.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitLogistic.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitPoly.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitPow.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitSin.h"
#include "org/geogebra/common/kernel/statistics/AlgoFrequencyTable.h"
#include "org/geogebra/common/kernel/statistics/AlgoHistogram.h"
#include "org/geogebra/common/kernel/statistics/AlgoMean.h"
#include "org/geogebra/common/kernel/statistics/AlgoNormalQuantilePlot.h"
#include "org/geogebra/common/kernel/statistics/AlgoResidualPlot.h"
#include "org/geogebra/common/kernel/statistics/AlgoStandardDeviation.h"
#include "org/geogebra/common/kernel/statistics/AlgoStemPlot.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"

#define OrgGeogebraCommonGuiViewDataStatGeo_DEFAULT_BUFFER 0.01

@interface OrgGeogebraCommonGuiViewDataStatGeo () {
 @public
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonKernelKernel *kernel_;
  OrgGeogebraCommonKernelConstruction *cons_;
  jdouble xMinData_, xMaxData_, yMinData_, yMaxData_;
  jboolean histogramRight_;
  jboolean removeFromConstruction__;
  id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor> listener_;
}

- (void)getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList;

- (void)getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                                withBoolean:(jboolean)isPointList;

- (void)getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                                withBoolean:(jboolean)isPointList
                                                withBoolean:(jboolean)isMatrix;

- (OrgGeogebraCommonKernelAlgosAlgoPolyLine *)createFrequencyPolygonWithOrgGeogebraCommonKernelStatisticsAlgoHistogram:(OrgGeogebraCommonKernelStatisticsAlgoHistogram *)histogram
                                                                                                           withBoolean:(jboolean)doCumulative;

- (jdouble)getPreferredBarWidthWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list;

+ (jdouble)getPreferredBarWidthWithDoubleArray:(IOSDoubleArray *)array;

- (void)setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings;

- (void)setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings
                                                          withDouble:(jdouble)xBufferScale
                                                          withDouble:(jdouble)yBufferScale;

- (void)removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:(OrgGeogebraCommonKernelAlgosConstructionElement *)ce;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataStatGeo, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataStatGeo, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataStatGeo, cons_, OrgGeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataStatGeo, listener_, id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewDataStatGeo, DEFAULT_BUFFER, jdouble)

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelGeosGeoList *dataList);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelGeosGeoList *dataList, jboolean isPointList);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelGeosGeoList *dataList, jboolean isPointList, jboolean isMatrix);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoPolyLine *OrgGeogebraCommonGuiViewDataStatGeo_createFrequencyPolygonWithOrgGeogebraCommonKernelStatisticsAlgoHistogram_withBoolean_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelStatisticsAlgoHistogram *histogram, jboolean doCumulative);

__attribute__((unused)) static jdouble OrgGeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelGeosGeoList *list);

__attribute__((unused)) static jdouble OrgGeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithDoubleArray_(IOSDoubleArray *array);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonGuiViewDataStatPanelSettings *settings);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonGuiViewDataStatPanelSettings *settings, jdouble xBufferScale, jdouble yBufferScale);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelAlgosConstructionElement *ce);

@implementation OrgGeogebraCommonGuiViewDataStatGeo

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor:(id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>)listener {
  OrgGeogebraCommonGuiViewDataStatGeo_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor_(self, app, listener);
  return self;
}

- (void)getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, dataList);
}

- (void)getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                                withBoolean:(jboolean)isPointList {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_(self, dataList, isPointList);
}

- (void)getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                                withBoolean:(jboolean)isPointList
                                                withBoolean:(jboolean)isMatrix {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, dataList, isPointList, isMatrix);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createHistogramWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                               withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings
                                                                                     withBoolean:(jboolean)isFrequencyPolygon {
  OrgGeogebraCommonKernelAlgosAlgoElement *al = nil, *algoHistogram = nil;
  histogramRight_ = ![((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isLeftRule];
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, dataList);
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]));
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
  }
  if ([settings isUseManualClasses] || [settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
    al = [new_OrgGeogebraCommonKernelStatisticsAlgoClasses_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getClassStart]) autorelease], [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getClassWidth]) autorelease], nil) autorelease];
  }
  else {
    [settings setClassWidthWithDouble:(xMaxData_ - xMinData_) / ([settings getNumClasses])];
    if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
      al = [new_OrgGeogebraCommonKernelStatisticsAlgoClasses_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, nil, nil, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getNumClasses]) autorelease]) autorelease];
    }
    else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
      al = [new_OrgGeogebraCommonKernelStatisticsAlgoClasses_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]), nil, nil, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getNumClasses]) autorelease]) autorelease];
    }
  }
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, al);
  jdouble density = -1;
  jint dataSize = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size];
  if ([settings getFrequencyType] == OrgGeogebraCommonGuiViewDataStatPanelSettings_TYPE_RELATIVE) density = 1.0 * [settings getClassWidth] / [dataList size];
  if ([settings getFrequencyType] == OrgGeogebraCommonGuiViewDataStatPanelSettings_TYPE_NORMALIZED) density = 1.0 / [dataList size];
  if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    algoHistogram = [new_OrgGeogebraCommonKernelStatisticsAlgoHistogram_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(cons_, [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons_, [settings isCumulative]) autorelease], (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(al)) getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class]), dataList, nil, [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons_, YES) autorelease], [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, density) autorelease], histogramRight_) autorelease];
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    algoHistogram = [new_OrgGeogebraCommonKernelStatisticsAlgoHistogram_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(cons_, [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons_, [settings isCumulative]) autorelease], (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(al)) getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class]), (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]), (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [OrgGeogebraCommonKernelGeosGeoList class]), [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons_, YES) autorelease], [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, density) autorelease], histogramRight_) autorelease];
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
    algoHistogram = [new_OrgGeogebraCommonKernelStatisticsAlgoHistogram_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withBoolean_(cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]), (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [OrgGeogebraCommonKernelGeosGeoList class]), histogramRight_) autorelease];
  }
  if (isFrequencyPolygon) {
    OrgGeogebraCommonKernelAlgosAlgoPolyLine *al3 = OrgGeogebraCommonGuiViewDataStatGeo_createFrequencyPolygonWithOrgGeogebraCommonKernelStatisticsAlgoHistogram_withBoolean_(self, (OrgGeogebraCommonKernelStatisticsAlgoHistogram *) check_class_cast(algoHistogram, [OrgGeogebraCommonKernelStatisticsAlgoHistogram class]), [settings isCumulative]);
    geo = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(al3)) getGeoElements]), 0);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_OVERLAY_COLOR_IDX]];
    [geo setLineThicknessWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_thicknessCurve];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoHistogram);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, al3);
  }
  else {
    geo = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoHistogram)) getGeoElements]), 0);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_HISTOGRAM_COLOR_IDX]];
    [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
    [geo setLineThicknessWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_thicknessBarChart];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoHistogram);
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoHistogram)) getGeoElements]), 0))) setEuclidianVisibleWithBoolean:NO];
  [algoHistogram setProtectedInputWithBoolean:YES];
  return geo;
}

- (OrgGeogebraCommonKernelAlgosAlgoPolyLine *)createFrequencyPolygonWithOrgGeogebraCommonKernelStatisticsAlgoHistogram:(OrgGeogebraCommonKernelStatisticsAlgoHistogram *)histogram
                                                                                                           withBoolean:(jboolean)doCumulative {
  return OrgGeogebraCommonGuiViewDataStatGeo_createFrequencyPolygonWithOrgGeogebraCommonKernelStatisticsAlgoHistogram_withBoolean_(self, histogram, doCumulative);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createNormalCurveOverlayWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  OrgGeogebraCommonKernelStatisticsAlgoMean *mean = [new_OrgGeogebraCommonKernelStatisticsAlgoMean_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
  OrgGeogebraCommonKernelStatisticsAlgoStandardDeviation *sd = [new_OrgGeogebraCommonKernelStatisticsAlgoStandardDeviation_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, mean);
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, sd);
  OrgGeogebraCommonKernelGeosGeoElement *meanGeo = IOSObjectArray_Get(nil_chk([mean getGeoElements]), 0);
  OrgGeogebraCommonKernelGeosGeoElement *sdGeo = IOSObjectArray_Get(nil_chk([sd getGeoElements]), 0);
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel_) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *normal = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, x, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), meanGeo) autorelease];
  normal = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), sdGeo) autorelease];
  normal = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, OrgGeogebraCommonPluginOperationEnum_get_POWER(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 2.0) autorelease]) autorelease];
  normal = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -2.0) autorelease]) autorelease];
  normal = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, OrgGeogebraCommonPluginOperationEnum_get_EXP(), nil) autorelease];
  normal = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, JavaLangMath_sqrtWithDouble_(2 * JavaLangMath_PI)) autorelease]) autorelease];
  normal = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), sdGeo) autorelease];
  geo = [normal buildFunctionWithOrgGeogebraCommonKernelArithmeticFunctionVariable:x];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_OVERLAY_COLOR_IDX]];
  [geo setLineThicknessWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_thicknessCurve];
  return geo;
}

- (void)getHistogramSettingsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)histogram
                 withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, dataList);
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]));
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
    OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]));
  }
  jdouble freqMax = [((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(histogram)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class])))) getFreqMax];
  if ([settings isUseManualClasses]) {
    IOSDoubleArray *leftBorder = [((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) check_class_cast([histogram getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class])))) getLeftBorder];
    xMinData_ = IOSDoubleArray_Get(nil_chk(leftBorder), 0);
    xMaxData_ = IOSDoubleArray_Get(leftBorder, leftBorder->size_ - 1);
  }
  yMinData_ = 0.0;
  yMaxData_ = freqMax;
  OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(self, settings, .2, .1);
  settings->showYAxis_ = YES;
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 0) = NO;
  *IOSBooleanArray_GetRef(settings->isEdgeAxis_, 1) = YES;
  *IOSBooleanArray_GetRef(nil_chk(settings->isPositiveOnly_), 1) = YES;
  settings->forceXAxisBuffer_ = YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createBarChartTextWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                                  withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  OrgGeogebraCommonKernelAlgosAlgoBarChart *algoBarChart = nil;
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticBarWidth]) {
    [settings setBarWidthWithDouble:0.5];
  }
  if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    algoBarChart = [new_OrgGeogebraCommonKernelAlgosAlgoBarChart_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getBarWidth]) autorelease]) autorelease];
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    algoBarChart = [new_OrgGeogebraCommonKernelAlgosAlgoBarChart_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]), (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [OrgGeogebraCommonKernelGeosGeoList class]), [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getBarWidth]) autorelease]) autorelease];
  }
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoBarChart);
  geo = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algoBarChart)) getGeoElements]), 0);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_BARCHART_COLOR_IDX]];
  [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [algoBarChart setProtectedInputWithBoolean:YES];
  return geo;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createBarChartNumericWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                                     withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  OrgGeogebraCommonKernelAlgosAlgoBarChart *algoBarChart = nil;
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    if ([settings isAutomaticBarWidth]) {
      OrgGeogebraCommonKernelAdvancedAlgoUnique *algo = [new_OrgGeogebraCommonKernelAdvancedAlgoUnique_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
      [settings setBarWidthWithDouble:OrgGeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithOrgGeogebraCommonKernelGeosGeoList_(self, [algo getResult])];
    }
    algoBarChart = [new_OrgGeogebraCommonKernelAlgosAlgoBarChart_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getBarWidth]) autorelease]) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoBarChart);
    geo = IOSObjectArray_Get(nil_chk([algoBarChart getGeoElements]), 0);
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    if ([settings isAutomaticBarWidth]) {
      [settings setBarWidthWithDouble:OrgGeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithOrgGeogebraCommonKernelGeosGeoList_(self, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]))];
    }
    algoBarChart = [new_OrgGeogebraCommonKernelAlgosAlgoBarChart_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]), (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [OrgGeogebraCommonKernelGeosGeoList class]), [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getBarWidth]) autorelease]) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoBarChart);
    geo = IOSObjectArray_Get(nil_chk([algoBarChart getGeoElements]), 0);
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_BARCHART_COLOR_IDX]];
  [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algoBarChart)) setProtectedInputWithBoolean:YES];
  return geo;
}

- (jdouble)getPreferredBarWidthWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list {
  return OrgGeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithOrgGeogebraCommonKernelGeosGeoList_(self, list);
}

+ (jdouble)getPreferredBarWidthWithDoubleArray:(IOSDoubleArray *)array {
  return OrgGeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithDoubleArray_(array);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createFrequencyTableGeoWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)chart
                                              withOrgGeogebraCommonGuiViewDataDataDisplayModel_PlotTypeEnum:(OrgGeogebraCommonGuiViewDataDataDisplayModel_PlotTypeEnum *)plotType {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *al = nil;
  switch ([plotType ordinal]) {
    case OrgGeogebraCommonGuiViewDataDataDisplayModel_PlotType_HISTOGRAM:
    al = [new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, chart) autorelease];
    break;
    case OrgGeogebraCommonGuiViewDataDataDisplayModel_PlotType_BARCHART:
    al = [new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, chart) autorelease];
    break;
  }
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, al);
  return IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *) nil_chk(al)) getGeoElements]), 0);
}

- (void)getBarChartSettingsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings
                        withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)barChart {
  IOSDoubleArray *leftBorder = [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(barChart)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class])))) getLeftBorder];
  xMinData_ = IOSDoubleArray_Get(nil_chk(leftBorder), 0) - [((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) getBarWidth] / 2;
  xMaxData_ = IOSDoubleArray_Get(leftBorder, leftBorder->size_ - 1) + [settings getBarWidth];
  jdouble freqMax = [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([barChart getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class])))) getFreqMax];
  yMinData_ = 0.0;
  yMaxData_ = freqMax;
  OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(self, settings, .2, .1);
  if ([settings isAutomaticWindow] && ![settings isNumericData]) {
    settings->xAxesIntervalAuto_ = NO;
    settings->xAxesInterval_ = 1;
  }
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 0) = NO;
  *IOSBooleanArray_GetRef(settings->isEdgeAxis_, 1) = YES;
  settings->showYAxis_ = YES;
  settings->forceXAxisBuffer_ = YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createBoxPlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                             withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  OrgGeogebraCommonKernelAlgosAlgoBoxPlot *algoBoxPlot = nil;
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    algoBoxPlot = [new_OrgGeogebraCommonKernelAlgosAlgoBoxPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) autorelease], [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0.5) autorelease], dataList, [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons_, [settings isShowOutliers]) autorelease]) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoBoxPlot);
    geo = IOSObjectArray_Get(nil_chk([algoBoxPlot getGeoElements]), 0);
  }
  else if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    algoBoxPlot = [new_OrgGeogebraCommonKernelAlgosAlgoBoxPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) autorelease], [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0.5) autorelease], (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]), (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [OrgGeogebraCommonKernelGeosGeoList class]), [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons_, [settings isShowOutliers]) autorelease]) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoBoxPlot);
    geo = IOSObjectArray_Get(nil_chk([algoBoxPlot getGeoElements]), 0);
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_BOXPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [((OrgGeogebraCommonKernelAlgosAlgoBoxPlot *) nil_chk(algoBoxPlot)) setProtectedInputWithBoolean:YES];
  return geo;
}

- (void)getBoxPlotSettingsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
               withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, dataList);
  }
  else {
    if ([settings groupType] == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
      OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]));
    }
  }
  if ([settings isAutomaticWindow]) {
    jdouble buffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - buffer;
    settings->xMax_ = xMaxData_ + buffer;
    settings->yMin_ = -1.0;
    settings->yMax_ = 2;
  }
  settings->showYAxis_ = NO;
  settings->forceXAxisBuffer_ = YES;
}

- (IOSObjectArray *)createMultipleBoxPlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                              withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  jint length = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size];
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:length type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < length; i++) {
    OrgGeogebraCommonKernelAlgosAlgoBoxPlot *bp = [new_OrgGeogebraCommonKernelAlgosAlgoBoxPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons_, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, i + 1) autorelease], [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, 1.0 / 3.0) autorelease], (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:(length - 1) - i], [OrgGeogebraCommonKernelGeosGeoList class]), [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons_, [((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isShowOutliers]) autorelease]) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:bp];
    IOSObjectArray_Set(ret, i, IOSObjectArray_Get(nil_chk([bp getGeoElements]), 0));
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, i))) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_BOXPLOT_COLOR_IDX]];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, i))) setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  }
  return ret;
}

- (void)getMultipleBoxPlotSettingsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                       withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, dataList, NO, YES);
    jdouble buffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - buffer;
    settings->xMax_ = xMaxData_ + buffer;
    settings->yMin_ = -1.0;
    settings->yMax_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size] + 1;
  }
  settings->showYAxis_ = NO;
  settings->forceXAxisBuffer_ = YES;
}

- (IOSObjectArray *)createBoxPlotTitlesWithOrgGeogebraCommonGuiViewDataDataAnalysisModel:(OrgGeogebraCommonGuiViewDataDataAnalysisModel *)statDialog
                                       withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  IOSObjectArray *dataTitles = [((OrgGeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk(statDialog)) getDataTitles];
  jint length = ((IOSObjectArray *) nil_chk(dataTitles))->size_;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:length type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < dataTitles->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoPoint *p = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, ((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings))->xMin_, i + 1.0, 1.0) autorelease];
    OrgGeogebraCommonKernelGeosGeoText *t = [new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_(cons_, JreStrcat("$$", @"  ", IOSObjectArray_Get(dataTitles, dataTitles->size_ - i - 1))) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoText *text = [new_OrgGeogebraCommonKernelAlgosAlgoText_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons_, t, p, nil, nil) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:text];
    IOSObjectArray_Set(ret, i, IOSObjectArray_Get(nil_chk([text getGeoElements]), 0));
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, i))) setBackgroundColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_WHITE_COLOR_IDX]];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, i))) setObjColorWithOrgGeogebraCommonAwtGColor:[listener_ createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_BLACK_COLOR_IDX]];
  }
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createDotPlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList {
  OrgGeogebraCommonKernelStatisticsAlgoDotPlot *algoDotPlot = [new_OrgGeogebraCommonKernelStatisticsAlgoDotPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoDotPlot);
  OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([algoDotPlot getGeoElements]), 0);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_DOTPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [algoDotPlot setProtectedInputWithBoolean:YES];
  return geo;
}

- (void)updateDotPlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)dotPlot
          withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, dataList);
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    jdouble buffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - buffer;
    settings->xMax_ = xMaxData_ + buffer;
    settings->yMin_ = -1.0;
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, dotPlot, OrgGeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *list = [new_OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(cons_, en) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoListMax *max = [new_OrgGeogebraCommonKernelAlgosAlgoListMax_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([list getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class])) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, list);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, max);
    settings->yMax_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([max getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble] + 1;
  }
  settings->showYAxis_ = NO;
  settings->forceXAxisBuffer_ = YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createNormalQuantilePlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *algoNormalQPlot = [new_OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoNormalQPlot);
  OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([algoNormalQPlot getGeoElements]), 0);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_NQPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [geo setLineThicknessWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_thicknessCurve];
  [algoNormalQPlot setProtectedInputWithBoolean:YES];
  return geo;
}

- (void)updateNormalQuantilePlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                     withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(self, dataList);
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    jdouble buffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - buffer;
    settings->xMax_ = xMaxData_ + buffer;
    settings->yMin_ = -4.0;
    settings->yMax_ = 4.0;
    settings->showYAxis_ = YES;
  }
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 1) = YES;
  settings->forceXAxisBuffer_ = NO;
  *IOSBooleanArray_GetRef(nil_chk(settings->isPositiveOnly_), 0) = NO;
  *IOSBooleanArray_GetRef(settings->isPositiveOnly_, 1) = NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createScatterPlotLineWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)points {
  OrgGeogebraCommonKernelAlgosAlgoPolyLine *polyLine = [new_OrgGeogebraCommonKernelAlgosAlgoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_(cons_, nil, points) autorelease];
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, polyLine);
  OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([polyLine getGeoElements]), 0);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:YES];
  [geo setAuxiliaryObjectWithBoolean:YES];
  [geo setLabelVisibleWithBoolean:NO];
  [geo setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_DOTPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  return geo;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createScatterPlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size]; ++i) {
    [list addWithId:[dataList getWithInt:i]];
  }
  OrgGeogebraCommonKernelAlgosAlgoDependentList *dl = [new_OrgGeogebraCommonKernelAlgosAlgoDependentList_initWithOrgGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(cons_, list, NO) autorelease];
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, dl);
  OrgGeogebraCommonKernelGeosGeoList *geo = [dl getGeoList];
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(geo)) setEuclidianVisibleWithBoolean:YES];
  [geo setAuxiliaryObjectWithBoolean:YES];
  [geo setLabelVisibleWithBoolean:NO];
  [geo setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_DOTPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  return geo;
}

- (void)getScatterPlotSettingsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                   withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_(self, dataList, YES);
  OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_(self, settings);
  ((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings))->showYAxis_ = YES;
  settings->forceXAxisBuffer_ = NO;
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 0) = YES;
  *IOSBooleanArray_GetRef(settings->isEdgeAxis_, 1) = YES;
  *IOSBooleanArray_GetRef(nil_chk(settings->isPositiveOnly_), 0) = YES;
  *IOSBooleanArray_GetRef(settings->isPositiveOnly_, 1) = YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createRegressionPlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                     withOrgGeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum:(OrgGeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum *)reg
                                                                                              withInt:(jint)order
                                                                                          withBoolean:(jboolean)residual {
  jboolean regNone = NO;
  OrgGeogebraCommonKernelAlgosAlgoElement *algo;
  switch ([reg ordinal]) {
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_LOG:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_POLY:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, dataList, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, order) autorelease]) autorelease];
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_POW:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoFitPow_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_EXP:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoFitExp_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_GROWTH:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_SIN:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoFitSin_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_LOGISTIC:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoFitLogistic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_NONE:
    regNone = YES;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_Regression_LINEAR:
    default:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoFitLineY_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
  }
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algo);
  OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getGeoElements]), 0);
  if (residual) {
    OrgGeogebraCommonKernelStatisticsAlgoResidualPlot *algoRP = [new_OrgGeogebraCommonKernelStatisticsAlgoResidualPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(cons_, dataList, (id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))) autorelease];
    geo = IOSObjectArray_Get(nil_chk([algoRP getGeoElements]), 0);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_DOTPLOT_COLOR_IDX]];
    [geo setAlphaValueWithFloat:OrgGeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
    [geo setLineThicknessWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_thicknessCurve];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:[((id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:OrgGeogebraCommonGuiViewDataDataAnalysisModel_REGRESSION_COLOR_IDX]];
    if ([((OrgGeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum *) nil_chk(reg)) isEqual:OrgGeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum_get_LINEAR()]) {
      [((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLine class])) setToExplicit];
    }
    if (regNone) [geo setEuclidianVisibleWithBoolean:NO];
  }
  return geo;
}

- (void)updateRegressionPlotWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                 withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_(self, dataList, YES);
    jdouble xBuffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - xBuffer;
    settings->xMax_ = xMaxData_ + xBuffer;
    jdouble yBuffer = .25 * (yMaxData_ - yMinData_);
    settings->yMin_ = yMinData_ - yBuffer;
    settings->yMax_ = yMaxData_ + yBuffer;
  }
  settings->showYAxis_ = YES;
  settings->forceXAxisBuffer_ = NO;
}

- (void)getResidualPlotSettingsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)residualPlot
                    withOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_(self, dataList, YES);
  IOSDoubleArray *residualBounds = [((OrgGeogebraCommonKernelStatisticsAlgoResidualPlot *) nil_chk(((OrgGeogebraCommonKernelStatisticsAlgoResidualPlot *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(residualPlot)) getParentAlgorithm], [OrgGeogebraCommonKernelStatisticsAlgoResidualPlot class])))) getResidualBounds];
  yMaxData_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(residualBounds), 0)), JavaLangMath_absWithDouble_(IOSDoubleArray_Get(residualBounds, 1)));
  yMinData_ = -yMaxData_;
  OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_(self, settings);
  ((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings))->showYAxis_ = YES;
  settings->forceXAxisBuffer_ = NO;
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 0) = NO;
  *IOSBooleanArray_GetRef(settings->isEdgeAxis_, 1) = YES;
  *IOSBooleanArray_GetRef(nil_chk(settings->isPositiveOnly_), 0) = YES;
  *IOSBooleanArray_GetRef(settings->isPositiveOnly_, 1) = NO;
}

- (void)setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings {
  OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_(self, settings);
}

- (void)setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings:(OrgGeogebraCommonGuiViewDataStatPanelSettings *)settings
                                                          withDouble:(jdouble)xBufferScale
                                                          withDouble:(jdouble)yBufferScale {
  OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(self, settings, xBufferScale, yBufferScale);
}

- (NSString *)getStemPlotLatexWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                                                             withInt:(jint)adjustment {
  OrgGeogebraCommonKernelStatisticsAlgoStemPlot *algoStemPlot = [new_OrgGeogebraCommonKernelStatisticsAlgoStemPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, adjustment) autorelease]) autorelease];
  OrgGeogebraCommonKernelGeosGeoElement *tempGeo = IOSObjectArray_Get(nil_chk([algoStemPlot getGeoElements]), 0);
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, algoStemPlot);
  [algoStemPlot setProtectedInputWithBoolean:YES];
  NSString *latex = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(tempGeo)) getLaTeXdescription];
  [tempGeo remove];
  return latex;
}

- (jboolean)removeFromConstruction {
  return removeFromConstruction__;
}

- (void)setRemoveFromConstructionWithBoolean:(jboolean)removeFromConstruction {
  self->removeFromConstruction__ = removeFromConstruction;
}

- (void)removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:(OrgGeogebraCommonKernelAlgosConstructionElement *)ce {
  OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, ce);
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(kernel_);
  RELEASE_(cons_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor:", "StatGeo", NULL, 0x1, NULL, NULL },
    { "getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:", "getDataBounds", "V", 0x2, NULL, NULL },
    { "getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:withBoolean:", "getDataBounds", "V", 0x2, NULL, NULL },
    { "getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList:withBoolean:withBoolean:", "getDataBounds", "V", 0x2, NULL, NULL },
    { "createHistogramWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:withBoolean:", "createHistogram", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createFrequencyPolygonWithOrgGeogebraCommonKernelStatisticsAlgoHistogram:withBoolean:", "createFrequencyPolygon", "Lorg.geogebra.common.kernel.algos.AlgoPolyLine;", 0x2, NULL, NULL },
    { "createNormalCurveOverlayWithOrgGeogebraCommonKernelGeosGeoList:", "createNormalCurveOverlay", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getHistogramSettingsWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "getHistogramSettings", "V", 0x1, NULL, NULL },
    { "createBarChartTextWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "createBarChartText", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createBarChartNumericWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "createBarChartNumeric", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getPreferredBarWidthWithOrgGeogebraCommonKernelGeosGeoList:", "getPreferredBarWidth", "D", 0x2, NULL, NULL },
    { "getPreferredBarWidthWithDoubleArray:", "getPreferredBarWidth", "D", 0xa, NULL, NULL },
    { "createFrequencyTableGeoWithOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonGuiViewDataDataDisplayModel_PlotTypeEnum:", "createFrequencyTableGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getBarChartSettingsWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:withOrgGeogebraCommonKernelGeosGeoElement:", "getBarChartSettings", "V", 0x1, NULL, NULL },
    { "createBoxPlotWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "createBoxPlot", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getBoxPlotSettingsWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "getBoxPlotSettings", "V", 0x1, NULL, NULL },
    { "createMultipleBoxPlotWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "createMultipleBoxPlot", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getMultipleBoxPlotSettingsWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "getMultipleBoxPlotSettings", "V", 0x1, NULL, NULL },
    { "createBoxPlotTitlesWithOrgGeogebraCommonGuiViewDataDataAnalysisModel:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "createBoxPlotTitles", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createDotPlotWithOrgGeogebraCommonKernelGeosGeoList:", "createDotPlot", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateDotPlotWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "updateDotPlot", "V", 0x1, NULL, NULL },
    { "createNormalQuantilePlotWithOrgGeogebraCommonKernelGeosGeoList:", "createNormalQuantilePlot", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateNormalQuantilePlotWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "updateNormalQuantilePlot", "V", 0x1, NULL, NULL },
    { "createScatterPlotLineWithOrgGeogebraCommonKernelGeosGeoList:", "createScatterPlotLine", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createScatterPlotWithOrgGeogebraCommonKernelGeosGeoList:", "createScatterPlot", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getScatterPlotSettingsWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "getScatterPlotSettings", "V", 0x1, NULL, NULL },
    { "createRegressionPlotWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum:withInt:withBoolean:", "createRegressionPlot", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateRegressionPlotWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "updateRegressionPlot", "V", 0x1, NULL, NULL },
    { "getResidualPlotSettingsWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonGuiViewDataStatPanelSettings:", "getResidualPlotSettings", "V", 0x1, NULL, NULL },
    { "setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings:", "setXYBounds", "V", 0x2, NULL, NULL },
    { "setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings:withDouble:withDouble:", "setXYBounds", "V", 0x2, NULL, NULL },
    { "getStemPlotLatexWithOrgGeogebraCommonKernelGeosGeoList:withInt:", "getStemPlotLatex", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "removeFromConstruction", NULL, "Z", 0x1, NULL, NULL },
    { "setRemoveFromConstructionWithBoolean:", "setRemoveFromConstruction", "V", 0x1, NULL, NULL },
    { "removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:", "removeFromConstructionList", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BUFFER_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonGuiViewDataStatGeo_DEFAULT_BUFFER },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "xMinData_", NULL, 0x2, "D", NULL, NULL,  },
    { "xMaxData_", NULL, 0x2, "D", NULL, NULL,  },
    { "yMinData_", NULL, 0x2, "D", NULL, NULL,  },
    { "yMaxData_", NULL, 0x2, "D", NULL, NULL,  },
    { "histogramRight_", NULL, 0x2, "Z", NULL, NULL,  },
    { "removeFromConstruction__", "removeFromConstruction", 0x2, "Z", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lorg.geogebra.common.gui.view.data.DataAnalysisModel$ICreateColor;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewDataStatGeo = { 2, "StatGeo", "org.geogebra.common.gui.view.data", NULL, 0x1, 35, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewDataStatGeo;
}

@end

void OrgGeogebraCommonGuiViewDataStatGeo_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor> listener) {
  NSObject_init(self);
  self->removeFromConstruction__ = YES;
  OrgGeogebraCommonGuiViewDataStatGeo_set_app_(self, app);
  OrgGeogebraCommonGuiViewDataStatGeo_set_kernel_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  OrgGeogebraCommonGuiViewDataStatGeo_set_cons_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
  OrgGeogebraCommonGuiViewDataStatGeo_set_listener_(self, listener);
}

OrgGeogebraCommonGuiViewDataStatGeo *new_OrgGeogebraCommonGuiViewDataStatGeo_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor_(OrgGeogebraCommonMainApp *app, id<OrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor> listener) {
  OrgGeogebraCommonGuiViewDataStatGeo *self = [OrgGeogebraCommonGuiViewDataStatGeo alloc];
  OrgGeogebraCommonGuiViewDataStatGeo_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor_(self, app, listener);
  return self;
}

void OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelGeosGeoList *dataList) {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, dataList, NO, NO);
}

void OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelGeosGeoList *dataList, jboolean isPointList) {
  OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, dataList, YES, NO);
}

void OrgGeogebraCommonGuiViewDataStatGeo_getDataBoundsWithOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelGeosGeoList *dataList, jboolean isPointList, jboolean isMatrix) {
  if (dataList == nil) {
    return;
  }
  jboolean currentRemoveFromConstructionStatus = self->removeFromConstruction__;
  self->removeFromConstruction__ = YES;
  IOSDoubleArray *dataBounds = [IOSDoubleArray arrayWithLength:4];
  if (isMatrix) {
    OrgGeogebraCommonKernelGeosGeoNumeric *index = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, 1) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoListElement *le = [new_OrgGeogebraCommonKernelAlgosAlgoListElement_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(self->cons_, dataList, index) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, le);
    OrgGeogebraCommonKernelGeosGeoList *list = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([le getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class]);
    OrgGeogebraCommonKernelAlgosAlgoListMax *maxAlgo = [new_OrgGeogebraCommonKernelAlgosAlgoListMax_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, list) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoListMin *minAlgo = [new_OrgGeogebraCommonKernelAlgosAlgoListMin_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, list) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, minAlgo);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, maxAlgo);
    OrgGeogebraCommonKernelGeosGeoNumeric *maxGeo = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([maxAlgo getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class]);
    OrgGeogebraCommonKernelGeosGeoNumeric *minGeo = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([minAlgo getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class]);
    *IOSDoubleArray_GetRef(dataBounds, 0) = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([minAlgo getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 1) = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([maxAlgo getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    jdouble min, max;
    for (jint i = 1; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size]; i++) {
      [index setValueWithDouble:i + 1];
      [index updateCascade];
      min = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(minGeo)) getDouble];
      max = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(maxGeo)) getDouble];
      *IOSDoubleArray_GetRef(dataBounds, 0) = JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(dataBounds, 0), min);
      *IOSDoubleArray_GetRef(dataBounds, 1) = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(dataBounds, 1), max);
    }
  }
  else if (isPointList) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *enX = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, dataList, OrgGeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
    OrgGeogebraCommonKernelArithmeticExpressionNode *enY = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, dataList, OrgGeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *listX = [new_OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, enX) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *listY = [new_OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, enY) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoListMax *maxX = [new_OrgGeogebraCommonKernelAlgosAlgoListMax_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([listX getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class])) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoListMax *maxY = [new_OrgGeogebraCommonKernelAlgosAlgoListMax_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([listY getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class])) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoListMin *minX = [new_OrgGeogebraCommonKernelAlgosAlgoListMin_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([listX getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class])) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoListMin *minY = [new_OrgGeogebraCommonKernelAlgosAlgoListMin_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([listY getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class])) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, listX);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, listY);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, maxX);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, maxY);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, minX);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, minY);
    *IOSDoubleArray_GetRef(dataBounds, 0) = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([minX getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 1) = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([maxX getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 2) = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([minY getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 3) = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([maxY getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoListMax *max = [new_OrgGeogebraCommonKernelAlgosAlgoListMax_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, dataList) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoListMin *min = [new_OrgGeogebraCommonKernelAlgosAlgoListMin_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, dataList) autorelease];
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, min);
    OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(self, max);
    *IOSDoubleArray_GetRef(dataBounds, 0) = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([min getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 1) = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([max getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  }
  self->xMinData_ = IOSDoubleArray_Get(dataBounds, 0);
  self->xMaxData_ = IOSDoubleArray_Get(dataBounds, 1);
  self->yMinData_ = IOSDoubleArray_Get(dataBounds, 2);
  self->yMaxData_ = IOSDoubleArray_Get(dataBounds, 3);
  self->removeFromConstruction__ = currentRemoveFromConstructionStatus;
}

OrgGeogebraCommonKernelAlgosAlgoPolyLine *OrgGeogebraCommonGuiViewDataStatGeo_createFrequencyPolygonWithOrgGeogebraCommonKernelStatisticsAlgoHistogram_withBoolean_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelStatisticsAlgoHistogram *histogram, jboolean doCumulative) {
  IOSDoubleArray *leftBorder = [((OrgGeogebraCommonKernelStatisticsAlgoHistogram *) nil_chk(histogram)) getLeftBorder];
  IOSDoubleArray *yValue = [histogram getYValue];
  jint size = doCumulative ? ((IOSDoubleArray *) nil_chk(yValue))->size_ : ((IOSDoubleArray *) nil_chk(yValue))->size_ + 1;
  IOSObjectArray *points = [IOSObjectArray arrayWithLength:size type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  jboolean suppressLabelCreation = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  if (doCumulative) {
    IOSObjectArray_SetAndConsume(points, 0, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, IOSDoubleArray_Get(nil_chk(leftBorder), 0), 0.0, 1.0));
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(yValue))->size_ - 1; i++) {
      IOSObjectArray_SetAndConsume(points, i + 1, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, IOSDoubleArray_Get(leftBorder, i + 1), IOSDoubleArray_Get(yValue, i), 1.0));
    }
  }
  else {
    jdouble midpoint = IOSDoubleArray_Get(nil_chk(leftBorder), 0) - 0.5 * (IOSDoubleArray_Get(leftBorder, 1) - IOSDoubleArray_Get(leftBorder, 0));
    IOSObjectArray_SetAndConsume(points, 0, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, 0.0, 1.0));
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(yValue))->size_ - 1; i++) {
      midpoint = 0.5 * (IOSDoubleArray_Get(leftBorder, i + 1) + IOSDoubleArray_Get(leftBorder, i));
      IOSObjectArray_SetAndConsume(points, i + 1, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, IOSDoubleArray_Get(yValue, i), 1.0));
    }
    midpoint = 1.5 * IOSDoubleArray_Get(leftBorder, yValue->size_ - 1) - .5 * (IOSDoubleArray_Get(leftBorder, yValue->size_ - 2));
    IOSObjectArray_SetAndConsume(points, yValue->size_, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, 0.0, 1.0));
  }
  [self->cons_ setSuppressLabelCreationWithBoolean:suppressLabelCreation];
  OrgGeogebraCommonKernelAlgosAlgoPolyLine *polyLine = [new_OrgGeogebraCommonKernelAlgosAlgoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(self->cons_, nil, points, NO) autorelease];
  return polyLine;
}

jdouble OrgGeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelGeosGeoList *list) {
  jdouble w = 1;
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) size] - 1; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:i])) isDefined] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:i + 1])) isDefined]) {
      w = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:i + 1], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble] - [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:i], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble]), w);
    }
  }
  return w / 2;
}

jdouble OrgGeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithDoubleArray_(IOSDoubleArray *array) {
  OrgGeogebraCommonGuiViewDataStatGeo_initialize();
  jdouble w = 1;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(array))->size_ - 1; i++) {
    w = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_absWithDouble_(IOSDoubleArray_Get(array, i + 1) - IOSDoubleArray_Get(array, i)), w);
  }
  return w / 2;
}

void OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonGuiViewDataStatPanelSettings *settings) {
  OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(self, settings, .2, .2);
}

void OrgGeogebraCommonGuiViewDataStatGeo_setXYBoundsWithOrgGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonGuiViewDataStatPanelSettings *settings, jdouble xBufferScale, jdouble yBufferScale) {
  if ([((OrgGeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    jdouble xBuffer = OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(self->xMaxData_, self->xMinData_) ? OrgGeogebraCommonGuiViewDataStatGeo_DEFAULT_BUFFER : xBufferScale * (self->xMaxData_ - self->xMinData_);
    settings->xMin_ = self->xMinData_ - xBuffer;
    settings->xMax_ = self->xMaxData_ + xBuffer;
    jdouble yBuffer = OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(self->yMaxData_, self->yMinData_) ? OrgGeogebraCommonGuiViewDataStatGeo_DEFAULT_BUFFER : yBufferScale * (self->yMaxData_ - self->yMinData_);
    settings->yMin_ = self->yMinData_ - yBuffer;
    settings->yMax_ = self->yMaxData_ + yBuffer;
  }
}

void OrgGeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement_(OrgGeogebraCommonGuiViewDataStatGeo *self, OrgGeogebraCommonKernelAlgosConstructionElement *ce) {
  if (self->removeFromConstruction__) [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:ce];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewDataStatGeo)
