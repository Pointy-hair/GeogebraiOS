//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/gui/view/data/StatPanelSettings.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/gui/view/data/DataSource.h"
#include "org/geogebra/common/gui/view/data/DataVariable.h"
#include "org/geogebra/common/gui/view/data/PlotSettings.h"
#include "org/geogebra/common/gui/view/data/StatPanelSettings.h"

@interface OrgGeogebraCommonGuiViewDataStatPanelSettings () {
 @public
  jint frequencyType_;
  jboolean isCumulative__;
  jboolean useManualClasses_;
  jboolean hasOverlayNormal_;
  jboolean hasOverlayPolygon_;
  jboolean showFrequencyTable_;
  jboolean showHistogram_;
  jboolean showScatterplotLine_;
  jboolean showOutliers_;
  jdouble classStart_;
  jdouble classWidth_;
  jint numClasses_;
  jboolean isLeftRule__;
  jdouble barWidth_;
  jboolean isAutomaticBarWidth__;
  jboolean isAutomaticWindow__;
  jint stemAdjust_;
}

@end

@implementation OrgGeogebraCommonGuiViewDataStatPanelSettings

- (instancetype)init {
  OrgGeogebraCommonGuiViewDataStatPanelSettings_init(self);
  return self;
}

- (OrgGeogebraCommonGuiViewDataDataSource *)getDataSource {
  return dataSource_;
}

- (void)setDataSourceWithOrgGeogebraCommonGuiViewDataDataSource:(OrgGeogebraCommonGuiViewDataDataSource *)dataSource {
  self->dataSource_ = dataSource;
}

- (OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType {
  return [((OrgGeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) getGroupType];
}

- (jboolean)isNumericData {
  return [((OrgGeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) isNumericData];
}

- (jboolean)isPointList {
  return [((OrgGeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) isPointData];
}

- (jboolean)isUseManualClasses {
  return useManualClasses_;
}

- (void)setUseManualClassesWithBoolean:(jboolean)useManualClasses {
  self->useManualClasses_ = useManualClasses;
}

- (jboolean)isCumulative {
  return isCumulative__;
}

- (void)setCumulativeWithBoolean:(jboolean)isCumulative {
  self->isCumulative__ = isCumulative;
}

- (jint)getFrequencyType {
  return frequencyType_;
}

- (void)setFrequencyTypeWithInt:(jint)frequencyType {
  self->frequencyType_ = frequencyType;
}

- (jboolean)isHasOverlayNormal {
  return hasOverlayNormal_;
}

- (void)setHasOverlayNormalWithBoolean:(jboolean)hasOverlayNormal {
  self->hasOverlayNormal_ = hasOverlayNormal;
}

- (jboolean)isHasOverlayPolygon {
  return hasOverlayPolygon_;
}

- (void)setHasOverlayPolygonWithBoolean:(jboolean)hasOverlayPolygon {
  self->hasOverlayPolygon_ = hasOverlayPolygon;
}

- (jboolean)isAutomaticWindow {
  return isAutomaticWindow__;
}

- (void)setAutomaticWindowWithBoolean:(jboolean)isAutomaticWindow {
  self->isAutomaticWindow__ = isAutomaticWindow;
}

- (jboolean)isShowFrequencyTable {
  return showFrequencyTable_;
}

- (void)setShowFrequencyTableWithBoolean:(jboolean)showFrequencyTable {
  self->showFrequencyTable_ = showFrequencyTable;
}

- (jboolean)isShowHistogram {
  return showHistogram_;
}

- (void)setShowHistogramWithBoolean:(jboolean)showHistogram {
  self->showHistogram_ = showHistogram;
}

- (jboolean)isLeftRule {
  return isLeftRule__;
}

- (void)setLeftRuleWithBoolean:(jboolean)isLeftRule {
  self->isLeftRule__ = isLeftRule;
}

- (jboolean)isShowScatterplotLine {
  return showScatterplotLine_;
}

- (void)setShowScatterplotLineWithBoolean:(jboolean)showScatterplotLine {
  self->showScatterplotLine_ = showScatterplotLine;
}

- (jboolean)isShowOutliers {
  return showOutliers_;
}

- (void)setShowOutliersWithBoolean:(jboolean)showOutliers {
  self->showOutliers_ = showOutliers;
}

- (jboolean)isAutomaticBarWidth {
  return isAutomaticBarWidth__;
}

- (void)setAutomaticBarWidthWithBoolean:(jboolean)isAutomaticBarWidth {
  self->isAutomaticBarWidth__ = isAutomaticBarWidth;
}

- (jdouble)getBarWidth {
  return barWidth_;
}

- (void)setBarWidthWithDouble:(jdouble)barWidth {
  self->barWidth_ = barWidth;
}

- (jint)getNumClasses {
  return numClasses_;
}

- (void)setNumClassesWithInt:(jint)numClasses {
  self->numClasses_ = numClasses;
}

- (jdouble)getClassStart {
  return classStart_;
}

- (void)setClassStartWithDouble:(jdouble)classStart {
  self->classStart_ = classStart;
}

- (jdouble)getClassWidth {
  return classWidth_;
}

- (void)setClassWidthWithDouble:(jdouble)classWidth {
  self->classWidth_ = classWidth;
}

- (jint)getStemAdjust {
  return stemAdjust_;
}

- (void)setStemAdjustWithInt:(jint)stemAdjust {
  self->stemAdjust_ = stemAdjust;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "StatPanelSettings", NULL, 0x1, NULL, NULL },
    { "getDataSource", NULL, "Lorg.geogebra.common.gui.view.data.DataSource;", 0x1, NULL, NULL },
    { "setDataSourceWithOrgGeogebraCommonGuiViewDataDataSource:", "setDataSource", "V", 0x1, NULL, NULL },
    { "groupType", NULL, "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", 0x1, NULL, NULL },
    { "isNumericData", NULL, "Z", 0x1, NULL, NULL },
    { "isPointList", NULL, "Z", 0x1, NULL, NULL },
    { "isUseManualClasses", NULL, "Z", 0x1, NULL, NULL },
    { "setUseManualClassesWithBoolean:", "setUseManualClasses", "V", 0x1, NULL, NULL },
    { "isCumulative", NULL, "Z", 0x1, NULL, NULL },
    { "setCumulativeWithBoolean:", "setCumulative", "V", 0x1, NULL, NULL },
    { "getFrequencyType", NULL, "I", 0x1, NULL, NULL },
    { "setFrequencyTypeWithInt:", "setFrequencyType", "V", 0x1, NULL, NULL },
    { "isHasOverlayNormal", NULL, "Z", 0x1, NULL, NULL },
    { "setHasOverlayNormalWithBoolean:", "setHasOverlayNormal", "V", 0x1, NULL, NULL },
    { "isHasOverlayPolygon", NULL, "Z", 0x1, NULL, NULL },
    { "setHasOverlayPolygonWithBoolean:", "setHasOverlayPolygon", "V", 0x1, NULL, NULL },
    { "isAutomaticWindow", NULL, "Z", 0x1, NULL, NULL },
    { "setAutomaticWindowWithBoolean:", "setAutomaticWindow", "V", 0x1, NULL, NULL },
    { "isShowFrequencyTable", NULL, "Z", 0x1, NULL, NULL },
    { "setShowFrequencyTableWithBoolean:", "setShowFrequencyTable", "V", 0x1, NULL, NULL },
    { "isShowHistogram", NULL, "Z", 0x1, NULL, NULL },
    { "setShowHistogramWithBoolean:", "setShowHistogram", "V", 0x1, NULL, NULL },
    { "isLeftRule", NULL, "Z", 0x1, NULL, NULL },
    { "setLeftRuleWithBoolean:", "setLeftRule", "V", 0x1, NULL, NULL },
    { "isShowScatterplotLine", NULL, "Z", 0x1, NULL, NULL },
    { "setShowScatterplotLineWithBoolean:", "setShowScatterplotLine", "V", 0x1, NULL, NULL },
    { "isShowOutliers", NULL, "Z", 0x1, NULL, NULL },
    { "setShowOutliersWithBoolean:", "setShowOutliers", "V", 0x1, NULL, NULL },
    { "isAutomaticBarWidth", NULL, "Z", 0x1, NULL, NULL },
    { "setAutomaticBarWidthWithBoolean:", "setAutomaticBarWidth", "V", 0x1, NULL, NULL },
    { "getBarWidth", NULL, "D", 0x1, NULL, NULL },
    { "setBarWidthWithDouble:", "setBarWidth", "V", 0x1, NULL, NULL },
    { "getNumClasses", NULL, "I", 0x1, NULL, NULL },
    { "setNumClassesWithInt:", "setNumClasses", "V", 0x1, NULL, NULL },
    { "getClassStart", NULL, "D", 0x1, NULL, NULL },
    { "setClassStartWithDouble:", "setClassStart", "V", 0x1, NULL, NULL },
    { "getClassWidth", NULL, "D", 0x1, NULL, NULL },
    { "setClassWidthWithDouble:", "setClassWidth", "V", 0x1, NULL, NULL },
    { "getStemAdjust", NULL, "I", 0x1, NULL, NULL },
    { "setStemAdjustWithInt:", "setStemAdjust", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dataSource_", NULL, 0x1, "Lorg.geogebra.common.gui.view.data.DataSource;", NULL, NULL,  },
    { "TYPE_COUNT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewDataStatPanelSettings_TYPE_COUNT },
    { "TYPE_RELATIVE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewDataStatPanelSettings_TYPE_RELATIVE },
    { "TYPE_NORMALIZED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGuiViewDataStatPanelSettings_TYPE_NORMALIZED },
    { "frequencyType_", NULL, 0x2, "I", NULL, NULL,  },
    { "isCumulative__", "isCumulative", 0x2, "Z", NULL, NULL,  },
    { "useManualClasses_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasOverlayNormal_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasOverlayPolygon_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showFrequencyTable_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showHistogram_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showScatterplotLine_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showOutliers_", NULL, 0x2, "Z", NULL, NULL,  },
    { "classStart_", NULL, 0x2, "D", NULL, NULL,  },
    { "classWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "numClasses_", NULL, 0x2, "I", NULL, NULL,  },
    { "isLeftRule__", "isLeftRule", 0x2, "Z", NULL, NULL,  },
    { "barWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "isAutomaticBarWidth__", "isAutomaticBarWidth", 0x2, "Z", NULL, NULL,  },
    { "isAutomaticWindow__", "isAutomaticWindow", 0x2, "Z", NULL, NULL,  },
    { "stemAdjust_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewDataStatPanelSettings = { 2, "StatPanelSettings", "org.geogebra.common.gui.view.data", NULL, 0x1, 40, methods, 21, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewDataStatPanelSettings;
}

@end

void OrgGeogebraCommonGuiViewDataStatPanelSettings_init(OrgGeogebraCommonGuiViewDataStatPanelSettings *self) {
  (void) OrgGeogebraCommonGuiViewDataPlotSettings_init(self);
  self->frequencyType_ = OrgGeogebraCommonGuiViewDataStatPanelSettings_TYPE_COUNT;
  self->isCumulative__ = NO;
  self->useManualClasses_ = NO;
  self->hasOverlayNormal_ = NO;
  self->hasOverlayPolygon_ = NO;
  self->showFrequencyTable_ = NO;
  self->showHistogram_ = YES;
  self->showScatterplotLine_ = NO;
  self->showOutliers_ = YES;
  self->classStart_ = 0;
  self->classWidth_ = 5;
  self->numClasses_ = 5;
  self->isLeftRule__ = YES;
  self->barWidth_ = 0.5;
  self->isAutomaticBarWidth__ = YES;
  self->isAutomaticWindow__ = YES;
  self->stemAdjust_ = 0;
}

OrgGeogebraCommonGuiViewDataStatPanelSettings *new_OrgGeogebraCommonGuiViewDataStatPanelSettings_init() {
  OrgGeogebraCommonGuiViewDataStatPanelSettings *self = [OrgGeogebraCommonGuiViewDataStatPanelSettings alloc];
  OrgGeogebraCommonGuiViewDataStatPanelSettings_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewDataStatPanelSettings)
