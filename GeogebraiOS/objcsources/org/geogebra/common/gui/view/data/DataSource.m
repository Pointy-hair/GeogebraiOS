//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/view/data/DataSource.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/gui/view/data/DataAnalysisModel.h"
#include "org/geogebra/common/gui/view/data/DataItem.h"
#include "org/geogebra/common/gui/view/data/DataSource.h"
#include "org/geogebra/common/gui/view/data/DataVariable.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRangeProcessor.h"
#include "org/geogebra/common/gui/view/spreadsheet/MyTable.h"
#include "org/geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "org/geogebra/common/gui/view/spreadsheet/SpreadsheetViewInterface.h"
#include "org/geogebra/common/kernel/View.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/plugin/GeoClass.h"

#define OrgGeogebraCommonGuiViewDataDataSource_serialVersionUID 1LL

@interface OrgGeogebraCommonGuiViewDataDataSource () {
 @public
  OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *defaultGroupType_;
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonMainSelectionManager *selection_;
  JavaUtilArrayList *dataList_;
  jint selectedIndex_;
}

- (id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>)spreadsheetTable;

- (OrgGeogebraCommonGuiViewDataDataItem *)createDataItemFromGeoSelection;

- (void)setDataListFromGeoListWithInt:(jint)mode;

- (void)setDataListFromSpreadsheetWithInt:(jint)mode
withOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType;

+ (void)add1DCellRangesWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                       withJavaUtilArrayList:(JavaUtilArrayList *)itemList;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataSource, defaultGroupType_, OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataSource, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataSource, selection_, OrgGeogebraCommonMainSelectionManager *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataSource, dataList_, JavaUtilArrayList *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGuiViewDataDataSource, serialVersionUID, jlong)

__attribute__((unused)) static id<OrgGeogebraCommonGuiViewSpreadsheetMyTable> OrgGeogebraCommonGuiViewDataDataSource_spreadsheetTable(OrgGeogebraCommonGuiViewDataDataSource *self);

__attribute__((unused)) static OrgGeogebraCommonGuiViewDataDataItem *OrgGeogebraCommonGuiViewDataDataSource_createDataItemFromGeoSelection(OrgGeogebraCommonGuiViewDataDataSource *self);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataDataSource_setDataListFromGeoListWithInt_(OrgGeogebraCommonGuiViewDataDataSource *self, jint mode);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataDataSource_setDataListFromSpreadsheetWithInt_withOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_(OrgGeogebraCommonGuiViewDataDataSource *self, jint mode, OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *groupType);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataDataSource_add1DCellRangesWithJavaUtilArrayList_withJavaUtilArrayList_(JavaUtilArrayList *rangeList, JavaUtilArrayList *itemList);

@implementation OrgGeogebraCommonGuiViewDataDataSource

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonGuiViewDataDataSource_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(dataList_)) size] == 0;
}

- (void)clearData {
  [((JavaUtilArrayList *) nil_chk(dataList_)) clear];
}

- (jint)getSelectedIndex {
  return selectedIndex_;
}

- (void)setSelectedIndexWithInt:(jint)selectedIndex {
  self->selectedIndex_ = selectedIndex;
}

- (jboolean)enableHeader {
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) enableHeader];
}

- (void)setEnableHeaderWithBoolean:(jboolean)enableHeader {
  [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setEnableHeaderWithBoolean:enableHeader];
}

- (jboolean)isNumericData {
  if ([self getSelectedDataVariable] == nil) {
    return NO;
  }
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getGeoClass] == OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC();
}

- (void)setNumericDataWithBoolean:(jboolean)isNumericData {
  [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClass {
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getGeoClass];
}

- (void)setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)geoClass {
  [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:geoClass];
}

- (jboolean)isPointData {
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getGeoClass] == OrgGeogebraCommonPluginGeoClassEnum_get_POINT();
}

- (OrgGeogebraCommonGuiViewDataDataVariable *)getDataVariableWithInt:(jint)index {
  return [((JavaUtilArrayList *) nil_chk(dataList_)) getWithInt:index];
}

- (OrgGeogebraCommonGuiViewDataDataVariable *)getSelectedDataVariable {
  if (selectedIndex_ >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return nil;
  }
  return [dataList_ getWithInt:selectedIndex_];
}

- (OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)getGroupType {
  if ([self isEmpty]) {
    return OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA();
  }
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getGroupType];
}

- (OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)getGroupTypeWithInt:(jint)varIndex {
  if (varIndex >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA();
  }
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:varIndex])) getGroupType];
}

- (void)setGroupTypeWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType
                                                                       withInt:(jint)varIndex {
  [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([((JavaUtilArrayList *) nil_chk(dataList_)) getWithInt:varIndex])) setGroupTypeWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:groupType];
}

- (jdouble)getClassStart {
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getClassStart];
}

- (void)setClassStartWithDouble:(jdouble)classStart {
  [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setClassStartWithDouble:classStart];
}

- (jdouble)getClassWidth {
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getClassWidth];
}

- (void)setClassWidthWithDouble:(jdouble)classWidth {
  [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setClassWidthWithDouble:classWidth];
}

- (OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *)crProcessorWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  return [((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(OrgGeogebraCommonGuiViewDataDataSource_spreadsheetTable(self))) getCellRangeProcessor];
}

- (id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>)spreadsheetTable {
  return OrgGeogebraCommonGuiViewDataDataSource_spreadsheetTable(self);
}

- (void)setDataItemToGeoSelectionWithInt:(jint)dataIndex
                                 withInt:(jint)itemIndex {
  if ([((JavaUtilArrayList *) nil_chk(dataList_)) getWithInt:dataIndex] == nil) {
    return;
  }
  [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:dataIndex])) setDataItemWithInt:itemIndex withOrgGeogebraCommonGuiViewDataDataItem:OrgGeogebraCommonGuiViewDataDataSource_createDataItemFromGeoSelection(self)];
}

- (OrgGeogebraCommonGuiViewDataDataItem *)createDataItemFromGeoSelection {
  return OrgGeogebraCommonGuiViewDataDataSource_createDataItemFromGeoSelection(self);
}

- (IOSObjectArray *)getTableData {
  return [self getTableDataWithInt:[self getSelectedIndex]];
}

- (IOSObjectArray *)getTableDataWithInt:(jint)dataIndex {
  if (dataIndex >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return nil;
  }
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  [list addAllWithJavaUtilCollection:[((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:dataIndex])) getStringData]];
  jint rowCount = 0;
  for (IOSObjectArray * __strong s in list) {
    rowCount = JavaLangMath_maxWithInt_withInt_(rowCount, ((IOSObjectArray *) nil_chk(s))->size_);
  }
  IOSObjectArray *data = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, [list size] } type:NSString_class_()];
  for (jint c = 0; c < [list size]; c++) {
    for (jint r = 0; r < ((IOSObjectArray *) nil_chk([list getWithInt:c]))->size_; r++) {
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(data, r)), c, IOSObjectArray_Get(nil_chk([list getWithInt:c]), r));
    }
  }
  return data;
}

- (IOSObjectArray *)getTitles {
  return [self getTitlesWithInt:[self getSelectedIndex]];
}

- (IOSObjectArray *)getTitlesWithInt:(jint)dataIndex {
  if (dataIndex >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return nil;
  }
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  [list addAllWithJavaUtilCollection:[((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:dataIndex])) getTitlesWithOrgGeogebraCommonMainApp:app_]];
  IOSObjectArray *s = [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:NSString_class_()]];
  return s;
}

- (IOSObjectArray *)getDescriptions {
  JavaUtilArrayList *list = [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getColumnNames];
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(list)) size] type:NSString_class_()]];
}

- (IOSObjectArray *)getDescriptionsWithInt:(jint)dataIndex {
  if (dataIndex >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return nil;
  }
  JavaUtilArrayList *list = [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:dataIndex])) getColumnNames];
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(list)) size] type:NSString_class_()]];
}

- (JavaUtilArrayList *)toGeoListWithInt:(jint)mode
                            withBoolean:(jboolean)leftToRight
                            withBoolean:(jboolean)doCopy {
  return [self toGeoListWithInt:mode withBoolean:leftToRight withBoolean:doCopy withInt:[self getSelectedIndex]];
}

- (JavaUtilArrayList *)toGeoListWithInt:(jint)mode
                            withBoolean:(jboolean)leftToRight
                            withBoolean:(jboolean)doCopy
                                withInt:(jint)dataIndex {
  if (dataList_ == nil || [dataList_ size] == 0) {
    return nil;
  }
  return [((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk([((JavaUtilArrayList *) nil_chk(dataList_)) getWithInt:dataIndex])) getGeoListDataWithOrgGeogebraCommonMainApp:app_ withInt:mode withBoolean:leftToRight withBoolean:doCopy];
}

- (JavaUtilArrayList *)toGeoListAllWithInt:(jint)mode
                               withBoolean:(jboolean)leftToRight
                               withBoolean:(jboolean)doCopy {
  if (dataList_ == nil || [dataList_ size] == 0) {
    return nil;
  }
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (OrgGeogebraCommonGuiViewDataDataVariable * __strong var in nil_chk(dataList_)) {
    [list addAllWithJavaUtilCollection:[((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk(var)) getGeoListDataWithOrgGeogebraCommonMainApp:app_ withInt:mode withBoolean:leftToRight withBoolean:doCopy]];
  }
  return list;
}

- (void)setDataListFromSelectionWithInt:(jint)mode {
  [((JavaUtilArrayList *) nil_chk(dataList_)) clear];
  if ([((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedGeos] == nil || [((JavaUtilArrayList *) nil_chk([selection_ getSelectedGeos])) size] == 0) {
    return;
  }
  @try {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk([selection_ getSelectedGeos])) getWithInt:0])) getSpreadsheetCoords] != nil) {
      OrgGeogebraCommonGuiViewDataDataSource_setDataListFromSpreadsheetWithInt_withOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_(self, mode, defaultGroupType_);
    }
    else {
      OrgGeogebraCommonGuiViewDataDataSource_setDataListFromGeoListWithInt_(self, mode);
    }
    return;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  return;
}

- (void)setDataListFromGeoListWithInt:(jint)mode {
  OrgGeogebraCommonGuiViewDataDataSource_setDataListFromGeoListWithInt_(self, mode);
}

- (void)setDataListFromSpreadsheetWithInt:(jint)mode
withOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType {
  OrgGeogebraCommonGuiViewDataDataSource_setDataListFromSpreadsheetWithInt_withOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_(self, mode, groupType);
}

+ (void)add1DCellRangesWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                       withJavaUtilArrayList:(JavaUtilArrayList *)itemList {
  OrgGeogebraCommonGuiViewDataDataSource_add1DCellRangesWithJavaUtilArrayList_withJavaUtilArrayList_(rangeList, itemList);
}

- (jboolean)isInDataSourceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  for (OrgGeogebraCommonGuiViewDataDataVariable * __strong var in nil_chk(dataList_)) {
    if ([((OrgGeogebraCommonGuiViewDataDataVariable *) nil_chk(var)) isInDataSourceWithOrgGeogebraCommonKernelGeosGeoElement:geo]) {
      return YES;
    }
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(defaultGroupType_);
  RELEASE_(app_);
  RELEASE_(selection_);
  RELEASE_(dataList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "DataSource", NULL, 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "clearData", NULL, "V", 0x1, NULL, NULL },
    { "getSelectedIndex", NULL, "I", 0x1, NULL, NULL },
    { "setSelectedIndexWithInt:", "setSelectedIndex", "V", 0x1, NULL, NULL },
    { "enableHeader", NULL, "Z", 0x1, NULL, NULL },
    { "setEnableHeaderWithBoolean:", "setEnableHeader", "V", 0x1, NULL, NULL },
    { "isNumericData", NULL, "Z", 0x1, NULL, NULL },
    { "setNumericDataWithBoolean:", "setNumericData", "V", 0x1, NULL, NULL },
    { "getGeoClass", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:", "setGeoClass", "V", 0x1, NULL, NULL },
    { "isPointData", NULL, "Z", 0x1, NULL, NULL },
    { "getDataVariableWithInt:", "getDataVariable", "Lorg.geogebra.common.gui.view.data.DataVariable;", 0x1, NULL, NULL },
    { "getSelectedDataVariable", NULL, "Lorg.geogebra.common.gui.view.data.DataVariable;", 0x1, NULL, NULL },
    { "getGroupType", NULL, "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", 0x1, NULL, NULL },
    { "getGroupTypeWithInt:", "getGroupType", "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", 0x1, NULL, NULL },
    { "setGroupTypeWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:withInt:", "setGroupType", "V", 0x1, NULL, NULL },
    { "getClassStart", NULL, "D", 0x1, NULL, NULL },
    { "setClassStartWithDouble:", "setClassStart", "V", 0x1, NULL, NULL },
    { "getClassWidth", NULL, "D", 0x1, NULL, NULL },
    { "setClassWidthWithDouble:", "setClassWidth", "V", 0x1, NULL, NULL },
    { "crProcessorWithOrgGeogebraCommonMainApp:", "crProcessor", "Lorg.geogebra.common.gui.view.spreadsheet.CellRangeProcessor;", 0x4, NULL, NULL },
    { "spreadsheetTable", NULL, "Lorg.geogebra.common.gui.view.spreadsheet.MyTable;", 0x2, NULL, NULL },
    { "setDataItemToGeoSelectionWithInt:withInt:", "setDataItemToGeoSelection", "V", 0x1, NULL, NULL },
    { "createDataItemFromGeoSelection", NULL, "Lorg.geogebra.common.gui.view.data.DataItem;", 0x2, NULL, NULL },
    { "getTableData", NULL, "[[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTableDataWithInt:", "getTableData", "[[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTitles", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTitlesWithInt:", "getTitles", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDescriptions", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDescriptionsWithInt:", "getDescriptions", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "toGeoListWithInt:withBoolean:withBoolean:", "toGeoList", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toGeoListWithInt:withBoolean:withBoolean:withInt:", "toGeoList", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toGeoListAllWithInt:withBoolean:withBoolean:", "toGeoListAll", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setDataListFromSelectionWithInt:", "setDataListFromSelection", "V", 0x1, NULL, NULL },
    { "setDataListFromGeoListWithInt:", "setDataListFromGeoList", "V", 0x2, NULL, NULL },
    { "setDataListFromSpreadsheetWithInt:withOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:", "setDataListFromSpreadsheet", "V", 0x2, NULL, NULL },
    { "add1DCellRangesWithJavaUtilArrayList:withJavaUtilArrayList:", "add1DCellRanges", "V", 0xa, NULL, NULL },
    { "isInDataSourceWithOrgGeogebraCommonKernelGeosGeoElement:", "isInDataSource", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonGuiViewDataDataSource_serialVersionUID },
    { "defaultGroupType_", NULL, 0x2, "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", NULL, NULL,  },
    { "app_", NULL, 0x12, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "selection_", NULL, 0x12, "Lorg.geogebra.common.main.SelectionManager;", NULL, NULL,  },
    { "dataList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/gui/view/data/DataVariable;>;",  },
    { "selectedIndex_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewDataDataSource = { 2, "DataSource", "org.geogebra.common.gui.view.data", NULL, 0x1, 39, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewDataDataSource;
}

@end

void OrgGeogebraCommonGuiViewDataDataSource_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonGuiViewDataDataSource *self, OrgGeogebraCommonMainApp *app) {
  NSObject_init(self);
  OrgGeogebraCommonGuiViewDataDataSource_set_defaultGroupType_(self, OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA());
  OrgGeogebraCommonGuiViewDataDataSource_set_app_(self, app);
  OrgGeogebraCommonGuiViewDataDataSource_set_selection_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getSelectionManager]);
  OrgGeogebraCommonGuiViewDataDataSource_setAndConsume_dataList_(self, new_JavaUtilArrayList_init());
  self->selectedIndex_ = 0;
}

OrgGeogebraCommonGuiViewDataDataSource *new_OrgGeogebraCommonGuiViewDataDataSource_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonGuiViewDataDataSource *self = [OrgGeogebraCommonGuiViewDataDataSource alloc];
  OrgGeogebraCommonGuiViewDataDataSource_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

id<OrgGeogebraCommonGuiViewSpreadsheetMyTable> OrgGeogebraCommonGuiViewDataDataSource_spreadsheetTable(OrgGeogebraCommonGuiViewDataDataSource *self) {
  id<OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface> spvi = (id<OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) check_protocol_cast([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk(([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getGuiManager]))) getSpreadsheetView], @protocol(OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface));
  return (id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) check_protocol_cast([((id<OrgGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) nil_chk(spvi)) getSpreadsheetTable], @protocol(OrgGeogebraCommonGuiViewSpreadsheetMyTable));
}

OrgGeogebraCommonGuiViewDataDataItem *OrgGeogebraCommonGuiViewDataDataSource_createDataItemFromGeoSelection(OrgGeogebraCommonGuiViewDataDataSource *self) {
  if ([((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) getSelectedGeos] == nil || [((JavaUtilArrayList *) nil_chk([self->selection_ getSelectedGeos])) size] == 0) {
    return nil;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [((JavaUtilArrayList *) nil_chk([self->selection_ getSelectedGeos])) getWithInt:0];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
    return [new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonKernelGeosGeoList_((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) autorelease];
  }
  else if ([geo getSpreadsheetCoords] != nil) {
    return [new_OrgGeogebraCommonGuiViewDataDataItem_initWithJavaUtilArrayList_(OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_cloneWithJavaUtilArrayList_([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(OrgGeogebraCommonGuiViewDataDataSource_spreadsheetTable(self))) getSelectedCellRanges])) autorelease];
  }
  return nil;
}

void OrgGeogebraCommonGuiViewDataDataSource_setDataListFromGeoListWithInt_(OrgGeogebraCommonGuiViewDataDataSource *self, jint mode) {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) getSelectedGeos])) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList] && ![((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) isMatrix]) {
      [list addWithId:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])];
    }
  }
  if ([list size] == 0) {
    return;
  }
  JavaUtilArrayList *itemList = [new_JavaUtilArrayList_init() autorelease];
  OrgGeogebraCommonGuiViewDataDataVariable *var = [new_OrgGeogebraCommonGuiViewDataDataVariable_initWithOrgGeogebraCommonMainApp_(self->app_) autorelease];
  switch (mode) {
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_ONEVAR:
    [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonKernelGeosGeoList_([list getWithInt:0]) autorelease]];
    [var setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_REGRESSION:
    if ([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk([list getWithInt:0])) getElementType] == OrgGeogebraCommonPluginGeoClassEnum_get_POINT()) {
      [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonKernelGeosGeoList_([list getWithInt:0]) autorelease]];
      [var setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_POINT() withJavaUtilArrayList:itemList];
    }
    else {
      [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonKernelGeosGeoList_([list getWithInt:0]) autorelease]];
      if ([list size] == 1) {
        [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_init() autorelease]];
      }
      [var setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
    }
    break;
    case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_MULTIVAR:
    for (OrgGeogebraCommonKernelGeosGeoList * __strong geo in list) {
      [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonKernelGeosGeoList_(geo) autorelease]];
    }
    [var setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
    break;
  }
  [((JavaUtilArrayList *) nil_chk(self->dataList_)) addWithId:var];
}

void OrgGeogebraCommonGuiViewDataDataSource_setDataListFromSpreadsheetWithInt_withOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_(OrgGeogebraCommonGuiViewDataDataSource *self, jint mode, OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *groupType) {
  JavaUtilArrayList *rangeList = OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_cloneWithJavaUtilArrayList_([((id<OrgGeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(OrgGeogebraCommonGuiViewDataDataSource_spreadsheetTable(self))) getSelectedCellRanges]);
  OrgGeogebraCommonGuiViewDataDataVariable *var = [new_OrgGeogebraCommonGuiViewDataDataVariable_initWithOrgGeogebraCommonMainApp_(self->app_) autorelease];
  JavaUtilArrayList *itemList = [new_JavaUtilArrayList_init() autorelease];
  {
    jboolean hasPoint;
    JavaUtilArrayList *r;
    switch (mode) {
      case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_ONEVAR:
      [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithJavaUtilArrayList_(rangeList) autorelease]];
      [var setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
      break;
      case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_REGRESSION:
      hasPoint = [((OrgGeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk([self crProcessorWithOrgGeogebraCommonMainApp:self->app_])) containsGeoClassWithJavaUtilArrayList:rangeList withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_POINT()];
      if (hasPoint) {
        [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithJavaUtilArrayList_(rangeList) autorelease]];
        [var setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_POINT() withJavaUtilArrayList:itemList];
      }
      else {
        OrgGeogebraCommonGuiViewDataDataSource_add1DCellRangesWithJavaUtilArrayList_withJavaUtilArrayList_(rangeList, itemList);
        if ([itemList size] < 2) {
          [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_init() autorelease]];
        }
        [var setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
      }
      break;
      case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_MULTIVAR:
      for (OrgGeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
        if ([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) isRow] || [cr isPartialRow]) {
          r = [cr toPartialRowList];
          for (OrgGeogebraCommonGuiViewSpreadsheetCellRange * __strong cr2 in nil_chk(r)) {
            [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonGuiViewSpreadsheetCellRange_(cr2) autorelease]];
          }
        }
        else {
          r = [cr toPartialColumnList];
          for (OrgGeogebraCommonGuiViewSpreadsheetCellRange * __strong cr2 in nil_chk(r)) {
            [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonGuiViewSpreadsheetCellRange_(cr2) autorelease]];
          }
        }
      }
      [var setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
      break;
    }
  }
  [((JavaUtilArrayList *) nil_chk(self->dataList_)) addWithId:var];
}

void OrgGeogebraCommonGuiViewDataDataSource_add1DCellRangesWithJavaUtilArrayList_withJavaUtilArrayList_(JavaUtilArrayList *rangeList, JavaUtilArrayList *itemList) {
  OrgGeogebraCommonGuiViewDataDataSource_initialize();
  JavaUtilArrayList *r = nil;
  jboolean scanByColumn = IOSIntArray_Get(nil_chk([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk(rangeList)) getWithInt:0])) getActualDimensions]), 1) <= 2;
  if ([rangeList size] == 1) {
    if (scanByColumn) {
      r = [((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) toPartialColumnList];
    }
    else {
      r = [((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) toPartialRowList];
    }
    if (r != nil) {
      if ([r size] > 0) [((JavaUtilArrayList *) nil_chk(itemList)) addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonGuiViewSpreadsheetCellRange_([r getWithInt:0]) autorelease]];
      if ([r size] > 1) [((JavaUtilArrayList *) nil_chk(itemList)) addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonGuiViewSpreadsheetCellRange_([r getWithInt:1]) autorelease]];
    }
  }
  else if ([rangeList size] == 2) {
    if (scanByColumn) {
      [((JavaUtilArrayList *) nil_chk(itemList)) addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonGuiViewSpreadsheetCellRange_([((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) toPartialColumnList])) getWithInt:0]) autorelease]];
      [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonGuiViewSpreadsheetCellRange_([((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) toPartialColumnList])) getWithInt:0]) autorelease]];
    }
    else {
      [((JavaUtilArrayList *) nil_chk(itemList)) addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonGuiViewSpreadsheetCellRange_([((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) toPartialRowList])) getWithInt:0]) autorelease]];
      [itemList addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_initWithOrgGeogebraCommonGuiViewSpreadsheetCellRange_([((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) toPartialRowList])) getWithInt:0]) autorelease]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewDataDataSource)
