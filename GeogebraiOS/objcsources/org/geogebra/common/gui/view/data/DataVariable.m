//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/gui/view/data/DataVariable.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/gui/view/data/DataAnalysisModel.h"
#include "org/geogebra/common/gui/view/data/DataItem.h"
#include "org/geogebra/common/gui/view/data/DataVariable.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentList.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonGuiViewDataDataVariable () {
 @public
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *groupType_;
  OrgGeogebraCommonPluginGeoClassEnum *geoClass_;
  OrgGeogebraCommonGuiViewDataDataItem *frequency_, *label_, *classes_;
  JavaUtilArrayList *values_;
  jboolean enableHeader__;
  jdouble classStart_;
  jdouble classWidth_;
}

- (void)updateAutomaticClasses;

- (OrgGeogebraCommonKernelGeosGeoList *)getPointListWithBoolean:(jboolean)leftToRight
                                                    withBoolean:(jboolean)doCopy;

- (OrgGeogebraCommonKernelGeosGeoList *)createPointGeoListWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)xList
                                                          withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)yList
                                                                                     withBoolean:(jboolean)byValue
                                                                                     withBoolean:(jboolean)leftToRight;

- (void)getXML;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataVariable, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataVariable, groupType_, OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataVariable, geoClass_, OrgGeogebraCommonPluginGeoClassEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataVariable, frequency_, OrgGeogebraCommonGuiViewDataDataItem *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataVariable, label_, OrgGeogebraCommonGuiViewDataDataItem *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataVariable, classes_, OrgGeogebraCommonGuiViewDataDataItem *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewDataDataVariable, values_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataDataVariable_updateAutomaticClasses(OrgGeogebraCommonGuiViewDataDataVariable *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonGuiViewDataDataVariable_getPointListWithBoolean_withBoolean_(OrgGeogebraCommonGuiViewDataDataVariable *self, jboolean leftToRight, jboolean doCopy);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonGuiViewDataDataVariable_createPointGeoListWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(OrgGeogebraCommonGuiViewDataDataVariable *self, OrgGeogebraCommonKernelGeosGeoList *xList, OrgGeogebraCommonKernelGeosGeoList *yList, jboolean byValue, jboolean leftToRight);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *new_OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation OrgGeogebraCommonGuiViewDataDataVariable

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonGuiViewDataDataVariable_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)geoClass
                                                  withJavaUtilArrayList:(JavaUtilArrayList *)valueItemList {
  [self setDataVariableWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA() withOrgGeogebraCommonPluginGeoClassEnum:geoClass withJavaUtilArrayList:valueItemList withOrgGeogebraCommonGuiViewDataDataItem:nil withOrgGeogebraCommonGuiViewDataDataItem:nil withOrgGeogebraCommonGuiViewDataDataItem:nil];
}

- (void)setDataVariableWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType
                                          withOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)geoClass
                                                            withJavaUtilArrayList:(JavaUtilArrayList *)valueItemList
                                         withOrgGeogebraCommonGuiViewDataDataItem:(OrgGeogebraCommonGuiViewDataDataItem *)frequency
                                         withOrgGeogebraCommonGuiViewDataDataItem:(OrgGeogebraCommonGuiViewDataDataItem *)classes
                                         withOrgGeogebraCommonGuiViewDataDataItem:(OrgGeogebraCommonGuiViewDataDataItem *)label {
  OrgGeogebraCommonGuiViewDataDataVariable_set_values_(self, valueItemList);
  OrgGeogebraCommonGuiViewDataDataVariable_set_frequency_(self, frequency);
  OrgGeogebraCommonGuiViewDataDataVariable_set_classes_(self, classes);
  OrgGeogebraCommonGuiViewDataDataVariable_set_label_(self, label);
  OrgGeogebraCommonGuiViewDataDataVariable_set_geoClass_(self, geoClass);
  [self setGroupTypeWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:groupType];
  if (values_ != nil) {
    for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in values_) {
      [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:geoClass];
    }
  }
}

- (void)setGroupTypeWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType {
  OrgGeogebraCommonGuiViewDataDataVariable_set_groupType_(self, groupType);
  switch ([groupType ordinal]) {
    case OrgGeogebraCommonGuiViewDataDataVariable_GroupType_RAWDATA:
    OrgGeogebraCommonGuiViewDataDataVariable_set_frequency_(self, nil);
    OrgGeogebraCommonGuiViewDataDataVariable_set_classes_(self, nil);
    if ([((JavaUtilArrayList *) nil_chk(values_)) size] == 0) {
      [values_ addWithId:[new_OrgGeogebraCommonGuiViewDataDataItem_init() autorelease]];
    }
    break;
    case OrgGeogebraCommonGuiViewDataDataVariable_GroupType_FREQUENCY:
    if (frequency_ == nil) {
      OrgGeogebraCommonGuiViewDataDataVariable_setAndConsume_frequency_(self, new_OrgGeogebraCommonGuiViewDataDataItem_init());
      [frequency_ setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
      [frequency_ setDescriptionWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"Frequency"]];
    }
    OrgGeogebraCommonGuiViewDataDataVariable_set_classes_(self, nil);
    break;
    case OrgGeogebraCommonGuiViewDataDataVariable_GroupType_CLASS:
    if (frequency_ == nil) {
      OrgGeogebraCommonGuiViewDataDataVariable_setAndConsume_frequency_(self, new_OrgGeogebraCommonGuiViewDataDataItem_init());
      [frequency_ setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
      [frequency_ setDescriptionWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"Frequency"]];
    }
    if (classes_ == nil) {
      OrgGeogebraCommonGuiViewDataDataVariable_setAndConsume_classes_(self, new_OrgGeogebraCommonGuiViewDataDataItem_initWithJavaLangDoubleArray_([IOSObjectArray arrayWithLength:0 type:JavaLangDouble_class_()]));
      [classes_ setDescriptionWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"Classes"]];
    }
    for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk(values_)) {
      [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) clearItem];
    }
    [values_ clear];
    break;
  }
}

- (OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)getGroupType {
  return groupType_;
}

- (void)setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)geoClass {
  OrgGeogebraCommonGuiViewDataDataVariable_set_geoClass_(self, geoClass);
  for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk(values_)) {
    [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:geoClass];
  }
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClass {
  return geoClass_;
}

- (jdouble)getClassStart {
  return classStart_;
}

- (void)setClassStartWithDouble:(jdouble)classStart {
  self->classStart_ = classStart;
  if (groupType_ == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
    OrgGeogebraCommonGuiViewDataDataVariable_updateAutomaticClasses(self);
  }
}

- (jdouble)getClassWidth {
  return classWidth_;
}

- (void)setClassWidthWithDouble:(jdouble)classWidth {
  self->classWidth_ = classWidth;
  if (groupType_ == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
    OrgGeogebraCommonGuiViewDataDataVariable_updateAutomaticClasses(self);
  }
}

- (void)updateAutomaticClasses {
  OrgGeogebraCommonGuiViewDataDataVariable_updateAutomaticClasses(self);
}

- (OrgGeogebraCommonGuiViewDataDataItem *)getFrequency {
  return frequency_;
}

- (void)setFrequencyWithOrgGeogebraCommonGuiViewDataDataItem:(OrgGeogebraCommonGuiViewDataDataItem *)frequency {
  OrgGeogebraCommonGuiViewDataDataVariable_set_frequency_(self, frequency);
  if (frequency != nil) {
    [frequency setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
    [frequency setDescriptionWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"Frequency"]];
  }
}

- (OrgGeogebraCommonGuiViewDataDataItem *)getClasses {
  return classes_;
}

- (jboolean)enableHeader {
  return enableHeader__;
}

- (void)setEnableHeaderWithBoolean:(jboolean)enableHeader {
  self->enableHeader__ = enableHeader;
}

- (JavaUtilArrayList *)getValues {
  return values_;
}

- (void)setValueItemListWithJavaUtilArrayList:(JavaUtilArrayList *)values {
  OrgGeogebraCommonGuiViewDataDataVariable_set_values_(self, values);
  for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk(values)) {
    [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) setDescriptionWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"Data"]];
  }
}

- (void)setValueItemsWithOrgGeogebraCommonGuiViewDataDataItemArray:(IOSObjectArray *)valueItem {
  OrgGeogebraCommonGuiViewDataDataVariable_setAndConsume_values_(self, new_JavaUtilArrayList_init());
  {
    IOSObjectArray *a__ = valueItem;
    OrgGeogebraCommonGuiViewDataDataItem * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonGuiViewDataDataItem * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonGuiViewDataDataItem *item = *b__++;
      [values_ addWithId:item];
      [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) setDescriptionWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"Data"]];
    }
  }
}

- (void)setDataItemWithInt:(jint)itemIndex
withOrgGeogebraCommonGuiViewDataDataItem:(OrgGeogebraCommonGuiViewDataDataItem *)item {
  if (itemIndex < [((JavaUtilArrayList *) nil_chk(values_)) size]) {
    [values_ setWithInt:itemIndex withId:item];
  }
  else {
    OrgGeogebraCommonGuiViewDataDataVariable_set_frequency_(self, item);
  }
}

- (void)removeLastValue {
  if (values_ == nil || [values_ size] == 0) {
    return;
  }
  [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk([values_ getWithInt:[((JavaUtilArrayList *) nil_chk(values_)) size] - 1])) clearItem];
  [values_ removeWithInt:[values_ size] - 1];
}

- (void)addNewValue {
  if (values_ == nil) {
    OrgGeogebraCommonGuiViewDataDataVariable_setAndConsume_values_(self, new_JavaUtilArrayList_init());
  }
  OrgGeogebraCommonGuiViewDataDataItem *item = [new_OrgGeogebraCommonGuiViewDataDataItem_init() autorelease];
  [item setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:geoClass_];
  [((JavaUtilArrayList *) nil_chk(values_)) addWithId:item];
}

- (JavaUtilArrayList *)getItemList {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  if (label_ != nil) {
    [list addWithId:label_];
  }
  [list addAllWithJavaUtilCollection:values_];
  if (classes_ != nil) {
    [list addWithId:classes_];
  }
  if (frequency_ != nil) {
    [list addWithId:frequency_];
  }
  return list;
}

- (OrgGeogebraCommonKernelGeosGeoList *)toGeoListWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                     withOrgGeogebraCommonGuiViewDataDataItem:(OrgGeogebraCommonGuiViewDataDataItem *)item
                                                                      withInt:(jint)mode
                                                                  withBoolean:(jboolean)leftToRight
                                                                  withBoolean:(jboolean)doCopy {
  return [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) toGeoListWithOrgGeogebraCommonMainApp:app withBoolean:enableHeader__ withBoolean:leftToRight withBoolean:doCopy];
}

- (JavaUtilArrayList *)getGeoListDataWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                                          withInt:(jint)mode
                                                      withBoolean:(jboolean)leftToRight
                                                      withBoolean:(jboolean)doCopy {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  if (label_ != nil) {
    [list addWithId:[label_ toGeoListWithOrgGeogebraCommonMainApp:app withBoolean:enableHeader__ withBoolean:leftToRight withBoolean:doCopy]];
  }
  if (mode == OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_REGRESSION && geoClass_ == OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()) {
    [list addWithId:OrgGeogebraCommonGuiViewDataDataVariable_getPointListWithBoolean_withBoolean_(self, leftToRight, doCopy)];
  }
  else {
    for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk(values_)) {
      [list addWithId:[((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) toGeoListWithOrgGeogebraCommonMainApp:app withBoolean:enableHeader__ withBoolean:leftToRight withBoolean:doCopy]];
    }
  }
  if (classes_ != nil) {
    [list addWithId:[classes_ toGeoListWithOrgGeogebraCommonMainApp:app withBoolean:enableHeader__ withBoolean:leftToRight withBoolean:doCopy]];
  }
  if (frequency_ != nil) {
    [list addWithId:[frequency_ toGeoListWithOrgGeogebraCommonMainApp:app withBoolean:enableHeader__ withBoolean:leftToRight withBoolean:doCopy]];
  }
  return list;
}

- (OrgGeogebraCommonKernelGeosGeoList *)getPointListWithBoolean:(jboolean)leftToRight
                                                    withBoolean:(jboolean)doCopy {
  return OrgGeogebraCommonGuiViewDataDataVariable_getPointListWithBoolean_withBoolean_(self, leftToRight, doCopy);
}

- (OrgGeogebraCommonKernelGeosGeoList *)createPointGeoListWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)xList
                                                          withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)yList
                                                                                     withBoolean:(jboolean)byValue
                                                                                     withBoolean:(jboolean)leftToRight {
  return OrgGeogebraCommonGuiViewDataDataVariable_createPointGeoListWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, xList, yList, byValue, leftToRight);
}

- (JavaUtilArrayList *)getStringData {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  if (groupType_ == OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS() && classes_ != nil) {
    OrgGeogebraCommonGuiViewDataDataVariable_updateAutomaticClasses(self);
  }
  for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk([self getItemList])) {
    [list addWithId:[((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) toStringArrayWithBoolean:enableHeader__]];
  }
  return list;
}

- (JavaUtilArrayList *)getTitlesWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk([self getItemList])) {
    [list addWithId:[((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) getDataTitleWithOrgGeogebraCommonMainApp:app withBoolean:enableHeader__]];
  }
  return list;
}

- (JavaUtilArrayList *)getColumnNames {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk([self getItemList])) {
    [list addWithId:[((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) getDescription]];
  }
  return list;
}

- (JavaUtilArrayList *)getTableColumnDescriptionsWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                                                      withInt:(jint)mode
                                                                      withInt:(jint)index {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk(values_)) {
    switch (mode) {
      case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_ONEVAR:
      switch ([groupType_ ordinal]) {
        case OrgGeogebraCommonGuiViewDataDataVariable_GroupType_RAWDATA:
        [list addWithId:[((OrgGeogebraCommonMainApp *) nil_chk(app)) getMenuWithNSString:@"Data"]];
        break;
        case OrgGeogebraCommonGuiViewDataDataVariable_GroupType_FREQUENCY:
        [list addWithId:[((OrgGeogebraCommonMainApp *) nil_chk(app)) getMenuWithNSString:@"Data"]];
        [list addWithId:[app getMenuWithNSString:@"Frequency"]];
        break;
        case OrgGeogebraCommonGuiViewDataDataVariable_GroupType_CLASS:
        [list addWithId:[((OrgGeogebraCommonMainApp *) nil_chk(app)) getMenuWithNSString:@"Classes"]];
        [list addWithId:[app getMenuWithNSString:@"Frequency"]];
        break;
      }
      break;
      case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_REGRESSION:
      if ([((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) getGeoClass] == OrgGeogebraCommonPluginGeoClassEnum_get_POINT()) {
        [list addWithId:JreStrcat("C$C$C", '(', [((OrgGeogebraCommonMainApp *) nil_chk(app)) getMenuWithNSString:@"Column.X"], ',', [app getMenuWithNSString:@"Column.Y"], ')')];
      }
      else {
        [list addWithId:[((OrgGeogebraCommonMainApp *) nil_chk(app)) getMenuWithNSString:@"Column.X"]];
        [list addWithId:[app getMenuWithNSString:@"Column.Y"]];
      }
      break;
      case OrgGeogebraCommonGuiViewDataDataAnalysisModel_MODE_MULTIVAR:
      [list addWithId:JreStrcat("$I", @"# ", index)];
      break;
    }
  }
  return list;
}

- (jboolean)isInDataSourceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == nil) return NO;
  JavaUtilArrayList *itemList = [self getItemList];
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) {
    for (OrgGeogebraCommonGuiViewDataDataItem * __strong item in nil_chk(itemList)) {
      if ([((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(item)) getGeoList] != nil && [item getGeoList] == geo) {
        return YES;
      }
    }
  }
  OrgGeogebraCommonAwtGPoint *location = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetCoords];
  jboolean isCell = (location != nil && location->x_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_COLUMNS_DESKTOP_() && location->y_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_DESKTOP_());
  if (isCell) {
    for (OrgGeogebraCommonGuiViewDataDataItem * __strong dataItem in nil_chk(itemList)) {
      if ([((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(dataItem)) getType] == OrgGeogebraCommonGuiViewDataDataItem_SourceTypeEnum_get_SPREADSHEET()) @try {
        if ([dataItem getRangeList] != nil) {
          for (OrgGeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk([dataItem getRangeList])) if ([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) containsWithOrgGeogebraCommonKernelGeosGeoElement:geo]) {
            return YES;
          }
        }
      }
      @catch (JavaLangException *e) {
      }
    }
  }
  return NO;
}

- (void)getXML {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(values_)) size]; i++) {
  }
  if (frequency_ != nil) {
  }
  if (classes_ != nil) {
  }
  if (label_ != nil) {
  }
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(groupType_);
  RELEASE_(geoClass_);
  RELEASE_(frequency_);
  RELEASE_(label_);
  RELEASE_(classes_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "DataVariable", NULL, 0x1, NULL, NULL },
    { "setDataVariableAsRawDataWithOrgGeogebraCommonPluginGeoClassEnum:withJavaUtilArrayList:", "setDataVariableAsRawData", "V", 0x1, NULL, NULL },
    { "setDataVariableWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:withOrgGeogebraCommonPluginGeoClassEnum:withJavaUtilArrayList:withOrgGeogebraCommonGuiViewDataDataItem:withOrgGeogebraCommonGuiViewDataDataItem:withOrgGeogebraCommonGuiViewDataDataItem:", "setDataVariable", "V", 0x1, NULL, NULL },
    { "setGroupTypeWithOrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:", "setGroupType", "V", 0x1, NULL, NULL },
    { "getGroupType", NULL, "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", 0x1, NULL, NULL },
    { "setGeoClassWithOrgGeogebraCommonPluginGeoClassEnum:", "setGeoClass", "V", 0x1, NULL, NULL },
    { "getGeoClass", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getClassStart", NULL, "D", 0x1, NULL, NULL },
    { "setClassStartWithDouble:", "setClassStart", "V", 0x1, NULL, NULL },
    { "getClassWidth", NULL, "D", 0x1, NULL, NULL },
    { "setClassWidthWithDouble:", "setClassWidth", "V", 0x1, NULL, NULL },
    { "updateAutomaticClasses", NULL, "V", 0x2, NULL, NULL },
    { "getFrequency", NULL, "Lorg.geogebra.common.gui.view.data.DataItem;", 0x1, NULL, NULL },
    { "setFrequencyWithOrgGeogebraCommonGuiViewDataDataItem:", "setFrequency", "V", 0x1, NULL, NULL },
    { "getClasses", NULL, "Lorg.geogebra.common.gui.view.data.DataItem;", 0x1, NULL, NULL },
    { "enableHeader", NULL, "Z", 0x1, NULL, NULL },
    { "setEnableHeaderWithBoolean:", "setEnableHeader", "V", 0x1, NULL, NULL },
    { "getValues", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setValueItemListWithJavaUtilArrayList:", "setValueItemList", "V", 0x1, NULL, NULL },
    { "setValueItemsWithOrgGeogebraCommonGuiViewDataDataItemArray:", "setValueItems", "V", 0x81, NULL, NULL },
    { "setDataItemWithInt:withOrgGeogebraCommonGuiViewDataDataItem:", "setDataItem", "V", 0x1, NULL, NULL },
    { "removeLastValue", NULL, "V", 0x1, NULL, NULL },
    { "addNewValue", NULL, "V", 0x1, NULL, NULL },
    { "getItemList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toGeoListWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiViewDataDataItem:withInt:withBoolean:withBoolean:", "toGeoList", "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getGeoListDataWithOrgGeogebraCommonMainApp:withInt:withBoolean:withBoolean:", "getGeoListData", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getPointListWithBoolean:withBoolean:", "getPointList", "Lorg.geogebra.common.kernel.geos.GeoList;", 0x2, NULL, NULL },
    { "createPointGeoListWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withBoolean:withBoolean:", "createPointGeoList", "Lorg.geogebra.common.kernel.geos.GeoList;", 0x2, NULL, NULL },
    { "getStringData", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getTitlesWithOrgGeogebraCommonMainApp:", "getTitles", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getColumnNames", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getTableColumnDescriptionsWithOrgGeogebraCommonMainApp:withInt:withInt:", "getTableColumnDescriptions", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "isInDataSourceWithOrgGeogebraCommonKernelGeosGeoElement:", "isInDataSource", "Z", 0x1, NULL, NULL },
    { "getXML", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "groupType_", NULL, 0x2, "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", NULL, NULL,  },
    { "geoClass_", NULL, 0x2, "Lorg.geogebra.common.plugin.GeoClass;", NULL, NULL,  },
    { "frequency_", NULL, 0x2, "Lorg.geogebra.common.gui.view.data.DataItem;", NULL, NULL,  },
    { "label_", NULL, 0x2, "Lorg.geogebra.common.gui.view.data.DataItem;", NULL, NULL,  },
    { "classes_", NULL, 0x2, "Lorg.geogebra.common.gui.view.data.DataItem;", NULL, NULL,  },
    { "values_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/gui/view/data/DataItem;>;",  },
    { "enableHeader__", "enableHeader", 0x2, "Z", NULL, NULL,  },
    { "classStart_", NULL, 0x2, "D", NULL, NULL,  },
    { "classWidth_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewDataDataVariable = { 2, "DataVariable", "org.geogebra.common.gui.view.data", NULL, 0x1, 34, methods, 10, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewDataDataVariable;
}

@end

void OrgGeogebraCommonGuiViewDataDataVariable_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonGuiViewDataDataVariable *self, OrgGeogebraCommonMainApp *app) {
  NSObject_init(self);
  self->enableHeader__ = NO;
  self->classStart_ = 0.0;
  self->classWidth_ = 1.0;
  OrgGeogebraCommonGuiViewDataDataVariable_set_app_(self, app);
}

OrgGeogebraCommonGuiViewDataDataVariable *new_OrgGeogebraCommonGuiViewDataDataVariable_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonGuiViewDataDataVariable *self = [OrgGeogebraCommonGuiViewDataDataVariable alloc];
  OrgGeogebraCommonGuiViewDataDataVariable_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

void OrgGeogebraCommonGuiViewDataDataVariable_updateAutomaticClasses(OrgGeogebraCommonGuiViewDataDataVariable *self) {
  if (self->classes_ == nil) {
    return;
  }
  jint numClasses = 0;
  if (self->frequency_ != nil) {
    numClasses = [self->frequency_ getGeoCount];
  }
  IOSObjectArray *leftBorder = [IOSObjectArray arrayWithLength:numClasses + 1 type:JavaLangDouble_class_()];
  IOSObjectArray_Set(leftBorder, 0, JavaLangDouble_valueOfWithDouble_(self->classStart_));
  for (jint i = 1; i < leftBorder->size_; i++) {
    IOSObjectArray_Set(leftBorder, i, JavaLangDouble_valueOfWithDouble_([((JavaLangDouble *) nil_chk(IOSObjectArray_Get(leftBorder, i - 1))) doubleValue] + self->classWidth_));
  }
  [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk(self->classes_)) setDataItemWithJavaLangDoubleArray:leftBorder];
}

OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonGuiViewDataDataVariable_getPointListWithBoolean_withBoolean_(OrgGeogebraCommonGuiViewDataDataVariable *self, jboolean leftToRight, jboolean doCopy) {
  if ([((JavaUtilArrayList *) nil_chk(self->values_)) size] < 2) {
    return nil;
  }
  OrgGeogebraCommonKernelGeosGeoList *list0 = [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk([self->values_ getWithInt:0])) toGeoListWithOrgGeogebraCommonMainApp:self->app_ withBoolean:self->enableHeader__ withBoolean:leftToRight withBoolean:doCopy];
  OrgGeogebraCommonKernelGeosGeoList *list1 = [((OrgGeogebraCommonGuiViewDataDataItem *) nil_chk([self->values_ getWithInt:1])) toGeoListWithOrgGeogebraCommonMainApp:self->app_ withBoolean:self->enableHeader__ withBoolean:leftToRight withBoolean:doCopy];
  return OrgGeogebraCommonGuiViewDataDataVariable_createPointGeoListWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, list0, list1, doCopy, leftToRight);
}

OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonGuiViewDataDataVariable_createPointGeoListWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(OrgGeogebraCommonGuiViewDataDataVariable *self, OrgGeogebraCommonKernelGeosGeoList *xList, OrgGeogebraCommonKernelGeosGeoList *yList, jboolean byValue, jboolean leftToRight) {
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  @try {
    OrgGeogebraCommonKernelGeosGeoElement *xCoord, *yCoord;
    for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(xList)) size]; ++i) {
      xCoord = [xList getWithInt:i];
      yCoord = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(yList)) getWithInt:i];
      if (xCoord == nil || yCoord == nil || ![xCoord isGeoNumeric] || ![yCoord isGeoNumeric]) continue;
      OrgGeogebraCommonKernelGeosGeoPoint *geoPoint;
      OrgGeogebraCommonKernelAlgosAlgoDependentPoint *pointAlgo = nil;
      if (byValue) {
        if (leftToRight) geoPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xCoord, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble], [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yCoord, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble], 1.0) autorelease];
        else geoPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yCoord, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble], [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xCoord, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble], 1.0) autorelease];
      }
      else {
        OrgGeogebraCommonKernelArithmeticMyVecNode *vec = [new_OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_([self->app_ getKernel], leftToRight ? xCoord : yCoord, leftToRight ? yCoord : xCoord) autorelease];
        OrgGeogebraCommonKernelArithmeticExpressionNode *point = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_([self->app_ getKernel], vec, OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
        [point setForcePoint];
        pointAlgo = [new_OrgGeogebraCommonKernelAlgosAlgoDependentPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons, point, NO) autorelease];
        geoPoint = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pointAlgo getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoPoint class]);
      }
      if (pointAlgo != nil) [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:pointAlgo];
      [list addWithId:geoPoint];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(yCoord)) isAngle] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(xCoord)) isAngle]) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(geoPoint)) setPolar];
    }
  }
  @catch (JavaLangException *ex) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Creating list of points expression failed with exception ", ex));
  }
  OrgGeogebraCommonKernelAlgosAlgoDependentList *dl = [new_OrgGeogebraCommonKernelAlgosAlgoDependentList_initWithOrgGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(cons, list, NO) autorelease];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:dl];
  return (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([dl getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoList class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewDataDataVariable)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum)

OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_values_[3];

@implementation OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_values() {
  OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_values_ count:3 type:OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_values();
}

+ (OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *e = OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum class]) {
    OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_RAWDATA = new_OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(@"RAWDATA", 0);
    OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_FREQUENCY = new_OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(@"FREQUENCY", 1);
    OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_CLASS = new_OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(@"CLASS", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "RAWDATA", "RAWDATA", 0x4019, "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", &OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_RAWDATA, NULL,  },
    { "FREQUENCY", "FREQUENCY", 0x4019, "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", &OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_FREQUENCY, NULL,  },
    { "CLASS", "CLASS", 0x4019, "Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;", &OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_CLASS, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.gui.view.data.DataVariable$GroupType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum = { 2, "GroupType", "org.geogebra.common.gui.view.data", "DataVariable", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/gui/view/data/DataVariable$GroupType;>;" };
  return &_OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum;
}

@end

void OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *new_OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *self = [OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum alloc];
  OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum)
