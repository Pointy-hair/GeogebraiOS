//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/view/probcalculator/ProbabilityManager.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Math.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"
#include "org/geogebra/common/gui/view/probcalculator/ProbabilityCalculatorView.h"
#include "org/geogebra/common/gui/view/probcalculator/ProbabilityManager.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoBinomialDist.h"
#include "org/geogebra/common/kernel/statistics/AlgoCauchy.h"
#include "org/geogebra/common/kernel/statistics/AlgoChiSquared.h"
#include "org/geogebra/common/kernel/statistics/AlgoDistribution.h"
#include "org/geogebra/common/kernel/statistics/AlgoExponential.h"
#include "org/geogebra/common/kernel/statistics/AlgoFDistribution.h"
#include "org/geogebra/common/kernel/statistics/AlgoGamma.h"
#include "org/geogebra/common/kernel/statistics/AlgoHyperGeometric.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseBinomial.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseCauchy.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseChiSquared.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseExponential.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseFDistribution.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseGamma.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseHyperGeometric.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseLogNormal.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseLogistic.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseNormal.h"
#include "org/geogebra/common/kernel/statistics/AlgoInversePascal.h"
#include "org/geogebra/common/kernel/statistics/AlgoInversePoisson.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseTDistribution.h"
#include "org/geogebra/common/kernel/statistics/AlgoInverseWeibull.h"
#include "org/geogebra/common/kernel/statistics/AlgoLogNormal.h"
#include "org/geogebra/common/kernel/statistics/AlgoLogistic.h"
#include "org/geogebra/common/kernel/statistics/AlgoNormal.h"
#include "org/geogebra/common/kernel/statistics/AlgoPascal.h"
#include "org/geogebra/common/kernel/statistics/AlgoPoisson.h"
#include "org/geogebra/common/kernel/statistics/AlgoTDistribution.h"
#include "org/geogebra/common/kernel/statistics/AlgoWeibull.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/settings/ProbabilityCalculatorSettings.h"
#include "org/geogebra/common/util/MyMath2.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager () {
 @public
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonMainLocalization *loc_;
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *probCalc_;
}

+ (jdouble)getContXMaxWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)densityCurve
                                                      withDouble:(jdouble)startX
                                                      withDouble:(jdouble)stepX
                                                      withDouble:(jdouble)yMinimum;

- (jdouble)getDiscreteYMaxWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)distType
                                                                                  withDoubleArray:(IOSDoubleArray *)parms
                                                                                          withInt:(jint)low
                                                                                          withInt:(jint)high;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager, loc_, OrgGeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager, probCalc_, OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *)

__attribute__((unused)) static jdouble OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getContXMaxWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoFunction *densityCurve, jdouble startX, jdouble stepX, jdouble yMinimum);

@implementation OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView:(OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *)probCalc {
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_(self, app, probCalc);
  return self;
}

- (jboolean)isDiscreteWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)distType {
  return [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(distType)) isEqual:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_BINOMIAL()] || [distType isEqual:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_PASCAL()] || [distType isEqual:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_HYPERGEOMETRIC()] || [distType isEqual:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_POISSON()];
}

- (JavaUtilHashMap *)getDistributionMap {
  JavaUtilHashMap *plotMap = [new_JavaUtilHashMap_init() autorelease];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_NORMAL() withId:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getMenuWithNSString:@"Distribution.Normal"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_STUDENT() withId:[loc_ getMenuWithNSString:@"Distribution.StudentT"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_CHISQUARE() withId:[loc_ getMenuWithNSString:@"Distribution.ChiSquare"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_F() withId:[loc_ getMenuWithNSString:@"Distribution.F"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_EXPONENTIAL() withId:[loc_ getMenuWithNSString:@"Distribution.Exponential"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_CAUCHY() withId:[loc_ getMenuWithNSString:@"Distribution.Cauchy"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_WEIBULL() withId:[loc_ getMenuWithNSString:@"Distribution.Weibull"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_LOGISTIC() withId:[loc_ getCommandWithNSString:@"Logistic"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_LOGNORMAL() withId:[loc_ getCommandWithNSString:@"LogNormal"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_GAMMA() withId:[loc_ getMenuWithNSString:@"Distribution.Gamma"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_BINOMIAL() withId:[loc_ getMenuWithNSString:@"Distribution.Binomial"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_PASCAL() withId:[loc_ getMenuWithNSString:@"Distribution.Pascal"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_POISSON() withId:[loc_ getMenuWithNSString:@"Distribution.Poisson"]];
  [plotMap putWithId:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_HYPERGEOMETRIC() withId:[loc_ getMenuWithNSString:@"Distribution.Hypergeometric"]];
  return plotMap;
}

- (JavaUtilHashMap *)getReverseDistributionMap {
  JavaUtilHashMap *plotMap = [self getDistributionMap];
  JavaUtilHashMap *plotMapReverse = [new_JavaUtilHashMap_init() autorelease];
  for (OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum * __strong key in nil_chk([((JavaUtilHashMap *) nil_chk(plotMap)) keySet])) {
    [plotMapReverse putWithId:[plotMap getWithId:key] withId:key];
  }
  return plotMapReverse;
}

+ (IOSObjectArray *)getParameterLabelArrayWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  return OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getParameterLabelArrayWithOrgGeogebraCommonMainApp_(app);
}

+ (OrgGeogebraCommonKernelStatisticsAlgoDistribution *)getInverseCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)d
                                                                                                        withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                               withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)param1
                                                                                               withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)param2
                                                                                               withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)param3
                                                                                               withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)x {
  return OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getInverseCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(d, cons, param1, param2, param3, x);
}

+ (OrgGeogebraCommonKernelStatisticsAlgoDistribution *)getCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)d
                                                                                                 withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)param1
                                                                                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)param2
                                                                                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)param3
                                                                                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)x
                                                                                                                             withBoolean:(jboolean)isCumulative {
  return OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(d, cons, param1, param2, param3, x, isCumulative);
}

+ (jint)getParmCountWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)d {
  return OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getParmCountWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_(d);
}

+ (IOSDoubleArray *)getDefaultParametersWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)d {
  return OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getDefaultParametersWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_(d);
}

- (IOSDoubleArray *)getPlotDimensionsWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)selectedDist
                                                                                             withDoubleArray:(IOSDoubleArray *)parms
                                                                   withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)densityCurve
                                                                                                 withBoolean:(jboolean)isCumulative {
  jdouble xMin = 0, xMax = 0, yMin = 0, yMax = 0;
  jdouble mean, sigma, v, v2, k, median, scale_, shape, mode, n, p, pop, sample, sd, variance;
  {
    jdouble lambda;
    jdouble alpha;
    jdouble beta;
    jdouble meanParm;
    jdouble sdParm;
    jdouble varParm;
    jdouble var;
    switch ([selectedDist ordinal]) {
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_NORMAL:
      mean = IOSDoubleArray_Get(nil_chk(parms), 0);
      sigma = IOSDoubleArray_Get(parms, 1);
      xMin = mean - 5 * sigma;
      xMax = mean + 5 * sigma;
      yMin = 0;
      yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:mean];
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_STUDENT:
      xMin = -5;
      xMax = 5;
      yMin = 0;
      yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:0];
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
      k = IOSDoubleArray_Get(nil_chk(parms), 0);
      xMin = 0;
      xMax = 4 * k;
      yMin = 0;
      if (k > 2) yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:k - 2 + 0.1];
      else yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:0.1];
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
      v = IOSDoubleArray_Get(nil_chk(parms), 0);
      v2 = IOSDoubleArray_Get(parms, 1);
      mean = v2 > 2 ? v2 / (v2 - 2) : 1;
      mode = ((v - 2) * v2) / (v * (v2 + 2));
      variance = 2 * v2 * v2 * (v + v2 - 2) / (v * (v2 - 2) * (v2 - 2) * (v2 - 4));
      xMin = 0;
      xMax = OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getContXMaxWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withDouble_((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class]), 1, .2, -1);
      yMin = 0;
      if (v > 2) {
        yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:mode];
      }
      else {
        yMax = 2.5;
      }
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CAUCHY:
      median = IOSDoubleArray_Get(nil_chk(parms), 0);
      scale_ = IOSDoubleArray_Get(parms, 1);
      xMin = median - 6 * scale_;
      xMax = median + 6 * scale_;
      yMin = 0;
      yMax = 1.2 * (1 / (JavaLangMath_PI * scale_));
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
      lambda = IOSDoubleArray_Get(nil_chk(parms), 0);
      xMin = 0;
      xMax = OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getContXMaxWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withDouble_((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class]), 1, .2, -1);
      yMin = 0;
      yMax = 1.2 * lambda;
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_GAMMA:
      alpha = IOSDoubleArray_Get(nil_chk(parms), 0);
      beta = IOSDoubleArray_Get(parms, 1);
      mode = (alpha - 1) * beta;
      mean = alpha * beta;
      sd = JavaLangMath_sqrtWithDouble_(alpha) * beta;
      xMin = 0;
      xMax = mean + 5 * sd;
      yMin = 0;
      if (alpha > 1) yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:mode];
      else yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:0];
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_WEIBULL:
      shape = IOSDoubleArray_Get(nil_chk(parms), 0);
      scale_ = IOSDoubleArray_Get(parms, 1);
      median = scale_ * JavaLangMath_powWithDouble_withDouble_(JavaLangMath_logWithDouble_(2), 1 / shape);
      xMin = 0;
      xMax = 2 * median;
      yMin = 0;
      if (shape > 1) {
        mode = scale_ * JavaLangMath_powWithDouble_withDouble_(1 - 1 / shape, 1 / shape);
        yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:mode];
      }
      else {
        yMax = 4;
      }
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGNORMAL:
      meanParm = IOSDoubleArray_Get(nil_chk(parms), 0);
      sdParm = IOSDoubleArray_Get(parms, 1);
      varParm = sdParm * sdParm;
      mean = JavaLangMath_expWithDouble_(meanParm + varParm / 2);
      var = (JavaLangMath_expWithDouble_(varParm) - 1) * JavaLangMath_expWithDouble_(2 * meanParm + varParm);
      sigma = JavaLangMath_sqrtWithDouble_(var);
      mode = JavaLangMath_expWithDouble_(meanParm - varParm);
      xMin = 0;
      xMax = mean + 5 * sigma;
      yMin = 0;
      yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:mode];
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGISTIC:
      mean = IOSDoubleArray_Get(nil_chk(parms), 0);
      scale_ = IOSDoubleArray_Get(parms, 1);
      sd = JavaLangMath_PI * scale_ / JavaLangMath_sqrtWithDouble_(3);
      xMin = mean - 5 * sd;
      xMax = mean + 5 * sd;
      yMin = 0;
      yMax = 1.2 * [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:mean];
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
      mode = JavaLangMath_floorWithDouble_(IOSDoubleArray_Get(nil_chk(parms), 0));
      xMin = [((OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *) nil_chk(probCalc_)) getDiscreteXMin];
      xMax = [probCalc_ getDiscreteXMax];
      yMin = 0;
      yMax = 1.2 * [self probabilityWithDouble:mode withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_POISSON() withBoolean:NO];
      xMin -= 1;
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
      mode = 0;
      if (IOSDoubleArray_Get(nil_chk(parms), 0) > 1) {
        mode = JavaLangMath_floorWithDouble_(IOSDoubleArray_Get(parms, 1) * (IOSDoubleArray_Get(parms, 0) - 1) / (1 - IOSDoubleArray_Get(parms, 1)));
      }
      xMin = [((OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *) nil_chk(probCalc_)) getDiscreteXMin];
      xMax = [probCalc_ getDiscreteXMax];
      yMin = 0;
      yMax = 1.2 * [self probabilityWithDouble:mode withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_PASCAL() withBoolean:NO];
      xMin -= 1;
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
      mode = JavaLangMath_floorWithDouble_((IOSDoubleArray_Get(nil_chk(parms), 0) + 1) * IOSDoubleArray_Get(parms, 1));
      xMin = [((OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *) nil_chk(probCalc_)) getDiscreteXMin];
      xMax = [probCalc_ getDiscreteXMax];
      yMin = 0;
      yMax = 1.2 * [self probabilityWithDouble:mode withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_BINOMIAL() withBoolean:NO];
      xMin -= 1;
      xMax += 1;
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
      mode = JavaLangMath_floorWithDouble_((IOSDoubleArray_Get(nil_chk(parms), 1) + 1) * (IOSDoubleArray_Get(parms, 2) + 1) / (IOSDoubleArray_Get(parms, 0) + 2));
      xMin = [((OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *) nil_chk(probCalc_)) getDiscreteXMin];
      xMax = [probCalc_ getDiscreteXMax];
      yMin = 0;
      yMax = 1.2 * [self probabilityWithDouble:mode withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_HYPERGEOMETRIC() withBoolean:NO];
      xMin -= 1;
      xMax += 1;
      break;
    }
  }
  if (isCumulative) {
    yMin = 0;
    yMax = 1.2;
  }
  IOSDoubleArray *d = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ xMin, xMax, yMin, yMax } count:4];
  return d;
}

+ (jdouble)getContXMaxWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)densityCurve
                                                      withDouble:(jdouble)startX
                                                      withDouble:(jdouble)stepX
                                                      withDouble:(jdouble)yMinimum {
  return OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getContXMaxWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withDouble_(densityCurve, startX, stepX, yMinimum);
}

- (IOSObjectArray *)getDistributionMeasuresWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)selectedDist
                                                                                                   withDoubleArray:(IOSDoubleArray *)parms {
  JavaLangDouble *mean = nil, *sigma = nil;
  jdouble v, v2, k, median, scale_, shape, mode, n, N, p, pop, sd, variance, r;
  {
    jdouble lambda;
    jdouble alpha;
    jdouble beta;
    jdouble meanParm;
    jdouble sdParm;
    jdouble varParm;
    jdouble var;
    switch ([selectedDist ordinal]) {
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_NORMAL:
      mean = JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(nil_chk(parms), 0));
      sigma = JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(parms, 1));
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_STUDENT:
      mean = JavaLangDouble_valueOfWithDouble_(0.0);
      v = IOSDoubleArray_Get(nil_chk(parms), 0);
      if (v > 2) {
        sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(v / (v - 2)));
      }
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
      k = IOSDoubleArray_Get(nil_chk(parms), 0);
      mean = JavaLangDouble_valueOfWithDouble_(k);
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(2 * k));
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
      v = IOSDoubleArray_Get(nil_chk(parms), 0);
      v2 = IOSDoubleArray_Get(parms, 1);
      if (v2 > 2) {
        mean = JavaLangDouble_valueOfWithDouble_(v2 / (v2 - 2));
      }
      if (v2 > 4) {
        variance = 2 * v2 * v2 * (v + v2 - 2) / (v * (v2 - 2) * (v2 - 2) * (v2 - 4));
        sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(variance));
      }
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CAUCHY:
      median = IOSDoubleArray_Get(nil_chk(parms), 0);
      scale_ = IOSDoubleArray_Get(parms, 1);
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
      lambda = IOSDoubleArray_Get(nil_chk(parms), 0);
      mean = JavaLangDouble_valueOfWithDouble_(1 / lambda);
      sigma = JavaLangDouble_valueOfWithDouble_(1 / lambda);
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_GAMMA:
      alpha = IOSDoubleArray_Get(nil_chk(parms), 0);
      beta = IOSDoubleArray_Get(parms, 1);
      mode = (alpha - 1) * beta;
      mean = JavaLangDouble_valueOfWithDouble_(alpha * beta);
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(alpha) * beta);
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_WEIBULL:
      shape = IOSDoubleArray_Get(nil_chk(parms), 0);
      scale_ = IOSDoubleArray_Get(parms, 1);
      median = scale_ * JavaLangMath_powWithDouble_withDouble_(JavaLangMath_logWithDouble_(2), 1 / shape);
      mean = JavaLangDouble_valueOfWithDouble_(scale_ * OrgGeogebraCommonUtilMyMath2_gammaWithDouble_(1 + 1 / shape));
      variance = scale_ * scale_ * OrgGeogebraCommonUtilMyMath2_gammaWithDouble_(1 + 2 / shape) - [mean doubleValue] * [mean doubleValue];
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(variance));
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGNORMAL:
      meanParm = IOSDoubleArray_Get(nil_chk(parms), 0);
      sdParm = IOSDoubleArray_Get(parms, 1);
      varParm = sdParm * sdParm;
      mean = JavaLangDouble_valueOfWithDouble_(JavaLangMath_expWithDouble_(meanParm + varParm / 2));
      var = (JavaLangMath_expWithDouble_(varParm) - 1) * JavaLangMath_expWithDouble_(2 * meanParm + varParm);
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(var));
      mode = JavaLangMath_expWithDouble_(meanParm - varParm);
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGISTIC:
      mean = JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(nil_chk(parms), 0));
      scale_ = IOSDoubleArray_Get(parms, 1);
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_PI * scale_ / JavaLangMath_sqrtWithDouble_(3));
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
      r = IOSDoubleArray_Get(nil_chk(parms), 0);
      p = IOSDoubleArray_Get(parms, 1);
      mean = JavaLangDouble_valueOfWithDouble_(p * r / (1 - p));
      var = p * r / ((1 - p) * (1 - p));
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(var));
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
      mean = JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(nil_chk(parms), 0));
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_([mean doubleValue]));
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
      n = IOSDoubleArray_Get(nil_chk(parms), 0);
      p = IOSDoubleArray_Get(parms, 1);
      mean = JavaLangDouble_valueOfWithDouble_(n * p);
      var = n * p * (1 - p);
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(var));
      break;
      case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
      N = IOSDoubleArray_Get(nil_chk(parms), 0);
      k = IOSDoubleArray_Get(parms, 1);
      n = IOSDoubleArray_Get(parms, 2);
      mean = JavaLangDouble_valueOfWithDouble_(n * k / N);
      var = n * k * (N - k) * (N - n) / (N * N * (N - 1));
      sigma = JavaLangDouble_valueOfWithDouble_(JavaLangMath_sqrtWithDouble_(var));
      break;
    }
  }
  IOSObjectArray *d = [IOSObjectArray arrayWithObjects:(id[]){ mean, sigma } count:2 type:JavaLangDouble_class_()];
  return d;
}

- (jdouble)getDiscreteYMaxWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)distType
                                                                                  withDoubleArray:(IOSDoubleArray *)parms
                                                                                          withInt:(jint)low
                                                                                          withInt:(jint)high {
  jdouble max = 0;
  for (jint i = low; i <= high; i++) {
    max = JavaLangMath_maxWithDouble_withDouble_(max, [self probabilityWithDouble:i withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType withBoolean:NO]);
  }
  return max;
}

- (jdouble)probabilityWithDouble:(jdouble)value
                 withDoubleArray:(IOSDoubleArray *)parms
withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)distType
                     withBoolean:(jboolean)isCumulative {
  OrgGeogebraCommonKernelArithmeticMyDouble *param1 = nil, *param2 = nil, *param3 = nil;
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
  OrgGeogebraCommonKernelKernel *kernel = [app_ getKernel];
  if (((IOSDoubleArray *) nil_chk(parms))->size_ > 0) {
    param1 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, IOSDoubleArray_Get(parms, 0)) autorelease];
  }
  if (parms->size_ > 1) {
    param2 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, IOSDoubleArray_Get(parms, 1)) autorelease];
  }
  if (parms->size_ > 2) {
    param3 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, IOSDoubleArray_Get(parms, 2)) autorelease];
  }
  OrgGeogebraCommonKernelStatisticsAlgoDistribution *algo = OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(distType, cons, param1, param2, param3, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, value) autorelease], isCumulative);
  return [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk([((OrgGeogebraCommonKernelStatisticsAlgoDistribution *) nil_chk(algo)) getResult])) getDouble];
}

- (jdouble)intervalProbabilityWithDouble:(jdouble)low
                              withDouble:(jdouble)high
withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)distType
                         withDoubleArray:(IOSDoubleArray *)parms
                                 withInt:(jint)probMode {
  if (probMode == OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_LEFT) return [self probabilityWithDouble:high withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType withBoolean:YES];
  else if (probMode == OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_RIGHT) {
    if ([self isDiscreteWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType]) {
      return 1 - [self probabilityWithDouble:low - 1 withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType withBoolean:YES];
    }
    return 1 - [self probabilityWithDouble:low withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType withBoolean:YES];
  }
  else {
    if ([self isDiscreteWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType]) {
      return [self probabilityWithDouble:high withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType withBoolean:YES] - [self probabilityWithDouble:low - 1 withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType withBoolean:YES];
    }
    return [self probabilityWithDouble:high withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType withBoolean:YES] - [self probabilityWithDouble:low withDoubleArray:parms withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:distType withBoolean:YES];
  }
}

- (jdouble)inverseProbabilityWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)distType
                                                                                          withDouble:(jdouble)prob
                                                                                     withDoubleArray:(IOSDoubleArray *)parms {
  OrgGeogebraCommonKernelArithmeticMyDouble *param1 = nil, *param2 = nil, *param3 = nil;
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
  OrgGeogebraCommonKernelKernel *kernel = [app_ getKernel];
  if (((IOSDoubleArray *) nil_chk(parms))->size_ > 0) {
    param1 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, IOSDoubleArray_Get(parms, 0)) autorelease];
  }
  if (parms->size_ > 1) {
    param2 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, IOSDoubleArray_Get(parms, 1)) autorelease];
  }
  if (parms->size_ > 2) {
    param3 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, IOSDoubleArray_Get(parms, 2)) autorelease];
  }
  OrgGeogebraCommonKernelStatisticsAlgoDistribution *algo = OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getInverseCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(distType, cons, param1, param2, param3, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, prob) autorelease]);
  return [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk([((OrgGeogebraCommonKernelStatisticsAlgoDistribution *) nil_chk(algo)) getResult])) getDouble];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(probCalc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView:", "ProbabilityManager", NULL, 0x1, NULL, NULL },
    { "isDiscreteWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:", "isDiscrete", "Z", 0x1, NULL, NULL },
    { "getDistributionMap", NULL, "Ljava.util.HashMap;", 0x1, NULL, NULL },
    { "getReverseDistributionMap", NULL, "Ljava.util.HashMap;", 0x1, NULL, NULL },
    { "getParameterLabelArrayWithOrgGeogebraCommonMainApp:", "getParameterLabelArray", "[[Ljava.lang.String;", 0x9, NULL, NULL },
    { "getInverseCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "getInverseCommand", "Lorg.geogebra.common.kernel.statistics.AlgoDistribution;", 0xc, NULL, NULL },
    { "getCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "getCommand", "Lorg.geogebra.common.kernel.statistics.AlgoDistribution;", 0xc, NULL, NULL },
    { "getParmCountWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:", "getParmCount", "I", 0x9, NULL, NULL },
    { "getDefaultParametersWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:", "getDefaultParameters", "[D", 0x9, NULL, NULL },
    { "getPlotDimensionsWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withDoubleArray:withOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "getPlotDimensions", "[D", 0x1, NULL, NULL },
    { "getContXMaxWithOrgGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:withDouble:", "getContXMax", "D", 0xa, NULL, NULL },
    { "getDistributionMeasuresWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withDoubleArray:", "getDistributionMeasures", "[Ljava.lang.Double;", 0x1, NULL, NULL },
    { "getDiscreteYMaxWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withDoubleArray:withInt:withInt:", "getDiscreteYMax", "D", 0x2, NULL, NULL },
    { "probabilityWithDouble:withDoubleArray:withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withBoolean:", "probability", "D", 0x1, NULL, NULL },
    { "intervalProbabilityWithDouble:withDouble:withOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withDoubleArray:withInt:", "intervalProbability", "D", 0x1, NULL, NULL },
    { "inverseProbabilityWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withDouble:withDoubleArray:", "inverseProbability", "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x12, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x12, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "probCalc_", NULL, 0x2, "Lorg.geogebra.common.gui.view.probcalculator.ProbabilityCalculatorView;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager = { 2, "ProbabilityManager", "org.geogebra.common.gui.view.probcalculator", NULL, 0x1, 16, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager;
}

@end

void OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_(OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager *self, OrgGeogebraCommonMainApp *app, OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *probCalc) {
  NSObject_init(self);
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_set_app_(self, app);
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_set_loc_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getLocalization]);
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_set_probCalc_(self, probCalc);
}

OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager *new_OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_(OrgGeogebraCommonMainApp *app, OrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *probCalc) {
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager *self = [OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager alloc];
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_(self, app, probCalc);
  return self;
}

IOSObjectArray *OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getParameterLabelArrayWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initialize();
  IOSObjectArray *parameterLabels = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_get_distCount_(), 4 } type:NSString_class_()];
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_NORMAL())) ordinal])), 0, [((OrgGeogebraCommonMainApp *) nil_chk(app)) getMenuWithNSString:@"Mean.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_NORMAL() ordinal])), 1, [app getMenuWithNSString:@"StandardDeviation.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_STUDENT())) ordinal])), 0, [app getMenuWithNSString:@"DegreesOfFreedom.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_CHISQUARE())) ordinal])), 0, [app getMenuWithNSString:@"DegreesOfFreedom.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_F())) ordinal])), 0, [app getMenuWithNSString:@"DegreesOfFreedom1.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_F() ordinal])), 1, [app getMenuWithNSString:@"DegreesOfFreedom2.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_EXPONENTIAL())) ordinal])), 0, JreStrcat("C", OrgGeogebraCommonUtilUnicode_lambda));
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_CAUCHY())) ordinal])), 0, [app getMenuWithNSString:@"Median"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_CAUCHY() ordinal])), 1, [app getMenuWithNSString:@"Distribution.Scale"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_WEIBULL())) ordinal])), 0, [app getMenuWithNSString:@"Distribution.Shape"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_WEIBULL() ordinal])), 1, [app getMenuWithNSString:@"Distribution.Scale"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_LOGISTIC())) ordinal])), 0, [app getMenuWithNSString:@"Mean.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_LOGISTIC() ordinal])), 1, [app getMenuWithNSString:@"Distribution.Scale"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_LOGNORMAL())) ordinal])), 0, [app getMenuWithNSString:@"Mean.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_LOGNORMAL() ordinal])), 1, [app getMenuWithNSString:@"StandardDeviation.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_GAMMA())) ordinal])), 0, [app getMenuWithNSString:@"Alpha.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_GAMMA() ordinal])), 1, [app getMenuWithNSString:@"Beta.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_BINOMIAL())) ordinal])), 0, [app getMenuWithNSString:@"Binomial.number"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_BINOMIAL() ordinal])), 1, [app getMenuWithNSString:@"Binomial.probability"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_PASCAL())) ordinal])), 0, [app getMenuWithNSString:@"Binomial.number"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_PASCAL() ordinal])), 1, [app getMenuWithNSString:@"Binomial.probability"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_POISSON())) ordinal])), 0, [app getMenuWithNSString:@"Mean.short"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_HYPERGEOMETRIC())) ordinal])), 0, [app getMenuWithNSString:@"Hypergeometric.population"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_HYPERGEOMETRIC() ordinal])), 1, [app getMenuWithNSString:@"Hypergeometric.number"]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(parameterLabels, [OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_HYPERGEOMETRIC() ordinal])), 2, [app getMenuWithNSString:@"Hypergeometric.sample"]);
  return parameterLabels;
}

OrgGeogebraCommonKernelStatisticsAlgoDistribution *OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getInverseCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *d, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelArithmeticNumberValue> param1, id<OrgGeogebraCommonKernelArithmeticNumberValue> param2, id<OrgGeogebraCommonKernelArithmeticNumberValue> param3, id<OrgGeogebraCommonKernelArithmeticNumberValue> x) {
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initialize();
  OrgGeogebraCommonKernelStatisticsAlgoDistribution *ret = nil;
  switch ([d ordinal]) {
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_NORMAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseNormal_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGNORMAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseLogNormal_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGISTIC:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseLogistic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_STUDENT:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseTDistribution_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseChiSquared_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseFDistribution_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CAUCHY:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseCauchy_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseExponential_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_GAMMA:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseGamma_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_WEIBULL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseWeibull_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseBinomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInversePascal_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInversePoisson_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoInverseHyperGeometric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, nil, param1, param2, param3, x) autorelease];
    break;
  }
  if (ret != nil) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk([ret getConstruction])) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:ret];
  }
  else {
    OrgGeogebraCommonMainApp_errorWithNSString_(@"missing case");
  }
  return ret;
}

OrgGeogebraCommonKernelStatisticsAlgoDistribution *OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getCommandWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *d, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelArithmeticNumberValue> param1, id<OrgGeogebraCommonKernelArithmeticNumberValue> param2, id<OrgGeogebraCommonKernelArithmeticNumberValue> param3, id<OrgGeogebraCommonKernelArithmeticNumberValue> x, jboolean isCumulative) {
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initialize();
  OrgGeogebraCommonKernelStatisticsAlgoDistribution *ret = nil;
  switch ([d ordinal]) {
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_NORMAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoNormal_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_STUDENT:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoTDistribution_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoChiSquared_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoFDistribution_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CAUCHY:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoCauchy_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoExponential_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_GAMMA:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoGamma_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_WEIBULL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoWeibull_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoBinomialDist_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons, param1, param2, x, [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons, isCumulative) autorelease]) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoPascal_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons, param1, param2, x, [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons, isCumulative) autorelease]) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoPoisson_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons, param1, x, [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons, isCumulative) autorelease]) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoHyperGeometric_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons, param1, param2, param3, x, [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons, isCumulative) autorelease]) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGNORMAL:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoLogNormal_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGISTIC:
    ret = [new_OrgGeogebraCommonKernelStatisticsAlgoLogistic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, param1, param2, x) autorelease];
    break;
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(@"missing case");
  }
  if (ret != nil) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:ret];
  }
  else {
    OrgGeogebraCommonMainApp_errorWithNSString_(@"missing case");
  }
  return ret;
}

jint OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getParmCountWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *d) {
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initialize();
  switch ([d ordinal]) {
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_GAMMA:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_WEIBULL:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGNORMAL:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGISTIC:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CAUCHY:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_NORMAL:
    return 2;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_STUDENT:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
    return 1;
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
    return 3;
    default:
    @throw [new_JavaLangError_initWithNSString_(@"unknown distribution") autorelease];
  }
}

IOSDoubleArray *OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getDefaultParametersWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *d) {
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initialize();
  JavaUtilHashMap *defaultParameterMap = [new_JavaUtilHashMap_init() autorelease];
  switch ([d ordinal]) {
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_NORMAL:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 1 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_STUDENT:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 10 } count:1];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 6 } count:1];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 5, 2 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 1 } count:1];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_GAMMA:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 3, 2 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CAUCHY:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 1 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_WEIBULL:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 5, 1 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGNORMAL:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 1 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGISTIC:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 5, 2 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 20, 0.5 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 10, 0.5 } count:2];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 4 } count:1];
    case OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 60, 10, 20 } count:3];
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(@"missing case");
  }
  return nil;
}

jdouble OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_getContXMaxWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoFunction *densityCurve, jdouble startX, jdouble stepX, jdouble yMinimum) {
  OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager_initialize();
  jdouble defaultYMin = 0.005;
  jdouble yMin = (yMinimum < 0) ? defaultYMin : yMinimum;
  jdouble x = startX;
  jdouble test = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(densityCurve)) evaluateWithDouble:x];
  while (test > yMin) {
    test = [densityCurve evaluateWithDouble:x];
    x += stepX;
  }
  return x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewProbcalculatorProbabilityManager)
