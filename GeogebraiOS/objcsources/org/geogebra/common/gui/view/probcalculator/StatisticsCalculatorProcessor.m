//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/gui/view/probcalculator/StatisticsCalculatorProcessor.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/ArrayList.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/distribution/ChiSquaredDistribution.h"
#include "org/apache/commons/math/distribution/ChiSquaredDistributionImpl.h"
#include "org/geogebra/common/gui/view/probcalculator/StatisticsCalculator.h"
#include "org/geogebra/common/gui/view/probcalculator/StatisticsCalculatorProcessor.h"
#include "org/geogebra/common/gui/view/probcalculator/StatisticsCollection.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/statistics/AlgoTMean2Estimate.h"
#include "org/geogebra/common/kernel/statistics/AlgoTMeanEstimate.h"
#include "org/geogebra/common/kernel/statistics/AlgoTTest.h"
#include "org/geogebra/common/kernel/statistics/AlgoTTest2.h"
#include "org/geogebra/common/kernel/statistics/AlgoZMean2Estimate.h"
#include "org/geogebra/common/kernel/statistics/AlgoZMean2Test.h"
#include "org/geogebra/common/kernel/statistics/AlgoZMeanEstimate.h"
#include "org/geogebra/common/kernel/statistics/AlgoZMeanTest.h"
#include "org/geogebra/common/kernel/statistics/AlgoZProportion2Estimate.h"
#include "org/geogebra/common/kernel/statistics/AlgoZProportion2Test.h"
#include "org/geogebra/common/kernel/statistics/AlgoZProportionEstimate.h"
#include "org/geogebra/common/kernel/statistics/AlgoZProportionTest.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor () {
 @public
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonKernelConstruction *cons_;
  OrgGeogebraCommonKernelKernel *kernel_;
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator *statCalc_;
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *sc_;
  OrgGeogebraCommonKernelGeosGeoNumeric *n_, *n2_, *mean_, *mean2_, *sd_, *sd2_, *proportion_, *proportion2_, *nullHyp_, *level_;
  OrgGeogebraCommonKernelGeosGeoText *tail_;
  OrgGeogebraCommonKernelGeosGeoBoolean *pooled_;
  JavaUtilArrayList *geos_;
  id<OrgApacheCommonsMathDistributionChiSquaredDistribution> chisquared_;
}

- (void)createGeos;

- (void)updateGeoValues;

- (void)setT2Stats;

- (void)updateChiSq;

- (void)updateGOF;

- (id<OrgApacheCommonsMathDistributionChiSquaredDistribution>)getChiSquaredDistributionWithDouble:(jdouble)df;

- (jdouble)parseStringDataWithNSString:(NSString *)s;

- (void)setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)result;

- (void)setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)result;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, cons_, OrgGeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, statCalc_, OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, sc_, OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, n_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, n2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, mean_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, mean2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, sd_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, sd2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, proportion_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, proportion2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, nullHyp_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, level_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, tail_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, pooled_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, geos_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, chisquared_, id<OrgApacheCommonsMathDistributionChiSquaredDistribution>)

__attribute__((unused)) static void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_createGeos(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGeoValues(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateChiSq(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGOF(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static id<OrgApacheCommonsMathDistributionChiSquaredDistribution> OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, jdouble df);

__attribute__((unused)) static jdouble OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, NSString *s);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, OrgGeogebraCommonKernelGeosGeoElement *result);

__attribute__((unused)) static void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, OrgGeogebraCommonKernelGeosGeoElement *result);

@implementation OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator:(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator *)statCalc
withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection:(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *)sc {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection_(self, app, statCalc, sc);
  return self;
}

- (void)createGeos {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_createGeos(self);
}

- (void)updateGeoValues {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGeoValues(self);
}

- (void)doCalculate {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo;
  IOSObjectArray *result;
  OrgGeogebraCommonKernelGeosGeoList *list;
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGeoValues(self);
  switch ([[((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator *) nil_chk(statCalc_)) getSelectedProcedure] ordinal]) {
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN_TEST:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoZMeanTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(cons_, mean_, sd_, n_, nullHyp_, tail_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = sc_->sd_ / JavaLangMath_sqrtWithDouble_(sc_->n_);
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN_CI:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoZMeanEstimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, mean_, sd_, n_, level_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->me_ = [((OrgGeogebraCommonKernelStatisticsAlgoZMeanEstimate *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZMeanEstimate class])) getME];
    sc_->se_ = sc_->sd_ / JavaLangMath_sqrtWithDouble_(sc_->n_);
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN_TEST:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(cons_, mean_, sd_, n_, nullHyp_, tail_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = sc_->sd_ / JavaLangMath_sqrtWithDouble_(sc_->n_);
    sc_->df_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getDouble] - 1;
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN_CI:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoTMeanEstimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, mean_, sd_, n_, level_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->me_ = [((OrgGeogebraCommonKernelStatisticsAlgoTMeanEstimate *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoTMeanEstimate class])) getME];
    sc_->se_ = sc_->sd_ / JavaLangMath_sqrtWithDouble_(sc_->n_);
    sc_->df_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getDouble] - 1;
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN2_TEST:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoZMean2Test_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(cons_, mean_, sd_, n_, mean2_, sd2_, n2_, tail_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((OrgGeogebraCommonKernelStatisticsAlgoZMean2Test *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZMean2Test class])) getSE];
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN2_CI:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoZMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, mean_, sd_, n_, mean2_, sd2_, n2_, level_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((OrgGeogebraCommonKernelStatisticsAlgoZMean2Estimate *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZMean2Estimate class])) getSE];
    sc_->me_ = [((OrgGeogebraCommonKernelStatisticsAlgoZMean2Estimate *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZMean2Estimate class])) getME];
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN2_TEST:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons_, mean_, sd_, n_, mean2_, sd2_, n2_, tail_, pooled_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(self);
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN2_CI:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(cons_, mean_, sd_, n_, mean2_, sd2_, n2_, level_, pooled_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(self);
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP_TEST:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(cons_, proportion_, n_, nullHyp_, tail_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZProportionTest class])) getSE];
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP_CI:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, proportion_, n_, level_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((OrgGeogebraCommonKernelStatisticsAlgoZProportionEstimate *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZProportionEstimate class])) getSE];
    sc_->me_ = [((OrgGeogebraCommonKernelStatisticsAlgoZProportionEstimate *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZProportionEstimate class])) getME];
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP2_TEST:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(cons_, proportion_, n_, proportion2_, n2_, tail_) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test class])) getSE];
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP2_CI:
    algo = [new_OrgGeogebraCommonKernelStatisticsAlgoZProportion2Estimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, proportion_, n_, proportion2_, n2_, level_) autorelease];
    result = [algo getOutput];
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->me_ = [((OrgGeogebraCommonKernelStatisticsAlgoZProportion2Estimate *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZProportion2Estimate class])) getME];
    sc_->se_ = [((OrgGeogebraCommonKernelStatisticsAlgoZProportion2Estimate *) check_class_cast(algo, [OrgGeogebraCommonKernelStatisticsAlgoZProportion2Estimate class])) getSE];
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_CHISQ_TEST:
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateChiSq(self);
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_GOF_TEST:
    OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGOF(self);
    break;
  }
}

- (void)setT2Stats {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(self);
}

- (void)updateChiSq {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateChiSq(self);
}

- (void)updateGOF {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGOF(self);
}

- (id<OrgApacheCommonsMathDistributionChiSquaredDistribution>)getChiSquaredDistributionWithDouble:(jdouble)df {
  return OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(self, df);
}

- (jdouble)parseStringDataWithNSString:(NSString *)s {
  return OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(self, s);
}

- (void)setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)result {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, result);
}

- (void)setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)result {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(self, result);
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(cons_);
  RELEASE_(kernel_);
  RELEASE_(statCalc_);
  RELEASE_(sc_);
  RELEASE_(n_);
  RELEASE_(n2_);
  RELEASE_(mean_);
  RELEASE_(mean2_);
  RELEASE_(sd_);
  RELEASE_(sd2_);
  RELEASE_(proportion_);
  RELEASE_(proportion2_);
  RELEASE_(nullHyp_);
  RELEASE_(level_);
  RELEASE_(tail_);
  RELEASE_(pooled_);
  RELEASE_(geos_);
  RELEASE_(chisquared_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator:withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection:", "StatisticsCalculatorProcessor", NULL, 0x1, NULL, NULL },
    { "createGeos", NULL, "V", 0x2, NULL, NULL },
    { "updateGeoValues", NULL, "V", 0x2, NULL, NULL },
    { "doCalculate", NULL, "V", 0x1, NULL, NULL },
    { "setT2Stats", NULL, "V", 0x2, NULL, NULL },
    { "updateChiSq", NULL, "V", 0x2, NULL, NULL },
    { "updateGOF", NULL, "V", 0x2, NULL, NULL },
    { "getChiSquaredDistributionWithDouble:", "getChiSquaredDistribution", "Lorg.apache.commons.math.distribution.ChiSquaredDistribution;", 0x2, NULL, NULL },
    { "parseStringDataWithNSString:", "parseStringData", "D", 0x2, NULL, NULL },
    { "setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement:", "setTestResults", "V", 0x2, NULL, NULL },
    { "setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement:", "setIntervalResults", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "statCalc_", NULL, 0x2, "Lorg.geogebra.common.gui.view.probcalculator.StatisticsCalculator;", NULL, NULL,  },
    { "sc_", NULL, 0x2, "Lorg.geogebra.common.gui.view.probcalculator.StatisticsCollection;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "proportion_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "proportion2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "nullHyp_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "level_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "pooled_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "geos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "chisquared_", NULL, 0x2, "Lorg.apache.commons.math.distribution.ChiSquaredDistribution;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor = { 2, "StatisticsCalculatorProcessor", "org.geogebra.common.gui.view.probcalculator", NULL, 0x1, 11, methods, 19, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor;
}

@end

void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, OrgGeogebraCommonMainApp *app, OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator *statCalc, OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *sc) {
  NSObject_init(self);
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_app_(self, app);
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_cons_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel])) getConstruction]);
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_kernel_(self, [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel]);
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_statCalc_(self, statCalc);
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_sc_(self, sc);
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_createGeos(self);
}

OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *new_OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection_(OrgGeogebraCommonMainApp *app, OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator *statCalc, OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *sc) {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self = [OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor alloc];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_withOrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection_(self, app, statCalc, sc);
  return self;
}

void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_createGeos(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_geos_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_n_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->n_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_n2_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->n2_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_mean_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->mean_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_mean2_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->mean2_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_sd_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->sd_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_sd2_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->sd2_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_proportion_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->proportion_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_proportion2_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->proportion2_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_nullHyp_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->nullHyp_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_level_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->level_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_tail_(self, new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->tail_];
  OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_pooled_(self, new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in self->geos_) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:geo];
  }
}

void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGeoValues(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->level_)) setValueWithDouble:((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->level_];
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->nullHyp_)) setValueWithDouble:self->sc_->nullHyp_];
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) setTextStringWithNSString:self->sc_->tail_];
  [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->pooled_)) setValueWithBoolean:self->sc_->pooled_];
  switch ([[((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator *) nil_chk(self->statCalc_)) getSelectedProcedure] ordinal]) {
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN_TEST:
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN_CI:
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN_TEST:
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN_CI:
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean_)) setValueWithDouble:self->sc_->mean_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) setValueWithDouble:self->sc_->sd_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:self->sc_->n_];
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN2_TEST:
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN2_CI:
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN2_TEST:
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN2_CI:
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean_)) setValueWithDouble:self->sc_->mean_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) setValueWithDouble:self->sc_->sd_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:self->sc_->n_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean2_)) setValueWithDouble:self->sc_->mean2_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd2_)) setValueWithDouble:self->sc_->sd2_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n2_)) setValueWithDouble:self->sc_->n2_];
    [self->pooled_ setValueWithBoolean:self->sc_->pooled_];
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP_TEST:
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP_CI:
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:self->sc_->n_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion_)) setValueWithDouble:[self->sc_ getProportion]];
    break;
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP2_TEST:
    case OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP2_CI:
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:self->sc_->n_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion_)) setValueWithDouble:[self->sc_ getProportion]];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n2_)) setValueWithDouble:self->sc_->n2_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion2_)) setValueWithDouble:[self->sc_ getProportion2]];
    break;
  }
}

void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  jdouble N1 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble];
  jdouble N2 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n2_)) getDouble];
  jdouble SD1 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) getDouble];
  jdouble SD2 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd2_)) getDouble];
  if ([((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->pooled_)) getBoolean]) {
    jdouble df = N1 + N2 - 2;
    jdouble pooledVariance = (1 / N1 + 1 / N2) * ((N1 - 1) * SD1 * SD1 + (N2 - 1) * SD2 * SD2) / df;
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->se_ = JavaLangMath_sqrtWithDouble_(pooledVariance);
    self->sc_->df_ = df;
  }
  else {
    jdouble V1 = SD1 * SD1 / N1;
    jdouble V2 = SD2 * SD2 / N2;
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->se_ = JavaLangMath_sqrtWithDouble_(V1 + V2);
    self->sc_->df_ = ((V1 + V2) * (V1 + V2)) / ((V1 * V1) / (N1 - 1) + (V2 * V2) / (N2 - 1));
  }
}

void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateChiSq(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  for (jint j = 0; j < ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->columns_; j++) {
    *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), j) = 0;
  }
  for (jint i = 0; i < self->sc_->rows_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->sc_->rowSum_), i) = 0;
  }
  self->sc_->total_ = 0;
  for (jint i = 0; i < self->sc_->rows_; i++) {
    for (jint j = 0; j < self->sc_->columns_; j++) {
      jdouble value = OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(self, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->chiSquareData_), i + 1)), j + 1));
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->observed_), i)), j) = value;
      if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j))) {
        *IOSDoubleArray_GetRef(nil_chk(self->sc_->rowSum_), i) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j);
        *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), j) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j);
        self->sc_->total_ += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j);
      }
    }
  }
  for (jint i = 0; i < self->sc_->rows_; i++) {
    for (jint j = 0; j < self->sc_->columns_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->expected_), i)), j) = IOSDoubleArray_Get(nil_chk(self->sc_->rowSum_), i) * IOSDoubleArray_Get(nil_chk(self->sc_->columnSum_), j) / self->sc_->total_;
    }
  }
  self->sc_->testStat_ = 0;
  for (jint i = 0; i < self->sc_->rows_; i++) {
    for (jint j = 0; j < self->sc_->columns_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->diff_), i)), j) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->observed_), i)), j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->expected_), i)), j)) * (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), j)) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), j);
      self->sc_->testStat_ += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->diff_, i)), j);
    }
  }
  self->sc_->df_ = (self->sc_->columns_ - 1) * (self->sc_->rows_ - 1);
  @try {
    jdouble leftArea = [((id<OrgApacheCommonsMathDistributionChiSquaredDistribution>) nil_chk(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(self, self->sc_->df_))) cumulativeProbabilityWithDouble:self->sc_->testStat_];
    self->sc_->P_ = 1 - leftArea;
  }
  @catch (JavaLangIllegalArgumentException *e) {
    self->sc_->P_ = JavaLangDouble_NaN;
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    self->sc_->P_ = JavaLangDouble_NaN;
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
}

void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGOF(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  for (jint j = 0; j < ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->columns_; j++) {
    *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), j) = 0;
  }
  for (jint i = 0; i < self->sc_->rows_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->sc_->rowSum_), i) = 0;
  }
  self->sc_->total_ = 0;
  for (jint i = 0; i < self->sc_->rows_; i++) {
    jdouble value = OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(self, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->chiSquareData_), i + 1)), 1));
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->observed_), i)), 0) = value;
    value = OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(self, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->chiSquareData_, i + 1)), 2));
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->expected_), i)), 0) = value;
    if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), 0))) {
      *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), 0) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), 0);
    }
    if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), 1))) {
      *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), 1) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), 0);
    }
  }
  self->sc_->testStat_ = 0;
  for (jint i = 0; i < self->sc_->rows_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->diff_), i)), 0) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->observed_), i)), 0) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->expected_), i)), 0)) * (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), 0) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), 0)) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), 0);
    self->sc_->testStat_ += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->diff_, i)), 0);
  }
  self->sc_->df_ = self->sc_->rows_ - 1;
  @try {
    jdouble leftArea = [((id<OrgApacheCommonsMathDistributionChiSquaredDistribution>) nil_chk(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(self, self->sc_->df_))) cumulativeProbabilityWithDouble:self->sc_->testStat_];
    self->sc_->P_ = 1 - leftArea;
  }
  @catch (JavaLangIllegalArgumentException *e) {
    self->sc_->P_ = JavaLangDouble_NaN;
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    self->sc_->P_ = JavaLangDouble_NaN;
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
}

id<OrgApacheCommonsMathDistributionChiSquaredDistribution> OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, jdouble df) {
  if (self->chisquared_ == nil || [self->chisquared_ getDegreesOfFreedom] != df) OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_chisquared_(self, new_OrgApacheCommonsMathDistributionChiSquaredDistributionImpl_initWithDouble_(df));
  return self->chisquared_;
}

jdouble OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, NSString *s) {
  if (s == nil || ((jint) [s length]) == 0) {
    return JavaLangDouble_NaN;
  }
  @try {
    NSString *inputText = [((NSString *) nil_chk(s)) trim];
    id<OrgGeogebraCommonKernelArithmeticNumberValue> nv;
    nv = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) getAlgebraProcessor])) evaluateToNumericWithNSString:inputText withBoolean:NO];
    return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(nv)) getDouble];
  }
  @catch (JavaLangNumberFormatException *e) {
    [((JavaLangNumberFormatException *) nil_chk(e)) printStackTrace];
  }
  return JavaLangDouble_NaN;
}

void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, OrgGeogebraCommonKernelGeosGeoElement *result) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(result)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(result, [OrgGeogebraCommonKernelGeosGeoList class])) size] > 0) {
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->P_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(result, [OrgGeogebraCommonKernelGeosGeoList class])) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    self->sc_->testStat_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(result, [OrgGeogebraCommonKernelGeosGeoList class])) getWithInt:1], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  }
  else {
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->P_ = JavaLangDouble_NaN;
    self->sc_->testStat_ = JavaLangDouble_NaN;
  }
}

void OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, OrgGeogebraCommonKernelGeosGeoElement *result) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(result)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(result, [OrgGeogebraCommonKernelGeosGeoList class])) size] > 0) {
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->lower_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(result, [OrgGeogebraCommonKernelGeosGeoList class])) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    self->sc_->upper_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(result, [OrgGeogebraCommonKernelGeosGeoList class])) getWithInt:1], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    self->sc_->me_ = (self->sc_->upper_ - self->sc_->lower_) / 2;
  }
  else {
    ((OrgGeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->lower_ = JavaLangDouble_NaN;
    self->sc_->upper_ = JavaLangDouble_NaN;
    self->sc_->me_ = JavaLangDouble_NaN;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor)
