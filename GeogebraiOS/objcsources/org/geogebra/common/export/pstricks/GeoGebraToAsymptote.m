//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/export/pstricks/GeoGebraToAsymptote.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawPoint.h"
#include "org/geogebra/common/export/pstricks/ExportSettings.h"
#include "org/geogebra/common/export/pstricks/GeoGebraExport.h"
#include "org/geogebra/common/export/pstricks/GeoGebraToAsymptote.h"
#include "org/geogebra/common/export/pstricks/UnicodeTeX.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoAngleLines.h"
#include "org/geogebra/common/kernel/algos/AlgoAnglePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoAngleVector.h"
#include "org/geogebra/common/kernel/algos/AlgoAngleVectors.h"
#include "org/geogebra/common/kernel/algos/AlgoBoxPlot.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionAreaSums.h"
#include "org/geogebra/common/kernel/algos/AlgoSlope.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralDefinite.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralFunctions.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoTransferFunction.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/util/GStringTokenizer.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonExportPstricksGeoGebraToAsymptote () {
 @public
  jboolean eurosym_, compact_, compactcse5_, grayscale_, dotColors_, pairName_;
  jint parabolaCount_, hyperbolaCount_, arcCount_, functionCount_, implicitFuncCount_, fillType_, fontsize_;
  JavaLangStringBuilder *codeBeginPic_, *codePointDecl_, *codeColors_, *codeEndDoc_;
  JavaUtilArrayList *pointList_;
  id<JavaUtilMap> pairNameTable_;
  id<JavaUtilMap> functionTable_, implicitPolyTable_;
  id<JavaUtilSet> usepackage_;
}

+ (void)renameFuncWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                               withNSString:(NSString *)nameFunc
                               withNSString:(NSString *)nameNew;

- (jdouble)maxDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                          withDouble:(jdouble)a
                                                          withDouble:(jdouble)b;

- (jdouble)firstDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                            withDouble:(jdouble)a
                                                            withDouble:(jdouble)b;

- (void)drawCircleWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)geo;

- (void)initUnitAndVariable OBJC_METHOD_FAMILY_NONE;

- (void)initPointDeclarations OBJC_METHOD_FAMILY_NONE;

- (void)drawGrid;

- (void)drawAxis;

- (void)drawArrowsWithInt:(jint)axisStyle
              withBoolean:(jboolean)axisBold;

- (void)PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geo
                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                    withDouble:(jdouble)dotsize;

- (void)PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geo
                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                          withBoolean:(jboolean)transparency;

+ (void)LinestyleCodeWithInt:(jint)linestyle
   withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (void)addTextWithNSString:(NSString *)st
                withBoolean:(jboolean)isLatex
                    withInt:(jint)style;

+ (NSString *)killSpaceWithNSString:(NSString *)name;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, codeBeginPic_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, codePointDecl_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, codeColors_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, codeEndDoc_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, pointList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, pairNameTable_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, functionTable_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, implicitPolyTable_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote, usepackage_, id<JavaUtilSet>)

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *sb, NSString *nameFunc, NSString *nameNew);

__attribute__((unused)) static jdouble OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_maxDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoFunction *f, jdouble a, jdouble b);

__attribute__((unused)) static jdouble OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_firstDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoFunction *f, jdouble a, jdouble b);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawCircleWithOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoConic *geo);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initUnitAndVariable(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initPointDeclarations(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawGrid(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawAxis(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawArrowsWithInt_withBoolean_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, jint axisStyle, jboolean axisBold);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_withDouble_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoPoint *geo, JavaLangStringBuilder *sb, jdouble dotsize);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoPoint *geo, JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean transparency);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LinestyleCodeWithInt_withJavaLangStringBuilder_(jint linestyle, JavaLangStringBuilder *sb);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_addTextWithNSString_withBoolean_withInt_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, NSString *st, jboolean isLatex, jint style);

__attribute__((unused)) static NSString *OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_killSpaceWithNSString_(NSString *name);

@implementation OrgGeogebraCommonExportPstricksGeoGebraToAsymptote

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)generateAllCode {
  parabolaCount_ = 0;
  hyperbolaCount_ = 0;
  arcCount_ = 0;
  functionCount_ = 0;
  implicitFuncCount_ = 0;
  fillType_ = 0;
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_usepackage_(self, new_JavaUtilTreeSet_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_importpackage_(self, new_JavaUtilTreeSet_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_pointList_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_pairNameTable_(self, new_JavaUtilHashMap_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_functionTable_(self, new_JavaUtilHashMap_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_implicitPolyTable_(self, new_JavaUtilHashMap_init());
  OrgGeogebraCommonExportPstricksGeoGebraExport_setAndConsume_CustomColor_(self, new_JavaUtilHashMap_init());
  format__ = [((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(frame_)) getFormat];
  compact_ = ([frame_ getAsyCompact] || [frame_ getAsyCompactCse5]);
  compactcse5_ = [frame_ getAsyCompactCse5];
  fillType_ = [frame_ getFillType];
  fontsize_ = [frame_ getFontSize];
  grayscale_ = [frame_ isGrayscale];
  pairName_ = [frame_ getUsePairNames];
  dotColors_ = [frame_ getKeepDotColors];
  @try {
    xunit_ = [frame_ getXUnit];
    yunit_ = [frame_ getYUnit];
  }
  @catch (JavaLangNullPointerException *e2) {
    xunit_ = 1;
    yunit_ = 1;
  }
  OrgGeogebraCommonExportPstricksGeoGebraExport_setAndConsume_code_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonExportPstricksGeoGebraExport_setAndConsume_codePreamble_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_codeBeginPic_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_codePointDecl_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_codeColors_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonExportPstricksGeoGebraExport_setAndConsume_codePoint_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonExportPstricksGeoGebraExport_setAndConsume_codeFilledObject_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_codeBeginPic_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_setAndConsume_codeEndDoc_(self, new_JavaLangStringBuilder_init());
  if (pairName_) {
    for (jint step = 0; step < [((OrgGeogebraCommonKernelConstruction *) nil_chk(construction_)) steps]; step++) {
      IOSObjectArray *geos = [((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk([construction_ getConstructionElementWithInt:step])) getGeoElements];
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(geos))->size_; j++) {
        OrgGeogebraCommonKernelGeosGeoElement *g = IOSObjectArray_Get(geos, j);
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(g)) isEuclidianVisible] && [g isGeoPoint]) [pointList_ addWithId:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoPoint class])];
      }
    }
  }
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initPointDeclarations(self);
  [self drawAllElements];
  if (!compact_) {
    [codePreamble_ appendWithNSString:@" /* Geogebra to Asymptote conversion, "];
    [codePreamble_ appendWithNSString:@"documentation at artofproblemsolving.com/Wiki, go to User:Azjps/geogebra */\n"];
  }
  [importpackage_ addWithId:@"graph"];
  for (NSString * __strong s in importpackage_) [codePreamble_ appendWithNSString:JreStrcat("$$$", @"import ", s, @"; ")];
  for (NSString * __strong s in usepackage_) [codePreamble_ appendWithNSString:JreStrcat("$$$", @"usepackage(\"", s, @"\"); ")];
  [codePreamble_ appendWithNSString:JreStrcat("$$$", @"size(", [self formatWithDouble:[frame_ getLatexWidth]], @"cm); ")];
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initUnitAndVariable(self);
  if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getShowGrid] && [frame_ getShowAxes]) OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawGrid(self);
  if (([euclidianView_ getShowXaxis] || [euclidianView_ getShowYaxis]) && [frame_ getShowAxes]) OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawAxis(self);
  [codeEndDoc_ appendWithNSString:@"\nclip((xmin,ymin)--(xmin,ymax)--(xmax,ymax)--(xmax,ymin)--cycle); "];
  if (![((OrgGeogebraCommonAwtGColor *) nil_chk([euclidianView_ getBackgroundCommon])) isEqual:OrgGeogebraCommonAwtGColor_get_WHITE_()]) {
    if (!compact_) [codeEndDoc_ appendWithNSString:@"\n"];
    [codeEndDoc_ appendWithNSString:@"shipout(bbox("];
    [self ColorCodeWithOrgGeogebraCommonAwtGColor:[euclidianView_ getBackgroundCommon] withJavaLangStringBuilder:codeEndDoc_];
    [codeEndDoc_ appendWithNSString:@",Fill)); "];
  }
  if ([((NSString *) nil_chk([self formatWithDouble:yunit_])) compareToWithId:[self formatWithDouble:xunit_]] != 0) {
    if (!compact_) [codeEndDoc_ appendWithNSString:@"\n /* re-scale y/x */\n"];
    [self packSpaceBetweenWithJavaLangStringBuilder:codeEndDoc_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"currentpicture", @"=", JreStrcat("$$C", @"yscale(", [self formatWithDouble:yunit_ / xunit_], ')'), @"*", @"currentpicture; " } count:5 type:NSString_class_()]];
  }
  if (!compact_) [codeEndDoc_ appendWithNSString:@"\n /* end of picture */"];
  [code_ appendWithNSString:@"\n"];
  if (!compact_) [code_ appendWithNSString:@" /* dots and labels */"];
  [code_ appendWithJavaLangCharSequence:codePoint_];
  if (!compact_) [code_ insertWithInt:0 withNSString:@" /* draw figures */"];
  [code_ insertWithInt:0 withNSString:@"\n"];
  [code_ insertWithInt:0 withJavaLangCharSequence:codeBeginPic_];
  [code_ insertWithInt:0 withJavaLangCharSequence:codeFilledObject_];
  if ([codeFilledObject_ length] != 0) [code_ insertWithInt:0 withNSString:@"\n"];
  [code_ insertWithInt:0 withJavaLangCharSequence:codePointDecl_];
  if (!compact_) [code_ insertWithInt:0 withJavaLangCharSequence:codeColors_];
  else if ([codeColors_ length] != 0) [code_ insertWithInt:0 withNSString:JreStrcat("$$$", @"\npen", [codeColors_ substringWithInt:1], @"; ")];
  [code_ insertWithInt:0 withJavaLangCharSequence:codePreamble_];
  [code_ appendWithJavaLangCharSequence:codeEndDoc_];
  [self convertUnicodeToTextWithJavaLangStringBuilder:code_];
  [frame_ writeWithJavaLangStringBuilder:code_];
}

- (void)drawLocusWithOrgGeogebraCommonKernelGeosGeoLocus:(OrgGeogebraCommonKernelGeosGeoLocus *)geo {
  JavaUtilArrayList *ll = [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(geo)) getPoints];
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(ll)) iterator];
  jboolean first = YES, first2 = YES;
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@" /* locus construction */\n"];
  [self startDraw];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelMyPoint *mp = [it next];
    if (((OrgGeogebraCommonKernelMyPoint *) nil_chk(mp))->x_ > xmin_ && mp->x_ < xmax_ && mp->y_ > ymin_ && mp->y_ < ymax_) {
      NSString *x = [self formatWithDouble:mp->x_], *y = [self formatWithDouble:mp->y_];
      if (first && first2) {
        [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"("];
        first = NO;
        first2 = NO;
      }
      else if (first) {
        [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"^^("];
        first = NO;
      }
      else if (mp->lineTo_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--("];
      else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"^^("];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:JreStrcat("$C$C", x, ',', y, ')')];
    }
    else first = YES;
  }
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)drawBoxPlotWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  OrgGeogebraCommonKernelAlgosAlgoBoxPlot *algo = ((OrgGeogebraCommonKernelAlgosAlgoBoxPlot *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBoxPlot class]));
  jdouble y = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoBoxPlot *) nil_chk(algo)) getA])) getDouble];
  jdouble height = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getB])) getDouble];
  IOSDoubleArray *lf = [algo getLeftBorders];
  jdouble min = IOSDoubleArray_Get(nil_chk(lf), 0);
  jdouble q1 = IOSDoubleArray_Get(lf, 1);
  jdouble med = IOSDoubleArray_Get(lf, 2);
  jdouble q3 = IOSDoubleArray_Get(lf, 3);
  jdouble max = IOSDoubleArray_Get(lf, 4);
  [self drawLineWithDouble:min withDouble:y - height withDouble:min withDouble:y + height withOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self drawLineWithDouble:max withDouble:y - height withDouble:max withDouble:y + height withOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self drawLineWithDouble:med withDouble:y - height withDouble:med withDouble:y + height withOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self drawLineWithDouble:min withDouble:y withDouble:q1 withDouble:y withOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self drawLineWithDouble:q3 withDouble:y withDouble:max withDouble:y withOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
  [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"box("];
  [self addPointWithNSString:[self formatWithDouble:q1] withNSString:[self formatWithDouble:y - height] withJavaLangStringBuilder:codeFilledObject_];
  [codeFilledObject_ appendWithNSString:@","];
  [self addPointWithNSString:[self formatWithDouble:q3] withNSString:[self formatWithDouble:y + height] withJavaLangStringBuilder:codeFilledObject_];
  [codeFilledObject_ appendWithNSString:@")"];
  [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
}

- (void)drawHistogramOrBarChartBoxWithDoubleArray:(IOSDoubleArray *)y
                                  withDoubleArray:(IOSDoubleArray *)x
                                          withInt:(jint)length
                                       withDouble:(jdouble)width
        withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)g {
  NSString *command = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(g)) getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()];
  if ([((NSString *) nil_chk(command)) contains:@"Binomial"] && [command contains:@"true"]) {
    [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
    [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:JreStrcat("C$", '(', [self formatWithDouble:IOSDoubleArray_Get(nil_chk(x), 0) + width / 2])];
    [codeFilledObject_ appendWithNSString:@",0) -- ("];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, 0) + width / 2]];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:JreStrcat("$C", [self formatWithDouble:IOSDoubleArray_Get(nil_chk(y), 0)], ')')];
    [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:g withJavaLangStringBuilder:codeFilledObject_];
    for (jint i = 0; i < length - 1; i++) {
      [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
      [codeFilledObject_ appendWithNSString:JreStrcat("C$", '(', [self formatWithDouble:IOSDoubleArray_Get(x, i) + width / 2])];
      [codeFilledObject_ appendWithNSString:JreStrcat("C$$", ',', [self formatWithDouble:IOSDoubleArray_Get(y, i)], @") -- (")];
      [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, i + 1) + width / 2]];
      [codeFilledObject_ appendWithNSString:@","];
      [codeFilledObject_ appendWithNSString:JreStrcat("$C", [self formatWithDouble:IOSDoubleArray_Get(y, i)], ')')];
      [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:g withJavaLangStringBuilder:codeFilledObject_];
      [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
      [codeFilledObject_ appendWithNSString:JreStrcat("C$", '(', [self formatWithDouble:IOSDoubleArray_Get(x, i + 1) + width / 2])];
      [codeFilledObject_ appendWithNSString:JreStrcat("C$$", ',', [self formatWithDouble:IOSDoubleArray_Get(y, i)], @") -- (")];
      [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, i + 1) + width / 2]];
      [codeFilledObject_ appendWithNSString:@","];
      [codeFilledObject_ appendWithNSString:JreStrcat("$C", [self formatWithDouble:IOSDoubleArray_Get(y, i + 1)], ')')];
      [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:g withJavaLangStringBuilder:codeFilledObject_];
    }
  }
  else {
    for (jint i = 0; i < length; i++) {
      barNumber_ = i + 1;
      [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
      [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"box(("];
      [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(x), i)]];
      [codeFilledObject_ appendWithNSString:@",0),("];
      if (x->size_ == length) {
        [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, i) + width]];
      }
      else {
        [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, i + 1)]];
      }
      [codeFilledObject_ appendWithNSString:@","];
      [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(y), i)]];
      [codeFilledObject_ appendWithNSString:@"))"];
      [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:g withJavaLangStringBuilder:codeFilledObject_];
    }
  }
}

- (void)drawSumTrapezoidalWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *algo = (OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class]);
  jint n = [((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(algo)) getIntervals];
  IOSDoubleArray *y = [algo getValues];
  IOSDoubleArray *x = [algo getLeftBorder];
  for (jint i = 0; i < n; i++) {
    [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
    [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"("];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(x), i)]];
    [codeFilledObject_ appendWithNSString:@",0)--("];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, i + 1)]];
    [codeFilledObject_ appendWithNSString:@",0)--("];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, i + 1)]];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(y), i + 1)]];
    [codeFilledObject_ appendWithNSString:@")--("];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, i)]];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(y, i)]];
    [codeFilledObject_ appendWithNSString:@")--cycle"];
    [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
  }
}

- (void)drawSumUpperLowerWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *algo = (OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class]);
  jint n = [((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(algo)) getIntervals];
  jdouble step = [algo getStep];
  IOSDoubleArray *y = [algo getValues];
  IOSDoubleArray *x = [algo getLeftBorder];
  for (jint i = 0; i < n; i++) {
    [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
    [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"box(("];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(x), i)]];
    [codeFilledObject_ appendWithNSString:@",0),("];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, i) + step]];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(y), i)]];
    [codeFilledObject_ appendWithNSString:@"))"];
    [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
  }
}

- (void)drawIntegralFunctionsWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  [((id<JavaUtilSet>) nil_chk(importpackage_)) addWithId:@"graph"];
  OrgGeogebraCommonKernelCasAlgoIntegralFunctions *algo = (OrgGeogebraCommonKernelCasAlgoIntegralFunctions *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) getParentAlgorithm], [OrgGeogebraCommonKernelCasAlgoIntegralFunctions class]);
  OrgGeogebraCommonKernelGeosGeoFunction *f = [((OrgGeogebraCommonKernelCasAlgoIntegralFunctions *) nil_chk(algo)) getF], *g = [algo getG];
  jdouble a = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getA])) getDouble], b = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getB])) getDouble];
  NSString *sa = [self formatWithDouble:a], *sb = [self formatWithDouble:b];
  NSString *valueF = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[self getStringTemplate]], *valueG = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(g)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[self getStringTemplate]];
  valueF = [self parseFunctionWithNSString:valueF];
  valueG = [self parseFunctionWithNSString:valueG];
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"\n"];
  jint indexFunc = -1;
  NSString *tempFunctionCountF = JreStrcat("C$", 'f', JavaLangInteger_toStringWithInt_(functionCount_ + 1));
  NSString *returnCode = JreStrcat("$$$", @"(real x){return ", valueF, @";} ");
  if (compact_) {
    indexFunc = [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) indexOfWithNSString:returnCode];
    if (indexFunc != -1) {
      jint indexFuncStart = [codeFilledObject_ lastIndexOfWithNSString:@" " withInt:indexFunc];
      tempFunctionCountF = [codeFilledObject_ substringWithInt:indexFuncStart + 1 withInt:indexFunc];
    }
  }
  if (indexFunc == -1) {
    functionCount_++;
    [self packSpaceBetweenWithJavaLangStringBuilder:codeFilledObject_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$I", @"real f", functionCount_), @"(real x)", @"{", JreStrcat("$$C", @"return ", valueF, ';'), @"} " } count:5 type:NSString_class_()]];
  }
  indexFunc = -1;
  NSString *tempFunctionCountG = JreStrcat("C$", 'f', JavaLangInteger_toStringWithInt_(functionCount_ + 1));
  returnCode = JreStrcat("$$$", @"(real x){return ", valueG, @";} ");
  if (compact_) {
    indexFunc = [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) indexOfWithNSString:returnCode];
    if (indexFunc != -1) {
      jint indexFuncStart = [codeFilledObject_ lastIndexOfWithNSString:@" " withInt:indexFunc];
      tempFunctionCountG = [codeFilledObject_ substringWithInt:indexFuncStart + 1 withInt:indexFunc];
    }
  }
  if (indexFunc == -1) {
    functionCount_++;
    [self packSpaceBetweenWithJavaLangStringBuilder:codeFilledObject_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$I", @"real f", functionCount_), @"(real x)", @"{", JreStrcat("$$C", @"return ", valueG, ';'), @"} " } count:5 type:NSString_class_()]];
  }
  [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
  [self packSpaceBetweenWithJavaLangStringBuilder:codeFilledObject_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$C", @"graph(", tempFunctionCountF, ','), JreStrcat("$C", sa, ','), JreStrcat("$C", sb, ')'), @"--", JreStrcat("$$C", @"graph(", tempFunctionCountG, ','), JreStrcat("$C", sb, ','), JreStrcat("$C", sa, ')'), @"--cycle" } count:8 type:NSString_class_()]];
  [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
}

- (void)drawIntegralWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  [((id<JavaUtilSet>) nil_chk(importpackage_)) addWithId:@"graph"];
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite *algo = (OrgGeogebraCommonKernelCasAlgoIntegralDefinite *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) getParentAlgorithm], [OrgGeogebraCommonKernelCasAlgoIntegralDefinite class]);
  OrgGeogebraCommonKernelGeosGeoFunction *f = [((OrgGeogebraCommonKernelCasAlgoIntegralDefinite *) nil_chk(algo)) getFunction];
  NSString *a = [self formatWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getA])) getDouble]];
  NSString *b = [self formatWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getB])) getDouble]];
  if ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getA])) getDouble] == JavaLangDouble_NEGATIVE_INFINITY) {
    a = [self formatWithDouble:xmin_];
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getB])) getDouble] == JavaLangDouble_POSITIVE_INFINITY) {
    b = [self formatWithDouble:xmax_];
  }
  NSString *value = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[self getStringTemplate]];
  value = [self parseFunctionWithNSString:value];
  if (![self isLatexFunctionWithNSString:[f toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()]]) {
    jdouble af = xmin_;
    jdouble bf = xmax_;
    if ([f hasInterval]) {
      af = [f getIntervalMin];
      bf = [f getIntervalMax];
    }
    [f setIntervalWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getA])) getDouble] withDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([algo getB])) getDouble]];
    [self drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:f withBoolean:YES withOrgGeogebraCommonKernelGeosGeoNumeric:geo withBoolean:YES];
    [self drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:f withBoolean:YES withOrgGeogebraCommonKernelGeosGeoNumeric:geo withBoolean:NO];
    [f setIntervalWithDouble:af withDouble:bf];
    if ([f isEuclidianVisible]) {
      [self drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:f withBoolean:NO withOrgGeogebraCommonKernelGeosGeoNumeric:geo withBoolean:NO];
    }
  }
  else {
    jint indexFunc = -1;
    NSString *tempFunctionCount = JreStrcat("C$", 'f', JavaLangInteger_toStringWithInt_(functionCount_ + 1));
    NSString *returnCode = JreStrcat("$$$", @"(real x){return (", value, @");} ");
    if (compact_) {
      indexFunc = [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) indexOfWithNSString:returnCode];
      if (indexFunc != -1) {
        jint indexFuncStart = [codeFilledObject_ lastIndexOfWithNSString:@" " withInt:indexFunc];
        tempFunctionCount = [codeFilledObject_ substringWithInt:indexFuncStart + 1 withInt:indexFunc];
      }
    }
    if (indexFunc == -1) {
      functionCount_++;
      if (!compact_) [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"\n"];
      [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"real f"];
      [codeFilledObject_ appendWithInt:functionCount_];
      [self packSpaceWithJavaLangStringBuilder:codeFilledObject_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real x)" } count:1 type:NSString_class_()]];
      [codeFilledObject_ appendWithNSString:@"{return "];
      [codeFilledObject_ appendWithNSString:value];
      [codeFilledObject_ appendWithNSString:@";} "];
    }
    [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
    [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"graph("];
    [codeFilledObject_ appendWithNSString:tempFunctionCount];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:a];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:b];
    [codeFilledObject_ appendWithNSString:@")--"];
    [self addPointWithNSString:b withNSString:@"0" withJavaLangStringBuilder:codeFilledObject_];
    [codeFilledObject_ appendWithNSString:@"--"];
    [self addPointWithNSString:a withNSString:@"0" withJavaLangStringBuilder:codeFilledObject_];
    [codeFilledObject_ appendWithNSString:@"--cycle"];
    [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
  }
}

- (void)drawSlopeWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  jint slopeTriangleSize = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) getSlopeTriangleSize];
  jdouble rwHeight = [geo getValue] * slopeTriangleSize;
  jdouble height = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getYscale] * rwHeight;
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:2];
  if (JavaLangMath_absWithDouble_(height) > JavaLangFloat_MAX_VALUE) {
    return;
  }
  OrgGeogebraCommonKernelGeosGeoLine *g = [((OrgGeogebraCommonKernelAlgosAlgoSlope *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoSlope *) check_class_cast([geo getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoSlope class])))) getg];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getInhomPointOnLineWithDoubleArray:coords];
  jfloat x = (jfloat) IOSDoubleArray_Get(coords, 0);
  jfloat y = (jfloat) IOSDoubleArray_Get(coords, 1);
  jfloat xright = x + slopeTriangleSize;
  [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
  [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:codeFilledObject_];
  [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"--"];
  [self addPointWithNSString:[self formatWithDouble:xright] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:codeFilledObject_];
  [codeFilledObject_ appendWithNSString:@"--"];
  [self addPointWithNSString:[self formatWithDouble:xright] withNSString:[self formatWithDouble:y + rwHeight] withJavaLangStringBuilder:codeFilledObject_];
  [codeFilledObject_ appendWithNSString:@"--cycle"];
  [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
  jfloat xLabelHor = (x + xright) / 2;
  jfloat yLabelHor = y - (jfloat) (([((OrgGeogebraCommonAwtGFont *) nil_chk([euclidianView_ getFont])) getSize] + 2) / [euclidianView_ getYscale]);
  OrgGeogebraCommonAwtGColor *geocolor = [geo getObjectColor];
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"\n"];
  [self packSpaceAfterWithJavaLangStringBuilder:codePoint_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$I$", @"label(\"$", slopeTriangleSize, @"$\","), JreStrcat("C$C", '(', [self formatWithDouble:xLabelHor], ','), JreStrcat("$$", [self formatWithDouble:yLabelHor], @"),"), @"NE", @"*" } count:5 type:NSString_class_()]];
  if (compact_) [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"lsf"];
  else [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"labelscalefactor"];
  if (![((OrgGeogebraCommonAwtGColor *) nil_chk(geocolor)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) {
    [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@","];
    [self ColorCodeWithOrgGeogebraCommonAwtGColor:geocolor withJavaLangStringBuilder:codePoint_];
  }
  [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"); "];
}

- (void)drawAngleWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo {
  jint arcSize = [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(geo)) getArcSize];
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [geo getParentAlgorithm];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> vertex, point;
  id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v;
  OrgGeogebraCommonKernelGeosGeoLine *line, *line2;
  OrgGeogebraCommonKernelGeosGeoPoint *tempPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(construction_) autorelease];
  [tempPoint setCoordsWithDouble:0.0 withDouble:0.0 withDouble:1.0];
  IOSDoubleArray *firstVec = [IOSDoubleArray arrayWithLength:2];
  IOSDoubleArray *m = [IOSDoubleArray arrayWithLength:2];
  if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAnglePoints class]]) {
    OrgGeogebraCommonKernelAlgosAlgoAnglePoints *pa = (OrgGeogebraCommonKernelAlgosAlgoAnglePoints *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoAnglePoints class]);
    vertex = [((OrgGeogebraCommonKernelAlgosAlgoAnglePoints *) nil_chk(pa)) getB];
    point = [pa getA];
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(vertex)) getInhomCoordsWithDoubleArray:m];
    OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3];
    *IOSDoubleArray_GetRef(firstVec, 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] - IOSDoubleArray_Get(m, 0);
    *IOSDoubleArray_GetRef(firstVec, 1) = [coords getY] - IOSDoubleArray_Get(m, 1);
  }
  else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAngleVectors class]]) {
    OrgGeogebraCommonKernelAlgosAlgoAngleVectors *va = (OrgGeogebraCommonKernelAlgosAlgoAngleVectors *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoAngleVectors class]);
    v = [((OrgGeogebraCommonKernelAlgosAlgoAngleVectors *) nil_chk(va)) getv];
    vertex = [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) getStartPoint];
    if (vertex == nil) vertex = tempPoint;
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(vertex)) getInhomCoordsWithDoubleArray:m];
    [v getInhomCoordsWithDoubleArray:firstVec];
  }
  else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAngleLines class]]) {
    OrgGeogebraCommonKernelAlgosAlgoAngleLines *la = (OrgGeogebraCommonKernelAlgosAlgoAngleLines *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoAngleLines class]);
    vertex = tempPoint;
    [((OrgGeogebraCommonKernelAlgosAlgoAngleLines *) nil_chk(la)) updateDrawInfoWithDoubleArray:m withDoubleArray:firstVec withOrgGeogebraCommonEuclidianDrawDrawAngle:nil];
  }
  else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAngleVector class]]) {
    OrgGeogebraCommonKernelAlgosAlgoAngleVector *va = (OrgGeogebraCommonKernelAlgosAlgoAngleVector *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoAngleVector class]);
    OrgGeogebraCommonKernelGeosGeoVec3D *vec = [((OrgGeogebraCommonKernelAlgosAlgoAngleVector *) nil_chk(va)) getVec3D];
    if ([vec isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]]) {
      v = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(vec, [OrgGeogebraCommonKernelGeosGeoVector class]);
      vertex = [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) getStartPoint];
      if (vertex == nil) vertex = tempPoint;
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(vertex)) getInhomCoordsWithDoubleArray:m];
    }
    else if ([vec isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) {
      point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(vec, [OrgGeogebraCommonKernelGeosGeoPoint class]);
      vertex = tempPoint;
      [vertex getInhomCoordsWithDoubleArray:m];
    }
    *IOSDoubleArray_GetRef(firstVec, 0) = 1;
    *IOSDoubleArray_GetRef(firstVec, 1) = 0;
  }
  [tempPoint remove];
  jdouble angSt = JavaLangMath_atan2WithDouble_withDouble_(IOSDoubleArray_Get(firstVec, 1), IOSDoubleArray_Get(firstVec, 0));
  jdouble angExt = [geo getRawAngle];
  if (angExt > JavaLangMath_PI * 2) angExt -= JavaLangMath_PI * 2;
  if ([geo getAngleStyle] == OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_NOTREFLEX()) {
    if (angExt > JavaLangMath_PI) {
      angSt += angExt;
      angExt = 2.0 * JavaLangMath_PI - angExt;
    }
  }
  if ([geo getAngleStyle] == OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ISREFLEX()) {
    if (angExt < JavaLangMath_PI) {
      angSt += angExt;
      angExt = 2.0 * JavaLangMath_PI - angExt;
    }
  }
  angExt += angSt;
  jdouble r = arcSize / [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getXscale];
  [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([geo getValue], OrgGeogebraCommonKernelKernel_PI_HALF) && [geo isEmphasizeRightAngle] && [euclidianView_ getRightAngleStyle] == OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_SQUARE) {
    r = r / JavaLangMath_sqrtWithDouble_(2);
    IOSDoubleArray *x = [IOSDoubleArray arrayWithLength:8];
    *IOSDoubleArray_GetRef(x, 0) = IOSDoubleArray_Get(m, 0) + r * JavaLangMath_cosWithDouble_(angSt);
    *IOSDoubleArray_GetRef(x, 1) = IOSDoubleArray_Get(m, 1) + r * JavaLangMath_sinWithDouble_(angSt);
    *IOSDoubleArray_GetRef(x, 2) = IOSDoubleArray_Get(m, 0) + r * JavaLangMath_sqrtWithDouble_(2) * JavaLangMath_cosWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF / 2);
    *IOSDoubleArray_GetRef(x, 3) = IOSDoubleArray_Get(m, 1) + r * JavaLangMath_sqrtWithDouble_(2) * JavaLangMath_sinWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF / 2);
    *IOSDoubleArray_GetRef(x, 4) = IOSDoubleArray_Get(m, 0) + r * JavaLangMath_cosWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF);
    *IOSDoubleArray_GetRef(x, 5) = IOSDoubleArray_Get(m, 1) + r * JavaLangMath_sinWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF);
    *IOSDoubleArray_GetRef(x, 6) = IOSDoubleArray_Get(m, 0);
    *IOSDoubleArray_GetRef(x, 7) = IOSDoubleArray_Get(m, 1);
    for (jint i = 0; i < 4; i++) {
      [self addPointWithNSString:[self formatWithDouble:IOSDoubleArray_Get(x, 2 * i)] withNSString:[self formatWithDouble:IOSDoubleArray_Get(x, 2 * i + 1)] withJavaLangStringBuilder:codeFilledObject_];
      [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"--"];
    }
    [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"cycle"];
    [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"arc("];
    [self addPointWithNSString:[self formatWithDouble:IOSDoubleArray_Get(m, 0)] withNSString:[self formatWithDouble:IOSDoubleArray_Get(m, 1)] withJavaLangStringBuilder:codeFilledObject_];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:r]];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:JavaLangMath_toDegreesWithDouble_(angSt)]];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:JavaLangMath_toDegreesWithDouble_(angExt)]];
    [codeFilledObject_ appendWithNSString:@")--("];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(m, 0)]];
    [codeFilledObject_ appendWithNSString:@","];
    [codeFilledObject_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(m, 1)]];
    [codeFilledObject_ appendWithNSString:@")--cycle"];
    [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
    if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([geo getValue], OrgGeogebraCommonKernelKernel_PI_HALF) && [geo isEmphasizeRightAngle] && [euclidianView_ getRightAngleStyle] == OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_DOT) {
      jdouble diameter = geo->lineThickness_ / [euclidianView_ getXscale];
      jdouble radius = arcSize / [euclidianView_ getXscale] / 1.7;
      jdouble labelAngle = (angSt + angExt) / 2.0;
      jdouble x1 = IOSDoubleArray_Get(m, 0) + radius * JavaLangMath_cosWithDouble_(labelAngle);
      jdouble x2 = IOSDoubleArray_Get(m, 1) + radius * JavaLangMath_sinWithDouble_(labelAngle);
      [self startDraw];
      if (compactcse5_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"CR("];
      else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"circle("];
      [self addPointWithNSString:[self formatWithDouble:x1] withNSString:[self formatWithDouble:x2] withJavaLangStringBuilder:code_];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@","];
      [code_ appendWithNSString:[self formatWithDouble:diameter]];
      [code_ appendWithNSString:@")"];
      [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    if (geo->decorationType_ != OrgGeogebraCommonKernelGeosGeoElement_DECORATION_NONE) {
      [self markAngleWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDouble:r withDoubleArray:m withDouble:angSt withDouble:angExt];
    }
  }
}

- (void)drawArrowArcWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo
                                            withDoubleArray:(IOSDoubleArray *)vertex
                                                 withDouble:(jdouble)angSt
                                                 withDouble:(jdouble)angEnd
                                                 withDouble:(jdouble)r
                                                withBoolean:(jboolean)anticlockwise {
  jdouble arrowHeight = (((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(geo))->lineThickness_ * 0.8 + 3) * 1.4 * 3 / 4;
  jdouble angle = JavaLangMath_asinWithDouble_(arrowHeight / 2 / [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getXscale] / r);
  angEnd = angEnd - angle;
  [self startDraw];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"arc("];
  [self addPointWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(vertex), 0)] withNSString:[self formatWithDouble:IOSDoubleArray_Get(vertex, 1)] withJavaLangStringBuilder:code_];
  [code_ appendWithNSString:@","];
  [code_ appendWithNSString:[self formatWithDouble:r]];
  [code_ appendWithNSString:@","];
  [code_ appendWithNSString:[self formatWithDouble:JavaLangMath_toDegreesWithDouble_(angSt)]];
  [code_ appendWithNSString:@","];
  [code_ appendWithNSString:[self formatWithDouble:JavaLangMath_toDegreesWithDouble_(angEnd)]];
  [code_ appendWithNSString:@")"];
  if (OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES) != nil) {
    [self packSpaceAfterWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    [code_ appendWithNSString:OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES)];
  }
  if (anticlockwise) [code_ appendWithNSString:@",EndArcArrow(6)"];
  else [code_ appendWithNSString:@",BeginArcArrow(6)"];
  [code_ appendWithNSString:@"); "];
}

- (void)drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo
                                       withDoubleArray:(IOSDoubleArray *)vertex
                                            withDouble:(jdouble)angSt
                                            withDouble:(jdouble)angEnd
                                            withDouble:(jdouble)r {
  [self startDraw];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"arc("];
  [self addPointWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(vertex), 0)] withNSString:[self formatWithDouble:IOSDoubleArray_Get(vertex, 1)] withJavaLangStringBuilder:code_];
  [code_ appendWithNSString:@","];
  [code_ appendWithNSString:[self formatWithDouble:r]];
  [code_ appendWithNSString:@","];
  [code_ appendWithNSString:[self formatWithDouble:JavaLangMath_toDegreesWithDouble_(angSt)]];
  [code_ appendWithNSString:@","];
  [code_ appendWithNSString:[self formatWithDouble:JavaLangMath_toDegreesWithDouble_(angEnd)]];
  [code_ appendWithNSString:@")"];
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo
                                        withDoubleArray:(IOSDoubleArray *)vertex
                                             withDouble:(jdouble)angle {
  angle = -angle;
  jdouble radius = [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(geo)) getArcSize];
  jdouble diff = 2.5 + geo->lineThickness_ / 4.0;
  jdouble x1 = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toRealWorldCoordXWithDouble:IOSDoubleArray_Get(nil_chk(vertex), 0) + (radius - diff) * JavaLangMath_cosWithDouble_(angle)];
  jdouble x2 = [euclidianView_ toRealWorldCoordXWithDouble:IOSDoubleArray_Get(vertex, 0) + (radius + diff) * JavaLangMath_cosWithDouble_(angle)];
  jdouble y1 = [euclidianView_ toRealWorldCoordYWithDouble:IOSDoubleArray_Get(vertex, 1) + (radius - diff) * JavaLangMath_sinWithDouble_(angle) * [euclidianView_ getScaleRatio]];
  jdouble y2 = [euclidianView_ toRealWorldCoordYWithDouble:IOSDoubleArray_Get(vertex, 1) + (radius + diff) * JavaLangMath_sinWithDouble_(angle) * [euclidianView_ getScaleRatio]];
  [self startDraw];
  [self addPointWithNSString:[self formatWithDouble:x1] withNSString:[self formatWithDouble:y1] withJavaLangStringBuilder:code_];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--"];
  [self addPointWithNSString:[self formatWithDouble:x2] withNSString:[self formatWithDouble:y2] withJavaLangStringBuilder:code_];
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)drawSliderWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  jboolean horizontal = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) isSliderHorizontal];
  jdouble max = [geo getIntervalMax];
  jdouble min = [geo getIntervalMin];
  jdouble value = [geo getValue];
  jdouble width = [geo getSliderWidth];
  jdouble x = [geo getSliderX];
  jdouble y = [geo getSliderY];
  if ([geo isAbsoluteScreenLocActive]) {
    x = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toRealWorldCoordXWithDouble:x];
    y = [euclidianView_ toRealWorldCoordYWithDouble:y];
    width = horizontal ? width / [euclidianView_ getXscale] : width / [euclidianView_ getYscale];
  }
  OrgGeogebraCommonKernelGeosGeoPoint *geoPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(construction_) autorelease];
  [geoPoint setObjColorWithOrgGeogebraCommonAwtGColor:[geo getObjectColor]];
  NSString *label = OrgGeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_([geo getLabelDescription], YES);
  [geoPoint setLabelWithNSString:label];
  jdouble param = (value - min) / (max - min);
  [geoPoint setPointSizeWithInt:2 + (geo->lineThickness_ + 1) / 3];
  [geoPoint setLabelVisibleWithBoolean:[geo isLabelVisible]];
  if (horizontal) [geoPoint setCoordsWithDouble:x + width * param withDouble:y withDouble:1.0];
  else [geoPoint setCoordsWithDouble:x withDouble:y + width * param withDouble:1.0];
  OrgGeogebraCommonEuclidianDrawDrawPoint *drawPoint = [new_OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_(euclidianView_, geoPoint) autorelease];
  [drawPoint setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if ([geo isLabelVisible]) {
    if (horizontal) {
      drawPoint->xLabel_ -= 15;
      drawPoint->yLabel_ -= 5;
    }
    else {
      drawPoint->xLabel_ += 5;
      drawPoint->yLabel_ += 2 * [geoPoint getPointSize] + 4;
    }
  }
  [self drawGeoPointWithOrgGeogebraCommonKernelGeosGeoPoint:geoPoint];
  [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:geoPoint withOrgGeogebraCommonEuclidianDrawableND:drawPoint];
  [geoPoint remove];
  [self startDraw];
  [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:code_];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--"];
  if (horizontal) x += width;
  else y += width;
  [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:code_];
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)drawPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)geo {
  IOSObjectArray *points = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(geo)) getPoints];
  [self startTransparentFillWithJavaLangStringBuilder:codeFilledObject_];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
    OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getCoordsInD2];
    jdouble x = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], y = [coords getY], z = [coords getZ];
    x = x / z;
    y = y / z;
    [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:codeFilledObject_];
    [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"--"];
  }
  [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithNSString:@"cycle"];
  [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:codeFilledObject_];
}

- (void)drawTextWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)geo {
  jboolean isLatex = [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(geo)) isLaTeX];
  NSString *st = [geo getTextString];
  if (isLatex) st = OrgGeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_(st, YES);
  if ([((NSString *) nil_chk(st)) indexOfString:@"\u20ac"] != -1) {
    st = [st replace:@"\\u20ac" withSequence:@"\\\\euro{}"];
    if (!eurosym_) [((JavaLangStringBuilder *) nil_chk(codePreamble_)) appendWithNSString:@"usepackage(\"eurosym\"); "];
  }
  OrgGeogebraCommonAwtGColor *geocolor = [geo getObjectColor];
  jint style = [geo getFontStyle];
  jint size = J2ObjCFpToInt(([geo getFontSizeMultiplier] * [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getFontSize]));
  OrgGeogebraCommonKernelGeosGeoPoint *gp;
  jdouble x, y;
  if ([geo isAbsoluteScreenLocActive]) {
    x = [geo getAbsoluteScreenLocX];
    y = [geo getAbsoluteScreenLocY];
  }
  else {
    gp = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([geo getStartPoint], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    if (gp == nil) {
      x = J2ObjCFpToInt([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getXZero]);
      y = J2ObjCFpToInt([euclidianView_ getYZero]);
    }
    else {
      if (![gp isDefined]) {
        return;
      }
      x = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toScreenCoordXWithDouble:gp->inhomX_];
      y = [euclidianView_ toScreenCoordYWithDouble:gp->inhomY_];
    }
    x += geo->labelOffsetX_;
    y += geo->labelOffsetY_;
  }
  x = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toRealWorldCoordXWithDouble:x];
  y = [euclidianView_ toRealWorldCoordYWithDouble:y - [((OrgGeogebraCommonAwtGFont *) nil_chk([euclidianView_ getFont])) getSize]];
  jint id_ = [((NSString *) nil_chk(st)) indexOfString:@"\n"];
  jboolean comma = NO;
  if (id_ == -1) {
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"label(\""];
    OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_addTextWithNSString_withBoolean_withInt_(self, st, isLatex, style);
    [code_ appendWithNSString:@"\","];
    [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:code_];
    [code_ appendWithNSString:@",SE*"];
    if (compact_) [code_ appendWithNSString:@"lsf"];
    else [code_ appendWithNSString:@"labelscalefactor"];
    if (![((OrgGeogebraCommonAwtGColor *) nil_chk(geocolor)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) {
      [code_ appendWithNSString:@","];
      comma = YES;
      [self ColorCodeWithOrgGeogebraCommonAwtGColor:geocolor withJavaLangStringBuilder:code_];
    }
    if (size != [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getFontSize]) {
      if (!comma) [code_ appendWithNSString:@","];
      else [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:@"fontsize("];
      [code_ appendWithInt:fontsize_ + (size - [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getFontSize])];
      [code_ appendWithNSString:@")"];
    }
    else if (compactcse5_) {
      if (!comma) [code_ appendWithNSString:@","];
      else [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:@"fp"];
    }
    [code_ appendWithNSString:@"); "];
  }
  else {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    OrgGeogebraCommonUtilGStringTokenizer *stk = [new_OrgGeogebraCommonUtilGStringTokenizer_initWithNSString_withChar_(st, 0x000a) autorelease];
    jint width = 0;
    OrgGeogebraCommonAwtGFont *font = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newFontWithNSString:[geo isSerifFont] ? @"Serif" : @"SansSerif" withInt:style withInt:size];
    while ([stk hasMoreTokens]) {
      NSString *line = [stk nextToken];
      width = JavaLangMath_maxWithInt_withInt_(width, J2ObjCFpToInt(JavaLangMath_ceilWithDouble_([((OrgGeogebraCommonUtilStringUtil *) nil_chk(OrgGeogebraCommonUtilStringUtil_get_prototype_())) estimateLengthWithNSString:line withOrgGeogebraCommonAwtGFont:font])));
      [sb appendWithNSString:line];
      if ([stk hasMoreTokens]) [sb appendWithNSString:@" \\\\ "];
    }
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"label(\"$"];
    [code_ appendWithNSString:@"\\parbox{"];
    [code_ appendWithNSString:[self formatWithDouble:width * (xmax_ - xmin_) * xunit_ / [euclidianView_ getWidth] + 1]];
    [code_ appendWithNSString:@" cm}{"];
    OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_addTextWithNSString_withBoolean_withInt_(self, [NSString stringWithJavaLangStringBuilder:sb], isLatex, style);
    [code_ appendWithNSString:@"}$\","];
    [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:code_];
    [code_ appendWithNSString:@",SE*"];
    if (compact_) [code_ appendWithNSString:@"lsf"];
    else [code_ appendWithNSString:@"labelscalefactor"];
    if (![((OrgGeogebraCommonAwtGColor *) nil_chk(geocolor)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) {
      [code_ appendWithNSString:@","];
      comma = YES;
      [self ColorCodeWithOrgGeogebraCommonAwtGColor:geocolor withJavaLangStringBuilder:code_];
    }
    if (size != [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getFontSize]) {
      if (!comma) [code_ appendWithNSString:@","];
      else [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:@"fontsize("];
      [code_ appendWithInt:fontsize_ + (size - [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getFontSize])];
      [code_ appendWithNSString:@")"];
    }
    else if (compactcse5_) {
      if (!comma) [code_ appendWithNSString:@","];
      else [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:@"fp"];
    }
    [code_ appendWithNSString:@"); "];
  }
}

- (void)drawGeoConicPartWithOrgGeogebraCommonKernelGeosGeoConicPart:(OrgGeogebraCommonKernelGeosGeoConicPart *)geo {
  JavaLangStringBuilder *tempsb = [new_JavaLangStringBuilder_init() autorelease];
  jdouble r1 = IOSDoubleArray_Get(nil_chk([((OrgGeogebraCommonKernelGeosGeoConicPart *) nil_chk(geo)) getHalfAxes]), 0), r2 = IOSDoubleArray_Get(nil_chk([geo getHalfAxes]), 1);
  jdouble startAngle = [geo getParameterStart];
  jdouble endAngle = [geo getParameterEnd];
  id<OrgGeogebraCommonAwtGAffineTransform> af = [geo getAffineTransform];
  jdouble m11 = [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(af)) getScaleX];
  jdouble m22 = [af getScaleY];
  jdouble m12 = [af getShearX];
  jdouble m21 = [af getShearY];
  jdouble tx = [af getTranslateX];
  jdouble ty = [af getTranslateY];
  if (startAngle > endAngle) {
    startAngle -= JavaLangMath_PI * 2;
  }
  if (m11 == 1 && m22 == 1 && m12 == 0 && m21 == 0) {
    if ([geo getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR && fillType_ != OrgGeogebraCommonExportPstricksExportSettings_FILL_NONE) [self startTransparentFillWithJavaLangStringBuilder:tempsb];
    else [self startDrawWithJavaLangStringBuilder:tempsb];
    [tempsb appendWithNSString:@"shift("];
    [self addPointWithNSString:[self formatWithDouble:tx] withNSString:[self formatWithDouble:ty] withJavaLangStringBuilder:tempsb];
    [tempsb appendWithNSString:@")*xscale("];
    [tempsb appendWithNSString:[self formatWithDouble:r1]];
    [tempsb appendWithNSString:@")*yscale("];
    [tempsb appendWithNSString:[self formatWithDouble:r2]];
    [tempsb appendWithNSString:@")*arc((0,0),1,"];
    [tempsb appendWithNSString:[self formatWithDouble:JavaLangMath_toDegreesWithDouble_(startAngle)]];
    [tempsb appendWithNSString:@","];
    [tempsb appendWithNSString:[self formatWithDouble:JavaLangMath_toDegreesWithDouble_(endAngle)]];
    [tempsb appendWithNSString:@")"];
  }
  else {
    JavaLangStringBuilder *sb1 = [new_JavaLangStringBuilder_init() autorelease], *sb2 = [new_JavaLangStringBuilder_init() autorelease];
    [sb1 appendWithNSString:[self formatWithDouble:r1]];
    [sb1 appendWithNSString:@"*cos(t)"];
    [sb2 appendWithNSString:[self formatWithDouble:r2]];
    [sb2 appendWithNSString:@"*sin(t)"];
    arcCount_++;
    if (!compact_) [tempsb appendWithNSString:@"\n"];
    [tempsb appendWithNSString:@"pair arc"];
    [tempsb appendWithInt:arcCount_];
    [self packSpaceWithJavaLangStringBuilder:tempsb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real t)" } count:1 type:NSString_class_()]];
    [tempsb appendWithNSString:@"{return ("];
    [tempsb appendWithNSString:[self formatWithDouble:m11]];
    [tempsb appendWithNSString:@"*"];
    [tempsb appendWithJavaLangCharSequence:sb1];
    [tempsb appendWithNSString:@"+"];
    [tempsb appendWithNSString:[self formatWithDouble:m12]];
    [tempsb appendWithNSString:@"*"];
    [tempsb appendWithJavaLangCharSequence:sb2];
    [tempsb appendWithNSString:@"+"];
    [tempsb appendWithNSString:[self formatWithDouble:tx]];
    [tempsb appendWithNSString:@","];
    [tempsb appendWithNSString:[self formatWithDouble:m21]];
    [tempsb appendWithNSString:@"*"];
    [tempsb appendWithJavaLangCharSequence:sb1];
    [tempsb appendWithNSString:@"+"];
    [tempsb appendWithNSString:[self formatWithDouble:m22]];
    [tempsb appendWithNSString:@"*"];
    [tempsb appendWithJavaLangCharSequence:sb2];
    [tempsb appendWithNSString:@"+"];
    [tempsb appendWithNSString:[self formatWithDouble:ty]];
    [tempsb appendWithNSString:@");} "];
    if ([geo getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR && fillType_ != OrgGeogebraCommonExportPstricksExportSettings_FILL_NONE) [self startTransparentFillWithJavaLangStringBuilder:tempsb];
    else [self startDrawWithJavaLangStringBuilder:tempsb];
    [tempsb appendWithNSString:@"graph(arc"];
    [tempsb appendWithInt:arcCount_];
    [tempsb appendWithNSString:@","];
    [tempsb appendWithNSString:[self formatWithDouble:startAngle]];
    [tempsb appendWithNSString:@","];
    [tempsb appendWithNSString:[self formatWithDouble:endAngle]];
    [tempsb appendWithNSString:@")"];
  }
  if ([geo getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) {
    [tempsb appendWithNSString:@"--"];
    [self addPointWithNSString:[self formatWithDouble:tx] withNSString:[self formatWithDouble:ty] withJavaLangStringBuilder:tempsb];
    [tempsb appendWithNSString:@"--cycle"];
    if (fillType_ == OrgGeogebraCommonExportPstricksExportSettings_FILL_NONE) [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:tempsb];
    else [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:tempsb];
  }
  else [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:tempsb];
  if ([geo getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR && fillType_ != OrgGeogebraCommonExportPstricksExportSettings_FILL_NONE) [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) appendWithJavaLangCharSequence:tempsb];
  else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithJavaLangCharSequence:tempsb];
}

- (void)drawSingleCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)geo
                                                                     withBoolean:(jboolean)trasparency {
  [((id<JavaUtilSet>) nil_chk(importpackage_)) addWithId:@"graph"];
  jdouble start = [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(geo)) getMinParameter], end = [geo getMaxParameter];
  NSString *fx = [self parseFunctionWithNSString:[geo getFunXWithOrgGeogebraCommonKernelStringTemplate:[self getStringTemplate]]];
  NSString *fy = [self parseFunctionWithNSString:[geo getFunYWithOrgGeogebraCommonKernelStringTemplate:[self getStringTemplate]]];
  NSString *variable = [self parseFunctionWithNSString:[geo getVarStringWithOrgGeogebraCommonKernelStringTemplate:[self getStringTemplate]]];
  jint indexFunc = -1;
  NSString *tempFunctionCount = JreStrcat("C$", 'f', JavaLangInteger_toStringWithInt_(functionCount_ + 1));
  NSString *returnCode = JreStrcat("$$$$C$$", @"(real ", variable, @"){return (", fx, ',', fy, @");} ");
  if (compact_) {
    indexFunc = [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) indexOfWithNSString:returnCode];
    if (indexFunc != -1) {
      jint indexFuncStart = [codeFilledObject_ lastIndexOfWithNSString:@" " withInt:indexFunc];
      tempFunctionCount = [codeFilledObject_ substringWithInt:indexFuncStart + 1 withInt:indexFunc];
    }
    else if ([((JavaLangStringBuilder *) nil_chk(code_)) indexOfWithNSString:returnCode] != -1) {
      indexFunc = [code_ indexOfWithNSString:returnCode];
      jint indexFuncStart = [code_ lastIndexOfWithNSString:@" " withInt:indexFunc];
      tempFunctionCount = [code_ substringWithInt:indexFuncStart + 1 withInt:indexFunc];
      indexFunc = [code_ indexOfWithNSString:returnCode];
    }
  }
  if (indexFunc == -1) {
    functionCount_++;
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"pair f"];
    [code_ appendWithInt:functionCount_];
    [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$C", @"(real ", variable, ')') } count:1 type:NSString_class_()]];
    [code_ appendWithNSString:@"{return ("];
    [code_ appendWithNSString:fx];
    [code_ appendWithNSString:@","];
    [code_ appendWithNSString:fy];
    [code_ appendWithNSString:@");} "];
  }
  [self startDraw];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"graph("];
  [code_ appendWithNSString:tempFunctionCount];
  [code_ appendWithNSString:@","];
  [code_ appendWithNSString:[self formatWithDouble:start]];
  [code_ appendWithNSString:@","];
  [code_ appendWithNSString:[self formatWithDouble:end]];
  [code_ appendWithNSString:@")"];
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)geo {
  [self drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:geo withBoolean:NO withOrgGeogebraCommonKernelGeosGeoNumeric:nil withBoolean:NO];
}

- (void)drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)geo
                                                   withBoolean:(jboolean)integral
                     withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo1
                                                   withBoolean:(jboolean)contour {
  [((id<JavaUtilSet>) nil_chk(importpackage_)) addWithId:@"graph"];
  OrgGeogebraCommonKernelArithmeticFunction *f = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(geo)) getFunction];
  if (f == nil) return;
  NSString *value = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[self getStringTemplate]];
  value = [self parseFunctionWithNSString:value];
  value = [((NSString *) nil_chk(value)) replace:@"\\\\pi" withSequence:@"pi"];
  jdouble a = xmin_;
  jdouble b = xmax_;
  if ([geo hasInterval]) {
    a = JavaLangMath_maxWithDouble_withDouble_(a, [geo getIntervalMin]);
    b = JavaLangMath_minWithDouble_withDouble_(b, [geo getIntervalMax]);
  }
  jdouble xrangemax = a, xrangemin = a;
  while (xrangemax < b) {
    xrangemin = OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_firstDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(self, geo, a, b);
    if (xrangemin == b) break;
    xrangemax = OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_maxDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(self, geo, xrangemin, b);
    jint indexFunc = -1;
    NSString *tempFunctionCount = nil;
    NSString *returnCode = nil;
    if (![self isLatexFunctionWithNSString:[f toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()]]) {
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      JavaLangStringBuilder *lineBuilder;
      if (integral) {
        [sb appendWithNSString:JreStrcat("$I$", @"path p", (++functionCount_), @";\n")];
        [sb appendWithNSString:JreStrcat("CIC", 'p', functionCount_, '=')];
        NSString *template_ = @"(%0,%1) -- (%2,%3) -- ";
        lineBuilder = [self drawNoLatexFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:geo withDouble:xrangemax withDouble:xrangemin withInt:400 withNSString:template_];
        [((JavaLangStringBuilder *) nil_chk(lineBuilder)) appendWithNSString:JreStrcat("C$$$$", '(', [self formatWithDouble:[geo getIntervalMax]], @",0) -- (", [self formatWithDouble:[geo getIntervalMin]], @",0) -- ")];
        JavaLangStringBuilder *color = [new_JavaLangStringBuilder_init() autorelease];
        [self ColorCodeWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo1)) getObjectColor] withJavaLangStringBuilder:color];
        NSString *str = JreStrcat("$IC@", @"cycle;\ndraw(p", functionCount_, ',', color);
        if (!contour) {
          str = JreStrcat("$IC@", @"cycle;\nfill(p", functionCount_, ',', color);
          str = JreStrcat("$$", str, @"+opacity(0.05)");
        }
        [lineBuilder appendWithNSString:JreStrcat("$$", str, @");\n")];
        [sb appendWithJavaLangCharSequence:lineBuilder];
        lineBuilder = sb;
      }
      else {
        [self ColorCodeWithOrgGeogebraCommonAwtGColor:[geo getObjectColor] withJavaLangStringBuilder:sb];
        NSString *template_ = JreStrcat("$@$I$", @"draw( (%0,%1) -- (%2,%3),", sb, @"+linewidth(", [geo getLineThickness], @"));\n");
        lineBuilder = [self drawNoLatexFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:geo withDouble:xrangemax withDouble:xrangemin withInt:400 withNSString:template_];
      }
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:JreStrcat("$$", [((JavaLangStringBuilder *) nil_chk(lineBuilder)) description], @";\n")];
    }
    else {
      tempFunctionCount = JreStrcat("C$", 'f', JavaLangInteger_toStringWithInt_(functionCount_ + 1));
      returnCode = JreStrcat("$$$", @"(real x){return ", value, @";} ");
      if (compact_) {
        indexFunc = [((JavaLangStringBuilder *) nil_chk(codeFilledObject_)) indexOfWithNSString:returnCode];
        if (indexFunc != -1) {
          jint indexFuncStart = [codeFilledObject_ lastIndexOfWithNSString:@" " withInt:indexFunc];
          tempFunctionCount = [codeFilledObject_ substringWithInt:indexFuncStart + 1 withInt:indexFunc];
        }
        else if ([((JavaLangStringBuilder *) nil_chk(code_)) indexOfWithNSString:returnCode] != -1) {
          indexFunc = [code_ indexOfWithNSString:returnCode];
          jint indexFuncStart = [code_ lastIndexOfWithNSString:@" " withInt:indexFunc];
          tempFunctionCount = [code_ substringWithInt:indexFuncStart + 1 withInt:indexFunc];
          indexFunc = [code_ indexOfWithNSString:returnCode];
        }
      }
      if (indexFunc == -1) {
        functionCount_++;
        if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
        [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"real "];
        [code_ appendWithNSString:tempFunctionCount];
        [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real x)" } count:1 type:NSString_class_()]];
        [code_ appendWithNSString:@"{return "];
        [code_ appendWithNSString:value];
        [code_ appendWithNSString:@";} "];
      }
      [self startDraw];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"graph("];
      [code_ appendWithNSString:tempFunctionCount];
      [code_ appendWithNSString:@","];
      [code_ appendWithNSString:[self formatWithDouble:xrangemin + 0.01]];
      [code_ appendWithNSString:@","];
      [code_ appendWithNSString:[self formatWithDouble:xrangemax - 0.01]];
      [code_ appendWithNSString:@")"];
      [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    xrangemax += PRECISION_XRANGE_FUNCTION_;
    a = xrangemax;
  }
}

+ (void)renameFuncWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                               withNSString:(NSString *)nameFunc
                               withNSString:(NSString *)nameNew {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, nameFunc, nameNew);
}

- (jdouble)maxDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                          withDouble:(jdouble)a
                                                          withDouble:(jdouble)b {
  return OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_maxDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(self, f, a, b);
}

- (jdouble)firstDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                            withDouble:(jdouble)a
                                                            withDouble:(jdouble)b {
  return OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_firstDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(self, f, a, b);
}

- (void)drawGeoVectorWithOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)geo {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> pointStart = [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(geo)) getStartPoint];
  NSString *x1, *y1;
  if (pointStart == nil) {
    x1 = @"0";
    y1 = @"0";
  }
  else {
    OrgGeogebraCommonKernelMatrixCoords *c = [pointStart getCoords];
    x1 = [self formatWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(c)) getX] / [c getZ]];
    y1 = [self formatWithDouble:[c getY] / [c getZ]];
  }
  IOSDoubleArray *coord = [IOSDoubleArray arrayWithLength:3];
  [geo getCoordsWithDoubleArray:coord];
  NSString *x2 = [self formatWithDouble:IOSDoubleArray_Get(coord, 0) + [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToDoubleWithNSString:x1]];
  NSString *y2 = [self formatWithDouble:IOSDoubleArray_Get(coord, 1) + [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) evaluateToDoubleWithNSString:y1]];
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
  if (compactcse5_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"D("];
  else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"draw("];
  [self addPointWithNSString:x1 withNSString:y1 withJavaLangStringBuilder:code_];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--"];
  [self addPointWithNSString:x2 withNSString:y2 withJavaLangStringBuilder:code_];
  if (OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES) != nil) {
    [code_ appendWithNSString:@","];
    if (!compact_) [code_ appendWithNSString:@" "];
    [code_ appendWithNSString:OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES)];
  }
  [code_ appendWithNSString:@",EndArrow(6)); "];
}

- (void)drawCircleWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)geo {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawCircleWithOrgGeogebraCommonKernelGeosGeoConic_(self, geo);
}

- (void)drawGeoConicWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)geo {
  {
    id<OrgGeogebraCommonAwtGAffineTransform> at;
    jdouble eigenvecX;
    jdouble eigenvecY;
    jdouble x1;
    jdouble y1;
    jdouble r1;
    jdouble r2;
    jdouble angle;
    jdouble p;
    jdouble x0;
    jint i, k2;
    switch ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(geo)) getType]) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawCircleWithOrgGeogebraCommonKernelGeosGeoConic_(self, geo);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      at = [geo getAffineTransform];
      eigenvecX = [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(at)) getScaleX];
      eigenvecY = [at getShearY];
      x1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getX];
      y1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getY];
      r1 = IOSDoubleArray_Get(nil_chk([geo getHalfAxes]), 0);
      r2 = IOSDoubleArray_Get(nil_chk([geo getHalfAxes]), 1);
      angle = JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(eigenvecY, eigenvecX));
      if (compactcse5_) if (fillInequality_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"filldraw(shift("];
      else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"D(shift("];
      else if (fillInequality_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"filldraw(shift("];
      else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"draw(shift("];
      [self addPointWithNSString:[self formatWithDouble:x1] withNSString:[self formatWithDouble:y1] withJavaLangStringBuilder:code_];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@")*rotate("];
      [code_ appendWithNSString:[self formatWithDouble:angle]];
      [code_ appendWithNSString:@")*xscale("];
      [code_ appendWithNSString:[self formatWithDouble:r1]];
      [code_ appendWithNSString:@")*yscale("];
      [code_ appendWithNSString:[self formatWithDouble:r2]];
      [code_ appendWithNSString:@")*unitcircle"];
      if (fillInequality_) {
        [code_ appendWithNSString:@",pattern(\"hatch\"),border);\n"];
      }
      [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      p = geo->p_;
      at = [geo getAffineTransform];
      eigenvecX = [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(at)) getScaleX];
      eigenvecY = [at getShearY];
      x1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getX];
      y1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getY];
      x0 = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(x1 - xmin_), JavaLangMath_absWithDouble_(x1 - xmax_));
      x0 = JavaLangMath_maxWithDouble_withDouble_(x0, JavaLangMath_absWithDouble_(y1 - ymin_));
      x0 = JavaLangMath_maxWithDouble_withDouble_(x0, JavaLangMath_absWithDouble_(y1 - ymax_));
      x0 = 4 * x0 / p;
      i = 4;
      k2 = 16;
      while (k2 < x0) {
        i += 2;
        k2 = i * i;
      }
      x0 = i * p;
      angle = JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(eigenvecY, eigenvecX)) - 90;
      parabolaCount_++;
      if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"real p"];
      if (!compact_) [code_ appendWithNSString:@"arabola"];
      [code_ appendWithInt:parabolaCount_];
      [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real x)" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:@"{return x^2/2/"];
      if (compact_) [code_ appendWithNSString:[self formatWithDouble:p]];
      else [code_ appendWithDouble:p];
      [code_ appendWithNSString:@";} "];
      if (!compact_) [code_ appendWithNSString:@"\n"];
      if (compactcse5_) [code_ appendWithNSString:@"D(shift("];
      else [code_ appendWithNSString:@"draw(shift("];
      [self addPointWithNSString:[self formatWithDouble:x1] withNSString:[self formatWithDouble:y1] withJavaLangStringBuilder:code_];
      [code_ appendWithNSString:@")*rotate("];
      [code_ appendWithNSString:[self formatWithDouble:angle]];
      [code_ appendWithNSString:@")*graph(p"];
      if (!compact_) [code_ appendWithNSString:@"arabola"];
      [code_ appendWithInt:parabolaCount_];
      [code_ appendWithNSString:@","];
      [code_ appendWithNSString:[self formatWithDouble:-x0]];
      [code_ appendWithNSString:@","];
      [code_ appendWithNSString:[self formatWithDouble:x0]];
      [code_ appendWithNSString:@")"];
      [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      if (!compact_) [code_ appendWithNSString:@"/* parabola construction */"];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      at = [geo getAffineTransform];
      eigenvecX = [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(at)) getScaleX];
      eigenvecY = [at getShearY];
      x1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getX];
      y1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getY];
      r1 = IOSDoubleArray_Get(nil_chk([geo getHalfAxes]), 0);
      r2 = IOSDoubleArray_Get(nil_chk([geo getHalfAxes]), 1);
      angle = JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(eigenvecY, eigenvecX));
      hyperbolaCount_++;
      if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
      if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"pair hyperbolaLeft"];
      else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"pair hl"];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithInt:hyperbolaCount_];
      [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real t)" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:@"{return ("];
      [code_ appendWithNSString:[self formatWithDouble:r1]];
      [code_ appendWithNSString:@"*(1+t^2)/(1-t^2),"];
      [code_ appendWithNSString:[self formatWithDouble:r2]];
      [code_ appendWithNSString:@"*2*t/(1-t^2));} "];
      if (!compact_) [code_ appendWithNSString:@"pair hyperbolaRight"];
      else [code_ appendWithNSString:@"pair hr"];
      [code_ appendWithInt:hyperbolaCount_];
      [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real t)" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:@"{return ("];
      [code_ appendWithNSString:[self formatWithDouble:r1]];
      [code_ appendWithNSString:@"*(-1-t^2)/(1-t^2),"];
      [code_ appendWithNSString:[self formatWithDouble:r2]];
      [code_ appendWithNSString:@"*(-2)*t/(1-t^2));} "];
      if (!compact_) [code_ appendWithNSString:@"\n"];
      if (compactcse5_) [code_ appendWithNSString:@"D(shift("];
      else [code_ appendWithNSString:@"draw(shift("];
      [self addPointWithNSString:[self formatWithDouble:x1] withNSString:[self formatWithDouble:y1] withJavaLangStringBuilder:code_];
      [code_ appendWithNSString:@")*rotate("];
      [code_ appendWithNSString:[self formatWithDouble:angle]];
      if (!compact_) [code_ appendWithNSString:@")*graph(hyperbolaLeft"];
      else [code_ appendWithNSString:@")*graph(hl"];
      [code_ appendWithInt:hyperbolaCount_];
      [code_ appendWithNSString:@",-0.99,0.99)"];
      [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      if (compactcse5_) [code_ appendWithNSString:@"D(shift("];
      else [code_ appendWithNSString:@"draw(shift("];
      [self addPointWithNSString:[self formatWithDouble:x1] withNSString:[self formatWithDouble:y1] withJavaLangStringBuilder:code_];
      [code_ appendWithNSString:@")*rotate("];
      [code_ appendWithNSString:[self formatWithDouble:angle]];
      if (!compact_) [code_ appendWithNSString:@")*graph(hyperbolaRight"];
      else [code_ appendWithNSString:@")*graph(hr"];
      [code_ appendWithInt:hyperbolaCount_];
      [code_ appendWithNSString:@",-0.99,0.99)"];
      [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      if (!compact_) [code_ appendWithNSString:@"/* hyperbola construction */"];
      break;
    }
  }
}

- (void)drawGeoPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)gp {
  if ([((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(frame_)) getExportPointSymbol]) {
    jdouble x = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(gp)) getX], y = [gp getY], z = [gp getZ];
    x = x / z;
    y = y / z;
    [gp getNameDescription];
    jint dotstyle = [gp getPointStyle];
    if (dotstyle == -1) {
      dotstyle = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
    }
    if (dotstyle != OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT) {
      [self drawSpecialPointWithOrgGeogebraCommonKernelGeosGeoPoint:gp];
    }
    else {
      if (!compact_) [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"\n"];
      if (compactcse5_) [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"D("];
      else [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"dot("];
      [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:codePoint_];
      OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_(self, gp, codePoint_);
      [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"); "];
    }
  }
}

- (void)drawSpecialPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geo {
  jdouble dotsize = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(geo)) getPointSize];
  jdouble radius = dotsize * (2.54 / 72) * ([((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(frame_)) getXUnit]);
  jint dotstyle = [geo getPointStyle];
  if (dotstyle == -1) {
    dotstyle = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
  }
  jdouble x = [geo getX], y = [geo getY], z = [geo getZ];
  x = x / z;
  y = y / z;
  OrgGeogebraCommonAwtGColor *dotcolor = [geo getObjectColor];
  switch (dotstyle) {
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS:
    [self startDraw];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:JreStrcat("$$C$$", @"shift((", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"))*")];
    [code_ appendWithNSString:@"scale("];
    [code_ appendWithNSString:[self formatWithDouble:radius]];
    [code_ appendWithNSString:@")*(expi(pi/4)--expi(5*pi/4)"];
    if (compactcse5_) [code_ appendWithNSString:@"--(0,0)--"];
    else [code_ appendWithNSString:@"^^"];
    [code_ appendWithNSString:@"expi(3*pi/4)--expi(7*pi/4))"];
    [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE:
    if (!compactcse5_) {
      [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"dot("];
      [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:codePoint_];
      OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_withDouble_(self, geo, codePoint_, [geo getPointSize] / 4.0);
      [codePoint_ appendWithNSString:@",UnFill(0)); "];
    }
    else {
      [self startDraw];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"CR(("];
      [code_ appendWithNSString:JreStrcat("$C$$", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"),")];
      [code_ appendWithNSString:[self formatWithDouble:radius]];
      [code_ appendWithNSString:@")"];
      [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    }
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_EMPTY_DIAMOND:
    [self startDraw];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:JreStrcat("$$C$$", @"shift((", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"))*")];
    [code_ appendWithNSString:@"scale("];
    [code_ appendWithNSString:[self formatWithDouble:radius]];
    [code_ appendWithNSString:@")*((1,0)--(0,1)--(-1,0)--(0,-1)--cycle)"];
    [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND:
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [self packSpaceBetweenWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$C$$", @"fill(shift((", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"))"), @"*", JreStrcat("$$C", @"scale(", [self formatWithDouble:radius], ')'), @"*", @"((1,0)--(0,1)--(-1,0)--(0,-1)--cycle)" } count:5 type:NSString_class_()]];
    [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_PLUS:
    [self startDraw];
    [self packSpaceBetweenWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$C$$", @"shift((", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"))"), @"*", JreStrcat("$$C", @"scale(", [self formatWithDouble:radius], ')'), @"*", @"((0,1)--(0,-1)" } count:5 type:NSString_class_()]];
    if (compactcse5_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--(0,0)--"];
    else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"^^"];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"(1,0)--(-1,0))"];
    [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_EAST:
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [self packSpaceBetweenWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$C$$", @"fill(shift((", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"))"), @"*", JreStrcat("$$C", @"scale(", [self formatWithDouble:radius], ')'), @"*", @"((1,0)--expi(2*pi/3)--expi(4*pi/3)--cycle)" } count:5 type:NSString_class_()]];
    [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH:
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [self packSpaceBetweenWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$C$$", @"fill(shift((", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"))"), @"*", @"rotate(90)", @"*", JreStrcat("$$C", @"scale(", [self formatWithDouble:radius], ')'), @"*", @"((1,0)--expi(2*pi/3)--expi(4*pi/3)--cycle)" } count:7 type:NSString_class_()]];
    [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_SOUTH:
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [self packSpaceBetweenWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$C$$", @"fill(shift((", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"))"), @"*", @"rotate(270)", @"*", JreStrcat("$$C", @"scale(", [self formatWithDouble:radius], ')'), @"*", @"((1,0)--expi(2*pi/3)--expi(4*pi/3)--cycle)" } count:7 type:NSString_class_()]];
    [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST:
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [self packSpaceBetweenWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$C$$", @"fill(shift((", [self formatWithDouble:x], ',', [self formatWithDouble:y], @"))"), @"*", @"rotate(180)", @"*", JreStrcat("$$C", @"scale(", [self formatWithDouble:radius], ')'), @"*", @"((1,0)--expi(2*pi/3)--expi(4*pi/3)--cycle)" } count:7 type:NSString_class_()]];
    [self endPointWithOrgGeogebraCommonAwtGColor:dotcolor];
    break;
    default:
    break;
  }
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"/* special point */"];
}

- (void)drawGeoLineWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)geo {
  jdouble x = [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(geo)) getX], y = [geo getY], z = [geo getZ];
  if (y != 0) {
    [self startDraw];
    [self packSpaceAfterWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(xmin," } count:1 type:NSString_class_()]];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:[self formatWithDouble:-x / y]];
    [code_ appendWithNSString:@"*xmin"];
    if (z / y < 0 || [((NSString *) nil_chk([self formatWithDouble:-z / y])) isEqual:@"0"]) [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
    [code_ appendWithNSString:[self formatWithDouble:-z / y]];
    [code_ appendWithNSString:@")"];
    [self packSpaceAfterWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"--(xmax," } count:1 type:NSString_class_()]];
    [code_ appendWithNSString:[self formatWithDouble:-x / y]];
    [code_ appendWithNSString:@"*xmax"];
    if (z / y < 0 || [((NSString *) nil_chk([self formatWithDouble:-z / y])) isEqual:@"0"]) [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
    [code_ appendWithNSString:[self formatWithDouble:-z / y]];
    [code_ appendWithNSString:@")"];
    [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    if (compactcse5_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"D(("];
    else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"draw(("];
    NSString *s = [self formatWithDouble:-z / x];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:s];
    [code_ appendWithNSString:@",ymin)--("];
    [code_ appendWithNSString:s];
    [code_ appendWithNSString:@",ymax)"];
    [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"/* line */"];
}

- (void)drawGeoSegmentWithOrgGeogebraCommonKernelGeosGeoSegment:(OrgGeogebraCommonKernelGeosGeoSegment *)geo {
  IOSDoubleArray *A = [IOSDoubleArray arrayWithLength:2], *B = [IOSDoubleArray arrayWithLength:2];
  OrgGeogebraCommonKernelGeosGeoPoint *pointStart = ((OrgGeogebraCommonKernelGeosGeoPoint *) [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(geo)) getStartPoint]);
  OrgGeogebraCommonKernelGeosGeoPoint *pointEnd = ((OrgGeogebraCommonKernelGeosGeoPoint *) [geo getEndPoint]);
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pointStart)) getInhomCoordsWithDoubleArray:A];
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pointEnd)) getInhomCoordsWithDoubleArray:B];
  NSString *x1 = [self formatWithDouble:IOSDoubleArray_Get(A, 0)], *y1 = [self formatWithDouble:IOSDoubleArray_Get(A, 1)], *x2 = [self formatWithDouble:IOSDoubleArray_Get(B, 0)], *y2 = [self formatWithDouble:IOSDoubleArray_Get(B, 1)];
  jint deco = geo->decorationType_;
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
  if (!compactcse5_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"draw("];
  else [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"D("];
  [self addPointWithNSString:x1 withNSString:y1 withJavaLangStringBuilder:code_];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--"];
  [self addPointWithNSString:x2 withNSString:y2 withJavaLangStringBuilder:code_];
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if (deco != OrgGeogebraCommonKernelGeosGeoElement_DECORATION_NONE) [self markWithDoubleArray:A withDoubleArray:B withInt:deco withOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)drawLineWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  NSString *sx1 = [self formatWithDouble:x1];
  NSString *sy1 = [self formatWithDouble:y1];
  NSString *sx2 = [self formatWithDouble:x2];
  NSString *sy2 = [self formatWithDouble:y2];
  [self startDraw];
  [self addPointWithNSString:sx1 withNSString:sy1 withJavaLangStringBuilder:code_];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--"];
  [self addPointWithNSString:sx2 withNSString:sy2 withJavaLangStringBuilder:code_];
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)drawGeoRayWithOrgGeogebraCommonKernelGeosGeoRay:(OrgGeogebraCommonKernelGeosGeoRay *)geo {
  OrgGeogebraCommonKernelGeosGeoPoint *pointStart = ((OrgGeogebraCommonKernelGeosGeoPoint *) [((OrgGeogebraCommonKernelGeosGeoRay *) nil_chk(geo)) getStartPoint]);
  jdouble x1 = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pointStart)) getX];
  jdouble z1 = [pointStart getZ];
  x1 = x1 / z1;
  NSString *y1 = [self formatWithDouble:[pointStart getY] / z1];
  jdouble x = [geo getX], y = [geo getY], z = [geo getZ];
  jdouble yEndpoint;
  jdouble inf = xmin_, sup = xmax_;
  if (y > 0) {
    inf = x1;
    yEndpoint = (-z - x * inf) / y;
  }
  else {
    sup = x1;
    yEndpoint = (-z - x * sup) / y;
  }
  [self startDraw];
  if (y != 0) {
    if (y > 0) {
      [self addPointWithNSString:[self formatWithDouble:inf] withNSString:[self formatWithDouble:yEndpoint] withJavaLangStringBuilder:code_];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--"];
      [self packSpaceAfterWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(xmax," } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:[self formatWithDouble:-x / y]];
      [code_ appendWithNSString:@"*xmax"];
      if (z / y < 0 || [((NSString *) nil_chk([self formatWithDouble:-z / y])) isEqual:@"0"]) [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:[self formatWithDouble:-z / y]];
      [code_ appendWithNSString:@")"];
    }
    else {
      [self addPointWithNSString:[self formatWithDouble:sup] withNSString:[self formatWithDouble:yEndpoint] withJavaLangStringBuilder:code_];
      [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--"];
      [self packSpaceAfterWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(xmin," } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:[self formatWithDouble:-x / y]];
      [code_ appendWithNSString:@"*xmin"];
      if (z / y < 0 || [((NSString *) nil_chk([self formatWithDouble:-z / y])) isEqual:@"0"]) [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
      [code_ appendWithNSString:[self formatWithDouble:-z / y]];
      [code_ appendWithNSString:@")"];
    }
    [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    [self addPointWithNSString:[self formatWithDouble:x1] withNSString:y1 withJavaLangStringBuilder:code_];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"--("];
    [code_ appendWithNSString:[self formatWithDouble:x1]];
    [self packSpaceAfterWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    if (-x > 0) [code_ appendWithNSString:@"ymax"];
    else [code_ appendWithNSString:@"ymin"];
    [code_ appendWithNSString:@")"];
    [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"/* ray */"];
}

- (void)drawImplicitPolyWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)geo {
  [((id<JavaUtilSet>) nil_chk(importpackage_)) addWithId:@"contour"];
  NSString *polynomial = [((NSString *) nil_chk([self parseFunctionWithNSString:[self getImplicitExprWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:geo]])) replace:@"\\\\pi" withSequence:@"pi"];
  implicitFuncCount_++;
  jint implicitFuncName = implicitFuncCount_;
  if (!compact_ || ![((id<JavaUtilMap>) nil_chk(implicitPolyTable_)) containsKeyWithId:polynomial]) {
    if (compact_) {
      if ([((id<JavaUtilMap>) nil_chk(implicitPolyTable_)) isEmpty]) [implicitPolyTable_ putWithId:polynomial withId:JavaLangInteger_valueOfWithInt_(1)];
      else {
        implicitFuncName = [implicitPolyTable_ size] + 1;
        [implicitPolyTable_ putWithId:polynomial withId:JavaLangInteger_valueOfWithInt_(implicitFuncName)];
      }
    }
    if (!compact_) [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"\n"];
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"real implicitf"];
    [code_ appendWithInt:implicitFuncName];
    [self packSpaceWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real x, real y)", @"{" } count:2 type:NSString_class_()]];
    [code_ appendWithNSString:JreStrcat("$$", @"return ", polynomial)];
    [self packSpaceAfterWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @";" } count:1 type:NSString_class_()]];
    [code_ appendWithNSString:@"} "];
  }
  else implicitFuncName = [((JavaLangInteger *) nil_chk([implicitPolyTable_ getWithId:polynomial])) intValue];
  [self startDraw];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"contour(implicitf"];
  [code_ appendWithInt:implicitFuncName];
  [self packSpaceBetweenWithJavaLangStringBuilder:code_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @",", @"(xmin,ymin),", @"(xmax,ymax),", @"new real[]{0},", @"500)" } count:5 type:NSString_class_()]];
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)drawPolyLineWithOrgGeogebraCommonKernelGeosGeoPolyLine:(OrgGeogebraCommonKernelGeosGeoPolyLine *)geo {
  IOSObjectArray *points = [((OrgGeogebraCommonKernelGeosGeoPolyLine *) nil_chk(geo)) getPoints];
  JavaLangStringBuilder *str = [new_JavaLangStringBuilder_init() autorelease];
  [self startDrawWithJavaLangStringBuilder:str];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
    OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomCoords];
    jdouble x = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], y = [coords getY];
    [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:str];
    if (i != points->size_ - 1) [str appendWithNSString:@"--"];
  }
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:str];
  NSString *s = [str description];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if (OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES) != nil) {
    [self packSpaceAfterWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    [sb appendWithNSString:OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES)];
  }
  [sb appendWithNSString:@"); "];
  JavaLangStringBuilder *sa = [new_JavaLangStringBuilder_init() autorelease];
  if (!compact_) [sa appendWithNSString:@"\n"];
  if (compactcse5_) [sa appendWithNSString:@"D("];
  else [sa appendWithNSString:@"draw("];
  s = [((NSString *) nil_chk(s)) replace:@"--\\(\\?,\\?\\)--" withSequence:JreStrcat("$$", [sb description], [sa description])];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:s];
}

- (void)initUnitAndVariable {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initUnitAndVariable(self);
}

- (void)initPointDeclarations {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initPointDeclarations(self);
}

- (void)drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                  withOrgGeogebraCommonEuclidianDrawableND:(OrgGeogebraCommonEuclidianDrawableND *)drawGeo {
  @try {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelVisible]) {
      NSString *name;
      if ([geo getLabelMode] == OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION) {
        name = [((NSString *) nil_chk([self convertUnicodeToTextWithNSString:[geo getLabelDescription]])) replace:@"\\$" withSequence:@"dollar"];
        if ([((NSString *) nil_chk(name)) contains:@"_"]) {
          name = JreStrcat("C$C", '$', name, '$');
        }
      }
      else if (compactcse5_) {
        name = OrgGeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_([geo getLabelDescription], YES);
        name = [self convertUnicodeToLatexWithNSString:name];
      }
      else {
        name = JreStrcat("C$C", '$', OrgGeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_([geo getLabelDescription], YES), '$');
        name = [self convertUnicodeToLatexWithNSString:name];
      }
      if ([((NSString *) nil_chk(name)) indexOfString:OrgGeogebraCommonUtilUnicode_get_DEGREE_()] != -1) {
        name = [name replace:OrgGeogebraCommonUtilUnicode_get_DEGREE_() withSequence:@"^\\\\circ"];
      }
      if (drawGeo == nil) drawGeo = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getDrawableForWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      jdouble xLabel = [((OrgGeogebraCommonEuclidianDrawableND *) nil_chk(drawGeo)) getxLabel];
      jdouble yLabel = [drawGeo getyLabel];
      xLabel = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toRealWorldCoordXWithDouble:JavaLangMath_roundWithDouble_(xLabel)];
      yLabel = [euclidianView_ toRealWorldCoordYWithDouble:JavaLangMath_roundWithDouble_(yLabel)];
      jboolean isPointLabel = NO;
      OrgGeogebraCommonAwtGColor *geocolor = [geo getObjectColor];
      if (!compact_) [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"\n"];
      if (compactcse5_ && [geo getLabelMode] != OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION) [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"MP(\""];
      else [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:@"label(\""];
      [((JavaLangStringBuilder *) nil_chk(codePoint_)) appendWithNSString:name];
      [self packSpaceBetweenWithJavaLangStringBuilder:codePoint_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"\",", @"(" } count:2 type:NSString_class_()]];
      [codePoint_ appendWithNSString:[self formatWithDouble:xLabel]];
      [codePoint_ appendWithNSString:@","];
      [codePoint_ appendWithNSString:[self formatWithDouble:yLabel]];
      [codePoint_ appendWithNSString:@"),"];
      if (!compact_) [codePoint_ appendWithNSString:@" "];
      [codePoint_ appendWithNSString:@"NE"];
      [self packSpaceWithJavaLangStringBuilder:codePoint_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"*" } count:1 type:NSString_class_()]];
      if (compact_) [codePoint_ appendWithNSString:@"lsf"];
      if (!compact_) [codePoint_ appendWithNSString:@"labelscalefactor"];
      isPointLabel = (([((OrgGeogebraCommonAwtGColor *) nil_chk(geocolor)) isEqual:OrgGeogebraCommonAwtGColor_get_BLUE_()] || [self ColorEqualsWithOrgGeogebraCommonAwtGColor:geocolor withOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:124 withInt:124 withInt:255]]) && (((((jint) [((NSString *) nil_chk(name)) length]) == 1) && JavaLangCharacter_isUpperCaseWithChar_([name charAtWithInt:0])) || (((((jint) [name length]) == 3) && [name charAtWithInt:0] == '$' && [name charAtWithInt:2] == '$' && JavaLangCharacter_isUpperCaseWithChar_([name charAtWithInt:1])))));
      isPointLabel = (isPointLabel || [geo isGeoPoint]);
      if (isPointLabel && ![((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(frame_)) getKeepDotColors]) {
      }
      else if (![geocolor isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) {
        if (compactcse5_) [codePoint_ appendWithNSString:@",fp+"];
        else [codePoint_ appendWithNSString:@","];
        [self ColorCodeWithOrgGeogebraCommonAwtGColor:geocolor withJavaLangStringBuilder:codePoint_];
      }
      [codePoint_ appendWithNSString:@"); "];
    }
  }
  @catch (JavaLangNullPointerException *e) {
    OrgGeogebraCommonUtilDebugLog_debugWithId_(e);
  }
}

- (jboolean)ColorEqualsWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c1
                       withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c2 {
  return [((NSString *) nil_chk([self formatWithDouble:[((OrgGeogebraCommonAwtGColor *) nil_chk(c1)) getRed] / 255.0])) isEqual:[self formatWithDouble:[((OrgGeogebraCommonAwtGColor *) nil_chk(c2)) getRed] / 255.0]] && [((NSString *) nil_chk([self formatWithDouble:[c1 getGreen] / 255.0])) isEqual:[self formatWithDouble:[c2 getGreen] / 255.0]] && [((NSString *) nil_chk([self formatWithDouble:[c1 getBlue] / 255.0])) isEqual:[self formatWithDouble:[c2 getBlue] / 255.0]];
}

- (void)drawGrid {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawGrid(self);
}

- (void)drawAxis {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawAxis(self);
}

- (void)drawArrowsWithInt:(jint)axisStyle
              withBoolean:(jboolean)axisBold {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawArrowsWithInt_withBoolean_(self, axisStyle, axisBold);
}

- (void)PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geo
                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                    withDouble:(jdouble)dotsize {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_withDouble_(self, geo, sb, dotsize);
}

- (void)PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geo
                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_(self, geo, sb);
}

- (NSString *)LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                          withBoolean:(jboolean)transparency {
  return OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, transparency);
}

+ (void)LinestyleCodeWithInt:(jint)linestyle
   withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LinestyleCodeWithInt_withJavaLangStringBuilder_(linestyle, sb);
}

- (void)ColorCodeWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c
                      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  jint red = [((OrgGeogebraCommonAwtGColor *) nil_chk(c)) getRed], green = [c getGreen], blue = [c getBlue];
  if (grayscale_) {
    NSString *colorname = @"";
    jint grayscale = (red + green + blue) / 3;
    c = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:grayscale withInt:grayscale withInt:grayscale];
    if ([((JavaUtilHashMap *) nil_chk(CustomColor_)) containsKeyWithId:c]) {
      colorname = [((NSString *) nil_chk([CustomColor_ getWithId:c])) description];
    }
    else {
      colorname = [self createCustomColorWithInt:grayscale withInt:grayscale withInt:grayscale];
      if (!compact_) [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:@"pen "];
      else [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:@", "];
      [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:colorname];
      [self packSpaceWithJavaLangStringBuilder:codeColors_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"=" } count:1 type:NSString_class_()]];
      [codeColors_ appendWithNSString:JreStrcat("$$C$C$C", @"rgb(", [self formatWithDouble:grayscale / 255.0], ',', [self formatWithDouble:grayscale / 255.0], ',', [self formatWithDouble:grayscale / 255.0], ')')];
      if (!compact_) [codeColors_ appendWithNSString:@"; "];
      [CustomColor_ putWithId:c withId:colorname];
    }
    if ([((OrgGeogebraCommonAwtGColor *) nil_chk(c)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"black"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_GRAY_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"gray"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_WHITE_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"white"];
    else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:colorname];
  }
  else {
    if ([c isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"black"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_GRAY_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"gray"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_WHITE_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"white"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_RED_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"red"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_GREEN_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"green"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_BLUE_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"blue"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_YELLOW_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"yellow"];
    else {
      NSString *colorname = @"";
      if ([((JavaUtilHashMap *) nil_chk(CustomColor_)) containsKeyWithId:c]) {
        colorname = [((NSString *) nil_chk([CustomColor_ getWithId:c])) description];
      }
      else {
        colorname = [self createCustomColorWithInt:red withInt:green withInt:blue];
        if (!compact_) [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:@"pen "];
        else [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:@", "];
        [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:colorname];
        [self packSpaceWithJavaLangStringBuilder:codeColors_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"=" } count:1 type:NSString_class_()]];
        [codeColors_ appendWithNSString:JreStrcat("$$C$C$C", @"rgb(", [self formatWithDouble:red / 255.0], ',', [self formatWithDouble:green / 255.0], ',', [self formatWithDouble:blue / 255.0], ')')];
        if (!compact_) [codeColors_ appendWithNSString:@"; "];
        [CustomColor_ putWithId:c withId:colorname];
      }
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:colorname];
    }
  }
}

- (void)ColorLightCodeWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c
                                          withDouble:(jdouble)opacity
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonAwtGColor *tempc;
  jint red = [((OrgGeogebraCommonAwtGColor *) nil_chk(c)) getRed], green = [c getGreen], blue = [c getBlue];
  red = J2ObjCFpToInt((255 * (1 - opacity) + red * opacity));
  green = J2ObjCFpToInt((255 * (1 - opacity) + green * opacity));
  blue = J2ObjCFpToInt((255 * (1 - opacity) + blue * opacity));
  if (grayscale_) {
    NSString *colorname = @"";
    jint grayscale = (red + green + blue) / 3;
    tempc = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:grayscale withInt:grayscale withInt:grayscale];
    if ([((JavaUtilHashMap *) nil_chk(CustomColor_)) containsKeyWithId:tempc]) {
      colorname = [((NSString *) nil_chk([CustomColor_ getWithId:tempc])) description];
    }
    else {
      colorname = [self createCustomColorWithInt:grayscale withInt:grayscale withInt:grayscale];
      if (!compact_) [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:@"pen "];
      else [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:@", "];
      [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:colorname];
      [self packSpaceWithJavaLangStringBuilder:codeColors_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"=" } count:1 type:NSString_class_()]];
      [codeColors_ appendWithNSString:JreStrcat("$$C$C$C", @"rgb(", [self formatWithDouble:grayscale / 255.0], ',', [self formatWithDouble:grayscale / 255.0], ',', [self formatWithDouble:grayscale / 255.0], ')')];
      if (!compact_) [codeColors_ appendWithNSString:@"; "];
      [CustomColor_ putWithId:tempc withId:colorname];
    }
    if ([((OrgGeogebraCommonAwtGColor *) nil_chk(tempc)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"black"];
    else if ([tempc isEqual:OrgGeogebraCommonAwtGColor_get_GRAY_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"gray"];
    else if ([tempc isEqual:OrgGeogebraCommonAwtGColor_get_WHITE_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"white"];
    else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:colorname];
  }
  else {
    tempc = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue];
    if ([((OrgGeogebraCommonAwtGColor *) nil_chk(tempc)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"black"];
    else if ([tempc isEqual:OrgGeogebraCommonAwtGColor_get_GRAY_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"gray"];
    else if ([tempc isEqual:OrgGeogebraCommonAwtGColor_get_WHITE_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"white"];
    else if ([tempc isEqual:OrgGeogebraCommonAwtGColor_get_RED_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"red"];
    else if ([tempc isEqual:OrgGeogebraCommonAwtGColor_get_GREEN_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"green"];
    else if ([tempc isEqual:OrgGeogebraCommonAwtGColor_get_BLUE_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"blue"];
    else if ([tempc isEqual:OrgGeogebraCommonAwtGColor_get_YELLOW_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"yellow"];
    else {
      NSString *colorname = @"";
      if ([((JavaUtilHashMap *) nil_chk(CustomColor_)) containsKeyWithId:tempc]) {
        colorname = [((NSString *) nil_chk([CustomColor_ getWithId:tempc])) description];
      }
      else {
        colorname = [self createCustomColorWithInt:red withInt:green withInt:blue];
        if (!compact_) [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:@"pen "];
        else [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:@", "];
        [((JavaLangStringBuilder *) nil_chk(codeColors_)) appendWithNSString:colorname];
        [self packSpaceWithJavaLangStringBuilder:codeColors_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"=" } count:1 type:NSString_class_()]];
        [codeColors_ appendWithNSString:JreStrcat("$$C$C$C", @"rgb(", [self formatWithDouble:red / 255.0], ',', [self formatWithDouble:green / 255.0], ',', [self formatWithDouble:blue / 255.0], ')')];
        if (!compact_) [codeColors_ appendWithNSString:@"; "];
        [CustomColor_ putWithId:tempc withId:colorname];
      }
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:colorname];
    }
  }
}

- (void)ColorCode2WithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c
                       withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  jint red = [((OrgGeogebraCommonAwtGColor *) nil_chk(c)) getRed], green = [c getGreen], blue = [c getBlue];
  if (grayscale_) {
    jint grayscale = (red + green + blue) / 3;
    c = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:grayscale withInt:grayscale withInt:grayscale];
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$$C$C$C", @"\\color[rgb]{", [self formatWithDouble:grayscale / 255.0], ',', [self formatWithDouble:grayscale / 255.0], ',', [self formatWithDouble:grayscale / 255.0], '}')];
    if ([((OrgGeogebraCommonAwtGColor *) nil_chk(c)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) [sb appendWithNSString:@"black"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_GRAY_()]) [sb appendWithNSString:@"gray"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_WHITE_()]) [sb appendWithNSString:@"white"];
  }
  else {
    if ([c isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"black"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_GRAY_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"gray"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_WHITE_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"white"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_RED_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"red"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_GREEN_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"green"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_BLUE_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"blue"];
    else if ([c isEqual:OrgGeogebraCommonAwtGColor_get_YELLOW_()]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"yellow"];
    else {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$$C$C$C", @"\\color[rgb]{", [self formatWithDouble:red / 255.0], ',', [self formatWithDouble:green / 255.0], ',', [self formatWithDouble:blue / 255.0], '}')];
    }
  }
}

- (void)addTextWithNSString:(NSString *)st
                withBoolean:(jboolean)isLatex
                    withInt:(jint)style {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_addTextWithNSString_withBoolean_withInt_(self, st, isLatex, style);
}

- (void)packSpaceBetweenWithNSStringArray:(IOSObjectArray *)s {
  [self packSpaceBetweenWithJavaLangStringBuilder:code_ withNSStringArray:s];
}

- (void)packSpaceBetweenWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                withNSStringArray:(IOSObjectArray *)s {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:IOSObjectArray_Get(nil_chk(s), 0)];
  for (jint i = 1; i < s->size_; i++) {
    if (!compact_) [sb appendWithNSString:JreStrcat("C$", ' ', IOSObjectArray_Get(s, i))];
    else [sb appendWithNSString:IOSObjectArray_Get(s, i)];
  }
}

- (void)packSpaceAfterWithNSStringArray:(IOSObjectArray *)s {
  [self packSpaceAfterWithJavaLangStringBuilder:code_ withNSStringArray:s];
}

- (void)packSpaceAfterWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                              withNSStringArray:(IOSObjectArray *)s {
  [self packSpaceBetweenWithJavaLangStringBuilder:sb withNSStringArray:s];
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" "];
}

- (void)packSpaceWithNSStringArray:(IOSObjectArray *)s {
  [self packSpaceWithJavaLangStringBuilder:code_ withNSStringArray:s];
}

- (void)packSpaceWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                         withNSStringArray:(IOSObjectArray *)s {
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" "];
  [self packSpaceAfterWithJavaLangStringBuilder:sb withNSStringArray:s];
}

- (void)startDraw {
  [self startDrawWithJavaLangStringBuilder:code_];
}

- (void)startDrawWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\n"];
  if (compactcse5_) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"D("];
  else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"draw("];
}

- (void)endDrawWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:code_];
}

- (void)endDrawWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (fillInequality_) return;
  if (OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES) != nil) {
    [self packSpaceAfterWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES)];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"); "];
}

- (void)startTransparentFillWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (!compact_) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\n"];
  if (fillType_ != OrgGeogebraCommonExportPstricksExportSettings_FILL_NONE) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"filldraw("];
  else if (compactcse5_) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"D("];
  else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"draw("];
}

- (void)endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                          withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonExportPstricksGeoGebraExport_Info *info = [new_OrgGeogebraCommonExportPstricksGeoGebraExport_Info_initWithOrgGeogebraCommonExportPstricksGeoGebraExport_withOrgGeogebraCommonKernelGeosGeoElement_(self, geo) autorelease];
  if (fillType_ == OrgGeogebraCommonExportPstricksExportSettings_FILL_OPAQUE) {
    [self packSpaceAfterWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    if ([info getAlpha] >= 0.9) [self ColorCodeWithOrgGeogebraCommonAwtGColor:[info getLinecolor] withJavaLangStringBuilder:sb];
    else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"invisible"];
  }
  else if (fillType_ == OrgGeogebraCommonExportPstricksExportSettings_FILL_OPACITY_PEN) {
    [self packSpaceAfterWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    [self ColorCodeWithOrgGeogebraCommonAwtGColor:[info getLinecolor] withJavaLangStringBuilder:sb];
    [self packSpaceWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"opacity("];
    [sb appendWithFloat:[info getAlpha]];
    [sb appendWithNSString:@")"];
  }
  else if (fillType_ == OrgGeogebraCommonExportPstricksExportSettings_FILL_LAYER) {
    [self packSpaceAfterWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    [self ColorLightCodeWithOrgGeogebraCommonAwtGColor:[info getLinecolor] withDouble:[info getAlpha] withJavaLangStringBuilder:sb];
  }
  if (OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES) != nil) {
    [self packSpaceAfterWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES)];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"); "];
}

- (void)endPointWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c {
  if (![((OrgGeogebraCommonAwtGColor *) nil_chk(c)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()] && dotColors_) {
    [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@","];
    if (!compact_) [code_ appendWithNSString:@" "];
    [self ColorCodeWithOrgGeogebraCommonAwtGColor:c withJavaLangStringBuilder:code_];
  }
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:@"); "];
}

- (void)addPointWithNSString:(NSString *)s1
                withNSString:(NSString *)s2
   withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NSString *pairString = JreStrcat("C$C$C", '(', s1, ',', s2, ')');
  if (pairName_ && [((id<JavaUtilMap>) nil_chk(pairNameTable_)) containsKeyWithId:pairString]) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[pairNameTable_ getWithId:pairString]];
  else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:pairString];
}

- (void)addPointWithDouble:(jdouble)x
                withDouble:(jdouble)y
 withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:sb];
}

- (JavaLangStringBuilder *)convertUnicodeToTextWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NSString *tempc = [((JavaLangStringBuilder *) nil_chk(sb)) description];
  tempc = [self convertUnicodeToTextWithNSString:tempc];
  [sb delete__WithInt:0 withInt:[sb length]];
  [sb appendWithNSString:tempc];
  return sb;
}

- (NSString *)convertUnicodeToTextWithNSString:(NSString *)s {
  NSString *s1 = [NSString stringWithString:s];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonExportPstricksUnicodeTeX_getMap())) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *skey = [it next];
    s1 = [s1 replace:skey withSequence:JreStrcat("$C", [((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonExportPstricksUnicodeTeX_getMap())) getWithId:skey], ' ')];
  }
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(s1)) replace:OrgGeogebraCommonUtilUnicode_get_DEGREE_() withSequence:@"o "])) replace:@"\u212f" withSequence:@"e "])) replace:@"\u00b2" withSequence:@"2 "])) replace:@"\u00b3" withSequence:@"3 "])) replace:@"pi \\)" withSequence:@"pi\\)"];
}

- (NSString *)convertUnicodeToLatexWithNSString:(NSString *)s {
  NSString *s1 = [NSString stringWithString:s];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonExportPstricksUnicodeTeX_getMap())) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *skey = [it next];
    s1 = [s1 replace:skey withSequence:JreStrcat("$$C", @"\\\\", [((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonExportPstricksUnicodeTeX_getMap())) getWithId:skey], ' ')];
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithChar:[((NSString *) nil_chk(s1)) charAtWithInt:0]];
  for (jint i = 1; i < ((jint) [s1 length]) - 1; i++) {
    if ([s1 charAtWithInt:i - 1] == '\\' && (i == 1 || [s1 charAtWithInt:i - 2] != '\\')) {
      [sb appendWithChar:[s1 charAtWithInt:i]];
      continue;
    }
    else if ([s1 charAtWithInt:i] == '$') [sb appendWithNSString:@"\\$"];
    else [sb appendWithChar:[s1 charAtWithInt:i]];
  }
  if (((jint) [s1 length]) > 1) [sb appendWithChar:[s1 charAtWithInt:((jint) [s1 length]) - 1]];
  s1 = [sb description];
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(s1)) replace:OrgGeogebraCommonUtilUnicode_get_DEGREE_() withSequence:@"^\\\\circ"])) replace:@"\u212f" withSequence:@" e"])) replace:@"\u00b2" withSequence:@"^2"])) replace:@"\u00b3" withSequence:@"^3"])) replace:@"\\\\questeq" withSequence:@"\\\\stackrel{?}{=}"];
}

- (NSString *)parseFunctionWithNSString:(NSString *)s {
  return OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_killSpaceWithNSString_(OrgGeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_(s, YES));
}

+ (NSString *)killSpaceWithNSString:(NSString *)name {
  return OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_killSpaceWithNSString_(name);
}

- (OrgGeogebraCommonKernelStringTemplate *)getStringTemplate {
  return OrgGeogebraCommonKernelStringTemplate_fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_PSTRICKS());
}

- (NSString *)penStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  switch ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLineType]) {
    case OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_TYPE:
    [sb appendWithNSString:@"solid+"];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_LONG:
    [sb appendWithNSString:@"longdashed+"];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT:
    [sb appendWithNSString:@"dashed+"];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_DOTTED:
    [sb appendWithNSString:@"dashdotted+"];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DOTTED:
    [sb appendWithNSString:@"Dotted+"];
    break;
  }
  return [sb description];
}

- (jboolean)isLatexFunctionWithNSString:(NSString *)s {
  return ![((NSString *) nil_chk([((NSString *) nil_chk(s)) lowercaseString])) contains:@"csc("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"csch("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"sec("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"cot("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"coth("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"sech("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"if"];
}

- (void)drawNyquistWithOrgGeogebraCommonKernelGeosGeoTransferFunction:(OrgGeogebraCommonKernelGeosGeoTransferFunction *)g {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [self ColorCodeWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoTransferFunction *) nil_chk(g)) getObjectColor] withJavaLangStringBuilder:sb];
  NSString *template_ = JreStrcat("$@$C$C$", @"draw( (%0,%1) -- (%2,%3),", sb, @"+linewidth(1)", OrgGeogebraCommonUtilUnicode_SECTION_SIGN, @",arrows", OrgGeogebraCommonUtilUnicode_SECTION_SIGN, @");\n");
  JavaLangStringBuilder *lineBuilder = [self drawNyquistDiagramWithOrgGeogebraCommonKernelGeosGeoTransferFunction:g withNSString:template_ withNSString:JreStrcat("C$C", OrgGeogebraCommonUtilUnicode_SECTION_SIGN, @",arrows", OrgGeogebraCommonUtilUnicode_SECTION_SIGN) withNSString:@",BeginArrow" withNSString:@",EndArrow"];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithNSString:JreStrcat("$$", [((JavaLangStringBuilder *) nil_chk(lineBuilder)) description], @";\n")];
}

- (NSString *)formatWithDouble:(jdouble)d {
  return [((NSString *) nil_chk([super formatWithDouble:d])) replace:@"E" withSequence:@"e"];
}

- (jboolean)fillSplineWithOrgGeogebraCommonKernelGeosGeoCurveCartesianArray:(IOSObjectArray *)curves {
  if ([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(nil_chk(curves), 0))) getAlphaValue] == 0 && OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD() == [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, 0))) getFillType]) {
    return NO;
  }
  NSString *liopco = OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, IOSObjectArray_Get(curves, 0), YES);
  if (liopco == nil) {
    liopco = @"";
  }
  else {
    liopco = JreStrcat("C$", ',', liopco);
  }
  for (jint i = 0; i < curves->size_; i++) {
    [self drawSingleCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(curves, i) withBoolean:NO];
  }
  JavaLangStringBuilder *fill = [new_JavaLangStringBuilder_init() autorelease];
  [fill appendWithNSString:@"\nfill("];
  jdouble p;
  jdouble y;
  jdouble x;
  for (jint i = 0; i < curves->size_; i++) {
    p = [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) getMinParameter];
    y = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) getFunY])) evaluateWithDouble:[((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) getMinParameter]];
    if (JavaLangMath_absWithDouble_(y) < 0.001) y = 0;
    jdouble step = ([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) getMaxParameter] - [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) getMinParameter]) / 200;
    for (; p <= [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) getMaxParameter]; p += step) {
      y = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) getFunY])) evaluateWithDouble:p];
      x = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) getFunX])) evaluateWithDouble:p];
      if (JavaLangMath_absWithDouble_(y) < 0.001) y = 0;
      if (JavaLangMath_absWithDouble_(x) < 0.001) x = 0;
      [fill appendWithNSString:JreStrcat("CDCD$", '(', x, ',', y, @") -- ")];
    }
  }
  [fill appendWithNSString:JreStrcat("$$$", @"cycle", liopco, @");")];
  [((JavaLangStringBuilder *) nil_chk(code_)) appendWithJavaLangCharSequence:fill];
  return YES;
}

- (void)dealloc {
  RELEASE_(codeBeginPic_);
  RELEASE_(codePointDecl_);
  RELEASE_(codeColors_);
  RELEASE_(codeEndDoc_);
  RELEASE_(pointList_);
  RELEASE_(pairNameTable_);
  RELEASE_(functionTable_);
  RELEASE_(implicitPolyTable_);
  RELEASE_(usepackage_);
  RELEASE_(importpackage_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "GeoGebraToAsymptote", NULL, 0x1, NULL, NULL },
    { "generateAllCode", NULL, "V", 0x1, NULL, NULL },
    { "drawLocusWithOrgGeogebraCommonKernelGeosGeoLocus:", "drawLocus", "V", 0x4, NULL, NULL },
    { "drawBoxPlotWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawBoxPlot", "V", 0x4, NULL, NULL },
    { "drawHistogramOrBarChartBoxWithDoubleArray:withDoubleArray:withInt:withDouble:withOrgGeogebraCommonKernelGeosGeoNumeric:", "drawHistogramOrBarChartBox", "V", 0x4, NULL, NULL },
    { "drawSumTrapezoidalWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawSumTrapezoidal", "V", 0x4, NULL, NULL },
    { "drawSumUpperLowerWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawSumUpperLower", "V", 0x4, NULL, NULL },
    { "drawIntegralFunctionsWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawIntegralFunctions", "V", 0x4, NULL, NULL },
    { "drawIntegralWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawIntegral", "V", 0x4, NULL, NULL },
    { "drawSlopeWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawSlope", "V", 0x4, NULL, NULL },
    { "drawAngleWithOrgGeogebraCommonKernelGeosGeoAngle:", "drawAngle", "V", 0x4, NULL, NULL },
    { "drawArrowArcWithOrgGeogebraCommonKernelGeosGeoAngle:withDoubleArray:withDouble:withDouble:withDouble:withBoolean:", "drawArrowArc", "V", 0x4, NULL, NULL },
    { "drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:withDoubleArray:withDouble:withDouble:withDouble:", "drawArc", "V", 0x4, NULL, NULL },
    { "drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:withDoubleArray:withDouble:", "drawTick", "V", 0x4, NULL, NULL },
    { "drawSliderWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawSlider", "V", 0x4, NULL, NULL },
    { "drawPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:", "drawPolygon", "V", 0x4, NULL, NULL },
    { "drawTextWithOrgGeogebraCommonKernelGeosGeoText:", "drawText", "V", 0x4, NULL, NULL },
    { "drawGeoConicPartWithOrgGeogebraCommonKernelGeosGeoConicPart:", "drawGeoConicPart", "V", 0x4, NULL, NULL },
    { "drawSingleCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:withBoolean:", "drawSingleCurveCartesian", "V", 0x4, NULL, NULL },
    { "drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:", "drawFunction", "V", 0x4, NULL, NULL },
    { "drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:withBoolean:withOrgGeogebraCommonKernelGeosGeoNumeric:withBoolean:", "drawFunction", "V", 0x4, NULL, NULL },
    { "renameFuncWithJavaLangStringBuilder:withNSString:withNSString:", "renameFunc", "V", 0xa, NULL, NULL },
    { "maxDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:", "maxDefinedValue", "D", 0x2, NULL, NULL },
    { "firstDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:", "firstDefinedValue", "D", 0x2, NULL, NULL },
    { "drawGeoVectorWithOrgGeogebraCommonKernelGeosGeoVector:", "drawGeoVector", "V", 0x4, NULL, NULL },
    { "drawCircleWithOrgGeogebraCommonKernelGeosGeoConic:", "drawCircle", "V", 0x2, NULL, NULL },
    { "drawGeoConicWithOrgGeogebraCommonKernelGeosGeoConic:", "drawGeoConic", "V", 0x4, NULL, NULL },
    { "drawGeoPointWithOrgGeogebraCommonKernelGeosGeoPoint:", "drawGeoPoint", "V", 0x4, NULL, NULL },
    { "drawSpecialPointWithOrgGeogebraCommonKernelGeosGeoPoint:", "drawSpecialPoint", "V", 0x4, NULL, NULL },
    { "drawGeoLineWithOrgGeogebraCommonKernelGeosGeoLine:", "drawGeoLine", "V", 0x4, NULL, NULL },
    { "drawGeoSegmentWithOrgGeogebraCommonKernelGeosGeoSegment:", "drawGeoSegment", "V", 0x4, NULL, NULL },
    { "drawLineWithDouble:withDouble:withDouble:withDouble:withOrgGeogebraCommonKernelGeosGeoElement:", "drawLine", "V", 0x4, NULL, NULL },
    { "drawGeoRayWithOrgGeogebraCommonKernelGeosGeoRay:", "drawGeoRay", "V", 0x4, NULL, NULL },
    { "drawImplicitPolyWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "drawImplicitPoly", "V", 0x4, NULL, NULL },
    { "drawPolyLineWithOrgGeogebraCommonKernelGeosGeoPolyLine:", "drawPolyLine", "V", 0x4, NULL, NULL },
    { "initUnitAndVariable", NULL, "V", 0x2, NULL, NULL },
    { "initPointDeclarations", NULL, "V", 0x2, NULL, NULL },
    { "drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonEuclidianDrawableND:", "drawLabel", "V", 0x4, NULL, NULL },
    { "ColorEqualsWithOrgGeogebraCommonAwtGColor:withOrgGeogebraCommonAwtGColor:", "ColorEquals", "Z", 0x0, NULL, NULL },
    { "drawGrid", NULL, "V", 0x2, NULL, NULL },
    { "drawAxis", NULL, "V", 0x2, NULL, NULL },
    { "drawArrowsWithInt:withBoolean:", "drawArrows", "V", 0x2, NULL, NULL },
    { "PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint:withJavaLangStringBuilder:withDouble:", "PointOptionCode", "V", 0x2, NULL, NULL },
    { "PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint:withJavaLangStringBuilder:", "PointOptionCode", "V", 0x2, NULL, NULL },
    { "LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "LineOptionCode", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "LinestyleCodeWithInt:withJavaLangStringBuilder:", "LinestyleCode", "V", 0xa, NULL, NULL },
    { "ColorCodeWithOrgGeogebraCommonAwtGColor:withJavaLangStringBuilder:", "ColorCode", "V", 0x4, NULL, NULL },
    { "ColorLightCodeWithOrgGeogebraCommonAwtGColor:withDouble:withJavaLangStringBuilder:", "ColorLightCode", "V", 0x4, NULL, NULL },
    { "ColorCode2WithOrgGeogebraCommonAwtGColor:withJavaLangStringBuilder:", "ColorCode2", "V", 0x4, NULL, NULL },
    { "addTextWithNSString:withBoolean:withInt:", "addText", "V", 0x2, NULL, NULL },
    { "packSpaceBetweenWithNSStringArray:", "packSpaceBetween", "V", 0x84, NULL, NULL },
    { "packSpaceBetweenWithJavaLangStringBuilder:withNSStringArray:", "packSpaceBetween", "V", 0x84, NULL, NULL },
    { "packSpaceAfterWithNSStringArray:", "packSpaceAfter", "V", 0x84, NULL, NULL },
    { "packSpaceAfterWithJavaLangStringBuilder:withNSStringArray:", "packSpaceAfter", "V", 0x84, NULL, NULL },
    { "packSpaceWithNSStringArray:", "packSpace", "V", 0x84, NULL, NULL },
    { "packSpaceWithJavaLangStringBuilder:withNSStringArray:", "packSpace", "V", 0x84, NULL, NULL },
    { "startDraw", NULL, "V", 0x4, NULL, NULL },
    { "startDrawWithJavaLangStringBuilder:", "startDraw", "V", 0x4, NULL, NULL },
    { "endDrawWithOrgGeogebraCommonKernelGeosGeoElement:", "endDraw", "V", 0x4, NULL, NULL },
    { "endDrawWithOrgGeogebraCommonKernelGeosGeoElement:withJavaLangStringBuilder:", "endDraw", "V", 0x4, NULL, NULL },
    { "startTransparentFillWithJavaLangStringBuilder:", "startTransparentFill", "V", 0x4, NULL, NULL },
    { "endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:withJavaLangStringBuilder:", "endTransparentFill", "V", 0x4, NULL, NULL },
    { "endPointWithOrgGeogebraCommonAwtGColor:", "endPoint", "V", 0x4, NULL, NULL },
    { "addPointWithNSString:withNSString:withJavaLangStringBuilder:", "addPoint", "V", 0x4, NULL, NULL },
    { "addPointWithDouble:withDouble:withJavaLangStringBuilder:", "addPoint", "V", 0x4, NULL, NULL },
    { "convertUnicodeToTextWithJavaLangStringBuilder:", "convertUnicodeToText", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "convertUnicodeToTextWithNSString:", "convertUnicodeToText", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "convertUnicodeToLatexWithNSString:", "convertUnicodeToLatex", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "parseFunctionWithNSString:", "parseFunction", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "killSpaceWithNSString:", "killSpace", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "getStringTemplate", NULL, "Lorg.geogebra.common.kernel.StringTemplate;", 0x4, NULL, NULL },
    { "penStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "penStyle", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isLatexFunctionWithNSString:", "isLatexFunction", "Z", 0x4, NULL, NULL },
    { "drawNyquistWithOrgGeogebraCommonKernelGeosGeoTransferFunction:", "drawNyquist", "V", 0x4, NULL, NULL },
    { "formatWithDouble:", "format", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "fillSplineWithOrgGeogebraCommonKernelGeosGeoCurveCartesianArray:", "fillSpline", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "eurosym_", NULL, 0x2, "Z", NULL, NULL,  },
    { "compact_", NULL, 0x2, "Z", NULL, NULL,  },
    { "compactcse5_", NULL, 0x2, "Z", NULL, NULL,  },
    { "grayscale_", NULL, 0x2, "Z", NULL, NULL,  },
    { "dotColors_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pairName_", NULL, 0x2, "Z", NULL, NULL,  },
    { "parabolaCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "hyperbolaCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "arcCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "functionCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "implicitFuncCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "fillType_", NULL, 0x2, "I", NULL, NULL,  },
    { "fontsize_", NULL, 0x2, "I", NULL, NULL,  },
    { "codeBeginPic_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "codePointDecl_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "codeColors_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "codeEndDoc_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "pointList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoPoint;>;",  },
    { "pairNameTable_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;",  },
    { "functionTable_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;",  },
    { "implicitPolyTable_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;",  },
    { "usepackage_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "importpackage_", NULL, 0x1, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "fillInequality_", NULL, 0x1, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonExportPstricksGeoGebraToAsymptote = { 2, "GeoGebraToAsymptote", "org.geogebra.common.export.pstricks", NULL, 0x401, 76, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonExportPstricksGeoGebraToAsymptote;
}

@end

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonExportPstricksGeoGebraExport_initWithOrgGeogebraCommonMainApp_(self, app);
  self->eurosym_ = NO;
  self->compact_ = NO;
  self->compactcse5_ = NO;
  self->grayscale_ = NO;
  self->dotColors_ = NO;
  self->pairName_ = NO;
  self->parabolaCount_ = 0;
  self->hyperbolaCount_ = 0;
  self->arcCount_ = 0;
  self->functionCount_ = 0;
  self->implicitFuncCount_ = 0;
  self->fillType_ = 0;
  self->fillInequality_ = NO;
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *sb, NSString *nameFunc, NSString *nameNew) {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initialize();
  jint ind = [((JavaLangStringBuilder *) nil_chk(sb)) indexOfWithNSString:nameFunc];
  while (ind > -1) {
    [sb replaceWithInt:ind withInt:ind + ((jint) [((NSString *) nil_chk(nameFunc)) length]) withNSString:nameNew];
    ind = [sb indexOfWithNSString:nameFunc];
  }
}

jdouble OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_maxDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoFunction *f, jdouble a, jdouble b) {
  jdouble x = a;
  jdouble step = (b - a) / 100;
  while (x <= b) {
    jdouble y = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) evaluateWithDouble:x];
    if (JavaLangDouble_isNaNWithDouble_(y)) {
      if (step < self->PRECISION_XRANGE_FUNCTION_) return x - step;
      return OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_maxDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(self, f, x - step, x);
    }
    x += step;
  }
  return b;
}

jdouble OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_firstDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoFunction *f, jdouble a, jdouble b) {
  jdouble x = a;
  jdouble step = (b - a) / 100;
  while (x <= b) {
    jdouble y = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) evaluateWithDouble:x];
    if (!JavaLangDouble_isNaNWithDouble_(y)) {
      if (x == a) return a;
      else if (step < self->PRECISION_XRANGE_FUNCTION_) return x;
      else return OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_firstDefinedValueWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(self, f, x - step, x);
    }
    x += step;
  }
  return b;
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawCircleWithOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoConic *geo) {
  JavaLangStringBuilder *tempsb = [new_JavaLangStringBuilder_init() autorelease];
  jboolean nofill = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(geo)) getAlphaValue] < 0.05;
  if (self->xunit_ == self->yunit_) {
    jdouble x = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getX];
    jdouble y = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getY];
    jdouble r = IOSDoubleArray_Get(nil_chk([geo getHalfAxes]), 0);
    NSString *tmpr = [self formatWithDouble:r];
    if (nofill) {
      if (!self->compact_) [tempsb appendWithNSString:@"\n"];
      if (self->compactcse5_) [tempsb appendWithNSString:@"D(CR("];
      else [tempsb appendWithNSString:@"draw(circle("];
    }
    else {
      [self startTransparentFillWithJavaLangStringBuilder:tempsb];
      if (self->compactcse5_) [tempsb appendWithNSString:@"CR("];
      else [tempsb appendWithNSString:@"circle("];
    }
    [self addPointWithNSString:[self formatWithDouble:x] withNSString:[self formatWithDouble:y] withJavaLangStringBuilder:tempsb];
    [self packSpaceAfterWithJavaLangStringBuilder:tempsb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    if ([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToDoubleWithNSString:tmpr] != 0) [tempsb appendWithNSString:tmpr];
    else [tempsb appendWithDouble:r];
    [tempsb appendWithNSString:@")"];
    if (nofill) {
      [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:tempsb];
    }
    else [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:tempsb];
  }
  else {
    jdouble x1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getX];
    jdouble y1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([geo getTranslationVector])) getY];
    jdouble r1 = IOSDoubleArray_Get(nil_chk([geo getHalfAxes]), 0);
    jdouble r2 = IOSDoubleArray_Get(nil_chk([geo getHalfAxes]), 1);
    if (nofill) {
      if (!self->compact_) [tempsb appendWithNSString:@"\n"];
      if (self->compactcse5_) [tempsb appendWithNSString:@"D("];
      else [tempsb appendWithNSString:@"draw("];
    }
    else [self startTransparentFillWithJavaLangStringBuilder:tempsb];
    [tempsb appendWithNSString:@"shift("];
    [self addPointWithNSString:[self formatWithDouble:x1] withNSString:[self formatWithDouble:y1] withJavaLangStringBuilder:tempsb];
    [self packSpaceBetweenWithJavaLangStringBuilder:tempsb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @")", @"*", JreStrcat("$$C", @"scale(", [self formatWithDouble:r1], ','), JreStrcat("$$", [self formatWithDouble:r2], @")*unitcircle") } count:4 type:NSString_class_()]];
    if (nofill) [self endDrawWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:tempsb];
    else [self endTransparentFillWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:tempsb];
  }
  if (nofill) [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithJavaLangCharSequence:tempsb];
  else [((JavaLangStringBuilder *) nil_chk(self->codeFilledObject_)) appendWithJavaLangCharSequence:tempsb];
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initUnitAndVariable(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self) {
  if (!self->compact_) {
    [((JavaLangStringBuilder *) nil_chk(self->codePreamble_)) appendWithNSString:@"\nreal labelscalefactor = 0.5; /* changes label-to-point distance */"];
    [self->codePreamble_ appendWithNSString:@"\npen dps = linewidth(0.7) + fontsize("];
    [self->codePreamble_ appendWithInt:self->fontsize_];
    [self->codePreamble_ appendWithNSString:@"); defaultpen(dps); /* default pen style */ "];
    if (![((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(self->frame_)) getKeepDotColors]) [self->codePreamble_ appendWithNSString:@"\npen dotstyle = black; /* point style */ \n"];
  }
  else if (!self->compactcse5_) {
    [((JavaLangStringBuilder *) nil_chk(self->codePreamble_)) appendWithNSString:@"real lsf=0.5; pen dps=linewidth(0.7)+fontsize("];
    [self->codePreamble_ appendWithInt:self->fontsize_];
    [self->codePreamble_ appendWithNSString:@"); defaultpen(dps); "];
    if (![((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(self->frame_)) getKeepDotColors]) [self->codePreamble_ appendWithNSString:@"pen ds=black; "];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(self->codePreamble_)) appendWithNSString:@"real lsf=0.5; pathpen=linewidth(0.7); pointpen=black; pen fp=fontsize("];
    [self->codePreamble_ appendWithInt:self->fontsize_];
    [self->codePreamble_ appendWithNSString:@"); pointfontpen=fp; "];
  }
  IOSBooleanArray *positiveOnly = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->euclidianView_)) getPositiveAxes];
  jdouble assignMinX = self->xmin_;
  jdouble assignMinY = self->ymin_;
  if (IOSBooleanArray_Get(nil_chk(positiveOnly), 0)) {
    assignMinX = -0.1;
  }
  if (IOSBooleanArray_Get(positiveOnly, 1)) {
    assignMinY = -0.1;
  }
  [self packSpaceBetweenWithJavaLangStringBuilder:self->codePreamble_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"real xmin", @"=", JreStrcat("$C", [self formatWithDouble:assignMinX], ','), @"xmax", @"=", JreStrcat("$C", [self formatWithDouble:self->xmax_], ','), @"ymin", @"=", JreStrcat("$C", [self formatWithDouble:assignMinY], ','), @"ymax", @"=", JreStrcat("$$", [self formatWithDouble:self->ymax_], @"; ") } count:12 type:NSString_class_()]];
  if (!self->compact_) [((JavaLangStringBuilder *) nil_chk(self->codePreamble_)) appendWithNSString:@" /* image dimensions */\n"];
  else {
  }
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initPointDeclarations(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self) {
  if (!self->pairName_) return;
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(self->pointList_)) iterator];
  jboolean comma = NO;
  IOSObjectArray *predefinedNames = [IOSObjectArray arrayWithObjects:(id[]){ @"N", @"S", @"E", @"W", @"NE", @"SE", @"NW", @"SW", @"NNE", @"NNW", @"SSE", @"SSW", @"ENE", @"WNW", @"ESE", @"WSW", @"left", @"right", @"up", @"down" } count:20 type:NSString_class_()];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoPoint *gp = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(gp)) getPointStyle] == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT || [gp getPointStyle] == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE) {
      jdouble x = [gp getX], y = [gp getY], z = [gp getZ];
      x /= z;
      y /= z;
      NSString *pairString = JreStrcat("C$C$C", '(', [self formatWithDouble:x], ',', [self formatWithDouble:y], ')');
      NSString *pointName = [gp getLabelWithOrgGeogebraCommonKernelStringTemplate:[self getStringTemplate]];
      jboolean isVariable = YES;
      for (jint i = 0; i < ((jint) [((NSString *) nil_chk(pointName)) length]); i++) if (!JavaLangCharacter_isLetterOrDigitWithChar_([pointName charAtWithInt:i]) && [pointName charAtWithInt:i] != '_') isVariable = NO;
      for (jint i = 0; i < predefinedNames->size_; i++) if ([pointName isEqual:IOSObjectArray_Get(predefinedNames, i)]) isVariable = NO;
      if (![((id<JavaUtilMap>) nil_chk(self->pairNameTable_)) containsKeyWithId:pairString] && isVariable) {
        if (comma) [((JavaLangStringBuilder *) nil_chk(self->codePointDecl_)) appendWithNSString:@", "];
        else comma = YES;
        [self->pairNameTable_ putWithId:pairString withId:pointName];
        [((JavaLangStringBuilder *) nil_chk(self->codePointDecl_)) appendWithNSString:pointName];
        [self packSpaceWithJavaLangStringBuilder:self->codePointDecl_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"=" } count:1 type:NSString_class_()]];
        [self->codePointDecl_ appendWithNSString:pairString];
      }
    }
  }
  if (comma) {
    [((JavaLangStringBuilder *) nil_chk(self->codePointDecl_)) insertWithInt:0 withNSString:@"\npair "];
    [self->codePointDecl_ appendWithNSString:@"; "];
  }
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawGrid(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self) {
  OrgGeogebraCommonAwtGColor *GridCol = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->euclidianView_)) getGridColor];
  IOSDoubleArray *GridDist = [self->euclidianView_ getGridDistances];
  jboolean GridBold = [self->euclidianView_ getGridIsBold];
  jint GridLine = [self->euclidianView_ getGridLineStyle];
  if (!self->compact_) {
    [((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) appendWithNSString:@"\n /* draw grid of horizontal/vertical lines */"];
    [self->codeBeginPic_ appendWithNSString:@"\npen gridstyle = "];
    if (GridBold) [self->codeBeginPic_ appendWithNSString:@"linewidth(1.0)"];
    else [self->codeBeginPic_ appendWithNSString:@"linewidth(0.7)"];
    [self->codeBeginPic_ appendWithNSString:@" + "];
    [self ColorCodeWithOrgGeogebraCommonAwtGColor:GridCol withJavaLangStringBuilder:self->codeBeginPic_];
    if (GridLine != OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL) {
      [self->codeBeginPic_ appendWithNSString:@" + "];
      OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LinestyleCodeWithInt_withJavaLangStringBuilder_(GridLine, self->codeBeginPic_);
    }
    [self->codeBeginPic_ appendWithNSString:@"; real gridx = "];
    [self->codeBeginPic_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(nil_chk(GridDist), 0)]];
    [self->codeBeginPic_ appendWithNSString:@", gridy = "];
    [self->codeBeginPic_ appendWithNSString:[self formatWithDouble:IOSDoubleArray_Get(GridDist, 1)]];
    [self->codeBeginPic_ appendWithNSString:@"; /* grid intervals */\nfor(real i = ceil(xmin/gridx)*gridx; i <= floor(xmax/gridx)*gridx; i += gridx)"];
    [self->codeBeginPic_ appendWithNSString:@"\n draw((i,ymin)--(i,ymax), gridstyle);"];
    [self->codeBeginPic_ appendWithNSString:@"\nfor(real i = ceil(ymin/gridy)*gridy; i <= floor(ymax/gridy)*gridy; i += gridy)"];
    [self->codeBeginPic_ appendWithNSString:@"\n draw((xmin,i)--(xmax,i), gridstyle);"];
    [self->codeBeginPic_ appendWithNSString:@"\n /* end grid */ \n"];
    return;
  }
  else if (!self->compactcse5_) [((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) appendWithNSString:@"\n/*grid*/ "];
  [((id<JavaUtilSet>) nil_chk(self->importpackage_)) addWithId:@"math"];
  [((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) appendWithNSString:JreStrcat("$$$$$", @"real gx=", [self formatWithDouble:IOSDoubleArray_Get(nil_chk(GridDist), 0)], @",gy=", [self formatWithDouble:IOSDoubleArray_Get(GridDist, 1)], @"; ")];
  [self->codeBeginPic_ appendWithNSString:@"add(scale(gx,gy)*shift(floor(xmin/gx),floor(ymin/gy))*grid(ceil(xmax-xmin)+1,ceil(ymax-ymin)+1,"];
  if (GridBold) [self->codeBeginPic_ appendWithNSString:@"linewidth(1.0)"];
  else [self->codeBeginPic_ appendWithNSString:@"linewidth(0.7)"];
  [self->codeBeginPic_ appendWithNSString:@"+"];
  [self ColorCodeWithOrgGeogebraCommonAwtGColor:GridCol withJavaLangStringBuilder:self->codeBeginPic_];
  if (GridLine != OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL) {
    [self->codeBeginPic_ appendWithNSString:@"+"];
    OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LinestyleCodeWithInt_withJavaLangStringBuilder_(GridLine, self->codeBeginPic_);
  }
  [self->codeBeginPic_ appendWithNSString:@")); "];
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawAxis(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self) {
  jboolean xAxis = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->euclidianView_)) getShowXaxis];
  jboolean yAxis = [self->euclidianView_ getShowYaxis];
  jboolean bx = IOSBooleanArray_Get(nil_chk([self->euclidianView_ getShowAxesNumbers]), 0);
  jboolean by = IOSBooleanArray_Get(nil_chk([self->euclidianView_ getShowAxesNumbers]), 1);
  NSString *Dx = [self formatWithDouble:IOSDoubleArray_Get(nil_chk([self->euclidianView_ getAxesNumberingDistances]), 0)];
  NSString *Dy = [self formatWithDouble:IOSDoubleArray_Get(nil_chk([self->euclidianView_ getAxesNumberingDistances]), 1)];
  IOSObjectArray *label = [self->euclidianView_ getAxesLabelsWithBoolean:NO];
  IOSObjectArray *units = [self->euclidianView_ getAxesUnitLabels];
  jint axisStyle = [self->euclidianView_ getAxesLineStyle];
  IOSIntArray *tickStyle = [self->euclidianView_ getAxesTickStyles];
  OrgGeogebraCommonAwtGColor *axisColor = [self->euclidianView_ getAxesColor];
  jboolean axisBold = (axisStyle & 2) == OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD;
  NSString *lx = @"", *ly = @"";
  if (IOSObjectArray_Get(nil_chk(label), 0) != nil) lx = JreStrcat("C$C", '$', OrgGeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_(IOSObjectArray_Get(label, 0), YES), '$');
  if (IOSObjectArray_Get(label, 1) != nil) ly = JreStrcat("C$C", '$', OrgGeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_(IOSObjectArray_Get(label, 1), YES), '$');
  if (xAxis || yAxis) {
    [((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) appendWithNSString:@"\n"];
    [self->codeBeginPic_ appendWithNSString:@"Label laxis; laxis.p"];
    [self packSpaceWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"=" } count:1 type:NSString_class_()]];
    [self->codeBeginPic_ appendWithNSString:JreStrcat("$I$", @"fontsize(", self->fontsize_, @"); ")];
    if (!bx || !by) {
      if (!self->compact_) [self->codeBeginPic_ appendWithNSString:@"\n"];
      [self->codeBeginPic_ appendWithNSString:@"string blank(real x) {return \"\";} "];
    }
    if (bx || by) {
      if (IOSObjectArray_Get(nil_chk(units), 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(units, 0))) isEqual:@""]) {
        [self->codeBeginPic_ appendWithNSString:@"string "];
        if (self->compact_) [self->codeBeginPic_ appendWithNSString:@"xlbl"];
        else [self->codeBeginPic_ appendWithNSString:@"xaxislabel"];
        [self packSpaceWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real x)" } count:1 type:NSString_class_()]];
        [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"{" } count:1 type:NSString_class_()]];
        if ([((NSString *) nil_chk(IOSObjectArray_Get(units, 0))) isEqual:OrgGeogebraCommonUtilUnicode_get_PI_STRING_()]) {
          [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"string s; ", @"int n", @"=", @"round(2*x/pi); " } count:4 type:NSString_class_()]];
          if (!self->compact_) [self->codeBeginPic_ appendWithNSString:@"\n"];
          [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"if(abs(n-2*x/pi)", @">", @"1e-3) return string(x); " } count:3 type:NSString_class_()]];
          if (!self->compact_) [self->codeBeginPic_ appendWithNSString:@"\n"];
          [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"if(abs(n)", @">", @"2) s = string(round((n%2", @"+", @"1)*x/pi)); " } count:5 type:NSString_class_()]];
          if (!self->compact_) [self->codeBeginPic_ appendWithNSString:@"\n"];
          [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"if(n%2", @"==", @"0) return \"$\"+s+\"\\pi$\"; " } count:3 type:NSString_class_()]];
        }
        [self->codeBeginPic_ appendWithNSString:@"return \"$\""];
        [self packSpaceWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
        if ([((NSString *) nil_chk(IOSObjectArray_Get(units, 0))) isEqual:OrgGeogebraCommonUtilUnicode_get_PI_STRING_()]) [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"s", @"+", @"\"\\pi/2" } count:3 type:NSString_class_()]];
        else if ([((NSString *) nil_chk(IOSObjectArray_Get(units, 0))) isEqual:OrgGeogebraCommonUtilUnicode_get_DEGREE_()]) [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"string(x)", @"+", @"\"^\\circ" } count:3 type:NSString_class_()]];
        else {
          [self->codeBeginPic_ appendWithNSString:@"string(x)"];
          [self packSpaceWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
          [self->codeBeginPic_ appendWithNSString:JreStrcat("$$C", @"\"\\,\\mathrm{", IOSObjectArray_Get(units, 0), '}')];
        }
        [self->codeBeginPic_ appendWithNSString:@"$\";} "];
      }
      if (IOSObjectArray_Get(units, 1) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(units, 1))) isEqual:@""]) {
        [self->codeBeginPic_ appendWithNSString:@"string "];
        if (self->compact_) [self->codeBeginPic_ appendWithNSString:@"ylbl"];
        else [self->codeBeginPic_ appendWithNSString:@"yaxislabel"];
        [self packSpaceWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"(real x)" } count:1 type:NSString_class_()]];
        [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"{" } count:1 type:NSString_class_()]];
        if ([((NSString *) nil_chk(IOSObjectArray_Get(units, 1))) isEqual:OrgGeogebraCommonUtilUnicode_get_PI_STRING_()]) {
          [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"string s; ", @"int n", @"=", @"round(2*x/pi); " } count:4 type:NSString_class_()]];
          if (!self->compact_) [self->codeBeginPic_ appendWithNSString:@"\n"];
          [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"if(abs(n-2*x/pi)", @">", @"1e-3) return string(x); " } count:3 type:NSString_class_()]];
          if (!self->compact_) [self->codeBeginPic_ appendWithNSString:@"\n"];
          [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"if(abs(n)", @">", @"2) s = string(round((n%2", @"+", @"1)*x/pi)); " } count:5 type:NSString_class_()]];
          if (!self->compact_) [self->codeBeginPic_ appendWithNSString:@"\n"];
          [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"if(n%2", @"==", @"0) return \"$\"+s+\"\\pi$\"; " } count:3 type:NSString_class_()]];
        }
        [self->codeBeginPic_ appendWithNSString:@"return \"$\""];
        [self packSpaceWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
        if ([((NSString *) nil_chk(IOSObjectArray_Get(units, 1))) isEqual:OrgGeogebraCommonUtilUnicode_get_PI_STRING_()]) [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"s", @"+", @"\"\\pi/2" } count:3 type:NSString_class_()]];
        else if ([((NSString *) nil_chk(IOSObjectArray_Get(units, 1))) isEqual:OrgGeogebraCommonUtilUnicode_get_DEGREE_()]) [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"string(x)", @"+", @"\"^\\circ" } count:3 type:NSString_class_()]];
        else {
          [self->codeBeginPic_ appendWithNSString:@"string(x)"];
          [self packSpaceWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
          [self->codeBeginPic_ appendWithNSString:JreStrcat("$$C", @"\"\\,\\mathrm{", IOSObjectArray_Get(units, 1), '}')];
        }
        [self->codeBeginPic_ appendWithNSString:@"$\";} "];
      }
    }
    [self->codeBeginPic_ appendWithNSString:@"\n"];
  }
  if (xAxis) {
    [((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) appendWithNSString:@"xaxis("];
    if (IOSObjectArray_Get(label, 0) != nil) [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("C$$", '"', lx, @"\",") } count:1 type:NSString_class_()]];
    [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"xmin,", @"xmax" } count:2 type:NSString_class_()]];
    if (axisColor != OrgGeogebraCommonAwtGColor_get_BLACK_()) {
      [self->codeBeginPic_ appendWithNSString:@","];
      if (self->compactcse5_) [self->codeBeginPic_ appendWithNSString:@"pathpen+"];
      else [self->codeBeginPic_ appendWithNSString:@"defaultpen+"];
      [self ColorCodeWithOrgGeogebraCommonAwtGColor:axisColor withJavaLangStringBuilder:self->codeBeginPic_];
      if (axisBold) {
        [self->codeBeginPic_ appendWithNSString:@"+linewidth(1.2)"];
      }
    }
    else if (axisBold) {
      [self->codeBeginPic_ appendWithNSString:@",linewidth(1.2)"];
    }
    [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    if (IOSIntArray_Get(nil_chk(tickStyle), 0) == OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR) {
      [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"Ticks(laxis," } count:1 type:NSString_class_()]];
      if (!bx) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"blank," } count:1 type:NSString_class_()]];
      else if (IOSObjectArray_Get(nil_chk(units), 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(units, 0))) isEqual:@""]) {
        if (self->compact_) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"xlbl," } count:1 type:NSString_class_()]];
        else [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"xaxislabel," } count:1 type:NSString_class_()]];
      }
      [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"Step", @"=", JreStrcat("$C", Dx, ','), @"Size", @"=", @"2" } count:6 type:NSString_class_()]];
      if (yAxis) [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @",", @"NoZero" } count:2 type:NSString_class_()]];
      [self->codeBeginPic_ appendWithNSString:@")"];
    }
    else if (IOSIntArray_Get(tickStyle, 0) == OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR_MINOR) {
      [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"Ticks(laxis," } count:1 type:NSString_class_()]];
      if (!bx) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"blank," } count:1 type:NSString_class_()]];
      else if (IOSObjectArray_Get(nil_chk(units), 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(units, 0))) isEqual:@""]) {
        if (self->compact_) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"xlbl," } count:1 type:NSString_class_()]];
        else [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"xaxislabel," } count:1 type:NSString_class_()]];
      }
      [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"n", @"=", @"2,", @"Step", @"=", JreStrcat("$C", Dx, ','), @"Size", @"=", @"2,", @"size", @"=", @"1" } count:12 type:NSString_class_()]];
      [self->codeBeginPic_ appendWithNSString:@")"];
    }
    [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @",", @"above", @"=", @"true); " } count:4 type:NSString_class_()]];
  }
  if (xAxis && yAxis && !self->compact_) [((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) appendWithNSString:@"\n"];
  if (yAxis) {
    [((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) appendWithNSString:@"yaxis("];
    if (IOSObjectArray_Get(label, 1) != nil) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("C$$", '"', ly, @"\",") } count:1 type:NSString_class_()]];
    [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"ymin,", @"ymax" } count:2 type:NSString_class_()]];
    if (axisColor != OrgGeogebraCommonAwtGColor_get_BLACK_()) {
      if (self->compactcse5_) [self->codeBeginPic_ appendWithNSString:@",pathpen+"];
      else [self->codeBeginPic_ appendWithNSString:@",defaultpen+"];
      [self ColorCodeWithOrgGeogebraCommonAwtGColor:axisColor withJavaLangStringBuilder:self->codeBeginPic_];
      if (axisBold) {
        [self->codeBeginPic_ appendWithNSString:@"+linewidth(1.2)"];
      }
    }
    else if (axisBold) {
      [self->codeBeginPic_ appendWithNSString:@",linewidth(1.2)"];
    }
    [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"," } count:1 type:NSString_class_()]];
    if (IOSIntArray_Get(nil_chk(tickStyle), 1) == OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR) {
      [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"Ticks(laxis," } count:1 type:NSString_class_()]];
      if (!by) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"blank," } count:1 type:NSString_class_()]];
      else if (IOSObjectArray_Get(nil_chk(units), 1) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(units, 1))) isEqual:@""]) {
        if (self->compact_) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"ylbl," } count:1 type:NSString_class_()]];
        else [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"yaxislabel," } count:1 type:NSString_class_()]];
      }
      [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"Step", @"=", JreStrcat("$C", Dy, ','), @"Size", @"=", @"2" } count:6 type:NSString_class_()]];
      if (xAxis) [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @",", @"NoZero" } count:2 type:NSString_class_()]];
      [self->codeBeginPic_ appendWithNSString:@")"];
    }
    else if (IOSIntArray_Get(tickStyle, 1) == OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR_MINOR) {
      [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"Ticks(laxis," } count:1 type:NSString_class_()]];
      if (!by) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"blank," } count:1 type:NSString_class_()]];
      else if (IOSObjectArray_Get(nil_chk(units), 1) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(units, 1))) isEqual:@""]) {
        if (self->compact_) [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"ylbl," } count:1 type:NSString_class_()]];
        else [self packSpaceAfterWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"yaxislabel," } count:1 type:NSString_class_()]];
      }
      [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"n", @"=", @"2,", @"Step", @"=", JreStrcat("$C", Dy, ','), @"Size", @"=", @"2,", @"size", @"=", @"1" } count:12 type:NSString_class_()]];
      [self->codeBeginPic_ appendWithNSString:@")"];
    }
    [self packSpaceBetweenWithJavaLangStringBuilder:self->codeBeginPic_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @",", @"above", @"=", @"true); " } count:4 type:NSString_class_()]];
  }
  if ((xAxis || yAxis) && !self->compact_) [((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) appendWithNSString:@"/* draws axes; NoZero hides '0' label */ "];
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawArrowsWithInt_withBoolean_(self, axisStyle, axisBold);
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_drawArrowsWithInt_withBoolean_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, jint axisStyle, jboolean axisBold) {
  jboolean axisLeftArrow = (axisStyle & 4) == OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_LEFT_ARROW;
  jboolean axisRightArrow = (axisStyle & 1) == OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_RIGHT_ARROW;
  NSString *arrow = nil;
  NSString *pt = @"6";
  if (axisBold) {
    pt = @"9";
  }
  if (axisRightArrow && axisLeftArrow) {
    arrow = JreStrcat("$$$", @"Arrows(", pt, @"),");
    [self->codeBeginPic_ insertWithInt:[((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) indexOfWithNSString:@"above"] - 1 withNSString:arrow];
    [self->codeBeginPic_ insertWithInt:[self->codeBeginPic_ lastIndexOfWithNSString:@"above"] - 1 withNSString:arrow];
  }
  else {
    if (axisRightArrow) {
      arrow = JreStrcat("$$$", @"EndArrow(", pt, @"),");
      [self->codeBeginPic_ insertWithInt:[((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) indexOfWithNSString:@"above"] - 1 withNSString:arrow];
      [self->codeBeginPic_ insertWithInt:[self->codeBeginPic_ lastIndexOfWithNSString:@"above"] - 1 withNSString:arrow];
    }
    if (axisLeftArrow) {
      arrow = JreStrcat("$$$", @"BeginArrow(", pt, @"),");
      [self->codeBeginPic_ insertWithInt:[((JavaLangStringBuilder *) nil_chk(self->codeBeginPic_)) indexOfWithNSString:@"above"] - 1 withNSString:arrow];
      [self->codeBeginPic_ insertWithInt:[self->codeBeginPic_ lastIndexOfWithNSString:@"above"] - 1 withNSString:arrow];
    }
  }
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_withDouble_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoPoint *geo, JavaLangStringBuilder *sb, jdouble dotsize) {
  OrgGeogebraCommonAwtGColor *dotcolor = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(geo)) getObjectColor];
  jint dotstyle = [geo getPointStyle];
  if (dotstyle == -1) {
    dotstyle = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
  }
  jboolean comma = NO;
  if (dotsize != OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE) {
    comma = YES;
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@",linewidth("];
    [sb appendWithNSString:[self formatWithDouble:dotsize]];
    [sb appendWithNSString:@"pt)"];
  }
  if (![((OrgGeogebraCommonAwtGColor *) nil_chk(dotcolor)) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()] && [((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(self->frame_)) getKeepDotColors]) {
    if (comma) [self packSpaceWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
    else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@","];
    comma = YES;
    [self ColorCodeWithOrgGeogebraCommonAwtGColor:dotcolor withJavaLangStringBuilder:sb];
  }
  else if (![((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(self->frame_)) getKeepDotColors] && !self->compactcse5_) {
    if (comma) [self packSpaceWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
    else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@","];
    comma = YES;
    if (!self->compact_) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"dotstyle"];
    else if (!self->compactcse5_) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"ds"];
  }
  if (dotstyle != OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT) {
    if (comma) [self packSpaceWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
    else [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@","];
    comma = YES;
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"invisible"];
  }
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoPoint *geo, JavaLangStringBuilder *sb) {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_PointOptionCodeWithOrgGeogebraCommonKernelGeosGeoPoint_withJavaLangStringBuilder_withDouble_(self, geo, sb, [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(geo)) getPointSize]);
}

NSString *OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LineOptionCodeWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean transparency) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  jint linethickness = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLineThickness];
  jint linestyle = [geo getLineType];
  OrgGeogebraCommonExportPstricksGeoGebraExport_Info *info = [new_OrgGeogebraCommonExportPstricksGeoGebraExport_Info_initWithOrgGeogebraCommonExportPstricksGeoGebraExport_withOrgGeogebraCommonKernelGeosGeoElement_(self, geo) autorelease];
  jboolean noPlus = YES;
  if (linethickness != OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS) {
    noPlus = NO;
    [sb appendWithNSString:@"linewidth("];
    [sb appendWithNSString:[self formatWithDouble:linethickness / 2.0 * 0.8]];
    [sb appendWithNSString:@")"];
  }
  if (linestyle != OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_TYPE) {
    if (!noPlus) [self packSpaceWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
    else noPlus = NO;
    OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LinestyleCodeWithInt_withJavaLangStringBuilder_(linestyle, sb);
  }
  if (![((OrgGeogebraCommonAwtGColor *) nil_chk([info getLinecolor])) isEqual:OrgGeogebraCommonAwtGColor_get_BLACK_()]) {
    if (!noPlus) [self packSpaceWithJavaLangStringBuilder:sb withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"+" } count:1 type:NSString_class_()]];
    else noPlus = NO;
    [self ColorCodeWithOrgGeogebraCommonAwtGColor:[info getLinecolor] withJavaLangStringBuilder:sb];
  }
  if (transparency && [geo isFillable] && [info getAlpha] > 0.0f) {
  }
  if (noPlus) return nil;
  return [NSString stringWithJavaLangStringBuilder:sb];
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_LinestyleCodeWithInt_withJavaLangStringBuilder_(jint linestyle, JavaLangStringBuilder *sb) {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initialize();
  {
    jint size;
    jint size1, size2, size3;
    switch (linestyle) {
      case OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DOTTED:
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"dotted"];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT:
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"linetype(\""];
      size = 2;
      [sb appendWithInt:size];
      [sb appendWithNSString:@" "];
      [sb appendWithInt:size];
      [sb appendWithNSString:@"\")"];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_LONG:
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"linetype(\""];
      size = 4;
      [sb appendWithInt:size];
      [sb appendWithNSString:@" "];
      [sb appendWithInt:size];
      [sb appendWithNSString:@"\")"];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_DOTTED:
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"linetype(\""];
      size1 = 0;
      size2 = 3;
      size3 = 4;
      [sb appendWithInt:size1];
      [sb appendWithNSString:@" "];
      [sb appendWithInt:size2];
      [sb appendWithNSString:@" "];
      [sb appendWithInt:size3];
      [sb appendWithNSString:@" "];
      [sb appendWithInt:size2];
      [sb appendWithNSString:@"\")"];
      break;
    }
  }
}

void OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_addTextWithNSString_withBoolean_withInt_(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote *self, NSString *st, jboolean isLatex, jint style) {
  if (isLatex) [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithNSString:@"$"];
  if (isLatex && [((NSString *) nil_chk(st)) charAtWithInt:0] == '$') st = [st substring:1];
  if (isLatex) {
    if ([((NSString *) nil_chk(st)) indexOfString:@"\\"] != -1) [((id<JavaUtilSet>) nil_chk(self->usepackage_)) addWithId:@"amsmath"];
    if ([st indexOfString:@"\\mathbb"] != -1 || [st indexOfString:@"\\mathfrak"] != -1) [((id<JavaUtilSet>) nil_chk(self->usepackage_)) addWithId:@"amssymb"];
    if ([st indexOfString:@"\\mathscr"] != -1) [((id<JavaUtilSet>) nil_chk(self->usepackage_)) addWithId:@"mathrsfs"];
  }
  if (isLatex) st = [self convertUnicodeToLatexWithNSString:st];
  else {
    st = [self convertUnicodeToTextWithNSString:st];
    st = [((NSString *) nil_chk(st)) replace:@"\\$" withSequence:@"dollar "];
    st = [((NSString *) nil_chk([((NSString *) nil_chk(st)) replace:@"\\\\" withSequence:@"\\\\textbackslash "])) replace:@"\\\\textbackslash \\\\textbackslash " withSequence:@"\\\\\\\\ "];
  }
  switch (style) {
    case 1:
    if (isLatex) [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithNSString:@"\\mathbf{"];
    else [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithNSString:@"\\textbf{"];
    break;
    case 2:
    if (isLatex) [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithNSString:@"\\mathit{"];
    else [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithNSString:@"\\textit{"];
    break;
    case 3:
    if (isLatex) [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithNSString:@"\\mathit{\\mathbf{"];
    else [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithNSString:@"\\textit{\\textbf{"];
    break;
  }
  [((JavaLangStringBuilder *) nil_chk(self->code_)) appendWithNSString:[st substring:0 endIndex:((jint) [((NSString *) nil_chk(st)) length]) - 1]];
  if (!isLatex || [st charAtWithInt:((jint) [st length]) - 1] != '$') [self->code_ appendWithChar:[st charAtWithInt:((jint) [st length]) - 1]];
  switch (style) {
    case 1:
    case 2:
    [self->code_ appendWithNSString:@"}"];
    break;
    case 3:
    [self->code_ appendWithNSString:@"}}"];
    break;
  }
  if (isLatex) [self->code_ appendWithNSString:@"$"];
}

NSString *OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_killSpaceWithNSString_(NSString *name) {
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  jboolean operand = NO;
  jboolean space = NO;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(name)) length]); i++) {
    jchar c = [name charAtWithInt:i];
    if ([@"*/+-" indexOf:c] != -1) {
      [sb appendWithChar:c];
      operand = YES;
      space = NO;
    }
    else if (c == ' ') {
      if (!operand) space = YES;
      else {
        space = NO;
        operand = NO;
      }
    }
    else {
      if (space) [sb appendWithNSString:@"*"];
      [sb appendWithChar:c];
      space = NO;
      operand = NO;
    }
  }
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\\\\pi", @"pi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"EXP(", @"exp(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"ln(", @"log(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"ceiling(", @"ceil(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"CEILING(", @"ceil(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"FLOOR(", @"floor(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"SIN(", @"sin(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"COS(", @"cos(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"TAN(", @"tan(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"ASIN(", @"asin(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"ACOS(", @"acos(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"ATAN(", @"atan(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"SINH(", @"sinh(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"COSH(", @"cosh(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"TANH(", @"tanh(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"ASINH(", @"asinh(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"ACOSH(", @"acosh(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"ATANH(", @"atanh(");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, OrgGeogebraCommonUtilUnicode_get_EULER_STRING_(), @"2.718");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u0393", @"Gamma");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u0394", @"Delta");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u0398", @"Theta");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u039b", @"Lambda");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u039e", @"Xi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03a0", @"Pi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03a3", @"Sigma");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03a6", @"Phi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03a8", @"Psi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03a9", @"Omega");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b1", @"alpha");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b2", @"beta");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b3", @"gamma");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b4", @"delta");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b5", @"epsilon");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b6", @"zeta");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b7", @"eta");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b8", @"theta");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03b9", @"iota");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03ba", @"kappa");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03bb", @"lambda");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03bc", @"mu");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03be", @"xi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, OrgGeogebraCommonUtilUnicode_get_PI_STRING_(), @"pi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c1", @"rho");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c2", @"varsigma");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c3", @"sigma");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c4", @"tau");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c5", @"upsilon");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c6", @"varphi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c7", @"chi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c8", @"psi");
  OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, @"\u03c9", @"omega");
  IOSObjectArray *greekalpha = [IOSObjectArray arrayWithObjects:(id[]){ @"alpha", @"beta", @"gamma", @"delta", @"epsilon", @"zeta", @"eta", @"theta", @"iota", @"kappa", @"lambda", @"mu", @"xi", @"pi", @"rho", @"varsigma", @"sigma", @"tau", @"upsilon", @"varphi", @"chi", @"psi", @"omega" } count:23 type:NSString_class_()];
  for (jint i = 0; i < greekalpha->size_; i++) {
    OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, JreStrcat("C$", '\\', IOSObjectArray_Get(greekalpha, i)), IOSObjectArray_Get(greekalpha, i));
    NSString *temps = JreStrcat("$$", JavaLangCharacter_toStringWithChar_(JavaLangCharacter_toUpperCaseWithChar_([((NSString *) nil_chk(IOSObjectArray_Get(greekalpha, i))) charAtWithInt:0])), [((NSString *) nil_chk(IOSObjectArray_Get(greekalpha, i))) substring:1]);
    OrgGeogebraCommonExportPstricksGeoGebraToAsymptote_renameFuncWithJavaLangStringBuilder_withNSString_withNSString_(sb, JreStrcat("C$", '\\', temps), temps);
  }
  return [NSString stringWithJavaLangStringBuilder:sb];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonExportPstricksGeoGebraToAsymptote)
