//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/export/pstricks/GeoGebraExport.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/euclidian/draw/DrawInequality.h"
#include "org/geogebra/common/euclidian/draw/DrawLine.h"
#include "org/geogebra/common/euclidian/draw/DrawPoint.h"
#include "org/geogebra/common/euclidian/plot/CurvePlotter.h"
#include "org/geogebra/common/export/pstricks/ExportSettings.h"
#include "org/geogebra/common/export/pstricks/GeoGebraExport.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoBarChart.h"
#include "org/geogebra/common/kernel/algos/AlgoBoxPlot.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionAreaSums.h"
#include "org/geogebra/common/kernel/algos/AlgoSlope.h"
#include "org/geogebra/common/kernel/algos/AlgoSumLeft.h"
#include "org/geogebra/common/kernel/algos/AlgoSumLower.h"
#include "org/geogebra/common/kernel/algos/AlgoSumRectangle.h"
#include "org/geogebra/common/kernel/algos/AlgoSumTrapezoidal.h"
#include "org/geogebra/common/kernel/algos/AlgoSumUpper.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/IneqTree.h"
#include "org/geogebra/common/kernel/arithmetic/Inequality.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralDefinite.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralFunctions.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoTransferFunction.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/statistics/AlgoHistogram.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/MyMath.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonExportPstricksGeoGebraExport () {
 @public
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonKernelStringTemplate *tpl_;
}

- (void)initBounds OBJC_METHOD_FAMILY_NONE;

- (void)drawCurveCartesianWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraExport, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraExport, tpl_, OrgGeogebraCommonKernelStringTemplate *)

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraExport_initBounds(OrgGeogebraCommonExportPstricksGeoGebraExport *self);

__attribute__((unused)) static void OrgGeogebraCommonExportPstricksGeoGebraExport_drawCurveCartesianWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonExportPstricksGeoGebraExport *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

@interface OrgGeogebraCommonExportPstricksGeoGebraExport_Info () {
 @public
  jfloat alpha_;
  jint y_;
  jdouble angle_;
  OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *fillType_;
  OrgGeogebraCommonAwtGColor *linecolor_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraExport_Info, fillType_, OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonExportPstricksGeoGebraExport_Info, linecolor_, OrgGeogebraCommonAwtGColor *)

@implementation OrgGeogebraCommonExportPstricksGeoGebraExport

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonExportPstricksGeoGebraExport_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (OrgGeogebraCommonMainApp *)getApp {
  return app_;
}

- (NSString *)formatWithDouble:(jdouble)d {
  NSString *ret = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(d) withOrgGeogebraCommonKernelStringTemplate:tpl_];
  ret = OrgGeogebraCommonUtilStringUtil_cannonicNumber2WithNSString_(ret);
  return ret;
}

- (void)refreshSelectionRectangle {
  jint x1 = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toScreenCoordXWithDouble:xmin_];
  jint x2 = [euclidianView_ toScreenCoordXWithDouble:xmax_];
  jint y1 = [euclidianView_ toScreenCoordYWithDouble:ymin_];
  jint y2 = [euclidianView_ toScreenCoordYWithDouble:ymax_];
  id<OrgGeogebraCommonAwtGRectangle> rec = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:x1 withInt:y2 withInt:x2 - x1 withInt:y1 - y2];
  [euclidianView_ setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:rec];
  [euclidianView_ repaint];
}

- (void)setxminWithDouble:(jdouble)xmin {
  self->xmin_ = xmin;
  [self refreshSelectionRectangle];
}

- (void)setxmaxWithDouble:(jdouble)xmax {
  self->xmax_ = xmax;
  [self refreshSelectionRectangle];
}

- (void)setyminWithDouble:(jdouble)ymin {
  self->ymin_ = ymin;
  [self refreshSelectionRectangle];
}

- (void)setymaxWithDouble:(jdouble)ymax {
  self->ymax_ = ymax;
  [self refreshSelectionRectangle];
}

- (jdouble)getxmin {
  return self->xmin_;
}

- (jdouble)getxmax {
  return self->xmax_;
}

- (jdouble)getymin {
  return self->ymin_;
}

- (jdouble)getymax {
  return self->ymax_;
}

- (void)initBounds {
  OrgGeogebraCommonExportPstricksGeoGebraExport_initBounds(self);
}

- (void)setBeamerWithBoolean:(jboolean)beamer {
  isBeamer_ = beamer;
}

- (NSString *)sci2decWithDouble:(jdouble)d {
  NSString *s = OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(NSString_valueOfDouble_(d));
  JavaLangStringBuilder *number;
  jint posE = [((NSString *) nil_chk(s)) indexOfString:@"e"];
  if (posE == -1) return s;
  NSString *token1 = [s substring:0 endIndex:posE];
  NSString *token2 = [s substring:posE + 1];
  number = new_JavaLangStringBuilder_initWithNSString_(token1);
  jint exp = JavaLangInteger_parseIntWithNSString_(token2);
  if (exp > 0) {
    jint id_point = [number indexOfWithNSString:@"."];
    if (id_point == -1) {
      for (jint i = 0; i < exp; i++) (void) [number appendWithNSString:@"0"];
    }
    else {
      (void) [number deleteCharAtWithInt:id_point];
      jint zeros = exp - ([number length] - id_point);
      for (jint i = 0; i < zeros; i++) (void) [number appendWithNSString:@"0"];
    }
  }
  else {
    exp = -exp;
    jint id_point = [number indexOfWithNSString:@"."];
    (void) [number deleteCharAtWithInt:id_point];
    for (jint i = 0; i < exp - 1; i++) (void) [number insertWithInt:0 withNSString:@"0"];
    (void) [number insertWithInt:0 withNSString:@"0."];
  }
  return [number description];
}

- (NSString *)createCustomColorWithInt:(jint)red
                               withInt:(jint)green
                               withInt:(jint)blue {
  NSString *suff = @"qrstuvwxyzabcdef";
  IOSIntArray *nb = [IOSIntArray newArrayWithInts:(jint[]){ red, green, blue } count:3];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < nb->size_; i++) {
    jint quot = IOSIntArray_Get(nb, i) / 16;
    jint reste = IOSIntArray_Get(nb, i) % 16;
    (void) [sb appendWithChar:[suff charAtWithInt:quot]];
    (void) [sb appendWithChar:[suff charAtWithInt:reste]];
  }
  return [NSString stringWithJavaLangStringBuilder:sb];
}

- (void)drawGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                                                    withBoolean:(jboolean)fromGeoList
                                                    withBoolean:(jboolean)trimmedInter {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(g)) isGeoList]) {
    OrgGeogebraCommonKernelGeosGeoList *geo = ((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoList class]));
    for (jint i = 0; i < [geo size]; i++) {
      [self drawGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:[geo getWithInt:i] withBoolean:YES withBoolean:NO];
    }
  }
  else if ([g isEuclidianVisible] || trimmedInter) {
    if ([g isGeoPoint]) {
      [self drawGeoPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoPoint class])];
      [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isGeoSegment]) {
      [self drawGeoSegmentWithOrgGeogebraCommonKernelGeosGeoSegment:(OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoSegment class])];
      [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isGeoRay]) {
      [self drawGeoRayWithOrgGeogebraCommonKernelGeosGeoRay:(OrgGeogebraCommonKernelGeosGeoRay *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoRay class])];
      [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolyLine class]]) {
      [self drawPolyLineWithOrgGeogebraCommonKernelGeosGeoPolyLine:(OrgGeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoPolyLine class])];
    }
    else if ([g isGeoLine]) {
      [self drawGeoLineWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class])];
      [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isGeoPolygon]) {
      [self drawPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoPolygon class])];
      [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isGeoAngle]) {
      if ([g isIndependent]) {
        [self drawSliderWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
      }
      else {
        [self drawAngleWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoAngle class])];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getDrawableForWithOrgGeogebraCommonKernelGeosGeoElement:g]];
      }
    }
    else if ([g isGeoImplicitPoly]) {
      [self drawImplicitPolyWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(g, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class])];
    }
    else if ([((NSString *) nil_chk([g getTypeString])) isEqual:@"Inequality"]) {
      if ([g isGeoFunctionBoolean]) {
        [self drawGeoInequalitiesWithOrgGeogebraCommonKernelGeosGeoFunctionNVar:nil withOrgGeogebraCommonKernelGeosGeoElement:g];
      }
      else {
        [self drawGeoInequalitiesWithOrgGeogebraCommonKernelGeosGeoFunctionNVar:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]) withOrgGeogebraCommonKernelGeosGeoElement:nil];
      }
    }
    else if ([g isGeoNumeric]) {
      OrgGeogebraCommonKernelAlgosAlgoElement *algo = [g getParentAlgorithm];
      if (algo == nil) {
        [self drawSliderWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoSlope class]]) {
        [self drawSlopeWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelCasAlgoIntegralDefinite class]]) {
        [self drawIntegralWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelCasAlgoIntegralFunctions class]]) {
        [self drawIntegralFunctionsWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoBoxPlot class]]) {
        [self drawBoxPlotWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class]]) {
        if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoSumTrapezoidal class]]) [self drawSumTrapezoidalWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
        else if ([algo isKindOfClass:[OrgGeogebraCommonKernelStatisticsAlgoHistogram class]]) [self drawBarChartOrHistogramWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
        else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoSumUpper class]] || [algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoSumLower class]] || [algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoSumLeft class]] || [algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoSumRectangle class]]) [self drawSumUpperLowerWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoBarChart class]]) {
        [self drawBarChartOrHistogramWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
      }
    }
    else if ([g isGeoVector]) {
      [self drawGeoVectorWithOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoVector class])];
      [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isGeoConicPart]) {
      OrgGeogebraCommonKernelGeosGeoConicPart *geo = (OrgGeogebraCommonKernelGeosGeoConicPart *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoConicPart class]);
      [self drawGeoConicPartWithOrgGeogebraCommonKernelGeosGeoConicPart:geo];
      if ([geo getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC || [geo getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isGeoConic]) {
      if ([self isSinglePointConicWithOrgGeogebraCommonKernelGeosGeoElement:g]) {
        OrgGeogebraCommonKernelGeosGeoConic *geo = (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoConic class]);
        OrgGeogebraCommonKernelGeosGeoPoint *point = [geo getSinglePoint];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) copyLabelWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        [point setObjColorWithOrgGeogebraCommonAwtGColor:[geo getObjectColor]];
        [point setLabelColorWithOrgGeogebraCommonAwtGColor:[geo getLabelColor]];
        [point setPointSizeWithInt:geo->lineThickness_];
        [point setLabelOffsetWithInt:geo->labelOffsetX_ withInt:geo->labelOffsetY_];
        OrgGeogebraCommonEuclidianDrawDrawPoint *drawPoint = new_OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_(euclidianView_, point);
        [drawPoint setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        [self drawGeoPointWithOrgGeogebraCommonKernelGeosGeoPoint:point];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:point withOrgGeogebraCommonEuclidianDrawableND:drawPoint];
      }
      else if ([self isDoubleLineConicWithOrgGeogebraCommonKernelGeosGeoElement:g]) {
        OrgGeogebraCommonKernelGeosGeoConic *geo = (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoConic class]);
        IOSObjectArray *lines = [geo getLines];
        IOSObjectArray *drawLines = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonEuclidianDrawDrawLine_class_()];
        for (jint i = 0; i < 2; i++) {
          [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines), i))) copyLabelWithOrgGeogebraCommonKernelGeosGeoElement:geo];
          [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines, i))) setObjColorWithOrgGeogebraCommonAwtGColor:[geo getObjectColor]];
          [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines, i))) setLabelColorWithOrgGeogebraCommonAwtGColor:[geo getLabelColor]];
          ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines, i)))->lineThickness_ = geo->lineThickness_;
          ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines, i)))->lineType_ = geo->lineType_;
        }
        (void) IOSObjectArray_Set(drawLines, 0, new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(euclidianView_, IOSObjectArray_Get(nil_chk(lines), 0)));
        (void) IOSObjectArray_Set(drawLines, 1, new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(euclidianView_, IOSObjectArray_Get(lines, 1)));
        [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines, 0))) setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines, 1))) setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        [self drawGeoLineWithOrgGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(lines, 0)];
        [self drawGeoLineWithOrgGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(lines, 1)];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(lines, 0) withOrgGeogebraCommonEuclidianDrawableND:IOSObjectArray_Get(drawLines, 0)];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(lines, 1) withOrgGeogebraCommonEuclidianDrawableND:IOSObjectArray_Get(drawLines, 1)];
      }
      else if ([self isEmptyWithOrgGeogebraCommonKernelGeosGeoElement:g]) {
      }
      else {
        [self drawGeoConicWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoConic class])];
        [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
      }
    }
    else if ([g isGeoFunction]) {
      [self drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoFunction class])];
      [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isGeoCurveCartesian]) {
      OrgGeogebraCommonExportPstricksGeoGebraExport_drawCurveCartesianWithOrgGeogebraCommonKernelGeosGeoElement_(self, g);
      [self drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonEuclidianDrawableND:nil];
    }
    else if ([g isGeoText]) {
      [self drawTextWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoText class])];
    }
    else if ([g isGeoImage]) {
    }
    else if ([g isGeoLocus]) {
      [self drawLocusWithOrgGeogebraCommonKernelGeosGeoLocus:(OrgGeogebraCommonKernelGeosGeoLocus *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLocus class])];
    }
    else if ([g isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTransferFunction class]]) {
      [self drawNyquistWithOrgGeogebraCommonKernelGeosGeoTransferFunction:(OrgGeogebraCommonKernelGeosGeoTransferFunction *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoTransferFunction class])];
    }
  }
}

- (void)drawBarChartOrHistogramWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)g {
  if ([[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(g)) getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class]]) {
    OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *algo = (OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) check_class_cast([g getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class]);
    [self drawHistogramOrBarChartBoxWithDoubleArray:[((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(algo)) getValues] withDoubleArray:[algo getLeftBorder] withInt:((IOSDoubleArray *) nil_chk([algo getValues]))->size_ - 1 withDouble:0 withOrgGeogebraCommonKernelGeosGeoNumeric:g];
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoBarChart *algo = nil;
    if ([[g getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoBarChart class]]) algo = (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([g getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]);
    [self drawHistogramOrBarChartBoxWithDoubleArray:[((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) getValues] withDoubleArray:[algo getLeftBorder] withInt:((IOSDoubleArray *) nil_chk([algo getValues]))->size_ withDouble:[algo getWidth] withOrgGeogebraCommonKernelGeosGeoNumeric:g];
  }
}

- (jboolean)isSinglePointConicWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) {
    if ([((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoConic class])) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT) return YES;
  }
  return NO;
}

- (jboolean)isDoubleLineConicWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) {
    if ([((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoConic class])) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE || [((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoConic class])) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES || [((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoConic class])) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES) return YES;
  }
  return NO;
}

- (jboolean)isEmptyWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) {
    if ([((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoConic class])) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY) return YES;
  }
  return NO;
}

- (jint)resizePtWithInt:(jint)size {
  jdouble height_geogebra = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getHeight] / 30;
  jdouble height_latex = [((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(frame_)) getLatexHeight];
  jdouble ratio = height_latex / height_geogebra;
  jint tmp = (jint) JavaLangMath_roundWithDouble_(ratio * size);
  if (tmp != 0) return tmp;
  return 1;
}

- (void)drawGeoPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawGeoLineWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawGeoRayWithOrgGeogebraCommonKernelGeosGeoRay:(OrgGeogebraCommonKernelGeosGeoRay *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawGeoSegmentWithOrgGeogebraCommonKernelGeosGeoSegment:(OrgGeogebraCommonKernelGeosGeoSegment *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawSliderWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawSlopeWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawIntegralWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawIntegralFunctionsWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawSumUpperLowerWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawSumTrapezoidalWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawBoxPlotWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawAngleWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawGeoVectorWithOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawGeoConicWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawGeoConicPartWithOrgGeogebraCommonKernelGeosGeoConicPart:(OrgGeogebraCommonKernelGeosGeoConicPart *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                  withOrgGeogebraCommonEuclidianDrawableND:(OrgGeogebraCommonEuclidianDrawableND *)drawGeo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawImplicitPolyWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawSingleCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)geo
                                                                     withBoolean:(jboolean)trasparency {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawTextWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawLocusWithOrgGeogebraCommonKernelGeosGeoLocus:(OrgGeogebraCommonKernelGeosGeoLocus *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawLineWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo
                                       withDoubleArray:(IOSDoubleArray *)vertex
                                            withDouble:(jdouble)angSt
                                            withDouble:(jdouble)angEnd
                                            withDouble:(jdouble)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo
                                        withDoubleArray:(IOSDoubleArray *)vertex
                                             withDouble:(jdouble)angleTick {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawArrowArcWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo
                                            withDoubleArray:(IOSDoubleArray *)vertex
                                                 withDouble:(jdouble)angSt
                                                 withDouble:(jdouble)angEnd
                                                 withDouble:(jdouble)r
                                                withBoolean:(jboolean)clockwise {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setFrameWithOrgGeogebraCommonExportPstricksExportSettings:(id<OrgGeogebraCommonExportPstricksExportSettings>)settingsFrame {
  frame_ = settingsFrame;
}

- (void)generateAllCode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)ColorCodeWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color
                      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawPolyLineWithOrgGeogebraCommonKernelGeosGeoPolyLine:(OrgGeogebraCommonKernelGeosGeoPolyLine *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawHistogramOrBarChartBoxWithDoubleArray:(IOSDoubleArray *)values
                                  withDoubleArray:(IOSDoubleArray *)leftBorder
                                          withInt:(jint)length
                                       withDouble:(jdouble)width
        withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)g {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawGeoInequalitiesWithOrgGeogebraCommonKernelGeosGeoFunctionNVar:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *)geo
                                withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)e {
  id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> ef = nil;
  if (geo == nil) {
    ef = (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(e, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar));
  }
  else {
    ef = geo;
  }
  OrgGeogebraCommonEuclidianDrawDrawInequality *drawable = new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(euclidianView_, ef);
  id<OrgGeogebraCommonAwtGGraphics2D> g = nil;
  OrgGeogebraCommonKernelArithmeticIneqTree *tree = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(ef)) getFunction])) getIneqs];
  if ([((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(tree)) getLeft] != nil) {
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([tree getLeft])) getSize]; i++) {
      g = [self createGraphicsWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:ef withOrgGeogebraCommonKernelArithmeticInequality:[((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([tree getLeft])) getWithInt:i] withOrgGeogebraCommonEuclidianEuclidianView:euclidianView_];
      [drawable drawWithOrgGeogebraCommonAwtGGraphics2D:g];
    }
  }
  if ([tree getRight] != nil) {
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([tree getLeft])) getSize]; i++) {
      g = [self createGraphicsWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:ef withOrgGeogebraCommonKernelArithmeticInequality:[((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([tree getRight])) getWithInt:i] withOrgGeogebraCommonEuclidianEuclidianView:euclidianView_];
      [drawable drawWithOrgGeogebraCommonAwtGGraphics2D:g];
    }
  }
  if ([tree getIneq] != nil) {
    g = [self createGraphicsWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:ef withOrgGeogebraCommonKernelArithmeticInequality:[tree getIneq] withOrgGeogebraCommonEuclidianEuclidianView:euclidianView_];
    [drawable drawWithOrgGeogebraCommonAwtGGraphics2D:g];
  }
}

- (void)drawNyquistWithOrgGeogebraCommonKernelGeosGeoTransferFunction:(OrgGeogebraCommonKernelGeosGeoTransferFunction *)g {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgGeogebraCommonAwtGGraphics2D>)createGraphicsWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)ef
                                                         withOrgGeogebraCommonKernelArithmeticInequality:(OrgGeogebraCommonKernelArithmeticInequality *)inequality
                                                             withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)euclidianView2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)fillSplineWithOrgGeogebraCommonKernelGeosGeoCurveCartesianArray:(IOSObjectArray *)curves {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getXmin {
  return xmin_;
}

- (void)setXminWithDouble:(jdouble)xmin {
  self->xmin_ = xmin;
}

- (jdouble)getXmax {
  return xmax_;
}

- (void)setXmaxWithDouble:(jdouble)xmax {
  self->xmax_ = xmax;
}

- (jdouble)getYmin {
  return ymin_;
}

- (void)setYminWithDouble:(jdouble)ymin {
  self->ymin_ = ymin;
}

- (jdouble)getYmax {
  return ymax_;
}

- (void)setYmaxWithDouble:(jdouble)ymax {
  self->ymax_ = ymax;
}

- (jdouble)getXunit {
  return xunit_;
}

- (void)setXunitWithDouble:(jdouble)xunit {
  self->xunit_ = xunit;
}

- (jdouble)getYunit {
  return yunit_;
}

- (void)setYunitWithDouble:(jdouble)yunit {
  self->yunit_ = yunit;
}

- (void)markWithDoubleArray:(IOSDoubleArray *)A
            withDoubleArray:(IOSDoubleArray *)B
                    withInt:(jint)deco
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toScreenCoordsWithDoubleArray:A];
  [euclidianView_ toScreenCoordsWithDoubleArray:B];
  jdouble midX = (IOSDoubleArray_Get(nil_chk(A), 0) + IOSDoubleArray_Get(nil_chk(B), 0)) / 2.0;
  jdouble midY = (IOSDoubleArray_Get(A, 1) + IOSDoubleArray_Get(B, 1)) / 2.0;
  jdouble nx = IOSDoubleArray_Get(A, 1) - IOSDoubleArray_Get(B, 1);
  jdouble ny = IOSDoubleArray_Get(B, 0) - IOSDoubleArray_Get(A, 0);
  jdouble nLength = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(nx, ny);
  jdouble tickSpacing = 2.5 + ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->lineThickness_ / 2.0;
  jdouble tickLength = tickSpacing + 1;
  jdouble arrowlength = 1.5;
  jdouble vx, vy, factor, x1, x2, y1, y2;
  switch (deco) {
    case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_TICK:
    factor = tickLength / nLength;
    nx *= factor / xunit_;
    ny *= factor / yunit_;
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - nx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - ny];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX + nx];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY + ny];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_TICKS:
    factor = tickSpacing / (2 * nLength);
    vx = -ny * factor;
    vy = nx * factor;
    factor = tickLength / nLength;
    nx *= factor;
    ny *= factor;
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX + vx - nx];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX + vx + nx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY + vy - ny];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY + vy + ny];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - vx - nx];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - vx + nx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - vy - ny];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - vy + ny];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_TICKS:
    factor = tickSpacing / nLength;
    vx = -ny * factor;
    vy = nx * factor;
    factor = tickLength / nLength;
    nx *= factor;
    ny *= factor;
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX + vx - nx];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX + vx + nx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY + vy - ny];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY + vy + ny];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - nx];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX + nx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - ny];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY + ny];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - vx - nx];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - vx + nx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - vy - ny];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - vy + ny];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_ARROW:
    factor = tickSpacing / (nLength);
    vx = -ny * factor;
    vy = nx * factor;
    factor = tickLength / nLength;
    nx *= factor;
    ny *= factor;
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - arrowlength * vx + arrowlength * (nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - arrowlength * vy + arrowlength * (ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - arrowlength * vx + arrowlength * (-nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - arrowlength * vy + arrowlength * (-ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_ARROWS:
    factor = tickSpacing / (nLength);
    vx = -ny * factor;
    vy = nx * factor;
    factor = tickLength / nLength;
    nx *= factor;
    ny *= factor;
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - 2 * arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - 2 * arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - 2 * arrowlength * vx + arrowlength * (nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - 2 * arrowlength * vy + arrowlength * (ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - 2 * arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - 2 * arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - 2 * arrowlength * vx + arrowlength * (-nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - 2 * arrowlength * vy + arrowlength * (-ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX + arrowlength * (nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY + arrowlength * (ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX + arrowlength * (-nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY + arrowlength * (-ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_ARROWS:
    factor = tickSpacing / nLength;
    vx = -ny * factor;
    vy = nx * factor;
    factor = tickLength / nLength;
    nx *= factor;
    ny *= factor;
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - arrowlength * vx + arrowlength * (nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - arrowlength * vy + arrowlength * (ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - arrowlength * vx + arrowlength * (-nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - arrowlength * vy + arrowlength * (-ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX + arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY + arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX + arrowlength * vx + arrowlength * (nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY + arrowlength * vy + arrowlength * (ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX + arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY + arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX + arrowlength * vx + arrowlength * (-nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY + arrowlength * vy + arrowlength * (-ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - 3 * arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - 3 * arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - 3 * arrowlength * vx + arrowlength * (nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - 3 * arrowlength * vy + arrowlength * (ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    x1 = [euclidianView_ toRealWorldCoordXWithDouble:midX - 3 * arrowlength * vx];
    y1 = [euclidianView_ toRealWorldCoordYWithDouble:midY - 3 * arrowlength * vy];
    x2 = [euclidianView_ toRealWorldCoordXWithDouble:midX - 3 * arrowlength * vx + arrowlength * (-nx + vx)];
    y2 = [euclidianView_ toRealWorldCoordYWithDouble:midY - 3 * arrowlength * vy + arrowlength * (-ny + vy)];
    [self drawLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    break;
  }
}

- (void)markAngleWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo
                                              withDouble:(jdouble)r
                                         withDoubleArray:(IOSDoubleArray *)vertex
                                              withDouble:(jdouble)angSt
                                              withDouble:(jdouble)angEnd {
  jdouble rdiff;
  {
    IOSDoubleArray *angleTick;
    switch (((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(geo))->decorationType_) {
      case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_ARCS:
      rdiff = 4 + geo->lineThickness_ / 2.0;
      [self drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r];
      r -= rdiff / [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getXscale];
      [self drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r];
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_ARCS:
      rdiff = 4 + geo->lineThickness_ / 2.0;
      [self drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r];
      r -= rdiff / [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getXscale];
      [self drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r];
      r -= rdiff / [euclidianView_ getXscale];
      [self drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r];
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ONE_TICK:
      [self drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r];
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toScreenCoordsWithDoubleArray:vertex];
      [self drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:(angSt + angEnd) / 2];
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_TICKS:
      [self drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r];
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toScreenCoordsWithDoubleArray:vertex];
      angleTick = [IOSDoubleArray newArrayWithLength:2];
      *IOSDoubleArray_GetRef(angleTick, 0) = (2 * angSt + 3 * angEnd) / 5;
      *IOSDoubleArray_GetRef(angleTick, 1) = (3 * angSt + 2 * angEnd) / 5;
      if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(angleTick, 1) - IOSDoubleArray_Get(angleTick, 0)) > OrgGeogebraCommonEuclidianDrawDrawAngle_get_MAX_TICK_DISTANCE_()) {
        *IOSDoubleArray_GetRef(angleTick, 0) = (angSt + angEnd) / 2 - OrgGeogebraCommonEuclidianDrawDrawAngle_get_MAX_TICK_DISTANCE_() / 2;
        *IOSDoubleArray_GetRef(angleTick, 1) = (angSt + angEnd) / 2 + OrgGeogebraCommonEuclidianDrawDrawAngle_get_MAX_TICK_DISTANCE_() / 2;
      }
      [self drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:IOSDoubleArray_Get(angleTick, 0)];
      [self drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:IOSDoubleArray_Get(angleTick, 1)];
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_TICKS:
      [self drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r];
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) toScreenCoordsWithDoubleArray:vertex];
      angleTick = [IOSDoubleArray newArrayWithLength:2];
      *IOSDoubleArray_GetRef(angleTick, 0) = (5 * angSt + 3 * angEnd) / 8;
      *IOSDoubleArray_GetRef(angleTick, 1) = (3 * angSt + 5 * angEnd) / 8;
      if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(angleTick, 1) - IOSDoubleArray_Get(angleTick, 0)) > OrgGeogebraCommonEuclidianDrawDrawAngle_get_MAX_TICK_DISTANCE_()) {
        *IOSDoubleArray_GetRef(angleTick, 0) = (angSt + angEnd) / 2 - OrgGeogebraCommonEuclidianDrawDrawAngle_get_MAX_TICK_DISTANCE_() / 2;
        *IOSDoubleArray_GetRef(angleTick, 1) = (angSt + angEnd) / 2 + OrgGeogebraCommonEuclidianDrawDrawAngle_get_MAX_TICK_DISTANCE_() / 2;
      }
      [self drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:(angSt + angEnd) / 2];
      [self drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:IOSDoubleArray_Get(angleTick, 0)];
      [self drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:IOSDoubleArray_Get(angleTick, 1)];
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE:
      [self drawArrowArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r withBoolean:NO];
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_ANTICLOCKWISE:
      [self drawArrowArcWithOrgGeogebraCommonKernelGeosGeoAngle:geo withDoubleArray:vertex withDouble:angSt withDouble:angEnd withDouble:r withBoolean:YES];
      break;
    }
  }
}

- (void)drawAllElements {
  jboolean increment = ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getShowGrid] || [euclidianView_ getShowXaxis] || [euclidianView_ getShowYaxis]);
  for (jint step = 0; step < [((OrgGeogebraCommonKernelConstruction *) nil_chk(construction_)) steps]; step++) {
    if (increment) beamerSlideNumber_ = step + 2;
    else beamerSlideNumber_ = step + 1;
    IOSObjectArray *geos = [((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk([construction_ getConstructionElementWithInt:step])) getGeoElements];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(geos))->size_; j++) {
      OrgGeogebraCommonKernelGeosGeoElement *g = IOSObjectArray_Get(geos, j);
      [self drawGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:g withBoolean:NO withBoolean:NO];
    }
  }
}

- (void)startBeamerWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (isBeamer_) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$I$", @"\\onslide<", beamerSlideNumber_, @"->{\n  ")];
}

- (void)endBeamerWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (isBeamer_) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"}\n"];
}

- (void)resizeFontWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  jint ggbSize = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getGUIFontSize];
  jdouble ggbYUnit = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) getYscale];
  jdouble fontUnits = ggbSize / ggbYUnit;
  jdouble yunit = [((id<OrgGeogebraCommonExportPstricksExportSettings>) nil_chk(frame_)) getYUnit];
  jdouble sizeCM = fontUnits * yunit;
  jint sizept = J2ObjCFpToInt((sizeCM / 2.54 * 72.27 + 0.5));
  jint texSize = [frame_ getFontSize];
  if (texSize == 10) {
    if (sizept <= 5) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\tiny{"];
    else if (sizept <= 7) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\scriptsize{"];
    else if (sizept == 8) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\footnotesize{"];
    else if (sizept == 9) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\small{"];
    else if (sizept == 10) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\normalsize{"];
    else if (sizept <= 12) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\large{"];
    else if (sizept <= 14) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\Large{"];
    else if (sizept <= 17) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\LARGE{"];
    else if (sizept <= 20) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\huge{"];
    else (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\Huge{"];
  }
  else if (texSize == 11) {
    if (sizept <= 6) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\tiny{"];
    else if (sizept <= 8) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\scriptsize{"];
    else if (sizept == 9) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\footnotesize{"];
    else if (sizept == 10) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\small{"];
    else if (sizept == 11) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\normalsize{"];
    else if (sizept == 12) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\large{"];
    else if (sizept <= 14) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\Large{"];
    else if (sizept <= 17) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\LARGE{"];
    else if (sizept <= 20) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\huge{"];
    else (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\Huge{"];
  }
  else if (texSize == 12) {
    if (sizept <= 6) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\tiny{"];
    else if (sizept <= 8) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\scriptsize{"];
    else if (sizept <= 10) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\footnotesize{"];
    else if (sizept == 11) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\small{"];
    else if (sizept == 12) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\normalsize{"];
    else if (sizept <= 14) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\large{"];
    else if (sizept <= 17) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\Large{"];
    else if (sizept <= 20) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\LARGE{"];
    else if (sizept <= 25) (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\huge{"];
    else (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\Huge{"];
  }
}

- (NSString *)getImplicitExprWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)geo {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  IOSObjectArray *coeff = [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(geo)) getCoeff];
  jboolean first = YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coeff))->size_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_; j++) {
      jdouble tmp = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j);
      if (tmp != 0) {
        if (tmp > 0) {
          if (!first) (void) [sb appendWithNSString:@"+"];
        }
        (void) [sb appendWithDouble:tmp];
        if (i == 0) {
          if (j != 0) {
            (void) [sb appendWithNSString:@"*y^"];
            (void) [sb appendWithInt:j];
          }
        }
        else {
          (void) [sb appendWithNSString:@"*x^"];
          (void) [sb appendWithInt:i];
          if (j != 0) {
            (void) [sb appendWithNSString:@"*y^"];
            (void) [sb appendWithInt:j];
          }
        }
        first = NO;
      }
    }
  }
  return [NSString stringWithJavaLangStringBuilder:sb];
}

- (OrgGeogebraCommonKernelStringTemplate *)getStringTemplate {
  return tpl_;
}

- (JavaLangStringBuilder *)drawNoLatexFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)geo
                                                                              withDouble:(jdouble)xrangemax
                                                                              withDouble:(jdouble)xrangemin
                                                                                 withInt:(jint)point
                                                                            withNSString:(NSString *)template_ {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian *curve = new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction]);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(geo)) toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:curve];
  JavaLangStringBuilder *lineBuilder = new_JavaLangStringBuilder_init();
  jdouble y = [geo evaluateWithDouble:xrangemin];
  jdouble yprec = y;
  if (JavaLangMath_absWithDouble_(y) < 0.001) y = yprec = 0;
  jdouble step = (xrangemax - xrangemin) / point;
  jdouble xprec = xrangemin;
  jdouble x = xprec;
  for (; x <= xrangemax; x += step) {
    y = [geo evaluateWithDouble:x];
    if (JavaLangMath_absWithDouble_(y) < 0.001) y = 0;
    if (JavaLangMath_absWithDouble_(x) < 0.001) x = 0;
    if (JavaLangMath_absWithDouble_(yprec - y) < (ymax_ - ymin_)) {
      if (OrgGeogebraCommonEuclidianPlotCurvePlotter_isContinuousWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withInt_(curve, xprec, x, 8)) {
        (void) [lineBuilder appendWithId:OrgGeogebraCommonUtilStringUtil_formatWithNSString_withDouble_withDouble_withDouble_withDouble_(template_, xprec, yprec, x, y)];
      }
    }
    yprec = y;
    xprec = x;
  }
  return lineBuilder;
}

- (JavaLangStringBuilder *)drawNyquistDiagramWithOrgGeogebraCommonKernelGeosGeoTransferFunction:(OrgGeogebraCommonKernelGeosGeoTransferFunction *)geo
                                                                                   withNSString:(NSString *)template_
                                                                                   withNSString:(NSString *)arrowMark
                                                                                   withNSString:(NSString *)arrowCommand
                                                                                   withNSString:(NSString *)reverseArrowCommand {
  NSString *t = template_;
  NSString *sub;
  jboolean flag = YES;
  JavaLangStringBuilder *lineBuilder = new_JavaLangStringBuilder_init();
  id<JavaUtilList> coordsList = [((OrgGeogebraCommonKernelGeosGeoTransferFunction *) nil_chk(geo)) getCoordsList];
  OrgGeogebraCommonKernelMatrixCoords *p = [((id<JavaUtilList>) nil_chk(coordsList)) getWithInt:0];
  jdouble xprec = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX];
  jdouble yprec = [p getY];
  jdouble x;
  jdouble y;
  for (jint i = 1; i < [coordsList size] - 10; i += 10) {
    p = [coordsList getWithInt:i];
    x = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX];
    y = [p getY];
    if (flag && i > [coordsList size] / 2.3) {
      sub = [((NSString *) nil_chk(t)) replaceAll:arrowMark withReplacement:arrowCommand];
      flag = NO;
    }
    else {
      sub = [((NSString *) nil_chk(t)) replaceAll:arrowMark withReplacement:@""];
    }
    (void) [lineBuilder appendWithId:OrgGeogebraCommonUtilStringUtil_formatWithNSString_withDouble_withDouble_withDouble_withDouble_(sub, xprec, yprec, x, y)];
    xprec = x;
    yprec = y;
  }
  flag = YES;
  p = [coordsList getWithInt:0];
  xprec = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX];
  yprec = -[p getY];
  for (jint i = 1; i < [coordsList size]; i += 4) {
    p = [coordsList getWithInt:i];
    x = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX];
    y = -[p getY];
    if (flag && i > [coordsList size] / 2.3) {
      sub = [((NSString *) nil_chk(t)) replaceAll:arrowMark withReplacement:reverseArrowCommand];
      flag = NO;
    }
    else {
      sub = [((NSString *) nil_chk(t)) replaceAll:arrowMark withReplacement:@""];
    }
    (void) [lineBuilder appendWithId:OrgGeogebraCommonUtilStringUtil_formatWithNSString_withDouble_withDouble_withDouble_withDouble_(sub, xprec, yprec, x, y)];
    xprec = x;
    yprec = y;
  }
  return lineBuilder;
}

- (jboolean)isLatexFunctionWithNSString:(NSString *)s {
  return ![((NSString *) nil_chk([((NSString *) nil_chk(s)) lowercaseString])) contains:@"erf("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"gamma("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"gammaRegularized("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"cbrt("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"csc("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"csch("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"sec("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"cot("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"coth("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"sech("] && ![((NSString *) nil_chk([s lowercaseString])) contains:@"if"];
}

- (void)addTextPackage {
  JavaLangStringBuilder *packages = new_JavaLangStringBuilder_init();
  if ([((JavaLangStringBuilder *) nil_chk(codePreamble_)) indexOfWithNSString:@"amssymb"] == -1) {
    (void) [packages appendWithNSString:@"amssymb,"];
  }
  if ([codePreamble_ indexOfWithNSString:@"fancyhdr"] == -1) {
    (void) [packages appendWithNSString:@"fancyhdr,"];
  }
  if ([codePreamble_ indexOfWithNSString:@"txfonts"] == -1) {
    (void) [packages appendWithNSString:@"txfonts,"];
  }
  if ([codePreamble_ indexOfWithNSString:@"pxfonts"] == -1) {
    (void) [packages appendWithNSString:@"pxfonts,"];
  }
  if ([packages length] != 0) {
    (void) [packages delete__WithInt:[packages length] - 1 withInt:[packages length]];
    (void) [codePreamble_ appendWithNSString:JreStrcat("$$$", @"\\usepackage{", [packages description], @"}\n")];
  }
}

- (void)drawCurveCartesianWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonExportPstricksGeoGebraExport_drawCurveCartesianWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "GeoGebraExport", NULL, 0x1, NULL, NULL },
    { "getApp", NULL, "Lorg.geogebra.common.main.App;", 0x1, NULL, NULL },
    { "formatWithDouble:", "format", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "refreshSelectionRectangle", NULL, "V", 0x1, NULL, NULL },
    { "setxminWithDouble:", "setxmin", "V", 0x1, NULL, NULL },
    { "setxmaxWithDouble:", "setxmax", "V", 0x1, NULL, NULL },
    { "setyminWithDouble:", "setymin", "V", 0x1, NULL, NULL },
    { "setymaxWithDouble:", "setymax", "V", 0x1, NULL, NULL },
    { "getxmin", NULL, "D", 0x1, NULL, NULL },
    { "getxmax", NULL, "D", 0x1, NULL, NULL },
    { "getymin", NULL, "D", 0x1, NULL, NULL },
    { "getymax", NULL, "D", 0x1, NULL, NULL },
    { "initBounds", NULL, "V", 0x2, NULL, NULL },
    { "setBeamerWithBoolean:", "setBeamer", "V", 0x1, NULL, NULL },
    { "sci2decWithDouble:", "sci2dec", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "createCustomColorWithInt:withInt:withInt:", "createCustomColor", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "drawGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:withBoolean:", "drawGeoElement", "V", 0x4, NULL, NULL },
    { "drawBarChartOrHistogramWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawBarChartOrHistogram", "V", 0x4, NULL, NULL },
    { "isSinglePointConicWithOrgGeogebraCommonKernelGeosGeoElement:", "isSinglePointConic", "Z", 0x4, NULL, NULL },
    { "isDoubleLineConicWithOrgGeogebraCommonKernelGeosGeoElement:", "isDoubleLineConic", "Z", 0x4, NULL, NULL },
    { "isEmptyWithOrgGeogebraCommonKernelGeosGeoElement:", "isEmpty", "Z", 0x4, NULL, NULL },
    { "resizePtWithInt:", "resizePt", "I", 0x4, NULL, NULL },
    { "drawGeoPointWithOrgGeogebraCommonKernelGeosGeoPoint:", "drawGeoPoint", "V", 0x404, NULL, NULL },
    { "drawGeoLineWithOrgGeogebraCommonKernelGeosGeoLine:", "drawGeoLine", "V", 0x404, NULL, NULL },
    { "drawGeoRayWithOrgGeogebraCommonKernelGeosGeoRay:", "drawGeoRay", "V", 0x404, NULL, NULL },
    { "drawGeoSegmentWithOrgGeogebraCommonKernelGeosGeoSegment:", "drawGeoSegment", "V", 0x404, NULL, NULL },
    { "drawPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:", "drawPolygon", "V", 0x404, NULL, NULL },
    { "drawSliderWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawSlider", "V", 0x404, NULL, NULL },
    { "drawSlopeWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawSlope", "V", 0x404, NULL, NULL },
    { "drawIntegralWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawIntegral", "V", 0x404, NULL, NULL },
    { "drawIntegralFunctionsWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawIntegralFunctions", "V", 0x404, NULL, NULL },
    { "drawSumUpperLowerWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawSumUpperLower", "V", 0x404, NULL, NULL },
    { "drawSumTrapezoidalWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawSumTrapezoidal", "V", 0x404, NULL, NULL },
    { "drawBoxPlotWithOrgGeogebraCommonKernelGeosGeoNumeric:", "drawBoxPlot", "V", 0x404, NULL, NULL },
    { "drawAngleWithOrgGeogebraCommonKernelGeosGeoAngle:", "drawAngle", "V", 0x404, NULL, NULL },
    { "drawGeoVectorWithOrgGeogebraCommonKernelGeosGeoVector:", "drawGeoVector", "V", 0x404, NULL, NULL },
    { "drawGeoConicWithOrgGeogebraCommonKernelGeosGeoConic:", "drawGeoConic", "V", 0x404, NULL, NULL },
    { "drawGeoConicPartWithOrgGeogebraCommonKernelGeosGeoConicPart:", "drawGeoConicPart", "V", 0x404, NULL, NULL },
    { "drawLabelWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonEuclidianDrawableND:", "drawLabel", "V", 0x404, NULL, NULL },
    { "drawFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:", "drawFunction", "V", 0x404, NULL, NULL },
    { "drawImplicitPolyWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "drawImplicitPoly", "V", 0x404, NULL, NULL },
    { "drawSingleCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:withBoolean:", "drawSingleCurveCartesian", "V", 0x404, NULL, NULL },
    { "drawTextWithOrgGeogebraCommonKernelGeosGeoText:", "drawText", "V", 0x404, NULL, NULL },
    { "drawLocusWithOrgGeogebraCommonKernelGeosGeoLocus:", "drawLocus", "V", 0x404, NULL, NULL },
    { "drawLineWithDouble:withDouble:withDouble:withDouble:withOrgGeogebraCommonKernelGeosGeoElement:", "drawLine", "V", 0x404, NULL, NULL },
    { "drawArcWithOrgGeogebraCommonKernelGeosGeoAngle:withDoubleArray:withDouble:withDouble:withDouble:", "drawArc", "V", 0x404, NULL, NULL },
    { "drawTickWithOrgGeogebraCommonKernelGeosGeoAngle:withDoubleArray:withDouble:", "drawTick", "V", 0x404, NULL, NULL },
    { "drawArrowArcWithOrgGeogebraCommonKernelGeosGeoAngle:withDoubleArray:withDouble:withDouble:withDouble:withBoolean:", "drawArrowArc", "V", 0x404, NULL, NULL },
    { "setFrameWithOrgGeogebraCommonExportPstricksExportSettings:", "setFrame", "V", 0x11, NULL, NULL },
    { "generateAllCode", NULL, "V", 0x401, NULL, NULL },
    { "ColorCodeWithOrgGeogebraCommonAwtGColor:withJavaLangStringBuilder:", "ColorCode", "V", 0x404, NULL, NULL },
    { "drawPolyLineWithOrgGeogebraCommonKernelGeosGeoPolyLine:", "drawPolyLine", "V", 0x404, NULL, NULL },
    { "drawHistogramOrBarChartBoxWithDoubleArray:withDoubleArray:withInt:withDouble:withOrgGeogebraCommonKernelGeosGeoNumeric:", "drawHistogramOrBarChartBox", "V", 0x404, NULL, NULL },
    { "drawGeoInequalitiesWithOrgGeogebraCommonKernelGeosGeoFunctionNVar:withOrgGeogebraCommonKernelGeosGeoElement:", "drawGeoInequalities", "V", 0x4, NULL, NULL },
    { "drawNyquistWithOrgGeogebraCommonKernelGeosGeoTransferFunction:", "drawNyquist", "V", 0x404, NULL, NULL },
    { "createGraphicsWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:withOrgGeogebraCommonKernelArithmeticInequality:withOrgGeogebraCommonEuclidianEuclidianView:", "createGraphics", "Lorg.geogebra.common.awt.GGraphics2D;", 0x404, NULL, NULL },
    { "fillSplineWithOrgGeogebraCommonKernelGeosGeoCurveCartesianArray:", "fillSpline", "Z", 0x404, NULL, NULL },
    { "getXmin", NULL, "D", 0x1, NULL, NULL },
    { "setXminWithDouble:", "setXmin", "V", 0x1, NULL, NULL },
    { "getXmax", NULL, "D", 0x1, NULL, NULL },
    { "setXmaxWithDouble:", "setXmax", "V", 0x1, NULL, NULL },
    { "getYmin", NULL, "D", 0x1, NULL, NULL },
    { "setYminWithDouble:", "setYmin", "V", 0x1, NULL, NULL },
    { "getYmax", NULL, "D", 0x1, NULL, NULL },
    { "setYmaxWithDouble:", "setYmax", "V", 0x1, NULL, NULL },
    { "getXunit", NULL, "D", 0x1, NULL, NULL },
    { "setXunitWithDouble:", "setXunit", "V", 0x1, NULL, NULL },
    { "getYunit", NULL, "D", 0x1, NULL, NULL },
    { "setYunitWithDouble:", "setYunit", "V", 0x1, NULL, NULL },
    { "markWithDoubleArray:withDoubleArray:withInt:withOrgGeogebraCommonKernelGeosGeoElement:", "mark", "V", 0x4, NULL, NULL },
    { "markAngleWithOrgGeogebraCommonKernelGeosGeoAngle:withDouble:withDoubleArray:withDouble:withDouble:", "markAngle", "V", 0x4, NULL, NULL },
    { "drawAllElements", NULL, "V", 0x4, NULL, NULL },
    { "startBeamerWithJavaLangStringBuilder:", "startBeamer", "V", 0x4, NULL, NULL },
    { "endBeamerWithJavaLangStringBuilder:", "endBeamer", "V", 0x4, NULL, NULL },
    { "resizeFontWithJavaLangStringBuilder:", "resizeFont", "V", 0x4, NULL, NULL },
    { "getImplicitExprWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "getImplicitExpr", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getStringTemplate", NULL, "Lorg.geogebra.common.kernel.StringTemplate;", 0x4, NULL, NULL },
    { "drawNoLatexFunctionWithOrgGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:withInt:withNSString:", "drawNoLatexFunction", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "drawNyquistDiagramWithOrgGeogebraCommonKernelGeosGeoTransferFunction:withNSString:withNSString:withNSString:withNSString:", "drawNyquistDiagram", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "isLatexFunctionWithNSString:", "isLatexFunction", "Z", 0x4, NULL, NULL },
    { "addTextPackage", NULL, "V", 0x4, NULL, NULL },
    { "drawCurveCartesianWithOrgGeogebraCommonKernelGeosGeoElement:", "drawCurveCartesian", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "beamerSlideNumber_", NULL, 0x4, "I", NULL, NULL,  },
    { "PRECISION_XRANGE_FUNCTION_", NULL, 0x14, "D", NULL, NULL,  },
    { "code_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "codePoint_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "codePreamble_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "codeFilledObject_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "codeBeginDoc_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "construction_", NULL, 0x4, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "euclidianView_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "frame_", NULL, 0x4, "Lorg.geogebra.common.export.pstricks.ExportSettings;", NULL, NULL,  },
    { "CustomColor_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/awt/GColor;Ljava/lang/String;>;",  },
    { "xunit_", NULL, 0x4, "D", NULL, NULL,  },
    { "yunit_", NULL, 0x4, "D", NULL, NULL,  },
    { "xmin_", NULL, 0x4, "D", NULL, NULL,  },
    { "xmax_", NULL, 0x4, "D", NULL, NULL,  },
    { "ymin_", NULL, 0x4, "D", NULL, NULL,  },
    { "ymax_", NULL, 0x4, "D", NULL, NULL,  },
    { "format__", "format", 0x4, "I", NULL, NULL,  },
    { "isBeamer_", NULL, 0x4, "Z", NULL, NULL,  },
    { "barNumber_", NULL, 0x4, "I", NULL, NULL,  },
    { "tpl_", NULL, 0x2, "Lorg.geogebra.common.kernel.StringTemplate;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.export.pstricks.GeoGebraExport$Info;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonExportPstricksGeoGebraExport = { 2, "GeoGebraExport", "org.geogebra.common.export.pstricks", NULL, 0x401, 82, methods, 23, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonExportPstricksGeoGebraExport;
}

@end

void OrgGeogebraCommonExportPstricksGeoGebraExport_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonExportPstricksGeoGebraExport *self, OrgGeogebraCommonMainApp *app) {
  (void) NSObject_init(self);
  self->beamerSlideNumber_ = 1;
  self->PRECISION_XRANGE_FUNCTION_ = 0.00001;
  self->format__ = 0;
  self->isBeamer_ = NO;
  self->app_ = app;
  self->kernel_ = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel];
  self->construction_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  self->euclidianView_ = (OrgGeogebraCommonEuclidianEuclidianView *) check_class_cast([app getActiveEuclidianView], [OrgGeogebraCommonEuclidianEuclidianView class]);
  self->tpl_ = OrgGeogebraCommonKernelStringTemplate_printFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_PSTRICKS(), 12, NO);
  OrgGeogebraCommonExportPstricksGeoGebraExport_initBounds(self);
}

void OrgGeogebraCommonExportPstricksGeoGebraExport_initBounds(OrgGeogebraCommonExportPstricksGeoGebraExport *self) {
  self->xunit_ = 1;
  self->yunit_ = 1;
  id<OrgGeogebraCommonAwtGRectangle> rect = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->euclidianView_)) getSelectionRectangle];
  if (rect != nil) {
    self->xmin_ = [self->euclidianView_ toRealWorldCoordXWithDouble:[rect getMinX]];
    self->xmax_ = [self->euclidianView_ toRealWorldCoordXWithDouble:[rect getMaxX]];
    self->ymin_ = [self->euclidianView_ toRealWorldCoordYWithDouble:[rect getMaxY]];
    self->ymax_ = [self->euclidianView_ toRealWorldCoordYWithDouble:[rect getMinY]];
  }
  else {
    self->xmin_ = [self->euclidianView_ getXmin];
    self->xmax_ = [self->euclidianView_ getXmax];
    self->ymin_ = [self->euclidianView_ getYmin];
    self->ymax_ = [self->euclidianView_ getYmax];
  }
}

void OrgGeogebraCommonExportPstricksGeoGebraExport_drawCurveCartesianWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonExportPstricksGeoGebraExport *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  if (![self isLatexFunctionWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()]]) {
    OrgGeogebraCommonKernelGeosGeoCurveCartesian *curve = (OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]);
    OrgGeogebraCommonKernelArithmeticFunction *f = [curve getFunX];
    OrgGeogebraCommonKernelArithmeticExpressionNode *exl = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f)) getFunctionExpression])) getLeftTree];
    OrgGeogebraCommonKernelArithmeticExpressionNode *exr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([f getFunctionExpression])) getRightTree];
    NSString *exls = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exl)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()];
    NSString *exrs = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exr)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()];
    exrs = [((NSString *) nil_chk(exrs)) replace:@"{" withSequence:@""];
    exrs = [((NSString *) nil_chk(exrs)) replace:@"}" withSequence:@""];
    exls = [((NSString *) nil_chk(exls)) replace:@"{" withSequence:@""];
    exls = [((NSString *) nil_chk(exls)) replace:@"}" withSequence:@""];
    IOSObjectArray *exlsv = [((NSString *) nil_chk(exls)) split:@","];
    IOSObjectArray *exrsv = [((NSString *) nil_chk(exrs)) split:@","];
    IOSObjectArray *paramValues = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(exlsv))->size_ + 1 type:NSString_class_()];
    (void) IOSObjectArray_Set(paramValues, 0, @"0");
    for (jint i = 0; i < exlsv->size_; i++) {
      (void) IOSObjectArray_Set(paramValues, i + 1, IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(exlsv, i))) split:@"<"]), 1));
    }
    IOSObjectArray *curves = [IOSObjectArray newArrayWithLength:exlsv->size_ type:OrgGeogebraCommonKernelGeosGeoCurveCartesian_class_()];
    OrgGeogebraCommonKernelCommandsAlgebraProcessor *ap = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    for (jint i = 0; i < exlsv->size_; i++) {
      OrgGeogebraCommonKernelGeosGeoFunction *fxx = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(ap)) evaluateToFunctionWithNSString:JreStrcat("$$", @"xspline(t)=", IOSObjectArray_Get(nil_chk(exrsv), i)) withBoolean:YES];
      (void) IOSObjectArray_Set(curves, i, new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(self->construction_));
      [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fxx)) getFunction]];
      [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) setIntervalWithDouble:JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(paramValues, i)) withDouble:JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(paramValues, i + 1))];
      [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) setAllVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:NO];
    }
    f = [curve getFunY];
    exl = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f)) getFunctionExpression])) getLeftTree];
    exr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([f getFunctionExpression])) getRightTree];
    exls = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exl)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()];
    exrs = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exr)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()];
    exrs = [((NSString *) nil_chk(exrs)) replace:@"{" withSequence:@""];
    exrs = [((NSString *) nil_chk(exrs)) replace:@"}" withSequence:@""];
    exls = [((NSString *) nil_chk(exls)) replace:@"{" withSequence:@""];
    exls = [((NSString *) nil_chk(exls)) replace:@"}" withSequence:@""];
    exlsv = [((NSString *) nil_chk(exls)) split:@","];
    exrsv = [((NSString *) nil_chk(exrs)) split:@","];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(exlsv))->size_; i++) {
      OrgGeogebraCommonKernelGeosGeoFunction *fxx = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(ap)) evaluateToFunctionWithNSString:JreStrcat("$$", @"yspline(t)=", IOSObjectArray_Get(nil_chk(exrsv), i)) withBoolean:YES];
      [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fxx)) getFunction]];
      [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(IOSObjectArray_Get(curves, i))) setIntervalWithDouble:JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(paramValues, i)) withDouble:JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(paramValues, i + 1))];
    }
    jboolean fill = [self fillSplineWithOrgGeogebraCommonKernelGeosGeoCurveCartesianArray:curves];
    if (!fill) {
      for (jint i = 0; i < curves->size_; i++) {
        [self drawSingleCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(curves, i) withBoolean:YES];
      }
    }
  }
  else {
    [self drawSingleCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]) withBoolean:YES];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonExportPstricksGeoGebraExport)

@implementation OrgGeogebraCommonExportPstricksGeoGebraExport_Info

- (instancetype)initWithOrgGeogebraCommonExportPstricksGeoGebraExport:(OrgGeogebraCommonExportPstricksGeoGebraExport *)outer$
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonExportPstricksGeoGebraExport_Info_initWithOrgGeogebraCommonExportPstricksGeoGebraExport_withOrgGeogebraCommonKernelGeosGeoElement_(self, outer$, geo);
  return self;
}

- (jfloat)getAlpha {
  return alpha_;
}

- (jint)getY {
  return y_;
}

- (jdouble)getAngle {
  return angle_;
}

- (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getFillType {
  return fillType_;
}

- (OrgGeogebraCommonAwtGColor *)getLinecolor {
  return linecolor_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonExportPstricksGeoGebraExport:withOrgGeogebraCommonKernelGeosGeoElement:", "Info", NULL, 0x1, NULL, NULL },
    { "getAlpha", NULL, "F", 0x1, NULL, NULL },
    { "getY", NULL, "I", 0x1, NULL, NULL },
    { "getAngle", NULL, "D", 0x1, NULL, NULL },
    { "getFillType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
    { "getLinecolor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "alpha_", NULL, 0x2, "F", NULL, NULL,  },
    { "y_", NULL, 0x2, "I", NULL, NULL,  },
    { "angle_", NULL, 0x2, "D", NULL, NULL,  },
    { "fillType_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", NULL, NULL,  },
    { "linecolor_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonExportPstricksGeoGebraExport_Info = { 2, "Info", "org.geogebra.common.export.pstricks", "GeoGebraExport", 0x4, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonExportPstricksGeoGebraExport_Info;
}

@end

void OrgGeogebraCommonExportPstricksGeoGebraExport_Info_initWithOrgGeogebraCommonExportPstricksGeoGebraExport_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonExportPstricksGeoGebraExport_Info *self, OrgGeogebraCommonExportPstricksGeoGebraExport *outer$, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  (void) NSObject_init(self);
  self->alpha_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAlphaValue];
  self->y_ = [geo getHatchingDistance];
  self->angle_ = [geo getHatchingAngle];
  self->fillType_ = [geo getFillType];
  self->linecolor_ = [geo getObjectColor];
  IOSFloatArray *rgb = nil;
  if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoBarChart class]]) {
    OrgGeogebraCommonKernelAlgosAlgoBarChart *algo = (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([geo getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]);
    if ([((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) getBarColorWithInt:outer$->barNumber_] != nil) {
      rgb = [IOSFloatArray newArrayWithLength:4];
      [((OrgGeogebraCommonAwtGColor *) nil_chk([algo getBarColorWithInt:outer$->barNumber_])) getRGBColorComponentsWithFloatArray:rgb];
      self->linecolor_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithFloat:IOSFloatArray_Get(rgb, 0) withFloat:IOSFloatArray_Get(rgb, 1) withFloat:IOSFloatArray_Get(rgb, 2) withFloat:IOSFloatArray_Get(rgb, 3)];
    }
    if ([algo getBarHatchDistanceWithInt:outer$->barNumber_] != -1) {
      self->y_ = [algo getBarHatchDistanceWithInt:outer$->barNumber_];
    }
    if ([algo getBarHatchAngleWithInt:outer$->barNumber_] != -1) {
      self->angle_ = [algo getBarHatchAngleWithInt:outer$->barNumber_];
    }
    if ([algo getBarFillTypeWithInt:outer$->barNumber_] != nil) {
      self->fillType_ = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values()), [((OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk([algo getBarFillTypeWithInt:outer$->barNumber_])) ordinal]);
    }
    if ([algo getBarAlphaWithInt:outer$->barNumber_] != -1 && rgb != nil) {
      self->alpha_ = IOSFloatArray_Get(rgb, 3);
    }
  }
}

OrgGeogebraCommonExportPstricksGeoGebraExport_Info *new_OrgGeogebraCommonExportPstricksGeoGebraExport_Info_initWithOrgGeogebraCommonExportPstricksGeoGebraExport_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonExportPstricksGeoGebraExport *outer$, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonExportPstricksGeoGebraExport_Info *self = [OrgGeogebraCommonExportPstricksGeoGebraExport_Info alloc];
  OrgGeogebraCommonExportPstricksGeoGebraExport_Info_initWithOrgGeogebraCommonExportPstricksGeoGebraExport_withOrgGeogebraCommonKernelGeosGeoElement_(self, outer$, geo);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonExportPstricksGeoGebraExport_Info)
