//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/export/MathmlTemplate.java
//


#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/export/MathmlTemplate.h"
#include "org/geogebra/common/util/StringUtil.h"

@implementation OrgGeogebraCommonExportMathmlTemplate

+ (void)mathmlWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                           withNSString:(NSString *)op
                           withNSString:(NSString *)leftStr
                           withNSString:(NSString *)rightStr {
  OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, op, leftStr, rightStr);
}

+ (void)mathmlWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                           withNSString:(NSString *)op
                           withNSString:(NSString *)preL
                           withNSString:(NSString *)leftStr
                           withNSString:(NSString *)postL
                           withNSString:(NSString *)preR
                           withNSString:(NSString *)rightStr
                           withNSString:(NSString *)postR {
  OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(sb, op, preL, leftStr, postL, preR, rightStr, postR);
}

- (instancetype)init {
  OrgGeogebraCommonExportMathmlTemplate_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "mathmlWithJavaLangStringBuilder:withNSString:withNSString:withNSString:", "mathml", "V", 0x9, NULL, NULL },
    { "mathmlWithJavaLangStringBuilder:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:", "mathml", "V", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonExportMathmlTemplate = { 2, "MathmlTemplate", "org.geogebra.common.export", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonExportMathmlTemplate;
}

@end

void OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(JavaLangStringBuilder *sb, NSString *op, NSString *leftStr, NSString *rightStr) {
  OrgGeogebraCommonExportMathmlTemplate_initialize();
  OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(sb, op, @"", leftStr, @"", @"", rightStr, @"");
}

void OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(JavaLangStringBuilder *sb, NSString *op, NSString *preL, NSString *leftStr, NSString *postL, NSString *preR, NSString *rightStr, NSString *postR) {
  OrgGeogebraCommonExportMathmlTemplate_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<apply>"];
  (void) [sb appendWithNSString:op];
  (void) [sb appendWithNSString:preL];
  if ([((NSString *) nil_chk(leftStr)) hasPrefix:@"<apply>"]) {
    (void) [sb appendWithNSString:leftStr];
  }
  else if (OrgGeogebraCommonUtilStringUtil_isNumberWithNSString_(leftStr)) {
    (void) [sb appendWithNSString:@"<cn>"];
    (void) [sb appendWithNSString:leftStr];
    (void) [sb appendWithNSString:@"</cn>"];
  }
  else {
    (void) [sb appendWithNSString:@"<ci>"];
    (void) [sb appendWithNSString:leftStr];
    (void) [sb appendWithNSString:@"</ci>"];
  }
  (void) [sb appendWithNSString:postL];
  (void) [sb appendWithNSString:preR];
  if (rightStr != nil) {
    if ([rightStr hasPrefix:@"<apply>"]) {
      (void) [sb appendWithNSString:rightStr];
    }
    else if (OrgGeogebraCommonUtilStringUtil_isNumberWithNSString_(rightStr)) {
      (void) [sb appendWithNSString:@"<cn>"];
      (void) [sb appendWithNSString:rightStr];
      (void) [sb appendWithNSString:@"</cn>"];
    }
    else {
      (void) [sb appendWithNSString:@"<ci>"];
      (void) [sb appendWithNSString:rightStr];
      (void) [sb appendWithNSString:@"</ci>"];
    }
  }
  (void) [sb appendWithNSString:postR];
  (void) [sb appendWithNSString:@"</apply>"];
}

void OrgGeogebraCommonExportMathmlTemplate_init(OrgGeogebraCommonExportMathmlTemplate *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonExportMathmlTemplate *new_OrgGeogebraCommonExportMathmlTemplate_init() {
  OrgGeogebraCommonExportMathmlTemplate *self = [OrgGeogebraCommonExportMathmlTemplate alloc];
  OrgGeogebraCommonExportMathmlTemplate_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonExportMathmlTemplate)
