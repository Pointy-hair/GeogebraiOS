//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/factories/CASFactory.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/cas/CASparser.h"
#include "org/geogebra/common/cas/CasParserTools.h"
#include "org/geogebra/common/factories/CASFactory.h"
#include "org/geogebra/common/kernel/CASGenericInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"

static OrgGeogebraCommonFactoriesCASFactory *OrgGeogebraCommonFactoriesCASFactory_prototype_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonFactoriesCASFactory, prototype_, OrgGeogebraCommonFactoriesCASFactory *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonFactoriesCASFactory, prototype_, OrgGeogebraCommonFactoriesCASFactory *)

@implementation OrgGeogebraCommonFactoriesCASFactory

+ (OrgGeogebraCommonFactoriesCASFactory *)getPrototype {
  return OrgGeogebraCommonFactoriesCASFactory_getPrototype();
}

+ (void)setPrototypeWithOrgGeogebraCommonFactoriesCASFactory:(OrgGeogebraCommonFactoriesCASFactory *)factory {
  OrgGeogebraCommonFactoriesCASFactory_setPrototypeWithOrgGeogebraCommonFactoriesCASFactory_(factory);
}

- (id<OrgGeogebraCommonKernelCASGenericInterface>)newGiacWithOrgGeogebraCommonCasCASparser:(OrgGeogebraCommonCasCASparser *)p
                                                    withOrgGeogebraCommonCasCasParserTools:(id<OrgGeogebraCommonCasCasParserTools>)t
                                                         withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)k {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  OrgGeogebraCommonFactoriesCASFactory_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getPrototype", NULL, "Lorg.geogebra.common.factories.CASFactory;", 0x9, NULL, NULL },
    { "setPrototypeWithOrgGeogebraCommonFactoriesCASFactory:", "setPrototype", "V", 0x9, NULL, NULL },
    { "newGiacWithOrgGeogebraCommonCasCASparser:withOrgGeogebraCommonCasCasParserTools:withOrgGeogebraCommonKernelKernel:", "newGiac", "Lorg.geogebra.common.kernel.CASGenericInterface;", 0x401, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "prototype_", NULL, 0xa, "Lorg.geogebra.common.factories.CASFactory;", &OrgGeogebraCommonFactoriesCASFactory_prototype_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonFactoriesCASFactory = { 2, "CASFactory", "org.geogebra.common.factories", NULL, 0x401, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonFactoriesCASFactory;
}

@end

OrgGeogebraCommonFactoriesCASFactory *OrgGeogebraCommonFactoriesCASFactory_getPrototype() {
  OrgGeogebraCommonFactoriesCASFactory_initialize();
  return OrgGeogebraCommonFactoriesCASFactory_prototype_;
}

void OrgGeogebraCommonFactoriesCASFactory_setPrototypeWithOrgGeogebraCommonFactoriesCASFactory_(OrgGeogebraCommonFactoriesCASFactory *factory) {
  OrgGeogebraCommonFactoriesCASFactory_initialize();
  OrgGeogebraCommonFactoriesCASFactory_prototype_ = factory;
}

void OrgGeogebraCommonFactoriesCASFactory_init(OrgGeogebraCommonFactoriesCASFactory *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonFactoriesCASFactory)
