//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/EuclidianDraw.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EuclidianDraw.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/euclidian/draw/DrawBarGraph.h"
#include "org/geogebra/common/euclidian/draw/DrawBoolean.h"
#include "org/geogebra/common/euclidian/draw/DrawBoxPlot.h"
#include "org/geogebra/common/euclidian/draw/DrawButton.h"
#include "org/geogebra/common/euclidian/draw/DrawConic.h"
#include "org/geogebra/common/euclidian/draw/DrawConicPart.h"
#include "org/geogebra/common/euclidian/draw/DrawConicSection.h"
#include "org/geogebra/common/euclidian/draw/DrawImage.h"
#include "org/geogebra/common/euclidian/draw/DrawImplicitCurve.h"
#include "org/geogebra/common/euclidian/draw/DrawImplicitPoly.h"
#include "org/geogebra/common/euclidian/draw/DrawInequality.h"
#include "org/geogebra/common/euclidian/draw/DrawIntegral.h"
#include "org/geogebra/common/euclidian/draw/DrawIntegralFunctions.h"
#include "org/geogebra/common/euclidian/draw/DrawLine.h"
#include "org/geogebra/common/euclidian/draw/DrawList.h"
#include "org/geogebra/common/euclidian/draw/DrawLocus.h"
#include "org/geogebra/common/euclidian/draw/DrawNyquist.h"
#include "org/geogebra/common/euclidian/draw/DrawParametricCurve.h"
#include "org/geogebra/common/euclidian/draw/DrawPoint.h"
#include "org/geogebra/common/euclidian/draw/DrawPointPlot.h"
#include "org/geogebra/common/euclidian/draw/DrawPolyLine.h"
#include "org/geogebra/common/euclidian/draw/DrawPolygon.h"
#include "org/geogebra/common/euclidian/draw/DrawRay.h"
#include "org/geogebra/common/euclidian/draw/DrawSegment.h"
#include "org/geogebra/common/euclidian/draw/DrawSlider.h"
#include "org/geogebra/common/euclidian/draw/DrawSlope.h"
#include "org/geogebra/common/euclidian/draw/DrawText.h"
#include "org/geogebra/common/euclidian/draw/DrawTextField.h"
#include "org/geogebra/common/euclidian/draw/DrawTurtle.h"
#include "org/geogebra/common/euclidian/draw/DrawUpperLowerSum.h"
#include "org/geogebra/common/euclidian/draw/DrawVector.h"
#include "org/geogebra/common/kernel/AlgoCasCellInterface.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/algos/AlgoBarChart.h"
#include "org/geogebra/common/kernel/algos/AlgoBoxPlot.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionAreaSums.h"
#include "org/geogebra/common/kernel/algos/AlgoSlope.h"
#include "org/geogebra/common/kernel/algos/AlgoTransferFunction.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralDefinite.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralFunctions.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoButton.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/kernel/geos/GeoTransferFunction.h"
#include "org/geogebra/common/kernel/geos/GeoTurtle.h"
#include "org/geogebra/common/kernel/geos/ParametricCurve.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitCurve.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoRayND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/kernel/statistics/AlgoDotPlot.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@implementation OrgGeogebraCommonEuclidianEuclidianDraw

+ (OrgGeogebraCommonEuclidianDrawableND *)newDrawableWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)ev
                                                       withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonEuclidianEuclidianDraw_newDrawableWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(ev, geo);
}

- (instancetype)init {
  OrgGeogebraCommonEuclidianEuclidianDraw_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newDrawableWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoElement:", "newDrawable", "Lorg.geogebra.common.euclidian.DrawableND;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianEuclidianDraw = { 2, "EuclidianDraw", "org.geogebra.common.euclidian", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianEuclidianDraw;
}

@end

OrgGeogebraCommonEuclidianDrawableND *OrgGeogebraCommonEuclidianEuclidianDraw_newDrawableWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonEuclidianEuclidianView *ev, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonEuclidianEuclidianDraw_initialize();
  OrgGeogebraCommonEuclidianDrawable *d = nil;
  {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo;
    OrgGeogebraCommonKernelGeosGeoText *text;
    switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_BOOLEAN:
      d = new_OrgGeogebraCommonEuclidianDrawDrawBoolean_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoBoolean_(ev, (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoBoolean class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_BUTTON:
      d = new_OrgGeogebraCommonEuclidianDrawDrawButton_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoButton_(ev, (OrgGeogebraCommonKernelGeosGeoButton *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoButton class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_TEXTFIELD:
      d = new_OrgGeogebraCommonEuclidianDrawDrawTextField_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoTextField_(ev, (OrgGeogebraCommonKernelGeosGeoTextField *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoTextField class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_POINT:
      case OrgGeogebraCommonPluginGeoClass_POINT3D:
      d = new_OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_(ev, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
      break;
      case OrgGeogebraCommonPluginGeoClass_SEGMENT:
      case OrgGeogebraCommonPluginGeoClass_SEGMENT3D:
      d = new_OrgGeogebraCommonEuclidianDrawDrawSegment_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(ev, (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND)));
      break;
      case OrgGeogebraCommonPluginGeoClass_RAY:
      case OrgGeogebraCommonPluginGeoClass_RAY3D:
      d = new_OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(ev, (id<OrgGeogebraCommonKernelKernelNDGeoRayND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoRayND)));
      break;
      case OrgGeogebraCommonPluginGeoClass_LINE:
      case OrgGeogebraCommonPluginGeoClass_LINE3D:
      d = new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(ev, (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)));
      break;
      case OrgGeogebraCommonPluginGeoClass_POLYGON:
      case OrgGeogebraCommonPluginGeoClass_POLYGON3D:
      d = new_OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoPolygon_(ev, (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolygon class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_PENSTROKE:
      case OrgGeogebraCommonPluginGeoClass_POLYLINE:
      d = new_OrgGeogebraCommonEuclidianDrawDrawPolyLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoPolyLine_(ev, (OrgGeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolyLine class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_FUNCTION_NVAR:
      if ([((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class])) isBooleanFunction] && [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class])) getVarNumber] < 3) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(ev, (OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]));
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_INTERVAL:
      if ([((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class])) isBooleanFunction]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(ev, (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class]));
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_ANGLE:
      if ([geo isIndependent]) {
        if ([geo isEuclidianVisible]) {
          [geo setEuclidianVisibleWithBoolean:NO];
          [geo setEuclidianVisibleWithBoolean:YES];
        }
        d = new_OrgGeogebraCommonEuclidianDrawDrawSlider_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]));
      }
      else {
        d = [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) getCompanion])) newDrawAngleWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoAngle class])];
        if ([geo isDrawable]) {
          if (![geo isColorSet]) {
            OrgGeogebraCommonAwtGColor *col = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([geo getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE])) getObjectColor];
            [geo setObjColorWithOrgGeogebraCommonAwtGColor:col];
          }
        }
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_NUMERIC:
      algo = [geo getDrawAlgorithm];
      if (algo == nil) {
        if ([geo isEuclidianVisible]) {
          [geo setEuclidianVisibleWithBoolean:NO];
          [geo setEuclidianVisibleWithBoolean:YES];
        }
        d = new_OrgGeogebraCommonEuclidianDrawDrawSlider_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]));
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoSlope class]]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawSlope_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]));
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelCasAlgoIntegralDefinite class]]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawIntegral_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]), NO);
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelCasAlgoIntegralFunctions class]]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawIntegralFunctions_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]), NO);
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class]]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]));
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoBoxPlot class]]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawBoxPlot_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]));
      }
      else if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoBarChart class]]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawBarGraph_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]));
      }
      else if ([OrgGeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:algo]) {
        OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<OrgGeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast(algo, @protocol(OrgGeogebraCommonKernelAlgoCasCellInterface))) getCasCell])) getInputVE];
        if ([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) isTopLevelCommand]) {
          OrgGeogebraCommonKernelArithmeticCommand *cmd = [ve getTopLevelCommand];
          NSString *name = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) getName];
          if ([@"IntegralBetween" isEqual:name] && [cmd getArgumentNumber] == 4) {
            d = new_OrgGeogebraCommonEuclidianDrawDrawIntegralFunctions_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]), YES);
          }
          else if ([@"Integral" isEqual:name] && [cmd getArgumentNumber] == 3) {
            d = new_OrgGeogebraCommonEuclidianDrawDrawIntegral_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(ev, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]), YES);
          }
        }
      }
      if (d != nil) {
        if (![geo isColorSet]) {
          OrgGeogebraCommonKernelConstructionDefaults *consDef = [((OrgGeogebraCommonKernelConstruction *) nil_chk([geo getConstruction])) getConstructionDefaults];
          if ([geo isIndependent]) {
            OrgGeogebraCommonAwtGColor *col = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk(consDef)) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER])) getObjectColor];
            [geo setObjColorWithOrgGeogebraCommonAwtGColor:col];
            [geo setLineThicknessWithInt:OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_THICKNESS];
          }
          else {
            OrgGeogebraCommonAwtGColor *col = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk(consDef)) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON])) getObjectColor];
            [geo setObjColorWithOrgGeogebraCommonAwtGColor:col];
          }
        }
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_VECTOR:
      case OrgGeogebraCommonPluginGeoClass_VECTOR3D:
      d = new_OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(ev, (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND)));
      break;
      case OrgGeogebraCommonPluginGeoClass_CONICPART:
      d = new_OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(ev, (id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND)));
      break;
      case OrgGeogebraCommonPluginGeoClass_CONIC:
      case OrgGeogebraCommonPluginGeoClass_CONIC3D:
      d = new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(ev, (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [OrgGeogebraCommonKernelKernelNDGeoConicND class]), NO);
      break;
      case OrgGeogebraCommonPluginGeoClass_CONICSECTION:
      d = new_OrgGeogebraCommonEuclidianDrawDrawConicSection_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicND_(ev, (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [OrgGeogebraCommonKernelKernelNDGeoConicND class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_IMPLICIT_POLY:
      d = new_OrgGeogebraCommonEuclidianDrawDrawImplicitPoly_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(ev, (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(geo, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_IMPLICIT_CURVE:
      d = new_OrgGeogebraCommonEuclidianDrawDrawImplicitCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelImplicitGeoImplicitCurve_(ev, (OrgGeogebraCommonKernelImplicitGeoImplicitCurve *) check_class_cast(geo, [OrgGeogebraCommonKernelImplicitGeoImplicitCurve class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_FUNCTION:
      case OrgGeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
      if ([((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class])) isBooleanFunction]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(ev, (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar)));
      }
      else {
        d = new_OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(ev, (id<OrgGeogebraCommonKernelGeosParametricCurve>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosParametricCurve)));
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_TEXT:
      text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class]);
      d = new_OrgGeogebraCommonEuclidianDrawDrawText_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoText_(ev, text);
      break;
      case OrgGeogebraCommonPluginGeoClass_IMAGE:
      d = new_OrgGeogebraCommonEuclidianDrawDrawImage_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoImage_(ev, (OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_LOCUS:
      d = new_OrgGeogebraCommonEuclidianDrawDrawLocus_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoLocusND_(ev, (OrgGeogebraCommonKernelGeosGeoLocusND *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLocusND class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_CURVE_CARTESIAN:
      d = new_OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(ev, (OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]));
      break;
      case OrgGeogebraCommonPluginGeoClass_CURVE_POLAR:
      if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTransferFunction class]]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawNyquist_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoTransferFunction_(ev, (OrgGeogebraCommonKernelGeosGeoTransferFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoTransferFunction class]));
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_LIST:
      algo = [geo getParentAlgorithm];
      if ([algo isKindOfClass:[OrgGeogebraCommonKernelStatisticsAlgoDotPlot class]]) {
        d = new_OrgGeogebraCommonEuclidianDrawDrawPointPlot_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonEuclidianDrawDrawPointPlot_DrawTypeEnum_(ev, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class]), OrgGeogebraCommonEuclidianDrawDrawPointPlot_DrawTypeEnum_get_DOT_PLOT());
      }
      else {
        d = new_OrgGeogebraCommonEuclidianDrawDrawList_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoList_(ev, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class]));
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_TURTLE:
      d = new_OrgGeogebraCommonEuclidianDrawDrawTurtle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoTurtle_(ev, (OrgGeogebraCommonKernelGeosGeoTurtle *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoTurtle class]));
      break;
    }
  }
  return d;
}

void OrgGeogebraCommonEuclidianEuclidianDraw_init(OrgGeogebraCommonEuclidianEuclidianDraw *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonEuclidianEuclidianDraw *new_OrgGeogebraCommonEuclidianEuclidianDraw_init() {
  OrgGeogebraCommonEuclidianEuclidianDraw *self = [OrgGeogebraCommonEuclidianEuclidianDraw alloc];
  OrgGeogebraCommonEuclidianEuclidianDraw_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianEuclidianDraw)
