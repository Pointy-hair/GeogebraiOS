//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/Drawable.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GBufferedImage.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GDimension.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GPaint.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/euclidian/DrawEquation.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/HatchingHandler.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/kernelND/GeoElementND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonEuclidianDrawable () {
 @public
  jboolean forceNoFill_;
  jint lineThickness_;
  jint lineType_;
  NSString *oldLabelDesc_;
  jboolean labelHasIndex_;
  id<OrgGeogebraCommonAwtGArea> shape_;
  jint lastFontSize_;
  JavaUtilArrayList *hatchPaint_;
  jboolean forcedLineType_;
  OrgGeogebraCommonEuclidianHatchingHandler *hatchingHandler_;
}

- (void)ensureLabelDrawsOnScreenWithDouble:(jdouble)Xmultiplier
                                withDouble:(jdouble)Ymultiplier;

- (OrgGeogebraCommonEuclidianHatchingHandler *)getHatchingHandler;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawable, oldLabelDesc_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawable, shape_, id<OrgGeogebraCommonAwtGArea>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawable, hatchPaint_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawable, hatchingHandler_, OrgGeogebraCommonEuclidianHatchingHandler *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawable_drawLabelWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawable *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawable_ensureLabelDrawsOnScreenWithDouble_withDouble_(OrgGeogebraCommonEuclidianDrawable *self, jdouble Xmultiplier, jdouble Ymultiplier);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianDrawable_isSerif(OrgGeogebraCommonEuclidianDrawable *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawable_addLabelOffsetEnsureOnScreenWithDouble_withDouble_(OrgGeogebraCommonEuclidianDrawable *self, jdouble Xmultiplier, jdouble Ymultiplier);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawable_updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND_withInt_(OrgGeogebraCommonEuclidianDrawable *self, id<OrgGeogebraCommonKernelKernelNDGeoElementND> fromGeo, jint minThickness);

__attribute__((unused)) static OrgGeogebraCommonEuclidianHatchingHandler *OrgGeogebraCommonEuclidianDrawable_getHatchingHandler(OrgGeogebraCommonEuclidianDrawable *self);

@implementation OrgGeogebraCommonEuclidianDrawable

- (void)update {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  id<OrgGeogebraCommonAwtGArea> s = [self getShape];
  if (s == nil) {
    return NO;
  }
  if ([self isFilled]) {
    return [((id<OrgGeogebraCommonAwtGArea>) nil_chk(s)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
  }
  return [((id<OrgGeogebraCommonAwtGArea>) nil_chk(s)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect] && ![s containsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getxLabel {
  return xLabel_;
}

- (jdouble)getyLabel {
  return yLabel_;
}

- (void)updateFontSize {
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  return nil;
}

- (void)drawLabelWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawable_drawLabelWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)ensureLabelDrawsOnScreenWithDouble:(jdouble)Xmultiplier
                                withDouble:(jdouble)Ymultiplier {
  OrgGeogebraCommonEuclidianDrawable_ensureLabelDrawsOnScreenWithDouble_withDouble_(self, Xmultiplier, Ymultiplier);
}

- (void)drawMultilineLaTeXWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                                withOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)font
                               withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)fgColor
                               withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)bgColor {
  [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) setBoundsWithOrgGeogebraCommonAwtGRectangle:OrgGeogebraCommonEuclidianEuclidianStatic_drawMultilineLaTeXWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGGraphics2D_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonAwtGGraphics2D_withOrgGeogebraCommonAwtGFont_withOrgGeogebraCommonAwtGColor_withOrgGeogebraCommonAwtGColor_withNSString_withInt_withInt_withBoolean_([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication], [view_ getTempGraphics2DWithOrgGeogebraCommonAwtGFont:font], geo_, g2, font, fgColor, bgColor, labelDesc_, xLabel_, yLabel_, OrgGeogebraCommonEuclidianDrawable_isSerif(self))];
}

- (jboolean)isSerif {
  return OrgGeogebraCommonEuclidianDrawable_isSerif(self);
}

- (void)drawMultilineTextWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                               withOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)textFont {
  if (labelDesc_ == nil) return;
  if (oldLabelDesc_ == labelDesc_ && !labelHasIndex_) {
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) setBoundsWithOrgGeogebraCommonAwtGRectangle:OrgGeogebraCommonEuclidianEuclidianStatic_drawMultiLineTextWithOrgGeogebraCommonMainApp_withNSString_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_withBoolean_withOrgGeogebraCommonAwtGFont_([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication], labelDesc_, xLabel_, yLabel_, g2, OrgGeogebraCommonEuclidianDrawable_isSerif(self), textFont)];
  }
  else {
    jint lines = 0;
    jint fontSize = [((OrgGeogebraCommonAwtGFont *) nil_chk(textFont)) getSize];
    jfloat lineSpread = fontSize * 1.5f;
    jint xoffset = 0, yoffset = 0;
    oldLabelDesc_ = labelDesc_;
    jint lineBegin = 0;
    jint length = ((jint) [((NSString *) nil_chk(labelDesc_)) length]);
    xoffset = 0;
    yoffset = 0;
    for (jint i = 0; i < length - 1; i++) {
      if ([labelDesc_ charAtWithInt:i] == 0x000a) {
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithOrgGeogebraCommonAwtGFont:textFont];
        OrgGeogebraCommonAwtGPoint *p = OrgGeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication], g2, [labelDesc_ substring:lineBegin endIndex:i], xLabel_, yLabel_ + lines * lineSpread, OrgGeogebraCommonEuclidianDrawable_isSerif(self), YES);
        if (((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_ > xoffset) xoffset = p->x_;
        if (p->y_ > yoffset) yoffset = p->y_;
        lines++;
        lineBegin = i + 1;
      }
    }
    jfloat ypos = yLabel_ + lines * lineSpread;
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithOrgGeogebraCommonAwtGFont:textFont];
    OrgGeogebraCommonAwtGPoint *p = OrgGeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication], g2, [labelDesc_ substring:lineBegin], xLabel_, ypos, OrgGeogebraCommonEuclidianDrawable_isSerif(self), YES);
    if (((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_ > xoffset) xoffset = p->x_;
    if (p->y_ > yoffset) yoffset = p->y_;
    labelHasIndex_ = (yoffset > 0);
    jint height = J2ObjCFpToInt(((lines + 1) * lineSpread));
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) setBoundsWithInt:xLabel_ - 3 withInt:yLabel_ - fontSize - 3 withInt:xoffset + 6 withInt:height + 6];
  }
}

- (jboolean)addLabelOffset {
  if (((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_))->labelOffsetX_ == 0 && geo_->labelOffsetY_ == 0) return NO;
  jint x = xLabel_ + geo_->labelOffsetX_;
  jint y = yLabel_ + geo_->labelOffsetY_;
  jint xmax = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] - 15;
  jint ymax = [view_ getHeight] - 5;
  if (x < 5 || x > xmax) return NO;
  if (y < 15 || y > ymax) return NO;
  xLabel_ = x;
  yLabel_ = y;
  return YES;
}

- (void)addLabelOffsetEnsureOnScreen {
  OrgGeogebraCommonEuclidianDrawable_addLabelOffsetEnsureOnScreenWithDouble_withDouble_(self, 1.0, 1.0);
}

- (void)addLabelOffsetEnsureOnScreenWithDouble:(jdouble)Xmultiplier
                                    withDouble:(jdouble)Ymultiplier {
  OrgGeogebraCommonEuclidianDrawable_addLabelOffsetEnsureOnScreenWithDouble_withDouble_(self, Xmultiplier, Ymultiplier);
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) containsWithInt:x withInt:y];
}

- (void)forceLineTypeWithInt:(jint)type {
  forcedLineType_ = YES;
  lineType_ = type;
}

- (void)updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)fromGeo {
  OrgGeogebraCommonEuclidianDrawable_updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND_withInt_(self, fromGeo, 0);
}

- (void)updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)fromGeo
                                                             withInt:(jint)minThickness {
  OrgGeogebraCommonEuclidianDrawable_updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND_withInt_(self, fromGeo, minThickness);
}

- (void)updateStrokesJustLineThicknessWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)fromGeo {
  strokedShape_ = nil;
  strokedShape2_ = nil;
  if (lineThickness_ != ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(fromGeo))->lineThickness_) {
    lineThickness_ = fromGeo->lineThickness_;
    jfloat width = lineThickness_ / 2.0f;
    objStroke_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeWithFloat:width withInt:[((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) getEndCap] withInt:[objStroke_ getLineJoin] withFloat:[objStroke_ getMiterLimit] withFloatArray:[objStroke_ getDashArray] withFloat:0.0f];
    decoStroke_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:width withInt:[((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) getEndCap] withInt:[objStroke_ getLineJoin] withFloat:[objStroke_ getMiterLimit] withFloatArray:[((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(decoStroke_)) getDashArray] withFloat:0.0f];
    selStroke_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:width + OrgGeogebraCommonPluginEuclidianStyleConstants_SELECTION_ADD withInt:[objStroke_ getEndCap] withInt:[objStroke_ getLineJoin] withFloat:[objStroke_ getMiterLimit] withFloatArray:[((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(selStroke_)) getDashArray] withFloat:0.0f];
  }
}

- (void)fillWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                 withOrgGeogebraCommonAwtGShape:(id<OrgGeogebraCommonAwtGShape>)fillShape
                                    withBoolean:(jboolean)usePureStroke {
  if ([self isForceNoFill]) return;
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isHatchingEnabled]) {
    if (hatchPaint_ == nil) {
      hatchPaint_ = new_JavaUtilArrayList_init();
    }
    id<OrgGeogebraCommonAwtGPaint> gpaint = [((OrgGeogebraCommonEuclidianHatchingHandler *) nil_chk(OrgGeogebraCommonEuclidianDrawable_getHatchingHandler(self))) setHatchingWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGBasicStroke:decoStroke_ withOrgGeogebraCommonAwtGColor:[geo_ getObjectColor] withOrgGeogebraCommonAwtGColor:[geo_ getBackgroundColor] withFloat:[geo_ getAlphaValue] withDouble:[geo_ getHatchingDistance] withDouble:[geo_ getHatchingAngle] withOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:[geo_ getFillType] withNSString:[geo_ getFillSymbol] withOrgGeogebraCommonMainApp:[((OrgGeogebraCommonKernelKernel *) nil_chk([geo_ getKernel])) getApplication]];
    if (![((JavaUtilArrayList *) nil_chk(hatchPaint_)) containsWithId:gpaint]) {
      [hatchPaint_ addWithId:gpaint];
    }
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[hatchPaint_ getWithInt:[hatchPaint_ size] - 1]];
    if (![((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([geo_ getKernel])) getApplication])) isHTML5Applet]) {
      if (usePureStroke) [g2 fillWithValueStrokePureWithOrgGeogebraCommonAwtGShape:fillShape];
      else [g2 fillWithOrgGeogebraCommonAwtGShape:fillShape];
    }
    else {
      OrgGeogebraCommonEuclidianEuclidianStatic_fillAfterImageLoadedWithOrgGeogebraCommonAwtGShape_withOrgGeogebraCommonAwtGGraphics2D_withOrgGeogebraCommonAwtGBufferedImage_withOrgGeogebraCommonMainApp_(fillShape, g2, [((OrgGeogebraCommonEuclidianHatchingHandler *) nil_chk(OrgGeogebraCommonEuclidianDrawable_getHatchingHandler(self))) getSubImage], [((OrgGeogebraCommonKernelKernel *) nil_chk([geo_ getKernel])) getApplication]);
    }
  }
  else if ([geo_ getFillType] == OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE()) {
    [((OrgGeogebraCommonEuclidianHatchingHandler *) nil_chk(OrgGeogebraCommonEuclidianDrawable_getHatchingHandler(self))) setTextureWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonKernelGeosGeoElement:geo_ withFloat:[geo_ getAlphaValue]];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) fillWithOrgGeogebraCommonAwtGShape:fillShape];
  }
  else if ([geo_ getAlphaValue] > 0.0f) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getFillColor]];
    [g2 fillWithOrgGeogebraCommonAwtGShape:fillShape];
  }
}

- (OrgGeogebraCommonEuclidianHatchingHandler *)getHatchingHandler {
  return OrgGeogebraCommonEuclidianDrawable_getHatchingHandler(self);
}

- (void)setForceNoFillWithBoolean:(jboolean)forceNoFill {
  self->forceNoFill_ = forceNoFill;
}

- (jboolean)isForceNoFill {
  return forceNoFill_;
}

- (void)setShapeWithOrgGeogebraCommonAwtGArea:(id<OrgGeogebraCommonAwtGArea>)shape {
  self->shape_ = shape;
}

- (id<OrgGeogebraCommonAwtGArea>)getShape {
  return shape_;
}

- (jboolean)isTracing {
  return isTracing__;
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
}

- (jboolean)isFilled {
  return ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getAlphaValue] > 0.0f || [geo_ isHatchingEnabled]);
}

- (OrgGeogebraCommonEuclidianEuclidianView *)getView {
  return view_;
}

- (void)resetHatch {
  self->hatchPaint_ = nil;
}

- (jboolean)isEuclidianVisible {
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible];
}

- (OrgGeogebraCommonAwtGColor *)getObjectColor {
  OrgGeogebraCommonAwtGColor *color = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getObjectColor];
  if ([geo_ hasLineOpacity]) {
    color = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk(color)) getRed] withInt:[color getGreen] withInt:[color getBlue] withInt:[geo_ getLineOpacity]];
  }
  return color;
}

- (instancetype)init {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "update", NULL, "V", 0x401, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x401, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x401, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x401, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x401, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x401, NULL, NULL },
    { "getxLabel", NULL, "D", 0x1, NULL, NULL },
    { "getyLabel", NULL, "D", 0x1, NULL, NULL },
    { "updateFontSize", NULL, "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "drawLabelWithOrgGeogebraCommonAwtGGraphics2D:", "drawLabel", "V", 0x11, NULL, NULL },
    { "ensureLabelDrawsOnScreenWithDouble:withDouble:", "ensureLabelDrawsOnScreen", "V", 0x2, NULL, NULL },
    { "drawMultilineLaTeXWithOrgGeogebraCommonAwtGGraphics2D:withOrgGeogebraCommonAwtGFont:withOrgGeogebraCommonAwtGColor:withOrgGeogebraCommonAwtGColor:", "drawMultilineLaTeX", "V", 0x11, NULL, NULL },
    { "isSerif", NULL, "Z", 0x10, NULL, NULL },
    { "drawMultilineTextWithOrgGeogebraCommonAwtGGraphics2D:withOrgGeogebraCommonAwtGFont:", "drawMultilineText", "V", 0x14, NULL, NULL },
    { "addLabelOffset", NULL, "Z", 0x14, NULL, NULL },
    { "addLabelOffsetEnsureOnScreen", NULL, "V", 0x11, NULL, NULL },
    { "addLabelOffsetEnsureOnScreenWithDouble:withDouble:", "addLabelOffsetEnsureOnScreen", "V", 0x11, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "forceLineTypeWithInt:", "forceLineType", "V", 0x11, NULL, NULL },
    { "updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:", "updateStrokes", "V", 0x11, NULL, NULL },
    { "updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:withInt:", "updateStrokes", "V", 0x11, NULL, NULL },
    { "updateStrokesJustLineThicknessWithOrgGeogebraCommonKernelGeosGeoElement:", "updateStrokesJustLineThickness", "V", 0x11, NULL, NULL },
    { "fillWithOrgGeogebraCommonAwtGGraphics2D:withOrgGeogebraCommonAwtGShape:withBoolean:", "fill", "V", 0x4, NULL, NULL },
    { "getHatchingHandler", NULL, "Lorg.geogebra.common.euclidian.HatchingHandler;", 0x2, NULL, NULL },
    { "setForceNoFillWithBoolean:", "setForceNoFill", "V", 0x1, NULL, NULL },
    { "isForceNoFill", NULL, "Z", 0x1, NULL, NULL },
    { "setShapeWithOrgGeogebraCommonAwtGArea:", "setShape", "V", 0x1, NULL, NULL },
    { "getShape", NULL, "Lorg.geogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "isTracing", NULL, "Z", 0x1, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x4, NULL, NULL },
    { "isFilled", NULL, "Z", 0x1, NULL, NULL },
    { "getView", NULL, "Lorg.geogebra.common.euclidian.EuclidianView;", 0x1, NULL, NULL },
    { "resetHatch", NULL, "V", 0x1, NULL, NULL },
    { "isEuclidianVisible", NULL, "Z", 0x1, NULL, NULL },
    { "getObjectColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "forceNoFill_", NULL, 0x2, "Z", NULL, NULL,  },
    { "objStroke_", NULL, 0x4, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "selStroke_", NULL, 0x4, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "decoStroke_", NULL, 0x4, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "lineThickness_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineType_", NULL, 0x2, "I", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "geo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "xLabel_", NULL, 0x1, "I", NULL, NULL,  },
    { "yLabel_", NULL, 0x1, "I", NULL, NULL,  },
    { "mouseX_", NULL, 0x0, "I", NULL, NULL,  },
    { "mouseY_", NULL, 0x0, "I", NULL, NULL,  },
    { "labelDesc_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL,  },
    { "oldLabelDesc_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "labelHasIndex_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelRectangle_", NULL, 0x4, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "strokedShape_", NULL, 0x4, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "strokedShape2_", NULL, 0x4, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "shape_", NULL, 0x2, "Lorg.geogebra.common.awt.GArea;", NULL, NULL,  },
    { "lastFontSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "isTracing__", "isTracing", 0x4, "Z", NULL, NULL,  },
    { "hatchPaint_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/awt/GPaint;>;",  },
    { "forcedLineType_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hatchingHandler_", NULL, 0x2, "Lorg.geogebra.common.euclidian.HatchingHandler;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawable = { 2, "Drawable", "org.geogebra.common.euclidian", NULL, 0x401, 38, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawable;
}

@end

void OrgGeogebraCommonEuclidianDrawable_drawLabelWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawable *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  if (self->labelDesc_ == nil) return;
  NSString *label = self->labelDesc_;
  jint ind = [((NSString *) nil_chk(label)) indexOfString:@"%style="];
  if (ind > -1) {
    label = [label substring:0 endIndex:ind];
  }
  OrgGeogebraCommonAwtGFont *oldFont = nil;
  if (([((NSString *) nil_chk(label)) charAtWithInt:0] == '$') && [label hasSuffix:@"$"] && ((jint) [label length]) > 1) {
    jboolean serif = YES;
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoText]) serif = [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoText class])) isSerifFont];
    jint offsetY = 10 + [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontSize];
    OrgGeogebraCommonMainApp *app = [self->view_ getApplication];
    OrgGeogebraCommonAwtGDimension *dim = [((OrgGeogebraCommonEuclidianDrawEquation *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getDrawEquation])) drawEquationWithOrgGeogebraCommonMainApp:[((OrgGeogebraCommonKernelKernel *) nil_chk([self->geo_ getKernel])) getApplication] withOrgGeogebraCommonKernelGeosGeoElement:self->geo_ withOrgGeogebraCommonAwtGGraphics2D:g2 withInt:self->xLabel_ withInt:self->yLabel_ - offsetY withNSString:[label substring:1 endIndex:((jint) [label length]) - 1] withOrgGeogebraCommonAwtGFont:[((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFont] withBoolean:serif withOrgGeogebraCommonAwtGColor:[g2 getColor] withOrgGeogebraCommonAwtGColor:[g2 getBackground] withBoolean:YES withBoolean:NO];
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->xLabel_ withInt:self->yLabel_ - offsetY withInt:[((OrgGeogebraCommonAwtGDimension *) nil_chk(dim)) getWidth] withInt:[dim getHeight]];
    return;
  }
  if (self->oldLabelDesc_ != self->labelDesc_ || ([((NSString *) nil_chk(self->labelDesc_)) charAtWithInt:0] == '<')) {
    jboolean italic = NO;
    if ([label hasPrefix:@"<i>"] && [label hasSuffix:@"</i>"]) {
      oldFont = [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFont];
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getApplication])) getFontCommonWithBoolean:YES withInt:[((OrgGeogebraCommonAwtGFont *) nil_chk(oldFont)) getStyle] | OrgGeogebraCommonAwtGFont_ITALIC withInt:[oldFont getSize]]];
      label = [label substring:3 endIndex:((jint) [label length]) - 4];
      italic = YES;
    }
    if ([((NSString *) nil_chk(label)) hasPrefix:@"<b>"] && [label hasSuffix:@"</b>"]) {
      oldFont = [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFont];
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonAwtGFont *) nil_chk([g2 getFont])) deriveFontWithInt:OrgGeogebraCommonAwtGFont_BOLD + (italic ? OrgGeogebraCommonAwtGFont_ITALIC : 0)]];
      label = [label substring:3 endIndex:((jint) [label length]) - 4];
    }
  }
  jint fontSize = [((OrgGeogebraCommonAwtGFont *) nil_chk([((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFont])) getSize];
  if (self->oldLabelDesc_ == self->labelDesc_ && !self->labelHasIndex_ && self->lastFontSize_ == fontSize) {
    [g2 drawStringWithNSString:label withInt:self->xLabel_ withInt:self->yLabel_];
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setLocationWithInt:self->xLabel_ withInt:self->yLabel_ - fontSize];
  }
  else {
    self->oldLabelDesc_ = self->labelDesc_;
    OrgGeogebraCommonAwtGPoint *p = OrgGeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getApplication], g2, label, self->xLabel_, self->yLabel_, OrgGeogebraCommonEuclidianDrawable_isSerif(self), NO);
    self->labelHasIndex_ = (((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->y_ > 0);
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->xLabel_ withInt:self->yLabel_ - fontSize withInt:p->x_ withInt:fontSize + p->y_];
    self->lastFontSize_ = fontSize;
  }
  if (oldFont != nil) [g2 setFontWithOrgGeogebraCommonAwtGFont:oldFont];
}

void OrgGeogebraCommonEuclidianDrawable_ensureLabelDrawsOnScreenWithDouble_withDouble_(OrgGeogebraCommonEuclidianDrawable *self, jdouble Xmultiplier, jdouble Ymultiplier) {
  jint widthEstimate = J2ObjCFpToInt([((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) getWidth]);
  jint heightEstimate = J2ObjCFpToInt([self->labelRectangle_ getHeight]);
  OrgGeogebraCommonAwtGFont *font = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getApplication])) getPlainFontCommon];
  if (self->oldLabelDesc_ != self->labelDesc_ || self->lastFontSize_ != [((OrgGeogebraCommonAwtGFont *) nil_chk(font)) getSize]) {
    if ([((NSString *) nil_chk(self->labelDesc_)) hasPrefix:@"$"]) {
      OrgGeogebraCommonEuclidianDrawable_drawLabelWithOrgGeogebraCommonAwtGGraphics2D_(self, [self->view_ getTempGraphics2DWithOrgGeogebraCommonAwtGFont:font]);
      widthEstimate = J2ObjCFpToInt([self->labelRectangle_ getWidth]);
      heightEstimate = J2ObjCFpToInt([self->labelRectangle_ getHeight]);
    }
    else {
      heightEstimate = J2ObjCFpToInt(([((OrgGeogebraCommonUtilStringUtil *) nil_chk(OrgGeogebraCommonUtilStringUtil_get_prototype_())) estimateHeightWithNSString:self->labelDesc_ withOrgGeogebraCommonAwtGFont:font] * Ymultiplier));
      widthEstimate = J2ObjCFpToInt(([OrgGeogebraCommonUtilStringUtil_get_prototype_() estimateLengthHTMLWithNSString:self->labelDesc_ withOrgGeogebraCommonAwtGFont:font] * Xmultiplier));
    }
  }
  if (self->xLabel_ < 3) self->xLabel_ = 3;
  else self->xLabel_ = JavaLangMath_minWithInt_withInt_(self->xLabel_, [self->view_ getWidth] - widthEstimate - 3);
  if (self->yLabel_ < heightEstimate) self->yLabel_ = heightEstimate;
  else self->yLabel_ = JavaLangMath_minWithInt_withInt_(self->yLabel_, [self->view_ getHeight] - 3);
  [self->labelRectangle_ setLocationWithInt:self->xLabel_ withInt:self->yLabel_ - [self->view_ getFontSize]];
}

jboolean OrgGeogebraCommonEuclidianDrawable_isSerif(OrgGeogebraCommonEuclidianDrawable *self) {
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoText] ? [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoText class])) isSerifFont] : NO;
}

void OrgGeogebraCommonEuclidianDrawable_addLabelOffsetEnsureOnScreenWithDouble_withDouble_(OrgGeogebraCommonEuclidianDrawable *self, jdouble Xmultiplier, jdouble Ymultiplier) {
  self->xLabel_ += ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_))->labelOffsetX_;
  self->yLabel_ += self->geo_->labelOffsetY_;
  OrgGeogebraCommonEuclidianDrawable_ensureLabelDrawsOnScreenWithDouble_withDouble_(self, Xmultiplier, Ymultiplier);
}

void OrgGeogebraCommonEuclidianDrawable_updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND_withInt_(OrgGeogebraCommonEuclidianDrawable *self, id<OrgGeogebraCommonKernelKernelNDGeoElementND> fromGeo, jint minThickness) {
  self->strokedShape_ = nil;
  self->strokedShape2_ = nil;
  if (self->lineThickness_ != [((id<OrgGeogebraCommonKernelKernelNDGeoElementND>) nil_chk(fromGeo)) getLineThickness]) {
    self->lineThickness_ = JavaLangMath_maxWithInt_withInt_(minThickness, [fromGeo getLineThickness]);
    if (!self->forcedLineType_) self->lineType_ = [fromGeo getLineType];
    jfloat width = self->lineThickness_ / 2.0f;
    self->objStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(width, self->lineType_);
    self->decoStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(width, OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL);
    self->selStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(width + OrgGeogebraCommonPluginEuclidianStyleConstants_SELECTION_ADD, OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL);
  }
  else if (self->lineType_ != [fromGeo getLineType]) {
    if (!self->forcedLineType_) self->lineType_ = [fromGeo getLineType];
    jfloat width = self->lineThickness_ / 2.0f;
    self->objStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(width, self->lineType_);
  }
}

OrgGeogebraCommonEuclidianHatchingHandler *OrgGeogebraCommonEuclidianDrawable_getHatchingHandler(OrgGeogebraCommonEuclidianDrawable *self) {
  if (self->hatchingHandler_ == nil) {
    self->hatchingHandler_ = new_OrgGeogebraCommonEuclidianHatchingHandler_init();
  }
  return self->hatchingHandler_;
}

void OrgGeogebraCommonEuclidianDrawable_init(OrgGeogebraCommonEuclidianDrawable *self) {
  (void) OrgGeogebraCommonEuclidianDrawableND_init(self);
  self->objStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getDefaultStroke();
  self->selStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getDefaultSelectionStroke();
  self->decoStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getDefaultStroke();
  self->lineThickness_ = -1;
  self->lineType_ = -1;
  self->labelHasIndex_ = NO;
  self->labelRectangle_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0];
  self->lastFontSize_ = -1;
  self->isTracing__ = NO;
  self->hatchPaint_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawable)
