//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawParametricInequality.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawParametricInequality.h"
#include "org/geogebra/common/euclidian/plot/CurvePlotter.h"
#include "org/geogebra/common/euclidian/plot/GeneralPathClippedForCurvePlotter.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/arithmetic/Inequality.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"

@interface OrgGeogebraCommonEuclidianDrawDrawParametricInequality () {
 @public
  OrgGeogebraCommonKernelArithmeticInequality *paramIneq_;
  OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *gp_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawParametricInequality, paramIneq_, OrgGeogebraCommonKernelArithmeticInequality *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawParametricInequality, gp_, OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *)

@implementation OrgGeogebraCommonEuclidianDrawDrawParametricInequality

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticInequality:(OrgGeogebraCommonKernelArithmeticInequality *)ineq
                        withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                          withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawDrawParametricInequality_initWithOrgGeogebraCommonKernelArithmeticInequality_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(self, ineq, view, geo);
  return self;
}

- (id<OrgGeogebraCommonAwtGArea>)getShape {
  return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:gp_];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getBorder {
  return [((OrgGeogebraCommonKernelArithmeticInequality *) nil_chk(paramIneq_)) getBorder];
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getSelColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
    [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
  }
  [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:gp_ withBoolean:YES];
  if (geo_->lineThickness_ > 0) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) containsWithInt:x withInt:y] || [gp_ intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)update {
  if (gp_ == nil) OrgGeogebraCommonEuclidianDrawDrawParametricInequality_setAndConsume_gp_(self, new_OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
  else [gp_ reset];
  OrgGeogebraCommonKernelGeosGeoFunction *border = [((OrgGeogebraCommonKernelArithmeticInequality *) nil_chk(paramIneq_)) getFunBorder];
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(border)) setLineThicknessWithInt:((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_))->lineThickness_];
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:border];
  OrgGeogebraCommonAwtGPoint *labelPos;
  if ([paramIneq_ getType] == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X()) {
    jdouble bx = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordYWithDouble:-10];
    jdouble ax = [view_ toRealWorldCoordYWithDouble:[view_ getHeight] + 10];
    jdouble axEv = [view_ toScreenCoordYdWithDouble:ax];
    if ([paramIneq_ isAboveBorder]) {
      [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] + 10 withDouble:axEv];
      labelPos = OrgGeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withOrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(border, ax, bx, view_, gp_, YES, OrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_RESET_XMAX());
      [gp_ lineToWithDouble:[view_ getWidth] + 10 withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk([gp_ getCurrentPoint])) getY]];
      [gp_ lineToWithDouble:[view_ getWidth] + 10 withDouble:axEv];
      [gp_ closePath];
    }
    else {
      [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) moveToWithDouble:-10 withDouble:axEv];
      labelPos = OrgGeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withOrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(border, ax, bx, view_, gp_, YES, OrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_RESET_XMIN());
      [gp_ lineToWithDouble:-10 withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk([gp_ getCurrentPoint])) getY]];
      [gp_ lineToWithDouble:-10 withDouble:axEv];
      [gp_ closePath];
    }
  }
  else {
    jdouble ax = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:-10];
    jdouble bx = [view_ toRealWorldCoordXWithDouble:[view_ getWidth] + 10];
    jdouble axEv = [view_ toScreenCoordXdWithDouble:ax];
    if ([paramIneq_ isAboveBorder]) {
      [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) moveToWithDouble:axEv withDouble:-10];
      labelPos = OrgGeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withOrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(border, ax, bx, view_, gp_, YES, OrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_RESET_YMIN());
      [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk([gp_ getCurrentPoint])) getX] withDouble:-10];
      [gp_ lineToWithDouble:axEv withDouble:-10];
      [gp_ closePath];
    }
    else {
      [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) moveToWithDouble:axEv withDouble:[view_ getHeight] + 10];
      labelPos = OrgGeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withOrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(border, ax, bx, view_, gp_, YES, OrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_RESET_YMAX());
      [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk([gp_ getCurrentPoint])) getX] withDouble:[view_ getHeight] + 10];
      [gp_ lineToWithDouble:axEv withDouble:[view_ getHeight] + 10];
      [gp_ closePath];
    }
    [border evaluateCurveWithDouble:ax];
  }
  if ([self->geo_ isLabelVisible]) {
    xLabel_ = [((OrgGeogebraCommonAwtGPoint *) nil_chk(labelPos)) getX];
    yLabel_ = [labelPos getY];
    [self addLabelOffset];
  }
}

- (jboolean)isXparametric {
  return [((OrgGeogebraCommonKernelArithmeticInequality *) nil_chk(paramIneq_)) getType] == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X();
}

- (void)dealloc {
  RELEASE_(paramIneq_);
  RELEASE_(gp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelArithmeticInequality:withOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoElement:", "DrawParametricInequality", NULL, 0x4, NULL, NULL },
    { "getShape", NULL, "Lorg.geogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "getBorder", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x0, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x1, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "isXparametric", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "paramIneq_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Inequality;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.euclidian.plot.GeneralPathClippedForCurvePlotter;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawParametricInequality = { 2, "DrawParametricInequality", "org.geogebra.common.euclidian.draw", NULL, 0x0, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawParametricInequality;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawParametricInequality_initWithOrgGeogebraCommonKernelArithmeticInequality_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonEuclidianDrawDrawParametricInequality *self, OrgGeogebraCommonKernelArithmeticInequality *ineq, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawParametricInequality_set_paramIneq_(self, ineq);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

OrgGeogebraCommonEuclidianDrawDrawParametricInequality *new_OrgGeogebraCommonEuclidianDrawDrawParametricInequality_initWithOrgGeogebraCommonKernelArithmeticInequality_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelArithmeticInequality *ineq, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonEuclidianDrawDrawParametricInequality *self = [OrgGeogebraCommonEuclidianDrawDrawParametricInequality alloc];
  OrgGeogebraCommonEuclidianDrawDrawParametricInequality_initWithOrgGeogebraCommonKernelArithmeticInequality_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(self, ineq, view, geo);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawParametricInequality)
