//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/draw/DrawImage.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GAlphaComposite.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GComposite.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawImage.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"

@interface OrgGeogebraCommonEuclidianDrawDrawImage () {
 @public
  OrgGeogebraCommonKernelGeosGeoImage *geoImage_;
  jboolean isVisible_;
  id<OrgGeogebraCommonAwtMyImage> image_;
  jboolean absoluteLocation_;
  id<OrgGeogebraCommonAwtGAlphaComposite> alphaComp_;
  jfloat alpha_;
  jboolean isInBackground__;
  id<OrgGeogebraCommonAwtGAffineTransform> at_, atInverse_, tempAT_;
  jboolean needsInterpolationRenderingHint_;
  jint screenX_, screenY_;
  id<OrgGeogebraCommonAwtGRectangle> boundingBox_;
  id<OrgGeogebraCommonAwtGGeneralPath> highlighting_;
  IOSDoubleArray *hitCoords_;
}

- (void)drawHighlightingWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at2
                             withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, geoImage_, OrgGeogebraCommonKernelGeosGeoImage *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, image_, id<OrgGeogebraCommonAwtMyImage>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, alphaComp_, id<OrgGeogebraCommonAwtGAlphaComposite>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, at_, id<OrgGeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, atInverse_, id<OrgGeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, tempAT_, id<OrgGeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, boundingBox_, id<OrgGeogebraCommonAwtGRectangle>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, highlighting_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawImage, hitCoords_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawImage_update(OrgGeogebraCommonEuclidianDrawDrawImage *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawImage_drawHighlightingWithOrgGeogebraCommonAwtGAffineTransform_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawImage *self, id<OrgGeogebraCommonAwtGAffineTransform> at2, id<OrgGeogebraCommonAwtGGraphics2D> g2);

@implementation OrgGeogebraCommonEuclidianDrawDrawImage

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                        withOrgGeogebraCommonKernelGeosGeoImage:(OrgGeogebraCommonKernelGeosGeoImage *)geoImage {
  OrgGeogebraCommonEuclidianDrawDrawImage_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoImage_(self, view, geoImage);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawImage_update(self);
}

- (jboolean)checkInBackground {
  if (isInBackground__ != [((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground]) {
    OrgGeogebraCommonEuclidianDrawDrawImage_update(self);
  }
  else {
    [self setNeedsUpdateWithBoolean:YES];
  }
  return isInBackground__ && [geoImage_ isInBackground];
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g3 {
  if (isVisible_) {
    id<OrgGeogebraCommonAwtGComposite> oldComp = [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g3)) getComposite];
    if (alpha_ >= 0.0f && alpha_ < 1.0f) {
      if (alphaComp_ == nil) alphaComp_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAlphaCompositeWithInt:OrgGeogebraCommonAwtGAlphaComposite_SRC_OVER withFloat:alpha_];
      [g3 setCompositeWithOrgGeogebraCommonAwtGComposite:alphaComp_];
    }
    if (absoluteLocation_) {
      [g3 drawImageWithOrgGeogebraCommonAwtMyImage:image_ withOrgGeogebraCommonAwtGBufferedImageOp:nil withInt:screenX_ withInt:screenY_];
      if (!isInBackground__ && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [g3 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
        [g3 setPaintWithOrgGeogebraCommonAwtGPaint:OrgGeogebraCommonAwtGColor_get_LIGHT_GRAY_()];
        [g3 drawWithOrgGeogebraCommonAwtGShape:labelRectangle_];
      }
    }
    else {
      [g3 saveTransform];
      [g3 transformWithOrgGeogebraCommonAwtGAffineTransform:at_];
      id oldInterpolationHint = [g3 setInterpolationHintWithBoolean:needsInterpolationRenderingHint_];
      [g3 drawImageWithOrgGeogebraCommonAwtMyImage:image_ withInt:0 withInt:0];
      [g3 restoreTransform];
      if (!isInBackground__ && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [g3 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
        [g3 setPaintWithOrgGeogebraCommonAwtGPaint:OrgGeogebraCommonAwtGColor_get_LIGHT_GRAY_()];
        OrgGeogebraCommonEuclidianDrawDrawImage_drawHighlightingWithOrgGeogebraCommonAwtGAffineTransform_withOrgGeogebraCommonAwtGGraphics2D_(self, at_, g3);
        OrgGeogebraCommonAwtGPoint2D *corner1 = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2DWithDouble:[((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) getMinX] withDouble:[labelRectangle_ getMinY]];
        OrgGeogebraCommonAwtGPoint2D *corner2 = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2DWithDouble:[labelRectangle_ getMinX] withDouble:[labelRectangle_ getMaxY]];
        OrgGeogebraCommonAwtGPoint2D *corner3 = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2DWithDouble:[labelRectangle_ getMaxX] withDouble:[labelRectangle_ getMaxY]];
        OrgGeogebraCommonAwtGPoint2D *corner4 = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2DWithDouble:[labelRectangle_ getMaxX] withDouble:[labelRectangle_ getMinY]];
        (void) [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(at_)) transformWithOrgGeogebraCommonAwtGPoint2D:corner1 withOrgGeogebraCommonAwtGPoint2D:corner1];
        (void) [at_ transformWithOrgGeogebraCommonAwtGPoint2D:corner2 withOrgGeogebraCommonAwtGPoint2D:corner2];
        (void) [at_ transformWithOrgGeogebraCommonAwtGPoint2D:corner3 withOrgGeogebraCommonAwtGPoint2D:corner3];
        (void) [at_ transformWithOrgGeogebraCommonAwtGPoint2D:corner4 withOrgGeogebraCommonAwtGPoint2D:corner4];
        if (highlighting_ == nil) highlighting_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newGeneralPath];
        else [highlighting_ reset];
        [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(highlighting_)) moveToWithFloat:(jfloat) [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(corner1)) getX] withFloat:(jfloat) [corner1 getY]];
        [highlighting_ lineToWithFloat:(jfloat) [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(corner2)) getX] withFloat:(jfloat) [corner2 getY]];
        [highlighting_ lineToWithFloat:(jfloat) [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(corner3)) getX] withFloat:(jfloat) [corner3 getY]];
        [highlighting_ lineToWithFloat:(jfloat) [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(corner4)) getX] withFloat:(jfloat) [corner4 getY]];
        [highlighting_ lineToWithFloat:(jfloat) [corner1 getX] withFloat:(jfloat) [corner1 getY]];
        [g3 drawWithOrgGeogebraCommonAwtGShape:highlighting_];
      }
      [g3 resetInterpolationHintWithId:oldInterpolationHint];
    }
    [g3 setCompositeWithOrgGeogebraCommonAwtGComposite:oldComp];
  }
}

- (void)drawHighlightingWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)at2
                             withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawImage_drawHighlightingWithOrgGeogebraCommonAwtGAffineTransform_withOrgGeogebraCommonAwtGGraphics2D_(self, at2, g2);
}

- (jboolean)isInBackground {
  return [((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground];
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if (!isVisible_ || [((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground]) return NO;
  *IOSDoubleArray_GetRef(nil_chk(hitCoords_), 0) = x;
  *IOSDoubleArray_GetRef(hitCoords_, 1) = y;
  if (![((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isAbsoluteScreenLocActive]) {
    [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(atInverse_)) transformWithDoubleArray:hitCoords_ withInt:0 withDoubleArray:hitCoords_ withInt:0 withInt:1];
  }
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) containsWithDouble:IOSDoubleArray_Get(hitCoords_, 0) withDouble:IOSDoubleArray_Get(hitCoords_, 1)];
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  if (!isVisible_ || [((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground]) return NO;
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:boundingBox_];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  if (!isVisible_ || [((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground]) return NO;
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:boundingBox_];
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return boundingBox_;
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geo_ = geo;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoImage:", "DrawImage", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "checkInBackground", NULL, "Z", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "drawHighlightingWithOrgGeogebraCommonAwtGAffineTransform:withOrgGeogebraCommonAwtGGraphics2D:", "drawHighlighting", "V", 0x2, NULL, NULL },
    { "isInBackground", NULL, "Z", 0x0, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoImage_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoImage;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "image_", NULL, 0x2, "Lorg.geogebra.common.awt.MyImage;", NULL, NULL,  },
    { "absoluteLocation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "alphaComp_", NULL, 0x2, "Lorg.geogebra.common.awt.GAlphaComposite;", NULL, NULL,  },
    { "alpha_", NULL, 0x2, "F", NULL, NULL,  },
    { "isInBackground__", "isInBackground", 0x2, "Z", NULL, NULL,  },
    { "at_", NULL, 0x2, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "atInverse_", NULL, 0x2, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "tempAT_", NULL, 0x2, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "needsInterpolationRenderingHint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "screenX_", NULL, 0x2, "I", NULL, NULL,  },
    { "screenY_", NULL, 0x2, "I", NULL, NULL,  },
    { "boundingBox_", NULL, 0x2, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "highlighting_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "hitCoords_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawImage = { 2, "DrawImage", "org.geogebra.common.euclidian.draw", NULL, 0x11, 13, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawImage;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawImage_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoImage_(OrgGeogebraCommonEuclidianDrawDrawImage *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoImage *geoImage) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->alpha_ = -1;
  self->isInBackground__ = NO;
  self->hitCoords_ = [IOSDoubleArray newArrayWithLength:2];
  self->view_ = view;
  self->geoImage_ = geoImage;
  self->geo_ = geoImage;
  self->at_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  self->tempAT_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAffineTransform];
  self->boundingBox_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangle];
  self->selStroke_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newMyBasicStrokeWithFloat:1.5f];
  OrgGeogebraCommonEuclidianDrawDrawImage_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawImage *new_OrgGeogebraCommonEuclidianDrawDrawImage_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoImage_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoImage *geoImage) {
  OrgGeogebraCommonEuclidianDrawDrawImage *self = [OrgGeogebraCommonEuclidianDrawDrawImage alloc];
  OrgGeogebraCommonEuclidianDrawDrawImage_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoImage_(self, view, geoImage);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawImage_update(OrgGeogebraCommonEuclidianDrawDrawImage *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  if ([self->geo_ getAlphaValue] != self->alpha_) {
    self->alpha_ = [self->geo_ getAlphaValue];
    self->alphaComp_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAlphaCompositeWithInt:OrgGeogebraCommonAwtGAlphaComposite_SRC_OVER withFloat:self->alpha_];
  }
  self->image_ = [((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(self->geoImage_)) getFillImage];
  jint width = [((id<OrgGeogebraCommonAwtMyImage>) nil_chk(self->image_)) getWidth];
  jint height = [self->image_ getHeight];
  self->absoluteLocation_ = [self->geoImage_ isAbsoluteScreenLocActive];
  if (self->absoluteLocation_) {
    self->screenX_ = [self->geoImage_ getAbsoluteScreenLocX];
    self->screenY_ = [self->geoImage_ getAbsoluteScreenLocY] - height;
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->screenX_ withInt:self->screenY_ withInt:width withInt:height];
  }
  else {
    OrgGeogebraCommonKernelGeosGeoPoint *A = [self->geoImage_ getCornerWithInt:0];
    OrgGeogebraCommonKernelGeosGeoPoint *B = [self->geoImage_ getCornerWithInt:1];
    OrgGeogebraCommonKernelGeosGeoPoint *D = [self->geoImage_ getCornerWithInt:2];
    jdouble ax = 0;
    jdouble ay = 0;
    if (A != nil) {
      if (![A isDefined] || [A isInfinite]) {
        self->isVisible_ = NO;
        return;
      }
      ax = A->inhomX_;
      ay = A->inhomY_;
    }
    [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->at_)) setTransformWithOrgGeogebraCommonAwtGAffineTransform:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordTransform]];
    [self->at_ translateWithDouble:ax withDouble:ay];
    if (B == nil) {
      if (D == nil) {
        [self->at_ scale__WithDouble:[self->view_ getInvXscale] withDouble:-[self->view_ getInvXscale]];
      }
      else {
        if (![D isDefined] || [D isInfinite]) {
          self->isVisible_ = NO;
          return;
        }
        jdouble ADx = D->inhomX_ - ax;
        jdouble ADy = D->inhomY_ - ay;
        [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->tempAT_)) setTransformWithDouble:ADy withDouble:-ADx withDouble:ADx withDouble:ADy withDouble:0 withDouble:0];
        [self->at_ concatenateWithOrgGeogebraCommonAwtGAffineTransform:self->tempAT_];
        jdouble yscale = 1.0 / height;
        [self->at_ scale__WithDouble:yscale withDouble:-yscale];
      }
    }
    else {
      if (![B isDefined] || [B isInfinite]) {
        self->isVisible_ = NO;
        return;
      }
      if (D == nil) {
        jdouble ABx = B->inhomX_ - ax;
        jdouble ABy = B->inhomY_ - ay;
        [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->tempAT_)) setTransformWithDouble:ABx withDouble:ABy withDouble:-ABy withDouble:ABx withDouble:0 withDouble:0];
        [self->at_ concatenateWithOrgGeogebraCommonAwtGAffineTransform:self->tempAT_];
        jdouble xscale = 1.0 / width;
        [self->at_ scale__WithDouble:xscale withDouble:-xscale];
      }
      else {
        if (![D isDefined] || [D isInfinite]) {
          self->isVisible_ = NO;
          return;
        }
        jdouble ABx = B->inhomX_ - ax;
        jdouble ABy = B->inhomY_ - ay;
        jdouble ADx = D->inhomX_ - ax;
        jdouble ADy = D->inhomY_ - ay;
        [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->tempAT_)) setTransformWithDouble:ABx withDouble:ABy withDouble:ADx withDouble:ADy withDouble:0 withDouble:0];
        [self->at_ concatenateWithOrgGeogebraCommonAwtGAffineTransform:self->tempAT_];
        [self->at_ scale__WithDouble:1.0 / width withDouble:-1.0 / height];
      }
    }
    [self->at_ translateWithDouble:0 withDouble:-height];
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:0 withInt:0 withInt:width withInt:height];
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->boundingBox_)) setBoundsWithInt:0 withInt:0 withInt:width withInt:height];
    id<OrgGeogebraCommonAwtGShape> shape = [self->at_ createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->boundingBox_];
    self->boundingBox_ = [((id<OrgGeogebraCommonAwtGShape>) nil_chk(shape)) getBounds];
    @try {
      self->atInverse_ = [self->at_ createInverse];
    }
    @catch (JavaLangException *e) {
      self->isVisible_ = NO;
      return;
    }
    self->needsInterpolationRenderingHint_ = (([self->geoImage_ isInterpolate]) && !(OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->at_ getScaleX], 1.0, OrgGeogebraCommonKernelKernel_MAX_PRECISION) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->at_ getScaleY], 1.0, OrgGeogebraCommonKernelKernel_MAX_PRECISION) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->at_ getShearX], 0.0, OrgGeogebraCommonKernelKernel_MAX_PRECISION) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->at_ getShearY], 0.0, OrgGeogebraCommonKernelKernel_MAX_PRECISION)));
  }
  if (self->isInBackground__ != [self->geoImage_ isInBackground]) {
    self->isInBackground__ = !self->isInBackground__;
    if (self->isInBackground__) {
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) addBackgroundImageWithOrgGeogebraCommonEuclidianDrawDrawImage:self];
    }
    else {
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) removeBackgroundImageWithOrgGeogebraCommonEuclidianDrawDrawImage:self];
      [self->view_ updateBackgroundImage];
    }
  }
  if (self->isInBackground__) [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateBackgroundImage];
}

void OrgGeogebraCommonEuclidianDrawDrawImage_drawHighlightingWithOrgGeogebraCommonAwtGAffineTransform_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawImage *self, id<OrgGeogebraCommonAwtGAffineTransform> at2, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawImage)
