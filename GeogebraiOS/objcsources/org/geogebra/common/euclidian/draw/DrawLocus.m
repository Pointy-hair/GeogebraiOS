//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/draw/DrawLocus.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/draw/DrawLocus.h"
#include "org/geogebra/common/euclidian/plot/CurvePlotter.h"
#include "org/geogebra/common/euclidian/plot/GeneralPathClippedForCurvePlotter.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/geos/Traceable.h"

@interface OrgGeogebraCommonEuclidianDrawDrawLocus () {
 @public
  OrgGeogebraCommonKernelGeosGeoLocusND *locus_;
  jboolean isVisible_, labelVisible_;
  OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *gp_;
  IOSDoubleArray *lastPointCoords_;
}

- (void)buildGeneralPathWithJavaUtilArrayList:(JavaUtilArrayList *)pointList;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLocus, locus_, OrgGeogebraCommonKernelGeosGeoLocusND *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLocus, gp_, OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLocus, lastPointCoords_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLocus_update(OrgGeogebraCommonEuclidianDrawDrawLocus *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLocus_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawLocus *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLocus_buildGeneralPathWithJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawLocus *self, JavaUtilArrayList *pointList);

@implementation OrgGeogebraCommonEuclidianDrawDrawLocus

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                      withOrgGeogebraCommonKernelGeosGeoLocusND:(OrgGeogebraCommonKernelGeosGeoLocusND *)locus {
  OrgGeogebraCommonEuclidianDrawDrawLocus_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoLocusND_(self, view, locus);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawLocus_update(self);
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawLocus_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)buildGeneralPathWithJavaUtilArrayList:(JavaUtilArrayList *)pointList {
  OrgGeogebraCommonEuclidianDrawDrawLocus_buildGeneralPathWithJavaUtilArrayList_(self, pointList);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
    }
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
    if ([geo_ isFillable] && ([geo_ getAlphaValue] > 0 || [geo_ isHatchingEnabled])) {
      @try {
        [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:([geo_ isInverseFill] ? ((id) [self getShape]) : gp_) withBoolean:NO];
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
      }
    }
    if (labelVisible_) {
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontLine]];
      [g2 setColorWithOrgGeogebraCommonAwtGColor:[geo_ getLabelColor]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  id<OrgGeogebraCommonAwtGShape> t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isInverseFill] ? ((id) [self getShape]) : gp_;
  if (t == nil) {
    return NO;
  }
  if (strokedShape_ == nil) {
    strokedShape_ = [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithOrgGeogebraCommonAwtGShape:gp_];
  }
  if ([geo_ getAlphaValue] > 0.0f || [geo_ isHatchingEnabled]) {
    return [t intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
  }
  return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) getBounds]];
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geo_ = geo;
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isClosedPath] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) getBounds];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoLocusND:", "DrawLocus", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "buildGeneralPathWithJavaUtilArrayList:", "buildGeneralPath", "V", 0x2, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x1, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "locus_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLocusND;", NULL, "Lorg/geogebra/common/kernel/geos/GeoLocusND<+Lorg/geogebra/common/kernel/MyPoint;>;",  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.euclidian.plot.GeneralPathClippedForCurvePlotter;", NULL, NULL,  },
    { "lastPointCoords_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawLocus = { 2, "DrawLocus", "org.geogebra.common.euclidian.draw", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawLocus;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawLocus_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoLocusND_(OrgGeogebraCommonEuclidianDrawDrawLocus *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoLocusND *locus) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->view_ = view;
  self->locus_ = locus;
  self->geo_ = locus;
  OrgGeogebraCommonEuclidianDrawDrawLocus_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawLocus *new_OrgGeogebraCommonEuclidianDrawDrawLocus_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoLocusND_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoLocusND *locus) {
  OrgGeogebraCommonEuclidianDrawDrawLocus *self = [OrgGeogebraCommonEuclidianDrawDrawLocus alloc];
  OrgGeogebraCommonEuclidianDrawDrawLocus_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoLocusND_(self, view, locus);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawLocus_update(OrgGeogebraCommonEuclidianDrawDrawLocus *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  OrgGeogebraCommonEuclidianDrawDrawLocus_buildGeneralPathWithJavaUtilArrayList_(self, [((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) getPoints]);
  if (![((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(self->gp_)) intersectsWithInt:0 withInt:0 withInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]]) {
    self->isVisible_ = NO;
  }
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->geo_];
  self->labelVisible_ = [self->geo_ isLabelVisible];
  if (self->labelVisible_) {
    self->labelDesc_ = [self->geo_ getLabelDescription];
    self->xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(nil_chk(self->lastPointCoords_), 0) - 5));
    self->yLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->lastPointCoords_, 1) + 4 + [self->view_ getFontSize]));
    [self addLabelOffsetEnsureOnScreenWithDouble:1.25 withDouble:1.0];
  }
  if ([self->geo_ isTraceable] && ([OrgGeogebraCommonKernelGeosTraceable_class_() isInstance:self->geo_]) && [((id<OrgGeogebraCommonKernelGeosTraceable>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosTraceable))) getTrace]) {
    self->isTracing__ = YES;
    id<OrgGeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
    if (g2 != nil) OrgGeogebraCommonEuclidianDrawDrawLocus_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
  if ([self->geo_ isInverseFill]) {
    [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[self->view_ getBoundingPath]]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithOrgGeogebraCommonAwtGArea:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithOrgGeogebraCommonAwtGShape:self->gp_]];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawLocus_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawLocus *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  if (self->isVisible_) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:self->gp_];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawLocus_buildGeneralPathWithJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawLocus *self, JavaUtilArrayList *pointList) {
  if (self->gp_ == nil) self->gp_ = new_OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_);
  else [self->gp_ reset];
  self->lastPointCoords_ = OrgGeogebraCommonEuclidianPlotCurvePlotter_drawWithOrgGeogebraCommonEuclidianPlotPathPlotter_withJavaUtilArrayList_(self->gp_, pointList);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawLocus)
