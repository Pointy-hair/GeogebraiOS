//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawAngle.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GArc2D.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GEllipse2DDouble.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GLine2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoAngle.h"
#include "org/geogebra/common/kernel/algos/AlgoAnglePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"

@interface OrgGeogebraCommonEuclidianDrawDrawAngle () {
 @public
  OrgGeogebraCommonKernelGeosGeoAngle *angle_;
  jboolean isVisible_, labelVisible_, show90degrees_;
  OrgGeogebraCommonKernelAlgosAlgoAngle *algo_;
  id<OrgGeogebraCommonAwtGArc2D> drawArc_;
  id<OrgGeogebraCommonAwtGGeneralPath> polygon_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> dot90degree_;
  id<OrgGeogebraCommonAwtGShape> shape_DrawAngle_;
  IOSDoubleArray *m_;
  IOSDoubleArray *coords_;
  IOSDoubleArray *firstVec_;
  jboolean drawDot_;
  IOSObjectArray *previewTempPoints_;
  id<OrgGeogebraCommonAwtGShape> shapeArc1_, shapeArc2_;
  id<OrgGeogebraCommonAwtGArc2D> decoArc_;
  IOSObjectArray *tick_;
  IOSDoubleArray *angleTick_;
  id<OrgGeogebraCommonAwtGGeneralPath> square_;
  JavaUtilArrayList *prevPoints_;
  jdouble maxRadius_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)setNotVisible;

- (void)updateTickWithDouble:(jdouble)angle1
                     withInt:(jint)radius
                     withInt:(jint)id_;

- (void)initPreview OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, angle_, OrgGeogebraCommonKernelGeosGeoAngle *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, algo_, OrgGeogebraCommonKernelAlgosAlgoAngle *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, drawArc_, id<OrgGeogebraCommonAwtGArc2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, polygon_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, dot90degree_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, shape_DrawAngle_, id<OrgGeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, m_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, firstVec_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, previewTempPoints_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, shapeArc1_, id<OrgGeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, shapeArc2_, id<OrgGeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, decoArc_, id<OrgGeogebraCommonAwtGArc2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, tick_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, angleTick_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, square_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawAngle, prevPoints_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawAngle_init__(OrgGeogebraCommonEuclidianDrawDrawAngle *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(OrgGeogebraCommonEuclidianDrawDrawAngle *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawAngle_update(OrgGeogebraCommonEuclidianDrawDrawAngle *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawAngle_drawWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawAngle *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(OrgGeogebraCommonEuclidianDrawDrawAngle *self, jdouble angle1, jint radius, jint id_);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawAngle_initPreview(OrgGeogebraCommonEuclidianDrawDrawAngle *self);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonEuclidianDrawDrawAngle)

jdouble OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_;

@implementation OrgGeogebraCommonEuclidianDrawDrawAngle

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                        withOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)angle {
  OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points {
  OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

- (void)init__ {
  OrgGeogebraCommonEuclidianDrawDrawAngle_init__(self);
}

- (jboolean)inViewWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)pt {
  return YES;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsInViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  return [self getCoordsInViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) getInhomCoordsInD3]];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsInViewWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p {
  return p;
}

- (jdouble)getAngleStartWithDouble:(jdouble)start
                        withDouble:(jdouble)extent {
  return start;
}

- (void)setNotVisible {
  OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawAngle_update(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawAngle_drawWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updateTickWithDouble:(jdouble)angle1
                     withInt:(jint)radius
                     withInt:(jint)id_ {
  OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, angle1, radius, id_);
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return shape_DrawAngle_ != nil && [shape_DrawAngle_ containsWithInt:x withInt:y];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return shape_DrawAngle_ != nil && [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[shape_DrawAngle_ getBounds]];
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return shape_DrawAngle_ != nil && [shape_DrawAngle_ intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || shape_DrawAngle_ == nil || ![geo_ isEuclidianVisible]) return nil;
  return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(shape_DrawAngle_)) getBounds];
}

- (void)initPreview {
  OrgGeogebraCommonEuclidianDrawDrawAngle_initPreview(self);
}

- (void)updatePreview {
  if (geo_ == nil || [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] != 2) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(prevPoints_)) size]; i++) {
    OrgGeogebraCommonKernelMatrixCoords *p = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:i])) getInhomCoordsInD3]];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), i))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:p withBoolean:YES];
  }
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) updateCascade];
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
  if (isVisible_) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, ((IOSObjectArray *) nil_chk(previewTempPoints_))->size_ - 1))) setCoordsWithDouble:xRW withDouble:yRW withDouble:1.0];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, previewTempPoints_->size_ - 1))) updateCascade];
    OrgGeogebraCommonEuclidianDrawDrawAngle_update(self);
  }
}

- (void)drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  isVisible_ = (geo_ != nil && [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == 2);
  if (shape_DrawAngle_ != nil) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_drawWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
  }
}

- (void)disposePreview {
}

- (void)toScreenCoordsWithDoubleArray:(IOSDoubleArray *)vertexScreen {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordsWithDoubleArray:vertexScreen];
}

- (void)setMaxRadiusWithDouble:(jdouble)d {
  self->maxRadius_ = d;
}

- (void)dealloc {
  RELEASE_(angle_);
  RELEASE_(algo_);
  RELEASE_(drawArc_);
  RELEASE_(polygon_);
  RELEASE_(dot90degree_);
  RELEASE_(shape_DrawAngle_);
  RELEASE_(m_);
  RELEASE_(coords_);
  RELEASE_(firstVec_);
  RELEASE_(previewTempPoints_);
  RELEASE_(shapeArc1_);
  RELEASE_(shapeArc2_);
  RELEASE_(decoArc_);
  RELEASE_(tick_);
  RELEASE_(angleTick_);
  RELEASE_(square_);
  RELEASE_(prevPoints_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonEuclidianDrawDrawAngle class]) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_ = JavaLangMath_toRadiansWithDouble_(15);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonEuclidianDrawDrawAngle)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoAngle:", "DrawAngle", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:", "DrawAngle", NULL, 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "inViewWithOrgGeogebraCommonKernelMatrixCoords:", "inView", "Z", 0x1, NULL, NULL },
    { "getCoordsInViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "getCoordsInView", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x11, NULL, NULL },
    { "getCoordsInViewWithOrgGeogebraCommonKernelMatrixCoords:", "getCoordsInView", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getAngleStartWithDouble:withDouble:", "getAngleStart", "D", 0x4, NULL, NULL },
    { "setNotVisible", NULL, "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "updateTickWithDouble:withInt:withInt:", "updateTick", "V", 0x2, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "initPreview", NULL, "V", 0x2, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "toScreenCoordsWithDoubleArray:", "toScreenCoords", "V", 0x1, NULL, NULL },
    { "setMaxRadiusWithDouble:", "setMaxRadius", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "angle_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoAngle;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "show90degrees_", NULL, 0x2, "Z", NULL, NULL,  },
    { "algo_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoAngle;", NULL, NULL,  },
    { "drawArc_", NULL, 0x2, "Lorg.geogebra.common.awt.GArc2D;", NULL, NULL,  },
    { "polygon_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "dot90degree_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "shape_DrawAngle_", "shape", 0x2, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "m_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "firstVec_", NULL, 0x2, "[D", NULL, NULL,  },
    { "drawDot_", NULL, 0x2, "Z", NULL, NULL,  },
    { "previewTempPoints_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "shapeArc1_", NULL, 0x2, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "shapeArc2_", NULL, 0x2, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "decoArc_", NULL, 0x2, "Lorg.geogebra.common.awt.GArc2D;", NULL, NULL,  },
    { "tick_", NULL, 0x2, "[Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "angleTick_", NULL, 0x2, "[D", NULL, NULL,  },
    { "MAX_TICK_DISTANCE_", NULL, 0x19, "D", &OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_, NULL,  },
    { "square_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "prevPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "maxRadius_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawAngle = { 2, "DrawAngle", "org.geogebra.common.euclidian.draw", NULL, 0x1, 24, methods, 23, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawAngle;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(OrgGeogebraCommonEuclidianDrawDrawAngle *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoAngle *angle) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_drawArc_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_polygon_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newGeneralPath]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_m_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_firstVec_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_decoArc_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newArc2D]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_angleTick_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_angle_(self, angle);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, angle);
  OrgGeogebraCommonEuclidianDrawDrawAngle_init__(self);
  if (self->algo_ != nil) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_update(self);
  }
}

OrgGeogebraCommonEuclidianDrawDrawAngle *new_OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoAngle *angle) {
  OrgGeogebraCommonEuclidianDrawDrawAngle *self = [OrgGeogebraCommonEuclidianDrawDrawAngle alloc];
  OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawAngle *self, OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_drawArc_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_polygon_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newGeneralPath]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_m_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_firstVec_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_decoArc_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newArc2D]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_angleTick_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_prevPoints_(self, points);
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_previewTempPoints_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < self->previewTempPoints_->size_; i++) {
    IOSObjectArray_SetAndConsume(self->previewTempPoints_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  }
  OrgGeogebraCommonEuclidianDrawDrawAngle_initPreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawAngle *new_OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawDrawAngle *self = [OrgGeogebraCommonEuclidianDrawDrawAngle alloc];
  OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawAngle_init__(OrgGeogebraCommonEuclidianDrawDrawAngle *self) {
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_firstVec_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 0 } count:2]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_m_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0 } count:2]);
  if ([[((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getDrawAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAngle class]]) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_set_algo_(self, ((OrgGeogebraCommonKernelAlgosAlgoAngle *) check_class_cast([self->angle_ getDrawAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoAngle class])));
  }
}

void OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(OrgGeogebraCommonEuclidianDrawDrawAngle *self) {
  self->isVisible_ = NO;
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, nil);
  self->labelVisible_ = NO;
}

void OrgGeogebraCommonEuclidianDrawDrawAngle_update(OrgGeogebraCommonEuclidianDrawDrawAngle *self) {
  if (![((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getDrawAlgorithm])) isEqual:[self->geo_ getParentAlgorithm]]) OrgGeogebraCommonEuclidianDrawDrawAngle_init__(self);
  self->isVisible_ = YES;
  if (![self->geo_ isEuclidianVisible] || OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getValue])) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->angle_];
  self->maxRadius_ = JavaLangDouble_POSITIVE_INFINITY;
  if (self->algo_ == nil) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  if (![((OrgGeogebraCommonKernelAlgosAlgoAngle *) nil_chk(self->algo_)) updateDrawInfoWithDoubleArray:self->m_ withDoubleArray:self->firstVec_ withOrgGeogebraCommonEuclidianDrawDrawAngle:self]) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  jdouble angSt = JavaLangMath_atan2WithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(self->firstVec_), 1), IOSDoubleArray_Get(self->firstVec_, 0));
  if (JavaLangDouble_isNaNWithDouble_(angSt) || JavaLangDouble_isInfiniteWithDouble_(angSt)) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  jdouble angExt = [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getRawAngle];
  angSt = [self getAngleStartWithDouble:angSt withDouble:angExt];
  switch ([[self->angle_ getAngleStyle] ordinal]) {
    case OrgGeogebraCommonKernelGeosGeoAngle_AngleStyle_UNBOUNDED:
    OrgGeogebraCommonMainApp_errorWithNSString_(@"shouldn't be drawable");
    break;
    case OrgGeogebraCommonKernelGeosGeoAngle_AngleStyle_NOTREFLEX:
    if (angExt > JavaLangMath_PI) {
      angSt += angExt;
      angExt = 2.0 * JavaLangMath_PI - angExt;
    }
    break;
    case OrgGeogebraCommonKernelGeosGeoAngle_AngleStyle_ISREFLEX:
    if (angExt < JavaLangMath_PI) {
      angSt += angExt;
      angExt = 2.0 * JavaLangMath_PI - angExt;
    }
    break;
  }
  jdouble as = JavaLangMath_toDegreesWithDouble_(angSt);
  jdouble ae = JavaLangMath_toDegreesWithDouble_(angExt);
  jint arcSize = JavaLangMath_minWithInt_withInt_(J2ObjCFpToInt(self->maxRadius_), [self->angle_ getArcSize]);
  jdouble r = arcSize * [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getInvXscale];
  self->show90degrees_ = ([self->view_ getRightAngleStyle] != OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_NONE && [self->angle_ isEmphasizeRightAngle] && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(angExt, OrgGeogebraCommonKernelKernel_PI_HALF));
  *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = IOSDoubleArray_Get(nil_chk(self->m_), 0);
  *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(self->m_, 1);
  [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
  self->drawDot_ = NO;
  if (self->show90degrees_) {
    {
      jdouble length;
      jdouble offset;
      jint diameter;
      jdouble radius;
      jdouble labelAngle;
      switch ([self->view_ getRightAngleStyle]) {
        case OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_SQUARE:
        if (self->square_ == nil) OrgGeogebraCommonEuclidianDrawDrawAngle_set_square_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
        else [self->square_ reset];
        length = arcSize * 0.7071067811865;
        [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->square_)) moveToWithFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 0) withFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 1)];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + length * JavaLangMath_cosWithDouble_(angSt)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - length * JavaLangMath_sinWithDouble_(angSt) * [self->view_ getScaleRatio])];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + arcSize * JavaLangMath_cosWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF / 2)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - arcSize * JavaLangMath_sinWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF / 2) * [self->view_ getScaleRatio])];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + length * JavaLangMath_cosWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - length * JavaLangMath_sinWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF) * [self->view_ getScaleRatio])];
        [self->square_ lineToWithFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 0) withFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 1)];
        OrgGeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, self->square_);
        break;
        case OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_L:
        if (self->square_ == nil) OrgGeogebraCommonEuclidianDrawDrawAngle_set_square_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
        else [self->square_ reset];
        length = arcSize * 0.7071067811865;
        offset = length * 0.4;
        [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->square_)) moveToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + length * JavaLangMath_cosWithDouble_(angSt) + offset * JavaLangMath_cosWithDouble_(angSt) + offset * JavaLangMath_cosWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - length * JavaLangMath_sinWithDouble_(angSt) * [self->view_ getScaleRatio] - offset * JavaLangMath_sinWithDouble_(angSt) - offset * JavaLangMath_sinWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF))];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + offset * JavaLangMath_cosWithDouble_(angSt) + offset * JavaLangMath_cosWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - offset * JavaLangMath_sinWithDouble_(angSt) - offset * JavaLangMath_sinWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF))];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + length * JavaLangMath_cosWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF) + offset * JavaLangMath_cosWithDouble_(angSt) + offset * JavaLangMath_cosWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - length * JavaLangMath_sinWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF) * [self->view_ getScaleRatio] - offset * JavaLangMath_sinWithDouble_(angSt) - offset * JavaLangMath_sinWithDouble_(angSt + OrgGeogebraCommonKernelKernel_PI_HALF))];
        OrgGeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, self->square_);
        break;
        case OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_DOT:
        self->drawDot_ = YES;
        if (self->dot90degree_ == nil) OrgGeogebraCommonEuclidianDrawDrawAngle_set_dot90degree_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DDouble]);
        diameter = 2 * self->geo_->lineThickness_;
        radius = r / 1.7;
        labelAngle = angSt + angExt / 2.0;
        *IOSDoubleArray_GetRef(self->coords_, 0) = IOSDoubleArray_Get(self->m_, 0) + radius * JavaLangMath_cosWithDouble_(labelAngle);
        *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(self->m_, 1) + radius * JavaLangMath_sinWithDouble_(labelAngle);
        [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
        [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->dot90degree_)) setFrameWithDouble:IOSDoubleArray_Get(self->coords_, 0) - self->geo_->lineThickness_ withDouble:IOSDoubleArray_Get(self->coords_, 1) - self->geo_->lineThickness_ withDouble:diameter withDouble:diameter];
        [((id<OrgGeogebraCommonAwtGArc2D>) nil_chk(self->drawArc_)) setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:OrgGeogebraCommonAwtGArc2D_PIE];
        OrgGeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->drawArc_]);
        break;
      }
    }
  }
  else {
    [((id<OrgGeogebraCommonAwtGArc2D>) nil_chk(self->drawArc_)) setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:OrgGeogebraCommonAwtGArc2D_PIE];
    OrgGeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->drawArc_]);
    jdouble rdiff;
    {
      IOSDoubleArray *n2;
      IOSDoubleArray *n;
      IOSDoubleArray *v;
      jdouble rotateangle;
      IOSDoubleArray *p1;
      IOSDoubleArray *p2;
      IOSDoubleArray *p3;
      jdouble size;
      switch (self->geo_->decorationType_) {
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_ARCS:
        rdiff = 4 + self->geo_->lineThickness_ / 2.0;
        r = (arcSize - rdiff) * [self->view_ getInvXscale];
        [((id<OrgGeogebraCommonAwtGArc2D>) nil_chk(self->decoArc_)) setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:OrgGeogebraCommonAwtGArc2D_OPEN];
        OrgGeogebraCommonEuclidianDrawDrawAngle_set_shapeArc1_(self, [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->decoArc_]);
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_ARCS:
        rdiff = 4 + self->geo_->lineThickness_ / 2.0;
        r = (arcSize - rdiff) * [self->view_ getInvXscale];
        [((id<OrgGeogebraCommonAwtGArc2D>) nil_chk(self->decoArc_)) setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:OrgGeogebraCommonAwtGArc2D_OPEN];
        OrgGeogebraCommonEuclidianDrawDrawAngle_set_shapeArc1_(self, [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->decoArc_]);
        r = (arcSize - 2 * rdiff) * [self->view_ getInvXscale];
        [self->decoArc_ setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:OrgGeogebraCommonAwtGArc2D_OPEN];
        OrgGeogebraCommonEuclidianDrawDrawAngle_set_shapeArc2_(self, [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->decoArc_]);
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ONE_TICK:
        *IOSDoubleArray_GetRef(nil_chk(self->angleTick_), 0) = -angSt - angExt / 2;
        OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 0), arcSize, 0);
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_TICKS:
        *IOSDoubleArray_GetRef(nil_chk(self->angleTick_), 0) = -angSt - 2 * angExt / 5;
        *IOSDoubleArray_GetRef(self->angleTick_, 1) = -angSt - 3 * angExt / 5;
        if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->angleTick_, 1) - IOSDoubleArray_Get(self->angleTick_, 0)) > OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_) {
          *IOSDoubleArray_GetRef(self->angleTick_, 0) = -angSt - angExt / 2 - OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_ / 2;
          *IOSDoubleArray_GetRef(self->angleTick_, 1) = -angSt - angExt / 2 + OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_ / 2;
        }
        OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 0), arcSize, 0);
        OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 1), arcSize, 1);
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_TICKS:
        *IOSDoubleArray_GetRef(nil_chk(self->angleTick_), 0) = -angSt - 3 * angExt / 8;
        *IOSDoubleArray_GetRef(self->angleTick_, 1) = -angSt - 5 * angExt / 8;
        if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->angleTick_, 1) - IOSDoubleArray_Get(self->angleTick_, 0)) > 2 * OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_) {
          *IOSDoubleArray_GetRef(self->angleTick_, 0) = -angSt - angExt / 2 - OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_;
          *IOSDoubleArray_GetRef(self->angleTick_, 1) = -angSt - angExt / 2 + OrgGeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_;
        }
        OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 0), arcSize, 0);
        OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 1), arcSize, 1);
        *IOSDoubleArray_GetRef(self->angleTick_, 0) = -angSt - angExt / 2;
        OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 0), arcSize, 2);
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_ANTICLOCKWISE:
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE:
        n2 = [IOSDoubleArray arrayWithLength:2];
        n = [IOSDoubleArray arrayWithLength:2];
        v = [IOSDoubleArray arrayWithLength:2];
        rotateangle = 0.25;
        if (self->geo_->decorationType_ == OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE) {
          *IOSDoubleArray_GetRef(n2, 0) = JavaLangMath_cosWithDouble_(angSt);
          *IOSDoubleArray_GetRef(n2, 1) = JavaLangMath_sinWithDouble_(angSt);
          *IOSDoubleArray_GetRef(n, 0) = JavaLangMath_cosWithDouble_(angSt + rotateangle);
          *IOSDoubleArray_GetRef(n, 1) = JavaLangMath_sinWithDouble_(angSt + rotateangle);
          *IOSDoubleArray_GetRef(v, 0) = -IOSDoubleArray_Get(n, 1);
          *IOSDoubleArray_GetRef(v, 1) = IOSDoubleArray_Get(n, 0);
        }
        else {
          *IOSDoubleArray_GetRef(n2, 0) = JavaLangMath_cosWithDouble_(angExt + angSt);
          *IOSDoubleArray_GetRef(n2, 1) = JavaLangMath_sinWithDouble_(angExt + angSt);
          *IOSDoubleArray_GetRef(n, 0) = JavaLangMath_cosWithDouble_(angExt + angSt - rotateangle);
          *IOSDoubleArray_GetRef(n, 1) = JavaLangMath_sinWithDouble_(angExt + angSt - rotateangle);
          *IOSDoubleArray_GetRef(v, 0) = IOSDoubleArray_Get(n, 1);
          *IOSDoubleArray_GetRef(v, 1) = -IOSDoubleArray_Get(n, 0);
        }
        p1 = [IOSDoubleArray arrayWithLength:2];
        p2 = [IOSDoubleArray arrayWithLength:2];
        p3 = [IOSDoubleArray arrayWithLength:2];
        rdiff = 4 + self->geo_->lineThickness_ / 2.0;
        r = (arcSize) * [self->view_ getInvXscale];
        *IOSDoubleArray_GetRef(p1, 0) = IOSDoubleArray_Get(self->m_, 0) + r * IOSDoubleArray_Get(n2, 0);
        *IOSDoubleArray_GetRef(p1, 1) = IOSDoubleArray_Get(self->m_, 1) + r * IOSDoubleArray_Get(n2, 1);
        size = 4.0 + self->geo_->lineThickness_ / 4.0;
        size = size * 0.9;
        *IOSDoubleArray_GetRef(p2, 0) = IOSDoubleArray_Get(p1, 0) + (1 * IOSDoubleArray_Get(n, 0) + 3 * IOSDoubleArray_Get(v, 0)) * size * [self->view_ getInvXscale];
        *IOSDoubleArray_GetRef(p2, 1) = IOSDoubleArray_Get(p1, 1) + (1 * IOSDoubleArray_Get(n, 1) + 3 * IOSDoubleArray_Get(v, 1)) * size * [self->view_ getInvYscale];
        *IOSDoubleArray_GetRef(p3, 0) = IOSDoubleArray_Get(p1, 0) + (-1 * IOSDoubleArray_Get(n, 0) + 3 * IOSDoubleArray_Get(v, 0)) * size * [self->view_ getInvXscale];
        *IOSDoubleArray_GetRef(p3, 1) = IOSDoubleArray_Get(p1, 1) + (-1 * IOSDoubleArray_Get(n, 1) + 3 * IOSDoubleArray_Get(v, 1)) * size * [self->view_ getInvYscale];
        [self->view_ toScreenCoordsWithDoubleArray:p1];
        [self->view_ toScreenCoordsWithDoubleArray:p2];
        [self->view_ toScreenCoordsWithDoubleArray:p3];
        [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->polygon_)) reset];
        [self->polygon_ moveToWithFloat:(jfloat) IOSDoubleArray_Get(p1, 0) withFloat:(jfloat) IOSDoubleArray_Get(p1, 1)];
        [self->polygon_ lineToWithFloat:(jfloat) IOSDoubleArray_Get(p2, 0) withFloat:(jfloat) IOSDoubleArray_Get(p2, 1)];
        [self->polygon_ lineToWithFloat:(jfloat) IOSDoubleArray_Get(p3, 0) withFloat:(jfloat) IOSDoubleArray_Get(p3, 1)];
        [self->polygon_ closePath];
        break;
      }
    }
  }
  if (![((id<OrgGeogebraCommonAwtGShape>) nil_chk(self->shape_DrawAngle_)) intersectsWithInt:0 withInt:0 withInt:[self->view_ getWidth] withInt:[self->view_ getHeight]]) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  if (self->labelVisible_) {
    jdouble radius = r / 1.7;
    jdouble labelAngle = angSt + angExt / 2.0;
    *IOSDoubleArray_GetRef(self->coords_, 0) = IOSDoubleArray_Get(self->m_, 0) + radius * JavaLangMath_cosWithDouble_(labelAngle);
    *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(self->m_, 1) + radius * JavaLangMath_sinWithDouble_(labelAngle);
    [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
    OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->angle_ getLabelDescription]);
    self->xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->coords_, 0) - 3));
    self->yLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->coords_, 1) + 5));
    if (![self addLabelOffset] && self->drawDot_) self->xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->coords_, 0) + 2 * self->geo_->lineThickness_));
  }
}

void OrgGeogebraCommonEuclidianDrawDrawAngle_drawWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawAngle *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  if (self->isVisible_) {
    if (!self->show90degrees_ || [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getRightAngleStyle] != OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_L) {
      [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:self->shape_DrawAngle_ withBoolean:NO];
    }
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->selStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:self->shape_DrawAngle_];
    }
    if (self->geo_->lineThickness_ > 0) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:self->shape_DrawAngle_];
    }
    if (self->show90degrees_) {
      switch ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getRightAngleStyle]) {
        case OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_DOT:
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) fillWithOrgGeogebraCommonAwtGShape:self->dot90degree_];
        break;
        default:
        ;
      }
    }
    else {
      switch (self->geo_->decorationType_) {
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_ARCS:
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawWithOrgGeogebraCommonAwtGShape:self->shapeArc1_];
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_ARCS:
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawWithOrgGeogebraCommonAwtGShape:self->shapeArc1_];
        [g2 drawWithOrgGeogebraCommonAwtGShape:self->shapeArc2_];
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ONE_TICK:
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->decoStroke_];
        [g2 drawWithOrgGeogebraCommonAwtGShape:IOSObjectArray_Get(nil_chk(self->tick_), 0)];
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_TICKS:
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->decoStroke_];
        [g2 drawWithOrgGeogebraCommonAwtGShape:IOSObjectArray_Get(nil_chk(self->tick_), 0)];
        [g2 drawWithOrgGeogebraCommonAwtGShape:IOSObjectArray_Get(self->tick_, 1)];
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_TICKS:
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->decoStroke_];
        [g2 drawWithOrgGeogebraCommonAwtGShape:IOSObjectArray_Get(nil_chk(self->tick_), 0)];
        [g2 drawWithOrgGeogebraCommonAwtGShape:IOSObjectArray_Get(self->tick_, 1)];
        [g2 drawWithOrgGeogebraCommonAwtGShape:IOSObjectArray_Get(self->tick_, 2)];
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_ANTICLOCKWISE:
        case OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE:
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->decoStroke_];
        [g2 fillWithOrgGeogebraCommonAwtGShape:self->polygon_];
        break;
      }
    }
    if (self->labelVisible_) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getLabelColor]];
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontAngle]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

void OrgGeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(OrgGeogebraCommonEuclidianDrawDrawAngle *self, jdouble angle1, jint radius, jint id_) {
  if (self->tick_ == nil) {
    OrgGeogebraCommonEuclidianDrawDrawAngle_setAndConsume_tick_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonAwtGLine2D_class_()]);
    for (jint i = 0; i < self->tick_->size_; i++) {
      IOSObjectArray_Set(self->tick_, i, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
    }
  }
  jdouble cos = JavaLangMath_cosWithDouble_(angle1);
  jdouble sin = JavaLangMath_sinWithDouble_(angle1);
  jdouble length = 2.5 + ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_))->lineThickness_ / 4.0;
  [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->tick_), id_))) setLineWithDouble:IOSDoubleArray_Get(nil_chk(self->coords_), 0) + (radius - length) * cos withDouble:IOSDoubleArray_Get(self->coords_, 1) + (radius - length) * sin * [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getScaleRatio] withDouble:IOSDoubleArray_Get(self->coords_, 0) + (radius + length) * cos withDouble:IOSDoubleArray_Get(self->coords_, 1) + (radius + length) * sin * [self->view_ getScaleRatio]];
}

void OrgGeogebraCommonEuclidianDrawDrawAngle_initPreview(OrgGeogebraCommonEuclidianDrawDrawAngle *self) {
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->previewTempPoints_), 0))) getConstruction];
  OrgGeogebraCommonKernelAlgosAlgoAnglePoints *algoPreview = [new_OrgGeogebraCommonKernelAlgosAlgoAnglePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2)) autorelease];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoPreview];
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, [algoPreview getAngle]);
  OrgGeogebraCommonEuclidianDrawDrawAngle_set_angle_(self, (OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoAngle class]));
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setEuclidianVisibleWithBoolean:YES];
  OrgGeogebraCommonEuclidianDrawDrawAngle_init__(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawAngle)
