//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawPolygon.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/draw/DrawPolygon.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/discrete/PolygonTriangulation.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/MyMath.h"

#define OrgGeogebraCommonEuclidianDrawDrawPolygon_FAN_DELTA 10

@interface OrgGeogebraCommonEuclidianDrawDrawPolygon () {
 @public
  OrgGeogebraCommonKernelGeosGeoPolygon *poly_;
  jboolean isVisible_, labelVisible_;
  OrgGeogebraCommonEuclidianGeneralPathClipped *gp_, *gpTriangularize_;
  IOSDoubleArray *coords_;
  JavaUtilArrayList *points_;
  IOSObjectArray *extraCoords_;
  OrgGeogebraCommonKernelDiscretePolygonTriangulation *pt_;
  IOSObjectArray *fanCoords_;
  jboolean fillShape_;
  OrgGeogebraCommonAwtGPoint2D *endPoint_;
}

- (void)calculateViewCorners;

- (void)createShape;

- (void)triangularize;

- (void)calculateCorners;

- (void)calculateBounds;

- (void)drawPolygonConvexWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)n
                    withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)vertices
                                                         withInt:(jint)length
                                                     withBoolean:(jboolean)reverse;

- (jboolean)isOutViewWithDoubleArray:(IOSDoubleArray *)c;

- (void)drawTriangleFanWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)n
                  withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)v
withOrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan:(OrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan *)triFan;

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsWithInt:(jint)i;

- (jboolean)addPointsToPathWithInt:(jint)length;

- (jboolean)isAllPointsOnScreen;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, poly_, OrgGeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, gp_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, gpTriangularize_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, points_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, extraCoords_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, pt_, OrgGeogebraCommonKernelDiscretePolygonTriangulation *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, fanCoords_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, endPoint_, OrgGeogebraCommonAwtGPoint2D *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawPolygon, FAN_DELTA, jint)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateViewCorners(OrgGeogebraCommonEuclidianDrawDrawPolygon *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPolygon_update(OrgGeogebraCommonEuclidianDrawDrawPolygon *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPolygon_createShape(OrgGeogebraCommonEuclidianDrawDrawPolygon *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateCorners(OrgGeogebraCommonEuclidianDrawDrawPolygon *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateBounds(OrgGeogebraCommonEuclidianDrawDrawPolygon *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPolygon_drawPolygonConvexWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_withBoolean_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, OrgGeogebraCommonKernelMatrixCoords *n, IOSObjectArray *vertices, jint length, jboolean reverse);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianDrawDrawPolygon_isOutViewWithDoubleArray_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, IOSDoubleArray *c);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPolygon_drawTriangleFanWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordsArray_withOrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, OrgGeogebraCommonKernelMatrixCoords *n, IOSObjectArray *v, OrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan *triFan);

__attribute__((unused)) static OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonEuclidianDrawDrawPolygon_getCoordsWithInt_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, jint i);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianDrawDrawPolygon_addPointsToPathWithInt_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, jint length);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPolygon_updatePreview(OrgGeogebraCommonEuclidianDrawDrawPolygon *self);

@implementation OrgGeogebraCommonEuclidianDrawDrawPolygon

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                      withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, view, poly);
  return self;
}

- (void)calculateViewCorners {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateViewCorners(self);
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_update(self);
}

- (void)createShape {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_createShape(self);
}

- (void)triangularize {
  [((OrgGeogebraCommonKernelDiscretePolygonTriangulation *) nil_chk(pt_)) clear];
  [pt_ setPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:poly_];
  OrgGeogebraCommonKernelMatrixCoords *n = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getMainDirection];
  OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateCorners(self);
  [pt_ setCornersWithOrgGeogebraCommonKernelMatrixCoordsArray:extraCoords_];
  @try {
    if ([pt_ updatePoints] > 2) {
      jint length = [poly_ getPointsLength];
      IOSObjectArray *vertices = [IOSObjectArray arrayWithLength:length + OrgGeogebraCommonKernelDiscretePolygonTriangulation_EXTRA_POINTS type:OrgGeogebraCommonKernelMatrixCoords_class_()];
      jint j = 0;
      for (jint i = 0; i < [poly_ getPointsLength]; i++) {
        IOSObjectArray_Set(vertices, i, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([poly_ getPointNDWithInt:i])) getCoords]);
        j++;
      }
      IOSObjectArray_Set(vertices, j, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([poly_ getPointNDWithInt:0])) getCoords]);
      j++;
      for (jint i = 0; i < OrgGeogebraCommonKernelDiscretePolygonTriangulation_CORNERS; i++) {
        IOSObjectArray_Set(vertices, j, IOSObjectArray_Get(nil_chk(extraCoords_), i));
        j++;
      }
      IOSObjectArray_Set(vertices, j, IOSObjectArray_Get(nil_chk(extraCoords_), 0));
      j++;
      for (jint i = 0; i < OrgGeogebraCommonKernelDiscretePolygonTriangulation_CORNERS; i++) {
        IOSObjectArray_Set(vertices, j, IOSObjectArray_Get(extraCoords_, 4 + i));
        j++;
      }
      IOSObjectArray_Set(vertices, j, IOSObjectArray_Get(extraCoords_, 4));
      j++;
      IOSObjectArray_Set(vertices, j, IOSObjectArray_Get(extraCoords_, 0));
      OrgGeogebraCommonKernelDiscretePolygonTriangulation_ConvexityEnum *convexity = [pt_ checkIsConvex];
      if (convexity != OrgGeogebraCommonKernelDiscretePolygonTriangulation_ConvexityEnum_get_NOT()) {
        jboolean reverse = [poly_ getReverseNormalForDrawing] ^ (convexity == OrgGeogebraCommonKernelDiscretePolygonTriangulation_ConvexityEnum_get_CLOCKWISE());
        OrgGeogebraCommonEuclidianDrawDrawPolygon_drawPolygonConvexWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_withBoolean_(self, n, vertices, [poly_ getPointsLength], reverse);
      }
      else {
        [pt_ setIntersections];
        [pt_ triangulate];
        IOSObjectArray *verticesWithIntersections = [pt_ getCompleteVerticesWithOrgGeogebraCommonKernelMatrixCoordsArray:vertices withOrgGeogebraCommonKernelMatrixCoordSys:[poly_ getCoordSys] withInt:[poly_ getPointsLength]];
        if (gpTriangularize_ == nil) OrgGeogebraCommonEuclidianDrawDrawPolygon_setAndConsume_gpTriangularize_(self, new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
        else [gpTriangularize_ reset];
        for (OrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan * __strong triFan in nil_chk([pt_ getTriangleFans])) {
          OrgGeogebraCommonEuclidianDrawDrawPolygon_drawTriangleFanWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordsArray_withOrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan_(self, n, verticesWithIntersections, triFan);
        }
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isInverseFill]) {
          [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]]];
          [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithOrgGeogebraCommonAwtGArea:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithOrgGeogebraCommonAwtGShape:gpTriangularize_]];
        }
        else {
          [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:gpTriangularize_]];
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    [e printStackTrace];
  }
}

- (void)calculateCorners {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateCorners(self);
}

- (void)calculateBounds {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateBounds(self);
}

- (void)drawPolygonConvexWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)n
                    withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)vertices
                                                         withInt:(jint)length
                                                     withBoolean:(jboolean)reverse {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_drawPolygonConvexWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_withBoolean_(self, n, vertices, length, reverse);
}

- (jboolean)isOutViewWithDoubleArray:(IOSDoubleArray *)c {
  return OrgGeogebraCommonEuclidianDrawDrawPolygon_isOutViewWithDoubleArray_(self, c);
}

- (void)drawTriangleFanWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)n
                  withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)v
withOrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan:(OrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan *)triFan {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_drawTriangleFanWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordsArray_withOrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan_(self, n, v, triFan);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsWithInt:(jint)i {
  return OrgGeogebraCommonEuclidianDrawDrawPolygon_getCoordsWithInt_(self, i);
}

- (jboolean)addPointsToPathWithInt:(jint)length {
  return OrgGeogebraCommonEuclidianDrawDrawPolygon_addPointsToPathWithInt_(self, length);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:(fillShape_ ? ((id) [self getShape]) : gp_) withBoolean:NO];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:gp_];
    }
    else if (![((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) wasInitLabelsCalled] && poly_->lineThickness_ > 0) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:gp_];
    }
    if (labelVisible_) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getLabelColor]];
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontPoint]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)updatePreview {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_updatePreview(self);
}

- (void)updateMousePosWithDouble:(jdouble)mouseRWx
                      withDouble:(jdouble)mouseRWy {
  jdouble xRW = mouseRWx;
  jdouble yRW = mouseRWy;
  if (isVisible_) {
    jint mx = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordXWithDouble:xRW];
    jint my = [view_ toScreenCoordYWithDouble:yRW];
    if ([((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) isAltDown]) {
      OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:[((JavaUtilArrayList *) nil_chk(points_)) size] - 1], [OrgGeogebraCommonKernelGeosGeoPoint class]);
      jdouble px = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_;
      jdouble py = p->inhomY_;
      if ([points_ size] > 1) {
        OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([view_ getKernel])) getConstruction];
        OrgGeogebraCommonKernelGeosGeoPoint *intersection = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons) autorelease];
        OrgGeogebraCommonKernelGeosGeoLine *l = [new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons) autorelease];
        OrgGeogebraCommonKernelGeosGeoLine *l2 = [new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons) autorelease];
        OrgGeogebraCommonKernelGeosGeoPoint *p2 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoPoint class]);
        jdouble px2 = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p2))->inhomX_;
        jdouble py2 = p2->inhomY_;
        jdouble nearestX = JavaLangDouble_MAX_VALUE;
        jdouble nearestY = JavaLangDouble_MAX_VALUE;
        jdouble dist = JavaLangDouble_MAX_VALUE;
        for (jdouble angle = 0; angle < 180; angle += 15) {
          if (angle == 90) {
            [l setCoordsWithDouble:1 withDouble:0 withDouble:-px];
          }
          else {
            jdouble gradient = JavaLangMath_tanWithDouble_(angle * JavaLangMath_PI / 180.0);
            [l setCoordsWithDouble:gradient withDouble:-1.0 withDouble:py - gradient * px];
          }
          for (jdouble ang2 = 0; ang2 < 180; ang2 += 15) {
            if (ang2 == angle) {
              continue;
            }
            else if (ang2 == 90) {
              [l2 setCoordsWithDouble:1.0 withDouble:0 withDouble:-px2];
            }
            else {
              jdouble gradient2 = JavaLangMath_tanWithDouble_(ang2 * JavaLangMath_PI / 180.0);
              [l2 setCoordsWithDouble:gradient2 withDouble:-1.0 withDouble:py2 - gradient2 * px2];
            }
            OrgGeogebraCommonKernelGeosGeoVec3D_crossWithOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_(l, l2, intersection);
            jdouble x1 = intersection->x_ / intersection->z_;
            jdouble y1 = intersection->y_ / intersection->z_;
            jdouble d = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x1 - xRW, y1 - yRW);
            if (d < dist) {
              nearestX = x1;
              nearestY = y1;
              dist = d;
            }
          }
        }
        xRW = nearestX;
        yRW = nearestY;
      }
      else {
        jdouble angle = JavaLangMath_atan2WithDouble_withDouble_(yRW - py, xRW - px) * 180 / JavaLangMath_PI;
        jdouble radius = JavaLangMath_sqrtWithDouble_((py - yRW) * (py - yRW) + (px - xRW) * (px - xRW));
        angle = JavaLangMath_roundWithDouble_(angle / 15) * 15;
        xRW = px + radius * JavaLangMath_cosWithDouble_(angle * JavaLangMath_PI / 180);
        yRW = py + radius * JavaLangMath_sinWithDouble_(angle * JavaLangMath_PI / 180);
      }
      mx = [view_ toScreenCoordXWithDouble:xRW];
      my = [view_ toScreenCoordYWithDouble:yRW];
      [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(endPoint_)) setXWithDouble:xRW];
      [endPoint_ setYWithDouble:yRW];
      [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithOrgGeogebraCommonAwtGPoint2D:endPoint_];
      [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) lineToWithDouble:mx withDouble:my];
    }
    else [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithOrgGeogebraCommonAwtGPoint2D_Double:nil];
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) lineToWithDouble:[view_ toScreenCoordXWithDouble:xRW] withDouble:[view_ toScreenCoordYWithDouble:yRW]];
  }
}

- (void)drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isInverseFill] ? ((id) [self getShape]) : gp_) withBoolean:NO];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:geo_];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithOrgGeogebraCommonAwtGShape:gp_];
  }
}

- (void)disposePreview {
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  id<OrgGeogebraCommonAwtGShape> t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isInverseFill] ? ((id) [self getShape]) : gp_;
  return t != nil && ([t containsWithInt:x withInt:y] || [t intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold]);
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return gp_ != nil && [gp_ getBounds] != nil && [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[gp_ getBounds]];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) getBounds];
}

- (id<OrgGeogebraCommonAwtGArea>)getShape {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isInverseFill] || [super getShape] != nil) return [super getShape];
  [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:gp_]];
  return [super getShape];
}

- (jboolean)isAllPointsOnScreen {
  if ([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getPoints] == nil) {
    return NO;
  }
  {
    IOSObjectArray *a__ = [poly_ getPoints];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = *b__++;
      jdouble x = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordXdWithDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) getInhomX]];
      jdouble y = [view_ toScreenCoordYdWithDouble:[p getInhomY]];
      if (x < 0 || x > [view_ getWidth] || y < 0 || y > [view_ getHeight]) {
        return NO;
      }
    }
  }
  return YES;
}

- (void)dealloc {
  RELEASE_(poly_);
  RELEASE_(gp_);
  RELEASE_(gpTriangularize_);
  RELEASE_(coords_);
  RELEASE_(points_);
  RELEASE_(extraCoords_);
  RELEASE_(pt_);
  RELEASE_(fanCoords_);
  RELEASE_(endPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoPolygon:", "DrawPolygon", NULL, 0x1, NULL, NULL },
    { "calculateViewCorners", NULL, "V", 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:", "DrawPolygon", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "createShape", NULL, "V", 0x2, NULL, NULL },
    { "triangularize", NULL, "V", 0x2, NULL, NULL },
    { "calculateCorners", NULL, "V", 0x12, NULL, NULL },
    { "calculateBounds", NULL, "V", 0x12, NULL, NULL },
    { "drawPolygonConvexWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoordsArray:withInt:withBoolean:", "drawPolygonConvex", "V", 0x2, NULL, NULL },
    { "isOutViewWithDoubleArray:", "isOutView", "Z", 0x2, NULL, NULL },
    { "drawTriangleFanWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoordsArray:withOrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan:", "drawTriangleFan", "V", 0x2, NULL, NULL },
    { "getCoordsWithInt:", "getCoords", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "addPointsToPathWithInt:", "addPointsToPath", "Z", 0x2, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "getShape", NULL, "Lorg.geogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "isAllPointsOnScreen", NULL, "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "poly_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "gpTriangularize_", NULL, 0x2, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "points_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "extraCoords_", NULL, 0x2, "[Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "pt_", NULL, 0x2, "Lorg.geogebra.common.kernel.discrete.PolygonTriangulation;", NULL, NULL,  },
    { "fanCoords_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "FAN_DELTA_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawPolygon_FAN_DELTA },
    { "fillShape_", NULL, 0x2, "Z", NULL, NULL,  },
    { "endPoint_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawPolygon = { 2, "DrawPolygon", "org.geogebra.common.euclidian.draw", NULL, 0x1, 25, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawPolygon;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoPolygon *poly) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_setAndConsume_pt_(self, new_OrgGeogebraCommonKernelDiscretePolygonTriangulation_init());
  self->fillShape_ = NO;
  OrgGeogebraCommonEuclidianDrawDrawPolygon_set_endPoint_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_set_poly_(self, poly);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, poly);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_setAndConsume_extraCoords_(self, [IOSObjectArray newArrayWithLength:8 type:OrgGeogebraCommonKernelMatrixCoords_class_()]);
  for (jint i = 0; i < 8; i++) {
    IOSObjectArray_SetAndConsume(self->extraCoords_, i, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_(0, 0));
  }
  OrgGeogebraCommonEuclidianDrawDrawPolygon_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawPolygon *new_OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoPolygon *poly) {
  OrgGeogebraCommonEuclidianDrawDrawPolygon *self = [OrgGeogebraCommonEuclidianDrawDrawPolygon alloc];
  OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, view, poly);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateViewCorners(OrgGeogebraCommonEuclidianDrawDrawPolygon *self) {
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(self->extraCoords_), 0))) setXWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXmin]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 0))) setYWithDouble:[self->view_ getYmin]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 1))) setXWithDouble:[self->view_ getXmax]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 1))) setYWithDouble:[self->view_ getYmin]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 2))) setXWithDouble:[self->view_ getXmax]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 2))) setYWithDouble:[self->view_ getYmax]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 3))) setXWithDouble:[self->view_ getXmin]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 3))) setYWithDouble:[self->view_ getYmax]];
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_setAndConsume_pt_(self, new_OrgGeogebraCommonKernelDiscretePolygonTriangulation_init());
  self->fillShape_ = NO;
  OrgGeogebraCommonEuclidianDrawDrawPolygon_set_endPoint_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_set_points_(self, points);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON]);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_updatePreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawPolygon *new_OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawDrawPolygon *self = [OrgGeogebraCommonEuclidianDrawDrawPolygon alloc];
  OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_update(OrgGeogebraCommonEuclidianDrawDrawPolygon *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (self->isVisible_) {
    self->labelVisible_ = [self->geo_ isLabelVisible];
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->poly_];
    self->isVisible_ = OrgGeogebraCommonEuclidianDrawDrawPolygon_addPointsToPathWithInt_(self, [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) getPointsLength]);
    if (!self->isVisible_) {
      return;
    }
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gp_)) closePath];
    self->fillShape_ = NO;
    if ([self->geo_ isInverseFill]) {
      OrgGeogebraCommonEuclidianDrawDrawPolygon_createShape(self);
      self->fillShape_ = YES;
    }
    if (![self->gp_ intersectsWithInt:0 withInt:0 withInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]] && ![self->geo_ isInverseFill]) {
      self->isVisible_ = NO;
    }
    if ([self->poly_ getTrace]) {
      self->isTracing__ = YES;
      id<OrgGeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
      if (g2 != nil) {
        [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:self->gp_ withBoolean:NO];
      }
    }
    else {
      if (self->isTracing__) {
        self->isTracing__ = NO;
      }
    }
  }
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_createShape(OrgGeogebraCommonEuclidianDrawDrawPolygon *self) {
  [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBoundingPath]]];
  [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithOrgGeogebraCommonAwtGArea:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithOrgGeogebraCommonAwtGShape:self->gp_]];
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateCorners(OrgGeogebraCommonEuclidianDrawDrawPolygon *self) {
  OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateViewCorners(self);
  OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateBounds(self);
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_calculateBounds(OrgGeogebraCommonEuclidianDrawDrawPolygon *self) {
  jdouble xmin = JavaLangDouble_MAX_VALUE;
  jdouble ymin = JavaLangDouble_MAX_VALUE;
  jdouble xmax = JavaLangDouble_MIN_VALUE;
  jdouble ymax = JavaLangDouble_MIN_VALUE;
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) getPointsLength]; i++) {
    jdouble x = [self->poly_ getPointXWithInt:i];
    jdouble y = [self->poly_ getPointYWithInt:i];
    if (x < xmin) {
      xmin = x;
    }
    if (x > xmax) {
      xmax = x;
    }
    if (y < ymin) {
      ymin = y;
    }
    if (y > ymax) {
      ymax = y;
    }
  }
  xmin = xmin < [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(self->extraCoords_), 0))) getX] ? xmin : [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 0))) getX];
  xmax = xmax > [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 2))) getX] ? xmax : [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 2))) getX];
  ymin = ymin < [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 0))) getY] ? ymin : [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 0))) getY];
  ymax = ymax > [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 2))) getY] ? ymax : [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 2))) getY];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 4))) setXWithDouble:xmin];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 4))) setYWithDouble:ymin];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 5))) setXWithDouble:xmax];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 5))) setYWithDouble:ymin];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 6))) setXWithDouble:xmax];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 6))) setYWithDouble:ymax];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 7))) setXWithDouble:xmin];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->extraCoords_, 7))) setYWithDouble:ymax];
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_drawPolygonConvexWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_withBoolean_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, OrgGeogebraCommonKernelMatrixCoords *n, IOSObjectArray *vertices, jint length, jboolean reverse) {
  OrgGeogebraCommonMainApp_debugWithNSString_(@"[POLY] drawPolygonConvex");
  OrgGeogebraCommonKernelMatrixCoords *coordsApex = IOSObjectArray_Get(nil_chk(vertices), 0);
  *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coordsApex)) getX];
  *IOSDoubleArray_GetRef(self->coords_, 1) = [coordsApex getY];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords_];
  jdouble startX = IOSDoubleArray_Get(self->coords_, 0);
  jdouble startY = IOSDoubleArray_Get(self->coords_, 1);
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gpTriangularize_)) moveToWithDouble:IOSDoubleArray_Get(self->coords_, 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
  for (jint i = length - 1; i < 0; i--) {
    OrgGeogebraCommonKernelMatrixCoords *coord = IOSObjectArray_Get(vertices, i);
    *IOSDoubleArray_GetRef(self->coords_, 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coord)) getX];
    *IOSDoubleArray_GetRef(self->coords_, 1) = [coord getY];
    [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
    [self->gpTriangularize_ lineToWithDouble:IOSDoubleArray_Get(self->coords_, 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
  }
  [self->gpTriangularize_ moveToWithDouble:startX withDouble:startY];
}

jboolean OrgGeogebraCommonEuclidianDrawDrawPolygon_isOutViewWithDoubleArray_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, IOSDoubleArray *c) {
  return IOSDoubleArray_Get(nil_chk(c), 0) < -OrgGeogebraCommonEuclidianDrawDrawPolygon_FAN_DELTA || IOSDoubleArray_Get(c, 1) < -OrgGeogebraCommonEuclidianDrawDrawPolygon_FAN_DELTA || IOSDoubleArray_Get(c, 0) > [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] + OrgGeogebraCommonEuclidianDrawDrawPolygon_FAN_DELTA || IOSDoubleArray_Get(c, 1) > [self->view_ getHeight] + OrgGeogebraCommonEuclidianDrawDrawPolygon_FAN_DELTA;
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_drawTriangleFanWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordsArray_withOrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, OrgGeogebraCommonKernelMatrixCoords *n, IOSObjectArray *v, OrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan *triFan) {
  OrgGeogebraCommonMainApp_debugWithNSString_(@"[POLY] drawTriangleFan");
  jint size = [((OrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan *) nil_chk(triFan)) size];
  if (self->fanCoords_ == nil || self->fanCoords_->size_ < size) {
    OrgGeogebraCommonEuclidianDrawDrawPolygon_setAndConsume_fanCoords_(self, [IOSObjectArray newArrayWithLength:size type:IOSClass_doubleArray(1)]);
  }
  OrgGeogebraCommonKernelMatrixCoords *coordsApex = IOSObjectArray_Get(nil_chk(v), [triFan getApexPoint]);
  *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coordsApex)) getX];
  *IOSDoubleArray_GetRef(self->coords_, 1) = [coordsApex getY];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords_];
  if (OrgGeogebraCommonEuclidianDrawDrawPolygon_isOutViewWithDoubleArray_(self, self->coords_)) {
    return;
  }
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelMatrixCoords *coord = IOSObjectArray_Get(v, [triFan getVertexIndexWithInt:i]);
    if (IOSObjectArray_Get(nil_chk(self->fanCoords_), i) == nil) {
      IOSObjectArray_SetAndConsume(self->fanCoords_, i, [IOSDoubleArray newArrayWithLength:2]);
    }
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->fanCoords_, i)), 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coord)) getX];
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->fanCoords_, i)), 1) = [coord getY];
    [self->view_ toScreenCoordsWithDoubleArray:IOSObjectArray_Get(self->fanCoords_, i)];
    if (OrgGeogebraCommonEuclidianDrawDrawPolygon_isOutViewWithDoubleArray_(self, IOSObjectArray_Get(self->fanCoords_, i))) {
      return;
    }
  }
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gpTriangularize_)) moveToWithDouble:IOSDoubleArray_Get(self->coords_, 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
  for (jint i = 0; i < size; i++) {
    [self->gpTriangularize_ lineToWithDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->fanCoords_), i)), 0) withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->fanCoords_, i)), 1)];
  }
  [self->gpTriangularize_ lineToWithDouble:IOSDoubleArray_Get(self->coords_, 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
}

OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonEuclidianDrawDrawPolygon_getCoordsWithInt_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, jint i) {
  if (self->poly_ != nil) {
    return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[self->poly_ getPoint3DWithInt:i]];
  }
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((JavaUtilArrayList *) nil_chk(self->points_)) getWithInt:i])) getInhomCoordsInD3]];
}

jboolean OrgGeogebraCommonEuclidianDrawDrawPolygon_addPointsToPathWithInt_(OrgGeogebraCommonEuclidianDrawDrawPolygon *self, jint length) {
  if (self->gp_ == nil) OrgGeogebraCommonEuclidianDrawDrawPolygon_setAndConsume_gp_(self, new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
  else [self->gp_ reset];
  if (length <= 0) return NO;
  OrgGeogebraCommonKernelMatrixCoords *v = OrgGeogebraCommonEuclidianDrawDrawPolygon_getCoordsWithInt_(self, 0);
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getZ])) return NO;
  *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = [v getX];
  *IOSDoubleArray_GetRef(self->coords_, 1) = [v getY];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords_];
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gp_)) moveToWithDouble:IOSDoubleArray_Get(self->coords_, 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
  jdouble xsum = IOSDoubleArray_Get(self->coords_, 0);
  jdouble ysum = IOSDoubleArray_Get(self->coords_, 1);
  for (jint i = 1; i < length; i++) {
    v = OrgGeogebraCommonEuclidianDrawDrawPolygon_getCoordsWithInt_(self, i);
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getZ])) {
      return NO;
    }
    *IOSDoubleArray_GetRef(self->coords_, 0) = [v getX];
    *IOSDoubleArray_GetRef(self->coords_, 1) = [v getY];
    [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
    if (self->labelVisible_) {
      xsum += IOSDoubleArray_Get(self->coords_, 0);
      ysum += IOSDoubleArray_Get(self->coords_, 1);
    }
    [self->gp_ lineToWithDouble:IOSDoubleArray_Get(self->coords_, 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
  }
  if (self->labelVisible_) {
    OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getLabelDescription]);
    self->xLabel_ = J2ObjCFpToInt((xsum / length));
    self->yLabel_ = J2ObjCFpToInt((ysum / length));
    [self addLabelOffset];
  }
  return YES;
}

void OrgGeogebraCommonEuclidianDrawDrawPolygon_updatePreview(OrgGeogebraCommonEuclidianDrawDrawPolygon *self) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->points_)) size];
  self->isVisible_ = (size > 0);
  if (self->isVisible_) {
    OrgGeogebraCommonEuclidianDrawDrawPolygon_addPointsToPathWithInt_(self, size);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawPolygon)
