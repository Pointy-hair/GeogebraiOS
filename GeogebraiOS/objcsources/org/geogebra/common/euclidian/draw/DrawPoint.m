//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/draw/DrawPoint.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GEllipse2DDouble.h"
#include "org/geogebra/common/awt/GEllipse2DFloat.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GLine2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawConic.h"
#include "org/geogebra/common/euclidian/draw/DrawConicPart.h"
#include "org/geogebra/common/euclidian/draw/DrawLine.h"
#include "org/geogebra/common/euclidian/draw/DrawParametricCurve.h"
#include "org/geogebra/common/euclidian/draw/DrawPoint.h"
#include "org/geogebra/common/euclidian/draw/DrawRay.h"
#include "org/geogebra/common/euclidian/draw/DrawSegment.h"
#include "org/geogebra/common/euclidian/event/PointerEventType.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectAbstract.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/GeoClass.h"

#define OrgGeogebraCommonEuclidianDrawDrawPoint_SELECTION_RADIUS_MIN 12

@interface OrgGeogebraCommonEuclidianDrawDrawPoint () {
 @public
  jint HIGHLIGHT_OFFSET_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> P_;
  jint diameter_, hightlightDiameter_, pointSize_;
  jboolean isVisible_, labelVisible_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> circle_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> circleHighlight_;
  id<OrgGeogebraCommonAwtGLine2D> line1_, line2_, line3_, line4_;
  id<OrgGeogebraCommonAwtGGeneralPath> gp_;
  jboolean isPreview_;
  IOSDoubleArray *coords_;
  IOSDoubleArray *coords1_;
  OrgGeogebraCommonEuclidianDrawable *drawable_;
}

- (void)updateDiameter;

- (void)drawClippedSectionWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo2
                                withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2;

+ (id<OrgGeogebraCommonAwtGBasicStroke>)getEmptyStrokeWithInt:(jint)pointSize;

+ (id<OrgGeogebraCommonAwtGBasicStroke>)getFillStrokeWithInt:(jint)pointSize;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, P_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, circle_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, circleHighlight_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, line1_, id<OrgGeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, line2_, id<OrgGeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, line3_, id<OrgGeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, line4_, id<OrgGeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, gp_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, coords1_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, drawable_, OrgGeogebraCommonEuclidianDrawable *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, SELECTION_RADIUS_MIN, jint)

static id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianDrawDrawPoint_borderStroke_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, borderStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, borderStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)

static IOSObjectArray *OrgGeogebraCommonEuclidianDrawDrawPoint_fillStrokes_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, fillStrokes_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, fillStrokes_, IOSObjectArray *)

static IOSObjectArray *OrgGeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, emptyStrokes_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawPoint, emptyStrokes_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPoint_update(OrgGeogebraCommonEuclidianDrawDrawPoint *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPoint_updateWithDoubleArray_(OrgGeogebraCommonEuclidianDrawDrawPoint *self, IOSDoubleArray *coords2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPoint_updateDiameter(OrgGeogebraCommonEuclidianDrawDrawPoint *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawPoint *self, OrgGeogebraCommonKernelGeosGeoElement *geo2, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawPoint_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawPoint *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(jint pointSize);

__attribute__((unused)) static id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianDrawDrawPoint_getFillStrokeWithInt_(jint pointSize);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonEuclidianDrawDrawPoint)

@implementation OrgGeogebraCommonEuclidianDrawDrawPoint

+ (jint)getSelectionThresholdWithInt:(jint)threshold {
  return OrgGeogebraCommonEuclidianDrawDrawPoint_getSelectionThresholdWithInt_(threshold);
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, view, P);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                    withBoolean:(jboolean)isPreview {
  OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, view, P, isPreview);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawPoint_update(self);
}

- (void)updateWithDoubleArray:(IOSDoubleArray *)coords2 {
  OrgGeogebraCommonEuclidianDrawDrawPoint_updateWithDoubleArray_(self, coords2);
}

- (void)updateDiameter {
  OrgGeogebraCommonEuclidianDrawDrawPoint_updateDiameter(self);
}

- (void)drawClippedSectionWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo2
                                withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonAwtGGraphics2D_(self, geo2, g2);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 fillWithOrgGeogebraCommonAwtGShape:circleHighlight_];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawPoint_borderStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:circleHighlight_];
    }
    if ([geo_ getShowTrimmedIntersectionLines]) {
      OrgGeogebraCommonKernelAlgosAlgoElement *algo = [geo_ getParentAlgorithm];
      if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoIntersectAbstract class]]) {
        IOSObjectArray *geos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
        OrgGeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonAwtGGraphics2D_(self, IOSObjectArray_Get(nil_chk(geos), 0), g2);
        if (geos->size_ > 1) OrgGeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonAwtGGraphics2D_(self, IOSObjectArray_Get(geos, 1), g2);
      }
    }
    jint pointStyle = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getPointStyle];
    if (pointStyle == -1) pointStyle = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
    switch (pointStyle) {
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_PLUS:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS:
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(pointSize_)];
      [g2 drawWithOrgGeogebraCommonAwtGShape:line1_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:line2_];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_EMPTY_DIAMOND:
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(pointSize_)];
      [g2 drawWithOrgGeogebraCommonAwtGShape:line1_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:line2_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:line3_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:line4_];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_SOUTH:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_EAST:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST:
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawPoint_getFillStrokeWithInt_(pointSize_)];
      [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
      [g2 fillWithOrgGeogebraCommonAwtGShape:gp_];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE:
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(pointSize_)];
      [g2 drawWithOrgGeogebraCommonAwtGShape:circle_];
      break;
      default:
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 fillWithOrgGeogebraCommonAwtGShape:circle_];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:OrgGeogebraCommonAwtGColor_get_BLACK_()];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawPoint_borderStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:circle_];
    }
    if (labelVisible_) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontPoint]];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawPoint_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  jint r = OrgGeogebraCommonEuclidianDrawDrawPoint_getSelectionThresholdWithInt_(hitThreshold);
  jdouble dx = IOSDoubleArray_Get(nil_chk(coords_), 0) - x;
  jdouble dy = IOSDoubleArray_Get(coords_, 1) - y;
  return dx < r && dx > -r && dx * dx + dy * dy <= r * r;
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(circle_)) getBounds]];
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(circle_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible]) {
    return nil;
  }
  jint selRadius = pointSize_ + HIGHLIGHT_OFFSET_;
  jint minRadius = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()] + OrgGeogebraCommonEuclidianDrawDrawPoint_SELECTION_RADIUS_MIN;
  if (selRadius < minRadius) {
    selRadius = minRadius;
  }
  return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(coords_), 0)) - selRadius withInt:J2ObjCFpToInt(IOSDoubleArray_Get(coords_, 1)) - selRadius withInt:2 * selRadius withInt:2 * selRadius];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geo_ = geo;
}

+ (id<OrgGeogebraCommonAwtGBasicStroke>)getEmptyStrokeWithInt:(jint)pointSize {
  return OrgGeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(pointSize);
}

+ (id<OrgGeogebraCommonAwtGBasicStroke>)getFillStrokeWithInt:(jint)pointSize {
  return OrgGeogebraCommonEuclidianDrawDrawPoint_getFillStrokeWithInt_(pointSize);
}

- (void)setPointStyleWithInt:(jint)pointType {
  if (pointType == [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointStyle]) {
    return;
  }
  [P_ setPointStyleWithInt:pointType];
  OrgGeogebraCommonEuclidianDrawDrawPoint_update(self);
}

- (id<OrgGeogebraCommonAwtGArea>)getDot {
  return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:self->circle_];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonEuclidianDrawDrawPoint class]) {
    OrgGeogebraCommonEuclidianDrawDrawPoint_borderStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getDefaultStroke();
    OrgGeogebraCommonEuclidianDrawDrawPoint_fillStrokes_ = [IOSObjectArray newArrayWithLength:10 type:OrgGeogebraCommonAwtGBasicStroke_class_()];
    OrgGeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_ = [IOSObjectArray newArrayWithLength:10 type:OrgGeogebraCommonAwtGBasicStroke_class_()];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonEuclidianDrawDrawPoint)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSelectionThresholdWithInt:", "getSelectionThreshold", "I", 0x19, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "DrawPoint", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "DrawPoint", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateWithDoubleArray:", "update", "V", 0x11, NULL, NULL },
    { "updateDiameter", NULL, "V", 0x2, NULL, NULL },
    { "drawClippedSectionWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonAwtGGraphics2D:", "drawClippedSection", "V", 0x2, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "getEmptyStrokeWithInt:", "getEmptyStroke", "Lorg.geogebra.common.awt.GBasicStroke;", 0x1a, NULL, NULL },
    { "getFillStrokeWithInt:", "getFillStroke", "Lorg.geogebra.common.awt.GBasicStroke;", 0x1a, NULL, NULL },
    { "setPointStyleWithInt:", "setPointStyle", "V", 0x1, NULL, NULL },
    { "getDot", NULL, "Lorg.geogebra.common.awt.GArea;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HIGHLIGHT_OFFSET_", NULL, 0x2, "I", NULL, NULL,  },
    { "SELECTION_RADIUS_MIN_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawPoint_SELECTION_RADIUS_MIN },
    { "P_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "diameter_", NULL, 0x2, "I", NULL, NULL,  },
    { "hightlightDiameter_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "circleHighlight_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "line1_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "line2_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "line3_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "line4_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "borderStroke_", NULL, 0xa, "Lorg.geogebra.common.awt.GBasicStroke;", &OrgGeogebraCommonEuclidianDrawDrawPoint_borderStroke_, NULL,  },
    { "fillStrokes_", NULL, 0xa, "[Lorg.geogebra.common.awt.GBasicStroke;", &OrgGeogebraCommonEuclidianDrawDrawPoint_fillStrokes_, NULL,  },
    { "emptyStrokes_", NULL, 0xa, "[Lorg.geogebra.common.awt.GBasicStroke;", &OrgGeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_, NULL,  },
    { "isPreview_", NULL, 0x2, "Z", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coords1_", NULL, 0x2, "[D", NULL, NULL,  },
    { "drawable_", NULL, 0x2, "Lorg.geogebra.common.euclidian.Drawable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawPoint = { 2, "DrawPoint", "org.geogebra.common.euclidian.draw", NULL, 0x11, 19, methods, 22, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawPoint;
}

@end

jint OrgGeogebraCommonEuclidianDrawDrawPoint_getSelectionThresholdWithInt_(jint threshold) {
  OrgGeogebraCommonEuclidianDrawDrawPoint_initialize();
  return threshold + OrgGeogebraCommonEuclidianDrawDrawPoint_SELECTION_RADIUS_MIN;
}

void OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonEuclidianDrawDrawPoint *self, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P) {
  (void) OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, view, P, NO);
}

OrgGeogebraCommonEuclidianDrawDrawPoint *new_OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P) {
  OrgGeogebraCommonEuclidianDrawDrawPoint *self = [OrgGeogebraCommonEuclidianDrawDrawPoint alloc];
  OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, view, P);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(OrgGeogebraCommonEuclidianDrawDrawPoint *self, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, jboolean isPreview) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->circle_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DDouble];
  self->circleHighlight_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble];
  self->gp_ = nil;
  self->coords1_ = [IOSDoubleArray newArrayWithLength:2];
  self->view_ = view;
  self->P_ = P;
  self->geo_ = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class]);
  self->isPreview_ = isPreview;
  self->coords_ = [IOSDoubleArray newArrayWithLength:2];
  OrgGeogebraCommonEuclidianDrawDrawPoint_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawPoint *new_OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, jboolean isPreview) {
  OrgGeogebraCommonEuclidianDrawDrawPoint *self = [OrgGeogebraCommonEuclidianDrawDrawPoint alloc];
  OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, view, P, isPreview);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawPoint_update(OrgGeogebraCommonEuclidianDrawDrawPoint *self) {
  if (self->gp_ != nil) [self->gp_ reset];
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (self->isPreview_) {
    OrgGeogebraCommonKernelMatrixCoords *p = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getInhomCoordsInD2];
    *IOSDoubleArray_GetRef(nil_chk(self->coords1_), 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX];
    *IOSDoubleArray_GetRef(self->coords1_, 1) = [p getY];
  }
  else {
    OrgGeogebraCommonKernelMatrixCoords *p = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getInhomCoordsInD3]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getZ])) {
      self->isVisible_ = NO;
    }
    else {
      *IOSDoubleArray_GetRef(nil_chk(self->coords1_), 0) = [p getX];
      *IOSDoubleArray_GetRef(self->coords1_, 1) = [p getY];
    }
  }
  if (!self->isVisible_) return;
  OrgGeogebraCommonEuclidianDrawDrawPoint_updateWithDoubleArray_(self, self->coords1_);
}

void OrgGeogebraCommonEuclidianDrawDrawPoint_updateWithDoubleArray_(OrgGeogebraCommonEuclidianDrawDrawPoint *self, IOSDoubleArray *coords2) {
  self->isVisible_ = YES;
  self->labelVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isLabelVisible];
  self->coords_ = coords2;
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords_];
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(self->coords_), 0)) || JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(self->coords_, 1))) {
    self->isVisible_ = NO;
  }
  else if (IOSDoubleArray_Get(self->coords_, 0) > [self->view_ getWidth] + [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointSize] || IOSDoubleArray_Get(self->coords_, 0) < -[self->P_ getPointSize] || IOSDoubleArray_Get(self->coords_, 1) > [self->view_ getHeight] + [self->P_ getPointSize] || IOSDoubleArray_Get(self->coords_, 1) < -[self->P_ getPointSize]) {
    self->isVisible_ = NO;
  }
  if (self->pointSize_ != [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointSize]) {
    OrgGeogebraCommonEuclidianDrawDrawPoint_updateDiameter(self);
  }
  jdouble xUL = (IOSDoubleArray_Get(self->coords_, 0) - self->pointSize_);
  jdouble yUL = (IOSDoubleArray_Get(self->coords_, 1) - self->pointSize_);
  jint pointStyle = [self->P_ getPointStyle];
  if (pointStyle == -1) pointStyle = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
  jdouble root3over2;
  {
    jdouble xR;
    jdouble yB;
    jdouble direction;
    switch (pointStyle) {
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND:
      xR = IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_;
      yB = IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_;
      if (self->gp_ == nil) {
        self->gp_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
      }
      [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) moveToWithFloat:(jfloat) (xUL + xR) / 2 withFloat:(jfloat) yUL];
      [self->gp_ lineToWithFloat:(jfloat) xUL withFloat:(jfloat) (yB + yUL) / 2];
      [self->gp_ lineToWithFloat:(jfloat) (xUL + xR) / 2 withFloat:(jfloat) yB];
      [self->gp_ lineToWithFloat:(jfloat) xR withFloat:(jfloat) (yB + yUL) / 2];
      [self->gp_ closePath];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_SOUTH:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH:
      direction = 1.0;
      if (pointStyle == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH) direction = -1.0;
      if (self->gp_ == nil) {
        self->gp_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
      }
      root3over2 = JavaLangMath_sqrtWithDouble_(3.0) / 2.0;
      [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) moveToWithFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 0) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) + direction * self->pointSize_)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_ * root3over2) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - direction * self->pointSize_ / 2)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) - self->pointSize_ * root3over2) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - direction * self->pointSize_ / 2)];
      [self->gp_ lineToWithFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 0) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) + direction * self->pointSize_)];
      [self->gp_ closePath];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_EAST:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST:
      direction = 1.0;
      if (pointStyle == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST) direction = -1.0;
      if (self->gp_ == nil) {
        self->gp_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
      }
      root3over2 = JavaLangMath_sqrtWithDouble_(3.0) / 2.0;
      [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) moveToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + direction * self->pointSize_) withFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 1)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) - direction * self->pointSize_ / 2) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_ * root3over2)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) - direction * self->pointSize_ / 2) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - self->pointSize_ * root3over2)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + direction * self->pointSize_) withFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 1)];
      [self->gp_ closePath];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_EMPTY_DIAMOND:
      xR = IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_;
      yB = IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_;
      if (self->line1_ == nil) {
        self->line1_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D];
        self->line2_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D];
      }
      if (self->line3_ == nil) {
        self->line3_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D];
        self->line4_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D];
      }
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line1_)) setLineWithDouble:(xUL + xR) / 2 withDouble:yUL withDouble:xUL withDouble:(yB + yUL) / 2];
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line2_)) setLineWithDouble:xUL withDouble:(yB + yUL) / 2 withDouble:(xUL + xR) / 2 withDouble:yB];
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line3_)) setLineWithDouble:(xUL + xR) / 2 withDouble:yB withDouble:xR withDouble:(yB + yUL) / 2];
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line4_)) setLineWithDouble:xR withDouble:(yB + yUL) / 2 withDouble:(xUL + xR) / 2 withDouble:yUL];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_PLUS:
      xR = IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_;
      yB = IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_;
      if (self->line1_ == nil) {
        self->line1_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D];
        self->line2_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D];
      }
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line1_)) setLineWithDouble:(xUL + xR) / 2 withDouble:yUL withDouble:(xUL + xR) / 2 withDouble:yB];
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line2_)) setLineWithDouble:xUL withDouble:(yB + yUL) / 2 withDouble:xR withDouble:(yB + yUL) / 2];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS:
      xR = IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_;
      yB = IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_;
      if (self->line1_ == nil) {
        self->line1_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D];
        self->line2_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D];
      }
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line1_)) setLineWithDouble:xUL withDouble:yUL withDouble:xR withDouble:yB];
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line2_)) setLineWithDouble:xUL withDouble:yB withDouble:xR withDouble:yUL];
      break;
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE:
      break;
    }
  }
  [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circle_)) setFrameWithDouble:xUL withDouble:yUL withDouble:self->diameter_ withDouble:self->diameter_];
  [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circleHighlight_)) setFrameWithDouble:xUL - self->HIGHLIGHT_OFFSET_ withDouble:yUL - self->HIGHLIGHT_OFFSET_ withDouble:self->hightlightDiameter_ withDouble:self->hightlightDiameter_];
  if ([self->P_ getTrace]) {
    self->isTracing__ = YES;
    id<OrgGeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
    if (g2 != nil) OrgGeogebraCommonEuclidianDrawDrawPoint_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
  if (self->isVisible_ && self->labelVisible_) {
    self->labelDesc_ = [self->geo_ getLabelDescription];
    self->xLabel_ = (jint) JavaLangMath_roundWithDouble_(IOSDoubleArray_Get(self->coords_, 0) + 4);
    self->yLabel_ = (jint) JavaLangMath_roundWithDouble_(yUL - self->pointSize_);
    [self addLabelOffsetEnsureOnScreen];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawPoint_updateDiameter(OrgGeogebraCommonEuclidianDrawDrawPoint *self) {
  self->pointSize_ = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointSize];
  self->diameter_ = 2 * self->pointSize_;
  self->HIGHLIGHT_OFFSET_ = self->pointSize_ / 2 + 1;
  self->hightlightDiameter_ = self->diameter_ + 2 * self->HIGHLIGHT_OFFSET_;
}

void OrgGeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawPoint *self, OrgGeogebraCommonKernelGeosGeoElement *geo2, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) getGeoClassType] ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_LINE:
    self->drawable_ = new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->view_, (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo2, [OrgGeogebraCommonKernelGeosGeoLine class]));
    break;
    case OrgGeogebraCommonPluginGeoClass_SEGMENT:
    self->drawable_ = new_OrgGeogebraCommonEuclidianDrawDrawSegment_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->view_, (OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(geo2, [OrgGeogebraCommonKernelGeosGeoSegment class]));
    break;
    case OrgGeogebraCommonPluginGeoClass_RAY:
    self->drawable_ = new_OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->view_, (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo2, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)));
    break;
    case OrgGeogebraCommonPluginGeoClass_CONIC:
    self->drawable_ = new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self->view_, (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(geo2, [OrgGeogebraCommonKernelGeosGeoConic class]), NO);
    break;
    case OrgGeogebraCommonPluginGeoClass_FUNCTION:
    self->drawable_ = new_OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(self->view_, (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo2, [OrgGeogebraCommonKernelGeosGeoFunction class]));
    break;
    case OrgGeogebraCommonPluginGeoClass_AXIS:
    self->drawable_ = nil;
    break;
    case OrgGeogebraCommonPluginGeoClass_CONICPART:
    self->drawable_ = new_OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self->view_, (OrgGeogebraCommonKernelGeosGeoConicPart *) check_class_cast(geo2, [OrgGeogebraCommonKernelGeosGeoConicPart class]));
    break;
    default:
    self->drawable_ = nil;
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"unsupported type for restricted drawing ", [geo2 getGeoClassType]));
  }
  if (self->drawable_ != nil) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getInhomCoordsWithDoubleArray:self->coords1_];
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords1_];
    id<OrgGeogebraCommonAwtGEllipse2DFloat> circleClip = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DFloatWithInt:J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(self->coords1_), 0)) - 30 withInt:J2ObjCFpToInt(IOSDoubleArray_Get(self->coords1_, 1)) - 30 withInt:60 withInt:60];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) clipWithOrgGeogebraCommonAwtGShape:circleClip];
    [geo2 forceEuclidianVisibleWithBoolean:YES];
    [self->drawable_ update];
    [self->drawable_ drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
    [geo2 forceEuclidianVisibleWithBoolean:NO];
    [g2 setClipWithOrgGeogebraCommonAwtGShape:nil];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawPoint_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawPoint *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getObjectColor]];
  jint pointStyle = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointStyle];
  switch (pointStyle) {
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE:
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(self->pointSize_)];
    [g2 drawWithOrgGeogebraCommonAwtGShape:self->circle_];
    break;
    case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS:
    default:
    [g2 fillWithOrgGeogebraCommonAwtGShape:self->circle_];
  }
}

id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(jint pointSize) {
  OrgGeogebraCommonEuclidianDrawDrawPoint_initialize();
  if (pointSize > 9) return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeJoinMitreWithFloat:pointSize / 2.0f];
  if (IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_), pointSize) == nil) (void) IOSObjectArray_Set(OrgGeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_, pointSize, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeJoinMitreWithFloat:pointSize / 2.0f]);
  return IOSObjectArray_Get(OrgGeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_, pointSize);
}

id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianDrawDrawPoint_getFillStrokeWithInt_(jint pointSize) {
  OrgGeogebraCommonEuclidianDrawDrawPoint_initialize();
  if (pointSize > 9) return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeWithFloat:pointSize / 2.0f];
  if (IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianDrawDrawPoint_fillStrokes_), pointSize) == nil) (void) IOSObjectArray_Set(OrgGeogebraCommonEuclidianDrawDrawPoint_fillStrokes_, pointSize, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeWithFloat:pointSize / 2.0f]);
  return IOSObjectArray_Get(OrgGeogebraCommonEuclidianDrawDrawPoint_fillStrokes_, pointSize);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawPoint)
