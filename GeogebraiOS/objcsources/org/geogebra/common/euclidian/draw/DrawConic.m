//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/draw/DrawConic.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GArc2D.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GEllipse2DDouble.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/common/awt/GRectangularShape.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/clipping/ClipShape.h"
#include "org/geogebra/common/euclidian/draw/DrawConic.h"
#include "org/geogebra/common/euclidian/draw/DrawLine.h"
#include "org/geogebra/common/euclidian/draw/DrawPoint.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoCirclePointRadius.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "org/geogebra/common/kernel/algos/AlgoConicFivePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoParabolaPointLine.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"

@interface OrgGeogebraCommonEuclidianDrawDrawConic () {
 @public
  jint type_;
  jboolean firstPoint_;
  OrgGeogebraCommonKernelGeosGeoPoint *point_;
  OrgGeogebraCommonEuclidianDrawDrawPoint *drawPoint_;
  jboolean firstLines_;
  IOSObjectArray *lines_;
  IOSObjectArray *drawLines__;
  jboolean firstCircle_;
  OrgGeogebraCommonKernelGeosGeoVec2D *midpoint_;
  id<OrgGeogebraCommonAwtGArc2D> arc_;
  OrgGeogebraCommonEuclidianGeneralPathClipped *arcFiller_, *gp_;
  id<OrgGeogebraCommonAwtGRectangularShape> circle_;
  jdouble mx_, my_, radius_, yradius_, angSt_, angEnd_;
  jboolean firstEllipse_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> ellipse_;
  jboolean firstParabola_;
  jdouble k2_;
  OrgGeogebraCommonKernelGeosGeoVec2D *vertex_;
  IOSDoubleArray *parpoints_;
  jdouble b_;
  jdouble tsq_;
  jdouble step_;
  jdouble t_;
  jdouble denom_;
  jdouble x_, y_;
  jint index0_, index1_, n_;
  OrgGeogebraCommonEuclidianGeneralPathClipped *hypLeft_, *hypRight_;
  jboolean hypLeftOnScreen_, hypRightOnScreen_;
  JavaUtilArrayList *prevPoints_;
  JavaUtilArrayList *prevSegments_;
  JavaUtilArrayList *prevLines_;
  JavaUtilArrayList *prevConics_;
  IOSObjectArray *previewTempPoints_;
  OrgGeogebraCommonKernelGeosGeoLine *previewTempLine_;
  OrgGeogebraCommonKernelGeosGeoNumeric *previewTempRadius_;
  jint previewMode_, neededPrevPoints_;
  jboolean isPreview_;
  jboolean ignoreSingularities_;
}

- (void)initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c OBJC_METHOD_FAMILY_NONE;

- (void)updateSinglePoint;

- (jboolean)negativeColored;

- (void)initPreview OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, point_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, drawPoint_, OrgGeogebraCommonEuclidianDrawDrawPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, lines_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, drawLines__, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, midpoint_, OrgGeogebraCommonKernelGeosGeoVec2D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, arc_, id<OrgGeogebraCommonAwtGArc2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, arcFiller_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, gp_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, circle_, id<OrgGeogebraCommonAwtGRectangularShape>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, ellipse_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, vertex_, OrgGeogebraCommonKernelGeosGeoVec2D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, parpoints_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, hypLeft_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, hypRight_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, prevPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, prevSegments_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, prevLines_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, prevConics_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, previewTempPoints_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, previewTempLine_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConic, previewTempRadius_, OrgGeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonEuclidianDrawDrawConic *self, OrgGeogebraCommonKernelKernelNDGeoConicND *c);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConic_update(OrgGeogebraCommonEuclidianDrawDrawConic *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConic_updateSinglePoint(OrgGeogebraCommonEuclidianDrawDrawConic *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianDrawDrawConic_negativeColored(OrgGeogebraCommonEuclidianDrawDrawConic *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConic_drawWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawConic *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConic_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawConic *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConic_initPreview(OrgGeogebraCommonEuclidianDrawDrawConic *self);

@implementation OrgGeogebraCommonEuclidianDrawDrawConic

- (id<OrgGeogebraCommonAwtGArea>)getShape {
  id<OrgGeogebraCommonAwtGArea> area = [super getShape] != nil ? [super getShape] : (shape_DrawConic_ == nil ? [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newArea] : [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:shape_DrawConic_]);
  if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isInverseFill]) {
    id<OrgGeogebraCommonAwtGArea> complement = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk(complement)) subtractWithOrgGeogebraCommonAwtGArea:area];
    return complement;
  }
  return area;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                  withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
                                                    withBoolean:(jboolean)ignoreSingularities {
  OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self, view, c, ignoreSingularities);
  return self;
}

- (void)initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, c);
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                                        withInt:(jint)mode
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points {
  OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(self, view, mode, points);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points
                                          withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(self, view, points, selectedLines);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                                        withInt:(jint)mode
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points
                                          withJavaUtilArrayList:(JavaUtilArrayList *)segments
                                          withJavaUtilArrayList:(JavaUtilArrayList *)conics {
  OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(self, view, mode, points, segments, conics);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawConic_update(self);
}

- (jboolean)checkCircleEllipseParabolaOnScreenWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)viewRect {
  jboolean includesScreenCompletely = [((id<OrgGeogebraCommonAwtGShape>) nil_chk(shape_DrawConic_)) containsWithOrgGeogebraCommonAwtGRectangle2D:viewRect];
  jboolean offScreen = includesScreenCompletely || ![((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk([shape_DrawConic_ getBounds2D])) intersectsWithOrgGeogebraCommonAwtGRectangle2D:viewRect];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getAlphaValue] == 0.0f) {
    return !offScreen;
  }
  if (includesScreenCompletely) {
    return YES;
  }
  return !offScreen;
}

- (jboolean)checkHyperbolaOnScreenWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)viewRect {
  hypLeftOnScreen_ = [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithOrgGeogebraCommonAwtGRectangle:viewRect]];
  hypRightOnScreen_ = [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangleWithOrgGeogebraCommonAwtGRectangle:viewRect]];
  if (!hypLeftOnScreen_ && !hypRightOnScreen_) {
    return NO;
  }
  return YES;
}

- (void)updateSinglePoint {
  OrgGeogebraCommonEuclidianDrawDrawConic_updateSinglePoint(self);
}

- (void)updateDoubleLine {
  [self updateLines];
}

- (void)updateLines {
  shape_DrawConic_ = nil;
  if (firstLines_) {
    firstLines_ = NO;
    lines_ = [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getLines];
    drawLines__ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonEuclidianDrawDrawLine_class_()];
    (void) IOSObjectArray_Set(drawLines__, 0, new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(view_, IOSObjectArray_Get(nil_chk(lines_), 0)));
    (void) IOSObjectArray_Set(drawLines__, 1, new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(view_, IOSObjectArray_Get(lines_, 1)));
    [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 0))) setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:geo_];
    [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:geo_];
  }
  OrgGeogebraCommonKernelMatrixCoordMatrix *m = nil;
  if (!isPreview_) {
    if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix] == nil) {
      if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isGeoElement3D]) {
        m = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([conic_ getCoordSys])) getMatrixOrthonormal])) inverse];
      }
    }
    else {
      if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isGeoElement3D]) {
        m = [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([conic_ getCoordSys])) getMatrixOrthonormal])) inverse])) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:[view_ getMatrix]];
      }
      else {
        m = [view_ getMatrix];
      }
    }
  }
  for (jint i = 0; i < 2; i++) {
    [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), i))) forceLineTypeWithInt:((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->lineType_];
    [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, i))) updateWithOrgGeogebraCommonKernelMatrixCoordMatrix:m];
    [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, i))) updateStrokesJustLineThicknessWithOrgGeogebraCommonKernelGeosGeoElement:geo_];
  }
  if (((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES || conic_->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES || conic_->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE) {
    shape_DrawConic_ = [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) getShapeWithBoolean:YES];
    if (conic_->type_ != OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE) [((id<OrgGeogebraCommonAwtGArea>) nil_chk(((id<OrgGeogebraCommonAwtGArea>) check_protocol_cast(shape_DrawConic_, @protocol(OrgGeogebraCommonAwtGArea))))) exclusiveOrWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) getShapeWithBoolean:YES]];
    if (OrgGeogebraCommonEuclidianDrawDrawConic_negativeColored(self)) {
      id<OrgGeogebraCommonAwtGArea> complement = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]];
      [((id<OrgGeogebraCommonAwtGArea>) nil_chk(complement)) subtractWithOrgGeogebraCommonAwtGArea:(id<OrgGeogebraCommonAwtGArea>) check_protocol_cast(shape_DrawConic_, @protocol(OrgGeogebraCommonAwtGArea))];
      shape_DrawConic_ = complement;
    }
  }
}

- (jboolean)negativeColored {
  return OrgGeogebraCommonEuclidianDrawDrawConic_negativeColored(self);
}

- (void)updateCircle {
  [self setShapeWithOrgGeogebraCommonAwtGArea:nil];
  radius_ = IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXscale];
  yradius_ = IOSDoubleArray_Get(halfAxes_, 1) * [view_ getYscale];
  if (radius_ > OrgGeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS || yradius_ > OrgGeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS) {
    isVisible_ = NO;
    return;
  }
  if (firstCircle_) {
    firstCircle_ = NO;
    arc_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D];
    if (ellipse_ == nil) ellipse_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble];
  }
  jint i = -1;
  jint BIG_RADIUS = [view_ getWidth] + [view_ getHeight];
  if (radius_ < BIG_RADIUS && yradius_ < BIG_RADIUS) {
    circle_ = ellipse_;
    arcFiller_ = nil;
    OrgGeogebraCommonKernelMatrixCoords *M;
    if (isPreview_) M = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D])) getInhomCoords];
    else {
      M = [view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
        isVisible_ = NO;
        return;
      }
      for (jint j = 0; j < 2; j++) {
        OrgGeogebraCommonKernelMatrixCoords *ev = [view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[conic_ getEigenvec3DWithInt:j]];
        if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(ev)) getZ])) {
          isVisible_ = NO;
          return;
        }
      }
    }
    mx_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(M)) getX] * [view_ getXscale] + [view_ getxZero];
    my_ = -[M getY] * [view_ getYscale] + [view_ getyZero];
    [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(ellipse_)) setFrameWithDouble:mx_ - radius_ withDouble:my_ - yradius_ withDouble:2.0 * radius_ withDouble:2.0 * yradius_];
  }
  else {
    OrgGeogebraCommonKernelMatrixCoords *M = [view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      isVisible_ = NO;
      return;
    }
    for (jint j = 0; j < 2; j++) {
      OrgGeogebraCommonKernelMatrixCoords *ev = [view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[conic_ getEigenvec3DWithInt:j]];
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(ev)) getZ])) {
        isVisible_ = NO;
        return;
      }
    }
    mx_ = [M getX] * [view_ getXscale] + [view_ getxZero];
    my_ = -[M getY] * [view_ getYscale] + [view_ getyZero];
    angSt_ = JavaLangDouble_NaN;
    if (mx_ < 0.0) {
      if (my_ < 0.0) {
        angSt_ = -JavaLangMath_acosWithDouble_(-mx_ / radius_);
        angEnd_ = -JavaLangMath_asinWithDouble_(-my_ / yradius_);
        i = 0;
      }
      else if (my_ > [view_ getHeight]) {
        angSt_ = JavaLangMath_asinWithDouble_((my_ - [view_ getHeight]) / yradius_);
        angEnd_ = JavaLangMath_acosWithDouble_(-mx_ / radius_);
        i = 2;
      }
      else {
        angSt_ = -JavaLangMath_asinWithDouble_(([view_ getHeight] - my_) / yradius_);
        angEnd_ = JavaLangMath_asinWithDouble_(my_ / yradius_);
        i = 1;
      }
    }
    else if (mx_ > [view_ getWidth]) {
      if (my_ < 0.0) {
        angSt_ = JavaLangMath_PI + JavaLangMath_asinWithDouble_(-my_ / yradius_);
        angEnd_ = JavaLangMath_PI + JavaLangMath_acosWithDouble_((mx_ - [view_ getWidth]) / radius_);
        i = 6;
      }
      else if (my_ > [view_ getHeight]) {
        angSt_ = JavaLangMath_PI - JavaLangMath_acosWithDouble_((mx_ - [view_ getWidth]) / radius_);
        angEnd_ = JavaLangMath_PI - JavaLangMath_asinWithDouble_((my_ - [view_ getHeight]) / yradius_);
        i = 4;
      }
      else {
        angSt_ = JavaLangMath_PI - JavaLangMath_asinWithDouble_(my_ / yradius_);
        angEnd_ = JavaLangMath_PI + JavaLangMath_asinWithDouble_(([view_ getHeight] - my_) / yradius_);
        i = 5;
      }
    }
    else if (my_ < 0.0) {
      angSt_ = JavaLangMath_PI + JavaLangMath_acosWithDouble_(mx_ / radius_);
      angEnd_ = 2 * JavaLangMath_PI - JavaLangMath_acosWithDouble_(([view_ getWidth] - mx_) / radius_);
      i = 7;
    }
    else if (my_ > [view_ getHeight]) {
      angSt_ = JavaLangMath_acosWithDouble_(([view_ getWidth] - mx_) / radius_);
      angEnd_ = JavaLangMath_PI - JavaLangMath_acosWithDouble_(mx_ / radius_);
      i = 3;
    }
    else {
      shape_DrawConic_ = circle_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:-1 withInt:-1 withInt:[view_ getWidth] + 2 withInt:[view_ getHeight] + 2];
      arcFiller_ = nil;
      xLabel_ = -100;
      yLabel_ = -100;
      return;
    }
    if (JavaLangDouble_isNaNWithDouble_(angSt_) || JavaLangDouble_isNaNWithDouble_(angEnd_)) {
      angSt_ = 0.0;
      angEnd_ = 2 * JavaLangMath_PI;
    }
    circle_ = arc_;
    [((id<OrgGeogebraCommonAwtGArc2D>) nil_chk(arc_)) setArcWithDouble:mx_ - radius_ withDouble:my_ - yradius_ withDouble:2.0 * radius_ withDouble:2.0 * yradius_ withDouble:JavaLangMath_toDegreesWithDouble_(angSt_) withDouble:JavaLangMath_toDegreesWithDouble_(angEnd_ - angSt_) withInt:OrgGeogebraCommonAwtGArc2D_OPEN];
    if ([conic_ getAlphaValue] > 0.0f || [conic_ isHatchingEnabled]) {
      if (gp_ == nil) gp_ = new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_);
      else [gp_ reset];
      OrgGeogebraCommonAwtGPoint2D *sp = [arc_ getStartPoint];
      OrgGeogebraCommonAwtGPoint2D *ep = [arc_ getEndPoint];
      switch (i) {
        case 0:
        [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:0 withDouble:0];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        break;
        case 1:
        [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:0 withDouble:[view_ getHeight]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        [gp_ lineToWithDouble:0 withDouble:0];
        break;
        case 2:
        [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:0 withDouble:[view_ getHeight]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        break;
        case 3:
        [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] withDouble:[view_ getHeight]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        [gp_ lineToWithDouble:0 withDouble:[view_ getHeight]];
        break;
        case 4:
        [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] withDouble:[view_ getHeight]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        break;
        case 5:
        [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] withDouble:0];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        [gp_ lineToWithDouble:[view_ getWidth] withDouble:[view_ getHeight]];
        break;
        case 6:
        [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] withDouble:0];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        break;
        case 7:
        [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:0 withDouble:0];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        [gp_ lineToWithDouble:[view_ getWidth] withDouble:0];
        break;
        default:
        gp_ = nil;
      }
      arcFiller_ = gp_;
    }
  }
  shape_DrawConic_ = circle_;
  xLabel_ = J2ObjCFpToInt((mx_ - radius_ / 2.0));
  yLabel_ = J2ObjCFpToInt((my_ - yradius_ * 0.85)) + 20;
}

- (void)updateEllipse {
  [self setShapeWithOrgGeogebraCommonAwtGArea:nil];
  jdouble xRadius = IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXscale];
  jdouble yRadius = IOSDoubleArray_Get(halfAxes_, 1) * [view_ getYscale];
  if (xRadius > OrgGeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS || yRadius > OrgGeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS) {
    isVisible_ = NO;
    return;
  }
  OrgGeogebraCommonKernelMatrixCoords *M;
  if (isPreview_) {
    M = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D])) getInhomCoords];
  }
  else {
    M = [view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      isVisible_ = NO;
      return;
    }
  }
  if (ev_ == nil) {
    ev_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
  }
  if (isPreview_) {
    for (jint j = 0; j < 2; j++) {
      (void) IOSObjectArray_Set(nil_chk(ev_), j, [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getEigenvecWithInt:j]);
    }
  }
  else {
    for (jint j = 0; j < 2; j++) {
      (void) IOSObjectArray_Set(nil_chk(ev_), j, [view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getEigenvec3DWithInt:j]]);
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev_, j))) getZ])) {
        isVisible_ = NO;
        return;
      }
    }
  }
  if (firstEllipse_) {
    firstEllipse_ = NO;
    if (ellipse_ == nil) ellipse_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DDouble];
  }
  [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithOrgGeogebraCommonAwtGAffineTransform:[view_ getCoordTransform]];
  [transform_ concatenateWithOrgGeogebraCommonAwtGAffineTransform:[((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([view_ getCompanion])) getTransformWithOrgGeogebraCommonKernelKernelNDGeoConicND:conic_ withOrgGeogebraCommonKernelMatrixCoords:M withOrgGeogebraCommonKernelMatrixCoordsArray:ev_]];
  [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(ellipse_)) setFrameFromCenterWithDouble:0 withDouble:0 withDouble:IOSDoubleArray_Get(halfAxes_, 0) withDouble:IOSDoubleArray_Get(halfAxes_, 1)];
  jint BIG_RADIUS = [view_ getWidth] + [view_ getHeight];
  if (xRadius < BIG_RADIUS && yRadius < BIG_RADIUS) {
    shape_DrawConic_ = [transform_ createTransformedShapeWithOrgGeogebraCommonAwtGShape:ellipse_];
  }
  else {
    shape_DrawConic_ = OrgGeogebraCommonEuclidianClippingClipShape_clipToRectWithOrgGeogebraCommonAwtGShape_withOrgGeogebraCommonAwtGAffineTransform_withOrgGeogebraCommonAwtGRectangle2D_(ellipse_, transform_, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:-1 withInt:-1 withInt:[view_ getWidth] + 2 withInt:[view_ getHeight] + 2]);
  }
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = -IOSDoubleArray_Get(halfAxes_, 0) / 2.0;
  *IOSDoubleArray_GetRef(labelCoords_, 1) = IOSDoubleArray_Get(halfAxes_, 1) * 0.85 - 20.0 / [view_ getYscale];
  [transform_ transformWithDoubleArray:labelCoords_ withInt:0 withDoubleArray:labelCoords_ withInt:0 withInt:1];
  xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 0));
  yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 1));
}

- (void)updateHyperbolaEdge {
  isVisible_ = NO;
}

- (void)updateHyperbola {
  OrgGeogebraCommonKernelMatrixCoords *M;
  if (isPreview_) {
    M = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D])) getInhomCoords];
  }
  else {
    M = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      isVisible_ = NO;
      return;
    }
  }
  if (ev_ == nil) {
    ev_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
  }
  if (isPreview_) {
    for (jint j = 0; j < 2; j++) {
      (void) IOSObjectArray_Set(nil_chk(ev_), j, [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getEigenvecWithInt:j]);
    }
  }
  else {
    for (jint j = 0; j < 2; j++) {
      (void) IOSObjectArray_Set(nil_chk(ev_), j, [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getEigenvec3DWithInt:j]]);
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev_, j))) getZ])) {
        isVisible_ = NO;
        return;
      }
    }
  }
  [self updateHyperbolaResetPaths];
  a_ = IOSDoubleArray_Get(nil_chk(halfAxes_), 0);
  b_ = IOSDoubleArray_Get(halfAxes_, 1);
  [self updateHyperbolaX0];
  if (x0_ <= a_) {
    isVisible_ = NO;
    return;
  }
  n_ = OrgGeogebraCommonEuclidianDrawDrawConic_PLOT_POINTS + J2ObjCFpToInt((JavaLangMath_absWithDouble_(x0_ - a_) / ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXmax] - [view_ getXmin]))) * 10;
  if (points_ != n_) {
    points_ = JavaLangMath_minWithInt_withInt_(n_, OrgGeogebraCommonEuclidianDrawDrawConic_MAX_PLOT_POINTS);
  }
  step_ = JavaLangMath_sqrtWithDouble_((x0_ - a_) / (x0_ + a_)) / (points_ - 1);
  [self updateHyperbolaAddPointWithInt:points_ - 1 withDouble:a_ withDouble:0];
  t_ = step_;
  jint i = 1;
  index0_ = points_;
  index1_ = points_ - 2;
  while (index1_ >= 0) {
    tsq_ = t_ * t_;
    denom_ = 1.0 - tsq_;
    x_ = (a_ * (1.0 + tsq_) / denom_);
    y_ = (2.0 * b_ * t_ / denom_);
    [self updateHyperbolaAddPointWithInt:index0_ withDouble:x_ withDouble:y_];
    [self updateHyperbolaAddPointWithInt:index1_ withDouble:x_ withDouble:-y_];
    index0_++;
    index1_--;
    i++;
    t_ = i * step_;
  }
  [self updateHyperbolaClosePaths];
  [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithOrgGeogebraCommonAwtGAffineTransform:[view_ getCoordTransform]];
  [transform_ concatenateWithOrgGeogebraCommonAwtGAffineTransform:[((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([view_ getCompanion])) getTransformWithOrgGeogebraCommonKernelKernelNDGeoConicND:conic_ withOrgGeogebraCommonKernelMatrixCoords:M withOrgGeogebraCommonKernelMatrixCoordsArray:ev_]];
  [self updateHyperboalSetTransformToPaths];
  [self updateHyperbolaLabelCoords];
  [transform_ transformWithDoubleArray:labelCoords_ withInt:0 withDoubleArray:labelCoords_ withInt:0 withInt:1];
  xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(labelCoords_), 0));
  yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 1));
  [self updateHyperbolaSetShape];
}

- (void)updateHyperbolaLabelCoords {
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = 2.0 * a_;
  *IOSDoubleArray_GetRef(labelCoords_, 1) = b_ * 1.7 - 20.0 / [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getYscale];
}

- (void)updateHyperbolaResetPaths {
  if (firstHyperbola_) {
    firstHyperbola_ = NO;
    points_ = OrgGeogebraCommonEuclidianDrawDrawConic_PLOT_POINTS;
    hypRight_ = new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_);
    hypLeft_ = new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_);
  }
  else {
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) reset];
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) reset];
  }
}

- (void)updateHyperbolaX0 {
  x0_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(midpoint_)) getX] - [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXmin]), JavaLangMath_absWithDouble_([midpoint_ getX] - [view_ getXmax])), JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_([midpoint_ getY] - [view_ getYmin]), JavaLangMath_absWithDouble_([midpoint_ getY] - [view_ getYmax])));
  x0_ *= 1.5;
}

- (void)updateHyperbolaAddPointWithInt:(jint)index
                            withDouble:(jdouble)x1
                            withDouble:(jdouble)y1 {
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) addPointWithInt:index withDouble:x1 withDouble:y1];
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) addPointWithInt:index withDouble:-x1 withDouble:y1];
}

- (void)updateHyperboalSetTransformToPaths {
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) transformWithOrgGeogebraCommonAwtGAffineTransform:transform_];
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) transformWithOrgGeogebraCommonAwtGAffineTransform:transform_];
}

- (void)updateHyperbolaClosePaths {
  if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getAlphaValue] > 0.0f || [conic_ isHatchingEnabled]) {
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) lineToWithDouble:JavaLangFloat_MAX_VALUE withDouble:y_];
    [hypRight_ lineToWithDouble:JavaLangFloat_MAX_VALUE withDouble:-y_];
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) lineToWithDouble:-JavaLangFloat_MAX_VALUE withDouble:y_];
    [hypLeft_ lineToWithDouble:-JavaLangFloat_MAX_VALUE withDouble:-y_];
  }
}

- (void)updateHyperbolaSetShape {
  [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:hypLeft_]];
  [((id<OrgGeogebraCommonAwtGArea>) nil_chk([super getShape])) addWithOrgGeogebraCommonAwtGArea:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithOrgGeogebraCommonAwtGShape:hypRight_]];
}

- (void)updateParabolaEdge {
  isVisible_ = NO;
}

- (void)updateParabola {
  if (((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_ > OrgGeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS) {
    isVisible_ = NO;
    return;
  }
  OrgGeogebraCommonKernelMatrixCoords *M;
  if (isPreview_) {
    M = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([conic_ getMidpoint3D])) getInhomCoords];
  }
  else {
    M = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[conic_ getMidpoint3D]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      isVisible_ = NO;
      return;
    }
  }
  if (ev_ == nil) {
    ev_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
  }
  if (isPreview_) {
    for (jint j = 0; j < 2; j++) {
      (void) IOSObjectArray_Set(nil_chk(ev_), j, [conic_ getEigenvecWithInt:j]);
    }
  }
  else {
    for (jint j = 0; j < 2; j++) {
      (void) IOSObjectArray_Set(nil_chk(ev_), j, [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[conic_ getEigenvec3DWithInt:j]]);
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev_, j))) getZ])) {
        isVisible_ = NO;
        return;
      }
    }
  }
  if (firstParabola_) {
    firstParabola_ = NO;
    parabola_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
  }
  [self updateParabolaX0Y0];
  [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithOrgGeogebraCommonAwtGAffineTransform:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordTransform]];
  [transform_ concatenateWithOrgGeogebraCommonAwtGAffineTransform:[((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([view_ getCompanion])) getTransformWithOrgGeogebraCommonKernelKernelNDGeoConicND:conic_ withOrgGeogebraCommonKernelMatrixCoords:M withOrgGeogebraCommonKernelMatrixCoordsArray:ev_]];
  *IOSDoubleArray_GetRef(nil_chk(parpoints_), 0) = x0_;
  *IOSDoubleArray_GetRef(parpoints_, 1) = y0_;
  *IOSDoubleArray_GetRef(parpoints_, 2) = -x0_ / 3;
  *IOSDoubleArray_GetRef(parpoints_, 3) = y0_ / 3;
  *IOSDoubleArray_GetRef(parpoints_, 4) = -x0_ / 3;
  *IOSDoubleArray_GetRef(parpoints_, 5) = -y0_ / 3;
  *IOSDoubleArray_GetRef(parpoints_, 6) = x0_;
  *IOSDoubleArray_GetRef(parpoints_, 7) = -y0_;
  [transform_ transformWithDoubleArray:parpoints_ withInt:0 withDoubleArray:parpoints_ withInt:0 withInt:4];
  [self updateParabolaPath];
  shape_DrawConic_ = parabola_;
  [self updateParabolaLabelCoords];
  [transform_ transformWithDoubleArray:labelCoords_ withInt:0 withDoubleArray:labelCoords_ withInt:0 withInt:1];
  xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(labelCoords_), 0));
  yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 1));
}

- (void)updateParabolaLabelCoords {
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = 2 * ((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_;
  *IOSDoubleArray_GetRef(labelCoords_, 1) = IOSDoubleArray_Get(labelCoords_, 0) - 20.0 / [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getYscale];
}

- (void)updateParabolaX0Y0 {
  x0_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(vertex_)) getX] - [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXmin]), JavaLangMath_absWithDouble_([vertex_ getX] - [view_ getXmax]));
  x0_ = JavaLangMath_maxWithDouble_withDouble_(x0_, JavaLangMath_absWithDouble_([vertex_ getY] - [view_ getYmin]));
  x0_ = JavaLangMath_maxWithDouble_withDouble_(x0_, JavaLangMath_absWithDouble_([vertex_ getY] - [view_ getYmax]));
  x0_ = 4 * x0_ / ((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_;
  jdouble i = 4;
  k2_ = 16;
  while (k2_ < x0_) {
    i += 2;
    k2_ = i * i;
  }
  x0_ = k2_ / 2 * conic_->p_;
  y0_ = i * conic_->p_;
}

- (void)updateParabolaPath {
  [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(parabola_)) reset];
  [parabola_ moveToWithFloat:(jfloat) IOSDoubleArray_Get(nil_chk(parpoints_), 0) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 1)];
  [parabola_ curveToWithFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 2) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 3) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 4) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 5) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 6) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 7)];
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawConic_drawWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)drawLinesWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
  [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
  if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isInverseFill]) {
    [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:[self getShape] withBoolean:NO];
  }
  else [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:shape_DrawConic_ withBoolean:NO];
}

- (void)drawHyperbolaWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isInverseFill]) {
    id<OrgGeogebraCommonAwtGArea> a1 = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:hypLeft_];
    id<OrgGeogebraCommonAwtGArea> a2 = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithOrgGeogebraCommonAwtGShape:hypRight_];
    id<OrgGeogebraCommonAwtGArea> complement = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk(complement)) subtractWithOrgGeogebraCommonAwtGArea:a1];
    [complement subtractWithOrgGeogebraCommonAwtGArea:a2];
    [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:complement withBoolean:NO];
  }
  else {
    if (hypLeftOnScreen_) [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:hypLeft_ withBoolean:YES];
    if (hypRightOnScreen_) [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:hypRight_ withBoolean:YES];
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
    [g2 setColorWithOrgGeogebraCommonAwtGColor:[geo_ getSelColor]];
    if (hypLeftOnScreen_) [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:hypLeft_];
    if (hypRightOnScreen_) [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:hypRight_];
  }
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
  [g2 setColorWithOrgGeogebraCommonAwtGColor:[self getObjectColor]];
  if (hypLeftOnScreen_) [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:hypLeft_];
  if (hypRightOnScreen_) [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:hypRight_];
  if (labelVisible_) {
    [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
    [g2 setColorWithOrgGeogebraCommonAwtGColor:[geo_ getLabelColor]];
    [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) return nil;
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    return [((OrgGeogebraCommonEuclidianDrawDrawPoint *) nil_chk(drawPoint_)) getBounds];
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(shape_DrawConic_)) getBounds];
    default:
    return nil;
  }
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawConic_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (jboolean)checkIsOnFilling {
  return [self isFilled] && type_ != OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT && type_ != OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE;
}

- (jboolean)hitWithInt:(jint)hitX
               withInt:(jint)hitY
               withInt:(jint)hitThreshold {
  if (!isVisible_) return NO;
  jboolean isOnFilling = NO;
  if ([self checkIsOnFilling]) {
    jdouble realX = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:hitX];
    jdouble realY = [view_ toRealWorldCoordYWithDouble:hitY];
    jdouble x3 = [view_ toRealWorldCoordXWithDouble:3] - [view_ toRealWorldCoordXWithDouble:0];
    jdouble y3 = [view_ toRealWorldCoordYWithDouble:3] - [view_ toRealWorldCoordYWithDouble:0];
    jint insideNeigbors = ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isInRegionWithDouble:realX withDouble:realY] ? 1 : 0) + ([conic_ isInRegionWithDouble:realX - x3 withDouble:realY - y3] ? 1 : 0) + ([conic_ isInRegionWithDouble:realX + x3 withDouble:realY - y3] ? 1 : 0) + ([conic_ isInRegionWithDouble:realX - x3 withDouble:realY + y3] ? 1 : 0) + ([conic_ isInRegionWithDouble:realX + x3 withDouble:realY + y3] ? 1 : 0);
    if ([conic_ isInverseFill]) isOnFilling = (insideNeigbors < 5);
    else isOnFilling = (insideNeigbors > 0);
  }
  jboolean isOnBoundary = NO;
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    isOnBoundary = [((OrgGeogebraCommonEuclidianDrawDrawPoint *) nil_chk(drawPoint_)) hitWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    isOnBoundary = [self hitLinesWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    isOnBoundary = [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) hitWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    if (strokedShape_ == nil) {
      strokedShape_ = [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithOrgGeogebraCommonAwtGShape:shape_DrawConic_];
    }
    isOnBoundary = [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    isOnBoundary = [self hitEllipseWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    isOnBoundary = [self hitHyperbolaWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
  }
  if (isOnFilling) {
    if (isOnBoundary) {
      [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()];
      return YES;
    }
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING()];
    return YES;
  }
  if (isOnBoundary) {
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()];
    return YES;
  }
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_NONE()];
  return NO;
}

- (jboolean)hitLinesWithInt:(jint)hitX
                    withInt:(jint)hitY
                    withInt:(jint)hitThreshold {
  return [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) hitWithInt:hitX withInt:hitY withInt:hitThreshold] || [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) hitWithInt:hitX withInt:hitY withInt:hitThreshold];
}

- (jboolean)hitHyperbolaWithInt:(jint)hitX
                        withInt:(jint)hitY
                        withInt:(jint)hitThreshold {
  if (strokedShape_ == nil) {
    strokedShape_ = [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithOrgGeogebraCommonAwtGShape:hypLeft_];
    strokedShape2_ = [objStroke_ createStrokedShapeWithOrgGeogebraCommonAwtGShape:hypRight_];
  }
  return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold] || [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape2_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)hitEllipseWithInt:(jint)hitX
                      withInt:(jint)hitY
                      withInt:(jint)hitThreshold {
  if (strokedShape_ == nil) {
    strokedShape_ = [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithOrgGeogebraCommonAwtGShape:shape_DrawConic_];
  }
  return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    return [((OrgGeogebraCommonEuclidianDrawDrawPoint *) nil_chk(drawPoint_)) isInsideWithOrgGeogebraCommonAwtGRectangle:rect];
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return rect != nil && shape_DrawConic_ != nil && [rect containsWithOrgGeogebraCommonAwtGRectangle2D:[shape_DrawConic_ getBounds]];
  }
  return NO;
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT) {
    return [((OrgGeogebraCommonEuclidianDrawDrawPoint *) nil_chk(drawPoint_)) intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:rect];
  }
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE) {
    return [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:rect] || [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:rect];
  }
  if ([self isFilled]) {
    return [super intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:rect];
  }
  if (shape_DrawConic_ != nil) {
    return [shape_DrawConic_ intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect] && ![shape_DrawConic_ containsWithOrgGeogebraCommonAwtGRectangle2D:rect];
  }
  if ([super getShape] != nil) {
    return [((id<OrgGeogebraCommonAwtGArea>) nil_chk([super getShape])) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect] && ![((id<OrgGeogebraCommonAwtGArea>) nil_chk([super getShape])) containsWithOrgGeogebraCommonAwtGRectangle2D:rect];
  }
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geo_ = geo;
  if (drawLines__ != nil) for (jint i = 0; i < 2 && IOSObjectArray_Get(drawLines__, i) != nil; i++) [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, i))) setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)initPreview {
  OrgGeogebraCommonEuclidianDrawDrawConic_initPreview(self);
}

- (void)updatePreview {
  switch (previewMode_) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
    isVisible_ = (conic_ != nil && ([((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == 2 || [((JavaUtilArrayList *) nil_chk(prevSegments_)) size] == 1 || [((JavaUtilArrayList *) nil_chk(prevConics_)) size] == 1));
    if (isVisible_) {
      if ([((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == 2) {
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> p1 = [prevPoints_ getWithInt:0];
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> p2 = [prevPoints_ getWithInt:1];
        [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(previewTempRadius_)) setValueWithDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:p2]];
      }
      else if ([((JavaUtilArrayList *) nil_chk(prevSegments_)) size] == 1) {
        id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> seg = [prevSegments_ getWithInt:0];
        [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(previewTempRadius_)) setValueWithDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) getLength]];
      }
      else if ([((JavaUtilArrayList *) nil_chk(prevConics_)) size] == 1) {
        OrgGeogebraCommonKernelKernelNDGeoConicND *prevCircle = [prevConics_ getWithInt:0];
        [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(previewTempRadius_)) setValueWithDouble:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(prevCircle)) getCircleRadius]];
      }
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(previewTempRadius_)) updateCascade];
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
    isVisible_ = ([((JavaUtilArrayList *) nil_chk(prevLines_)) size] == 1);
    if ([prevLines_ size] > 0) {
      id<OrgGeogebraCommonKernelKernelNDGeoLineND> lND = [prevLines_ getWithInt:0];
      OrgGeogebraCommonKernelMatrixCoords *equation = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(lND)) getCartesianEquationVectorWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
      [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(previewTempLine_)) setCoordsWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getX] withDouble:[equation getY] withDouble:[equation getZ]];
    }
    if ([((JavaUtilArrayList *) nil_chk(prevPoints_)) size] > 0) {
      OrgGeogebraCommonKernelMatrixCoords *p = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:0])) getInhomCoordsInD3]];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectInfDim] withBoolean:YES];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, 0))) updateCascade];
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
    isVisible_ = (conic_ != nil && [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == neededPrevPoints_);
    if (isVisible_) {
      OrgGeogebraCommonKernelMatrixCoords *p = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((JavaUtilArrayList *) nil_chk(prevPoints_)) getWithInt:0])) getInhomCoordsInD3]];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectInfDim] withBoolean:NO];
      OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, 0))) getConstruction];
      OrgGeogebraCommonKernelArithmeticMyDouble *distance = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel], [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, 1))) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(previewTempPoints_, 0)]);
      OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius *algoCircleRadius = new_OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, IOSObjectArray_Get(previewTempPoints_, 0), distance);
      [cons removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoCircleRadius];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algoCircleRadius getCircle]);
      [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) updateCascade];
    }
    break;
    default:
    isVisible_ = (conic_ != nil && [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == neededPrevPoints_);
    if (isVisible_) {
      for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(prevPoints_)) size]; i++) {
        OrgGeogebraCommonKernelMatrixCoords *p = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:i])) getInhomCoordsInD3]];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), i))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectInfDim] withBoolean:NO];
      }
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) updateCascade];
    }
  }
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
  if (isVisible_) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, ((IOSObjectArray *) nil_chk(previewTempPoints_))->size_ - 1))) setCoordsWithDouble:xRW withDouble:yRW withDouble:1.0];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, previewTempPoints_->size_ - 1))) updateCascade];
    OrgGeogebraCommonEuclidianDrawDrawConic_update(self);
  }
}

- (void)drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawConic_drawWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)disposePreview {
  if (conic_ != nil) {
    [conic_ remove];
  }
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)getConic {
  return conic_;
}

- (void)setIgnoreSingularitiesWithBoolean:(jboolean)ignore {
  self->ignoreSingularities_ = ignore;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getShape", NULL, "Lorg.geogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelKernelNDGeoConicND:withBoolean:", "DrawConic", NULL, 0x1, NULL, NULL },
    { "initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND:", "initConic", "V", 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withInt:withJavaUtilArrayList:", "DrawConic", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:withJavaUtilArrayList:", "DrawConic", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withInt:withJavaUtilArrayList:withJavaUtilArrayList:withJavaUtilArrayList:", "DrawConic", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "checkCircleEllipseParabolaOnScreenWithOrgGeogebraCommonAwtGRectangle:", "checkCircleEllipseParabolaOnScreen", "Z", 0x4, NULL, NULL },
    { "checkHyperbolaOnScreenWithOrgGeogebraCommonAwtGRectangle:", "checkHyperbolaOnScreen", "Z", 0x4, NULL, NULL },
    { "updateSinglePoint", NULL, "V", 0x12, NULL, NULL },
    { "updateDoubleLine", NULL, "V", 0x4, NULL, NULL },
    { "updateLines", NULL, "V", 0x4, NULL, NULL },
    { "negativeColored", NULL, "Z", 0x2, NULL, NULL },
    { "updateCircle", NULL, "V", 0x4, NULL, NULL },
    { "updateEllipse", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaEdge", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbola", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaLabelCoords", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaResetPaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaX0", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaAddPointWithInt:withDouble:withDouble:", "updateHyperbolaAddPoint", "V", 0x4, NULL, NULL },
    { "updateHyperboalSetTransformToPaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaClosePaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaSetShape", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaEdge", NULL, "V", 0x4, NULL, NULL },
    { "updateParabola", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaLabelCoords", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaX0Y0", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaPath", NULL, "V", 0x4, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "drawLinesWithOrgGeogebraCommonAwtGGraphics2D:", "drawLines", "V", 0x4, NULL, NULL },
    { "drawHyperbolaWithOrgGeogebraCommonAwtGGraphics2D:", "drawHyperbola", "V", 0x4, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x11, NULL, NULL },
    { "checkIsOnFilling", NULL, "Z", 0x4, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "hitLinesWithInt:withInt:withInt:", "hitLines", "Z", 0x1, NULL, NULL },
    { "hitHyperbolaWithInt:withInt:withInt:", "hitHyperbola", "Z", 0x1, NULL, NULL },
    { "hitEllipseWithInt:withInt:withInt:", "hitEllipse", "Z", 0x1, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "initPreview", NULL, "V", 0x2, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "getConic", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "setIgnoreSingularitiesWithBoolean:", "setIgnoreSingularities", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PLOT_POINTS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawConic_PLOT_POINTS },
    { "MAX_PLOT_POINTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawConic_MAX_PLOT_POINTS },
    { "HUGE_RADIUS_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS },
    { "conic_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "isVisible_", NULL, 0x4, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x4, "Z", NULL, NULL,  },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "labelCoords_", NULL, 0x4, "[D", NULL, NULL,  },
    { "firstPoint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "drawPoint_", NULL, 0x2, "Lorg.geogebra.common.euclidian.draw.DrawPoint;", NULL, NULL,  },
    { "firstLines_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lines_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "drawLines__", "drawLines", 0x2, "[Lorg.geogebra.common.euclidian.draw.DrawLine;", NULL, NULL,  },
    { "firstCircle_", NULL, 0x2, "Z", NULL, NULL,  },
    { "midpoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "arc_", NULL, 0x2, "Lorg.geogebra.common.awt.GArc2D;", NULL, NULL,  },
    { "arcFiller_", NULL, 0x2, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lorg.geogebra.common.awt.GRectangularShape;", NULL, NULL,  },
    { "mx_", NULL, 0x2, "D", NULL, NULL,  },
    { "my_", NULL, 0x2, "D", NULL, NULL,  },
    { "radius_", NULL, 0x2, "D", NULL, NULL,  },
    { "yradius_", NULL, 0x2, "D", NULL, NULL,  },
    { "angSt_", NULL, 0x2, "D", NULL, NULL,  },
    { "angEnd_", NULL, 0x2, "D", NULL, NULL,  },
    { "transform_", NULL, 0x4, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "shape_DrawConic_", "shape", 0x4, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "firstEllipse_", NULL, 0x2, "Z", NULL, NULL,  },
    { "halfAxes_", NULL, 0x4, "[D", NULL, NULL,  },
    { "ellipse_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "firstParabola_", NULL, 0x2, "Z", NULL, NULL,  },
    { "x0_", NULL, 0x4, "D", NULL, NULL,  },
    { "y0_", NULL, 0x4, "D", NULL, NULL,  },
    { "k2_", NULL, 0x2, "D", NULL, NULL,  },
    { "vertex_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "parabola_", NULL, 0x4, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "parpoints_", NULL, 0x2, "[D", NULL, NULL,  },
    { "firstHyperbola_", NULL, 0x4, "Z", NULL, NULL,  },
    { "a_", NULL, 0x4, "D", NULL, NULL,  },
    { "b_", NULL, 0x2, "D", NULL, NULL,  },
    { "tsq_", NULL, 0x2, "D", NULL, NULL,  },
    { "step_", NULL, 0x2, "D", NULL, NULL,  },
    { "t_", NULL, 0x2, "D", NULL, NULL,  },
    { "denom_", NULL, 0x2, "D", NULL, NULL,  },
    { "x_", NULL, 0x2, "D", NULL, NULL,  },
    { "y_", NULL, 0x2, "D", NULL, NULL,  },
    { "index0_", NULL, 0x2, "I", NULL, NULL,  },
    { "index1_", NULL, 0x2, "I", NULL, NULL,  },
    { "n_", NULL, 0x2, "I", NULL, NULL,  },
    { "points_", NULL, 0x4, "I", NULL, NULL,  },
    { "hypLeft_", NULL, 0x2, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "hypRight_", NULL, 0x2, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "hypLeftOnScreen_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hypRightOnScreen_", NULL, 0x2, "Z", NULL, NULL,  },
    { "prevPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "prevSegments_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoSegmentND;>;",  },
    { "prevLines_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoLineND;>;",  },
    { "prevConics_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoConicND;>;",  },
    { "previewTempPoints_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "previewTempLine_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "previewTempRadius_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "previewMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "neededPrevPoints_", NULL, 0x2, "I", NULL, NULL,  },
    { "isPreview_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ignoreSingularities_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ev_", NULL, 0x4, "[Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawConic = { 2, "DrawConic", "org.geogebra.common.euclidian.draw", NULL, 0x1, 50, methods, 67, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawConic;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(OrgGeogebraCommonEuclidianDrawDrawConic *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelKernelNDGeoConicND *c, jboolean ignoreSingularities) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->labelCoords_ = [IOSDoubleArray newArrayWithLength:2];
  self->firstPoint_ = YES;
  self->firstLines_ = YES;
  self->firstCircle_ = YES;
  self->transform_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  self->firstEllipse_ = YES;
  self->firstParabola_ = YES;
  self->parpoints_ = [IOSDoubleArray newArrayWithLength:8];
  self->firstHyperbola_ = YES;
  self->isPreview_ = NO;
  self->view_ = view;
  self->isPreview_ = NO;
  self->ignoreSingularities_ = ignoreSingularities;
  OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, c);
  OrgGeogebraCommonEuclidianDrawDrawConic_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawConic *new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelKernelNDGeoConicND *c, jboolean ignoreSingularities) {
  OrgGeogebraCommonEuclidianDrawDrawConic *self = [OrgGeogebraCommonEuclidianDrawDrawConic alloc];
  OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self, view, c, ignoreSingularities);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonEuclidianDrawDrawConic *self, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  self->conic_ = c;
  self->geo_ = c;
  self->vertex_ = [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) getTranslationVector];
  self->midpoint_ = self->vertex_;
  self->halfAxes_ = [c getHalfAxes];
  (void) [c getAffineTransform];
}

void OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawConic *self, OrgGeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->labelCoords_ = [IOSDoubleArray newArrayWithLength:2];
  self->firstPoint_ = YES;
  self->firstLines_ = YES;
  self->firstCircle_ = YES;
  self->transform_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  self->firstEllipse_ = YES;
  self->firstParabola_ = YES;
  self->parpoints_ = [IOSDoubleArray newArrayWithLength:8];
  self->firstHyperbola_ = YES;
  self->isPreview_ = NO;
  self->view_ = view;
  self->prevPoints_ = points;
  self->previewMode_ = mode;
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
    self->neededPrevPoints_ = 1;
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
    self->neededPrevPoints_ = 2;
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
    self->neededPrevPoints_ = 4;
    break;
  }
  self->previewTempPoints_ = [IOSObjectArray newArrayWithLength:self->neededPrevPoints_ + 1 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  for (jint i = 0; i < self->previewTempPoints_->size_; i++) {
    (void) IOSObjectArray_Set(self->previewTempPoints_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  }
  OrgGeogebraCommonEuclidianDrawDrawConic_initPreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawConic *new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawDrawConic *self = [OrgGeogebraCommonEuclidianDrawDrawConic alloc];
  OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(self, view, mode, points);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawConic *self, OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, JavaUtilArrayList *selectedLines) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->labelCoords_ = [IOSDoubleArray newArrayWithLength:2];
  self->firstPoint_ = YES;
  self->firstLines_ = YES;
  self->firstCircle_ = YES;
  self->transform_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  self->firstEllipse_ = YES;
  self->firstParabola_ = YES;
  self->parpoints_ = [IOSDoubleArray newArrayWithLength:8];
  self->firstHyperbola_ = YES;
  self->isPreview_ = NO;
  self->view_ = view;
  self->prevPoints_ = points;
  self->prevLines_ = selectedLines;
  self->neededPrevPoints_ = 1;
  self->previewMode_ = OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA;
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  if ([((JavaUtilArrayList *) nil_chk(selectedLines)) size] == 0) {
    self->previewTempLine_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons);
  }
  else {
    self->previewTempLine_ = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast([selectedLines getWithInt:0], [OrgGeogebraCommonKernelGeosGeoLine class]);
  }
  self->previewTempPoints_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  (void) IOSObjectArray_Set(self->previewTempPoints_, 0, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonEuclidianDrawDrawConic_initPreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawConic *new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, JavaUtilArrayList *selectedLines) {
  OrgGeogebraCommonEuclidianDrawDrawConic *self = [OrgGeogebraCommonEuclidianDrawDrawConic alloc];
  OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(self, view, points, selectedLines);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawConic *self, OrgGeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points, JavaUtilArrayList *segments, JavaUtilArrayList *conics) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->labelCoords_ = [IOSDoubleArray newArrayWithLength:2];
  self->firstPoint_ = YES;
  self->firstLines_ = YES;
  self->firstCircle_ = YES;
  self->transform_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  self->firstEllipse_ = YES;
  self->firstParabola_ = YES;
  self->parpoints_ = [IOSDoubleArray newArrayWithLength:8];
  self->firstHyperbola_ = YES;
  self->isPreview_ = NO;
  self->view_ = view;
  self->prevPoints_ = points;
  self->prevSegments_ = segments;
  self->prevConics_ = conics;
  self->previewMode_ = mode;
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  self->previewTempRadius_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons);
  self->previewTempPoints_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  (void) IOSObjectArray_Set(self->previewTempPoints_, 0, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonEuclidianDrawDrawConic_initPreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawConic *new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points, JavaUtilArrayList *segments, JavaUtilArrayList *conics) {
  OrgGeogebraCommonEuclidianDrawDrawConic *self = [OrgGeogebraCommonEuclidianDrawDrawConic alloc];
  OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(self, view, mode, points, segments, conics);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawConic_update(OrgGeogebraCommonEuclidianDrawDrawConic *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->conic_];
  self->type_ = [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getType];
  switch (self->type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
    [self setShapeWithOrgGeogebraCommonAwtGArea:nil];
    self->shape_DrawConic_ = nil;
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    OrgGeogebraCommonEuclidianDrawDrawConic_updateSinglePoint(self);
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    [self updateDoubleLine];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    [self updateLines];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    [self updateCircle];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    [self updateEllipse];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    [self updateHyperbola];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    [self updateParabola];
    break;
  }
  if (!self->isVisible_) return;
  id<OrgGeogebraCommonAwtGRectangle> viewRect = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]];
  switch (self->type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    self->isVisible_ = [self checkCircleEllipseParabolaOnScreenWithOrgGeogebraCommonAwtGRectangle:viewRect];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    self->isVisible_ = [self checkHyperbolaOnScreenWithOrgGeogebraCommonAwtGRectangle:viewRect];
    break;
  }
  if (!self->isVisible_) return;
  if ([self->conic_ getTrace]) {
    self->isTracing__ = YES;
    id<OrgGeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
    if (g2 != nil) OrgGeogebraCommonEuclidianDrawDrawConic_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
  if (self->labelVisible_) {
    self->labelDesc_ = [self->geo_ getLabelDescription];
    [self addLabelOffset];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawConic_updateSinglePoint(OrgGeogebraCommonEuclidianDrawDrawConic *self) {
  self->shape_DrawConic_ = nil;
  if (self->firstPoint_) {
    self->firstPoint_ = NO;
    self->point_ = [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getSinglePoint];
    if (self->point_ == nil) self->point_ = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([self->conic_ getConstruction]);
    self->drawPoint_ = new_OrgGeogebraCommonEuclidianDrawDrawPoint_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self->view_, self->point_, self->isPreview_);
    [self->drawPoint_ setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:self->conic_];
  }
  [self setShapeWithOrgGeogebraCommonAwtGArea:!self->ignoreSingularities_ ? [((OrgGeogebraCommonEuclidianDrawDrawPoint *) nil_chk(self->drawPoint_)) getDot] : nil];
  OrgGeogebraCommonKernelMatrixCoords *p = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getMidpoint3D]];
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getZ])) {
    self->isVisible_ = NO;
    return;
  }
  IOSDoubleArray *coords = [IOSDoubleArray newArrayWithLength:2];
  *IOSDoubleArray_GetRef(coords, 0) = [p getX];
  *IOSDoubleArray_GetRef(coords, 1) = [p getY];
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) copyLabelWithOrgGeogebraCommonKernelGeosGeoElement:self->conic_];
  [self->point_ setObjColorWithOrgGeogebraCommonAwtGColor:[self->conic_ getObjectColor]];
  [self->point_ setLabelColorWithOrgGeogebraCommonAwtGColor:[self->conic_ getLabelColor]];
  [self->point_ setPointSizeWithInt:self->conic_->lineThickness_];
  [((OrgGeogebraCommonEuclidianDrawDrawPoint *) nil_chk(self->drawPoint_)) updateWithDoubleArray:coords];
}

jboolean OrgGeogebraCommonEuclidianDrawDrawConic_negativeColored(OrgGeogebraCommonEuclidianDrawDrawConic *self) {
  IOSDoubleArray *xTry = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 10, 20, 0, 10, 20 } count:6];
  IOSDoubleArray *yTry = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0, 0, 10, 10, 20 } count:6];
  for (jint i = 0; i < 6; i++) {
    jdouble val1 = [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) evaluateWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:IOSDoubleArray_Get(xTry, i)] withDouble:[self->view_ toRealWorldCoordYWithDouble:IOSDoubleArray_Get(yTry, i)]];
    if (self->conic_->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES) val1 *= [self->conic_ evaluateWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->conic_->b_)) getX] + ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 0)))->x_ + ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->x_ withDouble:[self->conic_->b_ getY] + ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->y_ + ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->y_];
    if (self->conic_->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES) val1 *= [self->conic_ evaluateWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->conic_->b_)) getX] withDouble:[self->conic_->b_ getY]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(val1)) return (val1 > 0) ^ [((id<OrgGeogebraCommonAwtGShape>) nil_chk(self->shape_DrawConic_)) containsWithDouble:IOSDoubleArray_Get(xTry, i) withDouble:IOSDoubleArray_Get(yTry, i)];
  }
  return NO;
}

void OrgGeogebraCommonEuclidianDrawDrawConic_drawWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawConic *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  if (!self->isVisible_) return;
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:[self getObjectColor]];
  {
    jint pointType;
    switch (self->type_) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      if ((self->conic_ == self->geo_ && [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isInverseFill]) || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isInverseFill] != [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isInverseFill]) {
        [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:[self getShape] withBoolean:NO];
        pointType = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE;
      }
      else {
        pointType = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
      }
      if (!self->ignoreSingularities_) {
        [((OrgGeogebraCommonEuclidianDrawDrawPoint *) nil_chk(self->drawPoint_)) setPointStyleWithInt:pointType];
        [self->drawPoint_ drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
      }
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      [self drawLinesWithOrgGeogebraCommonAwtGGraphics2D:g2];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
      [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->drawLines__), 0))) drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
      if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isInverseFill]) {
        [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:[self getShape] withBoolean:NO];
      }
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isInverseFill]) {
        [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:[self getShape] withBoolean:NO];
      }
      else {
        [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:self->shape_DrawConic_ withBoolean:NO];
      }
      if (self->arcFiller_ != nil) [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:self->arcFiller_ withBoolean:YES];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) doHighlighting]) {
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->selStroke_];
        [g2 setColorWithOrgGeogebraCommonAwtGColor:[self->geo_ getSelColor]];
        [g2 drawWithOrgGeogebraCommonAwtGShape:self->shape_DrawConic_];
      }
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
      [g2 setColorWithOrgGeogebraCommonAwtGColor:[self getObjectColor]];
      [g2 drawWithOrgGeogebraCommonAwtGShape:self->shape_DrawConic_];
      if (self->labelVisible_) {
        [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontConic]];
        [g2 setColorWithOrgGeogebraCommonAwtGColor:[self->geo_ getLabelColor]];
        [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
      }
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      [self drawHyperbolaWithOrgGeogebraCommonAwtGGraphics2D:g2];
      break;
    }
  }
}

void OrgGeogebraCommonEuclidianDrawDrawConic_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawConic *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:[self getObjectColor]];
  switch (self->type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    [((OrgGeogebraCommonEuclidianDrawDrawPoint *) nil_chk(self->drawPoint_)) drawTraceWithOrgGeogebraCommonAwtGGraphics2D:g2];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->drawLines__), 0))) drawTraceWithOrgGeogebraCommonAwtGGraphics2D:g2];
    [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(self->drawLines__, 1))) drawTraceWithOrgGeogebraCommonAwtGGraphics2D:g2];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    [((OrgGeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->drawLines__), 0))) drawTraceWithOrgGeogebraCommonAwtGGraphics2D:g2];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [g2 setColorWithOrgGeogebraCommonAwtGColor:[self getObjectColor]];
    [g2 drawWithOrgGeogebraCommonAwtGShape:self->shape_DrawConic_];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [g2 setColorWithOrgGeogebraCommonAwtGColor:[self getObjectColor]];
    [g2 drawWithOrgGeogebraCommonAwtGShape:self->hypLeft_];
    [g2 drawWithOrgGeogebraCommonAwtGShape:self->hypRight_];
    break;
  }
}

void OrgGeogebraCommonEuclidianDrawDrawConic_initPreview(OrgGeogebraCommonEuclidianDrawDrawConic *self) {
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->previewTempPoints_), 0))) getConstruction];
  self->isPreview_ = YES;
  {
    OrgGeogebraCommonKernelAlgosAlgoCircleTwoPoints *algo;
    OrgGeogebraCommonKernelMatrixCoords *p;
    OrgGeogebraCommonKernelArithmeticMyDouble *distance;
    OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius *algoCircleRadius;
    IOSObjectArray *pts;
    OrgGeogebraCommonKernelAlgosAlgoConicFivePoints *algo0;
    OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *algo2;
    OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint *algo3;
    OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint *algo4;
    OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius *algo5;
    OrgGeogebraCommonKernelAlgosAlgoParabolaPointLine *algo6;
    switch (self->previewMode_) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
      algo = new_OrgGeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1));
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algo getCircle]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
      p = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((JavaUtilArrayList *) nil_chk(self->prevPoints_)) getWithInt:0])) getInhomCoordsInD3]];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->previewTempPoints_, 0))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectInfDim] withBoolean:NO];
      distance = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel], [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->previewTempPoints_, 1))) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->previewTempPoints_, 0)]);
      algoCircleRadius = new_OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), distance);
      [cons removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoCircleRadius];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algoCircleRadius getCircle]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
      pts = [IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2), IOSObjectArray_Get(self->previewTempPoints_, 3), IOSObjectArray_Get(self->previewTempPoints_, 4) } count:5 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
      algo0 = new_OrgGeogebraCommonKernelAlgosAlgoConicFivePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, pts);
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo0];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algo0 getConic]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      algo2 = new_OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2));
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo2];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algo2 getCircle]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
      algo3 = new_OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2), OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE);
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo3];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algo3 getConic]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
      algo4 = new_OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2), OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA);
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo4];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algo4 getConic]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
      algo5 = new_OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), self->previewTempRadius_);
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo5];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algo5 getCircle]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
      algo6 = new_OrgGeogebraCommonKernelAlgosAlgoParabolaPointLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), self->previewTempLine_);
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo6];
      OrgGeogebraCommonEuclidianDrawDrawConic_initConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, [algo6 getParabola]);
      break;
      default:
      OrgGeogebraCommonMainApp_debugWithNSString_(@"unknown conic type");
    }
  }
  if (self->conic_ != nil) [self->conic_ setLabelVisibleWithBoolean:NO];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawConic)
