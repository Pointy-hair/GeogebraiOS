//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/draw/DrawText.java
//


#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawText.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonEuclidianDrawDrawText () {
 @public
  OrgGeogebraCommonKernelGeosGeoText *text_;
  jboolean isVisible_, isLaTeX_;
  jint fontSize_;
  jint fontStyle_;
  jboolean serifFont_;
  OrgGeogebraCommonAwtGFont *textFont_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> loc_;
  jint oldXpos_, oldYpos_;
  jboolean needsBoundingBoxOld_;
}

- (jboolean)doUpdateFontSize;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawText, text_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawText, textFont_, OrgGeogebraCommonAwtGFont *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawText, loc_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawText_update(OrgGeogebraCommonEuclidianDrawDrawText *self);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonEuclidianDrawDrawText)

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonEuclidianDrawDrawText_HIGHLIGHT_COLOR_;

@implementation OrgGeogebraCommonEuclidianDrawDrawText

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                         withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text {
  OrgGeogebraCommonEuclidianDrawDrawText_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoText_(self, view, text);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawText_update(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    OrgGeogebraCommonAwtGColor *bg = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getBackgroundColor];
    if (bg != nil) {
      if (isLaTeX_) {
        [self drawMultilineLaTeXWithOrgGeogebraCommonAwtGGraphics2D:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getTempGraphics2DWithOrgGeogebraCommonAwtGFont:textFont_] withOrgGeogebraCommonAwtGFont:textFont_ withOrgGeogebraCommonAwtGColor:[geo_ getObjectColor] withOrgGeogebraCommonAwtGColor:[view_ getBackgroundCommon]];
      }
      else {
        [self drawMultilineTextWithOrgGeogebraCommonAwtGGraphics2D:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getTempGraphics2DWithOrgGeogebraCommonAwtGFont:textFont_] withOrgGeogebraCommonAwtGFont:textFont_];
      }
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:bg];
      [g2 fillWithOrgGeogebraCommonAwtGShape:labelRectangle_];
    }
    if (isLaTeX_) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setFontWithOrgGeogebraCommonAwtGFont:textFont_];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
      [self drawMultilineLaTeXWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGFont:textFont_ withOrgGeogebraCommonAwtGColor:[geo_ getObjectColor] withOrgGeogebraCommonAwtGColor:bg != nil ? bg : [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundCommon]];
    }
    else {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [self drawMultilineTextWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGFont:textFont_];
    }
    if ([geo_ doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:OrgGeogebraCommonEuclidianDrawDrawText_HIGHLIGHT_COLOR_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:labelRectangle_];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return [super hitLabelWithInt:x withInt:y];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:labelRectangle_];
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geo_ = geo;
}

- (jboolean)doUpdateFontSize {
  jint newFontSize = J2ObjCFpToInt(JavaLangMath_maxWithDouble_withDouble_(4, [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontSize] * [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text_)) getFontSizeMultiplier]));
  jint newFontStyle = [text_ getFontStyle];
  jboolean newSerifFont = [text_ isSerifFont];
  if (([text_ getTextString] != nil && [((OrgGeogebraCommonAwtGFont *) nil_chk(textFont_)) canDisplayUpToWithNSString:[text_ getTextString]] != -1) || fontSize_ != newFontSize || fontStyle_ != newFontStyle || newSerifFont != serifFont_) {
    [super updateFontSize];
    fontSize_ = newFontSize;
    fontStyle_ = newFontStyle;
    serifFont_ = newSerifFont;
    OrgGeogebraCommonMainApp *app = [view_ getApplication];
    textFont_ = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getFontCanDisplayWithNSString:[text_ getTextString] withBoolean:serifFont_ withInt:fontStyle_ withInt:fontSize_];
    return YES;
  }
  return NO;
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo_, [OrgGeogebraCommonKernelGeosGeoText class])) isAbsoluteScreenLocActive] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return labelRectangle_;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonEuclidianDrawDrawText class]) {
    OrgGeogebraCommonEuclidianDrawDrawText_HIGHLIGHT_COLOR_ = OrgGeogebraCommonAwtGColor_get_LIGHT_GRAY_();
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonEuclidianDrawDrawText)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoText:", "DrawText", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "doUpdateFontSize", NULL, "Z", 0x2, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HIGHLIGHT_COLOR_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonEuclidianDrawDrawText_HIGHLIGHT_COLOR_, NULL,  },
    { "text_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isLaTeX_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fontSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "fontStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "serifFont_", NULL, 0x2, "Z", NULL, NULL,  },
    { "textFont_", NULL, 0x2, "Lorg.geogebra.common.awt.GFont;", NULL, NULL,  },
    { "loc_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "oldXpos_", NULL, 0x2, "I", NULL, NULL,  },
    { "oldYpos_", NULL, 0x2, "I", NULL, NULL,  },
    { "needsBoundingBoxOld_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawText = { 2, "DrawText", "org.geogebra.common.euclidian.draw", NULL, 0x11, 11, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawText;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawText_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonEuclidianDrawDrawText *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoText *text) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->fontSize_ = -1;
  self->fontStyle_ = -1;
  self->view_ = view;
  self->text_ = text;
  self->geo_ = text;
  self->textFont_ = [((OrgGeogebraCommonAwtGFont *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getApplication])) getPlainFontCommon])) deriveFontWithInt:OrgGeogebraCommonAwtGFont_PLAIN withInt:[view getFontSize]];
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:text];
  OrgGeogebraCommonEuclidianDrawDrawText_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawText *new_OrgGeogebraCommonEuclidianDrawDrawText_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoText *text) {
  OrgGeogebraCommonEuclidianDrawDrawText *self = [OrgGeogebraCommonEuclidianDrawDrawText alloc];
  OrgGeogebraCommonEuclidianDrawDrawText_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoText_(self, view, text);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawText_update(OrgGeogebraCommonEuclidianDrawDrawText *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_ && ![((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) isNeedsUpdatedBoundingBox]) return;
  if (self->isLaTeX_) [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->text_];
  if (self->isLaTeX_) [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->text_];
  NSString *newText = [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) getTextString];
  jboolean textChanged = self->labelDesc_ == nil || ![self->labelDesc_ isEqual:newText] || self->isLaTeX_ != [self->text_ isLaTeX] || [self->text_ isNeedsUpdatedBoundingBox] != self->needsBoundingBoxOld_;
  self->labelDesc_ = newText;
  self->isLaTeX_ = [self->text_ isLaTeX];
  self->needsBoundingBoxOld_ = [self->text_ isNeedsUpdatedBoundingBox];
  if ([self->text_ isAbsoluteScreenLocActive]) {
    self->xLabel_ = [self->text_ getAbsoluteScreenLocX];
    self->yLabel_ = [self->text_ getAbsoluteScreenLocY];
  }
  else {
    self->loc_ = [self->text_ getStartPoint];
    if (self->loc_ == nil) {
      self->xLabel_ = J2ObjCFpToInt([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getxZero]);
      self->yLabel_ = J2ObjCFpToInt([self->view_ getyZero]);
    }
    else {
      if (![self->loc_ isDefined]) {
        self->isVisible_ = NO;
        return;
      }
      OrgGeogebraCommonKernelMatrixCoords *p = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[self->loc_ getInhomCoordsInD3]];
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getZ])) {
        self->isVisible_ = NO;
        return;
      }
      self->xLabel_ = [self->view_ toScreenCoordXWithDouble:[p getX]];
      self->yLabel_ = [self->view_ toScreenCoordYWithDouble:[p getY]];
    }
    self->xLabel_ += self->text_->labelOffsetX_;
    self->yLabel_ += self->text_->labelOffsetY_;
  }
  jboolean positionChanged = self->xLabel_ != self->oldXpos_ || self->yLabel_ != self->oldYpos_;
  self->oldXpos_ = self->xLabel_;
  self->oldYpos_ = self->yLabel_;
  jboolean fontChanged = [self doUpdateFontSize];
  if ([self->text_ isNeedsUpdatedBoundingBox] && (textChanged || positionChanged || fontChanged || [((OrgGeogebraCommonKernelKernel *) nil_chk([self->text_ getKernel])) getForceUpdatingBoundingBox] || [self->text_ getBoundingBox] == nil)) {
    if (self->isLaTeX_) [self drawMultilineLaTeXWithOrgGeogebraCommonAwtGGraphics2D:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getTempGraphics2DWithOrgGeogebraCommonAwtGFont:self->textFont_] withOrgGeogebraCommonAwtGFont:self->textFont_ withOrgGeogebraCommonAwtGColor:[self->geo_ getObjectColor] withOrgGeogebraCommonAwtGColor:[self->view_ getBackgroundCommon]];
    else [self drawMultilineTextWithOrgGeogebraCommonAwtGGraphics2D:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getTempGraphics2DWithOrgGeogebraCommonAwtGFont:self->textFont_] withOrgGeogebraCommonAwtGFont:self->textFont_];
    jdouble xRW = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:[((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) getX]];
    jdouble yRW = [self->view_ toRealWorldCoordYWithDouble:[self->labelRectangle_ getY]];
    [self->text_ setBoundingBoxWithDouble:xRW withDouble:yRW withDouble:[self->labelRectangle_ getWidth] * [self->view_ getInvXscale] withDouble:-[self->labelRectangle_ getHeight] * [self->view_ getInvYscale]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawText)
