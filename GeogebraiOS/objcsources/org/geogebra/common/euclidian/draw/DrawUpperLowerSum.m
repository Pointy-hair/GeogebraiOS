//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawUpperLowerSum.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/draw/DrawUpperLowerSum.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionAreaSums.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum () {
 @public
  OrgGeogebraCommonKernelGeosGeoNumeric *sum_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> a_, b_;
  jboolean isVisible_, labelVisible_;
  OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *algo_;
  OrgGeogebraCommonEuclidianGeneralPathClipped *gp_;
  IOSDoubleArray *coords_;
  jboolean trapeziums_;
  jboolean histogram_;
  jboolean barchartFreqs_, barchartFreqsWidth_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)updateBarChart;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum, sum_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum, a_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum, b_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum, algo_, OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum, gp_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum, coords_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_init__(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_update(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_updateBarChart(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *self);

@implementation OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                      withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n {
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, view, n);
  return self;
}

- (void)init__ {
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_init__(self);
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_update(self);
}

- (void)updateBarChart {
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_updateBarChart(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    @try {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) getSelColor]];
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
        [g2 drawWithOrgGeogebraCommonAwtGShape:gp_];
      }
    }
    @catch (JavaLangException *e) {
      OrgGeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    }
    @try {
      [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:gp_ withBoolean:NO];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    @try {
      if (((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_))->lineThickness_ > 0) {
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) getObjectColor]];
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
        [g2 drawWithOrgGeogebraCommonAwtGShape:gp_];
      }
    }
    @catch (JavaLangException *e) {
      OrgGeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    }
    if (labelVisible_) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLabelColor]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return gp_ != nil && ([gp_ containsWithInt:x withInt:y] || [gp_ intersectsWithInt:x - 3 withInt:y - 3 withInt:6 withInt:6]);
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return gp_ != nil && [gp_ intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) getBounds];
}

- (void)dealloc {
  RELEASE_(sum_);
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(algo_);
  RELEASE_(gp_);
  RELEASE_(coords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoNumeric:", "DrawUpperLowerSum", NULL, 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateBarChart", NULL, "V", 0x2, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sum_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "algo_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoFunctionAreaSums;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "trapeziums_", NULL, 0x2, "Z", NULL, NULL,  },
    { "histogram_", NULL, 0x2, "Z", NULL, NULL,  },
    { "barchartFreqs_", NULL, 0x2, "Z", NULL, NULL,  },
    { "barchartFreqsWidth_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum = { 2, "DrawUpperLowerSum", "org.geogebra.common.euclidian.draw", NULL, 0x1, 11, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoNumeric *n) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_set_sum_(self, n);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, n);
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(n)) setDrawableWithBoolean:YES];
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_init__(self);
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *new_OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoNumeric *n) {
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *self = [OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum alloc];
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, view, n);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_init__(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *self) {
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_set_algo_(self, (OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getDrawAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums class]));
  self->trapeziums_ = [((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(self->algo_)) useTrapeziums];
  self->histogram_ = [self->algo_ isHistogram];
  self->barchartFreqs_ = ([self->algo_ getType] == OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums_SumTypeEnum_get_BARCHART_FREQUENCY_TABLE());
  self->barchartFreqsWidth_ = ([self->algo_ getType] == OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums_SumTypeEnum_get_BARCHART_FREQUENCY_TABLE_WIDTH());
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_set_a_(self, [self->algo_ getA]);
  OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_set_b_(self, [self->algo_ getB]);
}

void OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_update(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  if (![((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([self->geo_ getDrawAlgorithm])) isEqual:[self->geo_ getParentAlgorithm]]) OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_init__(self);
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->sum_];
  if (self->gp_ == nil) OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_setAndConsume_gp_(self, new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
  if (self->barchartFreqs_ || self->histogram_) {
    OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_updateBarChart(self);
    return;
  }
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gp_)) reset];
  jdouble aRW = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->a_)) getDouble];
  jdouble bRW = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->b_)) getDouble];
  jdouble ax = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXdWithDouble:aRW];
  jdouble bx = [self->view_ toScreenCoordXdWithDouble:bRW];
  jdouble y0 = [self->view_ getyZero];
  jint N = [((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(self->algo_)) getIntervals];
  IOSDoubleArray *leftBorder = [self->algo_ getLeftBorder];
  IOSDoubleArray *yval = [self->algo_ getValues];
  jdouble x = ax;
  jdouble y = y0;
  [self->gp_ moveToWithDouble:x withDouble:y];
  for (jint i = 0; i < N; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = IOSDoubleArray_Get(nil_chk(leftBorder), i);
    *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(nil_chk(yval), i);
    [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
    x = IOSDoubleArray_Get(self->coords_, 0);
    if (self->trapeziums_) [self->gp_ lineToWithDouble:x withDouble:IOSDoubleArray_Get(self->coords_, 1)];
    else [self->gp_ lineToWithDouble:x withDouble:y];
    [self->gp_ lineToWithDouble:x withDouble:y0];
    [self->gp_ moveToWithDouble:x withDouble:y];
    y = IOSDoubleArray_Get(self->coords_, 1);
    [self->gp_ moveToWithDouble:x withDouble:y0];
    [self->gp_ lineToWithDouble:x withDouble:y];
  }
  if (self->trapeziums_) {
    *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = IOSDoubleArray_Get(nil_chk(leftBorder), N);
    *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(nil_chk(yval), N);
    [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
    [self->gp_ lineToWithDouble:bx withDouble:IOSDoubleArray_Get(self->coords_, 1)];
  }
  else if (!self->barchartFreqsWidth_) {
    [self->gp_ lineToWithDouble:bx withDouble:y];
  }
  if (self->histogram_) [self->gp_ moveToWithDouble:bx withDouble:y0];
  else if (!self->barchartFreqsWidth_) [self->gp_ lineToWithDouble:bx withDouble:y0];
  [self->gp_ lineToWithDouble:ax withDouble:y0];
  if (![self->gp_ intersectsWithInt:0 withInt:0 withInt:[self->view_ getWidth] withInt:[self->view_ getHeight]]) {
    self->isVisible_ = NO;
  }
  if (self->labelVisible_) {
    self->xLabel_ = (jint) JavaLangMath_roundWithDouble_((ax + bx) / 2) - 6;
    self->yLabel_ = J2ObjCFpToInt([self->view_ getyZero]) - [self->view_ getFontSize];
    OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
    [self addLabelOffset];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum_updateBarChart(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum *self) {
  [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gp_)) reset];
  jdouble base = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getyZero];
  jint N = [((OrgGeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(self->algo_)) getIntervals];
  IOSDoubleArray *leftBorder = [self->algo_ getLeftBorder];
  IOSDoubleArray *yval = [self->algo_ getValues];
  [self->gp_ moveToWithDouble:[self->view_ toScreenCoordXdWithDouble:IOSDoubleArray_Get(nil_chk(leftBorder), 0)] withDouble:base];
  for (jint i = 0; i < N - 1; i++) {
    jdouble x0 = [self->view_ toScreenCoordXdWithDouble:IOSDoubleArray_Get(leftBorder, i)];
    jdouble height = [self->view_ toScreenCoordYdWithDouble:IOSDoubleArray_Get(nil_chk(yval), i)];
    jdouble x1 = [self->view_ toScreenCoordXdWithDouble:IOSDoubleArray_Get(leftBorder, i + 1)];
    [self->gp_ lineToWithDouble:x0 withDouble:height];
    [self->gp_ lineToWithDouble:x1 withDouble:height];
    [self->gp_ lineToWithDouble:x1 withDouble:base];
  }
  [self->gp_ lineToWithDouble:[self->view_ toScreenCoordXdWithDouble:IOSDoubleArray_Get(leftBorder, 0)] withDouble:base];
  if (![self->gp_ intersectsWithInt:0 withInt:0 withInt:[self->view_ getWidth] withInt:[self->view_ getHeight]]) {
    self->isVisible_ = NO;
  }
  if (self->labelVisible_) {
    self->xLabel_ = ([self->view_ toScreenCoordXWithDouble:IOSDoubleArray_Get(leftBorder, 0)] + [self->view_ toScreenCoordXWithDouble:IOSDoubleArray_Get(leftBorder, N - 1)]) / 2 - 6;
    self->yLabel_ = J2ObjCFpToInt([self->view_ getyZero]) - [self->view_ getFontSize];
    OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getLabelDescription]);
    [self addLabelOffset];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawUpperLowerSum)
