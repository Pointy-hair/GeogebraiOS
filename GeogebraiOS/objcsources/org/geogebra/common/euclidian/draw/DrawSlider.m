//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/draw/DrawSlider.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GEllipse2DDouble.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GLine2D.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawSlider.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

#define OrgGeogebraCommonEuclidianDrawDrawSlider_SELECTION_RADIUS_MIN 12

@interface OrgGeogebraCommonEuclidianDrawDrawSlider () {
 @public
  OrgGeogebraCommonKernelGeosGeoNumeric *number_;
  jboolean isVisible_, labelVisible_;
  IOSDoubleArray *coordsRW_;
  IOSDoubleArray *coordsScreen_;
  jint HIGHLIGHT_OFFSET_;
  jint diameter_, hightlightDiameter_, pointSize_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> circle_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> circleOuter_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> circleHighlight_;
  IOSDoubleArray *coords_;
  id<OrgGeogebraCommonAwtGLine2D> line_;
}

- (void)updatePointWithDouble:(jdouble)rwX
                   withDouble:(jdouble)rwY;

- (void)setPointSizeWithInt:(jint)pointSize;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, number_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, coordsRW_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, coordsScreen_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, circle_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, circleOuter_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, circleHighlight_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, line_, id<OrgGeogebraCommonAwtGLine2D>)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, SELECTION_RADIUS_MIN, jint)

static id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianDrawDrawSlider_borderStroke_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, borderStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawSlider, borderStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawSlider_update(OrgGeogebraCommonEuclidianDrawDrawSlider *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianDrawDrawSlider_hitPointWithInt_withInt_withInt_(OrgGeogebraCommonEuclidianDrawDrawSlider *self, jint x, jint y, jint hitThreshold);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawSlider_updatePointWithDouble_withDouble_(OrgGeogebraCommonEuclidianDrawDrawSlider *self, jdouble rwX, jdouble rwY);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawSlider_setPointSizeWithInt_(OrgGeogebraCommonEuclidianDrawDrawSlider *self, jint pointSize);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonEuclidianDrawDrawSlider)

@implementation OrgGeogebraCommonEuclidianDrawDrawSlider

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                      withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)number {
  OrgGeogebraCommonEuclidianDrawDrawSlider_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, view, number);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawSlider_update(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getSelColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawStraightLineWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk([((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) getP1])) getX] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk([line_ getP1])) getY] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk([line_ getP2])) getX] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk([line_ getP2])) getY]];
    if ([geo_ doHighlighting]) {
      [g2 fillWithOrgGeogebraCommonAwtGShape:circleHighlight_];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawSlider_borderStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:circleHighlight_];
    }
    else {
      [g2 fillWithOrgGeogebraCommonAwtGShape:circleOuter_];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawSlider_borderStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:circleOuter_];
    }
    [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
    [g2 fillWithOrgGeogebraCommonAwtGShape:circle_];
    [g2 setPaintWithOrgGeogebraCommonAwtGPaint:OrgGeogebraCommonAwtGColor_get_BLACK_()];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianDrawDrawSlider_borderStroke_];
    [g2 drawWithOrgGeogebraCommonAwtGShape:circle_];
    if (labelVisible_) {
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontPoint]];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return OrgGeogebraCommonEuclidianDrawDrawSlider_hitPointWithInt_withInt_withInt_(self, x, y, hitThreshold) || [self hitSliderWithInt:x withInt:y withInt:hitThreshold];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(circle_)) getBounds]];
}

- (jboolean)hitPointWithInt:(jint)x
                    withInt:(jint)y
                    withInt:(jint)hitThreshold {
  return OrgGeogebraCommonEuclidianDrawDrawSlider_hitPointWithInt_withInt_withInt_(self, x, y, hitThreshold);
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return [super hitLabelWithInt:x withInt:y];
}

- (jboolean)hitSliderWithInt:(jint)x
                     withInt:(jint)y
                     withInt:(jint)hitThreshold {
  return [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geo_ = geo;
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isAbsoluteScreenLocActive] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) getBounds];
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(circle_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect] || [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (void)updatePointWithDouble:(jdouble)rwX
                   withDouble:(jdouble)rwY {
  OrgGeogebraCommonEuclidianDrawDrawSlider_updatePointWithDouble_withDouble_(self, rwX, rwY);
}

- (void)setPointSizeWithInt:(jint)pointSize {
  OrgGeogebraCommonEuclidianDrawDrawSlider_setPointSizeWithInt_(self, pointSize);
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonEuclidianDrawDrawSlider class]) {
    OrgGeogebraCommonEuclidianDrawDrawSlider_borderStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getDefaultStroke();
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonEuclidianDrawDrawSlider)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoNumeric:", "DrawSlider", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "hitPointWithInt:withInt:withInt:", "hitPoint", "Z", 0x11, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "hitSliderWithInt:withInt:withInt:", "hitSlider", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "updatePointWithDouble:withDouble:", "updatePoint", "V", 0x2, NULL, NULL },
    { "setPointSizeWithInt:", "setPointSize", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "number_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "coordsRW_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coordsScreen_", NULL, 0x2, "[D", NULL, NULL,  },
    { "HIGHLIGHT_OFFSET_", NULL, 0x2, "I", NULL, NULL,  },
    { "SELECTION_RADIUS_MIN_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawSlider_SELECTION_RADIUS_MIN },
    { "diameter_", NULL, 0x2, "I", NULL, NULL,  },
    { "hightlightDiameter_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "circleOuter_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "circleHighlight_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "borderStroke_", NULL, 0xa, "Lorg.geogebra.common.awt.GBasicStroke;", &OrgGeogebraCommonEuclidianDrawDrawSlider_borderStroke_, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawSlider = { 2, "DrawSlider", "org.geogebra.common.euclidian.draw", NULL, 0x1, 14, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawSlider;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawSlider_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonEuclidianDrawDrawSlider *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoNumeric *number) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->coordsRW_ = [IOSDoubleArray newArrayWithLength:2];
  self->coordsScreen_ = [IOSDoubleArray newArrayWithLength:2];
  self->circle_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DDouble];
  self->circleOuter_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble];
  self->circleHighlight_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble];
  self->coords_ = [IOSDoubleArray newArrayWithLength:2];
  self->line_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D];
  self->view_ = view;
  self->number_ = number;
  self->geo_ = number;
  OrgGeogebraCommonEuclidianDrawDrawSlider_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawSlider *new_OrgGeogebraCommonEuclidianDrawDrawSlider_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoNumeric *number) {
  OrgGeogebraCommonEuclidianDrawDrawSlider *self = [OrgGeogebraCommonEuclidianDrawDrawSlider alloc];
  OrgGeogebraCommonEuclidianDrawDrawSlider_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, view, number);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawSlider_update(OrgGeogebraCommonEuclidianDrawDrawSlider *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (self->isVisible_) {
    jdouble widthRW;
    jdouble widthScreen;
    jboolean horizontal = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->number_)) isSliderHorizontal];
    if ([self->number_ isAbsoluteScreenLocActive]) {
      *IOSDoubleArray_GetRef(nil_chk(self->coordsScreen_), 0) = [self->number_ getSliderX];
      *IOSDoubleArray_GetRef(self->coordsScreen_, 1) = [self->number_ getSliderY] - 1;
      *IOSDoubleArray_GetRef(nil_chk(self->coordsRW_), 0) = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:IOSDoubleArray_Get(self->coordsScreen_, 0)];
      *IOSDoubleArray_GetRef(self->coordsRW_, 1) = [self->view_ toRealWorldCoordYWithDouble:IOSDoubleArray_Get(self->coordsScreen_, 1)];
      widthScreen = [self->number_ getSliderWidth];
      widthRW = horizontal ? widthScreen * [self->view_ getInvXscale] : widthScreen * [self->view_ getInvYscale];
    }
    else {
      *IOSDoubleArray_GetRef(nil_chk(self->coordsRW_), 0) = [self->number_ getSliderX];
      *IOSDoubleArray_GetRef(self->coordsRW_, 1) = [self->number_ getSliderY];
      *IOSDoubleArray_GetRef(nil_chk(self->coordsScreen_), 0) = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXdWithDouble:IOSDoubleArray_Get(self->coordsRW_, 0)];
      *IOSDoubleArray_GetRef(self->coordsScreen_, 1) = [self->view_ toScreenCoordYdWithDouble:IOSDoubleArray_Get(self->coordsRW_, 1)];
      widthRW = [self->number_ getSliderWidth];
      widthScreen = horizontal ? widthRW * [self->view_ getXscale] : widthRW * [self->view_ getYscale];
    }
    jdouble min = [self->number_ getIntervalMin];
    jdouble max = [self->number_ getIntervalMax];
    jdouble param = ([self->number_ getValue] - min) / (max - min);
    OrgGeogebraCommonEuclidianDrawDrawSlider_setPointSizeWithInt_(self, 2 + (self->number_->lineThickness_ + 1) / 3);
    self->labelVisible_ = [self->geo_ isLabelVisible];
    if (horizontal) {
      OrgGeogebraCommonEuclidianDrawDrawSlider_updatePointWithDouble_withDouble_(self, IOSDoubleArray_Get(nil_chk(self->coordsRW_), 0) + widthRW * param, IOSDoubleArray_Get(self->coordsRW_, 1));
      if (self->labelVisible_) {
        self->xLabel_ -= 15;
        self->yLabel_ -= 5;
      }
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:IOSDoubleArray_Get(nil_chk(self->coordsScreen_), 0) withDouble:IOSDoubleArray_Get(self->coordsScreen_, 1) withDouble:IOSDoubleArray_Get(self->coordsScreen_, 0) + widthScreen withDouble:IOSDoubleArray_Get(self->coordsScreen_, 1)];
    }
    else {
      OrgGeogebraCommonEuclidianDrawDrawSlider_updatePointWithDouble_withDouble_(self, IOSDoubleArray_Get(nil_chk(self->coordsRW_), 0), IOSDoubleArray_Get(self->coordsRW_, 1) + widthRW * param);
      if (self->labelVisible_) {
        self->xLabel_ += 5;
        self->yLabel_ += 2 * self->pointSize_ + 4;
      }
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:IOSDoubleArray_Get(nil_chk(self->coordsScreen_), 0) withDouble:IOSDoubleArray_Get(self->coordsScreen_, 1) withDouble:IOSDoubleArray_Get(self->coordsScreen_, 0) withDouble:IOSDoubleArray_Get(self->coordsScreen_, 1) - widthScreen];
    }
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->number_ withInt:2];
  }
}

jboolean OrgGeogebraCommonEuclidianDrawDrawSlider_hitPointWithInt_withInt_withInt_(OrgGeogebraCommonEuclidianDrawDrawSlider *self, jint x, jint y, jint hitThreshold) {
  jint r = hitThreshold + OrgGeogebraCommonEuclidianDrawDrawSlider_SELECTION_RADIUS_MIN;
  jdouble dx = IOSDoubleArray_Get(nil_chk(self->coords_), 0) - x;
  jdouble dy = IOSDoubleArray_Get(self->coords_, 1) - y;
  return dx < r && dx > -r && dx * dx + dy * dy <= r * r;
}

void OrgGeogebraCommonEuclidianDrawDrawSlider_updatePointWithDouble_withDouble_(OrgGeogebraCommonEuclidianDrawDrawSlider *self, jdouble rwX, jdouble rwY) {
  *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = rwX;
  *IOSDoubleArray_GetRef(self->coords_, 1) = rwY;
  self->labelVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isLabelVisible];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords_];
  jdouble xUL = (IOSDoubleArray_Get(self->coords_, 0) - self->pointSize_);
  jdouble yUL = (IOSDoubleArray_Get(self->coords_, 1) - self->pointSize_);
  [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circle_)) setFrameWithDouble:xUL withDouble:yUL withDouble:self->diameter_ withDouble:self->diameter_];
  [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circleHighlight_)) setFrameWithDouble:xUL - 2 * self->HIGHLIGHT_OFFSET_ withDouble:yUL - self->HIGHLIGHT_OFFSET_ * 2 withDouble:self->hightlightDiameter_ + 2 * self->HIGHLIGHT_OFFSET_ withDouble:self->hightlightDiameter_ + 2 * self->HIGHLIGHT_OFFSET_];
  [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circleOuter_)) setFrameWithDouble:xUL - self->HIGHLIGHT_OFFSET_ withDouble:yUL - self->HIGHLIGHT_OFFSET_ withDouble:self->hightlightDiameter_ withDouble:self->hightlightDiameter_];
  if (self->labelVisible_) {
    self->labelDesc_ = [self->geo_ getLabelDescription];
    self->xLabel_ = (jint) JavaLangMath_roundWithDouble_(IOSDoubleArray_Get(self->coords_, 0) + 4);
    self->yLabel_ = (jint) JavaLangMath_roundWithDouble_(yUL - self->pointSize_);
    [self addLabelOffsetEnsureOnScreen];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawSlider_setPointSizeWithInt_(OrgGeogebraCommonEuclidianDrawDrawSlider *self, jint pointSize) {
  if (self->pointSize_ != pointSize) {
    self->diameter_ = 2 * pointSize;
    self->HIGHLIGHT_OFFSET_ = pointSize / 2 + 1;
    self->hightlightDiameter_ = self->diameter_ + 2 * self->HIGHLIGHT_OFFSET_;
  }
  self->pointSize_ = pointSize;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawSlider)
