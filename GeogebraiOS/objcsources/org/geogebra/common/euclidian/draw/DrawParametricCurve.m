//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/draw/DrawParametricCurve.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/draw/DrawParametricCurve.h"
#include "org/geogebra/common/euclidian/plot/CurvePlotter.h"
#include "org/geogebra/common/euclidian/plot/GeneralPathClippedForCurvePlotter.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/VarString.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/kernelND/CurveEvaluable.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonEuclidianDrawDrawParametricCurve () {
 @public
  id<OrgGeogebraCommonKernelKernelNDCurveEvaluable> curve_;
  OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *gp_;
  jboolean isVisible_, labelVisible_, fillCurve_;
  JavaLangStringBuilder *labelSB_;
}

+ (jboolean)fillingWithOrgGeogebraCommonKernelKernelNDCurveEvaluable:(id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>)curve;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawParametricCurve, curve_, id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawParametricCurve, gp_, OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawParametricCurve, labelSB_, JavaLangStringBuilder *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawParametricCurve_update(OrgGeogebraCommonEuclidianDrawDrawParametricCurve *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawParametricCurve_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawParametricCurve *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianDrawDrawParametricCurve_fillingWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_(id<OrgGeogebraCommonKernelKernelNDCurveEvaluable> curve);

@implementation OrgGeogebraCommonEuclidianDrawDrawParametricCurve

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
              withOrgGeogebraCommonKernelKernelNDCurveEvaluable:(id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>)curve {
  OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(self, view, curve);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawParametricCurve_update(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
    }
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
    if (fillCurve_) {
      @try {
        [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:([geo_ isInverseFill] ? ((id) [self getShape]) : gp_) withBoolean:NO];
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
      }
    }
    if (labelVisible_) {
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawParametricCurve_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if (isVisible_) {
    id<OrgGeogebraCommonAwtGShape> t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isInverseFill] ? ((id) [self getShape]) : gp_;
    if (strokedShape_ == nil) {
      strokedShape_ = [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithOrgGeogebraCommonAwtGShape:gp_];
    }
    if ([geo_ getAlphaValue] > 0.0f || [geo_ isHatchingEnabled]) {
      return [t intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
    }
    if ([geo_ isGeoFunction]) {
      OrgGeogebraCommonKernelGeosGeoFunction *f = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo_, [OrgGeogebraCommonKernelGeosGeoFunction class]);
      jdouble rwx = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:x];
      jdouble low = [view_ toRealWorldCoordYWithDouble:y + hitThreshold];
      jdouble high = [view_ toRealWorldCoordYWithDouble:y - hitThreshold];
      jdouble dx = hitThreshold * [view_ getInvXscale];
      jdouble left = [f evaluateWithDouble:rwx - dx];
      if (left >= low && left <= high) {
        return YES;
      }
      jdouble right = [f evaluateWithDouble:rwx + dx];
      if (right >= low && right <= high) {
        return YES;
      }
      jdouble middle = [f evaluateWithDouble:rwx];
      if (middle >= low && middle <= high) {
        return YES;
      }
      if ((right < low && left < low && middle < low) || (right > high && left > high && middle > high) || (!OrgGeogebraCommonKernelArithmeticMyDouble_isFiniteWithDouble_(right) && !OrgGeogebraCommonKernelArithmeticMyDouble_isFiniteWithDouble_(left) && !OrgGeogebraCommonKernelArithmeticMyDouble_isFiniteWithDouble_(middle))) {
        return NO;
      }
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$DCDCD", @"FALLBACK TO BUGGY AWT:", middle, ':', low, '-', high));
      return [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold] && ![gp_ containsWithDouble:x - hitThreshold withDouble:y - hitThreshold withDouble:2 * hitThreshold withDouble:2 * hitThreshold];
    }
    return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
  }
  return NO;
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  if (isVisible_) {
    id<OrgGeogebraCommonAwtGShape> t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isInverseFill] ? ((id) [self getShape]) : gp_;
    if (strokedShape_ == nil) {
      strokedShape_ = [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithOrgGeogebraCommonAwtGShape:gp_];
    }
    if ([geo_ getAlphaValue] > 0.0f || [geo_ isHatchingEnabled]) {
      return [t intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
    }
    return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
  }
  return NO;
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return gp_ != nil && [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[gp_ getBounds]];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geo_ = geo;
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![((id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>) nil_chk(curve_)) isClosedPath] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithOrgGeogebraCommonAwtGRectangle:[((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) getBounds]];
}

+ (jboolean)fillingWithOrgGeogebraCommonKernelKernelNDCurveEvaluable:(id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>)curve {
  return OrgGeogebraCommonEuclidianDrawDrawParametricCurve_fillingWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_(curve);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelKernelNDCurveEvaluable:", "DrawParametricCurve", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "fillingWithOrgGeogebraCommonKernelKernelNDCurveEvaluable:", "filling", "Z", 0x1a, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "curve_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.CurveEvaluable;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.euclidian.plot.GeneralPathClippedForCurvePlotter;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fillCurve_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelSB_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawParametricCurve = { 2, "DrawParametricCurve", "org.geogebra.common.euclidian.draw", NULL, 0x1, 11, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawParametricCurve;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(OrgGeogebraCommonEuclidianDrawDrawParametricCurve *self, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDCurveEvaluable> curve) {
  (void) OrgGeogebraCommonEuclidianDrawable_init(self);
  self->labelSB_ = new_JavaLangStringBuilder_init();
  self->view_ = view;
  self->curve_ = curve;
  self->geo_ = [((id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>) nil_chk(curve)) toGeoElement];
  OrgGeogebraCommonEuclidianDrawDrawParametricCurve_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawParametricCurve *new_OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDCurveEvaluable> curve) {
  OrgGeogebraCommonEuclidianDrawDrawParametricCurve *self = [OrgGeogebraCommonEuclidianDrawDrawParametricCurve alloc];
  OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(self, view, curve);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawParametricCurve_update(OrgGeogebraCommonEuclidianDrawDrawParametricCurve *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->geo_];
  if (self->gp_ == nil) self->gp_ = new_OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_);
  [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(self->gp_)) reset];
  self->fillCurve_ = OrgGeogebraCommonEuclidianDrawDrawParametricCurve_fillingWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_(self->curve_);
  jdouble min = [((id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>) nil_chk(self->curve_)) getMinParameter];
  jdouble max = [self->curve_ getMaxParameter];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->curve_ toGeoElement])) isGeoFunction]) {
    jdouble minView = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXmin];
    jdouble maxView = [self->view_ getXmax];
    if (min < minView || JavaLangDouble_isInfiniteWithDouble_(min)) min = minView;
    if (max > maxView || JavaLangDouble_isInfiniteWithDouble_(max)) max = maxView;
  }
  OrgGeogebraCommonAwtGPoint *labelPoint;
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(min, max)) {
    IOSDoubleArray *eval = [IOSDoubleArray newArrayWithLength:2];
    [self->curve_ evaluateCurveWithDouble:min withDoubleArray:eval];
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:eval];
    labelPoint = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(J2ObjCFpToInt(IOSDoubleArray_Get(eval, 0)), J2ObjCFpToInt(IOSDoubleArray_Get(eval, 1)));
  }
  else {
    labelPoint = OrgGeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withOrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(self->curve_, min, max, self->view_, self->gp_, self->labelVisible_, self->fillCurve_ ? OrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_CORNER() : OrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_MOVE_TO());
  }
  if (![self->gp_ intersectsWithInt:0 withInt:0 withInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]]) {
    self->isVisible_ = NO;
  }
  if (labelPoint != nil) {
    self->xLabel_ = labelPoint->x_;
    self->yLabel_ = labelPoint->y_;
    {
      OrgGeogebraCommonKernelStringTemplate *tpl;
      switch (self->geo_->labelMode_) {
        case OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE:
        tpl = OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_();
        [((JavaLangStringBuilder *) nil_chk(self->labelSB_)) setLengthWithInt:0];
        (void) [self->labelSB_ appendWithChar:'$'];
        (void) [self->labelSB_ appendWithNSString:[self->geo_ getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [self->labelSB_ appendWithChar:'('];
        (void) [self->labelSB_ appendWithNSString:[((id<OrgGeogebraCommonKernelVarString>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelVarString))) getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [self->labelSB_ appendWithNSString:@")\\;=\\;"];
        (void) [self->labelSB_ appendWithNSString:[self->geo_ getLaTeXdescription]];
        (void) [self->labelSB_ appendWithChar:'$'];
        self->labelDesc_ = [self->labelSB_ description];
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE:
        [((JavaLangStringBuilder *) nil_chk(self->labelSB_)) setLengthWithInt:0];
        (void) [self->labelSB_ appendWithChar:'$'];
        (void) [self->labelSB_ appendWithNSString:[self->geo_ getLaTeXdescription]];
        (void) [self->labelSB_ appendWithChar:'$'];
        self->labelDesc_ = [self->labelSB_ description];
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION:
        default:
        self->labelDesc_ = [self->geo_ getLabelDescription];
      }
    }
    [self addLabelOffsetEnsureOnScreen];
  }
  if ([self->geo_ isInverseFill]) {
    [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[self->view_ getBoundingPath]]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithOrgGeogebraCommonAwtGArea:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithOrgGeogebraCommonAwtGShape:self->gp_]];
  }
  if ([self->curve_ getTrace]) {
    self->isTracing__ = YES;
    id<OrgGeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
    if (g2 != nil) OrgGeogebraCommonEuclidianDrawDrawParametricCurve_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
}

void OrgGeogebraCommonEuclidianDrawDrawParametricCurve_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawParametricCurve *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
  [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:self->gp_];
}

jboolean OrgGeogebraCommonEuclidianDrawDrawParametricCurve_fillingWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_(id<OrgGeogebraCommonKernelKernelNDCurveEvaluable> curve) {
  OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initialize();
  return ![((id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>) nil_chk(curve)) isFunctionInX] && ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([curve toGeoElement])) getAlphaValue] > 0 || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([curve toGeoElement])) isHatchingEnabled]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawParametricCurve)
