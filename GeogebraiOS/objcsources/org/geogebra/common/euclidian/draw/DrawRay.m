//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawRay.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GLine2D.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/clipping/ClipLine.h"
#include "org/geogebra/common/euclidian/draw/DrawRay.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonEuclidianDrawDrawRay () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> ray_;
  jboolean isVisible_, labelVisible_;
  JavaUtilArrayList *points_;
  id<OrgGeogebraCommonAwtGLine2D> line_;
  IOSDoubleArray *a_;
  IOSDoubleArray *v_;
  OrgGeogebraCommonKernelMatrixCoords *tmpCoords2_;
  OrgGeogebraCommonAwtGPoint2D *endPoint_;
}

- (void)setClippedLine;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawRay, ray_, id<OrgGeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawRay, points_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawRay, line_, id<OrgGeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawRay, a_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawRay, v_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawRay, tmpCoords2_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawRay, endPoint_, OrgGeogebraCommonAwtGPoint2D *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawRay_update(OrgGeogebraCommonEuclidianDrawDrawRay *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawRay_setClippedLine(OrgGeogebraCommonEuclidianDrawDrawRay *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawRay_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawRay *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawRay_updatePreview(OrgGeogebraCommonEuclidianDrawDrawRay *self);

@implementation OrgGeogebraCommonEuclidianDrawDrawRay

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                   withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)ray {
  OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, view, ray);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points {
  OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawRay_update(self);
}

- (void)updateWithBoolean:(jboolean)showLabel {
  isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible];
  if (isVisible_) {
    OrgGeogebraCommonKernelMatrixCoords *equation = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(ray_)) getCartesianEquationVectorWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
    if (equation == nil) {
      isVisible_ = NO;
      return;
    }
    OrgGeogebraCommonKernelMatrixCoords *A = [view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[ray_ getStartInhomCoords]];
    if (tmpCoords2_ == nil) {
      OrgGeogebraCommonEuclidianDrawDrawRay_setAndConsume_tmpCoords2_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(2));
    }
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords2_)) setXWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getY]];
    [tmpCoords2_ setYWithDouble:[equation getX]];
    [self updateWithOrgGeogebraCommonKernelMatrixCoords:A withOrgGeogebraCommonKernelMatrixCoords:tmpCoords2_ withBoolean:showLabel];
  }
}

- (void)updateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)startPoint
              withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)direction
                                          withBoolean:(jboolean)showLabel {
  labelVisible_ = (showLabel && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isLabelVisible]);
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:ray_];
  *IOSDoubleArray_GetRef(nil_chk(a_), 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(startPoint)) getX];
  *IOSDoubleArray_GetRef(a_, 1) = [startPoint getY];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordsWithDoubleArray:a_];
  *IOSDoubleArray_GetRef(nil_chk(v_), 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction)) getX] * [view_ getXscale];
  *IOSDoubleArray_GetRef(v_, 1) = [direction getY] * [view_ getYscale];
  OrgGeogebraCommonEuclidianDrawDrawRay_setClippedLine(self);
  if (![((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:0 withInt:0 withInt:[view_ getWidth] withInt:[view_ getHeight]]) {
    isVisible_ = NO;
  }
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(ray_)) getTrace]) {
    isTracing__ = YES;
    id<OrgGeogebraCommonAwtGGraphics2D> g2 = [view_ getBackgroundGraphics];
    if (g2 != nil) OrgGeogebraCommonEuclidianDrawDrawRay_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (isTracing__) {
      isTracing__ = NO;
    }
  }
  if (labelVisible_) {
    OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLabelDescription]);
    jdouble nx = IOSDoubleArray_Get(v_, 0);
    jdouble ny = -IOSDoubleArray_Get(v_, 1);
    jdouble length = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(nx, ny);
    jdouble unit;
    if (length > 0.0) {
      unit = 16.0 / length;
    }
    else {
      nx = 0.0;
      ny = 1.0;
      unit = 16.0;
    }
    xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(a_, 0) + IOSDoubleArray_Get(v_, 0) / 2.0 + nx * unit));
    yLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(a_, 1) + IOSDoubleArray_Get(v_, 1) / 2.0 + ny * unit));
    [self addLabelOffset];
  }
}

- (void)setClippedLine {
  OrgGeogebraCommonEuclidianDrawDrawRay_setClippedLine(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
    }
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
    if (labelVisible_) {
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontLine]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)setStrokeWithOrgGeogebraCommonAwtGBasicStroke:(id<OrgGeogebraCommonAwtGBasicStroke>)objStroke {
  OrgGeogebraCommonEuclidianDrawable_set_objStroke_(self, objStroke);
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawRay_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updatePreview {
  OrgGeogebraCommonEuclidianDrawDrawRay_updatePreview(self);
}

- (void)updateMousePosWithDouble:(jdouble)mouseRWx
                      withDouble:(jdouble)mouseRWy {
  jdouble xRW = mouseRWx;
  jdouble yRW = mouseRWy;
  if (isVisible_) {
    jdouble xx = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordXWithDouble:xRW];
    jdouble yy = [view_ toScreenCoordYWithDouble:yRW];
    if ([((JavaUtilArrayList *) nil_chk(points_)) size] == 1 && [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) isAltDown]) {
      OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoPoint class]);
      jdouble px = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_;
      jdouble py = p->inhomY_;
      jdouble angle = JavaLangMath_atan2WithDouble_withDouble_(yRW - py, xRW - px) * 180 / JavaLangMath_PI;
      jdouble radius = JavaLangMath_sqrtWithDouble_((py - yRW) * (py - yRW) + (px - xRW) * (px - xRW));
      angle = JavaLangMath_roundWithDouble_(angle / 15) * 15;
      xRW = px + radius * JavaLangMath_cosWithDouble_(angle * JavaLangMath_PI / 180);
      yRW = py + radius * JavaLangMath_sinWithDouble_(angle * JavaLangMath_PI / 180);
      [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(endPoint_)) setXWithDouble:xRW];
      [endPoint_ setYWithDouble:yRW];
      [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithOrgGeogebraCommonAwtGPoint2D:endPoint_];
      xx = [view_ getxZero] + xRW * [view_ getXscale];
      yy = [view_ getyZero] - yRW * [view_ getYscale];
    }
    else [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithOrgGeogebraCommonAwtGPoint2D_Double:nil];
    *IOSDoubleArray_GetRef(nil_chk(v_), 0) = xx - IOSDoubleArray_Get(nil_chk(a_), 0);
    *IOSDoubleArray_GetRef(v_, 1) = yy - IOSDoubleArray_Get(a_, 1);
    OrgGeogebraCommonEuclidianDrawDrawRay_setClippedLine(self);
  }
}

- (void)drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getObjectColor]];
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:geo_];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
  }
}

- (void)disposePreview {
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (void)setIsVisible {
  isVisible_ = YES;
}

- (void)dealloc {
  RELEASE_(ray_);
  RELEASE_(points_);
  RELEASE_(line_);
  RELEASE_(a_);
  RELEASE_(v_);
  RELEASE_(tmpCoords2_);
  RELEASE_(endPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "DrawRay", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:", "DrawRay", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateWithBoolean:", "update", "V", 0x1, NULL, NULL },
    { "updateWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withBoolean:", "update", "V", 0x1, NULL, NULL },
    { "setClippedLine", NULL, "V", 0x2, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "setStrokeWithOrgGeogebraCommonAwtGBasicStroke:", "setStroke", "V", 0x11, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x11, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "setIsVisible", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ray_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "points_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "a_", NULL, 0x2, "[D", NULL, NULL,  },
    { "v_", NULL, 0x2, "[D", NULL, NULL,  },
    { "tmpCoords2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "endPoint_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawRay = { 2, "DrawRay", "org.geogebra.common.euclidian.draw", NULL, 0x1, 19, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawRay;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonEuclidianDrawDrawRay *self, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoLineND> ray) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawRay_set_line_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  OrgGeogebraCommonEuclidianDrawDrawRay_setAndConsume_a_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawRay_setAndConsume_v_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawRay_set_endPoint_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2D]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawRay_set_ray_(self, ray);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ray, [OrgGeogebraCommonKernelGeosGeoElement class]));
  OrgGeogebraCommonEuclidianDrawDrawRay_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawRay *new_OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoLineND> ray) {
  OrgGeogebraCommonEuclidianDrawDrawRay *self = [OrgGeogebraCommonEuclidianDrawDrawRay alloc];
  OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, view, ray);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawRay *self, OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawRay_set_line_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  OrgGeogebraCommonEuclidianDrawDrawRay_setAndConsume_a_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawRay_setAndConsume_v_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawRay_set_endPoint_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2D]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawRay_set_points_(self, points);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_RAY]);
  OrgGeogebraCommonEuclidianDrawDrawRay_updatePreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawRay *new_OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawDrawRay *self = [OrgGeogebraCommonEuclidianDrawDrawRay alloc];
  OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawRay_update(OrgGeogebraCommonEuclidianDrawDrawRay *self) {
  [self updateWithBoolean:YES];
}

void OrgGeogebraCommonEuclidianDrawDrawRay_setClippedLine(OrgGeogebraCommonEuclidianDrawDrawRay *self) {
  jboolean onscreenA = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) isOnScreenWithDoubleArray:self->a_];
  jdouble lambda;
  if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(self->v_), 0)) > JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->v_, 1))) {
    if (IOSDoubleArray_Get(self->v_, 0) > 0) lambda = ([self->view_ getWidth] - IOSDoubleArray_Get(nil_chk(self->a_), 0)) / IOSDoubleArray_Get(self->v_, 0);
    else lambda = -IOSDoubleArray_Get(nil_chk(self->a_), 0) / IOSDoubleArray_Get(self->v_, 0);
  }
  else {
    if (IOSDoubleArray_Get(self->v_, 1) > 0) lambda = ([self->view_ getHeight] - IOSDoubleArray_Get(nil_chk(self->a_), 1)) / IOSDoubleArray_Get(self->v_, 1);
    else lambda = -IOSDoubleArray_Get(nil_chk(self->a_), 1) / IOSDoubleArray_Get(self->v_, 1);
  }
  if (lambda < 0) {
    self->isVisible_ = NO;
    return;
  }
  if (onscreenA) {
    [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:IOSDoubleArray_Get(nil_chk(self->a_), 0) withDouble:IOSDoubleArray_Get(self->a_, 1) withDouble:IOSDoubleArray_Get(self->a_, 0) + lambda * IOSDoubleArray_Get(self->v_, 0) withDouble:IOSDoubleArray_Get(self->a_, 1) + lambda * IOSDoubleArray_Get(self->v_, 1)];
  }
  else {
    IOSObjectArray *clippedPoints = OrgGeogebraCommonEuclidianClippingClipLine_getClippedWithDouble_withDouble_withDouble_withDouble_withInt_withInt_withInt_withInt_(IOSDoubleArray_Get(nil_chk(self->a_), 0), IOSDoubleArray_Get(self->a_, 1), IOSDoubleArray_Get(self->a_, 0) + lambda * IOSDoubleArray_Get(self->v_, 0), IOSDoubleArray_Get(self->a_, 1) + lambda * IOSDoubleArray_Get(self->v_, 1), -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
    if (clippedPoints == nil) {
      self->isVisible_ = NO;
    }
    else {
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 0))) getX] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 0))) getY] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 1))) getX] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 1))) getY]];
    }
  }
}

void OrgGeogebraCommonEuclidianDrawDrawRay_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawRay *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getObjectColor]];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
  [g2 drawWithOrgGeogebraCommonAwtGShape:self->line_];
}

void OrgGeogebraCommonEuclidianDrawDrawRay_updatePreview(OrgGeogebraCommonEuclidianDrawDrawRay *self) {
  self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->points_)) size] == 1);
  if (self->isVisible_) {
    OrgGeogebraCommonKernelMatrixCoords *coords = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self->points_ getWithInt:0])) getInhomCoordsInD3]];
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getWithDoubleArray:self->a_];
    [self->view_ toScreenCoordsWithDoubleArray:self->a_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawRay)
