//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/euclidian/draw/DrawIntegral.java
//


#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawIntegral.h"
#include "org/geogebra/common/euclidian/plot/CurvePlotter.h"
#include "org/geogebra/common/euclidian/plot/GeneralPathClippedForCurvePlotter.h"
#include "org/geogebra/common/kernel/AlgoCasCellInterface.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralDefinite.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

@interface OrgGeogebraCommonEuclidianDrawDrawIntegral () {
 @public
  OrgGeogebraCommonKernelGeosGeoNumeric *n_;
  OrgGeogebraCommonKernelGeosGeoFunction *f_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> a_, b_;
  OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *gp_;
  jboolean isVisible_, labelVisible_;
  jboolean isCasObject_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)initFromCasObject OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawIntegral, n_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawIntegral, f_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawIntegral, a_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawIntegral, b_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawIntegral, gp_, OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawIntegral_init__(OrgGeogebraCommonEuclidianDrawDrawIntegral *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawIntegral_initFromCasObject(OrgGeogebraCommonEuclidianDrawDrawIntegral *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawIntegral_update(OrgGeogebraCommonEuclidianDrawDrawIntegral *self);

@implementation OrgGeogebraCommonEuclidianDrawDrawIntegral

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                      withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n
                                                    withBoolean:(jboolean)casObject {
  OrgGeogebraCommonEuclidianDrawDrawIntegral_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, view, n, casObject);
  return self;
}

- (void)init__ {
  OrgGeogebraCommonEuclidianDrawDrawIntegral_init__(self);
}

- (void)initFromCasObject {
  OrgGeogebraCommonEuclidianDrawDrawIntegral_initFromCasObject(self);
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawIntegral_update(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
    }
    [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:gp_ withBoolean:YES];
    if (geo_->lineThickness_ > 0) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
      [g2 drawWithValueStrokePureWithOrgGeogebraCommonAwtGShape:gp_];
    }
    if (labelVisible_) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return gp_ != nil && ([gp_ containsWithInt:x withInt:y] || [gp_ intersectsWithInt:x withInt:y withInt:hitThreshold]);
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return gp_ != nil && [gp_ intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) getBounds];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)dealloc {
  RELEASE_(n_);
  RELEASE_(f_);
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(gp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoNumeric:withBoolean:", "DrawIntegral", NULL, 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "initFromCasObject", NULL, "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.euclidian.plot.GeneralPathClippedForCurvePlotter;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isCasObject_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawIntegral = { 2, "DrawIntegral", "org.geogebra.common.euclidian.draw", NULL, 0x1, 11, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawIntegral;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawIntegral_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(OrgGeogebraCommonEuclidianDrawDrawIntegral *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoNumeric *n, jboolean casObject) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawIntegral_set_n_(self, n);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, n);
  self->isCasObject_ = casObject;
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(n)) setDrawableWithBoolean:YES];
  OrgGeogebraCommonEuclidianDrawDrawIntegral_init__(self);
  OrgGeogebraCommonEuclidianDrawDrawIntegral_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawIntegral *new_OrgGeogebraCommonEuclidianDrawDrawIntegral_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoNumeric *n, jboolean casObject) {
  OrgGeogebraCommonEuclidianDrawDrawIntegral *self = [OrgGeogebraCommonEuclidianDrawDrawIntegral alloc];
  OrgGeogebraCommonEuclidianDrawDrawIntegral_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, view, n, casObject);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawIntegral_init__(OrgGeogebraCommonEuclidianDrawDrawIntegral *self) {
  if (self->isCasObject_) {
    OrgGeogebraCommonEuclidianDrawDrawIntegral_initFromCasObject(self);
    return;
  }
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite *algo = (OrgGeogebraCommonKernelCasAlgoIntegralDefinite *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDrawAlgorithm], [OrgGeogebraCommonKernelCasAlgoIntegralDefinite class]);
  OrgGeogebraCommonEuclidianDrawDrawIntegral_set_f_(self, [((OrgGeogebraCommonKernelCasAlgoIntegralDefinite *) nil_chk(algo)) getFunction]);
  OrgGeogebraCommonEuclidianDrawDrawIntegral_set_a_(self, [algo getA]);
  OrgGeogebraCommonEuclidianDrawDrawIntegral_set_b_(self, [algo getB]);
}

void OrgGeogebraCommonEuclidianDrawDrawIntegral_initFromCasObject(OrgGeogebraCommonEuclidianDrawDrawIntegral *self) {
  id<OrgGeogebraCommonKernelAlgoCasCellInterface> algo = (id<OrgGeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDrawAlgorithm], @protocol(OrgGeogebraCommonKernelAlgoCasCellInterface));
  OrgGeogebraCommonKernelGeosGeoCasCell *cell = [((id<OrgGeogebraCommonKernelAlgoCasCellInterface>) nil_chk(algo)) getCasCell];
  OrgGeogebraCommonKernelArithmeticCommand *cmd = [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(cell)) getInputVE])) getTopLevelCommand];
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) getKernel];
  OrgGeogebraCommonEuclidianDrawDrawIntegral_setAndConsume_f_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction], [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:0])) wrap])) replaceCasCommands]) autorelease]));
  OrgGeogebraCommonEuclidianDrawDrawIntegral_setAndConsume_a_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_([cmd getKernel], [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:1])) wrap])) replaceCasCommands])) evaluateDouble]));
  OrgGeogebraCommonEuclidianDrawDrawIntegral_setAndConsume_b_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_([cmd getKernel], [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:2])) wrap])) replaceCasCommands])) evaluateDouble]));
}

void OrgGeogebraCommonEuclidianDrawDrawIntegral_update(OrgGeogebraCommonEuclidianDrawDrawIntegral *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->n_];
  if (![((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([self->geo_ getDrawAlgorithm])) isEqual:[self->geo_ getParentAlgorithm]] || self->isCasObject_) OrgGeogebraCommonEuclidianDrawDrawIntegral_init__(self);
  if (self->gp_ == nil) OrgGeogebraCommonEuclidianDrawDrawIntegral_setAndConsume_gp_(self, new_OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
  else [self->gp_ reset];
  jdouble aRW = JavaLangMath_minWithDouble_withDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->a_)) getDouble], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->b_)) getDouble]);
  jdouble bRW = JavaLangMath_maxWithDouble_withDouble_([self->a_ getDouble], [self->b_ getDouble]);
  aRW = JavaLangMath_maxWithDouble_withDouble_(aRW, [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXmin] - OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  if (aRW > [self->view_ getXmax] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE) return;
  bRW = JavaLangMath_minWithDouble_withDouble_(bRW, [self->view_ getXmax] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  if (bRW < [self->view_ getXmin] - OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE) return;
  jdouble ax = [self->view_ toScreenCoordXdWithDouble:aRW];
  jdouble bx = [self->view_ toScreenCoordXdWithDouble:bRW];
  jfloat y0 = (jfloat) [self->view_ getyZero];
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(aRW, bRW)) {
    [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(self->gp_)) moveToWithDouble:ax withDouble:y0];
    [self->gp_ lineToWithDouble:ax withDouble:[self->view_ toScreenCoordYdWithDouble:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) evaluateWithDouble:aRW]]];
    [self->gp_ lineToWithDouble:ax withDouble:y0];
    self->labelVisible_ = NO;
    return;
  }
  [((OrgGeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(self->gp_)) moveToWithDouble:ax withDouble:y0];
  OrgGeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withOrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(self->f_, aRW, bRW, self->view_, self->gp_, NO, OrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_LINE_TO());
  [self->gp_ lineToWithDouble:bx withDouble:y0];
  [self->gp_ lineToWithDouble:ax withDouble:y0];
  if (![self->gp_ intersectsWithInt:0 withInt:0 withInt:[self->view_ getWidth] withInt:[self->view_ getHeight]]) {
    self->isVisible_ = NO;
  }
  if (self->labelVisible_) {
    self->xLabel_ = (jint) JavaLangMath_roundWithDouble_((ax + bx) / 2) - 6;
    self->yLabel_ = J2ObjCFpToInt([self->view_ getyZero]) - [self->view_ getFontSize];
    OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
    [self addLabelOffset];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawIntegral)
