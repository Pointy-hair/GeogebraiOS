//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GLine2D.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/clipping/ClipLine.h"
#include "org/geogebra/common/euclidian/draw/DrawVector.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonEuclidianDrawDrawVector () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> P_;
  jboolean isVisible_, labelVisible_;
  jboolean traceDrawingNeeded_;
  id<OrgGeogebraCommonAwtGLine2D> line_;
  IOSDoubleArray *coordsA_;
  IOSDoubleArray *coordsB_;
  IOSDoubleArray *coordsV_;
  id<OrgGeogebraCommonAwtGGeneralPath> gp_;
  jboolean arrowheadVisible_, lineVisible_;
  JavaUtilArrayList *points_;
  OrgGeogebraCommonAwtGPoint2D *endPoint_;
}

- (void)setArrowWithFloat:(jfloat)lineThickness;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, v_, id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, P_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, line_, id<OrgGeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, coordsA_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, coordsB_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, coordsV_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, gp_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, points_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawVector, endPoint_, OrgGeogebraCommonAwtGPoint2D *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawVector_update(OrgGeogebraCommonEuclidianDrawDrawVector *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawVector_setArrowWithFloat_(OrgGeogebraCommonEuclidianDrawDrawVector *self, jfloat lineThickness);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawVector_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawVector *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawVector_updatePreview(OrgGeogebraCommonEuclidianDrawDrawVector *self);

@implementation OrgGeogebraCommonEuclidianDrawDrawVector

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                 withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v {
  OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, view, v);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points {
  OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawVector_update(self);
}

+ (jdouble)getFactorWithDouble:(jdouble)lineThickness {
  return OrgGeogebraCommonEuclidianDrawDrawVector_getFactorWithDouble_(lineThickness);
}

- (void)setArrowWithFloat:(jfloat)lineThickness {
  OrgGeogebraCommonEuclidianDrawDrawVector_setArrowWithFloat_(self, lineThickness);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if (traceDrawingNeeded_) {
      traceDrawingNeeded_ = NO;
      id<OrgGeogebraCommonAwtGGraphics2D> g2d = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundGraphics];
      if (g2d != nil) OrgGeogebraCommonEuclidianDrawDrawVector_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2d);
    }
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(v_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
      if (lineVisible_) [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
    }
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(v_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getObjectColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    if (lineVisible_) [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
    if (arrowheadVisible_) [g2 fillWithOrgGeogebraCommonAwtGShape:gp_];
    if (labelVisible_) {
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontVector]];
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(v_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelColor]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawVector_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updatePreview {
  OrgGeogebraCommonEuclidianDrawDrawVector_updatePreview(self);
}

- (void)updateMousePosWithDouble:(jdouble)xRWmouse
                      withDouble:(jdouble)yRWmouse {
  jdouble xRW = xRWmouse;
  jdouble yRW = yRWmouse;
  if (isVisible_) {
    if ([((JavaUtilArrayList *) nil_chk(points_)) size] == 1 && [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getEuclidianController])) isAltDown]) {
      OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoPoint class]);
      jdouble px = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_;
      jdouble py = p->inhomY_;
      jdouble angle = JavaLangMath_atan2WithDouble_withDouble_(yRW - py, xRW - px) * 180 / JavaLangMath_PI;
      jdouble radius = JavaLangMath_sqrtWithDouble_((py - yRW) * (py - yRW) + (px - xRW) * (px - xRW));
      angle = JavaLangMath_roundWithDouble_(angle / 15) * 15;
      xRW = px + radius * JavaLangMath_cosWithDouble_(angle * JavaLangMath_PI / 180);
      yRW = py + radius * JavaLangMath_sinWithDouble_(angle * JavaLangMath_PI / 180);
      [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(endPoint_)) setXWithDouble:xRW];
      [endPoint_ setYWithDouble:yRW];
      [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithOrgGeogebraCommonAwtGPoint2D:endPoint_];
    }
    else [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getEuclidianController])) setLineEndPointWithOrgGeogebraCommonAwtGPoint2D_Double:nil];
    if ([points_ size] > 0) {
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([points_ getWithInt:0])) getInhomCoordsInD3]])) getWithDoubleArray:coordsA_];
    }
    *IOSDoubleArray_GetRef(nil_chk(coordsB_), 0) = xRW;
    *IOSDoubleArray_GetRef(coordsB_, 1) = yRW;
    OrgGeogebraCommonEuclidianDrawDrawVector_setArrowWithFloat_(self, 1);
  }
}

- (void)drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getObjectColor]];
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:geo_];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    if (arrowheadVisible_) [g2 fillWithOrgGeogebraCommonAwtGShape:gp_];
    if (lineVisible_) [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
  }
}

- (void)disposePreview {
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return (lineVisible_ && [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:x - 3 withInt:y - 3 withInt:6 withInt:6]) || (arrowheadVisible_ && [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) intersectsWithInt:x - 3 withInt:y - 3 withInt:6 withInt:6]);
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return (lineVisible_ && [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) getBounds]]) || (arrowheadVisible_ && [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) getBounds]]);
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return (lineVisible_ && [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect]) || (arrowheadVisible_ && [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect]);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) return nil;
  id<OrgGeogebraCommonAwtGRectangle> ret = nil;
  if (lineVisible_) ret = [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) getBounds];
  if (arrowheadVisible_) ret = (ret == nil) ? [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithOrgGeogebraCommonAwtGRectangle:[((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) getBounds]] : [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithOrgGeogebraCommonAwtGRectangle:[ret union__WithOrgGeogebraCommonAwtGRectangle:[((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) getBounds]]];
  return ret;
}

- (void)dealloc {
  RELEASE_(v_);
  RELEASE_(P_);
  RELEASE_(line_);
  RELEASE_(coordsA_);
  RELEASE_(coordsB_);
  RELEASE_(coordsV_);
  RELEASE_(gp_);
  RELEASE_(points_);
  RELEASE_(endPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "DrawVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:", "DrawVector", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "getFactorWithDouble:", "getFactor", "D", 0x19, NULL, NULL },
    { "setArrowWithFloat:", "setArrow", "V", 0x2, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "v_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", NULL, NULL,  },
    { "P_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "traceDrawingNeeded_", NULL, 0x2, "Z", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "coordsA_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coordsB_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coordsV_", NULL, 0x2, "[D", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "arrowheadVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lineVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "points_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "endPoint_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawVector = { 2, "DrawVector", "org.geogebra.common.euclidian.draw", NULL, 0x1, 17, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawVector;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonEuclidianDrawDrawVector *self, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  self->traceDrawingNeeded_ = NO;
  OrgGeogebraCommonEuclidianDrawDrawVector_setAndConsume_coordsA_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawVector_setAndConsume_coordsB_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawVector_setAndConsume_coordsV_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawVector_set_endPoint_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawVector_set_v_(self, v);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(v, [OrgGeogebraCommonKernelGeosGeoElement class]));
  OrgGeogebraCommonEuclidianDrawDrawVector_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawVector *new_OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v) {
  OrgGeogebraCommonEuclidianDrawDrawVector *self = [OrgGeogebraCommonEuclidianDrawDrawVector alloc];
  OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, view, v);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawVector *self, OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  self->traceDrawingNeeded_ = NO;
  OrgGeogebraCommonEuclidianDrawDrawVector_setAndConsume_coordsA_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawVector_setAndConsume_coordsB_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawVector_setAndConsume_coordsV_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawVector_set_endPoint_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawVector_set_points_(self, points);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR]);
  OrgGeogebraCommonEuclidianDrawDrawVector_updatePreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawVector *new_OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawDrawVector *self = [OrgGeogebraCommonEuclidianDrawDrawVector alloc];
  OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawVector_update(OrgGeogebraCommonEuclidianDrawDrawVector *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->v_];
  OrgGeogebraCommonKernelMatrixCoords *coords;
  OrgGeogebraCommonEuclidianDrawDrawVector_set_P_(self, [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) getStartPoint]);
  if (self->P_ != nil && ![self->P_ isInfinite]) {
    coords = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[self->P_ getInhomCoordsInD3]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getZ])) {
      self->isVisible_ = NO;
      return;
    }
    *IOSDoubleArray_GetRef(nil_chk(self->coordsA_), 0) = [coords getX];
    *IOSDoubleArray_GetRef(self->coordsA_, 1) = [coords getY];
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(self->coordsA_), 0) = 0;
    *IOSDoubleArray_GetRef(self->coordsA_, 1) = 0;
  }
  coords = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[self->v_ getCoordsInD3]];
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getZ])) {
    self->isVisible_ = NO;
    return;
  }
  *IOSDoubleArray_GetRef(nil_chk(self->coordsV_), 0) = [coords getX];
  *IOSDoubleArray_GetRef(self->coordsV_, 1) = [coords getY];
  *IOSDoubleArray_GetRef(nil_chk(self->coordsB_), 0) = IOSDoubleArray_Get(nil_chk(self->coordsA_), 0) + IOSDoubleArray_Get(self->coordsV_, 0);
  *IOSDoubleArray_GetRef(self->coordsB_, 1) = IOSDoubleArray_Get(self->coordsA_, 1) + IOSDoubleArray_Get(self->coordsV_, 1);
  OrgGeogebraCommonEuclidianDrawDrawVector_setArrowWithFloat_(self, ((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->v_, [OrgGeogebraCommonKernelGeosGeoElement class]))->lineThickness_);
  if (self->labelVisible_) {
    OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
    self->xLabel_ = J2ObjCFpToInt(((IOSDoubleArray_Get(self->coordsA_, 0) + IOSDoubleArray_Get(self->coordsB_, 0)) / 2.0 + IOSDoubleArray_Get(self->coordsV_, 1)));
    self->yLabel_ = J2ObjCFpToInt(((IOSDoubleArray_Get(self->coordsA_, 1) + IOSDoubleArray_Get(self->coordsB_, 1)) / 2.0 - IOSDoubleArray_Get(self->coordsV_, 0)));
    [self addLabelOffset];
  }
  self->traceDrawingNeeded_ = [self->v_ getTrace];
  if ([self->v_ getTrace]) {
    self->isTracing__ = YES;
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
}

jdouble OrgGeogebraCommonEuclidianDrawDrawVector_getFactorWithDouble_(jdouble lineThickness) {
  OrgGeogebraCommonEuclidianDrawDrawVector_initialize();
  return lineThickness < 8 ? 12.0 + lineThickness : 3 * lineThickness;
}

void OrgGeogebraCommonEuclidianDrawDrawVector_setArrowWithFloat_(OrgGeogebraCommonEuclidianDrawDrawVector *self, jfloat lineThickness) {
  jboolean onscreenA = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coordsA_];
  jboolean onscreenB = [self->view_ toScreenCoordsWithDoubleArray:self->coordsB_];
  *IOSDoubleArray_GetRef(nil_chk(self->coordsV_), 0) = IOSDoubleArray_Get(nil_chk(self->coordsB_), 0) - IOSDoubleArray_Get(nil_chk(self->coordsA_), 0);
  *IOSDoubleArray_GetRef(self->coordsV_, 1) = IOSDoubleArray_Get(self->coordsB_, 1) - IOSDoubleArray_Get(self->coordsA_, 1);
  jdouble factor = OrgGeogebraCommonEuclidianDrawDrawVector_getFactorWithDouble_(lineThickness);
  jdouble length = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(IOSDoubleArray_Get(self->coordsV_, 0), IOSDoubleArray_Get(self->coordsV_, 1));
  if (length < factor) {
    factor = length;
  }
  if (length > 0.0) {
    *IOSDoubleArray_GetRef(self->coordsV_, 0) = (IOSDoubleArray_Get(self->coordsV_, 0) * factor) / length;
    *IOSDoubleArray_GetRef(self->coordsV_, 1) = (IOSDoubleArray_Get(self->coordsV_, 1) * factor) / length;
  }
  IOSDoubleArray *coordsF = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(coordsF, 0) = IOSDoubleArray_Get(self->coordsB_, 0) - IOSDoubleArray_Get(self->coordsV_, 0);
  *IOSDoubleArray_GetRef(coordsF, 1) = IOSDoubleArray_Get(self->coordsB_, 1) - IOSDoubleArray_Get(self->coordsV_, 1);
  if (self->line_ == nil) OrgGeogebraCommonEuclidianDrawDrawVector_set_line_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  self->lineVisible_ = YES;
  if (onscreenA && onscreenB) {
    [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:IOSDoubleArray_Get(self->coordsA_, 0) withDouble:IOSDoubleArray_Get(self->coordsA_, 1) withDouble:IOSDoubleArray_Get(coordsF, 0) withDouble:IOSDoubleArray_Get(coordsF, 1)];
  }
  else {
    IOSObjectArray *clippedPoints = OrgGeogebraCommonEuclidianClippingClipLine_getClippedWithDouble_withDouble_withDouble_withDouble_withInt_withInt_withInt_withInt_(IOSDoubleArray_Get(self->coordsA_, 0), IOSDoubleArray_Get(self->coordsA_, 1), IOSDoubleArray_Get(self->coordsB_, 0), IOSDoubleArray_Get(self->coordsB_, 1), -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
    if (clippedPoints == nil) {
      self->isVisible_ = NO;
      self->lineVisible_ = NO;
      self->arrowheadVisible_ = NO;
    }
    else {
      clippedPoints = OrgGeogebraCommonEuclidianClippingClipLine_getClippedWithDouble_withDouble_withDouble_withDouble_withInt_withInt_withInt_withInt_(IOSDoubleArray_Get(self->coordsA_, 0), IOSDoubleArray_Get(self->coordsA_, 1), IOSDoubleArray_Get(coordsF, 0), IOSDoubleArray_Get(coordsF, 1), -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
      if (clippedPoints != nil) [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 0))) getX] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 0))) getY] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 1))) getX] withDouble:[((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 1))) getY]];
      else self->lineVisible_ = NO;
    }
  }
  if (self->gp_ == nil) OrgGeogebraCommonEuclidianDrawDrawVector_set_gp_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
  else [self->gp_ reset];
  if (self->isVisible_) {
    if (length > 0) {
      *IOSDoubleArray_GetRef(self->coordsV_, 0) /= 4.0;
      *IOSDoubleArray_GetRef(self->coordsV_, 1) /= 4.0;
      [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) moveToWithFloat:(jfloat) IOSDoubleArray_Get(self->coordsB_, 0) withFloat:(jfloat) IOSDoubleArray_Get(self->coordsB_, 1)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(coordsF, 0) - IOSDoubleArray_Get(self->coordsV_, 1)) withFloat:(jfloat) (IOSDoubleArray_Get(coordsF, 1) + IOSDoubleArray_Get(self->coordsV_, 0))];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(coordsF, 0) + IOSDoubleArray_Get(self->coordsV_, 1)) withFloat:(jfloat) (IOSDoubleArray_Get(coordsF, 1) - IOSDoubleArray_Get(self->coordsV_, 0))];
      [self->gp_ closePath];
    }
    self->arrowheadVisible_ = (onscreenB || [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) intersectsWithInt:0 withInt:0 withInt:[self->view_ getWidth] withInt:[self->view_ getHeight]]);
  }
}

void OrgGeogebraCommonEuclidianDrawDrawVector_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawVector *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->v_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getObjectColor]];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
  if (self->lineVisible_) [g2 drawWithOrgGeogebraCommonAwtGShape:self->line_];
  if (self->arrowheadVisible_) [g2 fillWithOrgGeogebraCommonAwtGShape:self->gp_];
}

void OrgGeogebraCommonEuclidianDrawDrawVector_updatePreview(OrgGeogebraCommonEuclidianDrawDrawVector *self) {
  self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->points_)) size] == 1);
  if (self->isVisible_) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self->points_ getWithInt:0])) getInhomCoordsInD3]])) getWithDoubleArray:self->coordsA_];
    *IOSDoubleArray_GetRef(nil_chk(self->coordsB_), 0) = IOSDoubleArray_Get(nil_chk(self->coordsA_), 0);
    *IOSDoubleArray_GetRef(self->coordsB_, 1) = IOSDoubleArray_Get(self->coordsA_, 1);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawVector)
