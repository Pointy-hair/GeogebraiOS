//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawConicPart.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GArc2D.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/euclidian/clipping/ClipShape.h"
#include "org/geogebra/common/euclidian/draw/DrawConic.h"
#include "org/geogebra/common/euclidian/draw/DrawConicPart.h"
#include "org/geogebra/common/euclidian/draw/DrawRay.h"
#include "org/geogebra/common/euclidian/draw/DrawSegment.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoConicPartCircle.h"
#include "org/geogebra/common/kernel/algos/AlgoConicPartCircumcircle.h"
#include "org/geogebra/common/kernel/algos/AlgoSemicircle.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/Traceable.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

#define OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE 1
#define OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT 2
#define OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS 3

@interface OrgGeogebraCommonEuclidianDrawDrawConicPart () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoConicPartND> conicPart_;
  jboolean isVisible_, labelVisible_;
  id<OrgGeogebraCommonAwtGArc2D> arc_;
  id<OrgGeogebraCommonAwtGShape> shape_DrawConicPart_;
  IOSDoubleArray *halfAxes_;
  jint closure_;
  jint draw_type_;
  id<OrgGeogebraCommonAwtGAffineTransform> transform_;
  OrgGeogebraCommonEuclidianDrawDrawRay *drawRay1_, *drawRay2_;
  OrgGeogebraCommonEuclidianDrawDrawSegment *drawSegment_;
  IOSDoubleArray *coords_;
  JavaUtilArrayList *prevPoints_;
  IOSObjectArray *previewTempPoints_;
  jint previewMode_, neededPrevPoints_;
  jboolean isPreview_;
  IOSObjectArray *ev_;
}

- (void)initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND:(id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>)initConicPart OBJC_METHOD_FAMILY_NONE;

- (void)updateEllipse;

- (void)updateParallelLines;

- (void)initPreview OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, conicPart_, id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, arc_, id<OrgGeogebraCommonAwtGArc2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, shape_DrawConicPart_, id<OrgGeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, halfAxes_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, transform_, id<OrgGeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, drawRay1_, OrgGeogebraCommonEuclidianDrawDrawRay *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, drawRay2_, OrgGeogebraCommonEuclidianDrawDrawRay *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, drawSegment_, OrgGeogebraCommonEuclidianDrawDrawSegment *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, prevPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, previewTempPoints_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, ev_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, DRAW_TYPE_ELLIPSE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, DRAW_TYPE_SEGMENT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawConicPart, DRAW_TYPE_RAYS, jint)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConicPart_initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_(OrgGeogebraCommonEuclidianDrawDrawConicPart *self, id<OrgGeogebraCommonKernelKernelNDGeoConicPartND> initConicPart);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConicPart_update(OrgGeogebraCommonEuclidianDrawDrawConicPart *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConicPart_updateEllipse(OrgGeogebraCommonEuclidianDrawDrawConicPart *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConicPart_updateParallelLines(OrgGeogebraCommonEuclidianDrawDrawConicPart *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConicPart_drawWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawConicPart *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConicPart_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawConicPart *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawConicPart_initPreview(OrgGeogebraCommonEuclidianDrawDrawConicPart *self);

@implementation OrgGeogebraCommonEuclidianDrawDrawConicPart

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
              withOrgGeogebraCommonKernelKernelNDGeoConicPartND:(id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>)conicPart {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, view, conicPart);
  return self;
}

- (void)initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND:(id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>)initConicPart {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, initConicPart);
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                                        withInt:(jint)mode
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(self, view, mode, points);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_update(self);
}

- (void)updateEllipse {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_updateEllipse(self);
}

- (void)updateParallelLines {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_updateParallelLines(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_drawWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) return nil;
  switch (draw_type_) {
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE:
    return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(shape_DrawConicPart_)) getBounds];
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT:
    return [((OrgGeogebraCommonEuclidianDrawDrawSegment *) nil_chk(drawSegment_)) getBounds];
    default:
    return nil;
  }
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)initPreview {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_initPreview(self);
}

- (void)updatePreview {
  isVisible_ = (conicPart_ != nil && [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == neededPrevPoints_);
  if (isVisible_) {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(prevPoints_)) size]; i++) {
      OrgGeogebraCommonKernelMatrixCoords *c = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:i])) getCoordsInD3]];
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(c)) getZ])) {
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), i))) setUndefined];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), i))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[c projectInfDim] withBoolean:YES];
      }
    }
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) updateCascade];
  }
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
  if (isVisible_) {
    if ([((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == 2) {
      if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:0])) getInhomX], xRW) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) getInhomY], yRW)) {
        isVisible_ = NO;
        return;
      }
      if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:1])) getInhomX], xRW) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 1))) getInhomY], yRW)) {
        isVisible_ = NO;
        return;
      }
    }
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, ((IOSObjectArray *) nil_chk(previewTempPoints_))->size_ - 1))) setCoordsWithDouble:xRW withDouble:yRW withDouble:1.0];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, previewTempPoints_->size_ - 1))) updateCascade];
    OrgGeogebraCommonEuclidianDrawDrawConicPart_update(self);
  }
}

- (void)drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_drawWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)disposePreview {
  if (conicPart_ != nil) {
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) remove];
  }
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  if (!isVisible_) return NO;
  switch (draw_type_) {
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE:
    if ([self isFilled]) {
      [((id<OrgGeogebraCommonAwtGShape>) nil_chk(shape_DrawConicPart_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
    }
    if (strokedShape_ == nil) {
      OrgGeogebraCommonEuclidianDrawable_set_strokedShape_(self, [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithOrgGeogebraCommonAwtGShape:shape_DrawConicPart_]);
    }
    return [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT:
    return [((OrgGeogebraCommonEuclidianDrawDrawSegment *) nil_chk(drawSegment_)) intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:rect];
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS:
    return [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(drawRay1_)) intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:rect] || [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(drawRay2_)) intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:rect];
    default:
    return NO;
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if (!isVisible_) return NO;
  jboolean pathHit = NO, regionHit = NO;
  switch (draw_type_) {
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE:
    if (strokedShape_ == nil) {
      OrgGeogebraCommonEuclidianDrawable_set_strokedShape_(self, [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithOrgGeogebraCommonAwtGShape:shape_DrawConicPart_]);
    }
    pathHit = [((id<OrgGeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
    if (!pathHit && ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getAlphaValue] > 0.0f || [geo_ isHatchingEnabled])) {
      regionHit = [((id<OrgGeogebraCommonAwtGShape>) nil_chk(shape_DrawConicPart_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
    }
    break;
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT:
    pathHit = [((OrgGeogebraCommonEuclidianDrawDrawSegment *) nil_chk(drawSegment_)) hitWithInt:x withInt:y withInt:hitThreshold];
    break;
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS:
    pathHit = ([((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(drawRay1_)) hitWithInt:x withInt:y withInt:hitThreshold] || [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(drawRay2_)) hitWithInt:x withInt:y withInt:hitThreshold]);
    break;
    default:
    return NO;
  }
  if (pathHit) {
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()];
  }
  else if (regionHit) {
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING()];
  }
  else {
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_NONE()];
  }
  return pathHit || regionHit;
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  switch (draw_type_) {
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE:
    return [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:[((id<OrgGeogebraCommonAwtGShape>) nil_chk(shape_DrawConicPart_)) getBounds]];
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT:
    return [((OrgGeogebraCommonEuclidianDrawDrawSegment *) nil_chk(drawSegment_)) isInsideWithOrgGeogebraCommonAwtGRectangle:rect];
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS:
    default:
    return NO;
  }
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  switch (draw_type_) {
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE:
    return [super hitLabelWithInt:x withInt:y];
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT:
    return [((OrgGeogebraCommonEuclidianDrawDrawSegment *) nil_chk(drawSegment_)) hitLabelWithInt:x withInt:y];
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS:
    return [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(drawRay1_)) hitLabelWithInt:x withInt:y] || [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(drawRay2_)) hitLabelWithInt:x withInt:y];
    default:
    return NO;
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)dealloc {
  RELEASE_(conicPart_);
  RELEASE_(arc_);
  RELEASE_(shape_DrawConicPart_);
  RELEASE_(halfAxes_);
  RELEASE_(transform_);
  RELEASE_(drawRay1_);
  RELEASE_(drawRay2_);
  RELEASE_(drawSegment_);
  RELEASE_(coords_);
  RELEASE_(prevPoints_);
  RELEASE_(previewTempPoints_);
  RELEASE_(ev_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelKernelNDGeoConicPartND:", "DrawConicPart", NULL, 0x1, NULL, NULL },
    { "initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND:", "initConicPart", "V", 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withInt:withJavaUtilArrayList:", "DrawConicPart", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateEllipse", NULL, "V", 0x2, NULL, NULL },
    { "updateParallelLines", NULL, "V", 0x2, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "initPreview", NULL, "V", 0x2, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "conicPart_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoConicPartND;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "arc_", NULL, 0x2, "Lorg.geogebra.common.awt.GArc2D;", NULL, NULL,  },
    { "shape_DrawConicPart_", "shape", 0x2, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "halfAxes_", NULL, 0x2, "[D", NULL, NULL,  },
    { "closure_", NULL, 0x2, "I", NULL, NULL,  },
    { "DRAW_TYPE_ELLIPSE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE },
    { "DRAW_TYPE_SEGMENT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT },
    { "DRAW_TYPE_RAYS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS },
    { "draw_type_", NULL, 0x2, "I", NULL, NULL,  },
    { "transform_", NULL, 0x2, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "drawRay1_", NULL, 0x2, "Lorg.geogebra.common.euclidian.draw.DrawRay;", NULL, NULL,  },
    { "drawRay2_", NULL, 0x2, "Lorg.geogebra.common.euclidian.draw.DrawRay;", NULL, NULL,  },
    { "drawSegment_", NULL, 0x2, "Lorg.geogebra.common.euclidian.draw.DrawSegment;", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "prevPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "previewTempPoints_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "previewMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "neededPrevPoints_", NULL, 0x2, "I", NULL, NULL,  },
    { "isPreview_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ev_", NULL, 0x2, "[Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawConicPart = { 2, "DrawConicPart", "org.geogebra.common.euclidian.draw", NULL, 0x1, 20, methods, 22, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawConicPart;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(OrgGeogebraCommonEuclidianDrawDrawConicPart *self, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoConicPartND> conicPart) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawConicPart_set_arc_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D]);
  OrgGeogebraCommonEuclidianDrawDrawConicPart_set_transform_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAffineTransform]);
  OrgGeogebraCommonEuclidianDrawDrawConicPart_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  self->isPreview_ = NO;
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  self->isPreview_ = NO;
  OrgGeogebraCommonEuclidianDrawDrawConicPart_initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, conicPart);
  OrgGeogebraCommonEuclidianDrawDrawConicPart_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawConicPart *new_OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoConicPartND> conicPart) {
  OrgGeogebraCommonEuclidianDrawDrawConicPart *self = [OrgGeogebraCommonEuclidianDrawDrawConicPart alloc];
  OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, view, conicPart);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawConicPart_initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_(OrgGeogebraCommonEuclidianDrawDrawConicPart *self, id<OrgGeogebraCommonKernelKernelNDGeoConicPartND> initConicPart) {
  OrgGeogebraCommonEuclidianDrawDrawConicPart_set_conicPart_(self, initConicPart);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(initConicPart, [OrgGeogebraCommonKernelGeosGeoElement class]));
  OrgGeogebraCommonEuclidianDrawDrawConicPart_set_halfAxes_(self, [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(initConicPart, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) getHalfAxes]);
  self->closure_ = [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(initConicPart)) getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR ? OrgGeogebraCommonAwtGArc2D_PIE : OrgGeogebraCommonAwtGArc2D_OPEN;
}

void OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianDrawDrawConicPart *self, OrgGeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawConicPart_set_arc_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D]);
  OrgGeogebraCommonEuclidianDrawDrawConicPart_set_transform_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAffineTransform]);
  OrgGeogebraCommonEuclidianDrawDrawConicPart_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  self->isPreview_ = NO;
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawConicPart_set_prevPoints_(self, points);
  self->previewMode_ = mode;
  self->isPreview_ = YES;
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  self->neededPrevPoints_ = mode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE ? 1 : 2;
  OrgGeogebraCommonEuclidianDrawDrawConicPart_setAndConsume_previewTempPoints_(self, [IOSObjectArray newArrayWithLength:self->neededPrevPoints_ + 1 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < self->previewTempPoints_->size_; i++) {
    IOSObjectArray_SetAndConsume(self->previewTempPoints_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  }
  OrgGeogebraCommonEuclidianDrawDrawConicPart_initPreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawConicPart *new_OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points) {
  OrgGeogebraCommonEuclidianDrawDrawConicPart *self = [OrgGeogebraCommonEuclidianDrawDrawConicPart alloc];
  OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(self, view, mode, points);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawConicPart_update(OrgGeogebraCommonEuclidianDrawDrawConicPart *self) {
  self->isVisible_ = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible] && [self->geo_ isDefined]);
  if (self->isVisible_) {
    self->labelVisible_ = [self->geo_ isLabelVisible];
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:(OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])];
    switch ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) getType]) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      OrgGeogebraCommonEuclidianDrawDrawConicPart_updateEllipse(self);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      OrgGeogebraCommonEuclidianDrawDrawConicPart_updateParallelLines(self);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      self->isVisible_ = NO;
      break;
      default:
      self->isVisible_ = NO;
      return;
    }
    if (self->shape_DrawConicPart_ != nil && ![self->shape_DrawConicPart_ intersectsWithInt:0 withInt:0 withInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]]) {
      self->isVisible_ = NO;
    }
    if ([((id<OrgGeogebraCommonKernelGeosTraceable>) nil_chk(((id<OrgGeogebraCommonKernelGeosTraceable>) check_protocol_cast(self->conicPart_, @protocol(OrgGeogebraCommonKernelGeosTraceable))))) getTrace]) {
      self->isTracing__ = YES;
      id<OrgGeogebraCommonAwtGGraphics2D> g2 = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBackgroundGraphics];
      if (g2 != nil) OrgGeogebraCommonEuclidianDrawDrawConicPart_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
    }
    else {
      if (self->isTracing__) {
        self->isTracing__ = NO;
      }
    }
  }
}

void OrgGeogebraCommonEuclidianDrawDrawConicPart_updateEllipse(OrgGeogebraCommonEuclidianDrawDrawConicPart *self) {
  self->draw_type_ = OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE;
  jdouble xradius = IOSDoubleArray_Get(nil_chk(self->halfAxes_), 0) * [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXscale];
  jdouble yradius = IOSDoubleArray_Get(self->halfAxes_, 1) * [self->view_ getYscale];
  if (xradius > OrgGeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS || yradius > OrgGeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS) {
    self->isVisible_ = NO;
    return;
  }
  OrgGeogebraCommonKernelMatrixCoords *M;
  if (self->isPreview_) {
    M = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) getMidpoint3D])) getInhomCoords];
  }
  else {
    M = [self->view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) getMidpoint3D]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      self->isVisible_ = NO;
      return;
    }
  }
  if (self->ev_ == nil) {
    OrgGeogebraCommonEuclidianDrawDrawConicPart_setAndConsume_ev_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()]);
  }
  for (jint j = 0; j < 2; j++) {
    if (self->isPreview_) {
      IOSObjectArray_Set(nil_chk(self->ev_), j, [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) getEigenvec3DWithInt:j]);
    }
    else {
      IOSObjectArray_Set(nil_chk(self->ev_), j, [self->view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) getEigenvec3DWithInt:j]]);
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->ev_, j))) getZ])) {
        self->isVisible_ = NO;
        return;
      }
    }
  }
  [((id<OrgGeogebraCommonAwtGArc2D>) nil_chk(self->arc_)) setArcWithDouble:-IOSDoubleArray_Get(self->halfAxes_, 0) withDouble:-IOSDoubleArray_Get(self->halfAxes_, 1) withDouble:2 * IOSDoubleArray_Get(self->halfAxes_, 0) withDouble:2 * IOSDoubleArray_Get(self->halfAxes_, 1) withDouble:-JavaLangMath_toDegreesWithDouble_([((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(self->conicPart_)) getParameterStart]) withDouble:-JavaLangMath_toDegreesWithDouble_([self->conicPart_ getParameterExtent]) withInt:self->closure_];
  [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->transform_)) setTransformWithOrgGeogebraCommonAwtGAffineTransform:[self->view_ getCoordTransform]];
  [self->transform_ concatenateWithOrgGeogebraCommonAwtGAffineTransform:[((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([self->view_ getCompanion])) getTransformWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class]) withOrgGeogebraCommonKernelMatrixCoords:M withOrgGeogebraCommonKernelMatrixCoordsArray:self->ev_]];
  jint BIG_RADIUS = [self->view_ getWidth] + [self->view_ getHeight];
  if (xradius < BIG_RADIUS && yradius < BIG_RADIUS) {
    OrgGeogebraCommonEuclidianDrawDrawConicPart_set_shape_DrawConicPart_(self, [self->transform_ createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->arc_]);
  }
  else {
    OrgGeogebraCommonEuclidianDrawDrawConicPart_set_shape_DrawConicPart_(self, OrgGeogebraCommonEuclidianClippingClipShape_clipToRectWithOrgGeogebraCommonAwtGShape_withOrgGeogebraCommonAwtGAffineTransform_withOrgGeogebraCommonAwtGRectangle2D_(self->arc_, self->transform_, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:-1 withInt:-1 withInt:[self->view_ getWidth] + 2 withInt:[self->view_ getHeight] + 2]));
  }
  if (self->labelVisible_) {
    jdouble midAngle = [self->conicPart_ getParameterStart] + [self->conicPart_ getParameterExtent] / 2.0;
    *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = IOSDoubleArray_Get(self->halfAxes_, 0) * JavaLangMath_cosWithDouble_(midAngle);
    *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(self->halfAxes_, 1) * JavaLangMath_sinWithDouble_(midAngle);
    [self->transform_ transformWithDoubleArray:self->coords_ withInt:0 withDoubleArray:self->coords_ withInt:0 withInt:1];
    OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getLabelDescription]);
    self->xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->coords_, 0))) + 6;
    self->yLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->coords_, 1))) - 6;
    [self addLabelOffset];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawConicPart_updateParallelLines(OrgGeogebraCommonEuclidianDrawDrawConicPart *self) {
  if (self->drawSegment_ == nil || ([((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(self->conicPart_)) positiveOrientation] && self->draw_type_ != OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT) || (![self->conicPart_ positiveOrientation] && self->draw_type_ != OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS)) {
    IOSObjectArray *lines = [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) getLines];
    OrgGeogebraCommonEuclidianDrawDrawConicPart_setAndConsume_drawSegment_(self, new_OrgGeogebraCommonEuclidianDrawDrawSegment_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->view_, IOSObjectArray_Get(nil_chk(lines), 0)));
    OrgGeogebraCommonEuclidianDrawDrawConicPart_setAndConsume_drawRay1_(self, new_OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->view_, IOSObjectArray_Get(lines, 0)));
    OrgGeogebraCommonEuclidianDrawDrawConicPart_setAndConsume_drawRay2_(self, new_OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->view_, IOSObjectArray_Get(lines, 1)));
    [self->drawSegment_ setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelGeosGeoElement class])];
    [self->drawRay1_ setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelGeosGeoElement class])];
    [self->drawRay2_ setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelGeosGeoElement class])];
  }
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(self->conicPart_)) positiveOrientation]) {
    self->draw_type_ = OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT;
    OrgGeogebraCommonKernelMatrixCoords *s = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) getOrigin3DWithInt:0]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(s)) getZ])) {
      self->isVisible_ = NO;
      return;
    }
    OrgGeogebraCommonKernelMatrixCoords *e = [self->view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[self->conicPart_ getSegmentEnd3D]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(e)) getZ])) {
      self->isVisible_ = NO;
      return;
    }
    [((OrgGeogebraCommonEuclidianDrawDrawSegment *) nil_chk(self->drawSegment_)) setIsVisible];
    [self->drawSegment_ updateWithOrgGeogebraCommonKernelMatrixCoords:s withOrgGeogebraCommonKernelMatrixCoords:e];
  }
  else {
    self->draw_type_ = OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS;
    OrgGeogebraCommonKernelMatrixCoords *s = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) getOrigin3DWithInt:0]];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(s)) getZ])) {
      self->isVisible_ = NO;
      return;
    }
    OrgGeogebraCommonKernelMatrixCoords *d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self->view_ getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[self->conicPart_ getSegmentEnd3D]])) subWithOrgGeogebraCommonKernelMatrixCoords:s];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(d)) getZ])) {
      self->isVisible_ = NO;
      return;
    }
    [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(self->drawRay1_)) setIsVisible];
    [self->drawRay1_ updateWithOrgGeogebraCommonKernelMatrixCoords:s withOrgGeogebraCommonKernelMatrixCoords:[d mulWithDouble:-1] withBoolean:NO];
    [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(self->drawRay2_)) setIsVisible];
    [self->drawRay2_ updateWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) getOrigin3DWithInt:1] withOrgGeogebraCommonKernelMatrixCoords:d withBoolean:NO];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawConicPart_drawWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawConicPart *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  if (self->isVisible_) {
    switch (self->draw_type_) {
      case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE:
      [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:self->shape_DrawConicPart_ withBoolean:NO];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) doHighlighting]) {
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self->geo_ getSelColor]];
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->selStroke_];
        [g2 drawWithOrgGeogebraCommonAwtGShape:self->shape_DrawConicPart_];
      }
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self->geo_ getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:self->shape_DrawConicPart_];
      if (self->labelVisible_) {
        [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[self->geo_ getLabelColor]];
        [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontLine]];
        [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
      }
      break;
      case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT:
      [((OrgGeogebraCommonEuclidianDrawDrawSegment *) nil_chk(self->drawSegment_)) drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
      break;
      case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS:
      [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(self->drawRay1_)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
      [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(self->drawRay2_)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
      [self->drawRay1_ drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
      [self->drawRay2_ drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
      break;
    }
  }
}

void OrgGeogebraCommonEuclidianDrawDrawConicPart_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawConicPart *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  switch (self->draw_type_) {
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_ELLIPSE:
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getObjectColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [g2 drawWithOrgGeogebraCommonAwtGShape:self->shape_DrawConicPart_];
    break;
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_SEGMENT:
    [((OrgGeogebraCommonEuclidianDrawDrawSegment *) nil_chk(self->drawSegment_)) drawTraceWithOrgGeogebraCommonAwtGGraphics2D:g2];
    break;
    case OrgGeogebraCommonEuclidianDrawDrawConicPart_DRAW_TYPE_RAYS:
    [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(self->drawRay1_)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [((OrgGeogebraCommonEuclidianDrawDrawRay *) nil_chk(self->drawRay2_)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [self->drawRay1_ drawTraceWithOrgGeogebraCommonAwtGGraphics2D:g2];
    [self->drawRay2_ drawTraceWithOrgGeogebraCommonAwtGGraphics2D:g2];
    break;
  }
}

void OrgGeogebraCommonEuclidianDrawDrawConicPart_initPreview(OrgGeogebraCommonEuclidianDrawDrawConicPart *self) {
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->previewTempPoints_), 0))) getConstruction];
  jint arcMode;
  {
    OrgGeogebraCommonKernelAlgosAlgoSemicircle *alg;
    OrgGeogebraCommonKernelAlgosAlgoConicPartCircle *algo;
    OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircle *algo2;
    switch (self->previewMode_) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
      alg = [new_OrgGeogebraCommonKernelAlgosAlgoSemicircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1)) autorelease];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:alg];
      OrgGeogebraCommonEuclidianDrawDrawConicPart_initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, [alg getSemicircle]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
      arcMode = self->previewMode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS ? OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC : OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR;
      algo = [new_OrgGeogebraCommonKernelAlgosAlgoConicPartCircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2), arcMode) autorelease];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
      OrgGeogebraCommonEuclidianDrawDrawConicPart_initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, [algo getConicPart]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
      arcMode = self->previewMode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS ? OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC : OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR;
      algo2 = [new_OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2), arcMode) autorelease];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo2];
      OrgGeogebraCommonEuclidianDrawDrawConicPart_initConicPartWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, [algo2 getConicPart]);
      break;
    }
  }
  if (self->conicPart_ != nil) [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->conicPart_, [OrgGeogebraCommonKernelGeosGeoElement class])) setLabelVisibleWithBoolean:NO];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawConicPart)
