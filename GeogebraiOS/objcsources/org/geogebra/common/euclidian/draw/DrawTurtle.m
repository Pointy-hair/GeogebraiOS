//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawTurtle.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GEllipse2DDouble.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/draw/DrawTurtle.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoTurtle.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonEuclidianDrawDrawTurtle () {
 @public
  jboolean isVisible_, labelVisible_;
  id<OrgGeogebraCommonAwtGRectangle> boundRect_;
  jdouble turnAngle_;
  id<OrgGeogebraCommonAwtGRectangle> turtleImageBounds_;
  jdouble imageSize_;
  IOSDoubleArray *currentCoords_;
  id<OrgGeogebraCommonAwtGAffineTransform> at_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> ellipse_;
  id<OrgGeogebraCommonAwtGBasicStroke> stroke1_;
  id<OrgGeogebraCommonAwtGBasicStroke> stroke2_;
  id<OrgGeogebraCommonAwtGGeneralPath> gPath_;
  id<OrgGeogebraCommonAwtGShape> legs_;
  id<OrgGeogebraCommonAwtGShape> head_;
  id<OrgGeogebraCommonAwtGShape> body_;
  id<OrgGeogebraCommonAwtGShape> dot_;
}

- (void)drawTurtleShapeWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2;

- (void)updateTurtleShape;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, boundRect_, id<OrgGeogebraCommonAwtGRectangle>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, turtleImageBounds_, id<OrgGeogebraCommonAwtGRectangle>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, currentCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, at_, id<OrgGeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, ellipse_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, stroke1_, id<OrgGeogebraCommonAwtGBasicStroke>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, stroke2_, id<OrgGeogebraCommonAwtGBasicStroke>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, gPath_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, legs_, id<OrgGeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, head_, id<OrgGeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, body_, id<OrgGeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle, dot_, id<OrgGeogebraCommonAwtGShape>)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawTurtle_update(OrgGeogebraCommonEuclidianDrawDrawTurtle *self);

__attribute__((unused)) static id<OrgGeogebraCommonAwtGRectangle> OrgGeogebraCommonEuclidianDrawDrawTurtle_getBounds(OrgGeogebraCommonEuclidianDrawDrawTurtle *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawTurtle_drawTurtleShapeWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawTurtle *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawTurtle_updateTurtleShape(OrgGeogebraCommonEuclidianDrawDrawTurtle *self);

@interface OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath : NSObject {
 @public
  OrgGeogebraCommonAwtGColor *color_;
  jint thickness_;
  OrgGeogebraCommonEuclidianGeneralPathClipped *path1_;
  id<OrgGeogebraCommonAwtGBasicStroke> stroke_;
}

- (instancetype)initWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c
                                           withInt:(jint)th
  withOrgGeogebraCommonEuclidianGeneralPathClipped:(OrgGeogebraCommonEuclidianGeneralPathClipped *)p;

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath, color_, OrgGeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath, path1_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath, stroke_, id<OrgGeogebraCommonAwtGBasicStroke>)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_initWithOrgGeogebraCommonAwtGColor_withInt_withOrgGeogebraCommonEuclidianGeneralPathClipped_(OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *self, OrgGeogebraCommonAwtGColor *c, jint th, OrgGeogebraCommonEuclidianGeneralPathClipped *p);

__attribute__((unused)) static OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *new_OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_initWithOrgGeogebraCommonAwtGColor_withInt_withOrgGeogebraCommonEuclidianGeneralPathClipped_(OrgGeogebraCommonAwtGColor *c, jint th, OrgGeogebraCommonEuclidianGeneralPathClipped *p) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath)

@interface OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState : NSObject < OrgGeogebraCommonKernelGeosGeoTurtle_DrawState > {
 @public
  OrgGeogebraCommonEuclidianDrawDrawTurtle *this$0_;
  jboolean penDown_;
  OrgGeogebraCommonAwtGColor *penColor_;
  jint penThickness_;
  jint nlines_;
  jdouble turnAngle1_;
  OrgGeogebraCommonEuclidianGeneralPathClipped *currentPath_;
  IOSDoubleArray *coords_;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianDrawDrawTurtle:(OrgGeogebraCommonEuclidianDrawDrawTurtle *)outer$;

- (void)setPenWithBoolean:(jboolean)down;

- (void)moveWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)newPosition;

- (void)partialMoveWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)newPosition
                                                      withDouble:(jdouble)progress;

- (void)turnWithDouble:(jdouble)angle;

- (void)partialTurnWithDouble:(jdouble)angle
                   withDouble:(jdouble)progress;

- (void)setColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color;

- (void)setThicknessWithInt:(jint)thickness;

- (void)finishPartialPath;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState, this$0_, OrgGeogebraCommonEuclidianDrawDrawTurtle *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState, penColor_, OrgGeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState, currentPath_, OrgGeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState, coords_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_initWithOrgGeogebraCommonEuclidianDrawDrawTurtle_(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState *self, OrgGeogebraCommonEuclidianDrawDrawTurtle *outer$);

__attribute__((unused)) static OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState *new_OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_initWithOrgGeogebraCommonEuclidianDrawDrawTurtle_(OrgGeogebraCommonEuclidianDrawDrawTurtle *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState)

@implementation OrgGeogebraCommonEuclidianDrawDrawTurtle

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                       withOrgGeogebraCommonKernelGeosGeoTurtle:(OrgGeogebraCommonKernelGeosGeoTurtle *)turtle {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoTurtle_(self, view, turtle);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_update(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    for (OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath * __strong path in nil_chk(pathList_)) {
      [((OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *) nil_chk(path)) drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoTurtle *) nil_chk(turtle_)) getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
      for (OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath * __strong path in pathList_) {
        [g2 drawWithOrgGeogebraCommonAwtGShape:((OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *) nil_chk(path))->path1_];
      }
    }
    if (labelVisible_) {
      [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoTurtle *) nil_chk(turtle_)) getLabelColor]];
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontPoint]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
    if ([((OrgGeogebraCommonKernelGeosGeoTurtle *) nil_chk(turtle_)) getFillImage] != nil) {
      jint imgWidth = [((id<OrgGeogebraCommonAwtMyImage>) nil_chk([turtle_ getFillImage])) getWidth];
      jint imgHeight = [((id<OrgGeogebraCommonAwtMyImage>) nil_chk([turtle_ getFillImage])) getHeight];
      [g2 saveTransform];
      [g2 transformWithOrgGeogebraCommonAwtGAffineTransform:at_];
      if ([((id<OrgGeogebraCommonAwtMyImage>) nil_chk([turtle_ getFillImage])) isSVG] && ![((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(turtle_->kernel_)) getApplication])) isHTML5Applet]) [g2 translateWithDouble:-imgWidth / 2 withDouble:-imgHeight / 2];
      [g2 drawImageWithOrgGeogebraCommonAwtMyImage:[turtle_ getFillImage] withInt:-imgWidth / 2 withInt:-imgHeight / 2];
      [g2 restoreTransform];
    }
    else {
      OrgGeogebraCommonEuclidianDrawDrawTurtle_drawTurtleShapeWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if (isVisible_) {
    for (OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath * __strong path in nil_chk(pathList_)) {
      if ([((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(((OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *) nil_chk(path))->path1_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold]) {
        return YES;
      }
    }
  }
  return NO;
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return pathList_ != nil && [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithOrgGeogebraCommonAwtGRectangle2D:OrgGeogebraCommonEuclidianDrawDrawTurtle_getBounds(self)];
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  if (isVisible_) {
    for (OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath * __strong p in nil_chk(pathList_)) {
      if ([((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(((OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *) nil_chk(p))->path1_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect]) {
        return YES;
      }
    }
  }
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  return OrgGeogebraCommonEuclidianDrawDrawTurtle_getBounds(self);
}

- (void)drawTurtleShapeWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_drawTurtleShapeWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updateTurtleShape {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_updateTurtleShape(self);
}

- (void)dealloc {
  RELEASE_(turtle_);
  RELEASE_(pathList_);
  RELEASE_(boundRect_);
  RELEASE_(turtleImageBounds_);
  RELEASE_(currentCoords_);
  RELEASE_(at_);
  RELEASE_(ellipse_);
  RELEASE_(stroke1_);
  RELEASE_(stroke2_);
  RELEASE_(gPath_);
  RELEASE_(legs_);
  RELEASE_(head_);
  RELEASE_(body_);
  RELEASE_(dot_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoTurtle:", "DrawTurtle", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "drawTurtleShapeWithOrgGeogebraCommonAwtGGraphics2D:", "drawTurtleShape", "V", 0x2, NULL, NULL },
    { "updateTurtleShape", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "turtle_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pathList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/euclidian/draw/DrawTurtle$PartialPath;>;",  },
    { "boundRect_", NULL, 0x2, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "turnAngle_", NULL, 0x2, "D", NULL, NULL,  },
    { "turtleImageBounds_", NULL, 0x2, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "imageSize_", NULL, 0x2, "D", NULL, NULL,  },
    { "currentCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "at_", NULL, 0x2, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "ellipse_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "stroke1_", NULL, 0x2, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "stroke2_", NULL, 0x2, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "gPath_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "legs_", NULL, 0x2, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "head_", NULL, 0x2, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "body_", NULL, 0x2, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
    { "dot_", NULL, 0x2, "Lorg.geogebra.common.awt.GShape;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.euclidian.draw.DrawTurtle$PartialPath;", "Lorg.geogebra.common.euclidian.draw.DrawTurtle$DrawState;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawTurtle = { 2, "DrawTurtle", "org.geogebra.common.euclidian.draw", NULL, 0x1, 11, methods, 18, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawTurtle;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawTurtle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoTurtle_(OrgGeogebraCommonEuclidianDrawDrawTurtle *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoTurtle *turtle) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  self->turnAngle_ = 0.0;
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_turtleImageBounds_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle]);
  self->imageSize_ = 10;
  OrgGeogebraCommonEuclidianDrawDrawTurtle_setAndConsume_currentCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_at_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAffineTransform]);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_ellipse_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble]);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_stroke1_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:1.0f]);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_stroke2_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:2.0f]);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_gPath_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newGeneralPath]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_turtle_(self, turtle);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, turtle);
  [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->turtleImageBounds_)) setFrameWithDouble:0 withDouble:0 withDouble:0 withDouble:0];
  OrgGeogebraCommonEuclidianDrawDrawTurtle_update(self);
  [turtle setCoordsWithDouble:((OrgGeogebraCommonKernelGeosGeoTurtle *) nil_chk(turtle))->inhomX_ withDouble:turtle->inhomY_];
}

OrgGeogebraCommonEuclidianDrawDrawTurtle *new_OrgGeogebraCommonEuclidianDrawDrawTurtle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoTurtle_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoTurtle *turtle) {
  OrgGeogebraCommonEuclidianDrawDrawTurtle *self = [OrgGeogebraCommonEuclidianDrawDrawTurtle alloc];
  OrgGeogebraCommonEuclidianDrawDrawTurtle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoTurtle_(self, view, turtle);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawTurtle_update(OrgGeogebraCommonEuclidianDrawDrawTurtle *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (self->isVisible_) {
    self->labelVisible_ = [self->geo_ isLabelVisible];
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->turtle_];
    if (self->pathList_ == nil) {
      OrgGeogebraCommonEuclidianDrawDrawTurtle_setAndConsume_pathList_(self, new_JavaUtilArrayList_init());
    }
    else {
      [self->pathList_ clear];
    }
    OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState *ds = [new_OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_initWithOrgGeogebraCommonEuclidianDrawDrawTurtle_(self) autorelease];
    jint ncommands = [((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoTurtle *) nil_chk(self->turtle_)) getTurtleCommandList])) size];
    if ([self->turtle_ getSpeed] != 0.0) {
      ncommands = [self->turtle_ getNumberOfCompletedCommands];
    }
    for (id<OrgGeogebraCommonKernelGeosGeoTurtle_Command> __strong cmd in nil_chk([self->turtle_ getTurtleCommandList])) {
      if (ncommands-- > 0) {
        [((id<OrgGeogebraCommonKernelGeosGeoTurtle_Command>) nil_chk(cmd)) drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:ds];
      }
      else {
        [((id<OrgGeogebraCommonKernelGeosGeoTurtle_Command>) nil_chk(cmd)) partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:ds withDouble:[self->turtle_ getCurrentCommandProgress]];
        break;
      }
    }
    [ds finishPartialPath];
    *IOSDoubleArray_GetRef(nil_chk(self->currentCoords_), 0) = IOSDoubleArray_Get(nil_chk(ds->coords_), 0);
    *IOSDoubleArray_GetRef(self->currentCoords_, 1) = IOSDoubleArray_Get(ds->coords_, 1);
    self->turnAngle_ = ds->turnAngle1_;
  }
  [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->turtleImageBounds_)) setFrameWithDouble:IOSDoubleArray_Get(nil_chk(self->currentCoords_), 0) - self->imageSize_ / 2 withDouble:IOSDoubleArray_Get(self->currentCoords_, 1) - self->imageSize_ / 2 withDouble:self->imageSize_ withDouble:self->imageSize_];
  self->isVisible_ = NO;
  self->isVisible_ = (OrgGeogebraCommonEuclidianDrawDrawTurtle_getBounds(self) != nil && [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(OrgGeogebraCommonEuclidianDrawDrawTurtle_getBounds(self))) intersectsWithInt:0 withInt:0 withInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]]);
  if (self->isVisible_) {
    [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->at_)) setTransformWithDouble:1 withDouble:0 withDouble:0 withDouble:1 withDouble:1 withDouble:0];
    [self->at_ translateWithDouble:IOSDoubleArray_Get(self->currentCoords_, 0) withDouble:IOSDoubleArray_Get(self->currentCoords_, 1)];
    [self->at_ rotateWithDouble:-self->turnAngle_];
    if ([self->geo_ getFillImage] == nil) OrgGeogebraCommonEuclidianDrawDrawTurtle_updateTurtleShape(self);
  }
}

id<OrgGeogebraCommonAwtGRectangle> OrgGeogebraCommonEuclidianDrawDrawTurtle_getBounds(OrgGeogebraCommonEuclidianDrawDrawTurtle *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isDefined] || ![self->geo_ isEuclidianVisible]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_boundRect_(self, self->turtleImageBounds_);
  for (OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath * __strong path in nil_chk(self->pathList_)) {
    OrgGeogebraCommonEuclidianDrawDrawTurtle_set_boundRect_(self, [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->boundRect_)) union__WithOrgGeogebraCommonAwtGRectangle:[((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(((OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *) nil_chk(path))->path1_)) getBounds]]);
  }
  return self->boundRect_;
}

void OrgGeogebraCommonEuclidianDrawDrawTurtle_drawTurtleShapeWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawTurtle *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gPath_)) reset];
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->stroke2_];
  [g2 setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_()];
  [g2 drawWithOrgGeogebraCommonAwtGShape:self->legs_];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->stroke1_];
  [g2 setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_GRAY_()];
  [g2 fillWithOrgGeogebraCommonAwtGShape:self->head_];
  [g2 setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_()];
  [g2 drawWithOrgGeogebraCommonAwtGShape:self->head_];
  [g2 setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_GREEN_()];
  [g2 fillWithOrgGeogebraCommonAwtGShape:self->body_];
  [g2 setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_()];
  [g2 drawWithOrgGeogebraCommonAwtGShape:self->body_];
  [g2 setColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoTurtle *) nil_chk(self->turtle_)) getPenColor]];
  [g2 fillWithOrgGeogebraCommonAwtGShape:self->dot_];
}

void OrgGeogebraCommonEuclidianDrawDrawTurtle_updateTurtleShape(OrgGeogebraCommonEuclidianDrawDrawTurtle *self) {
  jint r = 8;
  jfloat x, y;
  [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gPath_)) reset];
  x = (jfloat) (1.3 * r * JavaLangMath_cosWithDouble_(JavaLangMath_PI / 6));
  y = (jfloat) (1.3 * r * JavaLangMath_sinWithDouble_(JavaLangMath_PI / 6));
  [self->gPath_ moveToWithFloat:0 withFloat:0];
  [self->gPath_ lineToWithFloat:-x withFloat:y];
  [self->gPath_ moveToWithFloat:0 withFloat:0];
  [self->gPath_ lineToWithFloat:-x withFloat:-y];
  x = (jfloat) (1.2 * r * JavaLangMath_cosWithDouble_(JavaLangMath_PI / 4));
  y = (jfloat) (1.2 * r * JavaLangMath_sinWithDouble_(JavaLangMath_PI / 4));
  [self->gPath_ moveToWithFloat:0 withFloat:0];
  [self->gPath_ lineToWithFloat:x withFloat:y];
  [self->gPath_ moveToWithFloat:0 withFloat:0];
  [self->gPath_ lineToWithFloat:x withFloat:-y];
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_legs_(self, [self->gPath_ createTransformedShapeWithOrgGeogebraCommonAwtGAffineTransform:self->at_]);
  [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->ellipse_)) setFrameWithDouble:r - 3 withDouble:-3 withDouble:6 withDouble:6];
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_head_(self, [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->at_)) createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->ellipse_]);
  [self->ellipse_ setFrameWithDouble:-r withDouble:-r withDouble:2 * r withDouble:1.8 * r];
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_body_(self, [self->at_ createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->ellipse_]);
  [self->ellipse_ setFrameWithDouble:-3 withDouble:-3 withDouble:6 withDouble:6];
  OrgGeogebraCommonEuclidianDrawDrawTurtle_set_dot_(self, [self->at_ createTransformedShapeWithOrgGeogebraCommonAwtGShape:self->ellipse_]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawTurtle)

@implementation OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath

- (instancetype)initWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c
                                           withInt:(jint)th
  withOrgGeogebraCommonEuclidianGeneralPathClipped:(OrgGeogebraCommonEuclidianGeneralPathClipped *)p {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_initWithOrgGeogebraCommonAwtGColor_withInt_withOrgGeogebraCommonEuclidianGeneralPathClipped_(self, c, th, p);
  return self;
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:color_];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:stroke_];
  [g2 drawWithOrgGeogebraCommonAwtGShape:path1_];
}

- (void)dealloc {
  RELEASE_(color_);
  RELEASE_(path1_);
  RELEASE_(stroke_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonAwtGColor:withInt:withOrgGeogebraCommonEuclidianGeneralPathClipped:", "PartialPath", NULL, 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "color_", NULL, 0x1, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "thickness_", NULL, 0x1, "I", NULL, NULL,  },
    { "path1_", NULL, 0x1, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "stroke_", NULL, 0x2, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath = { 2, "PartialPath", "org.geogebra.common.euclidian.draw", "DrawTurtle", 0xa, 2, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_initWithOrgGeogebraCommonAwtGColor_withInt_withOrgGeogebraCommonEuclidianGeneralPathClipped_(OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *self, OrgGeogebraCommonAwtGColor *c, jint th, OrgGeogebraCommonEuclidianGeneralPathClipped *p) {
  NSObject_init(self);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_set_color_(self, c);
  self->thickness_ = th;
  OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_set_path1_(self, p);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_set_stroke_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeWithFloat:self->thickness_]);
}

OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *new_OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_initWithOrgGeogebraCommonAwtGColor_withInt_withOrgGeogebraCommonEuclidianGeneralPathClipped_(OrgGeogebraCommonAwtGColor *c, jint th, OrgGeogebraCommonEuclidianGeneralPathClipped *p) {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath *self = [OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath alloc];
  OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_initWithOrgGeogebraCommonAwtGColor_withInt_withOrgGeogebraCommonEuclidianGeneralPathClipped_(self, c, th, p);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath)

@implementation OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState

- (instancetype)initWithOrgGeogebraCommonEuclidianDrawDrawTurtle:(OrgGeogebraCommonEuclidianDrawDrawTurtle *)outer$ {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_initWithOrgGeogebraCommonEuclidianDrawDrawTurtle_(self, outer$);
  return self;
}

- (void)setPenWithBoolean:(jboolean)down {
  penDown_ = down;
}

- (void)moveWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)newPosition {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(newPosition)) getInhomCoordsWithDoubleArray:coords_];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([this$0_ getView])) toScreenCoordsWithDoubleArray:coords_];
  if (penDown_) {
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(currentPath_)) lineToWithDouble:IOSDoubleArray_Get(nil_chk(coords_), 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
    nlines_ += 1;
  }
  else {
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(currentPath_)) moveToWithDouble:IOSDoubleArray_Get(nil_chk(coords_), 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  }
}

- (void)partialMoveWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)newPosition
                                                      withDouble:(jdouble)progress {
  IOSDoubleArray *newCoords = [IOSDoubleArray arrayWithLength:2];
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(newPosition)) getInhomCoordsWithDoubleArray:newCoords];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([this$0_ getView])) toScreenCoordsWithDoubleArray:newCoords];
  *IOSDoubleArray_GetRef(nil_chk(coords_), 0) = IOSDoubleArray_Get(coords_, 0) * (1.0 - progress) + IOSDoubleArray_Get(newCoords, 0) * progress;
  *IOSDoubleArray_GetRef(coords_, 1) = IOSDoubleArray_Get(coords_, 1) * (1.0 - progress) + IOSDoubleArray_Get(newCoords, 1) * progress;
  if (penDown_) {
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(currentPath_)) lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
    nlines_ += 1;
  }
  else {
    [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(currentPath_)) moveToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  }
}

- (void)turnWithDouble:(jdouble)angle {
  turnAngle1_ += angle;
}

- (void)partialTurnWithDouble:(jdouble)angle
                   withDouble:(jdouble)progress {
  turnAngle1_ += angle * progress;
}

- (void)setColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color {
  if (penColor_ != color) {
    [self finishPartialPath];
    OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_set_penColor_(self, color);
  }
}

- (void)setThicknessWithInt:(jint)thickness {
  if (penThickness_ != thickness) {
    [self finishPartialPath];
    penThickness_ = thickness;
  }
}

- (void)finishPartialPath {
  if (nlines_ > 0) {
    [((JavaUtilArrayList *) nil_chk(this$0_->pathList_)) addWithId:[new_OrgGeogebraCommonEuclidianDrawDrawTurtle_PartialPath_initWithOrgGeogebraCommonAwtGColor_withInt_withOrgGeogebraCommonEuclidianGeneralPathClipped_(penColor_, penThickness_, currentPath_) autorelease]];
  }
  OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_setAndConsume_currentPath_(self, new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_([this$0_ getView]));
  [currentPath_ moveToWithDouble:IOSDoubleArray_Get(nil_chk(coords_), 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(penColor_);
  RELEASE_(currentPath_);
  RELEASE_(coords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianDrawDrawTurtle:", "DrawState", NULL, 0x1, NULL, NULL },
    { "setPenWithBoolean:", "setPen", "V", 0x1, NULL, NULL },
    { "moveWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "move", "V", 0x1, NULL, NULL },
    { "partialMoveWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "partialMove", "V", 0x1, NULL, NULL },
    { "turnWithDouble:", "turn", "V", 0x1, NULL, NULL },
    { "partialTurnWithDouble:withDouble:", "partialTurn", "V", 0x1, NULL, NULL },
    { "setColorWithOrgGeogebraCommonAwtGColor:", "setColor", "V", 0x1, NULL, NULL },
    { "setThicknessWithInt:", "setThickness", "V", 0x1, NULL, NULL },
    { "finishPartialPath", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.draw.DrawTurtle;", NULL, NULL,  },
    { "penDown_", NULL, 0x2, "Z", NULL, NULL,  },
    { "penColor_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "penThickness_", NULL, 0x2, "I", NULL, NULL,  },
    { "nlines_", NULL, 0x2, "I", NULL, NULL,  },
    { "turnAngle1_", NULL, 0x0, "D", NULL, NULL,  },
    { "currentPath_", NULL, 0x2, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "coords_", NULL, 0x0, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState = { 2, "DrawState", "org.geogebra.common.euclidian.draw", "DrawTurtle", 0x2, 9, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_initWithOrgGeogebraCommonEuclidianDrawDrawTurtle_(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState *self, OrgGeogebraCommonEuclidianDrawDrawTurtle *outer$) {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_set_this$0_(self, outer$);
  NSObject_init(self);
  self->penDown_ = YES;
  OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_set_penColor_(self, OrgGeogebraCommonAwtGColor_get_BLACK_());
  self->penThickness_ = 1;
  self->nlines_ = 0;
  self->turnAngle1_ = 0.0;
  OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_setAndConsume_currentPath_(self, new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_([outer$ getView]));
  self->penDown_ = NO;
  [self moveWithOrgGeogebraCommonKernelKernelNDGeoPointND:[((OrgGeogebraCommonKernelGeosGeoTurtle *) nil_chk(outer$->turtle_)) getStartPoint]];
  self->penDown_ = YES;
  self->nlines_ = 0;
}

OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState *new_OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_initWithOrgGeogebraCommonEuclidianDrawDrawTurtle_(OrgGeogebraCommonEuclidianDrawDrawTurtle *outer$) {
  OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState *self = [OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState alloc];
  OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState_initWithOrgGeogebraCommonEuclidianDrawDrawTurtle_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawTurtle_DrawState)
