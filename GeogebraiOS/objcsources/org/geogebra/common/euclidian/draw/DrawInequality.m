//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawInequality.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/draw/DrawConic.h"
#include "org/geogebra/common/euclidian/draw/DrawInequality.h"
#include "org/geogebra/common/euclidian/draw/DrawInequality1Var.h"
#include "org/geogebra/common/euclidian/draw/DrawLine.h"
#include "org/geogebra/common/euclidian/draw/DrawParametricInequality.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/IneqTree.h"
#include "org/geogebra/common/kernel/arithmetic/Inequality.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonEuclidianDrawDrawInequality () {
 @public
  jboolean isVisible_;
  OrgGeogebraCommonEuclidianDrawable *drawable_;
  OrgGeogebraCommonPluginOperationEnum *operation_;
  OrgGeogebraCommonEuclidianDrawDrawInequality *left_, *right_;
  OrgGeogebraCommonKernelArithmeticInequality *ineq_;
  id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> function_;
  IOSObjectArray *gpAxis_;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticIneqTree:(OrgGeogebraCommonKernelArithmeticIneqTree *)tree
                      withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                        withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (void)updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree:(OrgGeogebraCommonKernelArithmeticIneqTree *)it;

- (void)createDrawable;

- (void)updateShape;

- (void)updateTreesWithOrgGeogebraCommonKernelArithmeticIneqTree:(OrgGeogebraCommonKernelArithmeticIneqTree *)it;

+ (jboolean)matchBorderWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)border
                          withOrgGeogebraCommonEuclidianDrawable:(OrgGeogebraCommonEuclidianDrawable *)d;

- (jboolean)hit2WithInt:(jint)x
                withInt:(jint)y;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawInequality, drawable_, OrgGeogebraCommonEuclidianDrawable *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawInequality, operation_, OrgGeogebraCommonPluginOperationEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawInequality, left_, OrgGeogebraCommonEuclidianDrawDrawInequality *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawInequality, right_, OrgGeogebraCommonEuclidianDrawDrawInequality *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawInequality, ineq_, OrgGeogebraCommonKernelArithmeticInequality *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawInequality, function_, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawInequality, gpAxis_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, OrgGeogebraCommonKernelArithmeticIneqTree *tree, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static OrgGeogebraCommonEuclidianDrawDrawInequality *new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelArithmeticIneqTree *tree, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoElement *geo) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawInequality_update(OrgGeogebraCommonEuclidianDrawDrawInequality *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, OrgGeogebraCommonKernelArithmeticIneqTree *it);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawInequality_createDrawable(OrgGeogebraCommonEuclidianDrawDrawInequality *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawInequality_updateShape(OrgGeogebraCommonEuclidianDrawDrawInequality *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawInequality_updateTreesWithOrgGeogebraCommonKernelArithmeticIneqTree_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, OrgGeogebraCommonKernelArithmeticIneqTree *it);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianDrawDrawInequality_matchBorderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonEuclidianDrawable_(OrgGeogebraCommonKernelGeosGeoElement *border, OrgGeogebraCommonEuclidianDrawable *d);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, jint x, jint y);

@implementation OrgGeogebraCommonEuclidianDrawDrawInequality

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
            withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)function {
  OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(self, view, function);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticIneqTree:(OrgGeogebraCommonKernelArithmeticIneqTree *)tree
                      withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                        withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(self, tree, view, geo);
  return self;
}

- (void)update {
  OrgGeogebraCommonEuclidianDrawDrawInequality_update(self);
}

- (void)updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree:(OrgGeogebraCommonKernelArithmeticIneqTree *)it {
  OrgGeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree_(self, it);
}

- (void)createDrawable {
  OrgGeogebraCommonEuclidianDrawDrawInequality_createDrawable(self);
}

- (void)updateShape {
  OrgGeogebraCommonEuclidianDrawDrawInequality_updateShape(self);
}

- (void)updateTreesWithOrgGeogebraCommonKernelArithmeticIneqTree:(OrgGeogebraCommonKernelArithmeticIneqTree *)it {
  OrgGeogebraCommonEuclidianDrawDrawInequality_updateTreesWithOrgGeogebraCommonKernelArithmeticIneqTree_(self, it);
}

+ (jboolean)matchBorderWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)border
                          withOrgGeogebraCommonEuclidianDrawable:(OrgGeogebraCommonEuclidianDrawable *)d {
  return OrgGeogebraCommonEuclidianDrawDrawInequality_matchBorderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonEuclidianDrawable_(border, d);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (![self isForceNoFill] && !isVisible_) return;
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(operation_)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION()]) {
    if (drawable_ != nil) {
      [drawable_ updateStrokesJustLineThicknessWithOrgGeogebraCommonKernelGeosGeoElement:geo_];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLineThickness] > 0) [drawable_ drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
  else {
    if (left_ != nil) {
      [left_ updateStrokesJustLineThicknessWithOrgGeogebraCommonKernelGeosGeoElement:geo_];
      [left_ drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
    if (right_ != nil) {
      [right_ updateStrokesJustLineThicknessWithOrgGeogebraCommonKernelGeosGeoElement:geo_];
      [right_ drawWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
  if (![self isForceNoFill]) {
    if (gpAxis_ != nil) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getSelColor]];
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
        for (jint i = 0; IOSObjectArray_Get(gpAxis_, i) != nil; i++) {
          [g2 drawWithOrgGeogebraCommonAwtGShape:IOSObjectArray_Get(gpAxis_, i)];
        }
      }
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
      for (jint i = 0; IOSObjectArray_Get(gpAxis_, i) != nil; i++) {
        [g2 drawWithOrgGeogebraCommonAwtGShape:IOSObjectArray_Get(gpAxis_, i)];
      }
    }
    else {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getFillType] != OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE()) {
        [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:geo_];
      }
      [self fillWithOrgGeogebraCommonAwtGGraphics2D:g2 withOrgGeogebraCommonAwtGShape:[self getShape] withBoolean:YES];
    }
  }
  if (labelVisible_) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
    [g2 setPaintWithOrgGeogebraCommonAwtGPaint:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLabelColor]];
    [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (jboolean)hit2WithInt:(jint)x
                withInt:(jint)y {
  return OrgGeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x, y);
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible]) return NO;
  if ([geo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] && [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo_, [OrgGeogebraCommonKernelGeosGeoFunction class])) showOnAxis] && JavaLangMath_absWithInt_(y - [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordYWithDouble:0]) > hitThreshold) return NO;
  return OrgGeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x, y) || OrgGeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x - 4, y) || OrgGeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x + 4, y) || OrgGeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x, y - 4) || OrgGeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x, y + 4);
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)dealloc {
  RELEASE_(drawable_);
  RELEASE_(operation_);
  RELEASE_(left_);
  RELEASE_(right_);
  RELEASE_(ineq_);
  RELEASE_(function_);
  RELEASE_(gpAxis_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelArithmeticFunctionalNVar:", "DrawInequality", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticIneqTree:withOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoElement:", "DrawInequality", NULL, 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree:", "updateRecursive", "V", 0x2, NULL, NULL },
    { "createDrawable", NULL, "V", 0x2, NULL, NULL },
    { "updateShape", NULL, "V", 0x2, NULL, NULL },
    { "updateTreesWithOrgGeogebraCommonKernelArithmeticIneqTree:", "updateTrees", "V", 0x2, NULL, NULL },
    { "matchBorderWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonEuclidianDrawable:", "matchBorder", "Z", 0xa, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "hit2WithInt:withInt:", "hit2", "Z", 0x2, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x1, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x1, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x0, "Z", NULL, NULL,  },
    { "drawable_", NULL, 0x2, "Lorg.geogebra.common.euclidian.Drawable;", NULL, NULL,  },
    { "operation_", NULL, 0x2, "Lorg.geogebra.common.plugin.Operation;", NULL, NULL,  },
    { "left_", NULL, 0x2, "Lorg.geogebra.common.euclidian.draw.DrawInequality;", NULL, NULL,  },
    { "right_", NULL, 0x2, "Lorg.geogebra.common.euclidian.draw.DrawInequality;", NULL, NULL,  },
    { "ineq_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Inequality;", NULL, NULL,  },
    { "function_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "gpAxis_", NULL, 0x2, "[Lorg.geogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawInequality = { 2, "DrawInequality", "org.geogebra.common.euclidian.draw", NULL, 0x1, 14, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawInequality;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> function) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawInequality_set_operation_(self, OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION());
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(function, [OrgGeogebraCommonKernelGeosGeoElement class]));
  OrgGeogebraCommonEuclidianDrawDrawInequality_set_function_(self, function);
  OrgGeogebraCommonEuclidianDrawDrawInequality_set_operation_(self, [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(function)) getIneqs])) getOperation]);
  if ([((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getLeft] != nil) OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_left_(self, new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_([((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getLeft], view, self->geo_));
  if ([((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getRight] != nil) OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_right_(self, new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_([((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getRight], view, self->geo_));
  if ([((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getIneq] != nil) OrgGeogebraCommonEuclidianDrawDrawInequality_set_ineq_(self, [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getIneq]);
  OrgGeogebraCommonEuclidianDrawDrawInequality_update(self);
}

OrgGeogebraCommonEuclidianDrawDrawInequality *new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> function) {
  OrgGeogebraCommonEuclidianDrawDrawInequality *self = [OrgGeogebraCommonEuclidianDrawDrawInequality alloc];
  OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(self, view, function);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, OrgGeogebraCommonKernelArithmeticIneqTree *tree, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  OrgGeogebraCommonEuclidianDrawDrawInequality_set_operation_(self, OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION());
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
  [self setForceNoFillWithBoolean:YES];
  OrgGeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree_(self, tree);
}

OrgGeogebraCommonEuclidianDrawDrawInequality *new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelArithmeticIneqTree *tree, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonEuclidianDrawDrawInequality *self = [OrgGeogebraCommonEuclidianDrawDrawInequality alloc];
  OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(self, tree, view, geo);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawInequality_update(OrgGeogebraCommonEuclidianDrawDrawInequality *self) {
  self->isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  self->labelVisible_ = [self->geo_ isLabelVisible];
  OrgGeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree_(self, [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->function_)) getIneqs]);
  OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
  if (([self->geo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) && [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoFunction class])) showOnAxis] && ![@"y" isEqual:[((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoFunction class])) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    JavaUtilTreeSet *zeros = [new_JavaUtilTreeSet_init() autorelease];
    [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoFunction class])) getIneqs])) getZerosWithJavaUtilSet:zeros];
    jdouble radius = [self->geo_ getLineThickness] * OrgGeogebraCommonEuclidianDrawDrawInequality1Var_DOT_RADIUS;
    [zeros addWithId:JavaLangDouble_valueOfWithDouble_([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXmin] - 2 * radius * [self->view_ getXscale])];
    [zeros addWithId:JavaLangDouble_valueOfWithDouble_([self->view_ getXmax] + 2 * radius * [self->view_ getXscale])];
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_gpAxis_(self, [IOSObjectArray newArrayWithLength:[zeros size] type:OrgGeogebraCommonEuclidianGeneralPathClipped_class_()]);
    JavaLangDouble *last = nil;
    jint gpCount = 0;
    for (JavaLangDouble * __strong zero in zeros) {
      if (last != nil) {
        jboolean value = [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoFunction class])) evaluateBooleanWithDouble:0.5 * ([last doubleValue] + [((JavaLangDouble *) nil_chk(zero)) doubleValue])];
        if (value) {
          IOSObjectArray_SetAndConsume(self->gpAxis_, gpCount, new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
          [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(self->gpAxis_, gpCount))) moveToWithDouble:[self->view_ toScreenCoordXdWithDouble:[last doubleValue]] + radius withDouble:[self->view_ toScreenCoordYdWithDouble:0]];
          [((OrgGeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(self->gpAxis_, gpCount))) lineToWithDouble:[self->view_ toScreenCoordXdWithDouble:[zero doubleValue]] - radius withDouble:[self->view_ toScreenCoordYdWithDouble:0]];
          gpCount++;
        }
      }
      last = zero;
    }
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:self->geo_];
  }
  else OrgGeogebraCommonEuclidianDrawDrawInequality_set_gpAxis_(self, nil);
}

void OrgGeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, OrgGeogebraCommonKernelArithmeticIneqTree *it) {
  OrgGeogebraCommonEuclidianDrawDrawInequality_updateTreesWithOrgGeogebraCommonKernelArithmeticIneqTree_(self, it);
  OrgGeogebraCommonEuclidianDrawDrawInequality_set_operation_(self, [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(it)) getOperation]);
  OrgGeogebraCommonEuclidianDrawDrawInequality_updateShape(self);
  if (self->left_ != nil) {
    self->yLabel_ = self->left_->yLabel_;
    self->xLabel_ = self->left_->xLabel_;
  }
  if (self->ineq_ != [it getIneq]) OrgGeogebraCommonEuclidianDrawDrawInequality_set_ineq_(self, [it getIneq]);
  if (self->ineq_ != nil) {
    if (self->drawable_ == nil || !OrgGeogebraCommonEuclidianDrawDrawInequality_matchBorderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonEuclidianDrawable_([self->ineq_ getBorder], self->drawable_)) {
      OrgGeogebraCommonEuclidianDrawDrawInequality_createDrawable(self);
    }
    else if ([self->ineq_ getType] == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_CONIC()) {
      [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk([self->ineq_ getConicBorder])) setInverseFillWithBoolean:[self->ineq_ isAboveBorder]];
      if ([self->drawable_ isKindOfClass:[OrgGeogebraCommonEuclidianDrawDrawConic class]]) {
        [((OrgGeogebraCommonEuclidianDrawDrawConic *) check_class_cast(self->drawable_, [OrgGeogebraCommonEuclidianDrawDrawConic class])) setIgnoreSingularitiesWithBoolean:![self->ineq_ isStrict] == [self->ineq_ isAboveBorder]];
      }
    }
    [((OrgGeogebraCommonEuclidianDrawable *) nil_chk(self->drawable_)) update];
    [self setShapeWithOrgGeogebraCommonAwtGArea:[self->drawable_ getShape]];
    self->xLabel_ = self->drawable_->xLabel_;
    self->yLabel_ = self->drawable_->yLabel_;
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isInverseFill] && ![self isForceNoFill]) {
    id<OrgGeogebraCommonAwtGArea> b = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBoundingPath]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk(b)) subtractWithOrgGeogebraCommonAwtGArea:[self getShape]];
    [self setShapeWithOrgGeogebraCommonAwtGArea:b];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawInequality_createDrawable(OrgGeogebraCommonEuclidianDrawDrawInequality *self) {
  switch ([[((OrgGeogebraCommonKernelArithmeticInequality *) nil_chk(self->ineq_)) getType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_PARAMETRIC_Y:
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_OrgGeogebraCommonEuclidianDrawDrawParametricInequality_initWithOrgGeogebraCommonKernelArithmeticInequality_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(self->ineq_, self->view_, self->geo_));
    break;
    case OrgGeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_PARAMETRIC_X:
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_OrgGeogebraCommonEuclidianDrawDrawParametricInequality_initWithOrgGeogebraCommonKernelArithmeticInequality_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_(self->ineq_, self->view_, self->geo_));
    break;
    case OrgGeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_1VAR_X:
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_OrgGeogebraCommonEuclidianDrawDrawInequality1Var_initWithOrgGeogebraCommonKernelArithmeticInequality_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self->ineq_, self->view_, self->geo_, NO));
    break;
    case OrgGeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_1VAR_Y:
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_OrgGeogebraCommonEuclidianDrawDrawInequality1Var_initWithOrgGeogebraCommonKernelArithmeticInequality_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self->ineq_, self->view_, self->geo_, YES));
    break;
    case OrgGeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_CONIC:
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self->view_, [self->ineq_ getConicBorder], ![self->ineq_ isStrict] == [self->ineq_ isAboveBorder]));
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk([self->ineq_ getConicBorder])) setInverseFillWithBoolean:[self->ineq_ isAboveBorder]];
    break;
    case OrgGeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_LINEAR:
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->view_, [self->ineq_ getLineBorder]));
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk([self->ineq_ getLineBorder])) setInverseFillWithBoolean:[self->ineq_ isAboveBorder]];
    break;
    default:
    OrgGeogebraCommonMainApp_debugWithNSString_(@"Unhandled inequality type");
    return;
  }
  [((OrgGeogebraCommonEuclidianDrawable *) nil_chk(self->drawable_)) setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:self->geo_];
  [self->drawable_ setForceNoFillWithBoolean:YES];
}

void OrgGeogebraCommonEuclidianDrawDrawInequality_updateShape(OrgGeogebraCommonEuclidianDrawDrawInequality *self) {
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(self->operation_)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND()] || [self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND_INTERVAL()]) {
    [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) intersectWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->right_)) getShape]];
  }
  else if ([self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_OR()]) {
    [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) addWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->right_)) getShape]];
  }
  else if ([self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()]) {
    [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBoundingPath]]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk([((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape])) exclusiveOrWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->right_)) getShape]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithOrgGeogebraCommonAwtGArea:[self->left_ getShape]];
  }
  else if ([self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL()]) {
    [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) exclusiveOrWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->right_)) getShape]];
  }
  else if ([self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_NOT()]) {
    [self setShapeWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBoundingPath]]];
    [((id<OrgGeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithOrgGeogebraCommonAwtGArea:[((OrgGeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape]];
  }
}

void OrgGeogebraCommonEuclidianDrawDrawInequality_updateTreesWithOrgGeogebraCommonKernelArithmeticIneqTree_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, OrgGeogebraCommonKernelArithmeticIneqTree *it) {
  if ([((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(it)) getLeft] != nil && self->left_ == nil) {
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_left_(self, new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_([it getLeft], self->view_, self->geo_));
  }
  if ([it getLeft] != nil) {
    OrgGeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree_(nil_chk(self->left_), [it getLeft]);
  }
  else OrgGeogebraCommonEuclidianDrawDrawInequality_set_left_(self, nil);
  if ([it getRight] != nil && self->right_ == nil) {
    OrgGeogebraCommonEuclidianDrawDrawInequality_setAndConsume_right_(self, new_OrgGeogebraCommonEuclidianDrawDrawInequality_initWithOrgGeogebraCommonKernelArithmeticIneqTree_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoElement_([it getLeft], self->view_, self->geo_));
  }
  if ([it getRight] != nil) OrgGeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithOrgGeogebraCommonKernelArithmeticIneqTree_(nil_chk(self->right_), [it getRight]);
  else OrgGeogebraCommonEuclidianDrawDrawInequality_set_right_(self, nil);
}

jboolean OrgGeogebraCommonEuclidianDrawDrawInequality_matchBorderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonEuclidianDrawable_(OrgGeogebraCommonKernelGeosGeoElement *border, OrgGeogebraCommonEuclidianDrawable *d) {
  OrgGeogebraCommonEuclidianDrawDrawInequality_initialize();
  if ([d isKindOfClass:[OrgGeogebraCommonEuclidianDrawDrawConic class]] && [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk([((OrgGeogebraCommonEuclidianDrawDrawConic *) nil_chk(((OrgGeogebraCommonEuclidianDrawDrawConic *) check_class_cast(d, [OrgGeogebraCommonEuclidianDrawDrawConic class])))) getConic])) isEqual:border]) return YES;
  if ([d isKindOfClass:[OrgGeogebraCommonEuclidianDrawDrawParametricInequality class]] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonEuclidianDrawDrawParametricInequality *) nil_chk(((OrgGeogebraCommonEuclidianDrawDrawParametricInequality *) check_class_cast(d, [OrgGeogebraCommonEuclidianDrawDrawParametricInequality class])))) getBorder])) isEqual:border]) return [((OrgGeogebraCommonEuclidianDrawDrawParametricInequality *) nil_chk(((OrgGeogebraCommonEuclidianDrawDrawParametricInequality *) check_class_cast(d, [OrgGeogebraCommonEuclidianDrawDrawParametricInequality class])))) isXparametric];
  return NO;
}

jboolean OrgGeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(OrgGeogebraCommonEuclidianDrawDrawInequality *self, jint x, jint y) {
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:x], [self->view_ toRealWorldCoordYWithDouble:y] } count:2];
  if ([self->geo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] && [((NSString *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"y"]) return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunction])) evaluateBooleanWithDouble:IOSDoubleArray_Get(coords, 1)];
  return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction])) evaluateBooleanWithDoubleArray:coords];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawInequality)
