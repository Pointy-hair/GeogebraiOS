//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/draw/DrawLine.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GArea.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GLine2D.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/draw/DrawLine.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/util/MyMath.h"

#define OrgGeogebraCommonEuclidianDrawDrawLine_LEFT 0
#define OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT 1
#define OrgGeogebraCommonEuclidianDrawDrawLine_TOP 2
#define OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM 3

@interface OrgGeogebraCommonEuclidianDrawDrawLine () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> g_;
  id<OrgGeogebraCommonAwtGLine2D> line_;
  jdouble k_;
  jdouble d_;
  jdouble gx_;
  jdouble gy_;
  jdouble gz_;
  jint labelPos_, p1Pos_, p2Pos_;
  jint x_, y_;
  jboolean isVisible_;
  jboolean labelVisible_;
  JavaUtilArrayList *points_;
  JavaUtilArrayList *lines_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint_, previewPoint2_;
  IOSBooleanArray *attr1_, *attr2_;
  OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *previewMode_;
  OrgGeogebraCommonAwtGPoint2D *endPoint_;
}

- (void)setClippedLine;

- (void)clipTopBottom;

- (void)clipLeftRight;

- (void)setLabelPosition;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, g_, id<OrgGeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, line_, id<OrgGeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, points_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, lines_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, startPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, previewPoint2_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, attr1_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, attr2_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, previewMode_, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianDrawDrawLine, endPoint_, OrgGeogebraCommonAwtGPoint2D *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawLine, LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawLine, RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawLine, TOP, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianDrawDrawLine, BOTTOM, jint)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLine_setClippedLine(OrgGeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLine_clipTopBottom(OrgGeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLine_clipLeftRight(OrgGeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLine_setLabelPosition(OrgGeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLine_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawLine *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLine_updatePreview(OrgGeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *new_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation OrgGeogebraCommonEuclidianDrawDrawLine

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                   withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, view, g);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points
     withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum:(OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *)previewMode {
  OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, view, points, previewMode);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                                          withJavaUtilArrayList:(JavaUtilArrayList *)points
                                          withJavaUtilArrayList:(JavaUtilArrayList *)lines
                                                    withBoolean:(jboolean)parallel {
  OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(self, view, points, lines, parallel);
  return self;
}

- (void)update {
  [self updateWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
}

- (void)updateWithOrgGeogebraCommonKernelMatrixCoordMatrix:(OrgGeogebraCommonKernelMatrixCoordMatrix *)matrix {
  isVisible_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible];
  if (isVisible_) {
    labelVisible_ = [geo_ isLabelVisible];
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:g_];
    OrgGeogebraCommonKernelMatrixCoords *equation = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getCartesianEquationVectorWithOrgGeogebraCommonKernelMatrixCoordMatrix:matrix];
    if (equation == nil) {
      isVisible_ = NO;
      return;
    }
    gx_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getX];
    gy_ = [equation getY];
    gz_ = [equation getZ];
    OrgGeogebraCommonEuclidianDrawDrawLine_setClippedLine(self);
    if (![((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:-OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE withInt:-OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE withInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE withInt:[view_ getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE]) {
      isVisible_ = NO;
    }
    if ([g_ getTrace]) {
      isTracing__ = YES;
      id<OrgGeogebraCommonAwtGGraphics2D> g2 = [view_ getBackgroundGraphics];
      if (g2 != nil) OrgGeogebraCommonEuclidianDrawDrawLine_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
    }
    else {
      if (isTracing__) {
        isTracing__ = NO;
      }
    }
    if (labelVisible_) {
      OrgGeogebraCommonEuclidianDrawable_set_labelDesc_(self, [geo_ getLabelDescription]);
      OrgGeogebraCommonEuclidianDrawDrawLine_setLabelPosition(self);
      [self addLabelOffsetEnsureOnScreen];
    }
  }
}

- (void)setClippedLine {
  OrgGeogebraCommonEuclidianDrawDrawLine_setClippedLine(self);
}

- (void)clipTopBottom {
  OrgGeogebraCommonEuclidianDrawDrawLine_clipTopBottom(self);
}

- (void)clipLeftRight {
  OrgGeogebraCommonEuclidianDrawDrawLine_clipLeftRight(self);
}

- (void)setLabelPosition {
  OrgGeogebraCommonEuclidianDrawDrawLine_setLabelPosition(self);
}

- (void)drawWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
    }
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
    if (labelVisible_) {
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontLine]];
      [g2 setColorWithOrgGeogebraCommonAwtGColor:[geo_ getLabelColor]];
      [self drawLabelWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)drawTraceWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianDrawDrawLine_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updatePreview {
  OrgGeogebraCommonEuclidianDrawDrawLine_updatePreview(self);
}

- (void)updateMousePosWithDouble:(jdouble)mouseRWx
                      withDouble:(jdouble)mouseRWy {
  jdouble xRW = mouseRWx;
  jdouble yRW = mouseRWy;
  if (isVisible_) {
    OrgGeogebraCommonKernelMatrixCoords *coords;
    {
      id<OrgGeogebraCommonKernelKernelNDGeoLineND> lND;
      OrgGeogebraCommonKernelMatrixCoords *equation;
      jdouble startx;
      jdouble starty;
      OrgGeogebraCommonKernelGeosGeoLine *g1;
      OrgGeogebraCommonKernelGeosGeoLine *h;
      jdouble g2x;
      jdouble g2y;
      jdouble lenG;
      jdouble hx;
      jdouble hy;
      jdouble lenH;
      jdouble wx, wy;
      jdouble ip;
      jdouble length;
      switch ([previewMode_ ordinal]) {
        case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_LINE:
        if ([((JavaUtilArrayList *) nil_chk(points_)) size] == 1 && [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getEuclidianController])) isAltDown]) {
          OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoPoint class]);
          jdouble px = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_;
          jdouble py = p->inhomY_;
          jdouble angle = JavaLangMath_atan2WithDouble_withDouble_(yRW - py, xRW - px) * 180 / JavaLangMath_PI;
          jdouble radius = JavaLangMath_sqrtWithDouble_((py - yRW) * (py - yRW) + (px - xRW) * (px - xRW));
          angle = JavaLangMath_roundWithDouble_(angle / 15) * 15;
          xRW = px + radius * JavaLangMath_cosWithDouble_(angle * JavaLangMath_PI / 180);
          yRW = py + radius * JavaLangMath_sinWithDouble_(angle * JavaLangMath_PI / 180);
          [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(endPoint_)) setXWithDouble:xRW];
          [endPoint_ setYWithDouble:yRW];
          [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithOrgGeogebraCommonAwtGPoint2D:endPoint_];
        }
        else [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getEuclidianController])) setLineEndPointWithOrgGeogebraCommonAwtGPoint2D_Double:nil];
        coords = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getInhomCoordsInD3]])) projectInfDim])) crossProductWithOrgGeogebraCommonKernelMatrixCoords:[new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(xRW, yRW, 1) autorelease]];
        [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class])))) setCoordsWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
        break;
        case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_PARALLEL:
        lND = [((JavaUtilArrayList *) nil_chk(lines_)) getWithInt:0];
        equation = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(lND)) getCartesianEquationVectorWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
        OrgGeogebraCommonKernelGeosGeoVec3D_crossWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoVec3D_(xRW, yRW, 1.0, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getY], -[equation getX], 0.0, ((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class])));
        break;
        case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_PERPENDICULAR:
        lND = [((JavaUtilArrayList *) nil_chk(lines_)) getWithInt:0];
        equation = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(lND)) getCartesianEquationVectorWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
        OrgGeogebraCommonKernelGeosGeoVec3D_crossWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoVec3D_(xRW, yRW, 1.0, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getX], [equation getY], 0.0, ((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class])));
        break;
        case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_PERPENDICULAR_BISECTOR:
        coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getInhomCoordsInD2];
        startx = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
        starty = [coords getY];
        OrgGeogebraCommonKernelGeosGeoVec3D_crossWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoVec3D_((xRW + startx) / 2, (yRW + starty) / 2, 1.0, -yRW + starty, xRW - startx, 0.0, ((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class])));
        break;
        case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_ANGLE_BISECTOR:
        g1 = [new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getKernel])) getConstruction]) autorelease];
        h = [new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk([view_ getKernel])) getConstruction]) autorelease];
        coords = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(previewPoint2_)) getCoordsInD2])) crossProductWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getCoordsInD2]];
        [g1 setCoordsWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
        coords = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([previewPoint2_ getCoordsInD2])) crossProductWithOrgGeogebraCommonKernelMatrixCoords:[new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(xRW, yRW, 1) autorelease]];
        [h setCoordsWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
        g2x = g1->y_;
        g2y = -g1->x_;
        lenG = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(g2x, g2y);
        g2x /= lenG;
        g2y /= lenG;
        hx = h->y_;
        hy = -h->x_;
        lenH = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(hx, hy);
        hx /= lenH;
        hy /= lenH;
        ip = g2x * hx + g2y * hy;
        if (ip >= 0.0) {
          wx = g2x + hx;
          wy = g2y + hy;
        }
        else {
          wx = hy - g2y;
          wy = g2x - hx;
          if (g2x * hy < g2y * hx) {
            wx = -wx;
            wy = -wy;
          }
        }
        length = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(wx, wy);
        wx /= length;
        wy /= length;
        coords = [previewPoint2_ getInhomCoordsInD2];
        ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->x_ = -wy;
        ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->y_ = wx;
        ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->z_ = -([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] * ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->x_ + [coords getY] * ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->y_);
        break;
      }
    }
    if ([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class])))) isZero]) {
      isVisible_ = NO;
      return;
    }
    gx_ = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->x_;
    gy_ = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->y_;
    gz_ = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->z_;
    OrgGeogebraCommonEuclidianDrawDrawLine_setClippedLine(self);
  }
}

- (void)drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
    [self updateStrokesWithOrgGeogebraCommonKernelKernelNDGeoElementND:geo_];
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithOrgGeogebraCommonAwtGShape:line_];
  }
}

- (void)disposePreview {
}

- (jboolean)hitWithInt:(jint)screenx
               withInt:(jint)screeny
               withInt:(jint)hitThreshold {
  return isVisible_ && [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:screenx - hitThreshold withInt:screeny - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (jboolean)intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  return [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<OrgGeogebraCommonAwtGArea>)getShape {
  return [self getShapeWithBoolean:NO];
}

- (id<OrgGeogebraCommonAwtGArea>)getShapeWithBoolean:(jboolean)forConic {
  OrgGeogebraCommonEuclidianGeneralPathClipped *gpc = [new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_) autorelease];
  jboolean invert = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) isInverseFill];
  if (x1_ > x2_) {
    jdouble swap = x1_;
    x1_ = x2_;
    x2_ = swap;
    swap = y1_;
    y1_ = y2_;
    y2_ = swap;
  }
  [gpc moveToWithDouble:x1_ withDouble:y1_];
  [gpc lineToWithDouble:x2_ withDouble:y2_];
  if (x1_ > 0 && x2_ <= [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth]) {
    if (y2_ < y1_) {
      [gpc lineToWithDouble:0 withDouble:0];
      [gpc lineToWithDouble:0 withDouble:[view_ getHeight]];
    }
    else {
      [gpc lineToWithDouble:0 withDouble:[view_ getHeight]];
      [gpc lineToWithDouble:0 withDouble:0];
      if (!forConic) invert = !invert;
    }
  }
  else if (x1_ > 0 && x2_ > [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth]) {
    [gpc lineToWithDouble:[view_ getWidth] withDouble:y1_];
    invert ^= forConic ? YES : y1_ > 0;
  }
  else if (x1_ <= 0 && x2_ <= [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth]) {
    [gpc lineToWithDouble:0 withDouble:y2_];
    invert ^= (y2_ > 0);
  }
  else {
    [gpc lineToWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] withDouble:0];
    [gpc lineToWithDouble:0 withDouble:0];
  }
  [gpc closePath];
  id<OrgGeogebraCommonAwtGArea> gpcArea = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithOrgGeogebraCommonAwtGShape:gpc];
  if (!invert) return gpcArea;
  id<OrgGeogebraCommonAwtGArea> complement = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]];
  [((id<OrgGeogebraCommonAwtGArea>) nil_chk(complement)) subtractWithOrgGeogebraCommonAwtGArea:gpcArea];
  return complement;
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if (line_ == nil || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithOrgGeogebraCommonAwtGRectangle:[((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(line_)) getBounds]];
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(line_);
  RELEASE_(points_);
  RELEASE_(lines_);
  RELEASE_(startPoint_);
  RELEASE_(previewPoint2_);
  RELEASE_(attr1_);
  RELEASE_(attr2_);
  RELEASE_(previewMode_);
  RELEASE_(endPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "DrawLine", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum:", "DrawLine", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:withJavaUtilArrayList:withBoolean:", "DrawLine", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateWithOrgGeogebraCommonKernelMatrixCoordMatrix:", "update", "V", 0x1, NULL, NULL },
    { "setClippedLine", NULL, "V", 0x12, NULL, NULL },
    { "clipTopBottom", NULL, "V", 0x12, NULL, NULL },
    { "clipLeftRight", NULL, "V", 0x12, NULL, NULL },
    { "setLabelPosition", NULL, "V", 0x12, NULL, NULL },
    { "drawWithOrgGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
    { "drawTraceWithOrgGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x11, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithOrgGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "getShape", NULL, "Lorg.geogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "getShapeWithBoolean:", "getShape", "Lorg.geogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LEFT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawLine_LEFT },
    { "RIGHT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT },
    { "TOP_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawLine_TOP },
    { "BOTTOM_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "y1_", NULL, 0x1, "D", NULL, NULL,  },
    { "y2_", NULL, 0x1, "D", NULL, NULL,  },
    { "x1_", NULL, 0x1, "D", NULL, NULL,  },
    { "x2_", NULL, 0x1, "D", NULL, NULL,  },
    { "k_", NULL, 0x2, "D", NULL, NULL,  },
    { "d_", NULL, 0x2, "D", NULL, NULL,  },
    { "gx_", NULL, 0x2, "D", NULL, NULL,  },
    { "gy_", NULL, 0x2, "D", NULL, NULL,  },
    { "gz_", NULL, 0x2, "D", NULL, NULL,  },
    { "labelPos_", NULL, 0x2, "I", NULL, NULL,  },
    { "p1Pos_", NULL, 0x2, "I", NULL, NULL,  },
    { "p2Pos_", NULL, 0x2, "I", NULL, NULL,  },
    { "x_", NULL, 0x2, "I", NULL, NULL,  },
    { "y_", NULL, 0x2, "I", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "points_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "lines_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoLineND;>;",  },
    { "startPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "previewPoint2_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "attr1_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "attr2_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "previewMode_", NULL, 0x2, "Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;", NULL, NULL,  },
    { "endPoint_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint2D;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawLine = { 2, "DrawLine", "org.geogebra.common.euclidian.draw", NULL, 0x1, 23, methods, 30, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianDrawDrawLine;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonEuclidianDrawDrawLine *self, OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  self->labelPos_ = OrgGeogebraCommonEuclidianDrawDrawLine_LEFT;
  OrgGeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr1_(self, [IOSBooleanArray newArrayWithLength:4]);
  OrgGeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr2_(self, [IOSBooleanArray newArrayWithLength:4]);
  OrgGeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_NONE());
  OrgGeogebraCommonEuclidianDrawDrawLine_set_endPoint_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawLine_set_g_(self, g);
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [self update];
}

OrgGeogebraCommonEuclidianDrawDrawLine *new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonEuclidianEuclidianView *view, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonEuclidianDrawDrawLine *self = [OrgGeogebraCommonEuclidianDrawDrawLine alloc];
  OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, view, g);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(OrgGeogebraCommonEuclidianDrawDrawLine *self, OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *previewMode) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  self->labelPos_ = OrgGeogebraCommonEuclidianDrawDrawLine_LEFT;
  OrgGeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr1_(self, [IOSBooleanArray newArrayWithLength:4]);
  OrgGeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr2_(self, [IOSBooleanArray newArrayWithLength:4]);
  OrgGeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_NONE());
  OrgGeogebraCommonEuclidianDrawDrawLine_set_endPoint_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  OrgGeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, previewMode);
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawLine_set_points_(self, points);
  if ([((JavaUtilArrayList *) nil_chk(points)) size] == 2) {
    OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([points getWithInt:1], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    [p setCoordsWithDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_ withDouble:JavaLangMath_roundWithDouble_(p->inhomY_) withDouble:1];
  }
  OrgGeogebraCommonEuclidianDrawDrawLine_setAndConsume_g_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction]));
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([view getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LINE]);
  OrgGeogebraCommonEuclidianDrawDrawLine_updatePreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawLine *new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *previewMode) {
  OrgGeogebraCommonEuclidianDrawDrawLine *self = [OrgGeogebraCommonEuclidianDrawDrawLine alloc];
  OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, view, points, previewMode);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(OrgGeogebraCommonEuclidianDrawDrawLine *self, OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, JavaUtilArrayList *lines, jboolean parallel) {
  OrgGeogebraCommonEuclidianDrawable_init(self);
  self->labelPos_ = OrgGeogebraCommonEuclidianDrawDrawLine_LEFT;
  OrgGeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr1_(self, [IOSBooleanArray newArrayWithLength:4]);
  OrgGeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr2_(self, [IOSBooleanArray newArrayWithLength:4]);
  OrgGeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_NONE());
  OrgGeogebraCommonEuclidianDrawDrawLine_set_endPoint_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  if (parallel) OrgGeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_PARALLEL());
  else OrgGeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_PERPENDICULAR());
  OrgGeogebraCommonEuclidianDrawable_set_view_(self, view);
  OrgGeogebraCommonEuclidianDrawDrawLine_set_points_(self, points);
  OrgGeogebraCommonEuclidianDrawDrawLine_set_lines_(self, lines);
  OrgGeogebraCommonEuclidianDrawDrawLine_setAndConsume_g_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction]));
  OrgGeogebraCommonEuclidianDrawable_set_geo_(self, [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([view getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LINE]);
  OrgGeogebraCommonEuclidianDrawDrawLine_updatePreview(self);
}

OrgGeogebraCommonEuclidianDrawDrawLine *new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, JavaUtilArrayList *lines, jboolean parallel) {
  OrgGeogebraCommonEuclidianDrawDrawLine *self = [OrgGeogebraCommonEuclidianDrawDrawLine alloc];
  OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(self, view, points, lines, parallel);
  return self;
}

void OrgGeogebraCommonEuclidianDrawDrawLine_setClippedLine(OrgGeogebraCommonEuclidianDrawDrawLine *self) {
  if (JavaLangMath_absWithDouble_(self->gx_) * [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getScaleRatio] < JavaLangMath_absWithDouble_(self->gy_)) {
    self->k_ = self->gx_ / self->gy_ * [self->view_ getScaleRatio];
    self->d_ = [self->view_ getyZero] + self->gz_ / self->gy_ * [self->view_ getYscale] - self->k_ * [self->view_ getxZero];
    self->x1_ = -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y1_ = self->k_ * self->x1_ + self->d_;
    self->x2_ = [self->view_ getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y2_ = self->k_ * self->x2_ + self->d_;
    self->p1Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_LEFT;
    self->p2Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT;
    OrgGeogebraCommonEuclidianDrawDrawLine_clipTopBottom(self);
  }
  else {
    self->k_ = self->gy_ / (self->gx_ * [self->view_ getScaleRatio]);
    self->d_ = [self->view_ getxZero] - self->gz_ / self->gx_ * [self->view_ getXscale] - self->k_ * [self->view_ getyZero];
    self->y1_ = [self->view_ getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x1_ = self->k_ * self->y1_ + self->d_;
    self->y2_ = -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x2_ = self->k_ * self->y2_ + self->d_;
    self->p1Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM;
    self->p2Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_TOP;
    OrgGeogebraCommonEuclidianDrawDrawLine_clipLeftRight(self);
  }
  if (self->line_ == nil) OrgGeogebraCommonEuclidianDrawDrawLine_set_line_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:self->x1_ withDouble:self->y1_ withDouble:self->x2_ withDouble:self->y2_];
}

void OrgGeogebraCommonEuclidianDrawDrawLine_clipTopBottom(OrgGeogebraCommonEuclidianDrawDrawLine *self) {
  *IOSBooleanArray_GetRef(nil_chk(self->attr1_), OrgGeogebraCommonEuclidianDrawDrawLine_TOP) = (self->y1_ < -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM) = (self->y1_ > [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(nil_chk(self->attr2_), OrgGeogebraCommonEuclidianDrawDrawLine_TOP) = (self->y2_ < -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM) = (self->y2_ > [self->view_ getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  if ((IOSBooleanArray_Get(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_TOP) && IOSBooleanArray_Get(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_TOP)) || (IOSBooleanArray_Get(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM) && IOSBooleanArray_Get(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM))) return;
  if (IOSBooleanArray_Get(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_TOP)) {
    self->y1_ = -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x1_ = (self->y1_ - self->d_) / self->k_;
    self->p1Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_TOP;
  }
  else if (IOSBooleanArray_Get(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM)) {
    self->y1_ = [self->view_ getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x1_ = (self->y1_ - self->d_) / self->k_;
    self->p1Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM;
  }
  if (IOSBooleanArray_Get(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_TOP)) {
    self->y2_ = -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x2_ = (self->y2_ - self->d_) / self->k_;
    self->p2Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_TOP;
  }
  else if (IOSBooleanArray_Get(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM)) {
    self->y2_ = [self->view_ getHeight] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x2_ = (self->y2_ - self->d_) / self->k_;
    self->p2Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM;
  }
}

void OrgGeogebraCommonEuclidianDrawDrawLine_clipLeftRight(OrgGeogebraCommonEuclidianDrawDrawLine *self) {
  *IOSBooleanArray_GetRef(nil_chk(self->attr1_), OrgGeogebraCommonEuclidianDrawDrawLine_LEFT) = (self->x1_ < -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT) = (self->x1_ > [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(nil_chk(self->attr2_), OrgGeogebraCommonEuclidianDrawDrawLine_LEFT) = (self->x2_ < -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT) = (self->x2_ > [self->view_ getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  if ((IOSBooleanArray_Get(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_LEFT) && IOSBooleanArray_Get(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_LEFT)) || (IOSBooleanArray_Get(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT) && IOSBooleanArray_Get(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT))) return;
  if (IOSBooleanArray_Get(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_LEFT)) {
    self->x1_ = -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y1_ = (self->x1_ - self->d_) / self->k_;
    self->p1Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_LEFT;
  }
  else if (IOSBooleanArray_Get(self->attr1_, OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT)) {
    self->x1_ = [self->view_ getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y1_ = (self->x1_ - self->d_) / self->k_;
    self->p1Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT;
  }
  if (IOSBooleanArray_Get(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_LEFT)) {
    self->x2_ = -OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y2_ = (self->x2_ - self->d_) / self->k_;
    self->p2Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_LEFT;
  }
  else if (IOSBooleanArray_Get(self->attr2_, OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT)) {
    self->x2_ = [self->view_ getWidth] + OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y2_ = (self->x2_ - self->d_) / self->k_;
    self->p2Pos_ = OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT;
  }
}

void OrgGeogebraCommonEuclidianDrawDrawLine_setLabelPosition(OrgGeogebraCommonEuclidianDrawDrawLine *self) {
  if (JavaLangMath_absWithDouble_(self->xLabel_ - self->x1_) + JavaLangMath_absWithDouble_(self->yLabel_ - self->y1_) > JavaLangMath_absWithDouble_(self->xLabel_ - self->x2_) + JavaLangMath_absWithDouble_(self->yLabel_ - self->y2_)) {
    self->x_ = J2ObjCFpToInt(self->x2_);
    self->y_ = J2ObjCFpToInt(self->y2_);
    self->labelPos_ = self->p2Pos_;
  }
  else {
    self->x_ = J2ObjCFpToInt(self->x1_);
    self->y_ = J2ObjCFpToInt(self->y1_);
    self->labelPos_ = self->p1Pos_;
  }
  switch (self->labelPos_) {
    case OrgGeogebraCommonEuclidianDrawDrawLine_LEFT:
    self->xLabel_ = 5;
    if (2 * self->y_ < [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHeight]) {
      self->yLabel_ = self->y_ + 16 + J2ObjCFpToInt((16 * (self->gx_ / self->gy_)));
    }
    else {
      self->yLabel_ = self->y_ - 8 + J2ObjCFpToInt((16 * (self->gx_ / self->gy_)));
    }
    break;
    case OrgGeogebraCommonEuclidianDrawDrawLine_RIGHT:
    self->xLabel_ = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] - 15;
    if (2 * self->y_ < [self->view_ getHeight]) {
      self->yLabel_ = self->y_ + 16 - J2ObjCFpToInt((16 * (self->gx_ / self->gy_)));
    }
    else {
      self->yLabel_ = self->y_ - 8 - J2ObjCFpToInt((16 * (self->gx_ / self->gy_)));
    }
    break;
    case OrgGeogebraCommonEuclidianDrawDrawLine_TOP:
    self->yLabel_ = 15;
    if (2 * self->x_ < [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth]) {
      self->xLabel_ = self->x_ + 8 + J2ObjCFpToInt((16 * (self->gy_ / self->gx_)));
    }
    else {
      self->xLabel_ = self->x_ - 16 + J2ObjCFpToInt((16 * (self->gy_ / self->gx_)));
    }
    break;
    case OrgGeogebraCommonEuclidianDrawDrawLine_BOTTOM:
    self->yLabel_ = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHeight] - 5;
    if (2 * self->x_ < [self->view_ getWidth]) {
      self->xLabel_ = self->x_ + 8 - J2ObjCFpToInt((16 * (self->gy_ / self->gx_)));
    }
    else {
      self->xLabel_ = self->x_ - 16 - J2ObjCFpToInt((16 * (self->gy_ / self->gx_)));
    }
    break;
  }
}

void OrgGeogebraCommonEuclidianDrawDrawLine_drawTraceWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianDrawDrawLine *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithOrgGeogebraCommonAwtGPaint:[self getObjectColor]];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->objStroke_];
  [g2 drawWithOrgGeogebraCommonAwtGShape:self->line_];
}

void OrgGeogebraCommonEuclidianDrawDrawLine_updatePreview(OrgGeogebraCommonEuclidianDrawDrawLine *self) {
  switch ([self->previewMode_ ordinal]) {
    case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_LINE:
    case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_PERPENDICULAR_BISECTOR:
    self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->points_)) size] == 1);
    if (self->isVisible_) {
      OrgGeogebraCommonEuclidianDrawDrawLine_set_startPoint_(self, [self->points_ getWithInt:0]);
    }
    break;
    case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_PARALLEL:
    case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_PERPENDICULAR:
    self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->lines_)) size] == 1);
    break;
    case OrgGeogebraCommonEuclidianDrawDrawLine_PreviewType_ANGLE_BISECTOR:
    self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->points_)) size] == 2);
    if (self->isVisible_) {
      OrgGeogebraCommonEuclidianDrawDrawLine_set_startPoint_(self, [self->points_ getWithInt:0]);
      OrgGeogebraCommonEuclidianDrawDrawLine_set_previewPoint2_(self, [self->points_ getWithInt:1]);
    }
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawLine)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum)

OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values_[6];

@implementation OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values() {
  OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values_ count:6 type:OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values();
}

+ (OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initialize();
  for (int i = 0; i < 6; i++) {
    OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *e = OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum class]) {
    OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_NONE = new_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"NONE", 0);
    OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_LINE = new_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"LINE", 1);
    OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PARALLEL = new_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"PARALLEL", 2);
    OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PERPENDICULAR = new_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"PERPENDICULAR", 3);
    OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PERPENDICULAR_BISECTOR = new_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"PERPENDICULAR_BISECTOR", 4);
    OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_ANGLE_BISECTOR = new_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"ANGLE_BISECTOR", 5);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "NONE", 0x4019, "Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;", &OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_NONE, NULL,  },
    { "LINE", "LINE", 0x4019, "Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;", &OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_LINE, NULL,  },
    { "PARALLEL", "PARALLEL", 0x4019, "Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;", &OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PARALLEL, NULL,  },
    { "PERPENDICULAR", "PERPENDICULAR", 0x4019, "Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;", &OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PERPENDICULAR, NULL,  },
    { "PERPENDICULAR_BISECTOR", "PERPENDICULAR_BISECTOR", 0x4019, "Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;", &OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PERPENDICULAR_BISECTOR, NULL,  },
    { "ANGLE_BISECTOR", "ANGLE_BISECTOR", 0x4019, "Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;", &OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_ANGLE_BISECTOR, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.euclidian.draw.DrawLine$PreviewType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum = { 2, "PreviewType", "org.geogebra.common.euclidian.draw", "DrawLine", 0x4019, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/euclidian/draw/DrawLine$PreviewType;>;" };
  return &_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum;
}

@end

void OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *new_OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *self = [OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum alloc];
  OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum)
