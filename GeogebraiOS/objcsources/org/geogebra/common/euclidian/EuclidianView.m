//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/EuclidianView.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GBufferedImage.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GDimension.h"
#include "org/geogebra/common/awt/GEllipse2DDouble.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GFontRenderContext.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GLine2D.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GShape.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/awt/font/GTextLayout.h"
#include "org/geogebra/common/euclidian/Drawable.h"
#include "org/geogebra/common/euclidian/DrawableList.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/EuclidianStyleBar.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/GetViewId.h"
#include "org/geogebra/common/euclidian/Hits.h"
#include "org/geogebra/common/euclidian/MyButton.h"
#include "org/geogebra/common/euclidian/MyZoomer.h"
#include "org/geogebra/common/euclidian/Previewable.h"
#include "org/geogebra/common/euclidian/RemoveNeeded.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/euclidian/draw/DrawButton.h"
#include "org/geogebra/common/euclidian/draw/DrawConic.h"
#include "org/geogebra/common/euclidian/draw/DrawImage.h"
#include "org/geogebra/common/euclidian/draw/DrawLine.h"
#include "org/geogebra/common/euclidian/draw/DrawList.h"
#include "org/geogebra/common/euclidian/draw/DrawPolyLine.h"
#include "org/geogebra/common/euclidian/draw/DrawPolygon.h"
#include "org/geogebra/common/euclidian/draw/DrawRay.h"
#include "org/geogebra/common/euclidian/draw/DrawSegment.h"
#include "org/geogebra/common/euclidian/draw/DrawTextField.h"
#include "org/geogebra/common/euclidian/draw/DrawVector.h"
#include "org/geogebra/common/euclidian/event/PointerEventType.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/factories/FormatFactory.h"
#include "org/geogebra/common/gui/Layout.h"
#include "org/geogebra/common/gui/dialog/options/OptionsEuclidian.h"
#include "org/geogebra/common/gui/layout/DockManager.h"
#include "org/geogebra/common/javax/swing/GBox.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/ModeSetter.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoAngle.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoAxis.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/settings/AbstractSettings.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/MyMath.h"
#include "org/geogebra/common/util/NumberFormatAdapter.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"

#pragma clang diagnostic ignored "-Wprotocol"

#define OrgGeogebraCommonEuclidianEuclidianView_MAX_PIXEL_DISTANCE 10
#define OrgGeogebraCommonEuclidianEuclidianView_MIN_PIXEL_DISTANCE 0.5
#define OrgGeogebraCommonEuclidianEuclidianView_MAX_ANGLE 10.0
#define OrgGeogebraCommonEuclidianEuclidianView_MAX_ANGLE_OFF_SCREEN 45.0
#define OrgGeogebraCommonEuclidianEuclidianView_MAX_DEFINED_BISECTIONS 16
#define OrgGeogebraCommonEuclidianEuclidianView_MAX_PROBLEM_BISECTIONS 8
#define OrgGeogebraCommonEuclidianEuclidianView_MAX_ZERO_COUNT 1000
#define OrgGeogebraCommonEuclidianEuclidianView_MIN_SAMPLE_POINTS 80

@interface OrgGeogebraCommonEuclidianEuclidianView () {
 @public
    dispatch_queue_t backgroundRenderQueue;
  jdouble xZeroOld_, yZeroOld_;
  jint mode_;
  OrgGeogebraCommonAwtGColor *axesColor_, *gridColor_;
  id<OrgGeogebraCommonAwtGBasicStroke> axesStroke_, tickStroke_, gridStroke_;
  jint fontSize_;
  id<OrgGeogebraCommonAwtGAffineTransform> coordTransform_;
  jboolean automaticGridDistance_;
  jint gridLineStyle_, axesLineType_;
  jint gridType_;
  OrgGeogebraCommonAwtGFont *fontPoint_;
  OrgGeogebraCommonAwtGFont *fontCoords_;
  jboolean showAxesCornerCoords_;
  id<OrgGeogebraCommonEuclidianPreviewable> previewDrawable_;
  OrgGeogebraCommonMainSettingsEuclidianSettings *settings_;
  OrgGeogebraCommonEuclidianHits *hits_;
  jboolean updateBackgroundOnNextRepaint_;
  jboolean updatingBounds_;
  jdouble invXscale_;
  jdouble invYscale_;
  jdouble xZero_;
  jdouble yZero_;
  jdouble xscale_;
  jdouble yscale_;
  JavaUtilHashMap *DrawableMap_;
  JavaUtilArrayList *stickyPointList_;
  OrgGeogebraCommonEuclidianDrawableList *allDrawableList_;
  OrgGeogebraCommonEuclidianDrawableList *bgImageList_;
  jboolean needsAllDrawablesUpdate_;
  jboolean batchUpdate_;
  JavaUtilArrayList *geosWaiting_;
  JavaUtilArrayList *hitPointOrBoundary_, *hitFilling_, *hitLabel_;
  id<OrgGeogebraCommonAwtGEllipse2DDouble> circle_;
  id<OrgGeogebraCommonAwtGLine2D> tempLine_;
  id<OrgGeogebraCommonAwtGGeneralPath> gp_;
  JavaUtilArrayList *axesLabelsPositionsY_;
  JavaUtilArrayList *axesLabelsPositionsX_;
  jdouble yLabelMaxWidth_;
  jdouble xLabelHeights_;
  jint widthTemp_, heightTemp_;
  jdouble xminTemp_, xmaxTemp_, yminTemp_, ymaxTemp_;
  OrgGeogebraCommonEuclidianHits *tempArrayList_;
  OrgGeogebraCommonEuclidianMyZoomer *zoomer_;
  OrgGeogebraCommonEuclidianMyZoomer *axesRatioZoomer_;
  OrgGeogebraCommonEuclidianMyZoomer *mover_;
  OrgGeogebraCommonEuclidianMyZoomer *zoomerRW_;
  OrgGeogebraCommonGuiDialogOptionsOptionsEuclidian *optionPanel_;
}

- (void)setStandardCoordSystemWithBoolean:(jboolean)repaint;

+ (jboolean)clearRectangleWithInt:(jint)mode;

- (void)setSizeListeners;

- (void)setXscaleWithDouble:(jdouble)xscale;

- (void)setYscaleWithDouble:(jdouble)yscale;

- (void)setCoordTransformIfNeeded;

- (jboolean)drawableNeededWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (void)setFontPointWithOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontPoint;

- (void)setFontCoordsWithOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontCoords;

- (jdouble)getXAxisCrossingPixel;

- (jdouble)getYAxisCrossingPixel;

- (jboolean)xAxisOnscreen;

- (jboolean)yAxisOnscreen;

- (void)drawLineAvoidingLabelsHWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                                                        withDouble:(jdouble)x1
                                                        withDouble:(jdouble)y1
                                                        withDouble:(jdouble)x2
                                                        withDouble:(jdouble)y2
                                                        withDouble:(jdouble)xCrossPix;

- (void)drawLineAvoidingLabelsVWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                                                        withDouble:(jdouble)x1
                                                        withDouble:(jdouble)y1
                                                        withDouble:(jdouble)x2
                                                        withDouble:(jdouble)y2
                                                        withDouble:(jdouble)yCrossPix;

- (void)drawStringWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                                         withNSString:(NSString *)text
                                           withDouble:(jdouble)x
                                           withDouble:(jdouble)y;

- (jboolean)isPrimaryEV;

+ (jdouble)estimateNumberHeightWithOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontAxes2;

- (jdouble)estimateNumberWidthWithDouble:(jdouble)d
           withOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontAxes2;

+ (jdouble)estimateTextWidthWithNSString:(NSString *)s
           withOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontAxes2;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, axesColor_, OrgGeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, gridColor_, OrgGeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, axesStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, tickStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, gridStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, coordTransform_, id<OrgGeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, fontPoint_, OrgGeogebraCommonAwtGFont *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, fontCoords_, OrgGeogebraCommonAwtGFont *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, previewDrawable_, id<OrgGeogebraCommonEuclidianPreviewable>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, settings_, OrgGeogebraCommonMainSettingsEuclidianSettings *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, hits_, OrgGeogebraCommonEuclidianHits *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, DrawableMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, stickyPointList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, allDrawableList_, OrgGeogebraCommonEuclidianDrawableList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, bgImageList_, OrgGeogebraCommonEuclidianDrawableList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, geosWaiting_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, hitPointOrBoundary_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, hitFilling_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, hitLabel_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, circle_, id<OrgGeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, tempLine_, id<OrgGeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, gp_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, axesLabelsPositionsY_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, axesLabelsPositionsX_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, tempArrayList_, OrgGeogebraCommonEuclidianHits *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, zoomer_, OrgGeogebraCommonEuclidianMyZoomer *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, axesRatioZoomer_, OrgGeogebraCommonEuclidianMyZoomer *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, mover_, OrgGeogebraCommonEuclidianMyZoomer *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, zoomerRW_, OrgGeogebraCommonEuclidianMyZoomer *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, optionPanel_, OrgGeogebraCommonGuiDialogOptionsOptionsEuclidian *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonEuclidianEuclidianView_colZoomRectangle_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, colZoomRectangle_, OrgGeogebraCommonAwtGColor *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonEuclidianEuclidianView_colZoomRectangleFill_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, colZoomRectangleFill_, OrgGeogebraCommonAwtGColor *)

static id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianEuclidianView_boldAxesStroke_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, boldAxesStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianView, boldAxesStroke_, id<OrgGeogebraCommonAwtGBasicStroke>)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MAX_PIXEL_DISTANCE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MIN_PIXEL_DISTANCE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MAX_ANGLE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MAX_ANGLE_OFF_SCREEN, jdouble)

static jdouble OrgGeogebraCommonEuclidianEuclidianView_MAX_BEND_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MAX_BEND_, jdouble)

static jdouble OrgGeogebraCommonEuclidianEuclidianView_MAX_BEND_OFF_SCREEN_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MAX_BEND_OFF_SCREEN_, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MAX_DEFINED_BISECTIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MAX_PROBLEM_BISECTIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MAX_ZERO_COUNT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianView, MIN_SAMPLE_POINTS, jint)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, jboolean repaint);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianView_clearRectangleWithInt_(jint mode);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setSizeListeners(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xRW);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble yRW);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble x);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble y);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xZero, jdouble yZero, jdouble xscale, jdouble yscale);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xmin2, jdouble xmax2, jdouble ymin2, jdouble ymax2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xZero, jdouble yZero, jdouble xscale, jdouble yscale, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xscale);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble yscale);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianView_getGridType(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, jboolean repaint);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianView_drawableNeededWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static OrgGeogebraCommonEuclidianDrawableND *OrgGeogebraCommonEuclidianEuclidianView_getDrawableWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setFontPointWithOrgGeogebraCommonAwtGFont_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonAwtGFont *fontPoint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setFontCoordsWithOrgGeogebraCommonAwtGFont_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonAwtGFont *fontCoords);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianView_getAllowToolTips(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_updateBackground(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianView_hasMouse2D(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_clearBackgroundWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_drawBackgroundWithOrgGeogebraCommonAwtGGraphics2D_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g, jboolean clear);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_drawGridWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianView_xAxisOnscreen(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianView_yAxisOnscreen(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsHWithOrgGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g2, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble xCrossPix);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsVWithOrgGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g2, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble yCrossPix);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_drawStringWithOrgGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g2, NSString *text, jdouble x, jdouble y);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_restoreOldCoordSystem(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianView_setAnimatedRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xmin, jdouble xmax, jdouble ymin, jdouble ymax, jint steps, jboolean storeUndo);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianView_isPrimaryEV(OrgGeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithOrgGeogebraCommonAwtGFont_(OrgGeogebraCommonAwtGFont *fontAxes2);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withOrgGeogebraCommonAwtGFont_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble d, OrgGeogebraCommonAwtGFont *fontAxes2);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withOrgGeogebraCommonAwtGFont_(NSString *s, OrgGeogebraCommonAwtGFont *fontAxes2);

__attribute__((unused)) static id<OrgGeogebraCommonEuclidianEuclidianStyleBar> OrgGeogebraCommonEuclidianEuclidianView_getStyleBar(OrgGeogebraCommonEuclidianEuclidianView *self);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonEuclidianEuclidianView)

jint OrgGeogebraCommonEuclidianEuclidianView_EVNO_GENERAL_ = 1001;
jint OrgGeogebraCommonEuclidianEuclidianView_EVNO_3D_ = -1;
NSString *OrgGeogebraCommonEuclidianEuclidianView_EXPORT1_ = @"Export_1";
NSString *OrgGeogebraCommonEuclidianEuclidianView_EXPORT2_ = @"Export_2";
jint OrgGeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_ = 10;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonEuclidianEuclidianView_colDeletionSquare_;
id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianEuclidianView_strokeDeletionSquare_;
id<OrgGeogebraCommonAwtGBasicStroke> OrgGeogebraCommonEuclidianEuclidianView_defAxesStroke_;

@implementation OrgGeogebraCommonEuclidianEuclidianView

+ (IOSObjectArray *)getLineTypes {
  return OrgGeogebraCommonEuclidianEuclidianView_getLineTypes();
}

+ (IOSObjectArray *)getPointStyles {
  return OrgGeogebraCommonEuclidianEuclidianView_getPointStyles();
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)ec
                                                              withInt:(jint)viewNo
                   withOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)settings {
  OrgGeogebraCommonEuclidianEuclidianView_initWithOrgGeogebraCommonEuclidianEuclidianController_withInt_withOrgGeogebraCommonMainSettingsEuclidianSettings_(self, ec, viewNo, settings);
  return self;
}

- (OrgGeogebraCommonEuclidianEuclidianViewCompanion *)newEuclidianViewCompanion {
  return new_OrgGeogebraCommonEuclidianEuclidianViewCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(self);
}

- (OrgGeogebraCommonEuclidianEuclidianViewCompanion *)getCompanion {
  return companion_;
}

- (void)initAxesValues {
  axesNumberFormat_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonUtilNumberFormatAdapter_class_()];
  showAxesNumbers_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2];
  axesLabels_ = [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:NSString_class_()];
  axesLabelsStyle_ = [IOSIntArray newArrayWithInts:(jint[]){ OrgGeogebraCommonAwtGFont_PLAIN, OrgGeogebraCommonAwtGFont_PLAIN } count:2];
  axesUnitLabels_ = [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:NSString_class_()];
  axesTickStyles_ = [IOSIntArray newArrayWithInts:(jint[]){ OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR, OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR } count:2];
  automaticAxesNumberingDistances_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2];
  axesNumberingDistances_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2, 2 } count:2];
  drawBorderAxes_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO } count:2];
  axisCross_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0 } count:2];
  positiveAxes_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO } count:2];
  piAxisUnit_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO } count:2];
  gridDistances_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2, 2, JavaLangMath_PI / 6 } count:3];
  AxesTickInterval_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 1 } count:2];
}

- (void)setAxesColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)axesColor {
  if (axesColor != nil) {
    self->axesColor_ = axesColor;
  }
}

- (void)setStandardCoordSystem {
  OrgGeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(self, YES);
}

- (void)setStandardCoordSystemWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(self, repaint);
}

- (void)attachView {
  [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) attachView];
}

- (jint)getPointCapturingMode {
  if (settings_ != nil) {
    return [settings_ getPointCapturingMode];
  }
  return pointCapturingMode_;
}

- (void)setPointCapturingWithInt:(jint)mode {
  if (settings_ != nil) {
    [settings_ setPointCapturingWithInt:mode];
  }
  else {
    pointCapturingMode_ = mode;
  }
}

- (jint)getMode {
  return mode_;
}

- (void)setModeWithInt:(jint)mode
withOrgGeogebraCommonKernelModeSetterEnum:(OrgGeogebraCommonKernelModeSetterEnum *)m {
  if (mode == self->mode_) {
    return;
  }
  self->mode_ = mode;
  [self initCursor];
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) clearJustCreatedGeos];
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) setModeWithInt:mode];
  if (OrgGeogebraCommonEuclidianEuclidianView_clearRectangleWithInt_(mode)) {
    [self setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
  }
  [self setStyleBarModeWithInt:mode];
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

+ (jboolean)clearRectangleWithInt:(jint)mode {
  return OrgGeogebraCommonEuclidianEuclidianView_clearRectangleWithInt_(mode);
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getXminObject {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)updateBoundObjects {
  if ([self isZoomable]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[self getXmin]];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[self getXmax]];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[self getYmin]];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[self getYmax]];
  }
}

- (jboolean)isLockedAxesRatio {
  return lockedAxesRatio_ != nil || (gridType_ == OrgGeogebraCommonEuclidianEuclidianView_GRID_POLAR);
}

- (void)setLockedAxesRatioWithJavaLangDouble:(JavaLangDouble *)flag {
  lockedAxesRatio_ = flag;
  if (flag != nil) {
    [self updateBoundsWithBoolean:YES withBoolean:YES];
  }
}

- (void)updateBoundsWithBoolean:(jboolean)updateDrawables
                    withBoolean:(jboolean)updateSettings {
  if (updatingBounds_) return;
  updatingBounds_ = YES;
  jdouble xmin2 = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(xminObject_)) getDouble];
  jdouble xmax2 = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(xmaxObject_)) getDouble];
  jdouble ymin2 = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(yminObject_)) getDouble];
  jdouble ymax2 = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(ymaxObject_)) getDouble];
  if ([self isLockedAxesRatio] && ([self getHeight] > 0) && ([self getWidth] > 0)) {
    jdouble ratio = gridType_ == OrgGeogebraCommonEuclidianEuclidianView_GRID_POLAR ? 1 : [((JavaLangDouble *) nil_chk(lockedAxesRatio_)) doubleValue];
    jdouble newWidth = ratio * ((ymax2 - ymin2) * [self getWidth]) / ([self getHeight] + 0.0);
    jdouble newHeight = 1 / ratio * ((xmax2 - xmin2) * [self getHeight]) / ([self getWidth] + 0.0);
    if ((xmax2 - xmin2) < newWidth) {
      jdouble c = (xmin2 + xmax2) / 2;
      xmin2 = c - (newWidth / 2);
      xmax2 = c + (newWidth / 2);
    }
    else {
      jdouble c = (ymin2 + ymax2) / 2;
      ymin2 = c - (newHeight / 2);
      ymax2 = c + (newHeight / 2);
    }
  }
  if (((xmax2 - xmin2) > OrgGeogebraCommonKernelKernel_MAX_PRECISION) && ((ymax2 - ymin2) > OrgGeogebraCommonKernelKernel_MAX_PRECISION)) {
    xmax_ = xmax2;
    xmin_ = xmin2;
    ymin_ = ymin2;
    ymax_ = ymax2;
    OrgGeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(self, [self getWidth] / (xmax2 - xmin2));
    OrgGeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(self, [self getHeight] / (ymax2 - ymin2));
    xZero_ = -xscale_ * xmin2;
    yZero_ = yscale_ * ymax2;
    if (updateSettings && settings_ != nil) {
      [settings_ setCoordSystemWithDouble:xZero_ withDouble:yZero_ withDouble:xscale_ withDouble:yscale_ withBoolean:NO];
    }
    [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
    [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
    [self calcPrintingScale];
    if ([self isLockedAxesRatio]) {
      [self updateBoundObjects];
    }
  }
  if (evNo_ != OrgGeogebraCommonEuclidianEuclidianView_EVNO_GENERAL_) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) setEuclidianViewBoundsWithInt:evNo_ withDouble:[self getXmin] withDouble:[self getXmax] withDouble:[self getYmin] withDouble:[self getYmax] withDouble:[self getXscale] withDouble:[self getYscale]];
  }
  OrgGeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(self);
  if (optionPanel_ != nil) [optionPanel_ updateBounds];
  if (updateDrawables) {
    OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
    self->updateBackgroundOnNextRepaint_ = YES;
  }
  updatingBounds_ = NO;
}

- (jboolean)isZoomable {
  if ((xminObject_ != nil) && (![((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isIndependent] || [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isLabelSet])) {
    return NO;
  }
  if ((xmaxObject_ != nil) && (![((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isIndependent] || [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isLabelSet])) {
    return NO;
  }
  if ((yminObject_ != nil) && (![((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isIndependent] || [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isLabelSet])) {
    return NO;
  }
  if ((ymaxObject_ != nil) && (![((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isIndependent] || [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isLabelSet])) {
    return NO;
  }
  return YES;
}

- (void)setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)xminObjectNew {
  if (xminObject_ != nil) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) removeEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  }
  if (xminObjectNew == nil) {
    self->xminObject_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
    [self updateBoundObjects];
  }
  else {
    self->xminObject_ = xminObjectNew;
  }
  OrgGeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getXmaxObject {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)xmaxObjectNew {
  if (xmaxObject_ != nil) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) removeEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  }
  if (xmaxObjectNew == nil) {
    self->xmaxObject_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
    [self updateBoundObjects];
  }
  else {
    self->xmaxObject_ = xmaxObjectNew;
  }
  OrgGeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getYminObject {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)yminObjectNew {
  if (yminObject_ != nil) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) removeEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  }
  if (yminObjectNew == nil) {
    self->yminObject_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
    [self updateBoundObjects];
  }
  else {
    self->yminObject_ = yminObjectNew;
  }
  OrgGeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (void)setSizeListeners {
  OrgGeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (jint)toScreenCoordXWithDouble:(jdouble)xRW {
  return OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(self, xRW);
}

- (jint)toScreenCoordYWithDouble:(jdouble)yRW {
  return OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(self, yRW);
}

- (jdouble)toScreenCoordXdWithDouble:(jdouble)xRW {
  return [self getxZero] + (xRW * [self getXscale]);
}

- (jdouble)toScreenCoordYdWithDouble:(jdouble)yRW {
  return [self getyZero] - (yRW * [self getYscale]);
}

- (jint)toClippedScreenCoordXWithDouble:(jdouble)xRW {
  if (xRW > [self getXmax]) {
    return [self getWidth] + 1;
  }
  else if (xRW < [self getXmin]) {
    return -1;
  }
  else {
    return OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(self, xRW);
  }
}

- (void)rememberOrigins {
  xZeroOld_ = [self getxZero];
  yZeroOld_ = [self getyZero];
}

- (jint)toClippedScreenCoordYWithDouble:(jdouble)yRW {
  if (yRW > [self getYmax]) {
    return -1;
  }
  else if (yRW < [self getYmin]) {
    return [self getHeight] + 1;
  }
  else {
    return OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(self, yRW);
  }
}

- (jboolean)toScreenCoordsWithDoubleArray:(IOSDoubleArray *)inOut {
  *IOSDoubleArray_GetRef(nil_chk(inOut), 0) = [self getxZero] + (IOSDoubleArray_Get(inOut, 0) * [self getXscale]);
  *IOSDoubleArray_GetRef(inOut, 1) = [self getyZero] - (IOSDoubleArray_Get(inOut, 1) * [self getYscale]);
  jboolean onScreen = YES;
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(inOut, 0)) || JavaLangDouble_isInfiniteWithDouble_(IOSDoubleArray_Get(inOut, 0))) {
    *IOSDoubleArray_GetRef(inOut, 0) = JavaLangDouble_NaN;
    onScreen = NO;
  }
  else if (IOSDoubleArray_Get(inOut, 0) < 0) {
    onScreen = NO;
  }
  else if (IOSDoubleArray_Get(inOut, 0) > [self getWidth]) {
    onScreen = NO;
  }
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(inOut, 1)) || JavaLangDouble_isInfiniteWithDouble_(IOSDoubleArray_Get(inOut, 1))) {
    *IOSDoubleArray_GetRef(inOut, 1) = JavaLangDouble_NaN;
    onScreen = NO;
  }
  else if (IOSDoubleArray_Get(inOut, 1) < 0) {
    onScreen = NO;
  }
  else if (IOSDoubleArray_Get(inOut, 1) > [self getHeight]) {
    onScreen = NO;
  }
  return onScreen;
}

- (jboolean)isOnScreenWithDoubleArray:(IOSDoubleArray *)coords {
  return (IOSDoubleArray_Get(nil_chk(coords), 0) >= 0) && (IOSDoubleArray_Get(coords, 0) <= [self getWidth]) && (IOSDoubleArray_Get(coords, 1) >= 0) && (IOSDoubleArray_Get(coords, 1) <= [self getHeight]);
}

- (jboolean)isOnViewWithDoubleArray:(IOSDoubleArray *)coords {
  return (IOSDoubleArray_Get(nil_chk(coords), 0) >= [self getXmin]) && (IOSDoubleArray_Get(coords, 0) <= [self getXmax]) && (IOSDoubleArray_Get(coords, 1) >= [self getYmin]) && (IOSDoubleArray_Get(coords, 1) <= [self getYmax]);
}

- (IOSDoubleArray *)getOnScreenDiffWithDoubleArray:(IOSDoubleArray *)p1
                                   withDoubleArray:(IOSDoubleArray *)p2 {
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithLength:2];
  *IOSDoubleArray_GetRef(ret, 0) = (IOSDoubleArray_Get(nil_chk(p2), 0) - IOSDoubleArray_Get(nil_chk(p1), 0)) * [self getXscale];
  *IOSDoubleArray_GetRef(ret, 1) = (IOSDoubleArray_Get(p2, 1) - IOSDoubleArray_Get(p1, 1)) * [self getYscale];
  return ret;
}

- (jboolean)isSegmentOffViewWithDoubleArray:(IOSDoubleArray *)p1
                            withDoubleArray:(IOSDoubleArray *)p2 {
  jdouble tolerance = OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE / [self getYscale];
  if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getYmin], IOSDoubleArray_Get(nil_chk(p1), 1), tolerance) && OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getYmin], IOSDoubleArray_Get(nil_chk(p2), 1), tolerance)) return YES;
  if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(p1, 1), [self getYmax], tolerance) && OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(p2), 1), [self getYmax], tolerance)) return YES;
  tolerance = OrgGeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE / [self getXscale];
  if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getXmin], IOSDoubleArray_Get(p1, 0), tolerance) && OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getXmin], IOSDoubleArray_Get(nil_chk(p2), 0), tolerance)) return YES;
  if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(p1, 0), [self getXmax], tolerance) && OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(p2), 0), [self getXmax], tolerance)) return YES;
  return NO;
}

- (jdouble)toRealWorldCoordXWithDouble:(jdouble)x {
  return OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, x);
}

- (jdouble)toRealWorldCoordYWithDouble:(jdouble)y {
  return OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, y);
}

- (void)setCoordSystemWithDouble:(jdouble)xZero
                      withDouble:(jdouble)yZero
                      withDouble:(jdouble)xscale
                      withDouble:(jdouble)yscale {
  OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, xZero, yZero, xscale, yscale);
}

- (void)translateCoordSystemInPixelsWithInt:(jint)dx
                                    withInt:(jint)dy
                                    withInt:(jint)dz
                                    withInt:(jint)mode {
  OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, xZeroOld_ + dx, yZeroOld_ + dy, [self getXscale], [self getYscale]);
}

- (void)setCoordSystemFromMouseMoveWithInt:(jint)dx
                                   withInt:(jint)dy
                                   withInt:(jint)mode {
  [self translateCoordSystemInPixelsWithInt:dx withInt:dy withInt:0 withInt:mode];
}

- (void)pageUpDownTranslateCoordSystemWithInt:(jint)height {
  [self translateCoordSystemInPixelsWithInt:0 withInt:height withInt:0 withInt:OrgGeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
}

- (void)setRealWorldCoordSystemWithDouble:(jdouble)xmin2
                               withDouble:(jdouble)xmax2
                               withDouble:(jdouble)ymin2
                               withDouble:(jdouble)ymax2 {
  OrgGeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, xmin2, xmax2, ymin2, ymax2);
}

- (void)setCoordSystemWithDouble:(jdouble)xZero
                      withDouble:(jdouble)yZero
                      withDouble:(jdouble)xscale
                      withDouble:(jdouble)yscale
                     withBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, xZero, yZero, xscale, yscale, repaint);
}

- (void)updateBackgroundIfNecessary {
  if (updateBackgroundOnNextRepaint_) {
    OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  }
  updateBackgroundOnNextRepaint_ = NO;
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getYmaxObject {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setAntialiasingWithBoolean:(jboolean)flag {
  if (flag == antiAliasing_) {
    return;
  }
  antiAliasing_ = flag;
  [self repaint];
}

- (jboolean)getAntialiasing {
  return antiAliasing_;
}

- (void)setEuclidianViewNoWithInt:(jint)evNo {
  if (evNo >= 2) {
    self->evNo_ = evNo;
  }
}

- (jint)getEuclidianViewNo {
  return evNo_;
}

- (void)setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)ymaxObjectNew {
  if (ymaxObject_ != nil) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])) removeEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  }
  if (ymaxObjectNew == nil) {
    self->ymaxObject_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
    [self updateBoundObjects];
  }
  else {
    self->ymaxObject_ = ymaxObjectNew;
  }
  OrgGeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (void)setXscaleWithDouble:(jdouble)xscale {
  OrgGeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(self, xscale);
}

- (void)setYscaleWithDouble:(jdouble)yscale {
  OrgGeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(self, yscale);
}

- (void)setFontSizeWithInt:(jint)fontSize {
  self->fontSize_ = fontSize;
}

- (jdouble)getxZero {
  return xZero_;
}

- (jdouble)getyZero {
  return yZero_;
}

- (jdouble)getXZero {
  return [self getxZero];
}

- (jdouble)getYZero {
  return [self getyZero];
}

- (NSString *)getXYscaleRatioString {
  JavaLangStringBuilder *ratioSb = new_JavaLangStringBuilder_init();
  (void) [ratioSb appendWithNSString:@"x : y = "];
  if ([self getXscale] >= [self getYscale]) {
    (void) [ratioSb appendWithNSString:@"1 : "];
    (void) [ratioSb appendWithNSString:[((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk(printScaleNF_)) formatWithDouble:[self getXscale] / [self getYscale]]];
  }
  else {
    (void) [ratioSb appendWithNSString:[((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk(printScaleNF_)) formatWithDouble:[self getYscale] / [self getXscale]]];
    (void) [ratioSb appendWithNSString:@" : 1"];
  }
  (void) [ratioSb appendWithChar:' '];
  return [ratioSb description];
}

- (jdouble)getXscale {
  return xscale_;
}

- (jdouble)getYscale {
  return yscale_;
}

- (jdouble)getInvXscale {
  return invXscale_;
}

- (jdouble)getInvYscale {
  return invYscale_;
}

- (jint)getViewWidth {
  return [self getWidth];
}

- (jint)getViewHeight {
  return [self getHeight];
}

- (jdouble)getScaleRatio {
  return [self getYscale] / [self getXscale];
}

- (jdouble)getXmax {
  return xmax_;
}

- (jdouble)getXmin {
  return xmin_;
}

- (jdouble)getYmax {
  return ymax_;
}

- (jdouble)getYmin {
  return ymin_;
}

- (jint)getGridType {
  return OrgGeogebraCommonEuclidianEuclidianView_getGridType(self);
}

- (void)setGridTypeWithInt:(jint)type {
  gridType_ = type;
  if (type == OrgGeogebraCommonEuclidianEuclidianView_GRID_POLAR) {
    [self updateBoundsWithBoolean:YES withBoolean:YES];
  }
}

- (void)setXYMinMaxWithDoubleArray2:(IOSObjectArray *)minMax {
  xmin_ = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(minMax), 0)), 0));
  xmax_ = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, 0)), 1));
  ymin_ = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, 1)), 0));
  ymax_ = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, 1)), 1));
}

- (void)setRealWorldBounds {
  [self updateBoundObjects];
  [self updateBoundsWithBoolean:NO withBoolean:NO];
}

- (void)setXYMinMaxForSetCoordSystem {
  xmin_ = (-[self getxZero] * [self getInvXscale]);
  xmax_ = (([self getWidth] - [self getxZero]) * [self getInvXscale]);
  ymax_ = ([self getyZero] * [self getInvYscale]);
  ymin_ = (([self getyZero] - [self getHeight]) * [self getInvYscale]);
}

- (void)zoomAroundCenterWithDouble:(jdouble)zoomFactor {
  if (![self isZoomable]) {
    return;
  }
  OrgGeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(self, [self getXscale] * zoomFactor);
  OrgGeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(self, [self getYscale] * zoomFactor);
  xZero_ = -[self getXmin] * [self getXscale];
  [self setWidthWithInt:J2ObjCFpToInt((([self getXmax] * [self getXscale]) + [self getxZero]))];
  yZero_ = [self getYmax] * [self getYscale];
  [self setHeightWithInt:J2ObjCFpToInt(([self getyZero] - ([self getYmin] * [self getYscale])))];
  [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
  [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
  [self calcPrintingScale];
  if (evNo_ != OrgGeogebraCommonEuclidianEuclidianView_EVNO_GENERAL_) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) setEuclidianViewBoundsWithInt:evNo_ withDouble:[self getXmin] withDouble:[self getXmax] withDouble:[self getYmin] withDouble:[self getYmax] withDouble:[self getXscale] withDouble:[self getYscale]];
  }
  OrgGeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(self);
  OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
}

- (void)setCoordTransformIfNeeded {
  OrgGeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(self);
}

- (void)updateAllDrawablesWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, repaint);
}

- (void)startBatchUpdate {
  self->batchUpdate_ = YES;
}

- (void)endBatchUpdate {
  self->batchUpdate_ = NO;
  if (self->needsAllDrawablesUpdate_) {
    [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) updateAll];
    [self repaint];
  }
}

- (void)drawListAsComboBoxWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list
                                                     withBoolean:(jboolean)b {
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) setDrawAsComboBoxWithBoolean:b];
  OrgGeogebraCommonEuclidianDrawDrawList *d = (OrgGeogebraCommonEuclidianDrawDrawList *) check_class_cast(OrgGeogebraCommonEuclidianEuclidianView_getDrawableWithOrgGeogebraCommonKernelGeosGeoElement_(self, list), [OrgGeogebraCommonEuclidianDrawDrawList class]);
  if (d != nil) {
    [d resetDrawType];
  }
}

- (void)calcPrintingScale {
  jdouble unitPerCM = OrgGeogebraCommonEuclidianEuclidianView_PRINTER_PIXEL_PER_CM / [self getXscale];
  jint exp = (jint) JavaLangMath_roundWithDouble_(JavaLangMath_logWithDouble_(unitPerCM) / JavaLangMath_logWithDouble_(10));
  printingScale_ = JavaLangMath_powWithDouble_withDouble_(10, -exp);
}

- (void)setAxesIntervalsWithDouble:(jdouble)scale_
                           withInt:(jint)axis {
  jdouble maxPix = 100;
  jdouble units = maxPix / scale_;
  jint exp = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(JavaLangMath_logWithDouble_(units) / JavaLangMath_logWithDouble_(10)));
  jint maxFractionDigtis = JavaLangMath_maxWithInt_withInt_(-exp, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getPrintDecimals]);
  if (IOSBooleanArray_Get(nil_chk(automaticAxesNumberingDistances_), axis)) {
    if ((axis == 1) && IOSBooleanArray_Get(automaticAxesNumberingDistances_, 0) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(xscale_, yscale_)) {
      if (IOSBooleanArray_Get(nil_chk(piAxisUnit_), 0) == IOSBooleanArray_Get(piAxisUnit_, 1)) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), 1) = IOSDoubleArray_Get(axesNumberingDistances_, 0);
      }
      else if (IOSBooleanArray_Get(piAxisUnit_, 0)) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), 1) = IOSDoubleArray_Get(axesNumberingDistances_, 0) / JavaLangMath_PI;
      }
      else if (IOSBooleanArray_Get(piAxisUnit_, 1)) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), 1) = IOSDoubleArray_Get(axesNumberingDistances_, 0) * JavaLangMath_PI;
      }
    }
    else if (IOSBooleanArray_Get(nil_chk(piAxisUnit_), axis)) {
      *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = JavaLangMath_PI;
    }
    else {
      jdouble pot = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(JavaLangMath_powWithDouble_withDouble_(10, exp));
      jdouble n = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(units / pot);
      if (n > 5) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = 5 * pot;
      }
      else if (n > 2) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = 2 * pot;
      }
      else {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = pot;
      }
    }
  }
  *IOSDoubleArray_GetRef(nil_chk(AxesTickInterval_), axis) = IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), axis) / 2.0;
  if ((IOSDoubleArray_Get(axesNumberingDistances_, axis) < 10E-6) || (IOSDoubleArray_Get(axesNumberingDistances_, axis) > 10E6)) {
    maxFractionDigtis = JavaLangMath_minWithInt_withInt_(14, maxFractionDigtis);
    (void) IOSObjectArray_Set(nil_chk(axesNumberFormat_), axis, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithNSString:@"0.##E0" withInt:maxFractionDigtis]);
  }
  else {
    (void) IOSObjectArray_Set(nil_chk(axesNumberFormat_), axis, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithNSString:@"###0.##" withInt:maxFractionDigtis]);
  }
  if (automaticGridDistance_ && axis < 2) {
    *IOSDoubleArray_GetRef(nil_chk(gridDistances_), axis) = IOSDoubleArray_Get(axesNumberingDistances_, axis) * OrgGeogebraCommonPluginEuclidianStyleConstants_get_automaticGridDistanceFactor_();
  }
}

- (jint)getFontSize {
  return fontSize_;
}

- (void)renameWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  id d = [((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo];
  if (d != nil) {
    [((OrgGeogebraCommonEuclidianDrawable *) check_class_cast(d, [OrgGeogebraCommonEuclidianDrawable class])) update];
    [self repaint];
  }
}

- (void)updateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawableND *d = [((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo];
  if (d != nil) {
    if ([d isKindOfClass:[OrgGeogebraCommonEuclidianDrawDrawImage class]]) {
      self->updateBackgroundOnNextRepaint_ |= [((OrgGeogebraCommonEuclidianDrawDrawImage *) check_class_cast(d, [OrgGeogebraCommonEuclidianDrawDrawImage class])) checkInBackground];
      return;
    }
    if ((![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText] || ![((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) isNeedsUpdatedBoundingBox]) && ![geo isGeoTextField] && (![geo getTrace] || [d isTracing])) {
      [d setNeedsUpdateWithBoolean:YES];
      return;
    }
    [d resetHatch];
    [d update];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianView_drawableNeededWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo) && [((JavaUtilArrayList *) nil_chk(geosWaiting_)) containsWithId:geo]) {
    [geosWaiting_ removeWithId:geo];
    [self addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    d = [DrawableMap_ getWithId:geo];
    if (d != nil) {
      [d setNeedsUpdateWithBoolean:YES];
      [self repaint];
    }
  }
}

- (void)addWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (!OrgGeogebraCommonEuclidianEuclidianView_drawableNeededWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo)) {
    if ([self isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:geo]) {
      [((JavaUtilArrayList *) nil_chk(self->geosWaiting_)) addWithId:geo];
    }
    return;
  }
  OrgGeogebraCommonEuclidianDrawableND *d = OrgGeogebraCommonEuclidianEuclidianView_getDrawableWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
  if (d != nil) {
    return;
  }
  d = [self createDrawableWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if (d != nil) {
    [self addToDrawableListsWithOrgGeogebraCommonEuclidianDrawable:(OrgGeogebraCommonEuclidianDrawable *) check_class_cast(d, [OrgGeogebraCommonEuclidianDrawable class])];
    [self repaint];
  }
}

- (jboolean)drawableNeededWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonEuclidianEuclidianView_drawableNeededWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (jboolean)isPlotPanel {
  return NO;
}

- (void)removeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [((JavaUtilArrayList *) nil_chk(self->geosWaiting_)) removeWithId:geo];
  OrgGeogebraCommonEuclidianDrawable *d = (OrgGeogebraCommonEuclidianDrawable *) check_class_cast([((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo], [OrgGeogebraCommonEuclidianDrawable class]);
  jint layer = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer];
  if (d == nil) return;
  if ([OrgGeogebraCommonEuclidianRemoveNeeded_class_() isInstance:d]) {
    [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) removeWithOrgGeogebraCommonEuclidianDrawable:d];
    [((id<OrgGeogebraCommonEuclidianRemoveNeeded>) nil_chk(((id<OrgGeogebraCommonEuclidianRemoveNeeded>) check_protocol_cast(d, @protocol(OrgGeogebraCommonEuclidianRemoveNeeded))))) remove];
  }
  else {
    [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) removeWithOrgGeogebraCommonEuclidianDrawable:d];
  }
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) removeWithOrgGeogebraCommonEuclidianDrawable:d];
  (void) [DrawableMap_ removeWithId:geo];
  if ([geo isGeoPoint]) {
    [((JavaUtilArrayList *) nil_chk(stickyPointList_)) removeWithId:geo];
  }
  if (![((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) isCreatedByDrawListVisible]) [self repaint];
}

- (OrgGeogebraCommonEuclidianHits *)getHits {
  return hits_;
}

- (jboolean)textfieldClickedWithInt:(jint)x
                            withInt:(jint)y
withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonEuclidianDrawable *d = [it next];
    if (([d isKindOfClass:[OrgGeogebraCommonEuclidianDrawDrawTextField class]]) && ([((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) hitWithInt:x withInt:y withInt:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type]] || [d hitLabelWithInt:x withInt:y])) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible]) {
        return YES;
      }
    }
  }
  return NO;
}

- (void)setHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  [self setHitsWithOrgGeogebraCommonAwtGPoint:[((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_)) getMouseLoc] withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
}

- (void)setHitsWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)p
withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  [self setHitsWithOrgGeogebraCommonAwtGPoint:p withInt:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type]];
  if (type == OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH() && [((OrgGeogebraCommonEuclidianHits *) nil_chk(self->hits_)) size] == 0) {
    [self setHitsWithOrgGeogebraCommonAwtGPoint:p withInt:[app_ getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type] * 3];
  }
}

- (void)setHitsWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)p
                                      withInt:(jint)hitThreshold {
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits_)) init__];
  if (hitPointOrBoundary_ == nil) {
    hitPointOrBoundary_ = new_JavaUtilArrayList_init();
    hitFilling_ = new_JavaUtilArrayList_init();
    hitLabel_ = new_JavaUtilArrayList_init();
  }
  else {
    [hitPointOrBoundary_ clear];
    [((JavaUtilArrayList *) nil_chk(hitFilling_)) clear];
    [((JavaUtilArrayList *) nil_chk(hitLabel_)) clear];
  }
  if (p == nil) {
    return;
  }
  OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonEuclidianDrawable *d = [it next];
    if ([((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) isEuclidianVisible]) {
      if ([d hitWithInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_ withInt:p->y_ withInt:hitThreshold]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [d getGeoElement];
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLastHitType] == OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()) {
          [((JavaUtilArrayList *) nil_chk(hitPointOrBoundary_)) addWithId:geo];
        }
        else {
          [((JavaUtilArrayList *) nil_chk(hitFilling_)) addWithId:geo];
        }
      }
      else if ([d hitLabelWithInt:p->x_ withInt:p->y_]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [d getGeoElement];
        [((JavaUtilArrayList *) nil_chk(hitLabel_)) addWithId:geo];
      }
    }
  }
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(hitLabel_)) {
    [hits_ addWithId:geo];
  }
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(hitPointOrBoundary_)) {
    [hits_ addWithId:geo];
  }
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(hitFilling_)) {
    [hits_ addWithId:geo];
  }
//hitThreshold = 10;
  if ([hits_ getImageCount] == 0) {
    if (IOSBooleanArray_Get(nil_chk(showAxes_), 0) && (JavaLangMath_absWithDouble_(OrgGeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(self) - ((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->y_) < hitThreshold)) {
      if (!IOSBooleanArray_Get(nil_chk(positiveAxes_), 0) || (OrgGeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(self) < p->x_ - hitThreshold)) {
        [hits_ addWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXAxis]];
      }
    }
    if (IOSBooleanArray_Get(showAxes_, 1) && (JavaLangMath_absWithDouble_(OrgGeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(self) - ((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_) < hitThreshold)) {
      if (!IOSBooleanArray_Get(nil_chk(positiveAxes_), 1) || (OrgGeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(self) > p->y_ - hitThreshold)) {
        [hits_ addWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getYAxis]];
      }
    }
  }
  jint maxlayer = 0;
  for (jint i = 0; i < [hits_ size]; ++i) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [hits_ getWithInt:i];
    if (maxlayer < [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer]) {
      maxlayer = [geo getLayer];
    }
  }
  for (jint i = [hits_ size] - 1; i >= 0; i--) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [hits_ getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer] < maxlayer) {
      (void) [hits_ removeWithInt:i];
    }
  }
  if (([hits_ size] - ([hits_ getListCount] + [hits_ getImageCount])) > 0) {
    for (jint i = [hits_ size] - 1; i >= 0; i--) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [hits_ getWithInt:i];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList] || [geo isGeoImage]) {
        (void) [hits_ removeWithInt:i];
      }
    }
  }
}

- (OrgGeogebraCommonEuclidianMyButton *)getHitButtonWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)p
                           withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  OrgGeogebraCommonEuclidianDrawable *d = nil;
  while ([((OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonEuclidianDrawable *d2 = [it next];
    if ([d2 isKindOfClass:[OrgGeogebraCommonEuclidianDrawDrawButton class]] && [((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d2)) hitWithInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_ withInt:p->y_ withInt:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type]]) {
      if (d == nil || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([d2 getGeoElement])) getLayer] >= [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([d getGeoElement])) getLayer]) d = d2;
    }
  }
  if (d != nil) return ((OrgGeogebraCommonEuclidianDrawDrawButton *) check_class_cast(d, [OrgGeogebraCommonEuclidianDrawDrawButton class]))->myButton_;
  return nil;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getLabelHitWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)p
                             withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (![((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) isLabelDragsEnabled]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonEuclidianDrawable *d = [it next];
    if ([((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) hitLabelWithInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_ withInt:p->y_]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [d getGeoElement];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible]) {
        return geo;
      }
    }
  }
  return nil;
}

- (OrgGeogebraCommonEuclidianDrawableND *)getDrawableWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonEuclidianEuclidianView_getDrawableWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (OrgGeogebraCommonEuclidianDrawableND *)getDrawableNDWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonEuclidianEuclidianView_getDrawableWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addToDrawableListsWithOrgGeogebraCommonEuclidianDrawable:(OrgGeogebraCommonEuclidianDrawable *)draw {
  if (draw == nil) {
    return;
  }
  OrgGeogebraCommonEuclidianDrawable *d = draw;
  OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement];
  jint layer = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer];
  switch ([[geo getGeoClassType] ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_ANGLE:
    if ([geo isIndependent]) {
      [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithOrgGeogebraCommonEuclidianDrawable:d];
    }
    else {
      if ([geo isDrawable]) {
        [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithOrgGeogebraCommonEuclidianDrawable:d];
      }
      else {
        d = nil;
      }
    }
    break;
    case OrgGeogebraCommonPluginGeoClass_IMAGE:
    if (![((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) containsWithOrgGeogebraCommonEuclidianDrawable:d]) {
      [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithOrgGeogebraCommonEuclidianDrawable:d];
    }
    break;
    default:
    [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithOrgGeogebraCommonEuclidianDrawable:d];
    break;
  }
  if (d != nil) {
    [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) addWithOrgGeogebraCommonEuclidianDrawable:d];
  }
}

- (jboolean)isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (OrgGeogebraCommonEuclidianDrawableND *)createDrawableNDWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [self createDrawableWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (OrgGeogebraCommonEuclidianDrawableND *)createDrawableWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawableND *d = [self newDrawableWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if (d != nil) {
    (void) [((JavaUtilHashMap *) nil_chk(DrawableMap_)) putWithId:geo withId:d];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      [((JavaUtilArrayList *) nil_chk(stickyPointList_)) addWithId:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
    }
  }
  return d;
}

- (OrgGeogebraCommonEuclidianDrawableND *)newDrawableWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) newDrawableWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)reset {
  [self resetMode];
  OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
}

- (void)resetMode {
  [self setModeWithInt:mode_];
}

- (void)setModeWithInt:(jint)mode2 {
  [self setModeWithInt:mode2 withOrgGeogebraCommonKernelModeSetterEnum:OrgGeogebraCommonKernelModeSetterEnum_get_TOOLBAR()];
}

- (void)repaintView {
  [self repaint];
}

- (void)updateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if (styleBar_ != nil) [styleBar_ updateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (OrgGeogebraCommonEuclidianDrawableND *)getDrawableForWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo];
}

- (void)updateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)updateDrawableFontSize {
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) updateFontSizeAll];
  [self repaint];
}

- (OrgGeogebraCommonAwtGFont *)getFontPoint {
  if (fontPoint_ == nil) {
    return [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getPlainFontCommon];
  }
  return fontPoint_;
}

- (void)setFontPointWithOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontPoint {
  OrgGeogebraCommonEuclidianEuclidianView_setFontPointWithOrgGeogebraCommonAwtGFont_(self, fontPoint);
}

- (OrgGeogebraCommonAwtGFont *)getFontLine {
  return [self getFontPoint];
}

- (OrgGeogebraCommonAwtGFont *)getFontVector {
  return [self getFontPoint];
}

- (OrgGeogebraCommonAwtGFont *)getFontConic {
  return [self getFontPoint];
}

- (OrgGeogebraCommonAwtGFont *)getFontCoords {
  if (fontCoords_ == nil) {
    return [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getPlainFontCommon];
  }
  return fontCoords_;
}

- (void)setFontCoordsWithOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontCoords {
  OrgGeogebraCommonEuclidianEuclidianView_setFontCoordsWithOrgGeogebraCommonAwtGFont_(self, fontCoords);
}

- (OrgGeogebraCommonAwtGFont *)getFontAxes {
  return [self getFontCoords];
}

- (OrgGeogebraCommonAwtGFont *)getFontAngle {
  return [self getFontPoint];
}

- (JavaUtilArrayList *)getStickyPointList {
  return stickyPointList_;
}

- (void)setBooleanSizeWithInt:(jint)size {
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setCheckboxSizeWithInt:size];
  OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
}

- (jint)getBooleanSize {
  return [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCheckboxSize];
}

- (void)setAllowToolTipsWithInt:(jint)setto {
  tooltipsInThisView_ = setto;
}

- (jint)getAllowToolTips {
  return OrgGeogebraCommonEuclidianEuclidianView_getAllowToolTips(self);
}

- (OrgGeogebraCommonKernelMatrixCoordMatrix *)getMatrix {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getMatrix];
}

- (OrgGeogebraCommonKernelMatrixCoordMatrix *)getInverseMatrix {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getMatrix];
}

- (NSString *)getFromPlaneString {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getFromPlaneString];
}

- (NSString *)getTranslatedFromPlaneString {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getTranslatedFromPlaneString];
}

- (jboolean)isDefault2D {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) isDefault2D];
}

- (jboolean)isEuclidianView3D {
  return NO;
}

- (jint)getViewID {
  switch (evNo_) {
    case 1:
    return OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN;
    case 2:
    return OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2;
    default:
    return OrgGeogebraCommonMainApp_VIEW_NONE;
  }
}

- (void)changeLayerWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                     withInt:(jint)oldlayer
                                                     withInt:(jint)newlayer {
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), oldlayer))) removeWithOrgGeogebraCommonEuclidianDrawable:(OrgGeogebraCommonEuclidianDrawable *) check_class_cast([((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo], [OrgGeogebraCommonEuclidianDrawable class])];
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(drawLayers_, newlayer))) addWithOrgGeogebraCommonEuclidianDrawable:(OrgGeogebraCommonEuclidianDrawable *) check_class_cast([DrawableMap_ getWithId:geo], [OrgGeogebraCommonEuclidianDrawable class])];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)getPlaneContaining {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getPlaneContaining];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)getDirection {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getDirection];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:coords];
}

- (jboolean)isMoveableWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) isMoveableWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (JavaUtilArrayList *)getFreeInputPointsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algoParent {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getFreeInputPointsWithOrgGeogebraCommonKernelAlgosAlgoElement:algoParent];
}

- (void)replaceBoundObjectWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)num
                          withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)num2 {
  if (xmaxObject_ == num) {
    xmaxObject_ = num2;
  }
  if (xminObject_ == num) {
    xminObject_ = num2;
  }
  if (ymaxObject_ == num) {
    ymaxObject_ = num2;
  }
  if (yminObject_ == num) {
    yminObject_ = num2;
  }
  [self updateBoundsWithBoolean:YES withBoolean:YES];
}

- (jint)getRightAngleStyle {
  return ((OrgGeogebraCommonMainApp *) nil_chk([self getApplication]))->rightAngleStyle_;
}

- (jboolean)isAutomaticGridDistance {
  return automaticGridDistance_;
}

- (IOSDoubleArray *)getGridDistances {
  return gridDistances_;
}

- (void)setGridDistancesWithDoubleArray:(IOSDoubleArray *)dist {
  if (dist == nil) {
    return;
  }
  gridDistances_ = dist;
  [self setAutomaticGridDistanceWithBoolean:NO];
}

- (jint)getGridLineStyle {
  return gridLineStyle_;
}

- (void)setAutomaticGridDistanceWithBoolean:(jboolean)flag {
  automaticGridDistance_ = flag;
  [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
  [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
  if (flag) {
    *IOSDoubleArray_GetRef(nil_chk(gridDistances_), 2) = JavaLangMath_PI / 6;
  }
}

- (jint)getAxesLineStyle {
  return axesLineType_;
}

- (void)setAxesLineStyleWithInt:(jint)axesLineStyle {
  self->axesLineType_ = axesLineStyle;
}

- (id<OrgGeogebraCommonAwtGAffineTransform>)getCoordTransform {
  if (coordTransform_ == nil) coordTransform_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  return coordTransform_;
}

- (void)setCoordTransformWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)coordTransform {
  self->coordTransform_ = coordTransform;
}

- (void)updateBackground {
  OrgGeogebraCommonEuclidianEuclidianView_updateBackground(self);
}

- (id<OrgGeogebraCommonAwtGGraphics2D>)getTempGraphics2DWithOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontForGraphics {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonAwtGFont *)getFont {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setHeightWithInt:(jint)h {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWidthWithInt:(jint)h {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setStyleBarModeWithInt:(jint)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (jboolean)usesSelectionAsInputWithInt:(jint)mode {
  return OrgGeogebraCommonEuclidianEuclidianView_usesSelectionAsInputWithInt_(mode);
}

+ (jboolean)usesSelectionRectangleAsInputWithInt:(jint)mode {
  return OrgGeogebraCommonEuclidianEuclidianView_usesSelectionRectangleAsInputWithInt_(mode);
}

- (void)setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)selectionRectangle {
  self->selectionRectangle_ = selectionRectangle;
}

- (IOSDoubleArray *)getAxesCross {
  return axisCross_;
}

- (void)setAxesCrossWithDoubleArray:(IOSDoubleArray *)axisCross {
  self->axisCross_ = axisCross;
}

- (void)setAxisCrossWithInt:(jint)axis
                 withDouble:(jdouble)cross {
  *IOSDoubleArray_GetRef(nil_chk(axisCross_), axis) = cross;
}

- (IOSBooleanArray *)getPositiveAxes {
  return positiveAxes_;
}

- (void)setPositiveAxesWithBooleanArray:(IOSBooleanArray *)positiveAxis {
  self->positiveAxes_ = positiveAxis;
}

- (void)setPositiveAxisWithInt:(jint)axis
                   withBoolean:(jboolean)isPositiveAxis {
  *IOSBooleanArray_GetRef(nil_chk(positiveAxes_), axis) = isPositiveAxis;
}

- (IOSBooleanArray *)getDrawBorderAxes {
  return drawBorderAxes_;
}

- (void)setDrawBorderAxesWithBooleanArray:(IOSBooleanArray *)drawBorderAxes {
  self->drawBorderAxes_ = drawBorderAxes;
  [self setAxesCornerCoordsVisibleWithBoolean:!(IOSBooleanArray_Get(nil_chk(drawBorderAxes), 0) || IOSBooleanArray_Get(drawBorderAxes, 1))];
}

- (jboolean)isAxesCornerCoordsVisible {
  return showAxesCornerCoords_;
}

- (void)setAxesCornerCoordsVisibleWithBoolean:(jboolean)showAxesCornerCoords {
  self->showAxesCornerCoords_ = showAxesCornerCoords;
}

- (jdouble)getPrintingScale {
  return printingScale_;
}

- (void)setPrintingScaleWithDouble:(jdouble)printingScale {
  self->printingScale_ = printingScale;
}

- (IOSObjectArray *)getAxesLabelsWithBoolean:(jboolean)addBoldItalicTags {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(axesLabels_))->size_ type:NSString_class_()];
  for (jint axis = 0; axis < axesLabels_->size_; axis++) {
    (void) IOSObjectArray_Set(ret, axis, IOSObjectArray_Get(axesLabels_, axis));
  }
  if (addBoldItalicTags) {
    for (jint axis = 0; axis < axesLabels_->size_; axis++) {
      if (IOSObjectArray_Get(axesLabels_, axis) != nil && self->settings_ != nil) {
        (void) IOSObjectArray_Set(ret, axis, [self->settings_ axisLabelForXMLWithInt:axis]);
      }
    }
  }
  return ret;
}

- (void)setAxesLabelsWithNSStringArray:(IOSObjectArray *)axesLabels {
  [self setAxisLabelWithInt:0 withNSString:IOSObjectArray_Get(nil_chk(axesLabels), 0)];
  [self setAxisLabelWithInt:1 withNSString:IOSObjectArray_Get(axesLabels, 1)];
}

- (void)setAxisLabelWithInt:(jint)axis
               withNSString:(NSString *)axLabel {
  NSString *axisLabel = axLabel;
  if ((axisLabel == nil) || (((jint) [axisLabel length]) == 0)) {
    (void) IOSObjectArray_Set(nil_chk(axesLabels_), axis, nil);
  }
  else {
    *IOSIntArray_GetRef(nil_chk(axesLabelsStyle_), axis) = OrgGeogebraCommonAwtGFont_PLAIN;
    if ([axisLabel hasPrefix:@"<i>"] && [axisLabel hasSuffix:@"</i>"]) {
      axisLabel = [axisLabel substring:3 endIndex:((jint) [axisLabel length]) - 4];
      *IOSIntArray_GetRef(axesLabelsStyle_, axis) |= OrgGeogebraCommonAwtGFont_ITALIC;
    }
    if ([((NSString *) nil_chk(axisLabel)) hasPrefix:@"<b>"] && [axisLabel hasSuffix:@"</b>"]) {
      axisLabel = [axisLabel substring:3 endIndex:((jint) [axisLabel length]) - 4];
      *IOSIntArray_GetRef(axesLabelsStyle_, axis) |= OrgGeogebraCommonAwtGFont_BOLD;
    }
    (void) IOSObjectArray_Set(nil_chk(axesLabels_), axis, axisLabel);
  }
}

- (jdouble)getScaleWithInt:(jint)i {
  if (i == 0) {
    return [self getXscale];
  }
  return [self getYscale];
}

- (void)setAutomaticAxesNumberingDistanceWithBoolean:(jboolean)flag
                                             withInt:(jint)axis {
  *IOSBooleanArray_GetRef(nil_chk(automaticAxesNumberingDistances_), axis) = flag;
  [self setAxesIntervalsWithDouble:[self getScaleWithInt:axis] withInt:axis];
}

- (IOSBooleanArray *)isAutomaticAxesNumberingDistance {
  return automaticAxesNumberingDistances_;
}

- (IOSDoubleArray *)getAxesNumberingDistances {
  return axesNumberingDistances_;
}

- (void)setAxesNumberingDistanceWithDouble:(jdouble)dist
                                   withInt:(jint)axis {
  if (!JavaLangDouble_isNaNWithDouble_(dist)) {
    *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = dist;
    [self setAutomaticAxesNumberingDistanceWithBoolean:NO withInt:axis];
  }
  else {
    [self setAutomaticAxesNumberingDistanceWithBoolean:YES withInt:axis];
  }
}

- (jboolean)getGridIsBold {
  return gridIsBold_;
}

- (IOSBooleanArray *)getShowAxesNumbers {
  return showAxesNumbers_;
}

- (void)setShowAxesNumbersWithBooleanArray:(IOSBooleanArray *)showAxesNumbers {
  self->showAxesNumbers_ = showAxesNumbers;
}

- (void)setShowAxisNumbersWithInt:(jint)axis
                      withBoolean:(jboolean)showAxisNumbers {
  *IOSBooleanArray_GetRef(nil_chk(showAxesNumbers_), axis) = showAxisNumbers;
}

- (IOSObjectArray *)getAxesUnitLabels {
  return axesUnitLabels_;
}

- (void)setAxesUnitLabelsWithNSStringArray:(IOSObjectArray *)axesUnitLabels {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->axesUnitLabels_))->size_; i++) {
    (void) IOSObjectArray_Set(self->axesUnitLabels_, i, IOSObjectArray_Get(nil_chk(axesUnitLabels), i));
  }
  for (jint i = 0; i < [self getDimension]; i++) {
    *IOSBooleanArray_GetRef(nil_chk(piAxisUnit_), i) = ((IOSObjectArray_Get(nil_chk(axesUnitLabels), i) != nil) && [((NSString *) nil_chk(IOSObjectArray_Get(axesUnitLabels, i))) isEqual:OrgGeogebraCommonUtilUnicode_get_PI_STRING_()]);
  }
  [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
  [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
}

- (IOSIntArray *)getAxesTickStyles {
  return axesTickStyles_;
}

- (void)setAxisTickStyleWithInt:(jint)axis
                        withInt:(jint)tickStyle {
  *IOSIntArray_GetRef(nil_chk(axesTickStyles_), axis) = tickStyle;
}

- (void)setAxesTickStylesWithIntArray:(IOSIntArray *)axesTickStyles {
  self->axesTickStyles_ = axesTickStyles;
}

- (void)setShowMouseCoordsWithBoolean:(jboolean)b {
  showMouseCoords_ = b;
}

- (jboolean)getAllowShowMouseCoords {
  return allowShowMouseCoords_;
}

- (void)setAllowShowMouseCoordsWithBoolean:(jboolean)neverShowMouseCoords {
  self->allowShowMouseCoords_ = neverShowMouseCoords;
}

- (jboolean)getShowMouseCoords {
  return showMouseCoords_;
}

- (void)setShowAxesRatioWithBoolean:(jboolean)b {
  showAxesRatio_ = b;
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)getPreviewDrawable {
  return previewDrawable_;
}

- (jdouble)getGridDistancesWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(gridDistances_), i);
}

- (jboolean)getShowGrid {
  return showGrid__;
}

- (jboolean)isGridOrAxesShown {
  return IOSBooleanArray_Get(nil_chk(showAxes_), 0) || IOSBooleanArray_Get(showAxes_, 1) || showGrid__;
}

- (jboolean)getShowAxisWithInt:(jint)axis {
  return IOSBooleanArray_Get(nil_chk(showAxes_), axis);
}

- (jboolean)getShowXaxis {
  return [self getShowAxisWithInt:OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X];
}

- (jboolean)getShowYaxis {
  return [self getShowAxisWithInt:OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y];
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, selectedPoints, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_LINE());
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewPerpendicularBisectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, selectedPoints, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_PERPENDICULAR_BISECTOR());
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewAngleBisectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, selectedPoints, OrgGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_ANGLE_BISECTOR());
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewSegmentWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawSegment_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewRayWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawRay_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewVectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawVector_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewConicWithInt:(jint)mode1
                                                 withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(self, mode1, selectedPoints);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewParabolaWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                  withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  return new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(self, selectedPoints, selectedLines);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewPolygonWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawPolygon_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewAngleWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewPolyLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return new_OrgGeogebraCommonEuclidianDrawDrawPolyLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints);
}

- (void)updatePreviewable {
  OrgGeogebraCommonAwtGPoint *mouseLoc = ((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController]))->mouseLoc_;
  [((id<OrgGeogebraCommonEuclidianPreviewable>) nil_chk([self getPreviewDrawable])) updateMousePosWithDouble:OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, ((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc))->x_) withDouble:OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, mouseLoc->y_)];
}

- (void)updatePreviewableForProcessMode {
  if ([self getPreviewDrawable] != nil) {
    [((id<OrgGeogebraCommonEuclidianPreviewable>) nil_chk([self getPreviewDrawable])) updatePreview];
  }
}

- (void)mouseEntered {
  hasMouse__ = YES;
}

- (void)mouseExited {
  hasMouse__ = NO;
}

- (jboolean)hasMouse {
  return OrgGeogebraCommonEuclidianEuclidianView_hasMouse2D(self);
}

- (jboolean)hasMouse2D {
  return OrgGeogebraCommonEuclidianEuclidianView_hasMouse2D(self);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewParallelLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                      withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  return new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(self, selectedPoints, selectedLines, YES);
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)createPreviewPerpendicularLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                           withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  return new_OrgGeogebraCommonEuclidianDrawDrawLine_initWithOrgGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(self, selectedPoints, selectedLines, NO);
}

- (void)setApplicationWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)application {
  self->app_ = application;
}

- (OrgGeogebraCommonMainApp *)getApplication {
  return self->app_;
}

- (void)updateFonts {
  [self setFontSizeWithInt:[((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getFontSize]];
  OrgGeogebraCommonEuclidianEuclidianView_setFontPointWithOrgGeogebraCommonAwtGFont_(self, [((OrgGeogebraCommonAwtGFont *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getPlainFontCommon])) deriveFontWithInt:OrgGeogebraCommonAwtGFont_PLAIN withInt:[self getFontSize]]);
  OrgGeogebraCommonEuclidianEuclidianView_setFontCoordsWithOrgGeogebraCommonAwtGFont_(self, [((OrgGeogebraCommonAwtGFont *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getPlainFontCommon])) deriveFontWithInt:OrgGeogebraCommonAwtGFont_PLAIN withInt:[self getFontSize] - 2]);
  [self updateDrawableFontSize];
  OrgGeogebraCommonEuclidianEuclidianView_updateBackground(self);
}

- (void)updateSize {
  [self updateSizeKeepDrawables];
  OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
}

- (void)updateSizeKeepDrawables {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)requestFocusInWindow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)drawGeometricObjectsWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  jint layer;
  for (layer = 0; layer <= [((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getMaxLayerUsed]; layer++) {
    [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) drawAllWithOrgGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)drawObjectsWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  [self drawGeometricObjectsWithOrgGeogebraCommonAwtGGraphics2D:g2];
  [self drawActionObjectsWithOrgGeogebraCommonAwtGGraphics2D:g2];
  if (previewDrawable_ != nil) {
    [previewDrawable_ drawPreviewWithOrgGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)clearBackgroundWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g {
  OrgGeogebraCommonEuclidianEuclidianView_clearBackgroundWithOrgGeogebraCommonAwtGGraphics2D_(self, g);
}

- (void)drawBackgroundWithImagesWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g
                                                        withBoolean:(jboolean)transparency {
  if (!transparency) {
    OrgGeogebraCommonEuclidianEuclidianView_clearBackgroundWithOrgGeogebraCommonAwtGGraphics2D_(self, g);
  }
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) drawAllWithOrgGeogebraCommonAwtGGraphics2D:g];
  OrgGeogebraCommonEuclidianEuclidianView_drawBackgroundWithOrgGeogebraCommonAwtGGraphics2D_withBoolean_(self, g, NO);
}

- (void)drawAxesRatioWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonAwtGPoint *pos = ((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_))->mouseLoc_;
  if (pos == nil) {
    return;
  }
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_DARK_GRAY_()];
  [g2 setFontWithOrgGeogebraCommonAwtGFont:[self getFontLine]];
  [g2 drawStringWithNSString:[self getXYscaleRatioString] withInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(pos))->x_ + 15 withInt:pos->y_ + 30];
}

- (void)paintBackgroundWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setReInitingWithBoolean:(jboolean)reiniting {
  reIniting_ = reiniting;
  if (reiniting) {
    firstPaint_ = YES;
    bgImage_ = nil;
    bgGraphics_ = nil;
  }
}

- (void)paintWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  @synchronized([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConcurrentModificationLock]) {
    [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) paintWithOrgGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)paintTheBackgroundWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
    if (bgImage_ == nil) {
    if (firstPaint_) {
      if (([self getWidth] > 1) && ([self getHeight] > 1) && (!reIniting_)) {
        [self updateSizeKeepDrawables];
        [self paintBackgroundWithOrgGeogebraCommonAwtGGraphics2D:g2];
        firstPaint_ = NO;
      }
      else {
        [self drawBackgroundWithImagesWithOrgGeogebraCommonAwtGGraphics2D:g2];
      }
    }
    else {
      [self drawBackgroundWithImagesWithOrgGeogebraCommonAwtGGraphics2D:g2];
    }
  }
  else {
        [self paintBackgroundWithOrgGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)updateBackgroundImage {
  OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
}

- (void)drawZoomRectangleWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonEuclidianEuclidianView_colZoomRectangleFill_];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:OrgGeogebraCommonEuclidianEuclidianView_boldAxesStroke_];
  [g2 fillWithOrgGeogebraCommonAwtGShape:selectionRectangle_];
  [g2 setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonEuclidianEuclidianView_colZoomRectangle_];
  [g2 drawWithOrgGeogebraCommonAwtGShape:selectionRectangle_];
}

- (void)drawRectWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                     withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)col
               withOrgGeogebraCommonAwtGBasicStroke:(id<OrgGeogebraCommonAwtGBasicStroke>)stroke
                 withOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:col];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:stroke];
  [g2 drawWithOrgGeogebraCommonAwtGShape:rect];
}

- (void)drawMouseCoordsWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  if (((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_))->mouseLoc_ == nil) {
    return;
  }
  OrgGeogebraCommonAwtGPoint *pos = euclidianController_->mouseLoc_;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  [sb setLengthWithInt:0];
  (void) [sb appendWithChar:'('];
  (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(euclidianController_->xRW_) withOrgGeogebraCommonKernelStringTemplate:tpl]];
  if ([kernel_ getCoordStyle] == OrgGeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN) {
    (void) [sb appendWithNSString:@" | "];
  }
  else {
    (void) [sb appendWithNSString:@", "];
  }
  (void) [sb appendWithNSString:[kernel_ formatWithDouble:OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(euclidianController_->yRW_) withOrgGeogebraCommonKernelStringTemplate:tpl]];
  (void) [sb appendWithChar:')'];
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_DARK_GRAY_()];
  [g2 setFontWithOrgGeogebraCommonAwtGFont:[self getFontCoords]];
  [g2 drawStringWithNSString:[sb description] withInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(pos))->x_ + 15 withInt:pos->y_ + 15];
}

- (void)drawBackgroundWithImagesWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g {
  [self drawBackgroundWithImagesWithOrgGeogebraCommonAwtGGraphics2D:g withBoolean:NO];
}

- (void)drawBackgroundWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g
                                              withBoolean:(jboolean)clear {
  OrgGeogebraCommonEuclidianEuclidianView_drawBackgroundWithOrgGeogebraCommonAwtGGraphics2D_withBoolean_(self, g, clear);
}

- (jboolean)showResetIcon {
  if (![((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) showResetIcon] || !([((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) isApplet] || [((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) isHTML5Applet])) {
    return NO;
  }
  ;
  return OrgGeogebraCommonEuclidianEuclidianView_isPrimaryEV(self);
}

- (void)drawGridWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonEuclidianEuclidianView_drawGridWithOrgGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (jdouble)getXAxisCrossingPixel {
  return OrgGeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(self);
}

- (jdouble)getYAxisCrossingPixel {
  return OrgGeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(self);
}

- (void)drawAxesWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  jdouble xCrossPix = OrgGeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(self);
  jdouble yCrossPix = OrgGeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(self);
  jint yAxisEnd = IOSBooleanArray_Get(nil_chk(positiveAxes_), 1) ? J2ObjCFpToInt(yCrossPix) : [self getHeight];
  jint xAxisStart = IOSBooleanArray_Get(positiveAxes_, 0) ? J2ObjCFpToInt(xCrossPix) : 0;
  jdouble yZeroTick = yCrossPix;
  jdouble xZeroTick = xCrossPix;
  jdouble yBig = yCrossPix + 4;
  jdouble xBig = xCrossPix - 4;
  jdouble ySmall1 = yCrossPix + 0;
  jdouble ySmall2 = yCrossPix + 2;
  jdouble xSmall1 = xCrossPix - 0;
  jdouble xSmall2 = xCrossPix - 2;
  jint xoffset, yoffset;
  jboolean bold = [self areAxesBold];
  jboolean filled = (axesLineType_ & OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_FILL_ARROWS) != 0;
  if (filled && gp_ == nil) {
    gp_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
  }
  jboolean drawRightArrow = ((axesLineType_ & OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_RIGHT_ARROW) != 0) && !(IOSBooleanArray_Get(positiveAxes_, 0) && ([self getXmax] < IOSDoubleArray_Get(nil_chk(axisCross_), 1)));
  jboolean drawTopArrow = ((axesLineType_ & OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_RIGHT_ARROW) != 0) && !(IOSBooleanArray_Get(positiveAxes_, 1) && ([self getYmax] < IOSDoubleArray_Get(nil_chk(axisCross_), 0)));
  jboolean drawLeftArrow = ((axesLineType_ & OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_LEFT_ARROW) != 0) && !(IOSBooleanArray_Get(positiveAxes_, 0));
  jboolean drawBottomArrow = ((axesLineType_ & OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_LEFT_ARROW) != 0) && !(IOSBooleanArray_Get(positiveAxes_, 1));
  IOSBooleanArray *drawMajorTicks = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ IOSIntArray_Get(nil_chk(axesTickStyles_), 0) <= 1, IOSIntArray_Get(axesTickStyles_, 1) <= 1 } count:2];
  IOSBooleanArray *drawMinorTicks = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ IOSIntArray_Get(axesTickStyles_, 0) == 0, IOSIntArray_Get(axesTickStyles_, 1) == 0 } count:2];
  OrgGeogebraCommonAwtGFontRenderContext *frc = [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFontRenderContext];
  [g2 setFontWithOrgGeogebraCommonAwtGFont:[self getFontAxes]];
  jint fontsize = [((OrgGeogebraCommonAwtGFont *) nil_chk([self getFontAxes])) getSize];
  jint arrowSize = fontsize / 3;
  [g2 setPaintWithOrgGeogebraCommonAwtGPaint:axesColor_];
  if (bold) {
    axesStroke_ = OrgGeogebraCommonEuclidianEuclidianView_boldAxesStroke_;
    tickStroke_ = OrgGeogebraCommonEuclidianEuclidianView_boldAxesStroke_;
    ySmall2++;
    xSmall2--;
    arrowSize += 1;
  }
  else {
    axesStroke_ = OrgGeogebraCommonEuclidianEuclidianView_defAxesStroke_;
    tickStroke_ = OrgGeogebraCommonEuclidianEuclidianView_defAxesStroke_;
  }
  jdouble arrowAdjustx = drawRightArrow ? [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(axesStroke_)) getLineWidth] : 0;
  jdouble arrowAdjusty = drawTopArrow ? [((id<OrgGeogebraCommonAwtGBasicStroke>) nil_chk(axesStroke_)) getLineWidth] : 0;
  if (OrgGeogebraCommonEuclidianEuclidianView_yAxisOnscreen(self)) {
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:axesStroke_];
    [g2 drawStraightLineWithDouble:xCrossPix withDouble:arrowAdjusty + (drawTopArrow ? 1 : -1) withDouble:xCrossPix withDouble:yAxisEnd + (drawBottomArrow ? -2 : 0)];
    if (drawTopArrow) {
      if (filled) {
        [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
        [gp_ moveToWithFloat:(jfloat) xCrossPix withFloat:(jfloat) arrowAdjusty];
        [gp_ lineToWithFloat:(jfloat) (xCrossPix - arrowSize) withFloat:(jfloat) (arrowAdjusty + 4 * arrowSize)];
        [gp_ lineToWithFloat:(jfloat) (xCrossPix + arrowSize) withFloat:(jfloat) (arrowAdjusty + 4 * arrowSize)];
        [g2 fillWithOrgGeogebraCommonAwtGShape:gp_];
      }
      else {
        [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(tempLine_)) setLineWithDouble:xCrossPix + 0.5 withDouble:arrowAdjusty withDouble:xCrossPix - arrowSize withDouble:arrowAdjusty + arrowSize];
        [g2 drawWithOrgGeogebraCommonAwtGShape:tempLine_];
        [tempLine_ setLineWithDouble:xCrossPix - 0.5 withDouble:arrowAdjusty withDouble:xCrossPix + arrowSize withDouble:arrowAdjusty + arrowSize];
        [g2 drawWithOrgGeogebraCommonAwtGShape:tempLine_];
      }
    }
    if (drawBottomArrow) {
      if (filled) {
        [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
        [gp_ moveToWithFloat:(jfloat) xCrossPix withFloat:(jfloat) ([self getHeight] - arrowAdjusty)];
        [gp_ lineToWithFloat:(jfloat) (xCrossPix - arrowSize) withFloat:(jfloat) ([self getHeight] - arrowAdjusty - 4 * arrowSize)];
        [gp_ lineToWithFloat:(jfloat) (xCrossPix + arrowSize) withFloat:(jfloat) ([self getHeight] - arrowAdjusty - 4 * arrowSize)];
        [g2 fillWithOrgGeogebraCommonAwtGShape:gp_];
      }
      else {
        [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(tempLine_)) setLineWithDouble:xCrossPix + 0.5 withDouble:[self getHeight] - arrowAdjusty withDouble:xCrossPix - arrowSize withDouble:[self getHeight] - arrowAdjusty - arrowSize];
        [g2 drawWithOrgGeogebraCommonAwtGShape:tempLine_];
        [tempLine_ setLineWithDouble:xCrossPix - 0.5 withDouble:[self getHeight] - arrowAdjusty withDouble:xCrossPix + arrowSize withDouble:[self getHeight] - arrowAdjusty - arrowSize];
        [g2 drawWithOrgGeogebraCommonAwtGShape:tempLine_];
      }
    }
  }
  if (OrgGeogebraCommonEuclidianEuclidianView_xAxisOnscreen(self)) {
    yoffset = [self getYOffsetForXAxisWithInt:fontsize];
    xoffset = 1;
    if (IOSObjectArray_Get(nil_chk(axesLabels_), 0) != nil) {
      id<OrgGeogebraCommonAwtFontGTextLayout> layout = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:IOSObjectArray_Get(axesLabels_, 0) withOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonAwtGFont *) nil_chk([self getFontLine])) deriveFontWithInt:IOSIntArray_Get(nil_chk(axesLabelsStyle_), 0)] withOrgGeogebraCommonAwtGFontRenderContext:frc];
      [layout drawWithOrgGeogebraCommonAwtGGraphics2D:g2 withInt:J2ObjCFpToInt(([self getWidth] - 10 - [((id<OrgGeogebraCommonAwtFontGTextLayout>) nil_chk(layout)) getAdvance])) withInt:J2ObjCFpToInt((yCrossPix - 4))];
    }
    jdouble rw = [self getXmin] - (fmod([self getXmin], IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), 0)));
    jint labelno = (jint) JavaLangMath_roundWithDouble_(rw / IOSDoubleArray_Get(axesNumberingDistances_, 0));
    jdouble smallTickOffset = 0;
    jdouble axesStep = [self getXscale] * IOSDoubleArray_Get(axesNumberingDistances_, 0);
    if (IOSBooleanArray_Get(nil_chk([self getPositiveAxes]), 0) && (OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(rw, [self getXmin]))) {
      rw = OrgGeogebraCommonUtilMyMath_nextMultipleWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(axisCross_), 1), IOSDoubleArray_Get(axesNumberingDistances_, 0));
      smallTickOffset = axesStep;
      labelno = 0;
    }
    jdouble pix = [self getxZero] + (rw * [self getXscale]);
    jdouble smallTickPix;
    jdouble tickStep = axesStep / 2;
    jdouble labelLengthMax = JavaLangMath_maxWithDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withOrgGeogebraCommonAwtGFont_(self, rw, [self getFontAxes]), OrgGeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withOrgGeogebraCommonAwtGFont_(self, OrgGeogebraCommonUtilMyMath_nextMultipleWithDouble_withDouble_([self getXmax], IOSDoubleArray_Get(axesNumberingDistances_, 0)), [self getFontAxes]));
    jint unitsPerLabelX = J2ObjCFpToInt(OrgGeogebraCommonUtilMyMath_nextPrettyNumberWithDouble_(labelLengthMax / axesStep));
    if (pix < OrgGeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_) {
      if (IOSBooleanArray_Get(drawMajorTicks, 0)) {
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:pix withDouble:yZeroTick withDouble:pix withDouble:yBig];
      }
      pix += axesStep;
      rw += IOSDoubleArray_Get(axesNumberingDistances_, 0);
      labelno += 1;
    }
    jint maxX = [self getWidth] - OrgGeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_;
    [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:axesStroke_];
    [g2 drawStraightLineWithDouble:xAxisStart + (drawLeftArrow ? 2 : 0) withDouble:yCrossPix withDouble:[self getWidth] - arrowAdjustx - 1 withDouble:yCrossPix];
    if (drawRightArrow) {
      if (filled) {
        [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
        [gp_ moveToWithFloat:(jfloat) ([self getWidth] - arrowAdjustx) withFloat:(jfloat) yCrossPix];
        [gp_ lineToWithFloat:(jfloat) ([self getWidth] - arrowAdjustx - arrowSize * 4) withFloat:(jfloat) (yCrossPix - arrowSize)];
        [gp_ lineToWithFloat:(jfloat) ([self getWidth] - arrowAdjustx - arrowSize * 4) withFloat:(jfloat) (yCrossPix + arrowSize)];
        [g2 fillWithOrgGeogebraCommonAwtGShape:gp_];
      }
      else {
        [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(tempLine_)) setLineWithDouble:[self getWidth] - arrowAdjustx withDouble:yCrossPix + 0.5 withDouble:[self getWidth] - arrowAdjustx - arrowSize withDouble:yCrossPix - arrowSize];
        [g2 drawWithOrgGeogebraCommonAwtGShape:tempLine_];
        [tempLine_ setLineWithDouble:[self getWidth] - arrowAdjustx withDouble:yCrossPix - 0.5 withDouble:[self getWidth] - arrowAdjustx - arrowSize withDouble:yCrossPix + arrowSize];
        [g2 drawWithOrgGeogebraCommonAwtGShape:tempLine_];
      }
    }
    if (drawLeftArrow) {
      if (filled) {
        [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
        [gp_ moveToWithFloat:(jfloat) (arrowAdjustx) withFloat:(jfloat) yCrossPix];
        [gp_ lineToWithFloat:(jfloat) (arrowAdjustx + arrowSize * 4) withFloat:(jfloat) (yCrossPix - arrowSize)];
        [gp_ lineToWithFloat:(jfloat) (arrowAdjustx + arrowSize * 4) withFloat:(jfloat) (yCrossPix + arrowSize)];
        [g2 fillWithOrgGeogebraCommonAwtGShape:gp_];
      }
      else {
        [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(tempLine_)) setLineWithDouble:arrowAdjustx withDouble:yCrossPix + 0.5 withDouble:arrowAdjustx + arrowSize withDouble:yCrossPix - arrowSize];
        [g2 drawWithOrgGeogebraCommonAwtGShape:tempLine_];
        [tempLine_ setLineWithDouble:arrowAdjustx withDouble:yCrossPix - 0.5 withDouble:arrowAdjustx + arrowSize withDouble:yCrossPix + arrowSize];
        [g2 drawWithOrgGeogebraCommonAwtGShape:tempLine_];
      }
    }
    NSString *crossAtStr = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatPiEWithDouble:IOSDoubleArray_Get(nil_chk(axisCross_), 1) withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(axesNumberFormat_), 0) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    *IOSDoubleArray_GetRef(axesNumberingDistances_, 0) = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 0));
    jint count = 0;
    jdouble rwBase = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(rw);
    for (; pix < [self getWidth]; count++, pix += axesStep) {
      rw = rwBase + OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 0) * count);
      if (pix >= xAxisStart && pix <= maxX) {
        if (IOSBooleanArray_Get(nil_chk(showAxesNumbers_), 0)) {
          NSString *strNum = [kernel_ formatPiEWithDouble:rw withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 0) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
          if ((labelno % unitsPerLabelX) == 0) {
            JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(strNum);
            if ([sb charAtWithInt:0] == '-') {
              [sb setCharAtWithInt:0 withChar:OrgGeogebraCommonUtilUnicode_nDash];
            }
            if ((IOSObjectArray_Get(nil_chk(axesUnitLabels_), 0) != nil) && !IOSBooleanArray_Get(nil_chk(piAxisUnit_), 0)) {
              (void) [sb appendWithNSString:IOSObjectArray_Get(axesUnitLabels_, 0)];
            }
            jint x, y = J2ObjCFpToInt((yCrossPix + yoffset));
            jboolean zero = [((NSString *) nil_chk(strNum)) isEqual:crossAtStr];
            if (zero && IOSBooleanArray_Get(nil_chk(showAxes_), 1) && !IOSBooleanArray_Get(positiveAxes_, 1)) {
              x = J2ObjCFpToInt((pix + 6));
            }
            else {
              x = J2ObjCFpToInt(((pix + xoffset) - (OrgGeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withOrgGeogebraCommonAwtGFont_([sb description], [self getFontAxes]) / 2)));
            }
            OrgGeogebraCommonEuclidianEuclidianView_drawStringWithOrgGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(self, g2, [sb description], x, y);
            [((JavaUtilArrayList *) nil_chk(axesLabelsPositionsX_)) addWithId:new_JavaLangInteger_initWithInt_(J2ObjCFpToInt((pix + OrgGeogebraCommonKernelKernel_MIN_PRECISION)))];
          }
        }
        if (IOSBooleanArray_Get(drawMajorTicks, 0) && rw != IOSDoubleArray_Get(axisCross_, 1)) {
          [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:tickStroke_];
          [g2 drawStraightLineWithDouble:pix withDouble:yZeroTick withDouble:pix withDouble:yBig];
        }
      }
      else if (IOSBooleanArray_Get(drawMajorTicks, 0) && !drawRightArrow) {
        [g2 drawStraightLineWithDouble:pix withDouble:yZeroTick withDouble:pix withDouble:yBig];
      }
      smallTickPix = (pix - tickStep) + smallTickOffset;
      if (IOSBooleanArray_Get(drawMinorTicks, 0)) {
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:smallTickPix withDouble:ySmall1 withDouble:smallTickPix withDouble:ySmall2];
      }
      labelno++;
    }
    smallTickPix = (pix - tickStep) + smallTickOffset;
    if (IOSBooleanArray_Get(drawMinorTicks, 0)) {
      [g2 drawStraightLineWithDouble:smallTickPix withDouble:ySmall1 withDouble:smallTickPix withDouble:ySmall2];
    }
  }
  if (OrgGeogebraCommonEuclidianEuclidianView_yAxisOnscreen(self)) {
    xoffset = -4 - (fontsize / 4);
    yoffset = (fontsize / 2) - 1;
    if (IOSObjectArray_Get(nil_chk(axesLabels_), 1) != nil) {
      id<OrgGeogebraCommonAwtFontGTextLayout> layout = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:IOSObjectArray_Get(axesLabels_, 1) withOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonAwtGFont *) nil_chk([self getFontLine])) deriveFontWithInt:IOSIntArray_Get(nil_chk(axesLabelsStyle_), 1)] withOrgGeogebraCommonAwtGFontRenderContext:frc];
      [layout drawWithOrgGeogebraCommonAwtGGraphics2D:g2 withInt:J2ObjCFpToInt((xCrossPix + 5)) withInt:J2ObjCFpToInt((5 + [((id<OrgGeogebraCommonAwtFontGTextLayout>) nil_chk(layout)) getAscent]))];
    }
    jdouble rw = [self getYmin] - (fmod([self getYmin], IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), 1)));
    jint labelno = (jint) JavaLangMath_roundWithDouble_(rw / IOSDoubleArray_Get(axesNumberingDistances_, 1));
    jdouble smallTickOffset = 0;
    jdouble axesStep = [self getYscale] * IOSDoubleArray_Get(axesNumberingDistances_, 1);
    if (IOSBooleanArray_Get(nil_chk([self getPositiveAxes]), 1) && (OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(rw, [self getYmin]))) {
      rw = OrgGeogebraCommonUtilMyMath_nextMultipleWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(axisCross_), 0), IOSDoubleArray_Get(axesNumberingDistances_, 1));
      smallTickOffset = axesStep;
      labelno = 0;
    }
    jdouble pix = [self getyZero] - (rw * [self getYscale]);
    jdouble tickStep = axesStep / 2;
    jdouble maxHeight = OrgGeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithOrgGeogebraCommonAwtGFont_([self getFontAxes]);
    jint unitsPerLabelY = J2ObjCFpToInt(OrgGeogebraCommonUtilMyMath_nextPrettyNumberWithDouble_(maxHeight / axesStep));
    if (pix > ([self getHeight] - OrgGeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_)) {
      if (IOSBooleanArray_Get(drawMajorTicks, 1)) {
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:xBig withDouble:pix withDouble:xZeroTick withDouble:pix];
      }
      pix -= axesStep;
      rw += IOSDoubleArray_Get(axesNumberingDistances_, 1);
      labelno++;
    }
    jdouble smallTickPix = pix + tickStep;
    jint maxY = OrgGeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_;
    NSString *crossAtStr = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatPiEWithDouble:IOSDoubleArray_Get(nil_chk(axisCross_), 0) withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(axesNumberFormat_), 1) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    for (; pix >= maxY; rw += IOSDoubleArray_Get(axesNumberingDistances_, 1), pix -= axesStep, labelno++) {
      if (pix >= maxY && pix <= yAxisEnd) {
        if (IOSBooleanArray_Get(nil_chk(showAxesNumbers_), 1)) {
          NSString *strNum = [kernel_ formatPiEWithDouble:rw withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 1) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
          if ((labelno % unitsPerLabelY) == 0) {
            JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(strNum);
            if ([sb charAtWithInt:0] == '-') {
              [sb setCharAtWithInt:0 withChar:OrgGeogebraCommonUtilUnicode_nDash];
            }
            if ((IOSObjectArray_Get(nil_chk(axesUnitLabels_), 1) != nil) && !IOSBooleanArray_Get(nil_chk(piAxisUnit_), 1)) {
              (void) [sb appendWithNSString:IOSObjectArray_Get(axesUnitLabels_, 1)];
            }
            id<OrgGeogebraCommonAwtFontGTextLayout> layout = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:[sb description] withOrgGeogebraCommonAwtGFont:[self getFontAxes] withOrgGeogebraCommonAwtGFontRenderContext:[g2 getFontRenderContext]];
            jdouble width = [((id<OrgGeogebraCommonAwtFontGTextLayout>) nil_chk(layout)) getAdvance];
            jint x = J2ObjCFpToInt(((xCrossPix + xoffset) - width));
            jint y;
            jboolean zero = [((NSString *) nil_chk(strNum)) isEqual:crossAtStr];
            if (zero && IOSBooleanArray_Get(nil_chk(showAxes_), 0) && !IOSBooleanArray_Get(positiveAxes_, 0)) {
              y = J2ObjCFpToInt((yCrossPix - 2));
            }
            else {
              y = J2ObjCFpToInt((pix + yoffset));
            }
            OrgGeogebraCommonEuclidianEuclidianView_drawStringWithOrgGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(self, g2, [sb description], x, y);
            if (width > yLabelMaxWidth_) {
              yLabelMaxWidth_ = width;
            }
            [((JavaUtilArrayList *) nil_chk(axesLabelsPositionsY_)) addWithId:new_JavaLangInteger_initWithInt_(J2ObjCFpToInt((pix + OrgGeogebraCommonKernelKernel_MIN_PRECISION)))];
          }
        }
        if (IOSBooleanArray_Get(drawMajorTicks, 1) && rw != IOSDoubleArray_Get(axisCross_, 0)) {
          [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:tickStroke_];
          [g2 drawStraightLineWithDouble:xBig withDouble:pix withDouble:xZeroTick withDouble:pix];
        }
      }
      else if (IOSBooleanArray_Get(drawMajorTicks, 1) && !drawTopArrow) {
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:xBig withDouble:pix withDouble:xZeroTick withDouble:pix];
      }
      smallTickPix = (pix + tickStep) - smallTickOffset;
      if (IOSBooleanArray_Get(drawMinorTicks, 1)) {
        [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:xSmall1 withDouble:smallTickPix withDouble:xSmall2 withDouble:smallTickPix];
      }
    }
  }
  if (showAxesCornerCoords_) {
    if (IOSBooleanArray_Get(nil_chk(showAxes_), 0) && IOSBooleanArray_Get(showAxes_, 1) && (!OrgGeogebraCommonEuclidianEuclidianView_xAxisOnscreen(self) || !OrgGeogebraCommonEuclidianEuclidianView_yAxisOnscreen(self))) {
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      [sb setLengthWithInt:0];
      (void) [sb appendWithChar:'('];
      (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatPiEWithDouble:[self getXmin] withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(axesNumberFormat_), 0) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      (void) [sb appendWithChar:((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLocalization]))->unicodeComma_];
      (void) [sb appendWithNSString:@" "];
      (void) [sb appendWithNSString:[kernel_ formatPiEWithDouble:[self getYmax] withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 1) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      (void) [sb appendWithChar:')'];
      jint textHeight = 2 + [((OrgGeogebraCommonAwtGFont *) nil_chk([self getFontAxes])) getSize];
      [g2 setFontWithOrgGeogebraCommonAwtGFont:[self getFontAxes]];
      [g2 drawStringWithNSString:[sb description] withInt:5 withInt:textHeight];
      [sb setLengthWithInt:0];
      (void) [sb appendWithChar:'('];
      (void) [sb appendWithNSString:[kernel_ formatPiEWithDouble:[self getXmax] withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 0) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      (void) [sb appendWithChar:((OrgGeogebraCommonMainLocalization *) nil_chk([app_ getLocalization]))->unicodeComma_];
      (void) [sb appendWithNSString:@" "];
      (void) [sb appendWithNSString:[kernel_ formatPiEWithDouble:[self getYmin] withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 1) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      (void) [sb appendWithChar:')'];
      id<OrgGeogebraCommonAwtFontGTextLayout> layout = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:[sb description] withOrgGeogebraCommonAwtGFont:[self getFontAxes] withOrgGeogebraCommonAwtGFontRenderContext:frc];
      [((id<OrgGeogebraCommonAwtFontGTextLayout>) nil_chk(layout)) drawWithOrgGeogebraCommonAwtGGraphics2D:g2 withInt:J2ObjCFpToInt(([self getWidth] - 5 - OrgGeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withOrgGeogebraCommonAwtGFont_([sb description], [self getFontAxes]))) withInt:[self getHeight] - 5];
    }
  }
}

- (jboolean)xAxisOnscreen {
  return OrgGeogebraCommonEuclidianEuclidianView_xAxisOnscreen(self);
}

- (jboolean)yAxisOnscreen {
  return OrgGeogebraCommonEuclidianEuclidianView_yAxisOnscreen(self);
}

- (jint)getYOffsetForXAxisWithInt:(jint)fontSize {
  return fontSize + 4;
}

- (void)drawLineAvoidingLabelsHWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                                                        withDouble:(jdouble)x1
                                                        withDouble:(jdouble)y1
                                                        withDouble:(jdouble)x2
                                                        withDouble:(jdouble)y2
                                                        withDouble:(jdouble)xCrossPix {
  OrgGeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsHWithOrgGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(self, g2, x1, y1, x2, y2, xCrossPix);
}

- (void)drawLineAvoidingLabelsVWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                                                        withDouble:(jdouble)x1
                                                        withDouble:(jdouble)y1
                                                        withDouble:(jdouble)x2
                                                        withDouble:(jdouble)y2
                                                        withDouble:(jdouble)yCrossPix {
  OrgGeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsVWithOrgGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(self, g2, x1, y1, x2, y2, yCrossPix);
}

- (void)drawStringWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2
                                         withNSString:(NSString *)text
                                           withDouble:(jdouble)x
                                           withDouble:(jdouble)y {
  OrgGeogebraCommonEuclidianEuclidianView_drawStringWithOrgGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(self, g2, text, x, y);
}

- (void)drawResetIconWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawActionObjectsWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setDefRenderingHintsWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
}

- (void)setAntialiasingWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawAnimationButtonsWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
}

- (void)setBackgroundWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)bgColor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)synchronizeMenuBarAndEuclidianStyleBarWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)evs {
  if (styleBar_ != nil) {
    [((id<OrgGeogebraCommonEuclidianEuclidianStyleBar>) nil_chk(OrgGeogebraCommonEuclidianEuclidianView_getStyleBar(self))) updateButtonPointCaptureWithInt:[((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evs)) getPointCapturingMode]];
  }
}

- (void)setPreferredSizeWithOrgGeogebraCommonAwtGDimension:(OrgGeogebraCommonAwtGDimension *)preferredSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)showGridWithBoolean:(jboolean)show {
  return [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) showGridWithBoolean:show];
}

- (void)setGridIsBoldWithBoolean:(jboolean)gridIsBold {
  if (self->gridIsBold_ == gridIsBold) {
    return;
  }
  self->gridIsBold_ = gridIsBold;
  [self setGridLineStyleWithInt:gridLineStyle_];
  OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
}

- (void)setGridColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)gridColor {
  if (gridColor != nil) {
    self->gridColor_ = gridColor;
  }
}

- (void)setGridLineStyleWithInt:(jint)gridLineStyle {
  self->gridLineStyle_ = gridLineStyle;
  gridStroke_ = OrgGeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(gridIsBold_ ? 2.0f : 1.0f, gridLineStyle);
}

- (void)settingsChangedWithOrgGeogebraCommonMainSettingsAbstractSettings:(OrgGeogebraCommonMainSettingsAbstractSettings *)settings {
  [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) settingsChangedWithOrgGeogebraCommonMainSettingsAbstractSettings:settings];
  if (styleBar_ != nil) {
    [styleBar_ updateGUI];
  }
}

- (OrgGeogebraCommonMainSettingsEuclidianSettings *)getSettings {
  return self->settings_;
}

- (void)setHitsWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits_)) init__];
  if (rect == nil) {
    return;
  }
  OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonEuclidianDrawable *d = [it next];
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible] && [d isInsideWithOrgGeogebraCommonAwtGRectangle:rect]) {
      [hits_ addWithId:geo];
    }
  }
}

- (void)updateCursorWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
}

- (void)setIntersectionHitsWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rect {
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits_)) init__];
  if (rect == nil) {
    return;
  }
  OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonEuclidianDrawable *d = [it next];
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible] && [d intersectsRectangleWithOrgGeogebraCommonAwtGRectangle:rect]) {
      [hits_ addWithId:geo];
    }
  }
}

- (id<OrgGeogebraCommonAwtGRectangle>)getSelectionRectangle {
  return selectionRectangle_;
}

- (OrgGeogebraCommonEuclidianGeneralPathClipped *)getBoundingPath {
  OrgGeogebraCommonEuclidianGeneralPathClipped *gs = new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self);
  [gs moveToWithDouble:0 withDouble:0];
  [gs lineToWithDouble:[self getWidth] withDouble:0];
  [gs lineToWithDouble:[self getWidth] withDouble:[self getHeight]];
  [gs lineToWithDouble:0 withDouble:[self getHeight]];
  [gs lineToWithDouble:0 withDouble:0];
  [gs closePath];
  return gs;
}

- (void)addBackgroundImageWithOrgGeogebraCommonEuclidianDrawDrawImage:(OrgGeogebraCommonEuclidianDrawDrawImage *)img {
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) addUniqueWithOrgGeogebraCommonEuclidianDrawable:img];
  jint layer = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonEuclidianDrawDrawImage *) nil_chk(img)) getGeoElement])) getLayer];
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) removeWithOrgGeogebraCommonEuclidianDrawable:img];
}

- (void)removeBackgroundImageWithOrgGeogebraCommonEuclidianDrawDrawImage:(OrgGeogebraCommonEuclidianDrawDrawImage *)img {
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) removeWithOrgGeogebraCommonEuclidianDrawable:img];
  jint layer = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonEuclidianDrawDrawImage *) nil_chk(img)) getGeoElement])) getLayer];
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithOrgGeogebraCommonEuclidianDrawable:img];
}

- (void)resetLists {
  [((JavaUtilHashMap *) nil_chk(DrawableMap_)) clear];
  [((JavaUtilArrayList *) nil_chk(stickyPointList_)) clear];
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) clear];
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) clear];
  [((JavaUtilArrayList *) nil_chk(self->geosWaiting_)) clear];
  for (jint i = 0; i <= [((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getMaxLayerUsed]; i++) {
    [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), i))) clear];
  }
  [self setToolTipTextWithNSString:nil];
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  id<OrgGeogebraCommonAwtGRectangle> result = nil;
  OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonEuclidianDrawable *d = [it next];
    id<OrgGeogebraCommonAwtGRectangle> bb = [((OrgGeogebraCommonEuclidianDrawable *) nil_chk(d)) getBounds];
    if (bb != nil) {
      if (result == nil) {
        result = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithOrgGeogebraCommonAwtGRectangle:bb];
      }
      [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(result)) addWithOrgGeogebraCommonAwtGRectangle:bb];
    }
  }
  if (result == nil) {
    result = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:0 withInt:0];
  }
  return result;
}

- (void)setPreviewWithOrgGeogebraCommonEuclidianPreviewable:(id<OrgGeogebraCommonEuclidianPreviewable>)p {
  if (previewDrawable_ != nil) {
    [previewDrawable_ disposePreview];
  }
  previewDrawable_ = p;
}

- (void)setTemporaryCoordSystemForExport {
  widthTemp_ = [self getWidth];
  heightTemp_ = [self getHeight];
  xminTemp_ = [self getXmin];
  xmaxTemp_ = [self getXmax];
  yminTemp_ = [self getYmin];
  ymaxTemp_ = [self getYmax];
  @try {
    OrgGeogebraCommonKernelGeosGeoPoint *export1 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getKernel])) lookupLabelWithNSString:OrgGeogebraCommonEuclidianEuclidianView_EXPORT1_], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    OrgGeogebraCommonKernelGeosGeoPoint *export2 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getKernel])) lookupLabelWithNSString:OrgGeogebraCommonEuclidianEuclidianView_EXPORT2_], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    if ((export1 == nil) || (export2 == nil)) {
      return;
    }
    IOSDoubleArray *xy1 = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *xy2 = [IOSDoubleArray newArrayWithLength:2];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(export1)) getInhomCoordsWithDoubleArray:xy1];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(export2)) getInhomCoordsWithDoubleArray:xy2];
    OrgGeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(xy1, 0), IOSDoubleArray_Get(xy2, 0)), JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(xy1, 0), IOSDoubleArray_Get(xy2, 0)), JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(xy1, 1), IOSDoubleArray_Get(xy2, 1)), JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(xy1, 1), IOSDoubleArray_Get(xy2, 1)));
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonEuclidianEuclidianView_restoreOldCoordSystem(self);
  }
}

- (OrgGeogebraCommonAwtGPoint *)getMaximumLabelSizeWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  OrgGeogebraCommonAwtGPoint *max = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(0, 0);
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithOrgGeogebraCommonAwtGFont:[self getFontAxes]];
  jint yAxisHeight = IOSBooleanArray_Get(nil_chk(positiveAxes_), 1) ? J2ObjCFpToInt([self getyZero]) : [self getHeight];
  jint maxY = IOSBooleanArray_Get(positiveAxes_, 1) ? J2ObjCFpToInt([self getyZero]) : [self getHeight] - OrgGeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_;
  jdouble rw = [self getYmax] - (fmod([self getYmax], IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), 1)));
  jdouble pix = [self getyZero] - (rw * [self getYscale]);
  jdouble axesStep = [self getYscale] * IOSDoubleArray_Get(axesNumberingDistances_, 1);
  *IOSDoubleArray_GetRef(axesNumberingDistances_, 1) = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 1));
  jint count = 0;
  jdouble rwBase = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(rw);
  for (; pix <= yAxisHeight; count++, pix += axesStep) {
    rw = rwBase - OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 1) * count);
    if (pix <= maxY) {
      if (IOSBooleanArray_Get(nil_chk(showAxesNumbers_), 1)) {
        NSString *strNum = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatPiEWithDouble:rw withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(axesNumberFormat_), 1) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
        [sb setLengthWithInt:0];
        (void) [sb appendWithNSString:strNum];
        if ((IOSObjectArray_Get(nil_chk(axesUnitLabels_), 1) != nil) && !IOSBooleanArray_Get(nil_chk(piAxisUnit_), 1)) {
          (void) [sb appendWithNSString:IOSObjectArray_Get(axesUnitLabels_, 1)];
        }
        jdouble width = OrgGeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withOrgGeogebraCommonAwtGFont_([sb description], [self getFontAxes]);
        if (max->x_ < width) {
          max->x_ = J2ObjCFpToInt(width);
        }
        if (max->y_ == 0) max->y_ = J2ObjCFpToInt(OrgGeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithOrgGeogebraCommonAwtGFont_([self getFontAxes]));
      }
    }
  }
  return max;
}

- (void)restoreOldCoordSystem {
  OrgGeogebraCommonEuclidianEuclidianView_restoreOldCoordSystem(self);
}

- (void)setTemporarySizeWithInt:(jint)w
                        withInt:(jint)h {
  [self setWidthWithInt:w];
  [self setHeightWithInt:h];
  [self updateSize];
}

- (jboolean)setShowAxisWithInt:(jint)axis
                   withBoolean:(jboolean)flag
                   withBoolean:(jboolean)update {
  if (flag == IOSBooleanArray_Get(nil_chk(showAxes_), axis)) {
    return NO;
  }
  *IOSBooleanArray_GetRef(showAxes_, axis) = flag;
  if (update) {
    OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  }
  return YES;
}

- (jboolean)setShowAxesWithBoolean:(jboolean)flag
                       withBoolean:(jboolean)update {
  jboolean changedX = [self setShowAxisWithInt:OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X withBoolean:flag withBoolean:NO];
  return [self setShowAxisWithInt:OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y withBoolean:flag withBoolean:YES] || changedX;
}

- (void)setBoldAxesWithBoolean:(jboolean)bold {
  axesLineType_ = OrgGeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(bold, axesLineType_);
}

- (jboolean)isTracing {
  OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((OrgGeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    if ([((OrgGeogebraCommonEuclidianDrawable *) nil_chk([it next])) isTracing]) {
      return YES;
    }
  }
  return NO;
}

- (jboolean)hasBackgroundImages {
  return [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) size] > 0;
}

- (id<OrgGeogebraCommonAwtGGraphics2D>)getBackgroundGraphics {
  self->tracing_ = YES;
  return bgGraphics_;
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml
                            withBoolean:(jboolean)asPreference {
  [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getXMLWithJavaLangStringBuilder:sbxml withBoolean:asPreference];
}

- (void)startXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml
                              withBoolean:(jboolean)asPreference {
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_();
  (void) [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"<euclidianView>\n"];
  [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getXMLidWithJavaLangStringBuilder:sbxml];
  if (([self getWidth] > OrgGeogebraCommonEuclidianEuclidianView_MIN_WIDTH) && ([self getHeight] > OrgGeogebraCommonEuclidianEuclidianView_MIN_HEIGHT)) {
    (void) [sbxml appendWithNSString:@"\t<size "];
    (void) [sbxml appendWithNSString:@" width=\""];
    (void) [sbxml appendWithInt:[self getWidth]];
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@" height=\""];
    (void) [sbxml appendWithInt:[self getHeight]];
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@"/>\n"];
  }
  if (![self isZoomable] && !asPreference) {
    (void) [sbxml appendWithNSString:@"\t<coordSystem"];
    (void) [sbxml appendWithNSString:@" xMin=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@" xMax=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@" yMin=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@" yMax=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@"/>\n"];
  }
  else {
    (void) [sbxml appendWithNSString:@"\t<coordSystem"];
    (void) [sbxml appendWithNSString:@" xZero=\""];
    (void) [sbxml appendWithDouble:[self getxZero]];
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@" yZero=\""];
    (void) [sbxml appendWithDouble:[self getyZero]];
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@" scale=\""];
    (void) [sbxml appendWithDouble:[self getXscale]];
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@" yscale=\""];
    (void) [sbxml appendWithDouble:[self getYscale]];
    (void) [sbxml appendWithNSString:@"\""];
    (void) [sbxml appendWithNSString:@"/>\n"];
  }
  (void) [sbxml appendWithNSString:@"\t<evSettings axes=\""];
  (void) [sbxml appendWithBoolean:IOSBooleanArray_Get(nil_chk(showAxes_), 0) || IOSBooleanArray_Get(showAxes_, 1)];
  (void) [sbxml appendWithNSString:@"\" grid=\""];
  (void) [sbxml appendWithBoolean:showGrid__];
  (void) [sbxml appendWithNSString:@"\" gridIsBold=\""];
  (void) [sbxml appendWithBoolean:gridIsBold_];
  (void) [sbxml appendWithNSString:@"\" pointCapturing=\""];
  (void) [sbxml appendWithInt:[self getPointCapturingMode] > OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_XML_MAX ? OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_DEFAULT : [self getPointCapturingMode]];
  (void) [sbxml appendWithNSString:@"\" rightAngleStyle=\""];
  (void) [sbxml appendWithInt:((OrgGeogebraCommonMainApp *) nil_chk([self getApplication]))->rightAngleStyle_];
  if (asPreference) {
    (void) [sbxml appendWithNSString:@"\" allowShowMouseCoords=\""];
    (void) [sbxml appendWithBoolean:[self getAllowShowMouseCoords]];
    (void) [sbxml appendWithNSString:@"\" allowToolTips=\""];
    (void) [sbxml appendWithInt:OrgGeogebraCommonEuclidianEuclidianView_getAllowToolTips(self)];
    (void) [sbxml appendWithNSString:@"\" deleteToolSize=\""];
    (void) [sbxml appendWithInt:[((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) getDeleteToolSize]];
  }
  (void) [sbxml appendWithNSString:@"\" checkboxSize=\""];
  (void) [sbxml appendWithInt:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCheckboxSize]];
  (void) [sbxml appendWithNSString:@"\" gridType=\""];
  (void) [sbxml appendWithInt:OrgGeogebraCommonEuclidianEuclidianView_getGridType(self)];
  if (lockedAxesRatio_ != nil) {
    (void) [sbxml appendWithNSString:@"\" lockedAxesRatio=\""];
    (void) [sbxml appendWithId:lockedAxesRatio_];
  }
  (void) [sbxml appendWithNSString:@"\"/>\n"];
  (void) [sbxml appendWithNSString:@"\t<bgColor r=\""];
  (void) [sbxml appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getBackgroundCommon])) getRed]];
  (void) [sbxml appendWithNSString:@"\" g=\""];
  (void) [sbxml appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getBackgroundCommon])) getGreen]];
  (void) [sbxml appendWithNSString:@"\" b=\""];
  (void) [sbxml appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getBackgroundCommon])) getBlue]];
  (void) [sbxml appendWithNSString:@"\"/>\n"];
  (void) [sbxml appendWithNSString:@"\t<axesColor r=\""];
  (void) [sbxml appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk(axesColor_)) getRed]];
  (void) [sbxml appendWithNSString:@"\" g=\""];
  (void) [sbxml appendWithInt:[axesColor_ getGreen]];
  (void) [sbxml appendWithNSString:@"\" b=\""];
  (void) [sbxml appendWithInt:[axesColor_ getBlue]];
  (void) [sbxml appendWithNSString:@"\"/>\n"];
  (void) [sbxml appendWithNSString:@"\t<gridColor r=\""];
  (void) [sbxml appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk(gridColor_)) getRed]];
  (void) [sbxml appendWithNSString:@"\" g=\""];
  (void) [sbxml appendWithInt:[gridColor_ getGreen]];
  (void) [sbxml appendWithNSString:@"\" b=\""];
  (void) [sbxml appendWithInt:[gridColor_ getBlue]];
  (void) [sbxml appendWithNSString:@"\"/>\n"];
  (void) [sbxml appendWithNSString:@"\t<lineStyle axes=\""];
  (void) [sbxml appendWithInt:axesLineType_];
  (void) [sbxml appendWithNSString:@"\" grid=\""];
  (void) [sbxml appendWithInt:gridLineStyle_];
  (void) [sbxml appendWithNSString:@"\"/>\n"];
  for (jint i = 0; i < 2; i++) {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([self getSettings])) addAxisXMLWithInt:i withJavaLangStringBuilder:sbxml];
  }
  if (!automaticGridDistance_ || (OrgGeogebraCommonPluginEuclidianStyleConstants_get_automaticGridDistanceFactor_() != OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_GRID_DIST_FACTOR)) {
    (void) [sbxml appendWithNSString:@"\t<grid distX=\""];
    (void) [sbxml appendWithDouble:IOSDoubleArray_Get(nil_chk(gridDistances_), 0)];
    (void) [sbxml appendWithNSString:@"\" distY=\""];
    (void) [sbxml appendWithDouble:IOSDoubleArray_Get(gridDistances_, 1)];
    (void) [sbxml appendWithNSString:@"\" distTheta=\""];
    (void) [sbxml appendWithDouble:IOSDoubleArray_Get(gridDistances_, 2)];
    (void) [sbxml appendWithNSString:@"\"/>\n"];
  }
}

- (void)addAxisXMLWithInt:(jint)i
withJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  (void) [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"\t<axis id=\""];
  (void) [sbxml appendWithInt:i];
  (void) [sbxml appendWithNSString:@"\" show=\""];
  (void) [sbxml appendWithBoolean:[self getShowAxisWithInt:i]];
  (void) [sbxml appendWithNSString:@"\" label=\""];
  if (IOSObjectArray_Get(nil_chk(axesLabels_), i) != nil && settings_ != nil) {
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [self->settings_ axisLabelForXMLWithInt:i]);
  }
  (void) [sbxml appendWithNSString:@"\" unitLabel=\""];
  if (IOSObjectArray_Get(nil_chk(axesUnitLabels_), i) != nil) {
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, IOSObjectArray_Get(axesUnitLabels_, i));
  }
  (void) [sbxml appendWithNSString:@"\" tickStyle=\""];
  (void) [sbxml appendWithInt:IOSIntArray_Get(nil_chk(axesTickStyles_), i)];
  (void) [sbxml appendWithNSString:@"\" showNumbers=\""];
  (void) [sbxml appendWithBoolean:IOSBooleanArray_Get(nil_chk(showAxesNumbers_), i)];
  if (!IOSBooleanArray_Get(nil_chk(automaticAxesNumberingDistances_), i)) {
    (void) [sbxml appendWithNSString:@"\" tickDistance=\""];
    (void) [sbxml appendWithDouble:IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), i)];
  }
  if (IOSBooleanArray_Get(nil_chk(drawBorderAxes_), i)) {
    (void) [sbxml appendWithNSString:@"\" axisCrossEdge=\""];
    (void) [sbxml appendWithBoolean:YES];
  }
  else if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(axisCross_), i)) && !IOSBooleanArray_Get(drawBorderAxes_, i)) {
    (void) [sbxml appendWithNSString:@"\" axisCross=\""];
    (void) [sbxml appendWithDouble:IOSDoubleArray_Get(axisCross_, i)];
  }
  if (IOSBooleanArray_Get(nil_chk(positiveAxes_), i)) {
    (void) [sbxml appendWithNSString:@"\" positiveAxis=\""];
    (void) [sbxml appendWithBoolean:IOSBooleanArray_Get(positiveAxes_, i)];
  }
  (void) [sbxml appendWithNSString:@"\"/>\n"];
}

- (void)endXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  (void) [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"</euclidianView>\n"];
}

- (void)drawPointsWithOrgGeogebraCommonKernelGeosGeoImage:(OrgGeogebraCommonKernelGeosGeoImage *)ge
                                          withDoubleArray:(IOSDoubleArray *)x
                                          withDoubleArray:(IOSDoubleArray *)y {
  JavaUtilArrayList *ptList = new_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(x))->size_; i++) {
    jint xi = OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(self, IOSDoubleArray_Get(x, i));
    jint yi = OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(self, IOSDoubleArray_Get(nil_chk(y), i));
    if ([((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(ge)) getCornerWithInt:1] != nil) {
      jint w = [((id<OrgGeogebraCommonAwtMyImage>) nil_chk([ge getFillImage])) getWidth];
      jint h = [((id<OrgGeogebraCommonAwtMyImage>) nil_chk([ge getFillImage])) getHeight];
      IOSDoubleArray *cx = [IOSDoubleArray newArrayWithLength:3], *cy = [IOSDoubleArray newArrayWithLength:3];
      for (jint j = 0; j < ([ge getCornerWithInt:2] != nil ? 3 : 2); j++) {
        *IOSDoubleArray_GetRef(cx, j) = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([ge getCornerWithInt:j]))->x_;
        *IOSDoubleArray_GetRef(cy, j) = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([ge getCornerWithInt:j]))->y_;
      }
      if ([ge getCornerWithInt:2] == nil) {
        *IOSDoubleArray_GetRef(cx, 2) = IOSDoubleArray_Get(cx, 0) - ((h * (IOSDoubleArray_Get(cy, 1) - IOSDoubleArray_Get(cy, 0))) / w);
        *IOSDoubleArray_GetRef(cy, 2) = IOSDoubleArray_Get(cy, 0) + ((h * (IOSDoubleArray_Get(cx, 1) - IOSDoubleArray_Get(cx, 0))) / w);
      }
      jdouble dx1 = IOSDoubleArray_Get(cx, 1) - IOSDoubleArray_Get(cx, 0);
      jdouble dx2 = IOSDoubleArray_Get(cx, 2) - IOSDoubleArray_Get(cx, 0);
      jdouble dy1 = IOSDoubleArray_Get(cy, 1) - IOSDoubleArray_Get(cy, 0);
      jdouble dy2 = IOSDoubleArray_Get(cy, 2) - IOSDoubleArray_Get(cy, 0);
      jdouble ratio1 = (((IOSDoubleArray_Get(x, i) - IOSDoubleArray_Get(cx, 0)) * dy2) - (dx2 * (IOSDoubleArray_Get(y, i) - IOSDoubleArray_Get(cy, 0)))) / ((dx1 * dy2) - (dx2 * dy1));
      jdouble ratio2 = ((-(IOSDoubleArray_Get(x, i) - IOSDoubleArray_Get(cx, 0)) * dy1) + (dx1 * (IOSDoubleArray_Get(y, i) - IOSDoubleArray_Get(cy, 0)))) / ((dx1 * dy2) - (dx2 * dy1));
      xi = (jint) JavaLangMath_roundWithDouble_(w * ratio1);
      yi = (jint) JavaLangMath_roundWithDouble_(h * (1 - ratio2));
    }
    else if ([ge getCornerWithInt:0] != nil) {
      xi = xi - OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(self, ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([ge getCornerWithInt:0]))->x_);
      yi = [((id<OrgGeogebraCommonAwtMyImage>) nil_chk([ge getFillImage])) getHeight] + (yi - OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(self, ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([ge getCornerWithInt:0]))->y_));
    }
    [ptList addWithId:new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(xi, yi)];
  }
  [self doDrawPointsWithOrgGeogebraCommonKernelGeosGeoImage:ge withJavaUtilList:ptList withOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_() withInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL withInt:1];
}

- (void)doDrawPointsWithOrgGeogebraCommonKernelGeosGeoImage:(OrgGeogebraCommonKernelGeosGeoImage *)gi
                                           withJavaUtilList:(id<JavaUtilList>)penPoints2
                             withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)penColor
                                                    withInt:(jint)penLineStyle
                                                    withInt:(jint)penSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resetXYMinMaxObjects {
  if ((evNo_ == 1) || (evNo_ == 2)) {
    OrgGeogebraCommonMainSettingsEuclidianSettings *es = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getSettings])) getEuclidianWithInt:evNo_];
    OrgGeogebraCommonKernelGeosGeoNumeric *xmao = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction], [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(xmaxObject_)) getNumber])) getDouble]);
    OrgGeogebraCommonKernelGeosGeoNumeric *xmio = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_([kernel_ getConstruction], [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(xminObject_)) getNumber])) getDouble]);
    OrgGeogebraCommonKernelGeosGeoNumeric *ymao = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_([kernel_ getConstruction], [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(ymaxObject_)) getNumber])) getDouble]);
    OrgGeogebraCommonKernelGeosGeoNumeric *ymio = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_([kernel_ getConstruction], [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(yminObject_)) getNumber])) getDouble]);
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(es)) setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:xmao withBoolean:NO];
    [es setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:xmio withBoolean:NO];
    [es setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:ymao withBoolean:NO];
    [es setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:ymio withBoolean:YES];
  }
}

- (void)setViewShowAllObjectsWithBoolean:(jboolean)storeUndo {
  jdouble x0RW = [self getXmin];
  jdouble x1RW;
  jdouble y0RW;
  jdouble y1RW;
  jdouble y0RWfunctions = 0;
  jdouble y1RWfunctions = 0;
  jdouble factor = 0.03;
  jdouble xGap = 0;
  JavaUtilTreeSet *allFunctions = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrderWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_FUNCTION()];
  jint noVisible = 0;
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(allFunctions)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(([it next]), [OrgGeogebraCommonKernelGeosGeoFunction class])))) isEuclidianVisible]) {
      noVisible++;
    }
  }
  id<OrgGeogebraCommonAwtGRectangle> rect = [self getBounds];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) getHeight]) || OrgGeogebraCommonKernelKernel_isZeroWithDouble_([rect getWidth])) {
    if (noVisible == 0) {
      return;
    }
    x0RW = JavaLangDouble_MAX_VALUE;
    x1RW = -JavaLangDouble_MAX_VALUE;
    y0RW = JavaLangDouble_MAX_VALUE;
    y1RW = -JavaLangDouble_MAX_VALUE;
  }
  else {
    x0RW = OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, [rect getMinX]);
    x1RW = OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, [rect getMaxX]);
    y0RW = OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, [rect getMaxY]);
    y1RW = OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, [rect getMinY]);
  }
  xGap = (x1RW - x0RW) * factor;
  jboolean ok = NO;
  if (noVisible != 0) {
    x0RW = JavaLangMath_minWithDouble_withDouble_([self getXmin], x0RW);
    x1RW = JavaLangMath_maxWithDouble_withDouble_([self getXmax], x1RW);
    if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x0RW, [self getXmin]) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x1RW, [self getXmax])) {
      xGap = 0;
    }
    else {
      xGap = (x1RW - x0RW) * factor;
    }
    y0RWfunctions = JavaLangDouble_MAX_VALUE;
    y1RWfunctions = -JavaLangDouble_MAX_VALUE;
    it = [allFunctions iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelGeosGeoFunction *fun = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(([it next]), [OrgGeogebraCommonKernelGeosGeoFunction class]);
      jdouble abscissa;
      for (jint i = 0; i < 200; i++) {
        if (i == 0) {
          abscissa = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) evaluateWithDouble:x0RW];
        }
        else if (i == 1) {
          abscissa = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) evaluateWithDouble:x1RW];
        }
        else {
          abscissa = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) evaluateWithDouble:x0RW + (JavaLangMath_random() * (x1RW - x0RW))];
        }
        if (!JavaLangDouble_isInfiniteWithDouble_(abscissa) && !JavaLangDouble_isNaNWithDouble_(abscissa)) {
          ok = YES;
          if (abscissa > y1RWfunctions) {
            y1RWfunctions = abscissa;
          }
          if (abscissa < y0RWfunctions) {
            y0RWfunctions = abscissa;
          }
        }
      }
    }
  }
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(y1RWfunctions - y0RWfunctions) && ok) {
    y0RW = JavaLangMath_minWithDouble_withDouble_(y0RW, y0RWfunctions);
    y1RW = JavaLangMath_maxWithDouble_withDouble_(y1RW, y1RWfunctions);
  }
  jdouble yGap = (y1RW - y0RW) * factor;
  jdouble x0RW2 = x0RW - xGap;
  jdouble x1RW2 = x1RW + xGap;
  jdouble y0RW2 = y0RW - yGap;
  jdouble y1RW2 = y1RW + yGap;
  OrgGeogebraCommonEuclidianEuclidianView_setAnimatedRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_withBoolean_(self, x0RW2, x1RW2, y0RW2, y1RW2, 10, storeUndo);
}

- (jint)getSelectedWidth {
  if (selectionRectangle_ == nil) {
    return [self getWidth];
  }
  return J2ObjCFpToInt([((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(selectionRectangle_)) getWidth]);
}

- (jint)getSelectedHeight {
  if (selectionRectangle_ == nil) {
    return [self getHeight];
  }
  return J2ObjCFpToInt([((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(selectionRectangle_)) getHeight]);
}

- (jint)getExportWidth {
  if (selectionRectangle_ != nil) {
    return J2ObjCFpToInt([selectionRectangle_ getWidth]);
  }
  @try {
    OrgGeogebraCommonKernelGeosGeoPoint *export1 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:OrgGeogebraCommonEuclidianEuclidianView_EXPORT1_], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    OrgGeogebraCommonKernelGeosGeoPoint *export2 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([kernel_ lookupLabelWithNSString:OrgGeogebraCommonEuclidianEuclidianView_EXPORT2_], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    IOSDoubleArray *xy1 = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *xy2 = [IOSDoubleArray newArrayWithLength:2];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(export1)) getInhomCoordsWithDoubleArray:xy1];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(export2)) getInhomCoordsWithDoubleArray:xy2];
    jdouble x1 = IOSDoubleArray_Get(xy1, 0);
    jdouble x2 = IOSDoubleArray_Get(xy2, 0);
    x1 = (x1 / [self getInvXscale]) + [self getxZero];
    x2 = (x2 / [self getInvXscale]) + [self getxZero];
    return J2ObjCFpToInt(JavaLangMath_absWithDouble_(x1 - x2)) + 2;
  }
  @catch (JavaLangException *e) {
    return [self getWidth];
  }
}

- (jint)getExportHeight {
  if (selectionRectangle_ != nil) {
    return J2ObjCFpToInt([selectionRectangle_ getHeight]);
  }
  @try {
    OrgGeogebraCommonKernelGeosGeoPoint *export1 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:OrgGeogebraCommonEuclidianEuclidianView_EXPORT1_], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    OrgGeogebraCommonKernelGeosGeoPoint *export2 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([kernel_ lookupLabelWithNSString:OrgGeogebraCommonEuclidianEuclidianView_EXPORT2_], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    IOSDoubleArray *xy1 = [IOSDoubleArray newArrayWithLength:2];
    IOSDoubleArray *xy2 = [IOSDoubleArray newArrayWithLength:2];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(export1)) getInhomCoordsWithDoubleArray:xy1];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(export2)) getInhomCoordsWithDoubleArray:xy2];
    jdouble y1 = IOSDoubleArray_Get(xy1, 1);
    jdouble y2 = IOSDoubleArray_Get(xy2, 1);
    y1 = [self getyZero] - (y1 / [self getInvYscale]);
    y2 = [self getyZero] - (y2 / [self getInvYscale]);
    return J2ObjCFpToInt(JavaLangMath_absWithDouble_(y1 - y2)) + 2;
  }
  @catch (JavaLangException *e) {
    return [self getHeight];
  }
}

- (void)clickedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                withBoolean:(jboolean)isControlDown {
  if (geo == nil) {
    return;
  }
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
  [tempArrayList_ addWithId:geo];
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) startCollectingMinorRepaints];
  jboolean changedKernel = [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_)) processModeWithOrgGeogebraCommonEuclidianHits:tempArrayList_ withBoolean:isControlDown withOrgGeogebraCommonUtilAsyncOperation:nil];
  if (changedKernel) {
    [((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) storeUndoInfo];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) stopCollectingMinorRepaints];
}

- (OrgGeogebraCommonEuclidianMyZoomer *)newZoomer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)zoomWithDouble:(jdouble)px
            withDouble:(jdouble)py
            withDouble:(jdouble)zoomFactor
               withInt:(jint)steps
           withBoolean:(jboolean)storeUndo {
  if (![self isZoomable]) {
    return;
  }
  if (zoomer_ == nil) {
    zoomer_ = [self newZoomer];
  }
  [((OrgGeogebraCommonEuclidianMyZoomer *) nil_chk(zoomer_)) init__WithDouble:px withDouble:py withDouble:zoomFactor withInt:steps withBoolean:storeUndo];
  [zoomer_ startAnimation];
}

- (void)zoomAxesRatioWithDouble:(jdouble)newRatio
                    withBoolean:(jboolean)storeUndo {
  if (![self isZoomable]) {
    return;
  }
  if ([self isLockedAxesRatio]) {
    return;
  }
  if (axesRatioZoomer_ == nil) {
    axesRatioZoomer_ = [self newZoomer];
  }
  [((OrgGeogebraCommonEuclidianMyZoomer *) nil_chk(axesRatioZoomer_)) init__WithDouble:newRatio withBoolean:storeUndo];
  [axesRatioZoomer_ startAnimation];
}

- (void)setStandardViewWithBoolean:(jboolean)storeUndo {
  if (![self isZoomable]) {
    return;
  }
  jdouble xzero, yzero;
  if ([self getWidth] < (OrgGeogebraCommonEuclidianEuclidianView_XZERO_STANDARD * 3)) {
    xzero = [self getWidth] / 3.0;
  }
  else {
    xzero = OrgGeogebraCommonEuclidianEuclidianView_XZERO_STANDARD;
  }
  if ([self getHeight] < (OrgGeogebraCommonEuclidianEuclidianView_YZERO_STANDARD * 1.6)) {
    yzero = [self getHeight] / 1.6;
  }
  else {
    yzero = OrgGeogebraCommonEuclidianEuclidianView_YZERO_STANDARD;
  }
  if ([self getScaleRatio] != 1.0) {
    if (axesRatioZoomer_ == nil) {
      axesRatioZoomer_ = [self newZoomer];
    }
    [((OrgGeogebraCommonEuclidianMyZoomer *) nil_chk(axesRatioZoomer_)) init__WithDouble:1 withBoolean:NO];
    [axesRatioZoomer_ setStandardViewAfterWithDouble:xzero withDouble:yzero];
    [axesRatioZoomer_ startAnimation];
  }
  else {
    [self setAnimatedCoordSystemWithDouble:xzero withDouble:yzero withInt:15 withBoolean:NO];
  }
  if (storeUndo) {
    [((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) storeUndoInfo];
  }
}

- (void)setAnimatedCoordSystemWithDouble:(jdouble)originX
                              withDouble:(jdouble)originY
                                 withInt:(jint)steps
                             withBoolean:(jboolean)storeUndo {
  [self setAnimatedCoordSystemWithDouble:originX withDouble:originY withDouble:0 withDouble:OrgGeogebraCommonEuclidianEuclidianView_SCALE_STANDARD withInt:steps withBoolean:storeUndo];
}

- (void)setAnimatedCoordSystemWithDouble:(jdouble)originX
                              withDouble:(jdouble)originY
                              withDouble:(jdouble)f
                              withDouble:(jdouble)newScale
                                 withInt:(jint)steps
                             withBoolean:(jboolean)storeUndo {
  jdouble ox = originX + ([self getXZero] - originX) * f;
  jdouble oy = originY + ([self getYZero] - originY) * f;
  if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([self getXscale], newScale)) {
    jdouble factor = newScale / [self getXscale];
    [self zoomWithDouble:(ox - ([self getxZero] * factor)) / (1.0 - factor) withDouble:(oy - ([self getyZero] * factor)) / (1.0 - factor) withDouble:factor withInt:steps withBoolean:storeUndo];
  }
  else {
    if (mover_ == nil) {
      mover_ = [self newZoomer];
    }
    [((OrgGeogebraCommonEuclidianMyZoomer *) nil_chk(mover_)) init__WithDouble:ox withDouble:oy withBoolean:storeUndo];
    [mover_ startAnimation];
  }
}

- (void)setAnimatedRealWorldCoordSystemWithDouble:(jdouble)xmin
                                       withDouble:(jdouble)xmax
                                       withDouble:(jdouble)ymin
                                       withDouble:(jdouble)ymax
                                          withInt:(jint)steps
                                      withBoolean:(jboolean)storeUndo {
  OrgGeogebraCommonEuclidianEuclidianView_setAnimatedRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_withBoolean_(self, xmin, xmax, ymin, ymax, steps, storeUndo);
}

- (void)mouseMovedOverWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianHits *geos = nil;
  if (geo != nil) {
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
    [tempArrayList_ addWithId:geo];
    geos = tempArrayList_;
  }
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) startCollectingMinorRepaints];
  jboolean repaintNeeded = [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) refreshHighlightingWithOrgGeogebraCommonEuclidianHits:geos withBoolean:NO];
  if (repaintNeeded) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) stopCollectingMinorRepaints];
}

- (void)highlightWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) highlightWithOrgGeogebraCommonKernelGeosGeoElement:geo]) [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)highlightWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  if ([((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) highlightWithJavaUtilArrayList:geos]) [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)mouseMovedOverListWithJavaUtilArrayList:(JavaUtilArrayList *)geoList {
  OrgGeogebraCommonEuclidianHits *geos = nil;
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
  [tempArrayList_ addAllWithJavaUtilCollection:geoList];
  geos = tempArrayList_;
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) startCollectingMinorRepaints];
  jboolean repaintNeeded = [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) refreshHighlightingWithOrgGeogebraCommonEuclidianHits:geos withBoolean:NO];
  if (repaintNeeded) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) stopCollectingMinorRepaints];
}

- (jboolean)setAnimationButtonsHighlightedWithBoolean:(jboolean)flag {
  if (![self drawPlayButtonInThisView]) {
    return NO;
  }
  if (flag == highlightAnimationButtons_) {
    return NO;
  }
  highlightAnimationButtons_ = flag;
  return YES;
}

- (jboolean)drawPlayButtonInThisView {
  id<OrgGeogebraCommonMainGuiManagerInterface> gui = [((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) getGuiManager];
  if (gui == nil) {
    return YES;
  }
  id<OrgGeogebraCommonEuclidianGetViewId> evp = [((OrgGeogebraCommonGuiLayoutDockManager *) nil_chk([((OrgGeogebraCommonGuiLayout *) nil_chk([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk(gui)) getLayout])) getDockManager])) getFocusedEuclidianPanel];
  if (evp == nil) {
    return OrgGeogebraCommonEuclidianEuclidianView_isPrimaryEV(self);
  }
  return [self getViewID] == [((id<OrgGeogebraCommonEuclidianGetViewId>) nil_chk(evp)) getViewId];
}

- (jboolean)isPrimaryEV {
  return OrgGeogebraCommonEuclidianEuclidianView_isPrimaryEV(self);
}

- (OrgGeogebraCommonAwtGColor *)getAxesColor {
  return axesColor_;
}

- (OrgGeogebraCommonAwtGColor *)getGridColor {
  return gridColor_;
}

- (void)addWithOrgGeogebraCommonJavaxSwingGBox:(OrgGeogebraCommonJavaxSwingGBox *)box {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removeWithOrgGeogebraCommonJavaxSwingGBox:(OrgGeogebraCommonJavaxSwingGBox *)box {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initViewWithBoolean:(jboolean)repaint {
  [self setGridLineStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  [self setAxesLineStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_LINE_TYPE_ARROW];
  [self setAxesColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_()];
  [self setGridColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_LIGHT_GRAY_()];
  [self setBackgroundWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_WHITE_()];
  pointCapturingMode_ = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC;
  *IOSBooleanArray_GetRef(nil_chk(showAxesNumbers_), 0) = YES;
  *IOSBooleanArray_GetRef(showAxesNumbers_, 1) = YES;
  (void) IOSObjectArray_Set(nil_chk(axesLabels_), 0, nil);
  (void) IOSObjectArray_Set(axesLabels_, 1, nil);
  (void) IOSObjectArray_Set(nil_chk(axesUnitLabels_), 0, nil);
  (void) IOSObjectArray_Set(axesUnitLabels_, 1, nil);
  *IOSBooleanArray_GetRef(nil_chk(piAxisUnit_), 0) = NO;
  *IOSBooleanArray_GetRef(piAxisUnit_, 1) = NO;
  *IOSIntArray_GetRef(nil_chk(axesTickStyles_), 0) = OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR;
  *IOSIntArray_GetRef(axesTickStyles_, 1) = OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR;
  *IOSBooleanArray_GetRef(nil_chk(automaticAxesNumberingDistances_), 0) = YES;
  *IOSBooleanArray_GetRef(automaticAxesNumberingDistances_, 1) = YES;
  automaticGridDistance_ = YES;
  OrgGeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(self, repaint);
}

- (void)setShowAxisWithBoolean:(jboolean)show {
  [self setShowAxisWithInt:0 withBoolean:show withBoolean:NO];
  [self setShowAxisWithInt:1 withBoolean:show withBoolean:YES];
}

- (void)setTransparentCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setEraserCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgGeogebraCommonAwtGGraphics2D>)getGraphicsForPen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasStyleBar {
  return styleBar_ != nil;
}

+ (jboolean)isPenModeWithInt:(jint)mode {
  return OrgGeogebraCommonEuclidianEuclidianView_isPenModeWithInt_(mode);
}

- (void)setOptionPanelWithOrgGeogebraCommonGuiDialogOptionsOptionsEuclidian:(OrgGeogebraCommonGuiDialogOptionsOptionsEuclidian *)optionPanel {
  self->optionPanel_ = optionPanel;
}

- (id<OrgGeogebraCommonAwtGRectangle>)getDeletionRectangle {
  return deletionRectangle_;
}

- (void)setDeletionRectangleWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)deletionRectangle {
  self->deletionRectangle_ = deletionRectangle;
}

+ (jint)getBoldAxesWithBoolean:(jboolean)bold
                       withInt:(jint)axesLineStyle {
  return OrgGeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(bold, axesLineStyle);
}

- (jboolean)areAxesBold {
  return (axesLineType_ & OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD) != 0;
}

+ (jdouble)estimateNumberHeightWithOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontAxes2 {
  return OrgGeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithOrgGeogebraCommonAwtGFont_(fontAxes2);
}

- (jdouble)estimateNumberWidthWithDouble:(jdouble)d
           withOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontAxes2 {
  return OrgGeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withOrgGeogebraCommonAwtGFont_(self, d, fontAxes2);
}

+ (jdouble)estimateTextWidthWithNSString:(NSString *)s
           withOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)fontAxes2 {
  return OrgGeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withOrgGeogebraCommonAwtGFont_(s, fontAxes2);
}

- (jint)getSliderOffsetY {
  return 50;
}

- (jdouble)getMinSamplePoints {
  return OrgGeogebraCommonEuclidianEuclidianView_MIN_SAMPLE_POINTS;
}

- (jdouble)getMaxBendOfScreen {
  return OrgGeogebraCommonEuclidianEuclidianView_MAX_BEND_OFF_SCREEN_;
}

- (jdouble)getMaxBend {
  return OrgGeogebraCommonEuclidianEuclidianView_MAX_BEND_;
}

- (jint)getMaxDefinedBisections {
  return OrgGeogebraCommonEuclidianEuclidianView_MAX_DEFINED_BISECTIONS;
}

- (jdouble)getMinPixelDistance {
  return OrgGeogebraCommonEuclidianEuclidianView_MIN_PIXEL_DISTANCE;
}

- (jint)getMaxZeroCount {
  return OrgGeogebraCommonEuclidianEuclidianView_MAX_ZERO_COUNT;
}

- (jdouble)getMaxPixelDistance {
  return OrgGeogebraCommonEuclidianEuclidianView_MAX_PIXEL_DISTANCE;
}

- (jint)getMaxProblemBisections {
  return OrgGeogebraCommonEuclidianEuclidianView_MAX_PROBLEM_BISECTIONS;
}

- (jint)getAbsoluteTop {
  return -1;
}

- (jint)getAbsoluteLeft {
  return -1;
}

- (id<OrgGeogebraCommonEuclidianEuclidianStyleBar>)getStyleBar {
  return OrgGeogebraCommonEuclidianEuclidianView_getStyleBar(self);
}

- (id<OrgGeogebraCommonEuclidianEuclidianStyleBar>)newEuclidianStyleBar {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getLastRepaintTime {
  return 0;
}

- (void)setLabels {
  if (self->styleBar_ != nil) {
    [styleBar_ setLabels];
  }
}

- (jint)getDimension {
  return 2;
}

- (void)exportPaintPreWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d
                                               withDouble:(jdouble)scale_
                                              withBoolean:(jboolean)transparency {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)exportPaintWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d
                                            withDouble:(jdouble)scale_
                                           withBoolean:(jboolean)transparency {
  ((OrgGeogebraCommonMainApp *) nil_chk([self getApplication]))->exporting_ = YES;
  [self exportPaintPreWithOrgGeogebraCommonAwtGGraphics2D:g2d withDouble:scale_ withBoolean:transparency];
  [self drawObjectsWithOrgGeogebraCommonAwtGGraphics2D:g2d];
  ((OrgGeogebraCommonMainApp *) nil_chk([self getApplication]))->exporting_ = NO;
}

- (void)exportPaintPreWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d
                                               withDouble:(jdouble)scale_ {
  [self exportPaintPreWithOrgGeogebraCommonAwtGGraphics2D:g2d withDouble:scale_ withBoolean:NO];
}

- (void)centerViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonKernelMatrixCoords *p = [self getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3]];
  jdouble px = (OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, [self getWidth]) - OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, 0)) / 2;
  jdouble py = (-OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, [self getHeight]) + OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, 0)) / 2;
  OrgGeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX] - px, [p getX] + px, [p getY] - py, [p getY] + py);
}

+ (NSString *)getDraggedLabelsWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  return OrgGeogebraCommonEuclidianEuclidianView_getDraggedLabelsWithJavaUtilArrayList_(list);
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonEuclidianEuclidianView class]) {
    OrgGeogebraCommonEuclidianEuclidianView_colZoomRectangle_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:200 withInt:200 withInt:230];
    OrgGeogebraCommonEuclidianEuclidianView_colZoomRectangleFill_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:200 withInt:200 withInt:230 withInt:50];
    OrgGeogebraCommonEuclidianEuclidianView_colDeletionSquare_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:128 withInt:0 withInt:0];
    OrgGeogebraCommonEuclidianEuclidianView_strokeDeletionSquare_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:1.0f];
    OrgGeogebraCommonEuclidianEuclidianView_defAxesStroke_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:1.0f withInt:OrgGeogebraCommonAwtGBasicStroke_CAP_BUTT withInt:OrgGeogebraCommonAwtGBasicStroke_JOIN_MITER];
    OrgGeogebraCommonEuclidianEuclidianView_boldAxesStroke_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:2.0f withInt:OrgGeogebraCommonAwtGBasicStroke_CAP_BUTT withInt:OrgGeogebraCommonAwtGBasicStroke_JOIN_MITER];
    OrgGeogebraCommonEuclidianEuclidianView_MAX_BEND_ = JavaLangMath_tanWithDouble_(OrgGeogebraCommonEuclidianEuclidianView_MAX_ANGLE * OrgGeogebraCommonKernelKernel_PI_180);
    OrgGeogebraCommonEuclidianEuclidianView_MAX_BEND_OFF_SCREEN_ = JavaLangMath_tanWithDouble_(OrgGeogebraCommonEuclidianEuclidianView_MAX_ANGLE_OFF_SCREEN * OrgGeogebraCommonKernelKernel_PI_180);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonEuclidianEuclidianView)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLineTypes", NULL, "[Ljava.lang.Integer;", 0x19, NULL, NULL },
    { "getPointStyles", NULL, "[Ljava.lang.Integer;", 0x19, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianController:withInt:withOrgGeogebraCommonMainSettingsEuclidianSettings:", "EuclidianView", NULL, 0x1, NULL, NULL },
    { "newEuclidianViewCompanion", NULL, "Lorg.geogebra.common.euclidian.EuclidianViewCompanion;", 0x4, NULL, NULL },
    { "getCompanion", NULL, "Lorg.geogebra.common.euclidian.EuclidianViewCompanion;", 0x1, NULL, NULL },
    { "initAxesValues", NULL, "V", 0x4, NULL, NULL },
    { "setAxesColorWithOrgGeogebraCommonAwtGColor:", "setAxesColor", "V", 0x1, NULL, NULL },
    { "setStandardCoordSystem", NULL, "V", 0x1, NULL, NULL },
    { "setStandardCoordSystemWithBoolean:", "setStandardCoordSystem", "V", 0x2, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "getPointCapturingMode", NULL, "I", 0x1, NULL, NULL },
    { "setPointCapturingWithInt:", "setPointCapturing", "V", 0x1, NULL, NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "setModeWithInt:withOrgGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "clearRectangleWithInt:", "clearRectangle", "Z", 0x1a, NULL, NULL },
    { "getXminObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "updateBoundObjects", NULL, "V", 0x1, NULL, NULL },
    { "isLockedAxesRatio", NULL, "Z", 0x1, NULL, NULL },
    { "setLockedAxesRatioWithJavaLangDouble:", "setLockedAxesRatio", "V", 0x1, NULL, NULL },
    { "updateBoundsWithBoolean:withBoolean:", "updateBounds", "V", 0x1, NULL, NULL },
    { "isZoomable", NULL, "Z", 0x1, NULL, NULL },
    { "setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setXminObject", "V", 0x1, NULL, NULL },
    { "getXmaxObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setXmaxObject", "V", 0x1, NULL, NULL },
    { "getYminObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setYminObject", "V", 0x1, NULL, NULL },
    { "setSizeListeners", NULL, "V", 0x2, NULL, NULL },
    { "toScreenCoordXWithDouble:", "toScreenCoordX", "I", 0x11, NULL, NULL },
    { "toScreenCoordYWithDouble:", "toScreenCoordY", "I", 0x11, NULL, NULL },
    { "toScreenCoordXdWithDouble:", "toScreenCoordXd", "D", 0x11, NULL, NULL },
    { "toScreenCoordYdWithDouble:", "toScreenCoordYd", "D", 0x11, NULL, NULL },
    { "toClippedScreenCoordXWithDouble:", "toClippedScreenCoordX", "I", 0x11, NULL, NULL },
    { "rememberOrigins", NULL, "V", 0x1, NULL, NULL },
    { "toClippedScreenCoordYWithDouble:", "toClippedScreenCoordY", "I", 0x11, NULL, NULL },
    { "toScreenCoordsWithDoubleArray:", "toScreenCoords", "Z", 0x11, NULL, NULL },
    { "isOnScreenWithDoubleArray:", "isOnScreen", "Z", 0x11, NULL, NULL },
    { "isOnViewWithDoubleArray:", "isOnView", "Z", 0x1, NULL, NULL },
    { "getOnScreenDiffWithDoubleArray:withDoubleArray:", "getOnScreenDiff", "[D", 0x1, NULL, NULL },
    { "isSegmentOffViewWithDoubleArray:withDoubleArray:", "isSegmentOffView", "Z", 0x1, NULL, NULL },
    { "toRealWorldCoordXWithDouble:", "toRealWorldCoordX", "D", 0x11, NULL, NULL },
    { "toRealWorldCoordYWithDouble:", "toRealWorldCoordY", "D", 0x11, NULL, NULL },
    { "setCoordSystemWithDouble:withDouble:withDouble:withDouble:", "setCoordSystem", "V", 0x11, NULL, NULL },
    { "translateCoordSystemInPixelsWithInt:withInt:withInt:withInt:", "translateCoordSystemInPixels", "V", 0x1, NULL, NULL },
    { "setCoordSystemFromMouseMoveWithInt:withInt:withInt:", "setCoordSystemFromMouseMove", "V", 0x1, NULL, NULL },
    { "pageUpDownTranslateCoordSystemWithInt:", "pageUpDownTranslateCoordSystem", "V", 0x1, NULL, NULL },
    { "setRealWorldCoordSystemWithDouble:withDouble:withDouble:withDouble:", "setRealWorldCoordSystem", "V", 0x11, NULL, NULL },
    { "setCoordSystemWithDouble:withDouble:withDouble:withDouble:withBoolean:", "setCoordSystem", "V", 0x11, NULL, NULL },
    { "updateBackgroundIfNecessary", NULL, "V", 0x4, NULL, NULL },
    { "getYmaxObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setAntialiasingWithBoolean:", "setAntialiasing", "V", 0x1, NULL, NULL },
    { "getAntialiasing", NULL, "Z", 0x1, NULL, NULL },
    { "setEuclidianViewNoWithInt:", "setEuclidianViewNo", "V", 0x1, NULL, NULL },
    { "getEuclidianViewNo", NULL, "I", 0x1, NULL, NULL },
    { "setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setYmaxObject", "V", 0x1, NULL, NULL },
    { "setXscaleWithDouble:", "setXscale", "V", 0x2, NULL, NULL },
    { "setYscaleWithDouble:", "setYscale", "V", 0x2, NULL, NULL },
    { "setFontSizeWithInt:", "setFontSize", "V", 0x4, NULL, NULL },
    { "getxZero", NULL, "D", 0x1, NULL, NULL },
    { "getyZero", NULL, "D", 0x1, NULL, NULL },
    { "getXZero", NULL, "D", 0x1, NULL, NULL },
    { "getYZero", NULL, "D", 0x1, NULL, NULL },
    { "getXYscaleRatioString", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getXscale", NULL, "D", 0x1, NULL, NULL },
    { "getYscale", NULL, "D", 0x1, NULL, NULL },
    { "getInvXscale", NULL, "D", 0x1, NULL, NULL },
    { "getInvYscale", NULL, "D", 0x1, NULL, NULL },
    { "getViewWidth", NULL, "I", 0x1, NULL, NULL },
    { "getViewHeight", NULL, "I", 0x1, NULL, NULL },
    { "getScaleRatio", NULL, "D", 0x1, NULL, NULL },
    { "getXmax", NULL, "D", 0x1, NULL, NULL },
    { "getXmin", NULL, "D", 0x1, NULL, NULL },
    { "getYmax", NULL, "D", 0x1, NULL, NULL },
    { "getYmin", NULL, "D", 0x1, NULL, NULL },
    { "getGridType", NULL, "I", 0x11, NULL, NULL },
    { "setGridTypeWithInt:", "setGridType", "V", 0x1, NULL, NULL },
    { "setXYMinMaxWithDoubleArray2:", "setXYMinMax", "V", 0x1, NULL, NULL },
    { "setRealWorldBounds", NULL, "V", 0x4, NULL, NULL },
    { "setXYMinMaxForSetCoordSystem", NULL, "V", 0x4, NULL, NULL },
    { "zoomAroundCenterWithDouble:", "zoomAroundCenter", "V", 0x11, NULL, NULL },
    { "setCoordTransformIfNeeded", NULL, "V", 0x2, NULL, NULL },
    { "updateAllDrawablesWithBoolean:", "updateAllDrawables", "V", 0x11, NULL, NULL },
    { "startBatchUpdate", NULL, "V", 0x11, NULL, NULL },
    { "endBatchUpdate", NULL, "V", 0x11, NULL, NULL },
    { "drawListAsComboBoxWithOrgGeogebraCommonKernelGeosGeoList:withBoolean:", "drawListAsComboBox", "V", 0x1, NULL, NULL },
    { "calcPrintingScale", NULL, "V", 0x1, NULL, NULL },
    { "setAxesIntervalsWithDouble:withInt:", "setAxesIntervals", "V", 0x4, NULL, NULL },
    { "getFontSize", NULL, "I", 0x1, NULL, NULL },
    { "renameWithOrgGeogebraCommonKernelGeosGeoElement:", "rename", "V", 0x1, NULL, NULL },
    { "updateWithOrgGeogebraCommonKernelGeosGeoElement:", "update", "V", 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x1, NULL, NULL },
    { "drawableNeededWithOrgGeogebraCommonKernelGeosGeoElement:", "drawableNeeded", "Z", 0x2, NULL, NULL },
    { "isPlotPanel", NULL, "Z", 0x1, NULL, NULL },
    { "removeWithOrgGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "getHits", NULL, "Lorg.geogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "textfieldClickedWithInt:withInt:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "textfieldClicked", "Z", 0x1, NULL, NULL },
    { "setHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setHits", "V", 0x1, NULL, NULL },
    { "setHitsWithOrgGeogebraCommonAwtGPoint:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setHits", "V", 0x1, NULL, NULL },
    { "setHitsWithOrgGeogebraCommonAwtGPoint:withInt:", "setHits", "V", 0x1, NULL, NULL },
    { "getHitButtonWithOrgGeogebraCommonAwtGPoint:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "getHitButton", "Lorg.geogebra.common.euclidian.MyButton;", 0x1, NULL, NULL },
    { "getLabelHitWithOrgGeogebraCommonAwtGPoint:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "getLabelHit", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getDrawableWithOrgGeogebraCommonKernelGeosGeoElement:", "getDrawable", "Lorg.geogebra.common.euclidian.DrawableND;", 0x14, NULL, NULL },
    { "getDrawableNDWithOrgGeogebraCommonKernelGeosGeoElement:", "getDrawableND", "Lorg.geogebra.common.euclidian.DrawableND;", 0x1, NULL, NULL },
    { "addToDrawableListsWithOrgGeogebraCommonEuclidianDrawable:", "addToDrawableLists", "V", 0x4, NULL, NULL },
    { "isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:", "isVisibleInThisView", "Z", 0x1, NULL, NULL },
    { "createDrawableNDWithOrgGeogebraCommonKernelGeosGeoElement:", "createDrawableND", "Lorg.geogebra.common.euclidian.DrawableND;", 0x11, NULL, NULL },
    { "createDrawableWithOrgGeogebraCommonKernelGeosGeoElement:", "createDrawable", "Lorg.geogebra.common.euclidian.DrawableND;", 0x4, NULL, NULL },
    { "newDrawableWithOrgGeogebraCommonKernelGeosGeoElement:", "newDrawable", "Lorg.geogebra.common.euclidian.DrawableND;", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "resetMode", NULL, "V", 0x1, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "repaintView", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "updateVisualStyle", "V", 0x1, NULL, NULL },
    { "getDrawableForWithOrgGeogebraCommonKernelGeosGeoElement:", "getDrawableFor", "Lorg.geogebra.common.euclidian.DrawableND;", 0x11, NULL, NULL },
    { "updateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:", "updateAuxiliaryObject", "V", 0x11, NULL, NULL },
    { "updateDrawableFontSize", NULL, "V", 0x4, NULL, NULL },
    { "getFontPoint", NULL, "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "setFontPointWithOrgGeogebraCommonAwtGFont:", "setFontPoint", "V", 0x2, NULL, NULL },
    { "getFontLine", NULL, "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontVector", NULL, "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontConic", NULL, "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontCoords", NULL, "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "setFontCoordsWithOrgGeogebraCommonAwtGFont:", "setFontCoords", "V", 0x2, NULL, NULL },
    { "getFontAxes", NULL, "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontAngle", NULL, "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getStickyPointList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setBooleanSizeWithInt:", "setBooleanSize", "V", 0x1, NULL, NULL },
    { "getBooleanSize", NULL, "I", 0x11, NULL, NULL },
    { "setAllowToolTipsWithInt:", "setAllowToolTips", "V", 0x1, NULL, NULL },
    { "getAllowToolTips", NULL, "I", 0x11, NULL, NULL },
    { "getMatrix", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getInverseMatrix", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTranslatedFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isDefault2D", NULL, "Z", 0x1, NULL, NULL },
    { "isEuclidianView3D", NULL, "Z", 0x1, NULL, NULL },
    { "getViewID", NULL, "I", 0x1, NULL, NULL },
    { "changeLayerWithOrgGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "changeLayer", "V", 0x1, NULL, NULL },
    { "getPlaneContaining", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPlaneND;", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoDirectionND;", 0x1, NULL, NULL },
    { "getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:", "getCoordsForView", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isMoveableWithOrgGeogebraCommonKernelGeosGeoElement:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "replaceBoundObjectWithOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:", "replaceBoundObject", "V", 0x1, NULL, NULL },
    { "getRightAngleStyle", NULL, "I", 0x11, NULL, NULL },
    { "isAutomaticGridDistance", NULL, "Z", 0x1, NULL, NULL },
    { "getGridDistances", NULL, "[D", 0x1, NULL, NULL },
    { "setGridDistancesWithDoubleArray:", "setGridDistances", "V", 0x1, NULL, NULL },
    { "getGridLineStyle", NULL, "I", 0x1, NULL, NULL },
    { "setAutomaticGridDistanceWithBoolean:", "setAutomaticGridDistance", "V", 0x1, NULL, NULL },
    { "getAxesLineStyle", NULL, "I", 0x1, NULL, NULL },
    { "setAxesLineStyleWithInt:", "setAxesLineStyle", "V", 0x1, NULL, NULL },
    { "getCoordTransform", NULL, "Lorg.geogebra.common.awt.GAffineTransform;", 0x1, NULL, NULL },
    { "setCoordTransformWithOrgGeogebraCommonAwtGAffineTransform:", "setCoordTransform", "V", 0x4, NULL, NULL },
    { "updateBackground", NULL, "V", 0x11, NULL, NULL },
    { "getTempGraphics2DWithOrgGeogebraCommonAwtGFont:", "getTempGraphics2D", "Lorg.geogebra.common.awt.GGraphics2D;", 0x401, NULL, NULL },
    { "getFont", NULL, "Lorg.geogebra.common.awt.GFont;", 0x401, NULL, NULL },
    { "setHeightWithInt:", "setHeight", "V", 0x404, NULL, NULL },
    { "setWidthWithInt:", "setWidth", "V", 0x404, NULL, NULL },
    { "initCursor", NULL, "V", 0x404, NULL, NULL },
    { "setStyleBarModeWithInt:", "setStyleBarMode", "V", 0x404, NULL, NULL },
    { "usesSelectionAsInputWithInt:", "usesSelectionAsInput", "Z", 0x19, NULL, NULL },
    { "usesSelectionRectangleAsInputWithInt:", "usesSelectionRectangleAsInput", "Z", 0x19, NULL, NULL },
    { "setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:", "setSelectionRectangle", "V", 0x1, NULL, NULL },
    { "getAxesCross", NULL, "[D", 0x1, NULL, NULL },
    { "setAxesCrossWithDoubleArray:", "setAxesCross", "V", 0x1, NULL, NULL },
    { "setAxisCrossWithInt:withDouble:", "setAxisCross", "V", 0x1, NULL, NULL },
    { "getPositiveAxes", NULL, "[Z", 0x1, NULL, NULL },
    { "setPositiveAxesWithBooleanArray:", "setPositiveAxes", "V", 0x1, NULL, NULL },
    { "setPositiveAxisWithInt:withBoolean:", "setPositiveAxis", "V", 0x1, NULL, NULL },
    { "getDrawBorderAxes", NULL, "[Z", 0x1, NULL, NULL },
    { "setDrawBorderAxesWithBooleanArray:", "setDrawBorderAxes", "V", 0x1, NULL, NULL },
    { "isAxesCornerCoordsVisible", NULL, "Z", 0x1, NULL, NULL },
    { "setAxesCornerCoordsVisibleWithBoolean:", "setAxesCornerCoordsVisible", "V", 0x1, NULL, NULL },
    { "getPrintingScale", NULL, "D", 0x11, NULL, NULL },
    { "setPrintingScaleWithDouble:", "setPrintingScale", "V", 0x11, NULL, NULL },
    { "getAxesLabelsWithBoolean:", "getAxesLabels", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "setAxesLabelsWithNSStringArray:", "setAxesLabels", "V", 0x1, NULL, NULL },
    { "setAxisLabelWithInt:withNSString:", "setAxisLabel", "V", 0x1, NULL, NULL },
    { "getScaleWithInt:", "getScale", "D", 0x1, NULL, NULL },
    { "setAutomaticAxesNumberingDistanceWithBoolean:withInt:", "setAutomaticAxesNumberingDistance", "V", 0x1, NULL, NULL },
    { "isAutomaticAxesNumberingDistance", NULL, "[Z", 0x1, NULL, NULL },
    { "getAxesNumberingDistances", NULL, "[D", 0x1, NULL, NULL },
    { "setAxesNumberingDistanceWithDouble:withInt:", "setAxesNumberingDistance", "V", 0x1, NULL, NULL },
    { "getGridIsBold", NULL, "Z", 0x1, NULL, NULL },
    { "getShowAxesNumbers", NULL, "[Z", 0x1, NULL, NULL },
    { "setShowAxesNumbersWithBooleanArray:", "setShowAxesNumbers", "V", 0x1, NULL, NULL },
    { "setShowAxisNumbersWithInt:withBoolean:", "setShowAxisNumbers", "V", 0x1, NULL, NULL },
    { "getAxesUnitLabels", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "setAxesUnitLabelsWithNSStringArray:", "setAxesUnitLabels", "V", 0x1, NULL, NULL },
    { "getAxesTickStyles", NULL, "[I", 0x1, NULL, NULL },
    { "setAxisTickStyleWithInt:withInt:", "setAxisTickStyle", "V", 0x1, NULL, NULL },
    { "setAxesTickStylesWithIntArray:", "setAxesTickStyles", "V", 0x1, NULL, NULL },
    { "setShowMouseCoordsWithBoolean:", "setShowMouseCoords", "V", 0x1, NULL, NULL },
    { "getAllowShowMouseCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowShowMouseCoordsWithBoolean:", "setAllowShowMouseCoords", "V", 0x1, NULL, NULL },
    { "getShowMouseCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setShowAxesRatioWithBoolean:", "setShowAxesRatio", "V", 0x1, NULL, NULL },
    { "getPreviewDrawable", NULL, "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "getGridDistancesWithInt:", "getGridDistances", "D", 0x1, NULL, NULL },
    { "getShowGrid", NULL, "Z", 0x1, NULL, NULL },
    { "isGridOrAxesShown", NULL, "Z", 0x1, NULL, NULL },
    { "getShowAxisWithInt:", "getShowAxis", "Z", 0x1, NULL, NULL },
    { "getShowXaxis", NULL, "Z", 0x1, NULL, NULL },
    { "getShowYaxis", NULL, "Z", 0x1, NULL, NULL },
    { "createPreviewLineWithJavaUtilArrayList:", "createPreviewLine", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPerpendicularBisectorWithJavaUtilArrayList:", "createPreviewPerpendicularBisector", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewAngleBisectorWithJavaUtilArrayList:", "createPreviewAngleBisector", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewSegmentWithJavaUtilArrayList:", "createPreviewSegment", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewRayWithJavaUtilArrayList:", "createPreviewRay", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewVectorWithJavaUtilArrayList:", "createPreviewVector", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewConicWithInt:withJavaUtilArrayList:", "createPreviewConic", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewParabolaWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewParabola", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPolygonWithJavaUtilArrayList:", "createPreviewPolygon", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewAngleWithJavaUtilArrayList:", "createPreviewAngle", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPolyLineWithJavaUtilArrayList:", "createPreviewPolyLine", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "updatePreviewable", NULL, "V", 0x1, NULL, NULL },
    { "updatePreviewableForProcessMode", NULL, "V", 0x1, NULL, NULL },
    { "mouseEntered", NULL, "V", 0x11, NULL, NULL },
    { "mouseExited", NULL, "V", 0x11, NULL, NULL },
    { "hasMouse", NULL, "Z", 0x1, NULL, NULL },
    { "hasMouse2D", NULL, "Z", 0x11, NULL, NULL },
    { "createPreviewParallelLineWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewParallelLine", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPerpendicularLineWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewPerpendicularLine", "Lorg.geogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "setApplicationWithOrgGeogebraCommonMainApp:", "setApplication", "V", 0x4, NULL, NULL },
    { "getApplication", NULL, "Lorg.geogebra.common.main.App;", 0x1, NULL, NULL },
    { "updateFonts", NULL, "V", 0x1, NULL, NULL },
    { "updateSize", NULL, "V", 0x1, NULL, NULL },
    { "updateSizeKeepDrawables", NULL, "V", 0x404, NULL, NULL },
    { "requestFocusInWindow", NULL, "Z", 0x401, NULL, NULL },
    { "drawGeometricObjectsWithOrgGeogebraCommonAwtGGraphics2D:", "drawGeometricObjects", "V", 0x4, NULL, NULL },
    { "drawObjectsWithOrgGeogebraCommonAwtGGraphics2D:", "drawObjects", "V", 0x4, NULL, NULL },
    { "clearBackgroundWithOrgGeogebraCommonAwtGGraphics2D:", "clearBackground", "V", 0x14, NULL, NULL },
    { "drawBackgroundWithImagesWithOrgGeogebraCommonAwtGGraphics2D:withBoolean:", "drawBackgroundWithImages", "V", 0x4, NULL, NULL },
    { "drawAxesRatioWithOrgGeogebraCommonAwtGGraphics2D:", "drawAxesRatio", "V", 0x14, NULL, NULL },
    { "paintBackgroundWithOrgGeogebraCommonAwtGGraphics2D:", "paintBackground", "V", 0x401, NULL, NULL },
    { "setReInitingWithBoolean:", "setReIniting", "V", 0x1, NULL, NULL },
    { "paintWithOrgGeogebraCommonAwtGGraphics2D:", "paint", "V", 0x1, NULL, NULL },
    { "paintTheBackgroundWithOrgGeogebraCommonAwtGGraphics2D:", "paintTheBackground", "V", 0x1, NULL, NULL },
    { "updateBackgroundImage", NULL, "V", 0x11, NULL, NULL },
    { "drawZoomRectangleWithOrgGeogebraCommonAwtGGraphics2D:", "drawZoomRectangle", "V", 0x4, NULL, NULL },
    { "drawRectWithOrgGeogebraCommonAwtGGraphics2D:withOrgGeogebraCommonAwtGColor:withOrgGeogebraCommonAwtGBasicStroke:withOrgGeogebraCommonAwtGRectangle:", "drawRect", "V", 0x4, NULL, NULL },
    { "drawMouseCoordsWithOrgGeogebraCommonAwtGGraphics2D:", "drawMouseCoords", "V", 0x14, NULL, NULL },
    { "drawBackgroundWithImagesWithOrgGeogebraCommonAwtGGraphics2D:", "drawBackgroundWithImages", "V", 0x4, NULL, NULL },
    { "drawBackgroundWithOrgGeogebraCommonAwtGGraphics2D:withBoolean:", "drawBackground", "V", 0x14, NULL, NULL },
    { "showResetIcon", NULL, "Z", 0x0, NULL, NULL },
    { "drawGridWithOrgGeogebraCommonAwtGGraphics2D:", "drawGrid", "V", 0x14, NULL, NULL },
    { "getXAxisCrossingPixel", NULL, "D", 0x2, NULL, NULL },
    { "getYAxisCrossingPixel", NULL, "D", 0x2, NULL, NULL },
    { "drawAxesWithOrgGeogebraCommonAwtGGraphics2D:", "drawAxes", "V", 0x4, NULL, NULL },
    { "xAxisOnscreen", NULL, "Z", 0x2, NULL, NULL },
    { "yAxisOnscreen", NULL, "Z", 0x2, NULL, NULL },
    { "getYOffsetForXAxisWithInt:", "getYOffsetForXAxis", "I", 0x4, NULL, NULL },
    { "drawLineAvoidingLabelsHWithOrgGeogebraCommonAwtGGraphics2D:withDouble:withDouble:withDouble:withDouble:withDouble:", "drawLineAvoidingLabelsH", "V", 0x2, NULL, NULL },
    { "drawLineAvoidingLabelsVWithOrgGeogebraCommonAwtGGraphics2D:withDouble:withDouble:withDouble:withDouble:withDouble:", "drawLineAvoidingLabelsV", "V", 0x2, NULL, NULL },
    { "drawStringWithOrgGeogebraCommonAwtGGraphics2D:withNSString:withDouble:withDouble:", "drawString", "V", 0x2, NULL, NULL },
    { "drawResetIconWithOrgGeogebraCommonAwtGGraphics2D:", "drawResetIcon", "V", 0x404, NULL, NULL },
    { "drawActionObjectsWithOrgGeogebraCommonAwtGGraphics2D:", "drawActionObjects", "V", 0x401, NULL, NULL },
    { "setDefRenderingHintsWithOrgGeogebraCommonAwtGGraphics2D:", "setDefRenderingHints", "V", 0x1, NULL, NULL },
    { "setAntialiasingWithOrgGeogebraCommonAwtGGraphics2D:", "setAntialiasing", "V", 0x404, NULL, NULL },
    { "drawAnimationButtonsWithOrgGeogebraCommonAwtGGraphics2D:", "drawAnimationButtons", "V", 0x4, NULL, NULL },
    { "setBackgroundWithOrgGeogebraCommonAwtGColor:", "setBackground", "V", 0x401, NULL, NULL },
    { "synchronizeMenuBarAndEuclidianStyleBarWithOrgGeogebraCommonMainSettingsEuclidianSettings:", "synchronizeMenuBarAndEuclidianStyleBar", "V", 0x4, NULL, NULL },
    { "setPreferredSizeWithOrgGeogebraCommonAwtGDimension:", "setPreferredSize", "V", 0x401, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "Z", 0x1, NULL, NULL },
    { "setGridIsBoldWithBoolean:", "setGridIsBold", "V", 0x1, NULL, NULL },
    { "setGridColorWithOrgGeogebraCommonAwtGColor:", "setGridColor", "V", 0x1, NULL, NULL },
    { "setGridLineStyleWithInt:", "setGridLineStyle", "V", 0x1, NULL, NULL },
    { "settingsChangedWithOrgGeogebraCommonMainSettingsAbstractSettings:", "settingsChanged", "V", 0x1, NULL, NULL },
    { "getSettings", NULL, "Lorg.geogebra.common.main.settings.EuclidianSettings;", 0x1, NULL, NULL },
    { "setHitsWithOrgGeogebraCommonAwtGRectangle:", "setHits", "V", 0x11, NULL, NULL },
    { "updateCursorWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "updateCursor", "V", 0x1, NULL, NULL },
    { "setIntersectionHitsWithOrgGeogebraCommonAwtGRectangle:", "setIntersectionHits", "V", 0x11, NULL, NULL },
    { "getSelectionRectangle", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "getBoundingPath", NULL, "Lorg.geogebra.common.euclidian.GeneralPathClipped;", 0x1, NULL, NULL },
    { "addBackgroundImageWithOrgGeogebraCommonEuclidianDrawDrawImage:", "addBackgroundImage", "V", 0x11, NULL, NULL },
    { "removeBackgroundImageWithOrgGeogebraCommonEuclidianDrawDrawImage:", "removeBackgroundImage", "V", 0x11, NULL, NULL },
    { "resetLists", NULL, "V", 0x4, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "setPreviewWithOrgGeogebraCommonEuclidianPreviewable:", "setPreview", "V", 0x1, NULL, NULL },
    { "setTemporaryCoordSystemForExport", NULL, "V", 0x11, NULL, NULL },
    { "getMaximumLabelSizeWithOrgGeogebraCommonAwtGGraphics2D:", "getMaximumLabelSize", "Lorg.geogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "restoreOldCoordSystem", NULL, "V", 0x11, NULL, NULL },
    { "setTemporarySizeWithInt:withInt:", "setTemporarySize", "V", 0x1, NULL, NULL },
    { "setShowAxisWithInt:withBoolean:withBoolean:", "setShowAxis", "Z", 0x1, NULL, NULL },
    { "setShowAxesWithBoolean:withBoolean:", "setShowAxes", "Z", 0x1, NULL, NULL },
    { "setBoldAxesWithBoolean:", "setBoldAxes", "V", 0x1, NULL, NULL },
    { "isTracing", NULL, "Z", 0x4, NULL, NULL },
    { "hasBackgroundImages", NULL, "Z", 0x4, NULL, NULL },
    { "getBackgroundGraphics", NULL, "Lorg.geogebra.common.awt.GGraphics2D;", 0x11, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x1, NULL, NULL },
    { "startXMLWithJavaLangStringBuilder:withBoolean:", "startXML", "V", 0x1, NULL, NULL },
    { "addAxisXMLWithInt:withJavaLangStringBuilder:", "addAxisXML", "V", 0x4, NULL, NULL },
    { "endXMLWithJavaLangStringBuilder:", "endXML", "V", 0x1, NULL, NULL },
    { "drawPointsWithOrgGeogebraCommonKernelGeosGeoImage:withDoubleArray:withDoubleArray:", "drawPoints", "V", 0x1, NULL, NULL },
    { "doDrawPointsWithOrgGeogebraCommonKernelGeosGeoImage:withJavaUtilList:withOrgGeogebraCommonAwtGColor:withInt:withInt:", "doDrawPoints", "V", 0x404, NULL, NULL },
    { "resetXYMinMaxObjects", NULL, "V", 0x1, NULL, NULL },
    { "setViewShowAllObjectsWithBoolean:", "setViewShowAllObjects", "V", 0x1, NULL, NULL },
    { "getSelectedWidth", NULL, "I", 0x1, NULL, NULL },
    { "getSelectedHeight", NULL, "I", 0x1, NULL, NULL },
    { "getExportWidth", NULL, "I", 0x1, NULL, NULL },
    { "getExportHeight", NULL, "I", 0x1, NULL, NULL },
    { "clickedGeoWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "clickedGeo", "V", 0x11, NULL, NULL },
    { "newZoomer", NULL, "Lorg.geogebra.common.euclidian.MyZoomer;", 0x404, NULL, NULL },
    { "zoomWithDouble:withDouble:withDouble:withInt:withBoolean:", "zoom", "V", 0x1, NULL, NULL },
    { "zoomAxesRatioWithDouble:withBoolean:", "zoomAxesRatio", "V", 0x11, NULL, NULL },
    { "setStandardViewWithBoolean:", "setStandardView", "V", 0x11, NULL, NULL },
    { "setAnimatedCoordSystemWithDouble:withDouble:withInt:withBoolean:", "setAnimatedCoordSystem", "V", 0x1, NULL, NULL },
    { "setAnimatedCoordSystemWithDouble:withDouble:withDouble:withDouble:withInt:withBoolean:", "setAnimatedCoordSystem", "V", 0x1, NULL, NULL },
    { "setAnimatedRealWorldCoordSystemWithDouble:withDouble:withDouble:withDouble:withInt:withBoolean:", "setAnimatedRealWorldCoordSystem", "V", 0x11, NULL, NULL },
    { "mouseMovedOverWithOrgGeogebraCommonKernelGeosGeoElement:", "mouseMovedOver", "V", 0x11, NULL, NULL },
    { "highlightWithOrgGeogebraCommonKernelGeosGeoElement:", "highlight", "V", 0x1, NULL, NULL },
    { "highlightWithJavaUtilArrayList:", "highlight", "V", 0x1, NULL, NULL },
    { "mouseMovedOverListWithJavaUtilArrayList:", "mouseMovedOverList", "V", 0x11, NULL, NULL },
    { "setAnimationButtonsHighlightedWithBoolean:", "setAnimationButtonsHighlighted", "Z", 0x11, NULL, NULL },
    { "drawPlayButtonInThisView", NULL, "Z", 0x4, NULL, NULL },
    { "isPrimaryEV", NULL, "Z", 0x2, NULL, NULL },
    { "getAxesColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getGridColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonJavaxSwingGBox:", "add", "V", 0x401, NULL, NULL },
    { "removeWithOrgGeogebraCommonJavaxSwingGBox:", "remove", "V", 0x401, NULL, NULL },
    { "initViewWithBoolean:", "initView", "V", 0x4, NULL, NULL },
    { "setShowAxisWithBoolean:", "setShowAxis", "V", 0x1, NULL, NULL },
    { "setTransparentCursor", NULL, "V", 0x401, NULL, NULL },
    { "setEraserCursor", NULL, "V", 0x401, NULL, NULL },
    { "getGraphicsForPen", NULL, "Lorg.geogebra.common.awt.GGraphics2D;", 0x401, NULL, NULL },
    { "hasStyleBar", NULL, "Z", 0x11, NULL, NULL },
    { "isPenModeWithInt:", "isPenMode", "Z", 0x9, NULL, NULL },
    { "setOptionPanelWithOrgGeogebraCommonGuiDialogOptionsOptionsEuclidian:", "setOptionPanel", "V", 0x1, NULL, NULL },
    { "getDeletionRectangle", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "setDeletionRectangleWithOrgGeogebraCommonAwtGRectangle:", "setDeletionRectangle", "V", 0x1, NULL, NULL },
    { "getBoldAxesWithBoolean:withInt:", "getBoldAxes", "I", 0x9, NULL, NULL },
    { "areAxesBold", NULL, "Z", 0x1, NULL, NULL },
    { "estimateNumberHeightWithOrgGeogebraCommonAwtGFont:", "estimateNumberHeight", "D", 0xa, NULL, NULL },
    { "estimateNumberWidthWithDouble:withOrgGeogebraCommonAwtGFont:", "estimateNumberWidth", "D", 0x2, NULL, NULL },
    { "estimateTextWidthWithNSString:withOrgGeogebraCommonAwtGFont:", "estimateTextWidth", "D", 0xa, NULL, NULL },
    { "getSliderOffsetY", NULL, "I", 0x1, NULL, NULL },
    { "getMinSamplePoints", NULL, "D", 0x1, NULL, NULL },
    { "getMaxBendOfScreen", NULL, "D", 0x1, NULL, NULL },
    { "getMaxBend", NULL, "D", 0x1, NULL, NULL },
    { "getMaxDefinedBisections", NULL, "I", 0x1, NULL, NULL },
    { "getMinPixelDistance", NULL, "D", 0x1, NULL, NULL },
    { "getMaxZeroCount", NULL, "I", 0x1, NULL, NULL },
    { "getMaxPixelDistance", NULL, "D", 0x1, NULL, NULL },
    { "getMaxProblemBisections", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteTop", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteLeft", NULL, "I", 0x1, NULL, NULL },
    { "getStyleBar", NULL, "Lorg.geogebra.common.euclidian.EuclidianStyleBar;", 0x11, NULL, NULL },
    { "newEuclidianStyleBar", NULL, "Lorg.geogebra.common.euclidian.EuclidianStyleBar;", 0x404, NULL, NULL },
    { "getLastRepaintTime", NULL, "J", 0x1, NULL, NULL },
    { "setLabels", NULL, "V", 0x11, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "exportPaintPreWithOrgGeogebraCommonAwtGGraphics2D:withDouble:withBoolean:", "exportPaintPre", "V", 0x401, NULL, NULL },
    { "exportPaintWithOrgGeogebraCommonAwtGGraphics2D:withDouble:withBoolean:", "exportPaint", "V", 0x1, NULL, NULL },
    { "exportPaintPreWithOrgGeogebraCommonAwtGGraphics2D:withDouble:", "exportPaintPre", "V", 0x1, NULL, NULL },
    { "centerViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "centerView", "V", 0x1, NULL, NULL },
    { "getDraggedLabelsWithJavaUtilArrayList:", "getDraggedLabels", "Ljava.lang.String;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hasMouse__", "hasMouse", 0x4, "Z", NULL, NULL,  },
    { "EVNO_GENERAL_", NULL, 0x9, "I", &OrgGeogebraCommonEuclidianEuclidianView_EVNO_GENERAL_, NULL,  },
    { "EVNO_3D_", NULL, 0x9, "I", &OrgGeogebraCommonEuclidianEuclidianView_EVNO_3D_, NULL,  },
    { "evNo_", NULL, 0x4, "I", NULL, NULL,  },
    { "xZeroOld_", NULL, 0x2, "D", NULL, NULL,  },
    { "yZeroOld_", NULL, 0x2, "D", NULL, NULL,  },
    { "mode_", NULL, 0x2, "I", NULL, NULL,  },
    { "MIN_WIDTH_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_MIN_WIDTH },
    { "MIN_HEIGHT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_MIN_HEIGHT },
    { "EXPORT1_", NULL, 0x1c, "Ljava.lang.String;", &OrgGeogebraCommonEuclidianEuclidianView_EXPORT1_, NULL,  },
    { "EXPORT2_", NULL, 0x1c, "Ljava.lang.String;", &OrgGeogebraCommonEuclidianEuclidianView_EXPORT2_, NULL,  },
    { "PRINTER_PIXEL_PER_CM_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_PRINTER_PIXEL_PER_CM },
    { "MODE_ZOOM_FACTOR_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_MODE_ZOOM_FACTOR },
    { "MOUSE_WHEEL_ZOOM_FACTOR_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR },
    { "SCALE_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_SCALE_STANDARD },
    { "SCREEN_BORDER_", NULL, 0xc, "I", &OrgGeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_, NULL,  },
    { "XZERO_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_XZERO_STANDARD },
    { "YZERO_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_YZERO_STANDARD },
    { "bgImage_", NULL, 0x4, "Lorg.geogebra.common.awt.GBufferedImage;", NULL, NULL,  },
    { "bgGraphics_", NULL, 0x4, "Lorg.geogebra.common.awt.GGraphics2D;", NULL, NULL,  },
    { "colZoomRectangle_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonEuclidianEuclidianView_colZoomRectangle_, NULL,  },
    { "colZoomRectangleFill_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonEuclidianEuclidianView_colZoomRectangleFill_, NULL,  },
    { "colDeletionSquare_", NULL, 0x1c, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonEuclidianEuclidianView_colDeletionSquare_, NULL,  },
    { "strokeDeletionSquare_", NULL, 0x1c, "Lorg.geogebra.common.awt.GBasicStroke;", &OrgGeogebraCommonEuclidianEuclidianView_strokeDeletionSquare_, NULL,  },
    { "deletionRectangle_", NULL, 0x4, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "axesColor_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "gridColor_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "selectionRectangle_", NULL, 0x4, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "defAxesStroke_", NULL, 0x9, "Lorg.geogebra.common.awt.GBasicStroke;", &OrgGeogebraCommonEuclidianEuclidianView_defAxesStroke_, NULL,  },
    { "boldAxesStroke_", NULL, 0xa, "Lorg.geogebra.common.awt.GBasicStroke;", &OrgGeogebraCommonEuclidianEuclidianView_boldAxesStroke_, NULL,  },
    { "axesStroke_", NULL, 0x2, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "tickStroke_", NULL, 0x2, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "gridStroke_", NULL, 0x2, "Lorg.geogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "fontSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "coordTransform_", NULL, 0x2, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "AxesTickInterval_", NULL, 0x4, "[D", NULL, NULL,  },
    { "axesNumberFormat_", NULL, 0x4, "[Lorg.geogebra.common.util.NumberFormatAdapter;", NULL, NULL,  },
    { "showAxes_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "automaticGridDistance_", NULL, 0x2, "Z", NULL, NULL,  },
    { "gridDistances_", NULL, 0x4, "[D", NULL, NULL,  },
    { "gridLineStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "axesLineType_", NULL, 0x2, "I", NULL, NULL,  },
    { "gridIsBold_", NULL, 0x4, "Z", NULL, NULL,  },
    { "tooltipsInThisView_", NULL, 0x4, "I", NULL, NULL,  },
    { "GRID_CARTESIAN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN },
    { "GRID_ISOMETRIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_GRID_ISOMETRIC },
    { "GRID_POLAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_GRID_POLAR },
    { "gridType_", NULL, 0x2, "I", NULL, NULL,  },
    { "fontPoint_", NULL, 0x2, "Lorg.geogebra.common.awt.GFont;", NULL, NULL,  },
    { "fontCoords_", NULL, 0x2, "Lorg.geogebra.common.awt.GFont;", NULL, NULL,  },
    { "printScaleNF_", NULL, 0x4, "Lorg.geogebra.common.util.NumberFormatAdapter;", NULL, NULL,  },
    { "showGrid__", "showGrid", 0x4, "Z", NULL, NULL,  },
    { "antiAliasing_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showMouseCoords_", NULL, 0x4, "Z", NULL, NULL,  },
    { "allowShowMouseCoords_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showAxesRatio_", NULL, 0x4, "Z", NULL, NULL,  },
    { "highlightAnimationButtons_", NULL, 0x4, "Z", NULL, NULL,  },
    { "pointCapturingMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "showAxesCornerCoords_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showAxesNumbers_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axesLabels_", NULL, 0x4, "[Ljava.lang.String;", NULL, NULL,  },
    { "axesLabelsStyle_", NULL, 0x4, "[I", NULL, NULL,  },
    { "axesUnitLabels_", NULL, 0x4, "[Ljava.lang.String;", NULL, NULL,  },
    { "previewDrawable_", NULL, 0x2, "Lorg.geogebra.common.euclidian.Previewable;", NULL, NULL,  },
    { "firstPaint_", NULL, 0x4, "Z", NULL, NULL,  },
    { "app_", NULL, 0x4, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "settings_", NULL, 0x12, "Lorg.geogebra.common.main.settings.EuclidianSettings;", NULL, NULL,  },
    { "euclidianController_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "hits_", NULL, 0x12, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "MAX_PIXEL_DISTANCE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_MAX_PIXEL_DISTANCE },
    { "MIN_PIXEL_DISTANCE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_MIN_PIXEL_DISTANCE },
    { "MAX_ANGLE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_MAX_ANGLE },
    { "MAX_ANGLE_OFF_SCREEN_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianView_MAX_ANGLE_OFF_SCREEN },
    { "MAX_BEND_", NULL, 0x1a, "D", &OrgGeogebraCommonEuclidianEuclidianView_MAX_BEND_, NULL,  },
    { "MAX_BEND_OFF_SCREEN_", NULL, 0x1a, "D", &OrgGeogebraCommonEuclidianEuclidianView_MAX_BEND_OFF_SCREEN_, NULL,  },
    { "MAX_DEFINED_BISECTIONS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_MAX_DEFINED_BISECTIONS },
    { "MAX_PROBLEM_BISECTIONS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_MAX_PROBLEM_BISECTIONS },
    { "MAX_ZERO_COUNT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_MAX_ZERO_COUNT },
    { "MIN_SAMPLE_POINTS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianView_MIN_SAMPLE_POINTS },
    { "companion_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianViewCompanion;", NULL, NULL,  },
    { "xminObject_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "xmaxObject_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "yminObject_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "ymaxObject_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "lockedAxesRatio_", NULL, 0x4, "Ljava.lang.Double;", NULL, NULL,  },
    { "updateBackgroundOnNextRepaint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "updatingBounds_", NULL, 0x2, "Z", NULL, NULL,  },
    { "xmin_", NULL, 0x1, "D", NULL, NULL,  },
    { "xmax_", NULL, 0x1, "D", NULL, NULL,  },
    { "ymin_", NULL, 0x1, "D", NULL, NULL,  },
    { "ymax_", NULL, 0x1, "D", NULL, NULL,  },
    { "invXscale_", NULL, 0x2, "D", NULL, NULL,  },
    { "invYscale_", NULL, 0x2, "D", NULL, NULL,  },
    { "xZero_", NULL, 0x2, "D", NULL, NULL,  },
    { "yZero_", NULL, 0x2, "D", NULL, NULL,  },
    { "xscale_", NULL, 0x2, "D", NULL, NULL,  },
    { "yscale_", NULL, 0x2, "D", NULL, NULL,  },
    { "printingScale_", NULL, 0x4, "D", NULL, NULL,  },
    { "DrawableMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/kernel/geos/GeoElement;Lorg/geogebra/common/euclidian/DrawableND;>;",  },
    { "stickyPointList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "allDrawableList_", NULL, 0x2, "Lorg.geogebra.common.euclidian.DrawableList;", NULL, NULL,  },
    { "drawLayers_", NULL, 0x1, "[Lorg.geogebra.common.euclidian.DrawableList;", NULL, NULL,  },
    { "bgImageList_", NULL, 0x2, "Lorg.geogebra.common.euclidian.DrawableList;", NULL, NULL,  },
    { "piAxisUnit_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axesTickStyles_", NULL, 0x4, "[I", NULL, NULL,  },
    { "automaticAxesNumberingDistances_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axesNumberingDistances_", NULL, 0x4, "[D", NULL, NULL,  },
    { "needsAllDrawablesUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "batchUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "geosWaiting_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "hitPointOrBoundary_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "hitFilling_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "hitLabel_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "axisCross_", NULL, 0x4, "[D", NULL, NULL,  },
    { "positiveAxes_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "drawBorderAxes_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "reIniting_", NULL, 0x4, "Z", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lorg.geogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "tempLine_", NULL, 0x2, "Lorg.geogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "styleBar_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianStyleBar;", NULL, NULL,  },
    { "axesLabelsPositionsY_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;",  },
    { "axesLabelsPositionsX_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;",  },
    { "yLabelMaxWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "xLabelHeights_", NULL, 0x2, "D", NULL, NULL,  },
    { "widthTemp_", NULL, 0x2, "I", NULL, NULL,  },
    { "heightTemp_", NULL, 0x2, "I", NULL, NULL,  },
    { "xminTemp_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmaxTemp_", NULL, 0x2, "D", NULL, NULL,  },
    { "yminTemp_", NULL, 0x2, "D", NULL, NULL,  },
    { "ymaxTemp_", NULL, 0x2, "D", NULL, NULL,  },
    { "tracing_", NULL, 0x4, "Z", NULL, NULL,  },
    { "tempArrayList_", NULL, 0x2, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "zoomer_", NULL, 0x2, "Lorg.geogebra.common.euclidian.MyZoomer;", NULL, NULL,  },
    { "axesRatioZoomer_", NULL, 0x2, "Lorg.geogebra.common.euclidian.MyZoomer;", NULL, NULL,  },
    { "mover_", NULL, 0x2, "Lorg.geogebra.common.euclidian.MyZoomer;", NULL, NULL,  },
    { "zoomerRW_", NULL, 0x2, "Lorg.geogebra.common.euclidian.MyZoomer;", NULL, NULL,  },
    { "optionPanel_", NULL, 0x2, "Lorg.geogebra.common.gui.dialog.options.OptionsEuclidian;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianEuclidianView = { 2, "EuclidianView", "org.geogebra.common.euclidian", NULL, 0x401, 357, methods, 139, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianEuclidianView;
}

@end

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianView_getLineTypes() {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_LONG), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DOTTED), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_DOTTED) } count:5 type:JavaLangInteger_class_()];
  return ret;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianView_getPointStyles() {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_PLUS), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_EMPTY_DIAMOND), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_SOUTH), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_EAST), new_JavaLangInteger_initWithInt_(OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST) } count:10 type:JavaLangInteger_class_()];
  return ret;
}

void OrgGeogebraCommonEuclidianEuclidianView_initWithOrgGeogebraCommonEuclidianEuclidianController_withInt_withOrgGeogebraCommonMainSettingsEuclidianSettings_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonEuclidianEuclidianController *ec, jint viewNo, OrgGeogebraCommonMainSettingsEuclidianSettings *settings) {
  (void) NSObject_init(self);
  self->evNo_ = 1;
  self->mode_ = OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE;
  self->coordTransform_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  self->showAxes_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2];
  self->automaticGridDistance_ = YES;
  self->gridIsBold_ = NO;
  self->tooltipsInThisView_ = OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC;
  self->gridType_ = OrgGeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN;
  self->showGrid__ = NO;
  self->antiAliasing_ = YES;
  self->showMouseCoords_ = NO;
  self->allowShowMouseCoords_ = NO;
  self->showAxesRatio_ = NO;
  self->highlightAnimationButtons_ = NO;
  self->showAxesCornerCoords_ = YES;
  self->firstPaint_ = YES;
  self->updatingBounds_ = NO;
  self->DrawableMap_ = new_JavaUtilHashMap_initWithInt_(500);
  self->stickyPointList_ = new_JavaUtilArrayList_init();
  self->allDrawableList_ = new_OrgGeogebraCommonEuclidianDrawableList_init();
  self->bgImageList_ = new_OrgGeogebraCommonEuclidianDrawableList_init();
  self->automaticAxesNumberingDistances_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2];
  self->geosWaiting_ = new_JavaUtilArrayList_init();
  self->reIniting_ = NO;
  self->circle_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble];
  self->tempLine_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D];
  self->axesLabelsPositionsY_ = new_JavaUtilArrayList_init();
  self->axesLabelsPositionsX_ = new_JavaUtilArrayList_init();
  self->yLabelMaxWidth_ = 0;
  self->xLabelHeights_ = 0;
  self->tracing_ = NO;
  self->tempArrayList_ = new_OrgGeogebraCommonEuclidianHits_init();
  self->optionPanel_ = nil;
  [self setEuclidianViewNoWithInt:viewNo];
  self->companion_ = [self newEuclidianViewCompanion];
  self->drawLayers_ = [IOSObjectArray newArrayWithLength:OrgGeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS + 1 type:OrgGeogebraCommonEuclidianDrawableList_class_()];
  for (jint k = 0; k <= OrgGeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS; k++) {
    (void) IOSObjectArray_Set(self->drawLayers_, k, new_OrgGeogebraCommonEuclidianDrawableList_init());
  }
  [self initAxesValues];
  self->euclidianController_ = ec;
  self->kernel_ = [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec)) getKernel];
  self->app_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication];
  self->settings_ = settings;
  self->xminObject_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([self->kernel_ getConstruction]);
  self->xmaxObject_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([self->kernel_ getConstruction]);
  self->yminObject_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([self->kernel_ getConstruction]);
  self->ymaxObject_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([self->kernel_ getConstruction]);
  self->hits_ = new_OrgGeogebraCommonEuclidianHits_init();
  self->printScaleNF_ = [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithNSString:@"#.#####" withInt:5];
}

void OrgGeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, jboolean repaint) {
  OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, OrgGeogebraCommonEuclidianEuclidianView_XZERO_STANDARD, OrgGeogebraCommonEuclidianEuclidianView_YZERO_STANDARD, OrgGeogebraCommonEuclidianEuclidianView_SCALE_STANDARD, OrgGeogebraCommonEuclidianEuclidianView_SCALE_STANDARD, repaint);
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_clearRectangleWithInt_(jint mode) {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
    return YES;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    return NO;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    return NO;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    return NO;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    return NO;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    return NO;
    default:
    return YES;
  }
}

void OrgGeogebraCommonEuclidianEuclidianView_setSizeListeners(OrgGeogebraCommonEuclidianEuclidianView *self) {
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->xminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) addEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->yminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) addEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->xmaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) addEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->ymaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) addEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
}

jint OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xRW) {
  return (jint) JavaLangMath_roundWithDouble_([self getxZero] + (xRW * [self getXscale]));
}

jint OrgGeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble yRW) {
  return (jint) JavaLangMath_roundWithDouble_([self getyZero] - (yRW * [self getYscale]));
}

jdouble OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble x) {
  return (x - [self getxZero]) * [self getInvXscale];
}

jdouble OrgGeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble y) {
  return ([self getyZero] - y) * [self getInvYscale];
}

void OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xZero, jdouble yZero, jdouble xscale, jdouble yscale) {
  if (self->settings_ != nil) {
    [self->settings_ setCoordSystemWithDouble:xZero withDouble:yZero withDouble:xscale withDouble:yscale withBoolean:NO];
  }
  OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, xZero, yZero, xscale, yscale, YES);
}

void OrgGeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xmin2, jdouble xmax2, jdouble ymin2, jdouble ymax2) {
  jdouble calcXscale = [self getWidth] / (xmax2 - xmin2);
  jdouble calcYscale = [self getHeight] / (ymax2 - ymin2);
  jdouble calcXzero = -calcXscale * xmin2;
  jdouble calcYzero = calcYscale * ymax2;
  OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, calcXzero, calcYzero, calcXscale, calcYscale);
}

void OrgGeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xZero, jdouble yZero, jdouble xscale, jdouble yscale, jboolean repaint) {
  if (JavaLangDouble_isNaNWithDouble_(xscale) || (xscale < OrgGeogebraCommonKernelKernel_MAX_DOUBLE_PRECISION) || (xscale > OrgGeogebraCommonKernelKernel_INV_MAX_DOUBLE_PRECISION)) {
    return;
  }
  if (JavaLangDouble_isNaNWithDouble_(yscale) || (yscale < OrgGeogebraCommonKernelKernel_MAX_DOUBLE_PRECISION) || (yscale > OrgGeogebraCommonKernelKernel_INV_MAX_DOUBLE_PRECISION)) {
    return;
  }
  self->xZero_ = xZero;
  self->yZero_ = yZero;
  OrgGeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(self, xscale);
  OrgGeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(self, yscale);
  OrgGeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(self);
  [self setXYMinMaxForSetCoordSystem];
  [self setRealWorldBounds];
  if (repaint) {
    self->updateBackgroundOnNextRepaint_ = YES;
    OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, repaint);
    if ([((OrgGeogebraCommonMainApp *) nil_chk([self getApplication])) hasEuclidianView2WithInt:1]) {
      [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
    }
  }
  [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) setCoordSystemOccured];
}

void OrgGeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xscale) {
  self->xscale_ = xscale;
  self->invXscale_ = 1 / xscale;
}

void OrgGeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble yscale) {
  self->yscale_ = yscale;
  self->invYscale_ = 1 / yscale;
}

jint OrgGeogebraCommonEuclidianEuclidianView_getGridType(OrgGeogebraCommonEuclidianEuclidianView *self) {
  return self->gridType_;
}

void OrgGeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(OrgGeogebraCommonEuclidianEuclidianView *self) {
  if (self->coordTransform_ != nil) {
    [self->coordTransform_ setTransformWithDouble:self->xscale_ withDouble:0.0 withDouble:0.0 withDouble:-self->yscale_ withDouble:self->xZero_ withDouble:self->yZero_];
  }
}

void OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, jboolean repaint) {
  if (repaint && self->batchUpdate_) {
    self->needsAllDrawablesUpdate_ = YES;
    return;
  }
  [((OrgGeogebraCommonEuclidianDrawableList *) nil_chk(self->allDrawableList_)) updateAll];
  if (repaint) {
    [self repaint];
  }
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_drawableNeededWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  return ([self isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:geo] && ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] || [self isPlotPanel]) && ([geo isEuclidianVisible] || ([geo isGeoText] && [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) isNeedsUpdatedBoundingBox]) || ([geo isGeoAngle] && [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAngle class]]))) || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_FUNCTION_INSPECTOR];
}

OrgGeogebraCommonEuclidianDrawableND *OrgGeogebraCommonEuclidianEuclidianView_getDrawableWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  return [((JavaUtilHashMap *) nil_chk(self->DrawableMap_)) getWithId:geo];
}

void OrgGeogebraCommonEuclidianEuclidianView_setFontPointWithOrgGeogebraCommonAwtGFont_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonAwtGFont *fontPoint) {
  self->fontPoint_ = fontPoint;
}

void OrgGeogebraCommonEuclidianEuclidianView_setFontCoordsWithOrgGeogebraCommonAwtGFont_(OrgGeogebraCommonEuclidianEuclidianView *self, OrgGeogebraCommonAwtGFont *fontCoords) {
  self->fontCoords_ = fontCoords;
}

jint OrgGeogebraCommonEuclidianEuclidianView_getAllowToolTips(OrgGeogebraCommonEuclidianEuclidianView *self) {
  return self->tooltipsInThisView_;
}

void OrgGeogebraCommonEuclidianEuclidianView_updateBackground(OrgGeogebraCommonEuclidianEuclidianView *self) {
  [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
  [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
  OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  OrgGeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_usesSelectionAsInputWithInt_(jint mode) {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    return NO;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
    return YES;
    default:
    return NO;
  }
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_usesSelectionRectangleAsInputWithInt_(jint mode) {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
    return YES;
    default:
    return NO;
  }
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_hasMouse2D(OrgGeogebraCommonEuclidianEuclidianView *self) {
  return self->hasMouse__;
}

void OrgGeogebraCommonEuclidianEuclidianView_clearBackgroundWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g)) setColorWithOrgGeogebraCommonAwtGColor:[self getBackgroundCommon]];
  [g updateCanvasColor];
  [g fillRectWithInt:0 withInt:0 withInt:[self getWidth] withInt:[self getHeight]];
}

void OrgGeogebraCommonEuclidianEuclidianView_updateBackgroundImage(OrgGeogebraCommonEuclidianEuclidianView *self) {
  if (self->bgGraphics_ != nil) {
    [self drawBackgroundWithImagesWithOrgGeogebraCommonAwtGGraphics2D:self->bgGraphics_ withBoolean:NO];
  }
}

void OrgGeogebraCommonEuclidianEuclidianView_drawBackgroundWithOrgGeogebraCommonAwtGGraphics2D_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g, jboolean clear) {
  if (clear) {
    OrgGeogebraCommonEuclidianEuclidianView_clearBackgroundWithOrgGeogebraCommonAwtGGraphics2D_(self, g);
  }
  [self setAntialiasingWithOrgGeogebraCommonAwtGGraphics2D:g];
  if (IOSBooleanArray_Get(nil_chk(self->drawBorderAxes_), 0) || IOSBooleanArray_Get(self->drawBorderAxes_, 1)) {
    OrgGeogebraCommonAwtGPoint *labelOffset = [self getMaximumLabelSizeWithOrgGeogebraCommonAwtGGraphics2D:g];
    if (IOSBooleanArray_Get(self->drawBorderAxes_, 0)) {
      *IOSDoubleArray_GetRef(nil_chk(self->axisCross_), 0) = [self getYmin] + ((((OrgGeogebraCommonAwtGPoint *) nil_chk(labelOffset))->y_ + 10) / [self getYscale]);
    }
    if (IOSBooleanArray_Get(self->drawBorderAxes_, 1)) {
      *IOSDoubleArray_GetRef(nil_chk(self->axisCross_), 1) = [self getXmin] + ((((OrgGeogebraCommonAwtGPoint *) nil_chk(labelOffset))->x_ + 10) / [self getXscale]);
    }
  }
  [((JavaUtilArrayList *) nil_chk(self->axesLabelsPositionsY_)) clear];
  [((JavaUtilArrayList *) nil_chk(self->axesLabelsPositionsX_)) clear];
  self->yLabelMaxWidth_ = 0;
  self->xLabelHeights_ = OrgGeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithOrgGeogebraCommonAwtGFont_([self getFontAxes]);
  if (IOSBooleanArray_Get(nil_chk(self->showAxes_), 0) || IOSBooleanArray_Get(self->showAxes_, 1)) {
    [self drawAxesWithOrgGeogebraCommonAwtGGraphics2D:g];
  }
  if (self->showGrid__) {
    OrgGeogebraCommonEuclidianEuclidianView_drawGridWithOrgGeogebraCommonAwtGGraphics2D_(self, g);
  }
  if ([self showResetIcon]) {
    [self drawResetIconWithOrgGeogebraCommonAwtGGraphics2D:g];
  }
}

void OrgGeogebraCommonEuclidianEuclidianView_drawGridWithOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g2) {
  jdouble xCrossPix = [self getxZero] + (IOSDoubleArray_Get(nil_chk(self->axisCross_), 1) * [self getXscale]);
  jdouble yCrossPix = [self getyZero] - (IOSDoubleArray_Get(self->axisCross_, 0) * [self getYscale]);
  jint yAxisEnd = (IOSBooleanArray_Get(nil_chk(self->positiveAxes_), 1) && yCrossPix < [self getHeight]) ? J2ObjCFpToInt(yCrossPix) : [self getHeight];
  jint xAxisStart = (IOSBooleanArray_Get(self->positiveAxes_, 0) && xCrossPix > 0) ? J2ObjCFpToInt(xCrossPix) : 0;
  id<OrgGeogebraCommonAwtGShape> oldClip = [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getClip];
  if (self->gridType_ != OrgGeogebraCommonEuclidianEuclidianView_GRID_POLAR) {
    [g2 setClipWithInt:xAxisStart withInt:0 withInt:[self getWidth] withInt:yAxisEnd];
  }
  [g2 setColorWithOrgGeogebraCommonAwtGColor:self->gridColor_];
  [g2 setStrokeWithOrgGeogebraCommonAwtGBasicStroke:self->gridStroke_];
  {
    jdouble tickStep;
    jdouble start;
    jdouble pix;
    jdouble tickStepX;
    jdouble startX;
    jdouble startX2;
    jdouble tickStepY;
    jdouble startY;
    jint extra;
    jdouble min;
    jdouble d1;
    jdouble d2;
    jdouble d3;
    jdouble d4;
    jdouble max;
    jdouble tickStepR;
    jdouble r;
    jdouble angleStep;
    jdouble y1, y2, m;
    switch (self->gridType_) {
      case OrgGeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN:
      tickStep = [self getXscale] * IOSDoubleArray_Get(nil_chk(self->gridDistances_), 0);
      start = fmod([self getxZero], tickStep);
      pix = start;
      for (jint i = 0; pix <= [self getWidth]; i++) {
        if (!IOSBooleanArray_Get(nil_chk(self->showAxes_), 1) || JavaLangMath_absWithDouble_(pix - xCrossPix) > 2.0) {
          if ([((JavaUtilArrayList *) nil_chk(self->axesLabelsPositionsX_)) containsWithId:new_JavaLangInteger_initWithInt_(J2ObjCFpToInt((pix + OrgGeogebraCommonKernelKernel_MIN_PRECISION)))]) {
            OrgGeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsVWithOrgGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(self, g2, pix, 0, pix, [self getHeight], yCrossPix);
          }
          else {
            [g2 drawStraightLineWithDouble:pix withDouble:0 withDouble:pix withDouble:[self getHeight]];
          }
        }
        pix = start + (i * tickStep);
      }
      tickStep = [self getYscale] * IOSDoubleArray_Get(self->gridDistances_, 1);
      start = fmod([self getyZero], tickStep);
      pix = start;
      for (jint j = 0; pix <= [self getHeight]; j++) {
        if (!IOSBooleanArray_Get(nil_chk(self->showAxes_), 0) || JavaLangMath_absWithDouble_(pix - yCrossPix) > 2.0) {
          if ([((JavaUtilArrayList *) nil_chk(self->axesLabelsPositionsY_)) containsWithId:new_JavaLangInteger_initWithInt_(J2ObjCFpToInt((pix + OrgGeogebraCommonKernelKernel_MIN_PRECISION)))]) {
            OrgGeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsHWithOrgGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(self, g2, 0, pix, [self getWidth], pix, xCrossPix);
          }
          else {
            [g2 drawStraightLineWithDouble:0 withDouble:pix withDouble:[self getWidth] withDouble:pix];
          }
        }
        pix = start + (j * tickStep);
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianView_GRID_ISOMETRIC:
      tickStepX = [self getXscale] * IOSDoubleArray_Get(nil_chk(self->gridDistances_), 0) * JavaLangMath_sqrtWithDouble_(3.0);
      startX = fmod([self getxZero], (tickStepX));
      startX2 = fmod([self getxZero], (tickStepX / 2));
      tickStepY = [self getYscale] * IOSDoubleArray_Get(self->gridDistances_, 0);
      startY = fmod([self getyZero], tickStepY);
      pix = startX2;
      for (jint j = 0; pix <= [self getWidth]; j++) {
        [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->tempLine_)) setLineWithDouble:pix withDouble:0 withDouble:pix withDouble:[self getHeight]];
        [g2 drawWithOrgGeogebraCommonAwtGShape:self->tempLine_];
        pix = startX2 + ((j * tickStepX) / 2.0);
      }
      extra = J2ObjCFpToInt((((([self getHeight] * [self getXscale]) / [self getYscale]) * JavaLangMath_sqrtWithDouble_(3.0)) / tickStepX)) + 3;
      pix = startX + (-(extra + 1) * tickStepX);
      for (jint j = -extra; pix <= [self getWidth]; j += 1) {
        [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->tempLine_)) setLineWithDouble:pix withDouble:startY - tickStepY withDouble:pix + ((([self getHeight] + tickStepY) * JavaLangMath_sqrtWithDouble_(3) * [self getXscale]) / [self getYscale]) withDouble:(startY - tickStepY) + [self getHeight] + tickStepY];
        [g2 drawWithOrgGeogebraCommonAwtGShape:self->tempLine_];
        pix = startX + (j * tickStepX);
      }
      pix = startX;
      for (jint j = 0; pix <= ([self getWidth] + (((([self getHeight] * [self getXscale]) / [self getYscale]) + tickStepY) * JavaLangMath_sqrtWithDouble_(3.0))); j += 1) {
        [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->tempLine_)) setLineWithDouble:pix withDouble:startY - tickStepY withDouble:pix - ((([self getHeight] + tickStepY) * JavaLangMath_sqrtWithDouble_(3) * [self getXscale]) / [self getYscale]) withDouble:(startY - tickStepY) + [self getHeight] + tickStepY];
        [g2 drawWithOrgGeogebraCommonAwtGShape:self->tempLine_];
        pix = startX + (j * tickStepX);
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianView_GRID_POLAR:
      if (([self getxZero] > 0) && ([self getxZero] < [self getWidth]) && ([self getyZero] > 0) && ([self getyZero] < [self getHeight])) {
        min = 0;
      }
      else {
        jdouble minW = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_absWithDouble_([self getxZero]), JavaLangMath_absWithDouble_([self getxZero] - [self getWidth]));
        jdouble minH = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_absWithDouble_([self getyZero]), JavaLangMath_absWithDouble_([self getyZero] - [self getHeight]));
        min = JavaLangMath_minWithDouble_withDouble_(minW, minH);
      }
      d1 = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([self getxZero], [self getyZero]);
      d2 = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([self getxZero], [self getyZero] - [self getHeight]);
      d3 = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([self getxZero] - [self getWidth], [self getyZero]);
      d4 = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([self getxZero] - [self getWidth], [self getyZero] - [self getHeight]);
      max = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(d1, d2), JavaLangMath_maxWithDouble_withDouble_(d3, d4));
      tickStepR = [self getXscale] * IOSDoubleArray_Get(nil_chk(self->gridDistances_), 0);
      r = min - (fmod(min, tickStepR));
      while (r <= max) {
        [((id<OrgGeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circle_)) setFrameWithDouble:[self getxZero] - r withDouble:[self getyZero] - r withDouble:2 * r withDouble:2 * r];
        [g2 drawWithOrgGeogebraCommonAwtGShape:self->circle_];
        r = r + tickStepR;
      }
      angleStep = IOSDoubleArray_Get(self->gridDistances_, 2);
      [((id<OrgGeogebraCommonAwtGLine2D>) nil_chk(self->tempLine_)) setLineWithDouble:0 withDouble:[self getyZero] withDouble:[self getWidth] withDouble:[self getyZero]];
      [g2 drawWithOrgGeogebraCommonAwtGShape:self->tempLine_];
      for (jdouble a = angleStep; a < JavaLangMath_PI; a = a + angleStep) {
        if (JavaLangMath_absWithDouble_(a - (JavaLangMath_PI / 2)) < 0.0001) {
          [self->tempLine_ setLineWithDouble:[self getxZero] withDouble:0 withDouble:[self getxZero] withDouble:[self getHeight]];
        }
        else {
          m = JavaLangMath_tanWithDouble_(a);
          y1 = (m * ([self getxZero])) + [self getyZero];
          y2 = (m * ([self getxZero] - [self getWidth])) + [self getyZero];
          [self->tempLine_ setLineWithDouble:0 withDouble:y1 withDouble:[self getWidth] withDouble:y2];
        }
        [g2 drawWithOrgGeogebraCommonAwtGShape:self->tempLine_];
      }
      break;
    }
  }
  [g2 setClipWithOrgGeogebraCommonAwtGShape:oldClip];
}

jdouble OrgGeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(OrgGeogebraCommonEuclidianEuclidianView *self) {
  return [self getxZero] + (IOSDoubleArray_Get(nil_chk(self->axisCross_), 1) * [self getXscale]);
}

jdouble OrgGeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(OrgGeogebraCommonEuclidianEuclidianView *self) {
  return [self getyZero] - (IOSDoubleArray_Get(nil_chk(self->axisCross_), 0) * [self getYscale]);
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_xAxisOnscreen(OrgGeogebraCommonEuclidianEuclidianView *self) {
  return IOSBooleanArray_Get(nil_chk(self->showAxes_), 0) && ([self getYmin] < IOSDoubleArray_Get(nil_chk(self->axisCross_), 0)) && ([self getYmax] > IOSDoubleArray_Get(self->axisCross_, 0));
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_yAxisOnscreen(OrgGeogebraCommonEuclidianEuclidianView *self) {
  return IOSBooleanArray_Get(nil_chk(self->showAxes_), 1) && ([self getXmin] < IOSDoubleArray_Get(nil_chk(self->axisCross_), 1)) && ([self getXmax] > IOSDoubleArray_Get(self->axisCross_, 1));
}

void OrgGeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsHWithOrgGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g2, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble xCrossPix) {
  if (xCrossPix > x1 && xCrossPix < x2) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawStraightLineWithDouble:x1 withDouble:y1 withDouble:xCrossPix - self->yLabelMaxWidth_ - 10 withDouble:y2];
    [g2 drawStraightLineWithDouble:xCrossPix withDouble:y1 withDouble:x2 withDouble:y2];
  }
  else {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawStraightLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
  }
}

void OrgGeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsVWithOrgGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g2, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble yCrossPix) {
  if (yCrossPix > y1 && yCrossPix < y2) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawStraightLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:yCrossPix];
    [g2 drawStraightLineWithDouble:x1 withDouble:yCrossPix + self->xLabelHeights_ + 5 withDouble:x2 withDouble:y2];
  }
  else {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawStraightLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
  }
}

void OrgGeogebraCommonEuclidianEuclidianView_drawStringWithOrgGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianView *self, id<OrgGeogebraCommonAwtGGraphics2D> g2, NSString *text, jdouble x, jdouble y) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:self->axesColor_];
  [g2 drawStringWithNSString:text withInt:J2ObjCFpToInt((x)) withInt:J2ObjCFpToInt(y)];
}

void OrgGeogebraCommonEuclidianEuclidianView_restoreOldCoordSystem(OrgGeogebraCommonEuclidianEuclidianView *self) {
  [self setWidthWithInt:self->widthTemp_];
  [self setHeightWithInt:self->heightTemp_];
  OrgGeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, self->xminTemp_, self->xmaxTemp_, self->yminTemp_, self->ymaxTemp_);
}

void OrgGeogebraCommonEuclidianEuclidianView_setAnimatedRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble xmin, jdouble xmax, jdouble ymin, jdouble ymax, jint steps, jboolean storeUndo) {
  if (self->zoomerRW_ == nil) {
    self->zoomerRW_ = [self newZoomer];
  }
  [((OrgGeogebraCommonEuclidianMyZoomer *) nil_chk(self->zoomerRW_)) initRWWithDouble:xmin withDouble:xmax withDouble:ymin withDouble:ymax withInt:steps withBoolean:storeUndo];
  [self->zoomerRW_ startAnimation];
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_isPrimaryEV(OrgGeogebraCommonEuclidianEuclidianView *self) {
  return [self getEuclidianViewNo] == 1 || (![((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) showViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN] && [self isDefault2D]);
}

jboolean OrgGeogebraCommonEuclidianEuclidianView_isPenModeWithInt_(jint mode) {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  return mode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PEN || mode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE;
}

jint OrgGeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(jboolean bold, jint axesLineStyle) {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  if (bold) {
    return axesLineStyle | OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD;
  }
  return axesLineStyle & (~OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD);
}

jdouble OrgGeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithOrgGeogebraCommonAwtGFont_(OrgGeogebraCommonAwtGFont *fontAxes2) {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  return [((OrgGeogebraCommonUtilStringUtil *) nil_chk(OrgGeogebraCommonUtilStringUtil_get_prototype_())) estimateHeightWithNSString:@"" withOrgGeogebraCommonAwtGFont:fontAxes2];
}

jdouble OrgGeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withOrgGeogebraCommonAwtGFont_(OrgGeogebraCommonEuclidianEuclidianView *self, jdouble d, OrgGeogebraCommonAwtGFont *fontAxes2) {
  NSString *s = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatPiEWithDouble:d withOrgGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(self->axesNumberFormat_), 0) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  return [((OrgGeogebraCommonUtilStringUtil *) nil_chk(OrgGeogebraCommonUtilStringUtil_get_prototype_())) estimateLengthWithNSString:s withOrgGeogebraCommonAwtGFont:fontAxes2];
}

jdouble OrgGeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withOrgGeogebraCommonAwtGFont_(NSString *s, OrgGeogebraCommonAwtGFont *fontAxes2) {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  return [((OrgGeogebraCommonUtilStringUtil *) nil_chk(OrgGeogebraCommonUtilStringUtil_get_prototype_())) estimateLengthWithNSString:s withOrgGeogebraCommonAwtGFont:fontAxes2];
}

id<OrgGeogebraCommonEuclidianEuclidianStyleBar> OrgGeogebraCommonEuclidianEuclidianView_getStyleBar(OrgGeogebraCommonEuclidianEuclidianView *self) {
  if (self->styleBar_ == nil) {
    self->styleBar_ = [self newEuclidianStyleBar];
  }
  return self->styleBar_;
}

NSString *OrgGeogebraCommonEuclidianEuclidianView_getDraggedLabelsWithJavaUtilArrayList_(JavaUtilArrayList *list) {
  OrgGeogebraCommonEuclidianEuclidianView_initialize();
  if ([((JavaUtilArrayList *) nil_chk(list)) size] == 0) {
    return nil;
  }
  NSString *text = nil;
  if ([list size] == 1) {
    text = JreStrcat("$$$", @"FormulaText[", [list getWithInt:0], @", true, true]");
  }
  else {
    text = @"TableText[";
    for (jint i = 0; i < [list size]; i++) {
      text = JreStrcat("$$", text, JreStrcat("$$$", @"{FormulaText[", [list getWithInt:i], @", true, true]}"));
      if (i < [list size] - 1) {
        text = JreStrcat("$C", text, ',');
      }
    }
    text = JreStrcat("$C", text, ']');
  }
  return text;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianEuclidianView)
