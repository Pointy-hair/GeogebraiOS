//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/EuclidianController.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EnvironmentStyle.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianControllerCompanion.h"
#include "org/geogebra/common/euclidian/EuclidianPen.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian/Hits.h"
#include "org/geogebra/common/euclidian/MyButton.h"
#include "org/geogebra/common/euclidian/Previewable.h"
#include "org/geogebra/common/euclidian/TextDispatcher.h"
#include "org/geogebra/common/euclidian/draw/DrawConic.h"
#include "org/geogebra/common/euclidian/draw/DrawConicPart.h"
#include "org/geogebra/common/euclidian/draw/DrawSlider.h"
#include "org/geogebra/common/euclidian/event/AbstractEvent.h"
#include "org/geogebra/common/euclidian/event/PointerEventType.h"
#include "org/geogebra/common/euclidian/modes/ModeDelete.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/gui/view/data/PlotPanelEuclidianViewInterface.h"
#include "org/geogebra/common/javax/swing/GTextComponent.h"
#include "org/geogebra/common/kernel/AnimationManager.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/ModeSetter.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/Region.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/UndoManager.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoDynamicCoordinatesInterface.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "org/geogebra/common/kernel/algos/AlgoRadius.h"
#include "org/geogebra/common/kernel/algos/AlgoTranslate.h"
#include "org/geogebra/common/kernel/algos/AlgoVector.h"
#include "org/geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/Furniture.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoAxis.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoButton.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/geos/PointProperties.h"
#include "org/geogebra/common/kernel/geos/PointRotateable.h"
#include "org/geogebra/common/kernel/geos/Test.h"
#include "org/geogebra/common/kernel/geos/Transformable.h"
#include "org/geogebra/common/kernel/geos/Translateable.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoElementND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/kernel/kernelND/GeoRayND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitLineY.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/DialogManager.h"
#include "org/geogebra/common/main/Feature.h"
#include "org/geogebra/common/main/GeoElementSelectionListener.h"
#include "org/geogebra/common/main/GlobalKeyDispatcher.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/AsyncOperation.h"
#include "org/geogebra/common/util/MyMath.h"
#include "org/geogebra/common/util/Unicode.h"

#define OrgGeogebraCommonEuclidianEuclidianController_ZOOM_RECT_THRESHOLD 30
#define OrgGeogebraCommonEuclidianEuclidianController_DRAG_THRESHOLD 10
#define OrgGeogebraCommonEuclidianEuclidianController_INCREASED_THRESHOLD_FACTOR 2

@interface OrgGeogebraCommonEuclidianEuclidianController () {
 @public
  OrgGeogebraCommonEuclidianModesModeDelete *deleteMode_;
  OrgGeogebraCommonAwtGPoint2D_Double *startPoint_;
  jboolean externalHandling_;
  jlong lastMouseRelease_;
  jlong lastTouchRelease_;
  jboolean animationButtonPressed_;
  jboolean textfieldHasFocus__;
  OrgGeogebraCommonEuclidianMyButton *pressedButton_;
  OrgGeogebraCommonKernelMatrixCoords *tmpCoordsL4_;
  OrgGeogebraCommonKernelMatrixCoords *mouseLocRW_;
  OrgGeogebraCommonEuclidianTextDispatcher *textDispatcher_;
  jdouble initxRW_;
  jdouble initFactor_;
  jboolean checkBoxOrButtonJustHitted_;
  jboolean scriptsHaveRun_;
  jboolean doubleClickStarted_;
  OrgGeogebraCommonAwtGPoint *lastMouseUpLoc_;
  jboolean checkboxChangeOccured_;
  jlong lastMousePressedTime_;
  jboolean wheelZoomingOccurred_;
  OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *defaultEventType_;
  jboolean detachFromPath_, detachFromRegion_;
  jboolean needsAttach_;
}

- (IOSObjectArray *)segment;

+ (void)checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point;

- (jboolean)clearHighlightedGeos;

- (jdouble)getTransformCoordsOffsetWithInt:(jint)i;

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)CircleWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                                   withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)c;

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)CircleCompassesWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C;

- (void)addMovedGeoElementFreeInputPointsToTranslateableGeos;

- (jboolean)isCheckboxFixedWithOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)geoBool;

- (void)translateHitsByVectorWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type;

- (jboolean)needsAxisZoomWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
           withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event;

- (jboolean)shallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event;

- (jboolean)specialMoveEventWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event;

+ (jboolean)modeCreatesHelperPointsWithInt:(jint)mode2;

- (void)altClickedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type;

- (void)processRightReleasedWithBoolean:(jboolean)right
                            withBoolean:(jboolean)control
withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type;

- (void)moveAttachDetachWithBoolean:(jboolean)repaint
withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController, deleteMode_, OrgGeogebraCommonEuclidianModesModeDelete *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController, startPoint_, OrgGeogebraCommonAwtGPoint2D_Double *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController, pressedButton_, OrgGeogebraCommonEuclidianMyButton *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController, tmpCoordsL4_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController, mouseLocRW_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController, textDispatcher_, OrgGeogebraCommonEuclidianTextDispatcher *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController, lastMouseUpLoc_, OrgGeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController, defaultEventType_, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianController, ZOOM_RECT_THRESHOLD, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianController, DRAG_THRESHOLD, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianEuclidianController, INCREASED_THRESHOLD_FACTOR, jint)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, jboolean doUpdateSelection);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *result);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPoints(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedNumbers(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedLists(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolyLines(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithOrgGeogebraCommonKernelKernelNDGeoLineNDArray_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *lines);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *segments);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithOrgGeogebraCommonKernelKernelNDGeoVectorNDArray_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *vectors);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedConics(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedCircles(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedRegions(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPaths(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedCurves(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static id<OrgGeogebraCommonKernelKernelNDGeoPointND> OrgGeogebraCommonEuclidianEuclidianController_createNewPoint2DWithNSString_withBoolean_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, NSString *label, jboolean forPreviewable, id<OrgGeogebraCommonKernelRegion> region, jdouble x, jdouble y, jboolean complex, jboolean coords2D);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean highlight);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, id geo, jint max);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, JavaUtilArrayList *geos, jint max);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, JavaUtilArrayList *geos, jint max, jboolean addMoreThanOneAllowed, jboolean tryDeselect);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selGeos(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selPoints(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selNumbers(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selLists(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selPolyLines(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selPolygons(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selLines(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selSegments(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selVectors(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selConics(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selPaths(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selRegions(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selImplicitpoly(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selFunctions(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_selCurves(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedNumericWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_withOrgGeogebraCommonKernelGeosTestEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed, OrgGeogebraCommonKernelGeosTestEnum *geoClass);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedPathWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedRegionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolyLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedListWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedCurveWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_joinWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_segmentWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_segment(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_vectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_rayWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_polygonWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_polylineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_parallelWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND_(id<OrgGeogebraCommonKernelKernelNDGeoPointND> point);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_parabolaWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_midpointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_functionInspectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_lineBisectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_angularBisectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_threePointsWithOrgGeogebraCommonEuclidianHits_withInt_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint threePointsMode);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_relationWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_locusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_conic5WithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_tangentsWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_polarLineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_showHideLabelWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_copyVisualStyleWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_moveRotateWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_pointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_geoElementSelectedWithOrgGeogebraCommonEuclidianHits_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jboolean addToSelection);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_segmentFixedWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_angleFixedWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_circleOrSphere2WithOrgGeogebraCommonEuclidianHits_withInt_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint sphereMode);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_showHideObjectWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_textWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_slider(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_imageWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_mirrorAtPointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_mirrorAtLineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_mirrorAtCircleWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_attachDetachWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_translateByVectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_rotateByAngleWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_dilateFromPointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_fitLineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoLine *OrgGeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonEuclidianEuclidianController *self, NSString *label, OrgGeogebraCommonKernelGeosGeoList *list);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_createListWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(OrgGeogebraCommonEuclidianEuclidianController *self, jint i);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_areaWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_angleWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_distanceWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_showCheckBox(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_compassesWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static OrgGeogebraCommonKernelKernelNDGeoConicND *OrgGeogebraCommonEuclidianEuclidianController_CircleWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonEuclidianEuclidianController *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, OrgGeogebraCommonKernelKernelNDGeoQuadricND *c);

__attribute__((unused)) static OrgGeogebraCommonKernelKernelNDGeoConicND *OrgGeogebraCommonEuclidianEuclidianController_CircleCompassesWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonEuclidianEuclidianController *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_vectorFromPointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_circlePointRadiusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static id<OrgGeogebraCommonKernelKernelNDGeoPointND> OrgGeogebraCommonEuclidianEuclidianController_updateNewPointWithBoolean_withOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean forPreviewable, OrgGeogebraCommonEuclidianHits *hits, jboolean onPathPossible, jboolean inRegionPossible, jboolean intersectPossible, jboolean chooseGeo, jboolean complex);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jboolean onPathPossible, jboolean intersectPossible, jboolean doSingleHighlighting);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_macroWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, OrgGeogebraCommonUtilAsyncOperation *callback2);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean textfield);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_endOfSwitchModeForProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *ret, jboolean changedKernel, OrgGeogebraCommonUtilAsyncOperation *callback);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *processHits, jboolean isControlDown, OrgGeogebraCommonUtilAsyncOperation *callback);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_rotateObjectWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveLabel(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianController *self, jdouble x, jdouble y);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveVectorStartPointWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveTextWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveImageWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveConicWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveImplicitPolyWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveFreehandWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveFunctionWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveBooleanWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveButtonWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static jdouble OrgGeogebraCommonEuclidianEuclidianController_getSliderValueWithOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonKernelGeosGeoNumeric *movedSlider, jboolean click);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint, jboolean click);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveSliderWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveAttachedWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_handleMovedElementFreePoint(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_handleMovedElementFreeText(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_addMovedGeoElementFreeInputPointsToTranslateableGeos(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonKernelGeosGeoBoolean *geoBool);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithOrgGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventAbstractEvent *e, jboolean drag);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_translateHitsByVectorWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_mousePressedTranslatedViewWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_needsAxisZoomWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, OrgGeogebraCommonEuclidianEventAbstractEvent *event);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_shallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventAbstractEvent *event);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_specialMoveEventWithOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventAbstractEvent *event);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianEuclidianController_modeCreatesHelperPointsWithInt_(jint mode2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_altClickedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_processRightReleasedWithBoolean_withBoolean_withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean right, jboolean control, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type);

__attribute__((unused)) static OrgGeogebraCommonEuclidianEuclidianPen *OrgGeogebraCommonEuclidianEuclidianController_getPen(OrgGeogebraCommonEuclidianEuclidianController *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_twoTouchStartCommonWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianController *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_twoTouchMoveCommonWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianController *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_moveAttachDetachWithBoolean_withOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint, OrgGeogebraCommonEuclidianEventAbstractEvent *event);

@interface OrgGeogebraCommonEuclidianEuclidianController_$1 : OrgGeogebraCommonUtilAsyncOperation {
 @public
  OrgGeogebraCommonEuclidianEuclidianController *this$0_;
  OrgGeogebraCommonUtilAsyncOperation *val$callback2_;
}

- (void)callbackWithId:(id)num;

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                              withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonEuclidianEuclidianController_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$1, this$0_, OrgGeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$1, val$callback2_, OrgGeogebraCommonUtilAsyncOperation *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_$1_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController_$1 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0);

__attribute__((unused)) static OrgGeogebraCommonEuclidianEuclidianController_$1 *new_OrgGeogebraCommonEuclidianEuclidianController_$1_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonEuclidianEuclidianController_$1)

@interface OrgGeogebraCommonEuclidianEuclidianController_$2 : OrgGeogebraCommonUtilAsyncOperation {
 @public
  OrgGeogebraCommonEuclidianEuclidianController *this$0_;
  OrgGeogebraCommonUtilAsyncOperation *val$callback_;
}

- (void)callbackWithId:(id)arg;

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                              withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonEuclidianEuclidianController_$2)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$2, this$0_, OrgGeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$2, val$callback_, OrgGeogebraCommonUtilAsyncOperation *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_$2_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController_$2 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0);

__attribute__((unused)) static OrgGeogebraCommonEuclidianEuclidianController_$2 *new_OrgGeogebraCommonEuclidianEuclidianController_$2_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonEuclidianEuclidianController_$2)

@interface OrgGeogebraCommonEuclidianEuclidianController_$3 : OrgGeogebraCommonUtilAsyncOperation {
 @public
  OrgGeogebraCommonEuclidianEuclidianController *this$0_;
  OrgGeogebraCommonEuclidianHits *val$hits2_;
}

- (void)callbackWithId:(id)changedKernel;

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                                   withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonEuclidianEuclidianController_$3)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$3, this$0_, OrgGeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$3, val$hits2_, OrgGeogebraCommonEuclidianHits *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_$3_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController_$3 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonEuclidianHits *capture$0);

__attribute__((unused)) static OrgGeogebraCommonEuclidianEuclidianController_$3 *new_OrgGeogebraCommonEuclidianEuclidianController_$3_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonEuclidianHits *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonEuclidianEuclidianController_$3)

@interface OrgGeogebraCommonEuclidianEuclidianController_$4 : OrgGeogebraCommonUtilAsyncOperation {
 @public
  OrgGeogebraCommonEuclidianEuclidianController *this$0_;
  OrgGeogebraCommonUtilAsyncOperation *val$callback_;
}

- (void)callbackWithId:(id)ret;

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                              withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonEuclidianEuclidianController_$4)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$4, this$0_, OrgGeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$4, val$callback_, OrgGeogebraCommonUtilAsyncOperation *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_$4_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController_$4 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0);

__attribute__((unused)) static OrgGeogebraCommonEuclidianEuclidianController_$4 *new_OrgGeogebraCommonEuclidianEuclidianController_$4_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonEuclidianEuclidianController_$4)

@interface OrgGeogebraCommonEuclidianEuclidianController_$5 : OrgGeogebraCommonUtilAsyncOperation {
 @public
  OrgGeogebraCommonEuclidianEuclidianController *this$0_;
  OrgGeogebraCommonEuclidianHits *val$hits2_;
  OrgGeogebraCommonEuclidianEventAbstractEvent *val$event_;
}

- (void)callbackWithId:(id)arg;

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                                   withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)capture$0
                     withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonEuclidianEuclidianController_$5)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$5, this$0_, OrgGeogebraCommonEuclidianEuclidianController *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$5, val$hits2_, OrgGeogebraCommonEuclidianHits *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianEuclidianController_$5, val$event_, OrgGeogebraCommonEuclidianEventAbstractEvent *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianEuclidianController_$5_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController_$5 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonEuclidianHits *capture$0, OrgGeogebraCommonEuclidianEventAbstractEvent *capture$1);

__attribute__((unused)) static OrgGeogebraCommonEuclidianEuclidianController_$5 *new_OrgGeogebraCommonEuclidianEuclidianController_$5_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonEuclidianHits *capture$0, OrgGeogebraCommonEuclidianEventAbstractEvent *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonEuclidianEuclidianController_$5)

@implementation OrgGeogebraCommonEuclidianEuclidianController

+ (void)removeAxesWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  OrgGeogebraCommonEuclidianEuclidianController_removeAxesWithJavaUtilArrayList_(geos);
}

- (OrgGeogebraCommonEuclidianModesModeDelete *)getDeleteMode {
  if (deleteMode_ == nil && view_ != nil) {
    deleteMode_ = new_OrgGeogebraCommonEuclidianModesModeDelete_initWithOrgGeogebraCommonEuclidianEuclidianView_(view_);
  }
  return deleteMode_;
}

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonEuclidianEuclidianController_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)createCompanions {
  self->companion_ = [self newCompanion];
}

- (OrgGeogebraCommonEuclidianEuclidianControllerCompanion *)getCompanion {
  return companion_;
}

- (OrgGeogebraCommonEuclidianEuclidianControllerCompanion *)newCompanion {
  return new_OrgGeogebraCommonEuclidianEuclidianControllerCompanion_initWithOrgGeogebraCommonEuclidianEuclidianController_(self);
}

- (void)startCollectingMinorRepaints {
  if (collectingRepaints_ < 0) collectingRepaints_ = 0;
  if (collectingRepaints_ == 0) collectedRepaints_ = NO;
  collectingRepaints_++;
}

- (void)stopCollectingMinorRepaints {
  collectingRepaints_--;
  if (collectingRepaints_ <= 0 && collectedRepaints_) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) repaintView];
    collectingRepaints_ = 0;
    collectedRepaints_ = NO;
  }
}

- (void)updatePastePreviewPosition {
  if (translationVec_ == nil) {
    translationVec_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(2);
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(translationVec_)) setXWithDouble:xRW_ - [self getStartPointX]];
  [translationVec_ setYWithDouble:yRW_ - [self getStartPointY]];
  [self setStartPointLocationWithDouble:xRW_ withDouble:yRW_];
  if (tmpCoordsL3_ == nil) {
    tmpCoordsL3_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL3_)) setXWithDouble:xRW_];
  [tmpCoordsL3_ setYWithDouble:yRW_];
  [tmpCoordsL3_ setZWithDouble:0];
  OrgGeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonEuclidianEuclidianView_(pastePreviewSelected_, translationVec_, tmpCoordsL3_, nil, view_);
}

- (void)setPastePreviewSelected {
  if (pastePreviewSelected_ != nil) {
    while (![pastePreviewSelected_ isEmpty]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [pastePreviewSelected_ getWithInt:0];
      [pastePreviewSelected_ removeWithId:geo];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) remove];
    }
  }
  else {
    pastePreviewSelected_ = new_JavaUtilArrayList_init();
  }
  pastePreviewSelectedAndDependent_ = new_JavaUtilArrayList_init();
  [pastePreviewSelectedAndDependent_ addAllWithJavaUtilCollection:[self getAppSelectedGeos]];
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  jboolean firstMoveable = YES;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk([self getAppSelectedGeos])) size]; i++) {
    geo = [((JavaUtilArrayList *) nil_chk([self getAppSelectedGeos])) getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] && [geo isMoveable]) {
      [((JavaUtilArrayList *) nil_chk(pastePreviewSelected_)) addWithId:geo];
      if (firstMoveable) {
        if ([geo isGeoPoint]) {
          if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) {
            [self setStartPointLocationWithDouble:[((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class])) getInhomX] withDouble:[((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class])) getInhomY]];
          }
          else if ([geo isGeoElement3D]) {
            [self setStartPointLocationWithDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))) getInhomX] withDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))) getInhomY]];
          }
          firstMoveable = NO;
        }
        else if ([geo isGeoText]) {
          if ([((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) hasAbsoluteLocation]) {
            id<OrgGeogebraCommonKernelKernelNDGeoPointND> loc = [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) getStartPoint];
            [self setStartPointLocationWithDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(loc)) getInhomX] withDouble:[loc getInhomY]];
            firstMoveable = NO;
          }
        }
        else if ([geo isGeoNumeric]) {
          if (![((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isAbsoluteScreenLocActive]) {
            [self setStartPointLocationWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getRealWorldLocX] withDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getRealWorldLocY]];
            firstMoveable = NO;
          }
          else {
            [self setStartPointLocationWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getAbsoluteScreenLocX]] withDouble:[view_ toRealWorldCoordYWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getAbsoluteScreenLocY]]];
            firstMoveable = NO;
          }
        }
        else if ([geo isGeoImage]) {
          if ([((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class])) hasAbsoluteLocation]) {
            OrgGeogebraCommonKernelGeosGeoPoint *loc = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class])) getStartPoints]), 2);
            if (loc != nil) {
              [self setStartPointLocationWithDouble:loc->inhomX_ withDouble:loc->inhomY_];
              firstMoveable = NO;
            }
            else {
              loc = [((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class])) getStartPoint];
              if (loc != nil) {
                [self setStartPointLocationWithDouble:loc->inhomX_ withDouble:loc->inhomY_];
                firstMoveable = NO;
              }
              else {
                loc = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class])) getStartPoints]), 1);
                if (loc != nil) {
                  [self setStartPointLocationWithDouble:loc->inhomX_ withDouble:loc->inhomY_];
                  firstMoveable = NO;
                }
              }
            }
          }
        }
        else if ([geo isGeoBoolean]) {
          [self setStartPointLocationWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:[((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoBoolean class])) getAbsoluteScreenLocX]] withDouble:[view_ toRealWorldCoordYWithDouble:[((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoBoolean class])) getAbsoluteScreenLocY] + 20]];
          firstMoveable = NO;
        }
        else if ([OrgGeogebraCommonKernelGeosFurniture_class_() isInstance:geo]) {
          [self setStartPointLocationWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:[((id<OrgGeogebraCommonKernelGeosFurniture>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosFurniture))) getAbsoluteScreenLocX] - 5] withDouble:[view_ toRealWorldCoordYWithDouble:[((id<OrgGeogebraCommonKernelGeosFurniture>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosFurniture))) getAbsoluteScreenLocY] + 30]];
          firstMoveable = NO;
        }
      }
    }
  }
  if (firstMoveable) {
    [self setStartPointLocationWithDouble:([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXmin] + [view_ getXmax]) / 2 withDouble:([view_ getYmin] + [view_ getYmax]) / 2];
  }
  if ((pastePreviewSelected_ != nil) && ![pastePreviewSelected_ isEmpty]) {
    previousPointCapturing_ = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getPointCapturingMode];
    [view_ setPointCapturingWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS];
    for (jint i = 0; i < [pastePreviewSelectedAndDependent_ size]; i++) {
      geo = [pastePreviewSelectedAndDependent_ getWithInt:i];
      if ([OrgGeogebraCommonKernelKernelNDGeoPointND_class_() isInstance:geo]) {
        if ([((JavaUtilArrayList *) nil_chk([view_ getStickyPointList])) containsWithId:geo]) {
          [((JavaUtilArrayList *) nil_chk([view_ getStickyPointList])) removeWithId:geo];
        }
      }
    }
    persistentStickyPointList_ = new_JavaUtilArrayList_init();
    [persistentStickyPointList_ addAllWithJavaUtilCollection:[view_ getStickyPointList]];
    if (mouseLoc_ != nil) {
      [self transformCoords];
      [self updatePastePreviewPosition];
      [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    }
  }
}

- (jboolean)mayPaste {
  if (pastePreviewSelected_ == nil) {
    return YES;
  }
  return [((JavaUtilArrayList *) nil_chk(pastePreviewSelected_)) isEmpty];
}

- (void)deletePastePreviewSelected {
  if (pastePreviewSelected_ != nil) {
    while (![pastePreviewSelected_ isEmpty]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [pastePreviewSelected_ getWithInt:0];
      [pastePreviewSelected_ removeWithId:geo];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) remove];
    }
    pastePreviewSelected_ = nil;
  }
  if (pastePreviewSelectedAndDependent_ != nil) {
    pastePreviewSelectedAndDependent_ = nil;
  }
}

- (void)mergeStickyPointsAfterPaste {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(pastePreviewSelected_)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [pastePreviewSelected_ getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] && ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) && [geo isIndependent]) {
      for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(persistentStickyPointList_)) size]; j++) {
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> geo2 = [persistentStickyPointList_ getWithInt:j];
        if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(geo2)) getInhomX], [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class])) getInhomX]) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([geo2 getInhomY], [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class])) getInhomY])) {
          [geo setEuclidianVisibleWithBoolean:NO];
          NSString *geolabel = [geo getLabelSimple];
          (void) [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) processAlgebraCommandWithNSString:JreStrcat("$C$", [geo getLabelSimple], '=', [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo2, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelSimple]) withBoolean:NO];
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([kernel_ lookupLabelWithNSString:geolabel])) setEuclidianVisibleWithBoolean:NO];
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([kernel_ lookupLabelWithNSString:geolabel])) updateRepaint];
          break;
        }
      }
    }
  }
}

- (jint)getMode {
  return mode_;
}

- (jint)getMoveMode {
  return moveMode__;
}

- (void)endOfModeWithInt:(jint)endMode {
  {
    id<JavaUtilCollection> coll;
    id<JavaUtilIterator> it;
    switch (endMode) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
      [self deletePastePreviewSelected];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_OBJECT:
      coll = [self getAppSelectedGeos];
      it = [((id<JavaUtilCollection>) nil_chk(coll)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:NO];
        [geo updateRepaint];
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
      [((OrgGeogebraCommonEuclidianEuclidianPen *) nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getPen(self))) resetPenOffsets];
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
      break;
    }
  }
  if (toggleModeChangedKernel_) {
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  }
}

- (void)clearSelectionWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList
                                withBoolean:(jboolean)doUpdateSelection {
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectionList, doUpdateSelection);
}

- (void)clearSelectionWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList {
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectionList);
}

- (OrgGeogebraCommonEuclidianHits *)getRegionHitsWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getRegionHitsWithOrgGeogebraCommonEuclidianHits:tempArrayList_];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getSingleIntersectionPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] || ([hits size] < 2)) {
    return nil;
  }
  OrgGeogebraCommonKernelGeosGeoElement *a = [hits getWithInt:0];
  OrgGeogebraCommonKernelGeosGeoElement *b = [hits getWithInt:1];
  return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) getSingleIntersectionPointWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b withBoolean:YES];
}

- (IOSObjectArray *)getSelectedGeos {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
}

- (void)getSelectedPointsNDWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)result {
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, result);
}

- (IOSObjectArray *)getSelectedPointsND {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
}

- (IOSObjectArray *)getSelectedPoints {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedPoints(self);
}

- (IOSObjectArray *)getSelectedNumbers {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedNumbers(self);
}

- (IOSObjectArray *)getSelectedNumberValues {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedNumberValues_)) size] type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()];
  for (jint i = 0; i < [selectedNumberValues_ size]; i++) {
    (void) IOSObjectArray_Set(ret, i, [selectedNumberValues_ getWithInt:i]);
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectedNumberValues_);
  return ret;
}

- (IOSObjectArray *)getSelectedLists {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedLists(self);
}

- (IOSObjectArray *)getSelectedPolygons {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
}

- (IOSObjectArray *)getSelectedPolyLines {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolyLines(self);
}

- (void)getSelectedLinesNDWithOrgGeogebraCommonKernelKernelNDGeoLineNDArray:(IOSObjectArray *)lines {
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithOrgGeogebraCommonKernelKernelNDGeoLineNDArray_(self, lines);
}

- (IOSObjectArray *)getSelectedLinesND {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
}

- (IOSObjectArray *)getSelectedLines {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(self);
}

- (void)getSelectedSegmentsNDWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)segments {
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray_(self, segments);
}

- (IOSObjectArray *)getSelectedSegmentsND {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self);
}

- (IOSObjectArray *)getSelectedSegments {
  IOSObjectArray *segments = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedSegments_)) size] type:OrgGeogebraCommonKernelGeosGeoSegment_class_()];
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray_(self, segments);
  return segments;
}

- (void)getSelectedVectorsNDWithOrgGeogebraCommonKernelKernelNDGeoVectorNDArray:(IOSObjectArray *)vectors {
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithOrgGeogebraCommonKernelKernelNDGeoVectorNDArray_(self, vectors);
}

- (IOSObjectArray *)getSelectedVectorsND {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
}

- (IOSObjectArray *)getSelectedVectors {
  IOSObjectArray *vectors = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedVectors_)) size] type:OrgGeogebraCommonKernelGeosGeoVector_class_()];
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithOrgGeogebraCommonKernelKernelNDGeoVectorNDArray_(self, vectors);
  return vectors;
}

- (IOSObjectArray *)getSelectedConics {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedConics(self);
}

- (IOSObjectArray *)getSelectedCircles {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedCircles(self);
}

- (IOSObjectArray *)getSelectedCirclesND {
  IOSObjectArray *circles = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedConicsND_)) size] type:OrgGeogebraCommonKernelKernelNDGeoConicND_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [selectedConicsND_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelKernelNDGeoConicND *c = [it next];
    if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isCircle]) {
      (void) IOSObjectArray_Set(circles, i, c);
      i++;
    }
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectedConicsND_);
  return circles;
}

- (IOSObjectArray *)getSelectedConicsND {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
}

- (IOSObjectArray *)getSelectedDirections {
  IOSObjectArray *directions = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedDirections_)) size] type:OrgGeogebraCommonKernelKernelNDGeoDirectionND_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [selectedDirections_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(directions, i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectedDirections_);
  return directions;
}

- (IOSObjectArray *)getSelectedRegions {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedRegions(self);
}

- (IOSObjectArray *)getSelectedPaths {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedPaths(self);
}

- (IOSObjectArray *)getSelectedImplicitpoly {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self);
}

- (IOSObjectArray *)getSelectedFunctions {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
}

- (IOSObjectArray *)getSelectedCurves {
  return OrgGeogebraCommonEuclidianEuclidianController_getSelectedCurves(self);
}

- (jboolean)allowPointCreation {
  return (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER) || [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isOnTheFlyPointCreationActive];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)createNewPoint2DWithNSString:(NSString *)label
                                                                  withBoolean:(jboolean)forPreviewable
                                              withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                                                                   withDouble:(jdouble)x
                                                                   withDouble:(jdouble)y
                                                                  withBoolean:(jboolean)complex
                                                                  withBoolean:(jboolean)coords2D {
  [self checkZoomingWithBoolean:forPreviewable];
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PointWithNSString:label withOrgGeogebraCommonKernelPath:path withDouble:x withDouble:y withBoolean:!forPreviewable withBoolean:complex withBoolean:coords2D];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)createNewPoint2DWithNSString:(NSString *)label
                                                                  withBoolean:(jboolean)forPreviewable
                                            withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                                                                   withDouble:(jdouble)x
                                                                   withDouble:(jdouble)y
                                                                  withBoolean:(jboolean)complex
                                                                  withBoolean:(jboolean)coords2D {
  return OrgGeogebraCommonEuclidianEuclidianController_createNewPoint2DWithNSString_withBoolean_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_(self, label, forPreviewable, region, x, y, complex, coords2D);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithNSString:(NSString *)label
                                                                withBoolean:(jboolean)forPreviewable
                                          withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                                                                 withDouble:(jdouble)x
                                                                 withDouble:(jdouble)y
                                                                 withDouble:(jdouble)z
                                                                withBoolean:(jboolean)complex
                                                                withBoolean:(jboolean)coords2D {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelRegion>) nil_chk(region)) toGeoElement])) isGeoElement3D]) {
    [self checkZoomingWithBoolean:forPreviewable];
    if (tmpCoordsL4_ == nil) {
      tmpCoordsL4_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
    }
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL4_)) setXWithDouble:x];
    [tmpCoordsL4_ setYWithDouble:y];
    [tmpCoordsL4_ setZWithDouble:z];
    [tmpCoordsL4_ setWWithDouble:1];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Point3DInWithNSString:label withOrgGeogebraCommonKernelRegion:region withOrgGeogebraCommonKernelMatrixCoords:tmpCoordsL4_ withBoolean:!forPreviewable withBoolean:coords2D];
    return point;
  }
  return OrgGeogebraCommonEuclidianEuclidianController_createNewPoint2DWithNSString_withBoolean_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_(self, label, forPreviewable, region, x, y, complex, coords2D);
}

- (void)setKernelWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  self->kernel_ = kernel;
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (void)clearJustCreatedGeos {
  jboolean needsUpdate = [((JavaUtilArrayList *) nil_chk(justCreatedGeos_)) size] > 0;
  [justCreatedGeos_ clear];
  if (needsUpdate) {
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) updateStyleBars];
    if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
      [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) updateMenubarSelection];
    }
  }
}

- (JavaUtilArrayList *)getJustCreatedGeos {
  return justCreatedGeos_;
}

- (void)memorizeJustCreatedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  [((JavaUtilArrayList *) nil_chk(justCreatedGeos_)) clear];
  [justCreatedGeos_ addAllWithJavaUtilCollection:geos];
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
    [app_ updateStyleBars];
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) updateMenubarSelection];
  }
}

- (void)memorizeJustCreatedGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos {
  [((JavaUtilArrayList *) nil_chk(justCreatedGeos_)) clear];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
    if (IOSObjectArray_Get(geos, i) != nil) {
      [justCreatedGeos_ addWithId:IOSObjectArray_Get(geos, i)];
    }
  }
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
    [app_ updateStyleBars];
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) updateMenubarSelection];
  }
}

- (void)setHighlightedGeosWithBoolean:(jboolean)highlight {
  OrgGeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, highlight);
}

- (void)doSingleHighlightingWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == nil) {
    return;
  }
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) size] > 0) {
    OrgGeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, NO);
  }
  [highlightedGeos_ addWithId:geo];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setHighlightedWithBoolean:YES];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (jboolean)mouseIsOverLabel {
  return mouseIsOverLabel__;
}

- (void)removeParentPointsWithJavaUtilArrayList:(JavaUtilArrayList *)selGeos {
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
  [tempArrayList_ addAllWithJavaUtilCollection:selGeos];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selGeos)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selGeos getWithInt:i];
    {
      OrgGeogebraCommonKernelGeosGeoLine *line;
      OrgGeogebraCommonKernelGeosGeoConicPart *cp;
      JavaUtilArrayList *ip;
      OrgGeogebraCommonKernelGeosGeoPolygon *poly;
      IOSObjectArray *points;
      IOSObjectArray *segs;
      OrgGeogebraCommonKernelGeosGeoPolyLine *polyl;
      switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
        case OrgGeogebraCommonPluginGeoClass_SEGMENT:
        case OrgGeogebraCommonPluginGeoClass_RAY:
        line = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLine class]);
        [tempArrayList_ removeWithId:[line getStartPoint]];
        [tempArrayList_ removeWithId:[line getEndPoint]];
        break;
        case OrgGeogebraCommonPluginGeoClass_CONICPART:
        cp = (OrgGeogebraCommonKernelGeosGeoConicPart *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoConicPart class]);
        ip = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([cp getParentAlgorithm])) getInputPoints];
        [tempArrayList_ removeAllWithJavaUtilCollection:ip];
        break;
        case OrgGeogebraCommonPluginGeoClass_POLYGON:
        poly = (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolygon class]);
        points = [poly getPoints];
        for (jint k = 0; k < ((IOSObjectArray *) nil_chk(points))->size_; k++) {
          [tempArrayList_ removeWithId:IOSObjectArray_Get(points, k)];
        }
        segs = [poly getSegments];
        for (jint k = 0; k < ((IOSObjectArray *) nil_chk(segs))->size_; k++) {
          [tempArrayList_ removeWithId:IOSObjectArray_Get(segs, k)];
        }
        break;
        case OrgGeogebraCommonPluginGeoClass_PENSTROKE:
        case OrgGeogebraCommonPluginGeoClass_POLYLINE:
        polyl = (OrgGeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolyLine class]);
        points = [polyl getPoints];
        for (jint k = 0; k < ((IOSObjectArray *) nil_chk(points))->size_; k++) {
          [tempArrayList_ removeWithId:IOSObjectArray_Get(points, k)];
        }
        break;
      }
    }
  }
  [selGeos clear];
  [selGeos addAllWithJavaUtilCollection:tempArrayList_];
}

- (jint)addToSelectionListWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList
                                         withId:(id)geo
                                        withInt:(jint)max {
  return OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, geo, max);
}

- (jint)addToHighlightedListWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList
                            withJavaUtilArrayList:(JavaUtilArrayList *)geos
                                          withInt:(jint)max {
  return OrgGeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, selectionList, geos, max);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)chooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                              withBoolean:(jboolean)includeFixed {
  return [self chooseGeoWithJavaUtilArrayList:geos withBoolean:includeFixed withBoolean:YES];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)chooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                              withBoolean:(jboolean)includeFixed
                                                              withBoolean:(jboolean)includeConstants {
  if (geos == nil) {
    return nil;
  }
  if ([((JavaUtilArrayList *) nil_chk(geos)) size] > 1 || !includeConstants) {
    OrgGeogebraCommonEuclidianEuclidianController_removeAxesWithJavaUtilArrayList_(geos);
  }
  OrgGeogebraCommonKernelGeosGeoElement *ret = nil;
  OrgGeogebraCommonKernelGeosGeoElement *retFree = nil;
  OrgGeogebraCommonKernelGeosGeoElement *retPath = nil;
  OrgGeogebraCommonKernelGeosGeoElement *retIndex = nil;
  OrgGeogebraCommonKernelGeosGeoElement *retSegment = nil;
  {
    jint maxLayer;
    jint layerCount;
    jint pointCount;
    jint freePointCount;
    jint pointOnPathCount;
    jint segmentCount;
    jint minIndex;
    jboolean allFixed;
    switch ([geos size]) {
      case 0:
      break;
      case 1:
      ret = [geos getWithInt:0];
      if (!includeFixed && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) isFixed]) {
        return nil;
      }
      break;
      default:
      maxLayer = -1;
      layerCount = 0;
      for (jint i = 0; i < [geos size]; i++) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = ([geos getWithInt:i]);
        jint layer = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer];
        if ((layer > maxLayer) && (includeFixed || ![geo isFixed])) {
          maxLayer = layer;
          layerCount = 1;
          ret = geo;
        }
        else if (layer == maxLayer) {
          layerCount++;
        }
      }
      if (layerCount == 1) {
        return ret;
      }
      pointCount = 0;
      freePointCount = 0;
      pointOnPathCount = 0;
      segmentCount = 0;
      minIndex = JavaLangInteger_MAX_VALUE;
      for (jint i = 0; i < [geos size]; i++) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = ([geos getWithInt:i]);
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] && ([geo getLayer] == maxLayer) && (includeFixed || ![geo isFixed])) {
          pointCount++;
          ret = geo;
          jint index = [geo getConstructionIndex];
          if (index < minIndex) {
            minIndex = index;
            retIndex = geo;
          }
          if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))) isPointOnPath] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))) isPointInRegion]) {
            pointOnPathCount++;
            if (retPath == nil) {
              retPath = geo;
            }
            else {
              if ([geo getConstructionIndex] > [retPath getConstructionIndex]) {
                retPath = geo;
              }
            }
          }
          if ([geo isIndependent]) {
            freePointCount++;
            if (retFree == nil) {
              retFree = geo;
            }
            else {
              if ([geo getConstructionIndex] > [retFree getConstructionIndex]) {
                retFree = geo;
              }
            }
          }
        }
      }
      if (pointOnPathCount > 0) {
        return retPath;
      }
      if (freePointCount > 0) {
        return retFree;
      }
      if (pointCount == 1) {
        return ret;
      }
      if (pointCount > 1) {
        return retIndex;
      }
      allFixed = NO;
      if (!includeFixed && ([geos size] > 1)) {
        allFixed = YES;
        for (jint i = 0; i < [geos size]; i++) {
          if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([geos getWithInt:i])) isFixed]) {
            allFixed = NO;
          }
        }
        if (!allFixed) {
          for (jint i = [geos size] - 1; i >= 0; i--) {
            OrgGeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
            if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) {
              (void) [geos removeWithInt:i];
            }
          }
        }
        if ([geos size] == 1) {
          return [geos getWithInt:0];
        }
      }
      for (jint i = 0; i < [geos size]; i++) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = ([geos getWithInt:i]);
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoSegment]) {
          segmentCount++;
          if (retSegment == nil) {
            retSegment = geo;
          }
          else {
            if (([retSegment getLayer] < [geo getLayer]) || (([retSegment getLayer] == [geo getLayer]) && ([retSegment getConstructionIndex] > [geo getConstructionIndex]))) {
              retSegment = geo;
            }
          }
        }
      }
      if (segmentCount > 0) {
        return retSegment;
      }
      if (!includeFixed && allFixed) {
        return nil;
      }
      ret = [geos getWithInt:0];
      for (jint i = 0; i < [geos size]; i++) {
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([geos getWithInt:i])) drawBeforeWithOrgGeogebraCommonKernelGeosGeoElement:ret withBoolean:YES]) {
          ret = [geos getWithInt:i];
        }
      }
    }
  }
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)chooseGeoWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                               withOrgGeogebraCommonKernelGeosTestEnum:(OrgGeogebraCommonKernelGeosTestEnum *)geoclass {
  return [self chooseGeoWithJavaUtilArrayList:[((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithOrgGeogebraCommonKernelGeosTestEnum:geoclass withOrgGeogebraCommonEuclidianHits:tempArrayList_] withBoolean:YES];
}

- (jint)addToSelectionListWithJavaUtilArrayList:(JavaUtilArrayList *)selectionList
                          withJavaUtilArrayList:(JavaUtilArrayList *)geos
                                        withInt:(jint)max
                                    withBoolean:(jboolean)addMoreThanOneAllowed
                                    withBoolean:(jboolean)tryDeselect {
  return OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(self, selectionList, geos, max, addMoreThanOneAllowed, tryDeselect);
}

- (jint)selGeos {
  return OrgGeogebraCommonEuclidianEuclidianController_selGeos(self);
}

- (jint)selPoints {
  return OrgGeogebraCommonEuclidianEuclidianController_selPoints(self);
}

- (jint)selNumbers {
  return OrgGeogebraCommonEuclidianEuclidianController_selNumbers(self);
}

- (jint)selNumberValues {
  return [((JavaUtilArrayList *) nil_chk(selectedNumberValues_)) size];
}

- (jint)selLists {
  return OrgGeogebraCommonEuclidianEuclidianController_selLists(self);
}

- (jint)selPolyLines {
  return OrgGeogebraCommonEuclidianEuclidianController_selPolyLines(self);
}

- (jint)selPolygons {
  return OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self);
}

- (jint)selLines {
  return OrgGeogebraCommonEuclidianEuclidianController_selLines(self);
}

- (jint)selDirections {
  return [((JavaUtilArrayList *) nil_chk(selectedDirections_)) size];
}

- (jint)selSegments {
  return OrgGeogebraCommonEuclidianEuclidianController_selSegments(self);
}

- (jint)selVectors {
  return OrgGeogebraCommonEuclidianEuclidianController_selVectors(self);
}

- (jint)selConics {
  return OrgGeogebraCommonEuclidianEuclidianController_selConics(self);
}

- (jint)selPaths {
  return OrgGeogebraCommonEuclidianEuclidianController_selPaths(self);
}

- (jint)selRegions {
  return OrgGeogebraCommonEuclidianEuclidianController_selRegions(self);
}

- (jint)selImplicitpoly {
  return OrgGeogebraCommonEuclidianEuclidianController_selImplicitpoly(self);
}

- (jint)selFunctions {
  return OrgGeogebraCommonEuclidianEuclidianController_selFunctions(self);
}

- (jint)selCurves {
  return OrgGeogebraCommonEuclidianEuclidianController_selCurves(self);
}

- (jint)handleAddSelectedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)addMore
                                      withJavaUtilArrayList:(JavaUtilArrayList *)list
                    withOrgGeogebraCommonKernelGeosTestEnum:(OrgGeogebraCommonKernelGeosTestEnum *)geoClass {
  if (selectionPreview_) {
    return OrgGeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, list, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithOrgGeogebraCommonKernelGeosTestEnum:geoClass withOrgGeogebraCommonEuclidianHits:handleAddSelectedArrayList_], max);
  }
  return OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(self, list, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithOrgGeogebraCommonKernelGeosTestEnum:geoClass withOrgGeogebraCommonEuclidianHits:handleAddSelectedArrayList_], max, addMore, [hits size] == 1);
}

- (jint)handleAddSelectedRegionsWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                           withInt:(jint)max
                                                       withBoolean:(jboolean)addMore
                                             withJavaUtilArrayList:(JavaUtilArrayList *)list {
  if (selectionPreview_) {
    return OrgGeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, list, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getRegionHitsWithOrgGeogebraCommonEuclidianHits:handleAddSelectedArrayList_], max);
  }
  return OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(self, list, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getRegionHitsWithOrgGeogebraCommonEuclidianHits:handleAddSelectedArrayList_], max, addMore, [hits size] == 1);
}

- (jint)addSelectedGeoWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                 withInt:(jint)max
                                             withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                   withInt:(jint)max
                                               withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedNumericWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                     withInt:(jint)max
                                                 withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedNumericWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedNumberValueWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                         withInt:(jint)max
                                                     withBoolean:(jboolean)addMoreThanOneAllowed {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedNumberValues_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_NUMBERVALUE()];
}

- (jint)addSelectedLineWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedSegmentWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                     withInt:(jint)max
                                                 withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedVectorWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedVectorWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)addMoreThanOneAllowed
                    withOrgGeogebraCommonKernelGeosTestEnum:(OrgGeogebraCommonKernelGeosTestEnum *)geoClass {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_withOrgGeogebraCommonKernelGeosTestEnum_(self, hits, max, addMoreThanOneAllowed, geoClass);
}

- (jint)addSelectedPathWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedPathWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedRegionWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedRegionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedImplicitpolyWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                          withInt:(jint)max
                                                      withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedPolygonWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                     withInt:(jint)max
                                                 withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedPolyLineWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                      withInt:(jint)max
                                                  withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolyLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedListWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedListWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedDirectionWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                       withInt:(jint)max
                                                   withBoolean:(jboolean)addMoreThanOneAllowed {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedDirections_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEODIRECTIONND()];
}

- (jint)addSelectedCircleWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)addMoreThanOneAllowed {
  JavaUtilArrayList *selectedCircles = new_JavaUtilArrayList_init();
  for (id __strong c in nil_chk(selectedConicsND_)) {
    if ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(c, [OrgGeogebraCommonKernelGeosGeoConic class])))) isCircle]) {
      [selectedCircles addWithId:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(c, [OrgGeogebraCommonKernelGeosGeoConic class])];
    }
  }
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedCircles withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOCONIC()];
}

- (jint)addSelectedConicWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                   withInt:(jint)max
                                               withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedFunctionWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                      withInt:(jint)max
                                                  withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)addSelectedCurveWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                   withInt:(jint)max
                                               withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedCurveWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (void)createNewPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)sourcePoint {
}

- (void)createNewPointIntersectionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)intersectionPoint {
}

- (IOSObjectArray *)joinWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_joinWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)join {
  IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    (void) IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Line3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]);
  }
  else {
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) LineWithNSString:nil withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [OrgGeogebraCommonKernelGeosGeoPoint class])]);
  }
  return ret;
}

- (void)updateMovedGeoPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  movedGeoPoint_ = point;
}

- (IOSObjectArray *)ray {
  IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    (void) IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelKernelNDGeoRayND>) nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Ray3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)])) toGeoElement]);
  }
  else {
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) RayWithNSString:nil withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [OrgGeogebraCommonKernelGeosGeoPoint class])]);
  }
  return ret;
}

- (IOSObjectArray *)segmentWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_segmentWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)segment {
  return OrgGeogebraCommonEuclidianEuclidianController_segment(self);
}

- (IOSObjectArray *)vectorWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_vectorWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)vectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)a
                                                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)b {
  [self checkZooming];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(b, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Vector3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:a withOrgGeogebraCommonKernelKernelNDGeoPointND:b];
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) VectorWithNSString:nil withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(b, [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

- (IOSObjectArray *)rayWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_rayWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)polygonWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_polygonWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)polylineWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_polylineWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)polygon {
  [self checkZooming];
  if (polygonMode_ == OrgGeogebraCommonEuclidianEuclidianController_POLYGON_RIGID) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *ret0 = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) RigidPolygonWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)];
    if (ret0 != nil) {
      (void) IOSObjectArray_Set(ret, 0, IOSObjectArray_Get(ret0, 0));
    }
    return ret;
  }
  else if (polygonMode_ == OrgGeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *ret0 = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) VectorPolygonWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)];
    if (ret0 != nil) {
      (void) IOSObjectArray_Set(ret, 0, IOSObjectArray_Get(ret0, 0));
    }
    return ret;
  }
  else {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *ret0 = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) PolygonWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)];
    if (ret0 != nil) {
      (void) IOSObjectArray_Set(ret, 0, IOSObjectArray_Get(ret0, 0));
    }
    return ret;
  }
}

- (IOSObjectArray *)intersectWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)intersectHits {
  OrgGeogebraCommonEuclidianHits *hits = intersectHits;
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size] > 2) {
    OrgGeogebraCommonEuclidianEuclidianController_removeAxesWithJavaUtilArrayList_(hits);
  }
  if ([hits isEmpty]) {
    return nil;
  }
  jboolean singlePointWanted = OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 0;
  if (!selectionPreview_ && ([hits size] > (2 - OrgGeogebraCommonEuclidianEuclidianController_selGeos(self)))) {
    OrgGeogebraCommonEuclidianHits *goodHits = new_OrgGeogebraCommonEuclidianHits_init();
    (void) [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOLINEND() withOrgGeogebraCommonEuclidianHits:tempArrayList_];
    [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    if ([goodHits size] < 2) {
      (void) [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOCONICND() withOrgGeogebraCommonEuclidianHits:tempArrayList_];
      [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    }
    if ([goodHits size] < 2) {
      (void) [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOFUNCTION() withOrgGeogebraCommonEuclidianHits:tempArrayList_];
      [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    }
    if ([goodHits size] < 2) {
      (void) [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOLYGON() withOrgGeogebraCommonEuclidianHits:tempArrayList_];
      [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    }
    if ([goodHits size] < 2) {
      (void) [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOLYLINE() withOrgGeogebraCommonEuclidianHits:tempArrayList_];
      [goodHits addAllWithJavaUtilCollection:tempArrayList_];
    }
    hits = goodHits;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolyLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedCurveWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 10, YES);
  singlePointWanted = (singlePointWanted && (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) >= 2));
  if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) >= 2) {
    IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    [self checkZooming];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinesWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)];
    OrgGeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND_(point);
    return [IOSObjectArray newArrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) >= 2) {
    IOSObjectArray *conics = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    if (singlePointWanted) {
      [self checkZooming];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectConicsSingleWithNSString:nil withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(nil_chk(conics), 0), [OrgGeogebraCommonKernelGeosGeoConic class]) withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(conics, 1), [OrgGeogebraCommonKernelGeosGeoConic class]) withDouble:xRW_ withDouble:yRW_]);
      OrgGeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND_((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(ret, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
    }
    else {
      ret = (IOSObjectArray *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectConicsWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(conics, 1)], [IOSObjectArray class]);
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ret))->size_; i++) {
        OrgGeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND_((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(ret, i), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
      }
    }
    return ret;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selFunctions(self) >= 2) {
    IOSObjectArray *fun = OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
    jboolean polynomials = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun), 0))) isPolynomialFunctionWithBoolean:NO] && [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(fun, 1))) isPolynomialFunctionWithBoolean:NO];
    if (!polynomials) {
      OrgGeogebraCommonKernelGeosGeoPoint *initPoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
      [initPoint setCoordsWithDouble:xRW_ withDouble:yRW_ withDouble:1.0];
      [self checkZooming];
      return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionsWithNSString:nil withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 1) withOrgGeogebraCommonKernelGeosGeoPoint:initPoint] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    if (singlePointWanted) {
      [self checkZooming];
      return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialsSingleWithNSString:nil withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 1) withDouble:xRW_ withDouble:yRW_] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialsWithNSStringArray:nil withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 1)];
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) >= 1)) {
    IOSObjectArray *conic = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
    IOSObjectArray *line = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    if (singlePointWanted) {
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicSingleWithNSString:nil withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(line), 0), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(nil_chk(conic), 0), [OrgGeogebraCommonKernelGeosGeoConic class]) withDouble:xRW_ withDouble:yRW_]);
      OrgGeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND_((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(ret, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
    }
    else {
      ret = (IOSObjectArray *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(line), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conic), 0)], [IOSObjectArray class]);
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ret))->size_; i++) {
        OrgGeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND_((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(ret, i), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
      }
    }
    return ret;
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (OrgGeogebraCommonEuclidianEuclidianController_selPolyLines(self) >= 1)) {
    OrgGeogebraCommonKernelGeosGeoLine *line = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
    OrgGeogebraCommonKernelGeosGeoPolyLine *polyLine = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolyLines(self)), 0);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolyLineWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelGeosGeoLine:line withOrgGeogebraCommonKernelGeosGeoPolyLine:polyLine];
    return ret;
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (OrgGeogebraCommonEuclidianEuclidianController_selCurves(self) >= 1)) {
    OrgGeogebraCommonKernelGeosGeoLine *line = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
    OrgGeogebraCommonKernelGeosGeoCurveCartesian *curve = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedCurves(self)), 0);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineCurveWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelGeosGeoLine:line withOrgGeogebraCommonKernelGeosGeoCurveCartesian:curve];
    return ret;
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selCurves(self) >= 2)) {
    IOSObjectArray *curves = OrgGeogebraCommonEuclidianEuclidianController_getSelectedCurves(self);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    if (singlePointWanted) {
      ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectCurveCurveSingleWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(nil_chk(curves), 0) withOrgGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(curves, 1) withDouble:xRW_ withDouble:yRW_];
    }
    else {
      ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectCurveCurveWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(nil_chk(curves), 0) withOrgGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(curves, 1)];
    }
    return ret;
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) >= 1)) {
    OrgGeogebraCommonKernelGeosGeoLine *line = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
    OrgGeogebraCommonKernelGeosGeoPolygon *polygon = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self)), 0);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolygonWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelGeosGeoLine:line withOrgGeogebraCommonKernelGeosGeoPolygon:polygon];
    return ret;
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) && (OrgGeogebraCommonEuclidianEuclidianController_selFunctions(self) >= 1)) {
    IOSObjectArray *line = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(self);
    IOSObjectArray *fun = OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun), 0))) isPolynomialFunctionWithBoolean:NO]) {
      if (singlePointWanted) {
        (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialLineSingleWithNSString:nil withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withOrgGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(nil_chk(line), 0) withDouble:xRW_ withDouble:yRW_]);
      }
      else {
        ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialLineWithNSStringArray:nil withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withOrgGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(nil_chk(line), 0)];
      }
    }
    else {
      OrgGeogebraCommonKernelGeosGeoPoint *initPoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
      [initPoint setCoordsWithDouble:xRW_ withDouble:yRW_ withDouble:1.0];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionLineWithNSString:nil withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(fun, 0) withOrgGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(nil_chk(line), 0) withOrgGeogebraCommonKernelGeosGeoPoint:initPoint]);
    }
    return ret;
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selFunctions(self) >= 1) && (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) >= 1)) {
    IOSObjectArray *conic = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConics(self);
    IOSObjectArray *fun = OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
    [self checkZooming];
    if (singlePointWanted) {
      return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialConicSingleWithNSString:nil withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(nil_chk(fun), 0) withOrgGeogebraCommonKernelGeosGeoConic:IOSObjectArray_Get(nil_chk(conic), 0) withDouble:xRW_ withDouble:yRW_] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialConicWithNSStringArray:nil withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(nil_chk(fun), 0) withOrgGeogebraCommonKernelGeosGeoConic:IOSObjectArray_Get(nil_chk(conic), 0)];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selImplicitpoly(self) >= 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selFunctions(self) >= 1) {
      OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self)), 0);
      OrgGeogebraCommonKernelGeosGeoFunction *fun = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self)), 0);
      [self checkZooming];
      if (singlePointWanted) {
        return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyPolynomialSingleWithNSString:nil withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoFunction:fun withDouble:xRW_ withDouble:yRW_] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyPolynomialWithNSStringArray:nil withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoFunction:fun];
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) {
      OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self)), 0);
      OrgGeogebraCommonKernelGeosGeoLine *l = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
      [self checkZooming];
      if (singlePointWanted) {
        return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyLineSingleWithNSString:nil withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoLine:l withDouble:xRW_ withDouble:yRW_] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyLineWithNSStringArray:nil withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoLine:l];
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) >= 1) {
      OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self)), 0);
      OrgGeogebraCommonKernelGeosGeoConic *c = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedConics(self)), 0);
      [self checkZooming];
      if (singlePointWanted) {
        return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyConicSingleWithNSString:nil withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoConic:c withDouble:xRW_ withDouble:yRW_] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyConicWithNSStringArray:nil withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoConic:c];
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selImplicitpoly(self) >= 2) {
      IOSObjectArray *p = OrgGeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self);
      [self checkZooming];
      if (singlePointWanted) {
        return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolysSingleWithNSString:nil withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:IOSObjectArray_Get(nil_chk(p), 0) withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:IOSObjectArray_Get(p, 1) withDouble:xRW_ withDouble:yRW_] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolysWithNSStringArray:nil withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:IOSObjectArray_Get(nil_chk(p), 0) withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:IOSObjectArray_Get(p, 1)];
    }
  }
  return nil;
}

- (IOSObjectArray *)parallelWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_parallelWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

+ (void)checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND_(point);
}

- (IOSObjectArray *)parabolaWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_parabolaWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)orthogonalWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  return [self orthogonalWithOrgGeogebraCommonEuclidianHits:hits withBoolean:hitPoint];
}

- (IOSObjectArray *)orthogonalWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                     withBoolean:(jboolean)hitPoint {
  if (!hitPoint) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_withOrgGeogebraCommonKernelGeosTestEnum_(self, hits, 1, NO, OrgGeogebraCommonKernelGeosTestEnum_get_GEOVECTOR());
    }
    if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *vectors = OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
        return nil;
      }
      [self checkZooming];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) OrthogonalLineWithNSString:nil withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(nil_chk(vectors), 0), [OrgGeogebraCommonKernelGeosGeoVector class])]);
      return ret;
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) orthogonalWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)];
    }
  }
  return nil;
}

- (IOSObjectArray *)midpointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_midpointWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)functionInspectorWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_functionInspectorWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)lineBisectorWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_lineBisectorWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)angularBisectorWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_angularBisectorWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)threePointsWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                          withInt:(jint)threePointsMode {
  return OrgGeogebraCommonEuclidianEuclidianController_threePointsWithOrgGeogebraCommonEuclidianHits_withInt_(self, hits, threePointsMode);
}

- (IOSObjectArray *)switchModeForThreePointsWithInt:(jint)threePointsMode {
  IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  switch (threePointsMode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    [self checkZooming];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 2), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
      (void) IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Circle3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)]);
    }
    else {
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) CircleWithNSString:nil withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 2), [OrgGeogebraCommonKernelGeosGeoPoint class])]);
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) ellipseHyperbolaWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2) withInt:OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE]);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) ellipseHyperbolaWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2) withInt:OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA]);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) circumcircleArcWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)]);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) circumcircleSectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)]);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) circleArcSectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2) withInt:OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC]);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) circleArcSectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2) withInt:OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR]);
    break;
    default:
    return nil;
  }
  return ret;
}

- (jboolean)relationWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_relationWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)locusWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_locusWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)conic5WithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_conic5WithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)slopeWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
    OrgGeogebraCommonKernelGeosGeoLine *line = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(self)), 0);
    return [((OrgGeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createSlopeTextWithOrgGeogebraCommonKernelGeosGeoLine:line withOrgGeogebraCommonAwtGPoint:mouseLoc_];
  }
  return nil;
}

- (IOSObjectArray *)tangentsWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_tangentsWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)deleteAllWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  for (jint i = 0; i < [hits size]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:i])) removeOrSetUndefinedIfHasFixedDescendent];
  }
  return YES;
}

- (IOSObjectArray *)polarLineWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_polarLineWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)showHideLabelWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_showHideLabelWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)copyVisualStyleWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_copyVisualStyleWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonAwtGPoint *)getMouseLoc {
  return mouseLoc_;
}

- (void)textfieldHasFocusWithBoolean:(jboolean)hasFocus {
  textfieldHasFocus__ = hasFocus;
}

- (jboolean)checkBoxOrTextfieldOrButtonJustHitted {
  return checkBoxOrButtonJustHitted_ || [self isTextfieldHasFocus];
}

- (void)initToolTipManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initShowMouseCoords {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:(mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE)];
}

- (void)wrapMouseEntered {
  if ([self isTextfieldHasFocus]) {
    return;
  }
  [self initToolTipManager];
  [self initShowMouseCoords];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) mouseEntered];
}

- (jboolean)getSelectablesWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getSelectableHits], 1, NO);
  return NO;
}

- (jboolean)moveRotateWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_moveRotateWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)pointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_pointWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)geoElementSelectedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                     withBoolean:(jboolean)addToSelection {
  return OrgGeogebraCommonEuclidianEuclidianController_geoElementSelectedWithOrgGeogebraCommonEuclidianHits_withBoolean_(self, hits, addToSelection);
}

- (jboolean)segmentFixedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_segmentFixedWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)angleFixedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_angleFixedWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)switchModeForCircleOrSphere2WithInt:(jint)sphereMode {
  [self checkZooming];
  IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  if (sphereMode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE) {
    return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) semicircleWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) createCircle2WithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
}

- (IOSObjectArray *)circleOrSphere2WithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                              withInt:(jint)sphereMode {
  return OrgGeogebraCommonEuclidianEuclidianController_circleOrSphere2WithOrgGeogebraCommonEuclidianHits_withInt_(self, hits, sphereMode);
}

- (jboolean)showHideObjectWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_showHideObjectWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)textWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_textWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)isAltDown {
  return altDown_;
}

- (void)setAltDownWithBoolean:(jboolean)altDown {
  self->altDown_ = altDown;
}

- (jboolean)slider {
  return OrgGeogebraCommonEuclidianEuclidianController_slider(self);
}

- (jboolean)imageWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_imageWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)mirrorAtPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_mirrorAtPointWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)mirrorAtLineWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_mirrorAtLineWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)mirrorAtCircleWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_mirrorAtCircleWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)clearHighlightedGeos {
  return OrgGeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(self);
}

- (jboolean)refreshHighlightingWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                      withBoolean:(jboolean)isControlDown {
  OrgGeogebraCommonEuclidianHits *oldHighlightedGeos = [((OrgGeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) clone];
  jboolean repaintNeeded = OrgGeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(self);
  selectionPreview_ = YES;
  OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, hits, isControlDown, nil);
  if (highlightJustCreatedGeos_) {
    [highlightedGeos_ addAllWithJavaUtilCollection:justCreatedGeos_];
  }
  selectionPreview_ = NO;
  if ([highlightedGeos_ size] > 0) {
    OrgGeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, YES);
    repaintNeeded = YES;
  }
  if (!repaintNeeded) return NO;
  else if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(oldHighlightedGeos)) size] == [highlightedGeos_ size] && [oldHighlightedGeos containsAllWithJavaUtilCollection:highlightedGeos_]) return NO;
  return YES;
}

- (jboolean)highlightWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  jboolean repaintNeeded = OrgGeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(self);
  if (geo != nil) {
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) addWithId:geo];
    OrgGeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, YES);
    repaintNeeded = YES;
  }
  return repaintNeeded;
}

- (jboolean)highlightWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  jboolean repaintNeeded = OrgGeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(self);
  if (geos != nil && [geos size] > 0) {
    for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in geos) [((OrgGeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) addWithId:geo];
    OrgGeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, YES);
    repaintNeeded = YES;
  }
  return repaintNeeded;
}

- (void)clearSelections {
  [self clearSelectionsWithBoolean:YES withBoolean:YES];
}

- (void)clearSelectionsWithBoolean:(jboolean)repaint
                       withBoolean:(jboolean)updateSelection {
  [self startCollectingMinorRepaints];
  [self clearSelected];
  [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:repaint withBoolean:updateSelection];
  [self clearJustCreatedGeos];
  [self refreshHighlightingWithOrgGeogebraCommonEuclidianHits:nil withBoolean:NO];
  [self stopCollectingMinorRepaints];
}

- (void)clearSelected {
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedNumbers_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedNumberValues_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedPoints_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedLines_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedSegments_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedConicsND_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedVectors_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedPolygons_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedGeos_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedFunctions_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedCurves_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedLists_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedPaths_, NO);
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectedRegions_, NO);
}

- (jboolean)attachDetachWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_attachDetachWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMouseLocRW {
  if (mouseLocRW_ == nil) {
    mouseLocRW_ = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
  }
  if (mouseLoc_ == nil) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(mouseLocRW_)) setXWithDouble:0];
    [mouseLocRW_ setYWithDouble:0];
  }
  else {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(mouseLocRW_)) setXWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:mouseLoc_->x_]];
    [mouseLocRW_ setYWithDouble:[view_ toRealWorldCoordYWithDouble:mouseLoc_->y_]];
  }
  return mouseLocRW_;
}

- (IOSObjectArray *)translateByVectorWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_translateByVectorWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)rotateByAngleWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_rotateByAngleWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)dilateFromPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_dilateFromPointWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)fitLineWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_fitLineWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonKernelGeosGeoLine *)FitLineYWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list {
  return OrgGeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, label, list);
}

- (IOSObjectArray *)createListWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_createListWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (void)calcRWcoords {
  xRW_ = (((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXZero]) * [view_ getInvXscale];
  yRW_ = ([view_ getYZero] - mouseLoc_->y_) * [view_ getInvYscale];
}

- (void)setMouseLocationWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  [self setMouseLocationWithBoolean:[((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isAltDown] withInt:[event getX] withInt:[event getY]];
}

- (void)setMouseLocationWithBoolean:(jboolean)alt
                            withInt:(jint)x
                            withInt:(jint)y {
  mouseLoc_ = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(x, y);
  [self setAltDownWithBoolean:alt];
  if (mouseLoc_->x_ < 0) {
    mouseLoc_->x_ = 0;
  }
  else if (mouseLoc_->x_ > [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getViewWidth]) {
    mouseLoc_->x_ = [view_ getViewWidth];
  }
  if (mouseLoc_->y_ < 0) {
    mouseLoc_->y_ = 0;
  }
  else if (mouseLoc_->y_ > [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getViewHeight]) {
    mouseLoc_->y_ = [view_ getViewHeight];
  }
}

- (jfloat)getPointCapturingPercentage {
  return OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_GRID;
}

- (void)transformCoords {
  [self calcRWcoords];
  if (((mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE)) && useLineEndPoint_ && (lineEndPoint_ != nil)) {
    xRW_ = lineEndPoint_->x_;
    yRW_ = lineEndPoint_->y_;
    return;
  }
  if ((mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) && ((moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_NUMERIC) || (moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID) || (moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET))) {
    return;
  }
  jdouble pointCapturingPercentage = 1;
  {
    JavaUtilArrayList *spl;
    jboolean captured;
    switch ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getPointCapturingMode]) {
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS:
      pointCapturingPercentage = 0.125;
      spl = [view_ getStickyPointList];
      captured = NO;
      if (spl != nil) {
        for (jint i = 0; i < [spl size]; i++) {
          OrgGeogebraCommonKernelGeosGeoPoint *gp = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([spl getWithInt:i], [OrgGeogebraCommonKernelGeosGeoPoint class]);
          if ((JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(gp)) getInhomX] - xRW_) < ([view_ getGridDistancesWithInt:0] * pointCapturingPercentage)) && (JavaLangMath_absWithDouble_([gp getInhomY] - yRW_) < ([view_ getGridDistancesWithInt:1] * pointCapturingPercentage))) {
            xRW_ = [gp getInhomX];
            yRW_ = [gp getInhomY];
            captured = YES;
            break;
          }
        }
      }
      if (captured) {
        break;
      }
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC:
      if (![view_ isGridOrAxesShown]) {
        break;
      }
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON:
      pointCapturingPercentage = [self getPointCapturingPercentage];
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID:
      xRW_ += OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
      yRW_ += OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
      {
        jdouble root3;
        jdouble isoGrid;
        jint oddOrEvenRow;
        jdouble x;
        jdouble y;
        jdouble a;
        jdouble b;
        jdouble r;
        jdouble r2;
        jdouble angle;
        jdouble angleOffset;
        jdouble x1;
        jdouble y1;
        jdouble a1;
        jdouble b1;
        switch ([view_ getGridType]) {
          case OrgGeogebraCommonEuclidianEuclidianView_GRID_ISOMETRIC:
          root3 = JavaLangMath_sqrtWithDouble_(3.0);
          isoGrid = [view_ getGridDistancesWithInt:0];
          oddOrEvenRow = (jint) JavaLangMath_roundWithDouble_((2.0 * JavaLangMath_absWithDouble_(yRW_ - OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(yRW_, isoGrid))) / isoGrid);
          if (oddOrEvenRow == 0) {
            jdouble x = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(xRW_ / root3, isoGrid);
            jdouble y = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(yRW_, isoGrid);
            jdouble a = JavaLangMath_absWithDouble_(x - (xRW_ / root3));
            jdouble b = JavaLangMath_absWithDouble_(y - yRW_);
            if ((a < (isoGrid * pointCapturingPercentage)) && (b < (isoGrid * pointCapturingPercentage))) {
              xRW_ = (x * root3) - OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
              yRW_ = y - OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
            }
            else {
              xRW_ -= OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
              yRW_ -= OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
            }
          }
          else {
            jdouble x = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_((xRW_ / root3) - ([view_ getGridDistancesWithInt:0] / 2), isoGrid);
            jdouble y = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(yRW_ - (isoGrid / 2), isoGrid);
            jdouble a = JavaLangMath_absWithDouble_(x - ((xRW_ / root3) - (isoGrid / 2)));
            jdouble b = JavaLangMath_absWithDouble_(y - (yRW_ - (isoGrid / 2)));
            if ((a < (isoGrid * pointCapturingPercentage)) && (b < (isoGrid * pointCapturingPercentage))) {
              xRW_ = ((x + (isoGrid / 2)) * root3) - OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
              yRW_ = (y + (isoGrid / 2)) - OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
            }
            else {
              xRW_ -= OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
              yRW_ -= OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
            }
          }
          break;
          case OrgGeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN:
          x = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(xRW_, [view_ getGridDistancesWithInt:0]);
          y = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(yRW_, [view_ getGridDistancesWithInt:1]);
          a = JavaLangMath_absWithDouble_(x - xRW_);
          b = JavaLangMath_absWithDouble_(y - yRW_);
          if ((a < ([view_ getGridDistancesWithInt:0] * pointCapturingPercentage)) && (b < ([view_ getGridDistancesWithInt:1] * pointCapturingPercentage))) {
            xRW_ = x - OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
            yRW_ = y - OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
          }
          else {
            xRW_ -= OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
            yRW_ -= OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
          }
          break;
          case OrgGeogebraCommonEuclidianEuclidianView_GRID_POLAR:
          r = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(xRW_, yRW_);
          r2 = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(r, [view_ getGridDistancesWithInt:0]);
          angle = JavaLangMath_atan2WithDouble_withDouble_(yRW_, xRW_);
          angleOffset = fmod(angle, [view_ getGridDistancesWithInt:2]);
          if (angleOffset < ([view_ getGridDistancesWithInt:2] / 2)) {
            angle = angle - angleOffset;
          }
          else {
            angle = (angle - angleOffset) + [view_ getGridDistancesWithInt:2];
          }
          x1 = r2 * JavaLangMath_cosWithDouble_(angle);
          y1 = r2 * JavaLangMath_sinWithDouble_(angle);
          a1 = JavaLangMath_absWithDouble_(x1 - xRW_);
          b1 = JavaLangMath_absWithDouble_(y1 - yRW_);
          if ((a1 < ([view_ getGridDistancesWithInt:0] * pointCapturingPercentage)) && (b1 < ([view_ getGridDistancesWithInt:1] * pointCapturingPercentage))) {
            xRW_ = x1 - OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
            yRW_ = y1 - OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
          }
          else {
            xRW_ -= OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 0);
            yRW_ -= OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, 1);
          }
          break;
        }
      }
      default:
      ;
    }
  }
}

- (jdouble)getTransformCoordsOffsetWithInt:(jint)i {
  return OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(self, i);
}

- (OrgGeogebraCommonKernelAlgosAlgoDispatcher *)getAlgoDispatcher {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher];
}

- (IOSObjectArray *)areaWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_areaWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)regularPolygonWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogRegularPolygonWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(l10n_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:mode_]] withOrgGeogebraCommonEuclidianEuclidianController:self withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    return YES;
  }
  return NO;
}

- (jint)addSelectedPlanesForAngleWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                            withInt:(jint)count {
  return count;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)createAngle3D {
  return nil;
}

- (IOSObjectArray *)angleWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_angleWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonEuclidianTextDispatcher *)getTextDispatcher {
  if (textDispatcher_ == nil) {
    textDispatcher_ = new_OrgGeogebraCommonEuclidianTextDispatcher_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonEuclidianEuclidianView_(kernel_, view_);
  }
  return textDispatcher_;
}

- (IOSObjectArray *)distanceWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_distanceWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)showCheckBox {
  return OrgGeogebraCommonEuclidianEuclidianController_showCheckBox(self);
}

- (IOSObjectArray *)compassesWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_compassesWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)CircleWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                                   withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)c {
  return OrgGeogebraCommonEuclidianEuclidianController_CircleWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, A, c);
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)CircleCompassesWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  return OrgGeogebraCommonEuclidianEuclidianController_CircleCompassesWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, A, B, C);
}

- (IOSObjectArray *)vectorFromPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_vectorFromPointWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)circlePointRadiusWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonEuclidianEuclidianController_circlePointRadiusWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getMovedGeoPoint {
  return ((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)updateNewPointWithBoolean:(jboolean)forPreviewable
                                        withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                               withBoolean:(jboolean)onPathPossible
                                                               withBoolean:(jboolean)inRegionPossible
                                                               withBoolean:(jboolean)intersectPossible
                                                               withBoolean:(jboolean)chooseGeo
                                                               withBoolean:(jboolean)complex {
  return OrgGeogebraCommonEuclidianEuclidianController_updateNewPointWithBoolean_withOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, forPreviewable, hits, onPathPossible, inRegionPossible, intersectPossible, chooseGeo, complex);
}

- (jboolean)createNewPointInRegionPossibleWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  return ((mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) && ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) getLastHitType] == OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING()));
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getNewPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                                                   withBoolean:(jboolean)onPathPossible
                                                                                   withBoolean:(jboolean)inRegionPossible
                                                                                   withBoolean:(jboolean)intersectPossible
                                                                                   withBoolean:(jboolean)complex {
  return OrgGeogebraCommonEuclidianEuclidianController_updateNewPointWithBoolean_withOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, NO, hits, onPathPossible, inRegionPossible, intersectPossible, YES, complex);
}

- (jboolean)createNewPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                 withBoolean:(jboolean)onPathPossible
                                                 withBoolean:(jboolean)inRegionPossible
                                                 withBoolean:(jboolean)intersectPossible
                                                 withBoolean:(jboolean)doSingleHighlighting
                                                 withBoolean:(jboolean)complex {
  pointCreated_ = nil;
  if (![self allowPointCreation]) {
    return NO;
  }
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = [self getNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:onPathPossible withBoolean:inRegionPossible withBoolean:intersectPossible withBoolean:complex];
  if (point != nil) {
    pointCreated_ = point;
    [self handleMovedElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]) withBoolean:NO withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()];
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDragCursor];
    if (doSingleHighlighting) {
      [self doSingleHighlightingWithOrgGeogebraCommonKernelGeosGeoElement:[self getMovedGeoPoint]];
    }
    return YES;
  }
  moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  return NO;
}

- (jboolean)createNewPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                 withBoolean:(jboolean)onPathPossible
                                                 withBoolean:(jboolean)intersectPossible
                                                 withBoolean:(jboolean)doSingleHighlighting {
  return OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, onPathPossible, intersectPossible, doSingleHighlighting);
}

- (void)macroWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
        withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback2 {
  OrgGeogebraCommonEuclidianEuclidianController_macroWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonUtilAsyncOperation_(self, hits, callback2);
}

- (void)readNumberOrAngleIfNeededWithOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback3 {
  if (++index_ < ((IOSObjectArray *) nil_chk(macroInput_))->size_) {
    if ([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(macroInput_, index_))) isEqual:OrgGeogebraCommonKernelGeosTestEnum_get_GEONUMERIC()]) {
      [((OrgGeogebraCommonMainDialogManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showNumberInputDialogWithNSString:[((OrgGeogebraCommonKernelMacro *) nil_chk(macro__)) getToolOrCommandName] withNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Numeric"] withNSString:nil withOrgGeogebraCommonUtilAsyncOperation:callback3];
    }
    else if ([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(macroInput_, index_))) isEqual:OrgGeogebraCommonKernelGeosTestEnum_get_GEOANGLE()]) {
      [((OrgGeogebraCommonMainDialogManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showAngleInputDialogWithNSString:[((OrgGeogebraCommonKernelMacro *) nil_chk(macro__)) getToolOrCommandName] withNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Angle"] withNSString:OrgGeogebraCommonUtilUnicode_get_FORTY_FIVE_DEGREES_() withOrgGeogebraCommonUtilAsyncOperation:callback3];
    }
  }
}

- (void)macroProcessWithOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback2 {
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == ((IOSObjectArray *) nil_chk(macroInput_))->size_) {
    [self checkZooming];
    (void) [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) useMacroWithNSStringArray:nil withOrgGeogebraCommonKernelMacro:macro__ withOrgGeogebraCommonKernelGeosGeoElementArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self)];
    if (callback2 != nil) [callback2 callbackWithId:JavaLangBoolean_valueOfWithBoolean_(YES)];
    return;
  }
  if (callback2 != nil) [callback2 callbackWithId:JavaLangBoolean_valueOfWithBoolean_(NO)];
}

- (jboolean)buttonWithBoolean:(jboolean)textfield {
  return OrgGeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(self, textfield);
}

- (jboolean)switchModeForProcessModeWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                           withBoolean:(jboolean)isControlDown
                               withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback {
  JavaLangBoolean *changedKernel = JavaLangBoolean_valueOfWithBoolean_(NO);
  IOSObjectArray *ret = nil;
  {
    jboolean addToSelection;
    OrgGeogebraCommonUtilAsyncOperation *callback2;
    switch (mode_) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
      if (selectionPreview_) {
        [self getSelectablesWithOrgGeogebraCommonEuclidianHits:[((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]];
      }
      else {
        if (draggingOccured_ && ([((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) selectedGeosSize] == 1)) {
          [selection_ clearSelectedGeos];
        }
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
      if (selectionPreview_) {
        OrgGeogebraCommonEuclidianEuclidianController_moveRotateWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
      if (selectionPreview_) {
        if ((mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER)) {
          [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) keepOnlyHitsForNewPointMode];
        }
        OrgGeogebraCommonEuclidianEuclidianController_pointWithOrgGeogebraCommonEuclidianHits_(self, hits);
      }
      else {
        IOSObjectArray *ret0 = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        (void) IOSObjectArray_Set(ret0, 0, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getFirstHitWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()]);
        ret = ret0;
        OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, selectedPoints_);
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
      addToSelection = isControlDown;
      OrgGeogebraCommonEuclidianEuclidianController_geoElementSelectedWithOrgGeogebraCommonEuclidianHits_withBoolean_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits], addToSelection);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
      ret = OrgGeogebraCommonEuclidianEuclidianController_joinWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
      ret = OrgGeogebraCommonEuclidianEuclidianController_segmentWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT_FIXED:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_segmentFixedWithOrgGeogebraCommonEuclidianHits_(self, hits));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE_FIXED:
      ret = OrgGeogebraCommonEuclidianEuclidianController_angleFixedWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIDPOINT:
      ret = OrgGeogebraCommonEuclidianEuclidianController_midpointWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
      ret = OrgGeogebraCommonEuclidianEuclidianController_rayWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
      ret = OrgGeogebraCommonEuclidianEuclidianController_polylineWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
      polygonMode_ = OrgGeogebraCommonEuclidianEuclidianController_POLYGON_NORMAL;
      ret = OrgGeogebraCommonEuclidianEuclidianController_polygonWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RIGID_POLYGON:
      polygonMode_ = OrgGeogebraCommonEuclidianEuclidianController_POLYGON_RIGID;
      ret = OrgGeogebraCommonEuclidianEuclidianController_polygonWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_POLYGON:
      polygonMode_ = OrgGeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR;
      ret = OrgGeogebraCommonEuclidianEuclidianController_polygonWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
      ret = OrgGeogebraCommonEuclidianEuclidianController_vectorWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT:
      ret = [self intersectWithOrgGeogebraCommonEuclidianHits:hits];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL:
      ret = OrgGeogebraCommonEuclidianEuclidianController_parallelWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
      ret = OrgGeogebraCommonEuclidianEuclidianController_parabolaWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_THREE_D:
      ret = [self orthogonalWithOrgGeogebraCommonEuclidianHits:hits];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_LINE_BISECTOR:
      ret = OrgGeogebraCommonEuclidianEuclidianController_lineBisectorWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR:
      ret = OrgGeogebraCommonEuclidianEuclidianController_angularBisectorWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
      ret = OrgGeogebraCommonEuclidianEuclidianController_circleOrSphere2WithOrgGeogebraCommonEuclidianHits_withInt_(self, hits, mode_);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_LOCUS:
      ret = OrgGeogebraCommonEuclidianEuclidianController_locusWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
      ret = OrgGeogebraCommonEuclidianEuclidianController_threePointsWithOrgGeogebraCommonEuclidianHits_withInt_(self, hits, mode_);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
      ret = OrgGeogebraCommonEuclidianEuclidianController_conic5WithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RELATION:
      OrgGeogebraCommonEuclidianEuclidianController_relationWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS:
      ret = OrgGeogebraCommonEuclidianEuclidianController_tangentsWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLAR_DIAMETER:
      ret = OrgGeogebraCommonEuclidianEuclidianController_polarLineWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DELETE:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_([((OrgGeogebraCommonEuclidianModesModeDelete *) nil_chk([self getDeleteMode])) processWithOrgGeogebraCommonEuclidianHits:[((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits] withBoolean:isControlDown]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_OBJECT:
      if (OrgGeogebraCommonEuclidianEuclidianController_showHideObjectWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits])) {
        toggleModeChangedKernel_ = YES;
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_LABEL:
      if (OrgGeogebraCommonEuclidianEuclidianController_showHideLabelWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits])) {
        toggleModeChangedKernel_ = YES;
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
      if (OrgGeogebraCommonEuclidianEuclidianController_copyVisualStyleWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits])) {
        toggleModeChangedKernel_ = YES;
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXT:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_textWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getOtherHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOIMAGE() withOrgGeogebraCommonEuclidianHits:tempArrayList_]));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_IMAGE:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_imageWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getOtherHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOIMAGE() withOrgGeogebraCommonEuclidianHits:tempArrayList_]));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SLIDER:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_slider(self));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
      ret = OrgGeogebraCommonEuclidianEuclidianController_mirrorAtPointWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
      ret = OrgGeogebraCommonEuclidianEuclidianController_mirrorAtLineWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
      ret = OrgGeogebraCommonEuclidianEuclidianController_mirrorAtCircleWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_attachDetachWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
      ret = OrgGeogebraCommonEuclidianEuclidianController_translateByVectorWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
      ret = OrgGeogebraCommonEuclidianEuclidianController_rotateByAngleWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
      ret = OrgGeogebraCommonEuclidianEuclidianController_dilateFromPointWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
      ret = OrgGeogebraCommonEuclidianEuclidianController_fitLineWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
      ret = OrgGeogebraCommonEuclidianEuclidianController_createListWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_circlePointRadiusWithOrgGeogebraCommonEuclidianHits_(self, hits));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE:
      ret = OrgGeogebraCommonEuclidianEuclidianController_angleWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_FROM_POINT:
      ret = OrgGeogebraCommonEuclidianEuclidianController_vectorFromPointWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DISTANCE:
      ret = OrgGeogebraCommonEuclidianEuclidianController_distanceWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MACRO:
      callback2 = new_OrgGeogebraCommonEuclidianEuclidianController_$2_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, callback);
      OrgGeogebraCommonEuclidianEuclidianController_macroWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonUtilAsyncOperation_(self, hits, callback2);
      return NO;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_AREA:
      ret = OrgGeogebraCommonEuclidianEuclidianController_areaWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SLOPE:
      ret = [self slopeWithOrgGeogebraCommonEuclidianHits:hits];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_REGULAR_POLYGON:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_([self regularPolygonWithOrgGeogebraCommonEuclidianHits:hits]);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_showCheckBox(self));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(self, NO));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(self, YES));
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
      ret = OrgGeogebraCommonEuclidianEuclidianController_compassesWithOrgGeogebraCommonEuclidianHits_(self, hits);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FUNCTION_INSPECTOR:
      changedKernel = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController_functionInspectorWithOrgGeogebraCommonEuclidianHits_(self, hits));
      break;
      default:
      ;
    }
  }
  return OrgGeogebraCommonEuclidianEuclidianController_endOfSwitchModeForProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, ret, [changedKernel booleanValue], callback);
}

- (jboolean)endOfSwitchModeForProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)ret
                                                                            withBoolean:(jboolean)changedKernel
                                                withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback {
  return OrgGeogebraCommonEuclidianEuclidianController_endOfSwitchModeForProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, ret, changedKernel, callback);
}

- (void)memorizeJustCreatedGeosAfterProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)ret {
  if (ret != nil) {
    [self memorizeJustCreatedGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:ret];
  }
  else if (!selectionPreview_) {
    [self clearJustCreatedGeos];
  }
}

- (void)processModeLock {
  OrgGeogebraCommonEuclidianHits *getTopHits = [((OrgGeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) getTopHits];
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(getTopHits)) size] == 0) {
    getTopHits = [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits];
  }
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(getTopHits)) size] > 0) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [getTopHits getWithInt:0];
    if ([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(OrgGeogebraCommonKernelGeosTestEnum_get_PATH_NO_FILL_HIT())) checkWithId:geo] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) {
      [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) processModeLockWithOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelPath))];
    }
    else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) processModeLockWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
    }
    else {
      [self transformCoords];
    }
  }
  else {
    if (![self isAltDown]) {
      [self transformCoords];
    }
  }
}

- (jboolean)processModeWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)processHits
                                              withBoolean:(jboolean)isControlDown {
  OrgGeogebraCommonEuclidianHits *hits2 = processHits;
  OrgGeogebraCommonUtilAsyncOperation *callback = new_OrgGeogebraCommonEuclidianEuclidianController_$3_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_(self, hits2);
  return OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, processHits, isControlDown, callback);
}

- (jboolean)processModeWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)processHits
                                              withBoolean:(jboolean)isControlDown
                  withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback {
  return OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, processHits, isControlDown, callback);
}

- (void)toolCompleted {
}

- (void)updatePreview {
  if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getPreviewDrawable] != nil) {
    [view_ updatePreviewableForProcessMode];
    if (mouseLoc_ != nil) {
      xRW_ = [view_ toRealWorldCoordXWithDouble:mouseLoc_->x_];
      yRW_ = [view_ toRealWorldCoordYWithDouble:mouseLoc_->y_];
      [self processModeLock];
      [((id<OrgGeogebraCommonEuclidianPreviewable>) nil_chk([view_ getPreviewDrawable])) updateMousePosWithDouble:xRW_ withDouble:yRW_];
    }
    [view_ repaintView];
  }
}

- (void)processReleaseForMovedGeoPointWithBoolean:(jboolean)rightClick {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui]) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getMovedGeoPoint])) resetTraceColumns];
  }
}

- (jboolean)processRightReleaseFor3DWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  return NO;
}

- (void)rotateObjectWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_rotateObjectWithBoolean_(self, repaint);
}

- (void)moveLabel {
  OrgGeogebraCommonEuclidianEuclidianController_moveLabel(self);
}

- (void)movePointWithOffsetWithBoolean:(jboolean)repaint {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) setCoordsWithDouble:OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(xRW_ - IOSDoubleArray_Get(nil_chk(transformCoordsOffset_), 0)) withDouble:OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(yRW_ - IOSDoubleArray_Get(transformCoordsOffset_, 1)) withDouble:1.0];
  [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class])) updateCascade];
  movedGeoPointDragged_ = YES;
  if (repaint) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
}

- (void)moveLineWithBoolean:(jboolean)repaint {
  [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(movedGeoLine_)) setLineThroughWithDouble:xRW_ withDouble:yRW_];
  OrgGeogebraCommonEuclidianEuclidianController_updateAfterMoveWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoLine_, [OrgGeogebraCommonKernelGeosGeoElement class]), repaint);
}

+ (void)updateAfterMoveWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                     withBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_updateAfterMoveWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(geo, repaint);
}

- (void)moveVectorWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithBoolean_(self, repaint);
}

- (void)moveVector {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> P = [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(movedGeoVector_)) getStartPoint];
  if (P == nil) {
    OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(self, xRW_ - IOSDoubleArray_Get(nil_chk(transformCoordsOffset_), 0), yRW_ - IOSDoubleArray_Get(transformCoordsOffset_, 1));
  }
  else {
    OrgGeogebraCommonKernelMatrixCoords *c = [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCompanion])) getCoordsForViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(self, xRW_ - [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(c)) getX], yRW_ - [c getY]);
  }
}

- (void)moveVectorWithDouble:(jdouble)x
                  withDouble:(jdouble)y {
  OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(self, x, y);
}

- (void)moveVectorStartPointWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveVectorStartPointWithBoolean_(self, repaint);
}

- (void)moveTextWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveTextWithBoolean_(self, repaint);
}

- (void)moveTextAbsoluteLocation {
  OrgGeogebraCommonKernelGeosGeoPoint *loc = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(movedGeoText_)) getStartPoint], [OrgGeogebraCommonKernelGeosGeoPoint class]);
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(loc)) setCoordsWithDouble:xRW_ - [self getStartPointX] withDouble:yRW_ - [self getStartPointY] withDouble:1.0];
}

- (void)moveImageWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveImageWithBoolean_(self, repaint);
}

- (void)moveConicWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveConicWithBoolean_(self, repaint);
}

- (void)moveImplicitPolyWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveImplicitPolyWithBoolean_(self, repaint);
}

- (void)moveFreehandWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveFreehandWithBoolean_(self, repaint);
}

- (void)moveFunctionWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveFunctionWithBoolean_(self, repaint);
}

- (void)moveBooleanWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveBooleanWithBoolean_(self, repaint);
}

- (void)moveButtonWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveButtonWithBoolean_(self, repaint);
}

- (jdouble)getSliderValueWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)movedSlider
                                                       withBoolean:(jboolean)click {
  return OrgGeogebraCommonEuclidianEuclidianController_getSliderValueWithOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, movedSlider, click);
}

- (void)moveNumericWithBoolean:(jboolean)repaint
                   withBoolean:(jboolean)click {
  OrgGeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(self, repaint, click);
}

- (void)moveSliderWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveSliderWithBoolean_(self, repaint);
}

- (void)moveDependentWithBoolean:(jboolean)repaint {
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(translationVec_)) setXWithDouble:xRW_ - [self getStartPointX]];
  [translationVec_ setYWithDouble:yRW_ - [self getStartPointY]];
  [self setStartPointLocationWithDouble:xRW_ withDouble:yRW_];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) movingGeoSet];
  if (tmpCoordsL3_ == nil) {
    tmpCoordsL3_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL3_)) setXWithDouble:xRW_];
  [tmpCoordsL3_ setYWithDouble:yRW_];
  [tmpCoordsL3_ setZWithDouble:0];
  OrgGeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonEuclidianEuclidianView_(translateableGeos_, translationVec_, tmpCoordsL3_, nil, view_);
  [kernel_ movedGeoSetWithJavaUtilArrayList:translateableGeos_];
  if (repaint) {
    [kernel_ notifyRepaint];
  }
}

- (void)moveAttachedWithBoolean:(jboolean)repaint {
  OrgGeogebraCommonEuclidianEuclidianController_moveAttachedWithBoolean_(self, repaint);
}

- (void)moveMultipleObjectsWithBoolean:(jboolean)repaint {
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(translationVec_)) setXWithDouble:xRW_ - [self getStartPointX]];
  [translationVec_ setYWithDouble:yRW_ - [self getStartPointY]];
  [self setStartPointLocationWithDouble:xRW_ withDouble:yRW_];
  startLoc_ = mouseLoc_;
  if (tmpCoordsL3_ == nil) {
    tmpCoordsL3_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL3_)) setXWithDouble:xRW_];
  [tmpCoordsL3_ setYWithDouble:yRW_];
  [tmpCoordsL3_ setZWithDouble:0];
  OrgGeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonEuclidianEuclidianView_([((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) removeParentsOfViewWithJavaUtilArrayList:[self getAppSelectedGeos]], translationVec_, tmpCoordsL3_, nil, view_);
  if (repaint) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
}

- (jdouble)getStartPointX {
  return ((OrgGeogebraCommonAwtGPoint2D_Double *) nil_chk(startPoint_))->x_;
}

- (jdouble)getStartPointY {
  return ((OrgGeogebraCommonAwtGPoint2D_Double *) nil_chk(startPoint_))->y_;
}

- (void)setMovedGeoPointWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  movedGeoPoint_ = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getParentAlgorithm];
  if ((algo != nil) && ([OrgGeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface_class_() isInstance:algo])) {
    movedGeoPoint_ = [((id<OrgGeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface>) check_protocol_cast(algo, @protocol(OrgGeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface))) getParentPoint];
  }
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:![((OrgGeogebraCommonMainApp *) nil_chk(app_)) isApplet] && ![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) hasPath]];
  [view_ setDragCursor];
}

- (void)switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  switch (mode_) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygonsIfSidePresent];
    break;
    default:
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
    break;
  }
}

- (jboolean)switchModeForMouseReleasedWithInt:(jint)evMode
           withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hitsReleased
                                  withBoolean:(jboolean)kernelChanged
                                  withBoolean:(jboolean)controlDown
withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  OrgGeogebraCommonEuclidianHits *hits = hitsReleased;
  jboolean changedKernel = kernelChanged;
  jboolean focusNeeded = YES;
  switch (evMode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
    if ([hits isEmpty]) {
      changedKernel = OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, NO, YES);
    }
    else {
      changedKernel = (pointCreated_ != nil);
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION:
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_IN:
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) zoomWithDouble:((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ withDouble:mouseLoc_->y_ withDouble:OrgGeogebraCommonEuclidianEuclidianView_MODE_ZOOM_FACTOR withInt:15 withBoolean:NO];
    toggleModeChangedKernel_ = YES;
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_OUT:
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) zoomWithDouble:((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ withDouble:mouseLoc_->y_ withDouble:1.0 / OrgGeogebraCommonEuclidianEuclidianView_MODE_ZOOM_FACTOR withInt:15 withBoolean:NO];
    toggleModeChangedKernel_ = YES;
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW:
    if (draggingOccured_ || !temporaryMode_) {
      changedKernel = YES;
    }
    else {
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      [self handleSelectClickWithJavaUtilArrayList:[((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits] withBoolean:controlDown];
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    [self handleSelectClickWithJavaUtilArrayList:[((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits] withBoolean:controlDown];
    default:
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits];
    if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
      OrgGeogebraCommonKernelGeosGeoElement *hit = [hits getWithInt:0];
      if (hit != nil) {
        if ([hit isGeoButton] && !([hit isGeoTextField])) {
          checkBoxOrButtonJustHitted_ = YES;
          [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:hit withBoolean:YES withBoolean:NO];
          [((OrgGeogebraCommonMainApp *) nil_chk(app_)) updateSelectionWithBoolean:NO];
        }
        else if ([hit isGeoBoolean]) {
          OrgGeogebraCommonKernelGeosGeoBoolean *bool_ = (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(([hits getWithInt:0]), [OrgGeogebraCommonKernelGeosGeoBoolean class]);
          if (!OrgGeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithOrgGeogebraCommonKernelGeosGeoBoolean_(self, bool_)) {
            [self hitCheckBoxWithOrgGeogebraCommonKernelGeosGeoBoolean:bool_];
            [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:bool_ withBoolean:YES withBoolean:NO];
            [((OrgGeogebraCommonMainApp *) nil_chk(app_)) updateSelectionWithBoolean:NO];
            [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool_)) updateCascade];
          }
        }
        else {
          OrgGeogebraCommonKernelGeosGeoElement *geo1 = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES];
          if (geo1 != nil) {
            focusNeeded = NO;
            [self runScriptsIfNeededWithOrgGeogebraCommonKernelGeosGeoElement:geo1];
          }
        }
      }
    }
  }
  if (focusNeeded && mode_ != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) requestFocusInWindow];
  }
  return changedKernel;
}

- (void)hitCheckBoxWithOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)bool_ {
  [bool_ setValueWithBoolean:![((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool_)) getBoolean]];
  self->checkboxChangeOccured_ = YES;
  self->checkBoxOrButtonJustHitted_ = YES;
}

- (OrgGeogebraCommonEuclidianHits *)addPointCreatedForMouseReleasedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)releasedHits {
  OrgGeogebraCommonEuclidianHits *hits = releasedHits;
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    hits = new_OrgGeogebraCommonEuclidianHits_init();
    [hits addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(pointCreated_, [OrgGeogebraCommonKernelGeosGeoElement class])];
  }
  return hits;
}

- (jboolean)moveModeWithInt:(jint)evMode {
  if (evMode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
    return YES;
  }
  return NO;
}

- (jboolean)hitResetIcon {
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) showResetIcon] && ((((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->y_ < 30) && (mouseLoc_->x_ > ([view_ getViewWidth] - 24)));
}

- (void)processMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  jboolean repaintNeeded;
  if ([self hitResetIcon]) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setToolTipTextWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainTooltipWithNSString:@"resetConstruction"]];
    [view_ setHitCursor];
    return;
  }
  jboolean hitAnimationButton = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) hitAnimationButtonWithInt:[((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX] withInt:[event getY]];
  repaintNeeded = [view_ setAnimationButtonsHighlightedWithBoolean:hitAnimationButton];
  if (hitAnimationButton) {
    if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isAnimationPaused]) {
      [view_ setToolTipTextWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainTooltipWithNSString:@"Play"]];
    }
    else {
      [view_ setToolTipTextWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainTooltipWithNSString:@"Pause"]];
    }
    [view_ setHitCursor];
    [view_ repaintView];
    return;
  }
  OrgGeogebraCommonEuclidianHits *hits = new_OrgGeogebraCommonEuclidianHits_init();
  jboolean noHighlighting = NO;
  [self setAltDownWithBoolean:[event isAltDown]];
  OrgGeogebraCommonKernelGeosGeoElement *geo = [view_ getLabelHitWithOrgGeogebraCommonAwtGPoint:mouseLoc_ withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
  if (geo != nil) {
    mouseIsOverLabel__ = YES;
  }
  else {
    mouseIsOverLabel__ = NO;
  }
  if ([self moveModeWithInt:mode_]) {
    if (geo != nil) {
      noHighlighting = YES;
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
      [tempArrayList_ addWithId:geo];
      hits = tempArrayList_;
    }
  }
  if ([hits isEmpty]) {
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
    hits = [view_ getHits];
    [self switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:hits];
  }
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    [view_ setToolTipTextWithNSString:nil];
    [view_ setDefaultCursor];
  }
  else {
    if (([event isShiftDown] || mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW) && ([hits size] >= 1)) {
      if ([hits hasXAxis]) {
        [view_ setResizeXAxisCursor];
      }
      else if ([hits hasYAxis]) {
        [view_ setResizeYAxisCursor];
      }
      else {
        [view_ setHitCursor];
      }
    }
    else {
      [view_ setHitCursor];
    }
  }
  OrgGeogebraCommonEuclidianHits *tempFullHits = [hits clone];
  hits = [hits getTopHits];
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size] == 1) {
    OrgGeogebraCommonKernelGeosGeoElement *hit = [hits getWithInt:0];
    jint labelMode = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(hit)) getLabelMode];
    if ([hit isGeoNumeric] && [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(hit, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isSlider] && ((labelMode == OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE) || (labelMode == OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE))) {
      if ((pastePreviewSelected_ == nil) ? YES : ([pastePreviewSelected_ isEmpty])) {
        [self setStartPointLocationWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(hit, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getSliderX] withDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(hit, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getSliderY]];
      }
    }
  }
  if (![hits isEmpty]) {
    jboolean alwaysOn = NO;
    if ([view_ getAllowToolTips] == OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_ON) {
      alwaysOn = YES;
    }
    NSString *text = OrgGeogebraCommonKernelGeosGeoElement_getToolTipDescriptionHTMLWithJavaUtilArrayList_withBoolean_withBoolean_withBoolean_(hits, YES, YES, alwaysOn);
    if ([@"<html></html>" isEqual:text]) {
      text = nil;
    }
    [view_ setToolTipTextWithNSString:text];
  }
  else {
    [view_ setToolTipTextWithNSString:nil];
  }
  if ([view_ getPreviewDrawable] != nil) {
    [view_ updatePreviewable];
    repaintNeeded = YES;
  }
  if ((pastePreviewSelected_ != nil) && ![pastePreviewSelected_ isEmpty]) {
    [self transformCoords];
    [self updatePastePreviewPosition];
    repaintNeeded = YES;
  }
  else if ([view_ getShowMouseCoords] && [view_ getAllowShowMouseCoords]) {
    [self transformCoords];
    repaintNeeded = YES;
  }
  [self startCollectingMinorRepaints];
  jboolean control = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  if (noHighlighting ? [self refreshHighlightingWithOrgGeogebraCommonEuclidianHits:nil withBoolean:control] : [self refreshHighlightingWithOrgGeogebraCommonEuclidianHits:tempFullHits withBoolean:control]) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
  else if (repaintNeeded) {
    [view_ repaintView];
  }
  [self stopCollectingMinorRepaints];
}

- (void)wrapMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  if ([self isTextfieldHasFocus]) {
    return;
  }
  [self setMouseLocationWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  [self processMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
}

- (void)resetToolTipManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)wrapMouseExitedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  if ([self isTextfieldHasFocus]) {
    return;
  }
  self->animationButtonPressed_ = NO;
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfoIfSetCoordSystemOccured];
  [self startCollectingMinorRepaints];
  [self refreshHighlightingWithOrgGeogebraCommonEuclidianHits:nil withBoolean:[app_ isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]];
  [self resetToolTipManager];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAnimationButtonsHighlightedWithBoolean:NO];
  [view_ setShowMouseCoordsWithBoolean:NO];
  mouseLoc_ = nil;
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self stopCollectingMinorRepaints];
  [view_ mouseExited];
}

- (void)handleSelectClickWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                   withBoolean:(jboolean)ctrlDown {
  if (geos == nil) {
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeos];
  }
  else {
    if (ctrlDown) {
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:[self chooseGeoWithJavaUtilArrayList:geos withBoolean:YES]];
    }
    else {
      if (!moveModeSelectionHandled_) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:geos withBoolean:YES];
        if (geo != nil && ![geo isGeoButton]) {
          [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:NO];
          [selection_ addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        }
      }
    }
  }
}

- (void)wrapMouseclickedWithBoolean:(jboolean)control
                            withInt:(jint)clickCount
withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (clickCount == 2) {
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isApplet] || control) {
      return;
    }
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:YES withBoolean:NO];
    [app_ updateSelectionWithBoolean:NO];
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    OrgGeogebraCommonEuclidianHits *hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits];
    [self switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:hits];
    if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
      [app_ setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
      OrgGeogebraCommonKernelGeosGeoElement *geo0 = [hits getWithInt:0];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) isGeoNumeric] && [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo0, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isSlider]) {
        [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showPropertiesDialogWithJavaUtilArrayList:hits];
      }
      else if (![geo0 isFixed] && !([geo0 isGeoBoolean] && [geo0 isIndependent]) && !([geo0 isGeoImage] && [geo0 isIndependent]) && ![geo0 isGeoButton]) {
        [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showRedefineDialogWithOrgGeogebraCommonKernelGeosGeoElement:[hits getWithInt:0] withBoolean:YES];
      }
    }
  }
}

- (jboolean)textfieldJustFocusedWWithInt:(jint)x
                                 withInt:(jint)y
withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  return NO;
}

- (void)resetMovedGeoPoint {
  movedGeoPoint_ = nil;
}

- (void)setStartPointLocation {
  [self setStartPointLocationWithDouble:xRW_ withDouble:yRW_];
}

- (void)setStartPointLocationWithOriginWithDouble:(jdouble)x
                                       withDouble:(jdouble)y {
  [self setStartPointLocationWithDouble:xRW_ - x withDouble:yRW_ - y];
}

- (void)handleMovedElementMultiple {
  moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_MULTIPLE_OBJECTS;
  [self setStartPointLocation];
  startLoc_ = mouseLoc_;
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDragCursor];
  if (translationVec_ == nil) {
    translationVec_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(2);
  }
}

- (void)handleMovedElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                        withBoolean:(jboolean)multiple
            withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  [self resetMovedGeoPoint];
  movedGeoElement_ = geo;
  moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  if ((movedGeoElement_ != nil) && multiple) {
    [self handleMovedElementMultiple];
  }
  else if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isMoveableWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_] && !([self isMoveButtonExpectedWithOrgGeogebraCommonKernelGeosGeoElement:geo] || [self isMoveTextFieldExpectedWithOrgGeogebraCommonKernelGeosGeoElement:geo])) {
    [self handleMovedElementDependent];
  }
  else {
    [self handleMovedElementFreeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  }
}

- (jboolean)handleMovedElementDependentWithChangeableCoordParentNumbers {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) hasChangeableCoordParentNumbers]) {
    [movedGeoElement_ recordChangeableCoordParentNumbers];
    translateableGeos_ = new_JavaUtilArrayList_init();
    [translateableGeos_ addWithId:movedGeoElement_];
    return YES;
  }
  return NO;
}

- (void)handleMovedElementDependent {
  translateableGeos_ = nil;
  OrgGeogebraCommonKernelGeosGeoVector *vec = nil;
  jboolean sameVector = YES;
  if ([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:movedGeoElement_]) {
    id<OrgGeogebraCommonKernelGeosGeoPoly> poly = (id<OrgGeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(movedGeoElement_, @protocol(OrgGeogebraCommonKernelGeosGeoPoly));
    IOSObjectArray *pts = [((id<OrgGeogebraCommonKernelGeosGeoPoly>) nil_chk(poly)) getPoints];
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(pts), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) getParentAlgorithm];
    if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTranslate class]]) {
      IOSObjectArray *input = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input), 1))) isIndependent]) {
        vec = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, 1), [OrgGeogebraCommonKernelGeosGeoVector class]);
        for (jint i = 1; i < pts->size_; i++) {
          algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(pts, i), [OrgGeogebraCommonKernelGeosGeoElement class])))) getParentAlgorithm];
          if (!([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTranslate class]])) {
            sameVector = NO;
            break;
          }
          input = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
          OrgGeogebraCommonKernelGeosGeoVector *vec2 = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(nil_chk(input), 1), [OrgGeogebraCommonKernelGeosGeoVector class]);
          if (vec != vec2) {
            sameVector = NO;
            break;
          }
        }
      }
    }
  }
  else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isGeoSegment] || [movedGeoElement_ isGeoRay] || ([[movedGeoElement_ getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVector class]])) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> start = nil;
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> end = nil;
    if ([[movedGeoElement_ getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVector class]]) {
      OrgGeogebraCommonKernelAlgosAlgoVector *algoVec = (OrgGeogebraCommonKernelAlgosAlgoVector *) check_class_cast([movedGeoElement_ getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoVector class]);
      start = [((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoVector *) nil_chk(algoVec)) getInputPoints])) getWithInt:0];
      end = [((JavaUtilArrayList *) nil_chk([algoVec getInputPoints])) getWithInt:1];
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(start)) isIndependent] && ![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(end)) isIndependent]) {
        end = nil;
        OrgGeogebraCommonKernelMatrixCoords *coords = [start getInhomCoords];
        *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = xRW_ - [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
        *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = yRW_ - [coords getY];
        moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET;
        movedGeoPoint_ = start;
        return;
      }
    }
    else {
      id<OrgGeogebraCommonKernelKernelNDGeoLineND> line = (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(movedGeoElement_, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND));
      start = [line getStartPoint];
      end = [line getEndPoint];
    }
    if ((start != nil) && (end != nil)) {
      OrgGeogebraCommonKernelAlgosAlgoElement *algo = [start getParentAlgorithm];
      OrgGeogebraCommonKernelAlgosAlgoElement *algo2 = [end getParentAlgorithm];
      if (([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTranslate class]]) && ([algo2 isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTranslate class]])) {
        IOSObjectArray *input = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
        vec = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(nil_chk(input), 1), [OrgGeogebraCommonKernelGeosGeoVector class]);
        IOSObjectArray *input2 = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo2)) getInput];
        OrgGeogebraCommonKernelGeosGeoVector *vec2 = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(nil_chk(input2), 1), [OrgGeogebraCommonKernelGeosGeoVector class]);
        if (vec != vec2) {
          sameVector = NO;
        }
      }
    }
  }
  else if ([movedGeoElement_ isTranslateable]) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [movedGeoElement_ getParentAlgorithm];
    if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTranslate class]]) {
      IOSObjectArray *input = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
      if (([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input), 1))) isIndependent] || [[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, 1))) getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVectorPoint class]]) && [OrgGeogebraCommonKernelKernelNDGeoVectorND_class_() isInstance:IOSObjectArray_Get(input, 1)]) {
        vec = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, 1), [OrgGeogebraCommonKernelGeosGeoVector class]);
      }
    }
  }
  else if ([[movedGeoElement_ getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVectorPoint class]]) {
    vec = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(movedGeoElement_, [OrgGeogebraCommonKernelGeosGeoVector class]);
  }
  if (vec != nil) {
    if ([[vec getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVectorPoint class]]) {
      OrgGeogebraCommonKernelAlgosAlgoVectorPoint *algo = (OrgGeogebraCommonKernelAlgosAlgoVectorPoint *) check_class_cast([vec getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoVectorPoint class]);
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET;
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = xRW_ - vec->x_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = yRW_ - vec->y_;
      movedGeoPoint_ = [((OrgGeogebraCommonKernelAlgosAlgoVectorPoint *) nil_chk(algo)) getP];
      return;
    }
    if (sameVector && (([vec getLabelSimple] == nil) || [vec isIndependent])) {
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = xRW_ - vec->x_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = yRW_ - vec->y_;
      movedGeoVector_ = vec;
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID;
      return;
    }
  }
  if (![self handleMovedElementDependentWithChangeableCoordParentNumbers] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) hasMoveableInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_]) {
    if ([movedGeoElement_ isGeoLine] || [movedGeoElement_ isGeoPolygon] || ([movedGeoElement_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolyLine class]]) || [movedGeoElement_ isGeoConic] || [movedGeoElement_ isGeoImage] || [movedGeoElement_ isGeoList] || [movedGeoElement_ isGeoVector]) {
      if (translateableGeos_ == nil) translateableGeos_ = new_JavaUtilArrayList_init();
      else [translateableGeos_ clear];
      OrgGeogebraCommonEuclidianEuclidianController_addMovedGeoElementFreeInputPointsToTranslateableGeos(self);
      if ([movedGeoElement_ isGeoList]) [((JavaUtilArrayList *) nil_chk(translateableGeos_)) addWithId:movedGeoElement_];
    }
  }
  [self handleMovedElementDependentInitMode];
}

- (void)handleMovedElementDependentInitMode {
  if (translateableGeos_ != nil && [translateableGeos_ size] > 0) {
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_DEPENDENT;
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([translateableGeos_ getWithInt:0])) isGeoPoint]) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = ((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([translateableGeos_ getWithInt:0], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getParentAlgorithm] != nil) {
        *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = 0;
        *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = 0;
      }
      else {
        [point getInhomCoordsWithDoubleArray:transformCoordsOffset_];
        *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) -= xRW_;
        *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) -= yRW_;
      }
    }
    [self setStartPointLocation];
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDragCursor];
    if (translationVec_ == nil) {
      translationVec_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(2);
    }
  }
  else {
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  }
}

- (jboolean)handleMovedElementFreePoint {
  return OrgGeogebraCommonEuclidianEuclidianController_handleMovedElementFreePoint(self);
}

- (jboolean)handleMovedElementFreeText {
  return OrgGeogebraCommonEuclidianEuclidianController_handleMovedElementFreeText(self);
}

- (void)handleMovedElementFreeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (OrgGeogebraCommonEuclidianEuclidianController_handleMovedElementFreePoint(self)) {
    return;
  }
  else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isGeoLine]) {
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_LINE;
    movedGeoLine_ = (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(movedGeoElement_, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND));
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:YES];
    [view_ setDragCursor];
  }
  else if ([movedGeoElement_ isGeoVector]) {
    movedGeoVector_ = (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(movedGeoElement_, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND));
    if ([movedGeoVector_ hasAbsoluteLocation]) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> sP = [movedGeoVector_ getStartPoint];
      jdouble sx = 0;
      jdouble sy = 0;
      if (sP != nil) {
        OrgGeogebraCommonKernelMatrixCoords *c = [((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCompanion])) getCoordsForViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:sP];
        sx = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(c)) getX];
        sy = [c getY];
      }
      OrgGeogebraCommonKernelMatrixCoords *vCoords = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[movedGeoVector_ getCoordsInD3]];
      if ((2.0 * OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(xRW_ - sx, yRW_ - sy)) < OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vCoords)) getX], [vCoords getY])) {
        moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_STARTPOINT;
        if (sP == nil) {
          sP = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
          [sP setCoordsWithDouble:xRW_ withDouble:xRW_ withDouble:1.0];
          @try {
            [movedGeoVector_ setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:sP];
          }
          @catch (JavaLangException *ex) {
            [((JavaLangException *) nil_chk(ex)) printStackTrace];
          }
        }
      }
      else {
        moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR;
      }
    }
    else {
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR;
    }
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:YES];
    [view_ setDragCursor];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_handleMovedElementFreeText(self)) {
    return;
  }
  else if ([movedGeoElement_ isGeoConic]) {
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_CONIC;
    movedGeoConic_ = (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(movedGeoElement_, [OrgGeogebraCommonKernelGeosGeoConic class]);
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
    if ([movedGeoConic_ getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA) {
      jdouble vX = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(movedGeoConic_->b_)) getX];
      jdouble vY = [movedGeoConic_->b_ getY];
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = vX - xRW_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = vY - yRW_;
    }
    [self setStartPointLocation];
    if (tempConic_ == nil) {
      tempConic_ = new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
    }
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(tempConic_)) setWithOrgGeogebraCommonKernelGeosGeoElement:movedGeoConic_];
  }
  else if ([movedGeoElement_ isGeoImplicitPoly]) {
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_IMPLICITPOLY;
    movedGeoImplicitPoly_ = (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(movedGeoElement_, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]);
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
    [self setStartPointLocation];
    if (tempImplicitPoly_ == nil) {
      tempImplicitPoly_ = new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(movedGeoImplicitPoly_);
    }
    else {
      [tempImplicitPoly_ setWithOrgGeogebraCommonKernelGeosGeoElement:movedGeoImplicitPoly_];
    }
    if (tempDependentPointX_ == nil) {
      tempDependentPointX_ = new_JavaUtilArrayList_init();
    }
    else {
      [tempDependentPointX_ clear];
    }
    if (tempDependentPointY_ == nil) {
      tempDependentPointY_ = new_JavaUtilArrayList_init();
    }
    else {
      [tempDependentPointY_ clear];
    }
    if (moveDependentPoints_ == nil) {
      moveDependentPoints_ = new_JavaUtilArrayList_init();
    }
    else {
      [moveDependentPoints_ clear];
    }
    for (OrgGeogebraCommonKernelGeosGeoElement * __strong f in nil_chk([movedGeoImplicitPoly_ getAllChildren])) {
      if (([f isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) && [movedGeoImplicitPoly_ isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:f]) {
        OrgGeogebraCommonKernelGeosGeoPoint *g = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(f, [OrgGeogebraCommonKernelGeosGeoPoint class]);
        if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(g)) getZ])) {
          [((JavaUtilArrayList *) nil_chk(moveDependentPoints_)) addWithId:g];
          [((JavaUtilArrayList *) nil_chk(tempDependentPointX_)) addWithId:JavaLangDouble_valueOfWithDouble_([g getX] / [g getZ])];
          [((JavaUtilArrayList *) nil_chk(tempDependentPointY_)) addWithId:JavaLangDouble_valueOfWithDouble_([g getY] / [g getZ])];
        }
      }
    }
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isGeoFunction]) {
    if ([[movedGeoElement_ getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand class]]) {
      OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *algo = (OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *) check_class_cast([movedGeoElement_ getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand class]);
      OrgGeogebraCommonKernelGeosGeoElement *input = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *) nil_chk(algo)) getInput]), 0);
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([algo getInput]), 0))) isLabelSet] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(input)) getParentAlgorithm] == nil) {
        moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_FREEHAND;
        movedGeoFunction_ = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(movedGeoElement_, [OrgGeogebraCommonKernelGeosGeoFunction class]);
      }
    }
    else if ([movedGeoElement_ isIndependent]) {
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_FUNCTION;
      movedGeoFunction_ = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(movedGeoElement_, [OrgGeogebraCommonKernelGeosGeoFunction class]);
      vertexX_ = JavaLangDouble_NaN;
      vertexY_ = JavaLangDouble_NaN;
      initxRW_ = JavaLangDouble_NaN;
      initFactor_ = JavaLangDouble_NaN;
      if ([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([movedGeoFunction_ getFunction])) getSymbolicPolynomialFactorsWithBoolean:NO withBoolean:YES] != nil) {
        JavaUtilLinkedList *factors = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([movedGeoFunction_ getFunction])) getPolynomialFactorsWithBoolean:NO];
        if ([((JavaUtilLinkedList *) nil_chk(factors)) size] == 1 && [((OrgGeogebraCommonKernelArithmeticPolyFunction *) nil_chk([factors getWithInt:0])) getDegree] == 2) {
          jdouble c = [movedGeoFunction_ evaluateWithDouble:0];
          jdouble s = [movedGeoFunction_ evaluateWithDouble:1];
          jdouble a = 0.5 * (s + [movedGeoFunction_ evaluateWithDouble:-1]) - c;
          jdouble b = s - a - c;
          vertexX_ = -b / a / 2.0;
          vertexY_ = -(b * b - 4.0 * a * c) / (4.0 * a);
          *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = vertexX_ - xRW_;
          *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = vertexY_ - yRW_;
        }
      }
    }
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
    [self setStartPointLocation];
    if (tempFunction_ == nil) {
      tempFunction_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
    }
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(tempFunction_)) setWithOrgGeogebraCommonKernelGeosGeoElement:movedGeoFunction_];
  }
  else if ([movedGeoElement_ isGeoNumeric] && [movedGeoElement_ getParentAlgorithm] == nil) {
    movedGeoNumeric_ = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(movedGeoElement_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NUMERIC;
    OrgGeogebraCommonEuclidianDrawableND *d = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getDrawableForWithOrgGeogebraCommonKernelGeosGeoElement:movedGeoNumeric_];
    if ([d isKindOfClass:[OrgGeogebraCommonEuclidianDrawDrawSlider class]] && [movedGeoElement_ isEuclidianVisible] && mouseLoc_ != nil) {
      if ([self isMoveSliderExpectedWithInt:[((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type]]) {
        moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_SLIDER;
        if ([movedGeoNumeric_ isAbsoluteScreenLocActive]) {
          [((OrgGeogebraCommonAwtGPoint *) nil_chk(oldLoc_)) setLocationWithInt:[movedGeoNumeric_ getAbsoluteScreenLocX] withInt:[movedGeoNumeric_ getAbsoluteScreenLocY]];
          startLoc_ = mouseLoc_;
          [self setStartPointLocationWithDouble:xRW_ - [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] withDouble:yRW_ - [view_ toRealWorldCoordYWithDouble:oldLoc_->y_]];
          *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] - xRW_;
          *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [view_ toRealWorldCoordYWithDouble:oldLoc_->y_] - yRW_;
        }
        else {
          [self setStartPointLocationWithDouble:xRW_ - [movedGeoNumeric_ getRealWorldLocX] withDouble:yRW_ - [movedGeoNumeric_ getRealWorldLocY]];
          *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [movedGeoNumeric_ getRealWorldLocX] - xRW_;
          *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [movedGeoNumeric_ getRealWorldLocY] - yRW_;
        }
      }
      else {
        [self setStartPointLocationWithDouble:[movedGeoNumeric_ getSliderX] withDouble:[movedGeoNumeric_ getSliderY]];
        OrgGeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(self, YES, YES);
      }
    }
    [view_ setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
  }
  else if ([movedGeoElement_ isGeoBoolean]) {
    movedGeoBoolean_ = (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(movedGeoElement_, [OrgGeogebraCommonKernelGeosGeoBoolean class]);
    if (![self isMoveCheckboxExpected]) {
      [movedGeoBoolean_ setValueWithBoolean:![movedGeoBoolean_ getBoolean]];
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:movedGeoBoolean_];
      [movedGeoBoolean_ updateCascade];
      self->checkboxChangeOccured_ = YES;
    }
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_BOOLEAN;
    startLoc_ = mouseLoc_;
    ((OrgGeogebraCommonAwtGPoint *) nil_chk(oldLoc_))->x_ = [movedGeoBoolean_ getAbsoluteScreenLocX];
    oldLoc_->y_ = [movedGeoBoolean_ getAbsoluteScreenLocY];
    [self setStartPointLocationWithDouble:xRW_ - [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:oldLoc_->x_] withDouble:yRW_ - [view_ toRealWorldCoordYWithDouble:oldLoc_->y_]];
    *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [view_ toRealWorldCoordXWithDouble:oldLoc_->x_ + 5] - xRW_;
    *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [view_ toRealWorldCoordYWithDouble:oldLoc_->y_ + 5] - yRW_;
    [view_ setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
  }
  else if ([OrgGeogebraCommonKernelGeosFurniture_class_() isInstance:movedGeoElement_] && [((id<OrgGeogebraCommonKernelGeosFurniture>) check_protocol_cast(movedGeoElement_, @protocol(OrgGeogebraCommonKernelGeosFurniture))) isFurniture]) {
    jboolean textField = [movedGeoElement_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]];
    jboolean textFieldSelected = textField && oldMode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION;
    jboolean buttonSelected = !textField && oldMode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION;
    jboolean moveSelected = oldMode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE;
    if ((![((OrgGeogebraCommonMainApp *) nil_chk(app_)) isApplet] || temporaryMode_) && (textFieldSelected || buttonSelected || (moveSelected && [app_ isRightClickEnabled]))) {
      movedGeoButton_ = (id<OrgGeogebraCommonKernelGeosFurniture>) check_protocol_cast(movedGeoElement_, @protocol(OrgGeogebraCommonKernelGeosFurniture));
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_BUTTON;
      startLoc_ = mouseLoc_;
      ((OrgGeogebraCommonAwtGPoint *) nil_chk(oldLoc_))->x_ = [movedGeoButton_ getAbsoluteScreenLocX];
      oldLoc_->y_ = [movedGeoButton_ getAbsoluteScreenLocY];
      [self setStartPointLocationWithDouble:xRW_ - [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:oldLoc_->x_] withDouble:yRW_ - [view_ toRealWorldCoordYWithDouble:oldLoc_->y_]];
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] - xRW_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [view_ toRealWorldCoordYWithDouble:oldLoc_->y_] - yRW_;
      [view_ setShowMouseCoordsWithBoolean:NO];
      [view_ setDragCursor];
    }
    else {
      if (!([movedGeoElement_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]])) {
        [self runScriptsIfNeededWithOrgGeogebraCommonKernelGeosGeoElement:movedGeoElement_];
      }
    }
  }
  else if ([movedGeoElement_ isGeoImage] && [movedGeoElement_ isMoveableWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_]) {
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_IMAGE;
    movedGeoImage_ = (OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(movedGeoElement_, [OrgGeogebraCommonKernelGeosGeoImage class]);
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowMouseCoordsWithBoolean:NO];
    [view_ setDragCursor];
    if ([movedGeoImage_ isAbsoluteScreenLocActive]) {
      [((OrgGeogebraCommonAwtGPoint *) nil_chk(oldLoc_)) setLocationWithInt:[movedGeoImage_ getAbsoluteScreenLocX] withInt:[movedGeoImage_ getAbsoluteScreenLocY]];
      startLoc_ = mouseLoc_;
      [self setStartPointLocationWithDouble:xRW_ - [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] withDouble:yRW_ - [view_ toRealWorldCoordYWithDouble:oldLoc_->y_]];
      *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = [view_ toRealWorldCoordXWithDouble:oldLoc_->x_] - xRW_;
      *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = [view_ toRealWorldCoordYWithDouble:oldLoc_->y_] - yRW_;
    }
    else if ([movedGeoImage_ hasAbsoluteLocation]) {
      [self setStartPointLocation];
      oldImage_ = new_OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelGeosGeoImage_(movedGeoImage_);
      OrgGeogebraCommonKernelGeosGeoPoint *loc = IOSObjectArray_Get(nil_chk([movedGeoImage_ getStartPoints]), 2);
      if (loc != nil) {
        *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = loc->inhomX_ - xRW_;
        *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = loc->inhomY_ - yRW_;
      }
      else {
        loc = [movedGeoImage_ getStartPoint];
        if (loc != nil) {
          *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = loc->inhomX_ - xRW_;
          *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = loc->inhomY_ - yRW_;
        }
        else {
          loc = IOSObjectArray_Get(nil_chk([movedGeoImage_ getStartPoints]), 1);
          if (loc != nil) {
            *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = loc->inhomX_ - xRW_;
            *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = loc->inhomY_ - yRW_;
          }
        }
      }
    }
  }
}

- (void)addMovedGeoElementFreeInputPointsToTranslateableGeos {
  OrgGeogebraCommonEuclidianEuclidianController_addMovedGeoElementFreeInputPointsToTranslateableGeos(self);
}

- (jboolean)isMoveSliderExpectedWithInt:(jint)hitThreshold {
  OrgGeogebraCommonEuclidianDrawDrawSlider *ds = (OrgGeogebraCommonEuclidianDrawDrawSlider *) check_class_cast([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getDrawableForWithOrgGeogebraCommonKernelGeosGeoElement:movedGeoNumeric_], [OrgGeogebraCommonEuclidianDrawDrawSlider class]);
  return ((temporaryMode_ && [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isRightClickEnabled]) || ![((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(movedGeoNumeric_)) isSliderFixed]) && ![((OrgGeogebraCommonEuclidianDrawDrawSlider *) nil_chk(ds)) hitPointWithInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ withInt:mouseLoc_->y_ withInt:hitThreshold] && [ds hitSliderWithInt:mouseLoc_->x_ withInt:mouseLoc_->y_ withInt:hitThreshold];
}

- (jboolean)isMoveCheckboxExpected {
  return ((temporaryMode_ && [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isRightClickEnabled]) || ![((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(movedGeoBoolean_)) isCheckboxFixed] || [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMode] == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX);
}

- (jboolean)isMoveButtonExpectedWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoButton]) {
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoButton *button = (OrgGeogebraCommonKernelGeosGeoButton *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoButton class]);
  return (![button isTextField] && (((temporaryMode_ && [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isRightClickEnabled]) || ![button isFixed] || [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMode] == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION)));
}

- (jboolean)isMoveTextFieldExpectedWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoTextField]) {
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoButton *textField = (OrgGeogebraCommonKernelGeosGeoTextField *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoTextField class]);
  return ([textField isTextField] && (((temporaryMode_ && [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isRightClickEnabled]) || ![textField isFixed] || [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMode] == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION)));
}

- (void)setStartPointLocationWithDouble:(jdouble)x
                             withDouble:(jdouble)y {
  [((OrgGeogebraCommonAwtGPoint2D_Double *) nil_chk(startPoint_)) setLocationWithDouble:x withDouble:y];
}

- (jboolean)isCheckboxFixedWithOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)geoBool {
  return OrgGeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithOrgGeogebraCommonKernelGeosGeoBoolean_(self, geoBool);
}

- (void)updateSelectionRectangleWithBoolean:(jboolean)keepScreenRatio {
  if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle] == nil) {
    [view_ setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0]];
  }
  jint dx = ((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - ((OrgGeogebraCommonAwtGPoint *) nil_chk(selectionStartPoint_))->x_;
  jint dy = mouseLoc_->y_ - selectionStartPoint_->y_;
  jint dxabs = JavaLangMath_absWithInt_(dx);
  jint dyabs = JavaLangMath_absWithInt_(dy);
  jint width = dx;
  jint height = dy;
  if (keepScreenRatio) {
    jdouble ratio = (jdouble) [view_ getViewWidth] / (jdouble) [view_ getViewHeight];
    if (dxabs >= (dyabs * ratio)) {
      height = (jint) (JavaLangMath_roundWithDouble_(dxabs / ratio));
      if (dy < 0) {
        height = -height;
      }
    }
    else {
      width = (jint) JavaLangMath_roundWithDouble_(dyabs * ratio);
      if (dx < 0) {
        width = -width;
      }
    }
  }
  id<OrgGeogebraCommonAwtGRectangle> rect = [view_ getSelectionRectangle];
  if (height >= 0) {
    if (width >= 0) {
      [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) setLocationWithInt:selectionStartPoint_->x_ withInt:selectionStartPoint_->y_];
      [rect setSizeWithInt:width withInt:height];
    }
    else {
      [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) setLocationWithInt:selectionStartPoint_->x_ + width withInt:selectionStartPoint_->y_];
      [rect setSizeWithInt:-width withInt:height];
    }
  }
  else {
    if (width >= 0) {
      [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) setLocationWithInt:selectionStartPoint_->x_ withInt:selectionStartPoint_->y_ + height];
      [rect setSizeWithInt:width withInt:-height];
    }
    else {
      [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) setLocationWithInt:selectionStartPoint_->x_ + width withInt:selectionStartPoint_->y_ + height];
      [rect setSizeWithInt:-width withInt:-height];
    }
  }
}

- (jboolean)isDraggingBeyondThreshold {
  return mouseLoc_ != nil && (JavaLangMath_absWithInt_(mouseLoc_->x_ - ((OrgGeogebraCommonAwtGPoint *) nil_chk(selectionStartPoint_))->x_) > OrgGeogebraCommonEuclidianEuclidianController_DRAG_THRESHOLD || JavaLangMath_absWithInt_(mouseLoc_->y_ - selectionStartPoint_->y_) > OrgGeogebraCommonEuclidianEuclidianController_DRAG_THRESHOLD);
}

- (jboolean)freehandModePrepared {
  return NO;
}

- (void)handleMouseDraggedWithBoolean:(jboolean)repaint
withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  [self startCollectingMinorRepaints];
  if (!draggingBeyondThreshold_ && [self isDraggingBeyondThreshold]) {
    draggingBeyondThreshold_ = YES;
  }
  if ([self freehandModePrepared]) {
    [self stopCollectingMinorRepaints];
    return;
  }
  if (draggingBeyondThreshold_ && mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DELETE) {
    [((OrgGeogebraCommonEuclidianModesModeDelete *) nil_chk([self getDeleteMode])) handleMouseDraggedForDeleteWithOrgGeogebraCommonEuclidianEventAbstractEvent:event withInt:[self getDeleteToolSize] withBoolean:NO];
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    [self stopCollectingMinorRepaints];
    return;
  }
  switch (moveMode__) {
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_ROTATE:
    OrgGeogebraCommonEuclidianEuclidianController_rotateObjectWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT:
    [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) movePointWithBoolean:repaint withOrgGeogebraCommonEuclidianEventAbstractEvent:event];
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET:
    [self movePointWithOffsetWithBoolean:repaint];
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_ATTACH_DETACH:
    OrgGeogebraCommonEuclidianEuclidianController_moveAttachDetachWithBoolean_withOrgGeogebraCommonEuclidianEventAbstractEvent_(self, repaint, event);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_LINE:
    [self moveLineWithBoolean:repaint];
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR:
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID:
    OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_STARTPOINT:
    OrgGeogebraCommonEuclidianEuclidianController_moveVectorStartPointWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_CONIC:
    OrgGeogebraCommonEuclidianEuclidianController_moveConicWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_IMPLICITPOLY:
    OrgGeogebraCommonEuclidianEuclidianController_moveImplicitPolyWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_FREEHAND:
    OrgGeogebraCommonEuclidianEuclidianController_moveFreehandWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_FUNCTION:
    OrgGeogebraCommonEuclidianEuclidianController_moveFunctionWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_LABEL:
    OrgGeogebraCommonEuclidianEuclidianController_moveLabel(self);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_TEXT:
    OrgGeogebraCommonEuclidianEuclidianController_moveTextWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_IMAGE:
    OrgGeogebraCommonEuclidianEuclidianController_moveImageWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_NUMERIC:
    OrgGeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(self, repaint, NO);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_SLIDER:
    OrgGeogebraCommonEuclidianEuclidianController_moveSliderWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_BOOLEAN:
    OrgGeogebraCommonEuclidianEuclidianController_moveBooleanWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_BUTTON:
    OrgGeogebraCommonEuclidianEuclidianController_moveButtonWithBoolean_(self, repaint);
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_DEPENDENT:
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) getParentAlgorithm] != nil && [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([movedGeoElement_ getParentAlgorithm])) getClassName] == OrgGeogebraCommonKernelCommandsCommandsEnum_get_AttachCopyToView()) {
      OrgGeogebraCommonEuclidianEuclidianController_moveAttachedWithBoolean_(self, repaint);
    }
    else {
      [self moveDependentWithBoolean:repaint];
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_PLANE:
    [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) movePlaneWithBoolean:repaint withOrgGeogebraCommonEuclidianEventAbstractEvent:event];
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_MULTIPLE_OBJECTS:
    [self moveMultipleObjectsWithBoolean:repaint];
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_VIEW:
    if (repaint) {
      if (temporaryMode_ && mode_ != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW) {
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setMoveCursor];
      }
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setCoordSystemFromMouseMoveWithInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - ((OrgGeogebraCommonAwtGPoint *) nil_chk(startLoc_))->x_ withInt:mouseLoc_->y_ - startLoc_->y_ withInt:OrgGeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_X_AXIS:
    if (repaint) {
      if (temporaryMode_) {
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setResizeXAxisCursor];
      }
      jdouble xzero = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXZero];
      jdouble xzeroRW = 0;
      jdouble newXZero = xzero;
      if (xzero < 0) {
        xzero = 0;
        xzeroRW = [view_ getXmin];
      }
      else if (xzero > [view_ getWidth]) {
        xzero = [view_ getWidth];
        xzeroRW = [view_ getXmax];
      }
      if (JavaLangMath_absWithDouble_(((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - xzero) < 2) {
        mouseLoc_->x_ = (jint) JavaLangMath_roundWithDouble_(mouseLoc_->x_ > xzero ? xzero + 2 : xzero - 2);
      }
      jdouble xscale = (mouseLoc_->x_ - xzero) / (xTemp_ - xzeroRW);
      if (newXZero < 0) {
        newXZero = -xzeroRW * xscale;
      }
      else if (newXZero > [view_ getWidth]) {
        newXZero = [view_ getWidth] - xzeroRW * xscale;
      }
      [view_ setCoordSystemWithDouble:newXZero withDouble:[view_ getYZero] withDouble:xscale withDouble:[view_ getYscale]];
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianController_MOVE_Y_AXIS:
    if (repaint) {
      if (temporaryMode_) {
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setResizeYAxisCursor];
      }
      jdouble yzero = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getYZero];
      jdouble yzeroRW = 0;
      jdouble newYZero = yzero;
      if (yzero < 0) {
        yzero = 0;
        yzeroRW = [view_ getYmax];
      }
      else if (yzero > [view_ getHeight]) {
        yzero = [view_ getHeight];
        yzeroRW = [view_ getYmin];
      }
      if (JavaLangMath_absWithDouble_(((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->y_ - yzero) < 2) {
        mouseLoc_->y_ = (jint) JavaLangMath_roundWithDouble_(mouseLoc_->y_ > yzero ? [view_ getYZero] + 2 : yzero - 2);
      }
      jdouble yscale = (yzero - mouseLoc_->y_) / (yTemp_ - yzeroRW);
      if (newYZero < 0) {
        newYZero = yzeroRW * yscale;
      }
      else if (newYZero > [view_ getHeight]) {
        newYZero = [view_ getHeight] + yzeroRW * yscale;
      }
      [view_ setCoordSystemWithDouble:[view_ getXZero] withDouble:newYZero withDouble:[view_ getXscale] withDouble:yscale];
    }
    break;
    default:
    ;
  }
  [self stopCollectingMinorRepaints];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (jboolean)viewHasHitsForMouseDragged {
  return !([((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) isEmpty]);
}

- (jboolean)processRotate3DView {
  return NO;
}

- (jboolean)allowSelectionRectangle {
  {
    id<OrgGeogebraCommonMainGeoElementSelectionListener> sel;
    switch (mode_) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
      return moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
      return OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) > 0;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
      sel = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCurrentSelectionListener];
      if (sel == nil) {
        return NO;
      }
      if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
        return ![((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) isInputFieldSelectionListener];
      }
      return YES;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
      return allowSelectionRectangleForTranslateByVector_;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
      return YES;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION:
      return YES;
      default:
      return NO;
    }
  }
}

- (void)handleMousePressedForMoveModeWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e
                                                                          withBoolean:(jboolean)drag {
  OrgGeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithOrgGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(self, e, drag);
}

- (jboolean)shouldCancelDrag {
  if (JavaLangSystem_currentTimeMillis() < OrgGeogebraCommonEuclidianEuclidianConstants_DRAGGING_DELAY + lastMousePressedTime_) {
    return !OrgGeogebraCommonEuclidianEuclidianView_isPenModeWithInt_(mode_);
  }
  return NO;
}

- (void)wrapMouseDraggedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event
                                                             withBoolean:(jboolean)startCapture {
  if ([self shouldCancelDrag] || self->animationButtonPressed_) {
    return;
  }
  scriptsHaveRun_ = NO;
  if ([self isTextfieldHasFocus] && moveMode__ != OrgGeogebraCommonEuclidianEuclidianController_MOVE_BUTTON) {
    return;
  }
  if (pressedButton_ != nil) {
    [pressedButton_ setDraggedOrContextWithBoolean:YES];
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode_)) {
    penDragged_ = YES;
    [((OrgGeogebraCommonEuclidianEuclidianPen *) nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getPen(self))) handleMouseDraggedForPenModeWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
    return;
  }
  [self clearJustCreatedGeos];
  if (!draggingOccured_) {
    draggingOccured_ = YES;
    if ([self hitResetIcon]) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) reset];
      return;
    }
    else if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) hitAnimationButtonWithInt:[((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX] withInt:[event getY]]) {
      self->animationButtonPressed_ = YES;
      return;
    }
    if ((mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR) && (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 0)) {
      OrgGeogebraCommonEuclidianEuclidianController_translateHitsByVectorWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getType]);
    }
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event] || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SLIDER) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXT)) {
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getType]];
      OrgGeogebraCommonKernelGeosGeoElement *geo0 = nil;
      OrgGeogebraCommonEuclidianHits *hits0 = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits0)) isEmpty]) {
        geo0 = [hits0 getWithInt:0];
      }
      if (![app_ showToolBar] && geo0 != nil && ([geo0 isGeoTextField] || [geo0 isGeoBoolean] || [geo0 isGeoButton] || ([geo0 isGeoNumeric] && [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo0, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isSlider]))) {
        draggingOccured_ = NO;
        return;
      }
      if (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SLIDER) {
        if ([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] != 1) {
          return;
        }
        if (!([[((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]])) {
          return;
        }
      }
      else if ((mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION)) {
        if ([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] != 1) {
          return;
        }
        if (!([[((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoButton class]])) {
          return;
        }
      }
      else if (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX) {
        if ([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] != 1) {
          return;
        }
        if (!([[((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoBoolean class]])) {
          return;
        }
      }
      else if (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXT) {
        if ([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] != 1) {
          return;
        }
        if (!([[((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]])) {
          return;
        }
      }
      if ([self viewHasHitsForMouseDragged]) {
        temporaryMode_ = YES;
        oldMode_ = mode_;
        [view_ setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
        OrgGeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithOrgGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(self, event, YES);
        dontClearSelection_ = YES;
        return;
      }
    }
    if (![app_ isRightClickEnabled]) {
      return;
    }
    if (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE) {
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:NO];
      [selection_ addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:rotationCenter_ withBoolean:NO withBoolean:YES];
    }
  }
  lastMouseLoc_ = mouseLoc_;
  [self setMouseLocationWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  [self transformCoords];
  if (moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW) {
    if ([self processRotate3DView]) {
      return;
    }
  }
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]) {
    if ((!temporaryMode_) || ([((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) size] == 0) || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0])) isMoveableWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_] || (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0])) isGeoPoint] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0])) hasDrawable3D])) {
      if ([self processRotate3DView]) {
        if (temporaryMode_) {
          temporaryMode_ = NO;
          mode_ = oldMode_;
          [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setModeWithInt:mode_];
        }
        return;
      }
    }
  }
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) isEmpty]) {
    if ([app_ isSelectionRectangleAllowed] && (([app_ isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]) || [self allowSelectionRectangle]) && !temporaryMode_) {
      if ([app_ hasWithOrgGeogebraCommonMainFeatureEnum:OrgGeogebraCommonMainFeatureEnum_get_SF_DRAG()]) {
        [self updateSelectionRectangleWithBoolean:NO];
      }
      else {
        [self updateSelectionRectangleWithBoolean:([app_ isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event] && ![((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isShiftDown]) || ([app_ isMacOS] && [app_ isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:event] && ![((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isShiftDown] && ![app_ isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]) || [view_ isLockedAxesRatio]];
      }
      [view_ repaintView];
      return;
    }
  }
  if ([view_ getPreviewDrawable] != nil) {
    [((id<OrgGeogebraCommonEuclidianPreviewable>) nil_chk([view_ getPreviewDrawable])) updateMousePosWithDouble:[view_ toRealWorldCoordXWithDouble:((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_] withDouble:[view_ toRealWorldCoordYWithDouble:mouseLoc_->y_]];
  }
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isContinuous] && (lastMouseLoc_ != nil)) {
    jdouble dx = ((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ - lastMouseLoc_->x_;
    jdouble dy = mouseLoc_->y_ - lastMouseLoc_->y_;
    jdouble distsq = (dx * dx) + (dy * dy);
    if (distsq > OrgGeogebraCommonEuclidianEuclidianController_MOUSE_DRAG_MAX_DIST_SQUARE) {
      jdouble factor = JavaLangMath_sqrtWithDouble_(OrgGeogebraCommonEuclidianEuclidianController_MOUSE_DRAG_MAX_DIST_SQUARE / distsq);
      dx *= factor;
      dy *= factor;
      jint steps = JavaLangMath_minWithInt_withInt_(J2ObjCFpToInt((1.0 / factor)), OrgGeogebraCommonEuclidianEuclidianController_MAX_CONTINUITY_STEPS);
      jint mlocx = mouseLoc_->x_;
      jint mlocy = mouseLoc_->y_;
      for (jint i = 1; i <= steps; i++) {
        mouseLoc_->x_ = (jint) JavaLangMath_roundWithDouble_(lastMouseLoc_->x_ + (i * dx));
        mouseLoc_->y_ = (jint) JavaLangMath_roundWithDouble_(lastMouseLoc_->y_ + (i * dy));
        [self calcRWcoords];
        [self handleMouseDraggedWithBoolean:NO withOrgGeogebraCommonEuclidianEventAbstractEvent:event];
      }
      if ((mouseLoc_->x_ != mlocx) || (mouseLoc_->y_ != mlocy)) {
        mouseLoc_->x_ = mlocx;
        mouseLoc_->y_ = mlocy;
        [self calcRWcoords];
      }
    }
  }
  if (pastePreviewSelected_ != nil) {
    if (![pastePreviewSelected_ isEmpty]) {
      [self updatePastePreviewPosition];
    }
  }
  [self handleMouseDraggedWithBoolean:YES withOrgGeogebraCommonEuclidianEventAbstractEvent:event];
}

- (void)translateHitsByVectorWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  OrgGeogebraCommonEuclidianEuclidianController_translateHitsByVectorWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)createVectorForTranslation {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) Vector];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)createVectorForTranslationWithNSString:(NSString *)label {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) VectorWithNSString:label];
}

- (void)setTranslateStartWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                    withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)vec {
  *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = xRW_;
  *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = yRW_;
}

+ (jboolean)penModeWithInt:(jint)mode2 {
  return OrgGeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode2);
}

- (jboolean)handleMousePressedForViewButtons {
  return NO;
}

- (jboolean)processRightPressFor3D {
  return NO;
}

- (void)createNewPointForModePointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                         withBoolean:(jboolean)complex {
  if ((mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER)) {
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removeAllPolygons];
    [hits removeConicsHittedOnFilling];
    [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:YES withBoolean:complex];
  }
  else {
    [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:complex];
  }
}

- (void)createNewPointForModeOtherWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:YES withBoolean:NO];
}

- (void)handleMousePressedForRotateModeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  OrgGeogebraCommonEuclidianHits *hits;
  if (rotationCenter_ == nil) {
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    rotationCenter_ = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([self chooseGeoWithJavaUtilArrayList:[((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINT() withOrgGeogebraCommonEuclidianHits:tempArrayList_] withBoolean:YES], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:rotationCenter_];
    moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  }
  else {
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
    if (![hits isEmpty] && [hits containsWithId:rotationCenter_]) {
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:rotationCenter_];
      rotationCenter_ = nil;
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
      return;
    }
    moveModeSelectionHandled_ = YES;
    hits = [hits getPointRotateableHitsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view_ withOrgGeogebraCommonKernelKernelNDGeoPointND:rotationCenter_];
    if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] && [hits containsWithId:rotGeoElement_]) {
      geo = rotGeoElement_;
    }
    else {
      geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES];
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    rotGeoElement_ = geo;
    if (geo != nil) {
      [self doSingleHighlightingWithOrgGeogebraCommonKernelGeosGeoElement:rotGeoElement_];
      rotationLastAngle_ = JavaLangMath_atan2WithDouble_withDouble_(yRW_ - ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(rotationCenter_))->inhomY_, xRW_ - rotationCenter_->inhomX_);
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_ROTATE;
    }
    else {
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
    }
  }
}

- (void)mousePressedTranslatedViewWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  OrgGeogebraCommonEuclidianEuclidianController_mousePressedTranslatedViewWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
}

- (jboolean)moveAxesPossible {
  return ![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) isLockedAxesRatio] && [view_ isZoomable];
}

- (void)setDragCursorIfMoveView {
  if (moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_VIEW) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDragCursor];
  }
}

- (void)switchModeForMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type = [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getType];
  OrgGeogebraCommonEuclidianHits *hits;
  if (mode_ > 1000) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
  {
    OrgGeogebraCommonKernelGeosGeoPoint *p;
    switch (mode_) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [self createNewPointForModePointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [self createNewPointForModePointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:NO];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT_FIXED:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_REGULAR_POLYGON:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      [self createNewPointForModeOtherWithOrgGeogebraCommonEuclidianHits:hits];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_POLYGON:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RIGID_POLYGON:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size] > 1) {
        [hits removePolygons];
      }
      if ([hits size] == 1 && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoPolygon]) {
      }
      else {
        [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
      if (!allowSelectionRectangleForTranslateByVector_) {
        [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
        hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
        [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
        if ([hits size] == 0) {
          OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, YES, YES);
        }
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_THREE_D:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      if ([hits size] == 0) {
        OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, YES, YES);
      }
      else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 1 && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isPath]) {
        [self createNewPointForModeOtherWithOrgGeogebraCommonEuclidianHits:hits];
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size] > 0 && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoLine]) {
      }
      else {
        [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_LINE_BISECTOR:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLAR_DIAMETER:
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
      if (type == OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH()) {
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setPreviewWithOrgGeogebraCommonEuclidianPreviewable:nil];
      }
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      if ([hits isEmpty]) {
        OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, YES, YES);
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) getTopHits];
      if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
        OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, NO, YES);
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE_FIXED:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIDPOINT:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      if ([hits isEmpty] || (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoSegment] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoConic])) {
        OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, NO, NO, YES);
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
      [self handleMousePressedForRotateModeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
      OrgGeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithOrgGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(self, e, NO);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW:
      OrgGeogebraCommonEuclidianEuclidianController_mousePressedTranslatedViewWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
      p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) getFirstHitWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINT()], [OrgGeogebraCommonKernelGeosGeoPoint class]);
      if (p != nil && [p isMoveable]) {
        [self handleMovedElementWithOrgGeogebraCommonKernelGeosGeoElement:p withBoolean:NO withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()];
        self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_ATTACH_DETACH;
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DELETE:
      [((OrgGeogebraCommonEuclidianModesModeDelete *) nil_chk([self getDeleteMode])) mousePressedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      default:
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
    }
  }
}

- (void)wrapMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  jlong last = [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getType] == OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE() ? self->lastMouseRelease_ : self->lastTouchRelease_;
  if (last + OrgGeogebraCommonEuclidianEuclidianConstants_DOUBLE_CLICK_DELAY > JavaLangSystem_currentTimeMillis() && OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([event getX] - ((OrgGeogebraCommonAwtGPoint *) nil_chk(lastMouseUpLoc_))->x_, [event getY] - lastMouseUpLoc_->y_) <= 3) {
    self->doubleClickStarted_ = YES;
  }
  lastMousePressedTime_ = JavaLangSystem_currentTimeMillis();
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfoIfSetCoordSystemOccured];
  [app_ maySetCoordSystem];
  scriptsHaveRun_ = NO;
  penDragged_ = NO;
  if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setFocusedPanelWithOrgGeogebraCommonEuclidianEventAbstractEvent:event withBoolean:NO];
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) mousePressedForPropertiesView];
    if ([OrgGeogebraCommonGuiViewDataPlotPanelEuclidianViewInterface_class_() isInstance:view_]) {
      [self setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
    }
  }
  else if ([app_ isHTML5Applet] && view_ != nil) {
    [view_ requestFocus];
  }
  [self setMouseLocationWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  if ([self handleMousePressedForViewButtons]) {
    return;
  }
  OrgGeogebraCommonEuclidianHits *hits;
  if (OrgGeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode_)) {
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
    hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removeAllButImages];
    [((OrgGeogebraCommonEuclidianEuclidianPen *) nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getPen(self))) handleMousePressedForPenModeWithOrgGeogebraCommonEuclidianEventAbstractEvent:event withOrgGeogebraCommonEuclidianHits:hits];
    return;
  }
  self->pressedButton_ = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHitButtonWithOrgGeogebraCommonAwtGPoint:mouseLoc_ withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
  if (pressedButton_ != nil) {
    [pressedButton_ setPressedWithBoolean:YES];
    [pressedButton_ setDraggedOrContextWithBoolean:[event isMetaDown] || [event isPopupTrigger]];
    if (![event isRightClick]) {
      [self runScriptsIfNeededWithOrgGeogebraCommonKernelGeosGeoElement:[pressedButton_ getButton]];
    }
  }
  [self transformCoords];
  moveModeSelectionHandled_ = NO;
  draggingOccured_ = NO;
  draggingBeyondThreshold_ = NO;
  [view_ setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
  [((OrgGeogebraCommonAwtGPoint *) nil_chk(selectionStartPoint_)) setLocationWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
  if ([self hitResetIcon] || [view_ hitAnimationButtonWithInt:[event getX] withInt:[event getY]]) {
    return;
  }
  if ([app_ isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]) {
    [self processRightPressFor3D];
    return;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_shallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent_(self, event)) {
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
    hits = [view_ getHits];
    [self switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:hits];
    if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
      dontClearSelection_ = YES;
    }
    if ([hits isEmpty] || OrgGeogebraCommonEuclidianEuclidianController_needsAxisZoomWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(self, hits, event) || ![app_ hasWithOrgGeogebraCommonMainFeatureEnum:OrgGeogebraCommonMainFeatureEnum_get_SF_DRAG()]) {
      temporaryMode_ = YES;
      oldMode_ = mode_;
      [view_ setModeWithInt:[self getModeForShallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]];
    }
    if ([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) hasXAxis] || [((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) hasYAxis]) {
      [self processMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
    }
  }
  [self switchModeForMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
}

- (jboolean)needsAxisZoomWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
           withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  return OrgGeogebraCommonEuclidianEuclidianController_needsAxisZoomWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(self, hits, event);
}

- (jint)getModeForShallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW;
}

- (jboolean)shallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  return OrgGeogebraCommonEuclidianEuclidianController_shallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent_(self, event);
}

- (jboolean)specialMoveEventWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  return OrgGeogebraCommonEuclidianEuclidianController_specialMoveEventWithOrgGeogebraCommonEuclidianEventAbstractEvent_(self, event);
}

- (void)runScriptsIfNeededWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo1 {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) size] > 0 && [[((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]]) {
    [view_ requestFocusInWindow];
  }
  if (!scriptsHaveRun_) {
    scriptsHaveRun_ = YES;
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) runScriptsWithOrgGeogebraCommonKernelGeosGeoElement:geo1 withNSString:nil];
  }
}

- (jboolean)processZoomRectangle {
  id<OrgGeogebraCommonAwtGRectangle> rect = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle];
  if (rect == nil) {
    return NO;
  }
  if (([((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect)) getWidth] < OrgGeogebraCommonEuclidianEuclidianController_ZOOM_RECT_THRESHOLD) || ([rect getHeight] < OrgGeogebraCommonEuclidianEuclidianController_ZOOM_RECT_THRESHOLD) || ![((OrgGeogebraCommonMainApp *) nil_chk(app_)) isShiftDragZoomEnabled]) {
    [view_ setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
    [view_ repaintView];
    return NO;
  }
  [view_ resetMode];
  [view_ setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
  [view_ setAnimatedRealWorldCoordSystemWithDouble:[view_ toRealWorldCoordXWithDouble:[rect getMinX]] withDouble:[view_ toRealWorldCoordXWithDouble:[rect getMaxX]] withDouble:[view_ toRealWorldCoordYWithDouble:[rect getMaxY]] withDouble:[view_ toRealWorldCoordYWithDouble:[rect getMinY]] withInt:15 withBoolean:YES];
  return YES;
}

- (void)processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                              withOrgGeogebraCommonKernelGeosTestEnum:(OrgGeogebraCommonKernelGeosTestEnum *)test {
  for (jint i = 0; i < [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [hits getWithInt:i];
    if (!([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(test)) checkWithId:geo])) {
      (void) [hits removeWithInt:i];
    }
  }
  [self removeParentPointsWithJavaUtilArrayList:hits];
  [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
  [self setAppSelectedGeosWithJavaUtilArrayList:hits withBoolean:NO];
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) updateSelectionWithBoolean:[hits size] > 0];
}

- (void)processSelectionRectangleWithBoolean:(jboolean)alt
                                 withBoolean:(jboolean)isControlDown {
  [self startCollectingMinorRepaints];
  [self clearSelections];
  [view_ setHitsWithOrgGeogebraCommonAwtGRectangle:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle]];
  OrgGeogebraCommonEuclidianHits *hits = [view_ getHits];
  jboolean changedKernel = NO;
  switch (mode_) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
    [self processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    [self processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    [self processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    [self processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_DILATEABLE()];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
    [self removeParentPointsWithJavaUtilArrayList:hits];
    [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
    [self setAppSelectedGeosWithJavaUtilArrayList:hits];
    changedKernel = OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, hits, isControlDown, nil);
    [view_ setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
    if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size] == 1) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoList]) {
        [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
        [self setAppSelectedGeosWithJavaUtilArrayList:hits];
        changedKernel = OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, hits, isControlDown, nil);
        [view_ setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
        break;
      }
    }
    for (jint i = 0; i < [hits size]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [hits getWithInt:i];
      if (!([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINT())) checkWithId:geo])) {
        (void) [hits removeWithInt:i];
      }
    }
    if ([hits size] < 3) {
      [hits clear];
    }
    else {
      [self removeParentPointsWithJavaUtilArrayList:hits];
      [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
      [self setAppSelectedGeosWithJavaUtilArrayList:hits];
      changedKernel = OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, hits, isControlDown, nil);
      [view_ setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
    }
    break;
    default:
    [self setAppSelectedGeosWithJavaUtilArrayList:hits withBoolean:NO];
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) updateSelectionWithBoolean:(hits != nil)];
    if ((hits != nil) && ([hits size] > 0) && alt && [app_ isUsingFullGui] && [app_ getGuiManager] != nil && [app_ showAlgebraInput]) {
      OrgGeogebraCommonJavaxSwingGTextComponent *textComponent = [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) getAlgebraInputTextField];
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      (void) [sb appendWithNSString:@" {"];
      for (jint i = 0; i < [hits size]; i++) {
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:i])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        if (i < ([hits size] - 1)) {
          (void) [sb appendWithNSString:@", "];
        }
      }
      (void) [sb appendWithNSString:@"} "];
      [((OrgGeogebraCommonJavaxSwingGTextComponent *) nil_chk(textComponent)) replaceSelectionWithNSString:[sb description]];
    }
    break;
  }
  if (changedKernel) {
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  }
  [self stopCollectingMinorRepaints];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)processSelection {
  [self startCollectingMinorRepaints];
  OrgGeogebraCommonEuclidianHits *hits = new_OrgGeogebraCommonEuclidianHits_init();
  [hits addAllWithJavaUtilCollection:[self getAppSelectedGeos]];
  [self clearSelections];
  switch (mode_) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
    [self processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    [self processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    [self processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE()];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    [self processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_DILATEABLE()];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
    for (jint i = 0; i < [hits size]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [hits getWithInt:i];
      if (!([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINT())) checkWithId:geo])) {
        (void) [hits removeWithInt:i];
      }
    }
    if ([hits size] < 3) {
      [hits clear];
    }
    else {
      [self removeParentPointsWithJavaUtilArrayList:hits];
      [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:hits];
      [self setAppSelectedGeosWithJavaUtilArrayList:hits];
      OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, hits, NO, nil);
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
    }
    break;
    default:
    break;
  }
  [self stopCollectingMinorRepaints];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)showDrawingPadPopupWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)mouse {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showDrawingPadPopupWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view_ withOrgGeogebraCommonAwtGPoint:mouse];
  }
}

- (void)wrapMouseReleasedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  jint x = [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX];
  jint y = [event getY];
  jboolean right = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  jboolean control = [app_ isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  jboolean alt = [event isAltDown];
  jboolean meta = [event isPopupTrigger] || [event isMetaDown];
  OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type = [event getType];
  if (self->doubleClickStarted_ && !draggingOccured_) {
    [self wrapMouseclickedWithBoolean:control withInt:2 withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  }
  self->doubleClickStarted_ = NO;
  if (type == OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()) {
    self->lastMouseRelease_ = JavaLangSystem_currentTimeMillis();
  }
  else {
    self->lastTouchRelease_ = JavaLangSystem_currentTimeMillis();
  }
  self->lastMouseUpLoc_ = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(x, y);
  [app_ storeUndoInfoIfSetCoordSystemOccured];
  if (pressedButton_ != nil) {
    [pressedButton_ setDraggedOrContextWithBoolean:[pressedButton_ getDraggedOrContext] || meta];
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) requestFocusInWindow];
    [pressedButton_ setPressedWithBoolean:NO];
    pressedButton_ = nil;
  }
  if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getDeletionRectangle] != nil) {
    [view_ setDeletionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
    [view_ repaintView];
    [app_ storeUndoInfo];
  }
  *IOSDoubleArray_GetRef(nil_chk(transformCoordsOffset_), 0) = 0;
  *IOSDoubleArray_GetRef(transformCoordsOffset_, 1) = 0;
  if ([self textfieldJustFocusedWWithInt:x withInt:y withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type]) {
    return;
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode_) && penDragged_) {
    [((OrgGeogebraCommonEuclidianEuclidianPen *) nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getPen(self))) handleMouseReleasedForPenModeWithBoolean:right withInt:x withInt:y];
    [app_ storeUndoInfo];
    return;
  }
  jboolean changedKernel0 = NO;
  if (pastePreviewSelected_ != nil) {
    [self mergeStickyPointsAfterPaste];
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(pastePreviewSelectedAndDependent_)) size]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [pastePreviewSelectedAndDependent_ getWithInt:i];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
        if (![((JavaUtilArrayList *) nil_chk([view_ getStickyPointList])) containsWithId:geo]) {
          [((JavaUtilArrayList *) nil_chk([view_ getStickyPointList])) addWithId:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
        }
      }
    }
    persistentStickyPointList_ = new_JavaUtilArrayList_init();
    pastePreviewSelected_ = nil;
    pastePreviewSelectedAndDependent_ = nil;
    [view_ setPointCapturingWithInt:previousPointCapturing_];
    changedKernel0 = YES;
    [((OrgGeogebraCommonKernelUndoManager *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) getConstruction])) getUndoManager])) storeUndoInfoAfterPasteOrAdd];
  }
  if ([self getMovedGeoPoint] != nil) {
    [self processReleaseForMovedGeoPointWithBoolean:right];
  }
  if (movedGeoNumeric_ != nil) {
    if ([app_ isUsingFullGui]) {
      [movedGeoNumeric_ resetTraceColumns];
    }
  }
  movedGeoPointDragged_ = NO;
  movedGeoNumericDragged_ = NO;
  if (([view_ getHits] == nil) || ([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) size] == 0) || !([[((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getTopHits])) getWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]] || [[((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianHits *) nil_chk([view_ getHits])) getTopHits])) getWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]])) {
    [view_ requestFocusInWindow];
  }
  [self setMouseLocationWithBoolean:alt withInt:x withInt:y];
  [self transformCoords];
  OrgGeogebraCommonEuclidianHits *hits = nil;
  if ([self hitResetIcon]) {
    [app_ reset];
    return;
  }
  else if ([view_ hitAnimationButtonWithInt:x withInt:y] || self->animationButtonPressed_) {
    self->animationButtonPressed_ = NO;
    if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isAnimationRunning]) {
      [((OrgGeogebraCommonKernelAnimationManager *) nil_chk([kernel_ getAnimatonManager])) stopAnimation];
    }
    else {
      [((OrgGeogebraCommonKernelAnimationManager *) nil_chk([kernel_ getAnimatonManager])) startAnimation];
    }
    [view_ repaintView];
    [app_ setUnsaved];
    return;
  }
  if (right || (control && draggingOccured_)) {
    if ([self processRightReleaseFor3DWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type]) {
      return;
    }
    if (!temporaryMode_) {
      OrgGeogebraCommonEuclidianEuclidianController_processRightReleasedWithBoolean_withBoolean_withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, right, control, type);
      return;
    }
  }
  jboolean changedKernel = NO;
  if (draggingOccured_) {
    draggingOccuredBeforeRelease_ = YES;
    draggingOccured_ = NO;
    changedKernel = (((movedGeoElement_ != nil) && [movedGeoElement_ isLabelSet]) && (moveMode__ != OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE));
    movedGeoElement_ = nil;
    rotGeoElement_ = nil;
    if (!temporaryMode_) {
      if ([self allowSelectionRectangle]) {
        [self processSelectionRectangleWithBoolean:alt withBoolean:control];
        return;
      }
    }
  }
  else {
    changedKernel = [self switchModeForMouseReleasedWithInt:mode_ withOrgGeogebraCommonEuclidianHits:hits withBoolean:changedKernel withBoolean:control withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  }
  [self startCollectingMinorRepaints];
  if ((changedKernel || self->checkboxChangeOccured_) && !changedKernel0 && !OrgGeogebraCommonEuclidianEuclidianController_modeCreatesHelperPointsWithInt_(mode_)) {
    self->checkboxChangeOccured_ = NO;
    [app_ storeUndoInfo];
  }
  if (useLineEndPoint_ && (lineEndPoint_ != nil)) {
    ((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ = [view_ toScreenCoordXWithDouble:lineEndPoint_->x_];
    mouseLoc_->y_ = [view_ toScreenCoordYWithDouble:lineEndPoint_->y_];
    useLineEndPoint_ = NO;
  }
  [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  hits = [view_ getHits];
  [self switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:hits];
  if (pointCreated_ != nil) {
    hits = [self addPointCreatedForMouseReleasedWithOrgGeogebraCommonEuclidianHits:hits];
  }
  pointCreated_ = nil;
  if (temporaryMode_) {
    [view_ setModeWithInt:oldMode_];
    temporaryMode_ = NO;
    if (dontClearSelection_ == NO) {
      [self clearSelections];
    }
    dontClearSelection_ = NO;
  }
  else {
    OrgGeogebraCommonEuclidianHits *hits2 = hits;
    OrgGeogebraCommonUtilAsyncOperation *callback = new_OrgGeogebraCommonEuclidianEuclidianController_$5_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(self, hits2, event);
    OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, hits, control, callback);
  }
  [self endOfWrapMouseReleasedWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  draggingOccuredBeforeRelease_ = NO;
}

+ (jboolean)modeCreatesHelperPointsWithInt:(jint)mode2 {
  return OrgGeogebraCommonEuclidianEuclidianController_modeCreatesHelperPointsWithInt_(mode2);
}

- (void)endOfWrapMouseReleasedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  jboolean control = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  jboolean alt = [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isAltDown];
  OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type = [event getType];
  [self endOfWrapMouseReleasedWithOrgGeogebraCommonEuclidianHits:hits withBoolean:control withBoolean:alt withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
}

- (void)endOfWrapMouseReleasedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                     withBoolean:(jboolean)control
                                                     withBoolean:(jboolean)alt
         withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDefaultCursor];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setHitCursor];
  }
  [self refreshHighlightingWithOrgGeogebraCommonEuclidianHits:nil withBoolean:control];
  moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  [self initShowMouseCoords];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowAxesRatioWithBoolean:NO];
  if (![self setJustCreatedGeosSelected]) {
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
      if (checkBoxOrButtonJustHitted_) checkBoxOrButtonJustHitted_ = NO;
      else [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) mouseReleasedForPropertiesViewWithBoolean:mode_ != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE && mode_ != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE];
    }
  }
  if (alt && [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showAlgebraInput]) {
    OrgGeogebraCommonEuclidianEuclidianController_altClickedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
  }
  [self stopCollectingMinorRepaints];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)altClickedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  OrgGeogebraCommonEuclidianEuclidianController_altClickedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, type);
}

- (void)processRightReleasedWithBoolean:(jboolean)right
                            withBoolean:(jboolean)control
withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  OrgGeogebraCommonEuclidianEuclidianController_processRightReleasedWithBoolean_withBoolean_withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(self, right, control, type);
}

- (jboolean)setJustCreatedGeosSelected {
  if (justCreatedGeos_ != nil && [justCreatedGeos_ size] > 0) {
    [self setAppSelectedGeosWithJavaUtilArrayList:justCreatedGeos_];
    return YES;
  }
  return NO;
}

- (void)wrapMouseWheelMovedWithInt:(jint)x
                           withInt:(jint)y
                        withDouble:(jdouble)delta
                       withBoolean:(jboolean)shiftOrMeta
                       withBoolean:(jboolean)alt {
  if ([self isTextfieldHasFocus]) {
    return;
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_penModeWithInt_(mode_)) {
    return;
  }
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) maySetCoordSystem];
  jboolean allowMouseWheel = ![app_ isApplet] || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_IN) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_OUT) || (([app_ isShiftDragZoomEnabled] && [app_ hasFocus]) || shiftOrMeta);
  if (!allowMouseWheel) {
    return;
  }
  wheelZoomingOccurred_ = YES;
  [self setMouseLocationWithBoolean:alt withInt:x withInt:y];
  jdouble px = ((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_;
  jdouble py = mouseLoc_->y_;
  jdouble xFactor = 1;
  if (alt) {
    xFactor = 1.5;
  }
  jdouble reverse = [app_ isMouseWheelReversed] ? -1 : 1;
  jdouble factor = ((delta * reverse) > 0) ? OrgGeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR * xFactor : 1.0 / (OrgGeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR * xFactor);
  [view_ setAnimatedCoordSystemWithDouble:px withDouble:py withDouble:factor withDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXscale] * factor withInt:4 withBoolean:NO];
  [app_ setUnsaved];
}

- (void)setLineEndPointWithOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)p {
  if (p == nil) lineEndPoint_ = nil;
  else lineEndPoint_ = new_OrgGeogebraCommonAwtGPoint2D_Double_initWithDouble_withDouble_([p getX], [p getY]);
  useLineEndPoint_ = YES;
}

- (OrgGeogebraCommonEuclidianHits *)getHighlightedgeos {
  return [((OrgGeogebraCommonEuclidianHits *) nil_chk(highlightedGeos_)) clone];
}

- (void)setAlphaWithFloat:(jfloat)alpha {
  JavaUtilArrayList *geos = [self getAppSelectedGeos];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:alpha];
    [geo updateRepaint];
  }
}

- (void)setSizeWithInt:(jint)size {
  JavaUtilArrayList *geos = [self getAppSelectedGeos];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    if ([OrgGeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
      [((id<OrgGeogebraCommonKernelGeosPointProperties>) nil_chk(((id<OrgGeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosPointProperties))))) setPointSizeWithInt:size];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLineThicknessWithInt:size];
      [geo updateRepaint];
    }
  }
}

- (void)setLineEndPointWithOrgGeogebraCommonAwtGPoint2D_Double:(OrgGeogebraCommonAwtGPoint2D_Double *)point {
  lineEndPoint_ = point;
  useLineEndPoint_ = YES;
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)switchPreviewableForInitNewModeWithInt:(jint)mode1 {
  id<OrgGeogebraCommonEuclidianPreviewable> previewDrawable = nil;
  {
    id<JavaUtilIterator> it;
    switch (mode1) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
      [((OrgGeogebraCommonEuclidianEuclidianPen *) nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getPen(self))) setFreehandWithBoolean:YES];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
      [((OrgGeogebraCommonEuclidianEuclidianPen *) nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getPen(self))) setFreehandWithBoolean:NO];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewParallelLineWithJavaUtilArrayList:selectedPoints_ withJavaUtilArrayList:selectedLines_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewParabolaWithJavaUtilArrayList:selectedPoints_ withJavaUtilArrayList:selectedLines_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewAngleBisectorWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_THREE_D:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewPerpendicularLineWithJavaUtilArrayList:selectedPoints_ withJavaUtilArrayList:selectedLines_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_LINE_BISECTOR:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewPerpendicularBisectorWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewConicWithInt:mode1 withJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
      useLineEndPoint_ = NO;
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewLineWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
      useLineEndPoint_ = NO;
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewSegmentWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
      useLineEndPoint_ = NO;
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewRayWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
      useLineEndPoint_ = NO;
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewVectorWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RIGID_POLYGON:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_POLYGON:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewPolygonWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewPolyLineWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewConicWithInt:mode1 withJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE:
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewAngleWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
      previewDrawable = new_OrgGeogebraCommonEuclidianDrawDrawConic_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(view_, mode1, selectedPoints_, selectedSegments_, selectedConicsND_);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
      previewDrawable = new_OrgGeogebraCommonEuclidianDrawDrawConicPart_initWithOrgGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(view_, mode1, selectedPoints_);
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
      useLineEndPoint_ = NO;
      previewDrawable = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) createPreviewVectorWithJavaUtilArrayList:selectedPoints_];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_OBJECT:
      if (view_ != [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getLastAttachedEV]) {
        return previewDrawable;
      }
      it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([kernel_ getConstruction])) getGeoSetConstructionOrder])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
        if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSetEuclidianVisible] && !(([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo] || [OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:geo]) && [geo isIndependent])) {
          [geo setEuclidianVisibleWithBoolean:YES];
          [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
          [geo updateRepaint];
        }
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setGeoForCopyStyleWithOrgGeogebraCommonKernelGeosGeoElement:nil];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
      rotationCenter_ = nil;
      break;
      default:
      if (mode1 >= OrgGeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET) {
        jint macroID = mode1 - OrgGeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET;
        macro__ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getMacroWithInt:macroID];
        macroInput_ = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro__)) getInputTypes];
        self->mode_ = OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MACRO;
      }
      break;
    }
  }
  return previewDrawable;
}

- (void)initNewModeWithInt:(jint)newMode {
  //if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] == nil && newMode != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW && newMode != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) return;
  self->mode_ = newMode;
  [self initShowMouseCoords];
  if (!temporaryMode_ && !(OrgGeogebraCommonEuclidianEuclidianView_usesSelectionRectangleAsInputWithInt_(newMode) && [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle] != nil)) {
    [self clearSelections];
  }
  moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setPreviewWithOrgGeogebraCommonEuclidianPreviewable:[self switchPreviewableForInitNewModeWithInt:newMode]];
  toggleModeChangedKernel_ = NO;
}

- (void)setModeWithInt:(jint)newMode {
  if (pen_ != nil) {
    [pen_ resetPenOffsets];
  }
  if ((newMode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_ONEVARSTATS) || (newMode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_TWOVARSTATS) || (newMode == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_MULTIVARSTATS)) {
    return;
  }
  [self endOfModeWithInt:mode_];
  allowSelectionRectangleForTranslateByVector_ = YES;
  if (OrgGeogebraCommonEuclidianEuclidianView_usesSelectionRectangleAsInputWithInt_(newMode) && ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getSelectionRectangle] != nil)) {
    [self initNewModeWithInt:newMode];
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView] == view_) {
      [self processSelectionRectangleWithBoolean:NO withBoolean:NO];
    }
  }
  else if (OrgGeogebraCommonEuclidianEuclidianView_usesSelectionAsInputWithInt_(newMode)) {
    [self initNewModeWithInt:newMode];
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView] == view_) {
      [self processSelection];
    }
  }
  else {
    if (!temporaryMode_) {
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) clearSelectedGeosWithBoolean:NO];
    }
    [self initNewModeWithInt:newMode];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)zoomInOutWithBoolean:(jboolean)altPressed
                 withBoolean:(jboolean)minusPressed {
  jdouble factor = minusPressed ? 1.0 / OrgGeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR : OrgGeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR;
  if (altPressed) {
    factor *= minusPressed ? 2.0 / 3.0 : 1.5;
  }
  [self zoomInOutWithDouble:factor withInt:4];
}

- (void)zoomInOutWithDouble:(jdouble)factor
                    withInt:(jint)steps {
  jdouble px, py;
  if (mouseLoc_ != nil) {
    px = mouseLoc_->x_;
    py = mouseLoc_->y_;
  }
  else {
    px = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] / 2;
    py = [view_ getHeight] / 2;
  }
  [self zoomInOutWithDouble:factor withInt:steps withDouble:px withDouble:py];
}

- (void)zoomInOutWithDouble:(jdouble)factor
                    withInt:(jint)steps
                 withDouble:(jdouble)px
                 withDouble:(jdouble)py {
  if (![self allowZoom]) {
    return;
  }
  [view_ setAnimatedCoordSystemWithDouble:px withDouble:py withDouble:factor withDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXscale] * factor withInt:steps withBoolean:NO];
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setUnsaved];
}

- (jboolean)allowZoom {
  return ![((OrgGeogebraCommonMainApp *) nil_chk(app_)) isApplet] || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_IN) || (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_OUT) || [app_ isShiftDragZoomEnabled];
}

- (OrgGeogebraCommonMainApp *)getApplication {
  return app_;
}

- (void)showPopupMenuChooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)selectedGeos1
                 withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showPopupChooseGeoWithJavaUtilArrayList:selectedGeos1 withJavaUtilArrayList:hits withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view_ withOrgGeogebraCommonAwtGPoint:mouseLoc_];
  }
}

- (OrgGeogebraCommonEuclidianEuclidianPen *)getPen {
  return OrgGeogebraCommonEuclidianEuclidianController_getPen(self);
}

- (void)resetPen {
  if (pen_ != nil) {
    [pen_ resetPenOffsets];
  }
}

- (void)checkZooming {
  [self checkZoomingWithBoolean:NO];
}

- (void)checkZoomingWithBoolean:(jboolean)forPreviewable {
}

- (jint)getDeleteToolSize {
  OrgGeogebraCommonMainSettingsEuclidianSettings *settings = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getSettings];
  if (settings != nil) {
    return [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([self->view_ getSettings])) getDeleteToolSize];
  }
  return OrgGeogebraCommonEuclidianEuclidianConstants_DEFAULT_ERASER_SIZE;
}

- (jboolean)isCollectingRepaints {
  return collectingRepaints_ > 0;
}

- (void)setCollectedRepaintsWithBoolean:(jboolean)collected {
  collectedRepaints_ = collected;
}

- (OrgGeogebraCommonMainDialogManager *)getDialogManager {
  return [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getDialogManager];
}

- (JavaUtilArrayList *)getAppSelectedGeos {
  return [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedGeos];
}

- (void)setAppSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) setSelectedGeosWithJavaUtilArrayList:geos];
}

- (void)setAppSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                    withBoolean:(jboolean)updateSelection {
  [((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) setSelectedGeosWithJavaUtilArrayList:geos withBoolean:updateSelection];
}

- (jboolean)isTextfieldHasFocus {
  return textfieldHasFocus__;
}

- (void)calculateEnvironment {
}

- (void)setExternalHandlingWithBoolean:(jboolean)b {
  self->externalHandling_ = b;
}

- (OrgGeogebraCommonEuclidianEnvironmentStyle *)getEnvironmentStyle {
  return nil;
}

- (void)onPinchWithInt:(jint)x
               withInt:(jint)y
            withDouble:(jdouble)scaleFactor {
  self->mouseLoc_ = new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(x, y);
  [self zoomInOutWithDouble:scaleFactor withInt:scaleFactor < OrgGeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR ? 1 : 2];
}

- (void)twoTouchStartWithDouble:(jdouble)x1
                     withDouble:(jdouble)y1
                     withDouble:(jdouble)x2
                     withDouble:(jdouble)y2 {
  OrgGeogebraCommonEuclidianEuclidianController_twoTouchStartCommonWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (void)twoTouchStartCommonWithDouble:(jdouble)x1
                           withDouble:(jdouble)y1
                           withDouble:(jdouble)x2
                           withDouble:(jdouble)y2 {
  OrgGeogebraCommonEuclidianEuclidianController_twoTouchStartCommonWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (void)twoTouchMoveWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  OrgGeogebraCommonEuclidianEuclidianController_twoTouchMoveCommonWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (void)twoTouchMoveCommonWithDouble:(jdouble)x1
                          withDouble:(jdouble)y1
                          withDouble:(jdouble)x2
                          withDouble:(jdouble)y2 {
  OrgGeogebraCommonEuclidianEuclidianController_twoTouchMoveCommonWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (jboolean)isExternalHandling {
  return externalHandling_;
}

- (jint)getEvNo {
  return ((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_))->evNo_;
}

- (void)setDefaultEventTypeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)pointerEventType {
  self->defaultEventType_ = pointerEventType;
}

- (OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)getDefaultEventType {
  return self->defaultEventType_;
}

- (void)moveAttachDetachWithBoolean:(jboolean)repaint
withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  OrgGeogebraCommonEuclidianEuclidianController_moveAttachDetachWithBoolean_withOrgGeogebraCommonEuclidianEventAbstractEvent_(self, repaint, event);
}

- (void)setViewWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setDialogOccurred {
}

- (void)moveIfWaiting {
}

- (void)setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
}

- (jboolean)isTemporaryMode {
  return temporaryMode_;
}

- (void)resetModeAfterFreehand {
}

- (void)prepareModeForFreehand {
}

- (void)onPointerEventStartWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getMovedGeoElement {
  return movedGeoElement_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "removeAxesWithJavaUtilArrayList:", "removeAxes", "V", 0xc, NULL, NULL },
    { "getDeleteMode", NULL, "Lorg.geogebra.common.euclidian.modes.ModeDelete;", 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonMainApp:", "EuclidianController", NULL, 0x1, NULL, NULL },
    { "createCompanions", NULL, "V", 0x4, NULL, NULL },
    { "getCompanion", NULL, "Lorg.geogebra.common.euclidian.EuclidianControllerCompanion;", 0x1, NULL, NULL },
    { "newCompanion", NULL, "Lorg.geogebra.common.euclidian.EuclidianControllerCompanion;", 0x4, NULL, NULL },
    { "startCollectingMinorRepaints", NULL, "V", 0x1, NULL, NULL },
    { "stopCollectingMinorRepaints", NULL, "V", 0x1, NULL, NULL },
    { "updatePastePreviewPosition", NULL, "V", 0x4, NULL, NULL },
    { "setPastePreviewSelected", NULL, "V", 0x11, NULL, NULL },
    { "mayPaste", NULL, "Z", 0x1, NULL, NULL },
    { "deletePastePreviewSelected", NULL, "V", 0x1, NULL, NULL },
    { "mergeStickyPointsAfterPaste", NULL, "V", 0x1, NULL, NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "getMoveMode", NULL, "I", 0x1, NULL, NULL },
    { "endOfModeWithInt:", "endOfMode", "V", 0x4, NULL, NULL },
    { "clearSelectionWithJavaUtilArrayList:withBoolean:", "clearSelection", "V", 0x14, NULL, NULL },
    { "clearSelectionWithJavaUtilArrayList:", "clearSelection", "V", 0x14, NULL, NULL },
    { "getRegionHitsWithOrgGeogebraCommonEuclidianHits:", "getRegionHits", "Lorg.geogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "getSingleIntersectionPointWithOrgGeogebraCommonEuclidianHits:", "getSingleIntersectionPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getSelectedGeos", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getSelectedPointsNDWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "getSelectedPointsND", "V", 0x14, NULL, NULL },
    { "getSelectedPointsND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x14, NULL, NULL },
    { "getSelectedPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x14, NULL, NULL },
    { "getSelectedNumbers", NULL, "[Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x14, NULL, NULL },
    { "getSelectedNumberValues", NULL, "[Lorg.geogebra.common.kernel.arithmetic.NumberValue;", 0x14, NULL, NULL },
    { "getSelectedLists", NULL, "[Lorg.geogebra.common.kernel.geos.GeoList;", 0x14, NULL, NULL },
    { "getSelectedPolygons", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPolygon;", 0x14, NULL, NULL },
    { "getSelectedPolyLines", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPolyLine;", 0x14, NULL, NULL },
    { "getSelectedLinesNDWithOrgGeogebraCommonKernelKernelNDGeoLineNDArray:", "getSelectedLinesND", "V", 0x14, NULL, NULL },
    { "getSelectedLinesND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x14, NULL, NULL },
    { "getSelectedLines", NULL, "[Lorg.geogebra.common.kernel.geos.GeoLine;", 0x14, NULL, NULL },
    { "getSelectedSegmentsNDWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:", "getSelectedSegmentsND", "V", 0x14, NULL, NULL },
    { "getSelectedSegmentsND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x14, NULL, NULL },
    { "getSelectedSegments", NULL, "[Lorg.geogebra.common.kernel.geos.GeoSegment;", 0x14, NULL, NULL },
    { "getSelectedVectorsNDWithOrgGeogebraCommonKernelKernelNDGeoVectorNDArray:", "getSelectedVectorsND", "V", 0x14, NULL, NULL },
    { "getSelectedVectorsND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x14, NULL, NULL },
    { "getSelectedVectors", NULL, "[Lorg.geogebra.common.kernel.geos.GeoVector;", 0x14, NULL, NULL },
    { "getSelectedConics", NULL, "[Lorg.geogebra.common.kernel.geos.GeoConic;", 0x14, NULL, NULL },
    { "getSelectedCircles", NULL, "[Lorg.geogebra.common.kernel.geos.GeoConic;", 0x14, NULL, NULL },
    { "getSelectedCirclesND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x14, NULL, NULL },
    { "getSelectedConicsND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x14, NULL, NULL },
    { "getSelectedDirections", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoDirectionND;", 0x14, NULL, NULL },
    { "getSelectedRegions", NULL, "[Lorg.geogebra.common.kernel.Region;", 0x14, NULL, NULL },
    { "getSelectedPaths", NULL, "[Lorg.geogebra.common.kernel.Path;", 0x14, NULL, NULL },
    { "getSelectedImplicitpoly", NULL, "[Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", 0x14, NULL, NULL },
    { "getSelectedFunctions", NULL, "[Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x14, NULL, NULL },
    { "getSelectedCurves", NULL, "[Lorg.geogebra.common.kernel.geos.GeoCurveCartesian;", 0x14, NULL, NULL },
    { "allowPointCreation", NULL, "Z", 0x4, NULL, NULL },
    { "createNewPoint2DWithNSString:withBoolean:withOrgGeogebraCommonKernelPath:withDouble:withDouble:withBoolean:withBoolean:", "createNewPoint2D", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "createNewPoint2DWithNSString:withBoolean:withOrgGeogebraCommonKernelRegion:withDouble:withDouble:withBoolean:withBoolean:", "createNewPoint2D", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x14, NULL, NULL },
    { "createNewPointWithNSString:withBoolean:withOrgGeogebraCommonKernelRegion:withDouble:withDouble:withDouble:withBoolean:withBoolean:", "createNewPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "setKernelWithOrgGeogebraCommonKernelKernel:", "setKernel", "V", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "clearJustCreatedGeos", NULL, "V", 0x1, NULL, NULL },
    { "getJustCreatedGeos", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "memorizeJustCreatedGeosWithJavaUtilArrayList:", "memorizeJustCreatedGeos", "V", 0x1, NULL, NULL },
    { "memorizeJustCreatedGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:", "memorizeJustCreatedGeos", "V", 0x1, NULL, NULL },
    { "setHighlightedGeosWithBoolean:", "setHighlightedGeos", "V", 0x14, NULL, NULL },
    { "doSingleHighlightingWithOrgGeogebraCommonKernelGeosGeoElement:", "doSingleHighlighting", "V", 0x1, NULL, NULL },
    { "mouseIsOverLabel", NULL, "Z", 0x1, NULL, NULL },
    { "removeParentPointsWithJavaUtilArrayList:", "removeParentPoints", "V", 0x4, NULL, NULL },
    { "addToSelectionListWithJavaUtilArrayList:withId:withInt:", "addToSelectionList", "I", 0x14, NULL, "<T:Ljava/lang/Object;>(Ljava/util/ArrayList<TT;>;TT;I)I" },
    { "addToHighlightedListWithJavaUtilArrayList:withJavaUtilArrayList:withInt:", "addToHighlightedList", "I", 0x14, NULL, NULL },
    { "chooseGeoWithJavaUtilArrayList:withBoolean:", "chooseGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "chooseGeoWithJavaUtilArrayList:withBoolean:withBoolean:", "chooseGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "chooseGeoWithOrgGeogebraCommonEuclidianHits:withOrgGeogebraCommonKernelGeosTestEnum:", "chooseGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "addToSelectionListWithJavaUtilArrayList:withJavaUtilArrayList:withInt:withBoolean:withBoolean:", "addToSelectionList", "I", 0x14, NULL, "<T::Lorg/geogebra/common/kernel/kernelND/GeoElementND;>(Ljava/util/ArrayList<TT;>;Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;IZZ)I" },
    { "selGeos", NULL, "I", 0x11, NULL, NULL },
    { "selPoints", NULL, "I", 0x11, NULL, NULL },
    { "selNumbers", NULL, "I", 0x14, NULL, NULL },
    { "selNumberValues", NULL, "I", 0x14, NULL, NULL },
    { "selLists", NULL, "I", 0x14, NULL, NULL },
    { "selPolyLines", NULL, "I", 0x14, NULL, NULL },
    { "selPolygons", NULL, "I", 0x14, NULL, NULL },
    { "selLines", NULL, "I", 0x14, NULL, NULL },
    { "selDirections", NULL, "I", 0x14, NULL, NULL },
    { "selSegments", NULL, "I", 0x14, NULL, NULL },
    { "selVectors", NULL, "I", 0x14, NULL, NULL },
    { "selConics", NULL, "I", 0x14, NULL, NULL },
    { "selPaths", NULL, "I", 0x14, NULL, NULL },
    { "selRegions", NULL, "I", 0x14, NULL, NULL },
    { "selImplicitpoly", NULL, "I", 0x14, NULL, NULL },
    { "selFunctions", NULL, "I", 0x14, NULL, NULL },
    { "selCurves", NULL, "I", 0x14, NULL, NULL },
    { "handleAddSelectedWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:withJavaUtilArrayList:withOrgGeogebraCommonKernelGeosTestEnum:", "handleAddSelected", "I", 0x4, NULL, NULL },
    { "handleAddSelectedRegionsWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:withJavaUtilArrayList:", "handleAddSelectedRegions", "I", 0x4, NULL, NULL },
    { "addSelectedGeoWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedGeo", "I", 0x11, NULL, NULL },
    { "addSelectedPointWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPoint", "I", 0x14, NULL, NULL },
    { "addSelectedNumericWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedNumeric", "I", 0x11, NULL, NULL },
    { "addSelectedNumberValueWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedNumberValue", "I", 0x11, NULL, NULL },
    { "addSelectedLineWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedLine", "I", 0x14, NULL, NULL },
    { "addSelectedSegmentWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedSegment", "I", 0x14, NULL, NULL },
    { "addSelectedVectorWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedVector", "I", 0x14, NULL, NULL },
    { "addSelectedVectorWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:withOrgGeogebraCommonKernelGeosTestEnum:", "addSelectedVector", "I", 0x14, NULL, NULL },
    { "addSelectedPathWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPath", "I", 0x14, NULL, NULL },
    { "addSelectedRegionWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedRegion", "I", 0x14, NULL, NULL },
    { "addSelectedImplicitpolyWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedImplicitpoly", "I", 0x14, NULL, NULL },
    { "addSelectedPolygonWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPolygon", "I", 0x14, NULL, NULL },
    { "addSelectedPolyLineWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPolyLine", "I", 0x14, NULL, NULL },
    { "addSelectedListWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedList", "I", 0x14, NULL, NULL },
    { "addSelectedDirectionWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedDirection", "I", 0x14, NULL, NULL },
    { "addSelectedCircleWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedCircle", "I", 0x14, NULL, NULL },
    { "addSelectedConicWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedConic", "I", 0x14, NULL, NULL },
    { "addSelectedFunctionWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedFunction", "I", 0x14, NULL, NULL },
    { "addSelectedCurveWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedCurve", "I", 0x14, NULL, NULL },
    { "createNewPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "createNewPoint", "V", 0x4, NULL, NULL },
    { "createNewPointIntersectionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "createNewPointIntersection", "V", 0x4, NULL, NULL },
    { "joinWithOrgGeogebraCommonEuclidianHits:", "join", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "join", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "updateMovedGeoPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "updateMovedGeoPoint", "V", 0x4, NULL, NULL },
    { "ray", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "segmentWithOrgGeogebraCommonEuclidianHits:", "segment", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "segment", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "vectorWithOrgGeogebraCommonEuclidianHits:", "vector", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "vectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "vector", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "rayWithOrgGeogebraCommonEuclidianHits:", "ray", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "polygonWithOrgGeogebraCommonEuclidianHits:", "polygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "polylineWithOrgGeogebraCommonEuclidianHits:", "polyline", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "polygon", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "intersectWithOrgGeogebraCommonEuclidianHits:", "intersect", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "parallelWithOrgGeogebraCommonEuclidianHits:", "parallel", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "checkCoordCartesian", "V", 0xa, NULL, NULL },
    { "parabolaWithOrgGeogebraCommonEuclidianHits:", "parabola", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "orthogonalWithOrgGeogebraCommonEuclidianHits:", "orthogonal", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "orthogonalWithOrgGeogebraCommonEuclidianHits:withBoolean:", "orthogonal", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "midpointWithOrgGeogebraCommonEuclidianHits:", "midpoint", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "functionInspectorWithOrgGeogebraCommonEuclidianHits:", "functionInspector", "Z", 0x14, NULL, NULL },
    { "lineBisectorWithOrgGeogebraCommonEuclidianHits:", "lineBisector", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "angularBisectorWithOrgGeogebraCommonEuclidianHits:", "angularBisector", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "threePointsWithOrgGeogebraCommonEuclidianHits:withInt:", "threePoints", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "switchModeForThreePointsWithInt:", "switchModeForThreePoints", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "relationWithOrgGeogebraCommonEuclidianHits:", "relation", "Z", 0x14, NULL, NULL },
    { "locusWithOrgGeogebraCommonEuclidianHits:", "locus", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "conic5WithOrgGeogebraCommonEuclidianHits:", "conic5", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "slopeWithOrgGeogebraCommonEuclidianHits:", "slope", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "tangentsWithOrgGeogebraCommonEuclidianHits:", "tangents", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "deleteAllWithOrgGeogebraCommonEuclidianHits:", "deleteAll", "Z", 0x1, NULL, NULL },
    { "polarLineWithOrgGeogebraCommonEuclidianHits:", "polarLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "showHideLabelWithOrgGeogebraCommonEuclidianHits:", "showHideLabel", "Z", 0x14, NULL, NULL },
    { "copyVisualStyleWithOrgGeogebraCommonEuclidianHits:", "copyVisualStyle", "Z", 0x14, NULL, NULL },
    { "getMouseLoc", NULL, "Lorg.geogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "textfieldHasFocusWithBoolean:", "textfieldHasFocus", "V", 0x1, NULL, NULL },
    { "checkBoxOrTextfieldOrButtonJustHitted", NULL, "Z", 0x1, NULL, NULL },
    { "initToolTipManager", NULL, "V", 0x404, NULL, NULL },
    { "initShowMouseCoords", NULL, "V", 0x4, NULL, NULL },
    { "wrapMouseEntered", NULL, "V", 0x11, NULL, NULL },
    { "getSelectablesWithOrgGeogebraCommonEuclidianHits:", "getSelectables", "Z", 0x4, NULL, NULL },
    { "moveRotateWithOrgGeogebraCommonEuclidianHits:", "moveRotate", "Z", 0x14, NULL, NULL },
    { "pointWithOrgGeogebraCommonEuclidianHits:", "point", "Z", 0x14, NULL, NULL },
    { "geoElementSelectedWithOrgGeogebraCommonEuclidianHits:withBoolean:", "geoElementSelected", "Z", 0x14, NULL, NULL },
    { "segmentFixedWithOrgGeogebraCommonEuclidianHits:", "segmentFixed", "Z", 0x14, NULL, NULL },
    { "angleFixedWithOrgGeogebraCommonEuclidianHits:", "angleFixed", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "switchModeForCircleOrSphere2WithInt:", "switchModeForCircleOrSphere2", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circleOrSphere2WithOrgGeogebraCommonEuclidianHits:withInt:", "circleOrSphere2", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "showHideObjectWithOrgGeogebraCommonEuclidianHits:", "showHideObject", "Z", 0x14, NULL, NULL },
    { "textWithOrgGeogebraCommonEuclidianHits:", "text", "Z", 0x14, NULL, NULL },
    { "isAltDown", NULL, "Z", 0x1, NULL, NULL },
    { "setAltDownWithBoolean:", "setAltDown", "V", 0x1, NULL, NULL },
    { "slider", NULL, "Z", 0x14, NULL, NULL },
    { "imageWithOrgGeogebraCommonEuclidianHits:", "image", "Z", 0x14, NULL, NULL },
    { "mirrorAtPointWithOrgGeogebraCommonEuclidianHits:", "mirrorAtPoint", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "mirrorAtLineWithOrgGeogebraCommonEuclidianHits:", "mirrorAtLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "mirrorAtCircleWithOrgGeogebraCommonEuclidianHits:", "mirrorAtCircle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "clearHighlightedGeos", NULL, "Z", 0x2, NULL, NULL },
    { "refreshHighlightingWithOrgGeogebraCommonEuclidianHits:withBoolean:", "refreshHighlighting", "Z", 0x1, NULL, NULL },
    { "highlightWithOrgGeogebraCommonKernelGeosGeoElement:", "highlight", "Z", 0x1, NULL, NULL },
    { "highlightWithJavaUtilArrayList:", "highlight", "Z", 0x1, NULL, NULL },
    { "clearSelections", NULL, "V", 0x1, NULL, NULL },
    { "clearSelectionsWithBoolean:withBoolean:", "clearSelections", "V", 0x1, NULL, NULL },
    { "clearSelected", NULL, "V", 0x1, NULL, NULL },
    { "attachDetachWithOrgGeogebraCommonEuclidianHits:", "attachDetach", "Z", 0x14, NULL, NULL },
    { "getMouseLocRW", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "translateByVectorWithOrgGeogebraCommonEuclidianHits:", "translateByVector", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "rotateByAngleWithOrgGeogebraCommonEuclidianHits:", "rotateByAngle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "dilateFromPointWithOrgGeogebraCommonEuclidianHits:", "dilateFromPoint", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "fitLineWithOrgGeogebraCommonEuclidianHits:", "fitLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "FitLineYWithNSString:withOrgGeogebraCommonKernelGeosGeoList:", "FitLineY", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "createListWithOrgGeogebraCommonEuclidianHits:", "createList", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "calcRWcoords", NULL, "V", 0x4, NULL, NULL },
    { "setMouseLocationWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "setMouseLocation", "V", 0x4, NULL, NULL },
    { "setMouseLocationWithBoolean:withInt:withInt:", "setMouseLocation", "V", 0x4, NULL, NULL },
    { "getPointCapturingPercentage", NULL, "F", 0x1, NULL, NULL },
    { "transformCoords", NULL, "V", 0x1, NULL, NULL },
    { "getTransformCoordsOffsetWithInt:", "getTransformCoordsOffset", "D", 0x2, NULL, NULL },
    { "getAlgoDispatcher", NULL, "Lorg.geogebra.common.kernel.algos.AlgoDispatcher;", 0x1, NULL, NULL },
    { "areaWithOrgGeogebraCommonEuclidianHits:", "area", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "regularPolygonWithOrgGeogebraCommonEuclidianHits:", "regularPolygon", "Z", 0x4, NULL, NULL },
    { "addSelectedPlanesForAngleWithOrgGeogebraCommonEuclidianHits:withInt:", "addSelectedPlanesForAngle", "I", 0x4, NULL, NULL },
    { "createAngle3D", NULL, "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "angleWithOrgGeogebraCommonEuclidianHits:", "angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "getTextDispatcher", NULL, "Lorg.geogebra.common.euclidian.TextDispatcher;", 0x4, NULL, NULL },
    { "distanceWithOrgGeogebraCommonEuclidianHits:", "distance", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "showCheckBox", NULL, "Z", 0x14, NULL, NULL },
    { "compassesWithOrgGeogebraCommonEuclidianHits:", "compasses", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "CircleWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "Circle", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x12, NULL, NULL },
    { "CircleCompassesWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "CircleCompasses", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x12, NULL, NULL },
    { "vectorFromPointWithOrgGeogebraCommonEuclidianHits:", "vectorFromPoint", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "circlePointRadiusWithOrgGeogebraCommonEuclidianHits:", "circlePointRadius", "Z", 0x14, NULL, NULL },
    { "getMovedGeoPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateNewPointWithBoolean:withOrgGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "updateNewPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "createNewPointInRegionPossibleWithOrgGeogebraCommonKernelKernelNDGeoConicND:", "createNewPointInRegionPossible", "Z", 0x4, NULL, NULL },
    { "getNewPointWithOrgGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:withBoolean:", "getNewPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithOrgGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "createNewPoint", "Z", 0x4, NULL, NULL },
    { "createNewPointWithOrgGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:", "createNewPoint", "Z", 0x14, NULL, NULL },
    { "macroWithOrgGeogebraCommonEuclidianHits:withOrgGeogebraCommonUtilAsyncOperation:", "macro", "V", 0x14, NULL, NULL },
    { "readNumberOrAngleIfNeededWithOrgGeogebraCommonUtilAsyncOperation:", "readNumberOrAngleIfNeeded", "V", 0x1, NULL, NULL },
    { "macroProcessWithOrgGeogebraCommonUtilAsyncOperation:", "macroProcess", "V", 0x1, NULL, NULL },
    { "buttonWithBoolean:", "button", "Z", 0x14, NULL, NULL },
    { "switchModeForProcessModeWithOrgGeogebraCommonEuclidianHits:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:", "switchModeForProcessMode", "Z", 0x4, NULL, NULL },
    { "endOfSwitchModeForProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:", "endOfSwitchModeForProcessMode", "Z", 0x14, NULL, NULL },
    { "memorizeJustCreatedGeosAfterProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray:", "memorizeJustCreatedGeosAfterProcessMode", "V", 0x4, NULL, NULL },
    { "processModeLock", NULL, "V", 0x1, NULL, NULL },
    { "processModeWithOrgGeogebraCommonEuclidianHits:withBoolean:", "processMode", "Z", 0x11, NULL, NULL },
    { "processModeWithOrgGeogebraCommonEuclidianHits:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:", "processMode", "Z", 0x11, NULL, NULL },
    { "toolCompleted", NULL, "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "processReleaseForMovedGeoPointWithBoolean:", "processReleaseForMovedGeoPoint", "V", 0x4, NULL, NULL },
    { "processRightReleaseFor3DWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "processRightReleaseFor3D", "Z", 0x4, NULL, NULL },
    { "rotateObjectWithBoolean:", "rotateObject", "V", 0x14, NULL, NULL },
    { "moveLabel", NULL, "V", 0x14, NULL, NULL },
    { "movePointWithOffsetWithBoolean:", "movePointWithOffset", "V", 0x4, NULL, NULL },
    { "moveLineWithBoolean:", "moveLine", "V", 0x4, NULL, NULL },
    { "updateAfterMoveWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "updateAfterMove", "V", 0x1c, NULL, NULL },
    { "moveVectorWithBoolean:", "moveVector", "V", 0x14, NULL, NULL },
    { "moveVector", NULL, "V", 0x4, NULL, NULL },
    { "moveVectorWithDouble:withDouble:", "moveVector", "V", 0x14, NULL, NULL },
    { "moveVectorStartPointWithBoolean:", "moveVectorStartPoint", "V", 0x14, NULL, NULL },
    { "moveTextWithBoolean:", "moveText", "V", 0x14, NULL, NULL },
    { "moveTextAbsoluteLocation", NULL, "V", 0x4, NULL, NULL },
    { "moveImageWithBoolean:", "moveImage", "V", 0x14, NULL, NULL },
    { "moveConicWithBoolean:", "moveConic", "V", 0x14, NULL, NULL },
    { "moveImplicitPolyWithBoolean:", "moveImplicitPoly", "V", 0x14, NULL, NULL },
    { "moveFreehandWithBoolean:", "moveFreehand", "V", 0x14, NULL, NULL },
    { "moveFunctionWithBoolean:", "moveFunction", "V", 0x14, NULL, NULL },
    { "moveBooleanWithBoolean:", "moveBoolean", "V", 0x14, NULL, NULL },
    { "moveButtonWithBoolean:", "moveButton", "V", 0x14, NULL, NULL },
    { "getSliderValueWithOrgGeogebraCommonKernelGeosGeoNumeric:withBoolean:", "getSliderValue", "D", 0x14, NULL, NULL },
    { "moveNumericWithBoolean:withBoolean:", "moveNumeric", "V", 0x14, NULL, NULL },
    { "moveSliderWithBoolean:", "moveSlider", "V", 0x14, NULL, NULL },
    { "moveDependentWithBoolean:", "moveDependent", "V", 0x4, NULL, NULL },
    { "moveAttachedWithBoolean:", "moveAttached", "V", 0x14, NULL, NULL },
    { "moveMultipleObjectsWithBoolean:", "moveMultipleObjects", "V", 0x4, NULL, NULL },
    { "getStartPointX", NULL, "D", 0x4, NULL, NULL },
    { "getStartPointY", NULL, "D", 0x4, NULL, NULL },
    { "setMovedGeoPointWithOrgGeogebraCommonKernelGeosGeoElement:", "setMovedGeoPoint", "V", 0x1, NULL, NULL },
    { "switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:", "switchModeForRemovePolygons", "V", 0x4, NULL, NULL },
    { "switchModeForMouseReleasedWithInt:withOrgGeogebraCommonEuclidianHits:withBoolean:withBoolean:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "switchModeForMouseReleased", "Z", 0x4, NULL, NULL },
    { "hitCheckBoxWithOrgGeogebraCommonKernelGeosGeoBoolean:", "hitCheckBox", "V", 0x4, NULL, NULL },
    { "addPointCreatedForMouseReleasedWithOrgGeogebraCommonEuclidianHits:", "addPointCreatedForMouseReleased", "Lorg.geogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "moveModeWithInt:", "moveMode", "Z", 0x4, NULL, NULL },
    { "hitResetIcon", NULL, "Z", 0x4, NULL, NULL },
    { "processMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "processMouseMoved", "V", 0x4, NULL, NULL },
    { "wrapMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "wrapMouseMoved", "V", 0x1, NULL, NULL },
    { "resetToolTipManager", NULL, "V", 0x404, NULL, NULL },
    { "wrapMouseExitedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "wrapMouseExited", "V", 0x1, NULL, NULL },
    { "handleSelectClickWithJavaUtilArrayList:withBoolean:", "handleSelectClick", "V", 0x4, NULL, NULL },
    { "wrapMouseclickedWithBoolean:withInt:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "wrapMouseclicked", "V", 0x4, NULL, NULL },
    { "textfieldJustFocusedWWithInt:withInt:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "textfieldJustFocusedW", "Z", 0x1, NULL, NULL },
    { "resetMovedGeoPoint", NULL, "V", 0x1, NULL, NULL },
    { "setStartPointLocation", NULL, "V", 0x1, NULL, NULL },
    { "setStartPointLocationWithOriginWithDouble:withDouble:", "setStartPointLocationWithOrigin", "V", 0x1, NULL, NULL },
    { "handleMovedElementMultiple", NULL, "V", 0x4, NULL, NULL },
    { "handleMovedElementWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "handleMovedElement", "V", 0x1, NULL, NULL },
    { "handleMovedElementDependentWithChangeableCoordParentNumbers", NULL, "Z", 0x4, NULL, NULL },
    { "handleMovedElementDependent", NULL, "V", 0x4, NULL, NULL },
    { "handleMovedElementDependentInitMode", NULL, "V", 0x4, NULL, NULL },
    { "handleMovedElementFreePoint", NULL, "Z", 0x14, NULL, NULL },
    { "handleMovedElementFreeText", NULL, "Z", 0x14, NULL, NULL },
    { "handleMovedElementFreeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "handleMovedElementFree", "V", 0x4, NULL, NULL },
    { "addMovedGeoElementFreeInputPointsToTranslateableGeos", NULL, "V", 0x2, NULL, NULL },
    { "isMoveSliderExpectedWithInt:", "isMoveSliderExpected", "Z", 0x4, NULL, NULL },
    { "isMoveCheckboxExpected", NULL, "Z", 0x4, NULL, NULL },
    { "isMoveButtonExpectedWithOrgGeogebraCommonKernelGeosGeoElement:", "isMoveButtonExpected", "Z", 0x4, NULL, NULL },
    { "isMoveTextFieldExpectedWithOrgGeogebraCommonKernelGeosGeoElement:", "isMoveTextFieldExpected", "Z", 0x4, NULL, NULL },
    { "setStartPointLocationWithDouble:withDouble:", "setStartPointLocation", "V", 0x4, NULL, NULL },
    { "isCheckboxFixedWithOrgGeogebraCommonKernelGeosGeoBoolean:", "isCheckboxFixed", "Z", 0x2, NULL, NULL },
    { "updateSelectionRectangleWithBoolean:", "updateSelectionRectangle", "V", 0x4, NULL, NULL },
    { "isDraggingBeyondThreshold", NULL, "Z", 0x4, NULL, NULL },
    { "freehandModePrepared", NULL, "Z", 0x4, NULL, NULL },
    { "handleMouseDraggedWithBoolean:withOrgGeogebraCommonEuclidianEventAbstractEvent:", "handleMouseDragged", "V", 0x4, NULL, NULL },
    { "viewHasHitsForMouseDragged", NULL, "Z", 0x4, NULL, NULL },
    { "processRotate3DView", NULL, "Z", 0x4, NULL, NULL },
    { "allowSelectionRectangle", NULL, "Z", 0x4, NULL, NULL },
    { "handleMousePressedForMoveModeWithOrgGeogebraCommonEuclidianEventAbstractEvent:withBoolean:", "handleMousePressedForMoveMode", "V", 0x14, NULL, NULL },
    { "shouldCancelDrag", NULL, "Z", 0x4, NULL, NULL },
    { "wrapMouseDraggedWithOrgGeogebraCommonEuclidianEventAbstractEvent:withBoolean:", "wrapMouseDragged", "V", 0x1, NULL, NULL },
    { "translateHitsByVectorWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "translateHitsByVector", "V", 0x2, NULL, NULL },
    { "createVectorForTranslation", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "createVectorForTranslationWithNSString:", "createVectorForTranslation", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "setTranslateStartWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "setTranslateStart", "V", 0x4, NULL, NULL },
    { "penModeWithInt:", "penMode", "Z", 0xc, NULL, NULL },
    { "handleMousePressedForViewButtons", NULL, "Z", 0x4, NULL, NULL },
    { "processRightPressFor3D", NULL, "Z", 0x4, NULL, NULL },
    { "createNewPointForModePointWithOrgGeogebraCommonEuclidianHits:withBoolean:", "createNewPointForModePoint", "V", 0x4, NULL, NULL },
    { "createNewPointForModeOtherWithOrgGeogebraCommonEuclidianHits:", "createNewPointForModeOther", "V", 0x4, NULL, NULL },
    { "handleMousePressedForRotateModeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "handleMousePressedForRotateMode", "V", 0x4, NULL, NULL },
    { "mousePressedTranslatedViewWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "mousePressedTranslatedView", "V", 0x14, NULL, NULL },
    { "moveAxesPossible", NULL, "Z", 0x4, NULL, NULL },
    { "setDragCursorIfMoveView", NULL, "V", 0x4, NULL, NULL },
    { "switchModeForMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "switchModeForMousePressed", "V", 0x4, NULL, NULL },
    { "wrapMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "wrapMousePressed", "V", 0x1, NULL, NULL },
    { "needsAxisZoomWithOrgGeogebraCommonEuclidianHits:withOrgGeogebraCommonEuclidianEventAbstractEvent:", "needsAxisZoom", "Z", 0x2, NULL, NULL },
    { "getModeForShallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "getModeForShallMoveView", "I", 0x4, NULL, NULL },
    { "shallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "shallMoveView", "Z", 0x2, NULL, NULL },
    { "specialMoveEventWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "specialMoveEvent", "Z", 0x2, NULL, NULL },
    { "runScriptsIfNeededWithOrgGeogebraCommonKernelGeosGeoElement:", "runScriptsIfNeeded", "V", 0x4, NULL, NULL },
    { "processZoomRectangle", NULL, "Z", 0x4, NULL, NULL },
    { "processSelectionRectangleForTransformationsWithOrgGeogebraCommonEuclidianHits:withOrgGeogebraCommonKernelGeosTestEnum:", "processSelectionRectangleForTransformations", "V", 0x4, NULL, NULL },
    { "processSelectionRectangleWithBoolean:withBoolean:", "processSelectionRectangle", "V", 0x4, NULL, NULL },
    { "processSelection", NULL, "V", 0x4, NULL, NULL },
    { "showDrawingPadPopupWithOrgGeogebraCommonAwtGPoint:", "showDrawingPadPopup", "V", 0x1, NULL, NULL },
    { "wrapMouseReleasedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "wrapMouseReleased", "V", 0x1, NULL, NULL },
    { "modeCreatesHelperPointsWithInt:", "modeCreatesHelperPoints", "Z", 0xa, NULL, NULL },
    { "endOfWrapMouseReleasedWithOrgGeogebraCommonEuclidianHits:withOrgGeogebraCommonEuclidianEventAbstractEvent:", "endOfWrapMouseReleased", "V", 0x1, NULL, NULL },
    { "endOfWrapMouseReleasedWithOrgGeogebraCommonEuclidianHits:withBoolean:withBoolean:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "endOfWrapMouseReleased", "V", 0x1, NULL, NULL },
    { "altClickedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "altClicked", "V", 0x2, NULL, NULL },
    { "processRightReleasedWithBoolean:withBoolean:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "processRightReleased", "V", 0x2, NULL, NULL },
    { "setJustCreatedGeosSelected", NULL, "Z", 0x1, NULL, NULL },
    { "wrapMouseWheelMovedWithInt:withInt:withDouble:withBoolean:withBoolean:", "wrapMouseWheelMoved", "V", 0x1, NULL, NULL },
    { "setLineEndPointWithOrgGeogebraCommonAwtGPoint2D:", "setLineEndPoint", "V", 0x1, NULL, NULL },
    { "getHighlightedgeos", NULL, "Lorg.geogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "setAlphaWithFloat:", "setAlpha", "V", 0x1, NULL, NULL },
    { "setSizeWithInt:", "setSize", "V", 0x1, NULL, NULL },
    { "setLineEndPointWithOrgGeogebraCommonAwtGPoint2D_Double:", "setLineEndPoint", "V", 0x1, NULL, NULL },
    { "switchPreviewableForInitNewModeWithInt:", "switchPreviewableForInitNewMode", "Lorg.geogebra.common.euclidian.Previewable;", 0x4, NULL, NULL },
    { "initNewModeWithInt:", "initNewMode", "V", 0x4, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "zoomInOutWithBoolean:withBoolean:", "zoomInOut", "V", 0x1, NULL, NULL },
    { "zoomInOutWithDouble:withInt:", "zoomInOut", "V", 0x1, NULL, NULL },
    { "zoomInOutWithDouble:withInt:withDouble:withDouble:", "zoomInOut", "V", 0x1, NULL, NULL },
    { "allowZoom", NULL, "Z", 0x1, NULL, NULL },
    { "getApplication", NULL, "Lorg.geogebra.common.main.App;", 0x1, NULL, NULL },
    { "showPopupMenuChooseGeoWithJavaUtilArrayList:withOrgGeogebraCommonEuclidianHits:", "showPopupMenuChooseGeo", "V", 0x4, NULL, NULL },
    { "getPen", NULL, "Lorg.geogebra.common.euclidian.EuclidianPen;", 0x11, NULL, NULL },
    { "resetPen", NULL, "V", 0x1, NULL, NULL },
    { "checkZooming", NULL, "V", 0x1, NULL, NULL },
    { "checkZoomingWithBoolean:", "checkZooming", "V", 0x1, NULL, NULL },
    { "getDeleteToolSize", NULL, "I", 0x1, NULL, NULL },
    { "isCollectingRepaints", NULL, "Z", 0x1, NULL, NULL },
    { "setCollectedRepaintsWithBoolean:", "setCollectedRepaints", "V", 0x1, NULL, NULL },
    { "getDialogManager", NULL, "Lorg.geogebra.common.main.DialogManager;", 0x4, NULL, NULL },
    { "getAppSelectedGeos", NULL, "Ljava.util.ArrayList;", 0x4, NULL, NULL },
    { "setAppSelectedGeosWithJavaUtilArrayList:", "setAppSelectedGeos", "V", 0x4, NULL, NULL },
    { "setAppSelectedGeosWithJavaUtilArrayList:withBoolean:", "setAppSelectedGeos", "V", 0x4, NULL, NULL },
    { "isTextfieldHasFocus", NULL, "Z", 0x1, NULL, NULL },
    { "calculateEnvironment", NULL, "V", 0x1, NULL, NULL },
    { "setExternalHandlingWithBoolean:", "setExternalHandling", "V", 0x1, NULL, NULL },
    { "getEnvironmentStyle", NULL, "Lorg.geogebra.common.euclidian.EnvironmentStyle;", 0x1, NULL, NULL },
    { "onPinchWithInt:withInt:withDouble:", "onPinch", "V", 0x1, NULL, NULL },
    { "twoTouchStartWithDouble:withDouble:withDouble:withDouble:", "twoTouchStart", "V", 0x1, NULL, NULL },
    { "twoTouchStartCommonWithDouble:withDouble:withDouble:withDouble:", "twoTouchStartCommon", "V", 0x11, NULL, NULL },
    { "twoTouchMoveWithDouble:withDouble:withDouble:withDouble:", "twoTouchMove", "V", 0x1, NULL, NULL },
    { "twoTouchMoveCommonWithDouble:withDouble:withDouble:withDouble:", "twoTouchMoveCommon", "V", 0x11, NULL, NULL },
    { "isExternalHandling", NULL, "Z", 0x1, NULL, NULL },
    { "getEvNo", NULL, "I", 0x1, NULL, NULL },
    { "setDefaultEventTypeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setDefaultEventType", "V", 0x11, NULL, NULL },
    { "getDefaultEventType", NULL, "Lorg.geogebra.common.euclidian.event.PointerEventType;", 0x11, NULL, NULL },
    { "moveAttachDetachWithBoolean:withOrgGeogebraCommonEuclidianEventAbstractEvent:", "moveAttachDetach", "V", 0x2, NULL, NULL },
    { "setViewWithOrgGeogebraCommonEuclidianEuclidianView:", "setView", "V", 0x401, NULL, NULL },
    { "setDialogOccurred", NULL, "V", 0x1, NULL, NULL },
    { "moveIfWaiting", NULL, "V", 0x1, NULL, NULL },
    { "setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setViewHits", "V", 0x4, NULL, NULL },
    { "isTemporaryMode", NULL, "Z", 0x1, NULL, NULL },
    { "resetModeAfterFreehand", NULL, "V", 0x1, NULL, NULL },
    { "prepareModeForFreehand", NULL, "V", 0x1, NULL, NULL },
    { "onPointerEventStartWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "onPointerEventStart", "V", 0x1, NULL, NULL },
    { "getMovedGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_TRANSPARENT_ALPHA_VALUE_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonEuclidianEuclidianController_MAX_TRANSPARENT_ALPHA_VALUE },
    { "MIN_VISIBLE_ALPHA_VALUE_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonEuclidianEuclidianController_MIN_VISIBLE_ALPHA_VALUE },
    { "POLYGON_NORMAL_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_POLYGON_NORMAL },
    { "POLYGON_RIGID_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_POLYGON_RIGID },
    { "POLYGON_VECTOR_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR },
    { "MOUSE_DRAG_MAX_DIST_SQUARE_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianController_MOUSE_DRAG_MAX_DIST_SQUARE },
    { "MAX_CONTINUITY_STEPS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MAX_CONTINUITY_STEPS },
    { "deleteMode_", NULL, 0x2, "Lorg.geogebra.common.euclidian.modes.ModeDelete;", NULL, NULL,  },
    { "xTemp_", NULL, 0x4, "D", NULL, NULL,  },
    { "yTemp_", NULL, 0x4, "D", NULL, NULL,  },
    { "xRW_", NULL, 0x1, "D", NULL, NULL,  },
    { "yRW_", NULL, 0x1, "D", NULL, NULL,  },
    { "xRWold_", NULL, 0x0, "D", NULL, NULL,  },
    { "yRWold_", NULL, 0x0, "D", NULL, NULL,  },
    { "temp_", NULL, 0x0, "D", NULL, NULL,  },
    { "useLineEndPoint_", NULL, 0x4, "Z", NULL, NULL,  },
    { "tempConic_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "tempImplicitPoly_", NULL, 0x4, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "moveDependentPoints_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoPoint;>;",  },
    { "tempFunction_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "movedGeoPoint_", NULL, 0x1, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "movedGeoPointDragged_", NULL, 0x1, "Z", NULL, NULL,  },
    { "movedGeoLine_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "movedGeoConic_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "movedGeoImplicitPoly_", NULL, 0x4, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "movedGeoVector_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", NULL, NULL,  },
    { "movedGeoText_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "oldImage_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoImage;", NULL, NULL,  },
    { "movedGeoImage_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoImage;", NULL, NULL,  },
    { "movedGeoFunction_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "movedGeoNumeric_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "movedGeoNumericDragged_", NULL, 0x4, "Z", NULL, NULL,  },
    { "movedGeoBoolean_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "movedGeoButton_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.Furniture;", NULL, NULL,  },
    { "movedLabelGeoElement_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "movedGeoElement_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "tempNum_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "rotationLastAngle_", NULL, 0x4, "D", NULL, NULL,  },
    { "translateableGeos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "translationVec_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tempArrayList_", NULL, 0x4, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "tempArrayList2_", NULL, 0x4, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "tempArrayList3_", NULL, 0x4, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "selectedPoints_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "selectedNumbers_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoNumeric;>;",  },
    { "selectedNumberValues_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoNumberValue;>;",  },
    { "selectedLines_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoLineND;>;",  },
    { "selectedDirections_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoDirectionND;>;",  },
    { "selectedSegments_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoSegmentND;>;",  },
    { "selectedRegions_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/Region;>;",  },
    { "selectedPaths_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/Path;>;",  },
    { "selectedConicsND_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoConicND;>;",  },
    { "selectedImplicitpoly_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/implicit/GeoImplicitPoly;>;",  },
    { "selectedFunctions_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoFunction;>;",  },
    { "selectedCurves_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoCurveCartesian;>;",  },
    { "selectedVectors_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoVectorND;>;",  },
    { "selectedPolygons_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoPolygon;>;",  },
    { "selectedPolyLines_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoPolyLine;>;",  },
    { "selectedGeos_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "selectedLists_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoList;>;",  },
    { "highlightedGeos_", NULL, 0x4, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "justCreatedGeos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "selectionPreview_", NULL, 0x4, "Z", NULL, NULL,  },
    { "hideIntersection_", NULL, 0x1, "Z", NULL, NULL,  },
    { "resultedGeo_", NULL, 0x1, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "temporaryMode_", NULL, 0x4, "Z", NULL, NULL,  },
    { "dontClearSelection_", NULL, 0x4, "Z", NULL, NULL,  },
    { "draggingOccured_", NULL, 0x4, "Z", NULL, NULL,  },
    { "draggingOccuredBeforeRelease_", NULL, 0x4, "Z", NULL, NULL,  },
    { "draggingBeyondThreshold_", NULL, 0x1, "Z", NULL, NULL,  },
    { "pointCreated_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "moveModeSelectionHandled_", NULL, 0x4, "Z", NULL, NULL,  },
    { "highlightJustCreatedGeos_", NULL, 0x4, "Z", NULL, NULL,  },
    { "pastePreviewSelected_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "pastePreviewSelectedAndDependent_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "mode_", NULL, 0x4, "I", NULL, NULL,  },
    { "oldMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "moveMode__", "moveMode", 0x4, "I", NULL, NULL,  },
    { "macro__", "macro", 0x4, "Lorg.geogebra.common.kernel.Macro;", NULL, NULL,  },
    { "macroInput_", NULL, 0x4, "[Lorg.geogebra.common.kernel.geos.Test;", NULL, NULL,  },
    { "defaultInitialDelay_", NULL, 0x4, "I", NULL, NULL,  },
    { "toggleModeChangedKernel_", NULL, 0x4, "Z", NULL, NULL,  },
    { "altDown_", NULL, 0x4, "Z", NULL, NULL,  },
    { "rotGeoElement_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "rotationCenter_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "polygonMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "transformCoordsOffset_", NULL, 0x4, "[D", NULL, NULL,  },
    { "allowSelectionRectangleForTranslateByVector_", NULL, 0x4, "Z", NULL, NULL,  },
    { "previousPointCapturing_", NULL, 0x4, "I", NULL, NULL,  },
    { "persistentStickyPointList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "app_", NULL, 0x14, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "selection_", NULL, 0x14, "Lorg.geogebra.common.main.SelectionManager;", NULL, NULL,  },
    { "l10n_", NULL, 0x14, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "kernel_", NULL, 0x1, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "startLoc_", NULL, 0x4, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "mouseLoc_", NULL, 0x1, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "lastMouseLoc_", NULL, 0x4, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "oldLoc_", NULL, 0x4, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "startPoint_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint2D$Double;", NULL, NULL,  },
    { "lineEndPoint_", NULL, 0x4, "Lorg.geogebra.common.awt.GPoint2D$Double;", NULL, NULL,  },
    { "selectionStartPoint_", NULL, 0x4, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "tempDependentPointX_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "tempDependentPointY_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "mouseIsOverLabel__", "mouseIsOverLabel", 0x4, "Z", NULL, NULL,  },
    { "view_", NULL, 0x1, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "collectingRepaints_", NULL, 0x4, "I", NULL, NULL,  },
    { "collectedRepaints_", NULL, 0x4, "Z", NULL, NULL,  },
    { "externalHandling_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastMouseRelease_", NULL, 0x2, "J", NULL, NULL,  },
    { "lastTouchRelease_", NULL, 0x2, "J", NULL, NULL,  },
    { "index_", NULL, 0x0, "I", NULL, NULL,  },
    { "companion_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianControllerCompanion;", NULL, NULL,  },
    { "animationButtonPressed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pen_", NULL, 0x1, "Lorg.geogebra.common.euclidian.EuclidianPen;", NULL, NULL,  },
    { "handleAddSelectedArrayList_", NULL, 0x4, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "textfieldHasFocus__", "textfieldHasFocus", 0x2, "Z", NULL, NULL,  },
    { "pressedButton_", NULL, 0x2, "Lorg.geogebra.common.euclidian.MyButton;", NULL, NULL,  },
    { "MOVE_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE },
    { "MOVE_POINT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT },
    { "MOVE_LINE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_LINE },
    { "MOVE_CONIC_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_CONIC },
    { "MOVE_VECTOR_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR },
    { "MOVE_VECTOR_STARTPOINT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_STARTPOINT },
    { "MOVE_VIEW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VIEW },
    { "MOVE_FUNCTION_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_FUNCTION },
    { "MOVE_LABEL_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_LABEL },
    { "MOVE_TEXT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_TEXT },
    { "MOVE_NUMERIC_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NUMERIC },
    { "MOVE_SLIDER_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_SLIDER },
    { "MOVE_IMAGE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_IMAGE },
    { "MOVE_ROTATE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_ROTATE },
    { "MOVE_DEPENDENT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_DEPENDENT },
    { "MOVE_MULTIPLE_OBJECTS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_MULTIPLE_OBJECTS },
    { "MOVE_X_AXIS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_X_AXIS },
    { "MOVE_Y_AXIS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_Y_AXIS },
    { "MOVE_BOOLEAN_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_BOOLEAN },
    { "MOVE_BUTTON_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_BUTTON },
    { "MOVE_ROTATE_VIEW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW },
    { "MOVE_IMPLICITPOLY_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_IMPLICITPOLY },
    { "MOVE_VECTOR_NO_GRID_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID },
    { "MOVE_POINT_WITH_OFFSET_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET },
    { "MOVE_FREEHAND_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_FREEHAND },
    { "MOVE_ATTACH_DETACH_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_ATTACH_DETACH },
    { "MOVE_PLANE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_MOVE_PLANE },
    { "ZOOM_RECT_THRESHOLD_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_ZOOM_RECT_THRESHOLD },
    { "DRAG_THRESHOLD_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_DRAG_THRESHOLD },
    { "tmpCoordsL3_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoordsL4_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "mouseLocRW_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "textDispatcher_", NULL, 0x2, "Lorg.geogebra.common.euclidian.TextDispatcher;", NULL, NULL,  },
    { "vertexX_", NULL, 0x0, "D", NULL, NULL,  },
    { "vertexY_", NULL, 0x0, "D", NULL, NULL,  },
    { "initxRW_", NULL, 0x2, "D", NULL, NULL,  },
    { "initFactor_", NULL, 0x2, "D", NULL, NULL,  },
    { "checkBoxOrButtonJustHitted_", NULL, 0x2, "Z", NULL, NULL,  },
    { "penDragged_", NULL, 0x4, "Z", NULL, NULL,  },
    { "scriptsHaveRun_", NULL, 0x2, "Z", NULL, NULL,  },
    { "doubleClickStarted_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastMouseUpLoc_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "checkboxChangeOccured_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastMousePressedTime_", NULL, 0x2, "J", NULL, NULL,  },
    { "wheelZoomingOccurred_", NULL, 0x2, "Z", NULL, NULL,  },
    { "oldDistance_", NULL, 0x1, "D", NULL, NULL,  },
    { "defaultEventType_", NULL, 0x2, "Lorg.geogebra.common.euclidian.event.PointerEventType;", NULL, NULL,  },
    { "MINIMAL_PIXEL_DIFFERENCE_FOR_ZOOM_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianEuclidianController_MINIMAL_PIXEL_DIFFERENCE_FOR_ZOOM },
    { "INCREASED_THRESHOLD_FACTOR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonEuclidianEuclidianController_INCREASED_THRESHOLD_FACTOR },
    { "detachFrom_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
    { "detachFromPath_", NULL, 0x2, "Z", NULL, NULL,  },
    { "detachFromRegion_", NULL, 0x2, "Z", NULL, NULL,  },
    { "needsAttach_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianEuclidianController = { 2, "EuclidianController", "org.geogebra.common.euclidian", NULL, 0x401, 368, methods, 170, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianEuclidianController;
}

@end

void OrgGeogebraCommonEuclidianEuclidianController_removeAxesWithJavaUtilArrayList_(JavaUtilArrayList *geos) {
  OrgGeogebraCommonEuclidianEuclidianController_initialize();
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoAxis class]]) {
      (void) [geos removeWithInt:i];
    }
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonMainApp *app) {
  (void) NSObject_init(self);
  self->xRWold_ = JavaLangDouble_NEGATIVE_INFINITY;
  self->yRWold_ = self->xRWold_;
  self->useLineEndPoint_ = NO;
  self->movedGeoPointDragged_ = NO;
  self->movedGeoNumericDragged_ = NO;
  self->tempArrayList_ = new_OrgGeogebraCommonEuclidianHits_init();
  self->tempArrayList2_ = new_OrgGeogebraCommonEuclidianHits_init();
  self->tempArrayList3_ = new_OrgGeogebraCommonEuclidianHits_init();
  self->selectedPoints_ = new_JavaUtilArrayList_init();
  self->selectedNumbers_ = new_JavaUtilArrayList_init();
  self->selectedNumberValues_ = new_JavaUtilArrayList_init();
  self->selectedLines_ = new_JavaUtilArrayList_init();
  self->selectedDirections_ = new_JavaUtilArrayList_init();
  self->selectedSegments_ = new_JavaUtilArrayList_init();
  self->selectedRegions_ = new_JavaUtilArrayList_init();
  self->selectedPaths_ = new_JavaUtilArrayList_init();
  self->selectedConicsND_ = new_JavaUtilArrayList_init();
  self->selectedImplicitpoly_ = new_JavaUtilArrayList_init();
  self->selectedFunctions_ = new_JavaUtilArrayList_init();
  self->selectedCurves_ = new_JavaUtilArrayList_init();
  self->selectedVectors_ = new_JavaUtilArrayList_init();
  self->selectedPolygons_ = new_JavaUtilArrayList_init();
  self->selectedPolyLines_ = new_JavaUtilArrayList_init();
  self->selectedGeos_ = new_JavaUtilArrayList_init();
  self->selectedLists_ = new_JavaUtilArrayList_init();
  self->highlightedGeos_ = new_OrgGeogebraCommonEuclidianHits_init();
  self->justCreatedGeos_ = new_JavaUtilArrayList_init();
  self->selectionPreview_ = NO;
  self->hideIntersection_ = NO;
  self->temporaryMode_ = NO;
  self->dontClearSelection_ = NO;
  self->draggingOccured_ = NO;
  self->draggingOccuredBeforeRelease_ = NO;
  self->draggingBeyondThreshold_ = NO;
  self->pointCreated_ = nil;
  self->highlightJustCreatedGeos_ = YES;
  self->pastePreviewSelected_ = nil;
  self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
  self->toggleModeChangedKernel_ = NO;
  self->altDown_ = NO;
  self->polygonMode_ = OrgGeogebraCommonEuclidianEuclidianController_POLYGON_NORMAL;
  self->transformCoordsOffset_ = [IOSDoubleArray newArrayWithLength:2];
  self->allowSelectionRectangleForTranslateByVector_ = YES;
  self->persistentStickyPointList_ = new_JavaUtilArrayList_init();
  self->oldLoc_ = new_OrgGeogebraCommonAwtGPoint_init();
  self->startPoint_ = new_OrgGeogebraCommonAwtGPoint2D_Double_init();
  self->lineEndPoint_ = nil;
  self->selectionStartPoint_ = new_OrgGeogebraCommonAwtGPoint_init();
  self->mouseIsOverLabel__ = NO;
  self->collectingRepaints_ = 0;
  self->collectedRepaints_ = NO;
  self->animationButtonPressed_ = NO;
  self->handleAddSelectedArrayList_ = new_OrgGeogebraCommonEuclidianHits_init();
  self->textfieldHasFocus__ = NO;
  self->vertexX_ = JavaLangDouble_NaN;
  self->vertexY_ = JavaLangDouble_NaN;
  self->initxRW_ = JavaLangDouble_NaN;
  self->initFactor_ = JavaLangDouble_NaN;
  self->checkBoxOrButtonJustHitted_ = NO;
  self->scriptsHaveRun_ = NO;
  self->checkboxChangeOccured_ = NO;
  self->wheelZoomingOccurred_ = NO;
  self->defaultEventType_ = OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE();
  self->needsAttach_ = NO;
  self->app_ = app;
  self->selection_ = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getSelectionManager];
  self->l10n_ = [app getLocalization];
  [self createCompanions];
}

void OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, jboolean doUpdateSelection) {
  [((JavaUtilArrayList *) nil_chk(selectionList)) clear];
  [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) clear];
  if (doUpdateSelection) {
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) clearSelectedGeos];
  }
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) repaintView];
}

void OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList) {
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_withBoolean_(self, selectionList, YES);
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedGeos_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(ret, i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedGeos_);
  return ret;
}

void OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *result) {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size]; i++) {
    (void) IOSObjectArray_Set(nil_chk(result), i, [self->selectedPoints_ getWithInt:i]);
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedPoints_);
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size] type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, ret);
  return ret;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPoints(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size] type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsNDWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, ret);
  return ret;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedNumbers(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedNumbers_)) size] type:OrgGeogebraCommonKernelGeosGeoNumeric_class_()];
  for (jint i = 0; i < [self->selectedNumbers_ size]; i++) {
    (void) IOSObjectArray_Set(ret, i, [self->selectedNumbers_ getWithInt:i]);
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedNumbers_);
  return ret;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedLists(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedLists_)) size] type:OrgGeogebraCommonKernelGeosGeoList_class_()];
  for (jint i = 0; i < [self->selectedLists_ size]; i++) {
    (void) IOSObjectArray_Set(ret, i, [self->selectedLists_ getWithInt:i]);
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedLists_);
  return ret;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPolygons_)) size] type:OrgGeogebraCommonKernelGeosGeoPolygon_class_()];
  for (jint i = 0; i < [self->selectedPolygons_ size]; i++) {
    (void) IOSObjectArray_Set(ret, i, [self->selectedPolygons_ getWithInt:i]);
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedPolygons_);
  return ret;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolyLines(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPolyLines_)) size] type:OrgGeogebraCommonKernelGeosGeoPolyLine_class_()];
  for (jint i = 0; i < [self->selectedPolyLines_ size]; i++) {
    (void) IOSObjectArray_Set(ret, i, [self->selectedPolyLines_ getWithInt:i]);
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedPolyLines_);
  return ret;
}

void OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithOrgGeogebraCommonKernelKernelNDGeoLineNDArray_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *lines) {
  jint i = 0;
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(self->selectedLines_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(nil_chk(lines), i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedLines_);
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *lines = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedLines_)) size] type:OrgGeogebraCommonKernelKernelNDGeoLineND_class_()];
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithOrgGeogebraCommonKernelKernelNDGeoLineNDArray_(self, lines);
  return lines;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *lines = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedLines_)) size] type:OrgGeogebraCommonKernelGeosGeoLine_class_()];
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesNDWithOrgGeogebraCommonKernelKernelNDGeoLineNDArray_(self, lines);
  return lines;
}

void OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *segments) {
  jint i = 0;
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(self->selectedSegments_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(nil_chk(segments), i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedSegments_);
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *segments = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedSegments_)) size] type:OrgGeogebraCommonKernelKernelNDGeoSegmentND_class_()];
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsNDWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray_(self, segments);
  return segments;
}

void OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithOrgGeogebraCommonKernelKernelNDGeoVectorNDArray_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *vectors) {
  jint i = 0;
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(self->selectedVectors_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(nil_chk(vectors), i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedVectors_);
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *vectors = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedVectors_)) size] type:OrgGeogebraCommonKernelKernelNDGeoVectorND_class_()];
  OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsNDWithOrgGeogebraCommonKernelKernelNDGeoVectorNDArray_(self, vectors);
  return vectors;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedConics(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *conics = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size] type:OrgGeogebraCommonKernelGeosGeoConic_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedConicsND_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(conics, i, (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast([it next], [OrgGeogebraCommonKernelGeosGeoConic class]));
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedConicsND_);
  return conics;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedCircles(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *circles = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size] type:OrgGeogebraCommonKernelGeosGeoConic_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedConicsND_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelKernelNDGeoConicND *c = [it next];
    if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isCircle]) {
      (void) IOSObjectArray_Set(circles, i, (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(c, [OrgGeogebraCommonKernelGeosGeoConic class]));
      i++;
    }
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedConicsND_);
  return circles;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *conics = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size] type:OrgGeogebraCommonKernelKernelNDGeoConicND_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedConicsND_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(conics, i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedConicsND_);
  return conics;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedRegions(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *regions = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedRegions_)) size] type:OrgGeogebraCommonKernelRegion_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedRegions_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(regions, i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedRegions_);
  return regions;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedPaths(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *paths = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPaths_)) size] type:OrgGeogebraCommonKernelPath_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedPaths_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(paths, i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedPaths_);
  return paths;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *implicitPoly = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedImplicitpoly_)) size] type:OrgGeogebraCommonKernelImplicitGeoImplicitPoly_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedImplicitpoly_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(implicitPoly, i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedImplicitpoly_);
  return implicitPoly;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *functions = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedFunctions_)) size] type:OrgGeogebraCommonKernelGeosGeoFunction_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedFunctions_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(functions, i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedFunctions_);
  return functions;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_getSelectedCurves(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *curves = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedCurves_)) size] type:OrgGeogebraCommonKernelGeosGeoCurveCartesian_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedCurves_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(curves, i, [it next]);
    i++;
  }
  OrgGeogebraCommonEuclidianEuclidianController_clearSelectionWithJavaUtilArrayList_(self, self->selectedCurves_);
  return curves;
}

id<OrgGeogebraCommonKernelKernelNDGeoPointND> OrgGeogebraCommonEuclidianEuclidianController_createNewPoint2DWithNSString_withBoolean_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, NSString *label, jboolean forPreviewable, id<OrgGeogebraCommonKernelRegion> region, jdouble x, jdouble y, jboolean complex, jboolean coords2D) {
  [self checkZoomingWithBoolean:forPreviewable];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PointInWithNSString:label withOrgGeogebraCommonKernelRegion:region withDouble:x withDouble:y withBoolean:!forPreviewable withBoolean:complex withBoolean:coords2D];
  return ret;
}

void OrgGeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean highlight) {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  id<JavaUtilIterator> it = [((OrgGeogebraCommonEuclidianHits *) nil_chk(self->highlightedGeos_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    geo = [it next];
    if (!highlight || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setHighlightedWithBoolean:highlight];
    }
  }
}

jint OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, id geo, jint max) {
  if (geo == nil) {
    return 0;
  }
  jint ret = 0;
  if ([((JavaUtilArrayList *) nil_chk(selectionList)) containsWithId:geo]) {
    [selectionList removeWithId:geo];
    if (![selectionList isEqual:self->selectedGeos_]) {
      [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) removeWithId:geo];
    }
    ret = -1;
  }
  else {
    if ([selectionList size] < max) {
      [selectionList addWithId:geo];
      if (![selectionList isEqual:self->selectedGeos_]) {
        [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])];
      }
      ret = 1;
    }
  }
  if (ret != 0) {
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])];
  }
  return ret;
}

jint OrgGeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, JavaUtilArrayList *geos, jint max) {
  if (geos == nil) {
    return 0;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  jint ret = 0;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    geo = [geos getWithInt:i];
    if ([((JavaUtilArrayList *) nil_chk(selectionList)) containsWithId:geo]) {
      ret = (ret == 1) ? 1 : -1;
    }
    else {
      if ([selectionList size] < max) {
        [((OrgGeogebraCommonEuclidianHits *) nil_chk(self->highlightedGeos_)) addWithId:geo];
        ret = 1;
      }
    }
  }
  return ret;
}

jint OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_withBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, JavaUtilArrayList *selectionList, JavaUtilArrayList *geos, jint max, jboolean addMoreThanOneAllowed, jboolean tryDeselect) {
  if (geos == nil) {
    return 0;
  }
  if (tryDeselect && ([((JavaUtilArrayList *) nil_chk(geos)) size] == 1)) {
    return OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, (id<OrgGeogebraCommonKernelKernelNDGeoElementND>) check_protocol_cast([geos getWithInt:0], @protocol(OrgGeogebraCommonKernelKernelNDGeoElementND)), max);
  }
  [((JavaUtilArrayList *) nil_chk(geos)) removeAllWithJavaUtilCollection:selectionList];
  if (!addMoreThanOneAllowed || (([geos size] + [((JavaUtilArrayList *) nil_chk(selectionList)) size]) > max)) {
    return OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, (id<OrgGeogebraCommonKernelKernelNDGeoElementND>) check_protocol_cast([self chooseGeoWithJavaUtilArrayList:geos withBoolean:YES withBoolean:YES], @protocol(OrgGeogebraCommonKernelKernelNDGeoElementND)), max);
  }
  jboolean contained = NO;
  for (jint i = 0; i < [geos size]; i++) {
    if ([((JavaUtilArrayList *) nil_chk(selectionList)) containsWithId:[geos getWithInt:i]]) {
      contained = YES;
    }
  }
  if (contained) {
    return OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, (id<OrgGeogebraCommonKernelKernelNDGeoElementND>) check_protocol_cast([self chooseGeoWithJavaUtilArrayList:geos withBoolean:YES withBoolean:YES], @protocol(OrgGeogebraCommonKernelKernelNDGeoElementND)), max);
  }
  jint count = 0;
  for (jint i = 0; i < [geos size]; i++) {
    count += OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, selectionList, (id<OrgGeogebraCommonKernelKernelNDGeoElementND>) check_protocol_cast([geos getWithInt:i], @protocol(OrgGeogebraCommonKernelKernelNDGeoElementND)), max);
  }
  return count;
}

jint OrgGeogebraCommonEuclidianEuclidianController_selGeos(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selPoints(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selNumbers(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedNumbers_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selLists(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedLists_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selPolyLines(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPolyLines_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selPolygons(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPolygons_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selLines(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedLines_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selSegments(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedSegments_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selVectors(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedVectors_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selConics(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selPaths(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPaths_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selRegions(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedRegions_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selImplicitpoly(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedImplicitpoly_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selFunctions(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedFunctions_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_selCurves(OrgGeogebraCommonEuclidianEuclidianController *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedCurves_)) size];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedGeos_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOELEMENT()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPoints_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedNumericWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedNumbers_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEONUMERIC()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedLines_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOLINEND()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedSegments_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOSEGMENTND()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_withOrgGeogebraCommonKernelGeosTestEnum_(self, hits, max, addMoreThanOneAllowed, OrgGeogebraCommonKernelGeosTestEnum_get_GEOVECTORND());
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_withOrgGeogebraCommonKernelGeosTestEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed, OrgGeogebraCommonKernelGeosTestEnum *geoClass) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedVectors_ withOrgGeogebraCommonKernelGeosTestEnum:geoClass];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedPathWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPaths_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_PATH()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedRegionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedRegionsWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedRegions_];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedImplicitpoly_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOIMPLICITPOLY()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPolygons_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOLYGON()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolyLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPolyLines_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOLYLINE()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedListWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedLists_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOLIST()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedConicsND_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOCONICND()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedFunctions_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOFUNCTION()];
}

jint OrgGeogebraCommonEuclidianEuclidianController_addSelectedCurveWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedCurves_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOCURVECARTESIAN()];
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_joinWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    return [self join];
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_segmentWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    return OrgGeogebraCommonEuclidianEuclidianController_segment(self);
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_segment(OrgGeogebraCommonEuclidianEuclidianController *self) {
  IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
  IOSObjectArray *ret = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) segmentAlgoWithOrgGeogebraCommonKernelConstruction:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction] withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)])) getOutput];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) setLabelWithNSString:nil];
  return ret;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_vectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    return [IOSObjectArray newArrayWithObjects:(id[]){ [self vectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_rayWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    return [self ray];
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_polygonWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  if (self->polygonMode_ == OrgGeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *poly = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      IOSObjectArray *points = (IOSObjectArray *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(IOSObjectArray_Get(nil_chk(poly), 0))) getPoints], [IOSObjectArray class]);
      IOSObjectArray *pointsCopy = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
      for (jint i = 0; i < points->size_; i++) {
        (void) IOSObjectArray_Set(pointsCopy, i, [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) copy__]);
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pointsCopy, i))) setLabelWithNSString:nil];
      }
      [self checkZooming];
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) VectorPolygonWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:pointsCopy];
      jdouble offset = [self->view_ toRealWorldCoordXWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth]] / 15;
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(nil_chk(ret), 0), [OrgGeogebraCommonKernelGeosGeoPolygon class])))) getPoints]), 0))) setCoordsWithDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pointsCopy, 0)))->inhomX_ + offset withDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pointsCopy, 0)))->inhomY_ - offset withDouble:1.0];
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(ret, 0), [OrgGeogebraCommonKernelGeosGeoPolygon class])))) getPoints]), 0))) updateRepaint];
      return ret;
    }
  }
  else if (self->polygonMode_ == OrgGeogebraCommonEuclidianEuclidianController_POLYGON_RIGID) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *poly = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      [self checkZooming];
      jdouble offset = [self->view_ toRealWorldCoordXWithDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth]] / 15;
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) RigidPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(poly), 0) withDouble:offset withDouble:-offset];
      return ret;
    }
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) > 2) {
    jboolean finished = !self->selectionPreview_ && [hits containsWithId:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) getWithInt:0]];
    if (finished) {
      [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) addingPolygon];
      IOSObjectArray *elms = [self polygon];
      [self->kernel_ notifyPolygonAdded];
      return elms;
    }
  }
  if (((self->polygonMode_ == OrgGeogebraCommonEuclidianEuclidianController_POLYGON_RIGID) || (self->polygonMode_ == OrgGeogebraCommonEuclidianEuclidianController_POLYGON_VECTOR)) && (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) > 0)) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:NO];
    if ((geo == nil) || ![geo isGeoPoint] || ![geo isIndependent] || [geo hasChildren]) {
      return nil;
    }
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, OrgGeogebraCommonKernelGeosGeoPolygon_POLYGON_MAX_POINTS, NO);
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_polylineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) > 2) {
    jboolean finished = !self->selectionPreview_ && [hits containsWithId:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) getWithInt:0]];
    if (finished) {
      [self checkZooming];
      return [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) PolyLineWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPoints(self) withBoolean:NO];
    }
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, OrgGeogebraCommonKernelGeosGeoPolyLine_POLYLINE_MAX_POINTS, NO);
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_parallelWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  if (!hitPoint) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
    if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *vectors = OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
      [self checkZooming];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(vectors), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
        (void) IOSObjectArray_Set(ret, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Line3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vectors), 0)], [OrgGeogebraCommonKernelGeosGeoElement class]));
      }
      else {
        (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) LineWithNSString:nil withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(vectors, 0), [OrgGeogebraCommonKernelGeosGeoVector class])]);
      }
      return ret;
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(lines), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
        (void) IOSObjectArray_Set(ret, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Line3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)], [OrgGeogebraCommonKernelGeosGeoElement class]));
      }
      else {
        (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) LineWithNSString:nil withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(lines, 0), [OrgGeogebraCommonKernelGeosGeoLine class])]);
      }
      return ret;
    }
  }
  return nil;
}

void OrgGeogebraCommonEuclidianEuclidianController_checkCoordCartesianWithOrgGeogebraCommonKernelKernelNDGeoPointND_(id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  OrgGeogebraCommonEuclidianEuclidianController_initialize();
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getMode] != OrgGeogebraCommonKernelKernel_COORD_CARTESIAN) {
    [point setCartesian];
    [point updateRepaint];
  }
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_parabolaWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  if (!hitPoint) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      [self checkZooming];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) parabolaWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)]);
      return ret;
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_midpointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO) != 0);
  if (!hitPoint && (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 0)) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (OrgGeogebraCommonEuclidianEuclidianController_selSegments(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) midpointWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) setLabelWithNSString:nil];
    return ret;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selSegments(self) == 1) {
    IOSObjectArray *segments = OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self);
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) midpointWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:IOSObjectArray_Get(nil_chk(segments), 0)]);
    return ret;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    IOSObjectArray *conics = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) midpointWithOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)]);
    return ret;
  }
  return nil;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_functionInspectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selFunctions(self) == 0) OrgGeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selFunctions(self) == 1) {
    IOSObjectArray *functions = OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showFunctionInspectorWithOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(nil_chk(functions), 0)];
    [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) setMoveMode];
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_lineBisectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = NO;
  if (OrgGeogebraCommonEuclidianEuclidianController_selSegments(self) == 0) {
    hitPoint = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO) != 0);
  }
  if (!hitPoint && (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 0)) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [self checkZooming];
    (void) [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) lineBisectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    return ret;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selSegments(self) == 1) {
    IOSObjectArray *segments = OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self);
    [self checkZooming];
    (void) [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) lineBisectorWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:IOSObjectArray_Get(nil_chk(segments), 0)];
    return ret;
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_angularBisectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitPoint = NO;
  if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
    hitPoint = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 3, NO) != 0);
  }
  if (!hitPoint && (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 0)) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 3) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) angularBisectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)]);
    return ret;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 2) {
    IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    [self checkZooming];
    return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) angularBisectorWithOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)];
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_threePointsWithOrgGeogebraCommonEuclidianHits_withInt_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint threePointsMode) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 3, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 3) {
    return [self switchModeForThreePointsWithInt:threePointsMode];
  }
  return nil;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_relationWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 2) {
    IOSObjectArray *geos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) showRelationWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(geos), 0) withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, 1)];
    return YES;
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_locusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedNumericWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    OrgGeogebraCommonKernelGeosGeoElement *locus;
    [self checkZooming];
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points), 0))) getPath] == nil) {
      locus = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) locusWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    }
    else {
      locus = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) locusWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0)];
    }
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(ret, 0, locus);
    return ret;
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) && (OrgGeogebraCommonEuclidianEuclidianController_selNumbers(self) == 1)) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    IOSObjectArray *numbers = OrgGeogebraCommonEuclidianEuclidianController_getSelectedNumbers(self);
    [self checkZooming];
    OrgGeogebraCommonKernelGeosGeoElement *locus = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) LocusWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelGeosGeoNumeric:IOSObjectArray_Get(nil_chk(numbers), 0)];
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ locus } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_conic5WithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 5, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 5) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) conic5WithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points]);
    return ret;
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_tangentsWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean found = NO;
  found = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO) != 0);
  if (!found) {
    found = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedFunctionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  }
  if (!found) {
    found = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedCurveWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  }
  if (!found) {
    found = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedImplicitpolyWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  }
  if (!found) {
    found = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedListWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  }
  if (!found) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      IOSObjectArray *conics = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      [self checkZooming];
      return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) tangentWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)];
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *conics = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      [self checkZooming];
      return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) tangentWithOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)];
    }
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) == 2) {
    IOSObjectArray *conics = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
    [self checkZooming];
    return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) tangentWithOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(conics, 1)];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selFunctions(self) == 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      IOSObjectArray *functions = OrgGeogebraCommonEuclidianEuclidianController_getSelectedFunctions(self);
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      [self checkZooming];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TangentWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelGeosGeoFunction:IOSObjectArray_Get(nil_chk(functions), 0)]);
      return ret;
    }
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selCurves(self) == 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      IOSObjectArray *curves = OrgGeogebraCommonEuclidianEuclidianController_getSelectedCurves(self);
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      [self checkZooming];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) TangentWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelGeosGeoCurveCartesian:IOSObjectArray_Get(nil_chk(curves), 0)]);
      return ret;
    }
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selImplicitpoly(self) == 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      OrgGeogebraCommonKernelImplicitGeoImplicitPoly *implicitPoly = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedImplicitpoly(self)), 0);
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      [self checkZooming];
      return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TangentWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:implicitPoly];
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_polarLineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jboolean hitConic = NO;
  hitConic = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO) != 0);
  if (!hitConic) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
    if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 0) {
      OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
      IOSObjectArray *conics = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      [self checkZooming];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) polarLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)]);
      return ret;
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 1) {
      IOSObjectArray *conics = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
      [self checkZooming];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) diameterLineWithOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)]);
      return ret;
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
      IOSObjectArray *conics = OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self);
      IOSObjectArray *vecs = OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
      [self checkZooming];
      (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) diameterLineWithOrgGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vecs), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0)]);
      return ret;
    }
  }
  return nil;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_showHideLabelWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  if (self->selectionPreview_) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1000, NO);
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:[hits getOtherHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOAXIS() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_] withBoolean:YES];
  if (geo != nil) {
    [geo setLabelVisibleWithBoolean:![geo isLabelVisible]];
    [geo updateRepaint];
    return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_copyVisualStyleWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  if (self->selectionPreview_) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1000, NO);
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:[hits getOtherHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOAXIS() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_] withBoolean:YES];
  if (geo == nil) {
    return NO;
  }
  if ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getGeoForCopyStyle] == nil) {
    [self->app_ setGeoForCopyStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    OrgGeogebraCommonEuclidianHits *oldhits = new_OrgGeogebraCommonEuclidianHits_init();
    [oldhits addAllWithJavaUtilCollection:[self getAppSelectedGeos]];
    for (jint i = [oldhits size] - 1; i >= 0; i--) {
      OrgGeogebraCommonKernelGeosGeoElement *oldgeo = [oldhits getWithInt:i];
      if (!([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(OrgGeogebraCommonKernelGeosTestEnum_getSpecificTestWithId_([self->app_ getGeoForCopyStyle]))) checkWithId:oldgeo])) {
        (void) [oldhits removeWithInt:i];
      }
    }
    if ([oldhits size] > 0) {
      for (jint i = 0; i < [oldhits size]; i++) {
        OrgGeogebraCommonKernelGeosGeoElement *oldgeo = [oldhits getWithInt:i];
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(oldgeo)) setAdvancedVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:[self->app_ getGeoForCopyStyle]];
        [oldgeo updateRepaint];
      }
      [self clearSelections];
      return YES;
    }
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    if (geo == [self->app_ getGeoForCopyStyle]) {
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      [self->app_ setGeoForCopyStyleWithOrgGeogebraCommonKernelGeosGeoElement:nil];
      if (self->toggleModeChangedKernel_) {
        [self->app_ storeUndoInfo];
      }
      self->toggleModeChangedKernel_ = NO;
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAdvancedVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:[self->app_ getGeoForCopyStyle]];
      [geo updateRepaint];
      return YES;
    }
  }
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_moveRotateWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getPointRotateableHitsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self->view_ withOrgGeogebraCommonKernelKernelNDGeoPointND:self->rotationCenter_], 1, NO);
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_pointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_PATH() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_], 1, NO);
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_geoElementSelectedWithOrgGeogebraCommonEuclidianHits_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jboolean addToSelection) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 1) {
    IOSObjectArray *geos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) geoElementSelectedWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(geos), 0) withBoolean:addToSelection];
  }
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_segmentFixedWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogSegmentFixedWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)), 0)];
    return YES;
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_angleFixedWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ((OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) || (OrgGeogebraCommonEuclidianEuclidianController_selSegments(self) == 1)) {
    IOSObjectArray *selGeos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogAngleFixedWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self) withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self) withOrgGeogebraCommonKernelGeosGeoElementArray:selGeos withOrgGeogebraCommonEuclidianEuclidianController:self];
    return nil;
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_circleOrSphere2WithOrgGeogebraCommonEuclidianHits_withInt_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jint sphereMode) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    return [self switchModeForCircleOrSphere2WithInt:sphereMode];
  }
  return nil;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_showHideObjectWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  if (self->selectionPreview_) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1000, NO);
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES];
  if (geo != nil) {
    if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoAxis class]]) {
      switch ([((OrgGeogebraCommonKernelGeosGeoAxis *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoAxis class])) getType]) {
        case OrgGeogebraCommonKernelKernelNDGeoAxisND_X_AXIS:
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setShowAxisWithInt:OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X withBoolean:NO withBoolean:YES];
        break;
        case OrgGeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS:
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setShowAxisWithInt:OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y withBoolean:NO withBoolean:YES];
        break;
      }
      [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) updateMenubar];
    }
    else {
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_textWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> loc = nil;
  jboolean rw = YES;
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    if (self->selectionPreview_) {
      return NO;
    }
    [self checkZooming];
    loc = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
    rw = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) setCoordsToMouseLocWithOrgGeogebraCommonKernelKernelNDGeoPointND:loc];
  }
  else {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) >= 1) {
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      loc = IOSObjectArray_Get(nil_chk(points), 0);
    }
    else if (!self->selectionPreview_) {
      [self checkZooming];
      loc = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
      rw = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) setCoordsToMouseLocWithOrgGeogebraCommonKernelKernelNDGeoPointND:loc];
    }
  }
  if (loc != nil) {
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showTextCreationDialogWithOrgGeogebraCommonKernelKernelNDGeoPointND:loc withBoolean:rw];
    return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_slider(OrgGeogebraCommonEuclidianEuclidianController *self) {
  if (!self->selectionPreview_ && (self->mouseLoc_ != nil)) {
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showSliderCreationDialogWithInt:self->mouseLoc_->x_ withInt:self->mouseLoc_->y_];
  }
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_imageWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  OrgGeogebraCommonKernelGeosGeoPoint *loc = nil;
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    if (self->selectionPreview_) {
      return NO;
    }
    [self checkZooming];
    loc = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
    [loc setCoordsWithDouble:self->xRW_ withDouble:self->yRW_ withDouble:1.0];
  }
  else {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) >= 1) {
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPoints(self);
      loc = IOSObjectArray_Get(nil_chk(points), 0);
    }
    else if (!self->selectionPreview_) {
      [self checkZooming];
      loc = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
      [loc setCoordsWithDouble:self->xRW_ withDouble:self->yRW_ withDouble:1.0];
    }
  }
  if (loc != nil) {
    if ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getGuiManager] != nil) {
      [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self->app_ getGuiManager])) loadImageWithOrgGeogebraCommonKernelGeosGeoPoint:loc withId:nil withBoolean:self->altDown_];
    }
    return YES;
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_mirrorAtPointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 0) {
    OrgGeogebraCommonEuclidianHits *mirAbles = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, mirAbles, 1, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *polys = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      [self checkZooming];
      return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtPointWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(polys), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0)];
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) > 0) {
      IOSObjectArray *geos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)), 0);
      JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
      [self checkZooming];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != point) {
          if ([OrgGeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtPointWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelKernelNDGeoPointND:point])];
          }
          else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtPointWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelKernelNDGeoPointND:point])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_mirrorAtLineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint max = OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 0 ? 1 : 2;
  OrgGeogebraCommonEuclidianHits *mirAbles = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
  jint count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, mirAbles, max, NO);
  if (count == 1 && OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) >= 1) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self->selectedGeos_ getWithInt:[((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) size] - 1];
    if ([OrgGeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:geo]) {
      [((JavaUtilArrayList *) nil_chk(self->selectedLines_)) clear];
      [self->selectedLines_ addWithId:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND))];
    }
  }
  if (count <= 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, NO);
  }
  if (count <= 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, NO);
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) >= 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *polys = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLines(self);
      [self checkZooming];
      return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(polys), 0) withOrgGeogebraCommonKernelGeosGeoLine:IOSObjectArray_Get(nil_chk(lines), 0)];
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) > 1) {
      IOSObjectArray *geos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
      id<OrgGeogebraCommonKernelKernelNDGeoLineND> line = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self)), 0);
      JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
      [self checkZooming];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != line) {
          if ([OrgGeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtLineWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelKernelNDGeoLineND:line])];
          }
          else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) mirrorAtLineWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelKernelNDGeoLineND:line])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_mirrorAtCircleWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 0) {
    OrgGeogebraCommonEuclidianHits *mirAbles = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(mirAbles)) removeImages];
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, mirAbles, 1, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *polys = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedCircles(self);
      [self checkZooming];
      return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(polys), 0) withOrgGeogebraCommonKernelGeosGeoConic:IOSObjectArray_Get(nil_chk(lines), 0)];
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) > 0) {
      IOSObjectArray *geos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
      OrgGeogebraCommonKernelGeosGeoConic *line = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedCircles(self)), 0);
      JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
      [self checkZooming];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != line) {
          if ([OrgGeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelGeosGeoConic:line])];
          }
          else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) MirrorWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelGeosGeoConic:line])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_clearHighlightedGeos(OrgGeogebraCommonEuclidianEuclidianController *self) {
  jboolean repaintNeeded = NO;
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(self->highlightedGeos_)) size] > 0) {
    OrgGeogebraCommonEuclidianEuclidianController_setHighlightedGeosWithBoolean_(self, NO);
    repaintNeeded = YES;
  }
  [self->highlightedGeos_ clear];
  return repaintNeeded;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_attachDetachWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if (self->detachFrom_ != nil || self->needsAttach_) {
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removeWithId:self->movedGeoPoint_];
    if ([hits containsGeoPoint] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class])))) hasChildren]) {
      @try {
        [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) replaceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:[hits getFirstHitWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()]];
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
    }
    else {
      NSString *attachTo = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->movedGeoPoint_)) isPointOnPath] ? [((id<OrgGeogebraCommonKernelPath>) nil_chk([self->movedGeoPoint_ getPath])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] : @"";
      if (self->movedGeoPoint_ != nil && self->detachFrom_ != nil && ![hits containsWithId:self->detachFrom_]) {
        NSString *name = [self->movedGeoPoint_ getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getAlgoDispatcher])) detachWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->movedGeoPoint_ withDouble:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:((OrgGeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_] withDouble:[self->view_ toRealWorldCoordYWithDouble:self->mouseLoc_->y_] withBoolean:self->detachFromPath_ withBoolean:self->detachFromRegion_];
        self->movedGeoPoint_ = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) geoTableVarLookupWithNSString:name], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
      }
      if (self->movedGeoPoint_ != nil && self->needsAttach_) {
        if (![attachTo isEqual:@""]) {
          id<OrgGeogebraCommonKernelPath> path = (id<OrgGeogebraCommonKernelPath>) check_protocol_cast([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) geoTableVarLookupWithNSString:attachTo], @protocol(OrgGeogebraCommonKernelPath));
          (void) [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) attachWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->movedGeoPoint_ withOrgGeogebraCommonKernelPath:path withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_ withOrgGeogebraCommonKernelMatrixCoords:[self getMouseLocRW]];
        }
      }
    }
    self->needsAttach_ = NO;
    self->detachFrom_ = nil;
    if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) > 0) {
      [self clearSelections];
    }
    return YES;
  }
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedRegionWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPathWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if ([((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) size] == 1) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = [self->selectedPoints_ getWithInt:0];
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isPointOnPath] || [p isPointInRegion]) {
      (void) OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      (void) OrgGeogebraCommonEuclidianEuclidianController_getSelectedRegions(self);
      (void) OrgGeogebraCommonEuclidianEuclidianController_getSelectedPaths(self);
      [self checkZooming];
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) detachWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_];
      if (ret != nil) {
        [self clearSelections];
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateCursorWithOrgGeogebraCommonKernelKernelNDGeoPointND:ret];
        return YES;
      }
      return NO;
    }
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    if ((OrgGeogebraCommonEuclidianEuclidianController_selPaths(self) == 1) && ![self isAltDown]) {
      IOSObjectArray *paths = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPaths(self);
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(paths), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [OrgGeogebraCommonKernelGeosGeoElement class])]) {
        return NO;
      }
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(paths, 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoPolygon] || ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(paths, 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoConic] && ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(paths, 0), [OrgGeogebraCommonKernelKernelNDGeoConicND class])))) getLastHitType] == OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING()))) {
        [self checkZooming];
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) attachWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>) check_protocol_cast(IOSObjectArray_Get(paths, 0), @protocol(OrgGeogebraCommonKernelRegion)) withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_ withOrgGeogebraCommonKernelMatrixCoords:[self getMouseLocRW]];
        if (ret != nil) {
          [self clearSelections];
          [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateCursorWithOrgGeogebraCommonKernelKernelNDGeoPointND:ret];
          return YES;
        }
        return NO;
      }
      [self checkZooming];
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) attachWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelPath:IOSObjectArray_Get(paths, 0) withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_ withOrgGeogebraCommonKernelMatrixCoords:[self getMouseLocRW]];
      if (ret != nil) {
        [self clearSelections];
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateCursorWithOrgGeogebraCommonKernelKernelNDGeoPointND:ret];
        return YES;
      }
      return NO;
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selRegions(self) == 1) {
      IOSObjectArray *regions = OrgGeogebraCommonEuclidianEuclidianController_getSelectedRegions(self);
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(regions), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [OrgGeogebraCommonKernelGeosGeoElement class])]) {
        [self checkZooming];
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) attachWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withOrgGeogebraCommonKernelRegion:IOSObjectArray_Get(regions, 0) withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:self->view_ withOrgGeogebraCommonKernelMatrixCoords:[self getMouseLocRW]];
        if (ret != nil) {
          [self clearSelections];
          [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateCursorWithOrgGeogebraCommonKernelKernelNDGeoPointND:ret];
          return YES;
        }
        return NO;
      }
    }
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_translateByVectorWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 0) {
    OrgGeogebraCommonEuclidianHits *transAbles = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSLATEABLE() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, transAbles, 1, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedListWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
    [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) removeAllWithJavaUtilCollection:self->selectedPoints_];
    self->allowSelectionRectangleForTranslateByVector_ = NO;
  }
  if ((OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) || (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2)) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
      IOSObjectArray *polys = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
      id<OrgGeogebraCommonKernelKernelNDGeoVectorND> vec = nil;
      if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
        vec = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self)), 0);
      }
      else {
        IOSObjectArray *ab = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
        vec = (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast([self vectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(ab), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(ab, 1)], @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND));
      }
      self->allowSelectionRectangleForTranslateByVector_ = YES;
      return [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) translateWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(polys), 0) withOrgGeogebraCommonKernelKernelNDGeoVectorND:vec];
    }
    else if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) > 0) {
      IOSObjectArray *geos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
      id<OrgGeogebraCommonKernelKernelNDGeoVectorND> vec = nil;
      if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 1) {
        vec = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self)), 0);
      }
      else {
        IOSObjectArray *ab = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
        vec = (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast([self vectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(ab), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(ab, 1)], @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND));
      }
      JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != vec) {
          if (([OrgGeogebraCommonKernelGeosTranslateable_class_() isInstance:IOSObjectArray_Get(geos, i)]) || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoList]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) translateWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelKernelNDGeoVectorND:vec])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      self->allowSelectionRectangleForTranslateByVector_ = YES;
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_rotateByAngleWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 0 || ((OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 1 && [OrgGeogebraCommonKernelKernelNDGeoPointND_class_() isInstance:[((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) getWithInt:0]]) && ![hits containsGeoPoint])) {
    OrgGeogebraCommonEuclidianHits *rotAbles = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, rotAbles, 2, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) > 1 && OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 0 && [OrgGeogebraCommonKernelKernelNDGeoPointND_class_() isInstance:[((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) getWithInt:0]]) {
    [((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) addWithId:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self->selectedGeos_ getWithInt:0], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1 && OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) > 1) {
    IOSObjectArray *selGeos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogRotateWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelGeosGeoPolygonArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self) withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self) withOrgGeogebraCommonKernelGeosGeoElementArray:selGeos withOrgGeogebraCommonEuclidianEuclidianController:self];
    return nil;
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_dilateFromPointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 0) {
    OrgGeogebraCommonEuclidianHits *dilAbles = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_DILATEABLE() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, dilAbles, 1, NO);
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    IOSObjectArray *selGeos = OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self);
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogDilateWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelGeosGeoPolygonArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self) withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self) withOrgGeogebraCommonKernelGeosGeoElementArray:selGeos withOrgGeogebraCommonEuclidianEuclidianController:self];
    return nil;
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_fitLineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  OrgGeogebraCommonKernelGeosGeoList *list;
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedListWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  [self checkZooming];
  if (OrgGeogebraCommonEuclidianEuclidianController_selLists(self) > 0) {
    list = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedLists(self)), 0);
    if (list != nil) {
      (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, nil, list));
      return ret;
    }
  }
  else {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 999, YES);
    if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) > 1) {
      IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPoints(self);
      list = OrgGeogebraCommonKernelCommandsCommandProcessor_wrapInListWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoElementArray_withInt_withOrgGeogebraCommonPluginGeoClassEnum_(self->kernel_, points, ((IOSObjectArray *) nil_chk(points))->size_, OrgGeogebraCommonPluginGeoClassEnum_get_POINT());
      if (list != nil) {
        (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, nil, list));
        return ret;
      }
    }
  }
  return nil;
}

OrgGeogebraCommonKernelGeosGeoLine *OrgGeogebraCommonEuclidianEuclidianController_FitLineYWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonEuclidianEuclidianController *self, NSString *label, OrgGeogebraCommonKernelGeosGeoList *list) {
  OrgGeogebraCommonKernelStatisticsAlgoFitLineY *algo = new_OrgGeogebraCommonKernelStatisticsAlgoFitLineY_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction], label, list);
  OrgGeogebraCommonKernelGeosGeoLine *line = [algo getFitLineY];
  return line;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_createListWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  OrgGeogebraCommonKernelGeosGeoList *list;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  if (!self->selectionPreview_ && ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size] > 1)) {
    [self checkZooming];
    list = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) ListWithNSString:nil withJavaUtilArrayList:hits withBoolean:NO];
    if (list != nil) {
      (void) IOSObjectArray_Set(ret, 0, list);
      return ret;
    }
  }
  return nil;
}

jdouble OrgGeogebraCommonEuclidianEuclidianController_getTransformCoordsOffsetWithInt_(OrgGeogebraCommonEuclidianEuclidianController *self, jint i) {
  if ([self isAltDown]) {
    return 0;
  }
  return IOSDoubleArray_Get(nil_chk(self->transformCoordsOffset_), i);
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_areaWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    OrgGeogebraCommonKernelKernelNDGeoConicND *conic = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self)), 0);
    if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isGeoConicPart]) {
      OrgGeogebraCommonKernelGeosGeoConicPart *conicPart = (OrgGeogebraCommonKernelGeosGeoConicPart *) check_class_cast(conic, [OrgGeogebraCommonKernelGeosGeoConicPart class]);
      if ([conicPart getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) {
        [self clearSelections];
        return nil;
      }
    }
    [self checkZooming];
    OrgGeogebraCommonKernelGeosGeoNumeric *area = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) AreaWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoConicND:conic];
    return [((OrgGeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) getAreaTextWithOrgGeogebraCommonKernelGeosGeoElement:conic withOrgGeogebraCommonKernelGeosGeoNumberValue:area withOrgGeogebraCommonAwtGPoint:self->mouseLoc_];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
    IOSObjectArray *poly = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
    return [((OrgGeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) getAreaTextWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(poly), 0) withOrgGeogebraCommonKernelGeosGeoNumberValue:IOSObjectArray_Get(poly, 0) withOrgGeogebraCommonAwtGPoint:self->mouseLoc_];
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_angleWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 0) {
    if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 0) {
      count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
    }
    if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 0) {
      count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
    }
  }
  if (count == 0) {
    count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 3, NO);
  }
  jboolean polyFound = NO;
  if (count == 0) {
    polyFound = (1 == OrgGeogebraCommonEuclidianEuclidianController_addSelectedGeoWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOLYGON() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_], 1, NO));
  }
  if (!polyFound) {
    count = [self addSelectedPlanesForAngleWithOrgGeogebraCommonEuclidianHits:hits withInt:count];
  }
  OrgGeogebraCommonKernelGeosGeoAngle *angle = nil;
  IOSObjectArray *angles = nil;
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 3) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    angle = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createAngleWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 2) {
    IOSObjectArray *vecs = OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
    [self checkZooming];
    angle = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createAngleWithOrgGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vecs), 0) withOrgGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(vecs, 1)];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 2) {
    IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    [self checkZooming];
    angle = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createLineAngleWithOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)];
  }
  else if (polyFound && (OrgGeogebraCommonEuclidianEuclidianController_selGeos(self) == 1)) {
    [self checkZooming];
    angles = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createAnglesWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedGeos(self)), 0), [OrgGeogebraCommonKernelGeosGeoPolygon class])];
  }
  else {
    angle = [self createAngle3D];
  }
  if (angle != nil) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ angle } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  else if (angles != nil) {
    return angles;
  }
  else {
    return nil;
  }
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_distanceWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedLineWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPolygonWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
  }
  if (self->selectionPreview_) {
    return nil;
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [self checkZooming];
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createDistanceTextWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]);
    return ret;
  }
  else if ((OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) && (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 1)) {
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createDistanceTextWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)]);
    [self clearSelections];
    return ret;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selSegments(self) == 1) {
    IOSObjectArray *segments = OrgGeogebraCommonEuclidianEuclidianController_getSelectedSegmentsND(self);
    OrgGeogebraCommonKernelGeosGeoElement *seg = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(segments), 0), [OrgGeogebraCommonKernelGeosGeoElement class]);
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(seg)) isLabelVisible]) {
      [seg setLabelModeWithInt:OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
    }
    else {
      [seg setLabelModeWithInt:OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE];
    }
    [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments, 0))) setLabelVisibleWithBoolean:YES];
    [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments, 0))) updateRepaint];
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ seg } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selLines(self) == 2) {
    IOSObjectArray *lines = OrgGeogebraCommonEuclidianEuclidianController_getSelectedLinesND(self);
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    [self checkZooming];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) DistanceWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)]);
    return ret;
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    OrgGeogebraCommonKernelKernelNDGeoConicND *conic = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedConicsND(self)), 0);
    return [((OrgGeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createCircumferenceTextWithOrgGeogebraCommonKernelKernelNDGeoConicND:conic withOrgGeogebraCommonAwtGPoint:self->mouseLoc_];
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selPolygons(self) == 1) {
    IOSObjectArray *poly = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPolygons(self);
    return [((OrgGeogebraCommonEuclidianTextDispatcher *) nil_chk([self getTextDispatcher])) createPerimeterTextWithOrgGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(poly), 0) withOrgGeogebraCommonAwtGPoint:self->mouseLoc_];
  }
  return nil;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_showCheckBox(OrgGeogebraCommonEuclidianEuclidianController *self) {
  if (self->selectionPreview_) {
    return NO;
  }
  [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showBooleanCheckboxCreationDialogWithOrgGeogebraCommonAwtGPoint:self->mouseLoc_ withOrgGeogebraCommonKernelGeosGeoBoolean:nil];
  return NO;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_compassesWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 2) {
    IOSObjectArray *points = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
    (void) IOSObjectArray_Set(points, 0, [((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) getWithInt:0]);
    (void) IOSObjectArray_Set(points, 1, [self->selectedPoints_ getWithInt:1]);
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> centerPoint = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self chooseGeoWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    if (centerPoint != nil) {
      if (self->selectionPreview_) {
        [((OrgGeogebraCommonEuclidianHits *) nil_chk(self->tempArrayList_)) clear];
        [self->tempArrayList_ addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(centerPoint, [OrgGeogebraCommonKernelGeosGeoElement class])];
        OrgGeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, self->selectedPoints_, self->tempArrayList_, 3);
        return nil;
      }
      [self checkZooming];
      OrgGeogebraCommonKernelGeosGeoElement *circle = OrgGeogebraCommonEuclidianEuclidianController_CircleCompassesWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, centerPoint, IOSObjectArray_Get(points, 0), IOSObjectArray_Get(points, 1));
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ circle } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      [self clearSelections];
      return ret;
    }
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selConics(self) == 1) {
    OrgGeogebraCommonKernelKernelNDGeoConicND *circle = [((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) getWithInt:0];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> centerPoint = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self chooseGeoWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    if (centerPoint != nil) {
      if (self->selectionPreview_) {
        [((OrgGeogebraCommonEuclidianHits *) nil_chk(self->tempArrayList_)) clear];
        [self->tempArrayList_ addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(centerPoint, [OrgGeogebraCommonKernelGeosGeoElement class])];
        OrgGeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, self->selectedPoints_, self->tempArrayList_, 3);
        return nil;
      }
      [self checkZooming];
      OrgGeogebraCommonKernelGeosGeoElement *circlel = OrgGeogebraCommonEuclidianEuclidianController_CircleWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, centerPoint, circle);
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ circlel } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      [self clearSelections];
      return ret;
    }
  }
  else if (OrgGeogebraCommonEuclidianEuclidianController_selSegments(self) == 1) {
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> segment = [((JavaUtilArrayList *) nil_chk(self->selectedSegments_)) getWithInt:0];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> centerPoint = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self chooseGeoWithOrgGeogebraCommonEuclidianHits:hits withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    if (centerPoint != nil) {
      if (self->selectionPreview_) {
        [((OrgGeogebraCommonEuclidianHits *) nil_chk(self->tempArrayList_)) clear];
        [self->tempArrayList_ addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(centerPoint, [OrgGeogebraCommonKernelGeosGeoElement class])];
        OrgGeogebraCommonEuclidianEuclidianController_addToHighlightedListWithJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, self->selectedPoints_, self->tempArrayList_, 3);
        return nil;
      }
      [self checkZooming];
      OrgGeogebraCommonKernelGeosGeoElement *circlel = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) circleWithOrgGeogebraCommonKernelConstruction:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction] withOrgGeogebraCommonKernelKernelNDGeoPointND:centerPoint withOrgGeogebraCommonKernelArithmeticNumberValue:segment];
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ circlel } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      [self clearSelections];
      return ret;
    }
  }
  jboolean hitPoint = (OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO) != 0);
  if (!hitPoint && (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) != 2)) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedSegmentWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedConicWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if ([((JavaUtilArrayList *) nil_chk(self->selectedConicsND_)) size] > 0) {
      OrgGeogebraCommonKernelKernelNDGeoConicND *c = [self->selectedConicsND_ getWithInt:0];
      if (![((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isCircle]) {
        (void) [self->selectedConicsND_ removeWithInt:0];
        [self clearSelections];
      }
    }
  }
  return nil;
}

OrgGeogebraCommonKernelKernelNDGeoConicND *OrgGeogebraCommonEuclidianEuclidianController_CircleWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonEuclidianEuclidianController *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, OrgGeogebraCommonKernelKernelNDGeoQuadricND *c) {
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  OrgGeogebraCommonKernelAlgosAlgoRadius *radius = new_OrgGeogebraCommonKernelAlgosAlgoRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons, c);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:radius];
  OrgGeogebraCommonKernelKernelNDGeoConicND *circle = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) circleWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelKernelNDGeoPointND:A withOrgGeogebraCommonKernelArithmeticNumberValue:[radius getRadius]];
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

OrgGeogebraCommonKernelKernelNDGeoConicND *OrgGeogebraCommonEuclidianEuclidianController_CircleCompassesWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonEuclidianEuclidianController *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C) {
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  OrgGeogebraCommonKernelAlgosAlgoElement *algoSegment = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) segmentAlgoWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelKernelNDGeoPointND:B withOrgGeogebraCommonKernelKernelNDGeoPointND:C];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoSegment];
  OrgGeogebraCommonKernelKernelNDGeoConicND *circle = [self->companion_ circleWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelKernelNDGeoPointND:A withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoSegment)) getOutputWithInt:0], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))];
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

IOSObjectArray *OrgGeogebraCommonEuclidianEuclidianController_vectorFromPointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (count == 0) {
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedVectorWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ((OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) && (OrgGeogebraCommonEuclidianEuclidianController_selVectors(self) == 1)) {
    IOSObjectArray *vecs = OrgGeogebraCommonEuclidianEuclidianController_getSelectedVectorsND(self);
    IOSObjectArray *points = OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self);
    [self checkZooming];
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) vectorPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vecs), 0)]);
    return ret;
  }
  return nil;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_circlePointRadiusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return NO;
  }
  OrgGeogebraCommonEuclidianEuclidianController_addSelectedPointWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  if (OrgGeogebraCommonEuclidianEuclidianController_selPoints(self) == 1) {
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogCirclePointRadiusWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonEuclidianEuclidianController_getSelectedPointsND(self)), 0) withOrgGeogebraCommonEuclidianEuclidianView:self->view_];
    return YES;
  }
  return NO;
}

id<OrgGeogebraCommonKernelKernelNDGeoPointND> OrgGeogebraCommonEuclidianEuclidianController_updateNewPointWithBoolean_withOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean forPreviewable, OrgGeogebraCommonEuclidianHits *hits, jboolean onPathPossible, jboolean inRegionPossible, jboolean intersectPossible, jboolean chooseGeo, jboolean complex) {
  OrgGeogebraCommonEuclidianHits *regionHits = [self getRegionHitsWithOrgGeogebraCommonEuclidianHits:hits];
  if ((self->mode_ != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT) && (self->mode_ != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) && (self->mode_ != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER) && ![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    [hits keepOnlyHitsForNewPointMode];
  }
  id<OrgGeogebraCommonKernelPath> path = nil;
  id<OrgGeogebraCommonKernelRegion> region = nil;
  jboolean createPoint = YES;
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) containsGeoPoint]) {
    createPoint = NO;
    if (forPreviewable) {
      [self createNewPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((OrgGeogebraCommonEuclidianHits *) nil_chk([hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_])) getWithInt:0], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
    }
  }
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = nil;
  if (createPoint && intersectPossible) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> intersectPoint = [self getSingleIntersectionPointWithOrgGeogebraCommonEuclidianHits:hits];
    if (intersectPoint != nil) {
      if (!forPreviewable) {
        point = intersectPoint;
        if (![point showInEuclidianView]) {
          [point remove];
        }
        else {
          createPoint = NO;
        }
      }
      else {
        [self createNewPointIntersectionWithOrgGeogebraCommonKernelKernelNDGeoPointND:intersectPoint];
        createPoint = NO;
      }
    }
  }
  if (createPoint) {
    jboolean createPointOnBoundary = NO;
    if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(regionHits)) isEmpty]) {
      if (inRegionPossible) {
        if (chooseGeo) {
          region = (id<OrgGeogebraCommonKernelRegion>) check_protocol_cast([self chooseGeoWithJavaUtilArrayList:regionHits withBoolean:YES], @protocol(OrgGeogebraCommonKernelRegion));
        }
        else {
          region = (id<OrgGeogebraCommonKernelRegion>) check_protocol_cast([regionHits getWithInt:0], @protocol(OrgGeogebraCommonKernelRegion));
        }
        if (region != nil) {
          if ([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [OrgGeogebraCommonKernelGeosGeoElement class])) getAlphaValue] > OrgGeogebraCommonEuclidianEuclidianController_MAX_TRANSPARENT_ALPHA_VALUE) {
            [hits removeGeosAfterWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [OrgGeogebraCommonKernelGeosGeoElement class])];
          }
          jboolean sideInHits = NO;
          if ([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoPolygon]) {
            IOSObjectArray *sides = [((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(region, [OrgGeogebraCommonKernelGeosGeoPolygon class])) getSegments];
            if (sides != nil) {
              for (jint k = 0; k < sides->size_; k++) {
                if ([hits containsWithId:IOSObjectArray_Get(sides, k)]) {
                  sideInHits = YES;
                  break;
                }
              }
            }
            if (sideInHits) {
              if (self->mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) {
                createPoint = NO;
                createPointOnBoundary = YES;
              }
              else {
                createPoint = NO;
                [hits removeWithId:region];
                region = nil;
              }
            }
          }
          else if ([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoConic]) {
            if ([self createNewPointInRegionPossibleWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(region, [OrgGeogebraCommonKernelKernelNDGeoConicND class])]) {
              createPoint = YES;
              [hits removeWithId:region];
            }
            else {
              createPoint = YES;
            }
          }
          else if ([region isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
            if ([((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(region, [OrgGeogebraCommonKernelGeosGeoFunction class])) isInequality]) {
              createPoint = YES;
              [hits removeWithId:region];
            }
            else {
              createPoint = YES;
            }
          }
          if (!sideInHits) {
            createPoint = YES;
            [hits removePolygonsIfSideNotPresent];
            if (self->mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT) {
              [hits removeSegmentsFromPolygons];
            }
          }
        }
        else {
          createPoint = YES;
        }
      }
      else {
        createPoint = YES;
      }
    }
    if (createPointOnBoundary) {
      path = (id<OrgGeogebraCommonKernelPath>) check_protocol_cast(region, @protocol(OrgGeogebraCommonKernelPath));
      region = nil;
      createPoint = YES;
    }
    else {
      OrgGeogebraCommonEuclidianHits *pathHits = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_PATH_NO_FILL_HIT() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
      if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(pathHits)) isEmpty]) {
        if (onPathPossible) {
          if (chooseGeo) {
            path = (id<OrgGeogebraCommonKernelPath>) check_protocol_cast([self chooseGeoWithJavaUtilArrayList:pathHits withBoolean:YES], @protocol(OrgGeogebraCommonKernelPath));
          }
          else {
            path = (id<OrgGeogebraCommonKernelPath>) check_protocol_cast([pathHits getWithInt:0], @protocol(OrgGeogebraCommonKernelPath));
          }
          if (path != nil) {
            createPoint = YES;
          }
        }
        else {
          createPoint = YES;
        }
      }
    }
  }
  if (createPoint) {
    [self transformCoords];
    if ((path != nil) && onPathPossible) {
      point = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createNewPointWithBoolean:forPreviewable withOrgGeogebraCommonKernelPath:path withBoolean:complex];
    }
    else if ((region != nil) && inRegionPossible) {
      point = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createNewPointWithBoolean:forPreviewable withOrgGeogebraCommonKernelRegion:region withBoolean:complex];
    }
    else {
      point = [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) createNewPointWithBoolean:forPreviewable withBoolean:complex];
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setShowMouseCoordsWithBoolean:YES];
    }
  }
  return point;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, jboolean onPathPossible, jboolean intersectPossible, jboolean doSingleHighlighting) {
  return [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:onPathPossible withBoolean:NO withBoolean:intersectPossible withBoolean:doSingleHighlighting withBoolean:NO];
}

void OrgGeogebraCommonEuclidianEuclidianController_macroWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, OrgGeogebraCommonUtilAsyncOperation *callback2) {
  self->index_ = OrgGeogebraCommonEuclidianEuclidianController_selGeos(self);
  jboolean objectFound = 1 == [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:((IOSObjectArray *) nil_chk(self->macroInput_))->size_ withBoolean:NO withJavaUtilArrayList:self->selectedGeos_ withOrgGeogebraCommonKernelGeosTestEnum:IOSObjectArray_Get(self->macroInput_, self->index_)];
  if (self->selectionPreview_) {
    if (callback2 != nil) [callback2 callbackWithId:JavaLangBoolean_valueOfWithBoolean_(NO)];
    return;
  }
  if (!objectFound && ([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(self->macroInput_, self->index_))) isEqual:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINT()] || [((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(self->macroInput_, self->index_))) isEqual:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()])) {
    if (OrgGeogebraCommonEuclidianEuclidianController_createNewPointWithOrgGeogebraCommonEuclidianHits_withBoolean_withBoolean_withBoolean_(self, hits, YES, YES, NO)) {
      [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) addWithId:[self getMovedGeoPoint]];
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:[self getMovedGeoPoint]];
      objectFound = YES;
      self->pointCreated_ = nil;
    }
  }
  if (objectFound || [((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(self->macroInput_, self->index_))) isEqual:OrgGeogebraCommonKernelGeosTestEnum_get_GEONUMERIC()] || [((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(self->macroInput_, self->index_))) isEqual:OrgGeogebraCommonKernelGeosTestEnum_get_GEOANGLE()]) {
    if (!objectFound) {
      self->index_--;
    }
    OrgGeogebraCommonUtilAsyncOperation *callback3 = new_OrgGeogebraCommonEuclidianEuclidianController_$1_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, callback2);
    [self readNumberOrAngleIfNeededWithOrgGeogebraCommonUtilAsyncOperation:callback3];
  }
  [self macroProcessWithOrgGeogebraCommonUtilAsyncOperation:callback2];
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_buttonWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean textfield) {
  if (!self->selectionPreview_ && (self->mouseLoc_ != nil)) {
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showButtonCreationDialogWithInt:self->mouseLoc_->x_ withInt:self->mouseLoc_->y_ withBoolean:textfield];
  }
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_endOfSwitchModeForProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *self, IOSObjectArray *ret, jboolean changedKernel, OrgGeogebraCommonUtilAsyncOperation *callback) {
  [self memorizeJustCreatedGeosAfterProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray:ret];
  if (callback != nil) [callback callbackWithId:JavaLangBoolean_valueOfWithBoolean_(changedKernel || (ret != nil))];
  if (!changedKernel) {
    return ret != nil;
  }
  return changedKernel;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_processModeWithOrgGeogebraCommonEuclidianHits_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *processHits, jboolean isControlDown, OrgGeogebraCommonUtilAsyncOperation *callback) {
  OrgGeogebraCommonEuclidianHits *hits = processHits;
  jboolean changedKernel = NO;
  if (hits == nil) {
    hits = new_OrgGeogebraCommonEuclidianHits_init();
  }
  OrgGeogebraCommonUtilAsyncOperation *callback2;
  if (callback == nil) {
    callback2 = nil;
  }
  else {
    callback2 = new_OrgGeogebraCommonEuclidianEuclidianController_$4_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, callback);
  }
  changedKernel = [self switchModeForProcessModeWithOrgGeogebraCommonEuclidianHits:hits withBoolean:isControlDown withOrgGeogebraCommonUtilAsyncOperation:callback2];
  if (changedKernel) {
    [self toolCompleted];
  }
  if (callback == nil) [self updatePreview];
  return changedKernel;
}

void OrgGeogebraCommonEuclidianEuclidianController_rotateObjectWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  jdouble newAngle = JavaLangMath_atan2WithDouble_withDouble_(self->yRW_ - ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rotationCenter_))->inhomY_, self->xRW_ - self->rotationCenter_->inhomX_);
  jdouble angle = newAngle - self->rotationLastAngle_;
  [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(self->tempNum_)) setWithDouble:angle];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->rotGeoElement_)) isChangeable]) {
    [((id<OrgGeogebraCommonKernelGeosPointRotateable>) check_protocol_cast(self->rotGeoElement_, @protocol(OrgGeogebraCommonKernelGeosPointRotateable))) rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:self->tempNum_ withOrgGeogebraCommonKernelKernelNDGeoPointND:self->rotationCenter_];
    if (repaint) {
      [self->rotGeoElement_ updateRepaint];
    }
    else {
      [self->rotGeoElement_ updateCascade];
    }
  }
  else {
    JavaUtilArrayList *pts = [self->rotGeoElement_ getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self->view_];
    for (id<OrgGeogebraCommonKernelKernelNDGeoPointND> __strong pt in nil_chk(pts)) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pt)) rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:self->tempNum_ withOrgGeogebraCommonKernelKernelNDGeoPointND:self->rotationCenter_];
    }
    OrgGeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(pts, new_JavaUtilTreeSet_init(), NO);
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) repaint];
  }
  self->rotationLastAngle_ = newAngle;
}

void OrgGeogebraCommonEuclidianEuclidianController_moveLabel(OrgGeogebraCommonEuclidianEuclidianController *self) {
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedLabelGeoElement_)) setLabelOffsetWithInt:(((OrgGeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_))->x_ + ((OrgGeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_) - ((OrgGeogebraCommonAwtGPoint *) nil_chk(self->startLoc_))->x_ withInt:(self->oldLoc_->y_ + self->mouseLoc_->y_) - self->startLoc_->y_];
  [self->movedLabelGeoElement_ update];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
}

void OrgGeogebraCommonEuclidianEuclidianController_updateAfterMoveWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean repaint) {
  OrgGeogebraCommonEuclidianEuclidianController_initialize();
  if (repaint) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateCascade];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [self moveVector];
  OrgGeogebraCommonEuclidianEuclidianController_updateAfterMoveWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoVector_, [OrgGeogebraCommonKernelGeosGeoElement class]), repaint);
}

void OrgGeogebraCommonEuclidianEuclidianController_moveVectorWithDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianController *self, jdouble x, jdouble y) {
  [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->movedGeoVector_)) setCoordsWithDouble:x withDouble:y withDouble:0.0];
}

void OrgGeogebraCommonEuclidianEuclidianController_moveVectorStartPointWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> P = [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->movedGeoVector_)) getStartPoint];
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) setCoordsWithDouble:self->xRW_ withDouble:self->yRW_ withDouble:1.0];
  if (repaint) {
    [self->movedGeoVector_ updateRepaint];
  }
  else {
    [self->movedGeoVector_ updateCascade];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveTextWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->movedGeoText_)) isAbsoluteScreenLocActive]) {
    [self->movedGeoText_ setAbsoluteScreenLocWithInt:(((OrgGeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_))->x_ + ((OrgGeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_) - ((OrgGeogebraCommonAwtGPoint *) nil_chk(self->startLoc_))->x_ withInt:(self->oldLoc_->y_ + self->mouseLoc_->y_) - self->startLoc_->y_];
  }
  else {
    if ([self->movedGeoText_ hasAbsoluteLocation]) {
      [self moveTextAbsoluteLocation];
    }
    else {
      [self->movedGeoText_ setLabelOffsetWithInt:(((OrgGeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_))->x_ + ((OrgGeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_) - ((OrgGeogebraCommonAwtGPoint *) nil_chk(self->startLoc_))->x_ withInt:(self->oldLoc_->y_ + self->mouseLoc_->y_) - self->startLoc_->y_];
    }
  }
  if (repaint) {
    [self->movedGeoText_ updateRepaint];
  }
  else {
    [self->movedGeoText_ updateCascade];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveImageWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  if ([((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(self->movedGeoImage_)) isAbsoluteScreenLocActive]) {
    [self->movedGeoImage_ setAbsoluteScreenLocWithInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXWithDouble:self->xRW_ - [self getStartPointX]] withInt:[self->view_ toScreenCoordYWithDouble:self->yRW_ - [self getStartPointY]]];
    if (repaint) {
      [self->movedGeoImage_ updateRepaint];
    }
    else {
      [self->movedGeoImage_ updateCascade];
    }
  }
  else {
    if ([self->movedGeoImage_ hasAbsoluteLocation]) {
      jdouble vx = self->xRW_ - [self getStartPointX];
      jdouble vy = self->yRW_ - [self getStartPointY];
      [self->movedGeoImage_ setWithOrgGeogebraCommonKernelGeosGeoElement:self->oldImage_];
      for (jint i = 0; i < 3; i++) {
        OrgGeogebraCommonKernelGeosGeoPoint *corner = [self->movedGeoImage_ getCornerWithInt:i];
        if (corner != nil) {
          [corner setCoordsWithDouble:corner->inhomX_ + vx withDouble:corner->inhomY_ + vy withDouble:1.0];
        }
      }
      if (repaint) {
        [self->movedGeoImage_ updateRepaint];
      }
      else {
        [self->movedGeoImage_ updateCascade];
      }
    }
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveConicWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  if ([self isAltDown] && ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_)) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA || [self->movedGeoConic_ getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE)) {
    jdouble vX = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_))->b_)) getX];
    jdouble vY = [self->movedGeoConic_->b_ getY];
    jint eigenvecIndex = [self->movedGeoConic_ getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA ? 0 : 1;
    jdouble c = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self->movedGeoConic_ getEigenvecWithInt:eigenvecIndex])) getX];
    jdouble s = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self->movedGeoConic_ getEigenvecWithInt:eigenvecIndex])) getY];
    jdouble coeff;
    jdouble dx = self->xRW_ - vX;
    jdouble dy = self->yRW_ - vY;
    coeff = (c * dx + s * dy) / ((s * dx - c * dy) * (s * dx - c * dy));
    if (coeff > 1E8) {
      coeff = 1E6;
    }
    else if (coeff < -1E8) {
      coeff = -1E6;
    }
    [self->movedGeoConic_ translateWithDouble:-vX withDouble:-vY];
    [self->movedGeoConic_ setCoeffsWithDouble:coeff * s * s withDouble:-2 * coeff * s * c withDouble:coeff * c * c withDouble:-c withDouble:-s withDouble:0];
    [self->movedGeoConic_ translateWithDouble:vX withDouble:vY];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->tempConic_];
    [self->movedGeoConic_ translateWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY]];
  }
  if (repaint) {
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_)) updateRepaint];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->movedGeoConic_)) updateCascade];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveImplicitPolyWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->movedGeoImplicitPoly_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->tempImplicitPoly_];
  [self->movedGeoImplicitPoly_ translateWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY]];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->moveDependentPoints_)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoPoint *g = [self->moveDependentPoints_ getWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(g)) setCoords2DWithDouble:[((JavaLangDouble *) nil_chk([((JavaUtilArrayList *) nil_chk(self->tempDependentPointX_)) getWithInt:i])) doubleValue] withDouble:[((JavaLangDouble *) nil_chk([((JavaUtilArrayList *) nil_chk(self->tempDependentPointY_)) getWithInt:i])) doubleValue] withDouble:1];
    if (self->tmpCoordsL3_ == nil) {
      self->tmpCoordsL3_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
    }
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->tmpCoordsL3_)) setXWithDouble:self->xRW_ - [self getStartPointX]];
    [self->tmpCoordsL3_ setYWithDouble:self->yRW_ - [self getStartPointY]];
    [self->tmpCoordsL3_ setZWithDouble:1];
    [g translateWithOrgGeogebraCommonKernelMatrixCoords:self->tmpCoordsL3_];
  }
  if (repaint) {
    [self->movedGeoImplicitPoly_ updateRepaint];
  }
  else {
    [self->movedGeoImplicitPoly_ updateCascade];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveFreehandWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->tempFunction_];
  [self->movedGeoFunction_ translateWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY]];
  [self setStartPointLocationWithDouble:self->xRW_ withDouble:self->yRW_];
  if (repaint) {
    [self->movedGeoFunction_ updateRepaint];
  }
  else {
    [self->movedGeoFunction_ updateCascade];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveFunctionWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  jboolean quadratic = NO;
  if ([self isAltDown]) {
    if (!JavaLangDouble_isNaNWithDouble_(self->vertexX_) && [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) isIndependent]) {
      quadratic = YES;
    }
    else {
      OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) getFunction])) getExpression];
      if (OrgGeogebraCommonPluginOperationEnum_isSimpleFunctionWithOrgGeogebraCommonPluginOperationEnum_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) {
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> arg = [en getLeft];
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(arg)) isExpressionNode]) {
          OrgGeogebraCommonKernelArithmeticExpressionNode *enArg = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(arg, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
          OrgGeogebraCommonPluginOperationEnum *op2 = [enArg getOperation];
          if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op2)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PLUS()] || [op2 isEqual:OrgGeogebraCommonPluginOperationEnum_get_MINUS()]) {
            id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [enArg getLeft];
            id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [enArg getRight];
            if (!([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode]) && !([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode])) {
              return;
            }
            if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
              enArg = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
              op2 = [enArg getOperation];
            }
            else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
              enArg = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
              op2 = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enArg)) getOperation];
            }
            else {
              return;
            }
          }
          if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op2)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()]) {
            id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enArg)) getLeft];
            id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [enArg getRight];
            if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
              id<OrgGeogebraCommonKernelArithmeticExpressionValue> tmp = right;
              right = left;
              left = tmp;
            }
            if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [left isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
              if (JavaLangDouble_isNaNWithDouble_(self->initxRW_)) {
                self->initxRW_ = self->xRW_;
                self->initFactor_ = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyDouble class])))) getDouble];
                return;
              }
              [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyDouble class])))) setWithDouble:self->initxRW_ / self->xRW_ * self->initFactor_];
              [self->movedGeoFunction_ updateRepaint];
            }
          }
        }
      }
      return;
    }
  }
  if (quadratic) {
    jdouble p = (self->yRW_ - self->vertexY_) / ((self->xRW_ - self->vertexX_) * (self->xRW_ - self->vertexX_));
    OrgGeogebraCommonKernelArithmeticMyDouble *a = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, p);
    OrgGeogebraCommonKernelArithmeticMyDouble *h = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, self->vertexX_);
    OrgGeogebraCommonKernelArithmeticMyDouble *k = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, self->vertexY_);
    OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
    OrgGeogebraCommonKernelArithmeticExpressionNode *squareE = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), h) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 2)])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:a])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:k];
    OrgGeogebraCommonKernelArithmeticFunction *squareF = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(squareE, fv);
    [squareF initFunction];
    OrgGeogebraCommonKernelGeosGeoFunction *square = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
    [square setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:squareF];
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) setWithOrgGeogebraCommonKernelGeosGeoElement:square];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->tempFunction_];
    [self->movedGeoFunction_ translateWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY]];
  }
  if (repaint) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) updateRepaint];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->movedGeoFunction_)) updateCascade];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveBooleanWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->movedGeoBoolean_)) setAbsoluteScreenLocWithInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXWithDouble:self->xRW_ - [self getStartPointX]] withInt:[self->view_ toScreenCoordYWithDouble:self->yRW_ - [self getStartPointY]] withBoolean:[self isMoveCheckboxExpected]];
  if (repaint) {
    [self->movedGeoBoolean_ updateRepaint];
  }
  else {
    [self->movedGeoBoolean_ updateCascade];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveButtonWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  [((id<OrgGeogebraCommonKernelGeosFurniture>) nil_chk(self->movedGeoButton_)) setAbsoluteScreenLocWithInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXWithDouble:self->xRW_ - [self getStartPointX]] withInt:[self->view_ toScreenCoordYWithDouble:self->yRW_ - [self getStartPointY]]];
  if (repaint) {
    [self->movedGeoButton_ updateRepaint];
  }
  else {
    [self->movedGeoButton_ updateCascade];
  }
}

jdouble OrgGeogebraCommonEuclidianEuclidianController_getSliderValueWithOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonKernelGeosGeoNumeric *movedSlider, jboolean click) {
  jdouble min = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(movedSlider)) getIntervalMin];
  jdouble max = [movedSlider getIntervalMax];
  jdouble param;
  if ([movedSlider isSliderHorizontal]) {
    if ([movedSlider isAbsoluteScreenLocActive]) {
      param = ((OrgGeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->x_ - [self getStartPointX];
    }
    else {
      param = self->xRW_ - [self getStartPointX];
    }
  }
  else {
    if ([movedSlider isAbsoluteScreenLocActive]) {
      param = [self getStartPointY] - ((OrgGeogebraCommonAwtGPoint *) nil_chk(self->mouseLoc_))->y_;
    }
    else {
      param = self->yRW_ - [self getStartPointY];
    }
  }
  param = JavaLangMath_maxWithDouble_withDouble_(0, JavaLangMath_minWithDouble_withDouble_([movedSlider getSliderWidth], param));
  param = (param * (max - min)) / [movedSlider getSliderWidth];
  param = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(param, [movedSlider getAnimationStep]);
  jdouble val = min + param;
  if ([movedSlider getAnimationStep] > OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
    val = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(val);
  }
  if ([movedSlider isGeoAngle]) {
    val = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(val * OrgGeogebraCommonKernelKernel_CONST_180_PI) / OrgGeogebraCommonKernelKernel_CONST_180_PI;
  }
  if (!click) {
    return val;
  }
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(val, [movedSlider getValue])) {
    return val;
  }
  if (val > [movedSlider getValue]) {
    return JavaLangMath_minWithDouble_withDouble_([movedSlider getValue] + [movedSlider getAnimationStep], [movedSlider getIntervalMax]);
  }
  return JavaLangMath_maxWithDouble_withDouble_([movedSlider getValue] - [movedSlider getAnimationStep], [movedSlider getIntervalMin]);
}

void OrgGeogebraCommonEuclidianEuclidianController_moveNumericWithBoolean_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint, jboolean click) {
  jdouble newVal = OrgGeogebraCommonEuclidianEuclidianController_getSliderValueWithOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, self->movedGeoNumeric_, click);
  jdouble oldVal = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movedGeoNumeric_)) getValue];
  jdouble min = [self->movedGeoNumeric_ getIntervalMin];
  if ((min == oldVal) && (newVal < min)) {
    return;
  }
  jdouble max = [self->movedGeoNumeric_ getIntervalMax];
  if ((max == oldVal) && (newVal > max)) {
    return;
  }
  if (oldVal == newVal) {
    return;
  }
  [self->movedGeoNumeric_ setValueWithDouble:newVal];
  self->movedGeoNumericDragged_ = YES;
  [self->movedGeoNumeric_ updateRepaint];
}

void OrgGeogebraCommonEuclidianEuclidianController_moveSliderWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  if ([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movedGeoNumeric_)) isAbsoluteScreenLocActive]) {
    [self->movedGeoNumeric_ setAbsoluteScreenLocWithInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordXWithDouble:self->xRW_ - [self getStartPointX]] withInt:[self->view_ toScreenCoordYWithDouble:self->yRW_ - [self getStartPointY]] withBoolean:self->temporaryMode_];
  }
  else {
    [self->movedGeoNumeric_ setSliderLocationWithDouble:self->xRW_ - [self getStartPointX] withDouble:self->yRW_ - [self getStartPointY] withBoolean:self->temporaryMode_];
  }
  [self->movedGeoNumeric_ update];
  if (repaint) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveAttachedWithBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint) {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedGeoElement_)) getParentAlgorithm];
  OrgGeogebraCommonKernelGeosGeoPoint *pt1 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput]), 4), [OrgGeogebraCommonKernelGeosGeoPoint class]);
  OrgGeogebraCommonKernelGeosGeoPoint *pt2 = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([algo getInput]), 5), [OrgGeogebraCommonKernelGeosGeoPoint class]);
  jdouble dx = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXscale] * (self->xRW_ - [self getStartPointX]);
  jdouble dy = [self->view_ getYscale] * (self->yRW_ - [self getStartPointY]);
  [self setStartPointLocationWithDouble:self->xRW_ withDouble:self->yRW_];
  [pt1 setCoordsWithDouble:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pt1)) getX] + dx withDouble:[pt1 getY] - dy withDouble:1];
  [pt2 setCoordsWithDouble:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pt2)) getX] + dx withDouble:[pt2 getY] - dy withDouble:1];
  [algo update];
  if (repaint) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  }
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_handleMovedElementFreePoint(OrgGeogebraCommonEuclidianEuclidianController *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedGeoElement_)) isGeoPoint]) {
    self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT;
    [self setMovedGeoPointWithOrgGeogebraCommonKernelGeosGeoElement:self->movedGeoElement_];
    *IOSDoubleArray_GetRef(nil_chk(self->transformCoordsOffset_), 0) = 0;
    *IOSDoubleArray_GetRef(self->transformCoordsOffset_, 1) = 0;
    return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_handleMovedElementFreeText(OrgGeogebraCommonEuclidianEuclidianController *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedGeoElement_)) isGeoText]) {
    self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_TEXT;
    self->movedGeoText_ = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(self->movedGeoElement_, [OrgGeogebraCommonKernelGeosGeoText class]);
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setShowMouseCoordsWithBoolean:NO];
    [self->view_ setDragCursor];
    if ([self->movedGeoText_ isAbsoluteScreenLocActive]) {
      [((OrgGeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_)) setLocationWithInt:[self->movedGeoText_ getAbsoluteScreenLocX] withInt:[self->movedGeoText_ getAbsoluteScreenLocY]];
      self->startLoc_ = self->mouseLoc_;
    }
    else if ([self->movedGeoText_ hasAbsoluteLocation]) {
      OrgGeogebraCommonKernelGeosGeoPoint *loc = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->movedGeoText_ getStartPoint], [OrgGeogebraCommonKernelGeosGeoPoint class]);
      if (loc == nil) {
        loc = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
        [loc setCoordsWithDouble:0 withDouble:0 withDouble:1.0];
        @try {
          [self->movedGeoText_ setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:loc];
        }
        @catch (JavaLangException *ex) {
          [((JavaLangException *) nil_chk(ex)) printStackTrace];
        }
        [self setStartPointLocation];
      }
      else {
        [self setStartPointLocationWithOriginWithDouble:loc->inhomX_ withDouble:loc->inhomY_];
        OrgGeogebraCommonKernelGeosGeoPoint *loc2 = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelGeosGeoPoint_(loc);
        [self->movedGeoText_ setNeedsUpdatedBoundingBoxWithBoolean:YES];
        [self->movedGeoText_ update];
        [loc2 setCoordsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk([self->movedGeoText_ getBoundingBox])) getX] withDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk([self->movedGeoText_ getBoundingBox])) getY] withDouble:1.0];
        *IOSDoubleArray_GetRef(nil_chk(self->transformCoordsOffset_), 0) = loc2->inhomX_ - self->xRW_;
        *IOSDoubleArray_GetRef(self->transformCoordsOffset_, 1) = loc2->inhomY_ - self->yRW_;
      }
    }
    else {
      [((OrgGeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_)) setLocationWithInt:self->movedGeoText_->labelOffsetX_ withInt:self->movedGeoText_->labelOffsetY_];
      self->startLoc_ = self->mouseLoc_;
    }
    return YES;
  }
  return NO;
}

void OrgGeogebraCommonEuclidianEuclidianController_addMovedGeoElementFreeInputPointsToTranslateableGeos(OrgGeogebraCommonEuclidianEuclidianController *self) {
  JavaUtilArrayList *freeInputPoints = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->movedGeoElement_)) getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self->view_];
  for (id<OrgGeogebraCommonKernelKernelNDGeoPointND> __strong p in nil_chk(freeInputPoints)) {
    [((JavaUtilArrayList *) nil_chk(self->translateableGeos_)) addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class])];
  }
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_isCheckboxFixedWithOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonKernelGeosGeoBoolean *geoBool) {
  return [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(geoBool)) isCheckboxFixed] || ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) isHTML5Applet] && !OrgGeogebraCommonMainApp_isFullAppGui());
}

void OrgGeogebraCommonEuclidianEuclidianController_handleMousePressedForMoveModeWithOrgGeogebraCommonEuclidianEventAbstractEvent_withBoolean_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventAbstractEvent *e, jboolean drag) {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:e]) {
    return;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getLabelHitWithOrgGeogebraCommonAwtGPoint:self->mouseLoc_ withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getType]];
  if (geo != nil) {
    self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_LABEL;
    self->movedLabelGeoElement_ = geo;
    [((OrgGeogebraCommonAwtGPoint *) nil_chk(self->oldLoc_)) setLocationWithInt:geo->labelOffsetX_ withInt:geo->labelOffsetY_];
    self->startLoc_ = self->mouseLoc_;
    [self->view_ setDragCursor];
    return;
  }
  [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[e getType]];
  OrgGeogebraCommonEuclidianHits *viewHits = [self->view_ getHits];
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(viewHits)) removePolygons];
  OrgGeogebraCommonEuclidianHits *moveableList;
  if (drag) {
    moveableList = [viewHits getMoveableHitsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self->view_];
  }
  else {
    moveableList = viewHits;
  }
  OrgGeogebraCommonEuclidianHits *hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk(moveableList)) getTopHits];
  JavaUtilArrayList *selGeos = [self getAppSelectedGeos];
  if (([((JavaUtilArrayList *) nil_chk(selGeos)) size] == 1) && ![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] && [hits containsWithId:[selGeos getWithInt:0]]) {
    geo = [selGeos getWithInt:0];
  }
  else {
    geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:NO];
    if (![selGeos containsWithId:geo]) {
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) clearSelectedGeosWithBoolean:geo == nil withBoolean:NO];
      [self->selection_ updateSelectionWithBoolean:NO];
      [self->selection_ addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES withBoolean:YES];
    }
  }
  OrgGeogebraCommonEuclidianHits *th = [viewHits getTopHits];
  if (geo == nil && [((OrgGeogebraCommonEuclidianHits *) nil_chk(th)) size] > 0) {
    geo = [th getWithInt:0];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed] && ![self isMoveButtonExpectedWithOrgGeogebraCommonKernelGeosGeoElement:geo] && ![self isMoveTextFieldExpectedWithOrgGeogebraCommonKernelGeosGeoElement:geo]) {
      [self runScriptsIfNeededWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
      [self resetMovedGeoPoint];
      return;
    }
  }
  if ((geo != nil) && (![geo isFixed] || [self isMoveButtonExpectedWithOrgGeogebraCommonKernelGeosGeoElement:geo] || [self isMoveTextFieldExpectedWithOrgGeogebraCommonKernelGeosGeoElement:geo])) {
    self->moveModeSelectionHandled_ = YES;
  }
  else {
    self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
    [self resetMovedGeoPoint];
    return;
  }
  [self handleMovedElementWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:[selGeos size] > 1 withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[e getType]];
  [self->view_ repaintView];
}

void OrgGeogebraCommonEuclidianEuclidianController_translateHitsByVectorWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type) {
  [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  OrgGeogebraCommonEuclidianHits *hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) getTopHits];
  OrgGeogebraCommonKernelGeosGeoElement *topHit = [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getWithInt:0];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(topHit)) isGeoVector]) {
    if (([[topHit getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVector class]])) {
      OrgGeogebraCommonKernelAlgosAlgoVector *algo = (OrgGeogebraCommonKernelAlgosAlgoVector *) check_class_cast([topHit getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoVector class]);
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = [((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoVector *) nil_chk(algo)) getInputPoints])) getWithInt:0];
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> q = [((JavaUtilArrayList *) nil_chk([algo getInputPoints])) getWithInt:1];
      [self checkZooming];
      OrgGeogebraCommonKernelGeosGeoVector *vec = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) VectorWithNSString:nil withDouble:0 withDouble:0];
      [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(vec)) setEuclidianVisibleWithBoolean:NO];
      [vec setAuxiliaryObjectWithBoolean:YES];
      IOSObjectArray *pp = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TranslateWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoVec3D:vec];
      IOSObjectArray *qq = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TranslateWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(q, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoVec3D:vec];
      OrgGeogebraCommonKernelAlgosAlgoVector *newVecAlgo = new_OrgGeogebraCommonKernelAlgosAlgoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction], nil, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(pp), 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)), (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(qq), 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
      [self setTranslateStartWithOrgGeogebraCommonKernelGeosGeoElement:topHit withOrgGeogebraCommonKernelKernelNDGeoVectorND:vec];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pp, 0))) setEuclidianVisibleWithBoolean:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isEuclidianVisible]];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(qq, 0))) update];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(qq, 0))) setEuclidianVisibleWithBoolean:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(q)) isEuclidianVisible]];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(qq, 0))) update];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([newVecAlgo getGeoElements]), 0))) setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:topHit];
      [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
      self->movedGeoVector_ = vec;
      self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID;
      return;
    }
    self->movedGeoPoint_ = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction], nil, 0, 0, 0);
    OrgGeogebraCommonKernelAlgosAlgoTranslate *algoTP = new_OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_([self->kernel_ getConstruction], nil, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoVec3D *) check_class_cast(topHit, [OrgGeogebraCommonKernelGeosGeoVec3D class]));
    OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([algoTP getGeoElements]), 0), [OrgGeogebraCommonKernelGeosGeoPoint class]);
    OrgGeogebraCommonKernelAlgosAlgoVector *newVecAlgo = new_OrgGeogebraCommonKernelAlgosAlgoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_([self->kernel_ getConstruction], nil, self->movedGeoPoint_, p);
    [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoPoint class])) setEuclidianVisibleWithBoolean:NO];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoPoint class])) update];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setEuclidianVisibleWithBoolean:NO];
    [p update];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([newVecAlgo getGeoElements]), 0))) setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:topHit];
    self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT;
  }
  if ([topHit isTranslateable] || [OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:topHit]) {
    id<OrgGeogebraCommonKernelKernelNDGeoVectorND> vec;
    if ([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:topHit]) {
      vec = [self createVectorForTranslationWithNSString:nil];
      [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vec)) setEuclidianVisibleWithBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(vec, [OrgGeogebraCommonKernelGeosGeoElement class])) setAuxiliaryObjectWithBoolean:YES];
    }
    else {
      vec = [self createVectorForTranslation];
    }
    (void) [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) TranslateNDWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:topHit withOrgGeogebraCommonKernelKernelNDGeoVectorND:vec];
    [self setTranslateStartWithOrgGeogebraCommonKernelGeosGeoElement:topHit withOrgGeogebraCommonKernelKernelNDGeoVectorND:vec];
    [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE withOrgGeogebraCommonKernelModeSetterEnum:OrgGeogebraCommonKernelModeSetterEnum_get_TOOLBAR()];
    self->movedGeoVector_ = vec;
    self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID;
    return;
  }
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_penModeWithInt_(jint mode2) {
  OrgGeogebraCommonEuclidianEuclidianController_initialize();
  switch (mode2) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
    return YES;
  }
  return NO;
}

void OrgGeogebraCommonEuclidianEuclidianController_mousePressedTranslatedViewWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type) {
  OrgGeogebraCommonEuclidianHits *hits;
  [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits];
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
  self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VIEW;
  if (![hits isEmpty] && [self moveAxesPossible]) {
    for (id __strong hit in hits) {
      if (hit == [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXAxis]) {
        self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_X_AXIS;
      }
      if (hit == [self->kernel_ getYAxis]) {
        self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_Y_AXIS;
      }
    }
  }
  self->startLoc_ = self->mouseLoc_;
  [self setDragCursorIfMoveView];
  [self->view_ rememberOrigins];
  self->xTemp_ = self->xRW_;
  self->yTemp_ = self->yRW_;
  [self->view_ setShowAxesRatioWithBoolean:(self->moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_X_AXIS) || (self->moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_Y_AXIS)];
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_needsAxisZoomWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianHits *hits, OrgGeogebraCommonEuclidianEventAbstractEvent *event) {
  return ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) hasXAxis] || [hits hasYAxis]) && OrgGeogebraCommonEuclidianEuclidianController_specialMoveEventWithOrgGeogebraCommonEuclidianEventAbstractEvent_(self, event);
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_shallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventAbstractEvent *event) {
  if (![((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) hasWithOrgGeogebraCommonMainFeatureEnum:OrgGeogebraCommonMainFeatureEnum_get_SF_DRAG()]) {
    return OrgGeogebraCommonEuclidianEuclidianController_specialMoveEventWithOrgGeogebraCommonEuclidianEventAbstractEvent_(self, event);
  }
  return [self->app_ isShiftDragZoomEnabled] && (!self->doubleClickStarted_ && self->mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE);
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_specialMoveEventWithOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventAbstractEvent *event) {
  return [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) isShiftDragZoomEnabled] && (([((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isShiftDown] && ![self->app_ isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]) || ([event isControlDown] && [self->app_ isWindows]) || [self->app_ isMiddleClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]);
}

jboolean OrgGeogebraCommonEuclidianEuclidianController_modeCreatesHelperPointsWithInt_(jint mode2) {
  OrgGeogebraCommonEuclidianEuclidianController_initialize();
  switch (mode2) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT_FIXED:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_REGULAR_POLYGON:
    return YES;
  }
  return NO;
}

void OrgGeogebraCommonEuclidianEuclidianController_altClickedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type) {
  [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  OrgGeogebraCommonEuclidianHits *hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) getTopHits];
  if ((hits != nil) && ([hits size] > 0)) {
    [hits removePolygons];
    OrgGeogebraCommonKernelGeosGeoElement *geo = [hits getWithInt:0];
    if (self->mode_ != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH) {
      [((OrgGeogebraCommonMainGlobalKeyDispatcher *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getGlobalKeyDispatcher])) handleFunctionKeyForAlgebraInputWithInt:3 withOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    self->moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_NONE;
    return;
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_processRightReleasedWithBoolean_withBoolean_withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean right, jboolean control, OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type) {
  if (![((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) isRightClickEnabled]) {
    return;
  }
  if (![self->app_ hasWithOrgGeogebraCommonMainFeatureEnum:OrgGeogebraCommonMainFeatureEnum_get_SF_DRAG()] && type != OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH() && [self processZoomRectangle]) {
    return;
  }
  if (([self->app_ isMacOS] && control) || !right) {
    return;
  }
  if (self->draggingOccured_ && [self->app_ hasWithOrgGeogebraCommonMainFeatureEnum:OrgGeogebraCommonMainFeatureEnum_get_SF_DRAG()]) {
    if ([self allowSelectionRectangle]) {
      [self processSelectionRectangleWithBoolean:NO withBoolean:control];
      return;
    }
  }
  [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  OrgGeogebraCommonEuclidianHits *hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) getTopHits];
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    if ([self->app_ isUsingFullGui] && [self->app_ getGuiManager] != nil) {
      if ([self->view_ getSelectionRectangle] != nil) {
        [self processSelectionRectangleWithBoolean:NO withBoolean:control];
        return;
      }
      else if ([((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) selectedGeosSize] > 0) {
        [self showPopupMenuChooseGeoWithJavaUtilArrayList:[self getAppSelectedGeos] withOrgGeogebraCommonEuclidianHits:hits];
      }
      else {
        [self showDrawingPadPopupWithOrgGeogebraCommonAwtGPoint:self->mouseLoc_];
      }
    }
  }
  else {
    if ([((OrgGeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) selectedGeosSize] > 0) {
      if (self->mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
        if (![hits intersectWithJavaUtilArrayList:[self getAppSelectedGeos]]) {
          [self->selection_ clearSelectedGeosWithBoolean:NO];
          [self->selection_ addSelectedGeosWithJavaUtilArrayList:hits withBoolean:YES];
        }
        else {
        }
        if ([self->app_ isUsingFullGui] && [self->app_ getGuiManager] != nil) {
          [self showPopupMenuChooseGeoWithJavaUtilArrayList:[self getAppSelectedGeos] withOrgGeogebraCommonEuclidianHits:hits];
        }
      }
      else {
        if ([self->app_ isUsingFullGui] && [self->app_ getGuiManager] != nil) {
          OrgGeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES withBoolean:NO];
          if (geo == nil) [self showDrawingPadPopupWithOrgGeogebraCommonAwtGPoint:self->mouseLoc_];
          else {
            JavaUtilArrayList *geos = new_JavaUtilArrayList_init();
            [geos addWithId:geo];
            [self showPopupMenuChooseGeoWithJavaUtilArrayList:geos withOrgGeogebraCommonEuclidianHits:hits];
          }
        }
      }
    }
    else {
      if ([self->app_ isUsingFullGui] && [self->app_ getGuiManager] != nil) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [self chooseGeoWithJavaUtilArrayList:hits withBoolean:YES withBoolean:NO];
        if (geo == nil) [self showDrawingPadPopupWithOrgGeogebraCommonAwtGPoint:self->mouseLoc_];
        else {
          JavaUtilArrayList *geos = new_JavaUtilArrayList_init();
          [geos addWithId:geo];
          [self showPopupMenuChooseGeoWithJavaUtilArrayList:geos withOrgGeogebraCommonEuclidianHits:hits];
        }
      }
    }
  }
}

OrgGeogebraCommonEuclidianEuclidianPen *OrgGeogebraCommonEuclidianEuclidianController_getPen(OrgGeogebraCommonEuclidianEuclidianController *self) {
  if (self->pen_ == nil) {
    self->pen_ = new_OrgGeogebraCommonEuclidianEuclidianPen_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonEuclidianEuclidianView_(self->app_, self->view_);
  }
  return self->pen_;
}

void OrgGeogebraCommonEuclidianEuclidianController_twoTouchStartCommonWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianController *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  self->oldDistance_ = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x1 - x2, y1 - y2);
}

void OrgGeogebraCommonEuclidianEuclidianController_twoTouchMoveCommonWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonEuclidianEuclidianController *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  jint centerX, centerY;
  jdouble newDistance;
  centerX = J2ObjCFpToInt((x1 + x2)) / 2;
  centerY = J2ObjCFpToInt((y1 + y2)) / 2;
  if (self->oldDistance_ > 0) {
    newDistance = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x1 - x2, y1 - y2);
    if (JavaLangMath_absWithDouble_(newDistance - self->oldDistance_) > OrgGeogebraCommonEuclidianEuclidianController_MINIMAL_PIXEL_DIFFERENCE_FOR_ZOOM) {
      [self onPinchWithInt:centerX withInt:centerY withDouble:newDistance / self->oldDistance_];
      self->oldDistance_ = newDistance;
    }
  }
}

void OrgGeogebraCommonEuclidianEuclidianController_moveAttachDetachWithBoolean_withOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *self, jboolean repaint, OrgGeogebraCommonEuclidianEventAbstractEvent *event) {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->movedGeoPoint_)) isPointOnPath] || [self->movedGeoPoint_ isPointInRegion]) {
    jint th = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()];
    [self->app_ setCapturingThresholdWithInt:OrgGeogebraCommonEuclidianEuclidianController_INCREASED_THRESHOLD_FACTOR * th];
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setHitsWithOrgGeogebraCommonAwtGPoint:new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_([((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX], [event getY]) withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
    [self->app_ setCapturingThresholdWithInt:th];
  }
  else {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) setHitsWithOrgGeogebraCommonAwtGPoint:new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_([((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX], [event getY]) withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:[event getType]];
  }
  OrgGeogebraCommonEuclidianHits *hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHits])) clone];
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
  if ([self->movedGeoPoint_ isPointOnPath] && ![hits containsWithId:[self->movedGeoPoint_ getPath]]) {
    self->needsAttach_ = NO;
    self->detachFromPath_ = YES;
    self->detachFromRegion_ = NO;
    if (self->detachFrom_ == nil) {
      self->detachFrom_ = [self->movedGeoPoint_ getPath];
    }
    OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, self->selectedPaths_, [self->movedGeoPoint_ getPath], 1);
    [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoPoint class])) removePath];
    [self->movedGeoPoint_ setCoordsWithDouble:[self->view_ toRealWorldCoordXWithDouble:[((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX]] withDouble:[self->view_ toRealWorldCoordYWithDouble:[event getY]] withDouble:1];
  }
  else if ([self->movedGeoPoint_ isPointInRegion] && ![((OrgGeogebraCommonEuclidianHits *) nil_chk([self->view_ getHits])) containsWithId:[self->movedGeoPoint_ getRegion]]) {
    self->needsAttach_ = NO;
    self->detachFromPath_ = NO;
    self->detachFromRegion_ = YES;
    if (self->detachFrom_ == nil) {
      self->detachFrom_ = [self->movedGeoPoint_ getRegion];
    }
    OrgGeogebraCommonEuclidianEuclidianController_addToSelectionListWithJavaUtilArrayList_withId_withInt_(self, self->selectedRegions_, [self->movedGeoPoint_ getRegion], 1);
    [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoPoint class])) setRegionWithOrgGeogebraCommonKernelRegion:nil];
    [self->movedGeoPoint_ setCoordsWithDouble:[self->view_ toRealWorldCoordXWithDouble:[((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX]] withDouble:[self->view_ toRealWorldCoordYWithDouble:[event getY]] withDouble:1];
  }
  else {
    for (jint i = [hits size] - 1; i >= 0; i--) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:i])) isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class])]) {
        (void) [hits removeWithInt:i];
      }
    }
    OrgGeogebraCommonEuclidianEuclidianController_addSelectedPathWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    if ([((JavaUtilArrayList *) nil_chk(self->selectedPaths_)) size] > 0) {
      self->needsAttach_ = YES;
      [self->movedGeoPoint_ setPathWithOrgGeogebraCommonKernelPath:[self->selectedPaths_ getWithInt:0]];
      [self->movedGeoPoint_ setCoordsWithDouble:[self->view_ toRealWorldCoordXWithDouble:[((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) getX]] withDouble:[self->view_ toRealWorldCoordYWithDouble:[event getY]] withDouble:1];
    }
    else {
      [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(self->companion_)) movePointWithBoolean:repaint withOrgGeogebraCommonEuclidianEventAbstractEvent:event];
      return;
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class])) updateCascade];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianEuclidianController)

@implementation OrgGeogebraCommonEuclidianEuclidianController_$1

- (void)callbackWithId:(id)num {
  if (num == nil) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(this$0_->view_)) resetMode];
    if (val$callback2_ != nil) [val$callback2_ callbackWithId:JavaLangBoolean_valueOfWithBoolean_(NO)];
    return;
  }
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:num] && [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(num, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) isGeoElement]) {
    [((JavaUtilArrayList *) nil_chk(this$0_->selectedGeos_)) addWithId:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(num, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) toGeoElement]];
  }
  [this$0_ readNumberOrAngleIfNeededWithOrgGeogebraCommonUtilAsyncOperation:self];
  if (OrgGeogebraCommonEuclidianEuclidianController_selGeos(this$0_) == ((IOSObjectArray *) nil_chk(this$0_->macroInput_))->size_) {
    [this$0_ macroProcessWithOrgGeogebraCommonUtilAsyncOperation:val$callback2_];
  }
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                              withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)capture$0 {
  OrgGeogebraCommonEuclidianEuclidianController_$1_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianController:withOrgGeogebraCommonUtilAsyncOperation:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$callback2_", NULL, 0x1012, "Lorg.geogebra.common.util.AsyncOperation;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonEuclidianEuclidianController", "macroWithOrgGeogebraCommonEuclidianHits:withOrgGeogebraCommonUtilAsyncOperation:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianEuclidianController_$1 = { 2, "", "org.geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonEuclidianEuclidianController_$1;
}

@end

void OrgGeogebraCommonEuclidianEuclidianController_$1_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController_$1 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) {
  self->this$0_ = outer$;
  self->val$callback2_ = capture$0;
  (void) OrgGeogebraCommonUtilAsyncOperation_init(self);
}

OrgGeogebraCommonEuclidianEuclidianController_$1 *new_OrgGeogebraCommonEuclidianEuclidianController_$1_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) {
  OrgGeogebraCommonEuclidianEuclidianController_$1 *self = [OrgGeogebraCommonEuclidianEuclidianController_$1 alloc];
  OrgGeogebraCommonEuclidianEuclidianController_$1_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianEuclidianController_$1)

@implementation OrgGeogebraCommonEuclidianEuclidianController_$2

- (void)callbackWithId:(id)arg {
  [this$0_ memorizeJustCreatedGeosAfterProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray:nil];
  if (val$callback_ != nil) [val$callback_ callbackWithId:arg];
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                              withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)capture$0 {
  OrgGeogebraCommonEuclidianEuclidianController_$2_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianController:withOrgGeogebraCommonUtilAsyncOperation:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$callback_", NULL, 0x1012, "Lorg.geogebra.common.util.AsyncOperation;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonEuclidianEuclidianController", "switchModeForProcessModeWithOrgGeogebraCommonEuclidianHits:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianEuclidianController_$2 = { 2, "", "org.geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonEuclidianEuclidianController_$2;
}

@end

void OrgGeogebraCommonEuclidianEuclidianController_$2_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController_$2 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) {
  self->this$0_ = outer$;
  self->val$callback_ = capture$0;
  (void) OrgGeogebraCommonUtilAsyncOperation_init(self);
}

OrgGeogebraCommonEuclidianEuclidianController_$2 *new_OrgGeogebraCommonEuclidianEuclidianController_$2_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) {
  OrgGeogebraCommonEuclidianEuclidianController_$2 *self = [OrgGeogebraCommonEuclidianEuclidianController_$2 alloc];
  OrgGeogebraCommonEuclidianEuclidianController_$2_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianEuclidianController_$2)

@implementation OrgGeogebraCommonEuclidianEuclidianController_$3

- (void)callbackWithId:(id)changedKernel {
  if ([nil_chk(changedKernel) isEqual:JavaLangBoolean_valueOfWithBoolean_(YES)]) {
    [((OrgGeogebraCommonMainApp *) nil_chk(this$0_->app_)) storeUndoInfo];
  }
  [this$0_ endOfWrapMouseReleasedWithOrgGeogebraCommonEuclidianHits:val$hits2_ withBoolean:NO withBoolean:NO withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:nil];
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                                   withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)capture$0 {
  OrgGeogebraCommonEuclidianEuclidianController_$3_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianController:withOrgGeogebraCommonEuclidianHits:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$hits2_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonEuclidianEuclidianController", "processModeWithOrgGeogebraCommonEuclidianHits:withBoolean:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianEuclidianController_$3 = { 2, "", "org.geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonEuclidianEuclidianController_$3;
}

@end

void OrgGeogebraCommonEuclidianEuclidianController_$3_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController_$3 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonEuclidianHits *capture$0) {
  self->this$0_ = outer$;
  self->val$hits2_ = capture$0;
  (void) OrgGeogebraCommonUtilAsyncOperation_init(self);
}

OrgGeogebraCommonEuclidianEuclidianController_$3 *new_OrgGeogebraCommonEuclidianEuclidianController_$3_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonEuclidianHits *capture$0) {
  OrgGeogebraCommonEuclidianEuclidianController_$3 *self = [OrgGeogebraCommonEuclidianEuclidianController_$3 alloc];
  OrgGeogebraCommonEuclidianEuclidianController_$3_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianEuclidianController_$3)

@implementation OrgGeogebraCommonEuclidianEuclidianController_$4

- (void)callbackWithId:(id)ret {
  [((OrgGeogebraCommonUtilAsyncOperation *) nil_chk(val$callback_)) callbackWithId:ret];
  [this$0_ updatePreview];
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                              withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)capture$0 {
  OrgGeogebraCommonEuclidianEuclidianController_$4_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianController:withOrgGeogebraCommonUtilAsyncOperation:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$callback_", NULL, 0x1012, "Lorg.geogebra.common.util.AsyncOperation;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonEuclidianEuclidianController", "processModeWithOrgGeogebraCommonEuclidianHits:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianEuclidianController_$4 = { 2, "", "org.geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonEuclidianEuclidianController_$4;
}

@end

void OrgGeogebraCommonEuclidianEuclidianController_$4_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController_$4 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) {
  self->this$0_ = outer$;
  self->val$callback_ = capture$0;
  (void) OrgGeogebraCommonUtilAsyncOperation_init(self);
}

OrgGeogebraCommonEuclidianEuclidianController_$4 *new_OrgGeogebraCommonEuclidianEuclidianController_$4_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonUtilAsyncOperation *capture$0) {
  OrgGeogebraCommonEuclidianEuclidianController_$4 *self = [OrgGeogebraCommonEuclidianEuclidianController_$4 alloc];
  OrgGeogebraCommonEuclidianEuclidianController_$4_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianEuclidianController_$4)

@implementation OrgGeogebraCommonEuclidianEuclidianController_$5

- (void)callbackWithId:(id)arg {
  if ([nil_chk(arg) isEqual:JavaLangBoolean_valueOfWithBoolean_(YES)]) {
    [((OrgGeogebraCommonMainApp *) nil_chk(this$0_->app_)) storeUndoInfo];
  }
  [this$0_ endOfWrapMouseReleasedWithOrgGeogebraCommonEuclidianHits:val$hits2_ withOrgGeogebraCommonEuclidianEventAbstractEvent:val$event_];
}

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)outer$
                                   withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)capture$0
                     withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)capture$1 {
  OrgGeogebraCommonEuclidianEuclidianController_$5_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonEuclidianEuclidianController:withOrgGeogebraCommonEuclidianHits:withOrgGeogebraCommonEuclidianEventAbstractEvent:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "val$hits2_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "val$event_", NULL, 0x1012, "Lorg.geogebra.common.euclidian.event.AbstractEvent;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonEuclidianEuclidianController", "wrapMouseReleasedWithOrgGeogebraCommonEuclidianEventAbstractEvent:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianEuclidianController_$5 = { 2, "", "org.geogebra.common.euclidian", "EuclidianController", 0x8008, 2, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonEuclidianEuclidianController_$5;
}

@end

void OrgGeogebraCommonEuclidianEuclidianController_$5_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController_$5 *self, OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonEuclidianHits *capture$0, OrgGeogebraCommonEuclidianEventAbstractEvent *capture$1) {
  self->this$0_ = outer$;
  self->val$hits2_ = capture$0;
  self->val$event_ = capture$1;
  (void) OrgGeogebraCommonUtilAsyncOperation_init(self);
}

OrgGeogebraCommonEuclidianEuclidianController_$5 *new_OrgGeogebraCommonEuclidianEuclidianController_$5_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(OrgGeogebraCommonEuclidianEuclidianController *outer$, OrgGeogebraCommonEuclidianHits *capture$0, OrgGeogebraCommonEuclidianEventAbstractEvent *capture$1) {
  OrgGeogebraCommonEuclidianEuclidianController_$5 *self = [OrgGeogebraCommonEuclidianEuclidianController_$5 alloc];
  OrgGeogebraCommonEuclidianEuclidianController_$5_initWithOrgGeogebraCommonEuclidianEuclidianController_withOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonEuclidianEventAbstractEvent_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianEuclidianController_$5)
