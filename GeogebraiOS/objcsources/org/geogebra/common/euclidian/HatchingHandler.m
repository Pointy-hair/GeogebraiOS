//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/euclidian/HatchingHandler.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GAlphaComposite.h"
#include "org/geogebra/common/awt/GBasicStroke.h"
#include "org/geogebra/common/awt/GBufferedImage.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GEllipse2DFloat.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GFontRenderContext.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GPaint.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/awt/font/GTextLayout.h"
#include "org/geogebra/common/euclidian/HatchingHandler.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonEuclidianHatchingHandler () {
 @public
  id<OrgGeogebraCommonAwtGBufferedImage> bufferedImage_;
  id<OrgGeogebraCommonAwtGBufferedImage> subImage_;
  id<OrgGeogebraCommonAwtGGeneralPath> path_;
  id<OrgGeogebraCommonAwtGRectangle> rect_;
}

- (id<OrgGeogebraCommonAwtGGraphics2D>)createImageWithOrgGeogebraCommonAwtGBasicStroke:(id<OrgGeogebraCommonAwtGBasicStroke>)objStroke
                                                        withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color
                                                        withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)bgColor
                                                                             withFloat:(jfloat)backgroundTransparency
                                                                               withInt:(jint)xInt
                                                                               withInt:(jint)yInt;

- (void)drawWeavingWithDouble:(jdouble)angle
                      withInt:(jint)dist
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d;

- (void)drawBricksWithDouble:(jdouble)angle
                     withInt:(jint)xInt
                     withInt:(jint)yInt
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d;

+ (void)drawDottedWithDouble:(jdouble)dist
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d;

- (jboolean)drawChessboardWithDouble:(jdouble)angle
                           withFloat:(jfloat)hatchDist
 withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d;

- (void)drawHoneycombWithFloat:(jfloat)dist
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d;

+ (void)drawHatchingWithDouble:(jdouble)angle
                    withDouble:(jdouble)y
                       withInt:(jint)xInt
                       withInt:(jint)yInt
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianHatchingHandler, bufferedImage_, id<OrgGeogebraCommonAwtGBufferedImage>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianHatchingHandler, subImage_, id<OrgGeogebraCommonAwtGBufferedImage>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianHatchingHandler, path_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianHatchingHandler, rect_, id<OrgGeogebraCommonAwtGRectangle>)

__attribute__((unused)) static id<OrgGeogebraCommonAwtGGraphics2D> OrgGeogebraCommonEuclidianHatchingHandler_createImageWithOrgGeogebraCommonAwtGBasicStroke_withOrgGeogebraCommonAwtGColor_withOrgGeogebraCommonAwtGColor_withFloat_withInt_withInt_(OrgGeogebraCommonEuclidianHatchingHandler *self, id<OrgGeogebraCommonAwtGBasicStroke> objStroke, OrgGeogebraCommonAwtGColor *color, OrgGeogebraCommonAwtGColor *bgColor, jfloat backgroundTransparency, jint xInt, jint yInt);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianHatchingHandler_drawWeavingWithDouble_withInt_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianHatchingHandler *self, jdouble angle, jint dist, id<OrgGeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianHatchingHandler_drawBricksWithDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianHatchingHandler *self, jdouble angle, jint xInt, jint yInt, id<OrgGeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianHatchingHandler_drawDottedWithDouble_withOrgGeogebraCommonAwtGGraphics2D_(jdouble dist, id<OrgGeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static jboolean OrgGeogebraCommonEuclidianHatchingHandler_drawChessboardWithDouble_withFloat_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianHatchingHandler *self, jdouble angle, jfloat hatchDist, id<OrgGeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianHatchingHandler_drawHoneycombWithFloat_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianHatchingHandler *self, jfloat dist, id<OrgGeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(jdouble angle, jdouble y, jint xInt, jint yInt, id<OrgGeogebraCommonAwtGGraphics2D> g2d);

@implementation OrgGeogebraCommonEuclidianHatchingHandler

- (instancetype)init {
  OrgGeogebraCommonEuclidianHatchingHandler_init(self);
  return self;
}

- (id<OrgGeogebraCommonAwtGPaint>)setHatchingWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g3
                                            withOrgGeogebraCommonAwtGBasicStroke:(id<OrgGeogebraCommonAwtGBasicStroke>)objStroke
                                                  withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color
                                                  withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)bgColor
                                                                       withFloat:(jfloat)backgroundTransparency
                                                                      withDouble:(jdouble)hatchDist
                                                                      withDouble:(jdouble)angleDegrees
                          withOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)fillType
                                                                    withNSString:(NSString *)symbol
                                                    withOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  jdouble angle = JavaLangMath_roundWithDouble_(angleDegrees / 5) * JavaLangMath_PI / 36;
  if (angle < 0 || angle >= JavaLangMath_PI) angle = 0;
  jdouble dist = hatchDist;
  if (dist < 5) {
    dist = 5;
  }
  else if (dist > 50) {
    dist = 50;
  }
  jdouble x = dist / JavaLangMath_sinWithDouble_(angle);
  jdouble y = dist / JavaLangMath_cosWithDouble_(angle);
  jint xInt = (jint) JavaLangMath_absWithLong_(JavaLangMath_roundWithDouble_((x)));
  jint yInt = (jint) JavaLangMath_absWithLong_(JavaLangMath_roundWithDouble_((y)));
  if (angle == 0 || OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 2, angle, 10E-8)) {
    xInt = J2ObjCFpToInt(dist);
    yInt = xInt;
  }
  id<OrgGeogebraCommonAwtGGraphics2D> g2d = OrgGeogebraCommonEuclidianHatchingHandler_createImageWithOrgGeogebraCommonAwtGBasicStroke_withOrgGeogebraCommonAwtGColor_withOrgGeogebraCommonAwtGColor_withFloat_withInt_withInt_(self, objStroke, color, bgColor, backgroundTransparency, xInt, yInt);
  jint startX = xInt;
  jint startY = yInt;
  jint height = yInt;
  jint width = xInt;
  {
    jdouble side;
    id<OrgGeogebraCommonAwtFontGTextLayout> t;
    switch ([fillType ordinal]) {
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_HATCH:
      OrgGeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(angle, y, xInt, yInt, g2d);
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_CROSSHATCHED:
      OrgGeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(angle, y, xInt, yInt, g2d);
      OrgGeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(JavaLangMath_PI / 2 - angle, -y, xInt, yInt, g2d);
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_CHESSBOARD:
      OrgGeogebraCommonEuclidianHatchingHandler_drawChessboardWithDouble_withFloat_withOrgGeogebraCommonAwtGGraphics2D_(self, angle, (jfloat) dist, g2d);
      if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 4, angle, 10E-8)) {
        dist = dist * JavaLangMath_sinWithDouble_(angle);
      }
      height = width = J2ObjCFpToInt((dist * 2));
      startX = startY = J2ObjCFpToInt((dist / 2));
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_HONEYCOMB:
      OrgGeogebraCommonEuclidianHatchingHandler_drawHoneycombWithFloat_withOrgGeogebraCommonAwtGGraphics2D_(self, (jfloat) dist, g2d);
      side = dist * JavaLangMath_sqrtWithDouble_(3) / 2;
      startY = 0;
      startX = 0;
      height = J2ObjCFpToInt((dist * 3));
      width = J2ObjCFpToInt((2 * side));
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_WEAVING:
      startY = startX = xInt / 2;
      height = width = startX * 4;
      OrgGeogebraCommonEuclidianHatchingHandler_drawWeavingWithDouble_withInt_withOrgGeogebraCommonAwtGGraphics2D_(self, angle, xInt / 2, g2d);
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_BRICK:
      if (angle == 0 || OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI, angle, 10E-8) || OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 2, angle, 10E-8)) {
        startY = startX = xInt / 2;
        height = width *= 2;
      }
      OrgGeogebraCommonEuclidianHatchingHandler_drawBricksWithDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(self, angle, xInt, yInt, g2d);
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_DOTTED:
      OrgGeogebraCommonEuclidianHatchingHandler_drawDottedWithDouble_withOrgGeogebraCommonAwtGGraphics2D_(dist, g2d);
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_SYMBOLS:
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonAwtGFont *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getFontCanDisplayWithNSString:symbol])) deriveFontWithInt:OrgGeogebraCommonAwtGFont_PLAIN withInt:J2ObjCFpToInt((dist * 2.5))]];
      t = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:symbol withOrgGeogebraCommonAwtGFont:[g2d getFont] withOrgGeogebraCommonAwtGFontRenderContext:[g2d getFontRenderContext]];
      g2d = OrgGeogebraCommonEuclidianHatchingHandler_createImageWithOrgGeogebraCommonAwtGBasicStroke_withOrgGeogebraCommonAwtGColor_withOrgGeogebraCommonAwtGColor_withFloat_withInt_withInt_(self, objStroke, color, bgColor, backgroundTransparency, (JavaLangMath_roundWithFloat_([((id<OrgGeogebraCommonAwtFontGTextLayout>) nil_chk(t)) getAscent] + [t getDescent]) / 3), (JavaLangMath_roundWithFloat_([t getAscent] + [t getDescent]) / 3));
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) setFontWithOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonAwtGFont *) nil_chk([app getFontCanDisplayWithNSString:symbol])) deriveFontWithInt:OrgGeogebraCommonAwtGFont_PLAIN withInt:24]];
      [g2d drawStringWithNSString:symbol withInt:0 withInt:JavaLangMath_roundWithFloat_([t getAscent])];
      startY = 0;
      startX = 0;
      width = J2ObjCFpToInt([t getAscent]) + J2ObjCFpToInt([t getDescent]) - 1;
      height = J2ObjCFpToInt([t getAscent]) + J2ObjCFpToInt([t getDescent]) - 1;
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_IMAGE:
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_FillType_STANDARD:
      break;
    }
  }
  id<OrgGeogebraCommonAwtGPaint> ret = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newTexturePaintWithOrgGeogebraCommonAwtGBufferedImage:OrgGeogebraCommonEuclidianHatchingHandler_set_subImage_(self, [((id<OrgGeogebraCommonAwtGBufferedImage>) nil_chk(bufferedImage_)) getSubimageWithInt:startX withInt:startY withInt:width withInt:height]) withOrgGeogebraCommonAwtGRectangle:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:width withInt:height]];
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g3)) setPaintWithOrgGeogebraCommonAwtGPaint:ret];
  return ret;
}

- (id<OrgGeogebraCommonAwtGGraphics2D>)createImageWithOrgGeogebraCommonAwtGBasicStroke:(id<OrgGeogebraCommonAwtGBasicStroke>)objStroke
                                                        withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color
                                                        withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)bgColor
                                                                             withFloat:(jfloat)backgroundTransparency
                                                                               withInt:(jint)xInt
                                                                               withInt:(jint)yInt {
  return OrgGeogebraCommonEuclidianHatchingHandler_createImageWithOrgGeogebraCommonAwtGBasicStroke_withOrgGeogebraCommonAwtGColor_withOrgGeogebraCommonAwtGColor_withFloat_withInt_withInt_(self, objStroke, color, bgColor, backgroundTransparency, xInt, yInt);
}

- (void)setTextureWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g3
            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                            withFloat:(jfloat)alpha {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getFillImage] == nil || [((id<OrgGeogebraCommonAwtMyImage>) nil_chk([geo getFillImage])) isSVG]) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g3)) setPaintWithOrgGeogebraCommonAwtGPaint:[geo getFillColor]];
    return;
  }
  id<OrgGeogebraCommonAwtMyImage> image = [geo getFillImage];
  id<OrgGeogebraCommonAwtGRectangle> tr = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:[((id<OrgGeogebraCommonAwtMyImage>) nil_chk(image)) getWidth] withInt:[image getHeight]];
  id<OrgGeogebraCommonAwtGPaint> tp;
  if (alpha < 1.0f) {
    id<OrgGeogebraCommonAwtGBufferedImage> copy_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newBufferedImageWithInt:[image getWidth] withInt:[image getHeight] withInt:OrgGeogebraCommonAwtGBufferedImage_TYPE_INT_ARGB];
    id<OrgGeogebraCommonAwtGGraphics2D> g2d = [((id<OrgGeogebraCommonAwtGBufferedImage>) nil_chk(copy_)) createGraphics];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) setAntialiasing];
    [g2d setTransparent];
    OrgGeogebraCommonAwtGColor *bgColor = [geo getBackgroundColor];
    if (bgColor == nil) [g2d setColorWithOrgGeogebraCommonAwtGColor:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:0 withInt:0 withInt:0 withInt:0]];
    else [g2d setColorWithOrgGeogebraCommonAwtGColor:bgColor];
    [g2d fillRectWithInt:0 withInt:0 withInt:[image getWidth] withInt:[image getHeight]];
    if (alpha > 0.0f) {
      id<OrgGeogebraCommonAwtGAlphaComposite> ac = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newAlphaCompositeWithInt:OrgGeogebraCommonAwtGAlphaComposite_SRC_OVER withFloat:alpha];
      [g2d setCompositeWithOrgGeogebraCommonAwtGComposite:ac];
      [g2d drawImageWithOrgGeogebraCommonAwtMyImage:image withInt:0 withInt:0];
    }
    tp = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newTexturePaintWithOrgGeogebraCommonAwtGBufferedImage:copy_ withOrgGeogebraCommonAwtGRectangle:tr];
  }
  else {
    tp = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newTexturePaintWithOrgGeogebraCommonAwtMyImage:image withOrgGeogebraCommonAwtGRectangle:tr];
  }
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g3)) setPaintWithOrgGeogebraCommonAwtGPaint:tp];
}

- (void)drawWeavingWithDouble:(jdouble)angle
                      withInt:(jint)dist
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d {
  OrgGeogebraCommonEuclidianHatchingHandler_drawWeavingWithDouble_withInt_withOrgGeogebraCommonAwtGGraphics2D_(self, angle, dist, g2d);
}

- (void)drawBricksWithDouble:(jdouble)angle
                     withInt:(jint)xInt
                     withInt:(jint)yInt
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d {
  OrgGeogebraCommonEuclidianHatchingHandler_drawBricksWithDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(self, angle, xInt, yInt, g2d);
}

+ (void)drawDottedWithDouble:(jdouble)dist
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d {
  OrgGeogebraCommonEuclidianHatchingHandler_drawDottedWithDouble_withOrgGeogebraCommonAwtGGraphics2D_(dist, g2d);
}

- (jboolean)drawChessboardWithDouble:(jdouble)angle
                           withFloat:(jfloat)hatchDist
 withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d {
  return OrgGeogebraCommonEuclidianHatchingHandler_drawChessboardWithDouble_withFloat_withOrgGeogebraCommonAwtGGraphics2D_(self, angle, hatchDist, g2d);
}

- (void)drawHoneycombWithFloat:(jfloat)dist
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d {
  OrgGeogebraCommonEuclidianHatchingHandler_drawHoneycombWithFloat_withOrgGeogebraCommonAwtGGraphics2D_(self, dist, g2d);
}

+ (void)drawHatchingWithDouble:(jdouble)angle
                    withDouble:(jdouble)y
                       withInt:(jint)xInt
                       withInt:(jint)yInt
withOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2d {
  OrgGeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(angle, y, xInt, yInt, g2d);
}

- (id<OrgGeogebraCommonAwtGBufferedImage>)getSubImage {
  return subImage_;
}

- (void)dealloc {
  RELEASE_(bufferedImage_);
  RELEASE_(subImage_);
  RELEASE_(path_);
  RELEASE_(rect_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "HatchingHandler", NULL, 0x1, NULL, NULL },
    { "setHatchingWithOrgGeogebraCommonAwtGGraphics2D:withOrgGeogebraCommonAwtGBasicStroke:withOrgGeogebraCommonAwtGColor:withOrgGeogebraCommonAwtGColor:withFloat:withDouble:withDouble:withOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:withNSString:withOrgGeogebraCommonMainApp:", "setHatching", "Lorg.geogebra.common.awt.GPaint;", 0x14, NULL, NULL },
    { "createImageWithOrgGeogebraCommonAwtGBasicStroke:withOrgGeogebraCommonAwtGColor:withOrgGeogebraCommonAwtGColor:withFloat:withInt:withInt:", "createImage", "Lorg.geogebra.common.awt.GGraphics2D;", 0x2, NULL, NULL },
    { "setTextureWithOrgGeogebraCommonAwtGGraphics2D:withOrgGeogebraCommonKernelGeosGeoElement:withFloat:", "setTexture", "V", 0x4, NULL, NULL },
    { "drawWeavingWithDouble:withInt:withOrgGeogebraCommonAwtGGraphics2D:", "drawWeaving", "V", 0x2, NULL, NULL },
    { "drawBricksWithDouble:withInt:withInt:withOrgGeogebraCommonAwtGGraphics2D:", "drawBricks", "V", 0x2, NULL, NULL },
    { "drawDottedWithDouble:withOrgGeogebraCommonAwtGGraphics2D:", "drawDotted", "V", 0xa, NULL, NULL },
    { "drawChessboardWithDouble:withFloat:withOrgGeogebraCommonAwtGGraphics2D:", "drawChessboard", "Z", 0x2, NULL, NULL },
    { "drawHoneycombWithFloat:withOrgGeogebraCommonAwtGGraphics2D:", "drawHoneycomb", "V", 0x2, NULL, NULL },
    { "drawHatchingWithDouble:withDouble:withInt:withInt:withOrgGeogebraCommonAwtGGraphics2D:", "drawHatching", "V", 0xa, NULL, NULL },
    { "getSubImage", NULL, "Lorg.geogebra.common.awt.GBufferedImage;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bufferedImage_", NULL, 0x2, "Lorg.geogebra.common.awt.GBufferedImage;", NULL, NULL,  },
    { "subImage_", NULL, 0x2, "Lorg.geogebra.common.awt.GBufferedImage;", NULL, NULL,  },
    { "path_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "rect_", NULL, 0x2, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianHatchingHandler = { 2, "HatchingHandler", "org.geogebra.common.euclidian", NULL, 0x1, 11, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianHatchingHandler;
}

@end

void OrgGeogebraCommonEuclidianHatchingHandler_init(OrgGeogebraCommonEuclidianHatchingHandler *self) {
  NSObject_init(self);
  OrgGeogebraCommonEuclidianHatchingHandler_set_bufferedImage_(self, nil);
  OrgGeogebraCommonEuclidianHatchingHandler_set_subImage_(self, nil);
  OrgGeogebraCommonEuclidianHatchingHandler_set_path_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
  OrgGeogebraCommonEuclidianHatchingHandler_set_rect_(self, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangleWithInt:0 withInt:0 withInt:1 withInt:1]);
}

OrgGeogebraCommonEuclidianHatchingHandler *new_OrgGeogebraCommonEuclidianHatchingHandler_init() {
  OrgGeogebraCommonEuclidianHatchingHandler *self = [OrgGeogebraCommonEuclidianHatchingHandler alloc];
  OrgGeogebraCommonEuclidianHatchingHandler_init(self);
  return self;
}

id<OrgGeogebraCommonAwtGGraphics2D> OrgGeogebraCommonEuclidianHatchingHandler_createImageWithOrgGeogebraCommonAwtGBasicStroke_withOrgGeogebraCommonAwtGColor_withOrgGeogebraCommonAwtGColor_withFloat_withInt_withInt_(OrgGeogebraCommonEuclidianHatchingHandler *self, id<OrgGeogebraCommonAwtGBasicStroke> objStroke, OrgGeogebraCommonAwtGColor *color, OrgGeogebraCommonAwtGColor *bgColor, jfloat backgroundTransparency, jint xInt, jint yInt) {
  OrgGeogebraCommonEuclidianHatchingHandler_set_bufferedImage_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newBufferedImageWithInt:xInt * 3 withInt:yInt * 3 withInt:OrgGeogebraCommonAwtGBufferedImage_TYPE_INT_ARGB]);
  id<OrgGeogebraCommonAwtGGraphics2D> g2d = [((id<OrgGeogebraCommonAwtGBufferedImage>) nil_chk(self->bufferedImage_)) createGraphics];
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) setAntialiasing];
  [g2d setTransparent];
  if (bgColor == nil) {
    [g2d setColorWithOrgGeogebraCommonAwtGColor:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:255 withInt:255 withInt:255 withInt:J2ObjCFpToInt((backgroundTransparency * 255.0f))]];
  }
  else {
    [g2d setColorWithOrgGeogebraCommonAwtGColor:bgColor];
  }
  [g2d fillRectWithInt:0 withInt:0 withInt:xInt * 3 withInt:yInt * 3];
  [g2d setColorWithOrgGeogebraCommonAwtGColor:color];
  [g2d setStrokeWithOrgGeogebraCommonAwtGBasicStroke:objStroke];
  return g2d;
}

void OrgGeogebraCommonEuclidianHatchingHandler_drawWeavingWithDouble_withInt_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianHatchingHandler *self, jdouble angle, jint dist, id<OrgGeogebraCommonAwtGGraphics2D> g2d) {
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 4, angle, 10E-8)) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:2 * dist withInt:dist withInt:5 * dist withInt:4 * dist];
    [g2d drawLineWithInt:3 * dist withInt:0 withInt:5 * dist withInt:2 * dist];
    [g2d drawLineWithInt:3 * dist withInt:2 * dist withInt:0 withInt:5 * dist];
    [g2d drawLineWithInt:4 * dist withInt:3 * dist withInt:2 * dist withInt:5 * dist];
    [g2d drawLineWithInt:2 * dist withInt:dist withInt:dist withInt:2 * dist];
    [g2d drawLineWithInt:2 * dist withInt:3 * dist withInt:dist withInt:2 * dist];
    [g2d drawLineWithInt:4 * dist withInt:5 * dist withInt:6 * dist withInt:3 * dist];
    [g2d drawLineWithInt:3 * dist withInt:4 * dist withInt:5 * dist withInt:6 * dist];
    [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->path_)) reset];
    [self->path_ moveToWithFloat:dist withFloat:2 * dist];
    [self->path_ lineToWithFloat:2 * dist withFloat:dist];
    [self->path_ lineToWithFloat:3 * dist + 1 withFloat:2 * dist + 1];
    [self->path_ lineToWithFloat:2 * dist + 1 withFloat:3 * dist + 1];
    [g2d fillWithOrgGeogebraCommonAwtGShape:self->path_];
    [self->path_ reset];
    [self->path_ moveToWithFloat:3 * dist withFloat:4 * dist];
    [self->path_ lineToWithFloat:4 * dist withFloat:3 * dist];
    [self->path_ lineToWithFloat:5 * dist + 1 withFloat:4 * dist];
    [self->path_ lineToWithFloat:4 * dist withFloat:5 * dist + 1];
    [g2d fillWithOrgGeogebraCommonAwtGShape:self->path_];
  }
  else {
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->rect_)) setRectWithDouble:dist withDouble:dist withDouble:3 * dist withDouble:dist];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawWithOrgGeogebraCommonAwtGShape:self->rect_];
    [self->rect_ setRectWithDouble:2 * dist withDouble:2 * dist withDouble:dist withDouble:3 * dist];
    [g2d drawWithOrgGeogebraCommonAwtGShape:self->rect_];
    [self->rect_ setRectWithDouble:3 * dist withDouble:3 * dist withDouble:3 * dist withDouble:dist];
    [g2d drawWithOrgGeogebraCommonAwtGShape:self->rect_];
    [self->rect_ setRectWithDouble:4 * dist withDouble:0 withDouble:dist withDouble:3 * dist];
    [g2d drawWithOrgGeogebraCommonAwtGShape:self->rect_];
    [self->rect_ setRectWithDouble:-1 * dist withDouble:3 * dist withDouble:3 * dist withDouble:dist];
    [g2d drawWithOrgGeogebraCommonAwtGShape:self->rect_];
    [self->rect_ setRectWithDouble:4 * dist withDouble:4 * dist withDouble:dist withDouble:3 * dist];
    [g2d drawWithOrgGeogebraCommonAwtGShape:self->rect_];
    [g2d drawLineWithInt:4 * dist withInt:3 * dist withInt:5 * dist withInt:3 * dist];
    [g2d drawLineWithInt:4 * dist withInt:4 * dist withInt:5 * dist withInt:4 * dist];
    [g2d fillRectWithInt:dist withInt:2 * dist withInt:dist withInt:dist];
    [g2d fillRectWithInt:3 * dist withInt:2 * dist withInt:dist withInt:dist];
    [g2d fillRectWithInt:dist withInt:4 * dist withInt:dist withInt:dist];
    [g2d fillRectWithInt:3 * dist withInt:4 * dist withInt:dist withInt:dist];
  }
}

void OrgGeogebraCommonEuclidianHatchingHandler_drawBricksWithDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianHatchingHandler *self, jdouble angle, jint xInt, jint yInt, id<OrgGeogebraCommonAwtGGraphics2D> g2d) {
  if (angle == 0 || OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI, angle, 10E-8)) {
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->rect_)) setRectWithDouble:xInt / 2 withDouble:yInt withDouble:2 * xInt withDouble:yInt];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawWithOrgGeogebraCommonAwtGShape:self->rect_];
    [g2d drawLineWithInt:xInt + xInt / 2 withInt:yInt / 2 withInt:xInt + xInt / 2 withInt:yInt];
    [g2d drawLineWithInt:xInt + xInt / 2 withInt:yInt * 2 withInt:xInt + xInt / 2 withInt:yInt * 2 + yInt / 2];
  }
  else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 2, angle, 10E-8)) {
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->rect_)) setRectWithDouble:xInt withDouble:yInt / 2 withDouble:xInt withDouble:2 * yInt];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawWithOrgGeogebraCommonAwtGShape:self->rect_];
    [g2d drawLineWithInt:xInt / 2 withInt:yInt + yInt / 2 withInt:xInt withInt:yInt + yInt / 2];
    [g2d drawLineWithInt:xInt * 2 withInt:yInt + yInt / 2 withInt:2 * xInt + xInt / 2 withInt:yInt + yInt / 2];
  }
  else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 4, angle, 10E-8)) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:xInt * 3 withInt:0 withInt:0 withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 3 withInt:yInt withInt:xInt withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 2 withInt:0 withInt:0 withInt:yInt * 2];
    [g2d drawLineWithInt:xInt + xInt / 2 withInt:yInt + yInt / 2 withInt:2 * xInt withInt:yInt * 2];
  }
  else {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:0 withInt:0 withInt:xInt * 3 withInt:yInt * 3];
    [g2d drawLineWithInt:0 withInt:yInt withInt:xInt * 2 withInt:yInt * 3];
    [g2d drawLineWithInt:xInt withInt:0 withInt:xInt * 3 withInt:yInt * 2];
    [g2d drawLineWithInt:xInt + xInt / 2 withInt:yInt + yInt / 2 withInt:xInt withInt:yInt * 2];
  }
}

void OrgGeogebraCommonEuclidianHatchingHandler_drawDottedWithDouble_withOrgGeogebraCommonAwtGGraphics2D_(jdouble dist, id<OrgGeogebraCommonAwtGGraphics2D> g2d) {
  OrgGeogebraCommonEuclidianHatchingHandler_initialize();
  jint distInt = J2ObjCFpToInt(dist);
  jint size = 2;
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) fillWithOrgGeogebraCommonAwtGShape:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DFloatWithInt:distInt withInt:distInt withInt:size withInt:size]];
  [g2d fillWithOrgGeogebraCommonAwtGShape:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DFloatWithInt:2 * distInt withInt:distInt withInt:size withInt:size]];
  [g2d fillWithOrgGeogebraCommonAwtGShape:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DFloatWithInt:distInt withInt:2 * distInt withInt:size withInt:size]];
  [g2d fillWithOrgGeogebraCommonAwtGShape:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DFloatWithInt:2 * distInt withInt:2 * distInt withInt:size withInt:size]];
}

jboolean OrgGeogebraCommonEuclidianHatchingHandler_drawChessboardWithDouble_withFloat_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianHatchingHandler *self, jdouble angle, jfloat hatchDist, id<OrgGeogebraCommonAwtGGraphics2D> g2d) {
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 4, angle, 10E-8)) {
    jfloat dist = (jfloat) (hatchDist * JavaLangMath_sinWithDouble_(angle));
    [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->path_)) moveToWithFloat:dist / 2 withFloat:dist / 2 - 1];
    [self->path_ lineToWithFloat:2 * dist + dist / 2 withFloat:dist / 2 - 1];
    [self->path_ lineToWithFloat:dist + dist / 2 withFloat:dist + dist / 2];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) fillWithOrgGeogebraCommonAwtGShape:self->path_];
    [self->path_ reset];
    [self->path_ moveToWithFloat:dist + dist / 2 withFloat:dist + dist / 2];
    [self->path_ lineToWithFloat:2 * dist + dist / 2 withFloat:2 * dist + dist / 2];
    [self->path_ lineToWithFloat:dist / 2 withFloat:dist * 2 + dist / 2];
    [g2d fillWithOrgGeogebraCommonAwtGShape:self->path_];
  }
  else {
    jint distInt = J2ObjCFpToInt(hatchDist);
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) fillRectWithInt:distInt / 2 withInt:distInt / 2 withInt:distInt withInt:distInt];
    [g2d fillRectWithInt:distInt + distInt / 2 withInt:distInt + distInt / 2 withInt:distInt withInt:distInt];
  }
  return YES;
}

void OrgGeogebraCommonEuclidianHatchingHandler_drawHoneycombWithFloat_withOrgGeogebraCommonAwtGGraphics2D_(OrgGeogebraCommonEuclidianHatchingHandler *self, jfloat dist, id<OrgGeogebraCommonAwtGGraphics2D> g2d) {
  jfloat centerX = (jfloat) (dist * JavaLangMath_sqrtWithDouble_(3) / 2);
  jfloat width = centerX + centerX;
  [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->path_)) moveToWithFloat:centerX withFloat:dist];
  [self->path_ lineToWithFloat:centerX withFloat:2 * dist];
  [self->path_ lineToWithFloat:0 withFloat:2 * dist + dist / 2];
  [self->path_ lineToWithFloat:0 withFloat:3 * dist];
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawWithOrgGeogebraCommonAwtGShape:self->path_];
  [self->path_ reset];
  [self->path_ moveToWithFloat:centerX withFloat:2 * dist];
  [self->path_ lineToWithFloat:width withFloat:2 * dist + dist / 2];
  [self->path_ lineToWithFloat:width withFloat:3 * dist];
  [g2d drawWithOrgGeogebraCommonAwtGShape:self->path_];
  [self->path_ reset];
  [self->path_ moveToWithFloat:0 withFloat:0];
  [self->path_ lineToWithFloat:0 withFloat:dist / 2];
  [self->path_ lineToWithFloat:centerX withFloat:dist];
  [self->path_ lineToWithFloat:width withFloat:dist / 2];
  [self->path_ lineToWithFloat:width withFloat:0];
  [g2d drawWithOrgGeogebraCommonAwtGShape:self->path_];
}

void OrgGeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_(jdouble angle, jdouble y, jint xInt, jint yInt, id<OrgGeogebraCommonAwtGGraphics2D> g2d) {
  OrgGeogebraCommonEuclidianHatchingHandler_initialize();
  if (angle == 0) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:0 withInt:yInt withInt:xInt * 3 withInt:yInt];
    [g2d drawLineWithInt:0 withInt:yInt * 2 withInt:xInt * 3 withInt:yInt * 2];
  }
  else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 2, angle, 10E-8)) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:xInt withInt:0 withInt:xInt withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 2 withInt:0 withInt:xInt * 2 withInt:yInt * 3];
  }
  else if (y > 0) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:xInt * 3 withInt:0 withInt:0 withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 3 withInt:yInt withInt:xInt withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 2 withInt:0 withInt:0 withInt:yInt * 2];
  }
  else {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:0 withInt:0 withInt:xInt * 3 withInt:yInt * 3];
    [g2d drawLineWithInt:0 withInt:yInt withInt:xInt * 2 withInt:yInt * 3];
    [g2d drawLineWithInt:xInt withInt:0 withInt:xInt * 3 withInt:yInt * 2];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianHatchingHandler)
