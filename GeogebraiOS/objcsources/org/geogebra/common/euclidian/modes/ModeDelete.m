//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/modes/ModeDelete.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Iterator.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/Hits.h"
#include "org/geogebra/common/euclidian/event/AbstractEvent.h"
#include "org/geogebra/common/euclidian/event/PointerEventType.h"
#include "org/geogebra/common/euclidian/modes/ModeDelete.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoAttachCopyToView.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "org/geogebra/common/kernel/algos/AlgorithmSet.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPenStroke.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonEuclidianModesModeDelete () {
 @public
  OrgGeogebraCommonEuclidianEuclidianView *view_;
  OrgGeogebraCommonKernelKernel *kernel_;
  OrgGeogebraCommonEuclidianEuclidianController *ec_;
  jboolean objDeleteMode_, penDeleteMode_;
}

- (void)updatePenDeleteModeWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)h;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianModesModeDelete, view_, OrgGeogebraCommonEuclidianEuclidianView *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianModesModeDelete, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianModesModeDelete, ec_, OrgGeogebraCommonEuclidianEuclidianController *)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianModesModeDelete_updatePenDeleteModeWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianModesModeDelete *self, OrgGeogebraCommonEuclidianHits *h);

@implementation OrgGeogebraCommonEuclidianModesModeDelete

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  OrgGeogebraCommonEuclidianModesModeDelete_initWithOrgGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

- (void)handleMouseDraggedForDeleteWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e
                                                                            withInt:(jint)deleteSize
                                                                        withBoolean:(jboolean)forceOnlyStrokes {
  if (e == nil) {
    return;
  }
  jint eventX = [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getX];
  jint eventY = [e getY];
  [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rect_)) setBoundsWithInt:eventX - deleteSize / 2 withInt:eventY - deleteSize / 2 withInt:deleteSize withInt:deleteSize];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDeletionRectangleWithOrgGeogebraCommonAwtGRectangle:rect_];
  [view_ setIntersectionHitsWithOrgGeogebraCommonAwtGRectangle:rect_];
  OrgGeogebraCommonEuclidianHits *h = [view_ getHits];
  if (!self->objDeleteMode_ && !self->penDeleteMode_) {
    OrgGeogebraCommonEuclidianModesModeDelete_updatePenDeleteModeWithOrgGeogebraCommonEuclidianHits_(self, h);
  }
  jboolean onlyStrokes = forceOnlyStrokes || self->penDeleteMode_;
  [view_ setTransparentCursor];
  id<JavaUtilIterator> it = [((OrgGeogebraCommonEuclidianHits *) nil_chk(h)) iterator];
  OrgGeogebraCommonKernelAlgosAlgorithmSet *as = nil;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPenStroke class]]) {
      OrgGeogebraCommonKernelGeosGeoPenStroke *gps = (OrgGeogebraCommonKernelGeosGeoPenStroke *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPenStroke class]);
      IOSObjectArray *realPoints = (IOSObjectArray *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoPenStroke *) nil_chk(gps)) getPoints], [IOSObjectArray class]);
      IOSObjectArray *dataPoints;
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm] != nil && ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAttachCopyToView class]])) {
        OrgGeogebraCommonKernelAlgosAlgoElement *ae = [geo getParentAlgorithm];
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(ae)) getInput]))->size_; i++) {
          if ([IOSObjectArray_Get(nil_chk([ae getInput]), i) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPenStroke class]]) {
            gps = (OrgGeogebraCommonKernelGeosGeoPenStroke *) check_class_cast(IOSObjectArray_Get(nil_chk([ae getInput]), i), [OrgGeogebraCommonKernelGeosGeoPenStroke class]);
          }
        }
      }
      if ([((OrgGeogebraCommonKernelGeosGeoPenStroke *) nil_chk(gps)) getParentAlgorithm] != nil && [[gps getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPolyLine class]]) {
        dataPoints = [((OrgGeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoPolyLine *) check_class_cast([gps getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoPolyLine class])))) getPoints];
      }
      else {
        dataPoints = (IOSObjectArray *) check_class_cast([gps getPoints], [IOSObjectArray class]);
      }
      jboolean hasVisibleLine = NO;
      jboolean lastWasVisible = NO;
      if (((IOSObjectArray *) nil_chk(realPoints))->size_ == ((IOSObjectArray *) nil_chk(dataPoints))->size_) {
        for (jint i = 0; i < dataPoints->size_; i++) {
          OrgGeogebraCommonKernelGeosGeoPoint *p = IOSObjectArray_Get(realPoints, i);
          if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) isDefined] && JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(eventX - [view_ toScreenCoordXdWithDouble:p->inhomX_]), JavaLangMath_absWithDouble_(eventY - [view_ toScreenCoordYdWithDouble:p->inhomY_])) <= deleteSize / 2) {
            [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) setUndefined];
            if (as == nil) {
              as = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) getAlgoUpdateSet];
            }
            else {
              [as addAllWithOrgGeogebraCommonKernelAlgosAlgorithmSet:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) getAlgoUpdateSet]];
            }
          }
          if (lastWasVisible && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) isDefined]) {
            hasVisibleLine = YES;
          }
          lastWasVisible = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) isDefined];
        }
      }
      else {
        OrgGeogebraCommonMainApp_debugWithNSString_(@"Can't delete points on stroke. Different number of in and output points.");
      }
      if (hasVisibleLine) {
        [it remove];
      }
    }
    else {
      if (!self->penDeleteMode_) {
        self->objDeleteMode_ = YES;
      }
      if (onlyStrokes) {
        [it remove];
      }
    }
  }
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) deleteAllWithOrgGeogebraCommonEuclidianHits:h];
  if (as != nil) [as updateAll];
}

- (void)updatePenDeleteModeWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)h {
  OrgGeogebraCommonEuclidianModesModeDelete_updatePenDeleteModeWithOrgGeogebraCommonEuclidianHits_(self, h);
}

- (void)mousePressedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  self->objDeleteMode_ = NO;
  self->penDeleteMode_ = NO;
}

- (jboolean)processWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                          withBoolean:(jboolean)control {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] || self->penDeleteMode_) {
    return NO;
  }
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) addSelectedGeoWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  if ([ec_ selGeos] == 1) {
    IOSObjectArray *geos = [ec_ getSelectedGeos];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(geos), 0))) removeOrSetUndefinedIfHasFixedDescendent];
    return YES;
  }
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:", "ModeDelete", NULL, 0x1, NULL, NULL },
    { "handleMouseDraggedForDeleteWithOrgGeogebraCommonEuclidianEventAbstractEvent:withInt:withBoolean:", "handleMouseDraggedForDelete", "V", 0x1, NULL, NULL },
    { "updatePenDeleteModeWithOrgGeogebraCommonEuclidianHits:", "updatePenDeleteMode", "V", 0x2, NULL, NULL },
    { "mousePressedWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "mousePressed", "V", 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonEuclidianHits:withBoolean:", "process", "Z", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "view_", NULL, 0x2, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "ec_", NULL, 0x2, "Lorg.geogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "objDeleteMode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "penDeleteMode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "rect_", NULL, 0x0, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianModesModeDelete = { 2, "ModeDelete", "org.geogebra.common.euclidian.modes", NULL, 0x1, 5, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianModesModeDelete;
}

@end

void OrgGeogebraCommonEuclidianModesModeDelete_initWithOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonEuclidianModesModeDelete *self, OrgGeogebraCommonEuclidianEuclidianView *view) {
  (void) NSObject_init(self);
  self->objDeleteMode_ = NO;
  self->penDeleteMode_ = NO;
  self->rect_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:100 withInt:100];
  self->ec_ = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getEuclidianController];
  self->kernel_ = [view getKernel];
  self->view_ = view;
}

OrgGeogebraCommonEuclidianModesModeDelete *new_OrgGeogebraCommonEuclidianModesModeDelete_initWithOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonEuclidianEuclidianView *view) {
  OrgGeogebraCommonEuclidianModesModeDelete *self = [OrgGeogebraCommonEuclidianModesModeDelete alloc];
  OrgGeogebraCommonEuclidianModesModeDelete_initWithOrgGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

void OrgGeogebraCommonEuclidianModesModeDelete_updatePenDeleteModeWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonEuclidianModesModeDelete *self, OrgGeogebraCommonEuclidianHits *h) {
  id<JavaUtilIterator> it2 = [((OrgGeogebraCommonEuclidianHits *) nil_chk(h)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo2 = [it2 next];
    if ([geo2 isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPenStroke class]]) {
      self->penDeleteMode_ = YES;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianModesModeDelete)
