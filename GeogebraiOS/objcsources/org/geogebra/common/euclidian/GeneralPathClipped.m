//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/euclidian/GeneralPathClipped.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GGeneralPath.h"
#include "org/geogebra/common/awt/GPathIterator.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "org/geogebra/common/euclidian/GeneralPathClipped.h"
#include "org/geogebra/common/euclidian/clipping/ClipLine.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/MyPoint.h"

#define OrgGeogebraCommonEuclidianGeneralPathClipped_MAX_COORD_VALUE 10000.0f
#define OrgGeogebraCommonEuclidianGeneralPathClipped_TOLERANCE 0.01

@interface OrgGeogebraCommonEuclidianGeneralPathClipped () {
 @public
  JavaUtilArrayList *pathPoints_;
  id<OrgGeogebraCommonAwtGGeneralPath> gp_;
  jdouble largestCoord_;
  jboolean needClosePath_;
  id<OrgGeogebraCommonAwtGRectangle> bounds_;
}

- (void)addSimpleSegments;

- (void)addClippedSegments;

- (void)addClippedLineWithOrgGeogebraCommonKernelMyPoint:(OrgGeogebraCommonKernelMyPoint *)prevP
                      withOrgGeogebraCommonKernelMyPoint:(OrgGeogebraCommonKernelMyPoint *)curP
                      withOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)viewRect;

- (OrgGeogebraCommonAwtGPoint2D *)getPointCloseToScreenWithDouble:(jdouble)ptx
                                                       withDouble:(jdouble)pty;

- (void)addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)q
                                             withBoolean:(jboolean)lineTo;

- (void)addPointWithDouble:(jdouble)x
                withDouble:(jdouble)y
               withBoolean:(jboolean)lineTo;

- (void)updateBoundsWithOrgGeogebraCommonKernelMyPoint:(OrgGeogebraCommonKernelMyPoint *)p;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianGeneralPathClipped, pathPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianGeneralPathClipped, gp_, id<OrgGeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonEuclidianGeneralPathClipped, bounds_, id<OrgGeogebraCommonAwtGRectangle>)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianGeneralPathClipped, MAX_COORD_VALUE, jfloat)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonEuclidianGeneralPathClipped, TOLERANCE, jdouble)

__attribute__((unused)) static void OrgGeogebraCommonEuclidianGeneralPathClipped_reset(OrgGeogebraCommonEuclidianGeneralPathClipped *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianGeneralPathClipped_addSimpleSegments(OrgGeogebraCommonEuclidianGeneralPathClipped *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedSegments(OrgGeogebraCommonEuclidianGeneralPathClipped *self);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonAwtGRectangle_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, OrgGeogebraCommonKernelMyPoint *prevP, OrgGeogebraCommonKernelMyPoint *curP, id<OrgGeogebraCommonAwtGRectangle> viewRect);

__attribute__((unused)) static OrgGeogebraCommonAwtGPoint2D *OrgGeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, jdouble ptx, jdouble pty);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, OrgGeogebraCommonAwtGPoint2D *q, jboolean lineTo);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, jdouble x, jdouble y, jboolean lineTo);

__attribute__((unused)) static void OrgGeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithOrgGeogebraCommonKernelMyPoint_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, OrgGeogebraCommonKernelMyPoint *p);

@implementation OrgGeogebraCommonEuclidianGeneralPathClipped

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
  return self;
}

- (OrgGeogebraCommonKernelMyPoint *)firstPoint {
  if ([((JavaUtilArrayList *) nil_chk(pathPoints_)) size] == 0) {
    return nil;
  }
  return [pathPoints_ getWithInt:0];
}

- (void)reset {
  OrgGeogebraCommonEuclidianGeneralPathClipped_reset(self);
}

- (void)closePath {
  needClosePath_ = YES;
}

- (id<OrgGeogebraCommonAwtGGeneralPath>)getGeneralPath {
  if ([((JavaUtilArrayList *) nil_chk(pathPoints_)) size] == 0) return gp_;
  [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
  if (largestCoord_ < OrgGeogebraCommonEuclidianGeneralPathClipped_MAX_COORD_VALUE) {
    OrgGeogebraCommonEuclidianGeneralPathClipped_addSimpleSegments(self);
  }
  else {
    OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedSegments(self);
  }
  [pathPoints_ clear];
  return gp_;
}

- (void)addSimpleSegments {
  OrgGeogebraCommonEuclidianGeneralPathClipped_addSimpleSegments(self);
}

- (void)addClippedSegments {
  OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedSegments(self);
}

- (void)addClippedLineWithOrgGeogebraCommonKernelMyPoint:(OrgGeogebraCommonKernelMyPoint *)prevP
                      withOrgGeogebraCommonKernelMyPoint:(OrgGeogebraCommonKernelMyPoint *)curP
                      withOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)viewRect {
  OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonAwtGRectangle_(self, prevP, curP, viewRect);
}

- (OrgGeogebraCommonAwtGPoint2D *)getPointCloseToScreenWithDouble:(jdouble)ptx
                                                       withDouble:(jdouble)pty {
  return OrgGeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(self, ptx, pty);
}

- (void)addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)q
                                             withBoolean:(jboolean)lineTo {
  OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(self, q, lineTo);
}

- (void)moveToWithDouble:(jdouble)x
              withDouble:(jdouble)y {
  OrgGeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(self, x, y, NO);
}

- (void)lineToWithDouble:(jdouble)x
              withDouble:(jdouble)y {
  OrgGeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(self, x, y, YES);
}

- (void)addPointWithInt:(jint)pos
             withDouble:(jdouble)x
             withDouble:(jdouble)y {
  OrgGeogebraCommonKernelMyPoint *p = new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(x, y, YES);
  OrgGeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithOrgGeogebraCommonKernelMyPoint_(self, p);
  [((JavaUtilArrayList *) nil_chk(pathPoints_)) ensureCapacityWithInt:pos + 1];
  while ([pathPoints_ size] <= pos) {
    [pathPoints_ addWithId:nil];
  }
  (void) [pathPoints_ setWithInt:pos withId:p];
}

- (void)addPointWithDouble:(jdouble)x
                withDouble:(jdouble)y
               withBoolean:(jboolean)lineTo {
  OrgGeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
}

- (void)updateBoundsWithOrgGeogebraCommonKernelMyPoint:(OrgGeogebraCommonKernelMyPoint *)p {
  OrgGeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithOrgGeogebraCommonKernelMyPoint_(self, p);
}

- (OrgGeogebraCommonAwtGPoint2D *)getCurrentPoint {
  if ([((JavaUtilArrayList *) nil_chk(pathPoints_)) size] == 0) {
    return nil;
  }
  return [pathPoints_ getWithInt:[pathPoints_ size] - 1];
}

- (void)transformWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)af {
  jint size = [((JavaUtilArrayList *) nil_chk(pathPoints_)) size];
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelMyPoint *p = [pathPoints_ getWithInt:i];
    (void) [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(af)) transformWithOrgGeogebraCommonAwtGPoint2D:p withOrgGeogebraCommonAwtGPoint2D:p];
  }
}

- (jboolean)containsWithOrgGeogebraCommonAwtGPoint2D:(OrgGeogebraCommonAwtGPoint2D *)p {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithOrgGeogebraCommonAwtGPoint2D:p];
}

- (jboolean)containsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)rect {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithOrgGeogebraCommonAwtGRectangle2D:rect];
}

- (jboolean)containsWithDouble:(jdouble)arg0
                    withDouble:(jdouble)arg1 {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithDouble:arg0 withDouble:arg1];
}

- (jboolean)containsWithDouble:(jdouble)arg0
                    withDouble:(jdouble)arg1
                    withDouble:(jdouble)arg2
                    withDouble:(jdouble)arg3 {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithDouble:arg0 withDouble:arg1 withDouble:arg2 withDouble:arg3];
}

- (jboolean)containsWithInt:(jint)x
                    withInt:(jint)y {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithInt:x withInt:y];
}

- (jboolean)containsWithOrgGeogebraCommonAwtGRectangle:(id<OrgGeogebraCommonAwtGRectangle>)rectangle {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithOrgGeogebraCommonAwtGRectangle2D:rectangle];
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  return bounds_ == nil ? [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle] : bounds_;
}

- (id<OrgGeogebraCommonAwtGRectangle2D>)getBounds2D {
  return bounds_ == nil ? [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle] : bounds_;
}

- (id<OrgGeogebraCommonAwtGPathIterator>)getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:(id<OrgGeogebraCommonAwtGAffineTransform>)arg0 {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:arg0];
}

- (jboolean)intersectsWithOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)arg0 {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) intersectsWithOrgGeogebraCommonAwtGRectangle2D:arg0];
}

- (jboolean)intersectsWithDouble:(jdouble)arg0
                      withDouble:(jdouble)arg1
                      withDouble:(jdouble)arg2
                      withDouble:(jdouble)arg3 {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) intersectsWithDouble:arg0 withDouble:arg1 withDouble:arg2 withDouble:arg3];
}

- (jboolean)intersectsWithInt:(jint)i
                      withInt:(jint)j
                      withInt:(jint)k
                      withInt:(jint)l {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) intersectsWithInt:i withInt:j withInt:k withInt:l];
}

- (jboolean)intersectsWithInt:(jint)i
                      withInt:(jint)j
                      withInt:(jint)w {
  return [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) intersectsWithInt:i - w withInt:j - w withInt:2 * w withInt:2 * w];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "GeneralPathClipped", NULL, 0x1, NULL, NULL },
    { "firstPoint", NULL, "Lorg.geogebra.common.kernel.MyPoint;", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x11, NULL, NULL },
    { "closePath", NULL, "V", 0x11, NULL, NULL },
    { "getGeneralPath", NULL, "Lorg.geogebra.common.awt.GGeneralPath;", 0x1, NULL, NULL },
    { "addSimpleSegments", NULL, "V", 0x2, NULL, NULL },
    { "addClippedSegments", NULL, "V", 0x2, NULL, NULL },
    { "addClippedLineWithOrgGeogebraCommonKernelMyPoint:withOrgGeogebraCommonKernelMyPoint:withOrgGeogebraCommonAwtGRectangle:", "addClippedLine", "V", 0x2, NULL, NULL },
    { "getPointCloseToScreenWithDouble:withDouble:", "getPointCloseToScreen", "Lorg.geogebra.common.awt.GPoint2D;", 0x2, NULL, NULL },
    { "addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D:withBoolean:", "addToGeneralPath", "V", 0x2, NULL, NULL },
    { "moveToWithDouble:withDouble:", "moveTo", "V", 0x11, NULL, NULL },
    { "lineToWithDouble:withDouble:", "lineTo", "V", 0x11, NULL, NULL },
    { "addPointWithInt:withDouble:withDouble:", "addPoint", "V", 0x11, NULL, NULL },
    { "addPointWithDouble:withDouble:withBoolean:", "addPoint", "V", 0x2, NULL, NULL },
    { "updateBoundsWithOrgGeogebraCommonKernelMyPoint:", "updateBounds", "V", 0x2, NULL, NULL },
    { "getCurrentPoint", NULL, "Lorg.geogebra.common.awt.GPoint2D;", 0x1, NULL, NULL },
    { "transformWithOrgGeogebraCommonAwtGAffineTransform:", "transform", "V", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGPoint2D:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGRectangle2D:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithInt:withInt:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonAwtGRectangle:", "contains", "Z", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "getBounds2D", NULL, "Lorg.geogebra.common.awt.GRectangle2D;", 0x1, NULL, NULL },
    { "getPathIteratorWithOrgGeogebraCommonAwtGAffineTransform:", "getPathIterator", "Lorg.geogebra.common.awt.GPathIterator;", 0x1, NULL, NULL },
    { "intersectsWithOrgGeogebraCommonAwtGRectangle2D:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_COORD_VALUE_", NULL, 0x1a, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonEuclidianGeneralPathClipped_MAX_COORD_VALUE },
    { "TOLERANCE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonEuclidianGeneralPathClipped_TOLERANCE },
    { "pathPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/MyPoint;>;",  },
    { "gp_", NULL, 0x2, "Lorg.geogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianViewInterfaceSlim;", NULL, NULL,  },
    { "largestCoord_", NULL, 0x2, "D", NULL, NULL,  },
    { "needClosePath_", NULL, 0x2, "Z", NULL, NULL,  },
    { "bounds_", NULL, 0x2, "Lorg.geogebra.common.awt.GRectangle;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonEuclidianGeneralPathClipped = { 2, "GeneralPathClipped", "org.geogebra.common.euclidian", NULL, 0x1, 30, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonEuclidianGeneralPathClipped;
}

@end

void OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> view) {
  (void) NSObject_init(self);
  self->view_ = view;
  self->pathPoints_ = new_JavaUtilArrayList_init();
  self->gp_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
  OrgGeogebraCommonEuclidianGeneralPathClipped_reset(self);
}

OrgGeogebraCommonEuclidianGeneralPathClipped *new_OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> view) {
  OrgGeogebraCommonEuclidianGeneralPathClipped *self = [OrgGeogebraCommonEuclidianGeneralPathClipped alloc];
  OrgGeogebraCommonEuclidianGeneralPathClipped_initWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
  return self;
}

void OrgGeogebraCommonEuclidianGeneralPathClipped_reset(OrgGeogebraCommonEuclidianGeneralPathClipped *self) {
  [((JavaUtilArrayList *) nil_chk(self->pathPoints_)) clear];
  [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) reset];
  self->bounds_ = nil;
  self->largestCoord_ = 0;
  self->needClosePath_ = NO;
}

void OrgGeogebraCommonEuclidianGeneralPathClipped_addSimpleSegments(OrgGeogebraCommonEuclidianGeneralPathClipped *self) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->pathPoints_)) size];
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelMyPoint *curP = [self->pathPoints_ getWithInt:i];
    OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(self, curP, [((OrgGeogebraCommonKernelMyPoint *) nil_chk(curP)) getLineTo]);
  }
  if (self->needClosePath_) [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) closePath];
}

void OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedSegments(OrgGeogebraCommonEuclidianGeneralPathClipped *self) {
  id<OrgGeogebraCommonAwtGRectangle> viewRect = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:[((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]];
  OrgGeogebraCommonKernelMyPoint *curP = nil, *prevP;
  jint size = [((JavaUtilArrayList *) nil_chk(self->pathPoints_)) size];
  for (jint i = 0; i < size; i++) {
    prevP = curP;
    curP = [self->pathPoints_ getWithInt:i];
    if (![((OrgGeogebraCommonKernelMyPoint *) nil_chk(curP)) getLineTo] || prevP == nil) {
      OrgGeogebraCommonAwtGPoint2D *p = OrgGeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(self, [curP getX], [curP getY]);
      OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(self, p, NO);
    }
    else {
      OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonAwtGRectangle_(self, prevP, curP, viewRect);
    }
  }
  if (self->needClosePath_) {
    OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonAwtGRectangle_(self, curP, [self->pathPoints_ getWithInt:0], viewRect);
    [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) closePath];
  }
}

void OrgGeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonKernelMyPoint_withOrgGeogebraCommonAwtGRectangle_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, OrgGeogebraCommonKernelMyPoint *prevP, OrgGeogebraCommonKernelMyPoint *curP, id<OrgGeogebraCommonAwtGRectangle> viewRect) {
  if ([((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(viewRect)) containsWithOrgGeogebraCommonAwtGPoint2D:prevP] && [viewRect containsWithOrgGeogebraCommonAwtGPoint2D:curP]) {
    OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(self, curP, YES);
    return;
  }
  IOSObjectArray *clippedPoints = OrgGeogebraCommonEuclidianClippingClipLine_getClippedWithDouble_withDouble_withDouble_withDouble_withInt_withInt_withInt_withInt_([((OrgGeogebraCommonKernelMyPoint *) nil_chk(prevP)) getX], [prevP getY], [((OrgGeogebraCommonKernelMyPoint *) nil_chk(curP)) getX], [curP getY], -10, [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(self->view_)) getWidth] + 10, -10, [self->view_ getHeight] + 10);
  if (clippedPoints != nil) {
    jint first = 0;
    jint second = 1;
    if ([((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, first))) distanceWithDouble:[prevP getX] withDouble:[prevP getY]] > [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, second))) distanceWithDouble:[prevP getX] withDouble:[prevP getY]]) {
      first = 1;
      second = 0;
    }
    OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(self, IOSObjectArray_Get(clippedPoints, first), YES);
    OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(self, IOSObjectArray_Get(clippedPoints, second), YES);
    OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(self, OrgGeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(self, [curP getX], [curP getY]), YES);
  }
  else {
    OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(self, OrgGeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(self, [curP getX], [curP getY]), YES);
  }
}

OrgGeogebraCommonAwtGPoint2D *OrgGeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, jdouble ptx, jdouble pty) {
  jdouble x = ptx;
  jdouble y = pty;
  jdouble border = 10;
  jdouble right = [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(self->view_)) getWidth] + border;
  jdouble bottom = [self->view_ getHeight] + border;
  if (x > right) {
    x = right;
  }
  else if (x < -border) {
    x = -border;
  }
  if (y > bottom) {
    y = bottom;
  }
  else if (y < -border) {
    y = -border;
  }
  return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2DWithDouble:x withDouble:y];
}

void OrgGeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithOrgGeogebraCommonAwtGPoint2D_withBoolean_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, OrgGeogebraCommonAwtGPoint2D *q, jboolean lineTo) {
  OrgGeogebraCommonAwtGPoint2D *p = [((id<OrgGeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) getCurrentPoint];
  if (p != nil && [p distanceWithOrgGeogebraCommonAwtGPoint2D:q] < OrgGeogebraCommonEuclidianGeneralPathClipped_TOLERANCE) {
    return;
  }
  if (lineTo && p != nil) {
    @try {
      [self->gp_ lineToWithFloat:(jfloat) [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(q)) getX] withFloat:(jfloat) [q getY]];
    }
    @catch (JavaLangException *e) {
      [self->gp_ moveToWithFloat:(jfloat) [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(q)) getX] withFloat:(jfloat) [q getY]];
    }
  }
  else {
    [self->gp_ moveToWithFloat:(jfloat) [((OrgGeogebraCommonAwtGPoint2D *) nil_chk(q)) getX] withFloat:(jfloat) [q getY]];
  }
}

void OrgGeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, jdouble x, jdouble y, jboolean lineTo) {
  OrgGeogebraCommonKernelMyPoint *p = new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(x, y, lineTo);
  OrgGeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithOrgGeogebraCommonKernelMyPoint_(self, p);
  [((JavaUtilArrayList *) nil_chk(self->pathPoints_)) addWithId:p];
}

void OrgGeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithOrgGeogebraCommonKernelMyPoint_(OrgGeogebraCommonEuclidianGeneralPathClipped *self, OrgGeogebraCommonKernelMyPoint *p) {
  if (self->bounds_ == nil) {
    self->bounds_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle];
    [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->bounds_)) setBoundsWithInt:J2ObjCFpToInt([((OrgGeogebraCommonKernelMyPoint *) nil_chk(p)) getX]) withInt:J2ObjCFpToInt([p getY]) withInt:0 withInt:0];
  }
  if (JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelMyPoint *) nil_chk(p)) getX]) > self->largestCoord_) self->largestCoord_ = JavaLangMath_absWithDouble_([p getX]);
  if (JavaLangMath_absWithDouble_([p getY]) > self->largestCoord_) self->largestCoord_ = JavaLangMath_absWithDouble_([p getY]);
  [((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(self->bounds_)) addWithDouble:[p getX] withDouble:[p getY]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonEuclidianGeneralPathClipped)
