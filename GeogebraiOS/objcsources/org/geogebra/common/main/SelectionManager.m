//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/main/SelectionManager.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/main/GeoElementSelectionListener.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/main/UpdateSelection.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonMainSelectionManager () {
 @public
  OrgGeogebraCommonKernelKernel *kernel_;
  id<OrgGeogebraCommonMainUpdateSelection> listener_;
  JavaUtilArrayList *selectionListeners_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSelectionManager, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSelectionManager, listener_, id<OrgGeogebraCommonMainUpdateSelection>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSelectionManager, selectionListeners_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgGeogebraCommonMainSelectionManager_setSelectedGeosWithJavaUtilArrayList_withBoolean_(OrgGeogebraCommonMainSelectionManager *self, JavaUtilArrayList *geos, jboolean updateSelection);

__attribute__((unused)) static void OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean repaint, jboolean updateSelection);

__attribute__((unused)) static JavaUtilArrayList *OrgGeogebraCommonMainSelectionManager_getSelectedGeos(OrgGeogebraCommonMainSelectionManager *self);

__attribute__((unused)) static void OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean repaint, jboolean updateSelection);

__attribute__((unused)) static void OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void OrgGeogebraCommonMainSelectionManager_toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean repaint);

@implementation OrgGeogebraCommonMainSelectionManager

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
             withOrgGeogebraCommonMainUpdateSelection:(id<OrgGeogebraCommonMainUpdateSelection>)app {
  OrgGeogebraCommonMainSelectionManager_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonMainUpdateSelection_(self, kernel, app);
  return self;
}

- (void)setSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  OrgGeogebraCommonMainSelectionManager_setSelectedGeosWithJavaUtilArrayList_withBoolean_(self, geos, YES);
}

- (void)setSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                 withBoolean:(jboolean)updateSelection {
  OrgGeogebraCommonMainSelectionManager_setSelectedGeosWithJavaUtilArrayList_withBoolean_(self, geos, updateSelection);
}

- (void)clearSelectedGeos {
  [self clearSelectedGeosWithBoolean:YES];
}

- (void)clearSelectedGeosWithBoolean:(jboolean)repaint {
  [self clearSelectedGeosWithBoolean:repaint withBoolean:repaint];
}

- (void)clearSelectedGeosWithBoolean:(jboolean)repaint
                         withBoolean:(jboolean)updateSelection {
  jint size = [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size];
  if (size > 0) {
    for (jint i = 0; i < size; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:NO];
    }
    [selectedGeos_ clear];
    if (repaint) [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    if (updateSelection) [self updateSelection];
  }
}

- (void)removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                       withBoolean:(jboolean)repaint
                                                       withBoolean:(jboolean)updateSelection {
  OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, repaint, updateSelection);
}

- (JavaUtilArrayList *)getSelectedGeos {
  return OrgGeogebraCommonMainSelectionManager_getSelectedGeos(self);
}

- (void)addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                    withBoolean:(jboolean)repaint
                                                    withBoolean:(jboolean)updateSelection {
  OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, repaint, updateSelection);
}

- (jint)getSelectedLayer {
  IOSObjectArray *geos = [((JavaUtilArrayList *) nil_chk(OrgGeogebraCommonMainSelectionManager_getSelectedGeos(self))) toArray];
  if (((IOSObjectArray *) nil_chk(geos))->size_ == 0) return -1;
  jint layer = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(geos, 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) getLayer];
  for (jint i = 1; i < geos->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(geos, i), [OrgGeogebraCommonKernelGeosGeoElement class]);
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer] != layer) return -2;
  }
  return layer;
}

- (void)selectAllWithInt:(jint)layer {
  [self clearSelectedGeosWithBoolean:NO];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrder])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ((layer == -1) || ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer] == layer)) {
      OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
    }
  }
  [kernel_ notifyRepaint];
  [self updateSelection];
}

- (void)invertSelection {
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrder])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((JavaUtilArrayList *) nil_chk(selectedGeos_)) containsWithId:geo]) {
      OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
    }
    else {
      OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
    }
  }
  [kernel_ notifyRepaint];
  [self updateSelection];
}

- (void)selectAllPredecessors {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    JavaUtilTreeSet *tree = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllPredecessors];
    id<JavaUtilIterator> it2 = [((JavaUtilTreeSet *) nil_chk(tree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      geo = [it2 next];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
      }
    }
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self updateSelection];
}

- (jboolean)hasPredecessors {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    JavaUtilTreeSet *tree = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllPredecessors];
    id<JavaUtilIterator> it2 = [((JavaUtilTreeSet *) nil_chk(tree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      geo = [it2 next];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        return YES;
      }
    }
  }
  return NO;
}

- (void)selectAllDescendants {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    JavaUtilTreeSet *tree = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllChildren];
    id<JavaUtilIterator> it2 = [((JavaUtilTreeSet *) nil_chk(tree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      geo = [it2 next];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
      }
    }
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self updateSelection];
}

- (jboolean)hasDescendants {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    JavaUtilTreeSet *tree = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllChildren];
    id<JavaUtilIterator> it2 = [((JavaUtilTreeSet *) nil_chk(tree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      geo = [it2 next];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        return YES;
      }
    }
  }
  return NO;
}

- (void)showHideSelection {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon] && ![geo isGeoPolyhedron] && ![geo isGeoPolyLine] && [geo getGeoClassType] != OrgGeogebraCommonPluginGeoClassEnum_get_QUADRIC_LIMITED() && [geo getGeoClassType] != OrgGeogebraCommonPluginGeoClassEnum_get_NET()) {
      [geo setEuclidianVisibleWithBoolean:![geo isEuclidianVisible]];
      [geo updateVisualStyle];
    }
  }
  for (jint i = 0; i < [selectedGeos_ size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon] || [geo isGeoPolyLine] || [geo getGeoClassType] == OrgGeogebraCommonPluginGeoClassEnum_get_QUADRIC_LIMITED()) {
      [geo setEuclidianVisibleWithBoolean:![geo isEuclidianVisible]];
      [geo updateVisualStyle];
    }
  }
  for (jint i = 0; i < [selectedGeos_ size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolyhedron] || [geo getGeoClassType] == OrgGeogebraCommonPluginGeoClassEnum_get_NET()) {
      [geo setEuclidianVisibleWithBoolean:![geo isEuclidianVisible]];
      [geo updateVisualStyle];
    }
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self updateSelection];
}

- (void)showHideSelectionLabels {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    [geo setLabelVisibleWithBoolean:![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelVisible]];
    [geo updateVisualStyle];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self updateSelection];
}

- (jboolean)containsSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilArrayList *) nil_chk(selectedGeos_)) containsWithId:geo];
}

- (jboolean)containsSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  return [((JavaUtilArrayList *) nil_chk(selectedGeos_)) containsAllWithJavaUtilCollection:geos];
}

- (void)removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (jint)selectedGeosSize {
  return [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)setFirstGeoSelectedForPropertiesView {
  OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getFirstGeo];
  if (geo == nil) return nil;
  [self clearSelectedGeosWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addWithId:geo];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:YES];
  [kernel_ notifyRepaint];
  [((id<OrgGeogebraCommonMainUpdateSelection>) nil_chk(listener_)) updateSelectionWithBoolean:NO];
  return geo;
}

- (void)addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                 withBoolean:(jboolean)repaint {
  [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:geos];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([geos getWithInt:i])) setSelectedWithBoolean:YES];
  }
  if (repaint) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
  [self updateSelection];
}

- (void)toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                       withBoolean:(jboolean)repaint {
  OrgGeogebraCommonMainSelectionManager_toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, repaint);
}

- (void)toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSelectionManager_toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES);
}

- (jboolean)selectNextGeoWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>)ev
                                                                        withBoolean:(jboolean)cycle {
  JavaUtilTreeSet *tree = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrder];
  tree = new_JavaUtilTreeSet_initWithJavaUtilSortedSet_(tree);
  JavaUtilTreeSet *copy_ = new_JavaUtilTreeSet_initWithJavaUtilSortedSet_(tree);
  id<JavaUtilIterator> it = [copy_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSelectionAllowed] || ![geo isEuclidianVisible] || ![geo isVisibleInViewWithInt:[((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) getViewID]]) {
      [tree removeWithId:geo];
    }
  }
  it = [tree iterator];
  if ([((JavaUtilArrayList *) nil_chk(selectedGeos_)) size] == 0) {
    if ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, [it next]);
    }
    return NO;
  }
  if ([selectedGeos_ size] != 1) {
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoElement *selGeo = [selectedGeos_ getWithInt:0];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (selGeo == geo) {
      OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, selGeo);
      if (![it hasNext]) {
        if (cycle) {
          it = [tree iterator];
        }
        else {
          return NO;
        }
      }
      OrgGeogebraCommonKernelGeosGeoElement *next = [((id<JavaUtilIterator>) nil_chk(it)) next];
      OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, next);
      if (!([next isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]])) {
        [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) requestFocus];
      }
      break;
    }
  }
  return YES;
}

- (void)selectLastGeoWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>)ev {
  if ([((JavaUtilArrayList *) nil_chk(selectedGeos_)) size] != 1) {
    return;
  }
  OrgGeogebraCommonKernelGeosGeoElement *selGeo = [selectedGeos_ getWithInt:0];
  OrgGeogebraCommonKernelGeosGeoElement *lastGeo = nil;
  JavaUtilTreeSet *tree = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrder];
  tree = new_JavaUtilTreeSet_initWithJavaUtilSortedSet_(tree);
  JavaUtilTreeSet *copy_ = new_JavaUtilTreeSet_initWithJavaUtilSortedSet_(tree);
  id<JavaUtilIterator> it = [copy_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSelectionAllowed] || ![geo isEuclidianVisible] || ![geo isVisibleInViewWithInt:[((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) getViewID]]) {
      [tree removeWithId:geo];
    }
  }
  it = [tree iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    lastGeo = [it next];
  }
  it = [tree iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (selGeo == geo) {
      OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, selGeo);
      OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, lastGeo);
      if (!([lastGeo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]])) {
        [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) requestFocus];
      }
      break;
    }
    lastGeo = geo;
  }
}

- (void)updateSelection {
  [self updateSelectionWithBoolean:YES];
}

- (void)updateSelectionWithBoolean:(jboolean)updatePropertiesView {
  [((id<OrgGeogebraCommonMainUpdateSelection>) nil_chk(listener_)) updateSelectionWithBoolean:updatePropertiesView];
}

- (void)addSelectionListenerWithOrgGeogebraCommonMainGeoElementSelectionListener:(id<OrgGeogebraCommonMainGeoElementSelectionListener>)sl {
  [((JavaUtilArrayList *) nil_chk(selectionListeners_)) addWithId:sl];
}

- (void)removeSelectionListenerWithOrgGeogebraCommonMainGeoElementSelectionListener:(id<OrgGeogebraCommonMainGeoElementSelectionListener>)sl {
  [((JavaUtilArrayList *) nil_chk(selectionListeners_)) removeWithId:sl];
}

- (JavaUtilArrayList *)getSelectionListeners {
  return selectionListeners_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonMainUpdateSelection:", "SelectionManager", NULL, 0x1, NULL, NULL },
    { "setSelectedGeosWithJavaUtilArrayList:", "setSelectedGeos", "V", 0x11, NULL, NULL },
    { "setSelectedGeosWithJavaUtilArrayList:withBoolean:", "setSelectedGeos", "V", 0x11, NULL, NULL },
    { "clearSelectedGeos", NULL, "V", 0x11, NULL, NULL },
    { "clearSelectedGeosWithBoolean:", "clearSelectedGeos", "V", 0x1, NULL, NULL },
    { "clearSelectedGeosWithBoolean:withBoolean:", "clearSelectedGeos", "V", 0x1, NULL, NULL },
    { "removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:withBoolean:", "removeSelectedGeo", "V", 0x11, NULL, NULL },
    { "getSelectedGeos", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:withBoolean:", "addSelectedGeo", "V", 0x11, NULL, NULL },
    { "getSelectedLayer", NULL, "I", 0x1, NULL, NULL },
    { "selectAllWithInt:", "selectAll", "V", 0x11, NULL, NULL },
    { "invertSelection", NULL, "V", 0x11, NULL, NULL },
    { "selectAllPredecessors", NULL, "V", 0x11, NULL, NULL },
    { "hasPredecessors", NULL, "Z", 0x11, NULL, NULL },
    { "selectAllDescendants", NULL, "V", 0x11, NULL, NULL },
    { "hasDescendants", NULL, "Z", 0x11, NULL, NULL },
    { "showHideSelection", NULL, "V", 0x11, NULL, NULL },
    { "showHideSelectionLabels", NULL, "V", 0x11, NULL, NULL },
    { "containsSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "containsSelectedGeo", "Z", 0x11, NULL, NULL },
    { "containsSelectedGeosWithJavaUtilArrayList:", "containsSelectedGeos", "Z", 0x11, NULL, NULL },
    { "removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "removeSelectedGeo", "V", 0x11, NULL, NULL },
    { "selectedGeosSize", NULL, "I", 0x11, NULL, NULL },
    { "setFirstGeoSelectedForPropertiesView", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "addSelectedGeo", "V", 0x11, NULL, NULL },
    { "addSelectedGeosWithJavaUtilArrayList:withBoolean:", "addSelectedGeos", "V", 0x11, NULL, NULL },
    { "toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "toggleSelectedGeo", "V", 0x11, NULL, NULL },
    { "toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "toggleSelectedGeo", "V", 0x11, NULL, NULL },
    { "selectNextGeoWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:withBoolean:", "selectNextGeo", "Z", 0x11, NULL, NULL },
    { "selectLastGeoWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:", "selectLastGeo", "V", 0x11, NULL, NULL },
    { "updateSelection", NULL, "V", 0x1, NULL, NULL },
    { "updateSelectionWithBoolean:", "updateSelection", "V", 0x1, NULL, NULL },
    { "addSelectionListenerWithOrgGeogebraCommonMainGeoElementSelectionListener:", "addSelectionListener", "V", 0x1, NULL, NULL },
    { "removeSelectionListenerWithOrgGeogebraCommonMainGeoElementSelectionListener:", "removeSelectionListener", "V", 0x1, NULL, NULL },
    { "getSelectionListeners", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "selectedGeos_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "kernel_", NULL, 0x12, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "listener_", NULL, 0x12, "Lorg.geogebra.common.main.UpdateSelection;", NULL, NULL,  },
    { "selectionListeners_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/main/GeoElementSelectionListener;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonMainSelectionManager = { 2, "SelectionManager", "org.geogebra.common.main", NULL, 0x1, 34, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonMainSelectionManager;
}

@end

void OrgGeogebraCommonMainSelectionManager_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonMainUpdateSelection_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonMainUpdateSelection> app) {
  (void) NSObject_init(self);
  self->selectedGeos_ = new_JavaUtilArrayList_init();
  self->kernel_ = kernel;
  self->listener_ = app;
  self->selectionListeners_ = new_JavaUtilArrayList_init();
}

OrgGeogebraCommonMainSelectionManager *new_OrgGeogebraCommonMainSelectionManager_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonMainUpdateSelection_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonMainUpdateSelection> app) {
  OrgGeogebraCommonMainSelectionManager *self = [OrgGeogebraCommonMainSelectionManager alloc];
  OrgGeogebraCommonMainSelectionManager_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonMainUpdateSelection_(self, kernel, app);
  return self;
}

void OrgGeogebraCommonMainSelectionManager_setSelectedGeosWithJavaUtilArrayList_withBoolean_(OrgGeogebraCommonMainSelectionManager *self, JavaUtilArrayList *geos, jboolean updateSelection) {
  [self clearSelectedGeosWithBoolean:NO];
  if (geos != nil) {
    for (jint i = 0; i < [geos size]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
      OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
    }
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  if (updateSelection) [self updateSelection];
}

void OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean repaint, jboolean updateSelection) {
  if (geo == nil) {
    return;
  }
  if ([((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) removeWithId:geo]) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:NO];
    if (updateSelection) [self updateSelection];
    if (repaint) {
      [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
    }
  }
}

JavaUtilArrayList *OrgGeogebraCommonMainSelectionManager_getSelectedGeos(OrgGeogebraCommonMainSelectionManager *self) {
  return self->selectedGeos_;
}

void OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean repaint, jboolean updateSelection) {
  if ((geo == nil) || [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) containsWithId:geo]) {
    return;
  }
  [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) addWithId:geo];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:YES];
  if (repaint) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  }
  if (updateSelection) [self updateSelection];
  for (id<OrgGeogebraCommonMainGeoElementSelectionListener> __strong sl in nil_chk([self getSelectionListeners])) {
    [((id<OrgGeogebraCommonMainGeoElementSelectionListener>) nil_chk(sl)) geoElementSelectedWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES];
  }
}

void OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonMainSelectionManager_removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, YES, YES);
}

void OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonMainSelectionManager_addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, YES, YES);
}

void OrgGeogebraCommonMainSelectionManager_toggleSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(OrgGeogebraCommonMainSelectionManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean repaint) {
  if (geo == nil) {
    return;
  }
  jboolean contains = [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) containsWithId:geo];
  if (contains) {
    [self->selectedGeos_ removeWithId:geo];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:NO];
  }
  else {
    [self->selectedGeos_ addWithId:geo];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:YES];
  }
  if (repaint) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  }
  [self updateSelection];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainSelectionManager)
