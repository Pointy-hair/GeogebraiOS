//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/main/AlgoCellRangeManager.java
//


#include "J2ObjC_source.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/statistics/AlgoCellRange.h"
#include "org/geogebra/common/main/AlgoCellRangeManager.h"

@interface OrgGeogebraCommonMainAlgoCellRangeManager () {
 @public
  JavaUtilHashMap *algos_;
}

+ (NSString *)getKeyWithNSString:(NSString *)start
                    withNSString:(NSString *)end;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainAlgoCellRangeManager, algos_, JavaUtilHashMap *)

__attribute__((unused)) static NSString *OrgGeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_(NSString *start, NSString *end);

@implementation OrgGeogebraCommonMainAlgoCellRangeManager

- (void)unregisterCellRangeListenerAlgoWithOrgGeogebraCommonKernelStatisticsAlgoCellRange:(OrgGeogebraCommonKernelStatisticsAlgoCellRange *)algo {
  if (algos_ != nil) {
    (void) [algos_ removeWithId:OrgGeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_([((OrgGeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo)) getStart], [algo getEnd])];
  }
}

- (void)updateCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                       withOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)location
                                                          withBoolean:(jboolean)isRemoveAction {
  if (geo == nil || algos_ == nil) {
    return;
  }
  for (OrgGeogebraCommonKernelStatisticsAlgoCellRange * __strong algo in nil_chk([((JavaUtilHashMap *) nil_chk(algos_)) values])) {
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((OrgGeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo)) getCellRange])) containsWithOrgGeogebraCommonAwtGPoint:location]) {
      [algo updateListWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:isRemoveAction];
    }
  }
}

- (void)addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                      withOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)location {
  if (geo == nil || algos_ == nil) {
    return;
  }
  for (OrgGeogebraCommonKernelStatisticsAlgoCellRange * __strong algo in nil_chk([((JavaUtilHashMap *) nil_chk(algos_)) values])) {
    if ([((OrgGeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((OrgGeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo)) getCellRange])) containsWithOrgGeogebraCommonAwtGPoint:location]) {
      [algo addToListWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonAwtGPoint:location];
    }
  }
}

- (void)removeAll {
  if (algos_ != nil) {
    [algos_ clear];
  }
}

- (OrgGeogebraCommonKernelStatisticsAlgoCellRange *)getAlgoCellRangeWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                               withNSString:(NSString *)label
                                                                                               withNSString:(NSString *)start
                                                                                               withNSString:(NSString *)end {
  if (algos_ == nil) {
    algos_ = new_JavaUtilHashMap_init();
  }
  NSString *key = OrgGeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_(start, end);
  OrgGeogebraCommonKernelStatisticsAlgoCellRange *algo = [((JavaUtilHashMap *) nil_chk(algos_)) getWithId:key];
  if (algo == nil) {
    algo = new_OrgGeogebraCommonKernelStatisticsAlgoCellRange_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(cons, label, start, end);
    (void) [algos_ putWithId:key withId:algo];
  }
  else {
    if (label != nil && ((jint) [label length]) > 0) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk([algo getList])) setLabelWithNSString:label];
    }
  }
  return algo;
}

+ (NSString *)getKeyWithNSString:(NSString *)start
                    withNSString:(NSString *)end {
  return OrgGeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_(start, end);
}

- (instancetype)init {
  OrgGeogebraCommonMainAlgoCellRangeManager_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "unregisterCellRangeListenerAlgoWithOrgGeogebraCommonKernelStatisticsAlgoCellRange:", "unregisterCellRangeListenerAlgo", "V", 0x1, NULL, NULL },
    { "updateCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonAwtGPoint:withBoolean:", "updateCellRangeAlgos", "V", 0x1, NULL, NULL },
    { "addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonAwtGPoint:", "addToCellRangeAlgos", "V", 0x1, NULL, NULL },
    { "removeAll", NULL, "V", 0x1, NULL, NULL },
    { "getAlgoCellRangeWithOrgGeogebraCommonKernelConstruction:withNSString:withNSString:withNSString:", "getAlgoCellRange", "Lorg.geogebra.common.kernel.statistics.AlgoCellRange;", 0x1, NULL, NULL },
    { "getKeyWithNSString:withNSString:", "getKey", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algos_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lorg/geogebra/common/kernel/statistics/AlgoCellRange;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonMainAlgoCellRangeManager = { 2, "AlgoCellRangeManager", "org.geogebra.common.main", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonMainAlgoCellRangeManager;
}

@end

NSString *OrgGeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_(NSString *start, NSString *end) {
  OrgGeogebraCommonMainAlgoCellRangeManager_initialize();
  return JreStrcat("$C$", start, ':', end);
}

void OrgGeogebraCommonMainAlgoCellRangeManager_init(OrgGeogebraCommonMainAlgoCellRangeManager *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonMainAlgoCellRangeManager *new_OrgGeogebraCommonMainAlgoCellRangeManager_init() {
  OrgGeogebraCommonMainAlgoCellRangeManager *self = [OrgGeogebraCommonMainAlgoCellRangeManager alloc];
  OrgGeogebraCommonMainAlgoCellRangeManager_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainAlgoCellRangeManager)
