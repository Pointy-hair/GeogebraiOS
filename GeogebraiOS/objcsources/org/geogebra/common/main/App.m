//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/main/App.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/MissingResourceException.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"
#include "org/geogebra/common/GeoGebraConstants.h"
#include "org/geogebra/common/awt/GDimension.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GImage.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/cas/singularws/SingularWebService.h"
#include "org/geogebra/common/euclidian/DrawEquation.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianStyleBar.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian/event/AbstractEvent.h"
#include "org/geogebra/common/euclidian/event/PointerEventType.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/factories/CASFactory.h"
#include "org/geogebra/common/factories/Factory.h"
#include "org/geogebra/common/factories/SwingFactory.h"
#include "org/geogebra/common/gui/menubar/MenuFactory.h"
#include "org/geogebra/common/gui/menubar/MenuInterface.h"
#include "org/geogebra/common/gui/menubar/OptionsMenu.h"
#include "org/geogebra/common/gui/view/algebra/AlgebraView.h"
#include "org/geogebra/common/gui/view/properties/PropertiesView.h"
#include "org/geogebra/common/io/MyXMLio.h"
#include "org/geogebra/common/javax/swing/GImageIcon.h"
#include "org/geogebra/common/kernel/AnimationManager.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/ModeSetter.h"
#include "org/geogebra/common/kernel/Relation.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/UndoManager.h"
#include "org/geogebra/common/kernel/View.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/commands/CommandDispatcher.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/commands/CommandsConstants.h"
#include "org/geogebra/common/kernel/commands/MyException.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementGraphicsAdapter.h"
#include "org/geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "org/geogebra/common/main/AlgoCubicSwitchInterface.h"
#include "org/geogebra/common/main/AlgoCubicSwitchParams.h"
#include "org/geogebra/common/main/AlgoKimberlingWeightsInterface.h"
#include "org/geogebra/common/main/AlgoKimberlingWeightsParams.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/AppCompanion.h"
#include "org/geogebra/common/main/DialogManager.h"
#include "org/geogebra/common/main/Feature.h"
#include "org/geogebra/common/main/FontManager.h"
#include "org/geogebra/common/main/GeoElementSelectionListener.h"
#include "org/geogebra/common/main/GlobalKeyDispatcher.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/main/OpenFileListener.h"
#include "org/geogebra/common/main/OptionType.h"
#include "org/geogebra/common/main/SavedStateListener.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/main/SpreadsheetTableModel.h"
#include "org/geogebra/common/main/SpreadsheetTraceManager.h"
#include "org/geogebra/common/main/settings/ConstructionProtocolSettings.h"
#include "org/geogebra/common/main/settings/KeyboardSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/move/ggtapi/operations/LogInOperation.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/Event.h"
#include "org/geogebra/common/plugin/EventDispatcher.h"
#include "org/geogebra/common/plugin/GeoScriptRunner.h"
#include "org/geogebra/common/plugin/GgbAPI.h"
#include "org/geogebra/common/plugin/ScriptManager.h"
#include "org/geogebra/common/plugin/ScriptType.h"
#include "org/geogebra/common/plugin/SensorLogger.h"
#include "org/geogebra/common/plugin/script/GgbScript.h"
#include "org/geogebra/common/plugin/script/Script.h"
#include "org/geogebra/common/sound/SoundManager.h"
#include "org/geogebra/common/util/CommandInputField.h"
#include "org/geogebra/common/util/ImageManager.h"
#include "org/geogebra/common/util/LowerCaseDictionary.h"
#include "org/geogebra/common/util/NormalizerMinimal.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/debug/Log.h"

@class OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum;

@interface OrgGeogebraCommonMainApp () {
 @public
  jboolean showResetIcon__;
  OrgGeogebraCommonKernelParserCashandlersParserFunctions *pf_;
  OrgGeogebraCommonMainSpreadsheetTraceManager *traceManager_;
  jint capturingThreshold_;
  jint capturingThresholdTouch_;
  jint appFontSize_;
  jint maxLayerUsed_;
  jint booleanSize_;
  jboolean labelDragsEnabled_;
  JavaUtilHashMap *translateCommandTable_;
  OrgGeogebraCommonUtilLowerCaseDictionary *commandDict_;
  OrgGeogebraCommonUtilLowerCaseDictionary *commandDictCAS_;
  IOSObjectArray *subCommandDict_;
  NSString *scriptingLanguage_;
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *storeUndoInfoForSetCoordSystem_;
  jboolean blockUpdateScripts_;
  jboolean useBrowserForJavaScript__;
  OrgGeogebraCommonPluginEventDispatcher *eventDispatcher_;
  IOSIntArray *version__;
  id<JavaUtilList> savedListeners_;
  OrgGeogebraCommonKernelMacro *macro_;
  jint labelingStyle_;
  jboolean labelingStyleSelected_;
  jboolean scriptingDisabled_;
  jboolean reverseMouseWheel__;
  OrgGeogebraCommonGuiViewPropertiesPropertiesView *propertiesView_;
  JavaUtilRandom *random_;
  OrgGeogebraCommonPluginGeoScriptRunner *geoScriptRunner_;
  OrgGeogebraCommonKernelGeosGeoElement *geoForCopyStyle_;
  OrgGeogebraCommonGuiMenubarOptionsMenu *optionsMenu_;
  jboolean isErrorDialogsActive__;
  JavaUtilArrayList *openFileListener_;
  jboolean allowPopUps_;
  jint tubeID_;
}

- (void)putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum:(OrgGeogebraCommonKernelCommandsCommandsEnum *)comm
                                                                     withNSString:(NSString *)local;

- (void)getScriptingXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                     withBoolean:(jboolean)asPreference;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, pf_, OrgGeogebraCommonKernelParserCashandlersParserFunctions *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, traceManager_, OrgGeogebraCommonMainSpreadsheetTraceManager *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, translateCommandTable_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, commandDict_, OrgGeogebraCommonUtilLowerCaseDictionary *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, commandDictCAS_, OrgGeogebraCommonUtilLowerCaseDictionary *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, subCommandDict_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, scriptingLanguage_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, storeUndoInfoForSetCoordSystem_, OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, eventDispatcher_, OrgGeogebraCommonPluginEventDispatcher *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, version__, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, savedListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, macro_, OrgGeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, propertiesView_, OrgGeogebraCommonGuiViewPropertiesPropertiesView *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, random_, JavaUtilRandom *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, geoScriptRunner_, OrgGeogebraCommonPluginGeoScriptRunner *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, geoForCopyStyle_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, optionsMenu_, OrgGeogebraCommonGuiMenubarOptionsMenu *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainApp, openFileListener_, JavaUtilArrayList *)

static NSString *OrgGeogebraCommonMainApp_CASVersionString_ = @"";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonMainApp, CASVersionString_, NSString *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonMainApp, CASVersionString_, NSString *)

static jboolean OrgGeogebraCommonMainApp_CASViewEnabled_ = YES;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonMainApp, CASViewEnabled_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonMainApp, CASViewEnabled_, jboolean)

static jboolean OrgGeogebraCommonMainApp__3DViewEnabled_ = YES;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonMainApp, _3DViewEnabled_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonMainApp, _3DViewEnabled_, jboolean)

__attribute__((unused)) static void OrgGeogebraCommonMainApp_initTranslatedCommands(OrgGeogebraCommonMainApp *self);

__attribute__((unused)) static void OrgGeogebraCommonMainApp_putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum_withNSString_(OrgGeogebraCommonMainApp *self, OrgGeogebraCommonKernelCommandsCommandsEnum *comm, NSString *local);

__attribute__((unused)) static void OrgGeogebraCommonMainApp_showErrorWithOrgGeogebraCommonMainMyError_(OrgGeogebraCommonMainApp *self, OrgGeogebraCommonMainMyError *e);

__attribute__((unused)) static void OrgGeogebraCommonMainApp_getScriptingXMLWithJavaLangStringBuilder_withBoolean_(OrgGeogebraCommonMainApp *self, JavaLangStringBuilder *sb, jboolean asPreference);

__attribute__((unused)) static OrgGeogebraCommonMainSettingsSettings *OrgGeogebraCommonMainApp_getSettings(OrgGeogebraCommonMainApp *self);

__attribute__((unused)) static OrgGeogebraCommonMainSpreadsheetTraceManager *OrgGeogebraCommonMainApp_getTraceManager(OrgGeogebraCommonMainApp *self);

__attribute__((unused)) static OrgGeogebraCommonKernelKernel *OrgGeogebraCommonMainApp_getKernel(OrgGeogebraCommonMainApp *self);

__attribute__((unused)) static void OrgGeogebraCommonMainApp_resetFonts(OrgGeogebraCommonMainApp *self);

__attribute__((unused)) static void OrgGeogebraCommonMainApp_getConsProtocolXMLWithJavaLangStringBuilder_(OrgGeogebraCommonMainApp *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *OrgGeogebraCommonMainApp_getPlainWithNSString_(OrgGeogebraCommonMainApp *self, NSString *key);

__attribute__((unused)) static jboolean OrgGeogebraCommonMainApp_hasWithOrgGeogebraCommonMainFeatureEnum_(OrgGeogebraCommonMainApp *self, OrgGeogebraCommonMainFeatureEnum *f);

__attribute__((unused)) static void OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(OrgGeogebraCommonMainApp_InputPositonEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonMainApp_InputPositonEnum *new_OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

typedef NS_ENUM(NSUInteger, OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystem) {
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystem_MAY_SET_COORD_SYSTEM = 0,
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystem_SET_COORD_SYSTEM_OCCURED = 1,
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystem_NONE = 2,
};

@interface OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values();

+ (OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum)

FOUNDATION_EXPORT OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values_[];

#define OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_MAY_SET_COORD_SYSTEM OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values_[OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystem_MAY_SET_COORD_SYSTEM]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum, MAY_SET_COORD_SYSTEM)

#define OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_SET_COORD_SYSTEM_OCCURED OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values_[OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystem_SET_COORD_SYSTEM_OCCURED]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum, SET_COORD_SYSTEM_OCCURED)

#define OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_NONE OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values_[OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystem_NONE]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum, NONE)

__attribute__((unused)) static void OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *new_OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonMainApp)

jboolean OrgGeogebraCommonMainApp_hasFullPermissions_ = NO;
NSString *OrgGeogebraCommonMainApp_WIKI_OPERATORS_ = @"Predefined Functions and Operators";
NSString *OrgGeogebraCommonMainApp_WIKI_MANUAL_ = @"Manual";
NSString *OrgGeogebraCommonMainApp_WIKI_CAS_VIEW_ = @"CAS_View";
NSString *OrgGeogebraCommonMainApp_WIKI_TUTORIAL_ = @"Tutorial:Main Page";
NSString *OrgGeogebraCommonMainApp_WIKI_EXPORT_WORKSHEET_ = @"Upload_to_GeoGebraTube";
NSString *OrgGeogebraCommonMainApp_WIKI_ADVANCED_ = @"Advanced Features";
NSString *OrgGeogebraCommonMainApp_WIKI_TEXT_TOOL_ = @"Text Tool";
IOSIntArray *OrgGeogebraCommonMainApp_roundingMenuLookup_;
IOSIntArray *OrgGeogebraCommonMainApp_decimalsLookup_;
IOSIntArray *OrgGeogebraCommonMainApp_figuresLookup_;
IOSObjectArray *OrgGeogebraCommonMainApp_strDecimalSpacesAC_;
OrgGeogebraCommonCasSingularwsSingularWebService *OrgGeogebraCommonMainApp_singularWS_;
jboolean OrgGeogebraCommonMainApp_useFullAppGui_ = NO;

@implementation OrgGeogebraCommonMainApp

+ (void)setCASVersionStringWithNSString:(NSString *)string {
  OrgGeogebraCommonMainApp_setCASVersionStringWithNSString_(string);
}

+ (NSString *)getCASVersionString {
  return OrgGeogebraCommonMainApp_getCASVersionString();
}

- (void)setCheckboxSizeWithInt:(jint)b {
  booleanSize_ = (b == 13) ? 13 : 26;
}

- (jint)getCheckboxSize {
  return booleanSize_;
}

- (jboolean)useJavaFontsForLaTeX {
  return useJavaFontsForLaTeX__;
}

- (jint)getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  return type == OrgGeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH() ? self->capturingThresholdTouch_ : self->capturingThreshold_;
}

- (void)setCapturingThresholdWithInt:(jint)i {
  self->capturingThreshold_ = i;
  self->capturingThresholdTouch_ = 3 * i;
}

- (OrgGeogebraCommonUtilLowerCaseDictionary *)newLowerCaseDictionary {
  return [new_OrgGeogebraCommonUtilLowerCaseDictionary_initWithOrgGeogebraCommonUtilNormalizerMinimal_([new_OrgGeogebraCommonUtilNormalizerMinimal_init() autorelease]) autorelease];
}

- (void)fillCasCommandDict {
  if (![((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isCommandChanged] && ((commandDictCAS_ != nil) || [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isCommandNull])) {
    return;
  }
  id<OrgGeogebraCommonKernelGeoGebraCasInterface> cas = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS];
  if (cas == nil) {
    return;
  }
  [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) setCommandChangedWithBoolean:NO];
  OrgGeogebraCommonMainApp_set_commandDictCAS_(self, [self newLowerCaseDictionary]);
  [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(IOSObjectArray_Get(nil_chk(subCommandDict_), OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_CAS))) clear];
  id<JavaUtilCollection> commandDictContent = [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(commandDict_)) values];
  for (NSString * __strong cmd in nil_chk(commandDictContent)) {
    [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(commandDictCAS_)) addEntryWithNSString:cmd];
  }
  for (NSString * __strong cmd in nil_chk([((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk(cas)) getAvailableCommandNames])) {
    @try {
      NSString *local = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getCommandWithNSString:cmd];
      OrgGeogebraCommonMainApp_putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum_withNSString_(self, OrgGeogebraCommonKernelCommandsCommandsEnum_valueOfWithNSString_(cmd), local);
      if (local != nil) {
        [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(commandDictCAS_)) addEntryWithNSString:local];
        [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(IOSObjectArray_Get(subCommandDict_, OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_CAS))) addEntryWithNSString:local];
      }
      else {
        [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(commandDictCAS_)) addEntryWithNSString:cmd];
        [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(IOSObjectArray_Get(subCommandDict_, OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_CAS))) addEntryWithNSString:cmd];
      }
    }
    @catch (JavaUtilMissingResourceException *mre) {
      [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(commandDictCAS_)) addEntryWithNSString:cmd];
      [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(IOSObjectArray_Get(subCommandDict_, OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_CAS))) addEntryWithNSString:cmd];
    }
  }
}

- (OrgGeogebraCommonUtilLowerCaseDictionary *)getCommandDictionaryCAS {
  [self fillCommandDict];
  [self fillCasCommandDict];
  return commandDictCAS_;
}

- (IOSObjectArray *)getSubCommandDictionary {
  if (subCommandDict_ == nil) {
    OrgGeogebraCommonMainApp_initTranslatedCommands(self);
  }
  if ([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isCommandChanged]) [self updateCommandDictionary];
  return subCommandDict_;
}

- (void)initTranslatedCommands {
  OrgGeogebraCommonMainApp_initTranslatedCommands(self);
}

- (OrgGeogebraCommonUtilLowerCaseDictionary *)getCommandDictionary {
  [self fillCommandDict];
  return commandDict_;
}

- (void)fillCommandDict {
  [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) initCommand];
  if (![((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isCommandChanged]) {
    return;
  }
  if (translateCommandTable_ == nil) {
    OrgGeogebraCommonMainApp_setAndConsume_translateCommandTable_(self, new_JavaUtilHashMap_init());
  }
  OrgGeogebraCommonMainApp_set_commandDict_(self, [self newLowerCaseDictionary]);
  [((JavaUtilHashMap *) nil_chk(translateCommandTable_)) clear];
  if (subCommandDict_ == nil) {
    OrgGeogebraCommonMainApp_setAndConsume_subCommandDict_(self, [IOSObjectArray newArrayWithLength:OrgGeogebraCommonKernelCommandsCommandDispatcher_tableCount type:OrgGeogebraCommonUtilLowerCaseDictionary_class_()]);
    for (jint i = 0; i < subCommandDict_->size_; i++) {
      IOSObjectArray_Set(subCommandDict_, i, [self newLowerCaseDictionary]);
    }
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subCommandDict_))->size_; i++) {
    [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(IOSObjectArray_Get(subCommandDict_, i))) clear];
  }
  {
    IOSObjectArray *a__ = OrgGeogebraCommonKernelCommandsCommandsEnum_values();
    OrgGeogebraCommonKernelCommandsCommandsEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelCommandsCommandsEnum * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelCommandsCommandsEnum *comm = *b__++;
      NSString *internal = [((OrgGeogebraCommonKernelCommandsCommandsEnum *) nil_chk(comm)) name];
      if (![((OrgGeogebraCommonMainAppCompanion *) nil_chk(companion_)) tableVisibleWithInt:[comm getTable]]) {
        if ([comm getTable] == OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_ENGLISH) {
          OrgGeogebraCommonMainApp_putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum_withNSString_(self, comm, nil);
        }
        continue;
      }
      NSString *local = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getCommandWithNSString:internal];
      OrgGeogebraCommonMainApp_putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum_withNSString_(self, comm, local);
      if (local != nil) {
        local = [local trim];
        [translateCommandTable_ putWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(local) withId:internal];
        [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(commandDict_)) addEntryWithNSString:local];
        [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(IOSObjectArray_Get(subCommandDict_, [comm getTable]))) addEntryWithNSString:local];
      }
    }
  }
  [((OrgGeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([self getParserFunctions])) updateLocaleWithOrgGeogebraCommonMainApp:self];
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isGeoGebraCASready]) {
    [self fillCasCommandDict];
  }
  [self addMacroCommands];
  [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) setCommandChangedWithBoolean:NO];
}

- (void)putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum:(OrgGeogebraCommonKernelCommandsCommandsEnum *)comm
                                                                     withNSString:(NSString *)local {
  OrgGeogebraCommonMainApp_putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum_withNSString_(self, comm, local);
}

- (NSString *)getReverseCommandWithNSString:(NSString *)command {
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isUsingInternalCommandNames]) {
    @try {
      OrgGeogebraCommonKernelCommandsCommandsEnum_valueOfWithNSString_(command);
      return command;
    }
    @catch (JavaLangException *e) {
    }
  }
  OrgGeogebraCommonMainApp_initTranslatedCommands(self);
  NSString *key = OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(command);
  NSString *ret = translateCommandTable_ == nil ? key : [translateCommandTable_ getWithId:key];
  if (ret != nil) return ret;
  {
    IOSObjectArray *a__ = OrgGeogebraCommonKernelCommandsCommandsEnum_values();
    OrgGeogebraCommonKernelCommandsCommandsEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelCommandsCommandsEnum * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelCommandsCommandsEnum *c = *b__++;
      if ([((NSString *) nil_chk(OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((OrgGeogebraCommonKernelCommandsCommandsEnum *) nil_chk(c)) name]))) isEqual:key]) {
        return [((OrgGeogebraCommonKernelCommandsCommandsEnum *) nil_chk(OrgGeogebraCommonKernelCommandsCommandsEnum_englishToInternalWithOrgGeogebraCommonKernelCommandsCommandsEnum_(c))) name];
      }
    }
  }
  return nil;
}

- (void)updateCommandDictionary {
  [self fillCommandDict];
}

- (void)addMacroCommands {
  if ((commandDict_ == nil) || (kernel_ == nil) || ![kernel_ hasMacros]) {
    return;
  }
  JavaUtilArrayList *macros = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAllMacros];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(macros)) size]; i++) {
    NSString *cmdName = [((OrgGeogebraCommonKernelMacro *) nil_chk([macros getWithInt:i])) getCommandName];
    if (![((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(commandDict_)) containsValueWithId:cmdName]) {
      [commandDict_ addEntryWithNSString:cmdName];
    }
  }
}

- (void)removeMacroCommands {
  if ((commandDict_ == nil) || (kernel_ == nil) || ![kernel_ hasMacros]) {
    return;
  }
  JavaUtilArrayList *macros = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAllMacros];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(macros)) size]; i++) {
    NSString *cmdName = [((OrgGeogebraCommonKernelMacro *) nil_chk([macros getWithInt:i])) getCommandName];
    [((OrgGeogebraCommonUtilLowerCaseDictionary *) nil_chk(commandDict_)) removeEntryWithNSString:cmdName];
  }
}

- (jboolean)isApplet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)storeUndoInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)storeUndoInfoIfSetCoordSystemOccured {
  if (storeUndoInfoForSetCoordSystem_ == OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_get_SET_COORD_SYSTEM_OCCURED()) {
    [self storeUndoInfo];
  }
  OrgGeogebraCommonMainApp_set_storeUndoInfoForSetCoordSystem_(self, OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_get_NONE());
}

- (void)setCoordSystemOccured {
  if (storeUndoInfoForSetCoordSystem_ == OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_get_MAY_SET_COORD_SYSTEM()) {
    OrgGeogebraCommonMainApp_set_storeUndoInfoForSetCoordSystem_(self, OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_get_SET_COORD_SYSTEM_OCCURED());
  }
}

- (void)maySetCoordSystem {
  if (storeUndoInfoForSetCoordSystem_ == OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_get_NONE()) {
    OrgGeogebraCommonMainApp_set_storeUndoInfoForSetCoordSystem_(self, OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_get_MAY_SET_COORD_SYSTEM());
  }
}

- (jboolean)isUsingFullGui {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)showViewWithInt:(jint)view {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)letRename {
  return YES;
}

- (jboolean)letDelete {
  return YES;
}

- (jboolean)letRedefine {
  return YES;
}

- (jboolean)isBlockUpdateScripts {
  return blockUpdateScripts_;
}

- (void)setBlockUpdateScriptsWithBoolean:(jboolean)blockUpdateScripts {
  self->blockUpdateScripts_ = blockUpdateScripts;
}

- (NSString *)getInternalCommandWithNSString:(NSString *)cmd {
  OrgGeogebraCommonMainApp_initTranslatedCommands(self);
  NSString *s;
  NSString *cmdLower = OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(cmd);
  IOSObjectArray *values = OrgGeogebraCommonKernelCommandsCommandsEnum_values();
  {
    IOSObjectArray *a__ = values;
    OrgGeogebraCommonKernelCommandsCommandsEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelCommandsCommandsEnum * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelCommandsCommandsEnum *c = *b__++;
      s = [((OrgGeogebraCommonKernelCommandsCommandsEnum *) nil_chk(OrgGeogebraCommonKernelCommandsCommandsEnum_englishToInternalWithOrgGeogebraCommonKernelCommandsCommandsEnum_(c))) name];
      if ([((NSString *) nil_chk(OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getCommandWithNSString:s]))) isEqual:cmdLower]) {
        return s;
      }
    }
  }
  return nil;
}

- (void)showErrorWithNSString:(NSString *)s {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showErrorDialogWithNSString:(NSString *)s {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setUseBrowserForJavaScriptWithBoolean:(jboolean)useBrowserForJavaScript {
  self->useBrowserForJavaScript__ = useBrowserForJavaScript;
}

- (jboolean)useBrowserForJavaScript {
  return useBrowserForJavaScript__;
}

- (OrgGeogebraCommonPluginScriptManager *)getScriptManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonPluginEventDispatcher *)getEventDispatcher {
  if (eventDispatcher_ == nil) {
    OrgGeogebraCommonMainApp_setAndConsume_eventDispatcher_(self, new_OrgGeogebraCommonPluginEventDispatcher_initWithOrgGeogebraCommonMainApp_(self));
  }
  return eventDispatcher_;
}

- (NSString *)getTraceXMLWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)ge {
  return [((OrgGeogebraCommonMainSpreadsheetTraceManager *) nil_chk(OrgGeogebraCommonMainApp_getTraceManager(self))) getTraceXMLWithOrgGeogebraCommonKernelGeosGeoElement:ge];
}

- (void)traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)ge {
  [((OrgGeogebraCommonMainSpreadsheetTraceManager *) nil_chk(OrgGeogebraCommonMainApp_getTraceManager(self))) traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:ge];
}

- (void)resetTraceColumnWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)ge {
  [((OrgGeogebraCommonMainSpreadsheetTraceManager *) nil_chk(OrgGeogebraCommonMainApp_getTraceManager(self))) setNeedsColumnResetWithOrgGeogebraCommonKernelGeosGeoElement:ge withBoolean:YES];
}

- (void)updateMaxLayerUsedWithInt:(jint)layer {
  jint newLayer = layer;
  if (layer > OrgGeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS) {
    newLayer = OrgGeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS;
  }
  if (layer > maxLayerUsed_) {
    maxLayerUsed_ = newLayer;
  }
}

- (jboolean)is3D {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getLastCreatedGeoElement {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getLastGeoElement];
}

- (void)deleteSelectedObjects {
  if ([self letDelete]) {
    IOSObjectArray *geos = [((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedGeos])) toArray];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(geos, i), [OrgGeogebraCommonKernelGeosGeoElement class]);
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) {
        [geo removeOrSetUndefinedIfHasFixedDescendent];
      }
    }
    JavaUtilArrayList *geos2 = [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([self getActiveEuclidianView])) getEuclidianController])) getJustCreatedGeos];
    for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(geos2)) size]; j++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [geos2 getWithInt:j];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) {
        [geo removeOrSetUndefinedIfHasFixedDescendent];
      }
    }
    [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([self getActiveEuclidianView])) getEuclidianController])) clearJustCreatedGeos];
    [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([self getActiveEuclidianView])) getEuclidianController])) clearSelections];
    [self storeUndoInfo];
  }
}

- (jboolean)showAuxiliaryObjects {
  return showAuxiliaryObjects__;
}

- (void)getKeyboardXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<keyboard width=\""];
  [sb appendWithInt:[((OrgGeogebraCommonMainSettingsKeyboardSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk(OrgGeogebraCommonMainApp_getSettings(self))) getKeyboard])) getKeyboardWidth]];
  [sb appendWithNSString:@"\" height=\""];
  [sb appendWithInt:[((OrgGeogebraCommonMainSettingsKeyboardSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk(OrgGeogebraCommonMainApp_getSettings(self))) getKeyboard])) getKeyboardHeight]];
  [sb appendWithNSString:@"\" opacity=\""];
  [sb appendWithFloat:[((OrgGeogebraCommonMainSettingsKeyboardSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk(OrgGeogebraCommonMainApp_getSettings(self))) getKeyboard])) getKeyboardOpacity]];
  [sb appendWithNSString:@"\" language=\""];
  [sb appendWithNSString:[((OrgGeogebraCommonMainSettingsKeyboardSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk(OrgGeogebraCommonMainApp_getSettings(self))) getKeyboard])) getKeyboardLocale]];
  [sb appendWithNSString:@"\" show=\""];
  [sb appendWithBoolean:[((OrgGeogebraCommonMainSettingsKeyboardSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk(OrgGeogebraCommonMainApp_getSettings(self))) getKeyboard])) isShowKeyboardOnStart]];
  [sb appendWithNSString:@"\"/>"];
}

- (jboolean)freeMemoryIsCritical {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)freeMemory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)updateRightAngleStyle {
  if (rightAngleStyle_ != OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_NONE) {
    [self setRightAngleStyleLocalDefault];
  }
}

- (void)setRightAngleStyleWithInt:(jint)style {
  rightAngleStyle_ = style;
}

- (void)setRightAngleStyleLocalDefault {
  if ([((NSString *) nil_chk([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getLanguage])) isEqual:@"de"] || [((NSString *) nil_chk([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getLanguage])) isEqual:@"hu"]) {
    rightAngleStyle_ = OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_DOT;
  }
  else {
    rightAngleStyle_ = OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_SQUARE;
  }
}

- (jint)getMaxLayerUsed {
  return maxLayerUsed_;
}

- (jdouble)countPixelsWithDouble:(jdouble)min
                      withDouble:(jdouble)max {
  OrgGeogebraCommonEuclidianEuclidianView *ev = [self getEuclidianView1];
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) toScreenCoordXdWithDouble:max] - [ev toScreenCoordXdWithDouble:min];
}

- (id<OrgGeogebraCommonGuiViewAlgebraAlgebraView>)getAlgebraView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonEuclidianEuclidianView *)getEuclidianView1 {
  OrgGeogebraCommonUtilDebugLog_noticeWithNSString_(@"AbstrEuclView");
  return euclidianView_;
}

- (void)resetMaxLayerUsed {
  maxLayerUsed_ = 0;
}

- (id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>)getActiveEuclidianView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasEuclidianView3D {
  return NO;
}

- (jboolean)isEuclidianView3Dinited {
  return NO;
}

- (id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>)getEuclidianView3D {
  return nil;
}

- (jboolean)hasEuclidianView2EitherShowingOrNotWithInt:(jint)idx {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isShowingEuclidianView2WithInt:(jint)idx {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonUtilImageManager *)getImageManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgGeogebraCommonMainGuiManagerInterface>)getGuiManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonMainDialogManager *)getDialogManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)initGuiManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (void)printStacktraceWithId:(id)message {
  OrgGeogebraCommonMainApp_printStacktraceWithId_(message);
}

+ (void)initializeSingularWS {
  OrgGeogebraCommonMainApp_initializeSingularWS();
}

+ (void)debugWithNSString:(NSString *)s {
  OrgGeogebraCommonMainApp_debugWithNSString_(s);
}

+ (void)errorWithNSString:(NSString *)s {
  OrgGeogebraCommonMainApp_errorWithNSString_(s);
}

+ (void)traceWithNSString:(NSString *)string {
  OrgGeogebraCommonMainApp_traceWithNSString_(string);
}

- (jboolean)isMacOS {
  return NO;
}

- (jboolean)isWindows {
  return NO;
}

- (jboolean)isWindowsVistaOrLater {
  return NO;
}

- (NSString *)getScriptingLanguage {
  if ([@"null" isEqual:scriptingLanguage_]) {
    OrgGeogebraCommonMainApp_set_scriptingLanguage_(self, nil);
  }
  return scriptingLanguage_;
}

- (void)setScriptingLanguageWithNSString:(NSString *)scriptingLanguage {
  OrgGeogebraCommonMainApp_set_scriptingLanguage_(self, scriptingLanguage);
}

- (void)evalJavaScriptWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                      withNSString:(NSString *)script
                                      withNSString:(NSString *)arg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)fileVersionBeforeWithIntArray:(IOSIntArray *)v {
  if (self->version__ == nil) {
    return YES;
  }
  jint length = ((IOSIntArray *) nil_chk(version__))->size_;
  if (((IOSIntArray *) nil_chk(v))->size_ < length) {
    length = v->size_;
  }
  for (jint i = 0; i < length; i++) {
    if (IOSIntArray_Get(version__, i) < IOSIntArray_Get(v, i)) {
      return YES;
    }
    else if (IOSIntArray_Get(version__, i) > IOSIntArray_Get(v, i)) {
      return NO;
    }
  }
  return version__->size_ < v->size_;
}

- (void)setFileVersionWithNSString:(NSString *)version_ {
  if (version_ == nil) {
    OrgGeogebraCommonMainApp_set_version__(self, nil);
    return;
  }
  OrgGeogebraCommonMainApp_set_version__(self, OrgGeogebraCommonMainApp_getSubValuesWithNSString_(version_));
}

+ (IOSIntArray *)getSubValuesWithNSString:(NSString *)version_ {
  return OrgGeogebraCommonMainApp_getSubValuesWithNSString_(version_);
}

- (OrgGeogebraCommonEuclidianEuclidianView *)createEuclidianView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMode {
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self createEuclidianView])) getMode];
}

- (jint)getCurrentLabelingStyle {
  if ([self getLabelingStyle] == OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_AUTOMATIC) {
    if ([self isUsingFullGui]) {
      if (([self getGuiManager] != nil) && [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) hasAlgebraViewShowing]) {
        return [((id<OrgGeogebraCommonGuiViewAlgebraAlgebraView>) nil_chk([self getAlgebraView])) isVisible] ? OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS : OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_OFF;
      }
      return OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_OFF;
    }
    return OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS;
  }
  return [self getLabelingStyle];
}

- (jint)getMD5folderLengthWithNSString:(NSString *)fullPath {
  return 32;
}

- (id<OrgGeogebraCommonAwtMyImage>)getExternalImageAdapterWithNSString:(NSString *)filename
                                                               withInt:(jint)width
                                                               withInt:(jint)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isLabelDragsEnabled {
  return labelDragsEnabled_;
}

- (void)setLabelDragsEnabledWithBoolean:(jboolean)flag {
  labelDragsEnabled_ = flag;
}

- (void)setScrollToShowWithBoolean:(jboolean)b {
}

- (void)setSaved {
  isSaved__ = YES;
  for (id<OrgGeogebraCommonMainSavedStateListener> __strong sl in nil_chk(savedListeners_)) {
    [((id<OrgGeogebraCommonMainSavedStateListener>) nil_chk(sl)) stateChangedWithBoolean:YES];
  }
}

- (void)registerSavedStateListenerWithOrgGeogebraCommonMainSavedStateListener:(id<OrgGeogebraCommonMainSavedStateListener>)l {
  [((id<JavaUtilList>) nil_chk(savedListeners_)) addWithId:l];
}

- (void)setUnsaved {
  isSaved__ = NO;
  for (id<OrgGeogebraCommonMainSavedStateListener> __strong sl in nil_chk(savedListeners_)) {
    [((id<OrgGeogebraCommonMainSavedStateListener>) nil_chk(sl)) stateChangedWithBoolean:NO];
  }
}

- (jboolean)isSaved {
  return isSaved__;
}

- (void)setActiveViewWithInt:(jint)evID {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)refreshViews {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView1])) updateBackground];
  if ([self hasEuclidianView2WithInt:1]) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView2WithInt:1])) updateBackground];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)openMacroWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)editMacro {
  for (jint i = 0; i < [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelMacro *) nil_chk(editMacro)) getKernel])) getMacroNumber]; i++) {
    if ([((OrgGeogebraCommonKernelKernel *) nil_chk([editMacro getKernel])) getMacroWithInt:i] == editMacro) {
      break;
    }
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) addMacroWithOrgGeogebraCommonKernelMacro:[((OrgGeogebraCommonKernelKernel *) nil_chk([editMacro getKernel])) getMacroWithInt:i]];
  }
  NSString *allXml = [self getXML];
  NSString *header = [allXml substring:0 endIndex:[((NSString *) nil_chk(allXml)) indexOfString:@"<construction"]];
  NSString *footer = [allXml substring:[allXml indexOfString:@"</construction>"] endIndex:((jint) [allXml length])];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [editMacro getXMLWithJavaLangStringBuilder:sb];
  NSString *macroXml = [sb description];
  NSString *newXml = JreStrcat("$$$", header, [macroXml substring:[((NSString *) nil_chk(macroXml)) indexOfString:@"<construction"] endIndex:[macroXml indexOfString:@"</construction>"]], footer);
  OrgGeogebraCommonMainApp_set_macro_(self, editMacro);
  [self setXMLWithNSString:newXml withBoolean:YES];
}

- (void)openMacroWithNSString:(NSString *)macroName {
  OrgGeogebraCommonKernelMacro *editMacro = [((OrgGeogebraCommonKernelKernel *) nil_chk(OrgGeogebraCommonMainApp_getKernel(self))) getMacroWithNSString:macroName];
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$$", @"[STORAGE] nr: ", [((OrgGeogebraCommonKernelKernel *) nil_chk(OrgGeogebraCommonMainApp_getKernel(self))) getMacroNumber], @" macro for open is ", [((OrgGeogebraCommonKernelMacro *) nil_chk(editMacro)) getToolName]));
  [self openMacroWithOrgGeogebraCommonKernelMacro:editMacro];
}

- (OrgGeogebraCommonKernelMacro *)getMacro {
  return macro_;
}

- (NSString *)getMacroXML {
  JavaUtilArrayList *macros = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAllMacros];
  return [((OrgGeogebraCommonIoMyXMLio *) nil_chk([self getXMLio])) getFullMacroXMLWithJavaUtilArrayList:macros];
}

- (NSString *)getMacroXMLorEmpty {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) hasMacros]) return @"";
  JavaUtilArrayList *macros = [kernel_ getAllMacros];
  if ([((JavaUtilArrayList *) nil_chk(macros)) isEmpty]) return @"";
  return [((OrgGeogebraCommonIoMyXMLio *) nil_chk([self getXMLio])) getFullMacroXMLWithJavaUtilArrayList:macros];
}

- (jboolean)hasEuclidianView2WithInt:(jint)idx {
  return NO;
}

- (void)showErrorWithOrgGeogebraCommonMainMyError:(OrgGeogebraCommonMainMyError *)e {
  OrgGeogebraCommonMainApp_showErrorWithOrgGeogebraCommonMainMyError_(self, e);
}

- (void)showErrorWithJavaLangException:(JavaLangException *)e
withOrgGeogebraCommonUtilCommandInputField:(id<OrgGeogebraCommonUtilCommandInputField>)f {
  OrgGeogebraCommonMainLocalization *loc = [self getLocalization];
  if ([e isKindOfClass:[OrgGeogebraCommonKernelCommandsMyException class]]) {
    jint err = [((OrgGeogebraCommonKernelCommandsMyException *) nil_chk(((OrgGeogebraCommonKernelCommandsMyException *) check_class_cast(e, [OrgGeogebraCommonKernelCommandsMyException class])))) getErrorType];
    if (err == OrgGeogebraCommonKernelCommandsMyException_INVALID_INPUT) {
      NSString *command = f == nil ? nil : [self getReverseCommandWithNSString:[f getCommand]];
      if (command != nil) {
        [self showCommandErrorWithNSString:command withNSString:JreStrcat("$$$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getErrorWithNSString:@"InvalidInput"], @"\n\n", [loc getPlainWithNSString:@"Syntax"], @":\n", [loc getCommandSyntaxWithNSString:command])];
        return;
      }
    }
    else if (err == OrgGeogebraCommonKernelCommandsMyException_IMBALANCED_BRACKETS) {
      OrgGeogebraCommonMainApp_showErrorWithOrgGeogebraCommonMainMyError_(self, (OrgGeogebraCommonMainMyError *) check_class_cast([((JavaLangException *) nil_chk(e)) getCause], [OrgGeogebraCommonMainMyError class]));
      return;
    }
  }
  else if ([e isKindOfClass:[OrgGeogebraCommonKernelCircularDefinitionException class]]) {
    [self showErrorWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getErrorWithNSString:@"CircularDefinition"]];
    return;
  }
  [((JavaLangException *) nil_chk(e)) printStackTrace];
  [self showErrorWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getErrorWithNSString:@"InvalidInput"]];
}

- (void)showCommandErrorWithNSString:(NSString *)command
                        withNSString:(NSString *)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getXML {
  return [((OrgGeogebraCommonIoMyXMLio *) nil_chk([self getXMLio])) getFullXML];
}

- (void)showErrorWithNSString:(NSString *)string
                 withNSString:(NSString *)str {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgGeogebraCommonKernelView>)getViewWithInt:(jint)viewID {
  if (([self getGuiManager] != nil) && ([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getPlotPanelViewWithInt:viewID] != nil)) {
    return [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getPlotPanelViewWithInt:viewID];
  }
  switch (viewID) {
    case OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN:
    return [self getEuclidianView1];
    case OrgGeogebraCommonMainApp_VIEW_ALGEBRA:
    return [self getAlgebraView];
    case OrgGeogebraCommonMainApp_VIEW_SPREADSHEET:
    if (![self isUsingFullGui]) return nil;
    else if ([self getGuiManager] == nil) [self initGuiManager];
    if ([self getGuiManager] == nil) return nil;
    return [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getSpreadsheetView];
    case OrgGeogebraCommonMainApp_VIEW_CAS:
    if (![self isUsingFullGui]) return nil;
    else if ([self getGuiManager] == nil) [self initGuiManager];
    if ([self getGuiManager] == nil) return nil;
    return [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getCasView];
    case OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2:
    return [self hasEuclidianView2WithInt:1] ? [self getEuclidianView2WithInt:1] : nil;
    case OrgGeogebraCommonMainApp_VIEW_CONSTRUCTION_PROTOCOL:
    if (![self isUsingFullGui]) return nil;
    else if ([self getGuiManager] == nil) [self initGuiManager];
    if ([self getGuiManager] == nil) return nil;
    return [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getConstructionProtocolData];
    case OrgGeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR:
    if (![self isUsingFullGui]) return nil;
    else if ([self getGuiManager] == nil) [self initGuiManager];
    if ([self getGuiManager] == nil) return nil;
    return [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getProbabilityCalculator];
    case OrgGeogebraCommonMainApp_VIEW_DATA_ANALYSIS:
    if (![self isUsingFullGui]) return nil;
    else if ([self getGuiManager] == nil) [self initGuiManager];
    if ([self getGuiManager] == nil) return nil;
    return [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getDataAnalysisView];
  }
  return nil;
}

- (NSString *)getCompleteUserInterfaceXMLWithBoolean:(jboolean)asPreference {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:[self getGuiXMLWithBoolean:asPreference]];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView1])) getXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  if ([self hasEuclidianView2WithInt:1]) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView2WithInt:1])) getXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  }
  else if (asPreference && ([self getGuiManager] != nil)) {
    OrgGeogebraCommonEuclidianEuclidianView *ev2 = [self getEuclidianView2WithInt:1];
    if (ev2 != nil) [ev2 getXMLWithJavaLangStringBuilder:sb withBoolean:YES];
  }
  if ([self getGuiManager] != nil) {
    {
      [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getSpreadsheetViewXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
    }
    if ([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) hasProbabilityCalculator]) {
      [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getProbabilityCalculatorXMLWithJavaLangStringBuilder:sb];
    }
    if ([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) hasAlgebraView]) {
      [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getAlgebraViewXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
    }
    if ([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) hasDataCollectionView]) {
      [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getDataCollectionViewXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
    }
  }
  if (asPreference) {
    [self getKeyboardXMLWithJavaLangStringBuilder:sb];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getKernelXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  OrgGeogebraCommonMainApp_getScriptingXMLWithJavaLangStringBuilder_withBoolean_(self, sb, asPreference);
  return [sb description];
}

- (void)getScriptingXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                     withBoolean:(jboolean)asPreference {
  OrgGeogebraCommonMainApp_getScriptingXMLWithJavaLangStringBuilder_withBoolean_(self, sb, asPreference);
}

- (OrgGeogebraCommonMainSettingsSettings *)getSettings {
  return OrgGeogebraCommonMainApp_getSettings(self);
}

- (NSString *)getUniqueId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setUniqueIdWithNSString:(NSString *)uniqueId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resetUniqueId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setShowAuxiliaryObjectsWithBoolean:(jboolean)auxiliaryObjects {
  showAuxiliaryObjects__ = auxiliaryObjects;
  if ([self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) setShowAuxiliaryObjectsWithBoolean:auxiliaryObjects];
  }
}

- (void)setLabelingStyleWithInt:(jint)labelingStyle {
  self->labelingStyle_ = labelingStyle;
  labelingStyleSelected_ = YES;
  [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(OrgGeogebraCommonMainApp_getKernel(self))) getConstruction])) getConstructionDefaults])) resetLabelModeDefaultGeos];
}

- (jint)getLabelingStyle {
  return labelingStyle_;
}

- (jint)getLabelingStyleForMenu {
  if (labelingStyleSelected_) {
    return [self getLabelingStyle];
  }
  return -1;
}

- (void)setLabelingStyleIsNotSelected {
  labelingStyleSelected_ = NO;
  if ([self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) updateMenubar];
  }
}

- (jboolean)isScriptingDisabled {
  return scriptingDisabled_;
}

- (void)setScriptingDisabledWithBoolean:(jboolean)sd {
  self->scriptingDisabled_ = sd;
}

- (jboolean)isMouseWheelReversed {
  return reverseMouseWheel__;
}

- (void)reverseMouseWheelWithBoolean:(jboolean)b {
  reverseMouseWheel__ = b;
}

- (void)setPreferredSizeWithOrgGeogebraCommonAwtGDimension:(OrgGeogebraCommonAwtGDimension *)size {
}

- (jint)getTooltipTimeout {
  return 0;
}

- (void)setTooltipLanguageWithNSString:(NSString *)ttl {
}

- (OrgGeogebraCommonEuclidianDrawEquation *)getDrawEquation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setTmpPerspectivesWithJavaUtilArrayList:(JavaUtilArrayList *)perspectives {
  OrgGeogebraCommonMainApp_set_tmpPerspectives_(self, perspectives);
}

- (JavaUtilArrayList *)getTmpPerspectives {
  return tmpPerspectives_;
}

- (void)setTooltipTimeoutWithInt:(jint)ttt {
}

- (OrgGeogebraCommonEuclidianEuclidianView *)getEuclidianView2WithInt:(jint)idx {
  return nil;
}

- (jdouble)getWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonAwtGFont *)getFontCommonWithBoolean:(jboolean)serif
                                                withInt:(jint)style
                                                withInt:(jint)size {
  return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newFontWithNSString:serif ? @"Serif" : @"SansSerif" withInt:style withInt:size];
}

- (OrgGeogebraCommonAwtGFont *)getPlainFontCommon {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isExporting {
  return exporting_;
}

- (void)setShowToolBarNoUpdateWithBoolean:(jboolean)toolbar {
  showToolBar__ = toolbar;
}

- (void)setShowToolBarHelpNoUpdateWithBoolean:(jboolean)toolbarHelp {
  showToolBarHelp_ = toolbarHelp;
}

- (jboolean)showToolBar {
  return showToolBar__;
}

- (jboolean)showMenuBar {
  return showMenuBar__;
}

- (void)setShowMenuBarWithBoolean:(jboolean)flag {
  showMenuBar__ = flag;
}

- (void)setShowToolBarWithBoolean:(jboolean)toolbar {
  showToolBar__ = toolbar;
}

- (void)setShowToolBarWithBoolean:(jboolean)toolbar
                      withBoolean:(jboolean)help {
  showToolBar__ = toolbar;
  showToolBarHelp_ = help;
  if (showToolBar__ && [self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) setShowToolBarHelpWithBoolean:showToolBarHelp_];
  }
}

- (jint)getToolbarPosition {
  return toolbarPosition_;
}

- (void)setToolbarPositionWithInt:(jint)position
                      withBoolean:(jboolean)update {
}

- (void)initKernel {
  OrgGeogebraCommonMainApp_set_kernel_(self, [((OrgGeogebraCommonMainAppCompanion *) nil_chk(companion_)) newKernel]);
  [self getSelectionManager];
}

- (void)initEuclidianViews {
  OrgGeogebraCommonMainApp_set_euclidianController_(self, [self newEuclidianControllerWithOrgGeogebraCommonKernelKernel:kernel_]);
  OrgGeogebraCommonMainApp_set_euclidianView_(self, [self newEuclidianViewWithBooleanArray:showAxes_ withBoolean:showGrid_]);
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) setAntialiasingWithBoolean:antialiasing_];
}

- (OrgGeogebraCommonEuclidianEuclidianView *)newEuclidianViewWithBooleanArray:(IOSBooleanArray *)showAxes1
                                                                  withBoolean:(jboolean)showGrid1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonEuclidianEuclidianController *)newEuclidianControllerWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelUndoManager *)getUndoManagerWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelAnimationManager *)newAnimationManagerWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *)newGeoElementGraphicsAdapter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)repaintSpreadsheet {
}

- (jboolean)isOnTheFlyPointCreationActive {
  return isOnTheFlyPointCreationActive__;
}

- (OrgGeogebraCommonMainSpreadsheetTraceManager *)getTraceManager {
  return OrgGeogebraCommonMainApp_getTraceManager(self);
}

- (jboolean)hasTraceManager {
  return traceManager_ != nil;
}

- (jboolean)hasGeoTraced {
  if (traceManager_ == nil) {
    return NO;
  }
  return [((OrgGeogebraCommonMainSpreadsheetTraceManager *) nil_chk(traceManager_)) hasGeoTraced];
}

- (void)setDefaultCursor {
}

- (void)setWaitCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateStyleBars {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setMoveMode {
  [self setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
}

- (void)set1rstMode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgGeogebraCommonMainSpreadsheetTableModel *)getSpreadsheetTableModel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setModeWithInt:(jint)mode
withOrgGeogebraCommonKernelModeSetterEnum:(OrgGeogebraCommonKernelModeSetterEnum *)m {
  if (mode != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER) {
    OrgGeogebraCommonMainApp_set_currentSelectionListener_(self, nil);
  }
  if ([self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) setModeWithInt:mode withOrgGeogebraCommonKernelModeSetterEnum:m];
  }
  else if (euclidianView_ != nil) {
    [euclidianView_ setModeWithInt:mode withOrgGeogebraCommonKernelModeSetterEnum:m];
  }
}

- (void)setModeWithInt:(jint)mode {
  [self setModeWithInt:mode withOrgGeogebraCommonKernelModeSetterEnum:OrgGeogebraCommonKernelModeSetterEnum_get_TOOLBAR()];
}

- (void)addToEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView1])) addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)removeFromEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView1])) removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)setXMLWithNSString:(NSString *)string
               withBoolean:(jboolean)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgGeogebraCommonPluginGgbAPI *)getGgbApi {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgGeogebraCommonSoundSoundManager>)getSoundManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return OrgGeogebraCommonMainApp_getKernel(self);
}

- (jboolean)isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  return e != nil && [e isRightClick];
}

- (jboolean)isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  return e != nil && [e isControlDown];
}

- (jboolean)isMiddleClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  return [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) isMiddleClick];
}

- (jboolean)showAlgebraInput {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonMainGlobalKeyDispatcher *)getGlobalKeyDispatcher {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)callAppletJavaScriptWithNSString:(NSString *)string
                       withNSObjectArray:(IOSObjectArray *)args {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)geoElementSelectedWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                        withBoolean:(jboolean)addToSelection {
  if (currentSelectionListener_ != nil) {
    [currentSelectionListener_ geoElementSelectedWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:addToSelection];
  }
}

- (void)setPropertiesViewWithOrgGeogebraCommonGuiViewPropertiesPropertiesView:(OrgGeogebraCommonGuiViewPropertiesPropertiesView *)propertiesView {
  OrgGeogebraCommonMainApp_set_propertiesView_(self, propertiesView);
}

- (void)setSelectionListenerModeWithOrgGeogebraCommonMainGeoElementSelectionListener:(id<OrgGeogebraCommonMainGeoElementSelectionListener>)sl {
  OrgGeogebraCommonMainApp_set_currentSelectionListener_(self, sl);
  if (sl != nil) {
    [self setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER];
  }
  else {
    [self setMoveMode];
  }
}

- (void)updateSelectionWithBoolean:(jboolean)updatePropertiesView {
  if (![self isUsingFullGui] || [self isIniting]) {
    return;
  }
  if ([self getGuiManager] != nil && showMenuBar__) [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) updateMenubarSelection];
  if ([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([self getActiveEuclidianView])) getMode] == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
    [self updateStyleBars];
  }
  if (updatePropertiesView && propertiesView_ != nil && showMenuBar__) {
    [propertiesView_ updateSelection];
  }
}

- (void)setPropertiesViewPanelWithOrgGeogebraCommonMainOptionTypeEnum:(OrgGeogebraCommonMainOptionTypeEnum *)type {
  if (propertiesView_ != nil) [propertiesView_ setOptionPanelWithOrgGeogebraCommonMainOptionTypeEnum:type];
}

- (jboolean)isIniting {
  return initing_;
}

- (jboolean)isShiftDragZoomEnabled {
  return shiftDragZoomEnabled_;
}

- (void)setShiftDragZoomEnabledWithBoolean:(jboolean)shiftDragZoomEnabled {
  self->shiftDragZoomEnabled_ = shiftDragZoomEnabled;
}

- (void)updateMenubar {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)getFontSize {
  return appFontSize_;
}

- (void)setFontSizeWithInt:(jint)points {
  [self setFontSizeWithInt:points withBoolean:YES];
}

- (void)setFontSizeWithInt:(jint)points
               withBoolean:(jboolean)update {
  if (points == appFontSize_) {
    return;
  }
  appFontSize_ = points;
  if (!update) {
    return;
  }
  OrgGeogebraCommonEuclidianEuclidianView *ev1 = [self getEuclidianView1];
  if (ev1 != nil && [ev1 getStyleBar] != nil) {
    [((id<OrgGeogebraCommonEuclidianEuclidianStyleBar>) nil_chk([ev1 getStyleBar])) reinit];
  }
  if ([self hasEuclidianView2WithInt:1]) {
    OrgGeogebraCommonEuclidianEuclidianView *ev2 = [self getEuclidianView2WithInt:1];
    if (ev2 != nil && [ev2 getStyleBar] != nil) {
      [((id<OrgGeogebraCommonEuclidianEuclidianStyleBar>) nil_chk([ev2 getStyleBar])) reinit];
    }
  }
  if ([self hasEuclidianView3D] && [self isEuclidianView3Dinited] && [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([self getEuclidianView3D])) getStyleBar] != nil) {
    [((id<OrgGeogebraCommonEuclidianEuclidianStyleBar>) nil_chk([((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([self getEuclidianView3D])) getStyleBar])) reinit];
  }
  OrgGeogebraCommonMainApp_resetFonts(self);
  [self updateUI];
}

- (void)updateUI {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resetFonts {
  OrgGeogebraCommonMainApp_resetFonts(self);
}

- (jint)getGUIFontSize {
  return guiFontSize_ == -1 ? [self getFontSize] : guiFontSize_;
}

- (void)setGUIFontSizeWithInt:(jint)size {
  guiFontSize_ = size;
  OrgGeogebraCommonMainApp_resetFonts(self);
}

- (OrgGeogebraCommonMainFontManager *)getFontManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonAwtGFont *)getFontCanDisplayWithNSString:(NSString *)testString {
  return [self getFontCanDisplayWithNSString:testString withBoolean:NO withInt:OrgGeogebraCommonAwtGFont_PLAIN withInt:[self getFontSize]];
}

- (OrgGeogebraCommonAwtGFont *)getFontCanDisplayWithNSString:(NSString *)testString
                                                     withInt:(jint)fontStyle {
  return [self getFontCanDisplayWithNSString:testString withBoolean:NO withInt:fontStyle withInt:[self getFontSize]];
}

- (OrgGeogebraCommonAwtGFont *)getFontCanDisplayWithNSString:(NSString *)testString
                                                 withBoolean:(jboolean)serif
                                                     withInt:(jint)fontStyle
                                                     withInt:(jint)fontSize {
  return [((OrgGeogebraCommonMainFontManager *) nil_chk([self getFontManager])) getFontCanDisplayWithNSString:testString withBoolean:serif withInt:fontStyle withInt:fontSize];
}

- (NSString *)getGuiXMLWithBoolean:(jboolean)asPreference {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"<gui>\n"];
  [self getWindowLayoutXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  if (asPreference) {
    [sb appendWithNSString:@"\t<mouse reverseWheel=\""];
    [sb appendWithBoolean:[self isMouseWheelReversed]];
    [sb appendWithNSString:@"\"/>\n"];
  }
  [sb appendWithNSString:@"\t<font "];
  [sb appendWithNSString:@" size=\""];
  [sb appendWithInt:[self getFontSize]];
  [sb appendWithNSString:@"\"/>\n"];
  if (asPreference) {
    [sb appendWithNSString:@"\t<menuFont "];
    [sb appendWithNSString:@" size=\""];
    [sb appendWithInt:guiFontSize_];
    [sb appendWithNSString:@"\"/>\n"];
    [sb appendWithNSString:@"\t<tooltipSettings "];
    if ([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getTooltipLanguageString] != nil) {
      [sb appendWithNSString:@" language=\""];
      [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getTooltipLanguageString]];
      [sb appendWithNSString:@"\""];
    }
    [sb appendWithNSString:@" timeout=\""];
    [sb appendWithInt:[self getTooltipTimeout]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
  }
  if (!asPreference) {
    [sb appendWithNSString:@"\t<graphicsSettings"];
    [sb appendWithNSString:@" javaLatexFonts=\""];
    [sb appendWithBoolean:[self useJavaFontsForLaTeX]];
    [sb appendWithNSString:@"\"/>\n"];
  }
  OrgGeogebraCommonMainApp_getConsProtocolXMLWithJavaLangStringBuilder_(self, sb);
  [sb appendWithNSString:@"</gui>\n"];
  return [sb description];
}

- (void)getConsProtocolXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonMainApp_getConsProtocolXMLWithJavaLangStringBuilder_(self, sb);
}

- (jint)getWindowWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getWindowHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)getWindowLayoutXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                        withBoolean:(jboolean)asPreference {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<window width=\""];
  [sb appendWithNSString:JreStrcat("I", [self getWindowWidth])];
  [sb appendWithNSString:@"\" height=\""];
  [sb appendWithNSString:JreStrcat("I", [self getWindowHeight])];
  [sb appendWithNSString:@"\" />\n"];
  [self getLayoutXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  [sb appendWithNSString:@"\t<labelingStyle "];
  [sb appendWithNSString:@" val=\""];
  [sb appendWithInt:[self getLabelingStyle]];
  [sb appendWithNSString:@"\"/>\n"];
}

- (void)getLayoutXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                  withBoolean:(jboolean)asPreference {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)reset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgGeogebraCommonMainGeoElementSelectionListener>)getCurrentSelectionListener {
  return currentSelectionListener_;
}

- (void)setCurrentSelectionListenerWithOrgGeogebraCommonMainGeoElementSelectionListener:(id<OrgGeogebraCommonMainGeoElementSelectionListener>)sl {
  OrgGeogebraCommonMainApp_set_currentSelectionListener_(self, sl);
}

- (void)setShowResetIconWithBoolean:(jboolean)flag {
  if (flag != showResetIcon__) {
    showResetIcon__ = flag;
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(euclidianView_)) updateBackground];
  }
}

- (jboolean)showResetIcon {
  return showResetIcon__ && !runningInFrame_;
}

- (jboolean)isUndoActive {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isUndoActive];
}

- (jboolean)isHTML5Applet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isExam {
  return NO;
}

- (void)setOnTheFlyPointCreationActiveWithBoolean:(jboolean)isOnTheFlyPointCreationActive {
  self->isOnTheFlyPointCreationActive__ = isOnTheFlyPointCreationActive;
}

- (void)setUseTransparentCursorWhenDraggingWithBoolean:(jboolean)useTransparentCursorWhenDragging {
  self->useTransparentCursorWhenDragging_ = useTransparentCursorWhenDragging;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)getPreferredFormulaRenderingType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)doAfterRedefineWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) doAfterRedefineWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)showURLinBrowserWithNSString:(NSString *)string {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)uploadToGeoGebraTube {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)getUseFullGui {
  return useFullGui_;
}

- (void)setUndoActiveWithBoolean:(jboolean)undoActive {
  jboolean flag = undoActive;
  if (flag && !OrgGeogebraCommonMainApp_hasFullPermissions_) {
    flag = NO;
  }
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isUndoActive] == flag) {
    return;
  }
  [kernel_ setUndoActiveWithBoolean:flag];
  if (flag) {
    [kernel_ initUndoInfo];
  }
  if ([self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) updateActions];
  }
  [self setSaved];
}

+ (jboolean)isFullAppGui {
  return OrgGeogebraCommonMainApp_isFullAppGui();
}

- (jint)getAppCanvasWidth {
  return appCanvasWidth_;
}

- (jint)getAppCanvasHeight {
  return appCanvasHeight_;
}

- (id<OrgGeogebraCommonAwtGImage>)getInternalImageAdapterWithNSString:(NSString *)filename {
  return nil;
}

- (jboolean)showInputTop {
  return showInputTop__ == OrgGeogebraCommonMainApp_InputPositonEnum_get_top();
}

- (OrgGeogebraCommonMainApp_InputPositonEnum *)getInputPosition {
  return showInputTop__;
}

- (void)setShowInputTopWithBoolean:(jboolean)flag
                       withBoolean:(jboolean)update {
  if ((flag && showInputTop__ == OrgGeogebraCommonMainApp_InputPositonEnum_get_top()) || (!flag && showInputTop__ == OrgGeogebraCommonMainApp_InputPositonEnum_get_bottom())) {
    return;
  }
  OrgGeogebraCommonMainApp_set_showInputTop__(self, flag ? OrgGeogebraCommonMainApp_InputPositonEnum_get_top() : OrgGeogebraCommonMainApp_InputPositonEnum_get_bottom());
  if (update && ![self isIniting]) {
    [self updateApplicationLayout];
  }
}

- (void)setInputPositonWithOrgGeogebraCommonMainApp_InputPositonEnum:(OrgGeogebraCommonMainApp_InputPositonEnum *)flag
                                                         withBoolean:(jboolean)update {
  if (flag == showInputTop__) {
    return;
  }
  OrgGeogebraCommonMainApp_set_showInputTop__(self, flag);
  if (update && ![self isIniting]) {
    [self updateApplicationLayout];
  }
}

- (jboolean)showInputHelpToggle {
  return showInputHelpToggle__;
}

- (void)setShowInputHelpToggleWithBoolean:(jboolean)flag {
  if (showInputHelpToggle__ == flag || [self getGuiManager] == nil) {
    return;
  }
  showInputHelpToggle__ = flag;
  [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) updateAlgebraInput];
  [self updateMenubar];
}

- (void)updateApplicationLayout {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getToolNameOrHelpWithInt:(jint)mode
                           withBoolean:(jboolean)toolName {
  NSString *ret;
  if (mode >= OrgGeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET) {
    jint macroID = mode - OrgGeogebraCommonEuclidianEuclidianConstants_MACRO_MODE_ID_OFFSET;
    @try {
      OrgGeogebraCommonKernelMacro *macro1 = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getMacroWithInt:macroID];
      if (toolName) {
        ret = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro1)) getToolOrCommandName];
      }
      else {
        ret = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro1)) getToolHelp];
      }
    }
    @catch (JavaLangException *e) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I", @"Application.getModeText(): macro does not exist: ID = ", macroID));
      return @"";
    }
  }
  else {
    NSString *modeText = [((OrgGeogebraCommonKernelKernel *) nil_chk(OrgGeogebraCommonMainApp_getKernel(self))) getModeTextWithInt:mode];
    if (toolName) {
      ret = [self getMenuWithNSString:modeText];
    }
    else {
      ret = [self getMenuWithNSString:JreStrcat("$$", modeText, @".Help")];
    }
  }
  return ret;
}

- (NSString *)getToolNameWithInt:(jint)mode {
  return [self getToolNameOrHelpWithInt:mode withBoolean:YES];
}

- (NSString *)getToolHelpWithInt:(jint)mode {
  return [self getToolNameOrHelpWithInt:mode withBoolean:NO];
}

- (NSString *)getFunctionWithNSString:(NSString *)string {
  return OrgGeogebraCommonMainApp_getPlainWithNSString_(self, JreStrcat("$$", @"Function.", string));
}

- (OrgGeogebraCommonKernelParserCashandlersParserFunctions *)getParserFunctions {
  return pf_;
}

- (jboolean)clearConstruction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)createNewWindow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)fileNew {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getCountryFromGeoIP {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getRandomNumber {
  return [((JavaUtilRandom *) nil_chk(random_)) nextDouble];
}

- (jint)getRandomIntegerBetweenWithDouble:(jdouble)low
                               withDouble:(jdouble)high {
  jdouble a = OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(low);
  jdouble b = OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(high);
  jint min = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(JavaLangMath_minWithDouble_withDouble_(a, b)));
  jint max = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(JavaLangMath_maxWithDouble_withDouble_(a, b)));
  if (min > max) {
    jint tmp = max;
    max = min;
    min = tmp;
  }
  return [((JavaUtilRandom *) nil_chk(random_)) nextIntWithInt:max - min + 1] + min;
}

- (void)setRandomSeedWithInt:(jint)seed {
  OrgGeogebraCommonMainApp_setAndConsume_random_(self, new_JavaUtilRandom_initWithLong_(seed));
}

- (jboolean)loadXMLWithNSString:(NSString *)xml {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyGraphicsViewToClipboard {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyBase64ToClipboard {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setStandardView {
  [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([self getActiveEuclidianView])) setStandardViewWithBoolean:YES];
}

- (void)exitAll {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addMenuItemWithOrgGeogebraCommonGuiMenubarMenuInterface:(id<OrgGeogebraCommonGuiMenubarMenuInterface>)parentMenu
                                                   withNSString:(NSString *)filename
                                                   withNSString:(NSString *)name
                                                    withBoolean:(jboolean)asHtml
                   withOrgGeogebraCommonGuiMenubarMenuInterface:(id<OrgGeogebraCommonGuiMenubarMenuInterface>)subMenu {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getVersionString {
  return OrgGeogebraCommonGeoGebraConstants_get_VERSION_STRING_();
}

- (OrgGeogebraCommonUtilNormalizerMinimal *)getNormalizer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEmptyIconFileName {
  return @"empty.gif";
}

- (void)zoomWithDouble:(jdouble)px
            withDouble:(jdouble)py
            withDouble:(jdouble)zoomFactor {
  [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([self getActiveEuclidianView])) zoomWithDouble:px withDouble:py withDouble:zoomFactor withInt:15 withBoolean:YES];
}

- (void)zoomAxesRatioWithDouble:(jdouble)axesratio {
  [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([self getActiveEuclidianView])) zoomAxesRatioWithDouble:axesratio withBoolean:YES];
}

- (void)setViewShowAllObjects {
  [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([self getActiveEuclidianView])) setViewShowAllObjectsWithBoolean:YES];
}

- (void)setRightClickEnabledWithBoolean:(jboolean)flag {
  rightClickEnabled_ = flag;
}

- (jboolean)isRightClickEnabled {
  return rightClickEnabled_;
}

- (jboolean)letShowPopupMenu {
  return rightClickEnabled_;
}

- (jboolean)letShowPropertiesDialog {
  return rightClickEnabled_;
}

- (NSString *)getPreferencesXML {
  return [((OrgGeogebraCommonIoMyXMLio *) nil_chk([self getXMLio])) getPreferencesXML];
}

- (void)runScriptsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo1
                                               withNSString:(NSString *)string {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgGeogebraCommonPluginScriptScript *)createScriptWithOrgGeogebraCommonPluginScriptTypeEnum:(OrgGeogebraCommonPluginScriptTypeEnum *)type
                                                                                  withNSString:(NSString *)scriptText
                                                                                   withBoolean:(jboolean)translate {
  if (type == OrgGeogebraCommonPluginScriptTypeEnum_get_GGBSCRIPT() && translate) {
    scriptText = OrgGeogebraCommonPluginScriptGgbScript_localizedScript2ScriptWithOrgGeogebraCommonMainApp_withNSString_(self, scriptText);
  }
  return [((OrgGeogebraCommonPluginScriptTypeEnum *) nil_chk(type)) newScriptWithOrgGeogebraCommonMainApp:self withNSString:scriptText];
}

- (void)startGeoScriptRunner {
  if (geoScriptRunner_ == nil) {
    OrgGeogebraCommonMainApp_setAndConsume_geoScriptRunner_(self, new_OrgGeogebraCommonPluginGeoScriptRunner_initWithOrgGeogebraCommonMainApp_(self));
    [((OrgGeogebraCommonPluginEventDispatcher *) nil_chk([self getEventDispatcher])) addEventListenerWithOrgGeogebraCommonPluginEventListener:geoScriptRunner_];
  }
}

- (void)showRelationWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)ra
                    withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)rb {
  OrgGeogebraCommonKernelRelation_showRelationWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, ra, rb);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoForCopyStyle {
  return geoForCopyStyle_;
}

- (void)setGeoForCopyStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainApp_set_geoForCopyStyle_(self, geo);
}

- (OrgGeogebraCommonFactoriesCASFactory *)getCASFactory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonFactoriesSwingFactory *)getSwingFactory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonFactoriesFactory *)getFactory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dispatchEventWithOrgGeogebraCommonPluginEvent:(OrgGeogebraCommonPluginEvent *)evt {
  [((OrgGeogebraCommonPluginEventDispatcher *) nil_chk([self getEventDispatcher])) dispatchEventWithOrgGeogebraCommonPluginEvent:evt];
}

- (OrgGeogebraCommonGuiMenubarOptionsMenu *)getOptionsMenuWithOrgGeogebraCommonGuiMenubarMenuFactory:(id<OrgGeogebraCommonGuiMenubarMenuFactory>)mf {
  if (optionsMenu_ == nil) {
    OrgGeogebraCommonMainApp_setAndConsume_optionsMenu_(self, new_OrgGeogebraCommonGuiMenubarOptionsMenu_initWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonGuiMenubarMenuFactory_(self, mf));
  }
  return optionsMenu_;
}

- (jboolean)hasOptionsMenu {
  return optionsMenu_ != nil;
}

- (OrgGeogebraCommonIoMyXMLio *)getXMLio {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonIoMyXMLio *)createXMLioWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasEventDispatcher {
  return eventDispatcher_ != nil;
}

- (void)scheduleUpdateConstruction {
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) updateConstructionLaTeX];
  [kernel_ notifyRepaint];
}

- (void)setShowAlgebraInputWithBoolean:(jboolean)flag
                           withBoolean:(jboolean)update {
  showAlgebraInput__ = flag;
  if (update) {
    [self updateApplicationLayout];
    [self updateMenubar];
  }
}

- (void)setNeedsSpreadsheetTableModel {
  needsSpreadsheetTableModel__ = YES;
}

- (jboolean)needsSpreadsheetTableModel {
  return needsSpreadsheetTableModel__;
}

- (void)setAppletWidthWithInt:(jint)width {
  self->appletWidth_ = width;
}

- (void)setAppletHeightWithInt:(jint)height {
  self->appletHeight_ = height;
}

- (jint)getAppletWidth {
  return appletWidth_;
}

- (jint)getAppletHeight {
  return appletHeight_;
}

- (void)startCollectingRepaints {
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView1])) getEuclidianController])) startCollectingMinorRepaints];
}

- (void)stopCollectingRepaints {
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView1])) getEuclidianController])) stopCollectingMinorRepaints];
}

- (OrgGeogebraCommonMainLocalization *)getLocalization {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getMenuWithNSString:(NSString *)key {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getMenuWithNSString:key];
}

- (NSString *)getPlainWithNSString:(NSString *)key {
  return OrgGeogebraCommonMainApp_getPlainWithNSString_(self, key);
}

- (JavaUtilArrayList *)getSelectedGeos {
  return nil;
}

- (OrgGeogebraCommonMainSelectionManager *)getSelectionManager {
  if (selection_ == nil) {
    OrgGeogebraCommonMainApp_setAndConsume_selection_(self, new_OrgGeogebraCommonMainSelectionManager_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonMainUpdateSelection_(OrgGeogebraCommonMainApp_getKernel(self), self));
  }
  return selection_;
}

- (NSString *)getToolTooltipHTMLWithInt:(jint)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)resetPen {
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView1])) getEuclidianController])) resetPen];
  if ([self hasEuclidianView2WithInt:1]) {
    [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([self getEuclidianView2WithInt:1])) getEuclidianController])) resetPen];
  }
}

- (jboolean)getShowCPNavNeedsUpdate {
  return showConstProtNavigationNeedsUpdate_;
}

- (jboolean)showConsProtNavigation {
  return showConsProtNavigation__;
}

- (void)setShowConstructionProtocolNavigationWithBoolean:(jboolean)show
                                             withBoolean:(jboolean)playButton
                                              withDouble:(jdouble)playDelay
                                             withBoolean:(jboolean)showProtButton {
  OrgGeogebraCommonMainSettingsConstructionProtocolSettings *cpSettings = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk(OrgGeogebraCommonMainApp_getSettings(self))) getConstructionProtocol];
  [((OrgGeogebraCommonMainSettingsConstructionProtocolSettings *) nil_chk(cpSettings)) setShowPlayButtonWithBoolean:playButton];
  [cpSettings setPlayDelayWithDouble:playDelay];
  [cpSettings setShowConsProtButtonWithBoolean:showProtButton];
  if ([self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) applyCPsettingsWithOrgGeogebraCommonMainSettingsConstructionProtocolSettings:cpSettings];
  }
  [self setShowConstructionProtocolNavigationWithBoolean:show];
  if ([self getGuiManager] != nil) {
    if (show) {
      [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) setShowConstructionProtocolNavigationWithBoolean:show withBoolean:playButton withDouble:playDelay withBoolean:showProtButton];
    }
  }
}

- (void)setShowConstructionProtocolNavigationWithBoolean:(jboolean)flag {
  if ((flag == showConsProtNavigation__) && (!showConstProtNavigationNeedsUpdate_)) {
    return;
  }
  showConsProtNavigation__ = flag;
  if ([self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) setShowConstructionProtocolNavigationWithBoolean:flag];
    showConstProtNavigationNeedsUpdate_ = NO;
  }
  else {
    showConstProtNavigationNeedsUpdate_ = YES;
  }
}

- (void)updateCenterPanelWithBoolean:(jboolean)updateUI {
  OrgGeogebraCommonMainApp_debugWithNSString_(@"App.updateCenterPanel() implementation needed");
}

- (void)toggleShowConstructionProtocolNavigation {
  [self setShowConstructionProtocolNavigationWithBoolean:![self showConsProtNavigation]];
  [self setUnsaved];
  if ([self getGuiManager] != nil) [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) updateCheckBoxesForShowConstructinProtocolNavigation];
}

- (OrgGeogebraCommonJavaxSwingGImageIcon *)wrapGetModeIconWithInt:(jint)mode {
  return nil;
}

- (jdouble)getMillisecondTime {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)updateActions {
  if ([self isUsingFullGui] && [self getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) updateActions];
  }
}

- (void)doRepaintViews {
}

- (OrgGeogebraCommonMoveGgtapiOperationsLogInOperation *)getLoginOperation {
  return loginOperation_;
}

- (id<OrgGeogebraCommonMainAlgoKimberlingWeightsInterface>)getAlgoKimberlingWeights {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)kimberlingWeightWithOrgGeogebraCommonMainAlgoKimberlingWeightsParams:(OrgGeogebraCommonMainAlgoKimberlingWeightsParams *)kw {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgGeogebraCommonMainAlgoCubicSwitchInterface>)getAlgoCubicSwitch {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)cubicSwitchWithOrgGeogebraCommonMainAlgoCubicSwitchParams:(OrgGeogebraCommonMainAlgoCubicSwitchParams *)kw {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelCommandsCommandDispatcher *)getCommandDispatcherWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)k {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)loseFocus {
  OrgGeogebraCommonMainApp_debugWithNSString_(@"Should lose focus on Web applets, ipmelment (override) only where appropriate");
}

- (jboolean)isScreenshotGenerator {
  return NO;
}

- (void)toggleMenu {
}

- (jboolean)isErrorDialogsActive {
  return isErrorDialogsActive__;
}

- (void)setErrorDialogsActiveWithBoolean:(jboolean)isErrorDialogsActive {
  self->isErrorDialogsActive__ = isErrorDialogsActive;
}

- (void)updateViewSizes {
}

- (void)persistWidthAndHeight {
}

- (OrgGeogebraCommonMainAppCompanion *)newAppCompanion {
  return [new_OrgGeogebraCommonMainAppCompanion_initWithOrgGeogebraCommonMainApp_(self) autorelease];
}

- (OrgGeogebraCommonMainAppCompanion *)getCompanion {
  return companion_;
}

- (instancetype)init {
  OrgGeogebraCommonMainApp_init(self);
  return self;
}

- (OrgGeogebraCommonPluginSensorLogger *)getSensorLogger {
  return nil;
}

- (void)registerOpenFileListenerWithOrgGeogebraCommonMainOpenFileListener:(id<OrgGeogebraCommonMainOpenFileListener>)o {
  if (openFileListener_ == nil) {
    OrgGeogebraCommonMainApp_setAndConsume_openFileListener_(self, new_JavaUtilArrayList_init());
  }
  [((JavaUtilArrayList *) nil_chk(self->openFileListener_)) addWithId:o];
}

- (void)unregisterOpenFileListenerWithOrgGeogebraCommonMainOpenFileListener:(id<OrgGeogebraCommonMainOpenFileListener>)o {
  if (openFileListener_ != nil) {
    return;
  }
  [((JavaUtilArrayList *) nil_chk(self->openFileListener_)) removeWithId:o];
}

- (void)onOpenFile {
  if (self->openFileListener_ != nil) {
    for (id<OrgGeogebraCommonMainOpenFileListener> __strong listener in openFileListener_) {
      [((id<OrgGeogebraCommonMainOpenFileListener>) nil_chk(listener)) onOpenFile];
    }
  }
}

- (jboolean)isShowingMultipleEVs {
  if ([self getGuiManager] == nil || [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getEuclidianViewCount] < 2) {
    return NO;
  }
  for (jint i = 1; i < [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getEuclidianViewCount]; i++) {
    if ([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) hasEuclidianView2WithInt:i]) {
      return YES;
    }
  }
  return NO;
}

- (void)setAllowPopupsWithBoolean:(jboolean)b {
  allowPopUps_ = b;
}

- (jboolean)isAllowPopups {
  return allowPopUps_;
}

- (void)showPopUps {
}

- (void)openSearchWithNSString:(NSString *)query {
}

- (jboolean)addMacroXMLWithNSString:(NSString *)xml {
  jboolean ok = YES;
  @try {
    [((OrgGeogebraCommonIoMyXMLio *) nil_chk([self getXMLio])) processXMLStringWithNSString:JreStrcat("$$$$$", @"<geogebra format=\"", OrgGeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_(), @"\">", xml, @"</geogebra>") withBoolean:NO withBoolean:YES];
  }
  @catch (OrgGeogebraCommonMainMyError *err) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(err)) printStackTrace];
    OrgGeogebraCommonMainApp_showErrorWithOrgGeogebraCommonMainMyError_(self, err);
    ok = NO;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    ok = NO;
    [self showErrorWithNSString:@"LoadFileFailed"];
  }
  return ok;
}

+ (void)disableCASView {
  OrgGeogebraCommonMainApp_disableCASView();
}

- (jboolean)supportsViewWithInt:(jint)viewID {
  if (viewID == OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D) {
    return OrgGeogebraCommonMainApp__3DViewEnabled_ && [self is3D];
  }
  if (viewID == OrgGeogebraCommonMainApp_VIEW_CAS) {
    return OrgGeogebraCommonMainApp_CASViewEnabled_;
  }
  return YES;
}

+ (void)disable3DView {
  OrgGeogebraCommonMainApp_disable3DView();
}

- (void)ensureTimerRunning {
}

- (void)showCustomizeToolbarGUI {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isSelectionRectangleAllowed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEnglishCommandWithNSString:(NSString *)command {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasWithOrgGeogebraCommonMainFeatureEnum:(OrgGeogebraCommonMainFeatureEnum *)f {
  return OrgGeogebraCommonMainApp_hasWithOrgGeogebraCommonMainFeatureEnum_(self, f);
}

- (jboolean)isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (![self isHTML5Applet]) {
    return NO;
  }
  else if (!OrgGeogebraCommonMainApp_hasWithOrgGeogebraCommonMainFeatureEnum_(self, OrgGeogebraCommonMainFeatureEnum_get_JLM_IN_WEB())) {
    return YES;
  }
  return tpl == OrgGeogebraCommonKernelStringTemplate_get_latexTemplateMQ_();
}

- (jint)getTubeId {
  return tubeID_;
}

- (void)setTubeIdWithInt:(jint)uniqueId {
  self->tubeID_ = uniqueId;
}

+ (jdouble)getMaxScaleForClipBoardWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)ev {
  return OrgGeogebraCommonMainApp_getMaxScaleForClipBoardWithOrgGeogebraCommonEuclidianEuclidianView_(ev);
}

- (jboolean)hasFocus {
  return YES;
}

- (jboolean)hasEuclidianViewForPlane {
  return [((OrgGeogebraCommonMainAppCompanion *) nil_chk(companion_)) hasEuclidianViewForPlane];
}

- (void)addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [((OrgGeogebraCommonMainAppCompanion *) nil_chk(companion_)) addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [((OrgGeogebraCommonMainAppCompanion *) nil_chk(companion_)) removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (jboolean)isModeValidWithInt:(jint)mode {
  return ![@"" isEqual:[self getToolNameWithInt:mode]];
}

- (void)updateKeyboard {
}

- (void)dealloc {
  RELEASE_(scriptManager_);
  RELEASE_(pf_);
  RELEASE_(traceManager_);
  RELEASE_(images_);
  RELEASE_(showInputTop__);
  RELEASE_(loginOperation_);
  RELEASE_(myXMLio_);
  RELEASE_(kernel_);
  RELEASE_(settings_);
  RELEASE_(selection_);
  RELEASE_(showAxes_);
  RELEASE_(translateCommandTable_);
  RELEASE_(commandDict_);
  RELEASE_(commandDictCAS_);
  RELEASE_(euclidianView_);
  RELEASE_(euclidianController_);
  RELEASE_(currentSelectionListener_);
  RELEASE_(subCommandDict_);
  RELEASE_(scriptingLanguage_);
  RELEASE_(kimberlingw_);
  RELEASE_(cubicw_);
  RELEASE_(storeUndoInfoForSetCoordSystem_);
  RELEASE_(eventDispatcher_);
  RELEASE_(sbOrdinal_);
  RELEASE_(version__);
  RELEASE_(savedListeners_);
  RELEASE_(macro_);
  RELEASE_(tmpPerspectives_);
  RELEASE_(propertiesView_);
  RELEASE_(random_);
  RELEASE_(geoScriptRunner_);
  RELEASE_(geoForCopyStyle_);
  RELEASE_(optionsMenu_);
  RELEASE_(companion_);
  RELEASE_(openFileListener_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonMainApp class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonMainApp_roundingMenuLookup_, nil, [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 2, 3, 4, 5, 10, 15, -1, 3, 5, 10, 15 } count:13]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonMainApp_decimalsLookup_, nil, [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 2, 3, 4, 5, -1, -1, -1, -1, 6, -1, -1, -1, -1, 7 } count:16]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonMainApp_figuresLookup_, nil, [IOSIntArray newArrayWithInts:(jint[]){ -1, -1, -1, 9, -1, 10, -1, -1, -1, -1, 11, -1, -1, -1, -1, 12 } count:16]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonMainApp_strDecimalSpacesAC_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ @"0 decimals", @"1 decimals", @"2 decimals", @"3 decimals", @"4 decimals", @"5 decimals", @"10 decimals", @"15 decimals", @"", @"3 figures", @"5 figures", @"10 figures", @"15 figures" } count:13 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonMainApp)
  }
}

+ (IOSObjectArray *)__annotations_getSelectedGeos {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setCASVersionStringWithNSString:", "setCASVersionString", "V", 0x19, NULL, NULL },
    { "getCASVersionString", NULL, "Ljava.lang.String;", 0x19, NULL, NULL },
    { "setCheckboxSizeWithInt:", "setCheckboxSize", "V", 0x1, NULL, NULL },
    { "getCheckboxSize", NULL, "I", 0x1, NULL, NULL },
    { "useJavaFontsForLaTeX", NULL, "Z", 0x1, NULL, NULL },
    { "getCapturingThresholdWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "getCapturingThreshold", "I", 0x1, NULL, NULL },
    { "setCapturingThresholdWithInt:", "setCapturingThreshold", "V", 0x1, NULL, NULL },
    { "newLowerCaseDictionary", NULL, "Lorg.geogebra.common.util.LowerCaseDictionary;", 0x4, NULL, NULL },
    { "fillCasCommandDict", NULL, "V", 0x1, NULL, NULL },
    { "getCommandDictionaryCAS", NULL, "Lorg.geogebra.common.util.LowerCaseDictionary;", 0x11, NULL, NULL },
    { "getSubCommandDictionary", NULL, "[Lorg.geogebra.common.util.LowerCaseDictionary;", 0x11, NULL, NULL },
    { "initTranslatedCommands", NULL, "V", 0x11, NULL, NULL },
    { "getCommandDictionary", NULL, "Lorg.geogebra.common.util.LowerCaseDictionary;", 0x11, NULL, NULL },
    { "fillCommandDict", NULL, "V", 0x4, NULL, NULL },
    { "putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum:withNSString:", "putInTranslateCommandTable", "V", 0x2, NULL, NULL },
    { "getReverseCommandWithNSString:", "getReverseCommand", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "updateCommandDictionary", NULL, "V", 0x1, NULL, NULL },
    { "addMacroCommands", NULL, "V", 0x4, NULL, NULL },
    { "removeMacroCommands", NULL, "V", 0x1, NULL, NULL },
    { "isApplet", NULL, "Z", 0x401, NULL, NULL },
    { "storeUndoInfo", NULL, "V", 0x401, NULL, NULL },
    { "storeUndoInfoIfSetCoordSystemOccured", NULL, "V", 0x1, NULL, NULL },
    { "setCoordSystemOccured", NULL, "V", 0x1, NULL, NULL },
    { "maySetCoordSystem", NULL, "V", 0x1, NULL, NULL },
    { "isUsingFullGui", NULL, "Z", 0x401, NULL, NULL },
    { "showViewWithInt:", "showView", "Z", 0x401, NULL, NULL },
    { "letRename", NULL, "Z", 0x1, NULL, NULL },
    { "letDelete", NULL, "Z", 0x1, NULL, NULL },
    { "letRedefine", NULL, "Z", 0x1, NULL, NULL },
    { "isBlockUpdateScripts", NULL, "Z", 0x1, NULL, NULL },
    { "setBlockUpdateScriptsWithBoolean:", "setBlockUpdateScripts", "V", 0x1, NULL, NULL },
    { "getInternalCommandWithNSString:", "getInternalCommand", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showErrorWithNSString:", "showError", "V", 0x401, NULL, NULL },
    { "showErrorDialogWithNSString:", "showErrorDialog", "V", 0x404, NULL, NULL },
    { "setUseBrowserForJavaScriptWithBoolean:", "setUseBrowserForJavaScript", "V", 0x1, NULL, NULL },
    { "useBrowserForJavaScript", NULL, "Z", 0x1, NULL, NULL },
    { "getScriptManager", NULL, "Lorg.geogebra.common.plugin.ScriptManager;", 0x401, NULL, NULL },
    { "getEventDispatcher", NULL, "Lorg.geogebra.common.plugin.EventDispatcher;", 0x1, NULL, NULL },
    { "getTraceXMLWithOrgGeogebraCommonKernelGeosGeoElement:", "getTraceXML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:", "traceToSpreadsheet", "V", 0x1, NULL, NULL },
    { "resetTraceColumnWithOrgGeogebraCommonKernelGeosGeoElement:", "resetTraceColumn", "V", 0x1, NULL, NULL },
    { "updateMaxLayerUsedWithInt:", "updateMaxLayerUsed", "V", 0x1, NULL, NULL },
    { "is3D", NULL, "Z", 0x1, NULL, NULL },
    { "getLastCreatedGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "deleteSelectedObjects", NULL, "V", 0x1, NULL, NULL },
    { "showAuxiliaryObjects", NULL, "Z", 0x1, NULL, NULL },
    { "getKeyboardXMLWithJavaLangStringBuilder:", "getKeyboardXML", "V", 0x1, NULL, NULL },
    { "freeMemoryIsCritical", NULL, "Z", 0x401, NULL, NULL },
    { "freeMemory", NULL, "J", 0x401, NULL, NULL },
    { "updateRightAngleStyle", NULL, "V", 0x1, NULL, NULL },
    { "setRightAngleStyleWithInt:", "setRightAngleStyle", "V", 0x1, NULL, NULL },
    { "setRightAngleStyleLocalDefault", NULL, "V", 0x1, NULL, NULL },
    { "getMaxLayerUsed", NULL, "I", 0x1, NULL, NULL },
    { "countPixelsWithDouble:withDouble:", "countPixels", "D", 0x1, NULL, NULL },
    { "getAlgebraView", NULL, "Lorg.geogebra.common.gui.view.algebra.AlgebraView;", 0x401, NULL, NULL },
    { "getEuclidianView1", NULL, "Lorg.geogebra.common.euclidian.EuclidianView;", 0x1, NULL, NULL },
    { "resetMaxLayerUsed", NULL, "V", 0x1, NULL, NULL },
    { "getActiveEuclidianView", NULL, "Lorg.geogebra.common.euclidian.EuclidianViewInterfaceCommon;", 0x401, NULL, NULL },
    { "hasEuclidianView3D", NULL, "Z", 0x1, NULL, NULL },
    { "isEuclidianView3Dinited", NULL, "Z", 0x1, NULL, NULL },
    { "getEuclidianView3D", NULL, "Lorg.geogebra.common.euclidian3D.EuclidianView3DInterface;", 0x1, NULL, NULL },
    { "hasEuclidianView2EitherShowingOrNotWithInt:", "hasEuclidianView2EitherShowingOrNot", "Z", 0x401, NULL, NULL },
    { "isShowingEuclidianView2WithInt:", "isShowingEuclidianView2", "Z", 0x401, NULL, NULL },
    { "getImageManager", NULL, "Lorg.geogebra.common.util.ImageManager;", 0x401, NULL, NULL },
    { "getGuiManager", NULL, "Lorg.geogebra.common.main.GuiManagerInterface;", 0x401, NULL, NULL },
    { "getDialogManager", NULL, "Lorg.geogebra.common.main.DialogManager;", 0x401, NULL, NULL },
    { "initGuiManager", NULL, "V", 0x404, NULL, NULL },
    { "printStacktraceWithId:", "printStacktrace", "V", 0x9, NULL, NULL },
    { "initializeSingularWS", NULL, "V", 0x9, NULL, NULL },
    { "debugWithNSString:", "debug", "V", 0x9, NULL, NULL },
    { "errorWithNSString:", "error", "V", 0x9, NULL, NULL },
    { "traceWithNSString:", "trace", "V", 0x9, NULL, NULL },
    { "isMacOS", NULL, "Z", 0x1, NULL, NULL },
    { "isWindows", NULL, "Z", 0x1, NULL, NULL },
    { "isWindowsVistaOrLater", NULL, "Z", 0x1, NULL, NULL },
    { "getScriptingLanguage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setScriptingLanguageWithNSString:", "setScriptingLanguage", "V", 0x1, NULL, NULL },
    { "evalJavaScriptWithOrgGeogebraCommonMainApp:withNSString:withNSString:", "evalJavaScript", "V", 0x401, NULL, NULL },
    { "fileVersionBeforeWithIntArray:", "fileVersionBefore", "Z", 0x1, NULL, NULL },
    { "setFileVersionWithNSString:", "setFileVersion", "V", 0x1, NULL, NULL },
    { "getSubValuesWithNSString:", "getSubValues", "[I", 0x19, NULL, NULL },
    { "createEuclidianView", NULL, "Lorg.geogebra.common.euclidian.EuclidianView;", 0x401, NULL, NULL },
    { "getMode", NULL, "I", 0x11, NULL, NULL },
    { "getCurrentLabelingStyle", NULL, "I", 0x1, NULL, NULL },
    { "getMD5folderLengthWithNSString:", "getMD5folderLength", "I", 0x1, NULL, NULL },
    { "getExternalImageAdapterWithNSString:withInt:withInt:", "getExternalImageAdapter", "Lorg.geogebra.common.awt.MyImage;", 0x401, NULL, NULL },
    { "isLabelDragsEnabled", NULL, "Z", 0x11, NULL, NULL },
    { "setLabelDragsEnabledWithBoolean:", "setLabelDragsEnabled", "V", 0x1, NULL, NULL },
    { "setScrollToShowWithBoolean:", "setScrollToShow", "V", 0x1, NULL, NULL },
    { "setSaved", NULL, "V", 0x1, NULL, NULL },
    { "registerSavedStateListenerWithOrgGeogebraCommonMainSavedStateListener:", "registerSavedStateListener", "V", 0x1, NULL, NULL },
    { "setUnsaved", NULL, "V", 0x1, NULL, NULL },
    { "isSaved", NULL, "Z", 0x11, NULL, NULL },
    { "setActiveViewWithInt:", "setActiveView", "V", 0x401, NULL, NULL },
    { "refreshViews", NULL, "V", 0x1, NULL, NULL },
    { "openMacroWithOrgGeogebraCommonKernelMacro:", "openMacro", "V", 0x1, NULL, NULL },
    { "openMacroWithNSString:", "openMacro", "V", 0x1, NULL, NULL },
    { "getMacro", NULL, "Lorg.geogebra.common.kernel.Macro;", 0x1, NULL, NULL },
    { "getMacroXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMacroXMLorEmpty", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hasEuclidianView2WithInt:", "hasEuclidianView2", "Z", 0x1, NULL, NULL },
    { "showErrorWithOrgGeogebraCommonMainMyError:", "showError", "V", 0x11, NULL, NULL },
    { "showErrorWithJavaLangException:withOrgGeogebraCommonUtilCommandInputField:", "showError", "V", 0x11, NULL, NULL },
    { "showCommandErrorWithNSString:withNSString:", "showCommandError", "V", 0x404, NULL, NULL },
    { "getXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showErrorWithNSString:withNSString:", "showError", "V", 0x401, NULL, NULL },
    { "getViewWithInt:", "getView", "Lorg.geogebra.common.kernel.View;", 0x1, NULL, NULL },
    { "getCompleteUserInterfaceXMLWithBoolean:", "getCompleteUserInterfaceXML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getScriptingXMLWithJavaLangStringBuilder:withBoolean:", "getScriptingXML", "V", 0x2, NULL, NULL },
    { "getSettings", NULL, "Lorg.geogebra.common.main.settings.Settings;", 0x11, NULL, NULL },
    { "getUniqueId", NULL, "Ljava.lang.String;", 0x401, NULL, NULL },
    { "setUniqueIdWithNSString:", "setUniqueId", "V", 0x401, NULL, NULL },
    { "resetUniqueId", NULL, "V", 0x401, NULL, NULL },
    { "setShowAuxiliaryObjectsWithBoolean:", "setShowAuxiliaryObjects", "V", 0x1, NULL, NULL },
    { "setLabelingStyleWithInt:", "setLabelingStyle", "V", 0x1, NULL, NULL },
    { "getLabelingStyle", NULL, "I", 0x1, NULL, NULL },
    { "getLabelingStyleForMenu", NULL, "I", 0x1, NULL, NULL },
    { "setLabelingStyleIsNotSelected", NULL, "V", 0x1, NULL, NULL },
    { "isScriptingDisabled", NULL, "Z", 0x1, NULL, NULL },
    { "setScriptingDisabledWithBoolean:", "setScriptingDisabled", "V", 0x1, NULL, NULL },
    { "isMouseWheelReversed", NULL, "Z", 0x1, NULL, NULL },
    { "reverseMouseWheelWithBoolean:", "reverseMouseWheel", "V", 0x1, NULL, NULL },
    { "setPreferredSizeWithOrgGeogebraCommonAwtGDimension:", "setPreferredSize", "V", 0x1, NULL, NULL },
    { "getTooltipTimeout", NULL, "I", 0x1, NULL, NULL },
    { "setTooltipLanguageWithNSString:", "setTooltipLanguage", "V", 0x1, NULL, NULL },
    { "getDrawEquation", NULL, "Lorg.geogebra.common.euclidian.DrawEquation;", 0x401, NULL, NULL },
    { "setTmpPerspectivesWithJavaUtilArrayList:", "setTmpPerspectives", "V", 0x1, NULL, NULL },
    { "getTmpPerspectives", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setTooltipTimeoutWithInt:", "setTooltipTimeout", "V", 0x1, NULL, NULL },
    { "getEuclidianView2WithInt:", "getEuclidianView2", "Lorg.geogebra.common.euclidian.EuclidianView;", 0x1, NULL, NULL },
    { "getWidth", NULL, "D", 0x401, NULL, NULL },
    { "getHeight", NULL, "D", 0x401, NULL, NULL },
    { "getFontCommonWithBoolean:withInt:withInt:", "getFontCommon", "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getPlainFontCommon", NULL, "Lorg.geogebra.common.awt.GFont;", 0x401, NULL, NULL },
    { "isExporting", NULL, "Z", 0x1, NULL, NULL },
    { "setShowToolBarNoUpdateWithBoolean:", "setShowToolBarNoUpdate", "V", 0x1, NULL, NULL },
    { "setShowToolBarHelpNoUpdateWithBoolean:", "setShowToolBarHelpNoUpdate", "V", 0x1, NULL, NULL },
    { "showToolBar", NULL, "Z", 0x1, NULL, NULL },
    { "showMenuBar", NULL, "Z", 0x1, NULL, NULL },
    { "setShowMenuBarWithBoolean:", "setShowMenuBar", "V", 0x1, NULL, NULL },
    { "setShowToolBarWithBoolean:", "setShowToolBar", "V", 0x1, NULL, NULL },
    { "setShowToolBarWithBoolean:withBoolean:", "setShowToolBar", "V", 0x1, NULL, NULL },
    { "getToolbarPosition", NULL, "I", 0x1, NULL, NULL },
    { "setToolbarPositionWithInt:withBoolean:", "setToolbarPosition", "V", 0x1, NULL, NULL },
    { "initKernel", NULL, "V", 0x11, NULL, NULL },
    { "initEuclidianViews", NULL, "V", 0x1, NULL, NULL },
    { "newEuclidianViewWithBooleanArray:withBoolean:", "newEuclidianView", "Lorg.geogebra.common.euclidian.EuclidianView;", 0x404, NULL, NULL },
    { "newEuclidianControllerWithOrgGeogebraCommonKernelKernel:", "newEuclidianController", "Lorg.geogebra.common.euclidian.EuclidianController;", 0x401, NULL, NULL },
    { "getUndoManagerWithOrgGeogebraCommonKernelConstruction:", "getUndoManager", "Lorg.geogebra.common.kernel.UndoManager;", 0x401, NULL, NULL },
    { "newAnimationManagerWithOrgGeogebraCommonKernelKernel:", "newAnimationManager", "Lorg.geogebra.common.kernel.AnimationManager;", 0x401, NULL, NULL },
    { "newGeoElementGraphicsAdapter", NULL, "Lorg.geogebra.common.kernel.geos.GeoElementGraphicsAdapter;", 0x401, NULL, NULL },
    { "repaintSpreadsheet", NULL, "V", 0x1, NULL, NULL },
    { "isOnTheFlyPointCreationActive", NULL, "Z", 0x11, NULL, NULL },
    { "getTraceManager", NULL, "Lorg.geogebra.common.main.SpreadsheetTraceManager;", 0x11, NULL, NULL },
    { "hasTraceManager", NULL, "Z", 0x11, NULL, NULL },
    { "hasGeoTraced", NULL, "Z", 0x11, NULL, NULL },
    { "setDefaultCursor", NULL, "V", 0x1, NULL, NULL },
    { "setWaitCursor", NULL, "V", 0x401, NULL, NULL },
    { "updateStyleBars", NULL, "V", 0x401, NULL, NULL },
    { "setMoveMode", NULL, "V", 0x1, NULL, NULL },
    { "set1rstMode", NULL, "V", 0x401, NULL, NULL },
    { "getSpreadsheetTableModel", NULL, "Lorg.geogebra.common.main.SpreadsheetTableModel;", 0x401, NULL, NULL },
    { "setModeWithInt:withOrgGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "addToEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:", "addToEuclidianView", "V", 0x1, NULL, NULL },
    { "removeFromEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:", "removeFromEuclidianView", "V", 0x1, NULL, NULL },
    { "setXMLWithNSString:withBoolean:", "setXML", "V", 0x401, NULL, NULL },
    { "getGgbApi", NULL, "Lorg.geogebra.common.plugin.GgbAPI;", 0x401, NULL, NULL },
    { "getSoundManager", NULL, "Lorg.geogebra.common.sound.SoundManager;", 0x401, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x11, NULL, NULL },
    { "isRightClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "isRightClick", "Z", 0x1, NULL, NULL },
    { "isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "isControlDown", "Z", 0x1, NULL, NULL },
    { "isMiddleClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "isMiddleClick", "Z", 0x1, NULL, NULL },
    { "showAlgebraInput", NULL, "Z", 0x401, NULL, NULL },
    { "getGlobalKeyDispatcher", NULL, "Lorg.geogebra.common.main.GlobalKeyDispatcher;", 0x401, NULL, NULL },
    { "callAppletJavaScriptWithNSString:withNSObjectArray:", "callAppletJavaScript", "V", 0x401, NULL, NULL },
    { "geoElementSelectedWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "geoElementSelected", "V", 0x1, NULL, NULL },
    { "setPropertiesViewWithOrgGeogebraCommonGuiViewPropertiesPropertiesView:", "setPropertiesView", "V", 0x1, NULL, NULL },
    { "setSelectionListenerModeWithOrgGeogebraCommonMainGeoElementSelectionListener:", "setSelectionListenerMode", "V", 0x1, NULL, NULL },
    { "updateSelectionWithBoolean:", "updateSelection", "V", 0x1, NULL, NULL },
    { "setPropertiesViewPanelWithOrgGeogebraCommonMainOptionTypeEnum:", "setPropertiesViewPanel", "V", 0x1, NULL, NULL },
    { "isIniting", NULL, "Z", 0x1, NULL, NULL },
    { "isShiftDragZoomEnabled", NULL, "Z", 0x11, NULL, NULL },
    { "setShiftDragZoomEnabledWithBoolean:", "setShiftDragZoomEnabled", "V", 0x11, NULL, NULL },
    { "updateMenubar", NULL, "V", 0x401, NULL, NULL },
    { "getFontSize", NULL, "I", 0x1, NULL, NULL },
    { "setFontSizeWithInt:", "setFontSize", "V", 0x1, NULL, NULL },
    { "setFontSizeWithInt:withBoolean:", "setFontSize", "V", 0x1, NULL, NULL },
    { "updateUI", NULL, "V", 0x401, NULL, NULL },
    { "resetFonts", NULL, "V", 0x11, NULL, NULL },
    { "getGUIFontSize", NULL, "I", 0x1, NULL, NULL },
    { "setGUIFontSizeWithInt:", "setGUIFontSize", "V", 0x1, NULL, NULL },
    { "getFontManager", NULL, "Lorg.geogebra.common.main.FontManager;", 0x404, NULL, NULL },
    { "getFontCanDisplayWithNSString:", "getFontCanDisplay", "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontCanDisplayWithNSString:withInt:", "getFontCanDisplay", "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontCanDisplayWithNSString:withBoolean:withInt:withInt:", "getFontCanDisplay", "Lorg.geogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getGuiXMLWithBoolean:", "getGuiXML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getConsProtocolXMLWithJavaLangStringBuilder:", "getConsProtocolXML", "V", 0x11, NULL, NULL },
    { "getWindowWidth", NULL, "I", 0x404, NULL, NULL },
    { "getWindowHeight", NULL, "I", 0x404, NULL, NULL },
    { "getWindowLayoutXMLWithJavaLangStringBuilder:withBoolean:", "getWindowLayoutXML", "V", 0x4, NULL, NULL },
    { "getLayoutXMLWithJavaLangStringBuilder:withBoolean:", "getLayoutXML", "V", 0x404, NULL, NULL },
    { "reset", NULL, "V", 0x401, NULL, NULL },
    { "getCurrentSelectionListener", NULL, "Lorg.geogebra.common.main.GeoElementSelectionListener;", 0x1, NULL, NULL },
    { "setCurrentSelectionListenerWithOrgGeogebraCommonMainGeoElementSelectionListener:", "setCurrentSelectionListener", "V", 0x1, NULL, NULL },
    { "setShowResetIconWithBoolean:", "setShowResetIcon", "V", 0x1, NULL, NULL },
    { "showResetIcon", NULL, "Z", 0x11, NULL, NULL },
    { "isUndoActive", NULL, "Z", 0x1, NULL, NULL },
    { "isHTML5Applet", NULL, "Z", 0x401, NULL, NULL },
    { "isExam", NULL, "Z", 0x1, NULL, NULL },
    { "setOnTheFlyPointCreationActiveWithBoolean:", "setOnTheFlyPointCreationActive", "V", 0x11, NULL, NULL },
    { "setUseTransparentCursorWhenDraggingWithBoolean:", "setUseTransparentCursorWhenDragging", "V", 0x1, NULL, NULL },
    { "getPreferredFormulaRenderingType", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNodeConstants$StringType;", 0x401, NULL, NULL },
    { "doAfterRedefineWithOrgGeogebraCommonKernelGeosGeoElement:", "doAfterRedefine", "V", 0x1, NULL, NULL },
    { "showURLinBrowserWithNSString:", "showURLinBrowser", "V", 0x401, NULL, NULL },
    { "uploadToGeoGebraTube", NULL, "V", 0x401, NULL, NULL },
    { "getUseFullGui", NULL, "Z", 0x1, NULL, NULL },
    { "setUndoActiveWithBoolean:", "setUndoActive", "V", 0x1, NULL, NULL },
    { "isFullAppGui", NULL, "Z", 0x9, NULL, NULL },
    { "getAppCanvasWidth", NULL, "I", 0x1, NULL, NULL },
    { "getAppCanvasHeight", NULL, "I", 0x1, NULL, NULL },
    { "getInternalImageAdapterWithNSString:", "getInternalImageAdapter", "Lorg.geogebra.common.awt.GImage;", 0x1, NULL, NULL },
    { "showInputTop", NULL, "Z", 0x1, NULL, NULL },
    { "getInputPosition", NULL, "Lorg.geogebra.common.main.App$InputPositon;", 0x1, NULL, NULL },
    { "setShowInputTopWithBoolean:withBoolean:", "setShowInputTop", "V", 0x1, NULL, NULL },
    { "setInputPositonWithOrgGeogebraCommonMainApp_InputPositonEnum:withBoolean:", "setInputPositon", "V", 0x1, NULL, NULL },
    { "showInputHelpToggle", NULL, "Z", 0x1, NULL, NULL },
    { "setShowInputHelpToggleWithBoolean:", "setShowInputHelpToggle", "V", 0x1, NULL, NULL },
    { "updateApplicationLayout", NULL, "V", 0x401, NULL, NULL },
    { "getToolNameOrHelpWithInt:withBoolean:", "getToolNameOrHelp", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getToolNameWithInt:", "getToolName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getToolHelpWithInt:", "getToolHelp", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFunctionWithNSString:", "getFunction", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getParserFunctions", NULL, "Lorg.geogebra.common.kernel.parser.cashandlers.ParserFunctions;", 0x1, NULL, NULL },
    { "clearConstruction", NULL, "Z", 0x401, NULL, NULL },
    { "createNewWindow", NULL, "V", 0x401, NULL, NULL },
    { "fileNew", NULL, "V", 0x401, NULL, NULL },
    { "getCountryFromGeoIP", NULL, "Ljava.lang.String;", 0x401, "Ljava.lang.Exception;", NULL },
    { "getRandomNumber", NULL, "D", 0x1, NULL, NULL },
    { "getRandomIntegerBetweenWithDouble:withDouble:", "getRandomIntegerBetween", "I", 0x1, NULL, NULL },
    { "setRandomSeedWithInt:", "setRandomSeed", "V", 0x1, NULL, NULL },
    { "loadXMLWithNSString:", "loadXML", "Z", 0x401, "Ljava.lang.Exception;", NULL },
    { "copyGraphicsViewToClipboard", NULL, "V", 0x401, NULL, NULL },
    { "copyBase64ToClipboard", NULL, "V", 0x401, NULL, NULL },
    { "setStandardView", NULL, "V", 0x11, NULL, NULL },
    { "exitAll", NULL, "V", 0x401, NULL, NULL },
    { "addMenuItemWithOrgGeogebraCommonGuiMenubarMenuInterface:withNSString:withNSString:withBoolean:withOrgGeogebraCommonGuiMenubarMenuInterface:", "addMenuItem", "V", 0x401, NULL, NULL },
    { "getVersionString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNormalizer", NULL, "Lorg.geogebra.common.util.NormalizerMinimal;", 0x401, NULL, NULL },
    { "getEmptyIconFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "zoomWithDouble:withDouble:withDouble:", "zoom", "V", 0x11, NULL, NULL },
    { "zoomAxesRatioWithDouble:", "zoomAxesRatio", "V", 0x11, NULL, NULL },
    { "setViewShowAllObjects", NULL, "V", 0x11, NULL, NULL },
    { "setRightClickEnabledWithBoolean:", "setRightClickEnabled", "V", 0x1, NULL, NULL },
    { "isRightClickEnabled", NULL, "Z", 0x11, NULL, NULL },
    { "letShowPopupMenu", NULL, "Z", 0x11, NULL, NULL },
    { "letShowPropertiesDialog", NULL, "Z", 0x11, NULL, NULL },
    { "getPreferencesXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "runScriptsWithOrgGeogebraCommonKernelGeosGeoElement:withNSString:", "runScripts", "V", 0x401, NULL, NULL },
    { "createScriptWithOrgGeogebraCommonPluginScriptTypeEnum:withNSString:withBoolean:", "createScript", "Lorg.geogebra.common.plugin.script.Script;", 0x1, NULL, NULL },
    { "startGeoScriptRunner", NULL, "V", 0x1, NULL, NULL },
    { "showRelationWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "showRelation", "V", 0x1, NULL, NULL },
    { "getGeoForCopyStyle", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoForCopyStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeoForCopyStyle", "V", 0x1, NULL, NULL },
    { "getCASFactory", NULL, "Lorg.geogebra.common.factories.CASFactory;", 0x401, NULL, NULL },
    { "getSwingFactory", NULL, "Lorg.geogebra.common.factories.SwingFactory;", 0x401, NULL, NULL },
    { "getFactory", NULL, "Lorg.geogebra.common.factories.Factory;", 0x401, NULL, NULL },
    { "dispatchEventWithOrgGeogebraCommonPluginEvent:", "dispatchEvent", "V", 0x1, NULL, NULL },
    { "getOptionsMenuWithOrgGeogebraCommonGuiMenubarMenuFactory:", "getOptionsMenu", "Lorg.geogebra.common.gui.menubar.OptionsMenu;", 0x1, NULL, NULL },
    { "hasOptionsMenu", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLio", NULL, "Lorg.geogebra.common.io.MyXMLio;", 0x401, NULL, NULL },
    { "createXMLioWithOrgGeogebraCommonKernelConstruction:", "createXMLio", "Lorg.geogebra.common.io.MyXMLio;", 0x401, NULL, NULL },
    { "hasEventDispatcher", NULL, "Z", 0x1, NULL, NULL },
    { "scheduleUpdateConstruction", NULL, "V", 0x1, NULL, NULL },
    { "setShowAlgebraInputWithBoolean:withBoolean:", "setShowAlgebraInput", "V", 0x1, NULL, NULL },
    { "setNeedsSpreadsheetTableModel", NULL, "V", 0x1, NULL, NULL },
    { "needsSpreadsheetTableModel", NULL, "Z", 0x1, NULL, NULL },
    { "setAppletWidthWithInt:", "setAppletWidth", "V", 0x1, NULL, NULL },
    { "setAppletHeightWithInt:", "setAppletHeight", "V", 0x1, NULL, NULL },
    { "getAppletWidth", NULL, "I", 0x11, NULL, NULL },
    { "getAppletHeight", NULL, "I", 0x1, NULL, NULL },
    { "startCollectingRepaints", NULL, "V", 0x1, NULL, NULL },
    { "stopCollectingRepaints", NULL, "V", 0x1, NULL, NULL },
    { "getLocalization", NULL, "Lorg.geogebra.common.main.Localization;", 0x401, NULL, NULL },
    { "getMenuWithNSString:", "getMenu", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPlainWithNSString:", "getPlain", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getSelectedGeos", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "getSelectionManager", NULL, "Lorg.geogebra.common.main.SelectionManager;", 0x1, NULL, NULL },
    { "getToolTooltipHTMLWithInt:", "getToolTooltipHTML", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "resetPen", NULL, "V", 0x1, NULL, NULL },
    { "getShowCPNavNeedsUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "showConsProtNavigation", NULL, "Z", 0x1, NULL, NULL },
    { "setShowConstructionProtocolNavigationWithBoolean:withBoolean:withDouble:withBoolean:", "setShowConstructionProtocolNavigation", "V", 0x1, NULL, NULL },
    { "setShowConstructionProtocolNavigationWithBoolean:", "setShowConstructionProtocolNavigation", "V", 0x1, NULL, NULL },
    { "updateCenterPanelWithBoolean:", "updateCenterPanel", "V", 0x1, NULL, NULL },
    { "toggleShowConstructionProtocolNavigation", NULL, "V", 0x1, NULL, NULL },
    { "wrapGetModeIconWithInt:", "wrapGetModeIcon", "Lorg.geogebra.common.javax.swing.GImageIcon;", 0x1, NULL, NULL },
    { "getMillisecondTime", NULL, "D", 0x401, NULL, NULL },
    { "updateActions", NULL, "V", 0x1, NULL, NULL },
    { "doRepaintViews", NULL, "V", 0x1, NULL, NULL },
    { "getLoginOperation", NULL, "Lorg.geogebra.common.move.ggtapi.operations.LogInOperation;", 0x1, NULL, NULL },
    { "getAlgoKimberlingWeights", NULL, "Lorg.geogebra.common.main.AlgoKimberlingWeightsInterface;", 0x401, NULL, NULL },
    { "kimberlingWeightWithOrgGeogebraCommonMainAlgoKimberlingWeightsParams:", "kimberlingWeight", "D", 0x401, NULL, NULL },
    { "getAlgoCubicSwitch", NULL, "Lorg.geogebra.common.main.AlgoCubicSwitchInterface;", 0x401, NULL, NULL },
    { "cubicSwitchWithOrgGeogebraCommonMainAlgoCubicSwitchParams:", "cubicSwitch", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "getCommandDispatcherWithOrgGeogebraCommonKernelKernel:", "getCommandDispatcher", "Lorg.geogebra.common.kernel.commands.CommandDispatcher;", 0x401, NULL, NULL },
    { "loseFocus", NULL, "V", 0x1, NULL, NULL },
    { "isScreenshotGenerator", NULL, "Z", 0x1, NULL, NULL },
    { "toggleMenu", NULL, "V", 0x1, NULL, NULL },
    { "isErrorDialogsActive", NULL, "Z", 0x11, NULL, NULL },
    { "setErrorDialogsActiveWithBoolean:", "setErrorDialogsActive", "V", 0x11, NULL, NULL },
    { "updateViewSizes", NULL, "V", 0x1, NULL, NULL },
    { "persistWidthAndHeight", NULL, "V", 0x1, NULL, NULL },
    { "newAppCompanion", NULL, "Lorg.geogebra.common.main.AppCompanion;", 0x4, NULL, NULL },
    { "getCompanion", NULL, "Lorg.geogebra.common.main.AppCompanion;", 0x1, NULL, NULL },
    { "init", "App", NULL, 0x1, NULL, NULL },
    { "getSensorLogger", NULL, "Lorg.geogebra.common.plugin.SensorLogger;", 0x1, NULL, NULL },
    { "registerOpenFileListenerWithOrgGeogebraCommonMainOpenFileListener:", "registerOpenFileListener", "V", 0x1, NULL, NULL },
    { "unregisterOpenFileListenerWithOrgGeogebraCommonMainOpenFileListener:", "unregisterOpenFileListener", "V", 0x1, NULL, NULL },
    { "onOpenFile", NULL, "V", 0x4, NULL, NULL },
    { "isShowingMultipleEVs", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowPopupsWithBoolean:", "setAllowPopups", "V", 0x1, NULL, NULL },
    { "isAllowPopups", NULL, "Z", 0x1, NULL, NULL },
    { "showPopUps", NULL, "V", 0x1, NULL, NULL },
    { "openSearchWithNSString:", "openSearch", "V", 0x1, NULL, NULL },
    { "addMacroXMLWithNSString:", "addMacroXML", "Z", 0x1, NULL, NULL },
    { "disableCASView", NULL, "V", 0x9, NULL, NULL },
    { "supportsViewWithInt:", "supportsView", "Z", 0x1, NULL, NULL },
    { "disable3DView", NULL, "V", 0x9, NULL, NULL },
    { "ensureTimerRunning", NULL, "V", 0x1, NULL, NULL },
    { "showCustomizeToolbarGUI", NULL, "V", 0x401, NULL, NULL },
    { "isSelectionRectangleAllowed", NULL, "Z", 0x401, NULL, NULL },
    { "getEnglishCommandWithNSString:", "getEnglishCommand", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "hasWithOrgGeogebraCommonMainFeatureEnum:", "has", "Z", 0x11, NULL, NULL },
    { "isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:", "isLatexMathQuillStyle", "Z", 0x11, NULL, NULL },
    { "getTubeId", NULL, "I", 0x11, NULL, NULL },
    { "setTubeIdWithInt:", "setTubeId", "V", 0x11, NULL, NULL },
    { "getMaxScaleForClipBoardWithOrgGeogebraCommonEuclidianEuclidianView:", "getMaxScaleForClipBoard", "D", 0x9, NULL, NULL },
    { "hasFocus", NULL, "Z", 0x1, NULL, NULL },
    { "hasEuclidianViewForPlane", NULL, "Z", 0x11, NULL, NULL },
    { "addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:", "addToViewsForPlane", "V", 0x11, NULL, NULL },
    { "removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:", "removeFromViewsForPlane", "V", 0x11, NULL, NULL },
    { "isModeValidWithInt:", "isModeValid", "Z", 0x1, NULL, NULL },
    { "updateKeyboard", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "scriptManager_", NULL, 0x4, "Lorg.geogebra.common.plugin.ScriptManager;", NULL, NULL,  },
    { "hasFullPermissions_", NULL, 0xc, "Z", &OrgGeogebraCommonMainApp_hasFullPermissions_, NULL,  },
    { "isSaved__", "isSaved", 0x4, "Z", NULL, NULL,  },
    { "WIKI_OPERATORS_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonMainApp_WIKI_OPERATORS_, NULL,  },
    { "WIKI_MANUAL_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonMainApp_WIKI_MANUAL_, NULL,  },
    { "WIKI_CAS_VIEW_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonMainApp_WIKI_CAS_VIEW_, NULL,  },
    { "WIKI_TUTORIAL_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonMainApp_WIKI_TUTORIAL_, NULL,  },
    { "WIKI_EXPORT_WORKSHEET_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonMainApp_WIKI_EXPORT_WORKSHEET_, NULL,  },
    { "WIKI_ADVANCED_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonMainApp_WIKI_ADVANCED_, NULL,  },
    { "WIKI_TEXT_TOOL_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonMainApp_WIKI_TEXT_TOOL_, NULL,  },
    { "VIEW_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_NONE },
    { "VIEW_EUCLIDIAN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN },
    { "VIEW_ALGEBRA_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_ALGEBRA },
    { "VIEW_SPREADSHEET_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_SPREADSHEET },
    { "VIEW_CAS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_CAS },
    { "VIEW_EUCLIDIAN2_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2 },
    { "VIEW_CONSTRUCTION_PROTOCOL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_CONSTRUCTION_PROTOCOL },
    { "VIEW_PROBABILITY_CALCULATOR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR },
    { "VIEW_DATA_ANALYSIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_DATA_ANALYSIS },
    { "VIEW_FUNCTION_INSPECTOR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_FUNCTION_INSPECTOR },
    { "VIEW_EUCLIDIAN3D_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D },
    { "VIEW_EVENT_DISPATCHER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_EVENT_DISPATCHER },
    { "VIEW_EUCLIDIAN_FOR_PLANE_START_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN_FOR_PLANE_START },
    { "VIEW_EUCLIDIAN_FOR_PLANE_END_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN_FOR_PLANE_END },
    { "VIEW_PLOT_PANEL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_PLOT_PANEL },
    { "VIEW_TEXT_PREVIEW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_TEXT_PREVIEW },
    { "VIEW_PROPERTIES_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_PROPERTIES },
    { "VIEW_ASSIGNMENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_ASSIGNMENT },
    { "VIEW_TABLE_MODEL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_TABLE_MODEL },
    { "VIEW_DATA_COLLECTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_VIEW_DATA_COLLECTION },
    { "showResetIcon__", "showResetIcon", 0x2, "Z", NULL, NULL,  },
    { "runningInFrame_", NULL, 0x1, "Z", NULL, NULL,  },
    { "pf_", NULL, 0x2, "Lorg.geogebra.common.kernel.parser.cashandlers.ParserFunctions;", NULL, NULL,  },
    { "traceManager_", NULL, 0x2, "Lorg.geogebra.common.main.SpreadsheetTraceManager;", NULL, NULL,  },
    { "DEFAULT_THRESHOLD_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_DEFAULT_THRESHOLD },
    { "capturingThreshold_", NULL, 0x2, "I", NULL, NULL,  },
    { "capturingThresholdTouch_", NULL, 0x2, "I", NULL, NULL,  },
    { "images_", NULL, 0x1, "Ljava.util.Vector;", NULL, "Ljava/util/Vector<Lorg/geogebra/common/kernel/geos/GeoImage;>;",  },
    { "showInputTop__", "showInputTop", 0x4, "Lorg.geogebra.common.main.App$InputPositon;", NULL, NULL,  },
    { "showAlgebraInput__", "showAlgebraInput", 0x4, "Z", NULL, NULL,  },
    { "showToolBarTop_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showToolBarHelp_", NULL, 0x4, "Z", NULL, NULL,  },
    { "toolbarPosition_", NULL, 0x4, "I", NULL, NULL,  },
    { "showInputHelpToggle__", "showInputHelpToggle", 0x4, "Z", NULL, NULL,  },
    { "showAuxiliaryObjects__", "showAuxiliaryObjects", 0x1, "Z", NULL, NULL,  },
    { "rightClickEnabled_", NULL, 0x4, "Z", NULL, NULL,  },
    { "exporting_", NULL, 0x1, "Z", NULL, NULL,  },
    { "CASVersionString_", NULL, 0xa, "Ljava.lang.String;", &OrgGeogebraCommonMainApp_CASVersionString_, NULL,  },
    { "loginOperation_", NULL, 0x4, "Lorg.geogebra.common.move.ggtapi.operations.LogInOperation;", NULL, NULL,  },
    { "myXMLio_", NULL, 0x4, "Lorg.geogebra.common.io.MyXMLio;", NULL, NULL,  },
    { "MIN_FONT_SIZE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_MIN_FONT_SIZE },
    { "guiFontSize_", NULL, 0x4, "I", NULL, NULL,  },
    { "appFontSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "maxLayerUsed_", NULL, 0x2, "I", NULL, NULL,  },
    { "booleanSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "rightAngleStyle_", NULL, 0x1, "I", NULL, NULL,  },
    { "useJavaFontsForLaTeX__", "useJavaFontsForLaTeX", 0x1, "Z", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "isOnTheFlyPointCreationActive__", "isOnTheFlyPointCreationActive", 0x4, "Z", NULL, NULL,  },
    { "settings_", NULL, 0x4, "Lorg.geogebra.common.main.settings.Settings;", NULL, NULL,  },
    { "selection_", NULL, 0x4, "Lorg.geogebra.common.main.SelectionManager;", NULL, NULL,  },
    { "antialiasing_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showAxes_", NULL, 0x14, "[Z", NULL, NULL,  },
    { "showGrid_", NULL, 0x4, "Z", NULL, NULL,  },
    { "initing_", NULL, 0x4, "Z", NULL, NULL,  },
    { "labelDragsEnabled_", NULL, 0x2, "Z", NULL, NULL,  },
    { "SPREADSHEET_INI_COLS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_SPREADSHEET_INI_COLS },
    { "SPREADSHEET_INI_ROWS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonMainApp_SPREADSHEET_INI_ROWS },
    { "translateCommandTable_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;",  },
    { "commandDict_", NULL, 0x2, "Lorg.geogebra.common.util.LowerCaseDictionary;", NULL, NULL,  },
    { "commandDictCAS_", NULL, 0x2, "Lorg.geogebra.common.util.LowerCaseDictionary;", NULL, NULL,  },
    { "euclidianView_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "euclidianController_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "currentSelectionListener_", NULL, 0x4, "Lorg.geogebra.common.main.GeoElementSelectionListener;", NULL, NULL,  },
    { "showMenuBar__", "showMenuBar", 0x4, "Z", NULL, NULL,  },
    { "subCommandDict_", NULL, 0x2, "[Lorg.geogebra.common.util.LowerCaseDictionary;", NULL, NULL,  },
    { "scriptingLanguage_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "kimberlingw_", NULL, 0x1, "Lorg.geogebra.common.main.AlgoKimberlingWeightsInterface;", NULL, NULL,  },
    { "cubicw_", NULL, 0x1, "Lorg.geogebra.common.main.AlgoCubicSwitchInterface;", NULL, NULL,  },
    { "storeUndoInfoForSetCoordSystem_", NULL, 0x2, "Lorg.geogebra.common.main.App$StoreUndoInfoForSetCoordSystem;", NULL, NULL,  },
    { "blockUpdateScripts_", NULL, 0x2, "Z", NULL, NULL,  },
    { "useBrowserForJavaScript__", "useBrowserForJavaScript", 0x2, "Z", NULL, NULL,  },
    { "eventDispatcher_", NULL, 0x2, "Lorg.geogebra.common.plugin.EventDispatcher;", NULL, NULL,  },
    { "roundingMenuLookup_", NULL, 0x19, "[I", &OrgGeogebraCommonMainApp_roundingMenuLookup_, NULL,  },
    { "decimalsLookup_", NULL, 0x19, "[I", &OrgGeogebraCommonMainApp_decimalsLookup_, NULL,  },
    { "figuresLookup_", NULL, 0x19, "[I", &OrgGeogebraCommonMainApp_figuresLookup_, NULL,  },
    { "strDecimalSpacesAC_", NULL, 0x19, "[Ljava.lang.String;", &OrgGeogebraCommonMainApp_strDecimalSpacesAC_, NULL,  },
    { "sbOrdinal_", NULL, 0x0, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "singularWS_", NULL, 0x9, "Lorg.geogebra.common.cas.singularws.SingularWebService;", &OrgGeogebraCommonMainApp_singularWS_, NULL,  },
    { "version__", "version", 0x2, "[I", NULL, NULL,  },
    { "savedListeners_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/geogebra/common/main/SavedStateListener;>;",  },
    { "macro_", NULL, 0x2, "Lorg.geogebra.common.kernel.Macro;", NULL, NULL,  },
    { "labelingStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "labelingStyleSelected_", NULL, 0x2, "Z", NULL, NULL,  },
    { "scriptingDisabled_", NULL, 0x2, "Z", NULL, NULL,  },
    { "reverseMouseWheel__", "reverseMouseWheel", 0x2, "Z", NULL, NULL,  },
    { "tmpPerspectives_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/io/layout/Perspective;>;",  },
    { "showToolBar__", "showToolBar", 0x4, "Z", NULL, NULL,  },
    { "propertiesView_", NULL, 0x2, "Lorg.geogebra.common.gui.view.properties.PropertiesView;", NULL, NULL,  },
    { "shiftDragZoomEnabled_", NULL, 0x4, "Z", NULL, NULL,  },
    { "useTransparentCursorWhenDragging_", NULL, 0x1, "Z", NULL, NULL,  },
    { "appletWidth_", NULL, 0x4, "I", NULL, NULL,  },
    { "appletHeight_", NULL, 0x4, "I", NULL, NULL,  },
    { "useFullGui_", NULL, 0x4, "Z", NULL, NULL,  },
    { "useFullAppGui_", NULL, 0xc, "Z", &OrgGeogebraCommonMainApp_useFullAppGui_, NULL,  },
    { "appCanvasHeight_", NULL, 0x4, "I", NULL, NULL,  },
    { "appCanvasWidth_", NULL, 0x4, "I", NULL, NULL,  },
    { "random_", NULL, 0x2, "Ljava.util.Random;", NULL, NULL,  },
    { "geoScriptRunner_", NULL, 0x2, "Lorg.geogebra.common.plugin.GeoScriptRunner;", NULL, NULL,  },
    { "geoForCopyStyle_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "optionsMenu_", NULL, 0x2, "Lorg.geogebra.common.gui.menubar.OptionsMenu;", NULL, NULL,  },
    { "needsSpreadsheetTableModel__", "needsSpreadsheetTableModel", 0x4, "Z", NULL, NULL,  },
    { "showConstProtNavigationNeedsUpdate_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showConsProtNavigation__", "showConsProtNavigation", 0x4, "Z", NULL, NULL,  },
    { "isErrorDialogsActive__", "isErrorDialogsActive", 0x2, "Z", NULL, NULL,  },
    { "companion_", NULL, 0x4, "Lorg.geogebra.common.main.AppCompanion;", NULL, NULL,  },
    { "openFileListener_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/main/OpenFileListener;>;",  },
    { "allowPopUps_", NULL, 0x2, "Z", NULL, NULL,  },
    { "CASViewEnabled_", NULL, 0xa, "Z", &OrgGeogebraCommonMainApp_CASViewEnabled_, NULL,  },
    { "_3DViewEnabled_", NULL, 0xa, "Z", &OrgGeogebraCommonMainApp__3DViewEnabled_, NULL,  },
    { "prerelease_", NULL, 0x4, "Z", NULL, NULL,  },
    { "canary_", NULL, 0x4, "Z", NULL, NULL,  },
    { "tubeID_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.main.App$InputPositon;", "Lorg.geogebra.common.main.App$StoreUndoInfoForSetCoordSystem;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonMainApp = { 2, "App", "org.geogebra.common.main", NULL, 0x401, 344, methods, 123, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonMainApp;
}

@end

void OrgGeogebraCommonMainApp_setCASVersionStringWithNSString_(NSString *string) {
  OrgGeogebraCommonMainApp_initialize();
  JreStrongAssign(&OrgGeogebraCommonMainApp_CASVersionString_, nil, string);
}

NSString *OrgGeogebraCommonMainApp_getCASVersionString() {
  OrgGeogebraCommonMainApp_initialize();
  return OrgGeogebraCommonMainApp_CASVersionString_;
}

void OrgGeogebraCommonMainApp_initTranslatedCommands(OrgGeogebraCommonMainApp *self) {
  if ([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isCommandNull] || self->subCommandDict_ == nil) {
    [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) initCommand];
    [self fillCommandDict];
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) updateLocalAxesNames];
  }
}

void OrgGeogebraCommonMainApp_putInTranslateCommandTableWithOrgGeogebraCommonKernelCommandsCommandsEnum_withNSString_(OrgGeogebraCommonMainApp *self, OrgGeogebraCommonKernelCommandsCommandsEnum *comm, NSString *local) {
  NSString *internal = [((OrgGeogebraCommonKernelCommandsCommandsEnum *) nil_chk(comm)) name];
  if (![((JavaUtilHashMap *) nil_chk(self->translateCommandTable_)) containsKeyWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(internal)]) {
    [self->translateCommandTable_ putWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(internal) withId:[((OrgGeogebraCommonKernelCommandsCommandsEnum *) nil_chk(OrgGeogebraCommonKernelCommandsCommandsEnum_englishToInternalWithOrgGeogebraCommonKernelCommandsCommandsEnum_(comm))) name]];
  }
  if ([comm getTable] == OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_ENGLISH) {
    return;
  }
  if (local != nil) {
    [self->translateCommandTable_ putWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(local) withId:[((OrgGeogebraCommonKernelCommandsCommandsEnum *) nil_chk(OrgGeogebraCommonKernelCommandsCommandsEnum_englishToInternalWithOrgGeogebraCommonKernelCommandsCommandsEnum_(comm))) name]];
  }
}

void OrgGeogebraCommonMainApp_printStacktraceWithId_(id message) {
  OrgGeogebraCommonMainApp_initialize();
  if (OrgGeogebraCommonUtilDebugLog_get_logger_() != nil) {
    [OrgGeogebraCommonUtilDebugLog_get_logger_() printStacktraceWithNSString:message == nil ? @"null" : [message description]];
  }
  @try {
    @throw [new_JavaLangException_initWithNSString_(message == nil ? @"null" : [message description]) autorelease];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void OrgGeogebraCommonMainApp_initializeSingularWS() {
  OrgGeogebraCommonMainApp_initialize();
  JreStrongAssignAndConsume(&OrgGeogebraCommonMainApp_singularWS_, nil, new_OrgGeogebraCommonCasSingularwsSingularWebService_init());
  [OrgGeogebraCommonMainApp_singularWS_ enable];
  if ([OrgGeogebraCommonMainApp_singularWS_ isAvailable]) {
    OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"SingularWS is available at ", [OrgGeogebraCommonMainApp_singularWS_ getConnectionSite]));
  }
  else {
    OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$$", @"No SingularWS is available at ", [OrgGeogebraCommonMainApp_singularWS_ getConnectionSite], @" (yet)"));
  }
}

void OrgGeogebraCommonMainApp_debugWithNSString_(NSString *s) {
  OrgGeogebraCommonMainApp_initialize();
  OrgGeogebraCommonUtilDebugLog_debugWithNSString_withInt_(s, 5);
}

void OrgGeogebraCommonMainApp_errorWithNSString_(NSString *s) {
  OrgGeogebraCommonMainApp_initialize();
  OrgGeogebraCommonUtilDebugLog_errorWithNSString_withInt_(s, 5);
}

void OrgGeogebraCommonMainApp_traceWithNSString_(NSString *string) {
  OrgGeogebraCommonMainApp_initialize();
  OrgGeogebraCommonUtilDebugLog_traceWithNSString_(string);
}

IOSIntArray *OrgGeogebraCommonMainApp_getSubValuesWithNSString_(NSString *version_) {
  OrgGeogebraCommonMainApp_initialize();
  IOSObjectArray *values = [((NSString *) nil_chk(version_)) split:@"\\."];
  IOSIntArray *ret = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(values))->size_];
  for (jint i = 0; i < values->size_; i++) {
    *IOSIntArray_GetRef(ret, i) = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(values, i));
  }
  return ret;
}

void OrgGeogebraCommonMainApp_showErrorWithOrgGeogebraCommonMainMyError_(OrgGeogebraCommonMainApp *self, OrgGeogebraCommonMainMyError *e) {
  NSString *command = [((OrgGeogebraCommonMainMyError *) nil_chk(e)) getcommandName];
  NSString *message = [e getLocalizedMessage];
  if (command == nil) {
    [self showErrorDialogWithNSString:message];
    return;
  }
  [self showCommandErrorWithNSString:command withNSString:message];
}

void OrgGeogebraCommonMainApp_getScriptingXMLWithJavaLangStringBuilder_withBoolean_(OrgGeogebraCommonMainApp *self, JavaLangStringBuilder *sb, jboolean asPreference) {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<scripting"];
  if ([self getScriptingLanguage] != nil) {
    [sb appendWithNSString:@" language=\""];
    [sb appendWithNSString:[self getScriptingLanguage]];
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@" blocked=\""];
  [sb appendWithBoolean:[self isBlockUpdateScripts]];
  if (!asPreference) {
    [sb appendWithNSString:@"\" disabled=\""];
    [sb appendWithBoolean:[self isScriptingDisabled]];
  }
  [sb appendWithNSString:@"\"/>\n"];
}

OrgGeogebraCommonMainSettingsSettings *OrgGeogebraCommonMainApp_getSettings(OrgGeogebraCommonMainApp *self) {
  return self->settings_;
}

OrgGeogebraCommonMainSpreadsheetTraceManager *OrgGeogebraCommonMainApp_getTraceManager(OrgGeogebraCommonMainApp *self) {
  if (self->traceManager_ == nil) OrgGeogebraCommonMainApp_setAndConsume_traceManager_(self, new_OrgGeogebraCommonMainSpreadsheetTraceManager_initWithOrgGeogebraCommonMainApp_(self));
  return self->traceManager_;
}

OrgGeogebraCommonKernelKernel *OrgGeogebraCommonMainApp_getKernel(OrgGeogebraCommonMainApp *self) {
  return self->kernel_;
}

void OrgGeogebraCommonMainApp_resetFonts(OrgGeogebraCommonMainApp *self) {
  [((OrgGeogebraCommonMainAppCompanion *) nil_chk(self->companion_)) resetFonts];
}

void OrgGeogebraCommonMainApp_getConsProtocolXMLWithJavaLangStringBuilder_(OrgGeogebraCommonMainApp *self, JavaLangStringBuilder *sb) {
  if ([self getGuiManager] == nil) {
    return;
  }
  if ([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) isUsingConstructionProtocol]) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self getGuiManager])) getConsProtocolXMLWithJavaLangStringBuilder:sb];
  }
}

jboolean OrgGeogebraCommonMainApp_isFullAppGui() {
  OrgGeogebraCommonMainApp_initialize();
  return OrgGeogebraCommonMainApp_useFullAppGui_;
}

NSString *OrgGeogebraCommonMainApp_getPlainWithNSString_(OrgGeogebraCommonMainApp *self, NSString *key) {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) getPlainWithNSString:key];
}

void OrgGeogebraCommonMainApp_init(OrgGeogebraCommonMainApp *self) {
  NSObject_init(self);
  OrgGeogebraCommonMainApp_set_scriptManager_(self, nil);
  self->isSaved__ = YES;
  self->showResetIcon__ = NO;
  self->runningInFrame_ = NO;
  OrgGeogebraCommonMainApp_setAndConsume_pf_(self, new_OrgGeogebraCommonKernelParserCashandlersParserFunctions_init());
  self->capturingThreshold_ = OrgGeogebraCommonMainApp_DEFAULT_THRESHOLD;
  self->capturingThresholdTouch_ = 3 * OrgGeogebraCommonMainApp_DEFAULT_THRESHOLD;
  OrgGeogebraCommonMainApp_setAndConsume_images_(self, new_JavaUtilVector_init());
  OrgGeogebraCommonMainApp_set_showInputTop__(self, OrgGeogebraCommonMainApp_InputPositonEnum_get_algebraView());
  self->showAlgebraInput__ = YES;
  self->showToolBarTop_ = YES;
  self->showToolBarHelp_ = NO;
  self->toolbarPosition_ = 1;
  self->showInputHelpToggle__ = YES;
  self->showAuxiliaryObjects__ = NO;
  self->rightClickEnabled_ = YES;
  self->exporting_ = NO;
  OrgGeogebraCommonMainApp_set_loginOperation_(self, nil);
  self->guiFontSize_ = -1;
  self->maxLayerUsed_ = 0;
  self->booleanSize_ = 26;
  self->rightAngleStyle_ = OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_SQUARE;
  self->useJavaFontsForLaTeX__ = NO;
  self->isOnTheFlyPointCreationActive__ = YES;
  self->antialiasing_ = YES;
  OrgGeogebraCommonMainApp_setAndConsume_showAxes_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2]);
  self->showGrid_ = NO;
  self->initing_ = NO;
  self->labelDragsEnabled_ = YES;
  self->showMenuBar__ = YES;
  OrgGeogebraCommonMainApp_set_kimberlingw_(self, nil);
  OrgGeogebraCommonMainApp_set_cubicw_(self, nil);
  OrgGeogebraCommonMainApp_set_storeUndoInfoForSetCoordSystem_(self, OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_get_NONE());
  self->blockUpdateScripts_ = NO;
  self->useBrowserForJavaScript__ = YES;
  OrgGeogebraCommonMainApp_set_version__(self, nil);
  OrgGeogebraCommonMainApp_setAndConsume_savedListeners_(self, new_JavaUtilArrayList_init());
  self->labelingStyle_ = OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_POINTS_ONLY;
  self->labelingStyleSelected_ = YES;
  self->scriptingDisabled_ = NO;
  self->reverseMouseWheel__ = YES;
  OrgGeogebraCommonMainApp_setAndConsume_tmpPerspectives_(self, new_JavaUtilArrayList_init());
  self->showToolBar__ = YES;
  self->shiftDragZoomEnabled_ = YES;
  self->useTransparentCursorWhenDragging_ = NO;
  self->appletWidth_ = 0;
  self->appletHeight_ = 0;
  self->useFullGui_ = NO;
  OrgGeogebraCommonMainApp_setAndConsume_random_(self, new_JavaUtilRandom_init());
  self->needsSpreadsheetTableModel__ = NO;
  self->showConstProtNavigationNeedsUpdate_ = NO;
  self->showConsProtNavigation__ = NO;
  self->isErrorDialogsActive__ = YES;
  self->allowPopUps_ = NO;
  self->tubeID_ = 0;
  OrgGeogebraCommonMainApp_set_companion_(self, [self newAppCompanion]);
}

void OrgGeogebraCommonMainApp_disableCASView() {
  OrgGeogebraCommonMainApp_initialize();
  OrgGeogebraCommonMainApp_printStacktraceWithId_(@"");
  OrgGeogebraCommonMainApp_CASViewEnabled_ = NO;
}

void OrgGeogebraCommonMainApp_disable3DView() {
  OrgGeogebraCommonMainApp_initialize();
  OrgGeogebraCommonMainApp__3DViewEnabled_ = NO;
}

jboolean OrgGeogebraCommonMainApp_hasWithOrgGeogebraCommonMainFeatureEnum_(OrgGeogebraCommonMainApp *self, OrgGeogebraCommonMainFeatureEnum *f) {
  switch ([f ordinal]) {
    case OrgGeogebraCommonMainFeature_SEQUENTIAL_COLORS:
    case OrgGeogebraCommonMainFeature_DATA_COLLECTION:
    return self->canary_;
    case OrgGeogebraCommonMainFeature_ALL_LANGUAGES:
    case OrgGeogebraCommonMainFeature_AV_EXTENSIONS:
    case OrgGeogebraCommonMainFeature_CAS_EDITOR:
    case OrgGeogebraCommonMainFeature_DELETE_IN_ALGEBRA:
    case OrgGeogebraCommonMainFeature_EXERCISES:
    case OrgGeogebraCommonMainFeature_IMPLICIT_CURVES:
    case OrgGeogebraCommonMainFeature_JLM_IN_WEB:
    case OrgGeogebraCommonMainFeature_KOREAN_KEYBOARD:
    case OrgGeogebraCommonMainFeature_LOCALSTORAGE_FILES:
    case OrgGeogebraCommonMainFeature_POLYGON_TRIANGULATION:
    case OrgGeogebraCommonMainFeature_SF_DRAG:
    case OrgGeogebraCommonMainFeature_TOOL_EDITOR:
    case OrgGeogebraCommonMainFeature_TUBE_BETA:
    case OrgGeogebraCommonMainFeature_ADD_NEW_OBJECT_BUTTON:
    return self->prerelease_;
    default:
    return NO;
  }
}

jdouble OrgGeogebraCommonMainApp_getMaxScaleForClipBoardWithOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonEuclidianEuclidianView *ev) {
  OrgGeogebraCommonMainApp_initialize();
  jdouble size = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) getExportWidth] * [ev getExportHeight];
  if (size > 500000) {
    return 2.0 * JavaLangMath_sqrtWithDouble_(500000 / size);
  }
  return 2.0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainApp)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonMainApp_InputPositonEnum)

OrgGeogebraCommonMainApp_InputPositonEnum *OrgGeogebraCommonMainApp_InputPositonEnum_values_[3];

@implementation OrgGeogebraCommonMainApp_InputPositonEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonMainApp_InputPositonEnum_values() {
  OrgGeogebraCommonMainApp_InputPositonEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonMainApp_InputPositonEnum_values_ count:3 type:OrgGeogebraCommonMainApp_InputPositonEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonMainApp_InputPositonEnum_values();
}

+ (OrgGeogebraCommonMainApp_InputPositonEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonMainApp_InputPositonEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonMainApp_InputPositonEnum *OrgGeogebraCommonMainApp_InputPositonEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonMainApp_InputPositonEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonMainApp_InputPositonEnum *e = OrgGeogebraCommonMainApp_InputPositonEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonMainApp_InputPositonEnum class]) {
    OrgGeogebraCommonMainApp_InputPositonEnum_algebraView = new_OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(@"algebraView", 0);
    OrgGeogebraCommonMainApp_InputPositonEnum_top = new_OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(@"top", 1);
    OrgGeogebraCommonMainApp_InputPositonEnum_bottom = new_OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(@"bottom", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonMainApp_InputPositonEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "algebraView", "algebraView", 0x4019, "Lorg.geogebra.common.main.App$InputPositon;", &OrgGeogebraCommonMainApp_InputPositonEnum_algebraView, NULL,  },
    { "top", "top", 0x4019, "Lorg.geogebra.common.main.App$InputPositon;", &OrgGeogebraCommonMainApp_InputPositonEnum_top, NULL,  },
    { "bottom", "bottom", 0x4019, "Lorg.geogebra.common.main.App$InputPositon;", &OrgGeogebraCommonMainApp_InputPositonEnum_bottom, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.main.App$InputPositon;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonMainApp_InputPositonEnum = { 2, "InputPositon", "org.geogebra.common.main", "App", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/main/App$InputPositon;>;" };
  return &_OrgGeogebraCommonMainApp_InputPositonEnum;
}

@end

void OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(OrgGeogebraCommonMainApp_InputPositonEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonMainApp_InputPositonEnum *new_OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonMainApp_InputPositonEnum *self = [OrgGeogebraCommonMainApp_InputPositonEnum alloc];
  OrgGeogebraCommonMainApp_InputPositonEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainApp_InputPositonEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum)

OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values_[3];

@implementation OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values() {
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values_ count:3 type:OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values();
}

+ (OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *e = OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum class]) {
    OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_MAY_SET_COORD_SYSTEM = new_OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(@"MAY_SET_COORD_SYSTEM", 0);
    OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_SET_COORD_SYSTEM_OCCURED = new_OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(@"SET_COORD_SYSTEM_OCCURED", 1);
    OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_NONE = new_OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(@"NONE", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "MAY_SET_COORD_SYSTEM", "MAY_SET_COORD_SYSTEM", 0x4019, "Lorg.geogebra.common.main.App$StoreUndoInfoForSetCoordSystem;", &OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_MAY_SET_COORD_SYSTEM, NULL,  },
    { "SET_COORD_SYSTEM_OCCURED", "SET_COORD_SYSTEM_OCCURED", 0x4019, "Lorg.geogebra.common.main.App$StoreUndoInfoForSetCoordSystem;", &OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_SET_COORD_SYSTEM_OCCURED, NULL,  },
    { "NONE", "NONE", 0x4019, "Lorg.geogebra.common.main.App$StoreUndoInfoForSetCoordSystem;", &OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_NONE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.main.App$StoreUndoInfoForSetCoordSystem;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum = { 2, "StoreUndoInfoForSetCoordSystem", "org.geogebra.common.main", "App", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/main/App$StoreUndoInfoForSetCoordSystem;>;" };
  return &_OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum;
}

@end

void OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *new_OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum *self = [OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum alloc];
  OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainApp_StoreUndoInfoForSetCoordSystemEnum)
