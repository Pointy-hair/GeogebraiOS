//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/main/AppCompanion.java
//


#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/gui/layout/DockPanel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/commands/CommandsConstants.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/ViewCreator.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/AppCompanion.h"
#include "org/geogebra/common/main/FontManager.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/settings/Settings.h"

@implementation OrgGeogebraCommonMainAppCompanion

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonMainAppCompanion_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (OrgGeogebraCommonKernelKernel *)newKernel {
  return new_OrgGeogebraCommonKernelKernel_initWithOrgGeogebraCommonMainApp_(app_);
}

- (jboolean)tableVisibleWithInt:(jint)table {
  return !(table == OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_CAS || table == OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_3D || table == OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_ENGLISH);
}

- (void)getEuclidianViewXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                         withBoolean:(jboolean)asPreference {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1])) getXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1]) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([app_ getEuclidianView2WithInt:1])) getXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  }
}

- (OrgGeogebraCommonEuclidianEuclidianViewCompanion *)createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:(id<OrgGeogebraCommonKernelKernelNDViewCreator>)plane
                                                                                                                    withBoolean:(jboolean)panelSettings {
  return nil;
}

- (void)storeViewCreators {
}

- (void)recallViewCreators {
}

- (void)resetEuclidianViewForPlaneIds {
}

- (id<OrgGeogebraCommonGuiLayoutDockPanel>)createEuclidianDockPanelForPlaneWithInt:(jint)id_
                                                                      withNSString:(NSString *)plane {
  return nil;
}

- (OrgGeogebraCommonMainSettingsSettings *)newSettings {
  return new_OrgGeogebraCommonMainSettingsSettings_initWithInt_(2);
}

- (void)resetFonts {
  [((OrgGeogebraCommonMainFontManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getFontManager])) setFontSizeWithInt:[app_ getGUIFontSize]];
  if (app_->euclidianView_ != nil) {
    [app_->euclidianView_ updateFonts];
  }
  if ([app_ getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) updateFonts];
    if ([app_ hasEuclidianView2WithInt:1]) {
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([app_ getEuclidianView2WithInt:1])) updateFonts];
    }
  }
}

- (jboolean)hasEuclidianViewForPlane {
  return NO;
}

- (void)addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "AppCompanion", NULL, 0x1, NULL, NULL },
    { "newKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "tableVisibleWithInt:", "tableVisible", "Z", 0x4, NULL, NULL },
    { "getEuclidianViewXMLWithJavaLangStringBuilder:withBoolean:", "getEuclidianViewXML", "V", 0x1, NULL, NULL },
    { "createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:withBoolean:", "createEuclidianViewForPlane", "Lorg.geogebra.common.euclidian.EuclidianViewCompanion;", 0x1, NULL, NULL },
    { "storeViewCreators", NULL, "V", 0x1, NULL, NULL },
    { "recallViewCreators", NULL, "V", 0x1, NULL, NULL },
    { "resetEuclidianViewForPlaneIds", NULL, "V", 0x1, NULL, NULL },
    { "createEuclidianDockPanelForPlaneWithInt:withNSString:", "createEuclidianDockPanelForPlane", "Lorg.geogebra.common.gui.layout.DockPanel;", 0x1, NULL, NULL },
    { "newSettings", NULL, "Lorg.geogebra.common.main.settings.Settings;", 0x1, NULL, NULL },
    { "resetFonts", NULL, "V", 0x1, NULL, NULL },
    { "hasEuclidianViewForPlane", NULL, "Z", 0x1, NULL, NULL },
    { "addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:", "addToViewsForPlane", "V", 0x1, NULL, NULL },
    { "removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:", "removeFromViewsForPlane", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x4, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonMainAppCompanion = { 2, "AppCompanion", "org.geogebra.common.main", NULL, 0x1, 14, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonMainAppCompanion;
}

@end

void OrgGeogebraCommonMainAppCompanion_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainAppCompanion *self, OrgGeogebraCommonMainApp *app) {
  (void) NSObject_init(self);
  self->app_ = app;
}

OrgGeogebraCommonMainAppCompanion *new_OrgGeogebraCommonMainAppCompanion_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonMainAppCompanion *self = [OrgGeogebraCommonMainAppCompanion alloc];
  OrgGeogebraCommonMainAppCompanion_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainAppCompanion)
