//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/main/SpreadsheetTraceManager.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/gui/view/spreadsheet/CopyPasteCut.h"
#include "org/geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "org/geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/SpreadsheetTraceable.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/SpreadsheetTableModel.h"
#include "org/geogebra/common/main/SpreadsheetTraceManager.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/SpreadsheetTraceSettings.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonMainSpreadsheetTraceManager () {
 @public
  OrgGeogebraCommonMainApp *app_;
  OrgGeogebraCommonKernelKernel *kernel_;
  JavaUtilHashSet *storedTraces_;
  jboolean collectingTraces_;
  jboolean doShiftCellsUp_;
  IOSDoubleArray *coords_;
}

- (jint)getHighestTraceColumn;

- (void)togglePauseTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                   withOrgGeogebraCommonUtilSpreadsheetTraceSettings:(OrgGeogebraCommonUtilSpreadsheetTraceSettings *)t;

- (void)clearAllTraceColumns;

- (void)traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                  withOrgGeogebraCommonUtilSpreadsheetTraceSettings:(OrgGeogebraCommonUtilSpreadsheetTraceSettings *)t;

- (void)createTraceListCellWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                           withInt:(jint)column
                                                           withInt:(jint)row;

- (void)updateTraceListCellWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                           withInt:(jint)column
                                                           withInt:(jint)row
                                             withJavaUtilArrayList:(JavaUtilArrayList *)values
                                                           withInt:(jint)index;

- (void)clearTraceListCellWithInt:(jint)column
                          withInt:(jint)row;

- (void)getCurrentTraceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                           withJavaUtilArrayList:(JavaUtilArrayList *)trace;

- (void)setHeaderWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                   withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSpreadsheetTraceManager, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSpreadsheetTraceManager, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSpreadsheetTraceManager, storedTraces_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSpreadsheetTraceManager, coords_, IOSDoubleArray *)

__attribute__((unused)) static jint OrgGeogebraCommonMainSpreadsheetTraceManager_getHighestTraceColumn(OrgGeogebraCommonMainSpreadsheetTraceManager *self);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTraceManager_togglePauseTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonUtilSpreadsheetTraceSettings *t);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonUtilSpreadsheetTraceSettings *t);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTraceManager_createTraceListCellWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelConstruction *cons, jint column, jint row);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTraceManager_updateTraceListCellWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_withJavaUtilArrayList_withInt_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *geo, jint column, jint row, JavaUtilArrayList *values, jint index);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTraceManager_clearTraceListCellWithInt_withInt_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, jint column, jint row);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTraceManager_getCurrentTraceWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, JavaUtilArrayList *trace);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTraceManager_setHeaderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelConstruction *cons);

@implementation OrgGeogebraCommonMainSpreadsheetTraceManager

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonMainSpreadsheetTraceManager_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)addSpreadsheetTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)spreadsheetTraceable {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(spreadsheetTraceable)) getTraceSettings];
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
  if (((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ == -1) {
    t->traceColumn1_ = [self getNextTraceColumn];
  }
  if (t->doTraceGeoCopy_) {
    t->traceColumn2_ = t->traceColumn1_;
  }
  else {
    JavaUtilArrayList *traceList = new_JavaUtilArrayList_init();
    [spreadsheetTraceable addToSpreadsheetTraceListWithJavaUtilArrayList:traceList];
    t->traceColumn2_ = t->traceColumn1_ + [traceList size] - 1;
  }
  if (t->traceRow1_ == -1) {
    t->traceRow1_ = 0;
  }
  t->headerOffset_ = 0;
  if (t->showLabel_) ++t->headerOffset_;
  if (t->showTraceList_) ++t->headerOffset_;
  if (t->doRowLimit_) {
    t->traceRow2_ = t->traceRow1_ + t->numRows_ - 1 + t->headerOffset_;
  }
  else {
    t->traceRow2_ = OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_VISIBLE_();
  }
  t->tracingRow_ = t->traceRow1_;
  [((JavaUtilArrayList *) nil_chk(t->lastTrace_)) clear];
  (void) [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) putWithId:spreadsheetTraceable withId:t];
  [spreadsheetTraceable setSpreadsheetTraceWithBoolean:YES];
  [self clearGeoTraceColumnsWithOrgGeogebraCommonKernelGeosGeoElement:spreadsheetTraceable];
  if (t->showTraceList_) {
    for (jint column = t->traceColumn1_; column <= t->traceColumn2_; column++) {
      OrgGeogebraCommonMainSpreadsheetTraceManager_createTraceListCellWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, column, t->traceRow1_);
    }
  }
  OrgGeogebraCommonMainSpreadsheetTraceManager_setHeaderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelConstruction_(self, spreadsheetTraceable, cons);
  [app_ repaintSpreadsheet];
}

- (void)updateTraceSettingsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == nil) return;
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
  OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app_, ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_, t->traceRow1_, t->traceColumn2_, OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_VISIBLE_(), OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
  [self addSpreadsheetTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)clearGeoTraceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == nil) return;
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
  [self clearGeoTraceColumnsWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES];
  for (jint column = ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_; column <= t->traceColumn2_; column++) OrgGeogebraCommonMainSpreadsheetTraceManager_clearTraceListCellWithInt_withInt_(self, column, t->traceRow1_);
  t->tracingRow_ = t->traceRow1_;
}

- (void)removeSpreadsheetTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) containsKeyWithId:geo]) return;
  (void) [traceGeoCollection_ removeWithId:geo];
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) repaintSpreadsheet];
}

- (void)removeAllSpreadsheetTraceGeos {
  [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) clear];
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) repaintSpreadsheet];
}

- (void)loadTraceGeoCollection {
  [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) clear];
  JavaUtilTreeSet *ts = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction])) getGeoSetConstructionOrder];
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(ts)) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetTrace]) {
      (void) [traceGeoCollection_ putWithId:geo withId:[geo getTraceSettings]];
    }
  }
  [app_ repaintSpreadsheet];
}

- (jint)getNextTraceColumn {
  return JavaLangMath_maxWithInt_withInt_([((OrgGeogebraCommonMainSpreadsheetTableModel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSpreadsheetTableModel])) getHighestUsedColumn], OrgGeogebraCommonMainSpreadsheetTraceManager_getHighestTraceColumn(self)) + 1;
}

- (jint)getHighestTraceColumn {
  return OrgGeogebraCommonMainSpreadsheetTraceManager_getHighestTraceColumn(self);
}

- (jboolean)isTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) containsKeyWithId:geo];
}

- (jboolean)isTraceColumnWithInt:(jint)column {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = new_OrgGeogebraCommonUtilSpreadsheetTraceSettings_init();
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    if (column >= ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column <= t->traceColumn2_) return YES;
  }
  return NO;
}

- (OrgGeogebraCommonUtilSpreadsheetTraceSettings *)getTraceSettingsWithInt:(jint)column {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    if (column >= ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column <= t->traceColumn2_) return t;
  }
  return nil;
}

- (JavaUtilArrayList *)getTraceGeoList {
  JavaUtilArrayList *traceGeoList = new_JavaUtilArrayList_init();
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    [traceGeoList addWithId:geo];
  }
  return traceGeoList;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getTraceGeoWithInt:(jint)column {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = new_OrgGeogebraCommonUtilSpreadsheetTraceSettings_init();
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    if (column >= ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column <= t->traceColumn2_) return geo;
  }
  return nil;
}

- (void)togglePauseTraceGeoWithInt:(jint)column {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    if (column >= ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column <= t->traceColumn2_) {
      OrgGeogebraCommonMainSpreadsheetTraceManager_togglePauseTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
      return;
    }
  }
}

- (void)togglePauseTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                   withOrgGeogebraCommonUtilSpreadsheetTraceSettings:(OrgGeogebraCommonUtilSpreadsheetTraceSettings *)t {
  OrgGeogebraCommonMainSpreadsheetTraceManager_togglePauseTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
}

- (void)pauseAllTracesWithBoolean:(jboolean)pause {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->pause_ = pause;
    if (!t->pause_) {
      OrgGeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
    }
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getFirstTraceGeo {
  if ([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) isEmpty]) {
    return nil;
  }
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk([((id<JavaUtilSet>) nil_chk([traceGeoCollection_ keySet])) toArray]), 0), [OrgGeogebraCommonKernelGeosGeoElement class]);
}

- (OrgGeogebraCommonUtilSpreadsheetTraceSettings *)getTraceSettingsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) getWithId:geo];
}

- (void)clearAllTraceColumns {
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    [self clearGeoTraceColumnsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)clearGeoTraceColumnsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self clearGeoTraceColumnsWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:NO];
}

- (void)clearGeoTraceColumnsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                          withBoolean:(jboolean)keepHeader {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
  if (t == nil) return;
  jint row1 = ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceRow1_;
  if (keepHeader) row1 += t->headerOffset_;
  OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app_, t->traceColumn1_, row1, t->traceColumn2_, OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_VISIBLE_(), OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
}

- (void)handleColumnDeleteWithInt:(jint)column1
                          withInt:(jint)column2 {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
    if (column2 >= ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column1 <= t->traceColumn2_) {
      OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
      OrgGeogebraCommonMainSpreadsheetTraceManager_setHeaderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelConstruction_(self, geo, cons);
      t->tracingRow_ = 0;
    }
  }
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) repaintSpreadsheet];
}

- (void)handleColumnDeleteWithInt:(jint)column1
                          withInt:(jint)row1
                          withInt:(jint)column2
                          withInt:(jint)row2 {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
    if (column2 >= ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column1 <= t->traceColumn2_) {
      if (row1 < row2 && row1 < t->headerOffset_) {
        OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
        OrgGeogebraCommonMainSpreadsheetTraceManager_setHeaderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelConstruction_(self, geo, cons);
      }
      if (row2 >= t->tracingRow_ - 1 + t->headerOffset_) {
        t->tracingRow_ = row1 - t->headerOffset_;
        if (t->tracingRow_ <= 0) {
          t->tracingRow_ = 0;
        }
        else {
          jboolean emptyCells = YES;
          jint row = t->tracingRow_ + t->headerOffset_;
          do {
            row--;
            jint col = t->traceColumn1_;
            do {
              OrgGeogebraCommonKernelGeosGeoElement *cell = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
              if (cell != nil) {
                emptyCells = NO;
              }
              col++;
            }
            while (emptyCells && col <= t->traceColumn2_);
          }
          while (emptyCells && row >= t->headerOffset_);
          t->tracingRow_ = row + 1 - t->headerOffset_;
        }
      }
    }
  }
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) repaintSpreadsheet];
}

- (OrgGeogebraCommonUtilSpreadsheetTraceSettings *)getDefaultTraceSettings {
  return new_OrgGeogebraCommonUtilSpreadsheetTraceSettings_init();
}

- (void)setNeedsColumnResetWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                         withBoolean:(jboolean)flag {
  if (![((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) containsKeyWithId:geo]) return;
  ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([traceGeoCollection_ getWithId:geo]))->needsColumnReset_ = flag;
}

- (NSString *)getTraceXMLWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:@"\t<spreadsheetTrace val=\"true\""];
  (void) [sb appendWithNSString:@" traceColumn1=\""];
  (void) [sb appendWithInt:((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" traceColumn2=\""];
  (void) [sb appendWithInt:t->traceColumn2_];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" traceRow1=\""];
  (void) [sb appendWithInt:t->traceRow1_];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" traceRow2=\""];
  (void) [sb appendWithInt:t->traceRow2_];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" tracingRow=\""];
  (void) [sb appendWithInt:t->tracingRow_];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" numRows=\""];
  (void) [sb appendWithInt:t->numRows_];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" headerOffset=\""];
  (void) [sb appendWithInt:t->headerOffset_];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" doColumnReset=\""];
  (void) [sb appendWithNSString:t->doColumnReset_ ? @"true" : @"false"];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" doRowLimit=\""];
  (void) [sb appendWithNSString:t->doRowLimit_ ? @"true" : @"false"];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" showLabel=\""];
  (void) [sb appendWithNSString:t->showLabel_ ? @"true" : @"false"];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" showTraceList=\""];
  (void) [sb appendWithNSString:t->showTraceList_ ? @"true" : @"false"];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@" doTraceGeoCopy=\""];
  (void) [sb appendWithNSString:t->doTraceGeoCopy_ ? @"true" : @"false"];
  (void) [sb appendWithNSString:@"\""];
  if (t->pause_) {
    (void) [sb appendWithNSString:@" pause=\"true\""];
  }
  (void) [sb appendWithNSString:@"/>\n"];
  return [sb description];
}

- (void)startCollectingSpreadsheetTraces {
  collectingTraces_ = YES;
  [((JavaUtilHashSet *) nil_chk(storedTraces_)) clear];
}

- (void)stopCollectingSpreadsheetTraces {
  collectingTraces_ = NO;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(storedTraces_)) {
    [self traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  [storedTraces_ clear];
}

- (void)traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isViewReiniting]) return;
  if (![((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) containsKeyWithId:geo]) return;
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [traceGeoCollection_ getWithId:geo];
  if (((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->pause_) {
    return;
  }
  OrgGeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
}

- (void)traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                  withOrgGeogebraCommonUtilSpreadsheetTraceSettings:(OrgGeogebraCommonUtilSpreadsheetTraceSettings *)t {
  OrgGeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
}

- (jboolean)setGeoTraceRowWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                            withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                              withJavaUtilArrayList:(JavaUtilArrayList *)traceArray
                                                            withInt:(jint)row {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) getWithId:geo];
  jint column = ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_;
  jint traceIndex = 0;
  IOSObjectArray *geos = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoElements];
  if (t->doTraceGeoCopy_) {
    [self setTraceCellAsGeoCopyWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:geo withInt:t->traceColumn1_ withInt:row];
    return YES;
  }
  if (traceArray == nil) {
    traceArray = new_JavaUtilArrayList_init();
    [traceArray addWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NaN)];
    [traceArray addWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NaN)];
  }
  JavaUtilArrayList *traceList = new_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
    if ([OrgGeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
      id<OrgGeogebraCommonKernelGeosSpreadsheetTraceable> traceGeo = (id<OrgGeogebraCommonKernelGeosSpreadsheetTraceable>) check_protocol_cast(IOSObjectArray_Get(geos, i), @protocol(OrgGeogebraCommonKernelGeosSpreadsheetTraceable));
      [traceList clear];
      [((id<OrgGeogebraCommonKernelGeosSpreadsheetTraceable>) nil_chk(traceGeo)) addToSpreadsheetTraceListWithJavaUtilArrayList:traceList];
      for (jint j = 0; j < [traceList size]; j++) {
        [self setTraceCellWithOrgGeogebraCommonKernelConstruction:cons withInt:column withInt:row withId:[((JavaUtilArrayList *) nil_chk(traceArray)) getWithInt:traceIndex] withOrgGeogebraCommonPluginGeoClassEnum:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk([traceList getWithInt:j])) isGeoAngle] ? OrgGeogebraCommonPluginGeoClassEnum_get_ANGLE() : OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
        ++column;
        ++traceIndex;
      }
    }
    else {
      OrgGeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$@", @"not SpreadsheetTraceable ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) getGeoClassType]));
    }
  }
  return NO;
}

- (void)setTraceCellAsGeoCopyWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                           withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                             withInt:(jint)column
                                                             withInt:(jint)row {
  OrgGeogebraCommonKernelGeosGeoElement *cell = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, column, row);
  @try {
    if (cell == nil || ![((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([cell getGeoClassType])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType]]) {
      cell = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) deepCopyGeo];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) setLabelWithNSString:OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row)];
      [cell setAllVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES];
      [cell setSpreadsheetTraceWithBoolean:NO];
      [cell setTraceSettingsWithOrgGeogebraCommonUtilSpreadsheetTraceSettings:nil];
      [cell setAuxiliaryObjectWithBoolean:YES];
      [cell setLabelVisibleWithBoolean:NO];
      if ([cell isGeoText]) [cell setEuclidianVisibleWithBoolean:NO];
    }
    else {
      [cell setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) updateCascade];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (void)setTraceCellWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                    withInt:(jint)column
                                                    withInt:(jint)row
                                                     withId:(id)value
                    withOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)geoClassType {
  OrgGeogebraCommonKernelGeosGeoElement *cell = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(app_, column, row);
  jboolean isUpdateCell = cell != nil && [((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([cell getGeoClassType])) isEqual:geoClassType];
  if (isUpdateCell) {
    switch ([geoClassType ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_NUMERIC:
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(cell, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]))) doubleValue]];
      break;
      case OrgGeogebraCommonPluginGeoClass_ANGLE:
      [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(((OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast(cell, [OrgGeogebraCommonKernelGeosGeoAngle class])))) setValueWithDouble:[((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]))) doubleValue]];
      break;
      case OrgGeogebraCommonPluginGeoClass_TEXT:
      [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(cell, [OrgGeogebraCommonKernelGeosGeoText class])))) setTextStringWithNSString:(NSString *) check_class_cast(value, [NSString class])];
      break;
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) updateCascade];
  }
  else {
    if (cell != nil) OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app_, column, row, column, row, OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
    NSString *cellName = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row);
    switch ([geoClassType ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_NUMERIC:
      cell = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(cons, cellName, [((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]))) doubleValue]);
      break;
      case OrgGeogebraCommonPluginGeoClass_ANGLE:
      cell = new_OrgGeogebraCommonKernelGeosGeoAngle_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(cons, cellName, [((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]))) doubleValue]);
      break;
      case OrgGeogebraCommonPluginGeoClass_TEXT:
      cell = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(cons, cellName, (NSString *) check_class_cast(value, [NSString class]));
      break;
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) setEuclidianVisibleWithBoolean:NO];
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) setAuxiliaryObjectWithBoolean:YES];
}

- (void)createTraceListCellWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                           withInt:(jint)column
                                                           withInt:(jint)row {
  OrgGeogebraCommonMainSpreadsheetTraceManager_createTraceListCellWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, column, row);
}

- (void)updateTraceListCellWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                           withInt:(jint)column
                                                           withInt:(jint)row
                                             withJavaUtilArrayList:(JavaUtilArrayList *)values
                                                           withInt:(jint)index {
  OrgGeogebraCommonMainSpreadsheetTraceManager_updateTraceListCellWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_withJavaUtilArrayList_withInt_(self, cons, geo, column, row, values, index);
}

- (void)clearTraceListCellWithInt:(jint)column
                          withInt:(jint)row {
  OrgGeogebraCommonMainSpreadsheetTraceManager_clearTraceListCellWithInt_withInt_(self, column, row);
}

- (void)getCurrentTraceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                           withJavaUtilArrayList:(JavaUtilArrayList *)trace {
  OrgGeogebraCommonMainSpreadsheetTraceManager_getCurrentTraceWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_(self, geo, trace);
}

- (jboolean)addElementTraceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                             withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withJavaUtilArrayList:(JavaUtilArrayList *)currentTrace {
  if ([OrgGeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:geo]) {
    id<OrgGeogebraCommonKernelGeosSpreadsheetTraceable> traceGeo = (id<OrgGeogebraCommonKernelGeosSpreadsheetTraceable>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosSpreadsheetTraceable));
    JavaUtilArrayList *traceList = new_JavaUtilArrayList_init();
    [((id<OrgGeogebraCommonKernelGeosSpreadsheetTraceable>) nil_chk(traceGeo)) addToSpreadsheetTraceListWithJavaUtilArrayList:traceList];
    for (jint i = 0; i < [traceList size]; i++) {
      [((JavaUtilArrayList *) nil_chk(currentTrace)) addWithId:JavaLangDouble_valueOfWithDouble_([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk([traceList getWithInt:i])) getValue])];
    }
  }
  return NO;
}

- (void)setHeaderWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                   withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonMainSpreadsheetTraceManager_setHeaderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelConstruction_(self, geo, cons);
}

- (jboolean)hasGeoTraced {
  return ![((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) isEmpty];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "SpreadsheetTraceManager", NULL, 0x1, NULL, NULL },
    { "addSpreadsheetTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "addSpreadsheetTraceGeo", "V", 0x1, NULL, NULL },
    { "updateTraceSettingsWithOrgGeogebraCommonKernelGeosGeoElement:", "updateTraceSettings", "V", 0x1, NULL, NULL },
    { "clearGeoTraceWithOrgGeogebraCommonKernelGeosGeoElement:", "clearGeoTrace", "V", 0x1, NULL, NULL },
    { "removeSpreadsheetTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "removeSpreadsheetTraceGeo", "V", 0x1, NULL, NULL },
    { "removeAllSpreadsheetTraceGeos", NULL, "V", 0x1, NULL, NULL },
    { "loadTraceGeoCollection", NULL, "V", 0x1, NULL, NULL },
    { "getNextTraceColumn", NULL, "I", 0x1, NULL, NULL },
    { "getHighestTraceColumn", NULL, "I", 0x2, NULL, NULL },
    { "isTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "isTraceGeo", "Z", 0x1, NULL, NULL },
    { "isTraceColumnWithInt:", "isTraceColumn", "Z", 0x1, NULL, NULL },
    { "getTraceSettingsWithInt:", "getTraceSettings", "Lorg.geogebra.common.util.SpreadsheetTraceSettings;", 0x1, NULL, NULL },
    { "getTraceGeoList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getTraceGeoWithInt:", "getTraceGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "togglePauseTraceGeoWithInt:", "togglePauseTraceGeo", "V", 0x1, NULL, NULL },
    { "togglePauseTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonUtilSpreadsheetTraceSettings:", "togglePauseTraceGeo", "V", 0x2, NULL, NULL },
    { "pauseAllTracesWithBoolean:", "pauseAllTraces", "V", 0x1, NULL, NULL },
    { "getFirstTraceGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getTraceSettingsWithOrgGeogebraCommonKernelGeosGeoElement:", "getTraceSettings", "Lorg.geogebra.common.util.SpreadsheetTraceSettings;", 0x1, NULL, NULL },
    { "clearAllTraceColumns", NULL, "V", 0x2, NULL, NULL },
    { "clearGeoTraceColumnsWithOrgGeogebraCommonKernelGeosGeoElement:", "clearGeoTraceColumns", "V", 0x1, NULL, NULL },
    { "clearGeoTraceColumnsWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "clearGeoTraceColumns", "V", 0x1, NULL, NULL },
    { "handleColumnDeleteWithInt:withInt:", "handleColumnDelete", "V", 0x1, NULL, NULL },
    { "handleColumnDeleteWithInt:withInt:withInt:withInt:", "handleColumnDelete", "V", 0x1, NULL, NULL },
    { "getDefaultTraceSettings", NULL, "Lorg.geogebra.common.util.SpreadsheetTraceSettings;", 0x1, NULL, NULL },
    { "setNeedsColumnResetWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "setNeedsColumnReset", "V", 0x1, NULL, NULL },
    { "getTraceXMLWithOrgGeogebraCommonKernelGeosGeoElement:", "getTraceXML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "startCollectingSpreadsheetTraces", NULL, "V", 0x1, NULL, NULL },
    { "stopCollectingSpreadsheetTraces", NULL, "V", 0x1, NULL, NULL },
    { "traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:", "traceToSpreadsheet", "V", 0x1, NULL, NULL },
    { "traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonUtilSpreadsheetTraceSettings:", "traceToSpreadsheet", "V", 0x2, NULL, NULL },
    { "setGeoTraceRowWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelConstruction:withJavaUtilArrayList:withInt:", "setGeoTraceRow", "Z", 0x4, NULL, NULL },
    { "setTraceCellAsGeoCopyWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "setTraceCellAsGeoCopy", "V", 0x4, NULL, NULL },
    { "setTraceCellWithOrgGeogebraCommonKernelConstruction:withInt:withInt:withId:withOrgGeogebraCommonPluginGeoClassEnum:", "setTraceCell", "V", 0x4, NULL, NULL },
    { "createTraceListCellWithOrgGeogebraCommonKernelConstruction:withInt:withInt:", "createTraceListCell", "V", 0x2, NULL, NULL },
    { "updateTraceListCellWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withInt:withInt:withJavaUtilArrayList:withInt:", "updateTraceListCell", "V", 0x2, NULL, NULL },
    { "clearTraceListCellWithInt:withInt:", "clearTraceListCell", "V", 0x2, NULL, NULL },
    { "getCurrentTraceWithOrgGeogebraCommonKernelGeosGeoElement:withJavaUtilArrayList:", "getCurrentTrace", "V", 0x2, NULL, NULL },
    { "addElementTraceWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelConstruction:withJavaUtilArrayList:", "addElementTrace", "Z", 0x4, NULL, NULL },
    { "setHeaderWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelConstruction:", "setHeader", "V", 0x2, NULL, NULL },
    { "hasGeoTraced", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "traceGeoCollection_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/kernel/geos/GeoElement;Lorg/geogebra/common/util/SpreadsheetTraceSettings;>;",  },
    { "storedTraces_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "collectingTraces_", NULL, 0x2, "Z", NULL, NULL,  },
    { "doShiftCellsUp_", NULL, 0x2, "Z", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonMainSpreadsheetTraceManager = { 2, "SpreadsheetTraceManager", "org.geogebra.common.main", NULL, 0x1, 41, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonMainSpreadsheetTraceManager;
}

@end

void OrgGeogebraCommonMainSpreadsheetTraceManager_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonMainApp *app) {
  (void) NSObject_init(self);
  self->collectingTraces_ = NO;
  self->doShiftCellsUp_ = YES;
  self->coords_ = [IOSDoubleArray newArrayWithLength:3];
  self->app_ = app;
  self->kernel_ = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel];
  self->traceGeoCollection_ = new_JavaUtilHashMap_init();
  self->storedTraces_ = new_JavaUtilHashSet_init();
}

OrgGeogebraCommonMainSpreadsheetTraceManager *new_OrgGeogebraCommonMainSpreadsheetTraceManager_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonMainSpreadsheetTraceManager *self = [OrgGeogebraCommonMainSpreadsheetTraceManager alloc];
  OrgGeogebraCommonMainSpreadsheetTraceManager_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

jint OrgGeogebraCommonMainSpreadsheetTraceManager_getHighestTraceColumn(OrgGeogebraCommonMainSpreadsheetTraceManager *self) {
  jint max = -1;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(self->traceGeoCollection_)) keySet])) {
    if (((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings]))->traceColumn2_ > max) max = ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([geo getTraceSettings]))->traceColumn2_;
  }
  return max;
}

void OrgGeogebraCommonMainSpreadsheetTraceManager_togglePauseTraceGeoWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonUtilSpreadsheetTraceSettings *t) {
  ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->pause_ = !t->pause_;
  if (!t->pause_) {
    OrgGeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
  }
}

void OrgGeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonUtilSpreadsheetTraceSettings_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonUtilSpreadsheetTraceSettings *t) {
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  if (!((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->doTraceGeoCopy_) OrgGeogebraCommonMainSpreadsheetTraceManager_getCurrentTraceWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_(self, geo, t->lastTrace_);
  if (self->collectingTraces_) {
    [((JavaUtilHashSet *) nil_chk(self->storedTraces_)) addWithId:geo];
    return;
  }
  if (t->needsColumnReset_ && t->doColumnReset_) {
    t->traceColumn1_ = [self getNextTraceColumn];
    t->tracingRow_ = t->traceRow1_;
    t->needsColumnReset_ = NO;
  }
  [self->app_ setScrollToShowWithBoolean:YES];
  jint row = t->tracingRow_ + t->headerOffset_;
  if (t->tracingRow_ == -1) row = t->traceRow2_;
  if (t->tracingRow_ != -1) {
    [self setGeoTraceRowWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonKernelConstruction:cons withJavaUtilArrayList:t->lastTrace_ withInt:row];
  }
  else if (self->doShiftCellsUp_) {
    OrgGeogebraCommonKernelGeosGeoElement *sourceCell;
    jint minTraceRow = t->traceRow1_ + t->headerOffset_ + 1;
    if (t->numRows_ == 1) --minTraceRow;
    for (jint c = t->traceColumn1_; c <= t->traceColumn2_; c++) {
      for (jint r = minTraceRow; r <= t->traceRow2_; r++) {
        sourceCell = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(self->app_, c, r);
        if (t->numRows_ > 1) {
          if (sourceCell != nil) {
            if (t->doTraceGeoCopy_) {
              [self setTraceCellAsGeoCopyWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:sourceCell withInt:c withInt:r - 1];
            }
            else {
              [self setTraceCellWithOrgGeogebraCommonKernelConstruction:cons withInt:c withInt:r - 1 withId:JavaLangDouble_valueOfWithDouble_([((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(sourceCell, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getValue]) withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
            }
          }
        }
        if (r == t->traceRow2_) {
          if (t->doTraceGeoCopy_) {
            [self setTraceCellAsGeoCopyWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:geo withInt:c withInt:r];
          }
          else {
            [self setTraceCellWithOrgGeogebraCommonKernelConstruction:cons withInt:c withInt:r withId:[((JavaUtilArrayList *) nil_chk(t->lastTrace_)) getWithInt:c - t->traceColumn1_] withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
          }
        }
      }
    }
  }
  t->tracingRow_ = (row < t->traceRow2_) ? t->tracingRow_ + 1 : -1;
  if (t->showTraceList_) {
    jint traceIndex = 0;
    for (jint column = t->traceColumn1_; column <= t->traceColumn2_; column++) {
      OrgGeogebraCommonMainSpreadsheetTraceManager_updateTraceListCellWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_withJavaUtilArrayList_withInt_(self, cons, geo, column, t->traceRow1_, t->lastTrace_, traceIndex);
      ++traceIndex;
    }
  }
  [self->app_ setScrollToShowWithBoolean:NO];
}

void OrgGeogebraCommonMainSpreadsheetTraceManager_createTraceListCellWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelConstruction *cons, jint column, jint row) {
  OrgGeogebraCommonKernelGeosGeoElement *cell = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
  if (cell != nil) OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(self->app_, column, row, column, row, OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
  @try {
    cell = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
    [cell setLabelWithNSString:OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row)];
    [cell setEuclidianVisibleWithBoolean:NO];
    [cell setAuxiliaryObjectWithBoolean:YES];
    [cell updateCascade];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void OrgGeogebraCommonMainSpreadsheetTraceManager_updateTraceListCellWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_withJavaUtilArrayList_withInt_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *geo, jint column, jint row, JavaUtilArrayList *values, jint index) {
  OrgGeogebraCommonKernelGeosGeoElement *cell = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
  if (cell == nil || ![cell isGeoList]) return;
  if (((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings]))->doTraceGeoCopy_) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(cell, [OrgGeogebraCommonKernelGeosGeoList class])))) addWithOrgGeogebraCommonKernelGeosGeoElement:[geo copyInternalWithOrgGeogebraCommonKernelConstruction:cons]];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(cell, [OrgGeogebraCommonKernelGeosGeoList class])))) addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons, [((JavaLangDouble *) nil_chk([((JavaUtilArrayList *) nil_chk(values)) getWithInt:index])) doubleValue])];
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) updateCascade];
}

void OrgGeogebraCommonMainSpreadsheetTraceManager_clearTraceListCellWithInt_withInt_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, jint column, jint row) {
  OrgGeogebraCommonKernelGeosGeoElement *cell = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithOrgGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
  if (cell == nil || ![cell isGeoList]) return;
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(cell, [OrgGeogebraCommonKernelGeosGeoList class])))) clear];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) updateCascade];
}

void OrgGeogebraCommonMainSpreadsheetTraceManager_getCurrentTraceWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, JavaUtilArrayList *trace) {
  [((JavaUtilArrayList *) nil_chk(trace)) clear];
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
    for (jint elem = 0; elem < [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) size]; elem++) {
      [self addElementTraceWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) getWithInt:elem] withOrgGeogebraCommonKernelConstruction:cons withJavaUtilArrayList:trace];
    }
  }
  else {
    [self addElementTraceWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonKernelConstruction:cons withJavaUtilArrayList:trace];
  }
}

void OrgGeogebraCommonMainSpreadsheetTraceManager_setHeaderWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonMainSpreadsheetTraceManager *self, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [((JavaUtilHashMap *) nil_chk(self->traceGeoCollection_)) getWithId:geo];
  jint column, row;
  OrgGeogebraCommonKernelGeosGeoText *headerText = nil;
  IOSObjectArray *geos = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoElements];
  if (((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->showLabel_) {
    row = t->traceRow1_ + t->headerOffset_ - 1;
    column = t->traceColumn1_;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
      if ([OrgGeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
        JavaUtilArrayList *strings = [((id<OrgGeogebraCommonKernelGeosSpreadsheetTraceable>) nil_chk(((id<OrgGeogebraCommonKernelGeosSpreadsheetTraceable>) check_protocol_cast(IOSObjectArray_Get(geos, i), @protocol(OrgGeogebraCommonKernelGeosSpreadsheetTraceable))))) getColumnHeadings];
        for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(strings)) size]; j++) {
          headerText = [strings getWithInt:j];
          NSString *cellName = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row);
          [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(headerText)) setLabelWithNSString:cellName];
          column++;
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainSpreadsheetTraceManager)
