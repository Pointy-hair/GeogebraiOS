//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/main/settings/EuclidianSettings.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GDimension.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/settings/AbstractSettings.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonMainSettingsEuclidianSettings () {
 @public
  OrgGeogebraCommonAwtGColor *backgroundColor_;
  OrgGeogebraCommonAwtGColor *axesColor_;
  OrgGeogebraCommonAwtGColor *gridColor_;
  jint axesLineStyle_;
  jint gridLineStyle_;
  IOSDoubleArray *axisCross_;
  IOSBooleanArray *positiveAxes_;
  IOSBooleanArray *drawBorderAxes_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> xminObject_, xmaxObject_, yminObject_, ymaxObject_;
  jint tooltipsInThisView_;
  OrgGeogebraCommonAwtGDimension *preferredSize_;
  jboolean showGrid__;
  jboolean gridIsBold_;
  jint gridType_;
  jint pointCapturingMode_;
  jboolean allowShowMouseCoords_;
  JavaLangDouble *lockedAxesRatio_;
  jint deleteToolSize_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, backgroundColor_, OrgGeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, axesColor_, OrgGeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, gridColor_, OrgGeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, axisCross_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, positiveAxes_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, drawBorderAxes_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, xminObject_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, xmaxObject_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, yminObject_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, ymaxObject_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, preferredSize_, OrgGeogebraCommonAwtGDimension *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSettingsEuclidianSettings, lockedAxesRatio_, JavaLangDouble *)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonMainSettingsEuclidianSettings)

IOSIntArray *OrgGeogebraCommonMainSettingsEuclidianSettings_DELETE_SIZES_;

@implementation OrgGeogebraCommonMainSettingsEuclidianSettings

- (instancetype)initWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)euclidianSettings1 {
  OrgGeogebraCommonMainSettingsEuclidianSettings_initWithOrgGeogebraCommonMainSettingsEuclidianSettings_(self, euclidianSettings1);
  return self;
}

- (void)reset {
  [self resetNoFire];
  [self settingChanged];
}

- (void)resetNoFire {
  gridDistances_ = nil;
  axisNumberingDistances_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ JavaLangDouble_NaN, JavaLangDouble_NaN, JavaLangDouble_NaN } count:3];
  xminObject_ = nil;
  xmaxObject_ = nil;
  yminObject_ = nil;
  ymaxObject_ = nil;
  [self setGridLineStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  [self setAxesLineStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_LINE_TYPE_ARROW];
  [self setAxesColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_()];
  [self setGridColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_LIGHT_GRAY_()];
  [self setBackgroundWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_WHITE_()];
  pointCapturingMode_ = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC;
  *IOSBooleanArray_GetRef(nil_chk(showAxesNumbers_), 0) = YES;
  *IOSBooleanArray_GetRef(showAxesNumbers_, 1) = YES;
  (void) IOSObjectArray_Set(nil_chk(axesLabels_), 0, nil);
  (void) IOSObjectArray_Set(axesLabels_, 1, nil);
  (void) IOSObjectArray_Set(nil_chk(axesUnitLabels_), 0, nil);
  (void) IOSObjectArray_Set(axesUnitLabels_, 1, nil);
  *IOSBooleanArray_GetRef(nil_chk(piAxisUnit_), 0) = NO;
  *IOSBooleanArray_GetRef(piAxisUnit_, 1) = NO;
  *IOSIntArray_GetRef(nil_chk(axesTickStyles_), 0) = OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR;
  *IOSIntArray_GetRef(axesTickStyles_, 1) = OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR;
  *IOSBooleanArray_GetRef(nil_chk(automaticAxesNumberingDistances_), 0) = YES;
  *IOSBooleanArray_GetRef(automaticAxesNumberingDistances_, 1) = YES;
  *IOSBooleanArray_GetRef(automaticAxesNumberingDistances_, 2) = YES;
  automaticGridDistance_ = YES;
  *IOSDoubleArray_GetRef(nil_chk(axisCross_), 0) = 0;
  *IOSDoubleArray_GetRef(axisCross_, 1) = 0;
  *IOSBooleanArray_GetRef(nil_chk(positiveAxes_), 0) = NO;
  *IOSBooleanArray_GetRef(positiveAxes_, 1) = NO;
}

- (void)setBackgroundWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)col {
  if (![((OrgGeogebraCommonAwtGColor *) nil_chk(col)) isEqual:backgroundColor_]) {
    backgroundColor_ = col;
    [self settingChanged];
  }
}

- (OrgGeogebraCommonAwtGColor *)getBackground {
  return backgroundColor_;
}

- (void)setAxesColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)col {
  if (![((OrgGeogebraCommonAwtGColor *) nil_chk(col)) isEqual:axesColor_]) {
    axesColor_ = col;
    [self settingChanged];
  }
}

- (OrgGeogebraCommonAwtGColor *)getAxesColor {
  return axesColor_;
}

- (void)setGridColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)col {
  if (![((OrgGeogebraCommonAwtGColor *) nil_chk(col)) isEqual:gridColor_]) {
    gridColor_ = col;
    [self settingChanged];
  }
}

- (OrgGeogebraCommonAwtGColor *)getGridColor {
  return gridColor_;
}

- (void)setAxesLineStyleWithInt:(jint)style {
  if (axesLineStyle_ != style) {
    axesLineStyle_ = style;
    [self settingChanged];
  }
}

- (jint)getAxesLineStyle {
  return axesLineStyle_;
}

- (void)setGridLineStyleWithInt:(jint)style {
  if (gridLineStyle_ != style) {
    gridLineStyle_ = style;
    [self settingChanged];
  }
}

- (jint)getGridLineStyle {
  return gridLineStyle_;
}

- (void)setGridDistancesWithDoubleArray:(IOSDoubleArray *)dists {
  jboolean changed = NO;
  if (gridDistances_ == nil) {
    changed = YES;
  }
  else if (gridDistances_->size_ != ((IOSDoubleArray *) nil_chk(dists))->size_) {
    changed = YES;
  }
  else {
    for (jint i = 0; i < dists->size_; ++i) {
      if (IOSDoubleArray_Get(dists, i) != IOSDoubleArray_Get(gridDistances_, i)) {
        changed = YES;
        break;
      }
    }
  }
  if (changed) {
    gridDistances_ = dists;
    if (dists == nil) {
      [self setAutomaticGridDistanceWithBoolean:YES withBoolean:NO];
    }
    else {
      [self setAutomaticGridDistanceWithBoolean:NO withBoolean:NO];
    }
    [self settingChanged];
  }
}

- (IOSDoubleArray *)getGridDistances {
  return gridDistances_;
}

- (void)setAutomaticGridDistanceWithBoolean:(jboolean)agd
                                withBoolean:(jboolean)callsc {
  if (automaticGridDistance_ != agd) {
    automaticGridDistance_ = agd;
    if (agd) {
      gridDistances_ = nil;
      if (callsc) {
        [self settingChanged];
      }
    }
    else if (callsc) {
      [self settingChanged];
    }
  }
}

- (jboolean)getAutomaticGridDistance {
  return automaticGridDistance_;
}

- (jboolean)getAllowShowMouseCoords {
  return allowShowMouseCoords_;
}

- (void)setAllowShowMouseCoordsWithBoolean:(jboolean)neverShowMouseCoords {
  if (neverShowMouseCoords == self->allowShowMouseCoords_) {
    return;
  }
  self->allowShowMouseCoords_ = neverShowMouseCoords;
  [self settingChanged];
}

- (jboolean)setShowAxisWithInt:(jint)axis
                   withBoolean:(jboolean)flag {
  jboolean changed = flag != IOSBooleanArray_Get(nil_chk(showAxes_), axis);
  if (changed) {
    *IOSBooleanArray_GetRef(showAxes_, axis) = flag;
    [self settingChanged];
  }
  return changed;
}

- (jboolean)getShowAxisWithInt:(jint)axis {
  return IOSBooleanArray_Get(nil_chk(showAxes_), axis);
}

- (void)setAxisLabelWithInt:(jint)axis
               withNSString:(NSString *)axisLabel {
  jboolean changed = NO;
  if ((axisLabel == nil) || (((jint) [axisLabel length]) == 0)) {
    changed = (IOSObjectArray_Get(nil_chk(axesLabels_), axis) != nil);
    (void) IOSObjectArray_Set(axesLabels_, axis, nil);
  }
  else {
    changed = IOSObjectArray_Get(nil_chk(axesLabels_), axis) != nil ? ![((NSString *) nil_chk(IOSObjectArray_Get(axesLabels_, axis))) isEqual:axisLabel] : YES;
    changed = ![axisLabel isEqual:IOSObjectArray_Get(axesLabels_, axis)];
    (void) IOSObjectArray_Set(axesLabels_, axis, axisLabel);
  }
  if (changed) {
    [self settingChanged];
  }
}

- (IOSObjectArray *)getAxesLabels {
  return axesLabels_;
}

- (IOSObjectArray *)getAxesUnitLabels {
  return axesUnitLabels_;
}

- (void)setAxesUnitLabelsWithNSStringArray:(IOSObjectArray *)axesUnitLabels {
  self->axesUnitLabels_ = axesUnitLabels;
  for (jint i = 0; i < 2; i++) {
    *IOSBooleanArray_GetRef(nil_chk(piAxisUnit_), i) = ((IOSObjectArray_Get(nil_chk(axesUnitLabels), i) != nil) && [((NSString *) nil_chk(IOSObjectArray_Get(axesUnitLabels, i))) isEqual:OrgGeogebraCommonUtilUnicode_get_PI_STRING_()]);
  }
  [self settingChanged];
}

- (void)setShowAxisNumbersWithInt:(jint)axis
                      withBoolean:(jboolean)showAxisNumbers {
  *IOSBooleanArray_GetRef(nil_chk(showAxesNumbers_), axis) = showAxisNumbers;
  [self settingChanged];
}

- (IOSBooleanArray *)getShowAxisNumbers {
  return showAxesNumbers_;
}

- (jdouble)getAxisNumberingDistanceX {
  return IOSDoubleArray_Get(nil_chk(axisNumberingDistances_), 0);
}

- (jdouble)getAxisNumberingDistanceY {
  return IOSDoubleArray_Get(nil_chk(axisNumberingDistances_), 1);
}

- (jdouble)getAxisNumberingDistanceWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(axisNumberingDistances_), i);
}

- (void)setAxisNumberingDistanceXWithDouble:(jdouble)dist {
  *IOSDoubleArray_GetRef(nil_chk(axisNumberingDistances_), 0) = dist;
  [self setAutomaticAxesNumberingDistanceWithBoolean:NO withInt:0 withBoolean:NO];
  [self settingChanged];
}

- (void)setAxisNumberingDistanceYWithDouble:(jdouble)dist {
  *IOSDoubleArray_GetRef(nil_chk(axisNumberingDistances_), 1) = dist;
  [self setAutomaticAxesNumberingDistanceWithBoolean:NO withInt:1 withBoolean:NO];
  [self settingChanged];
}

- (void)setAxisNumberingDistanceWithInt:(jint)i
                             withDouble:(jdouble)dist {
  *IOSDoubleArray_GetRef(nil_chk(axisNumberingDistances_), i) = dist;
  [self setAutomaticAxesNumberingDistanceWithBoolean:NO withInt:i withBoolean:NO];
  [self settingChanged];
}

- (void)setAutomaticAxesNumberingDistanceWithBoolean:(jboolean)flag
                                             withInt:(jint)axis
                                         withBoolean:(jboolean)callsc {
  if (IOSBooleanArray_Get(nil_chk(automaticAxesNumberingDistances_), axis) != flag) {
    *IOSBooleanArray_GetRef(automaticAxesNumberingDistances_, axis) = flag;
    if (flag) {
      *IOSDoubleArray_GetRef(nil_chk(axisNumberingDistances_), 0) = JavaLangDouble_NaN;
      *IOSDoubleArray_GetRef(axisNumberingDistances_, 1) = JavaLangDouble_NaN;
      *IOSDoubleArray_GetRef(axisNumberingDistances_, 2) = JavaLangDouble_NaN;
      if (callsc) {
        [self settingChanged];
      }
    }
    else if (callsc) {
      [self settingChanged];
    }
  }
}

- (jboolean)getAutomaticAxesNumberingDistanceWithInt:(jint)axis {
  return IOSBooleanArray_Get(nil_chk(automaticAxesNumberingDistances_), axis);
}

- (IOSIntArray *)getAxesTickStyles {
  return axesTickStyles_;
}

- (void)setAxisTickStyleWithInt:(jint)axis
                        withInt:(jint)tickStyle {
  if (IOSIntArray_Get(nil_chk(axesTickStyles_), axis) != tickStyle) {
    *IOSIntArray_GetRef(axesTickStyles_, axis) = tickStyle;
    [self settingChanged];
  }
}

- (IOSDoubleArray *)getAxesCross {
  return axisCross_;
}

- (void)setAxisCrossWithInt:(jint)axis
                 withDouble:(jdouble)cross {
  if (IOSDoubleArray_Get(nil_chk(axisCross_), axis) != cross) {
    *IOSDoubleArray_GetRef(axisCross_, axis) = cross;
    [self settingChanged];
  }
}

- (IOSBooleanArray *)getPositiveAxes {
  return positiveAxes_;
}

- (void)setPositiveAxisWithInt:(jint)axis
                   withBoolean:(jboolean)isPositiveAxis {
  if (IOSBooleanArray_Get(nil_chk(positiveAxes_), axis) == isPositiveAxis) {
    return;
  }
  *IOSBooleanArray_GetRef(positiveAxes_, axis) = isPositiveAxis;
  [self settingChanged];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getXminObject {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)xminObjectNew
                                                          withBoolean:(jboolean)callsc {
  self->xminObject_ = xminObjectNew;
  if (callsc) {
    [self settingChanged];
  }
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getXmaxObject {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)xmaxObjectNew
                                                          withBoolean:(jboolean)callsc {
  self->xmaxObject_ = xmaxObjectNew;
  if (callsc) {
    [self settingChanged];
  }
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getYminObject {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)yminObjectNew
                                                          withBoolean:(jboolean)callsc {
  self->yminObject_ = yminObjectNew;
  if (callsc) {
    [self settingChanged];
  }
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getYmaxObject {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)ymaxObjectNew
                                                          withBoolean:(jboolean)callsc {
  self->ymaxObject_ = ymaxObjectNew;
  if (callsc) {
    [self settingChanged];
  }
}

- (jdouble)getXZero {
  return xZero_;
}

- (jdouble)getYZero {
  return yZero_;
}

- (jdouble)getXscale {
  return xscale_;
}

- (jdouble)getYscale {
  return yscale_;
}

- (jboolean)hasDynamicBounds {
  return xminObject_ != nil && yminObject_ != nil && xmaxObject_ != nil && ymaxObject_ != nil;
}

- (void)setCoordSystemWithDouble:(jdouble)xZero
                      withDouble:(jdouble)yZero
                      withDouble:(jdouble)xscale
                      withDouble:(jdouble)yscale
                     withBoolean:(jboolean)fire {
  if (JavaLangDouble_isNaNWithDouble_(xscale) || (xscale < OrgGeogebraCommonKernelKernel_MAX_DOUBLE_PRECISION) || (xscale > OrgGeogebraCommonKernelKernel_INV_MAX_DOUBLE_PRECISION)) {
    return;
  }
  if (JavaLangDouble_isNaNWithDouble_(yscale) || (yscale < OrgGeogebraCommonKernelKernel_MAX_DOUBLE_PRECISION) || (yscale > OrgGeogebraCommonKernelKernel_INV_MAX_DOUBLE_PRECISION)) {
    return;
  }
  self->xZero_ = xZero;
  self->yZero_ = yZero;
  self->xscale_ = xscale;
  self->yscale_ = yscale;
  if (fire) {
    [self settingChanged];
  }
}

- (void)setAxesNumberingDistanceWithDouble:(jdouble)tickDist
                                   withInt:(jint)axis {
  [self setAxisNumberingDistanceWithInt:axis withDouble:tickDist];
  [self settingChanged];
}

- (void)setPreferredSizeWithOrgGeogebraCommonAwtGDimension:(OrgGeogebraCommonAwtGDimension *)dimension {
  preferredSize_ = dimension;
  [self settingChanged];
}

- (OrgGeogebraCommonAwtGDimension *)getPreferredSize {
  return preferredSize_;
}

- (jboolean)setShowAxesWithBoolean:(jboolean)x
                       withBoolean:(jboolean)y {
  jboolean changedX = [self setShowAxisWithInt:0 withBoolean:x];
  return [self setShowAxisWithInt:1 withBoolean:y] || changedX;
}

- (jboolean)setShowAxesWithBoolean:(jboolean)flag {
  jboolean changed = [self setShowAxisWithInt:0 withBoolean:flag];
  changed = ([self setShowAxisWithInt:1 withBoolean:flag] || changed);
  return [self setShowAxisWithInt:2 withBoolean:flag] || changed;
}

- (jboolean)showGridWithBoolean:(jboolean)show {
  if (show == showGrid__) {
    return NO;
  }
  [self setShowGridSettingWithBoolean:show];
  [self settingChanged];
  return YES;
}

- (void)setShowGridSettingWithBoolean:(jboolean)show {
  showGrid__ = show;
}

- (jboolean)getShowGrid {
  return showGrid__;
}

- (jboolean)getGridIsBold {
  return gridIsBold_;
}

- (void)setGridIsBoldWithBoolean:(jboolean)gridIsBold {
  if (self->gridIsBold_ == gridIsBold) {
    return;
  }
  self->gridIsBold_ = gridIsBold;
  [self settingChanged];
}

- (jint)getGridType {
  return gridType_;
}

- (void)setGridTypeWithInt:(jint)type {
  if (gridType_ == type) {
    return;
  }
  gridType_ = type;
  [self settingChanged];
}

- (jint)getPointCapturingMode {
  return pointCapturingMode_;
}

- (jboolean)setPointCapturingWithInt:(jint)mode {
  if (pointCapturingMode_ == mode) {
    return NO;
  }
  pointCapturingMode_ = mode;
  [self settingChanged];
  return NO;
}

- (void)setAllowToolTipsWithInt:(jint)setto {
  if (setto == tooltipsInThisView_) {
    return;
  }
  tooltipsInThisView_ = setto;
  [self settingChanged];
}

- (jint)getAllowToolTips {
  return tooltipsInThisView_;
}

- (void)setDrawBorderAxesWithInt:(jint)axis
                     withBoolean:(jboolean)value {
  if ((axis == 0) || (axis == 1)) {
    if (IOSBooleanArray_Get(nil_chk(drawBorderAxes_), axis) == value) return;
    *IOSBooleanArray_GetRef(drawBorderAxes_, axis) = value;
    [self settingChanged];
  }
}

- (IOSBooleanArray *)getDrawBorderAxes {
  return drawBorderAxes_;
}

- (void)setLockedAxesRatioWithDouble:(jdouble)ratio {
  if ([((JavaLangDouble *) nil_chk(lockedAxesRatio_)) doubleValue] == ratio) return;
  lockedAxesRatio_ = JavaLangDouble_valueOfWithDouble_(ratio);
  [self settingChanged];
}

- (JavaLangDouble *)getLockedAxesRatio {
  return lockedAxesRatio_;
}

- (void)setBoldAxesWithBoolean:(jboolean)bold {
  jint oldAxesLineStyle = axesLineStyle_;
  axesLineStyle_ = OrgGeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(bold, axesLineStyle_);
  if (oldAxesLineStyle != axesLineStyle_) {
    [self settingChanged];
  }
}

- (jint)getDeleteToolSize {
  return self->deleteToolSize_;
}

- (void)setDeleteToolSizeWithInt:(jint)size {
  self->deleteToolSize_ = size;
}

- (void)addAxisXMLWithInt:(jint)i
withJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  (void) [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"\t<axis id=\""];
  (void) [sbxml appendWithInt:i];
  (void) [sbxml appendWithNSString:@"\" show=\""];
  (void) [sbxml appendWithBoolean:[self getShowAxisWithInt:i]];
  (void) [sbxml appendWithNSString:@"\" label=\""];
  if (IOSObjectArray_Get(nil_chk(axesLabels_), i) != nil) {
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [self axisLabelForXMLWithInt:i]);
  }
  (void) [sbxml appendWithNSString:@"\" unitLabel=\""];
  if (IOSObjectArray_Get(nil_chk(axesUnitLabels_), i) != nil) {
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, IOSObjectArray_Get(axesUnitLabels_, i));
  }
  (void) [sbxml appendWithNSString:@"\" tickStyle=\""];
  (void) [sbxml appendWithInt:IOSIntArray_Get(nil_chk(axesTickStyles_), i)];
  (void) [sbxml appendWithNSString:@"\" showNumbers=\""];
  (void) [sbxml appendWithBoolean:IOSBooleanArray_Get(nil_chk(showAxesNumbers_), i)];
  if (!IOSBooleanArray_Get(nil_chk(automaticAxesNumberingDistances_), i)) {
    (void) [sbxml appendWithNSString:@"\" tickDistance=\""];
    (void) [sbxml appendWithDouble:IOSDoubleArray_Get(nil_chk(axisNumberingDistances_), i)];
  }
  if (IOSBooleanArray_Get(nil_chk(drawBorderAxes_), i)) {
    (void) [sbxml appendWithNSString:@"\" axisCrossEdge=\""];
    (void) [sbxml appendWithBoolean:YES];
  }
  else if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(axisCross_), i)) && !IOSBooleanArray_Get(drawBorderAxes_, i)) {
    (void) [sbxml appendWithNSString:@"\" axisCross=\""];
    (void) [sbxml appendWithDouble:IOSDoubleArray_Get(axisCross_, i)];
  }
  if (IOSBooleanArray_Get(nil_chk(positiveAxes_), i)) {
    (void) [sbxml appendWithNSString:@"\" positiveAxis=\""];
    (void) [sbxml appendWithBoolean:IOSBooleanArray_Get(positiveAxes_, i)];
  }
  (void) [sbxml appendWithNSString:@"\"/>\n"];
}

- (NSString *)axisLabelForXMLWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(axesLabels_), i);
}

- (void)setXscaleWithDouble:(jdouble)scale_ {
  if (self->xscale_ != scale_) {
    self->xscale_ = scale_;
    [self settingChanged];
  }
}

- (void)setYscaleWithDouble:(jdouble)scale_ {
  if (self->yscale_ != scale_) {
    self->yscale_ = scale_;
    [self settingChanged];
  }
}

- (jboolean)is3D {
  return NO;
}

- (jboolean)isViewForPlane {
  return NO;
}

- (jdouble)toRealWorldCoordXWithDouble:(jdouble)x {
  return (x - xZero_) / xscale_;
}

- (jdouble)toRealWorldCoordYWithDouble:(jdouble)y {
  return (yZero_ - y) / yscale_;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonMainSettingsEuclidianSettings class]) {
    OrgGeogebraCommonMainSettingsEuclidianSettings_DELETE_SIZES_ = [IOSIntArray newArrayWithInts:(jint[]){ 20, 40, 80 } count:3];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonMainSettingsEuclidianSettings)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainSettingsEuclidianSettings:", "EuclidianSettings", NULL, 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "resetNoFire", NULL, "V", 0x4, NULL, NULL },
    { "setBackgroundWithOrgGeogebraCommonAwtGColor:", "setBackground", "V", 0x1, NULL, NULL },
    { "getBackground", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setAxesColorWithOrgGeogebraCommonAwtGColor:", "setAxesColor", "V", 0x1, NULL, NULL },
    { "getAxesColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setGridColorWithOrgGeogebraCommonAwtGColor:", "setGridColor", "V", 0x1, NULL, NULL },
    { "getGridColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setAxesLineStyleWithInt:", "setAxesLineStyle", "V", 0x1, NULL, NULL },
    { "getAxesLineStyle", NULL, "I", 0x1, NULL, NULL },
    { "setGridLineStyleWithInt:", "setGridLineStyle", "V", 0x1, NULL, NULL },
    { "getGridLineStyle", NULL, "I", 0x1, NULL, NULL },
    { "setGridDistancesWithDoubleArray:", "setGridDistances", "V", 0x1, NULL, NULL },
    { "getGridDistances", NULL, "[D", 0x1, NULL, NULL },
    { "setAutomaticGridDistanceWithBoolean:withBoolean:", "setAutomaticGridDistance", "V", 0x1, NULL, NULL },
    { "getAutomaticGridDistance", NULL, "Z", 0x1, NULL, NULL },
    { "getAllowShowMouseCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowShowMouseCoordsWithBoolean:", "setAllowShowMouseCoords", "V", 0x1, NULL, NULL },
    { "setShowAxisWithInt:withBoolean:", "setShowAxis", "Z", 0x1, NULL, NULL },
    { "getShowAxisWithInt:", "getShowAxis", "Z", 0x1, NULL, NULL },
    { "setAxisLabelWithInt:withNSString:", "setAxisLabel", "V", 0x1, NULL, NULL },
    { "getAxesLabels", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAxesUnitLabels", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "setAxesUnitLabelsWithNSStringArray:", "setAxesUnitLabels", "V", 0x1, NULL, NULL },
    { "setShowAxisNumbersWithInt:withBoolean:", "setShowAxisNumbers", "V", 0x1, NULL, NULL },
    { "getShowAxisNumbers", NULL, "[Z", 0x1, NULL, NULL },
    { "getAxisNumberingDistanceX", NULL, "D", 0x1, NULL, NULL },
    { "getAxisNumberingDistanceY", NULL, "D", 0x1, NULL, NULL },
    { "getAxisNumberingDistanceWithInt:", "getAxisNumberingDistance", "D", 0x1, NULL, NULL },
    { "setAxisNumberingDistanceXWithDouble:", "setAxisNumberingDistanceX", "V", 0x1, NULL, NULL },
    { "setAxisNumberingDistanceYWithDouble:", "setAxisNumberingDistanceY", "V", 0x1, NULL, NULL },
    { "setAxisNumberingDistanceWithInt:withDouble:", "setAxisNumberingDistance", "V", 0x1, NULL, NULL },
    { "setAutomaticAxesNumberingDistanceWithBoolean:withInt:withBoolean:", "setAutomaticAxesNumberingDistance", "V", 0x1, NULL, NULL },
    { "getAutomaticAxesNumberingDistanceWithInt:", "getAutomaticAxesNumberingDistance", "Z", 0x1, NULL, NULL },
    { "getAxesTickStyles", NULL, "[I", 0x1, NULL, NULL },
    { "setAxisTickStyleWithInt:withInt:", "setAxisTickStyle", "V", 0x1, NULL, NULL },
    { "getAxesCross", NULL, "[D", 0x1, NULL, NULL },
    { "setAxisCrossWithInt:withDouble:", "setAxisCross", "V", 0x1, NULL, NULL },
    { "getPositiveAxes", NULL, "[Z", 0x1, NULL, NULL },
    { "setPositiveAxisWithInt:withBoolean:", "setPositiveAxis", "V", 0x1, NULL, NULL },
    { "getXminObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "setXminObject", "V", 0x1, NULL, NULL },
    { "getXmaxObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "setXmaxObject", "V", 0x1, NULL, NULL },
    { "getYminObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "setYminObject", "V", 0x1, NULL, NULL },
    { "getYmaxObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "setYmaxObject", "V", 0x1, NULL, NULL },
    { "getXZero", NULL, "D", 0x1, NULL, NULL },
    { "getYZero", NULL, "D", 0x1, NULL, NULL },
    { "getXscale", NULL, "D", 0x1, NULL, NULL },
    { "getYscale", NULL, "D", 0x1, NULL, NULL },
    { "hasDynamicBounds", NULL, "Z", 0x1, NULL, NULL },
    { "setCoordSystemWithDouble:withDouble:withDouble:withDouble:withBoolean:", "setCoordSystem", "V", 0x1, NULL, NULL },
    { "setAxesNumberingDistanceWithDouble:withInt:", "setAxesNumberingDistance", "V", 0x1, NULL, NULL },
    { "setPreferredSizeWithOrgGeogebraCommonAwtGDimension:", "setPreferredSize", "V", 0x1, NULL, NULL },
    { "getPreferredSize", NULL, "Lorg.geogebra.common.awt.GDimension;", 0x1, NULL, NULL },
    { "setShowAxesWithBoolean:withBoolean:", "setShowAxes", "Z", 0x1, NULL, NULL },
    { "setShowAxesWithBoolean:", "setShowAxes", "Z", 0x1, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "Z", 0x1, NULL, NULL },
    { "setShowGridSettingWithBoolean:", "setShowGridSetting", "V", 0x1, NULL, NULL },
    { "getShowGrid", NULL, "Z", 0x1, NULL, NULL },
    { "getGridIsBold", NULL, "Z", 0x1, NULL, NULL },
    { "setGridIsBoldWithBoolean:", "setGridIsBold", "V", 0x1, NULL, NULL },
    { "getGridType", NULL, "I", 0x11, NULL, NULL },
    { "setGridTypeWithInt:", "setGridType", "V", 0x1, NULL, NULL },
    { "getPointCapturingMode", NULL, "I", 0x11, NULL, NULL },
    { "setPointCapturingWithInt:", "setPointCapturing", "Z", 0x1, NULL, NULL },
    { "setAllowToolTipsWithInt:", "setAllowToolTips", "V", 0x1, NULL, NULL },
    { "getAllowToolTips", NULL, "I", 0x11, NULL, NULL },
    { "setDrawBorderAxesWithInt:withBoolean:", "setDrawBorderAxes", "V", 0x1, NULL, NULL },
    { "getDrawBorderAxes", NULL, "[Z", 0x11, NULL, NULL },
    { "setLockedAxesRatioWithDouble:", "setLockedAxesRatio", "V", 0x1, NULL, NULL },
    { "getLockedAxesRatio", NULL, "Ljava.lang.Double;", 0x1, NULL, NULL },
    { "setBoldAxesWithBoolean:", "setBoldAxes", "V", 0x1, NULL, NULL },
    { "getDeleteToolSize", NULL, "I", 0x1, NULL, NULL },
    { "setDeleteToolSizeWithInt:", "setDeleteToolSize", "V", 0x1, NULL, NULL },
    { "addAxisXMLWithInt:withJavaLangStringBuilder:", "addAxisXML", "V", 0x1, NULL, NULL },
    { "axisLabelForXMLWithInt:", "axisLabelForXML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setXscaleWithDouble:", "setXscale", "V", 0x1, NULL, NULL },
    { "setYscaleWithDouble:", "setYscale", "V", 0x1, NULL, NULL },
    { "is3D", NULL, "Z", 0x1, NULL, NULL },
    { "isViewForPlane", NULL, "Z", 0x1, NULL, NULL },
    { "toRealWorldCoordXWithDouble:", "toRealWorldCoordX", "D", 0x11, NULL, NULL },
    { "toRealWorldCoordYWithDouble:", "toRealWorldCoordY", "D", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DELETE_SIZES_", NULL, 0x19, "[I", &OrgGeogebraCommonMainSettingsEuclidianSettings_DELETE_SIZES_, NULL,  },
    { "backgroundColor_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "axesColor_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "gridColor_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "axesLineStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "gridLineStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "gridDistances_", NULL, 0x0, "[D", NULL, NULL,  },
    { "axisCross_", NULL, 0x12, "[D", NULL, NULL,  },
    { "positiveAxes_", NULL, 0x12, "[Z", NULL, NULL,  },
    { "drawBorderAxes_", NULL, 0x12, "[Z", NULL, NULL,  },
    { "xminObject_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "xmaxObject_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "yminObject_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "ymaxObject_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "tooltipsInThisView_", NULL, 0x2, "I", NULL, NULL,  },
    { "showAxes_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "showAxesNumbers_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axesLabels_", NULL, 0x4, "[Ljava.lang.String;", NULL, NULL,  },
    { "axesUnitLabels_", NULL, 0x4, "[Ljava.lang.String;", NULL, NULL,  },
    { "piAxisUnit_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axesTickStyles_", NULL, 0x4, "[I", NULL, NULL,  },
    { "automaticAxesNumberingDistances_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axisNumberingDistances_", NULL, 0x4, "[D", NULL, NULL,  },
    { "automaticGridDistance_", NULL, 0x4, "Z", NULL, NULL,  },
    { "xZero_", NULL, 0x4, "D", NULL, NULL,  },
    { "yZero_", NULL, 0x4, "D", NULL, NULL,  },
    { "xscale_", NULL, 0x4, "D", NULL, NULL,  },
    { "yscale_", NULL, 0x4, "D", NULL, NULL,  },
    { "preferredSize_", NULL, 0x2, "Lorg.geogebra.common.awt.GDimension;", NULL, NULL,  },
    { "showGrid__", "showGrid", 0x2, "Z", NULL, NULL,  },
    { "gridIsBold_", NULL, 0x2, "Z", NULL, NULL,  },
    { "gridType_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointCapturingMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "allowShowMouseCoords_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lockedAxesRatio_", NULL, 0x2, "Ljava.lang.Double;", NULL, NULL,  },
    { "deleteToolSize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonMainSettingsEuclidianSettings = { 2, "EuclidianSettings", "org.geogebra.common.main.settings", NULL, 0x1, 86, methods, 36, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonMainSettingsEuclidianSettings;
}

@end

void OrgGeogebraCommonMainSettingsEuclidianSettings_initWithOrgGeogebraCommonMainSettingsEuclidianSettings_(OrgGeogebraCommonMainSettingsEuclidianSettings *self, OrgGeogebraCommonMainSettingsEuclidianSettings *euclidianSettings1) {
  (void) OrgGeogebraCommonMainSettingsAbstractSettings_init(self);
  self->axesLineStyle_ = OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_LINE_TYPE_ARROW;
  self->gridLineStyle_ = OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT;
  self->gridDistances_ = nil;
  self->axisCross_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0, 0 } count:3];
  self->positiveAxes_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3];
  self->drawBorderAxes_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3];
  self->tooltipsInThisView_ = OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC;
  self->showAxes_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES, YES } count:3];
  self->showAxesNumbers_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES, YES } count:3];
  self->axesLabels_ = [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil, nil } count:3 type:NSString_class_()];
  self->axesUnitLabels_ = [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil, nil } count:3 type:NSString_class_()];
  self->piAxisUnit_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3];
  self->axesTickStyles_ = [IOSIntArray newArrayWithInts:(jint[]){ OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR, OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR, OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR } count:3];
  self->automaticAxesNumberingDistances_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES, YES } count:3];
  self->axisNumberingDistances_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ JavaLangDouble_NaN, JavaLangDouble_NaN, JavaLangDouble_NaN } count:3];
  self->automaticGridDistance_ = YES;
  self->xscale_ = OrgGeogebraCommonEuclidianEuclidianView_SCALE_STANDARD;
  self->yscale_ = OrgGeogebraCommonEuclidianEuclidianView_SCALE_STANDARD;
  self->pointCapturingMode_ = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC;
  self->allowShowMouseCoords_ = NO;
  self->lockedAxesRatio_ = nil;
  self->deleteToolSize_ = OrgGeogebraCommonEuclidianEuclidianConstants_DEFAULT_ERASER_SIZE;
  self->xZero_ = OrgGeogebraCommonEuclidianEuclidianView_XZERO_STANDARD;
  self->yZero_ = OrgGeogebraCommonEuclidianEuclidianView_YZERO_STANDARD;
  self->preferredSize_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:0 withInt:0];
  [self resetNoFire];
}

OrgGeogebraCommonMainSettingsEuclidianSettings *new_OrgGeogebraCommonMainSettingsEuclidianSettings_initWithOrgGeogebraCommonMainSettingsEuclidianSettings_(OrgGeogebraCommonMainSettingsEuclidianSettings *euclidianSettings1) {
  OrgGeogebraCommonMainSettingsEuclidianSettings *self = [OrgGeogebraCommonMainSettingsEuclidianSettings alloc];
  OrgGeogebraCommonMainSettingsEuclidianSettings_initWithOrgGeogebraCommonMainSettingsEuclidianSettings_(self, euclidianSettings1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainSettingsEuclidianSettings)
