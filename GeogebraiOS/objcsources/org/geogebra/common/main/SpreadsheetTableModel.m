//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/main/SpreadsheetTableModel.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/ModeSetter.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/AlgoCellRangeManager.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/SpreadsheetTableModel.h"
#include "org/geogebra/common/main/SpreadsheetTraceManager.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgGeogebraCommonMainSpreadsheetTableModel () {
 @public
  jint highestUsedColumn_;
  jint highestUsedRow_;
  OrgGeogebraCommonMainAlgoCellRangeManager *cellRangeManager_;
}

- (void)updateHighestUsedColAndRowWithInt:(jint)col
                                  withInt:(jint)row;

- (void)addWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (void)doRemoveWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                  withInt:(jint)row
                                                  withInt:(jint)col;

- (void)addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (void)updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonMainSpreadsheetTableModel, cellRangeManager_, OrgGeogebraCommonMainAlgoCellRangeManager *)

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTableModel_updateHighestUsedColAndRowWithInt_withInt_(OrgGeogebraCommonMainSpreadsheetTableModel *self, jint col, jint row);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTableModel_addWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTableModel_doRemoveWithOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jint row, jint col);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTableModel_addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void OrgGeogebraCommonMainSpreadsheetTableModel_updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

@implementation OrgGeogebraCommonMainSpreadsheetTableModel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                         withInt:(jint)rows
                                         withInt:(jint)columns {
  OrgGeogebraCommonMainSpreadsheetTableModel_initWithOrgGeogebraCommonMainApp_withInt_withInt_(self, app, rows, columns);
  return self;
}

- (jint)getRowCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getColumnCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setRowCountWithInt:(jint)rowCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColumnCountWithInt:(jint)columnCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)getValueAtWithInt:(jint)row
                withInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setValueAtWithId:(id)value
                 withInt:(jint)row
                 withInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)attachView {
  [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) notifyAddAllWithOrgGeogebraCommonKernelView:self];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) attachWithOrgGeogebraCommonKernelView:self];
}

- (void)detachView {
  [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) detachWithOrgGeogebraCommonKernelView:self];
}

- (jint)getHighestUsedColumn {
  return highestUsedColumn_;
}

- (jint)getHighestUsedRow {
  return highestUsedRow_;
}

- (void)updateHighestUsedColAndRowWithInt:(jint)col
                                  withInt:(jint)row {
  OrgGeogebraCommonMainSpreadsheetTableModel_updateHighestUsedColAndRowWithInt_withInt_(self, col, row);
}

- (OrgGeogebraCommonMainAlgoCellRangeManager *)getCellRangeManager {
  return cellRangeManager_;
}

- (void)addWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  OrgGeogebraCommonMainSpreadsheetTableModel_addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSpreadsheetTableModel_addWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)removeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonAwtGPoint *location = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetCoords];
  if (location != nil) {
    OrgGeogebraCommonMainSpreadsheetTableModel_doRemoveWithOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_(self, geo, location->y_, location->x_);
    [((OrgGeogebraCommonMainAlgoCellRangeManager *) nil_chk(cellRangeManager_)) updateCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonAwtGPoint:location withBoolean:YES];
  }
}

- (void)renameWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonAwtGPoint *location = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getOldSpreadsheetCoords];
  if (location != nil) {
    OrgGeogebraCommonMainSpreadsheetTableModel_doRemoveWithOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_(self, geo, location->y_, location->x_);
    [((OrgGeogebraCommonMainAlgoCellRangeManager *) nil_chk(cellRangeManager_)) updateCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonAwtGPoint:location withBoolean:YES];
  }
  OrgGeogebraCommonMainSpreadsheetTableModel_addWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)doRemoveWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                  withInt:(jint)row
                                                  withInt:(jint)col {
  OrgGeogebraCommonMainSpreadsheetTableModel_doRemoveWithOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_(self, geo, row, col);
}

- (void)updateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSpreadsheetTableModel_updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
  if (!isIniting_ && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetTrace]) {
    [((OrgGeogebraCommonMainSpreadsheetTraceManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getTraceManager])) traceToSpreadsheetWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEmptySpreadsheetCell] && [geo isDefined]) {
    [geo setEmptySpreadsheetCellWithBoolean:NO];
  }
}

- (void)addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSpreadsheetTableModel_addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSpreadsheetTableModel_updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)updateLocationWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSpreadsheetTableModel_updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)clearView {
  for (jint c = 0; c < [self getColumnCount]; ++c) {
    for (jint r = 0; r < [self getRowCount]; ++r) {
      [self setValueAtWithId:nil withInt:r withInt:c];
    }
  }
  highestUsedColumn_ = -1;
  highestUsedRow_ = -1;
  [((OrgGeogebraCommonMainAlgoCellRangeManager *) nil_chk(cellRangeManager_)) removeAll];
}

- (void)updateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonMainSpreadsheetTableModel_updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)updateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)repaintView {
}

- (void)reset {
}

- (void)setModeWithInt:(jint)mode
withOrgGeogebraCommonKernelModeSetterEnum:(OrgGeogebraCommonKernelModeSetterEnum *)m {
}

- (jint)getViewID {
  return OrgGeogebraCommonMainApp_VIEW_TABLE_MODEL;
}

- (void)startBatchUpdate {
}

- (void)endBatchUpdate {
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(cellRangeManager_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withInt:withInt:", "SpreadsheetTableModel", NULL, 0x1, NULL, NULL },
    { "getRowCount", NULL, "I", 0x401, NULL, NULL },
    { "getColumnCount", NULL, "I", 0x401, NULL, NULL },
    { "setRowCountWithInt:", "setRowCount", "V", 0x401, NULL, NULL },
    { "setColumnCountWithInt:", "setColumnCount", "V", 0x401, NULL, NULL },
    { "getValueAtWithInt:withInt:", "getValueAt", "Ljava.lang.Object;", 0x401, NULL, NULL },
    { "setValueAtWithId:withInt:withInt:", "setValueAt", "V", 0x401, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "detachView", NULL, "V", 0x1, NULL, NULL },
    { "getHighestUsedColumn", NULL, "I", 0x1, NULL, NULL },
    { "getHighestUsedRow", NULL, "I", 0x1, NULL, NULL },
    { "updateHighestUsedColAndRowWithInt:withInt:", "updateHighestUsedColAndRow", "V", 0x2, NULL, NULL },
    { "getCellRangeManager", NULL, "Lorg.geogebra.common.main.AlgoCellRangeManager;", 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x1, NULL, NULL },
    { "addWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement:", "addWithoutTrace", "V", 0x2, NULL, NULL },
    { "removeWithOrgGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "renameWithOrgGeogebraCommonKernelGeosGeoElement:", "rename", "V", 0x1, NULL, NULL },
    { "doRemoveWithOrgGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "doRemove", "V", 0x2, NULL, NULL },
    { "updateWithOrgGeogebraCommonKernelGeosGeoElement:", "update", "V", 0x1, NULL, NULL },
    { "addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:", "addToCellRangeAlgos", "V", 0x2, NULL, NULL },
    { "updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement:", "updateWithoutTrace", "V", 0x2, NULL, NULL },
    { "updateLocationWithOrgGeogebraCommonKernelGeosGeoElement:", "updateLocation", "V", 0x1, NULL, NULL },
    { "clearView", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "updateVisualStyle", "V", 0x1, NULL, NULL },
    { "updateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:", "updateAuxiliaryObject", "V", 0x1, NULL, NULL },
    { "repaintView", NULL, "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "setModeWithInt:withOrgGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "getViewID", NULL, "I", 0x1, NULL, NULL },
    { "startBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "endBatchUpdate", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x4, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "highestUsedColumn_", NULL, 0x2, "I", NULL, NULL,  },
    { "highestUsedRow_", NULL, 0x2, "I", NULL, NULL,  },
    { "isIniting_", NULL, 0x4, "Z", NULL, NULL,  },
    { "cellRangeManager_", NULL, 0x2, "Lorg.geogebra.common.main.AlgoCellRangeManager;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonMainSpreadsheetTableModel = { 2, "SpreadsheetTableModel", "org.geogebra.common.main", NULL, 0x401, 31, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonMainSpreadsheetTableModel;
}

@end

void OrgGeogebraCommonMainSpreadsheetTableModel_initWithOrgGeogebraCommonMainApp_withInt_withInt_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonMainApp *app, jint rows, jint columns) {
  NSObject_init(self);
  self->highestUsedColumn_ = -1;
  self->highestUsedRow_ = -1;
  self->isIniting_ = YES;
  self->isIniting_ = YES;
  OrgGeogebraCommonMainSpreadsheetTableModel_set_app_(self, app);
  OrgGeogebraCommonMainSpreadsheetTableModel_setAndConsume_cellRangeManager_(self, new_OrgGeogebraCommonMainAlgoCellRangeManager_init());
}

void OrgGeogebraCommonMainSpreadsheetTableModel_updateHighestUsedColAndRowWithInt_withInt_(OrgGeogebraCommonMainSpreadsheetTableModel *self, jint col, jint row) {
  if (col == self->highestUsedColumn_) {
    jboolean updatedHighestUsedColumn = NO;
    for (jint c = self->highestUsedColumn_; c >= 0; c--) {
      jboolean columnEmpty = YES;
      for (jint r = 0; r <= self->highestUsedRow_; r++) {
        if ([self getValueAtWithInt:r withInt:c] != nil) {
          columnEmpty = NO;
          break;
        }
      }
      if (!columnEmpty) {
        self->highestUsedColumn_ = c;
        updatedHighestUsedColumn = YES;
        break;
      }
    }
    if (!updatedHighestUsedColumn) {
      self->highestUsedColumn_ = -1;
    }
  }
  if (row == self->highestUsedRow_) {
    jboolean updatedHighestUsedRow = NO;
    for (jint r = self->highestUsedRow_; r >= 0; r--) {
      jboolean rowEmpty = YES;
      for (jint c = 0; c <= self->highestUsedColumn_; c++) {
        if ([self getValueAtWithInt:r withInt:c] != nil) {
          rowEmpty = NO;
          break;
        }
      }
      if (!rowEmpty) {
        self->highestUsedRow_ = r;
        updatedHighestUsedRow = YES;
        break;
      }
    }
    if (!updatedHighestUsedRow) {
      self->highestUsedRow_ = -1;
    }
  }
}

void OrgGeogebraCommonMainSpreadsheetTableModel_addWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonMainSpreadsheetTableModel_updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
  OrgGeogebraCommonMainSpreadsheetTableModel_addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

void OrgGeogebraCommonMainSpreadsheetTableModel_doRemoveWithOrgGeogebraCommonKernelGeosGeoElement_withInt_withInt_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jint row, jint col) {
  [self setValueAtWithId:nil withInt:row withInt:col];
  OrgGeogebraCommonMainSpreadsheetTableModel_updateHighestUsedColAndRowWithInt_withInt_(self, col, row);
}

void OrgGeogebraCommonMainSpreadsheetTableModel_addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonAwtGPoint *location = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetCoords];
  if (location != nil) {
    [((OrgGeogebraCommonMainAlgoCellRangeManager *) nil_chk(self->cellRangeManager_)) addToCellRangeAlgosWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonAwtGPoint:location];
  }
}

void OrgGeogebraCommonMainSpreadsheetTableModel_updateWithoutTraceWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainSpreadsheetTableModel *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonAwtGPoint *location = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetCoords];
  if (location != nil && location->x_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_COLUMNS_VISIBLE_() && location->y_ < OrgGeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_VISIBLE_()) {
    self->highestUsedColumn_ = JavaLangMath_maxWithInt_withInt_(self->highestUsedColumn_, location->x_);
    self->highestUsedRow_ = JavaLangMath_maxWithInt_withInt_(self->highestUsedRow_, location->y_);
    if (location->y_ >= [self getRowCount]) {
      [self setRowCountWithInt:location->y_ + 1];
    }
    if (location->x_ >= [self getColumnCount]) {
    }
    [self setValueAtWithId:geo withInt:location->y_ withInt:location->x_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMainSpreadsheetTableModel)
