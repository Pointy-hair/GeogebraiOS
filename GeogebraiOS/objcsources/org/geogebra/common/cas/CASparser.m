//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/cas/CASparser.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/cas/CASparser.h"
#include "org/geogebra/common/cas/giac/Ggb2giac.h"
#include "org/geogebra/common/kernel/CASException.h"
#include "org/geogebra/common/kernel/CASGenericInterface.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/parser/ParseException.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "org/geogebra/common/main/BracketsError.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonCasCASparser () {
 @public
  OrgGeogebraCommonKernelParserParser *parser_;
  OrgGeogebraCommonKernelParserCashandlersParserFunctions *parserFunctions_;
  id<JavaUtilMap> rbCasTranslations_;
}

+ (void)appendcodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)replaceIndices
                                    withInt:(jint)code;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasCASparser, parser_, OrgGeogebraCommonKernelParserParser *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasCASparser, parserFunctions_, OrgGeogebraCommonKernelParserCashandlersParserFunctions *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasCASparser, rbCasTranslations_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgGeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(JavaLangStringBuilder *replaceIndices, jint code);

typedef NS_ENUM(NSUInteger, OrgGeogebraCommonCasCASparser_FA) {
  OrgGeogebraCommonCasCASparser_FA_NORMAL = 0,
  OrgGeogebraCommonCasCASparser_FA_UNDERSCORE = 1,
  OrgGeogebraCommonCasCASparser_FA_LONG_INDEX = 2,
};

@interface OrgGeogebraCommonCasCASparser_FAEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonCasCASparser_FAEnum_values();

+ (OrgGeogebraCommonCasCASparser_FAEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT OrgGeogebraCommonCasCASparser_FAEnum *OrgGeogebraCommonCasCASparser_FAEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgGeogebraCommonCasCASparser_FAEnum)

FOUNDATION_EXPORT OrgGeogebraCommonCasCASparser_FAEnum *OrgGeogebraCommonCasCASparser_FAEnum_values_[];

#define OrgGeogebraCommonCasCASparser_FAEnum_NORMAL OrgGeogebraCommonCasCASparser_FAEnum_values_[OrgGeogebraCommonCasCASparser_FA_NORMAL]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonCasCASparser_FAEnum, NORMAL)

#define OrgGeogebraCommonCasCASparser_FAEnum_UNDERSCORE OrgGeogebraCommonCasCASparser_FAEnum_values_[OrgGeogebraCommonCasCASparser_FA_UNDERSCORE]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonCasCASparser_FAEnum, UNDERSCORE)

#define OrgGeogebraCommonCasCASparser_FAEnum_LONG_INDEX OrgGeogebraCommonCasCASparser_FAEnum_values_[OrgGeogebraCommonCasCASparser_FA_LONG_INDEX]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonCasCASparser_FAEnum, LONG_INDEX)

__attribute__((unused)) static void OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(OrgGeogebraCommonCasCASparser_FAEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonCasCASparser_FAEnum *new_OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonCasCASparser_FAEnum)

@implementation OrgGeogebraCommonCasCASparser

- (instancetype)initWithOrgGeogebraCommonKernelParserParser:(OrgGeogebraCommonKernelParserParser *)parser
withOrgGeogebraCommonKernelParserCashandlersParserFunctions:(OrgGeogebraCommonKernelParserCashandlersParserFunctions *)pf {
  OrgGeogebraCommonCasCASparser_initWithOrgGeogebraCommonKernelParserParser_withOrgGeogebraCommonKernelParserCashandlersParserFunctions_(self, parser, pf);
  return self;
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)parseGeoGebraCASInputWithNSString:(NSString *)exp
                                              withOrgGeogebraCommonKernelGeosGeoCasCell:(OrgGeogebraCommonKernelGeosGeoCasCell *)cell {
  OrgGeogebraCommonKernelCASException *c;
  @try {
    return [((OrgGeogebraCommonKernelParserParser *) nil_chk(parser_)) parseGeoGebraCASWithNSString:exp withOrgGeogebraCommonKernelGeosGeoCasCell:cell];
  }
  @catch (OrgGeogebraCommonKernelParserParseException *e) {
    c = new_OrgGeogebraCommonKernelCASException_initWithJavaLangThrowable_(e);
    [c setKeyWithNSString:@"InvalidInput"];
    @throw c;
  }
  @catch (OrgGeogebraCommonMainBracketsError *e) {
    c = new_OrgGeogebraCommonKernelCASException_initWithJavaLangThrowable_(e);
    [c setKeyWithNSString:@"UnbalancedBrackets"];
    @throw c;
  }
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)parseGeoGebraCASInputAndResolveDummyVarsWithNSString:(NSString *)inValue
                                                                         withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                                                 withOrgGeogebraCommonKernelGeosGeoCasCell:(OrgGeogebraCommonKernelGeosGeoCasCell *)cell {
  if (inValue == nil || ((jint) [inValue length]) == 0) return nil;
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [self parseGeoGebraCASInputWithNSString:inValue withOrgGeogebraCommonKernelGeosGeoCasCell:cell];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [self resolveVariablesForCASWithOrgGeogebraCommonKernelArithmeticExpressionValue:ve withOrgGeogebraCommonKernelKernel:kernel];
    if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticValidExpression class]]) {
      [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(((OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticValidExpression class])))) setLabelWithNSString:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabel]];
      ve = (OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticValidExpression class]);
    }
    if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]]) {
      (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_getCreator()];
    }
    return ve;
  }
  @catch (JavaLangThrowable *e) {
    if ([e isKindOfClass:[OrgGeogebraCommonKernelCASException class]]) @throw (OrgGeogebraCommonKernelCASException *) check_class_cast(e, [OrgGeogebraCommonKernelCASException class]);
    @throw new_OrgGeogebraCommonKernelCASException_initWithJavaLangThrowable_(e);
  }
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)resolveVariablesForCASWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                 withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  @synchronized(self) {
    jboolean isFunction = [ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]];
    IOSObjectArray *funVars = nil;
    if (isFunction) {
      OrgGeogebraCommonKernelConstruction *cmdCons = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
      funVars = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunction *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunction class])))) getFunctionVariables];
      {
        IOSObjectArray *a__ = funVars;
        OrgGeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgGeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgGeogebraCommonKernelArithmeticFunctionVariable *funVar = *b__++;
          OrgGeogebraCommonKernelGeosGeoElement *localVarGeo = new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_(cmdCons, [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(funVar)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
          [((OrgGeogebraCommonKernelConstruction *) nil_chk(cmdCons)) addLocalVariableWithNSString:[funVar toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withOrgGeogebraCommonKernelGeosGeoElement:localVarGeo];
        }
      }
    }
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) setResolveUnkownVarsAsDummyGeosWithBoolean:YES];
    [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) resolveVariables];
    [kernel setResolveUnkownVarsAsDummyGeosWithBoolean:NO];
    id<JavaUtilSet> nonFunctions = new_JavaUtilTreeSet_init();
    OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *c = OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_getCollectorWithJavaUtilSet_(nonFunctions);
    OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *r = OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_getCollectorWithJavaUtilSet_(nonFunctions);
    (void) [ev traverseWithOrgGeogebraCommonKernelArithmeticTraversing:c];
    ev = [ev traverseWithOrgGeogebraCommonKernelArithmeticTraversing:r];
    if (isFunction) {
      OrgGeogebraCommonKernelConstruction *cmdCons = [kernel getConstruction];
      {
        IOSObjectArray *a__ = funVars;
        OrgGeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgGeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgGeogebraCommonKernelArithmeticFunctionVariable *funVar = *b__++;
          [((OrgGeogebraCommonKernelConstruction *) nil_chk(cmdCons)) removeLocalVariableWithNSString:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(funVar)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        }
      }
    }
    return ev;
  }
}

- (NSString *)toGeoGebraStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                         withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  @try {
    return [self toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:ev withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonKernelCASException_initWithJavaLangThrowable_(e);
  }
}

- (NSString *)toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                 withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  NSString *GeoGebraString;
  OrgGeogebraCommonKernelArithmeticExpressionNode *expr;
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    expr = [ev wrap];
  }
  else expr = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  GeoGebraString = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:YES];
  return GeoGebraString;
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)parseGiacWithNSString:(NSString *)exp {
  @try {
    return [((OrgGeogebraCommonKernelParserParser *) nil_chk(parser_)) parseGiacWithNSString:exp];
  }
  @catch (JavaLangThrowable *t) {
    @throw new_OrgGeogebraCommonKernelCASException_initWithJavaLangThrowable_(t);
  }
}

- (NSString *)replaceIndicesWithNSString:(NSString *)str
                             withBoolean:(jboolean)replaceUnicode {
  @synchronized(self) {
    jint len = ((jint) [((NSString *) nil_chk(str)) length]);
    JavaLangStringBuilder *replaceIndices = new_JavaLangStringBuilder_init();
    OrgGeogebraCommonCasCASparser_FAEnum *state = OrgGeogebraCommonCasCASparser_FAEnum_get_NORMAL();
    for (jint i = 0; i < len; i++) {
      jchar c = [str charAtWithInt:i];
      switch ([state ordinal]) {
        case OrgGeogebraCommonCasCASparser_FA_NORMAL:
        if (c == '_') {
          if (i > 0 && [str charAtWithInt:i - 1] == '\\') {
            (void) [replaceIndices deleteCharAtWithInt:[replaceIndices length] - 1];
            (void) [replaceIndices appendWithChar:'_'];
          }
          else {
            state = OrgGeogebraCommonCasCASparser_FAEnum_get_UNDERSCORE();
            OrgGeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, '_');
          }
        }
        else if (replaceUnicode && c > 127 && c != OrgGeogebraCommonUtilUnicode_MEASURED_ANGLE) {
          OrgGeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, c);
        }
        else {
          (void) [replaceIndices appendWithChar:c];
        }
        break;
        case OrgGeogebraCommonCasCASparser_FA_UNDERSCORE:
        if (c == '{') {
          state = OrgGeogebraCommonCasCASparser_FAEnum_get_LONG_INDEX();
        }
        else {
          state = OrgGeogebraCommonCasCASparser_FAEnum_get_NORMAL();
        }
        OrgGeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, c);
        break;
        case OrgGeogebraCommonCasCASparser_FA_LONG_INDEX:
        if (c == '}') {
          state = OrgGeogebraCommonCasCASparser_FAEnum_get_NORMAL();
        }
        OrgGeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, c);
        break;
      }
    }
    return [replaceIndices description];
  }
}

+ (void)appendcodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)replaceIndices
                                    withInt:(jint)code {
  OrgGeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, code);
}

- (NSString *)insertSpecialCharsWithNSString:(NSString *)str {
  jint prefixLen = ((jint) [((NSString *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_())) length]);
  if (((jint) [((NSString *) nil_chk(str)) length]) < prefixLen) return str;
  jint len = ((jint) [str length]);
  JavaLangStringBuilder *insertSpecial = new_JavaLangStringBuilder_init();
  jchar prefixStart = [OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_() charAtWithInt:0];
  jboolean prefixFound;
  for (jint i = 0; i < len; i++) {
    jchar c = [str charAtWithInt:i];
    prefixFound = NO;
    if (c == prefixStart && i + prefixLen < ((jint) [str length])) {
      prefixFound = YES;
      jint j = i;
      for (jint k = 0; k < prefixLen; k++, j++) {
        if ([OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_() charAtWithInt:k] != [str charAtWithInt:j]) {
          prefixFound = NO;
          break;
        }
      }
      if (prefixFound) {
        jint code = 0;
        jchar digit;
        while (j < len && OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(digit = [str charAtWithInt:j])) {
          code = 10 * code + (digit - 48);
          j++;
        }
        if (code > 0 && code < 65536) {
          (void) [insertSpecial appendWithChar:(jchar) code];
          i = j;
        }
        else {
          (void) [insertSpecial appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_()];
          i += prefixLen;
        }
      }
      else {
        (void) [insertSpecial appendWithChar:c];
      }
    }
    else {
      (void) [insertSpecial appendWithChar:c];
    }
  }
  return [insertSpecial description];
}

- (OrgGeogebraCommonKernelParserCashandlersParserFunctions *)getParserFunctions {
  return parserFunctions_;
}

- (NSString *)translateToCASWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                       withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)casStringType
                                  withOrgGeogebraCommonKernelCASGenericInterface:(id<OrgGeogebraCommonKernelCASGenericInterface>)cas {
  @try {
    NSString *body = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) wrap])) getCASstringWithOrgGeogebraCommonKernelStringTemplate:casStringType withBoolean:NO];
    return body;
  }
  @finally {
  }
}

- (NSString *)getTranslatedCASCommandWithNSString:(NSString *)command {
  return [((id<JavaUtilMap>) nil_chk([self getTranslationRessourceBundle])) getWithId:command];
}

- (jboolean)isCommandAvailableWithNSString:(NSString *)commandKey {
  return [self getTranslatedCASCommandWithNSString:commandKey] != nil;
}

- (id<JavaUtilMap>)getTranslationRessourceBundle {
  @synchronized(self) {
    if (rbCasTranslations_ == nil) {
      rbCasTranslations_ = OrgGeogebraCommonCasGiacGgb2giac_getMap();
    }
    return rbCasTranslations_;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelParserParser:withOrgGeogebraCommonKernelParserCashandlersParserFunctions:", "CASparser", NULL, 0x1, NULL, NULL },
    { "parseGeoGebraCASInputWithNSString:withOrgGeogebraCommonKernelGeosGeoCasCell:", "parseGeoGebraCASInput", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lorg.geogebra.common.kernel.CASException;", NULL },
    { "parseGeoGebraCASInputAndResolveDummyVarsWithNSString:withOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelGeosGeoCasCell:", "parseGeoGebraCASInputAndResolveDummyVars", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lorg.geogebra.common.kernel.CASException;", NULL },
    { "resolveVariablesForCASWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "resolveVariablesForCAS", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x21, NULL, NULL },
    { "toGeoGebraStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:", "toGeoGebraString", "Ljava.lang.String;", 0x1, "Lorg.geogebra.common.kernel.CASException;", NULL },
    { "toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parseGiacWithNSString:", "parseGiac", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lorg.geogebra.common.kernel.CASException;", NULL },
    { "replaceIndicesWithNSString:withBoolean:", "replaceIndices", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "appendcodeWithJavaLangStringBuilder:withInt:", "appendcode", "V", 0xa, NULL, NULL },
    { "insertSpecialCharsWithNSString:", "insertSpecialChars", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getParserFunctions", NULL, "Lorg.geogebra.common.kernel.parser.cashandlers.ParserFunctions;", 0x1, NULL, NULL },
    { "translateToCASWithOrgGeogebraCommonKernelArithmeticValidExpression:withOrgGeogebraCommonKernelStringTemplate:withOrgGeogebraCommonKernelCASGenericInterface:", "translateToCAS", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTranslatedCASCommandWithNSString:", "getTranslatedCASCommand", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isCommandAvailableWithNSString:", "isCommandAvailable", "Z", 0x11, NULL, NULL },
    { "getTranslationRessourceBundle", NULL, "Ljava.util.Map;", 0x20, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", NULL, 0x2, "Lorg.geogebra.common.kernel.parser.Parser;", NULL, NULL,  },
    { "parserFunctions_", NULL, 0x2, "Lorg.geogebra.common.kernel.parser.cashandlers.ParserFunctions;", NULL, NULL,  },
    { "rbCasTranslations_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.cas.CASparser$FA;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonCasCASparser = { 2, "CASparser", "org.geogebra.common.cas", NULL, 0x1, 15, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonCasCASparser;
}

@end

void OrgGeogebraCommonCasCASparser_initWithOrgGeogebraCommonKernelParserParser_withOrgGeogebraCommonKernelParserCashandlersParserFunctions_(OrgGeogebraCommonCasCASparser *self, OrgGeogebraCommonKernelParserParser *parser, OrgGeogebraCommonKernelParserCashandlersParserFunctions *pf) {
  (void) NSObject_init(self);
  self->parser_ = parser;
  self->parserFunctions_ = pf;
}

OrgGeogebraCommonCasCASparser *new_OrgGeogebraCommonCasCASparser_initWithOrgGeogebraCommonKernelParserParser_withOrgGeogebraCommonKernelParserCashandlersParserFunctions_(OrgGeogebraCommonKernelParserParser *parser, OrgGeogebraCommonKernelParserCashandlersParserFunctions *pf) {
  OrgGeogebraCommonCasCASparser *self = [OrgGeogebraCommonCasCASparser alloc];
  OrgGeogebraCommonCasCASparser_initWithOrgGeogebraCommonKernelParserParser_withOrgGeogebraCommonKernelParserCashandlersParserFunctions_(self, parser, pf);
  return self;
}

void OrgGeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(JavaLangStringBuilder *replaceIndices, jint code) {
  OrgGeogebraCommonCasCASparser_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(replaceIndices)) appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_()];
  (void) [replaceIndices appendWithInt:code];
  (void) [replaceIndices appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_DELIMITER_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonCasCASparser)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonCasCASparser_FAEnum)

OrgGeogebraCommonCasCASparser_FAEnum *OrgGeogebraCommonCasCASparser_FAEnum_values_[3];

@implementation OrgGeogebraCommonCasCASparser_FAEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonCasCASparser_FAEnum_values() {
  OrgGeogebraCommonCasCASparser_FAEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonCasCASparser_FAEnum_values_ count:3 type:OrgGeogebraCommonCasCASparser_FAEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonCasCASparser_FAEnum_values();
}

+ (OrgGeogebraCommonCasCASparser_FAEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonCasCASparser_FAEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonCasCASparser_FAEnum *OrgGeogebraCommonCasCASparser_FAEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonCasCASparser_FAEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonCasCASparser_FAEnum *e = OrgGeogebraCommonCasCASparser_FAEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonCasCASparser_FAEnum class]) {
    OrgGeogebraCommonCasCASparser_FAEnum_NORMAL = new_OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(@"NORMAL", 0);
    OrgGeogebraCommonCasCASparser_FAEnum_UNDERSCORE = new_OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(@"UNDERSCORE", 1);
    OrgGeogebraCommonCasCASparser_FAEnum_LONG_INDEX = new_OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(@"LONG_INDEX", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonCasCASparser_FAEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NORMAL", "NORMAL", 0x4019, "Lorg.geogebra.common.cas.CASparser$FA;", &OrgGeogebraCommonCasCASparser_FAEnum_NORMAL, NULL,  },
    { "UNDERSCORE", "UNDERSCORE", 0x4019, "Lorg.geogebra.common.cas.CASparser$FA;", &OrgGeogebraCommonCasCASparser_FAEnum_UNDERSCORE, NULL,  },
    { "LONG_INDEX", "LONG_INDEX", 0x4019, "Lorg.geogebra.common.cas.CASparser$FA;", &OrgGeogebraCommonCasCASparser_FAEnum_LONG_INDEX, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.cas.CASparser$FA;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonCasCASparser_FAEnum = { 2, "FA", "org.geogebra.common.cas", "CASparser", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/cas/CASparser$FA;>;" };
  return &_OrgGeogebraCommonCasCASparser_FAEnum;
}

@end

void OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(OrgGeogebraCommonCasCASparser_FAEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonCasCASparser_FAEnum *new_OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonCasCASparser_FAEnum *self = [OrgGeogebraCommonCasCASparser_FAEnum alloc];
  OrgGeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonCasCASparser_FAEnum)
