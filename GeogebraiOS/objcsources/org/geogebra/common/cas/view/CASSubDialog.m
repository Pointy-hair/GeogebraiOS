//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/cas/view/CASSubDialog.java
//


#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Vector.h"
#include "org/geogebra/common/cas/view/CASSubDialog.h"
#include "org/geogebra/common/cas/view/CASTable.h"
#include "org/geogebra/common/cas/view/CASView.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"

@interface OrgGeogebraCommonCasViewCASSubDialog ()

+ (void)addVariablesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)var
                                          withJavaUtilHashSet:(JavaUtilHashSet *)vars;

@end

__attribute__((unused)) static void OrgGeogebraCommonCasViewCASSubDialog_addVariablesWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilHashSet_(OrgGeogebraCommonKernelGeosGeoElement *var, JavaUtilHashSet *vars);

@interface OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue () {
 @public
  NSString *variable_;
  NSString *value_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue, variable_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue, value_, NSString *)

NSString *OrgGeogebraCommonCasViewCASSubDialog_EVAL_SYM_ = @"=";
NSString *OrgGeogebraCommonCasViewCASSubDialog_NUM_SYM_ = @"\u2248";
NSString *OrgGeogebraCommonCasViewCASSubDialog_SUB_SYM_ = @"\u2713";
NSString *OrgGeogebraCommonCasViewCASSubDialog_ACTION_EVALUATE_ = @"Evaluate";
NSString *OrgGeogebraCommonCasViewCASSubDialog_ACTION_NUMERIC_ = @"Numeric";
NSString *OrgGeogebraCommonCasViewCASSubDialog_ACTION_SUBSTITUTE_ = @"Substitute";

@implementation OrgGeogebraCommonCasViewCASSubDialog

- (instancetype)initWithNSString:(NSString *)prefix
                    withNSString:(NSString *)evalText
                    withNSString:(NSString *)postfix
                         withInt:(jint)editRow {
  OrgGeogebraCommonCasViewCASSubDialog_initWithNSString_withNSString_withNSString_withInt_(self, prefix, evalText, postfix, editRow);
  return self;
}

- (OrgGeogebraCommonCasViewCASView *)getCASView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)initDataWithOrgGeogebraCommonKernelGeosGeoCasCell:(OrgGeogebraCommonKernelGeosGeoCasCell *)cell {
  JavaUtilHashSet *vars = [new_JavaUtilHashSet_init() autorelease];
  if ([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(cell)) getInputVE])) getVariables] != nil) {
    for (OrgGeogebraCommonKernelGeosGeoElement * __strong var in nil_chk([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([cell getInputVE])) getVariables])) {
      OrgGeogebraCommonCasViewCASSubDialog_addVariablesWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilHashSet_(var, vars);
    }
  }
  JavaUtilVector *row;
  OrgGeogebraCommonCasViewCASSubDialog_setAndConsume_data_(self, new_JavaUtilVector_initWithInt_([vars size] + 1));
  id<JavaUtilIterator> iter = [vars iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    row = [new_JavaUtilVector_initWithInt_(2) autorelease];
    OrgGeogebraCommonKernelGeosGeoElement *var = [iter next];
    NSString *nextVar = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(var)) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    jint i = 0;
    for (i = 0; i < [data_ size]; i++) {
      if ([((NSString *) nil_chk([((JavaUtilVector *) nil_chk([data_ getWithInt:i])) firstElement])) compareToWithId:nextVar] >= 0) {
        break;
      }
    }
    if (i == [data_ size] || ![((NSString *) nil_chk([((JavaUtilVector *) nil_chk([data_ getWithInt:i])) firstElement])) isEqual:nextVar]) {
      [row addWithId:nextVar];
      [row addWithId:@""];
      [data_ insertElementAtWithId:row withInt:i];
    }
  }
  row = [new_JavaUtilVector_initWithInt_(2) autorelease];
  [row addWithId:@""];
  [row addWithId:@""];
  [data_ addWithId:row];
}

+ (void)addVariablesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)var
                                          withJavaUtilHashSet:(JavaUtilHashSet *)vars {
  OrgGeogebraCommonCasViewCASSubDialog_addVariablesWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilHashSet_(var, vars);
}

- (jboolean)applyWithNSString:(NSString *)actionCommand {
  id<OrgGeogebraCommonCasViewCASTable> table = [((OrgGeogebraCommonCasViewCASView *) nil_chk([self getCASView])) getConsoleTable];
  JavaLangStringBuilder *substList = [new_JavaLangStringBuilder_initWithNSString_(@"{") autorelease];
  JavaLangStringBuilder *substComment = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(data_)) size]; i++) {
    NSString *fromExpr = [((NSString *) nil_chk([((JavaUtilVector *) nil_chk([data_ getWithInt:i])) getWithInt:0])) trim];
    NSString *toExpr = [((NSString *) nil_chk([((JavaUtilVector *) nil_chk([data_ getWithInt:i])) getWithInt:1])) trim];
    if (![((NSString *) nil_chk(fromExpr)) isEqual:@""] && ![((NSString *) nil_chk(toExpr)) isEqual:@""]) {
      if ([substList length] > 1) {
        [substList appendWithChar:','];
        [substComment appendWithChar:','];
      }
      fromExpr = [((OrgGeogebraCommonCasViewCASView *) nil_chk([self getCASView])) resolveCASrowReferencesWithNSString:fromExpr withInt:editRow_];
      toExpr = [((OrgGeogebraCommonCasViewCASView *) nil_chk([self getCASView])) resolveCASrowReferencesWithNSString:toExpr withInt:editRow_];
      [substList appendWithNSString:fromExpr];
      [substList appendWithChar:'='];
      [substList appendWithNSString:toExpr];
      [substComment appendWithNSString:fromExpr];
      [substComment appendWithChar:'='];
      [substComment appendWithNSString:toExpr];
    }
  }
  [substList appendWithChar:'}'];
  if ([@"{}" isEqual:[substList description]]) return NO;
  jboolean keepInput = NO;
  NSString *subCmd = JreStrcat("$$C@C", @"Substitute[", evalText_, ',', substList, ']');
  if ([((NSString *) nil_chk(actionCommand)) isEqual:@"Substitute"]) {
    subCmd = JreStrcat("$$C@C", @"Substitute[", evalText_, ',', substList, ']');
    keepInput = YES;
  }
  else if ([actionCommand isEqual:@"Numeric"]) {
    subCmd = JreStrcat("$$C", @"Numeric[", subCmd, ']');
    keepInput = NO;
  }
  @try {
    OrgGeogebraCommonKernelGeosGeoCasCell *currCell = [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk(table)) getGeoCasCellWithInt:editRow_];
    [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(currCell)) setProcessingInformationWithNSString:prefix_ withNSString:subCmd withNSString:postfix_];
    [currCell setEvalCommandWithNSString:@"Substitute"];
    [currCell setEvalCommentWithNSString:[substComment description]];
    [currCell setKeepInputUsedWithBoolean:keepInput];
    [((OrgGeogebraCommonCasViewCASView *) nil_chk([self getCASView])) processRowThenEditWithInt:editRow_ withBoolean:YES];
    return YES;
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

- (void)dealloc {
  RELEASE_(prefix_);
  RELEASE_(evalText_);
  RELEASE_(postfix_);
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:withInt:", "CASSubDialog", NULL, 0x1, NULL, NULL },
    { "getCASView", NULL, "Lorg.geogebra.common.cas.view.CASView;", 0x404, NULL, NULL },
    { "initDataWithOrgGeogebraCommonKernelGeosGeoCasCell:", "initData", "V", 0x4, NULL, NULL },
    { "addVariablesWithOrgGeogebraCommonKernelGeosGeoElement:withJavaUtilHashSet:", "addVariables", "V", 0xa, NULL, NULL },
    { "applyWithNSString:", "apply", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "editRow_", NULL, 0x4, "I", NULL, NULL,  },
    { "prefix_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "evalText_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "postfix_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "EVAL_SYM_", NULL, 0x1c, "Ljava.lang.String;", &OrgGeogebraCommonCasViewCASSubDialog_EVAL_SYM_, NULL,  },
    { "NUM_SYM_", NULL, 0x1c, "Ljava.lang.String;", &OrgGeogebraCommonCasViewCASSubDialog_NUM_SYM_, NULL,  },
    { "SUB_SYM_", NULL, 0x1c, "Ljava.lang.String;", &OrgGeogebraCommonCasViewCASSubDialog_SUB_SYM_, NULL,  },
    { "ACTION_EVALUATE_", NULL, 0x1c, "Ljava.lang.String;", &OrgGeogebraCommonCasViewCASSubDialog_ACTION_EVALUATE_, NULL,  },
    { "ACTION_NUMERIC_", NULL, 0x1c, "Ljava.lang.String;", &OrgGeogebraCommonCasViewCASSubDialog_ACTION_NUMERIC_, NULL,  },
    { "ACTION_SUBSTITUTE_", NULL, 0x1c, "Ljava.lang.String;", &OrgGeogebraCommonCasViewCASSubDialog_ACTION_SUBSTITUTE_, NULL,  },
    { "data_", NULL, 0x4, "Ljava.util.Vector;", NULL, "Ljava/util/Vector<Ljava/util/Vector<Ljava/lang/String;>;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.cas.view.CASSubDialog$SubstituteValue;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonCasViewCASSubDialog = { 2, "CASSubDialog", "org.geogebra.common.cas.view", NULL, 0x401, 5, methods, 11, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonCasViewCASSubDialog;
}

@end

void OrgGeogebraCommonCasViewCASSubDialog_initWithNSString_withNSString_withNSString_withInt_(OrgGeogebraCommonCasViewCASSubDialog *self, NSString *prefix, NSString *evalText, NSString *postfix, jint editRow) {
  NSObject_init(self);
  OrgGeogebraCommonCasViewCASSubDialog_set_prefix_(self, prefix);
  OrgGeogebraCommonCasViewCASSubDialog_set_evalText_(self, evalText);
  OrgGeogebraCommonCasViewCASSubDialog_set_postfix_(self, postfix);
  self->editRow_ = editRow;
}

void OrgGeogebraCommonCasViewCASSubDialog_addVariablesWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilHashSet_(OrgGeogebraCommonKernelGeosGeoElement *var, JavaUtilHashSet *vars) {
  OrgGeogebraCommonCasViewCASSubDialog_initialize();
  if ([var isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(var, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression];
    if (ve != nil) [((JavaUtilHashSet *) nil_chk(vars)) addAllWithJavaUtilCollection:[ve getVariables]];
  }
  else [((JavaUtilHashSet *) nil_chk(vars)) addWithId:var];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonCasViewCASSubDialog)

@implementation OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue

- (instancetype)initWithNSString:(NSString *)var
                    withNSString:(NSString *)val {
  OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue_initWithNSString_withNSString_(self, var, val);
  return self;
}

- (NSString *)getVariable {
  return variable_;
}

- (void)setVariableWithNSString:(NSString *)var {
  OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue_set_variable_(self, var);
}

- (NSString *)getValue {
  return value_;
}

- (void)setValueWithNSString:(NSString *)val {
  OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue_set_value_(self, val);
}

- (void)dealloc {
  RELEASE_(variable_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:", "SubstituteValue", NULL, 0x1, NULL, NULL },
    { "getVariable", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setVariableWithNSString:", "setVariable", "V", 0x1, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setValueWithNSString:", "setValue", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "variable_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "value_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue = { 2, "SubstituteValue", "org.geogebra.common.cas.view", "CASSubDialog", 0xc, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue;
}

@end

void OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue_initWithNSString_withNSString_(OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue *self, NSString *var, NSString *val) {
  NSObject_init(self);
  OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue_set_variable_(self, var);
  OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue_set_value_(self, val);
}

OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue *new_OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue_initWithNSString_withNSString_(NSString *var, NSString *val) {
  OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue *self = [OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue alloc];
  OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue_initWithNSString_withNSString_(self, var, val);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonCasViewCASSubDialog_SubstituteValue)
