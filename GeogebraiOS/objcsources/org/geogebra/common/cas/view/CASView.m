//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/cas/view/CASView.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/cas/GeoGebraCAS.h"
#include "org/geogebra/common/cas/view/CASInputHandler.h"
#include "org/geogebra/common/cas/view/CASTable.h"
#include "org/geogebra/common/cas/view/CASTableCellEditor.h"
#include "org/geogebra/common/cas/view/CASView.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/ModeSetter.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/View.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/DialogManager.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/util/debug/Log.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgGeogebraCommonCasViewCASView () {
 @public
  OrgGeogebraCommonCasGeoGebraCAS *cas_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasViewCASView, cas_, OrgGeogebraCommonCasGeoGebraCAS *)

NSString *OrgGeogebraCommonCasViewCASView_TOOLBAR_DEFINITION_D_ = @"1001 | 1002 | 1003  || 1005 | 1004 || 1006 | 1007 | 1010 || 1008 1009 || 66 68 || 6";
NSString *OrgGeogebraCommonCasViewCASView_TOOLBAR_DEFINITION_ = @"1001 | 1002 | 1003  || 1005 | 1004 || 1006 | 1007 | 1010 || 1008 | 1009 || 6";

@implementation OrgGeogebraCommonCasViewCASView

- (id<OrgGeogebraCommonCasViewCASTable>)getConsoleTable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonMainApp *)getApp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)showSubstituteDialogWithNSString:(NSString *)prefix
                            withNSString:(NSString *)evalText
                            withNSString:(NSString *)postfix
                                 withInt:(jint)selRow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLabels {
  [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) setLabels];
}

- (jint)getViewID {
  return OrgGeogebraCommonMainApp_VIEW_CAS;
}

- (NSString *)getRowOutputValueWithInt:(jint)n {
  OrgGeogebraCommonKernelArithmeticValidExpression *outVE = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:n])) getOutputValidExpression];
  if (outVE == nil) {
    return [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:n])) getOutputWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()];
  }
  if ([[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(outVE)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) {
    return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([outVE unwrap], [OrgGeogebraCommonKernelGeosGeoElement class])))) toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()];
  }
  return [outVE toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()];
}

- (NSString *)getRowInputValueWithInt:(jint)n {
  return [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:n])) getInputWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (jint)getRowCount {
  return [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getRowCount];
}

- (OrgGeogebraCommonCasGeoGebraCAS *)getCAS {
  @synchronized(self) {
    if (cas_ == nil) {
      cas_ = (OrgGeogebraCommonCasGeoGebraCAS *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS], [OrgGeogebraCommonCasGeoGebraCAS class]);
    }
    return cas_;
  }
}

- (void)setModeWithInt:(jint)mode
withOrgGeogebraCommonKernelModeSetterEnum:(OrgGeogebraCommonKernelModeSetterEnum *)m {
  if (m != OrgGeogebraCommonKernelModeSetterEnum_get_TOOLBAR()) return;
  NSString *command = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getModeTextWithInt:mode];
  jboolean backToEvaluate = YES;
  {
    jboolean undo;
    switch (mode) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_EVALUATE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_NUMERIC:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_KEEP_INPUT:
      backToEvaluate = NO;
      [self processInputWithNSString:command];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_EXPAND:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_FACTOR:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_SUBSTITUTE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_NUMERICAL_SOLVE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_SOLVE:
      [self processInputWithNSString:command];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DELETE:
      if ([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getGuiManager] != nil && [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getGuiManager])) getActiveToolbarId] != [self getViewID]) backToEvaluate = NO;
      undo = [self deleteCasCellsWithIntArray:[((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getSelectedRows]];
      if (undo) [((OrgGeogebraCommonMainApp *) nil_chk([((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getApplication])) storeUndoInfo];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FUNCTION_INSPECTOR:
      if ([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getGuiManager] != nil && [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getGuiManager])) getActiveToolbarId] != [self getViewID]) backToEvaluate = NO;
      if (((IOSIntArray *) nil_chk([((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getSelectedRows]))->size_ > 0) {
        OrgGeogebraCommonKernelGeosGeoCasCell *cell = [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:IOSIntArray_Get(nil_chk([((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getSelectedRows]), 0)];
        if (cell != nil && [[cell getTwinGeo] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
          [((OrgGeogebraCommonMainDialogManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) getDialogManager])) showFunctionInspectorWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast([cell getTwinGeo], [OrgGeogebraCommonKernelGeosGeoFunction class])];
        }
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_DERIVATIVE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_INTEGRAL:
      [self processInputWithNSString:command];
      break;
      default:
      backToEvaluate = NO;
    }
  }
  if (backToEvaluate) [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_EVALUATE withOrgGeogebraCommonKernelModeSetterEnum:OrgGeogebraCommonKernelModeSetterEnum_get_CAS_VIEW()];
}

- (void)renameWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)clearView {
  [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) deleteAllRows];
  [self ensureOneEmptyRow];
  [((id<OrgGeogebraCommonCasViewCASTableCellEditor>) nil_chk([((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getEditor])) clearInputText];
}

- (void)ensureOneEmptyRow {
  jint rows = [self getRowCount];
  if (rows == 0 || ![self isRowOutputEmptyWithInt:rows - 1] || [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:rows - 1])) isInConstructionList]) {
    OrgGeogebraCommonKernelGeosGeoCasCell *casCell = new_OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
    [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) insertRowWithInt:rows withOrgGeogebraCommonKernelGeosGeoCasCell:casCell withBoolean:NO];
  }
}

- (void)attachView {
  [self clearView];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyAddAllWithOrgGeogebraCommonKernelView:self];
  [kernel_ attachWithOrgGeogebraCommonKernelView:self];
}

- (void)detachView {
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) detachWithOrgGeogebraCommonKernelView:self];
  [self clearView];
}

- (void)reset {
  [self repaintView];
}

- (void)updateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)addWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self ensureOneEmptyRow];
}

- (void)removeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
    OrgGeogebraCommonKernelGeosGeoCasCell *casCell = (OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class]);
    jint row = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) getRowNumber];
    jboolean wasEditing = [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) isEditing];
    [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) stopEditing];
    [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) deleteRowWithInt:row];
    if (wasEditing) {
      [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) startEditingRowWithInt:row];
    }
  }
}

- (void)updateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
    OrgGeogebraCommonKernelGeosGeoCasCell *casCell = (OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class]);
    [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) setRowWithInt:[((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) getRowNumber] withOrgGeogebraCommonKernelGeosGeoCasCell:casCell];
  }
}

- (void)updateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)processInputWithNSString:(NSString *)ggbcmd {
  [((OrgGeogebraCommonCasViewCASInputHandler *) nil_chk([self getInputHandler])) processCurrentRowWithNSString:ggbcmd];
  [((OrgGeogebraCommonMainApp *) nil_chk([self getApp])) storeUndoInfo];
}

- (void)processRowThenEditWithInt:(jint)row
                      withBoolean:(jboolean)flag {
  [((OrgGeogebraCommonCasViewCASInputHandler *) nil_chk([self getInputHandler])) processRowThenEditWithInt:row withBoolean:flag];
}

- (NSString *)resolveCASrowReferencesWithNSString:(NSString *)inputExp
                                          withInt:(jint)row {
  NSString *result = [((OrgGeogebraCommonCasViewCASInputHandler *) nil_chk([self getInputHandler])) resolveCASrowReferencesWithNSString:inputExp withInt:row withChar:OrgGeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_STATIC withBoolean:NO];
  return [((OrgGeogebraCommonCasViewCASInputHandler *) nil_chk([self getInputHandler])) resolveCASrowReferencesWithNSString:result withInt:row withChar:OrgGeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_DYNAMIC withBoolean:NO];
}

- (jboolean)deleteCasCellsWithIntArray:(IOSIntArray *)selRows {
  jboolean undoNeeded = NO;
  OrgGeogebraCommonUtilDebugLog_debugWithId_(JavaLangInteger_valueOfWithInt_(((IOSIntArray *) nil_chk(selRows))->size_));
  for (jint i = selRows->size_ - 1; i >= 0; i--) {
    OrgGeogebraCommonKernelGeosGeoCasCell *casCell = [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:IOSIntArray_Get(selRows, i)];
    if (casCell != nil) {
      [casCell remove];
      undoNeeded = YES;
    }
  }
  if (selRows->size_ > 0) {
    [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) resetRowNumbersWithInt:IOSIntArray_Get(selRows, 0)];
  }
  return undoNeeded;
}

- (NSString *)getLaTeXfromCellsWithIntArray:(IOSIntArray *)selRows {
  JavaLangStringBuilder *ret = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(selRows))->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoCasCell *casCell = [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:IOSIntArray_Get(selRows, i)];
    if (casCell != nil) {
      (void) [ret appendWithNSString:[casCell getLaTeXOutput]];
      (void) [ret appendWithNSString:@" \\\\ "];
    }
  }
  return [ret description];
}

- (OrgGeogebraCommonCasViewCASInputHandler *)getInputHandler {
  return casInputHandler_;
}

- (jboolean)isRowEmptyWithInt:(jint)row {
  if (row < 0) return NO;
  OrgGeogebraCommonKernelGeosGeoCasCell *value = [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:row];
  return [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(value)) isEmpty];
}

- (jboolean)isRowInputEmptyWithInt:(jint)row {
  if (row < 0) return NO;
  OrgGeogebraCommonKernelGeosGeoCasCell *value = [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:row];
  return [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(value)) isInputEmpty];
}

- (void)insertRowWithOrgGeogebraCommonKernelGeosGeoCasCell:(OrgGeogebraCommonKernelGeosGeoCasCell *)newValue
                                               withBoolean:(jboolean)startEditing {
  OrgGeogebraCommonKernelGeosGeoCasCell *toInsert = newValue;
  jint lastRow = [self getRowCount] - 1;
  if ([self isRowEmptyWithInt:lastRow]) {
    if (toInsert == nil) {
      toInsert = new_OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
    }
    [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) setRowWithInt:lastRow withOrgGeogebraCommonKernelGeosGeoCasCell:toInsert];
    if (startEditing) [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) startEditingRowWithInt:lastRow];
  }
  else {
    [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) insertRowWithInt:lastRow + 1 withOrgGeogebraCommonKernelGeosGeoCasCell:toInsert withBoolean:startEditing];
  }
}

- (jboolean)isRowOutputEmptyWithInt:(jint)row {
  if (row < 0) return NO;
  OrgGeogebraCommonKernelGeosGeoCasCell *value = [((id<OrgGeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:row];
  return [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(value)) isOutputEmpty] && ![value isUseAsText];
}

- (void)startBatchUpdate {
}

- (void)endBatchUpdate {
}

- (instancetype)init {
  OrgGeogebraCommonCasViewCASView_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getConsoleTable", NULL, "Lorg.geogebra.common.cas.view.CASTable;", 0x401, NULL, NULL },
    { "getApp", NULL, "Lorg.geogebra.common.main.App;", 0x401, NULL, NULL },
    { "showSubstituteDialogWithNSString:withNSString:withNSString:withInt:", "showSubstituteDialog", "V", 0x401, NULL, NULL },
    { "setLabels", NULL, "V", 0x1, NULL, NULL },
    { "getViewID", NULL, "I", 0x1, NULL, NULL },
    { "getRowOutputValueWithInt:", "getRowOutputValue", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getRowInputValueWithInt:", "getRowInputValue", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getRowCount", NULL, "I", 0x1, NULL, NULL },
    { "getCAS", NULL, "Lorg.geogebra.common.cas.GeoGebraCAS;", 0x31, NULL, NULL },
    { "setModeWithInt:withOrgGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "renameWithOrgGeogebraCommonKernelGeosGeoElement:", "rename", "V", 0x1, NULL, NULL },
    { "clearView", NULL, "V", 0x1, NULL, NULL },
    { "ensureOneEmptyRow", NULL, "V", 0x1, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "detachView", NULL, "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "updateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:", "updateAuxiliaryObject", "V", 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x1, NULL, NULL },
    { "removeWithOrgGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "updateWithOrgGeogebraCommonKernelGeosGeoElement:", "update", "V", 0x1, NULL, NULL },
    { "updateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "updateVisualStyle", "V", 0x11, NULL, NULL },
    { "processInputWithNSString:", "processInput", "V", 0x1, NULL, NULL },
    { "processRowThenEditWithInt:withBoolean:", "processRowThenEdit", "V", 0x1, NULL, NULL },
    { "resolveCASrowReferencesWithNSString:withInt:", "resolveCASrowReferences", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "deleteCasCellsWithIntArray:", "deleteCasCells", "Z", 0x1, NULL, NULL },
    { "getLaTeXfromCellsWithIntArray:", "getLaTeXfromCells", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getInputHandler", NULL, "Lorg.geogebra.common.cas.view.CASInputHandler;", 0x1, NULL, NULL },
    { "isRowEmptyWithInt:", "isRowEmpty", "Z", 0x1, NULL, NULL },
    { "isRowInputEmptyWithInt:", "isRowInputEmpty", "Z", 0x1, NULL, NULL },
    { "insertRowWithOrgGeogebraCommonKernelGeosGeoCasCell:withBoolean:", "insertRow", "V", 0x1, NULL, NULL },
    { "isRowOutputEmptyWithInt:", "isRowOutputEmpty", "Z", 0x1, NULL, NULL },
    { "startBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "endBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TOOLBAR_DEFINITION_D_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonCasViewCASView_TOOLBAR_DEFINITION_D_, NULL,  },
    { "TOOLBAR_DEFINITION_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonCasViewCASView_TOOLBAR_DEFINITION_, NULL,  },
    { "cas_", NULL, 0x2, "Lorg.geogebra.common.cas.GeoGebraCAS;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "casInputHandler_", NULL, 0x4, "Lorg.geogebra.common.cas.view.CASInputHandler;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonCasViewCASView = { 2, "CASView", "org.geogebra.common.cas.view", NULL, 0x401, 34, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonCasViewCASView;
}

@end

void OrgGeogebraCommonCasViewCASView_init(OrgGeogebraCommonCasViewCASView *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonCasViewCASView)
