//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/cas/AlgoAsymptoteFunction.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "org/geogebra/common/cas/AlgoAsymptoteFunction.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"

@interface OrgGeogebraCommonCasAlgoAsymptoteFunction () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *f_;
  OrgGeogebraCommonKernelGeosGeoList *g_;
  JavaLangStringBuilder *sb_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasAlgoAsymptoteFunction, f_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasAlgoAsymptoteFunction, g_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonCasAlgoAsymptoteFunction, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void OrgGeogebraCommonCasAlgoAsymptoteFunction_compute(OrgGeogebraCommonCasAlgoAsymptoteFunction *self);

@implementation OrgGeogebraCommonCasAlgoAsymptoteFunction

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonCasAlgoAsymptoteFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Asymptote();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return g_;
}

- (void)compute {
  OrgGeogebraCommonCasAlgoAsymptoteFunction_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoAsymptoteFunction", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonCasAlgoAsymptoteFunction = { 2, "AlgoAsymptoteFunction", "org.geogebra.common.cas", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonCasAlgoAsymptoteFunction;
}

@end

void OrgGeogebraCommonCasAlgoAsymptoteFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonCasAlgoAsymptoteFunction *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->sb_ = new_JavaLangStringBuilder_init();
  self->f_ = f;
  self->g_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self->g_ setLineTypeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  [self->g_ setTypeStringForXMLWithNSString:@"line"];
  [self setInputOutput];
  OrgGeogebraCommonCasAlgoAsymptoteFunction_compute(self);
  [self->g_ setLabelWithNSString:label];
}

OrgGeogebraCommonCasAlgoAsymptoteFunction *new_OrgGeogebraCommonCasAlgoAsymptoteFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonCasAlgoAsymptoteFunction *self = [OrgGeogebraCommonCasAlgoAsymptoteFunction alloc];
  OrgGeogebraCommonCasAlgoAsymptoteFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

void OrgGeogebraCommonCasAlgoAsymptoteFunction_compute(OrgGeogebraCommonCasAlgoAsymptoteFunction *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setUndefined];
    return;
  }
  @try {
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
    (void) [self->sb_ appendWithNSString:@"{"];
    [self->f_ getHorizontalPositiveAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:self->f_ withJavaLangStringBuilder:self->sb_];
    [self->f_ getHorizontalNegativeAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:self->f_ withJavaLangStringBuilder:self->sb_];
    [self->f_ getDiagonalPositiveAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:self->f_ withJavaLangStringBuilder:self->sb_];
    [self->f_ getDiagonalNegativeAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:self->f_ withJavaLangStringBuilder:self->sb_];
    [self->f_ getVerticalAsymptotesWithOrgGeogebraCommonKernelGeosGeoFunction:self->f_ withJavaLangStringBuilder:self->sb_ withBoolean:NO];
    (void) [self->sb_ appendWithNSString:@"}"];
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToListWithNSString:[self->sb_ description]]];
  }
  @catch (JavaLangThrowable *th) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonCasAlgoAsymptoteFunction)
