//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/plugin/SensorLogger.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/SensorLogger.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonPluginSensorLogger () {
 @public
  jint stepsToGo_;
  jdouble lastStamp_;
}

- (void)prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:(OrgGeogebraCommonPluginSensorLogger_TypesEnum *)type
                               withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                              withDouble:(jdouble)limit;

- (void)registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:(OrgGeogebraCommonPluginSensorLogger_TypesEnum *)type;

@end

__attribute__((unused)) static void OrgGeogebraCommonPluginSensorLogger_prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_withOrgGeogebraCommonKernelGeosGeoElement_withDouble_(OrgGeogebraCommonPluginSensorLogger *self, OrgGeogebraCommonPluginSensorLogger_TypesEnum *type, OrgGeogebraCommonKernelGeosGeoElement *geo, jdouble limit);

__attribute__((unused)) static void OrgGeogebraCommonPluginSensorLogger_registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_(OrgGeogebraCommonPluginSensorLogger *self, OrgGeogebraCommonPluginSensorLogger_TypesEnum *type);

@interface OrgGeogebraCommonPluginSensorLogger_TypesEnum () {
 @public
  NSString *string_;
  jboolean storeInXML__;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonPluginSensorLogger_TypesEnum, string_, NSString *)

__attribute__((unused)) static void OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(OrgGeogebraCommonPluginSensorLogger_TypesEnum *self, NSString *s, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonPluginSensorLogger_TypesEnum *new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(NSString *s, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(OrgGeogebraCommonPluginSensorLogger_TypesEnum *self, NSString *s, jboolean storeInXML, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonPluginSensorLogger_TypesEnum *new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(NSString *s, jboolean storeInXML, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

jint OrgGeogebraCommonPluginSensorLogger_port_ = 7166;
NSString *OrgGeogebraCommonPluginSensorLogger_appID_ = @"ABCD";

@implementation OrgGeogebraCommonPluginSensorLogger

- (jboolean)startLogging {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)closeSocket {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)registerGeoWithNSString:(NSString *)s
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum *type = OrgGeogebraCommonPluginSensorLogger_TypesEnum_lookupWithNSString_(s);
  if (type != nil) {
    if (type == OrgGeogebraCommonPluginSensorLogger_TypesEnum_get_PORT()) {
      OrgGeogebraCommonPluginSensorLogger_port_ = J2ObjCFpToInt([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getValue]);
    }
    else if (type == OrgGeogebraCommonPluginSensorLogger_TypesEnum_get_APP_ID()) {
      JreStrongAssign(&OrgGeogebraCommonPluginSensorLogger_appID_, nil, [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])))) getTextString]);
    }
    else {
      OrgGeogebraCommonPluginSensorLogger_prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_withOrgGeogebraCommonKernelGeosGeoElement_withDouble_(self, type, geo, 0);
      [((JavaUtilHashMap *) nil_chk(listeners_)) putWithId:type withId:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])];
    }
  }
}

- (void)beforeLog {
  stepsToGo_--;
}

- (void)removeRegisteredGeoWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:(OrgGeogebraCommonPluginSensorLogger_TypesEnum *)sensor {
  [((JavaUtilHashMap *) nil_chk(listeners_)) removeWithId:sensor];
  [((JavaUtilHashMap *) nil_chk(listenersL_)) removeWithId:sensor];
  [((JavaUtilHashMap *) nil_chk(listenersF_)) removeWithId:sensor];
  [((JavaUtilHashMap *) nil_chk(listenersAges_)) removeWithId:sensor];
  [((JavaUtilHashMap *) nil_chk(listLimits_)) removeWithId:sensor];
}

- (void)removeRegisteredGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum *typeToRemove = nil;
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    for (OrgGeogebraCommonPluginSensorLogger_TypesEnum * __strong type in nil_chk([((JavaUtilHashMap *) nil_chk(self->listeners_)) keySet])) {
      if ([self->listeners_ getWithId:type] == geo) {
        typeToRemove = type;
      }
    }
  }
  else if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) {
    for (OrgGeogebraCommonPluginSensorLogger_TypesEnum * __strong type in nil_chk([((JavaUtilHashMap *) nil_chk(self->listenersL_)) keySet])) {
      if ([self->listenersL_ getWithId:type] == geo) {
        typeToRemove = type;
      }
    }
  }
  else if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
    for (OrgGeogebraCommonPluginSensorLogger_TypesEnum * __strong type in nil_chk([((JavaUtilHashMap *) nil_chk(self->listenersF_)) keySet])) {
      if ([self->listenersF_ getWithId:type] == geo) {
        typeToRemove = type;
      }
    }
  }
  if (typeToRemove != nil) {
    [self removeRegisteredGeoWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:typeToRemove];
  }
}

- (void)prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:(OrgGeogebraCommonPluginSensorLogger_TypesEnum *)type
                               withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                              withDouble:(jdouble)limit {
  OrgGeogebraCommonPluginSensorLogger_prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_withOrgGeogebraCommonKernelGeosGeoElement_withDouble_(self, type, geo, limit);
}

- (void)registerGeoListWithNSString:(NSString *)s
withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list {
  [self registerGeoListWithNSString:s withOrgGeogebraCommonKernelGeosGeoList:list withDouble:0];
}

- (void)registerGeoFunctionWithNSString:(NSString *)s
withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)list {
  [self registerGeoFunctionWithNSString:s withOrgGeogebraCommonKernelGeosGeoFunction:list withDouble:0];
}

- (void)registerGeoFunctionWithNSString:(NSString *)s
withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)function
                             withDouble:(jdouble)limit {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum *type = OrgGeogebraCommonPluginSensorLogger_TypesEnum_lookupWithNSString_(s);
  if (type != nil) {
    OrgGeogebraCommonPluginSensorLogger_prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_withOrgGeogebraCommonKernelGeosGeoElement_withDouble_(self, type, function, limit);
    [((JavaUtilHashMap *) nil_chk(listenersF_)) putWithId:type withId:function];
  }
}

- (void)registerGeoListWithNSString:(NSString *)s
withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list
                         withDouble:(jdouble)limit {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum *type = OrgGeogebraCommonPluginSensorLogger_TypesEnum_lookupWithNSString_(s);
  if (type != nil) {
    OrgGeogebraCommonPluginSensorLogger_prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_withOrgGeogebraCommonKernelGeosGeoElement_withDouble_(self, type, list, limit);
    [((JavaUtilHashMap *) nil_chk(listenersL_)) putWithId:type withId:list];
  }
}

- (void)stopLogging {
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) setUndoActiveWithBoolean:oldUndoActive_];
  [kernel_ storeUndoInfo];
  [self closeSocket];
  [((JavaUtilHashMap *) nil_chk(listeners_)) clear];
  [((JavaUtilHashMap *) nil_chk(listenersL_)) clear];
  [((JavaUtilHashMap *) nil_chk(listenersF_)) clear];
  [((JavaUtilHashMap *) nil_chk(listenersAges_)) clear];
}

- (void)initStartLogging {
  now_ = JavaLangSystem_currentTimeMillis();
  OrgGeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$Z", @"startLogging called, undoActive is: ", [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isUndoActive]));
  oldUndoActive_ = (oldUndoActive_ || [kernel_ isUndoActive]);
  [kernel_ setUndoActiveWithBoolean:NO];
  OrgGeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$Z", @"undoActive is: ", [kernel_ isUndoActive]));
}

- (void)logWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:(OrgGeogebraCommonPluginSensorLogger_TypesEnum *)type
                                                  withDouble:(jdouble)timestamp
                                                  withDouble:(jdouble)val {
  [self logWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:type withDouble:timestamp withDouble:val withBoolean:YES withBoolean:YES withBoolean:YES];
}

- (void)logWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:(OrgGeogebraCommonPluginSensorLogger_TypesEnum *)type
                                                  withDouble:(jdouble)timestamp
                                                  withDouble:(jdouble)val
                                                 withBoolean:(jboolean)repaint
                                                 withBoolean:(jboolean)update
                                                 withBoolean:(jboolean)atleast {
  if (stepsToGo_ <= 0) {
    return;
  }
  OrgGeogebraCommonKernelGeosGeoNumeric *geo = [((JavaUtilHashMap *) nil_chk(listeners_)) getWithId:type];
  if (geo != nil) {
    [geo setValueWithDouble:val];
    if (repaint) [geo updateRepaint];
    else if (update || !atleast) [geo updateCascade];
    else [geo update];
    OrgGeogebraCommonPluginSensorLogger_registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_(self, type);
  }
  else {
    OrgGeogebraCommonKernelGeosGeoList *list = [((JavaUtilHashMap *) nil_chk(listenersL_)) getWithId:type];
    if (list != nil) {
      geo = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_([list getConstruction], val) autorelease];
      JavaLangInteger *ll = [((JavaUtilHashMap *) nil_chk(listLimits_)) getWithId:type];
      if (ll == nil || [ll intValue] == 0 || [ll intValue] > [list size]) {
        [list addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
      else {
        [list addQueueWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
      if (repaint) [list updateRepaint];
      else if (update || !atleast) [list updateCascade];
      else [list update];
      OrgGeogebraCommonPluginSensorLogger_registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_(self, type);
    }
    else {
      OrgGeogebraCommonKernelGeosGeoFunction *fn = [((JavaUtilHashMap *) nil_chk(listenersF_)) getWithId:type];
      if (fn == nil) {
        return;
      }
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fn)) getFunctionExpression])) unwrap])) wrap])) getRight];
      if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyNumberPair class]] && [[((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getX] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]] && [[((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getY] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
        OrgGeogebraCommonMainApp_debugWithNSString_(@"add");
        JavaLangInteger *ll = [((JavaUtilHashMap *) nil_chk(listLimits_)) getWithId:type];
        if (ll == nil || [ll intValue] == 0 || [ll intValue] + 2 > [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getX], [OrgGeogebraCommonKernelArithmeticMyList class])))) size]) {
          [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getX], [OrgGeogebraCommonKernelArithmeticMyList class])))) addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, timestamp) autorelease]];
          [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getY], [OrgGeogebraCommonKernelArithmeticMyList class])))) addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, val) autorelease]];
        }
        else {
          [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getX], [OrgGeogebraCommonKernelArithmeticMyList class])))) addQueWithDouble:timestamp withInt:0];
          [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getY], [OrgGeogebraCommonKernelArithmeticMyList class])))) addQueWithDouble:val withInt:0];
        }
      }
      if (repaint) {
        [fn updateRepaint];
      }
      else if (update || !atleast) [fn updateCascade];
      else [fn update];
      OrgGeogebraCommonPluginSensorLogger_registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_(self, type);
    }
  }
}

- (void)registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:(OrgGeogebraCommonPluginSensorLogger_TypesEnum *)type {
  OrgGeogebraCommonPluginSensorLogger_registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_(self, type);
}

- (void)setLimitWithDouble:(jdouble)limit {
  self->stepsToGo_ = J2ObjCFpToInt(limit);
}

- (instancetype)init {
  OrgGeogebraCommonPluginSensorLogger_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(listeners_);
  RELEASE_(listenersL_);
  RELEASE_(listenersF_);
  RELEASE_(listLimits_);
  RELEASE_(listenersAges_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "startLogging", NULL, "Z", 0x401, NULL, NULL },
    { "closeSocket", NULL, "V", 0x404, NULL, NULL },
    { "registerGeoWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:", "registerGeo", "V", 0x1, NULL, NULL },
    { "beforeLog", NULL, "V", 0x4, NULL, NULL },
    { "removeRegisteredGeoWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:", "removeRegisteredGeo", "V", 0x1, NULL, NULL },
    { "removeRegisteredGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "removeRegisteredGeo", "V", 0x1, NULL, NULL },
    { "prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:withOrgGeogebraCommonKernelGeosGeoElement:withDouble:", "prepareRegister", "V", 0x2, NULL, NULL },
    { "registerGeoListWithNSString:withOrgGeogebraCommonKernelGeosGeoList:", "registerGeoList", "V", 0x1, NULL, NULL },
    { "registerGeoFunctionWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:", "registerGeoFunction", "V", 0x1, NULL, NULL },
    { "registerGeoFunctionWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withDouble:", "registerGeoFunction", "V", 0x1, NULL, NULL },
    { "registerGeoListWithNSString:withOrgGeogebraCommonKernelGeosGeoList:withDouble:", "registerGeoList", "V", 0x1, NULL, NULL },
    { "stopLogging", NULL, "V", 0x1, NULL, NULL },
    { "initStartLogging", NULL, "V", 0x4, NULL, NULL },
    { "logWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:withDouble:withDouble:", "log", "V", 0x4, NULL, NULL },
    { "logWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:withDouble:withDouble:withBoolean:withBoolean:withBoolean:", "log", "V", 0x4, NULL, NULL },
    { "registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:", "registerLog", "V", 0x2, NULL, NULL },
    { "setLimitWithDouble:", "setLimit", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_LIMIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonPluginSensorLogger_DEFAULT_LIMIT },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "port_", NULL, 0x9, "I", &OrgGeogebraCommonPluginSensorLogger_port_, NULL,  },
    { "appID_", NULL, 0x9, "Ljava.lang.String;", &OrgGeogebraCommonPluginSensorLogger_appID_, NULL,  },
    { "oldUndoActive_", NULL, 0x1, "Z", NULL, NULL,  },
    { "listeners_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/plugin/SensorLogger$Types;Lorg/geogebra/common/kernel/geos/GeoNumeric;>;",  },
    { "listenersL_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/plugin/SensorLogger$Types;Lorg/geogebra/common/kernel/geos/GeoList;>;",  },
    { "listenersF_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/plugin/SensorLogger$Types;Lorg/geogebra/common/kernel/geos/GeoFunction;>;",  },
    { "listLimits_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/plugin/SensorLogger$Types;Ljava/lang/Integer;>;",  },
    { "listenersAges_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/plugin/SensorLogger$Types;Ljava/lang/Integer;>;",  },
    { "now_", NULL, 0x4, "J", NULL, NULL,  },
    { "stepsToGo_", NULL, 0x2, "I", NULL, NULL,  },
    { "lastStamp_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.plugin.SensorLogger$Types;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonPluginSensorLogger = { 2, "SensorLogger", "org.geogebra.common.plugin", NULL, 0x401, 18, methods, 13, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonPluginSensorLogger;
}

@end

void OrgGeogebraCommonPluginSensorLogger_prepareRegisterWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_withOrgGeogebraCommonKernelGeosGeoElement_withDouble_(OrgGeogebraCommonPluginSensorLogger *self, OrgGeogebraCommonPluginSensorLogger_TypesEnum *type, OrgGeogebraCommonKernelGeosGeoElement *geo, jdouble limit) {
  OrgGeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$@$$", @"logging ", type, @" to ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple]));
  [((JavaUtilHashMap *) nil_chk(self->listenersL_)) removeWithId:type];
  [((JavaUtilHashMap *) nil_chk(self->listeners_)) removeWithId:type];
  [((JavaUtilHashMap *) nil_chk(self->listenersF_)) removeWithId:type];
  jint lim = (jint) JavaLangMath_roundWithDouble_(limit);
  if (lim < 0) {
    lim = 0;
  }
  [((JavaUtilHashMap *) nil_chk(self->listLimits_)) putWithId:type withId:JavaLangInteger_valueOfWithInt_(lim)];
  [((JavaUtilHashMap *) nil_chk(self->listenersAges_)) putWithId:type withId:JavaLangInteger_valueOfWithInt_(0)];
}

void OrgGeogebraCommonPluginSensorLogger_registerLogWithOrgGeogebraCommonPluginSensorLogger_TypesEnum_(OrgGeogebraCommonPluginSensorLogger *self, OrgGeogebraCommonPluginSensorLogger_TypesEnum *type) {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum *thistype;
  OrgGeogebraCommonKernelGeosGeoNumeric *geo;
  OrgGeogebraCommonKernelGeosGeoList *list;
  OrgGeogebraCommonKernelGeosGeoFunction *function;
  jint referenceAge = [((JavaLangInteger *) nil_chk([((JavaUtilHashMap *) nil_chk(self->listenersAges_)) getWithId:type])) intValue];
  [self->listenersAges_ putWithId:type withId:JavaLangInteger_valueOfWithInt_(referenceAge + 1)];
  referenceAge = [((JavaLangInteger *) nil_chk([self->listenersAges_ getWithId:type])) intValue];
  jint numOld = 0;
  jint numAll = 0;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self->listenersAges_ keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    thistype = (OrgGeogebraCommonPluginSensorLogger_TypesEnum *) check_class_cast([it next], [OrgGeogebraCommonPluginSensorLogger_TypesEnum class]);
    JavaLangInteger *age = [self->listenersAges_ getWithId:thistype];
    if ([((JavaLangInteger *) nil_chk(age)) intValue] > 100) {
      numOld++;
    }
    numAll++;
    if (referenceAge > [age intValue] + 1) {
      [self->listenersAges_ putWithId:thistype withId:JavaLangInteger_valueOfWithInt_([age intValue] + 1)];
      geo = [((JavaUtilHashMap *) nil_chk(self->listeners_)) getWithId:thistype];
      if (geo != nil) {
        [geo update];
      }
      else {
        list = [((JavaUtilHashMap *) nil_chk(self->listenersL_)) getWithId:thistype];
        if (list != nil) {
          [list update];
        }
        else {
          function = [((JavaUtilHashMap *) nil_chk(self->listenersF_)) getWithId:thistype];
          if (function != nil) {
            [function update];
          }
        }
      }
    }
  }
  if (numOld == numAll) {
    it = [((id<JavaUtilSet>) nil_chk([self->listenersAges_ keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      thistype = (OrgGeogebraCommonPluginSensorLogger_TypesEnum *) check_class_cast([it next], [OrgGeogebraCommonPluginSensorLogger_TypesEnum class]);
      JavaLangInteger *age = [self->listenersAges_ getWithId:thistype];
      [self->listenersAges_ putWithId:thistype withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(age)) intValue] - 100)];
    }
  }
}

void OrgGeogebraCommonPluginSensorLogger_init(OrgGeogebraCommonPluginSensorLogger *self) {
  NSObject_init(self);
  self->oldUndoActive_ = NO;
  OrgGeogebraCommonPluginSensorLogger_setAndConsume_listeners_(self, new_JavaUtilHashMap_init());
  OrgGeogebraCommonPluginSensorLogger_setAndConsume_listenersL_(self, new_JavaUtilHashMap_init());
  OrgGeogebraCommonPluginSensorLogger_setAndConsume_listenersF_(self, new_JavaUtilHashMap_init());
  OrgGeogebraCommonPluginSensorLogger_setAndConsume_listLimits_(self, new_JavaUtilHashMap_init());
  OrgGeogebraCommonPluginSensorLogger_setAndConsume_listenersAges_(self, new_JavaUtilHashMap_init());
  self->stepsToGo_ = OrgGeogebraCommonPluginSensorLogger_DEFAULT_LIMIT;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonPluginSensorLogger)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonPluginSensorLogger_TypesEnum)

OrgGeogebraCommonPluginSensorLogger_TypesEnum *OrgGeogebraCommonPluginSensorLogger_TypesEnum_values_[21];

@implementation OrgGeogebraCommonPluginSensorLogger_TypesEnum

- (instancetype)initWithNSString:(NSString *)s
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(self, s, __name, __ordinal);
  return self;
}

- (instancetype)initWithNSString:(NSString *)s
                     withBoolean:(jboolean)storeInXML
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(self, s, storeInXML, __name, __ordinal);
  return self;
}

- (NSString *)description {
  return string_;
}

- (NSString *)toXMLString {
  return string_;
}

+ (OrgGeogebraCommonPluginSensorLogger_TypesEnum *)lookupWithNSString:(NSString *)s {
  return OrgGeogebraCommonPluginSensorLogger_TypesEnum_lookupWithNSString_(s);
}

- (jboolean)storeInXML {
  return storeInXML__;
}

IOSObjectArray *OrgGeogebraCommonPluginSensorLogger_TypesEnum_values() {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonPluginSensorLogger_TypesEnum_values_ count:21 type:OrgGeogebraCommonPluginSensorLogger_TypesEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonPluginSensorLogger_TypesEnum_values();
}

+ (OrgGeogebraCommonPluginSensorLogger_TypesEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonPluginSensorLogger_TypesEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonPluginSensorLogger_TypesEnum *OrgGeogebraCommonPluginSensorLogger_TypesEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_initialize();
  for (int i = 0; i < 21; i++) {
    OrgGeogebraCommonPluginSensorLogger_TypesEnum *e = OrgGeogebraCommonPluginSensorLogger_TypesEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonPluginSensorLogger_TypesEnum class]) {
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_TIMESTAMP = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(@"time", @"TIMESTAMP", 0);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_ACCELEROMETER_X = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"Ax", YES, @"ACCELEROMETER_X", 1);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_ACCELEROMETER_Y = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"Ay", YES, @"ACCELEROMETER_Y", 2);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_ACCELEROMETER_Z = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"Az", YES, @"ACCELEROMETER_Z", 3);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_ORIENTATION_X = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"Ox", YES, @"ORIENTATION_X", 4);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_ORIENTATION_Y = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"Oy", YES, @"ORIENTATION_Y", 5);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_ORIENTATION_Z = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"Oz", YES, @"ORIENTATION_Z", 6);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_MAGNETIC_FIELD_X = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"Mx", YES, @"MAGNETIC_FIELD_X", 7);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_MAGNETIC_FIELD_Y = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"My", YES, @"MAGNETIC_FIELD_Y", 8);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_MAGNETIC_FIELD_Z = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"Mz", YES, @"MAGNETIC_FIELD_Z", 9);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_PROXIMITY = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"proximity", YES, @"PROXIMITY", 10);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_LIGHT = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"light", YES, @"LIGHT", 11);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_LOUDNESS = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"loudness", YES, @"LOUDNESS", 12);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_DATA_COUNT = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(@"datacount", @"DATA_COUNT", 13);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_EDAQ0 = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"EDAQ0", YES, @"EDAQ0", 14);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_EDAQ1 = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"EDAQ1", YES, @"EDAQ1", 15);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_EDAQ2 = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"EDAQ2", YES, @"EDAQ2", 16);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_PORT = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(@"port", YES, @"PORT", 17);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_APP_ID = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(@"appID", @"APP_ID", 18);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_MOBILE_FOUND = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(@"mobile_found", @"MOBILE_FOUND", 19);
    OrgGeogebraCommonPluginSensorLogger_TypesEnum_FREQUENCY = new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(@"frequency", @"FREQUENCY", 20);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonPluginSensorLogger_TypesEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toXMLString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "lookupWithNSString:", "lookup", "Lorg.geogebra.common.plugin.SensorLogger$Types;", 0x9, NULL, NULL },
    { "storeInXML", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TIMESTAMP", "TIMESTAMP", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_TIMESTAMP, NULL,  },
    { "ACCELEROMETER_X", "ACCELEROMETER_X", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_ACCELEROMETER_X, NULL,  },
    { "ACCELEROMETER_Y", "ACCELEROMETER_Y", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_ACCELEROMETER_Y, NULL,  },
    { "ACCELEROMETER_Z", "ACCELEROMETER_Z", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_ACCELEROMETER_Z, NULL,  },
    { "ORIENTATION_X", "ORIENTATION_X", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_ORIENTATION_X, NULL,  },
    { "ORIENTATION_Y", "ORIENTATION_Y", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_ORIENTATION_Y, NULL,  },
    { "ORIENTATION_Z", "ORIENTATION_Z", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_ORIENTATION_Z, NULL,  },
    { "MAGNETIC_FIELD_X", "MAGNETIC_FIELD_X", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_MAGNETIC_FIELD_X, NULL,  },
    { "MAGNETIC_FIELD_Y", "MAGNETIC_FIELD_Y", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_MAGNETIC_FIELD_Y, NULL,  },
    { "MAGNETIC_FIELD_Z", "MAGNETIC_FIELD_Z", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_MAGNETIC_FIELD_Z, NULL,  },
    { "PROXIMITY", "PROXIMITY", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_PROXIMITY, NULL,  },
    { "LIGHT", "LIGHT", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_LIGHT, NULL,  },
    { "LOUDNESS", "LOUDNESS", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_LOUDNESS, NULL,  },
    { "DATA_COUNT", "DATA_COUNT", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_DATA_COUNT, NULL,  },
    { "EDAQ0", "EDAQ0", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_EDAQ0, NULL,  },
    { "EDAQ1", "EDAQ1", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_EDAQ1, NULL,  },
    { "EDAQ2", "EDAQ2", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_EDAQ2, NULL,  },
    { "PORT", "PORT", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_PORT, NULL,  },
    { "APP_ID", "APP_ID", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_APP_ID, NULL,  },
    { "MOBILE_FOUND", "MOBILE_FOUND", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_MOBILE_FOUND, NULL,  },
    { "FREQUENCY", "FREQUENCY", 0x4019, "Lorg.geogebra.common.plugin.SensorLogger$Types;", &OrgGeogebraCommonPluginSensorLogger_TypesEnum_FREQUENCY, NULL,  },
    { "string_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "storeInXML__", "storeInXML", 0x2, "Z", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.plugin.SensorLogger$Types;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonPluginSensorLogger_TypesEnum = { 2, "Types", "org.geogebra.common.plugin", "SensorLogger", 0x4019, 4, methods, 23, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/plugin/SensorLogger$Types;>;" };
  return &_OrgGeogebraCommonPluginSensorLogger_TypesEnum;
}

@end

void OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(OrgGeogebraCommonPluginSensorLogger_TypesEnum *self, NSString *s, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->storeInXML__ = NO;
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_set_string_(self, s);
}

OrgGeogebraCommonPluginSensorLogger_TypesEnum *new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(NSString *s, NSString *__name, jint __ordinal) {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum *self = [OrgGeogebraCommonPluginSensorLogger_TypesEnum alloc];
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withNSString_withInt_(self, s, __name, __ordinal);
  return self;
}

void OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(OrgGeogebraCommonPluginSensorLogger_TypesEnum *self, NSString *s, jboolean storeInXML, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->storeInXML__ = NO;
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_set_string_(self, s);
  self->storeInXML__ = storeInXML;
}

OrgGeogebraCommonPluginSensorLogger_TypesEnum *new_OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(NSString *s, jboolean storeInXML, NSString *__name, jint __ordinal) {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum *self = [OrgGeogebraCommonPluginSensorLogger_TypesEnum alloc];
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_initWithNSString_withBoolean_withNSString_withInt_(self, s, storeInXML, __name, __ordinal);
  return self;
}

OrgGeogebraCommonPluginSensorLogger_TypesEnum *OrgGeogebraCommonPluginSensorLogger_TypesEnum_lookupWithNSString_(NSString *s) {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum_initialize();
  {
    IOSObjectArray *a__ = OrgGeogebraCommonPluginSensorLogger_TypesEnum_values();
    OrgGeogebraCommonPluginSensorLogger_TypesEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonPluginSensorLogger_TypesEnum * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonPluginSensorLogger_TypesEnum *type = *b__++;
      if ([((NSString *) nil_chk(((OrgGeogebraCommonPluginSensorLogger_TypesEnum *) nil_chk(type))->string_)) isEqual:s]) {
        return type;
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonPluginSensorLogger_TypesEnum)
