//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/plugin/script/JsScript.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Event.h"
#include "org/geogebra/common/plugin/EventType.h"
#include "org/geogebra/common/plugin/ScriptError.h"
#include "org/geogebra/common/plugin/ScriptType.h"
#include "org/geogebra/common/plugin/script/JsScript.h"
#include "org/geogebra/common/plugin/script/Script.h"

@implementation OrgGeogebraCommonPluginScriptJsScript

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                    withNSString:(NSString *)text {
  OrgGeogebraCommonPluginScriptJsScript_initWithOrgGeogebraCommonMainApp_withNSString_(self, app, text);
  return self;
}

- (void)runWithOrgGeogebraCommonPluginEvent:(OrgGeogebraCommonPluginEvent *)evt {
  NSString *label = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonPluginEvent *) nil_chk(evt))->target_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  jboolean update = evt->type_ == OrgGeogebraCommonPluginEventTypeEnum_get_UPDATE();
  IOSObjectArray *args;
  @try {
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isApplet] && [app_ useBrowserForJavaScript] && !update) {
      if (evt->argument_ == nil) {
        args = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSObject_class_()];
      }
      else {
        args = [IOSObjectArray newArrayWithObjects:(id[]){ evt->argument_ } count:1 type:NSObject_class_()];
      }
      [app_ callAppletJavaScriptWithNSString:JreStrcat("$$", @"ggb", label) withNSObjectArray:args];
    }
    else if ([app_ isHTML5Applet] && [app_ useBrowserForJavaScript]) {
      NSString *functionPrefix = update ? @"ggbUpdate" : @"ggb";
      if (evt->argument_ == nil) {
        args = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSObject_class_()];
      }
      else {
        args = [IOSObjectArray newArrayWithObjects:(id[]){ evt->argument_ } count:1 type:NSObject_class_()];
      }
      [app_ callAppletJavaScriptWithNSString:JreStrcat("$$", functionPrefix, label) withNSObjectArray:args];
    }
    else {
      [app_ evalJavaScriptWithOrgGeogebraCommonMainApp:app_ withNSString:text_ withNSString:evt->argument_];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonPluginScriptError_initWithNSString_(JreStrcat("$C$$$C$", [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:update ? @"OnUpdate" : @"OnClick"], ' ', label, @":\n", [app_ getPlainWithNSString:@"ErrorInJavaScript"], 0x000a, [e getLocalizedMessage]));
  }
}

- (OrgGeogebraCommonPluginScriptTypeEnum *)getType {
  return OrgGeogebraCommonPluginScriptTypeEnum_get_JAVASCRIPT();
}

- (OrgGeogebraCommonPluginScriptScript *)copy__ {
  return new_OrgGeogebraCommonPluginScriptJsScript_initWithOrgGeogebraCommonMainApp_withNSString_(app_, text_);
}

- (jboolean)renameGeoWithNSString:(NSString *)oldLabel
                     withNSString:(NSString *)newLabel {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:withNSString:", "JsScript", NULL, 0x1, NULL, NULL },
    { "runWithOrgGeogebraCommonPluginEvent:", "run", "V", 0x1, "Lorg.geogebra.common.plugin.ScriptError;", NULL },
    { "getType", NULL, "Lorg.geogebra.common.plugin.ScriptType;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.plugin.script.Script;", 0x1, NULL, NULL },
    { "renameGeoWithNSString:withNSString:", "renameGeo", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonPluginScriptJsScript = { 2, "JsScript", "org.geogebra.common.plugin.script", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonPluginScriptJsScript;
}

@end

void OrgGeogebraCommonPluginScriptJsScript_initWithOrgGeogebraCommonMainApp_withNSString_(OrgGeogebraCommonPluginScriptJsScript *self, OrgGeogebraCommonMainApp *app, NSString *text) {
  (void) OrgGeogebraCommonPluginScriptScript_initWithOrgGeogebraCommonMainApp_withNSString_(self, app, text);
}

OrgGeogebraCommonPluginScriptJsScript *new_OrgGeogebraCommonPluginScriptJsScript_initWithOrgGeogebraCommonMainApp_withNSString_(OrgGeogebraCommonMainApp *app, NSString *text) {
  OrgGeogebraCommonPluginScriptJsScript *self = [OrgGeogebraCommonPluginScriptJsScript alloc];
  OrgGeogebraCommonPluginScriptJsScript_initWithOrgGeogebraCommonMainApp_withNSString_(self, app, text);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonPluginScriptJsScript)
