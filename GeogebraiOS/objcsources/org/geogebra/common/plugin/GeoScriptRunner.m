//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/plugin/GeoScriptRunner.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Event.h"
#include "org/geogebra/common/plugin/EventType.h"
#include "org/geogebra/common/plugin/GeoScriptRunner.h"
#include "org/geogebra/common/plugin/ScriptError.h"
#include "org/geogebra/common/plugin/script/Script.h"

@interface OrgGeogebraCommonPluginGeoScriptRunner () {
 @public
  OrgGeogebraCommonMainApp *app_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonPluginGeoScriptRunner, app_, OrgGeogebraCommonMainApp *)

@implementation OrgGeogebraCommonPluginGeoScriptRunner

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonPluginGeoScriptRunner_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)sendEventWithOrgGeogebraCommonPluginEvent:(OrgGeogebraCommonPluginEvent *)evt {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isScriptingDisabled] || ((OrgGeogebraCommonPluginEvent *) nil_chk(evt))->target_ == nil) {
    return;
  }
  OrgGeogebraCommonPluginScriptScript *script = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonPluginEvent *) nil_chk(evt))->target_)) getScriptWithOrgGeogebraCommonPluginEventTypeEnum:evt->type_];
  if (script == nil) {
    return;
  }
  if (evt->type_ == OrgGeogebraCommonPluginEventTypeEnum_get_UPDATE()) {
    if ([app_ isBlockUpdateScripts] && ![evt isAlwaysDispatched]) {
      return;
    }
  }
  @try {
    if (evt->type_ != OrgGeogebraCommonPluginEventTypeEnum_get_UPDATE()) {
      [((OrgGeogebraCommonPluginScriptScript *) nil_chk(script)) runWithOrgGeogebraCommonPluginEvent:evt];
      [app_ storeUndoInfo];
    }
    else {
      [app_ setBlockUpdateScriptsWithBoolean:YES];
      [((OrgGeogebraCommonPluginScriptScript *) nil_chk(script)) runWithOrgGeogebraCommonPluginEvent:evt];
    }
  }
  @catch (OrgGeogebraCommonPluginScriptError *e) {
    [app_ showErrorWithNSString:[((OrgGeogebraCommonPluginScriptError *) nil_chk(e)) getScriptError]];
  }
  @finally {
    [app_ setBlockUpdateScriptsWithBoolean:NO];
  }
}

- (void)reset {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "GeoScriptRunner", NULL, 0x1, NULL, NULL },
    { "sendEventWithOrgGeogebraCommonPluginEvent:", "sendEvent", "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonPluginGeoScriptRunner = { 2, "GeoScriptRunner", "org.geogebra.common.plugin", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonPluginGeoScriptRunner;
}

@end

void OrgGeogebraCommonPluginGeoScriptRunner_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonPluginGeoScriptRunner *self, OrgGeogebraCommonMainApp *app) {
  (void) NSObject_init(self);
  self->app_ = app;
}

OrgGeogebraCommonPluginGeoScriptRunner *new_OrgGeogebraCommonPluginGeoScriptRunner_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonPluginGeoScriptRunner *self = [OrgGeogebraCommonPluginGeoScriptRunner alloc];
  OrgGeogebraCommonPluginGeoScriptRunner_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonPluginGeoScriptRunner)
