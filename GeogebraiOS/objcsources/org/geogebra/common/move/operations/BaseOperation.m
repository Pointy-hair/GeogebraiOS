//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/move/operations/BaseOperation.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/move/events/BaseEvent.h"
#include "org/geogebra/common/move/models/BaseModel.h"
#include "org/geogebra/common/move/operations/BaseOperation.h"
#include "org/geogebra/common/move/views/BaseEventView.h"
#include "org/geogebra/common/move/views/BaseView.h"

@implementation OrgGeogebraCommonMoveOperationsBaseOperation

- (OrgGeogebraCommonMoveViewsBaseView *)getView {
  return view_;
}

- (void)setViewWithOrgGeogebraCommonMoveViewsBaseView:(OrgGeogebraCommonMoveViewsBaseView *)view {
  OrgGeogebraCommonMoveOperationsBaseOperation_set_view_(self, view);
}

- (OrgGeogebraCommonMoveModelsBaseModel *)getModel {
  return model_;
}

- (void)setModelWithOrgGeogebraCommonMoveModelsBaseModel:(OrgGeogebraCommonMoveModelsBaseModel *)model {
  OrgGeogebraCommonMoveOperationsBaseOperation_set_model_(self, model);
}

- (void)onEventWithOrgGeogebraCommonMoveEventsBaseEvent:(OrgGeogebraCommonMoveEventsBaseEvent *)event {
  if (model_ != nil) {
    [model_ onEventWithOrgGeogebraCommonMoveEventsBaseEvent:event];
  }
  if (view_ != nil && [view_ isKindOfClass:[OrgGeogebraCommonMoveViewsBaseEventView class]]) {
    [((OrgGeogebraCommonMoveViewsBaseEventView *) check_class_cast(view_, [OrgGeogebraCommonMoveViewsBaseEventView class])) onEventWithOrgGeogebraCommonMoveEventsBaseEvent:event];
  }
}

- (instancetype)init {
  OrgGeogebraCommonMoveOperationsBaseOperation_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(view_);
  RELEASE_(model_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getView", NULL, "Lorg.geogebra.common.move.views.BaseView;", 0x1, NULL, NULL },
    { "setViewWithOrgGeogebraCommonMoveViewsBaseView:", "setView", "V", 0x1, NULL, NULL },
    { "getModel", NULL, "Lorg.geogebra.common.move.models.BaseModel;", 0x1, NULL, NULL },
    { "setModelWithOrgGeogebraCommonMoveModelsBaseModel:", "setModel", "V", 0x1, NULL, NULL },
    { "onEventWithOrgGeogebraCommonMoveEventsBaseEvent:", "onEvent", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "view_", NULL, 0x4, "Lorg.geogebra.common.move.views.BaseView;", NULL, "Lorg/geogebra/common/move/views/BaseView<TT;>;",  },
    { "model_", NULL, 0x4, "Lorg.geogebra.common.move.models.BaseModel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonMoveOperationsBaseOperation = { 2, "BaseOperation", "org.geogebra.common.move.operations", NULL, 0x401, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_OrgGeogebraCommonMoveOperationsBaseOperation;
}

@end

void OrgGeogebraCommonMoveOperationsBaseOperation_init(OrgGeogebraCommonMoveOperationsBaseOperation *self) {
  NSObject_init(self);
  OrgGeogebraCommonMoveOperationsBaseOperation_set_view_(self, nil);
  OrgGeogebraCommonMoveOperationsBaseOperation_set_model_(self, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMoveOperationsBaseOperation)
