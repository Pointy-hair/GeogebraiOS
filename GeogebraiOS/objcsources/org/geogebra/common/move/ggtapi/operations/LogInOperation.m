//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/move/ggtapi/operations/LogInOperation.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/move/events/StayLoggedOutEvent.h"
#include "org/geogebra/common/move/ggtapi/events/LogOutEvent.h"
#include "org/geogebra/common/move/ggtapi/events/LoginAttemptEvent.h"
#include "org/geogebra/common/move/ggtapi/models/AuthenticationModel.h"
#include "org/geogebra/common/move/ggtapi/models/GeoGebraTubeAPI.h"
#include "org/geogebra/common/move/ggtapi/models/GeoGebraTubeUser.h"
#include "org/geogebra/common/move/ggtapi/models/Material.h"
#include "org/geogebra/common/move/ggtapi/operations/LogInOperation.h"
#include "org/geogebra/common/move/models/BaseModel.h"
#include "org/geogebra/common/move/operations/BaseOperation.h"

@implementation OrgGeogebraCommonMoveGgtapiOperationsLogInOperation

- (OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *)getModel {
  return (OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) check_class_cast([super getModel], [OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel class]);
}

- (NSString *)getUserName {
  return [((OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([self getModel])) getUserName];
}

- (jboolean)isLoggedIn {
  return [((OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([self getModel])) isLoggedIn];
}

- (void)performTokenLogin {
  NSString *token = [((OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([self getModel])) getLoginToken];
  if (token != nil) {
    [self performTokenLoginWithNSString:token withBoolean:YES];
  }
  else {
    [((OrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeAPI *) nil_chk([self getGeoGebraTubeAPI])) checkAvailableWithOrgGeogebraCommonMoveGgtapiOperationsLogInOperation:self];
  }
}

- (void)performTokenLoginWithNSString:(NSString *)token
                          withBoolean:(jboolean)automatic {
  if ([@"" isEqual:token]) {
    [self stayLoggedOut];
    return;
  }
  [self doPerformTokenLoginWithOrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser:[new_OrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser_initWithNSString_(token) autorelease] withBoolean:automatic];
}

- (void)stayLoggedOut {
  [((OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([self getModel])) stayLoggedOut];
  [self onEventWithOrgGeogebraCommonMoveEventsBaseEvent:[new_OrgGeogebraCommonMoveEventsStayLoggedOutEvent_initWithNSString_(nil) autorelease]];
}

- (void)performCookieLoginWithNSString:(NSString *)cookie {
  [self doPerformTokenLoginWithOrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser:[new_OrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser_initWithNSString_withNSString_(nil, cookie) autorelease] withBoolean:YES];
}

- (void)doPerformTokenLoginWithOrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser:(OrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser *)user
                                                                     withBoolean:(jboolean)automatic {
  OrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeAPI *api = [self getGeoGebraTubeAPI];
  OrgGeogebraCommonMainApp_debugWithNSString_(@"Sending call to GeoGebraTube API to authorize the login token...");
  [self onEventWithOrgGeogebraCommonMoveEventsBaseEvent:[new_OrgGeogebraCommonMoveGgtapiEventsLoginAttemptEvent_initWithOrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser_(user) autorelease]];
  [((OrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeAPI *) nil_chk(api)) authorizeUserWithOrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser:user withOrgGeogebraCommonMoveGgtapiOperationsLogInOperation:self withBoolean:automatic];
}

- (void)performLogOut {
  [self onEventWithOrgGeogebraCommonMoveEventsBaseEvent:[new_OrgGeogebraCommonMoveGgtapiEventsLogOutEvent_init() autorelease]];
}

- (OrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeAPI *)getGeoGebraTubeAPI {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getLoginURLWithNSString:(NSString *)languageCode {
  return JreStrcat("$$$$$$$$", @"https://accounts.geogebra.org/user/signin/caller/", [self getURLLoginCaller], @"/expiration/", [self getURLTokenExpirationMinutes], @"/clientinfo/", [self getURLClientInfo], @"/?lang=", languageCode);
}

- (NSString *)getURLLoginCaller {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getURLTokenExpirationMinutes {
  return @"129600";
}

- (NSString *)getURLClientInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)startOffline {
  [((OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([self getModel])) startOfflineWithOrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeAPI:[self getGeoGebraTubeAPI]];
}

- (jboolean)mayLogIn {
  return [((OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([self getModel])) mayLogIn];
}

- (jboolean)ownsWithOrgGeogebraCommonMoveGgtapiModelsMaterial:(OrgGeogebraCommonMoveGgtapiModelsMaterial *)mat {
  return [((OrgGeogebraCommonMoveGgtapiModelsMaterial *) nil_chk(mat)) getAuthorID] <= 0 || [mat getAuthorID] == [((OrgGeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([self getModel])) getUserId];
}

- (instancetype)init {
  OrgGeogebraCommonMoveGgtapiOperationsLogInOperation_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getModel", NULL, "Lorg.geogebra.common.move.ggtapi.models.AuthenticationModel;", 0x1, NULL, NULL },
    { "getUserName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isLoggedIn", NULL, "Z", 0x11, NULL, NULL },
    { "performTokenLogin", NULL, "V", 0x11, NULL, NULL },
    { "performTokenLoginWithNSString:withBoolean:", "performTokenLogin", "V", 0x1, NULL, NULL },
    { "stayLoggedOut", NULL, "V", 0x1, NULL, NULL },
    { "performCookieLoginWithNSString:", "performCookieLogin", "V", 0x1, NULL, NULL },
    { "doPerformTokenLoginWithOrgGeogebraCommonMoveGgtapiModelsGeoGebraTubeUser:withBoolean:", "doPerformTokenLogin", "V", 0x4, NULL, NULL },
    { "performLogOut", NULL, "V", 0x1, NULL, NULL },
    { "getGeoGebraTubeAPI", NULL, "Lorg.geogebra.common.move.ggtapi.models.GeoGebraTubeAPI;", 0x401, NULL, NULL },
    { "getLoginURLWithNSString:", "getLoginURL", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getURLLoginCaller", NULL, "Ljava.lang.String;", 0x404, NULL, NULL },
    { "getURLTokenExpirationMinutes", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getURLClientInfo", NULL, "Ljava.lang.String;", 0x404, NULL, NULL },
    { "startOffline", NULL, "V", 0x1, NULL, NULL },
    { "mayLogIn", NULL, "Z", 0x1, NULL, NULL },
    { "ownsWithOrgGeogebraCommonMoveGgtapiModelsMaterial:", "owns", "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.move.views.EventRenderable;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonMoveGgtapiOperationsLogInOperation = { 2, "LogInOperation", "org.geogebra.common.move.ggtapi.operations", NULL, 0x401, 18, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lorg/geogebra/common/move/operations/BaseOperation<Lorg/geogebra/common/move/views/EventRenderable;>;" };
  return &_OrgGeogebraCommonMoveGgtapiOperationsLogInOperation;
}

@end

void OrgGeogebraCommonMoveGgtapiOperationsLogInOperation_init(OrgGeogebraCommonMoveGgtapiOperationsLogInOperation *self) {
  OrgGeogebraCommonMoveOperationsBaseOperation_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonMoveGgtapiOperationsLogInOperation)
