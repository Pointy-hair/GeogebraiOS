//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/util/Cloner.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/util/Cloner.h"

@implementation OrgGeogebraCommonUtilCloner

+ (IOSDoubleArray *)cloneWithDoubleArray:(IOSDoubleArray *)array {
  return OrgGeogebraCommonUtilCloner_cloneWithDoubleArray_(array);
}

+ (IOSIntArray *)cloneWithIntArray:(IOSIntArray *)array {
  return OrgGeogebraCommonUtilCloner_cloneWithIntArray_(array);
}

+ (IOSObjectArray *)clone2WithDoubleArray2:(IOSObjectArray *)array {
  return OrgGeogebraCommonUtilCloner_clone2WithDoubleArray2_(array);
}

- (instancetype)init {
  OrgGeogebraCommonUtilCloner_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "cloneWithDoubleArray:", "clone", "[D", 0x9, NULL, NULL },
    { "cloneWithIntArray:", "clone", "[I", 0x9, NULL, NULL },
    { "clone2WithDoubleArray2:", "clone2", "[[D", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilCloner = { 2, "Cloner", "org.geogebra.common.util", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonUtilCloner;
}

@end

IOSDoubleArray *OrgGeogebraCommonUtilCloner_cloneWithDoubleArray_(IOSDoubleArray *array) {
  OrgGeogebraCommonUtilCloner_initialize();
  IOSDoubleArray *arrayClone = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(array))->size_];
  for (jint i = 0; i < array->size_; i++) {
    *IOSDoubleArray_GetRef(arrayClone, i) = IOSDoubleArray_Get(array, i);
  }
  return arrayClone;
}

IOSIntArray *OrgGeogebraCommonUtilCloner_cloneWithIntArray_(IOSIntArray *array) {
  OrgGeogebraCommonUtilCloner_initialize();
  IOSIntArray *arrayClone = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(array))->size_];
  for (jint i = 0; i < array->size_; i++) {
    *IOSIntArray_GetRef(arrayClone, i) = IOSIntArray_Get(array, i);
  }
  return arrayClone;
}

IOSObjectArray *OrgGeogebraCommonUtilCloner_clone2WithDoubleArray2_(IOSObjectArray *array) {
  OrgGeogebraCommonUtilCloner_initialize();
  IOSObjectArray *arrayClone = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ ((IOSObjectArray *) nil_chk(array))->size_, ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(array, 0)))->size_ }];
  for (jint i = 0; i < array->size_; i++) {
    IOSObjectArray_Set(arrayClone, i, OrgGeogebraCommonUtilCloner_cloneWithDoubleArray_(IOSObjectArray_Get(array, i)));
  }
  return arrayClone;
}

void OrgGeogebraCommonUtilCloner_init(OrgGeogebraCommonUtilCloner *self) {
  NSObject_init(self);
}

OrgGeogebraCommonUtilCloner *new_OrgGeogebraCommonUtilCloner_init() {
  OrgGeogebraCommonUtilCloner *self = [OrgGeogebraCommonUtilCloner alloc];
  OrgGeogebraCommonUtilCloner_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilCloner)
