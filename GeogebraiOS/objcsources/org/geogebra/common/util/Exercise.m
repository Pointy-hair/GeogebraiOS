//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/util/Exercise.java
//


#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/Assignment.h"
#include "org/geogebra/common/util/Exercise.h"

@interface OrgGeogebraCommonUtilExercise () {
 @public
  JavaUtilArrayList *assignments_;
  OrgGeogebraCommonKernelKernel *kernel_;
  OrgGeogebraCommonKernelConstruction *construction_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilExercise, assignments_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilExercise, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilExercise, construction_, OrgGeogebraCommonKernelConstruction *)

@implementation OrgGeogebraCommonUtilExercise

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonUtilExercise_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)checkExercise {
  for (OrgGeogebraCommonUtilAssignment * __strong assignment in nil_chk(assignments_)) {
    (void) [((OrgGeogebraCommonUtilAssignment *) nil_chk(assignment)) checkAssignmentWithOrgGeogebraCommonKernelConstruction:construction_];
  }
}

- (JavaUtilArrayList *)getResults {
  JavaUtilArrayList *results = new_JavaUtilArrayList_init();
  for (OrgGeogebraCommonUtilAssignment * __strong assignment in nil_chk(assignments_)) {
    [results addWithId:[((OrgGeogebraCommonUtilAssignment *) nil_chk(assignment)) getResult]];
  }
  return results;
}

- (JavaUtilArrayList *)getHints {
  JavaUtilArrayList *hints = new_JavaUtilArrayList_init();
  for (OrgGeogebraCommonUtilAssignment * __strong assignment in nil_chk(assignments_)) {
    [hints addWithId:[((OrgGeogebraCommonUtilAssignment *) nil_chk(assignment)) getHint]];
  }
  return hints;
}

- (jfloat)getFraction {
  jfloat fraction = 0;
  for (OrgGeogebraCommonUtilAssignment * __strong assignment in nil_chk(assignments_)) {
    fraction += [((OrgGeogebraCommonUtilAssignment *) nil_chk(assignment)) getFraction];
  }
  return fraction > 1 ? 1 : fraction;
}

- (void)addAssignmentWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  [((JavaUtilArrayList *) nil_chk(assignments_)) addWithId:new_OrgGeogebraCommonUtilAssignment_initWithOrgGeogebraCommonKernelMacro_(macro)];
}

- (JavaUtilArrayList *)getParts {
  return assignments_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "Exercise", NULL, 0x1, NULL, NULL },
    { "checkExercise", NULL, "V", 0x1, NULL, NULL },
    { "getResults", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getHints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getFraction", NULL, "F", 0x1, NULL, NULL },
    { "addAssignmentWithOrgGeogebraCommonKernelMacro:", "addAssignment", "V", 0x1, NULL, NULL },
    { "getParts", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "assignments_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/util/Assignment;>;",  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "construction_", NULL, 0x2, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilExercise = { 2, "Exercise", "org.geogebra.common.util", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonUtilExercise;
}

@end

void OrgGeogebraCommonUtilExercise_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonUtilExercise *self, OrgGeogebraCommonMainApp *app) {
  (void) NSObject_init(self);
  self->kernel_ = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel];
  self->construction_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  self->assignments_ = new_JavaUtilArrayList_init();
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) hasMacros]) {
    JavaUtilArrayList *macros = [((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getAllMacros];
    for (OrgGeogebraCommonKernelMacro * __strong macro in nil_chk(macros)) {
      [self->assignments_ addWithId:new_OrgGeogebraCommonUtilAssignment_initWithOrgGeogebraCommonKernelMacro_(macro)];
    }
  }
}

OrgGeogebraCommonUtilExercise *new_OrgGeogebraCommonUtilExercise_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonUtilExercise *self = [OrgGeogebraCommonUtilExercise alloc];
  OrgGeogebraCommonUtilExercise_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilExercise)
