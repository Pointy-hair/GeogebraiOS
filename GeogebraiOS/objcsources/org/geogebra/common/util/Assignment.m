//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/util/Assignment.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/algos/AlgoMacro.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/Test.h"
#include "org/geogebra/common/kernel/prover/AlgoAreEqual.h"
#include "org/geogebra/common/util/Assignment.h"

@interface OrgGeogebraCommonUtilAssignment () {
 @public
  OrgGeogebraCommonKernelMacro *macro_;
  JavaUtilHashMap *fractionForResult_;
  JavaUtilHashMap *hintForResult_;
  OrgGeogebraCommonUtilAssignment_ResultEnum *res_;
}

- (OrgGeogebraCommonUtilAssignment_ResultEnum *)checkEqualityOfGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
                                                                                            withJavaUtilArrayList:(JavaUtilArrayList *)possibleOutputGeos
                                                                          withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilAssignment, macro_, OrgGeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilAssignment, fractionForResult_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilAssignment, hintForResult_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilAssignment, res_, OrgGeogebraCommonUtilAssignment_ResultEnum *)

__attribute__((unused)) static OrgGeogebraCommonUtilAssignment_ResultEnum *OrgGeogebraCommonUtilAssignment_checkEqualityOfGeosWithOrgGeogebraCommonKernelGeosGeoElementArray_withJavaUtilArrayList_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonUtilAssignment *self, IOSObjectArray *input, JavaUtilArrayList *possibleOutputGeos, OrgGeogebraCommonKernelConstruction *cons);

@interface OrgGeogebraCommonUtilPermutationOfGeOElementsUtil () {
 @public
  IOSObjectArray *arr_;
  IOSIntArray *permSwappings_;
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilPermutationOfGeOElementsUtil, arr_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilPermutationOfGeOElementsUtil, permSwappings_, IOSIntArray *)

__attribute__((unused)) static void OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *self, jint i, jint j);

__attribute__((unused)) static void OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(OrgGeogebraCommonUtilAssignment_ResultEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonUtilAssignment_ResultEnum *new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonUtilAssignment)

IOSFloatArray *OrgGeogebraCommonUtilAssignment_FRACTIONS_;

@implementation OrgGeogebraCommonUtilAssignment

- (instancetype)initWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  OrgGeogebraCommonUtilAssignment_initWithOrgGeogebraCommonKernelMacro_(self, macro);
  return self;
}

- (OrgGeogebraCommonUtilAssignment_ResultEnum *)checkAssignmentWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  res_ = OrgGeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN();
  JavaUtilTreeSet *possibleInputGeos = new_JavaUtilTreeSet_init();
  JavaUtilTreeSet *possibleOutputGeos = new_JavaUtilTreeSet_init();
  JavaUtilTreeSet *sortedSet = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getGeoSetNameDescriptionOrder];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(sortedSet)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] && [geo hasChildren]) {
      {
        IOSObjectArray *a__ = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro_)) getMacroInput];
        OrgGeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgGeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgGeogebraCommonKernelGeosGeoElement *macroIn = *b__++;
          if ([[geo getClass] isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(macroIn)) getClass]]) {
            [possibleInputGeos addWithId:geo];
          }
        }
      }
    }
    if (![geo isIndependent]) {
      {
        IOSObjectArray *a__ = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro_)) getMacroOutput];
        OrgGeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgGeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgGeogebraCommonKernelGeosGeoElement *macroOut = *b__++;
          if ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(macroOut)) getClass] isEqual:[geo getClass]]) {
            [possibleOutputGeos addWithId:geo];
          }
        }
      }
    }
  }
  IOSObjectArray *inputGeos = [IOSObjectArray newArrayWithLength:[possibleInputGeos size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) [possibleInputGeos toArrayWithNSObjectArray:inputGeos];
  jboolean typesOK = YES;
  IOSObjectArray *inputTypes = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro_)) getInputTypes];
  if (((IOSObjectArray *) nil_chk([macro_ getInputTypes]))->size_ > [possibleInputGeos size]) {
    res_ = OrgGeogebraCommonUtilAssignment_ResultEnum_get_NOT_ENOUGH_INPUTS();
  }
  else if ([possibleOutputGeos isEmpty]) {
    res_ = OrgGeogebraCommonUtilAssignment_ResultEnum_get_WRONG_OUTPUT_TYPE();
  }
  else {
    IOSObjectArray *input = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(inputTypes))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *permutationUtil = new_OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_withInt_(inputGeos, inputTypes->size_);
    IOSObjectArray *inputNextPermutation = [permutationUtil next];
    while (inputNextPermutation != nil && (res_ == OrgGeogebraCommonUtilAssignment_ResultEnum_get_WRONG() || res_ == OrgGeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN())) {
      jint i = 0;
      typesOK = YES;
      while (i < ((IOSObjectArray *) nil_chk(inputNextPermutation))->size_ && typesOK) {
        if ([((OrgGeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(inputTypes, i))) checkWithId:IOSObjectArray_Get(inputNextPermutation, i)]) {
          (void) IOSObjectArray_Set(input, i, IOSObjectArray_Get(inputNextPermutation, i));
          typesOK = YES;
        }
        else {
          typesOK = NO;
        }
        i++;
      }
      if (typesOK) {
        res_ = OrgGeogebraCommonUtilAssignment_checkEqualityOfGeosWithOrgGeogebraCommonKernelGeosGeoElementArray_withJavaUtilArrayList_withOrgGeogebraCommonKernelConstruction_(self, input, new_JavaUtilArrayList_initWithJavaUtilCollection_(possibleOutputGeos), cons);
      }
      inputNextPermutation = [permutationUtil next];
    }
    if (res_ == OrgGeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN()) {
      if (typesOK) {
        res_ = OrgGeogebraCommonUtilAssignment_ResultEnum_get_WRONG();
      }
      else {
        res_ = OrgGeogebraCommonUtilAssignment_ResultEnum_get_WRONG_INPUT_TYPES();
      }
    }
  }
  return res_;
}

- (OrgGeogebraCommonUtilAssignment_ResultEnum *)checkEqualityOfGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
                                                                                            withJavaUtilArrayList:(JavaUtilArrayList *)possibleOutputGeos
                                                                          withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  return OrgGeogebraCommonUtilAssignment_checkEqualityOfGeosWithOrgGeogebraCommonKernelGeosGeoElementArray_withJavaUtilArrayList_withOrgGeogebraCommonKernelConstruction_(self, input, possibleOutputGeos, cons);
}

- (jfloat)getFraction {
  jfloat fraction = 0.0f;
  if ([((JavaUtilHashMap *) nil_chk(fractionForResult_)) containsKeyWithId:res_]) {
    fraction = [((JavaLangFloat *) nil_chk([fractionForResult_ getWithId:res_])) floatValue];
  }
  else if (res_ == OrgGeogebraCommonUtilAssignment_ResultEnum_get_CORRECT()) {
    fraction = 1.0f;
  }
  return fraction;
}

- (void)setFractionForResultWithOrgGeogebraCommonUtilAssignment_ResultEnum:(OrgGeogebraCommonUtilAssignment_ResultEnum *)res
                                                                 withFloat:(jfloat)f {
  (void) [((JavaUtilHashMap *) nil_chk(fractionForResult_)) putWithId:res withId:JavaLangFloat_valueOfWithFloat_(f)];
}

- (jfloat)getFractionForResultWithOrgGeogebraCommonUtilAssignment_ResultEnum:(OrgGeogebraCommonUtilAssignment_ResultEnum *)res {
  jfloat frac = 0.0f;
  if ([((JavaUtilHashMap *) nil_chk(fractionForResult_)) containsKeyWithId:res]) {
    frac = [((JavaLangFloat *) nil_chk([fractionForResult_ getWithId:res])) floatValue];
  }
  else if (res == OrgGeogebraCommonUtilAssignment_ResultEnum_get_CORRECT()) {
    frac = 1.0f;
  }
  return frac;
}

- (NSString *)getIconFileName {
  return [((OrgGeogebraCommonKernelMacro *) nil_chk(macro_)) getIconFileName];
}

- (NSString *)getToolName {
  return [((OrgGeogebraCommonKernelMacro *) nil_chk(macro_)) getToolName];
}

- (NSString *)getHint {
  return [((JavaUtilHashMap *) nil_chk(hintForResult_)) getWithId:res_];
}

- (void)setHintForResultWithOrgGeogebraCommonUtilAssignment_ResultEnum:(OrgGeogebraCommonUtilAssignment_ResultEnum *)res
                                                          withNSString:(NSString *)hint {
  (void) [((JavaUtilHashMap *) nil_chk(self->hintForResult_)) putWithId:res withId:hint];
}

- (OrgGeogebraCommonUtilAssignment_ResultEnum *)getResult {
  return res_;
}

- (NSString *)getHintForResultWithOrgGeogebraCommonUtilAssignment_ResultEnum:(OrgGeogebraCommonUtilAssignment_ResultEnum *)res {
  NSString *hint = @"";
  if ([((JavaUtilHashMap *) nil_chk(hintForResult_)) containsKeyWithId:res]) {
    hint = [hintForResult_ getWithId:res];
  }
  return hint;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonUtilAssignment class]) {
    OrgGeogebraCommonUtilAssignment_FRACTIONS_ = [IOSFloatArray newArrayWithFloats:(jfloat[]){ 0.0f, 0.1f, 0.125f, 0.2f, 0.25f, 0.3333f, 0.5f, 1.0f } count:8];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonUtilAssignment)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelMacro:", "Assignment", NULL, 0x1, NULL, NULL },
    { "checkAssignmentWithOrgGeogebraCommonKernelConstruction:", "checkAssignment", "Lorg.geogebra.common.util.Assignment$Result;", 0x1, NULL, NULL },
    { "checkEqualityOfGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:withJavaUtilArrayList:withOrgGeogebraCommonKernelConstruction:", "checkEqualityOfGeos", "Lorg.geogebra.common.util.Assignment$Result;", 0x2, NULL, NULL },
    { "getFraction", NULL, "F", 0x1, NULL, NULL },
    { "setFractionForResultWithOrgGeogebraCommonUtilAssignment_ResultEnum:withFloat:", "setFractionForResult", "V", 0x1, NULL, NULL },
    { "getFractionForResultWithOrgGeogebraCommonUtilAssignment_ResultEnum:", "getFractionForResult", "F", 0x1, NULL, NULL },
    { "getIconFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getToolName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getHint", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setHintForResultWithOrgGeogebraCommonUtilAssignment_ResultEnum:withNSString:", "setHintForResult", "V", 0x1, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.util.Assignment$Result;", 0x1, NULL, NULL },
    { "getHintForResultWithOrgGeogebraCommonUtilAssignment_ResultEnum:", "getHintForResult", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FRACTIONS_", NULL, 0x19, "[F", &OrgGeogebraCommonUtilAssignment_FRACTIONS_, NULL,  },
    { "macro_", NULL, 0x2, "Lorg.geogebra.common.kernel.Macro;", NULL, NULL,  },
    { "fractionForResult_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/util/Assignment$Result;Ljava/lang/Float;>;",  },
    { "hintForResult_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/util/Assignment$Result;Ljava/lang/String;>;",  },
    { "res_", NULL, 0x2, "Lorg.geogebra.common.util.Assignment$Result;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.util.Assignment$Result;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilAssignment = { 2, "Assignment", "org.geogebra.common.util", NULL, 0x1, 12, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonUtilAssignment;
}

@end

void OrgGeogebraCommonUtilAssignment_initWithOrgGeogebraCommonKernelMacro_(OrgGeogebraCommonUtilAssignment *self, OrgGeogebraCommonKernelMacro *macro) {
  (void) NSObject_init(self);
  self->macro_ = macro;
  self->fractionForResult_ = new_JavaUtilHashMap_init();
  self->hintForResult_ = new_JavaUtilHashMap_init();
  self->res_ = OrgGeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN();
}

OrgGeogebraCommonUtilAssignment *new_OrgGeogebraCommonUtilAssignment_initWithOrgGeogebraCommonKernelMacro_(OrgGeogebraCommonKernelMacro *macro) {
  OrgGeogebraCommonUtilAssignment *self = [OrgGeogebraCommonUtilAssignment alloc];
  OrgGeogebraCommonUtilAssignment_initWithOrgGeogebraCommonKernelMacro_(self, macro);
  return self;
}

OrgGeogebraCommonUtilAssignment_ResultEnum *OrgGeogebraCommonUtilAssignment_checkEqualityOfGeosWithOrgGeogebraCommonKernelGeosGeoElementArray_withJavaUtilArrayList_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonUtilAssignment *self, IOSObjectArray *input, JavaUtilArrayList *possibleOutputGeos, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelAlgosAlgoMacro *algoMacro = new_OrgGeogebraCommonKernelAlgosAlgoMacro_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelMacro_withOrgGeogebraCommonKernelGeosGeoElementArray_(cons, nil, self->macro_, input);
  IOSObjectArray *macroOutput = [algoMacro getOutput];
  OrgGeogebraCommonKernelGeosGeoElement *saveInput;
  jint i = 0;
  while (i < [((JavaUtilArrayList *) nil_chk(possibleOutputGeos)) size] && (self->res_ == OrgGeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN() || self->res_ == OrgGeogebraCommonUtilAssignment_ResultEnum_get_WRONG())) {
    OrgGeogebraCommonKernelProverAlgoAreEqual *algoEqual = new_OrgGeogebraCommonKernelProverAlgoAreEqual_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons, @"", IOSObjectArray_Get(nil_chk(macroOutput), 0), [possibleOutputGeos getWithInt:i]);
    self->res_ = [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk([algoEqual getResult])) getBoolean] ? OrgGeogebraCommonUtilAssignment_ResultEnum_get_CORRECT() : OrgGeogebraCommonUtilAssignment_ResultEnum_get_WRONG();
    jint j = 0;
    while (j < ((IOSObjectArray *) nil_chk(input))->size_ && self->res_ == OrgGeogebraCommonUtilAssignment_ResultEnum_get_CORRECT()) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) isRandomizable]) {
        saveInput = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) copy__];
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) randomizeForProbabilisticChecking];
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) updateCascade];
        self->res_ = [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk([algoEqual getResult])) getBoolean] ? OrgGeogebraCommonUtilAssignment_ResultEnum_get_CORRECT() : OrgGeogebraCommonUtilAssignment_ResultEnum_get_WRONG_AFTER_RANDOMIZE();
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) setWithOrgGeogebraCommonKernelGeosGeoElement:saveInput];
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) updateCascade];
      }
      j++;
    }
    i++;
  }
  [algoMacro remove];
  return self->res_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilAssignment)

@implementation OrgGeogebraCommonUtilPermutationOfGeOElementsUtil

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arr {
  OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_(self, arr);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arr
                                                           withInt:(jint)permSize {
  OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_withInt_(self, arr, permSize);
  return self;
}

- (IOSObjectArray *)next {
  if (arr_ == nil) {
    return nil;
  }
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(permSwappings_))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr_, 0, res, 0, permSwappings_->size_);
  jint i = permSwappings_->size_ - 1;
  while (i >= 0 && IOSIntArray_Get(permSwappings_, i) == ((IOSObjectArray *) nil_chk(arr_))->size_ - 1) {
    OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(self, i, IOSIntArray_Get(permSwappings_, i));
    *IOSIntArray_GetRef(permSwappings_, i) = i;
    i--;
  }
  if (i < 0) {
    arr_ = nil;
  }
  else {
    jint prev = IOSIntArray_Get(permSwappings_, i);
    OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(self, i, prev);
    jint next = prev + 1;
    *IOSIntArray_GetRef(permSwappings_, i) = next;
    OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(self, i, next);
  }
  return res;
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(self, i, j);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoElementArray:", "PermutationOfGeOElementsUtil", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoElementArray:withInt:", "PermutationOfGeOElementsUtil", NULL, 0x1, NULL, NULL },
    { "next", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "swapWithInt:withInt:", "swap", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arr_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "permSwappings_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilPermutationOfGeOElementsUtil = { 2, "PermutationOfGeOElementsUtil", "org.geogebra.common.util", NULL, 0x0, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonUtilPermutationOfGeOElementsUtil;
}

@end

void OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_(OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *self, IOSObjectArray *arr) {
  (void) OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_withInt_(self, arr, ((IOSObjectArray *) nil_chk(arr))->size_);
}

OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *new_OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *arr) {
  OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *self = [OrgGeogebraCommonUtilPermutationOfGeOElementsUtil alloc];
  OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_(self, arr);
  return self;
}

void OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_withInt_(OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *self, IOSObjectArray *arr, jint permSize) {
  (void) NSObject_init(self);
  self->arr_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(arr))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, self->arr_, 0, arr->size_);
  self->permSwappings_ = [IOSIntArray newArrayWithLength:permSize];
  for (jint i = 0; i < self->permSwappings_->size_; i++) {
    *IOSIntArray_GetRef(self->permSwappings_, i) = i;
  }
}

OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *new_OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_withInt_(IOSObjectArray *arr, jint permSize) {
  OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *self = [OrgGeogebraCommonUtilPermutationOfGeOElementsUtil alloc];
  OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_initWithOrgGeogebraCommonKernelGeosGeoElementArray_withInt_(self, arr, permSize);
  return self;
}

void OrgGeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(OrgGeogebraCommonUtilPermutationOfGeOElementsUtil *self, jint i, jint j) {
  OrgGeogebraCommonKernelGeosGeoElement *tmp = IOSObjectArray_Get(nil_chk(self->arr_), i);
  (void) IOSObjectArray_Set(self->arr_, i, IOSObjectArray_Get(self->arr_, j));
  (void) IOSObjectArray_Set(self->arr_, j, tmp);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilPermutationOfGeOElementsUtil)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonUtilAssignment_ResultEnum)

OrgGeogebraCommonUtilAssignment_ResultEnum *OrgGeogebraCommonUtilAssignment_ResultEnum_values_[8];

@implementation OrgGeogebraCommonUtilAssignment_ResultEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonUtilAssignment_ResultEnum_values() {
  OrgGeogebraCommonUtilAssignment_ResultEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonUtilAssignment_ResultEnum_values_ count:8 type:OrgGeogebraCommonUtilAssignment_ResultEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonUtilAssignment_ResultEnum_values();
}

+ (OrgGeogebraCommonUtilAssignment_ResultEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonUtilAssignment_ResultEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonUtilAssignment_ResultEnum *OrgGeogebraCommonUtilAssignment_ResultEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonUtilAssignment_ResultEnum_initialize();
  for (int i = 0; i < 8; i++) {
    OrgGeogebraCommonUtilAssignment_ResultEnum *e = OrgGeogebraCommonUtilAssignment_ResultEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonUtilAssignment_ResultEnum class]) {
    OrgGeogebraCommonUtilAssignment_ResultEnum_CORRECT = new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"CORRECT", 0);
    OrgGeogebraCommonUtilAssignment_ResultEnum_WRONG = new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"WRONG", 1);
    OrgGeogebraCommonUtilAssignment_ResultEnum_NOT_ENOUGH_INPUTS = new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"NOT_ENOUGH_INPUTS", 2);
    OrgGeogebraCommonUtilAssignment_ResultEnum_WRONG_INPUT_TYPES = new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"WRONG_INPUT_TYPES", 3);
    OrgGeogebraCommonUtilAssignment_ResultEnum_WRONG_OUTPUT_TYPE = new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"WRONG_OUTPUT_TYPE", 4);
    OrgGeogebraCommonUtilAssignment_ResultEnum_WRONG_AFTER_RANDOMIZE = new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"WRONG_AFTER_RANDOMIZE", 5);
    OrgGeogebraCommonUtilAssignment_ResultEnum_UNKNOWN = new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"UNKNOWN", 6);
    OrgGeogebraCommonUtilAssignment_ResultEnum_INPUT_AMBIGUOUS = new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"INPUT_AMBIGUOUS", 7);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonUtilAssignment_ResultEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "CORRECT", "CORRECT", 0x4019, "Lorg.geogebra.common.util.Assignment$Result;", &OrgGeogebraCommonUtilAssignment_ResultEnum_CORRECT, NULL,  },
    { "WRONG", "WRONG", 0x4019, "Lorg.geogebra.common.util.Assignment$Result;", &OrgGeogebraCommonUtilAssignment_ResultEnum_WRONG, NULL,  },
    { "NOT_ENOUGH_INPUTS", "NOT_ENOUGH_INPUTS", 0x4019, "Lorg.geogebra.common.util.Assignment$Result;", &OrgGeogebraCommonUtilAssignment_ResultEnum_NOT_ENOUGH_INPUTS, NULL,  },
    { "WRONG_INPUT_TYPES", "WRONG_INPUT_TYPES", 0x4019, "Lorg.geogebra.common.util.Assignment$Result;", &OrgGeogebraCommonUtilAssignment_ResultEnum_WRONG_INPUT_TYPES, NULL,  },
    { "WRONG_OUTPUT_TYPE", "WRONG_OUTPUT_TYPE", 0x4019, "Lorg.geogebra.common.util.Assignment$Result;", &OrgGeogebraCommonUtilAssignment_ResultEnum_WRONG_OUTPUT_TYPE, NULL,  },
    { "WRONG_AFTER_RANDOMIZE", "WRONG_AFTER_RANDOMIZE", 0x4019, "Lorg.geogebra.common.util.Assignment$Result;", &OrgGeogebraCommonUtilAssignment_ResultEnum_WRONG_AFTER_RANDOMIZE, NULL,  },
    { "UNKNOWN", "UNKNOWN", 0x4019, "Lorg.geogebra.common.util.Assignment$Result;", &OrgGeogebraCommonUtilAssignment_ResultEnum_UNKNOWN, NULL,  },
    { "INPUT_AMBIGUOUS", "INPUT_AMBIGUOUS", 0x4019, "Lorg.geogebra.common.util.Assignment$Result;", &OrgGeogebraCommonUtilAssignment_ResultEnum_INPUT_AMBIGUOUS, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.util.Assignment$Result;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilAssignment_ResultEnum = { 2, "Result", "org.geogebra.common.util", "Assignment", 0x4019, 0, NULL, 8, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/util/Assignment$Result;>;" };
  return &_OrgGeogebraCommonUtilAssignment_ResultEnum;
}

@end

void OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(OrgGeogebraCommonUtilAssignment_ResultEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonUtilAssignment_ResultEnum *new_OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonUtilAssignment_ResultEnum *self = [OrgGeogebraCommonUtilAssignment_ResultEnum alloc];
  OrgGeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilAssignment_ResultEnum)
