//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/util/GgbMat.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/LUDecompositionImpl.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/util/GgbMat.h"

#define OrgGeogebraCommonUtilGgbMat_serialVersionUID 1LL

@interface OrgGeogebraCommonUtilGgbMat () {
 @public
  jboolean isUndefined__;
}

@end

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonUtilGgbMat, serialVersionUID, jlong)

@implementation OrgGeogebraCommonUtilGgbMat

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelGeosGeoList_(self, inputList);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)inputList {
  OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelArithmeticMyList_(self, inputList);
  return self;
}

- (instancetype)initWithInt:(jint)rows
                    withInt:(jint)cols {
  OrgGeogebraCommonUtilGgbMat_initWithInt_withInt_(self, rows, cols);
  return self;
}

- (void)inverseImmediate {
  @try {
    id<OrgApacheCommonsMathLinearDecompositionSolver> d = [((OrgApacheCommonsMathLinearLUDecompositionImpl *) [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) autorelease]) getSolver];
    id<OrgApacheCommonsMathLinearRealMatrix> ret = [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(d)) getInverse];
    OrgApacheCommonsMathLinearArray2DRowRealMatrix_set_data_(self, [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(ret)) getData]);
  }
  @catch (JavaLangException *e) {
    [self setIsUndefinedWithBoolean:YES];
  }
}

- (jdouble)determinant {
  return [((OrgApacheCommonsMathLinearLUDecompositionImpl *) [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) autorelease]) getDeterminant];
}

- (void)reducedRowEchelonFormImmediate {
  jint rowCount = ((IOSObjectArray *) nil_chk(data_))->size_;
  if (rowCount == 0) return;
  jint columnCount = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(data_, 0)))->size_;
  jint lead = 0;
  for (jint r = 0; r < rowCount; r++) {
    if (lead >= columnCount) break;
    {
      jint i = r;
      while (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(data_, i)), lead))) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(data_, i)), lead) = 0;
        i++;
        if (i == rowCount) {
          i = r;
          lead++;
          if (lead == columnCount) return;
        }
      }
      IOSDoubleArray *temp = IOSObjectArray_Get(data_, r);
      IOSObjectArray_Set(data_, r, IOSObjectArray_Get(data_, i));
      IOSObjectArray_Set(data_, i, temp);
    }
    {
      jdouble lv = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(data_, r)), lead);
      for (jint j = 0; j < columnCount; j++) *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(data_, r)), j) /= lv;
    }
    for (jint i = 0; i < rowCount; i++) {
      if (i != r) {
        jdouble lv = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(data_, i)), lead);
        for (jint j = 0; j < columnCount; j++) *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(data_, i)), j) -= lv * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(data_, r)), j);
      }
    }
    lead++;
  }
}

- (void)transposeImmediate {
  jint m = [self getRowDimension];
  jint n = [self getColumnDimension];
  IOSObjectArray *C = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ n, m }];
  for (jint i = 0; i < m; i++) {
    for (jint j = 0; j < n; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(C, j)), i) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), j);
    }
  }
  OrgApacheCommonsMathLinearArray2DRowRealMatrix_set_data_(self, C);
}

- (void)getGeoListWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)outputList
                 withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  if (isUndefined__) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(outputList)) setDefinedWithBoolean:NO];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(outputList)) clear];
  [outputList setDefinedWithBoolean:YES];
  for (jint r = 0; r < [self getRowDimension]; r++) {
    OrgGeogebraCommonKernelGeosGeoList *columnList = [new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons) autorelease];
    for (jint c = 0; c < [self getColumnDimension]; c++) {
      [columnList addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons, [self getEntryWithInt:r withInt:c]) autorelease]];
    }
    [outputList addWithOrgGeogebraCommonKernelGeosGeoElement:columnList];
  }
}

- (void)getMyListWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)outputList
                           withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  if (isUndefined__) {
    return;
  }
  [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(outputList)) clear];
  for (jint r = 0; r < [self getRowDimension]; r++) {
    OrgGeogebraCommonKernelArithmeticMyList *columnList = [new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel) autorelease];
    for (jint c = 0; c < [self getColumnDimension]; c++) {
      [columnList addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction], [self getEntryWithInt:r withInt:c]) autorelease]];
    }
    [outputList addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:columnList];
  }
}

- (jboolean)isUndefined {
  return isUndefined__;
}

- (void)setIsUndefinedWithBoolean:(jboolean)undefined {
  isUndefined__ = undefined;
}

- (jboolean)hasOnlyIntegers {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data_))->size_; i++) for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(data_, i)))->size_; j++) if (!OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(data_, i)), j))) return NO;
  return YES;
}

- (void)set3x3fromConicWithDoubleArray:(IOSDoubleArray *)matrix {
  [self setEntryWithInt:0 withInt:0 withDouble:IOSDoubleArray_Get(nil_chk(matrix), 0)];
  [self setEntryWithInt:0 withInt:1 withDouble:IOSDoubleArray_Get(matrix, 3)];
  [self setEntryWithInt:1 withInt:0 withDouble:IOSDoubleArray_Get(matrix, 3)];
  [self setEntryWithInt:1 withInt:1 withDouble:IOSDoubleArray_Get(matrix, 1)];
  [self setEntryWithInt:2 withInt:0 withDouble:IOSDoubleArray_Get(matrix, 4)];
  [self setEntryWithInt:0 withInt:2 withDouble:IOSDoubleArray_Get(matrix, 4)];
  [self setEntryWithInt:2 withInt:1 withDouble:IOSDoubleArray_Get(matrix, 5)];
  [self setEntryWithInt:1 withInt:2 withDouble:IOSDoubleArray_Get(matrix, 5)];
  [self setEntryWithInt:2 withInt:2 withDouble:IOSDoubleArray_Get(matrix, 2)];
  [self setIsUndefinedWithBoolean:NO];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoList:", "GgbMat", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticMyList:", "GgbMat", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "GgbMat", NULL, 0x1, NULL, NULL },
    { "inverseImmediate", NULL, "V", 0x1, NULL, NULL },
    { "determinant", NULL, "D", 0x1, NULL, NULL },
    { "reducedRowEchelonFormImmediate", NULL, "V", 0x1, NULL, NULL },
    { "transposeImmediate", NULL, "V", 0x1, NULL, NULL },
    { "getGeoListWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelConstruction:", "getGeoList", "V", 0x1, NULL, NULL },
    { "getMyListWithOrgGeogebraCommonKernelArithmeticMyList:withOrgGeogebraCommonKernelKernel:", "getMyList", "V", 0x1, NULL, NULL },
    { "isUndefined", NULL, "Z", 0x1, NULL, NULL },
    { "setIsUndefinedWithBoolean:", "setIsUndefined", "V", 0x1, NULL, NULL },
    { "hasOnlyIntegers", NULL, "Z", 0x1, NULL, NULL },
    { "set3x3fromConicWithDoubleArray:", "set3x3fromConic", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonUtilGgbMat_serialVersionUID },
    { "isUndefined__", "isUndefined", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilGgbMat = { 2, "GgbMat", "org.geogebra.common.util", NULL, 0x1, 13, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonUtilGgbMat;
}

@end

void OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonUtilGgbMat *self, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgApacheCommonsMathLinearArray2DRowRealMatrix_init(self);
  self->isUndefined__ = NO;
  jint rows = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(inputList)) size];
  if (![inputList isDefined] || rows == 0) {
    [self setIsUndefinedWithBoolean:YES];
    return;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [inputList getWithInt:0];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
    [self setIsUndefinedWithBoolean:YES];
    return;
  }
  jint cols = [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) size];
  if (cols == 0) {
    [self setIsUndefinedWithBoolean:YES];
    return;
  }
  OrgApacheCommonsMathLinearArray2DRowRealMatrix_setAndConsume_data_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows, cols }]);
  OrgGeogebraCommonKernelGeosGeoList *rowList;
  for (jint r = 0; r < rows; r++) {
    geo = [inputList getWithInt:r];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
      [self setIsUndefinedWithBoolean:YES];
      return;
    }
    rowList = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class]);
    if ([rowList size] != cols) {
      [self setIsUndefinedWithBoolean:YES];
      return;
    }
    for (jint c = 0; c < cols; c++) {
      geo = [rowList getWithInt:c];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
        [self setIsUndefinedWithBoolean:YES];
        return;
      }
      [self setEntryWithInt:r withInt:c withDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getValue]];
    }
  }
}

OrgGeogebraCommonUtilGgbMat *new_OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonUtilGgbMat *self = [OrgGeogebraCommonUtilGgbMat alloc];
  OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelGeosGeoList_(self, inputList);
  return self;
}

void OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonUtilGgbMat *self, OrgGeogebraCommonKernelArithmeticMyList *inputList) {
  OrgApacheCommonsMathLinearArray2DRowRealMatrix_init(self);
  self->isUndefined__ = NO;
  if (![((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(inputList)) isMatrix]) {
    [self setIsUndefinedWithBoolean:YES];
    return;
  }
  jint rows = [inputList getMatrixRows];
  jint cols = [inputList getMatrixCols];
  if (rows < 1 || cols < 1) {
    [self setIsUndefinedWithBoolean:YES];
    return;
  }
  OrgApacheCommonsMathLinearArray2DRowRealMatrix_setAndConsume_data_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows, cols }]);
  for (jint r = 0; r < rows; r++) {
    for (jint c = 0; c < cols; c++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> geo = OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(inputList, c, r);
      if (!([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo])) {
        [self setIsUndefinedWithBoolean:YES];
        return;
      }
      [self setEntryWithInt:r withInt:c withDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]];
    }
  }
}

OrgGeogebraCommonUtilGgbMat *new_OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonKernelArithmeticMyList *inputList) {
  OrgGeogebraCommonUtilGgbMat *self = [OrgGeogebraCommonUtilGgbMat alloc];
  OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelArithmeticMyList_(self, inputList);
  return self;
}

void OrgGeogebraCommonUtilGgbMat_initWithInt_withInt_(OrgGeogebraCommonUtilGgbMat *self, jint rows, jint cols) {
  OrgApacheCommonsMathLinearArray2DRowRealMatrix_init(self);
  self->isUndefined__ = NO;
  OrgApacheCommonsMathLinearArray2DRowRealMatrix_setAndConsume_data_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows, cols }]);
  [self setIsUndefinedWithBoolean:NO];
}

OrgGeogebraCommonUtilGgbMat *new_OrgGeogebraCommonUtilGgbMat_initWithInt_withInt_(jint rows, jint cols) {
  OrgGeogebraCommonUtilGgbMat *self = [OrgGeogebraCommonUtilGgbMat alloc];
  OrgGeogebraCommonUtilGgbMat_initWithInt_withInt_(self, rows, cols);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilGgbMat)
