//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/util/CopyPaste.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/io/MyXMLio.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/UndoManager.h"
#include "org/geogebra/common/kernel/algos/AlgoCirclePointRadius.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "org/geogebra/common/kernel/algos/AlgoConicFivePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentList.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPoints.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsRay.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "org/geogebra/common/kernel/algos/AlgoMacro.h"
#include "org/geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygon.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "org/geogebra/common/kernel/algos/AlgoTextfield.h"
#include "org/geogebra/common/kernel/algos/AlgoVector.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/algos/GetPointsAlgo.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoAxis.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/plugin/GgbAPI.h"
#include "org/geogebra/common/util/CopyPaste.h"

NSString *OrgGeogebraCommonUtilCopyPaste_labelPrefix_ = @"CLIPBOARDmagicSTRING";
OrgGeogebraCommonUtilCopyPaste *OrgGeogebraCommonUtilCopyPaste_INSTANCE_ = nil;

@implementation OrgGeogebraCommonUtilCopyPaste

- (instancetype)init {
  OrgGeogebraCommonUtilCopyPaste_init(self);
  return self;
}

- (jboolean)isEmpty {
  if (copiedXML_ == nil) return YES;
  return [((JavaLangStringBuilder *) nil_chk(copiedXML_)) length] == 0;
}

- (void)removeFixedSlidersWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class]);
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) if ([((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isSliderFixed]) {
      [geos removeWithId:geo];
    }
  }
}

- (void)removeDependentFromAxesWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                        withOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonKernelAlgosConstructionElement *geo;
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    geo = [geos getWithInt:i];
    if ([((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) getAllIndependentPredecessors])) containsWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel])) getXAxis]]) {
      (void) [geos removeWithInt:i];
    }
    else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getYAxis]]) {
      (void) [geos removeWithInt:i];
    }
    else if ([app is3D]) {
      if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getXAxis3D]]) {
        (void) [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getYAxis3D]]) {
        (void) [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getZAxis3D]]) {
        (void) [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getXOYPlane]]) {
        (void) [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getClippingCube]]) {
        (void) [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getSpace]]) {
        (void) [geos removeWithInt:i];
      }
    }
  }
}

- (void)removeHavingMacroPredecessorsWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                               withBoolean:(jboolean)copymacro {
  OrgGeogebraCommonKernelGeosGeoElement *geo, *geo2;
  id<JavaUtilIterator> it;
  jboolean found = NO;
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk([geos getWithInt:i])) isGeoElement]) {
      geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class]);
      found = NO;
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm] != nil) {
        if ([((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getClassName])) isEqual:OrgGeogebraCommonKernelAlgosAlgosEnum_get_AlgoMacro()]) {
          found = YES;
          if (copymacro) {
            [((JavaUtilHashSet *) nil_chk(copiedMacros_)) addWithId:[((OrgGeogebraCommonKernelAlgosAlgoMacro *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoMacro *) check_class_cast([geo getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoMacro class])))) getMacro]];
          }
        }
      }
      if (!found) {
        it = [((JavaUtilTreeSet *) nil_chk([geo getAllPredecessors])) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          geo2 = [it next];
          if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) getParentAlgorithm] != nil) {
            if ([((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo2 getParentAlgorithm])) getClassName])) isEqual:OrgGeogebraCommonKernelAlgosAlgosEnum_get_AlgoMacro()]) {
              found = YES;
              if (copymacro) {
                [((JavaUtilHashSet *) nil_chk(copiedMacros_)) addWithId:[((OrgGeogebraCommonKernelAlgosAlgoMacro *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoMacro *) check_class_cast([geo2 getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoMacro class])))) getMacro]];
              }
              break;
            }
          }
        }
      }
      if (found && !copymacro) {
        (void) [geos removeWithInt:i];
      }
    }
  }
}

- (void)addSubGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class]);
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm] == nil) continue;
    if (![geo isGeoElement3D]) {
      if (([geo isGeoLine] && [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoJoinPoints class]]) || ([geo isGeoSegment] && [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment class]]) || ([geo isGeoRay] && [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoJoinPointsRay class]]) || ([geo isGeoVector] && [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVector class]])) {
        if (![geos containsWithId:IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput]), 0)]) {
          [geos addWithId:IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput]), 0)];
        }
        if (![geos containsWithId:IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput]), 1)]) {
          [geos addWithId:IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput]), 1)];
        }
      }
      else if ([geo isGeoPolygon]) {
        if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPolygon class]]) {
          IOSObjectArray *points = [((OrgGeogebraCommonKernelAlgosAlgoPolygon *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoPolygon *) check_class_cast(([geo getParentAlgorithm]), [OrgGeogebraCommonKernelAlgosAlgoPolygon class])))) getPoints];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(points))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(points, j)]) {
              [geos addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, j), [OrgGeogebraCommonKernelGeosGeoElement class])];
            }
          }
          IOSObjectArray *ogeos = [((OrgGeogebraCommonKernelAlgosAlgoPolygon *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoPolygon *) check_class_cast(([geo getParentAlgorithm]), [OrgGeogebraCommonKernelAlgosAlgoPolygon class])))) getOutput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(ogeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(ogeos, j)] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ogeos, j))) isGeoSegment]) {
              [geos addWithId:IOSObjectArray_Get(ogeos, j)];
            }
          }
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND class]]) {
          IOSObjectArray *pgeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk((([geo getParentAlgorithm])))) getInput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(pgeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, j)] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, j))) isGeoPoint]) {
              [geos addWithId:IOSObjectArray_Get(pgeos, j)];
            }
          }
          IOSObjectArray *ogeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk((([geo getParentAlgorithm])))) getOutput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(ogeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(ogeos, j)] && ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ogeos, j))) isGeoSegment] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ogeos, j))) isGeoPoint])) {
              [geos addWithId:IOSObjectArray_Get(ogeos, j)];
            }
          }
        }
      }
      else if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolyLine class]]) {
        if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPolyLine class]]) {
          IOSObjectArray *pgeos = [((id<OrgGeogebraCommonKernelAlgosGetPointsAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosGetPointsAlgo>) check_protocol_cast(([geo getParentAlgorithm]), @protocol(OrgGeogebraCommonKernelAlgosGetPointsAlgo))))) getPoints];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(pgeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, j)]) {
              [geos addWithId:IOSObjectArray_Get(pgeos, j)];
            }
          }
        }
      }
      else if ([geo isGeoConic]) {
        if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoCircleTwoPoints class]]) {
          IOSObjectArray *pgeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (![geos containsWithId:IOSObjectArray_Get(nil_chk(pgeos), 0)]) [geos addWithId:IOSObjectArray_Get(pgeos, 0)];
          if (![geos containsWithId:IOSObjectArray_Get(pgeos, 1)]) [geos addWithId:IOSObjectArray_Get(pgeos, 1)];
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints class]] || [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint class]]) {
          IOSObjectArray *pgeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (![geos containsWithId:IOSObjectArray_Get(nil_chk(pgeos), 0)]) [geos addWithId:IOSObjectArray_Get(pgeos, 0)];
          if (![geos containsWithId:IOSObjectArray_Get(pgeos, 1)]) [geos addWithId:IOSObjectArray_Get(pgeos, 1)];
          if (![geos containsWithId:IOSObjectArray_Get(pgeos, 2)]) [geos addWithId:IOSObjectArray_Get(pgeos, 2)];
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoConicFivePoints class]]) {
          IOSObjectArray *pgeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(pgeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, j)]) [geos addWithId:IOSObjectArray_Get(pgeos, j)];
          }
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius class]]) {
          IOSObjectArray *pgeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (![geos containsWithId:IOSObjectArray_Get(nil_chk(pgeos), 0)]) [geos addWithId:IOSObjectArray_Get(pgeos, 0)];
        }
      }
      else if ([geo isGeoList]) {
        if ([((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getClassName])) isEqual:OrgGeogebraCommonKernelCommandsCommandsEnum_get_Sequence()]) {
          IOSObjectArray *pgeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (((IOSObjectArray *) nil_chk(pgeos))->size_ > 1) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, 0)]) [geos addWithId:IOSObjectArray_Get(pgeos, 0)];
          }
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentList class]]) {
          IOSObjectArray *pgeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(pgeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, j)]) [geos addWithId:IOSObjectArray_Get(pgeos, j)];
          }
        }
      }
    }
  }
}

- (JavaUtilArrayList *)addPredecessorGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
  OrgGeogebraCommonKernelGeosGeoElement *geo, *geo2;
  JavaUtilTreeSet *ts;
  id<JavaUtilIterator> it;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class]);
    ts = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllPredecessors];
    it = [((JavaUtilTreeSet *) nil_chk(ts)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      geo2 = [it next];
      if (![ret containsWithId:geo2] && ![geos containsWithId:geo2] && !([OrgGeogebraCommonKernelKernelNDGeoAxisND_class_() isInstance:geo2]) && (geo2 != [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) getKernel])) getXOYPlane]) && (geo2 != [((OrgGeogebraCommonKernelKernel *) nil_chk([geo2 getKernel])) getClippingCube]) && (geo2 != [((OrgGeogebraCommonKernelKernel *) nil_chk([geo2 getKernel])) getSpace])) {
        [ret addWithId:geo2];
      }
    }
  }
  [geos addAllWithJavaUtilCollection:ret];
  return ret;
}

- (JavaUtilArrayList *)addAlgosDependentFromInsideWithJavaUtilArrayList:(JavaUtilArrayList *)conels
                                                            withBoolean:(jboolean)putdown
                                                            withBoolean:(jboolean)copymacro {
  JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  JavaUtilArrayList *geoal;
  OrgGeogebraCommonKernelAlgosAlgoElement *ale;
  JavaUtilArrayList *ac;
  IOSObjectArray *geos;
  for (jint i = [((JavaUtilArrayList *) nil_chk(conels)) size] - 1; i >= 0; i--) {
    geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([conels getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class]);
    if (([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTextfield class]]) && (![ret containsWithId:[geo getParentAlgorithm]]) && (![conels containsWithId:[geo getParentAlgorithm]])) {
      [ret addWithId:[geo getParentAlgorithm]];
    }
    geoal = [geo getAlgorithmList];
    for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(geoal)) size]; j++) {
      ale = [geoal getWithInt:j];
      if (!([ale isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoMacro class]]) || putdown || copymacro) {
        ac = new_JavaUtilArrayList_init();
        [ac addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(ale)) getInput])];
        if ([conels containsAllWithJavaUtilCollection:ac] && ![conels containsWithId:ale]) {
          if (([ale isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoMacro class]]) && copymacro) {
            [((JavaUtilHashSet *) nil_chk(copiedMacros_)) addWithId:[((OrgGeogebraCommonKernelAlgosAlgoMacro *) check_class_cast(ale, [OrgGeogebraCommonKernelAlgosAlgoMacro class])) getMacro]];
          }
          [conels addWithId:ale];
          geos = [ale getOutput];
          if (geos != nil) {
            for (jint k = 0; k < geos->size_; k++) {
              if (![ret containsWithId:IOSObjectArray_Get(geos, k)] && ![conels containsWithId:IOSObjectArray_Get(geos, k)]) {
                [ret addWithId:IOSObjectArray_Get(geos, k)];
              }
            }
          }
        }
      }
    }
  }
  [conels addAllWithJavaUtilCollection:ret];
  return ret;
}

- (JavaUtilArrayList *)removeFreeNonselectedGeoNumericsWithJavaUtilArrayList:(JavaUtilArrayList *)conels
                                                       withJavaUtilArrayList:(JavaUtilArrayList *)selected {
  JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
  [ret addAllWithJavaUtilCollection:conels];
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = [ret size] - 1; i >= 0; i--) {
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk([ret getWithInt:i])) isGeoElement]) {
      geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([ret getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class]);
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric] && [geo isIndependent] && ![((JavaUtilArrayList *) nil_chk(selected)) containsWithId:geo]) {
        (void) [ret removeWithInt:i];
      }
    }
  }
  return ret;
}

- (void)beforeSavingToXMLWithJavaUtilArrayList:(JavaUtilArrayList *)conels
                         withJavaUtilArrayList:(JavaUtilArrayList *)geostohide
                                   withBoolean:(jboolean)samewindow
                                   withBoolean:(jboolean)putdown {
  if (samewindow) copiedXMLlabelsforSameWindow_ = new_JavaUtilArrayList_init();
  else copiedXMLlabels_ = new_JavaUtilArrayList_init();
  OrgGeogebraCommonKernelAlgosConstructionElement *geo;
  NSString *label;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(conels)) size]; i++) {
    geo = [conels getWithInt:i];
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) isGeoElement]) {
      label = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelSimple];
      if (label != nil) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) setLabelSimpleWithNSString:JreStrcat("$$", OrgGeogebraCommonUtilCopyPaste_labelPrefix_, label)];
        if (samewindow) [((JavaUtilArrayList *) nil_chk(copiedXMLlabelsforSameWindow_)) addWithId:[((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelSimple]];
        else [((JavaUtilArrayList *) nil_chk(copiedXMLlabels_)) addWithId:[((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelSimple]];
        if (putdown) {
          [((OrgGeogebraCommonKernelKernel *) nil_chk([geo getKernel])) renameLabelInScriptsWithNSString:label withNSString:JreStrcat("$$", OrgGeogebraCommonUtilCopyPaste_labelPrefix_, label)];
        }
      }
    }
  }
  for (jint j = [((JavaUtilArrayList *) nil_chk(geostohide)) size] - 1; j >= 0; j--) {
    geo = [geostohide getWithInt:j];
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) isGeoElement] && [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) isEuclidianVisible]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) setEuclidianVisibleWithBoolean:NO];
    }
    else {
      [geostohide removeWithId:geo];
    }
  }
}

- (void)afterSavingToXMLWithJavaUtilArrayList:(JavaUtilArrayList *)conels
                        withJavaUtilArrayList:(JavaUtilArrayList *)geostoshow
                                  withBoolean:(jboolean)putdown {
  OrgGeogebraCommonKernelAlgosConstructionElement *geo;
  NSString *label;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(conels)) size]; i++) {
    geo = [conels getWithInt:i];
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) isGeoElement]) {
      label = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelSimple];
      if (label != nil && ((jint) [label length]) >= ((jint) [((NSString *) nil_chk(OrgGeogebraCommonUtilCopyPaste_labelPrefix_)) length])) {
        if ([((NSString *) nil_chk([label substring:0 endIndex:((jint) [OrgGeogebraCommonUtilCopyPaste_labelPrefix_ length])])) isEqual:OrgGeogebraCommonUtilCopyPaste_labelPrefix_]) {
          @try {
            [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) setLabelSimpleWithNSString:[label substring:((jint) [OrgGeogebraCommonUtilCopyPaste_labelPrefix_ length])]];
            if (putdown) {
              [((OrgGeogebraCommonKernelKernel *) nil_chk([geo getKernel])) renameLabelInScriptsWithNSString:label withNSString:[label substring:((jint) [OrgGeogebraCommonUtilCopyPaste_labelPrefix_ length])]];
            }
          }
          @catch (JavaLangException *e) {
            [((JavaLangException *) nil_chk(e)) printStackTrace];
          }
        }
      }
    }
  }
  for (jint j = [((JavaUtilArrayList *) nil_chk(geostoshow)) size] - 1; j >= 0; j--) {
    geo = [geostoshow getWithInt:j];
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) isGeoElement]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoElement class])) setEuclidianVisibleWithBoolean:YES];
    }
  }
}

- (void)copyToXMLWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                        withJavaUtilArrayList:(JavaUtilArrayList *)geos
                                  withBoolean:(jboolean)putdown {
  jboolean copyMacrosPresume = YES;
  if ([((JavaUtilArrayList *) nil_chk(geos)) isEmpty]) return;
  jboolean scriptsBlocked = [((OrgGeogebraCommonMainApp *) nil_chk(app)) isBlockUpdateScripts];
  [app setBlockUpdateScriptsWithBoolean:YES];
  copiedXML_ = new_JavaLangStringBuilder_init();
  copiedXMLlabels_ = new_JavaUtilArrayList_init();
  copiedXMLforSameWindow_ = new_JavaLangStringBuilder_init();
  copiedXMLlabelsforSameWindow_ = new_JavaUtilArrayList_init();
  copySource_ = [app getActiveEuclidianView];
  copyObject_ = [((OrgGeogebraCommonKernelUndoManager *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) getUndoManager])) getCurrentUndoInfo];
  copiedMacros_ = new_JavaUtilHashSet_init();
  JavaUtilArrayList *geoslocal = new_JavaUtilArrayList_init();
  [geoslocal addAllWithJavaUtilCollection:geos];
  if (!putdown) {
    [self removeFixedSlidersWithJavaUtilArrayList:geoslocal];
  }
  if ([geoslocal isEmpty]) {
    [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
    return;
  }
  [self removeDependentFromAxesWithJavaUtilArrayList:geoslocal withOrgGeogebraCommonMainApp:app];
  if ([geoslocal isEmpty]) {
    [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
    return;
  }
  if (!putdown) {
    [self removeHavingMacroPredecessorsWithJavaUtilArrayList:geoslocal withBoolean:copyMacrosPresume];
    if ([geoslocal isEmpty]) {
      [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
      return;
    }
  }
  [self addSubGeosWithJavaUtilArrayList:geoslocal];
  if ([geoslocal isEmpty]) {
    [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
    return;
  }
  JavaUtilArrayList *geostohide = [self addPredecessorGeosWithJavaUtilArrayList:geoslocal];
  [((JavaUtilArrayList *) nil_chk(geostohide)) addAllWithJavaUtilCollection:[self addAlgosDependentFromInsideWithJavaUtilArrayList:geoslocal withBoolean:putdown withBoolean:copyMacrosPresume]];
  JavaUtilArrayList *geoslocalsw = [self removeFreeNonselectedGeoNumericsWithJavaUtilArrayList:geoslocal withJavaUtilArrayList:geos];
  JavaUtilArrayList *geostohidesw = [self removeFreeNonselectedGeoNumericsWithJavaUtilArrayList:geostohide withJavaUtilArrayList:geos];
  OrgGeogebraCommonKernelKernel *kernel = [app getKernel];
  [self beforeSavingToXMLWithJavaUtilArrayList:geoslocal withJavaUtilArrayList:geostohide withBoolean:NO withBoolean:putdown];
  jboolean saveScriptsToXML = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getSaveScriptsToXML];
  if (!putdown) {
    [kernel setSaveScriptsToXMLWithBoolean:NO];
  }
  @try {
    copiedXML_ = new_JavaLangStringBuilder_init();
    OrgGeogebraCommonKernelAlgosConstructionElement *ce;
    OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction];
    for (jint i = 0; i < [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) steps]; ++i) {
      ce = [cons getConstructionElementWithInt:i];
      if ([geoslocal containsWithId:ce]) [((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getXMLWithBoolean:NO withJavaLangStringBuilder:copiedXML_];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    copiedXML_ = new_JavaLangStringBuilder_init();
  }
  if (!putdown) {
    [kernel setSaveScriptsToXMLWithBoolean:saveScriptsToXML];
  }
  [self afterSavingToXMLWithJavaUtilArrayList:geoslocal withJavaUtilArrayList:geostohide withBoolean:putdown];
  if (!putdown) {
    [self beforeSavingToXMLWithJavaUtilArrayList:geoslocalsw withJavaUtilArrayList:geostohidesw withBoolean:YES withBoolean:putdown];
    [kernel setSaveScriptsToXMLWithBoolean:NO];
    @try {
      copiedXMLforSameWindow_ = new_JavaLangStringBuilder_init();
      OrgGeogebraCommonKernelAlgosConstructionElement *ce;
      OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction];
      for (jint i = 0; i < [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) steps]; ++i) {
        ce = [cons getConstructionElementWithInt:i];
        if ([((JavaUtilArrayList *) nil_chk(geoslocalsw)) containsWithId:ce]) [((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getXMLWithBoolean:NO withJavaLangStringBuilder:copiedXMLforSameWindow_];
      }
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      copiedXMLforSameWindow_ = new_JavaLangStringBuilder_init();
    }
    [kernel setSaveScriptsToXMLWithBoolean:saveScriptsToXML];
    [self afterSavingToXMLWithJavaUtilArrayList:geoslocalsw withJavaUtilArrayList:geostohidesw withBoolean:putdown];
  }
  [app setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
  [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) setSelectionRectangleWithOrgGeogebraCommonAwtGRectangle:nil];
  [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
}

- (void)clearClipboard {
  copiedXML_ = nil;
  copiedXMLlabels_ = new_JavaUtilArrayList_init();
  copiedXMLforSameWindow_ = nil;
  copiedXMLlabelsforSameWindow_ = new_JavaUtilArrayList_init();
  copySource_ = nil;
  copyObject_ = nil;
  copyObject2_ = nil;
  copiedMacros_ = nil;
}

- (void)handleLabelsWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                           withJavaUtilArrayList:(JavaUtilArrayList *)labels
                                     withBoolean:(jboolean)putdown {
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel];
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  NSString *oldLabel;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(labels)) size]; i++) {
    NSString *ll = [labels getWithInt:i];
    geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) lookupLabelWithNSString:ll];
    if (geo != nil) {
      if ([app getActiveEuclidianView] == [app getEuclidianView1]) {
        [app addToEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        if ([app hasEuclidianView2WithInt:1]) {
          [geo removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
          [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([app getEuclidianView2WithInt:1])) removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        }
        if ([app getEuclidianView3D] != nil) {
          [geo removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
          [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([app getEuclidianView3D])) removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        }
      }
      else if ([app getActiveEuclidianView] == [app getEuclidianView3D]) {
        [app removeFromEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        if ([app getEuclidianView3D] != nil) {
          [geo addViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
          [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([app getEuclidianView3D])) addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        }
        if ([app hasEuclidianView2WithInt:1]) {
          [geo removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
          [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([app getEuclidianView2WithInt:1])) removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        }
      }
      else {
        [app removeFromEuclidianViewWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        [geo addViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
        [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([app getEuclidianView2WithInt:1])) addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        if ([app getEuclidianView3D] != nil) {
          [geo removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
          [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([app getEuclidianView3D])) removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        }
      }
      oldLabel = [geo getLabelSimple];
      [geo setLabelWithNSString:[geo getIndexLabelWithNSString:[((NSString *) nil_chk([geo getLabelSimple])) substring:((jint) [((NSString *) nil_chk(OrgGeogebraCommonUtilCopyPaste_labelPrefix_)) length])]]];
      if (putdown) {
        [((OrgGeogebraCommonKernelKernel *) nil_chk([geo getKernel])) renameLabelInScriptsWithNSString:oldLabel withNSString:[geo getLabelSimple]];
      }
      [((OrgGeogebraCommonMainSelectionManager *) nil_chk([app getSelectionManager])) addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      if ([geo getParentAlgorithm] != nil) {
        if ([((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getClassName])) isEqual:OrgGeogebraCommonKernelCommandsCommandsEnum_get_Sequence()]) {
          IOSObjectArray *pgeos = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (((IOSObjectArray *) nil_chk(pgeos))->size_ > 1 && ((jint) [((NSString *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, 1))) getLabelSimple])) length]) > ((jint) [OrgGeogebraCommonUtilCopyPaste_labelPrefix_ length])) if ([((NSString *) nil_chk([((NSString *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, 1))) getLabelSimple])) substring:0 endIndex:((jint) [OrgGeogebraCommonUtilCopyPaste_labelPrefix_ length])])) isEqual:OrgGeogebraCommonUtilCopyPaste_labelPrefix_]) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, 1))) setLabelSimpleWithNSString:[((NSString *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, 1))) getLabelSimple])) substring:((jint) [OrgGeogebraCommonUtilCopyPaste_labelPrefix_ length])]];
        }
      }
    }
  }
}

- (jboolean)pasteFastWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app)) getActiveEuclidianView] != copySource_) return NO;
  if (copyObject_ != copyObject2_) return NO;
  return YES;
}

- (void)pasteFromXMLWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                     withBoolean:(jboolean)putdown {
  if (copiedXML_ == nil) return;
  if ([((JavaLangStringBuilder *) nil_chk(copiedXML_)) length] == 0) return;
  if (![((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getActiveEuclidianView])) getEuclidianController])) mayPaste]) return;
  [((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) notifyPaste];
  copyObject2_ = [((OrgGeogebraCommonKernelUndoManager *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) getUndoManager])) getCurrentUndoInfo];
  if ([self pasteFastWithOrgGeogebraCommonMainApp:app] && !putdown) {
    if (copiedXMLforSameWindow_ == nil) return;
    if ([((JavaLangStringBuilder *) nil_chk(copiedXMLforSameWindow_)) length] == 0) return;
  }
  jboolean scriptsBlocked = [app isBlockUpdateScripts];
  [app setBlockUpdateScriptsWithBoolean:YES];
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) getEuclidianController])) clearSelectionsWithBoolean:YES withBoolean:NO];
  [app updateSelectionWithBoolean:NO];
  [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) getEuclidianController])) setPastePreviewSelected];
  if ([self pasteFastWithOrgGeogebraCommonMainApp:app] && !putdown) {
    id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [app getActiveEuclidianView];
    if (ev == [app getEuclidianView1]) {
      [((OrgGeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[((JavaLangStringBuilder *) nil_chk(copiedXMLforSameWindow_)) description]];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN];
    }
    else if (ev == [app getEuclidianView3D]) {
      [((OrgGeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[((JavaLangStringBuilder *) nil_chk(copiedXMLforSameWindow_)) description]];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
    }
    else {
      [((OrgGeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[((JavaLangStringBuilder *) nil_chk(copiedXMLforSameWindow_)) description]];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
    }
    [self handleLabelsWithOrgGeogebraCommonMainApp:app withJavaUtilArrayList:copiedXMLlabelsforSameWindow_ withBoolean:putdown];
  }
  else {
    if (![((JavaUtilHashSet *) nil_chk(copiedMacros_)) isEmpty]) {
      @try {
        [app addMacroXMLWithNSString:[((OrgGeogebraCommonIoMyXMLio *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(copySource_)) getApplication])) getXMLio])) getFullMacroXMLWithJavaUtilArrayList:new_JavaUtilArrayList_initWithJavaUtilCollection_(copiedMacros_)]];
      }
      @catch (JavaLangException *ex) {
        OrgGeogebraCommonMainApp_debugWithNSString_(@"Could not load any macros at \"Paste from XML\"");
        [((JavaLangException *) nil_chk(ex)) printStackTrace];
      }
    }
    id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [app getActiveEuclidianView];
    if (ev == [app getEuclidianView1]) {
      [((OrgGeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[copiedXML_ description]];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN];
    }
    else if (ev == [app getEuclidianView3D]) {
      [((OrgGeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[copiedXML_ description]];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
    }
    else {
      [((OrgGeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[copiedXML_ description]];
      [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
    }
    [self handleLabelsWithOrgGeogebraCommonMainApp:app withJavaUtilArrayList:copiedXMLlabels_ withBoolean:putdown];
  }
  [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
  if (!putdown) {
    [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) getEuclidianController])) setPastePreviewSelected];
  }
  [app setModeWithInt:OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([app getKernel])) notifyPasteComplete];
}

- (void)pastePutDownCallbackWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  if ([self pasteFastWithOrgGeogebraCommonMainApp:app]) {
    copyObject_ = [((OrgGeogebraCommonKernelUndoManager *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel])) getConstruction])) getUndoManager])) getCurrentUndoInfo];
    copyObject2_ = nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CopyPaste", NULL, 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "removeFixedSlidersWithJavaUtilArrayList:", "removeFixedSliders", "V", 0x4, NULL, NULL },
    { "removeDependentFromAxesWithJavaUtilArrayList:withOrgGeogebraCommonMainApp:", "removeDependentFromAxes", "V", 0x4, NULL, NULL },
    { "removeHavingMacroPredecessorsWithJavaUtilArrayList:withBoolean:", "removeHavingMacroPredecessors", "V", 0x4, NULL, NULL },
    { "addSubGeosWithJavaUtilArrayList:", "addSubGeos", "V", 0x4, NULL, NULL },
    { "addPredecessorGeosWithJavaUtilArrayList:", "addPredecessorGeos", "Ljava.util.ArrayList;", 0x4, NULL, NULL },
    { "addAlgosDependentFromInsideWithJavaUtilArrayList:withBoolean:withBoolean:", "addAlgosDependentFromInside", "Ljava.util.ArrayList;", 0x4, NULL, NULL },
    { "removeFreeNonselectedGeoNumericsWithJavaUtilArrayList:withJavaUtilArrayList:", "removeFreeNonselectedGeoNumerics", "Ljava.util.ArrayList;", 0x4, NULL, NULL },
    { "beforeSavingToXMLWithJavaUtilArrayList:withJavaUtilArrayList:withBoolean:withBoolean:", "beforeSavingToXML", "V", 0x4, NULL, NULL },
    { "afterSavingToXMLWithJavaUtilArrayList:withJavaUtilArrayList:withBoolean:", "afterSavingToXML", "V", 0x4, NULL, NULL },
    { "copyToXMLWithOrgGeogebraCommonMainApp:withJavaUtilArrayList:withBoolean:", "copyToXML", "V", 0x1, NULL, NULL },
    { "clearClipboard", NULL, "V", 0x1, NULL, NULL },
    { "handleLabelsWithOrgGeogebraCommonMainApp:withJavaUtilArrayList:withBoolean:", "handleLabels", "V", 0x4, NULL, NULL },
    { "pasteFastWithOrgGeogebraCommonMainApp:", "pasteFast", "Z", 0x1, NULL, NULL },
    { "pasteFromXMLWithOrgGeogebraCommonMainApp:withBoolean:", "pasteFromXML", "V", 0x1, NULL, NULL },
    { "pastePutDownCallbackWithOrgGeogebraCommonMainApp:", "pastePutDownCallback", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "labelPrefix_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonUtilCopyPaste_labelPrefix_, NULL,  },
    { "INSTANCE_", NULL, 0x9, "Lorg.geogebra.common.util.CopyPaste;", &OrgGeogebraCommonUtilCopyPaste_INSTANCE_, NULL,  },
    { "copiedMacros_", NULL, 0x4, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lorg/geogebra/common/kernel/Macro;>;",  },
    { "copiedXML_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "copiedXMLlabels_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "copiedXMLforSameWindow_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "copiedXMLlabelsforSameWindow_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "copySource_", NULL, 0x4, "Lorg.geogebra.common.euclidian.EuclidianViewInterfaceCommon;", NULL, NULL,  },
    { "copyObject_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
    { "copyObject2_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilCopyPaste = { 2, "CopyPaste", "org.geogebra.common.util", NULL, 0x1, 17, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonUtilCopyPaste;
}

@end

void OrgGeogebraCommonUtilCopyPaste_init(OrgGeogebraCommonUtilCopyPaste *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonUtilCopyPaste *new_OrgGeogebraCommonUtilCopyPaste_init() {
  OrgGeogebraCommonUtilCopyPaste *self = [OrgGeogebraCommonUtilCopyPaste alloc];
  OrgGeogebraCommonUtilCopyPaste_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilCopyPaste)
