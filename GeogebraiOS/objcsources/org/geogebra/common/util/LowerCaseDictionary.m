//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/util/LowerCaseDictionary.java
//


#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/util/Korean.h"
#include "org/geogebra/common/util/LowerCaseDictionary.h"
#include "org/geogebra/common/util/NormalizerMinimal.h"

#define OrgGeogebraCommonUtilLowerCaseDictionary_serialVersionUID 1LL

@interface OrgGeogebraCommonUtilLowerCaseDictionary () {
 @public
  JavaUtilTreeSet *treeSet_;
  OrgGeogebraCommonUtilNormalizerMinimal *normalizer_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilLowerCaseDictionary, treeSet_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilLowerCaseDictionary, normalizer_, OrgGeogebraCommonUtilNormalizerMinimal *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonUtilLowerCaseDictionary, serialVersionUID, jlong)

@implementation OrgGeogebraCommonUtilLowerCaseDictionary

- (instancetype)initWithOrgGeogebraCommonUtilNormalizerMinimal:(OrgGeogebraCommonUtilNormalizerMinimal *)normalizer {
  OrgGeogebraCommonUtilLowerCaseDictionary_initWithOrgGeogebraCommonUtilNormalizerMinimal_(self, normalizer);
  return self;
}

- (void)addEntryWithNSString:(NSString *)s {
  NSString *lowerCase = [((OrgGeogebraCommonUtilNormalizerMinimal *) nil_chk(normalizer_)) transformWithNSString:s];
  [self putWithId:lowerCase withId:s];
  [((JavaUtilTreeSet *) nil_chk(treeSet_)) addWithId:lowerCase];
}

- (jboolean)removeEntryWithNSString:(NSString *)s {
  NSString *lowerCase = [((NSString *) nil_chk(s)) lowercaseString];
  [self removeWithId:lowerCase];
  return [((JavaUtilTreeSet *) nil_chk(treeSet_)) removeWithId:lowerCase];
}

- (id<JavaUtilIterator>)getIterator {
  return [((JavaUtilTreeSet *) nil_chk(treeSet_)) iterator];
}

- (NSString *)lookupWithNSString:(NSString *)curr {
  if (curr == nil || [@"" isEqual:curr]) {
    return nil;
  }
  NSString *currLowerCase = [((NSString *) nil_chk(curr)) lowercaseString];
  @try {
    id<JavaUtilSortedSet> tailSet = [((JavaUtilTreeSet *) nil_chk(treeSet_)) tailSetWithId:currLowerCase];
    if (tailSet != nil) {
      NSString *firstObj = [tailSet first];
      if (firstObj != nil) {
        NSString *first = firstObj;
        if ([first hasPrefix:currLowerCase]) {
          NSString *ret = [self getWithId:first];
          return ret;
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    return nil;
  }
  return nil;
}

- (id<JavaUtilList>)getCompletionsWithNSString:(NSString *)curr {
  if (curr == nil || [@"" isEqual:curr]) return nil;
  NSString *currLowerCase = [((OrgGeogebraCommonUtilNormalizerMinimal *) nil_chk(normalizer_)) transformWithNSString:curr];
  @try {
    id<JavaUtilSortedSet> tailSet = [((JavaUtilTreeSet *) nil_chk(treeSet_)) tailSetWithId:currLowerCase];
    JavaUtilArrayList *completions = [new_JavaUtilArrayList_init() autorelease];
    id<JavaUtilIterator> compIter = [((id<JavaUtilSortedSet>) nil_chk(tailSet)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(compIter)) hasNext]) {
      NSString *comp = [compIter next];
      if (![((NSString *) nil_chk(comp)) hasPrefix:currLowerCase]) {
        break;
      }
      [completions addWithId:[self getWithId:comp]];
    }
    if ([completions isEmpty]) {
      return nil;
    }
    return completions;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (id<JavaUtilList>)getCompletionsKoreanWithNSString:(NSString *)curr {
  if (curr == nil || [@"" isEqual:curr]) {
    return nil;
  }
  JavaUtilArrayList *completions = [new_JavaUtilArrayList_init() autorelease];
  NSString *koreanCurr = OrgGeogebraCommonUtilKorean_flattenKoreanWithNSString_(curr);
  id<JavaUtilIterator> it = [self getIterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *str = [it next];
    if ([((NSString *) nil_chk(OrgGeogebraCommonUtilKorean_flattenKoreanWithNSString_(str))) hasPrefix:koreanCurr]) {
      [completions addWithId:[((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonUtilKorean_unflattenKoreanWithNSString_(str))) description]];
    }
  }
  return [completions isEmpty] ? nil : completions;
}

- (void)clear {
  [super clear];
  [((JavaUtilTreeSet *) nil_chk(self->treeSet_)) clear];
}

- (void)dealloc {
  RELEASE_(treeSet_);
  RELEASE_(normalizer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonUtilNormalizerMinimal:", "LowerCaseDictionary", NULL, 0x1, NULL, NULL },
    { "addEntryWithNSString:", "addEntry", "V", 0x1, NULL, NULL },
    { "removeEntryWithNSString:", "removeEntry", "Z", 0x1, NULL, NULL },
    { "getIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "lookupWithNSString:", "lookup", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCompletionsWithNSString:", "getCompletions", "Ljava.util.List;", 0x1, NULL, NULL },
    { "getCompletionsKoreanWithNSString:", "getCompletionsKorean", "Ljava.util.List;", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonUtilLowerCaseDictionary_serialVersionUID },
    { "treeSet_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
    { "normalizer_", NULL, 0x2, "Lorg.geogebra.common.util.NormalizerMinimal;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.String;", "Ljava.lang.String;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilLowerCaseDictionary = { 2, "LowerCaseDictionary", "org.geogebra.common.util", NULL, 0x1, 8, methods, 3, fields, 2, superclass_type_args, 0, NULL, NULL, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;Lorg/geogebra/common/util/AutoCompleteDictionary;" };
  return &_OrgGeogebraCommonUtilLowerCaseDictionary;
}

@end

void OrgGeogebraCommonUtilLowerCaseDictionary_initWithOrgGeogebraCommonUtilNormalizerMinimal_(OrgGeogebraCommonUtilLowerCaseDictionary *self, OrgGeogebraCommonUtilNormalizerMinimal *normalizer) {
  JavaUtilHashMap_init(self);
  OrgGeogebraCommonUtilLowerCaseDictionary_setAndConsume_treeSet_(self, new_JavaUtilTreeSet_init());
  OrgGeogebraCommonUtilLowerCaseDictionary_set_normalizer_(self, normalizer);
}

OrgGeogebraCommonUtilLowerCaseDictionary *new_OrgGeogebraCommonUtilLowerCaseDictionary_initWithOrgGeogebraCommonUtilNormalizerMinimal_(OrgGeogebraCommonUtilNormalizerMinimal *normalizer) {
  OrgGeogebraCommonUtilLowerCaseDictionary *self = [OrgGeogebraCommonUtilLowerCaseDictionary alloc];
  OrgGeogebraCommonUtilLowerCaseDictionary_initWithOrgGeogebraCommonUtilNormalizerMinimal_(self, normalizer);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilLowerCaseDictionary)
