//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/util/MyMathExact.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/geogebra/common/util/MyMathExact.h"

static id (*OrgGeogebraCommonUtilMyMathExact_MyDecimal_super$_setScaleWithInt_withInt_)(id, SEL, jint, jint);

@interface OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix () {
 @public
  jint fixedScale_;
  jint rowD_;
  jint colD_;
  IOSObjectArray *data_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix, data_, IOSObjectArray *)

@implementation OrgGeogebraCommonUtilMyMathExact

- (instancetype)init {
  OrgGeogebraCommonUtilMyMathExact_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.util.MyMathExact$MyDecimal;", "Lorg.geogebra.common.util.MyMathExact$MyDecimalMatrix;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilMyMathExact = { 2, "MyMathExact", "org.geogebra.common.util", NULL, 0x1, 1, methods, 0, NULL, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonUtilMyMathExact;
}

@end

void OrgGeogebraCommonUtilMyMathExact_init(OrgGeogebraCommonUtilMyMathExact *self) {
  NSObject_init(self);
}

OrgGeogebraCommonUtilMyMathExact *new_OrgGeogebraCommonUtilMyMathExact_init() {
  OrgGeogebraCommonUtilMyMathExact *self = [OrgGeogebraCommonUtilMyMathExact alloc];
  OrgGeogebraCommonUtilMyMathExact_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilMyMathExact)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonUtilMyMathExact_MyDecimal)

@implementation OrgGeogebraCommonUtilMyMathExact_MyDecimal

- (instancetype)initWithInt:(jint)significance {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_(self, significance);
  return self;
}

- (instancetype)initWithInt:(jint)significance
                 withDouble:(jdouble)val {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withDouble_(self, significance, val);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:(OrgGeogebraCommonUtilMyMathExact_MyDecimal *)md {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithOrgGeogebraCommonUtilMyMathExact_MyDecimal_(self, md);
  return self;
}

- (instancetype)initWithJavaMathBigDecimal:(JavaMathBigDecimal *)bd {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithJavaMathBigDecimal_(self, bd);
  return self;
}

- (instancetype)initWithInt:(jint)significance
     withJavaMathBigDecimal:(JavaMathBigDecimal *)bd {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_(self, significance, bd);
  return self;
}

- (jint)getScale {
  return fixedScale_;
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)copy__ {
  return [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_([self getScale], self) autorelease];
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)negate {
  return [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_([self getScale], [super negate]) autorelease];
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)addWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:(OrgGeogebraCommonUtilMyMathExact_MyDecimal *)md {
  return [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_([self getScale], [super addWithJavaMathBigDecimal:md]) autorelease];
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)multiplyWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:(OrgGeogebraCommonUtilMyMathExact_MyDecimal *)md {
  return [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_([self getScale], [super multiplyWithJavaMathBigDecimal:md]) autorelease];
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)subtractWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:(OrgGeogebraCommonUtilMyMathExact_MyDecimal *)md {
  return [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_([self getScale], [super subtractWithJavaMathBigDecimal:md]) autorelease];
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)divideWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:(OrgGeogebraCommonUtilMyMathExact_MyDecimal *)md {
  return [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_([self getScale], [super divideWithJavaMathBigDecimal:md withInt:[self getScale] withInt:JavaMathBigDecimal_ROUND_HALF_EVEN]) autorelease];
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)sqrt {
  if ([self isEqual:JavaMathBigDecimal_get_ZERO_()]) {
    return [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithJavaMathBigDecimal_(JavaMathBigDecimal_get_ZERO_()) autorelease];
  }
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *TWO = [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(JavaMathBigDecimal_get_ONE_())) addWithJavaMathBigDecimal:JavaMathBigDecimal_get_ONE_()]) autorelease];
  jdouble lower_bound = JavaLangMath_sqrtWithDouble_([self doubleValue]);
  jint thisScale = [self getScale];
  jint thisScalePlusOne = thisScale + 1;
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *ret = [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withDouble_(thisScalePlusOne, lower_bound) autorelease];
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *radicand = [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_(thisScalePlusOne, self) autorelease];
  jint iterCount = 0;
  while ([((JavaMathBigDecimal *) nil_chk([((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk([((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk([((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk([((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk([ret multiplyWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:ret])) subtractWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:radicand])) divideWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:radicand])) divideWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:[new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withDouble_(thisScalePlusOne, lower_bound * 2) autorelease]])) abs])) doubleValue] > JavaLangMath_powWithDouble_withDouble_(10, -thisScale) && iterCount < 5) {
    ret = [((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk([ret addWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:[radicand divideWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:ret]])) divideWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:TWO];
    iterCount++;
  }
  return [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_(thisScale, ret) autorelease];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonUtilMyMathExact_MyDecimal class]) {
    OrgGeogebraCommonUtilMyMathExact_MyDecimal_super$_setScaleWithInt_withInt_ = (id (*)(id, SEL, jint, jint))[JavaMathBigDecimal instanceMethodForSelector:@selector(setScaleWithInt:withInt:)];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonUtilMyMathExact_MyDecimal)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "MyDecimal", NULL, 0x1, NULL, NULL },
    { "initWithInt:withDouble:", "MyDecimal", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:", "MyDecimal", NULL, 0x1, NULL, NULL },
    { "initWithJavaMathBigDecimal:", "MyDecimal", NULL, 0x1, NULL, NULL },
    { "initWithInt:withJavaMathBigDecimal:", "MyDecimal", NULL, 0x1, NULL, NULL },
    { "getScale", NULL, "I", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "negate", NULL, "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:", "add", "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:", "multiply", "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "subtractWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:", "subtract", "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "divideWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:", "divide", "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "sqrt", NULL, "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fixedScale_", NULL, 0x0, "I", NULL, NULL,  },
    { "roundingMode_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilMyMathExact_MyDecimal = { 2, "MyDecimal", "org.geogebra.common.util", "MyMathExact", 0x9, 13, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonUtilMyMathExact_MyDecimal;
}

@end

void OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_(OrgGeogebraCommonUtilMyMathExact_MyDecimal *self, jint significance) {
  JavaMathBigDecimal_initWithInt_(self, 0);
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_EVEN;
  [self setScaleWithInt:significance];
  self->fixedScale_ = significance;
}

OrgGeogebraCommonUtilMyMathExact_MyDecimal *new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_(jint significance) {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *self = [OrgGeogebraCommonUtilMyMathExact_MyDecimal alloc];
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_(self, significance);
  return self;
}

void OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withDouble_(OrgGeogebraCommonUtilMyMathExact_MyDecimal *self, jint significance, jdouble val) {
  JavaMathBigDecimal_initWithDouble_(self, val);
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_EVEN;
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_super$_setScaleWithInt_withInt_(self, @selector(setScaleWithInt:withInt:), significance, self->roundingMode_);
  self->fixedScale_ = significance;
}

OrgGeogebraCommonUtilMyMathExact_MyDecimal *new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withDouble_(jint significance, jdouble val) {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *self = [OrgGeogebraCommonUtilMyMathExact_MyDecimal alloc];
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withDouble_(self, significance, val);
  return self;
}

void OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithOrgGeogebraCommonUtilMyMathExact_MyDecimal_(OrgGeogebraCommonUtilMyMathExact_MyDecimal *self, OrgGeogebraCommonUtilMyMathExact_MyDecimal *md) {
  JavaMathBigDecimal_initWithJavaMathBigInteger_withInt_(self, [((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk(md)) unscaledValue], [md scale__]);
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_EVEN;
  self->fixedScale_ = [md scale__];
}

OrgGeogebraCommonUtilMyMathExact_MyDecimal *new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithOrgGeogebraCommonUtilMyMathExact_MyDecimal_(OrgGeogebraCommonUtilMyMathExact_MyDecimal *md) {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *self = [OrgGeogebraCommonUtilMyMathExact_MyDecimal alloc];
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithOrgGeogebraCommonUtilMyMathExact_MyDecimal_(self, md);
  return self;
}

void OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithJavaMathBigDecimal_(OrgGeogebraCommonUtilMyMathExact_MyDecimal *self, JavaMathBigDecimal *bd) {
  JavaMathBigDecimal_initWithJavaMathBigInteger_withInt_(self, [((JavaMathBigDecimal *) nil_chk(bd)) unscaledValue], [bd scale__]);
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_EVEN;
  self->fixedScale_ = [bd scale__];
}

OrgGeogebraCommonUtilMyMathExact_MyDecimal *new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithJavaMathBigDecimal_(JavaMathBigDecimal *bd) {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *self = [OrgGeogebraCommonUtilMyMathExact_MyDecimal alloc];
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithJavaMathBigDecimal_(self, bd);
  return self;
}

void OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_(OrgGeogebraCommonUtilMyMathExact_MyDecimal *self, jint significance, JavaMathBigDecimal *bd) {
  JavaMathBigDecimal_initWithJavaMathBigInteger_withInt_(self, [((JavaMathBigDecimal *) nil_chk(bd)) unscaledValue], [bd scale__]);
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_EVEN;
  [self setScaleWithInt:significance withInt:self->roundingMode_];
  self->fixedScale_ = significance;
}

OrgGeogebraCommonUtilMyMathExact_MyDecimal *new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_(jint significance, JavaMathBigDecimal *bd) {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *self = [OrgGeogebraCommonUtilMyMathExact_MyDecimal alloc];
  OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_(self, significance, bd);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilMyMathExact_MyDecimal)

@implementation OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix

- (instancetype)initWithInt:(jint)significance
                    withInt:(jint)rowD
                    withInt:(jint)colD {
  OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix_initWithInt_withInt_withInt_(self, significance, rowD, colD);
  return self;
}

- (jboolean)isSquare {
  return rowD_ == colD_;
}

- (jint)getRowDimension {
  return rowD_;
}

- (jint)getColumnDimension {
  return colD_;
}

- (jint)getScale {
  return self->fixedScale_;
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)getEntryWithInt:(jint)i
                                                        withInt:(jint)j {
  return [((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), j))) copy__];
}

- (void)setEntryWithInt:(jint)i
                withInt:(jint)j
withOrgGeogebraCommonUtilMyMathExact_MyDecimal:(OrgGeogebraCommonUtilMyMathExact_MyDecimal *)md {
  IOSObjectArray_SetAndConsume(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), j, new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withJavaMathBigDecimal_(fixedScale_, md));
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *)copy__ {
  OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *mdm = [new_OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix_initWithInt_withInt_withInt_(fixedScale_, rowD_, colD_) autorelease];
  for (jint i = 0; i < rowD_; i++) {
    for (jint j = 0; j < colD_; j++) {
      [mdm setEntryWithInt:i withInt:j withOrgGeogebraCommonUtilMyMathExact_MyDecimal:[self getEntryWithInt:i withInt:j]];
    }
  }
  return mdm;
}

- (IOSObjectArray *)getColumnWithInt:(jint)j {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[self getRowDimension] type:OrgGeogebraCommonUtilMyMathExact_MyDecimal_class_()];
  for (jint i = 0; i < [self getRowDimension]; i++) {
    IOSObjectArray_Set(ret, i, [self getEntryWithInt:i withInt:j]);
  }
  return ret;
}

- (void)setColumnWithInt:(jint)j
withOrgGeogebraCommonUtilMyMathExact_MyDecimalArray:(IOSObjectArray *)column {
  for (jint i = 0; i < [self getRowDimension]; i++) {
    [self setEntryWithInt:i withInt:j withOrgGeogebraCommonUtilMyMathExact_MyDecimal:IOSObjectArray_Get(nil_chk(column), i)];
  }
}

- (IOSObjectArray *)getRowWithInt:(jint)i {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[self getColumnDimension] type:OrgGeogebraCommonUtilMyMathExact_MyDecimal_class_()];
  for (jint j = 0; j < [self getColumnDimension]; j++) {
    IOSObjectArray_Set(ret, j, [self getEntryWithInt:i withInt:j]);
  }
  return ret;
}

- (void)setRowWithInt:(jint)i
withOrgGeogebraCommonUtilMyMathExact_MyDecimalArray:(IOSObjectArray *)row {
  for (jint j = 0; j < [self getColumnDimension]; j++) {
    [self setEntryWithInt:i withInt:j withOrgGeogebraCommonUtilMyMathExact_MyDecimal:IOSObjectArray_Get(nil_chk(row), j)];
  }
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimal *)frobNormSqWithOrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix:(OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *)matrix
                                                                                                       withInt:(jint)m
                                                                                                       withInt:(jint)n {
  OrgGeogebraCommonUtilMyMathExact_MyDecimal *ret = [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithJavaMathBigDecimal_(JavaMathBigDecimal_get_ZERO_()) autorelease];
  if (m == 0 || n == 0) return ret;
  for (jint i = 0; i < m; i++) for (jint j = 0; j < n; j++) ret = [ret addWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:[((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk([((OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *) nil_chk(matrix)) getEntryWithInt:i withInt:j])) multiplyWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:[matrix getEntryWithInt:i withInt:j]]];
  return ret;
}

- (OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *)multiplyWithOrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix:(OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *)m {
  if ([self getColumnDimension] != [((OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *) nil_chk(m)) getRowDimension]) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithNSString_withNSObjectArray_(JreStrcat("$I$I$I$I$", @"Cannot multiply ", [self getRowDimension], @" x ", [self getColumnDimension], @" and ", [m getRowDimension], @" x ", [m getColumnDimension], @"matrices!"), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *ret = [new_OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix_initWithInt_withInt_withInt_([self getScale], [self getRowDimension], [m getColumnDimension]) autorelease];
  for (jint i = 0; i < [self getRowDimension]; i++) {
    for (jint j = 0; j < [m getColumnDimension]; j++) {
      OrgGeogebraCommonUtilMyMathExact_MyDecimal *entry_ = [new_OrgGeogebraCommonUtilMyMathExact_MyDecimal_initWithInt_withDouble_(self->fixedScale_, 0) autorelease];
      for (jint k = 0; k < [self getColumnDimension]; k++) {
        entry_ = [entry_ addWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:[((OrgGeogebraCommonUtilMyMathExact_MyDecimal *) nil_chk([self getEntryWithInt:i withInt:k])) multiplyWithOrgGeogebraCommonUtilMyMathExact_MyDecimal:[m getEntryWithInt:k withInt:j]]];
      }
      [ret setEntryWithInt:i withInt:j withOrgGeogebraCommonUtilMyMathExact_MyDecimal:entry_];
    }
  }
  return ret;
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:", "MyDecimalMatrix", NULL, 0x1, NULL, NULL },
    { "isSquare", NULL, "Z", 0x1, NULL, NULL },
    { "getRowDimension", NULL, "I", 0x1, NULL, NULL },
    { "getColumnDimension", NULL, "I", 0x1, NULL, NULL },
    { "getScale", NULL, "I", 0x1, NULL, NULL },
    { "getEntryWithInt:withInt:", "getEntry", "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "setEntryWithInt:withInt:withOrgGeogebraCommonUtilMyMathExact_MyDecimal:", "setEntry", "V", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.util.MyMathExact$MyDecimalMatrix;", 0x1, NULL, NULL },
    { "getColumnWithInt:", "getColumn", "[Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "setColumnWithInt:withOrgGeogebraCommonUtilMyMathExact_MyDecimalArray:", "setColumn", "V", 0x1, NULL, NULL },
    { "getRowWithInt:", "getRow", "[Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "setRowWithInt:withOrgGeogebraCommonUtilMyMathExact_MyDecimalArray:", "setRow", "V", 0x1, NULL, NULL },
    { "frobNormSqWithOrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix:withInt:withInt:", "frobNormSq", "Lorg.geogebra.common.util.MyMathExact$MyDecimal;", 0x1, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix:", "multiply", "Lorg.geogebra.common.util.MyMathExact$MyDecimalMatrix;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fixedScale_", NULL, 0x2, "I", NULL, NULL,  },
    { "rowD_", NULL, 0x2, "I", NULL, NULL,  },
    { "colD_", NULL, 0x2, "I", NULL, NULL,  },
    { "data_", NULL, 0x2, "[[Lorg.geogebra.common.util.MyMathExact$MyDecimal;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix = { 2, "MyDecimalMatrix", "org.geogebra.common.util", "MyMathExact", 0x9, 14, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix;
}

@end

void OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix_initWithInt_withInt_withInt_(OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *self, jint significance, jint rowD, jint colD) {
  NSObject_init(self);
  self->fixedScale_ = significance;
  self->rowD_ = rowD;
  self->colD_ = colD;
  OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix_setAndConsume_data_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ rowD, colD } type:OrgGeogebraCommonUtilMyMathExact_MyDecimal_class_()]);
}

OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *new_OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix_initWithInt_withInt_withInt_(jint significance, jint rowD, jint colD) {
  OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix *self = [OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix alloc];
  OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix_initWithInt_withInt_withInt_(self, significance, rowD, colD);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilMyMathExact_MyDecimalMatrix)
