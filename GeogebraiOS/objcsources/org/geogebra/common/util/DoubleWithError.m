//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/util/DoubleWithError.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/util/DoubleWithError.h"

@interface OrgGeogebraCommonUtilDoubleWithError () {
 @public
  jdouble value_;
  jdouble error_;
  jboolean asymmetricError_;
  jdouble minError_;
}

@end

@implementation OrgGeogebraCommonUtilDoubleWithError

- (instancetype)initWithDouble:(jdouble)value
                    withDouble:(jdouble)error {
  OrgGeogebraCommonUtilDoubleWithError_initWithDouble_withDouble_(self, value, error);
  return self;
}

- (instancetype)initWithDouble:(jdouble)value
                    withDouble:(jdouble)plusError
                    withDouble:(jdouble)minError {
  OrgGeogebraCommonUtilDoubleWithError_initWithDouble_withDouble_withDouble_(self, value, plusError, minError);
  return self;
}

- (void)setErrorWithDouble:(jdouble)error {
  self->error_ = error;
  self->asymmetricError_ = NO;
}

- (void)setErrorWithDouble:(jdouble)plusError
                withDouble:(jdouble)minError {
  self->error_ = plusError;
  self->minError_ = minError;
  self->asymmetricError_ = YES;
}

- (jdouble)getError {
  return error_;
}

- (jdouble)getPlusError {
  return error_;
}

- (jdouble)getMinError {
  return (asymmetricError_) ? minError_ : error_;
}

- (jboolean)hasAsymmetricError {
  return asymmetricError_;
}

- (void)setValueWithDouble:(jdouble)value {
  self->value_ = value;
}

- (jdouble)getValue {
  return value_;
}

- (NSString *)description {
  if (asymmetricError_) {
    return JreStrcat("$CDCD", NSString_valueOfDouble_(value_), OrgGeogebraCommonUtilDoubleWithError_plus, error_, OrgGeogebraCommonUtilDoubleWithError_minus, minError_);
  }
  return JreStrcat("$CD", NSString_valueOfDouble_(value_), OrgGeogebraCommonUtilDoubleWithError_plusorminus, error_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:", "DoubleWithError", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDouble:", "DoubleWithError", NULL, 0x1, NULL, NULL },
    { "setErrorWithDouble:", "setError", "V", 0x1, NULL, NULL },
    { "setErrorWithDouble:withDouble:", "setError", "V", 0x1, NULL, NULL },
    { "getError", NULL, "D", 0x1, NULL, NULL },
    { "getPlusError", NULL, "D", 0x1, NULL, NULL },
    { "getMinError", NULL, "D", 0x1, NULL, NULL },
    { "hasAsymmetricError", NULL, "Z", 0x1, NULL, NULL },
    { "setValueWithDouble:", "setValue", "V", 0x1, NULL, NULL },
    { "getValue", NULL, "D", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plusorminus_", NULL, 0x19, "C", NULL, NULL, .constantValue.asUnichar = OrgGeogebraCommonUtilDoubleWithError_plusorminus },
    { "plus_", NULL, 0x19, "C", NULL, NULL, .constantValue.asUnichar = OrgGeogebraCommonUtilDoubleWithError_plus },
    { "minus_", NULL, 0x19, "C", NULL, NULL, .constantValue.asUnichar = OrgGeogebraCommonUtilDoubleWithError_minus },
    { "value_", NULL, 0x2, "D", NULL, NULL,  },
    { "error_", NULL, 0x2, "D", NULL, NULL,  },
    { "asymmetricError_", NULL, 0x2, "Z", NULL, NULL,  },
    { "minError_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonUtilDoubleWithError = { 2, "DoubleWithError", "org.geogebra.common.util", NULL, 0x1, 11, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonUtilDoubleWithError;
}

@end

void OrgGeogebraCommonUtilDoubleWithError_initWithDouble_withDouble_(OrgGeogebraCommonUtilDoubleWithError *self, jdouble value, jdouble error) {
  (void) NSObject_init(self);
  self->value_ = value;
  self->error_ = error;
  self->asymmetricError_ = NO;
}

OrgGeogebraCommonUtilDoubleWithError *new_OrgGeogebraCommonUtilDoubleWithError_initWithDouble_withDouble_(jdouble value, jdouble error) {
  OrgGeogebraCommonUtilDoubleWithError *self = [OrgGeogebraCommonUtilDoubleWithError alloc];
  OrgGeogebraCommonUtilDoubleWithError_initWithDouble_withDouble_(self, value, error);
  return self;
}

void OrgGeogebraCommonUtilDoubleWithError_initWithDouble_withDouble_withDouble_(OrgGeogebraCommonUtilDoubleWithError *self, jdouble value, jdouble plusError, jdouble minError) {
  (void) NSObject_init(self);
  self->value_ = value;
  self->error_ = plusError;
  self->minError_ = minError;
  self->asymmetricError_ = YES;
}

OrgGeogebraCommonUtilDoubleWithError *new_OrgGeogebraCommonUtilDoubleWithError_initWithDouble_withDouble_withDouble_(jdouble value, jdouble plusError, jdouble minError) {
  OrgGeogebraCommonUtilDoubleWithError *self = [OrgGeogebraCommonUtilDoubleWithError alloc];
  OrgGeogebraCommonUtilDoubleWithError_initWithDouble_withDouble_withDouble_(self, value, plusError, minError);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonUtilDoubleWithError)
