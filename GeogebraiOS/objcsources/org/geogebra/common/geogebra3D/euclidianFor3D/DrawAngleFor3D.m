//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidianFor3D/DrawAngleFor3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/geogebra3D/euclidianFor3D/DrawAngleFor3D.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoAngle.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view
                        withOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)angle {
  OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
  return self;
}

- (jboolean)inViewWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)point {
  return OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) getZ]);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsInViewWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)point {
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:point];
}

- (jdouble)getAngleStartWithDouble:(jdouble)start
                        withDouble:(jdouble)extent {
  if ([((OrgGeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCompanion])) goToZPlusWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelAlgosAlgoAngle *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoAngle *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getDrawAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoAngle class])))) getVn]]) {
    return [super getAngleStartWithDouble:start withDouble:extent];
  }
  return start - extent;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:withOrgGeogebraCommonKernelGeosGeoAngle:", "DrawAngleFor3D", NULL, 0x1, NULL, NULL },
    { "inViewWithOrgGeogebraCommonKernelMatrixCoords:", "inView", "Z", 0x1, NULL, NULL },
    { "getCoordsInViewWithOrgGeogebraCommonKernelMatrixCoords:", "getCoordsInView", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getAngleStartWithDouble:withDouble:", "getAngleStart", "D", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D = { 2, "DrawAngleFor3D", "org.geogebra.common.geogebra3D.euclidianFor3D", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D *self, OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoAngle *angle) {
  OrgGeogebraCommonEuclidianDrawDrawAngle_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
}

OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D *new_OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(OrgGeogebraCommonEuclidianEuclidianView *view, OrgGeogebraCommonKernelGeosGeoAngle *angle) {
  OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D *self = [OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D)
