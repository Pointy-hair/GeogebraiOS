//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidianFor3D/EuclidianViewFor3DCompanion.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/euclidian/draw/DrawParametricCurve.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/geogebra3D/euclidianFor3D/CurveEvaluableFor3D.h"
#include "org/geogebra/common/geogebra3D/euclidianFor3D/DrawAngleFor3D.h"
#include "org/geogebra/common/geogebra3D/euclidianFor3D/EuclidianViewFor3DCompanion.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

- (OrgGeogebraCommonEuclidianDrawableND *)newDrawableWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianDrawableND *d = [super newDrawableWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if (d != nil) {
    return d;
  }
  switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_ANGLE3D:
    d = [new_OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(view_, (OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoAngle class])) autorelease];
    break;
    case OrgGeogebraCommonPluginGeoClass_CURVE_CARTESIAN3D:
    d = [new_OrgGeogebraCommonEuclidianDrawDrawParametricCurve_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(view_, [new_OrgGeogebraCommonGeogebra3DEuclidianFor3DCurveEvaluableFor3D_initWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class])) autorelease]) autorelease];
    break;
  }
  return d;
}

- (id<OrgGeogebraCommonAwtGAffineTransform>)getTransformWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic
                                                              withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)M
                                                         withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)ev {
  id<OrgGeogebraCommonAwtGAffineTransform> transform = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(transform)) setTransformWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(ev), 0))) getX] withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev, 0))) getY] withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev, 1))) getX] withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev, 1))) getY] withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(M)) getX] withDouble:[M getY]];
  return transform;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsForViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  return [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3]];
}

- (void)getXMLidWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  [self getXMLidNoCheckWithJavaLangStringBuilder:sbxml];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:", "EuclidianViewFor3DCompanion", NULL, 0x1, NULL, NULL },
    { "newDrawableWithOrgGeogebraCommonKernelGeosGeoElement:", "newDrawable", "Lorg.geogebra.common.euclidian.DrawableND;", 0x1, NULL, NULL },
    { "getTransformWithOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoordsArray:", "getTransform", "Lorg.geogebra.common.awt.GAffineTransform;", 0x1, NULL, NULL },
    { "getCoordsForViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "getCoordsForView", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getXMLidWithJavaLangStringBuilder:", "getXMLid", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion = { 2, "EuclidianViewFor3DCompanion", "org.geogebra.common.geogebra3D.euclidianFor3D", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion *self, OrgGeogebraCommonEuclidianEuclidianView *view) {
  OrgGeogebraCommonEuclidianEuclidianViewCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(self, view);
}

OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion *new_OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonEuclidianEuclidianView *view) {
  OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion *self = [OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion alloc];
  OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion)
