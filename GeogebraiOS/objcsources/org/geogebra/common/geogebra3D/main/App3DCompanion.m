//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/main/App3DCompanion.java
//


#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "org/geogebra/common/geogebra3D/main/App3DCompanion.h"
#include "org/geogebra/common/geogebra3D/main/settings/EuclidianSettingsForPlane.h"
#include "org/geogebra/common/gui/layout/DockPanel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/commands/CommandsConstants.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/ViewCreator.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/AppCompanion.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"

@interface OrgGeogebraCommonGeogebra3DMainApp3DCompanion () {
 @public
  OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *euclidianViewForPlaneCompanion_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DMainApp3DCompanion, euclidianViewForPlaneCompanion_, OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *)

@implementation OrgGeogebraCommonGeogebra3DMainApp3DCompanion

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonGeogebra3DMainApp3DCompanion_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (OrgGeogebraCommonKernelKernel *)newKernel {
  return [new_OrgGeogebraCommonGeogebra3DKernel3DKernel3D_initWithOrgGeogebraCommonMainApp_(app_) autorelease];
}

- (jboolean)tableVisibleWithInt:(jint)table {
  return !(table == OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_CAS || table == OrgGeogebraCommonKernelCommandsCommandsConstants_TABLE_ENGLISH);
}

- (void)addCompleteUserInterfaceXMLForPlaneWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                         withBoolean:(jboolean)asPreference {
  if (euclidianViewForPlaneCompanionList_ != nil) {
    for (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion * __strong vfpc in euclidianViewForPlaneCompanionList_) {
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(vfpc)) getView])) getXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
    }
  }
}

- (void)getEuclidianViewXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                         withBoolean:(jboolean)asPreference {
  [super getEuclidianViewXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isEuclidianView3Dinited]) {
    [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([app_ getEuclidianView3D])) getXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
  }
  if (euclidianViewForPlaneCompanionList_ != nil) for (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion * __strong vfpc in euclidianViewForPlaneCompanionList_) [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(vfpc)) getView])) getXMLWithJavaLangStringBuilder:sb withBoolean:asPreference];
}

- (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *)createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:(id<OrgGeogebraCommonKernelKernelNDViewCreator>)plane
                                                                                                       withOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)evSettings
                                                                                                                                              withBoolean:(jboolean)panelSettings {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *)createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:(id<OrgGeogebraCommonKernelKernelNDViewCreator>)plane
                                                                                                                                              withBoolean:(jboolean)panelSettings {
  OrgGeogebraCommonMainSettingsSettings *settings = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSettings];
  NSString *name = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelSimple];
  OrgGeogebraCommonMainSettingsEuclidianSettings *evSettings = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk(settings)) getEuclidianForPlaneWithNSString:name];
  if (evSettings == nil) {
    evSettings = [new_OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_initWithOrgGeogebraCommonMainSettingsEuclidianSettings_([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([app_ getEuclidianView1])) getSettings]) autorelease];
    [evSettings setShowGridSettingWithBoolean:NO];
    [evSettings setShowAxesWithBoolean:NO withBoolean:NO];
    [settings setEuclidianSettingsForPlaneWithNSString:name withOrgGeogebraCommonMainSettingsEuclidianSettings:evSettings];
  }
  OrgGeogebraCommonGeogebra3DMainApp3DCompanion_set_euclidianViewForPlaneCompanion_(self, [self createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:plane withOrgGeogebraCommonMainSettingsEuclidianSettings:evSettings withBoolean:panelSettings]);
  [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evSettings)) addListenerWithOrgGeogebraCommonMainSettingsSettingListener:[((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlaneCompanion_)) getView]];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([euclidianViewForPlaneCompanion_ getView])) updateFonts];
  [euclidianViewForPlaneCompanion_ addExistingGeos];
  if (euclidianViewForPlaneCompanionList_ == nil) OrgGeogebraCommonGeogebra3DMainApp3DCompanion_setAndConsume_euclidianViewForPlaneCompanionList_(self, new_JavaUtilArrayList_init());
  [((JavaUtilArrayList *) nil_chk(euclidianViewForPlaneCompanionList_)) addWithId:euclidianViewForPlaneCompanion_];
  return euclidianViewForPlaneCompanion_;
}

- (void)resetFonts {
  [super resetFonts];
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil && [app_ showViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D]) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(((OrgGeogebraCommonEuclidianEuclidianView *) check_class_cast([app_ getEuclidianView3D], [OrgGeogebraCommonEuclidianEuclidianView class])))) updateFonts];
  }
  if (euclidianViewForPlaneCompanion_ != nil) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([euclidianViewForPlaneCompanion_ getView])) updateFonts];
  }
}

- (void)removeEuclidianViewForPlaneFromListWithOrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion:(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *)vfpc {
  [((JavaUtilArrayList *) nil_chk(euclidianViewForPlaneCompanionList_)) removeWithId:vfpc];
  [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSettings])) removeEuclidianSettingsForPlaneWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(vfpc)) getPlane], [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelSimple]];
}

- (void)removeAllEuclidianViewForPlane {
  if (euclidianViewForPlaneCompanionList_ == nil) return;
  for (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion * __strong vfpc in nil_chk(euclidianViewForPlaneCompanionList_)) [((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(vfpc)) removeFromGuiAndKernel];
  [euclidianViewForPlaneCompanionList_ clear];
  [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSettings])) clearEuclidianSettingsForPlane];
}

- (id<OrgGeogebraCommonGuiLayoutDockPanel>)createEuclidianDockPanelForPlaneWithInt:(jint)id_
                                                                      withNSString:(NSString *)plane {
  OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getKernel])) lookupLabelWithNSString:plane];
  if (geo == nil) return nil;
  if (!([OrgGeogebraCommonKernelKernelNDViewCreator_class_() isInstance:geo])) return nil;
  id<OrgGeogebraCommonKernelKernelNDViewCreator> vc = (id<OrgGeogebraCommonKernelKernelNDViewCreator>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDViewCreator));
  [((id<OrgGeogebraCommonKernelKernelNDViewCreator>) nil_chk(vc)) setEuclidianViewForPlaneWithOrgGeogebraCommonEuclidianEuclidianViewCompanion:[self createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:vc withBoolean:NO]];
  return [self getPanelForPlane];
}

- (id<OrgGeogebraCommonGuiLayoutDockPanel>)getPanelForPlane {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonMainSettingsSettings *)newSettings {
  return [new_OrgGeogebraCommonMainSettingsSettings_initWithInt_(3) autorelease];
}

- (jboolean)hasEuclidianViewForPlane {
  return euclidianViewForPlaneCompanionList_ != nil && [euclidianViewForPlaneCompanionList_ size] > 0;
}

- (void)addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (euclidianViewForPlaneCompanionList_ == nil) {
    return;
  }
  for (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion * __strong c in nil_chk(euclidianViewForPlaneCompanionList_)) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(c)) getView])) addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (euclidianViewForPlaneCompanionList_ == nil) {
    return;
  }
  for (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion * __strong c in nil_chk(euclidianViewForPlaneCompanionList_)) {
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(c)) getView])) removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)dealloc {
  RELEASE_(euclidianViewForPlaneCompanionList_);
  RELEASE_(euclidianViewForPlaneCompanion_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "App3DCompanion", NULL, 0x1, NULL, NULL },
    { "newKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "tableVisibleWithInt:", "tableVisible", "Z", 0x4, NULL, NULL },
    { "addCompleteUserInterfaceXMLForPlaneWithJavaLangStringBuilder:withBoolean:", "addCompleteUserInterfaceXMLForPlane", "V", 0x1, NULL, NULL },
    { "getEuclidianViewXMLWithJavaLangStringBuilder:withBoolean:", "getEuclidianViewXML", "V", 0x1, NULL, NULL },
    { "createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:withOrgGeogebraCommonMainSettingsEuclidianSettings:withBoolean:", "createEuclidianViewForPlane", "Lorg.geogebra.common.geogebra3D.euclidianForPlane.EuclidianViewForPlaneCompanion;", 0x404, NULL, NULL },
    { "createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:withBoolean:", "createEuclidianViewForPlane", "Lorg.geogebra.common.geogebra3D.euclidianForPlane.EuclidianViewForPlaneCompanion;", 0x1, NULL, NULL },
    { "resetFonts", NULL, "V", 0x1, NULL, NULL },
    { "removeEuclidianViewForPlaneFromListWithOrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion:", "removeEuclidianViewForPlaneFromList", "V", 0x1, NULL, NULL },
    { "removeAllEuclidianViewForPlane", NULL, "V", 0x1, NULL, NULL },
    { "createEuclidianDockPanelForPlaneWithInt:withNSString:", "createEuclidianDockPanelForPlane", "Lorg.geogebra.common.gui.layout.DockPanel;", 0x1, NULL, NULL },
    { "getPanelForPlane", NULL, "Lorg.geogebra.common.gui.layout.DockPanel;", 0x401, NULL, NULL },
    { "newSettings", NULL, "Lorg.geogebra.common.main.settings.Settings;", 0x1, NULL, NULL },
    { "hasEuclidianViewForPlane", NULL, "Z", 0x1, NULL, NULL },
    { "addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:", "addToViewsForPlane", "V", 0x1, NULL, NULL },
    { "removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:", "removeFromViewsForPlane", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "euclidianViewForPlaneCompanionList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion;>;",  },
    { "euclidianViewForPlaneCompanion_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.euclidianForPlane.EuclidianViewForPlaneCompanion;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DMainApp3DCompanion = { 2, "App3DCompanion", "org.geogebra.common.geogebra3D.main", NULL, 0x401, 16, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DMainApp3DCompanion;
}

@end

void OrgGeogebraCommonGeogebra3DMainApp3DCompanion_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonGeogebra3DMainApp3DCompanion *self, OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonMainAppCompanion_initWithOrgGeogebraCommonMainApp_(self, app);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DMainApp3DCompanion)
