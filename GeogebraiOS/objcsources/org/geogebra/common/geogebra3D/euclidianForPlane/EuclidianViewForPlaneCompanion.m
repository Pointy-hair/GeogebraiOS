//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.java
//


#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidianFor3D/DrawAngleFor3D.h"
#include "org/geogebra/common/geogebra3D/euclidianFor3D/EuclidianViewFor3DCompanion.h"
#include "org/geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.h"
#include "org/geogebra/common/geogebra3D/main/App3DCompanion.h"
#include "org/geogebra/common/geogebra3D/main/settings/EuclidianSettingsForPlane.h"
#include "org/geogebra/common/gui/Layout.h"
#include "org/geogebra/common/gui/layout/DockManager.h"
#include "org/geogebra/common/gui/layout/DockPanel.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/ViewCreator.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/AppCompanion.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/settings/AbstractSettings.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion () {
 @public
  id<OrgGeogebraCommonKernelKernelNDViewCreator> plane_;
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *transform_;
  OrgGeogebraCommonKernelMatrixCoords *tmpCoords_;
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *planeMatrix_, *transformedMatrix_;
  OrgGeogebraCommonKernelMatrixCoordMatrix *inverseTransformedMatrix_;
  jint transformMirror_;
  jint transformRotate_;
  id<OrgGeogebraCommonGuiLayoutDockPanel> panel_;
  jint id__;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, plane_, id<OrgGeogebraCommonKernelKernelNDViewCreator>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, transform_, OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, tmpCoords_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, planeMatrix_, OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, transformedMatrix_, OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, inverseTransformedMatrix_, OrgGeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, panel_, id<OrgGeogebraCommonGuiLayoutDockPanel>)

@implementation OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

- (void)initViewWithOrgGeogebraCommonKernelKernelNDViewCreator:(id<OrgGeogebraCommonKernelKernelNDViewCreator>)plane {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowAxesWithBoolean:NO withBoolean:NO];
  [self setPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:plane];
  [self updateMatrix];
  [self updateCenterAndOrientationRegardingView];
  [self updateScaleRegardingView];
}

- (void)setPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:(id<OrgGeogebraCommonKernelKernelNDViewCreator>)plane {
  self->plane_ = plane;
}

- (id<OrgGeogebraCommonKernelKernelNDViewCreator>)getPlane {
  return plane_;
}

- (void)updateScaleRegardingView {
  jdouble newScale = [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getEuclidianView3D])) getXscale];
  jdouble w = [view_ getWidth] / 2;
  jdouble h = [view_ getHeight] / 2;
  jdouble dx = (w - [view_ getxZero]) * newScale / [view_ getXscale];
  jdouble dy = (h - [view_ getyZero]) * newScale / [view_ getYscale];
  [view_ setCoordSystemWithDouble:w - dx withDouble:h - dy withDouble:newScale withDouble:newScale];
}

- (void)updateCenterAndOrientationRegardingView {
  [self setTransformRegardingView];
  [self updateMatrix];
  id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface> view3D = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getEuclidianView3D];
  OrgGeogebraCommonKernelMatrixCoords *c = new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(-[((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(view3D)) getXZero], -[view3D getYZero], -[view3D getZZero], 1);
  [c projectPlaneInPlaneCoordsWithOrgGeogebraCommonKernelMatrixCoordMatrix:[self getMatrix] withOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  jint x = [view_ toScreenCoordXWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) getX]];
  jint y = [view_ toScreenCoordYWithDouble:[tmpCoords_ getY]];
  [view_ setCoordSystemWithDouble:[view_ getWidth] / 2 - x + [view_ getxZero] withDouble:[view_ getHeight] / 2 - y + [view_ getyZero] withDouble:[view_ getXscale] withDouble:[view_ getYscale]];
}

- (OrgGeogebraCommonKernelMatrixCoordMatrix *)getMatrix {
  return transformedMatrix_;
}

- (OrgGeogebraCommonKernelMatrixCoordMatrix *)getInverseMatrix {
  return inverseTransformedMatrix_;
}

- (void)updateMatrix {
  if (![((id<OrgGeogebraCommonKernelKernelNDViewCreator>) nil_chk(plane_)) isDefined]) {
    planeMatrix_ = OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_();
    transformedMatrix_ = OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_();
    inverseTransformedMatrix_ = OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_();
    return;
  }
  if (transform_ == nil) transform_ = OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_();
  planeMatrix_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([plane_ getCoordSys])) getDrawingMatrix];
  transformedMatrix_ = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(planeMatrix_)) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:transform_];
  inverseTransformedMatrix_ = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(transformedMatrix_)) inverse];
}

- (void)setTransformRegardingView {
  OrgGeogebraCommonKernelMatrixCoords *directionView3D = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getEuclidianView3D], [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) getViewDirection];
  OrgGeogebraCommonKernelMatrixCoordMatrix *toScreenMatrix = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast([((OrgGeogebraCommonMainApp *) nil_chk([view_ getApplication])) getEuclidianView3D], [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) getToScreenMatrix];
  jdouble p = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDViewCreator>) nil_chk(plane_)) getCoordSys])) getNormal])) dotproductWithOrgGeogebraCommonKernelMatrixCoords:directionView3D];
  if (p <= 0) {
    transform_ = OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_();
    transformMirror_ = 1;
  }
  else {
    transform_ = OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_MIRROR_Y_();
    transformMirror_ = -1;
  }
  OrgGeogebraCommonKernelMatrixCoordMatrix *m = [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(toScreenMatrix)) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:planeMatrix_];
  jdouble vXx = [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getWithInt:1 withInt:1];
  jdouble vXy = [m getWithInt:2 withInt:1];
  jdouble vYx = [m getWithInt:1 withInt:2];
  jdouble vYy = [m getWithInt:2 withInt:2];
  transformRotate_ = 0;
  if (JavaLangMath_absWithDouble_(vXy) > JavaLangMath_absWithDouble_(vXx) && JavaLangMath_absWithDouble_(vYx) > JavaLangMath_absWithDouble_(vYy)) {
    if (vYx * transformMirror_ >= 0) {
      transform_ = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_ROTATION_OZ_90_())) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:transform_];
      transformRotate_ = 90;
    }
    else {
      transform_ = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_ROTATION_OZ_M90_())) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:transform_];
      transformRotate_ = -90;
    }
  }
  else if (vXx * transformMirror_ < 0) {
    transform_ = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_MIRROR_O_())) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:transform_];
    transformRotate_ = 180;
  }
  [self updateMatrix];
  [view_ updateAllDrawablesWithBoolean:YES];
}

- (void)setTransform {
  if (transformMirror_ == 1) transform_ = OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_();
  else transform_ = OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_MIRROR_Y_();
  if (transformRotate_ == 90) transform_ = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_ROTATION_OZ_90_())) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:transform_];
  else if (transformRotate_ == -90) transform_ = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_ROTATION_OZ_M90_())) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:transform_];
  else if (transformRotate_ == 180) transform_ = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_MIRROR_O_())) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:transform_];
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml
                            withBoolean:(jboolean)asPreference {
  if (![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) isShowing]) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"view is not showing");
    return;
  }
  [view_ startXMLWithJavaLangStringBuilder:sbxml withBoolean:asPreference];
  (void) [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"\t<transformForPlane "];
  (void) [sbxml appendWithNSString:@"mirror=\""];
  (void) [sbxml appendWithBoolean:transformMirror_ == -1];
  (void) [sbxml appendWithNSString:@"\""];
  (void) [sbxml appendWithNSString:@" rotate=\""];
  (void) [sbxml appendWithInt:transformRotate_];
  (void) [sbxml appendWithNSString:@"\""];
  (void) [sbxml appendWithNSString:@"/>\n"];
  [view_ endXMLWithJavaLangStringBuilder:sbxml];
}

- (void)settingsChangedWithOrgGeogebraCommonMainSettingsAbstractSettings:(OrgGeogebraCommonMainSettingsAbstractSettings *)settings {
  [super settingsChangedWithOrgGeogebraCommonMainSettingsAbstractSettings:settings];
  OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *evs = (OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *) check_class_cast(settings, [OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane class]);
  transformMirror_ = 1;
  if ([((OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *) nil_chk(evs)) getMirror]) transformMirror_ = -1;
  transformRotate_ = [evs getRotate];
  [self setTransform];
}

- (void)setXYMinMaxForUpdateSize {
  jdouble c = (((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_))->xmin_ + view_->xmax_) / 2;
  jdouble l = [view_ getWidth] * [view_ getInvXscale] / 2;
  view_->xmin_ = c - l;
  view_->xmax_ = c + l;
  c = (view_->ymin_ + view_->ymax_) / 2;
  l = [view_ getHeight] * [view_ getInvYscale] / 2;
  view_->ymax_ = c + l;
  view_->ymin_ = c - l;
}

- (OrgGeogebraCommonEuclidianDrawDrawAngle *)newDrawAngleWithOrgGeogebraCommonKernelGeosGeoAngle:(OrgGeogebraCommonKernelGeosGeoAngle *)geo {
  return new_OrgGeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonKernelGeosGeoAngle_(view_, geo);
}

- (jboolean)isDefault2D {
  return NO;
}

- (void)updateForPlane {
  [self updateMatrix];
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateAllDrawablesWithBoolean:YES];
}

- (jboolean)isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_POINT:
    case OrgGeogebraCommonPluginGeoClass_POINT3D:
    case OrgGeogebraCommonPluginGeoClass_SEGMENT:
    case OrgGeogebraCommonPluginGeoClass_SEGMENT3D:
    case OrgGeogebraCommonPluginGeoClass_LINE:
    case OrgGeogebraCommonPluginGeoClass_LINE3D:
    case OrgGeogebraCommonPluginGeoClass_RAY:
    case OrgGeogebraCommonPluginGeoClass_RAY3D:
    case OrgGeogebraCommonPluginGeoClass_VECTOR:
    case OrgGeogebraCommonPluginGeoClass_VECTOR3D:
    case OrgGeogebraCommonPluginGeoClass_POLYGON:
    case OrgGeogebraCommonPluginGeoClass_POLYGON3D:
    case OrgGeogebraCommonPluginGeoClass_CONIC:
    case OrgGeogebraCommonPluginGeoClass_CONIC3D:
    case OrgGeogebraCommonPluginGeoClass_CONICSECTION:
    case OrgGeogebraCommonPluginGeoClass_CONICPART:
    case OrgGeogebraCommonPluginGeoClass_ANGLE3D:
    case OrgGeogebraCommonPluginGeoClass_TEXT:
    case OrgGeogebraCommonPluginGeoClass_LOCUS:
    return [geo isVisibleInViewForPlane];
    case OrgGeogebraCommonPluginGeoClass_ANGLE:
    if ([geo isIndependent]) {
      return NO;
    }
    return [geo isVisibleInViewForPlane];
    default:
    return NO;
  }
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneWithInverseMatrixWithOrgGeogebraCommonKernelMatrixCoordMatrix:[self getInverseMatrix]];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsFromViewWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  return [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk([self getMatrix])) mulWithOrgGeogebraCommonKernelMatrixCoords:coords];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsFromViewWithDouble:(jdouble)x
                                                          withDouble:(jdouble)y {
  return [self getCoordsFromViewWithOrgGeogebraCommonKernelMatrixCoords:new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(x, y, 0, 1)];
}

- (NSString *)getFromPlaneString {
  if (plane_ == nil) return @"";
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDViewCreator>) nil_chk(plane_)) toGeoElement])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (NSString *)getTranslatedFromPlaneString {
  if (plane_ == nil) return @"";
  if ([OrgGeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:plane_]) {
    return [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getLocalization])) getPlainWithNSString:@"PlaneA" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getLocalization])) getPlainWithNSString:@"PlaneFromA" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)getPlaneContaining {
  if ([OrgGeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:plane_]) {
    return (id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(plane_, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND));
  }
  return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getKernel])) getManager3D])) Plane3DWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:plane_];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)getDirection {
  return plane_;
}

- (jboolean)goToZPlusWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  jdouble dot = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk([self getDirection])) getDirectionInD3]];
  return (dot > 0) ^ (transformMirror_ == -1);
}

- (jboolean)viewOrientationForClockwiseWithBoolean:(jboolean)clockwise {
  if (transformMirror_ == 1) return clockwise;
  return !clockwise;
}

- (jboolean)isMoveableWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([self hasForParentWithOrgGeogebraCommonKernelGeosGeoElement:geo]) {
    return NO;
  }
  return [super isMoveableWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (jboolean)hasForParentWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:plane_];
}

- (JavaUtilArrayList *)getFreeInputPointsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algoParent {
  JavaUtilArrayList *list = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent)) getFreeInputPoints];
  JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
  for (id<OrgGeogebraCommonKernelKernelNDGeoPointND> __strong p in nil_chk(list)) if (![self hasForParentWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class])]) [ret addWithId:p];
  return ret;
}

- (void)getXMLidWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  (void) [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"\t<viewId "];
  (void) [sbxml appendWithNSString:@"plane=\""];
  (void) [sbxml appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelSimple]];
  (void) [sbxml appendWithNSString:@"\""];
  (void) [sbxml appendWithNSString:@"/>\n"];
}

- (void)paintWithOrgGeogebraCommonAwtGGraphics2D:(id<OrgGeogebraCommonAwtGGraphics2D>)g2 {
  if (![((id<OrgGeogebraCommonKernelKernelNDViewCreator>) nil_chk(plane_)) isDefined]) {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_LIGHT_GRAY_()];
    [g2 fillRectWithInt:0 withInt:0 withInt:[((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] withInt:[view_ getHeight]];
    return;
  }
  [super paintWithOrgGeogebraCommonAwtGGraphics2D:g2];
}

- (void)addExistingGeos {
  [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getKernel])) notifyAddAllWithOrgGeogebraCommonKernelView:view_];
}

- (void)attachView {
  [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getKernel])) attachWithOrgGeogebraCommonKernelView:view_];
}

- (jboolean)showGridWithBoolean:(jboolean)show {
  OrgGeogebraCommonMainSettingsEuclidianSettings *settings = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getSettings])) getEuclidianForPlaneWithNSString:[self getFromPlaneString]];
  if (settings != nil) [settings setShowGridSettingWithBoolean:show];
  return [super showGridWithBoolean:show];
}

- (void)setDockPanelWithOrgGeogebraCommonGuiLayoutDockPanel:(id<OrgGeogebraCommonGuiLayoutDockPanel>)panel {
  self->panel_ = panel;
  self->id__ = [((id<OrgGeogebraCommonGuiLayoutDockPanel>) nil_chk(panel)) getViewId];
}

- (jint)getId {
  return id__;
}

- (void)doRemove {
  [self removeFromGuiAndKernel];
  [((OrgGeogebraCommonGeogebra3DMainApp3DCompanion *) nil_chk(((OrgGeogebraCommonGeogebra3DMainApp3DCompanion *) check_class_cast([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getCompanion], [OrgGeogebraCommonGeogebra3DMainApp3DCompanion class])))) removeEuclidianViewForPlaneFromListWithOrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion:self];
}

- (void)removeFromGuiAndKernel {
  [((id<OrgGeogebraCommonGuiLayoutDockPanel>) nil_chk(panel_)) closePanel];
  [((OrgGeogebraCommonGuiLayoutDockManager *) nil_chk([((OrgGeogebraCommonGuiLayout *) nil_chk([((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getGuiManager])) getLayout])) getDockManager])) unRegisterPanelWithOrgGeogebraCommonGuiLayoutDockPanel:panel_];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([view_ getKernel])) detachWithOrgGeogebraCommonKernelView:view_];
}

- (void)updateAllDrawablesWithBoolean:(jboolean)repaint {
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateAllDrawablesWithBoolean:repaint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianView:", "EuclidianViewForPlaneCompanion", NULL, 0x1, NULL, NULL },
    { "initViewWithOrgGeogebraCommonKernelKernelNDViewCreator:", "initView", "V", 0x1, NULL, NULL },
    { "setPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:", "setPlane", "V", 0x1, NULL, NULL },
    { "getPlane", NULL, "Lorg.geogebra.common.kernel.kernelND.ViewCreator;", 0x1, NULL, NULL },
    { "updateScaleRegardingView", NULL, "V", 0x1, NULL, NULL },
    { "updateCenterAndOrientationRegardingView", NULL, "V", 0x1, NULL, NULL },
    { "getMatrix", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getInverseMatrix", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "updateMatrix", NULL, "V", 0x1, NULL, NULL },
    { "setTransformRegardingView", NULL, "V", 0x1, NULL, NULL },
    { "setTransform", NULL, "V", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x1, NULL, NULL },
    { "settingsChangedWithOrgGeogebraCommonMainSettingsAbstractSettings:", "settingsChanged", "V", 0x1, NULL, NULL },
    { "setXYMinMaxForUpdateSize", NULL, "V", 0x1, NULL, NULL },
    { "newDrawAngleWithOrgGeogebraCommonKernelGeosGeoAngle:", "newDrawAngle", "Lorg.geogebra.common.euclidian.draw.DrawAngle;", 0x4, NULL, NULL },
    { "isDefault2D", NULL, "Z", 0x1, NULL, NULL },
    { "updateForPlane", NULL, "V", 0x1, NULL, NULL },
    { "isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:", "isVisibleInThisView", "Z", 0x1, NULL, NULL },
    { "getCoordsForViewWithOrgGeogebraCommonKernelMatrixCoords:", "getCoordsForView", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsFromViewWithOrgGeogebraCommonKernelMatrixCoords:", "getCoordsFromView", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsFromViewWithDouble:withDouble:", "getCoordsFromView", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTranslatedFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPlaneContaining", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPlaneND;", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoDirectionND;", 0x1, NULL, NULL },
    { "goToZPlusWithOrgGeogebraCommonKernelMatrixCoords:", "goToZPlus", "Z", 0x1, NULL, NULL },
    { "viewOrientationForClockwiseWithBoolean:", "viewOrientationForClockwise", "Z", 0x1, NULL, NULL },
    { "isMoveableWithOrgGeogebraCommonKernelGeosGeoElement:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "hasForParentWithOrgGeogebraCommonKernelGeosGeoElement:", "hasForParent", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getXMLidWithJavaLangStringBuilder:", "getXMLid", "V", 0x1, NULL, NULL },
    { "paintWithOrgGeogebraCommonAwtGGraphics2D:", "paint", "V", 0x1, NULL, NULL },
    { "addExistingGeos", NULL, "V", 0x1, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "Z", 0x1, NULL, NULL },
    { "setDockPanelWithOrgGeogebraCommonGuiLayoutDockPanel:", "setDockPanel", "V", 0x1, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "removeFromGuiAndKernel", NULL, "V", 0x1, NULL, NULL },
    { "updateAllDrawablesWithBoolean:", "updateAllDrawables", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.ViewCreator;", NULL, NULL,  },
    { "transform_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpCoords_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "planeMatrix_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "transformedMatrix_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "inverseTransformedMatrix_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "transformMirror_", NULL, 0x2, "I", NULL, NULL,  },
    { "transformRotate_", NULL, 0x2, "I", NULL, NULL,  },
    { "panel_", NULL, 0x2, "Lorg.geogebra.common.gui.layout.DockPanel;", NULL, NULL,  },
    { "id__", "id", 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion = { 2, "EuclidianViewForPlaneCompanion", "org.geogebra.common.geogebra3D.euclidianForPlane", NULL, 0x1, 40, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *self, OrgGeogebraCommonEuclidianEuclidianView *view) {
  (void) OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(self, view);
  self->tmpCoords_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
}

OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *new_OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonEuclidianEuclidianView *view) {
  OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *self = [OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion alloc];
  OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_initWithOrgGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion)
