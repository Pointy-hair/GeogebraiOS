//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GBufferedImage.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianController3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DListsForView.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterCompletingCursor.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterCursor.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterViewInFrontOf.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "org/geogebra/common/io/MyXMLio.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/ImageManager.h"

#define OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DEFAULT_TEXT_SCALE_FACTOR 0.8f
#define OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_NONE 0
#define OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_HIGHLITED 1
#define OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DEPTH_FACTOR 2
#define OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN 10.0

@interface OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer () {
 @public
  jint m_arrowType_;
  jdouble m_arrowLength_, m_arrowWidth_;
  jint dilation_;
  IOSDoubleArray *dilationValues_;
  jboolean doPick__;
  OrgGeogebraCommonKernelMatrixCoords *obliqueOrthoDirection_;
}

+ (IOSDoubleArray *)updateIntervalInFrustumWithDoubleArray:(IOSDoubleArray *)minmax
                                                withDouble:(jdouble)v1
                                                withDouble:(jdouble)v2;

- (void)updatePerspEye;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, dilationValues_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, obliqueOrthoDirection_, OrgGeogebraCommonKernelMatrixCoords *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, DEFAULT_TEXT_SCALE_FACTOR, jfloat)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, DILATION_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, DILATION_HIGHLITED, jint)

static jfloat OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, SQRT2_DIV2_, jfloat)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, DEPTH_FACTOR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, PERSP_NEAR_MIN, jdouble)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawLeft(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawRight(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self);

__attribute__((unused)) static IOSDoubleArray *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(IOSDoubleArray *minmax, jdouble v1, jdouble v2);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer)

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_W_;
IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_D_;

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
  return self;
}

- (void)setDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *)dl {
  drawable3DLists_ = dl;
}

- (void)display {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateViewAndDrawables {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) update];
  [view3D_ updateOwnDrawablesNow];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) updateAll];
  [view3D_ resetViewChanged];
}

- (void)initRenderingValues {
  if (![((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) isStereoBuffered]) {
    [self clearColorBuffer];
  }
  [self initLighting];
}

- (void)drawScene {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getEuclidianController], [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) updateInput3D];
  [self useShaderProgram];
  if (waitForPick_) {
    [self doPick];
  }
  if (waitForUpdateClipPlanes_) {
    if (enableClipPlanes__) [self enableClipPlanes];
    else [self disableClipPlanes];
    waitForUpdateClipPlanes_ = NO;
  }
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast([view3D_ getEuclidianController], [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) update];
  [self updateViewAndDrawables];
  if (needExportImage__) {
    [self selectFBO];
  }
  if (waitForSetStencilLines_) {
    [self setStencilLines];
  }
  if (waitForDisableStencilLines_) {
    [self disableStencilLines];
  }
  if (waitForUpdateClearColor_) {
    [self updateClearColor];
    waitForUpdateClearColor_ = NO;
  }
  [self initRenderingValues];
  if ([view3D_ getProjection] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawLeft(self);
    [self setView];
    [self draw];
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawRight(self);
    [self setView];
    [self draw];
  }
  else {
    [self clearDepthBuffer];
    [self setView];
    [self draw];
  }
  if (needExportImage__) {
    [self unselectFBO];
  }
  [self setColorMaskWithBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES];
  [self exportImage];
}

- (void)needExportImage {
  exportImageForThumbnail_ = YES;
  jdouble scale_ = JavaLangMath_minWithDouble_withDouble_(OrgGeogebraCommonIoMyXMLio_THUMBNAIL_PIXELS_X / [self getWidth], OrgGeogebraCommonIoMyXMLio_THUMBNAIL_PIXELS_Y / [self getHeight]);
  [self needExportImageWithDouble:scale_ withInt:J2ObjCFpToInt(OrgGeogebraCommonIoMyXMLio_THUMBNAIL_PIXELS_X) withInt:J2ObjCFpToInt(OrgGeogebraCommonIoMyXMLio_THUMBNAIL_PIXELS_Y)];
}

- (void)needExportImageWithDouble:(jdouble)scale_ {
  exportImageForThumbnail_ = NO;
  [self needExportImageWithDouble:scale_ withInt:J2ObjCFpToInt(([self getWidth] * scale_)) withInt:J2ObjCFpToInt(([self getHeight] * scale_))];
}

- (void)needExportImageWithDouble:(jdouble)scale_
                          withInt:(jint)w
                          withInt:(jint)h {
  needExportImage__ = YES;
  [self display];
}

- (void)selectFBO {
}

- (void)unselectFBO {
}

- (void)setDrawLeft {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawLeft(self);
}

- (void)setDrawRight {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawRight(self);
}

- (void)setBufferLeft {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setBufferRight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)clearColorBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)clearDepthBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setStencilFuncWithInt:(jint)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)exportImage {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableCulling {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableCulling {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCullFaceFront {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCullFaceBack {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableBlending {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableBlending {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawTranspNotCurved {
  [self disableCulling];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawTranspWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [drawable3DLists_ drawTranspClosedNotCurvedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self enableCulling];
}

- (void)drawTransp {
  [self setLightWithInt:1];
  [self drawTranspNotCurved];
  [self setCullFaceFront];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawTranspClosedCurvedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfacesInclLists]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawTranspClippedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setCullFaceBack];
  [drawable3DLists_ drawTranspClosedCurvedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfacesInclLists]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawTranspClippedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setLightWithInt:0];
}

- (void)setLightWithInt:(jint)light {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawNotTransp {
  [self setLightWithInt:1];
  [self enableBlending];
  [self enableCulling];
  [self setCullFaceFront];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawNotTransparentSurfacesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [drawable3DLists_ drawNotTransparentSurfacesClosedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfacesInclLists]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawNotTransparentSurfacesClippedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setCullFaceBack];
  [drawable3DLists_ drawNotTransparentSurfacesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [drawable3DLists_ drawNotTransparentSurfacesClosedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfacesInclLists]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawNotTransparentSurfacesClippedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setLightWithInt:0];
}

- (void)enableTextures {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableTextures {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableMultisample {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableMultisample {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableAlphaTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableAlphaTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableLighting {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableLighting {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initLighting {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLabelOriginWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)origin {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawFaceToScreen {
  [self enableAlphaTest];
  [self disableLighting];
  [self enableBlending];
  [self enableTexturesForText];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [drawable3DLists_ drawNotAbsoluteTextWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self disableTextures];
  if (enableClipPlanes__) [self disableClipPlanes];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawMouseCursorWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if (enableClipPlanes__) [self enableClipPlanes];
}

- (void)drawFaceToScreenEnd {
  [self enableAlphaTest];
  [self disableLighting];
  [self enableBlending];
  [self enableTexturesForText];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawAbsoluteTextWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self disableTextures];
}

- (void)setEnableClipPlanesWithBoolean:(jboolean)flag {
  waitForUpdateClipPlanes_ = YES;
  enableClipPlanes__ = flag;
}

- (void)enableClipPlanes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableClipPlanes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableClipPlanesIfNeeded {
  if (!enableClipPlanes__) [self enableClipPlanes];
}

- (void)disableClipPlanesIfNeeded {
  if (!enableClipPlanes__) [self disableClipPlanes];
}

- (void)setClipPlanesWithDoubleArray2:(IOSObjectArray *)minMax {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setMatrixView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)unsetMatrixView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableDepthMask {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableDepthMask {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableDepthTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableDepthTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColorMaskWithBoolean:(jboolean)r
                    withBoolean:(jboolean)g
                    withBoolean:(jboolean)b
                    withBoolean:(jboolean)a {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)draw {
  if (enableClipPlanes__) {
    [self enableClipPlanes];
  }
  [self drawFaceToScreen];
  [self setMatrixView];
  [self setLightPosition];
  [self setLightWithInt:0];
  [self enableLighting];
  [self disableAlphaTest];
  [self enableCulling];
  if (enableClipPlanes__) {
    [self disableClipPlanes];
  }
  [self setCullFaceBack];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawCursorWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if (enableClipPlanes__) {
    [self enableClipPlanes];
  }
  [self enableAlphaTest];
  [self disableTextures];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawHiddenNotTexturedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self enableDash];
  [drawable3DLists_ drawHiddenTexturedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self enableFading];
  [self drawNotTransp];
  [self disableTextures];
  [self disableAlphaTest];
  [self disableDepthMask];
  [self enableFading];
  [self drawTransp];
  [self enableDepthMask];
  [self disableTextures];
  [self enableCulling];
  [self disableBlending];
  [self setColorMaskWithBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
  [self setCullFaceFront];
  [drawable3DLists_ drawClosedSurfacesForHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfacesInclLists]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawClippedSurfacesForHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self disableCulling];
  [drawable3DLists_ drawSurfacesForHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self setColorMask];
  [self enableFading];
  [self disableDepthMask];
  [self enableBlending];
  [self drawTransp];
  [self enableDepthMask];
  [self disableTextures];
  [self setColorMaskWithBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
  [self disableBlending];
  [self enableCulling];
  [self setCullFaceBack];
  [drawable3DLists_ drawClosedSurfacesForHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfacesInclLists]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawClippedSurfacesForHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setColorMask];
  [self enableFading];
  [self disableDepthMask];
  [self enableBlending];
  [self drawTransp];
  [self enableDepthMask];
  [self enableDash];
  [self enableCulling];
  [self setCullFaceBack];
  [drawable3DLists_ drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self disableLighting];
  [self disableDepthTest];
  [self unsetMatrixView];
  if (enableClipPlanes__) {
    [self disableClipPlanes];
  }
  [self enableTexturesForText];
  [self drawFaceToScreenEnd];
  [self enableDepthTest];
  [self enableLighting];
}

- (void)drawSurfacesOutline {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLineWidthWithDouble:(jdouble)width {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)color {
  [self setColorWithFloat:(jfloat) [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(color)) getX] withFloat:(jfloat) [color getY] withFloat:(jfloat) [color getZ] withFloat:(jfloat) [color getW]];
}

- (void)setColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color {
  [self setColorWithFloat:[((OrgGeogebraCommonAwtGColor *) nil_chk(color)) getRed] / 255.0f withFloat:[color getGreen] / 255.0f withFloat:[color getBlue] / 255.0f withFloat:[color getAlpha] / 255.0f];
}

- (void)setColorWithFloat:(jfloat)r
                withFloat:(jfloat)g
                withFloat:(jfloat)b
                withFloat:(jfloat)a {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setArrowTypeWithInt:(jint)a_arrowType {
  m_arrowType_ = a_arrowType;
}

- (void)setArrowWidthWithDouble:(jdouble)a_arrowWidth {
  m_arrowWidth_ = a_arrowWidth;
}

- (void)setArrowLengthWithDouble:(jdouble)a_arrowLength {
  m_arrowLength_ = a_arrowLength;
}

- (void)setLayerWithFloat:(jfloat)l {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setMatrixWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:(OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)a_matrix {
  m_drawingMatrix_ = a_matrix;
}

- (OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)getMatrix {
  return m_drawingMatrix_;
}

- (void)initMatrix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resetMatrix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *)getGeometryManager {
  return geometryManager_;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *)getTextures {
  return textures_;
}

- (void)drawCursorWithInt:(jint)type {
  if (!OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_isTypeAlreadyWithInt_(type)) [self disableLighting];
  [self initMatrix];
  [geometryManager_ drawWithInt:[((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_))->cursor_)) getIndexWithInt:type]];
  [self resetMatrix];
  if (!OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_isTypeAlreadyWithInt_(type)) [self enableLighting];
}

- (void)drawCompletingCursorWithDouble:(jdouble)value
withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)color {
  [self initMatrix];
  [self enableBlending];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCompletingCursor *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) getCompletingCursor])) drawWithDouble:value withOrgGeogebraCommonKernelMatrixCoords:color];
  [self disableBlending];
  [self resetMatrix];
}

- (void)drawViewInFrontOf {
  [self initMatrix];
  [self disableBlending];
  [geometryManager_ drawWithInt:[((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterViewInFrontOf *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) getViewInFrontOf])) getIndex]];
  [self enableBlending];
  [self resetMatrix];
}

- (void)drawMouseCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)startPolygonsWithInt:(jint)old {
  return [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) startPolygonsWithInt:old];
}

- (void)drawPolygonWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)n
              withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)v {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) drawPolygonWithOrgGeogebraCommonKernelMatrixCoords:n withOrgGeogebraCommonKernelMatrixCoordsArray:v];
}

- (void)endPolygons {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) endPolygons];
}

- (void)setMouseLocWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)p
                                          withInt:(jint)pickingMode {
  mouse_ = p;
  self->pickingMode_ = pickingMode;
  waitForPick_ = YES;
}

- (void)setHitsWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)mouseLoc
                                      withInt:(jint)threshold {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getLabelHitWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)mouseLoc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addOneGeoToPick {
  geoToPickSize_++;
}

- (void)removeOneGeoToPick {
  geoToPickSize_--;
}

+ (IOSObjectArray *)createDrawableListForPickingWithInt:(jint)bufSize {
  return OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_createDrawableListForPickingWithInt_(bufSize);
}

- (void)setGLForPicking {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)pushSceneMatrix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)intersectsMouse3DWithDouble:(jdouble)zNear
                             withDouble:(jdouble)zFar
                             withDouble:(jdouble)mouseZ {
  return mouseZ - OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_MOUSE_PICK_DEPTH < zNear && mouseZ + OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_MOUSE_PICK_DEPTH > zFar;
}

- (void)doPick {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)pickIntersectionCurves {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)glLoadNameWithInt:(jint)loop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)pickWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d
withOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  [self pickWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d withBoolean:NO withOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:type];
}

- (void)pickWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d
                                                         withBoolean:(jboolean)intersection
withOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  [self glLoadNameWithInt:pickingLoop_];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *ret = [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) drawForPickingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self withBoolean:intersection withOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:type];
  if (ret != nil) {
    (void) IOSObjectArray_Set(nil_chk(drawHits_), pickingLoop_, ret);
    pickingLoop_++;
  }
}

- (void)pickLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d {
  [self glLoadNameWithInt:pickingLoop_];
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) drawLabelForPickingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self]) {
    (void) IOSObjectArray_Set(nil_chk(drawHits_), pickingLoop_, d);
    pickingLoop_++;
  }
}

- (jdouble)getScreenZFromPickingDepthWithDouble:(jdouble)z {
  jdouble d = [self getVisibleDepth] / 2;
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC || [view3D_ getProjection] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE) {
    return d * (1 - z);
  }
  return IOSDoubleArray_Get(nil_chk(eyeToScreenDistance_), OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT) * (z - 1 - d / IOSDoubleArray_Get(eyeToScreenDistance_, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT)) / (z - 1 - IOSDoubleArray_Get(eyeToScreenDistance_, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT) / d) - [view3D_ getScreenZOffset];
}

- (void)setLightPosition {
  [self setLightPositionWithFloatArray:[self getLightPosition]];
}

- (IOSFloatArray *)getLightPosition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setLightPositionWithFloatArray:(IOSFloatArray *)values {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLightAmbiantDiffuseWithFloat:(jfloat)ambiant0
                              withFloat:(jfloat)diffuse0
                              withFloat:(jfloat)ambiant1
                              withFloat:(jfloat)diffuse1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWaitForUpdateClearColor {
  waitForUpdateClearColor_ = YES;
}

- (void)updateClearColor {
  OrgGeogebraCommonAwtGColor *c = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getBackground];
  jfloat r, g, b;
  if ([view3D_ getProjection] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES && ![view3D_ isPolarized] && ![view3D_ isStereoBuffered]) {
    r = (jfloat) ([((OrgGeogebraCommonAwtGColor *) nil_chk(c)) getGrayScale] / 255);
    g = r;
    b = r;
  }
  else {
    r = (jfloat) [((OrgGeogebraCommonAwtGColor *) nil_chk(c)) getRed] / 255;
    g = [view3D_ isShutDownGreen] ? 0 : (jfloat) [c getGreen] / 255;
    b = (jfloat) [c getBlue] / 255;
  }
  [self setClearColorWithFloat:r withFloat:g withFloat:b withFloat:1.0f];
}

- (void)setClearColorWithFloat:(jfloat)r
                     withFloat:(jfloat)g
                     withFloat:(jfloat)b
                     withFloat:(jfloat)a {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initShaders {
}

- (void)useShaderProgram {
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *)createManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setColorMaterial {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLightModel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setAlphaFunc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resumeAnimator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)getLeft {
  return left_;
}

- (jint)getRight {
  return right_;
}

- (jint)getWidth {
  return right_ - left_;
}

- (jint)getBottom {
  return bottom_;
}

- (jint)getTop {
  return top_;
}

- (jint)getHeight {
  return top_ - bottom_;
}

- (jint)getVisibleDepth {
  return [self getWidth] * 2;
}

- (IOSDoubleArray *)getIntervalInFrustumWithDoubleArray:(IOSDoubleArray *)minmax
                withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)o
                withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v
                                            withBoolean:(jboolean)extendedDepth {
  jdouble left = ([self getLeft] - [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o)) getWithInt:1]) / [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getWithInt:1];
  jdouble right = ([self getRight] - [o getWithInt:1]) / [v getWithInt:1];
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(minmax, left, right);
  jdouble top = ([self getTop] - [o getWithInt:2]) / [v getWithInt:2];
  jdouble bottom = ([self getBottom] - [o getWithInt:2]) / [v getWithInt:2];
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(minmax, top, bottom);
  jdouble halfDepth = [self getVisibleDepth] / 2;
  jdouble front = (-halfDepth - [o getWithInt:3]) / [v getWithInt:3];
  jdouble back = (halfDepth - [o getWithInt:3]) / [v getWithInt:3];
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(minmax, front, back);
  return minmax;
}

+ (IOSDoubleArray *)updateIntervalInFrustumWithDoubleArray:(IOSDoubleArray *)minmax
                                                withDouble:(jdouble)v1
                                                withDouble:(jdouble)v2 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(minmax, v1, v2);
}

- (void)setView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWaitForDisableStencilLines {
  waitForDisableStencilLines_ = YES;
}

- (void)disableStencilLines {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWaitForSetStencilLines {
  waitForSetStencilLines_ = YES;
}

- (void)setStencilLines {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setProjectionMatrixForPicking {
  switch ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection]) {
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC:
    [self viewOrtho];
    break;
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES:
    [self viewGlasses];
    break;
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE:
    [self viewPersp];
    break;
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE:
    [self viewOblique];
    break;
  }
}

- (void)setProjectionMatrix {
  switch ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection]) {
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC:
    [self viewOrtho];
    break;
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE:
    [self viewPersp];
    break;
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES:
    [self viewGlasses];
    break;
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE:
    [self viewOblique];
    break;
  }
  if (needExportImage__) {
    [self multProjectionMatrixForExportImage];
  }
}

- (void)multProjectionMatrixForExportImage {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateOrthoValues {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)viewOrtho {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setNearWithDouble:(jdouble)left
               withDouble:(jdouble)right {
  *IOSDoubleArray_GetRef(nil_chk(eyeToScreenDistance_), OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT) = left;
  *IOSDoubleArray_GetRef(eyeToScreenDistance_, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_RIGHT) = right;
  [self updatePerspValues];
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(self);
}

- (void)updatePerspValues {
  for (jint i = 0; i < 2; i++) {
    *IOSDoubleArray_GetRef(nil_chk(perspNear_), i) = IOSDoubleArray_Get(nil_chk(eyeToScreenDistance_), i) - [self getVisibleDepth] / 2;
    if (IOSDoubleArray_Get(perspNear_, i) < OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN) {
      *IOSDoubleArray_GetRef(perspNear_, i) = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN;
    }
    *IOSDoubleArray_GetRef(nil_chk(perspFocus_), i) = -IOSDoubleArray_Get(eyeToScreenDistance_, i) + [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getScreenZOffset];
    *IOSDoubleArray_GetRef(nil_chk(perspDistratio_), i) = IOSDoubleArray_Get(perspNear_, i) / IOSDoubleArray_Get(eyeToScreenDistance_, i);
    *IOSDoubleArray_GetRef(nil_chk(perspLeft_), i) = [self getLeft] * IOSDoubleArray_Get(perspDistratio_, i);
    *IOSDoubleArray_GetRef(nil_chk(perspRight_), i) = [self getRight] * IOSDoubleArray_Get(perspDistratio_, i);
    *IOSDoubleArray_GetRef(nil_chk(perspBottom_), i) = [self getBottom] * IOSDoubleArray_Get(perspDistratio_, i);
    *IOSDoubleArray_GetRef(nil_chk(perspTop_), i) = [self getTop] * IOSDoubleArray_Get(perspDistratio_, i);
    *IOSDoubleArray_GetRef(nil_chk(perspFar_), i) = IOSDoubleArray_Get(perspNear_, i) + [self getVisibleDepth];
  }
}

- (void)updatePerspEye {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(self);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getPerspEye {
  return perspEye_;
}

- (jdouble)getEyeSep {
  return (IOSDoubleArray_Get(nil_chk(glassesEyeX_), 0) - IOSDoubleArray_Get(glassesEyeX_, 1)) / 2;
}

- (void)viewPersp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateGlassesValues {
  for (jint i = 0; i < 2; i++) {
    *IOSDoubleArray_GetRef(nil_chk(glassesEyeX_), i) = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getEyeXWithInt:i];
    *IOSDoubleArray_GetRef(nil_chk(glassesEyeY_), i) = [view3D_ getEyeYWithInt:i];
    *IOSDoubleArray_GetRef(nil_chk(glassesEyeX1_), i) = IOSDoubleArray_Get(glassesEyeX_, i) * IOSDoubleArray_Get(nil_chk(perspDistratio_), i);
    *IOSDoubleArray_GetRef(nil_chk(glassesEyeY1_), i) = IOSDoubleArray_Get(glassesEyeY_, i) * IOSDoubleArray_Get(perspDistratio_, i);
  }
}

- (void)viewGlasses {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColorMask {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES && ![view3D_ isPolarized] && ![view3D_ isStereoBuffered]) {
    if (eye_ == OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT) {
      [self setColorMaskWithBoolean:YES withBoolean:NO withBoolean:NO withBoolean:YES];
    }
    else {
      [self setColorMaskWithBoolean:NO withBoolean:![view3D_ isGlassesShutDownGreen] withBoolean:YES withBoolean:YES];
    }
  }
  else {
    [self setColorMaskWithBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES];
  }
}

- (void)updateProjectionObliqueValues {
  jdouble angle = JavaLangMath_toRadiansWithDouble_([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjectionObliqueAngle]);
  obliqueX_ = -[view3D_ getProjectionObliqueFactor] * JavaLangMath_cosWithDouble_(angle);
  obliqueY_ = -[view3D_ getProjectionObliqueFactor] * JavaLangMath_sinWithDouble_(angle);
  obliqueOrthoDirection_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(obliqueX_, obliqueY_, -1, 0);
}

- (void)viewOblique {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getObliqueX {
  return obliqueX_;
}

- (jdouble)getObliqueY {
  return obliqueY_;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getObliqueOrthoDirection {
  return obliqueOrthoDirection_;
}

- (void)setViewWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)w
               withInt:(jint)h {
  left_ = x - w / 2;
  bottom_ = y - h / 2;
  right_ = left_ + w;
  top_ = bottom_ + h;
  switch ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection]) {
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC:
    [self updateOrthoValues];
    break;
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE:
    [self updatePerspValues];
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(self);
    break;
    case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES:
    [self updatePerspValues];
    [self updateGlassesValues];
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(self);
    if ([view3D_ isPolarized]) {
      [self setWaitForSetStencilLines];
    }
    break;
  }
  [self setView];
  [view3D_ setViewChanged];
  [view3D_ setWaitForUpdate];
}

- (void)exportToClipboard {
  exportType_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_get_CLIPBOARD();
  [self needExportImageWithDouble:OrgGeogebraCommonMainApp_getMaxScaleForClipBoardWithOrgGeogebraCommonEuclidianEuclidianView_(view3D_)];
}

- (void)uploadToGeoGebraTube {
  exportType_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_get_UPLOAD_TO_GEOGEBRATUBE();
  [self needExportImage];
}

- (jdouble)getEyeToScreenDistance {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE || [view3D_ getProjection] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    return IOSDoubleArray_Get(nil_chk(eyeToScreenDistance_), OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT);
  }
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (void)enableTextures2D {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableTextures2D {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)genTextures2DWithInt:(jint)number
                withIntArray:(IOSIntArray *)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)bindTextureWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgGeogebraCommonAwtGBufferedImage>)createBufferedImageWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *)label {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)createAlphaTextureWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *)label
                                             withOrgGeogebraCommonAwtGBufferedImage:(id<OrgGeogebraCommonAwtGBufferedImage>)bimg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (jint)firstPowerOfTwoGreaterThanWithInt:(jint)val {
  return OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_firstPowerOfTwoGreaterThanWithInt_(val);
}

- (void)textureImage2DWithInt:(jint)sizeX
                      withInt:(jint)sizeY
                withByteArray:(IOSByteArray *)buf {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setTextureLinear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setTextureNearest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)init__ {
  [self initShaders];
  geometryManager_ = [self createManager];
  jfloat ambiant0 = 0.5f;
  jfloat diffuse0 = 1.0f - ambiant0;
  jfloat ambiant1 = 0.4f;
  jfloat diffuse1 = 1.0f - ambiant1;
  [self setLightAmbiantDiffuseWithFloat:ambiant0 withFloat:diffuse0 withFloat:ambiant1 withFloat:diffuse1];
  [self setColorMaterial];
  [self setLightModel];
  [self enableLightingOnInit];
  [self enableDepthTest];
  [self setDepthFunc];
  [self enablePolygonOffsetFill];
  [self initCulling];
  [self setBlendFunc];
  [self enableBlending];
  [self updateClearColor];
  [self setAlphaFunc];
  [self enableNormalNormalized];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk(textures_)) init__];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) reset];
  needsNewPickingBuffer_ = YES;
  [self resumeAnimator];
}

- (void)enableLightingOnInit {
  [self enableLighting];
}

- (void)initCulling {
  [self enableCulling];
  [self setCullFaceBack];
}

- (void)setDepthFunc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enablePolygonOffsetFill {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setBlendFunc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableNormalNormalized {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableFading {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableTexturesForText {
  [self enableTextures];
}

- (void)enableDash {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setDashTextureWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)useLogicalPicking {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DHitting *)getHitting {
  return nil;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer class]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_ = (jfloat) JavaLangMath_sqrtWithDouble_(2) / 2;
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_W_ = [IOSFloatArray newArrayWithFloats:(jfloat[]){ OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_, 0.0f, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_ } count:3];
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_D_ = [IOSFloatArray newArrayWithFloats:(jfloat[]){ OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_, 0.0f, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_, 0.0f } count:4];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "Renderer", NULL, 0x1, NULL, NULL },
    { "setDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView:", "setDrawable3DLists", "V", 0x1, NULL, NULL },
    { "display", NULL, "V", 0x401, NULL, NULL },
    { "updateViewAndDrawables", NULL, "V", 0x4, NULL, NULL },
    { "initRenderingValues", NULL, "V", 0x4, NULL, NULL },
    { "drawScene", NULL, "V", 0x1, NULL, NULL },
    { "needExportImage", NULL, "V", 0x1, NULL, NULL },
    { "needExportImageWithDouble:", "needExportImage", "V", 0x1, NULL, NULL },
    { "needExportImageWithDouble:withInt:withInt:", "needExportImage", "V", 0x4, NULL, NULL },
    { "selectFBO", NULL, "V", 0x4, NULL, NULL },
    { "unselectFBO", NULL, "V", 0x4, NULL, NULL },
    { "setDrawLeft", NULL, "V", 0x14, NULL, NULL },
    { "setDrawRight", NULL, "V", 0x14, NULL, NULL },
    { "setBufferLeft", NULL, "V", 0x404, NULL, NULL },
    { "setBufferRight", NULL, "V", 0x404, NULL, NULL },
    { "clearColorBuffer", NULL, "V", 0x404, NULL, NULL },
    { "clearDepthBuffer", NULL, "V", 0x404, NULL, NULL },
    { "setStencilFuncWithInt:", "setStencilFunc", "V", 0x404, NULL, NULL },
    { "exportImage", NULL, "V", 0x404, NULL, NULL },
    { "enableCulling", NULL, "V", 0x401, NULL, NULL },
    { "disableCulling", NULL, "V", 0x401, NULL, NULL },
    { "setCullFaceFront", NULL, "V", 0x401, NULL, NULL },
    { "setCullFaceBack", NULL, "V", 0x401, NULL, NULL },
    { "disableBlending", NULL, "V", 0x401, NULL, NULL },
    { "enableBlending", NULL, "V", 0x401, NULL, NULL },
    { "drawTranspNotCurved", NULL, "V", 0x4, NULL, NULL },
    { "drawTransp", NULL, "V", 0x4, NULL, NULL },
    { "setLightWithInt:", "setLight", "V", 0x404, NULL, NULL },
    { "drawNotTransp", NULL, "V", 0x4, NULL, NULL },
    { "enableTextures", NULL, "V", 0x401, NULL, NULL },
    { "disableTextures", NULL, "V", 0x401, NULL, NULL },
    { "enableMultisample", NULL, "V", 0x401, NULL, NULL },
    { "disableMultisample", NULL, "V", 0x401, NULL, NULL },
    { "enableAlphaTest", NULL, "V", 0x401, NULL, NULL },
    { "disableAlphaTest", NULL, "V", 0x401, NULL, NULL },
    { "disableLighting", NULL, "V", 0x401, NULL, NULL },
    { "enableLighting", NULL, "V", 0x401, NULL, NULL },
    { "initLighting", NULL, "V", 0x401, NULL, NULL },
    { "setLabelOriginWithOrgGeogebraCommonKernelMatrixCoords:", "setLabelOrigin", "V", 0x401, NULL, NULL },
    { "drawFaceToScreen", NULL, "V", 0x4, NULL, NULL },
    { "drawFaceToScreenEnd", NULL, "V", 0x4, NULL, NULL },
    { "setEnableClipPlanesWithBoolean:", "setEnableClipPlanes", "V", 0x1, NULL, NULL },
    { "enableClipPlanes", NULL, "V", 0x404, NULL, NULL },
    { "disableClipPlanes", NULL, "V", 0x404, NULL, NULL },
    { "enableClipPlanesIfNeeded", NULL, "V", 0x1, NULL, NULL },
    { "disableClipPlanesIfNeeded", NULL, "V", 0x1, NULL, NULL },
    { "setClipPlanesWithDoubleArray2:", "setClipPlanes", "V", 0x401, NULL, NULL },
    { "setMatrixView", NULL, "V", 0x404, NULL, NULL },
    { "unsetMatrixView", NULL, "V", 0x404, NULL, NULL },
    { "enableDepthMask", NULL, "V", 0x401, NULL, NULL },
    { "disableDepthMask", NULL, "V", 0x401, NULL, NULL },
    { "enableDepthTest", NULL, "V", 0x401, NULL, NULL },
    { "disableDepthTest", NULL, "V", 0x401, NULL, NULL },
    { "setColorMaskWithBoolean:withBoolean:withBoolean:withBoolean:", "setColorMask", "V", 0x401, NULL, NULL },
    { "draw", NULL, "V", 0x4, NULL, NULL },
    { "drawSurfacesOutline", NULL, "V", 0x404, NULL, NULL },
    { "setLineWidthWithDouble:", "setLineWidth", "V", 0x401, NULL, NULL },
    { "setColorWithOrgGeogebraCommonKernelMatrixCoords:", "setColor", "V", 0x11, NULL, NULL },
    { "setColorWithOrgGeogebraCommonAwtGColor:", "setColor", "V", 0x11, NULL, NULL },
    { "setColorWithFloat:withFloat:withFloat:withFloat:", "setColor", "V", 0x404, NULL, NULL },
    { "setArrowTypeWithInt:", "setArrowType", "V", 0x1, NULL, NULL },
    { "setArrowWidthWithDouble:", "setArrowWidth", "V", 0x1, NULL, NULL },
    { "setArrowLengthWithDouble:", "setArrowLength", "V", 0x1, NULL, NULL },
    { "setLayerWithFloat:", "setLayer", "V", 0x401, NULL, NULL },
    { "setMatrixWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:", "setMatrix", "V", 0x1, NULL, NULL },
    { "getMatrix", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x1, NULL, NULL },
    { "initMatrix", NULL, "V", 0x401, NULL, NULL },
    { "resetMatrix", NULL, "V", 0x401, NULL, NULL },
    { "getGeometryManager", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Manager;", 0x11, NULL, NULL },
    { "getTextures", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Textures;", 0x1, NULL, NULL },
    { "drawCursorWithInt:", "drawCursor", "V", 0x11, NULL, NULL },
    { "drawCompletingCursorWithDouble:withOrgGeogebraCommonKernelMatrixCoords:", "drawCompletingCursor", "V", 0x11, NULL, NULL },
    { "drawViewInFrontOf", NULL, "V", 0x1, NULL, NULL },
    { "drawMouseCursor", NULL, "V", 0x401, NULL, NULL },
    { "startPolygonsWithInt:", "startPolygons", "I", 0x1, NULL, NULL },
    { "drawPolygonWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoordsArray:", "drawPolygon", "V", 0x1, NULL, NULL },
    { "endPolygons", NULL, "V", 0x1, NULL, NULL },
    { "setMouseLocWithOrgGeogebraCommonAwtGPoint:withInt:", "setMouseLoc", "V", 0x1, NULL, NULL },
    { "setHitsWithOrgGeogebraCommonAwtGPoint:withInt:", "setHits", "V", 0x401, NULL, NULL },
    { "getLabelHitWithOrgGeogebraCommonAwtGPoint:", "getLabelHit", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x401, NULL, NULL },
    { "addOneGeoToPick", NULL, "V", 0x1, NULL, NULL },
    { "removeOneGeoToPick", NULL, "V", 0x1, NULL, NULL },
    { "createDrawableListForPickingWithInt:", "createDrawableListForPicking", "[Lorg.geogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", 0xc, NULL, NULL },
    { "setGLForPicking", NULL, "V", 0x404, NULL, NULL },
    { "pushSceneMatrix", NULL, "V", 0x404, NULL, NULL },
    { "intersectsMouse3DWithDouble:withDouble:withDouble:", "intersectsMouse3D", "Z", 0x4, NULL, NULL },
    { "doPick", NULL, "V", 0x404, NULL, NULL },
    { "pickIntersectionCurves", NULL, "V", 0x401, NULL, NULL },
    { "glLoadNameWithInt:", "glLoadName", "V", 0x401, NULL, NULL },
    { "pickWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "pick", "V", 0x1, NULL, NULL },
    { "pickWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withBoolean:withOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "pick", "V", 0x1, NULL, NULL },
    { "pickLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "pickLabel", "V", 0x1, NULL, NULL },
    { "getScreenZFromPickingDepthWithDouble:", "getScreenZFromPickingDepth", "D", 0x1, NULL, NULL },
    { "setLightPosition", NULL, "V", 0x4, NULL, NULL },
    { "getLightPosition", NULL, "[F", 0x404, NULL, NULL },
    { "setLightPositionWithFloatArray:", "setLightPosition", "V", 0x404, NULL, NULL },
    { "setLightAmbiantDiffuseWithFloat:withFloat:withFloat:withFloat:", "setLightAmbiantDiffuse", "V", 0x404, NULL, NULL },
    { "setWaitForUpdateClearColor", NULL, "V", 0x1, NULL, NULL },
    { "updateClearColor", NULL, "V", 0x4, NULL, NULL },
    { "setClearColorWithFloat:withFloat:withFloat:withFloat:", "setClearColor", "V", 0x401, NULL, NULL },
    { "initShaders", NULL, "V", 0x4, NULL, NULL },
    { "useShaderProgram", NULL, "V", 0x4, NULL, NULL },
    { "createManager", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Manager;", 0x404, NULL, NULL },
    { "setColorMaterial", NULL, "V", 0x404, NULL, NULL },
    { "setLightModel", NULL, "V", 0x404, NULL, NULL },
    { "setAlphaFunc", NULL, "V", 0x404, NULL, NULL },
    { "resumeAnimator", NULL, "V", 0x401, NULL, NULL },
    { "getLeft", NULL, "I", 0x1, NULL, NULL },
    { "getRight", NULL, "I", 0x1, NULL, NULL },
    { "getWidth", NULL, "I", 0x1, NULL, NULL },
    { "getBottom", NULL, "I", 0x1, NULL, NULL },
    { "getTop", NULL, "I", 0x1, NULL, NULL },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "getVisibleDepth", NULL, "I", 0x1, NULL, NULL },
    { "getIntervalInFrustumWithDoubleArray:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withBoolean:", "getIntervalInFrustum", "[D", 0x1, NULL, NULL },
    { "updateIntervalInFrustumWithDoubleArray:withDouble:withDouble:", "updateIntervalInFrustum", "[D", 0xa, NULL, NULL },
    { "setView", NULL, "V", 0x404, NULL, NULL },
    { "setWaitForDisableStencilLines", NULL, "V", 0x1, NULL, NULL },
    { "disableStencilLines", NULL, "V", 0x404, NULL, NULL },
    { "setWaitForSetStencilLines", NULL, "V", 0x1, NULL, NULL },
    { "setStencilLines", NULL, "V", 0x404, NULL, NULL },
    { "setProjectionMatrixForPicking", NULL, "V", 0x4, NULL, NULL },
    { "setProjectionMatrix", NULL, "V", 0x14, NULL, NULL },
    { "multProjectionMatrixForExportImage", NULL, "V", 0x404, NULL, NULL },
    { "updateOrthoValues", NULL, "V", 0x401, NULL, NULL },
    { "viewOrtho", NULL, "V", 0x404, NULL, NULL },
    { "setNearWithDouble:withDouble:", "setNear", "V", 0x11, NULL, NULL },
    { "updatePerspValues", NULL, "V", 0x4, NULL, NULL },
    { "updatePerspEye", NULL, "V", 0x2, NULL, NULL },
    { "getPerspEye", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getEyeSep", NULL, "D", 0x1, NULL, NULL },
    { "viewPersp", NULL, "V", 0x404, NULL, NULL },
    { "updateGlassesValues", NULL, "V", 0x1, NULL, NULL },
    { "viewGlasses", NULL, "V", 0x404, NULL, NULL },
    { "setColorMask", NULL, "V", 0x4, NULL, NULL },
    { "updateProjectionObliqueValues", NULL, "V", 0x1, NULL, NULL },
    { "viewOblique", NULL, "V", 0x404, NULL, NULL },
    { "getObliqueX", NULL, "D", 0x1, NULL, NULL },
    { "getObliqueY", NULL, "D", 0x1, NULL, NULL },
    { "getObliqueOrthoDirection", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setViewWithInt:withInt:withInt:withInt:", "setView", "V", 0x1, NULL, NULL },
    { "exportToClipboard", NULL, "V", 0x1, NULL, NULL },
    { "uploadToGeoGebraTube", NULL, "V", 0x1, NULL, NULL },
    { "getEyeToScreenDistance", NULL, "D", 0x1, NULL, NULL },
    { "enableTextures2D", NULL, "V", 0x401, NULL, NULL },
    { "disableTextures2D", NULL, "V", 0x401, NULL, NULL },
    { "genTextures2DWithInt:withIntArray:", "genTextures2D", "V", 0x401, NULL, NULL },
    { "bindTextureWithInt:", "bindTexture", "V", 0x401, NULL, NULL },
    { "createBufferedImageWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:", "createBufferedImage", "Lorg.geogebra.common.awt.GBufferedImage;", 0x401, NULL, NULL },
    { "createAlphaTextureWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:withOrgGeogebraCommonAwtGBufferedImage:", "createAlphaTexture", "V", 0x401, NULL, NULL },
    { "firstPowerOfTwoGreaterThanWithInt:", "firstPowerOfTwoGreaterThan", "I", 0x19, NULL, NULL },
    { "textureImage2DWithInt:withInt:withByteArray:", "textureImage2D", "V", 0x401, NULL, NULL },
    { "setTextureLinear", NULL, "V", 0x401, NULL, NULL },
    { "setTextureNearest", NULL, "V", 0x401, NULL, NULL },
    { "init__", "init", "V", 0x1, NULL, NULL },
    { "enableLightingOnInit", NULL, "V", 0x4, NULL, NULL },
    { "initCulling", NULL, "V", 0x4, NULL, NULL },
    { "setDepthFunc", NULL, "V", 0x404, NULL, NULL },
    { "enablePolygonOffsetFill", NULL, "V", 0x404, NULL, NULL },
    { "setBlendFunc", NULL, "V", 0x404, NULL, NULL },
    { "enableNormalNormalized", NULL, "V", 0x404, NULL, NULL },
    { "enableFading", NULL, "V", 0x401, NULL, NULL },
    { "enableTexturesForText", NULL, "V", 0x1, NULL, NULL },
    { "enableDash", NULL, "V", 0x401, NULL, NULL },
    { "setDashTextureWithInt:", "setDashTexture", "V", 0x401, NULL, NULL },
    { "useLogicalPicking", NULL, "Z", 0x401, NULL, NULL },
    { "getHitting", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.Hitting;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_TEXT_SCALE_FACTOR_", NULL, 0x1a, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DEFAULT_TEXT_SCALE_FACTOR },
    { "MOUSE_PICK_DEPTH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_MOUSE_PICK_DEPTH },
    { "drawHits_", NULL, 0x4, "[Lorg.geogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", NULL, NULL,  },
    { "pickingLoop_", NULL, 0x4, "I", NULL, NULL,  },
    { "drawable3DLists_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.euclidian3D.draw.Drawable3DListsForView;", NULL, NULL,  },
    { "view3D_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "m_drawingMatrix_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "geometryManager_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Manager;", NULL, NULL,  },
    { "textures_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Textures;", NULL, NULL,  },
    { "ARROW_TYPE_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ARROW_TYPE_NONE },
    { "ARROW_TYPE_SIMPLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ARROW_TYPE_SIMPLE },
    { "m_arrowType_", NULL, 0x2, "I", NULL, NULL,  },
    { "m_arrowLength_", NULL, 0x2, "D", NULL, NULL,  },
    { "m_arrowWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "DILATION_NONE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_NONE },
    { "DILATION_HIGHLITED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_HIGHLITED },
    { "dilation_", NULL, 0x2, "I", NULL, NULL,  },
    { "dilationValues_", NULL, 0x2, "[D", NULL, NULL,  },
    { "mouse_", NULL, 0x4, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "waitForPick_", NULL, 0x4, "Z", NULL, NULL,  },
    { "doPick__", "doPick", 0x2, "Z", NULL, NULL,  },
    { "PICKING_MODE_OBJECTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PICKING_MODE_OBJECTS },
    { "PICKING_MODE_LABELS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PICKING_MODE_LABELS },
    { "pickingMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "needExportImage__", "needExportImage", 0x4, "Z", NULL, NULL,  },
    { "exportImageForThumbnail_", NULL, 0x4, "Z", NULL, NULL,  },
    { "enableClipPlanes__", "enableClipPlanes", 0x4, "Z", NULL, NULL,  },
    { "waitForUpdateClipPlanes_", NULL, 0x4, "Z", NULL, NULL,  },
    { "oldGeoToPickSize_", NULL, 0x4, "I", NULL, NULL,  },
    { "geoToPickSize_", NULL, 0x4, "I", NULL, NULL,  },
    { "needsNewPickingBuffer_", NULL, 0x4, "Z", NULL, NULL,  },
    { "SQRT2_DIV2_", NULL, 0x1a, "F", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_, NULL,  },
    { "LIGHT_POSITION_W_", NULL, 0x1c, "[F", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_W_, NULL,  },
    { "LIGHT_POSITION_D_", NULL, 0x1c, "[F", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_D_, NULL,  },
    { "waitForUpdateClearColor_", NULL, 0x4, "Z", NULL, NULL,  },
    { "left_", NULL, 0x4, "I", NULL, NULL,  },
    { "right_", NULL, 0x4, "I", NULL, NULL,  },
    { "bottom_", NULL, 0x4, "I", NULL, NULL,  },
    { "top_", NULL, 0x4, "I", NULL, NULL,  },
    { "DEPTH_FACTOR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DEPTH_FACTOR },
    { "waitForDisableStencilLines_", NULL, 0x4, "Z", NULL, NULL,  },
    { "waitForSetStencilLines_", NULL, 0x4, "Z", NULL, NULL,  },
    { "eyeToScreenDistance_", NULL, 0x4, "[D", NULL, NULL,  },
    { "PERSP_NEAR_MIN_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN },
    { "perspNear_", NULL, 0x4, "[D", NULL, NULL,  },
    { "perspLeft_", NULL, 0x4, "[D", NULL, NULL,  },
    { "perspRight_", NULL, 0x4, "[D", NULL, NULL,  },
    { "perspBottom_", NULL, 0x4, "[D", NULL, NULL,  },
    { "perspTop_", NULL, 0x4, "[D", NULL, NULL,  },
    { "perspFar_", NULL, 0x4, "[D", NULL, NULL,  },
    { "perspDistratio_", NULL, 0x4, "[D", NULL, NULL,  },
    { "perspFocus_", NULL, 0x4, "[D", NULL, NULL,  },
    { "perspEye_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "glassesEyeX_", NULL, 0x4, "[D", NULL, NULL,  },
    { "glassesEyeX1_", NULL, 0x4, "[D", NULL, NULL,  },
    { "glassesEyeY_", NULL, 0x4, "[D", NULL, NULL,  },
    { "glassesEyeY1_", NULL, 0x4, "[D", NULL, NULL,  },
    { "EYE_LEFT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT },
    { "EYE_RIGHT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_RIGHT },
    { "eye_", NULL, 0x4, "I", NULL, NULL,  },
    { "obliqueX_", NULL, 0x4, "D", NULL, NULL,  },
    { "obliqueY_", NULL, 0x4, "D", NULL, NULL,  },
    { "obliqueOrthoDirection_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "exportType_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", NULL, NULL,  },
    { "export_n_", NULL, 0x4, "I", NULL, NULL,  },
    { "export_val_", NULL, 0x4, "D", NULL, NULL,  },
    { "export_min_", NULL, 0x4, "D", NULL, NULL,  },
    { "export_max_", NULL, 0x4, "D", NULL, NULL,  },
    { "export_step_", NULL, 0x4, "D", NULL, NULL,  },
    { "export_i_", NULL, 0x4, "I", NULL, NULL,  },
    { "export_num_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer = { 2, "Renderer", "org.geogebra.common.geogebra3D.euclidian3D.openGL", NULL, 0x401, 167, methods, 71, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view) {
  (void) NSObject_init(self);
  self->m_arrowType_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ARROW_TYPE_NONE;
  self->dilation_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_NONE;
  self->dilationValues_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 1.3 } count:2];
  self->waitForPick_ = NO;
  self->doPick__ = NO;
  self->pickingMode_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PICKING_MODE_OBJECTS;
  self->needExportImage__ = NO;
  self->exportImageForThumbnail_ = NO;
  self->waitForUpdateClipPlanes_ = NO;
  self->geoToPickSize_ = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_DRAWABLES_NB;
  self->needsNewPickingBuffer_ = YES;
  self->waitForUpdateClearColor_ = NO;
  self->left_ = 0;
  self->right_ = 640;
  self->bottom_ = 0;
  self->top_ = 480;
  self->waitForDisableStencilLines_ = NO;
  self->waitForSetStencilLines_ = NO;
  self->eyeToScreenDistance_ = [IOSDoubleArray newArrayWithLength:2];
  self->perspNear_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN } count:2];
  self->perspLeft_ = [IOSDoubleArray newArrayWithLength:2];
  self->perspRight_ = [IOSDoubleArray newArrayWithLength:2];
  self->perspBottom_ = [IOSDoubleArray newArrayWithLength:2];
  self->perspTop_ = [IOSDoubleArray newArrayWithLength:2];
  self->perspFar_ = [IOSDoubleArray newArrayWithLength:2];
  self->perspDistratio_ = [IOSDoubleArray newArrayWithLength:2];
  self->perspFocus_ = [IOSDoubleArray newArrayWithLength:2];
  self->glassesEyeX_ = [IOSDoubleArray newArrayWithLength:2];
  self->glassesEyeX1_ = [IOSDoubleArray newArrayWithLength:2];
  self->glassesEyeY_ = [IOSDoubleArray newArrayWithLength:2];
  self->glassesEyeY1_ = [IOSDoubleArray newArrayWithLength:2];
  self->eye_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT;
  self->exportType_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_get_NONE();
  self->view3D_ = view;
  self->textures_ = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLTextures_initWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonUtilImageManager_(self, [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getApplication])) getImageManager]);
}

void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawLeft(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self) {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) isPolarized]) {
    [self setStencilFuncWithInt:0];
  }
  else if ([self->view3D_ isStereoBuffered]) {
    [self setBufferLeft];
    [self clearColorBuffer];
  }
  self->eye_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT;
  [self setColorMask];
  [self clearDepthBuffer];
}

void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawRight(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self) {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) isPolarized]) {
    [self setStencilFuncWithInt:1];
  }
  else if ([self->view3D_ isStereoBuffered]) {
    [self setBufferRight];
    [self clearColorBuffer];
  }
  self->eye_ = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_RIGHT;
  [self setColorMask];
  [self clearDepthBuffer];
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_createDrawableListForPickingWithInt_(jint bufSize) {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initialize();
  return [IOSObjectArray newArrayWithLength:bufSize type:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_class_()];
}

IOSDoubleArray *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(IOSDoubleArray *minmax, jdouble v1, jdouble v2) {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initialize();
  if (v1 > v2) {
    jdouble v = v1;
    v1 = v2;
    v2 = v;
  }
  if (v1 > IOSDoubleArray_Get(nil_chk(minmax), 0)) *IOSDoubleArray_GetRef(minmax, 0) = v1;
  if (v2 < IOSDoubleArray_Get(minmax, 1)) *IOSDoubleArray_GetRef(minmax, 1) = v2;
  return minmax;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self) {
  self->perspEye_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(self->glassesEyeX_), 1), IOSDoubleArray_Get(nil_chk(self->glassesEyeY_), 1), -IOSDoubleArray_Get(nil_chk(self->perspFocus_), OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT), 1);
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_firstPowerOfTwoGreaterThanWithInt_(jint val) {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initialize();
  jint ret = 1;
  while (ret < val) ret *= 2;
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum)

OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values_[3];

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values() {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values_ count:3 type:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values();
}

+ (OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *e = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum class]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_POINT_OR_CURVE = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(@"POINT_OR_CURVE", 0);
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_SURFACE = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(@"SURFACE", 1);
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_LABEL = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(@"LABEL", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "POINT_OR_CURVE", "POINT_OR_CURVE", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_POINT_OR_CURVE, NULL,  },
    { "SURFACE", "SURFACE", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_SURFACE, NULL,  },
    { "LABEL", "LABEL", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_LABEL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum = { 2, "PickingType", "org.geogebra.common.geogebra3D.euclidian3D.openGL", "Renderer", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer$PickingType;>;" };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *self = [OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum)

OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values_[6];

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values() {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values_ count:6 type:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values();
}

+ (OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initialize();
  for (int i = 0; i < 6; i++) {
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *e = OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum class]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_NONE = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"NONE", 0);
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_ANIMATEDGIF = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"ANIMATEDGIF", 1);
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_THUMBNAIL_IN_GGBFILE = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"THUMBNAIL_IN_GGBFILE", 2);
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_PNG = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"PNG", 3);
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_CLIPBOARD = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"CLIPBOARD", 4);
    OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_UPLOAD_TO_GEOGEBRATUBE = new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"UPLOAD_TO_GEOGEBRATUBE", 5);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "NONE", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_NONE, NULL,  },
    { "ANIMATEDGIF", "ANIMATEDGIF", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_ANIMATEDGIF, NULL,  },
    { "THUMBNAIL_IN_GGBFILE", "THUMBNAIL_IN_GGBFILE", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_THUMBNAIL_IN_GGBFILE, NULL,  },
    { "PNG", "PNG", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_PNG, NULL,  },
    { "CLIPBOARD", "CLIPBOARD", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_CLIPBOARD, NULL,  },
    { "UPLOAD_TO_GEOGEBRATUBE", "UPLOAD_TO_GEOGEBRATUBE", 0x4019, "Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_UPLOAD_TO_GEOGEBRATUBE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum = { 2, "ExportType", "org.geogebra.common.geogebra3D.euclidian3D.openGL", "Renderer", 0x401c, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer$ExportType;>;" };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *new_OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *self = [OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum)
