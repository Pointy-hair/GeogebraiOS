//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidian3D/EuclidianController3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/euclidian/DrawableND.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianControllerCompanion.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/Hits.h"
#include "org/geogebra/common/euclidian/Previewable.h"
#include "org/geogebra/common/euclidian/event/AbstractEvent.h"
#include "org/geogebra/common/euclidian/event/PointerEventType.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianController3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianController3DCompanion.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/TextDispatcher3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawConic3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawConicSection3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawExtrusionOrConify3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawIntersectionCurve3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLine3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPoint3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPolygon3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPolyhedron3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawSegment3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/geogebra3D/euclidianFor3D/EuclidianControllerFor3DCompanion.h"
#include "org/geogebra/common/geogebra3D/kernel3D/ConstructionDefaults3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDispatcher3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D2D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanes.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConicSection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/Region.h"
#include "org/geogebra/common/kernel/RegionParameters.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoTranslate.h"
#include "org/geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/FromMeta.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/Test.h"
#include "org/geogebra/common/kernel/geos/Transformable.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/DialogManager.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/AsyncOperation.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D () {
 @public
  IOSDoubleArray *xMinMax_, *yMinMax_;
  OrgGeogebraCommonAwtGPoint *mouseLocOld_;
  OrgGeogebraCommonKernelMatrixCoords *positionOld_;
  jboolean freePointJustCreated_;
  jdouble animatedRotSpeed_;
  jdouble timeOld_;
  jint xOld_;
  OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *goodHits_;
  JavaUtilArrayList *intersectionCurveList_;
  JavaUtilArrayList *selectedPolygons3D_;
  JavaUtilArrayList *selectedPlane_;
  OrgGeogebraCommonKernelMatrixCoords *tmpCoords_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> singleIntersectionPoint_;
  OrgGeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D *textDispatcher_EuclidianController3D_;
  jboolean dialogOccurred_;
  IOSObjectArray *pyramidBasis_;
  jboolean polygonForPyramidBasis_;
  jint pointMoveMode_;
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *resultedIntersectionCurve_;
  OrgGeogebraCommonKernelGeosGeoElement *handledGeo_;
  OrgGeogebraCommonKernelMatrixCoords *startPoint3D_;
  OrgGeogebraCommonKernelMatrixCoords *startPoint3DxOy_;
  jdouble zRW_;
  OrgGeogebraCommonKernelMatrixCoords *translateDirection_;
}

- (IOSDoubleArray *)getMinMaxWithDouble:(jdouble)min
                             withDouble:(jdouble)val
                             withDouble:(jdouble)max;

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getNewPointFreeWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point;

- (void)switchPointMoveMode;

- (void)cancelSwitchPointMoveModeIfNeeded;

- (void)initPointMoveMode OBJC_METHOD_FAMILY_NONE;

+ (void)checkCoordCartesian3DWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point;

- (IOSObjectArray *)intersectionCurveWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits;

- (jboolean)createIntersectionCurvePlanePolygonWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                               withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)B;

- (jboolean)createIntersectionCurvePlaneQuadricWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                               withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)B;

- (jboolean)createIntersectionCurvePlaneQuadricLimitedWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                                      withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)B;

- (void)processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)B
                                withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)intersection
                 withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d;

+ (OrgGeogebraCommonKernelGeosGeoElement *)getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (void)decideIntersectionWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits;

- (void)addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

+ (jboolean)isModeForMovingPointWithInt:(jint)mode;

+ (jboolean)isModeForCreatingPointWithInt:(jint)mode;

- (void)setTranslateFromPointStartWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point;

- (IOSObjectArray *)rotateAroundLineWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits;

- (IOSObjectArray *)mirrorAtPlaneWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, xMinMax_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, yMinMax_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, mouseLocOld_, OrgGeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, positionOld_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, goodHits_, OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, intersectionCurveList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, selectedPolygons3D_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, selectedPlane_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, tmpCoords_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, singleIntersectionPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, textDispatcher_EuclidianController3D_, OrgGeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, pyramidBasis_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, resultedIntersectionCurve_, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, handledGeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, startPoint3D_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, startPoint3DxOy_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D, translateDirection_, OrgGeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static IOSDoubleArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, jdouble min, jdouble val, jdouble max);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_spherePointRadiusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_coneTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cylinderTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonKernelCommandsCommandsEnum_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, OrgGeogebraCommonKernelCommandsCommandsEnum *name);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_polyhedronNetWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_orthogonalPlaneWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circleAxisPointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circlePointRadiusDirectionWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_volumeWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_planeContainingWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits0);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_viewInFrontOfWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_parallelPlaneWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_pyramidOrPrismWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initPointMoveMode(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithOrgGeogebraCommonKernelKernelNDGeoPointND_(id<OrgGeogebraCommonKernelKernelNDGeoPointND> point);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_intersectionCurveWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *A, OrgGeogebraCommonKernelGeosGeoPolygon *B);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *A, OrgGeogebraCommonKernelGeosGeoElement *B);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *A, OrgGeogebraCommonKernelGeosGeoElement *B);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *A, OrgGeogebraCommonKernelGeosGeoElement *B, OrgGeogebraCommonKernelGeosGeoElement *intersection, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_decideIntersectionWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadricLimited(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadricLimited(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPolyhedron(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPolyhedron(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(jint mode);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(jint mode);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_updateStartPointWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelMatrixCoords *p);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setTranslateFromPointStartWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *geo, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateAroundLineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_mirrorAtPlaneWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits);

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (OrgGeogebraCommonEuclidianEuclidianControllerCompanion *)newCompanion {
  return [new_OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianController_(self) autorelease];
}

- (void)setView3DWithOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_view3D_(self, (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class]));
}

- (IOSDoubleArray *)getMinMaxWithDouble:(jdouble)min
                             withDouble:(jdouble)val
                             withDouble:(jdouble)max {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(self, min, val, max);
}

- (void)setMovedGeoPointWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonEuclidianEuclidianController_set_movedGeoPoint_(self, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) getInhomCoordsInD3];
  jdouble size = [movedGeoPoint_ getPointSize] * OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_DRAW_POINT_FACTOR / [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getScale];
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_xMinMax_(self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(self, [view3D_ getXmin] + size, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [view3D_ getXmax] - size));
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_yMinMax_(self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(self, [view3D_ getYmin] + size, [coords getY], [view3D_ getYmax] - size));
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_zMinMax_(self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(self, [view3D_ getZmin] + size, [coords getZ], [view3D_ getZmax] - size));
  [self updateMovedGeoPointStartValuesWithOrgGeogebraCommonKernelMatrixCoords:coords];
  [view3D_ setDragCursor];
}

- (void)updateMovedGeoPointStartValuesWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) hasPath] && ![movedGeoPoint_ hasRegion]) {
    OrgGeogebraCommonKernelMatrixCoordMatrix4x4_IdentityWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_([self getCurrentPlane]);
    [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([self getCurrentPlane])) setWithOrgGeogebraCommonKernelMatrixCoords:coords withInt:4];
  }
}

- (OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)getCurrentPlane {
  if (currentPlane_ == nil) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_currentPlane_(self, OrgGeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  }
  return currentPlane_;
}

- (void)setCurrentPlaneWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:(OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)plane {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_currentPlane_(self, plane);
}

- (void)movePointOnCurrentPlaneWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point
                                                                         withBoolean:(jboolean)useOldMouse {
  if (mouseLoc_ == nil) return;
  OrgGeogebraCommonKernelMatrixCoords *o;
  if (useOldMouse) {
    [((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLocOld_)) setLocationWithInt:((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_ withInt:mouseLoc_->y_];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_positionOld_(self, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) getCoords])) copyVector]);
    o = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickFromScenePointWithOrgGeogebraCommonKernelMatrixCoords:positionOld_ withInt:mouseLoc_->x_ - mouseLocOld_->x_ withInt:mouseLoc_->y_ - mouseLocOld_->y_];
  }
  else o = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:o];
  [self addOffsetForTranslationWithOrgGeogebraCommonKernelMatrixCoords:o];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:[self getCurrentPlane] withOrgGeogebraCommonKernelMatrixCoords:[view3D_ getHittingDirection] withOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [self checkXYMinMaxWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *) check_class_cast(companion_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion class])))) checkPointCapturingXYWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
}

- (jboolean)checkXYMinMaxWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  if ([self getMoveMode] != OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT) {
    return NO;
  }
  jboolean changed = NO;
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] > IOSDoubleArray_Get(nil_chk(xMinMax_), 1)) {
    [v setXWithDouble:IOSDoubleArray_Get(xMinMax_, 1)];
    changed = YES;
  }
  else if ([v getX] < IOSDoubleArray_Get(xMinMax_, 0)) {
    [v setXWithDouble:IOSDoubleArray_Get(xMinMax_, 0)];
    changed = YES;
  }
  if ([v getY] > IOSDoubleArray_Get(nil_chk(yMinMax_), 1)) {
    [v setYWithDouble:IOSDoubleArray_Get(yMinMax_, 1)];
    changed = YES;
  }
  else if ([v getY] < IOSDoubleArray_Get(yMinMax_, 0)) {
    [v setYWithDouble:IOSDoubleArray_Get(yMinMax_, 0)];
    changed = YES;
  }
  return changed;
}

- (void)setMouseInformationWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point {
  [self setMouseOriginWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:point];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setWillingDirectionWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getHittingDirection]];
}

- (void)setMouseOriginWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point {
  if (mouseLoc_ == nil) return;
  OrgGeogebraCommonKernelMatrixCoords *o = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:o];
  [self addOffsetForTranslationWithOrgGeogebraCommonKernelMatrixCoords:o];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setWillingCoordsWithOrgGeogebraCommonKernelMatrixCoords:o];
}

- (void)addOffsetForTranslationWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)o {
  if (moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o)) setAddWithOrgGeogebraCommonKernelMatrixCoords:o withOrgGeogebraCommonKernelMatrixCoords:translationVec3D_];
  }
}

- (void)moveTextAbsoluteLocation {
  OrgGeogebraCommonKernelMatrixCoords *o = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:o];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withOrgGeogebraCommonKernelMatrixCoords:[view3D_ getHittingDirection] withOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(movedGeoText_)) getStartPoint], [OrgGeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) getX] - [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(startPoint3DxOy_)) getX] withDouble:[tmpCoords_ getY] - [startPoint3DxOy_ getY] withDouble:1.0];
}

- (OrgGeogebraCommonEuclidianHits *)getRegionHitsWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_REGION3D() withOrgGeogebraCommonEuclidianHits:tempArrayList_];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getNewPointFreeWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, point);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getNewPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                                                   withBoolean:(jboolean)onPathPossible
                                                                                   withBoolean:(jboolean)inRegionPossible
                                                                                   withBoolean:(jboolean)intersectPossible
                                                                                   withBoolean:(jboolean)complex {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> ret;
  {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> firstPoint;
    switch ([view3D_ getCursor3DType]) {
      case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_FREE:
      point3D = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, point);
      ret = point3D;
      OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point3D);
      break;
      case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_PATH:
      if (onPathPossible) {
        id<OrgGeogebraCommonKernelPath> path = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) getPath];
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelPath>) nil_chk(path)) toGeoElement])) isGeoElement3D] || ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([path toGeoElement])) isGeoList] && [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([path toGeoElement], [OrgGeogebraCommonKernelGeosGeoList class])))) containsGeoElement3D])) {
          point3D = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Point3DWithNSString:nil withOrgGeogebraCommonKernelPath:path withBoolean:NO], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
          [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setWillingCoordsWithOrgGeogebraCommonKernelMatrixCoords:[point getCoords]];
          [point3D doPath];
          [point3D setWillingCoordsUndefined];
          [point3D setWillingDirectionUndefined];
          ret = point3D;
          OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point3D);
        }
        else {
          OrgGeogebraCommonKernelMatrixCoords *coords = [point getCoordsInD2];
          OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, [self createNewPoint2DWithNSString:nil withBoolean:NO withOrgGeogebraCommonKernelPath:path withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withBoolean:NO withBoolean:NO]);
          return pointCreated_;
        }
      }
      else {
        OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
        return nil;
      }
      break;
      case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION:
      if (inRegionPossible) {
        id<OrgGeogebraCommonKernelRegion> region = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) getRegion];
        if (region == [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getXOYPlane]) {
          point3D = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, point);
          ret = point3D;
          OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point3D);
        }
        else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(region, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
          OrgGeogebraCommonKernelMatrixCoords *coords = [point getCoords];
          point3D = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Point3DInWithNSString:nil withOrgGeogebraCommonKernelRegion:region withOrgGeogebraCommonKernelMatrixCoords:coords withBoolean:YES withBoolean:NO], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
          [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) doRegion];
          [point3D setWillingCoordsUndefined];
          [point3D setWillingDirectionUndefined];
          ret = point3D;
          OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, point3D);
        }
        else {
          OrgGeogebraCommonKernelMatrixCoords *coords = [point getCoordsInD2];
          OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, [self createNewPoint2DWithNSString:nil withBoolean:NO withOrgGeogebraCommonKernelRegion:region withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withBoolean:NO withBoolean:NO]);
          return pointCreated_;
        }
      }
      else {
        OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
        return nil;
      }
      break;
      case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT:
      if (intersectPossible) {
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> intersectionPoint = [view3D_ getIntersectionPoint];
        [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(intersectionPoint)) getParentAlgorithm])) addToConstructionList];
        [intersectionPoint setLabelWithNSString:nil];
        OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, intersectionPoint);
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(intersectionPoint, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoElement3D]) {
          point3D = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(intersectionPoint, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
        }
        else {
          return intersectionPoint;
        }
      }
      else {
        point3D = nil;
        OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, nil);
      }
      return point3D;
      case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY:
      firstPoint = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getFirstHitWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
      if (firstPoint == nil) firstPoint = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getMovedGeoPoint], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
      return firstPoint;
      case OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE:
      default:
      OrgGeogebraCommonEuclidianEuclidianController_set_pointCreated_(self, [super getNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:onPathPossible withBoolean:inRegionPossible withBoolean:intersectPossible withBoolean:NO]);
      return pointCreated_;
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ret, [OrgGeogebraCommonKernelGeosGeoElement class])))) update];
  [self setMovedGeoPointWithOrgGeogebraCommonKernelGeosGeoElement:point3D];
  [view3D_ setCursor3DTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY];
  [view3D_ updateMatrixForCursor3D];
  return ret;
}

- (void)createNewPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)sourcePoint {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(sourcePoint)) getCoordsInD3] withBoolean:NO];
  [point3D setPathWithOrgGeogebraCommonKernelPath:[sourcePoint getPath]];
  [point3D setRegionWithOrgGeogebraCommonKernelRegion:[sourcePoint getRegion]];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(sourcePoint, [OrgGeogebraCommonKernelGeosGeoElement class])) isIndependent] || ![((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(sourcePoint, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoElement3D]) [point3D setMoveNormalDirectionWithOrgGeogebraCommonKernelMatrixCoords:OrgGeogebraCommonKernelMatrixCoords_get_VZ_()];
  else if ([sourcePoint hasRegion]) [point3D setMoveNormalDirectionWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelRegionParameters *) nil_chk([sourcePoint getRegionParameters])) getNormal]];
  [view3D_ setCursor3DTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY];
  [point3D setMoveModeWithInt:[sourcePoint getMoveMode]];
  [point3D setPointSizeWithInt:[sourcePoint getPointSize]];
}

- (void)createNewPointIntersectionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)intersectionPoint {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(intersectionPoint)) getCoordsInD3])) getInhomCoords] withBoolean:NO];
  [view3D_ setCursor3DTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT];
  [view3D_ setIntersectionPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:intersectionPoint];
}

- (jboolean)createNewPointInRegionPossibleWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  return [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) getLastHitType] == OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getSingleIntersectionPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] || [hits size] < 2) return nil;
  if (mouseLoc_ == nil) return nil;
  OrgGeogebraCommonKernelGeosGeoElement *a = [hits getWithInt:0];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(a)) isGeoLine]) {
    while ([hits size] >= 2) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:1])) isGeoPlane] && OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getConfigLinePlaneWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(a, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)), ((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([hits getWithInt:1], @protocol(OrgGeogebraCommonKernelKernelNDGeoCoordSys2D)))) == OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_get_CONTAINED()) [hits removeWithInt:1];
      else break;
    }
  }
  else if ([a isGeoConic]) {
    while ([hits size] >= 2) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:1])) isGeoPlane] && OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithOrgGeogebraCommonKernelMatrixCoordSys_withOrgGeogebraCommonKernelMatrixCoordSys_(([((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) getCoordSys]), ([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([hits getWithInt:1], @protocol(OrgGeogebraCommonKernelKernelNDGeoCoordSys2D))))) getCoordSys])) == OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_get_RESULTCATEGORY_CONTAINED_()) [hits removeWithInt:1];
      else break;
    }
  }
  else if ([a isGeoPolygon]) {
    while ([hits size] >= 2) {
      if ([OrgGeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:[hits getWithInt:1]] && OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithOrgGeogebraCommonKernelMatrixCoordSys_withOrgGeogebraCommonKernelMatrixCoordSys_(([((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoPolygon class])) getCoordSys]), ([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([hits getWithInt:1], @protocol(OrgGeogebraCommonKernelKernelNDGeoCoordSys2D))))) getCoordSys])) == OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_get_RESULTCATEGORY_CONTAINED_()) [hits removeWithInt:1];
      else break;
    }
  }
  if ([hits size] < 2) return nil;
  OrgGeogebraCommonKernelGeosGeoElement *b = [hits getWithInt:1];
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, nil);
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) setSilentModeWithBoolean:YES];
  if (![a isGeoElement3D] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoElement3D]) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getToSceneMatrix])) mulWithOrgGeogebraCommonKernelMatrixCoords:[view3D_ getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_]])) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withOrgGeogebraCommonKernelMatrixCoords:[view3D_ getViewDirection] withOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
    xRW_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) getX];
    yRW_ = [tmpCoords_ getY];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion *) check_class_cast(companion_, [OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion class])))) getSingleIntersectionPointFrom2DWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b withBoolean:NO]);
  }
  else if ((([a isGeoLine] || [OrgGeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:a]) && ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine])) || ([a isGeoLine] && [OrgGeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:b])) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]));
  }
  else if ([a isGeoLine]) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoConic]) {
      OrgGeogebraCommonKernelMatrixCoords *picked = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
      OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineConicSingleWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(a, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(b, [OrgGeogebraCommonKernelKernelNDGeoConicND class]) withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withOrgGeogebraCommonKernelMatrixCoordMatrix:[view3D_ getToScreenMatrix]]);
    }
    else if ([b isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) {
      OrgGeogebraCommonKernelMatrixCoords *picked = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
      OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineQuadricSingleWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(a, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(b, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withOrgGeogebraCommonKernelMatrixCoordMatrix4x4:[view3D_ getToScreenMatrix]]);
    }
  }
  else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine]) {
    if ([a isGeoConic]) {
      OrgGeogebraCommonKernelMatrixCoords *picked = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
      OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineConicSingleWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(b, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a, [OrgGeogebraCommonKernelKernelNDGeoConicND class]) withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withOrgGeogebraCommonKernelMatrixCoordMatrix:[view3D_ getToScreenMatrix]]);
    }
    else if ([a isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) {
      OrgGeogebraCommonKernelMatrixCoords *picked = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
      OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineQuadricSingleWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(b, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(a, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withOrgGeogebraCommonKernelMatrixCoordMatrix4x4:[view3D_ getToScreenMatrix]]);
    }
  }
  else if ([a isGeoConic] && [b isGeoConic]) {
    OrgGeogebraCommonKernelMatrixCoords *picked = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_singleIntersectionPoint_(self, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectConicsSingleWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a, [OrgGeogebraCommonKernelKernelNDGeoConicND class]) withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(b, [OrgGeogebraCommonKernelKernelNDGeoConicND class]) withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] withDouble:[picked getY] withOrgGeogebraCommonKernelMatrixCoordMatrix:[view3D_ getToScreenMatrix]]);
  }
  [kernel_ setSilentModeWithBoolean:NO];
  if (singleIntersectionPoint_ == nil) return nil;
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(singleIntersectionPoint_)) isDefined]) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(singleIntersectionPoint_, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoElement3D]) {
      OrgGeogebraCommonKernelMatrixCoords *picked = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
      OrgGeogebraCommonKernelMatrixCoords *toScreenCoords = [view3D_ projectOnScreenWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(singleIntersectionPoint_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) getCoords])) getCoordsLast1]];
      if (JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(picked)) getX] - [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(toScreenCoords)) getX]) > 15 || JavaLangMath_absWithDouble_([picked getY] - [toScreenCoords getY]) > 15) {
        return nil;
      }
    }
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) setIntersectionThicknessWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
    [singleIntersectionPoint_ setCartesian3D];
    [singleIntersectionPoint_ update];
    return singleIntersectionPoint_;
  }
  return nil;
}

- (IOSObjectArray *)getSelectedPoints3D {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedPoints_)) size] type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()];
  [self getSelectedPointsNDWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:ret];
  return ret;
}

- (IOSObjectArray *)getSelectedLines3D {
  IOSObjectArray *lines = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedLines_)) size] type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_class_()];
  [self getSelectedLinesNDWithOrgGeogebraCommonKernelKernelNDGeoLineNDArray:lines];
  return lines;
}

- (void)circleOrSphereWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)num {
  IOSObjectArray *points = [self getSelectedPointsND];
  [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) SphereWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelArithmeticNumberValue:num];
}

- (jboolean)spherePointRadiusWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_spherePointRadiusWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)coneTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_coneTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)cylinderTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cylinderTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)archimedeanSolidWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                       withOrgGeogebraCommonKernelCommandsCommandsEnum:(OrgGeogebraCommonKernelCommandsCommandsEnum *)name {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonKernelCommandsCommandsEnum_(self, hits, name);
}

- (IOSObjectArray *)polyhedronNetWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_polyhedronNetWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)orthogonalPlaneWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_orthogonalPlaneWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)circleAxisPointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circleAxisPointWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)circlePointRadiusDirectionWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circlePointRadiusDirectionWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D *)getTextDispatcher {
  if (textDispatcher_EuclidianController3D_ == nil) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_textDispatcher_EuclidianController3D_(self, new_OrgGeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(kernel_, view3D_));
  }
  return textDispatcher_EuclidianController3D_;
}

- (jboolean)volumeWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_volumeWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)planeContainingWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits0 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_planeContainingWithOrgGeogebraCommonEuclidianHits_(self, hits0);
}

- (jboolean)viewInFrontOfWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_viewInFrontOfWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)parallelPlaneWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_parallelPlaneWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (void)setDialogOccurred {
  dialogOccurred_ = YES;
}

- (IOSObjectArray *)extrusionOrConifyWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)pyramidOrPrismWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_pyramidOrPrismWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getMovedGeoPoint {
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoElement class]);
}

- (void)wrapMouseReleasedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  if (!draggingOccured_ && ![((OrgGeogebraCommonMainApp *) nil_chk(app_)) isControlDownWithOrgGeogebraCommonEuclidianEventAbstractEvent:e]) [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) switchMoveCursor];
  [super wrapMouseReleasedWithOrgGeogebraCommonEuclidianEventAbstractEvent:e];
}

- (void)processReleaseForMovedGeoPointWithBoolean:(jboolean)rightClick {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) updatePointDecorationsWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:nil];
  if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(mode_)) {
    if (freePointJustCreated_) {
      freePointJustCreated_ = NO;
    }
    else {
      if (!draggingOccured_ && !rightClick && [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(movedGeoPoint_)) isIndependent]) {
        if (mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE && ![movedGeoPoint_ isGeoElement3D]) {
          OrgGeogebraCommonKernelGeosGeoPoint *replaceable = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(movedGeoPoint_, [OrgGeogebraCommonKernelGeosGeoPoint class]);
          OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction];
          jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
          [cons setSuppressLabelCreationWithBoolean:YES];
          OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *newGeo = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([kernel_ getManager3D])) Point3DWithNSString:nil withDouble:[replaceable getInhomX] withDouble:[replaceable getInhomY] withDouble:0 withBoolean:NO], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
          [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
          @try {
            [cons replaceWithOrgGeogebraCommonKernelGeosGeoElement:replaceable withOrgGeogebraCommonKernelGeosGeoElement:newGeo];
          }
          @catch (JavaLangException *e) {
            [((JavaLangException *) nil_chk(e)) printStackTrace];
          }
          @finally {
            NSString *newLabel = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(newGeo)) isLabelSet] ? [newGeo getLabelSimple] : [replaceable getLabelSimple];
            OrgGeogebraCommonKernelGeosGeoElement *geo = [kernel_ lookupLabelWithNSString:newLabel];
            [self setMovedGeoPointWithOrgGeogebraCommonKernelGeosGeoElement:geo];
            OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *hits = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getHits3D];
            [((OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(hits)) init__];
            [hits addWithId:geo];
            [((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) clearSelectedGeosWithBoolean:NO withBoolean:NO];
            [((OrgGeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) addSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES withBoolean:YES];
          }
        }
        OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(self);
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) getCursor3D])) setMoveModeWithInt:[movedGeoPoint_ getMoveMode]];
        [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) setDefaultCursorWillBeHitCursor];
      }
    }
  }
  if ([movedGeoPoint_ isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]]) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *movedGeoPoint3D = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(movedGeoPoint_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(movedGeoPoint3D)) setWillingCoordsUndefined];
    [movedGeoPoint3D setWillingDirectionUndefined];
  }
  [super processReleaseForMovedGeoPointWithBoolean:rightClick];
}

- (void)switchPointMoveMode {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(self);
}

- (void)cancelSwitchPointMoveModeIfNeeded {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(self);
}

- (void)initPointMoveMode {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initPointMoveMode(self);
}

- (jint)getPointMoveMode {
  return pointMoveMode_;
}

- (void)updateInput3D {
}

- (void)wrapMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  mouseMoved_ = NO;
  [super wrapMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:e];
}

- (void)processMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) setHits3DWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
  [self setMouseMovedEventWithOrgGeogebraCommonEuclidianEventAbstractEvent:e];
  mouseMoved_ = YES;
  [view3D_ repaintView];
}

- (void)setMouseMovedEventWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_mouseEvent_(self, e);
}

- (void)update {
  [self processMouseMoved];
}

- (void)processMouseMoved {
  if (mouseMoved_ && [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) hasMouse]) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) updateCursor3D];
    [super processMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:mouseEvent_];
    mouseMoved_ = NO;
  }
}

- (void)initNewModeWithInt:(jint)mode {
  [super initNewModeWithInt:mode];
}

- (id<OrgGeogebraCommonEuclidianPreviewable>)switchPreviewableForInitNewModeWithInt:(jint)mode {
  id<OrgGeogebraCommonEuclidianPreviewable> previewDrawable = nil;
  hideIntersection_ = NO;
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
    previewDrawable = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) createPreviewSphereWithJavaUtilArrayList:selectedPoints_];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    previewDrawable = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) createPreviewExtrusionWithJavaUtilArrayList:selectedPolygons_ withJavaUtilArrayList:selectedConicsND_];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    previewDrawable = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) createPreviewConifyWithJavaUtilArrayList:selectedPolygons_ withJavaUtilArrayList:selectedConicsND_];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    previewDrawable = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) createPreviewPyramidOrPrismWithJavaUtilArrayList:selectedPoints_ withJavaUtilArrayList:selectedPolygons_ withInt:mode];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
    break;
    default:
    previewDrawable = [super switchPreviewableForInitNewModeWithInt:mode];
    break;
  }
  return previewDrawable;
}

- (jboolean)getSelectablesWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  OrgGeogebraCommonEuclidianHits *top = [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHitsWithInt:1];
  [super getSelectablesWithOrgGeogebraCommonEuclidianHits:top];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((OrgGeogebraCommonEuclidianHits *) nil_chk(top)) getFirstHitWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND()], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  if (point != nil) [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) updateCursor3DWithOrgGeogebraCommonEuclidianHits:hits];
  return NO;
}

- (void)processModeLock {
}

- (jboolean)processRightPressFor3D {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) isRotAnimated]) {
    [view3D_ stopRotAnimation];
    viewRotationOccured_ = YES;
  }
  OrgGeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) rememberOrigins];
  [view_ setDefaultCursor];
  timeOld_ = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getMillisecondTime];
  xOld_ = ((OrgGeogebraCommonAwtGPoint *) nil_chk(startLoc_))->x_;
  animatedRotSpeed_ = 0;
  return YES;
}

- (jboolean)processRotate3DView {
  jlong time = JavaLangSystem_currentTimeMillis();
  jint x = ((OrgGeogebraCommonAwtGPoint *) nil_chk(mouseLoc_))->x_;
  animatedRotSpeed_ = (jdouble) (x - xOld_) / (time - timeOld_);
  timeOld_ = time;
  xOld_ = x;
  [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setCoordSystemFromMouseMoveWithInt:mouseLoc_->x_ - ((OrgGeogebraCommonAwtGPoint *) nil_chk(startLoc_))->x_ withInt:mouseLoc_->y_ - startLoc_->y_ withInt:OrgGeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW];
  viewRotationOccured_ = YES;
  [view_ repaintView];
  return YES;
}

- (jboolean)processRightReleaseFor3DWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (viewRotationOccured_) {
    viewRotationOccured_ = NO;
    [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) updateCursor3D];
    [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setHitCursor];
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast(view_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])) setRotContinueAnimationWithDouble:[app_ getMillisecondTime] - timeOld_ withDouble:animatedRotSpeed_];
    return YES;
  }
  return NO;
}

- (jboolean)switchModeForProcessModeWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                           withBoolean:(jboolean)isControlDown
                               withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback {
  jboolean changedKernel = NO;
  IOSObjectArray *ret = nil;
  switch (mode_) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_intersectionCurveWithOrgGeogebraCommonEuclidianHits_(self, hits);
    if (changedKernel) {
      [((JavaUtilArrayList *) nil_chk(intersectionCurveList_)) removeWithId:resultedIntersectionCurve_];
      [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) setPreviewWithOrgGeogebraCommonEuclidianPreviewable:nil];
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
    ret = [self threePointsWithOrgGeogebraCommonEuclidianHits:hits withInt:mode_];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_planeContainingWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_PLANE:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_orthogonalPlaneWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_parallelPlaneWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithOrgGeogebraCommonEuclidianHits_(self, hits);
    if (![((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getRenderer])) useLogicalPicking] && ret != nil) {
      [((OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk([view3D_ getHits3D])) init__];
    }
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonKernelCommandsCommandsEnum_(self, hits, OrgGeogebraCommonKernelCommandsCommandsEnum_get_Tetrahedron());
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonKernelCommandsCommandsEnum_(self, hits, OrgGeogebraCommonKernelCommandsCommandsEnum_get_Cube());
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_pyramidOrPrismWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
    ret = [self circleOrSphere2WithOrgGeogebraCommonEuclidianHits:hits withInt:mode_];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
    changedKernel = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_spherePointRadiusWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
    changedKernel = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_coneTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
    changedKernel = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cylinderTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_NET:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_polyhedronNetWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF:
    changedKernel = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_viewInFrontOfWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_AXIS_POINT:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circleAxisPointWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS_DIRECTION:
    changedKernel = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circlePointRadiusDirectionWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_PLANE:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_mirrorAtPlaneWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_AROUND_LINE:
    ret = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateAroundLineWithOrgGeogebraCommonEuclidianHits_(self, [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getTopHits]);
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME:
    changedKernel = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_volumeWithOrgGeogebraCommonEuclidianHits_(self, hits);
    break;
    default:
    return [super switchModeForProcessModeWithOrgGeogebraCommonEuclidianHits:hits withBoolean:isControlDown withOrgGeogebraCommonUtilAsyncOperation:callback];
  }
  return [self endOfSwitchModeForProcessModeWithOrgGeogebraCommonKernelGeosGeoElementArray:ret withBoolean:changedKernel withOrgGeogebraCommonUtilAsyncOperation:callback];
}

- (void)switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  switch (mode_) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygonsIfNotOnlyCS2D];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_AREA:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_NET:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removeAllPolygonsButOne];
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT:
    break;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE:
    break;
    default:
    [super switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:hits];
  }
}

- (IOSObjectArray *)switchModeForThreePointsWithInt:(jint)mode {
  {
    IOSObjectArray *points;
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *ret0;
    IOSObjectArray *ret;
    switch (mode) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
      points = [self getSelectedPointsND];
      ret0 = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
      ret = [IOSObjectArray arrayWithObjects:(id[]){ ret0 } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      default:
      return [super switchModeForThreePointsWithInt:mode];
    }
  }
}

- (IOSObjectArray *)switchModeForCircleOrSphere2WithInt:(jint)mode {
  {
    IOSObjectArray *points;
    IOSObjectArray *ret;
    switch (mode) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
      points = [self getSelectedPointsND];
      ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) SphereWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]);
      return ret;
      default:
      return [super switchModeForCircleOrSphere2WithInt:mode];
    }
  }
}

- (void)createNewPointForModePointWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                         withBoolean:(jboolean)complex {
  [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
}

- (void)createNewPointForModeOtherWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
}

- (void)switchModeForMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)e {
  OrgGeogebraCommonEuclidianHits *hits;
  OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *type = [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getType];
  {
    jboolean createPointAnywhere;
    switch (mode_) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_PLANE:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:NO withBoolean:NO withBoolean:YES];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:NO withBoolean:YES withBoolean:NO];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removeAllPlanes];
      [self switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:hits];
      OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithOrgGeogebraCommonEuclidianHits_(self, hits);
      [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) updatePreviewable];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      createPointAnywhere = NO;
      if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1 || [self selPoints] != 0) {
        createPointAnywhere = YES;
      }
      else {
        if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3DType] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION) {
          if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([view3D_ getCursor3D])) getRegion] == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
            createPointAnywhere = YES;
          }
        }
      }
      if (createPointAnywhere) {
        [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
      }
      else {
        [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:YES withBoolean:NO];
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      if ([self selPolygons] == 1 || [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getPolyCount] == 0) {
        [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO];
      }
      else {
        [self switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:hits];
        [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:NO withBoolean:NO withBoolean:YES withBoolean:NO];
      }
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATEVIEW:
      OrgGeogebraCommonEuclidianEuclidianController_set_startLoc_(self, mouseLoc_);
      [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) rememberOrigins];
      moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW;
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_AXIS_POINT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS_DIRECTION:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) removePolygons];
      if ([hits size] == 0) [self createNewPointWithOrgGeogebraCommonEuclidianHits:hits withBoolean:NO withBoolean:YES withBoolean:YES];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      break;
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_NET:
      [self setViewHitsWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
      hits = [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits];
      break;
      default:
      [super switchModeForMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:e];
    }
  }
}

- (jboolean)switchModeForMouseReleasedWithInt:(jint)mode
           withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                  withBoolean:(jboolean)changedKernel
                                  withBoolean:(jboolean)control
withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
    return YES;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D *) check_class_cast([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPreviewDrawable], [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D class])))) createPolyhedron];
    return YES;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D *) check_class_cast([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPreviewDrawable], [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D class])))) createPolyhedron];
    return YES;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    return YES;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_PLANE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_AROUND_LINE:
    return YES;
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF:
    return YES;
    default:
    return [super switchModeForMouseReleasedWithInt:mode withOrgGeogebraCommonEuclidianHits:hits withBoolean:changedKernel withBoolean:control withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
  }
}

- (OrgGeogebraCommonEuclidianHits *)addPointCreatedForMouseReleasedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(pointCreated_, [OrgGeogebraCommonKernelGeosGeoElement class])];
  return hits;
}

- (void)showDrawingPadPopupWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)mouseLoc1 {
  [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getGuiManager])) showDrawingPadPopup3DWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view_ withOrgGeogebraCommonAwtGPoint:mouseLoc1];
}

- (IOSObjectArray *)intersectWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if ([hits containsGeoPoint]) {
    [hits clear];
    return nil;
  }
  [hits removePolygonsIfSidePresent];
  if (goodHits_ == nil) OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_goodHits_(self, new_OrgGeogebraCommonGeogebra3DEuclidian3DHits3D_init());
  else [goodHits_ clear];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> singlePoint = nil;
  if ([self selGeos] == 0) {
    if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3DType] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT) {
      singlePoint = singleIntersectionPoint_;
    }
    else {
      singlePoint = [self getSingleIntersectionPointWithOrgGeogebraCommonEuclidianHits:hits];
    }
    if (singlePoint != nil) {
      [hits clear];
      [hits addWithId:IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(singlePoint, [OrgGeogebraCommonKernelGeosGeoElement class])) getParentAlgorithm])) getInput]), 0)];
      [hits addWithId:IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(singlePoint, [OrgGeogebraCommonKernelGeosGeoElement class])) getParentAlgorithm])) getInput]), 1)];
    }
    else {
      [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnumArray:[IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelGeosTestEnum_get_GEOLINEND(), OrgGeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2D(), OrgGeogebraCommonKernelGeosTestEnum_get_GEOQUADRICND() } count:3 type:OrgGeogebraCommonKernelGeosTestEnum_class_()] withBoolean:NO withOrgGeogebraCommonEuclidianHits:goodHits_];
      hits = [hits getHitsWithInt:1];
    }
  }
  else if ([self selGeos] == 1) {
    if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1 || OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self) == 1) {
      [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnumArray:[IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2D(), OrgGeogebraCommonKernelGeosTestEnum_get_GEOQUADRIC3D() } count:2 type:OrgGeogebraCommonKernelGeosTestEnum_class_()] withBoolean:YES withOrgGeogebraCommonEuclidianHits:goodHits_];
    }
    else {
      [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnumArray:[IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelGeosTestEnum_get_GEOLINEND(), OrgGeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2D(), OrgGeogebraCommonKernelGeosTestEnum_get_GEOQUADRICND() } count:3 type:OrgGeogebraCommonKernelGeosTestEnum_class_()] withBoolean:NO withOrgGeogebraCommonEuclidianHits:goodHits_];
    }
    OrgGeogebraCommonKernelGeosGeoElement *selected = [((JavaUtilArrayList *) nil_chk(selectedGeos_)) getWithInt:0];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(selected)) isGeoLine]) {
      while ([((OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(goodHits_)) size] >= 1) {
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([goodHits_ getWithInt:0])) isGeoPlane] && OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getConfigLinePlaneWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(selected, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)), ((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([goodHits_ getWithInt:0], @protocol(OrgGeogebraCommonKernelKernelNDGeoCoordSys2D)))) == OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_get_CONTAINED()) [goodHits_ removeWithInt:0];
        else break;
      }
    }
    else if ([selected isGeoConic]) {
      while ([((OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(goodHits_)) size] >= 1) {
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([goodHits_ getWithInt:0])) isGeoPlane] && OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithOrgGeogebraCommonKernelMatrixCoordSys_withOrgGeogebraCommonKernelMatrixCoordSys_(([((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(selected, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) getCoordSys]), ([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([goodHits_ getWithInt:0], @protocol(OrgGeogebraCommonKernelKernelNDGeoCoordSys2D))))) getCoordSys])) == OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_get_RESULTCATEGORY_CONTAINED_()) [goodHits_ removeWithInt:0];
        else break;
      }
    }
    else if ([selected isGeoPolygon]) {
      while ([((OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(goodHits_)) size] >= 1) {
        if ([OrgGeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:[goodHits_ getWithInt:0]] && OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithOrgGeogebraCommonKernelMatrixCoordSys_withOrgGeogebraCommonKernelMatrixCoordSys_(([((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(selected, [OrgGeogebraCommonKernelGeosGeoPolygon class])) getCoordSys]), ([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([goodHits_ getWithInt:0], @protocol(OrgGeogebraCommonKernelKernelNDGeoCoordSys2D))))) getCoordSys])) == OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_get_RESULTCATEGORY_CONTAINED_()) [goodHits_ removeWithInt:0];
        else break;
      }
    }
    if ([((OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(goodHits_)) size] == 0) {
      return nil;
    }
    [hits clear];
    [hits addWithId:selected];
    [hits addWithId:[goodHits_ getWithInt:0]];
  }
  [self addSelectedLineWithOrgGeogebraCommonEuclidianHits:hits withInt:10 withBoolean:YES];
  [self addSelectedConicWithOrgGeogebraCommonEuclidianHits:hits withInt:10 withBoolean:YES];
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, YES);
  [self addSelectedPolygonWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:YES];
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, YES);
  if ([self selLines] >= 2) {
    IOSObjectArray *lines = [self getSelectedLinesND];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinesWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithOrgGeogebraCommonKernelKernelNDGeoPointND_(point);
    return [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  else if ([self selLines] == 1) {
    if ([self selConics] >= 1) {
      id<OrgGeogebraCommonKernelKernelNDGeoLineND> line = IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0);
      OrgGeogebraCommonKernelKernelNDGeoConicND *conic = IOSObjectArray_Get(nil_chk([self getSelectedConicsND]), 0);
      IOSObjectArray *ret = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray *points = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:line withOrgGeogebraCommonKernelKernelNDGeoConicND:conic];
      for (jint i = 0; i < 2; i++) IOSObjectArray_Set(ret, i, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), i), [OrgGeogebraCommonKernelGeosGeoElement class]));
      return ret;
    }
    else if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self) == 1) {
      id<OrgGeogebraCommonKernelKernelNDGeoLineND> line = IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0);
      OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(self)), 0);
      IOSObjectArray *ret = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray *points = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectLineQuadricWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:line withOrgGeogebraCommonKernelKernelNDGeoQuadricND:quadric];
      for (jint i = 0; i < 2; i++) IOSObjectArray_Set(ret, i, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), i), [OrgGeogebraCommonKernelGeosGeoElement class]));
      return ret;
    }
    else if ([self selPolygons] == 1) {
      return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectionPointWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0) withOrgGeogebraCommonKernelGeosGeoSurfaceFinite:IOSObjectArray_Get(nil_chk([self getSelectedPolygons]), 0)];
    }
    else if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0), [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0)]);
      return ret;
    }
  }
  else if ([self selConics] >= 2) {
    IOSObjectArray *conics = [self getSelectedConicsND];
    IOSObjectArray *ret = [IOSObjectArray arrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *points = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getAlgoDispatcher])) IntersectConicsWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(conics), 0) withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(conics, 1)];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
      OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithOrgGeogebraCommonKernelKernelNDGeoPointND_(IOSObjectArray_Get(points, i));
      IOSObjectArray_Set(ret, i, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class]));
    }
    return ret;
  }
  else if ([self selConics] >= 1 && OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0);
    OrgGeogebraCommonKernelKernelNDGeoConicND *conic = IOSObjectArray_Get(nil_chk([self getSelectedConicsND]), 0);
    IOSObjectArray *ret = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray *points = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectPlaneConicWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:plane withOrgGeogebraCommonKernelKernelNDGeoConicND:conic];
    for (jint i = 0; i < 2; i++) IOSObjectArray_Set(ret, i, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), i), [OrgGeogebraCommonKernelGeosGeoElement class]));
    return ret;
  }
  else if ([self selPolygons] == 1 && OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1) {
    return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectionPointWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0) withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk([self getSelectedPolygons]), 0)];
  }
  return nil;
}

+ (void)checkCoordCartesian3DWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithOrgGeogebraCommonKernelKernelNDGeoPointND_(point);
}

- (JavaUtilArrayList *)getIntersectionCurves {
  return intersectionCurveList_;
}

- (IOSObjectArray *)intersectionCurveWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_intersectionCurveWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (jboolean)createIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                   withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)B {
  jboolean intersectable = NO;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(intersectionCurveList_)) size]; ++i) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *intersection = [intersectionCurveList_ getWithInt:i];
    if ((((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(intersection))->geo1_ == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_(A) && intersection->geo2_ == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_(B)) || (intersection->geo1_ == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_(B) && intersection->geo2_ == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_(A))) {
      intersection->hitted_ = YES;
      [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(intersection->drawable_)) setWaitForUpdate];
      return YES;
    }
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(A)) isGeoPlane] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(B)) isGeoPlane]) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    jboolean oldSilentMode = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
    [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
    IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectPlanesWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(B, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND))]);
    [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoLineND_(view3D_, (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(ret, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND))) autorelease];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, IOSObjectArray_Get(ret, 0), d);
    intersectable = YES;
  }
  else if ([A isGeoPlane] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(B)) isGeoPolygon]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, A, (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoPolygon class]));
  }
  else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(B)) isGeoPlane] && [A isGeoPolygon]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, B, (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoPolygon class]));
  }
  else if ([A isGeoPlane] && [B isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) {
    intersectable = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, A, B);
  }
  else if ([B isGeoPlane] && [A isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) {
    intersectable = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, B, A);
  }
  else if ([A isGeoPlane] && [B isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]) {
    intersectable = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, A, B);
  }
  else if ([B isGeoPlane] && [A isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]) {
    intersectable = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, B, A);
  }
  else if ([A isKindOfClass:[OrgGeogebraCommonKernelKernelNDGeoQuadricND class]] && [B isKindOfClass:[OrgGeogebraCommonKernelKernelNDGeoQuadricND class]]) {
    jboolean oldSilentMode = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
    [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
    OrgGeogebraCommonKernelGeosGeoElement *ret = IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) IntersectAsCircleWithOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(A, [OrgGeogebraCommonKernelKernelNDGeoQuadricND class]) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(B, [OrgGeogebraCommonKernelKernelNDGeoQuadricND class])]), 0);
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(view3D_, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast(ret, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class])) autorelease];
    [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, ret, d);
    intersectable = YES;
  }
  return intersectable;
}

- (jboolean)createIntersectionCurvePlanePolygonWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                               withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)B {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, A, B);
}

- (jboolean)createIntersectionCurvePlaneQuadricWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                               withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)B {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, A, B);
}

- (jboolean)createIntersectionCurvePlaneQuadricLimitedWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                                      withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)B {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, A, B);
}

- (void)processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)A
                                withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)B
                                withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)intersection
                 withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, intersection, d);
}

+ (OrgGeogebraCommonKernelGeosGeoElement *)getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_(geo);
}

- (void)decideIntersectionWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_decideIntersectionWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (void)addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)transformCoords {
}

- (void)updatePastePreviewPosition {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D];
  if (translationVec3D_ == nil) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_translationVec3D_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(translationVec3D_)) setXWithDouble:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) getInhomX] - [self getStartPointX]];
  [translationVec3D_ setYWithDouble:[p getInhomY] - [self getStartPointY]];
  [translationVec3D_ setZWithDouble:[p getInhomZ] - [self getStartPointZ]];
  [self setStartPointLocationWithDouble:[p getInhomX] withDouble:[p getInhomY] withDouble:[p getInhomZ]];
  if (tmpCoordsL3_ == nil) {
    OrgGeogebraCommonEuclidianEuclidianController_setAndConsume_tmpCoordsL3_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsL3_)) setXWithDouble:[p getInhomX]];
  [tmpCoordsL3_ setYWithDouble:[p getInhomY]];
  [tmpCoordsL3_ setZWithDouble:[p getInhomZ]];
  OrgGeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonEuclidianEuclidianView_(pastePreviewSelected_, translationVec3D_, tmpCoordsL3_, [view3D_ getViewDirection], view3D_);
}

- (jdouble)getStartPointZ {
  return startPointZ_;
}

- (void)setStartPointLocationWithDouble:(jdouble)x
                             withDouble:(jdouble)y
                             withDouble:(jdouble)z {
  [self setStartPointLocationWithDouble:x withDouble:y];
  startPointZ_ = z;
}

- (jint)addSelectedCS1DWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedCS1D_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS1D()];
}

- (jint)selCS1D {
  return [((JavaUtilArrayList *) nil_chk(selectedCS1D_)) size];
}

- (IOSObjectArray *)getSelectedCS1D {
  IOSObjectArray *lines = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedCS1D_)) size] type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [selectedCS1D_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(lines, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:selectedCS1D_];
  return lines;
}

- (jint)addSelectedCS2DWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                  withInt:(jint)max
                                              withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)selCS2D {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self);
}

- (IOSObjectArray *)getSelectedCS2D {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self);
}

- (jint)addSelectedPlaneWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                   withInt:(jint)max
                                               withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (jint)selPlanes {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self);
}

- (IOSObjectArray *)getSelectedPlanes {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self);
}

- (jint)selQuadric {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self);
}

- (jint)addSelectedQuadricWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                     withInt:(jint)max
                                                 withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (IOSObjectArray *)getSelectedQuadric {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(self);
}

- (jint)selQuadricLimited {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadricLimited(self);
}

- (jint)addSelectedQuadricLimitedWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                            withInt:(jint)max
                                                        withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (IOSObjectArray *)getSelectedQuadricLimited {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadricLimited(self);
}

- (jint)selPolyhedron {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPolyhedron(self);
}

- (jint)addSelectedPolyhedronWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                        withInt:(jint)max
                                                    withBoolean:(jboolean)addMoreThanOneAllowed {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, max, addMoreThanOneAllowed);
}

- (IOSObjectArray *)getSelectedPolyhedron {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPolyhedron(self);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)chooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                              withBoolean:(jboolean)includeFixed {
  return [self chooseGeoWithJavaUtilArrayList:geos withBoolean:includeFixed withBoolean:NO];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)chooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                              withBoolean:(jboolean)includeFixed
                                                              withBoolean:(jboolean)includeConstants {
  if (![((JavaUtilArrayList *) nil_chk(geos)) isEmpty]) {
    if (!includeConstants && [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) ownsWithOrgGeogebraCommonKernelGeosGeoElement:[geos getWithInt:0]]) return nil;
    OrgGeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:0];
    if (!includeFixed && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isFixed]) return nil;
    return geo;
  }
  return nil;
}

+ (jboolean)isModeForMovingPointWithInt:(jint)mode {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(mode);
}

+ (jboolean)isModeForCreatingPointWithInt:(jint)mode {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(mode);
}

- (jboolean)cursor3DVisibleForCurrentModeWithInt:(jint)cursorType {
  if (cursorType == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY) {
    return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(mode_);
  }
  else if (cursorType == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT) {
    switch (mode_) {
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
      case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
      return YES;
      default:
      return NO;
    }
  }
  else {
    {
      OrgGeogebraCommonEuclidianHits *hits;
      OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point;
      switch (mode_) {
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF:
        return YES;
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_FROM_POINT:
        hits = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getHits];
        if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([hits getWithInt:0])) isGeoVector]) {
          return NO;
        }
        return YES;
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
        return ([self selPolygons] == 1) || (!polygonForPyramidBasis_);
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
        if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1 || [self selPoints] != 0) {
          return YES;
        }
        hits = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getHits];
        if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
          return YES;
        }
        point = [view3D_ getCursor3D];
        if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) hasPath]) {
          return YES;
        }
        if ([point hasRegion]) {
          if ([point getRegion] == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
            return YES;
          }
        }
        return NO;
        default:
        return NO;
      }
    }
  }
}

- (void)setHandledGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_handledGeo_(self, geo);
  if (handledGeo_ == nil) return;
  [self setStartPointLocation];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(handledGeo_)) recordChangeableCoordParentNumbers];
}

- (jboolean)viewHasHitsForMouseDragged {
  if (moveMode__ == OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT && [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3DType] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY) return [((OrgGeogebraCommonEuclidianHits *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHits])) containsGeoPoint];
  else return [super viewHasHitsForMouseDragged];
}

- (void)wrapMouseDraggedWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event
                                                             withBoolean:(jboolean)startCapture {
  if (handledGeo_ != nil) {
    [self setMouseLocationWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
    [((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) release__];
    [self updateTranslationVector];
    [handledGeo_ moveFromChangeableCoordParentNumbersWithOrgGeogebraCommonKernelMatrixCoords:translationVec3D_ withOrgGeogebraCommonKernelMatrixCoords:startPoint3D_ withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getViewDirection] withJavaUtilArrayList:nil withJavaUtilArrayList:nil withOrgGeogebraCommonEuclidianEuclidianView:view3D_];
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    return;
  }
  [self setMouseMovedEventWithOrgGeogebraCommonEuclidianEventAbstractEvent:event];
  [super wrapMouseDraggedWithOrgGeogebraCommonEuclidianEventAbstractEvent:event withBoolean:startCapture];
}

- (void)updateTranslationVector {
  OrgGeogebraCommonKernelMatrixCoords *point = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:point];
  [self updateTranslationVectorWithOrgGeogebraCommonKernelMatrixCoords:point];
}

- (void)updateTranslationVectorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)point {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translationVec3D_(self, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) subWithOrgGeogebraCommonKernelMatrixCoords:startPoint3D_]);
}

- (void)setStartPointLocation {
  [self udpateStartPoint];
  [super setStartPointLocation];
}

- (void)udpateStartPoint {
  if (mouseLoc_ == nil) return;
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_updateStartPointWithOrgGeogebraCommonKernelMatrixCoords_(self, [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_]);
}

- (void)updateStartPointWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_updateStartPointWithOrgGeogebraCommonKernelMatrixCoords_(self, p);
}

- (void)setTranslateStartWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                    withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)vec {
  [super setTranslateStartWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonKernelKernelNDGeoVectorND:vec];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(startPoint3D_)) setWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D])) getInhomCoordsInD3]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(translationVec3D_)) setWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vec)) getCoordsInD3]];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPlane]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, [geo getMainDirection]);
  }
  else {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, nil);
  }
}

- (void)setTranslateFromPointStartWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setTranslateFromPointStartWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, geo, point);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getNormalTranslateDirection {
  if (translateDirection_ == nil) {
    return OrgGeogebraCommonKernelMatrixCoords_get_VZ_();
  }
  return translateDirection_;
}

- (void)moveVector {
  OrgGeogebraCommonKernelMatrixCoords *o = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:o];
  if (translateDirection_ == nil) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoords:OrgGeogebraCommonKernelMatrixCoords_get_VX_() withOrgGeogebraCommonKernelMatrixCoords:OrgGeogebraCommonKernelMatrixCoords_get_VY_() withOrgGeogebraCommonKernelMatrixCoords:OrgGeogebraCommonKernelMatrixCoords_get_VZ_() withOrgGeogebraCommonKernelMatrixCoords:startPoint3D_ withOrgGeogebraCommonKernelMatrixCoords:[view3D_ getHittingDirection] withOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  }
  else {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(startPoint3D_)) projectNearLineWithOrgGeogebraCommonKernelMatrixCoords:o withOrgGeogebraCommonKernelMatrixCoords:[view3D_ getHittingDirection] withOrgGeogebraCommonKernelMatrixCoords:translateDirection_ withOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  }
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> P = [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(movedGeoVector_)) getStartPoint];
  if (P == nil) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setSubWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_ withOrgGeogebraCommonKernelMatrixCoords:startPoint3D_];
  }
  else {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setSubWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_ withOrgGeogebraCommonKernelMatrixCoords:[P getInhomCoordsInD3]];
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setAddWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_ withOrgGeogebraCommonKernelMatrixCoords:translationVec3D_];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *) check_class_cast(companion_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion class])))) checkPointCapturingXYThenZWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  if ([movedGeoVector_ isGeoElement3D]) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast(movedGeoVector_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  }
  else {
    [self moveVectorWithDouble:[tmpCoords_ getX] withDouble:[tmpCoords_ getY]];
  }
}

- (void)setStartPointLocationWithOriginWithDouble:(jdouble)x
                                       withDouble:(jdouble)y {
  [self udpateStartPoint];
  [startPoint3DxOy_ setXWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(startPoint3DxOy_)) getX] - x];
  [startPoint3DxOy_ setYWithDouble:[startPoint3DxOy_ getY] - y];
  [super setStartPointLocationWithOriginWithDouble:x withDouble:y];
}

- (void)calcRWcoords {
  OrgGeogebraCommonKernelMatrixCoords *point = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:mouseLoc_];
  [view3D_ toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:point];
  xRW_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) getX];
  yRW_ = [point getY];
  zRW_ = [point getZ];
}

- (void)moveDependentWithBoolean:(jboolean)repaint {
  [self updateTranslationVector];
  OrgGeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonEuclidianEuclidianView_(translateableGeos_, translationVec3D_, startPoint3D_, [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getHittingDirection], view3D_);
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)handleMovedElementMultiple {
}

- (void)handleMovedElementFreeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:(OrgGeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if ([self handleMovedElementFreePoint]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, nil);
    return;
  }
  if ([self handleMovedElementFreePlane]) {
    return;
  }
  [self handleMovedElementFreeText];
}

- (jboolean)handleMovedElementFreePlane {
  return NO;
}

- (void)handleMovedElementDependent {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(movedGeoElement_)) isTranslateable]) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [movedGeoElement_ getParentAlgorithm];
    if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTranslate class]]) {
      IOSObjectArray *input = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
      OrgGeogebraCommonKernelGeosGeoElement *in = IOSObjectArray_Get(nil_chk(input), 1);
      if ([OrgGeogebraCommonKernelKernelNDGeoVectorND_class_() isInstance:in]) {
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(in)) isIndependent]) {
          OrgGeogebraCommonEuclidianEuclidianController_set_movedGeoVector_(self, (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(input, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND)));
          moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_VECTOR_NO_GRID;
          [self setTranslateStartWithOrgGeogebraCommonKernelGeosGeoElement:movedGeoElement_ withOrgGeogebraCommonKernelKernelNDGeoVectorND:movedGeoVector_];
        }
        else if ([[in getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVectorPoint class]]) {
          OrgGeogebraCommonKernelAlgosAlgoVectorPoint *algoVector = (OrgGeogebraCommonKernelAlgosAlgoVectorPoint *) check_class_cast([in getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoVectorPoint class]);
          moveMode__ = OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT_WITH_OFFSET;
          [self setMovedGeoPointWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoVectorPoint *) nil_chk(algoVector)) getP], [OrgGeogebraCommonKernelGeosGeoElement class])];
          OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setTranslateFromPointStartWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, movedGeoElement_, movedGeoPoint_);
        }
      }
      return;
    }
  }
  OrgGeogebraCommonEuclidianEuclidianController_set_translateableGeos_(self, nil);
  [self handleMovedElementDependentWithChangeableCoordParentNumbers];
  [self handleMovedElementDependentInitMode];
}

- (void)movePointWithOffsetWithBoolean:(jboolean)repaint {
  [((OrgGeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk(companion_)) movePointWithBoolean:repaint withOrgGeogebraCommonEuclidianEventAbstractEvent:nil];
}

- (jint)addSelectedPolygon3DWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                       withInt:(jint)max
                                                   withBoolean:(jboolean)addMoreThanOneAllowed {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:selectedPolygons3D_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOLYGON3D()];
}

- (IOSObjectArray *)getSelectedPolygons3D {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedPolygons3D_)) size] type:OrgGeogebraCommonKernelGeosGeoPolygon_class_()];
  for (jint i = 0; i < [selectedPolygons3D_ size]; i++) {
    IOSObjectArray_Set(ret, i, [selectedPolygons3D_ getWithInt:i]);
  }
  [self clearSelectionWithJavaUtilArrayList:selectedPolygons3D_];
  return ret;
}

- (jint)selPolygons3D {
  return [((JavaUtilArrayList *) nil_chk(selectedPolygons3D_)) size];
}

- (IOSObjectArray *)orthogonalWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  jboolean hitPoint = ([self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] != 0);
  if (!hitPoint) {
    if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 0) [self addSelectedLineWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    if ([self selLines] == 0) OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ([self selPoints] == 1) {
    if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *cs = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self);
      return [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) OrthogonalLine3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:IOSObjectArray_Get(nil_chk(cs), 0)], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ([self selLines] == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *lines = [self getSelectedLinesND];
      return [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) OrthogonalLine3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoDirectionND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoDirectionND:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace]], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
  }
  return nil;
}

- (IOSObjectArray *)rotateAroundLineWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateAroundLineWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (IOSObjectArray *)rotateAroundLineWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoRot
                                withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)phi
                                 withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Rotate3DWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:geoRot withOrgGeogebraCommonKernelGeosGeoNumberValue:phi withOrgGeogebraCommonKernelKernelNDGeoLineND:line];
}

- (jboolean)viewOrientationForClockwiseWithBoolean:(jboolean)clockwise
      withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) dotproductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getViewDirection]] > 0) return !clockwise;
  return clockwise;
}

- (IOSObjectArray *)mirrorAtPlaneWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_mirrorAtPlaneWithOrgGeogebraCommonEuclidianHits_(self, hits);
}

- (void)showPopupMenuChooseGeoWithJavaUtilArrayList:(JavaUtilArrayList *)selectedGeos1
                 withOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
    [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showPopupChooseGeoWithJavaUtilArrayList:selectedGeos1 withJavaUtilArrayList:hits withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view3D_ withOrgGeogebraCommonAwtGPoint:mouseLoc_];
  }
}

- (void)updateOwnDrawablesNow {
  for (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve * __strong intersectionCurve in nil_chk(intersectionCurveList_)) [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(intersectionCurve))->drawable_)) update];
}

- (void)setModeWithInt:(jint)newMode {
  if (newMode != OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE) {
    [((JavaUtilArrayList *) nil_chk(intersectionCurveList_)) clear];
  }
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, nil);
  [super setModeWithInt:newMode];
  if (!temporaryMode_) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initPointMoveMode(self);
  }
}

- (void)setDragCursorIfMoveView {
}

- (void)processSelectionRectangleWithBoolean:(jboolean)alt
                                 withBoolean:(jboolean)isControlDown {
}

- (jint)addSelectedPlanesForAngleWithOrgGeogebraCommonEuclidianHits:(OrgGeogebraCommonEuclidianHits *)hits
                                                            withInt:(jint)count {
  if ([self selVectors] == 0) {
    if ([self selLines] == 0) {
      return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 2, NO);
    }
    else if ([self selLines] == 1) {
      return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
    }
  }
  return count;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)createAngle3D {
  if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 2) {
    IOSObjectArray *planes = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self);
    return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Angle3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(planes), 0) withOrgGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(planes, 1)];
  }
  if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1 && [self selLines] == 1) {
    IOSObjectArray *lines = [self getSelectedLinesND];
    IOSObjectArray *planes = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self);
    [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Angle3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(planes), 0)];
  }
  return nil;
}

- (jboolean)hasInput3D {
  return NO;
}

- (jboolean)useInputDepthForHitting {
  return NO;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMouseLocRW {
  return [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getCursor3D])) getInhomCoordsInD3];
}

+ (NSString *)rotateObjectWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                          withNSString:(NSString *)inputText
                                           withBoolean:(jboolean)clockwise
        withOrgGeogebraCommonKernelGeosGeoPolygonArray:(IOSObjectArray *)polys
     withOrgGeogebraCommonKernelKernelNDGeoLineNDArray:(IOSObjectArray *)lines
        withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeos
withOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *)ec {
  return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateObjectWithOrgGeogebraCommonMainApp_withNSString_withBoolean_withOrgGeogebraCommonKernelGeosGeoPolygonArray_withOrgGeogebraCommonKernelKernelNDGeoLineNDArray_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_(app, inputText, clockwise, polys, lines, selGeos, ec);
}

- (void)clearSelected {
  [super clearSelected];
  [self clearSelectionWithJavaUtilArrayList:selectedCS1D_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedCS2D_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedPlane_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedPolygons3D_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedPolyhedron_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedQuadric_ withBoolean:NO];
  [self clearSelectionWithJavaUtilArrayList:selectedQuadricLimited_ withBoolean:NO];
}

- (IOSObjectArray *)polygon {
  if (polygonMode_ == OrgGeogebraCommonEuclidianEuclidianController_POLYGON_NORMAL) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(self);
  }
  return [super polygon];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)createVectorForTranslation {
  return [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D *) check_class_cast([self getAlgoDispatcher], [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D class])))) Vector3D];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)createVectorForTranslationWithNSString:(NSString *)label {
  return [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D *) check_class_cast([self getAlgoDispatcher], [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D class])))) Vector3DWithNSString:label];
}

- (jint)getModeForShallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  if ([((OrgGeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isShiftDown] || [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isMiddleClickWithOrgGeogebraCommonEuclidianEventAbstractEvent:event]) {
    return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW;
  }
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATEVIEW;
}

- (void)dealloc {
  RELEASE_(xMinMax_);
  RELEASE_(yMinMax_);
  RELEASE_(zMinMax_);
  RELEASE_(currentPlane_);
  RELEASE_(view3D_);
  RELEASE_(mouseLocOld_);
  RELEASE_(positionOld_);
  RELEASE_(pickPoint_);
  RELEASE_(goodHits_);
  RELEASE_(intersectionCurveList_);
  RELEASE_(selectedCS2D_);
  RELEASE_(selectedPolygons3D_);
  RELEASE_(selectedPlane_);
  RELEASE_(tmpCoords_);
  RELEASE_(singleIntersectionPoint_);
  RELEASE_(textDispatcher_EuclidianController3D_);
  RELEASE_(pyramidBasis_);
  RELEASE_(mouseEvent_);
  RELEASE_(resultedIntersectionCurve_);
  RELEASE_(selectedCS1D_);
  RELEASE_(selectedQuadric_);
  RELEASE_(selectedQuadricLimited_);
  RELEASE_(selectedPolyhedron_);
  RELEASE_(handledGeo_);
  RELEASE_(startPoint3D_);
  RELEASE_(startPoint3DxOy_);
  RELEASE_(translationVec3D_);
  RELEASE_(translateDirection_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "EuclidianController3D", NULL, 0x1, NULL, NULL },
    { "newCompanion", NULL, "Lorg.geogebra.common.euclidian.EuclidianControllerCompanion;", 0x4, NULL, NULL },
    { "setView3DWithOrgGeogebraCommonEuclidianEuclidianView:", "setView3D", "V", 0x1, NULL, NULL },
    { "getMinMaxWithDouble:withDouble:withDouble:", "getMinMax", "[D", 0x2, NULL, NULL },
    { "setMovedGeoPointWithOrgGeogebraCommonKernelGeosGeoElement:", "setMovedGeoPoint", "V", 0x1, NULL, NULL },
    { "updateMovedGeoPointStartValuesWithOrgGeogebraCommonKernelMatrixCoords:", "updateMovedGeoPointStartValues", "V", 0x4, NULL, NULL },
    { "getCurrentPlane", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x4, NULL, NULL },
    { "setCurrentPlaneWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:", "setCurrentPlane", "V", 0x4, NULL, NULL },
    { "movePointOnCurrentPlaneWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:withBoolean:", "movePointOnCurrentPlane", "V", 0x4, NULL, NULL },
    { "checkXYMinMaxWithOrgGeogebraCommonKernelMatrixCoords:", "checkXYMinMax", "Z", 0x4, NULL, NULL },
    { "setMouseInformationWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:", "setMouseInformation", "V", 0x14, NULL, NULL },
    { "setMouseOriginWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:", "setMouseOrigin", "V", 0x4, NULL, NULL },
    { "addOffsetForTranslationWithOrgGeogebraCommonKernelMatrixCoords:", "addOffsetForTranslation", "V", 0x1, NULL, NULL },
    { "moveTextAbsoluteLocation", NULL, "V", 0x4, NULL, NULL },
    { "getRegionHitsWithOrgGeogebraCommonEuclidianHits:", "getRegionHits", "Lorg.geogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "getNewPointFreeWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "getNewPointFree", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x2, NULL, NULL },
    { "getNewPointWithOrgGeogebraCommonEuclidianHits:withBoolean:withBoolean:withBoolean:withBoolean:", "getNewPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "createNewPoint", "V", 0x4, NULL, NULL },
    { "createNewPointIntersectionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "createNewPointIntersection", "V", 0x4, NULL, NULL },
    { "createNewPointInRegionPossibleWithOrgGeogebraCommonKernelKernelNDGeoConicND:", "createNewPointInRegionPossible", "Z", 0x4, NULL, NULL },
    { "getSingleIntersectionPointWithOrgGeogebraCommonEuclidianHits:", "getSingleIntersectionPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getSelectedPoints3D", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x14, NULL, NULL },
    { "getSelectedLines3D", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoCoordSys1D;", 0x14, NULL, NULL },
    { "circleOrSphereWithOrgGeogebraCommonKernelArithmeticNumberValue:", "circleOrSphere", "V", 0x4, NULL, NULL },
    { "spherePointRadiusWithOrgGeogebraCommonEuclidianHits:", "spherePointRadius", "Z", 0x14, NULL, NULL },
    { "coneTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits:", "coneTwoPointsRadius", "Z", 0x14, NULL, NULL },
    { "cylinderTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits:", "cylinderTwoPointsRadius", "Z", 0x14, NULL, NULL },
    { "archimedeanSolidWithOrgGeogebraCommonEuclidianHits:withOrgGeogebraCommonKernelCommandsCommandsEnum:", "archimedeanSolid", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "polyhedronNetWithOrgGeogebraCommonEuclidianHits:", "polyhedronNet", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "orthogonalPlaneWithOrgGeogebraCommonEuclidianHits:", "orthogonalPlane", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "circleAxisPointWithOrgGeogebraCommonEuclidianHits:", "circleAxisPoint", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "circlePointRadiusDirectionWithOrgGeogebraCommonEuclidianHits:", "circlePointRadiusDirection", "Z", 0x14, NULL, NULL },
    { "getTextDispatcher", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.TextDispatcher3D;", 0x4, NULL, NULL },
    { "volumeWithOrgGeogebraCommonEuclidianHits:", "volume", "Z", 0x14, NULL, NULL },
    { "planeContainingWithOrgGeogebraCommonEuclidianHits:", "planeContaining", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "viewInFrontOfWithOrgGeogebraCommonEuclidianHits:", "viewInFrontOf", "Z", 0x14, NULL, NULL },
    { "parallelPlaneWithOrgGeogebraCommonEuclidianHits:", "parallelPlane", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "setDialogOccurred", NULL, "V", 0x1, NULL, NULL },
    { "extrusionOrConifyWithOrgGeogebraCommonEuclidianHits:", "extrusionOrConify", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "pyramidOrPrismWithOrgGeogebraCommonEuclidianHits:", "pyramidOrPrism", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "getMovedGeoPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "wrapMouseReleasedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "wrapMouseReleased", "V", 0x1, NULL, NULL },
    { "processReleaseForMovedGeoPointWithBoolean:", "processReleaseForMovedGeoPoint", "V", 0x4, NULL, NULL },
    { "switchPointMoveMode", NULL, "V", 0x2, NULL, NULL },
    { "cancelSwitchPointMoveModeIfNeeded", NULL, "V", 0x2, NULL, NULL },
    { "initPointMoveMode", NULL, "V", 0x2, NULL, NULL },
    { "getPointMoveMode", NULL, "I", 0x1, NULL, NULL },
    { "updateInput3D", NULL, "V", 0x1, NULL, NULL },
    { "wrapMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "wrapMousePressed", "V", 0x1, NULL, NULL },
    { "processMouseMovedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "processMouseMoved", "V", 0x4, NULL, NULL },
    { "setMouseMovedEventWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "setMouseMovedEvent", "V", 0x4, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "processMouseMoved", NULL, "V", 0x4, NULL, NULL },
    { "initNewModeWithInt:", "initNewMode", "V", 0x4, NULL, NULL },
    { "switchPreviewableForInitNewModeWithInt:", "switchPreviewableForInitNewMode", "Lorg.geogebra.common.euclidian.Previewable;", 0x4, NULL, NULL },
    { "getSelectablesWithOrgGeogebraCommonEuclidianHits:", "getSelectables", "Z", 0x4, NULL, NULL },
    { "processModeLock", NULL, "V", 0x1, NULL, NULL },
    { "processRightPressFor3D", NULL, "Z", 0x4, NULL, NULL },
    { "processRotate3DView", NULL, "Z", 0x4, NULL, NULL },
    { "processRightReleaseFor3DWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "processRightReleaseFor3D", "Z", 0x4, NULL, NULL },
    { "switchModeForProcessModeWithOrgGeogebraCommonEuclidianHits:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:", "switchModeForProcessMode", "Z", 0x4, NULL, NULL },
    { "switchModeForRemovePolygonsWithOrgGeogebraCommonEuclidianHits:", "switchModeForRemovePolygons", "V", 0x4, NULL, NULL },
    { "switchModeForThreePointsWithInt:", "switchModeForThreePoints", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "switchModeForCircleOrSphere2WithInt:", "switchModeForCircleOrSphere2", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createNewPointForModePointWithOrgGeogebraCommonEuclidianHits:withBoolean:", "createNewPointForModePoint", "V", 0x4, NULL, NULL },
    { "createNewPointForModeOtherWithOrgGeogebraCommonEuclidianHits:", "createNewPointForModeOther", "V", 0x4, NULL, NULL },
    { "switchModeForMousePressedWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "switchModeForMousePressed", "V", 0x4, NULL, NULL },
    { "switchModeForMouseReleasedWithInt:withOrgGeogebraCommonEuclidianHits:withBoolean:withBoolean:withOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "switchModeForMouseReleased", "Z", 0x4, NULL, NULL },
    { "addPointCreatedForMouseReleasedWithOrgGeogebraCommonEuclidianHits:", "addPointCreatedForMouseReleased", "Lorg.geogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "showDrawingPadPopupWithOrgGeogebraCommonAwtGPoint:", "showDrawingPadPopup", "V", 0x1, NULL, NULL },
    { "intersectWithOrgGeogebraCommonEuclidianHits:", "intersect", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "checkCoordCartesian3DWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "checkCoordCartesian3D", "V", 0xa, NULL, NULL },
    { "getIntersectionCurves", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "intersectionCurveWithOrgGeogebraCommonEuclidianHits:", "intersectionCurve", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "createIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "createIntersectionCurve", "Z", 0x1, NULL, NULL },
    { "createIntersectionCurvePlanePolygonWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoPolygon:", "createIntersectionCurvePlanePolygon", "Z", 0x2, NULL, NULL },
    { "createIntersectionCurvePlaneQuadricWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "createIntersectionCurvePlaneQuadric", "Z", 0x2, NULL, NULL },
    { "createIntersectionCurvePlaneQuadricLimitedWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "createIntersectionCurvePlaneQuadricLimited", "Z", 0x2, NULL, NULL },
    { "processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "processIntersectionCurve", "V", 0x2, NULL, NULL },
    { "getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement:", "getMetaIfJustOne", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0xa, NULL, NULL },
    { "decideIntersectionWithOrgGeogebraCommonEuclidianHits:", "decideIntersection", "V", 0x2, NULL, NULL },
    { "addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement:", "addToGoodHits", "V", 0x12, NULL, NULL },
    { "transformCoords", NULL, "V", 0x1, NULL, NULL },
    { "updatePastePreviewPosition", NULL, "V", 0x4, NULL, NULL },
    { "getStartPointZ", NULL, "D", 0x4, NULL, NULL },
    { "setStartPointLocationWithDouble:withDouble:withDouble:", "setStartPointLocation", "V", 0x4, NULL, NULL },
    { "addSelectedCS1DWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedCS1D", "I", 0x14, NULL, NULL },
    { "selCS1D", NULL, "I", 0x10, NULL, NULL },
    { "getSelectedCS1D", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoCoordSys1D;", 0x14, NULL, NULL },
    { "addSelectedCS2DWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedCS2D", "I", 0x14, NULL, NULL },
    { "selCS2D", NULL, "I", 0x10, NULL, NULL },
    { "getSelectedCS2D", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoCoordSys2D;", 0x14, NULL, NULL },
    { "addSelectedPlaneWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPlane", "I", 0x14, NULL, NULL },
    { "selPlanes", NULL, "I", 0x10, NULL, NULL },
    { "getSelectedPlanes", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x14, NULL, NULL },
    { "selQuadric", NULL, "I", 0x10, NULL, NULL },
    { "addSelectedQuadricWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedQuadric", "I", 0x14, NULL, NULL },
    { "getSelectedQuadric", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x14, NULL, NULL },
    { "selQuadricLimited", NULL, "I", 0x10, NULL, NULL },
    { "addSelectedQuadricLimitedWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedQuadricLimited", "I", 0x14, NULL, NULL },
    { "getSelectedQuadricLimited", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DLimited;", 0x14, NULL, NULL },
    { "selPolyhedron", NULL, "I", 0x10, NULL, NULL },
    { "addSelectedPolyhedronWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPolyhedron", "I", 0x14, NULL, NULL },
    { "getSelectedPolyhedron", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPolyhedron;", 0x14, NULL, NULL },
    { "chooseGeoWithJavaUtilArrayList:withBoolean:", "chooseGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "chooseGeoWithJavaUtilArrayList:withBoolean:withBoolean:", "chooseGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "isModeForMovingPointWithInt:", "isModeForMovingPoint", "Z", 0xa, NULL, NULL },
    { "isModeForCreatingPointWithInt:", "isModeForCreatingPoint", "Z", 0xa, NULL, NULL },
    { "cursor3DVisibleForCurrentModeWithInt:", "cursor3DVisibleForCurrentMode", "Z", 0x1, NULL, NULL },
    { "setHandledGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "setHandledGeo", "V", 0x1, NULL, NULL },
    { "viewHasHitsForMouseDragged", NULL, "Z", 0x4, NULL, NULL },
    { "wrapMouseDraggedWithOrgGeogebraCommonEuclidianEventAbstractEvent:withBoolean:", "wrapMouseDragged", "V", 0x1, NULL, NULL },
    { "updateTranslationVector", NULL, "V", 0x4, NULL, NULL },
    { "updateTranslationVectorWithOrgGeogebraCommonKernelMatrixCoords:", "updateTranslationVector", "V", 0x4, NULL, NULL },
    { "setStartPointLocation", NULL, "V", 0x1, NULL, NULL },
    { "udpateStartPoint", NULL, "V", 0x4, NULL, NULL },
    { "updateStartPointWithOrgGeogebraCommonKernelMatrixCoords:", "updateStartPoint", "V", 0x14, NULL, NULL },
    { "setTranslateStartWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "setTranslateStart", "V", 0x4, NULL, NULL },
    { "setTranslateFromPointStartWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setTranslateFromPointStart", "V", 0x2, NULL, NULL },
    { "getNormalTranslateDirection", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "moveVector", NULL, "V", 0x4, NULL, NULL },
    { "setStartPointLocationWithOriginWithDouble:withDouble:", "setStartPointLocationWithOrigin", "V", 0x1, NULL, NULL },
    { "calcRWcoords", NULL, "V", 0x4, NULL, NULL },
    { "moveDependentWithBoolean:", "moveDependent", "V", 0x4, NULL, NULL },
    { "handleMovedElementMultiple", NULL, "V", 0x4, NULL, NULL },
    { "handleMovedElementFreeWithOrgGeogebraCommonEuclidianEventPointerEventTypeEnum:", "handleMovedElementFree", "V", 0x14, NULL, NULL },
    { "handleMovedElementFreePlane", NULL, "Z", 0x4, NULL, NULL },
    { "handleMovedElementDependent", NULL, "V", 0x14, NULL, NULL },
    { "movePointWithOffsetWithBoolean:", "movePointWithOffset", "V", 0x4, NULL, NULL },
    { "addSelectedPolygon3DWithOrgGeogebraCommonEuclidianHits:withInt:withBoolean:", "addSelectedPolygon3D", "I", 0x14, NULL, NULL },
    { "getSelectedPolygons3D", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPolygon;", 0x14, NULL, NULL },
    { "selPolygons3D", NULL, "I", 0x14, NULL, NULL },
    { "orthogonalWithOrgGeogebraCommonEuclidianHits:", "orthogonal", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "rotateAroundLineWithOrgGeogebraCommonEuclidianHits:", "rotateAroundLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "rotateAroundLineWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoNumberValue:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "rotateAroundLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "viewOrientationForClockwiseWithBoolean:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "viewOrientationForClockwise", "Z", 0x1, NULL, NULL },
    { "mirrorAtPlaneWithOrgGeogebraCommonEuclidianHits:", "mirrorAtPlane", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "showPopupMenuChooseGeoWithJavaUtilArrayList:withOrgGeogebraCommonEuclidianHits:", "showPopupMenuChooseGeo", "V", 0x4, NULL, NULL },
    { "updateOwnDrawablesNow", NULL, "V", 0x1, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "setDragCursorIfMoveView", NULL, "V", 0x4, NULL, NULL },
    { "processSelectionRectangleWithBoolean:withBoolean:", "processSelectionRectangle", "V", 0x14, NULL, NULL },
    { "addSelectedPlanesForAngleWithOrgGeogebraCommonEuclidianHits:withInt:", "addSelectedPlanesForAngle", "I", 0x4, NULL, NULL },
    { "createAngle3D", NULL, "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "hasInput3D", NULL, "Z", 0x1, NULL, NULL },
    { "useInputDepthForHitting", NULL, "Z", 0x1, NULL, NULL },
    { "getMouseLocRW", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "rotateObjectWithOrgGeogebraCommonMainApp:withNSString:withBoolean:withOrgGeogebraCommonKernelGeosGeoPolygonArray:withOrgGeogebraCommonKernelKernelNDGeoLineNDArray:withOrgGeogebraCommonKernelGeosGeoElementArray:withOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:", "rotateObject", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "clearSelected", NULL, "V", 0x1, NULL, NULL },
    { "polygon", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createVectorForTranslation", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "createVectorForTranslationWithNSString:", "createVectorForTranslation", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "getModeForShallMoveViewWithOrgGeogebraCommonEuclidianEventAbstractEvent:", "getModeForShallMoveView", "I", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "xMinMax_", NULL, 0x2, "[D", NULL, NULL,  },
    { "yMinMax_", NULL, 0x2, "[D", NULL, NULL,  },
    { "zMinMax_", NULL, 0x0, "[D", NULL, NULL,  },
    { "currentPlane_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "view3D_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "mouseLocOld_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "positionOld_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "pickPoint_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "freePointJustCreated_", NULL, 0x2, "Z", NULL, NULL,  },
    { "viewRotationOccured_", NULL, 0x4, "Z", NULL, NULL,  },
    { "ANGLE_TO_DEGREES_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_TO_DEGREES },
    { "ANGLE_MAX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_MAX },
    { "animatedRotSpeed_", NULL, 0x2, "D", NULL, NULL,  },
    { "timeOld_", NULL, 0x2, "D", NULL, NULL,  },
    { "xOld_", NULL, 0x2, "I", NULL, NULL,  },
    { "goodHits_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.euclidian3D.Hits3D;", NULL, NULL,  },
    { "intersectionCurveList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/euclidian3D/EuclidianController3D$IntersectionCurve;>;",  },
    { "selectedCS2D_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoCoordSys2D;>;",  },
    { "selectedPolygons3D_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "selectedPlane_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D;>;",  },
    { "tmpCoords_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "singleIntersectionPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "textDispatcher_EuclidianController3D_", "textDispatcher", 0x2, "Lorg.geogebra.common.geogebra3D.euclidian3D.TextDispatcher3D;", NULL, NULL,  },
    { "dialogOccurred_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pyramidBasis_", NULL, 0x2, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "polygonForPyramidBasis_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pointMoveMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "mouseMoved_", NULL, 0x4, "Z", NULL, NULL,  },
    { "mouseEvent_", NULL, 0x4, "Lorg.geogebra.common.euclidian.event.AbstractEvent;", NULL, NULL,  },
    { "resultedIntersectionCurve_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.euclidian3D.EuclidianController3D$IntersectionCurve;", NULL, NULL,  },
    { "startPointZ_", NULL, 0x4, "D", NULL, NULL,  },
    { "selectedCS1D_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D;>;",  },
    { "selectedQuadric_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D;>;",  },
    { "selectedQuadricLimited_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited;>;",  },
    { "selectedPolyhedron_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron;>;",  },
    { "handledGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "startPoint3D_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "startPoint3DxOy_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "zRW_", NULL, 0x2, "D", NULL, NULL,  },
    { "translationVec3D_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "translateDirection_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.geogebra3D.euclidian3D.EuclidianController3D$IntersectionCurve;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D = { 2, "EuclidianController3D", "org.geogebra.common.geogebra3D.euclidian3D", NULL, 0x401, 153, methods, 41, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonEuclidianEuclidianController_initWithOrgGeogebraCommonMainApp_(self, app);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_currentPlane_(self, nil);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_mouseLocOld_(self, new_OrgGeogebraCommonAwtGPoint_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_positionOld_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4));
  self->freePointJustCreated_ = NO;
  self->viewRotationOccured_ = NO;
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_intersectionCurveList_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedCS2D_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedPolygons3D_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedPlane_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_tmpCoords_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4));
  self->dialogOccurred_ = NO;
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, nil);
  self->polygonForPyramidBasis_ = NO;
  self->pointMoveMode_ = OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
  self->mouseMoved_ = NO;
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_mouseEvent_(self, nil);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedCS1D_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedQuadric_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedQuadricLimited_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_selectedPolyhedron_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_startPoint3D_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1));
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_startPoint3DxOy_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1));
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_translationVec3D_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4));
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_xMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_yMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_zMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
}

IOSDoubleArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMinMaxWithDouble_withDouble_withDouble_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, jdouble min, jdouble val, jdouble max) {
  if (val < min) min = val;
  else if (val > max) max = val;
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ min, max } count:2];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getNewPointFreeWithOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Point3DWithNSString:nil withDouble:0 withDouble:0 withDouble:0 withBoolean:NO], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setCoordsWithOrgGeogebraCommonKernelKernelNDGeoPointND:point];
  [point3D updateCoords];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) setCursor3DTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY];
  [self->view3D_ updateMatrixForCursor3D];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *cursor = [self->view3D_ getCursor3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(cursor)) setRegionWithOrgGeogebraCommonKernelRegion:nil];
  [cursor setPathWithOrgGeogebraCommonKernelPath:nil];
  [cursor setMoveModeWithInt:[point3D getMoveMode]];
  if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(self->mode_)) {
    self->freePointJustCreated_ = YES;
  }
  return point3D;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_spherePointRadiusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  if ([self selPoints] == 1) {
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogSpherePointRadiusWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk([self getSelectedPointsND]), 0)];
    return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_coneTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:2 withBoolean:NO];
  if ([self selPoints] == 2) {
    IOSObjectArray *points = [self getSelectedPointsND];
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogConeTwoPointsRadiusWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cylinderTwoPointsRadiusWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:2 withBoolean:NO];
  if ([self selPoints] == 2) {
    IOSObjectArray *points = [self getSelectedPointsND];
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogCylinderTwoPointsRadiusWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
    return YES;
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_archimedeanSolidWithOrgGeogebraCommonEuclidianHits_withOrgGeogebraCommonKernelCommandsCommandsEnum_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, OrgGeogebraCommonKernelCommandsCommandsEnum *name) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if ([self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:2 withBoolean:NO] == 0 && [self selPoints] == 0 && [self selDirections] == 0) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ([self selPoints] == 2) {
    IOSObjectArray *points = [self getSelectedPointsND];
    id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> direction;
    if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
      direction = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self)), 0);
      OrgGeogebraCommonKernelMatrixCoords *v = [((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction)) getDirectionInD3];
      if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getViewDirection]] > 0) {
        OrgGeogebraCommonKernelArithmeticMyDouble *a = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(self->kernel_) autorelease];
        [a setWithDouble:-1];
        OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *orientation = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast([([new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction], direction) autorelease]) getVector], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class]);
        OrgGeogebraCommonKernelArithmeticExpressionNode *en = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, a, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), orientation) autorelease];
        direction = [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D *) [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_([self->kernel_ getConstruction], en) autorelease]) getVector3D];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) ArchimedeanSolidWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoDirectionND:direction withOrgGeogebraCommonKernelCommandsCommandsEnum:name]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) ArchimedeanSolidWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelCommandsCommandsEnum:name]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_polyhedronNetWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  [self addSelectedGeoWithOrgGeogebraCommonEuclidianHits:[hits getPolyhedronsIncludingMetaHits] withInt:1 withBoolean:NO];
  if ([self selGeos] == 1) {
    OrgGeogebraCommonKernelGeosGeoElement *polyhedron = IOSObjectArray_Get(nil_chk([self getSelectedGeos]), 0);
    OrgGeogebraCommonKernelGeosGeoNumeric *slider = OrgGeogebraCommonKernelGeosGeoNumeric_setSliderFromDefaultWithOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_([new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]) autorelease], NO);
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) setIntervalMinWithDouble:0];
    [slider setIntervalMaxWithDouble:1];
    [slider setAnimationStepWithDouble:0.01];
    [slider setLabelWithNSString:nil];
    [slider setValueWithDouble:1];
    [slider update];
    return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([self->kernel_ getManager3D])) PolyhedronNetWithNSStringArray:nil withOrgGeogebraCommonKernelGeosGeoElement:polyhedron withOrgGeogebraCommonKernelArithmeticNumberValue:slider withOrgGeogebraCommonKernelGeosGeoPolygon:nil withOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:nil]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_orthogonalPlaneWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  jboolean hitPoint = ([self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] != 0);
  if (!hitPoint) {
    if ([self selLines] == 0) {
      [self addSelectedVectorWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    }
    if ([self selVectors] == 0) {
      [self addSelectedLineWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    }
  }
  if ([self selPoints] == 1) {
    if ([self selVectors] == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *vectors = [self getSelectedVectorsND];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) OrthogonalPlane3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoVectorND:IOSObjectArray_Get(nil_chk(vectors), 0)], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]));
      return ret;
    }
    else if ([self selLines] == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *lines = [self getSelectedLinesND];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) OrthogonalPlane3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]));
      return ret;
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circleAxisPointWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if ([self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] == 0) {
    [self addSelectedLineWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  }
  if ([self selPoints] == 1 && [self selLines] == 1) {
    return [IOSObjectArray arrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Circle3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk([self getSelectedLinesND]), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk([self getSelectedPointsND]), 0)] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_circlePointRadiusDirectionWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  if ([self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] == 0) [self addSelectedDirectionWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  if ([self selPoints] == 1 && [self selDirections] == 1) {
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getDialogManager])) showNumberInputDialogCirclePointDirectionRadiusWithNSString:[self->app_ getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk([self getSelectedPointsND]), 0) withOrgGeogebraCommonKernelKernelNDGeoDirectionND:IOSObjectArray_Get(nil_chk([self getSelectedDirections]), 0)];
    return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_volumeWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedGeoWithOrgGeogebraCommonEuclidianHits:[hits getFiniteVolumeIncludingMetaHits] withInt:1 withBoolean:NO];
  if ([self selGeos] == 1) {
    OrgGeogebraCommonKernelGeosGeoElement *hasVolume = IOSObjectArray_Get(nil_chk([self getSelectedGeos]), 0);
    [((OrgGeogebraCommonGeogebra3DEuclidian3DTextDispatcher3D *) nil_chk([self getTextDispatcher])) createVolumeTextWithOrgGeogebraCommonKernelGeosGeoElement:hasVolume withOrgGeogebraCommonAwtGPoint:self->mouseLoc_];
    return YES;
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_planeContainingWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits0) {
  OrgGeogebraCommonEuclidianHits *hits = [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits0)) keepFirstsWithOrgGeogebraCommonKernelGeosTestEnumArray:[IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOINTND(), OrgGeogebraCommonKernelGeosTestEnum_get_GEOLINEND(), OrgGeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2DNOTPLANE() } count:3 type:OrgGeogebraCommonKernelGeosTestEnum_class_()]];
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if ([self selPoints] == 0 && [self selLines] == 0) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
    IOSObjectArray *cs = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self);
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:IOSObjectArray_Get(nil_chk(cs), 0)], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  [self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:3 withBoolean:NO];
  if ([self selPoints] == 3) {
    IOSObjectArray *points = [self getSelectedPointsND];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 2)] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  else if ([self selPoints] == 1) {
    [self addSelectedLineWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    if ([self selLines] == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *lines = [self getSelectedLinesND];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
  }
  else if ([self selPoints] == 0) {
    [self addSelectedLineWithOrgGeogebraCommonEuclidianHits:hits withInt:2 withBoolean:NO];
    if ([self selLines] == 2) {
      IOSObjectArray *lines = [self getSelectedLinesND];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0) withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 1)] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
  }
  return nil;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_viewInFrontOfWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return NO;
  [self addSelectedGeoWithOrgGeogebraCommonEuclidianHits:[hits getTopHits] withInt:1 withBoolean:NO];
  if ([self selGeos] == 1) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([self getSelectedGeos]), 0);
    OrgGeogebraCommonKernelMatrixCoords *vn = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getMainDirection];
    if (vn != nil) {
      if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) hasMouse]) [self->view3D_ setRotAnimationWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self->view3D_ getCursor3D])) getDrawingMatrix])) getVz]];
      else {
        [self->view3D_ setClosestRotAnimationWithOrgGeogebraCommonKernelMatrixCoords:vn];
      }
    }
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_parallelPlaneWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  jboolean hitPoint = ([self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] != 0);
  if (!hitPoint) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if ([self selPoints] == 1) {
    if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
      IOSObjectArray *points = [self getSelectedPointsND];
      IOSObjectArray *cs = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self);
      return [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) Plane3DWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:IOSObjectArray_Get(nil_chk(cs), 0)], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_extrusionOrConifyWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if (self->dialogOccurred_) {
    self->dialogOccurred_ = NO;
    return nil;
  }
  if (![((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    jint basisAdded = [self selPolygons] + [self selConics];
    if (basisAdded == 0) {
      basisAdded += [self addSelectedPolygonWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
      if (basisAdded == 0) {
        basisAdded += [self addSelectedConicWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
        if (basisAdded == 0) {
          [self addSelectedNumberValueWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
        }
      }
    }
  }
  if ([self selNumberValues] == 1) {
    if ([self selPolygons] == 1) {
      IOSObjectArray *basis = [self getSelectedPolygons];
      IOSObjectArray *height = [self getSelectedNumberValues];
      if (self->mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION) {
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PrismWithNSStringArray:nil withOrgGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(basis), 0) withOrgGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk(height), 0)]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PyramidWithNSStringArray:nil withOrgGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(basis), 0) withOrgGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk(height), 0)]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ([self selConics] == 1) {
      IOSObjectArray *basis = [self getSelectedConicsND];
      IOSObjectArray *height = [self getSelectedNumberValues];
      if (self->mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION) {
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) CylinderLimitedWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(basis), 0) withOrgGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk(height), 0)]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) ConeLimitedWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoConicND:IOSObjectArray_Get(nil_chk(basis), 0) withOrgGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk(height), 0)]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_pyramidOrPrismWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  self->polygonForPyramidBasis_ = NO;
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) return nil;
  if (self->draggingOccuredBeforeRelease_ && (self->pyramidBasis_ == nil) && [self selPoints] == 0 && [self selPolygons] == 0) {
    return nil;
  }
  if (self->pyramidBasis_ == nil) {
    if ([self selPolygons] == 0) {
      if ([self selPoints] > 2) {
        jboolean finished = !self->selectionPreview_ && [hits containsWithId:[((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) getWithInt:0]];
        if (finished) {
          [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *) check_class_cast([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getPreviewDrawable], [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D class])))) previewBasisIsFinished];
          OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, [self getSelectedPointsND]);
          OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(self);
          return nil;
        }
      }
      if ([self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:OrgGeogebraCommonKernelGeosGeoPolygon_POLYGON_MAX_POINTS withBoolean:NO] != 0 || (!self->selectionPreview_ && ![((JavaUtilArrayList *) nil_chk(self->selectedPoints_)) isEmpty] && [hits containsWithId:[self->selectedPoints_ getWithInt:0]])) {
        return nil;
      }
    }
    jboolean selectionOccured = NO;
    if ([self selPoints] < 2) {
      if ([self addSelectedPolygonWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO] == 1) {
        self->polygonForPyramidBasis_ = YES;
        selectionOccured = YES;
      }
    }
    if (!selectionOccured) {
      [self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    }
    if ([self selPoints] == 1 && [self selPolygons] == 1) {
      IOSObjectArray *basis = [self getSelectedPolygons];
      IOSObjectArray *points = [self getSelectedPointsND];
      [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) disposePreview];
      switch (self->mode_) {
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PyramidWithNSStringArray:nil withOrgGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(basis), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0)]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PrismWithNSStringArray:nil withOrgGeogebraCommonKernelGeosGeoPolygon:IOSObjectArray_Get(nil_chk(basis), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0)]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
    }
  }
  else {
    [self addSelectedPointWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
    if ([self selPoints] == 1) {
      IOSObjectArray *points = [IOSObjectArray arrayWithLength:self->pyramidBasis_->size_ + 1 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
      for (jint i = 0; i < self->pyramidBasis_->size_; i++) IOSObjectArray_Set(points, i, IOSObjectArray_Get(self->pyramidBasis_, i));
      IOSObjectArray_Set(points, self->pyramidBasis_->size_, IOSObjectArray_Get(nil_chk([self getSelectedPointsND]), 0));
      [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) disposePreview];
      switch (self->mode_) {
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
        OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, nil);
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PyramidWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
        OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_pyramidBasis_(self, nil);
        return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) PrismWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
    }
    return nil;
  }
  return nil;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  if (self->pointMoveMode_ == OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY) {
    self->pointMoveMode_ = OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z;
  }
  else {
    self->pointMoveMode_ = OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
  }
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_cancelSwitchPointMoveModeIfNeeded(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  if (!self->draggingOccuredBeforeRelease_ && self->movedGeoPoint_ != nil && [self->movedGeoPoint_ isIndependent]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_switchPointMoveMode(self);
  }
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initPointMoveMode(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  if (self->mode_ == OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
    self->pointMoveMode_ = OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
  }
  else {
    self->pointMoveMode_ = OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z;
  }
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_checkCoordCartesian3DWithOrgGeogebraCommonKernelKernelNDGeoPointND_(id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getMode] != OrgGeogebraCommonKernelKernel_COORD_CARTESIAN_3D) {
    [point setCartesian3D];
    [point updateRepaint];
  }
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_intersectionCurveWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if (hits == nil) {
    OrgGeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, nil);
    return nil;
  }
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    OrgGeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, nil);
    return nil;
  }
  if (self->mouseMoved_ && [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) hasMouse2D]) {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->intersectionCurveList_)) size]; ++i) {
      ((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk([self->intersectionCurveList_ getWithInt:i]))->hitted_ = NO;
    }
    for (jint i = 0; i < [hits size]; ++i) {
      for (jint j = i + 1; j < [hits size]; ++j) {
        [self createIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement:[hits getWithInt:i] withOrgGeogebraCommonKernelGeosGeoElement:[hits getWithInt:j]];
      }
    }
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([self->view3D_ getRenderer])) pickIntersectionCurves];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_decideIntersectionWithOrgGeogebraCommonEuclidianHits_(self, hits);
  }
  if (self->goodHits_ != nil) {
    [self addSelectedPolygonWithOrgGeogebraCommonEuclidianHits:self->goodHits_ withInt:1 withBoolean:NO];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, self->goodHits_, 2, YES);
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, self->goodHits_, 2, YES);
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, self->goodHits_, 1, NO);
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, self->goodHits_, 1, NO);
  }
  else {
    OrgGeogebraCommonEuclidianHits *firstSurface = [hits getFirstSurfaceBeforeWithJavaUtilArrayList:self->selectedGeos_];
    [self addSelectedPolygonWithOrgGeogebraCommonEuclidianHits:firstSurface withInt:1 withBoolean:NO];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, firstSurface, 2, NO);
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, firstSurface, 2, NO);
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, firstSurface, 1, NO);
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, firstSurface, 1, NO);
  }
  if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) == 1) {
    if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self) >= 1) {
      id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> plane = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0);
      OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quad = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(self)), 0);
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPlaneND:plane withOrgGeogebraCommonKernelKernelNDGeoQuadricND:quad] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) isDefined]) {
        return ret;
      }
      return nil;
    }
    else if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPolyhedron(self) == 1) {
      IOSObjectArray *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectRegionWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0) withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPolyhedron(self)), 0) withIntArray:nil];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) isDefined]) {
        return ret;
      }
      return nil;
    }
    else if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadricLimited(self) == 1) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectQuadricLimitedWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadricLimited(self)), 0)]);
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) isDefined]) {
        return nil;
      }
      [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([self->kernel_ getManager3D])) CornerWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(IOSObjectArray_Get(ret, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])];
      return ret;
    }
    else if ([self selPolygons] == 1) {
      id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> plane = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self)), 0);
      OrgGeogebraCommonKernelGeosGeoPolygon *poly = IOSObjectArray_Get(nil_chk([self getSelectedPolygons]), 0);
      IOSObjectArray *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectPathWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:plane withOrgGeogebraCommonKernelGeosGeoElement:poly];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) isDefined]) {
        [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getManager3D])) IntersectionPointWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:plane withOrgGeogebraCommonKernelGeosGeoElement:poly];
        return ret;
      }
      return nil;
    }
  }
  else if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(self) >= 2) {
    IOSObjectArray *quads = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(self);
    IOSObjectArray *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectAsCircleWithNSStringArray:nil withOrgGeogebraCommonKernelKernelNDGeoQuadricND:IOSObjectArray_Get(nil_chk(quads), 0) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:IOSObjectArray_Get(quads, 1)];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) isDefined]) {
      return ret;
    }
    return nil;
  }
  else if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(self) >= 2) {
    IOSObjectArray *planes = OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(self);
    return [IOSObjectArray arrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectPlanesWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(nil_chk(planes), 0) withOrgGeogebraCommonKernelKernelNDGeoPlaneND:IOSObjectArray_Get(planes, 1)] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  return nil;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlanePolygonWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *A, OrgGeogebraCommonKernelGeosGeoPolygon *B) {
  if ([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(B)) getMetasLength] == 1) {
    jboolean oldSilentMode = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
    [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
    OrgGeogebraCommonKernelGeosGeoElement *polyhedron = IOSObjectArray_Get(nil_chk([B getMetas]), 0);
    IOSObjectArray *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectRegionWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelGeosGeoElement:polyhedron];
    jboolean goAhead = YES;
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D *drawPolygons = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoElement_(self->view3D_, IOSObjectArray_Get(nil_chk(ret), 0)) autorelease];
    for (jint i = 0; i < ret->size_ && goAhead; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(ret, i);
      if ([geo isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class]]) {
        OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *d = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(self->view3D_, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])) autorelease];
        [drawPolygons addWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
        OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, polyhedron, geo, drawPolygons);
      }
      else {
        goAhead = NO;
      }
    }
    [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
    return YES;
  }
  jboolean oldSilentMode = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
  IOSObjectArray *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectPathWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelGeosGeoPolygon:B];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D *drawSegments = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoElement_(self->view3D_, IOSObjectArray_Get(nil_chk(ret), 0)) autorelease];
  {
    IOSObjectArray *a__ = ret;
    OrgGeogebraCommonKernelGeosGeoElement * const *b__ = a__->buffer_;
    OrgGeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = *b__++;
      OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D *d = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_(self->view3D_, (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND))) autorelease];
      [drawSegments addWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
      OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, geo, drawSegments);
    }
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
  return YES;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *A, OrgGeogebraCommonKernelGeosGeoElement *B) {
  jboolean oldSilentMode = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoElement *ret;
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d;
  OrgGeogebraCommonKernelKernelNDGeoQuadricND *quad;
  if ([B isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]]) {
    quad = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(B, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])))) getMetas]), 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]);
    if (quad != nil) {
      ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectQuadricLimitedWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:quad];
      d = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicSection3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection_(self->view3D_, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(ret, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])) autorelease];
    }
    else {
      quad = (OrgGeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(B, [OrgGeogebraCommonKernelKernelNDGeoQuadricND class]);
      ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:quad];
      d = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self->view3D_, (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(ret, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) autorelease];
    }
  }
  else {
    quad = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(B, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
    ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:quad];
    d = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self->view3D_, (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(ret, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) autorelease];
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, quad, ret, d);
  return YES;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_createIntersectionCurvePlaneQuadricLimitedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *A, OrgGeogebraCommonKernelGeosGeoElement *B) {
  jboolean oldSilentMode = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) isSilentMode];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoElement *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) IntersectQuadricLimitedWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(A, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(B, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicSection3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection_(self->view3D_, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(ret, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])) autorelease];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) setSilentModeWithBoolean:oldSilentMode];
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, ret, d);
  return YES;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_processIntersectionCurveWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *A, OrgGeogebraCommonKernelGeosGeoElement *B, OrgGeogebraCommonKernelGeosGeoElement *intersection, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d) {
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(intersection)) setLineThicknessWithInt:3];
  [intersection setIsPickableWithBoolean:NO];
  [intersection setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_get_colIntersectionCurve_()];
  [((JavaUtilArrayList *) nil_chk(self->intersectionCurveList_)) addWithId:[new_OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, A, B, intersection, YES, d) autorelease]];
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  if ([OrgGeogebraCommonKernelGeosFromMeta_class_() isInstance:geo]) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getMetasLength] == 1) {
      return IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelGeosFromMeta>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosFromMeta))) getMetas]), 0);
    }
  }
  return geo;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_decideIntersectionWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  OrgGeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, nil);
  jdouble zNear = JavaLangDouble_NEGATIVE_INFINITY;
  for (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve * __strong intersectionCurve in nil_chk(self->intersectionCurveList_)) {
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = ((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(intersectionCurve))->drawable_;
    if ([((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) getZPickNear] > zNear) {
      OrgGeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, [d getGeoElement]);
      OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_resultedIntersectionCurve_(self, intersectionCurve);
      zNear = [d getZPickNear];
    }
  }
  if (self->resultedGeo_ == nil) {
    self->hideIntersection_ = YES;
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) setPreviewWithOrgGeogebraCommonEuclidianPreviewable:nil];
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_goodHits_(self, nil);
    return;
  }
  jint i = 0;
  jboolean checking = YES;
  while (checking && i < [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) getWithInt:i];
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getDrawableNDWithOrgGeogebraCommonKernelGeosGeoElement:geo], [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class]);
    if (d != nil) {
      if ([d getZPickNear] < zNear) {
        checking = NO;
      }
      else if ([d getZPickNear] > zNear + 1 && (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isRegion] || [geo getAlphaValue] > OrgGeogebraCommonEuclidianEuclidianController_MAX_TRANSPARENT_ALPHA_VALUE)) {
        checking = NO;
        OrgGeogebraCommonEuclidianEuclidianController_set_resultedGeo_(self, nil);
      }
    }
    i++;
  }
  if (self->resultedGeo_ == nil) {
    self->hideIntersection_ = YES;
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) setPreviewWithOrgGeogebraCommonEuclidianPreviewable:nil];
    return;
  }
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) size] == 0) {
    self->hideIntersection_ = YES;
    return;
  }
  if (self->goodHits_ == nil) OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setAndConsume_goodHits_(self, new_OrgGeogebraCommonGeogebra3DEuclidian3DHits3D_init());
  else [self->goodHits_ clear];
  if ([hits size] < 2 || (!(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_([hits getWithInt:0]) == ((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(self->resultedIntersectionCurve_))->geo1_ && OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_([hits getWithInt:1]) == self->resultedIntersectionCurve_->geo2_) && !(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_([hits getWithInt:0]) == self->resultedIntersectionCurve_->geo2_ && OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_([hits getWithInt:1]) == self->resultedIntersectionCurve_->geo1_))) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement_(self, [hits getWithInt:0]);
    self->hideIntersection_ = YES;
    return;
  }
  self->hideIntersection_ = NO;
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement_(self, [hits getWithInt:0]);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement_(self, [hits getWithInt:1]);
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) setPreviewWithOrgGeogebraCommonEuclidianPreviewable:(id<OrgGeogebraCommonEuclidianPreviewable>) check_protocol_cast(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *) nil_chk(self->resultedIntersectionCurve_))->drawable_, @protocol(OrgGeogebraCommonEuclidianPreviewable))];
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addToGoodHitsWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(self->goodHits_)) addWithId:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getMetaIfJustOneWithOrgGeogebraCommonKernelGeosGeoElement_(geo)];
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedCS2D_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOCOORDSYS2D()];
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedCS2D_)) size];
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *planes = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedCS2D_)) size] type:OrgGeogebraCommonKernelKernelNDGeoCoordSys2D_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedCS2D_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(planes, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedCS2D_];
  return planes;
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPlaneWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPlane_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPLANEND()];
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPlanes(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPlane_)) size];
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPlanes(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *planes = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPlane_)) size] type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedPlane_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(planes, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedPlane_];
  return planes;
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadric(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedQuadric_)) size];
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedQuadric_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOQUADRIC3D()];
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadric(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *quads = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedQuadric_)) size] type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedQuadric_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(quads, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedQuadric_];
  return quads;
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selQuadricLimited(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedQuadricLimited_)) size];
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedQuadricLimitedWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedQuadricLimited_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOQUADRIC3DLIMITED()];
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedQuadricLimited(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *quads = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedQuadricLimited_)) size] type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedQuadricLimited_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(quads, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedQuadricLimited_];
  return quads;
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selPolyhedron(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  return [((JavaUtilArrayList *) nil_chk(self->selectedPolyhedron_)) size];
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedPolyhedronWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits, jint max, jboolean addMoreThanOneAllowed) {
  return [self handleAddSelectedWithOrgGeogebraCommonEuclidianHits:hits withInt:max withBoolean:addMoreThanOneAllowed withJavaUtilArrayList:self->selectedPolyhedron_ withOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_GEOPOLYHEDRON()];
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedPolyhedron(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self) {
  IOSObjectArray *polyh = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->selectedPolyhedron_)) size] type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [self->selectedPolyhedron_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(polyh, i, [it next]);
    i++;
  }
  [self clearSelectionWithJavaUtilArrayList:self->selectedPolyhedron_];
  return polyh;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForMovingPointWithInt_(jint mode) {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
    return YES;
    default:
    return OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(mode);
  }
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_isModeForCreatingPointWithInt_(jint mode) {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    return YES;
    default:
    return NO;
  }
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_updateStartPointWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelMatrixCoords *p) {
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->startPoint3D_)) setWithOrgGeogebraCommonKernelMatrixCoords:p];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:self->startPoint3D_];
  [self->startPoint3D_ projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withOrgGeogebraCommonKernelMatrixCoords:[self->view3D_ getHittingDirection] withOrgGeogebraCommonKernelMatrixCoords:self->startPoint3DxOy_];
}

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_setTranslateFromPointStartWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonKernelGeosGeoElement *geo, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->startPoint3D_)) setWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getCursor3D])) getInhomCoordsInD3]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->translationVec3D_)) setSubWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3] withOrgGeogebraCommonKernelMatrixCoords:self->startPoint3D_];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPlane]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, [geo getMainDirection]);
    if ([point isGeoElement3D]) {
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(point, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) setMoveModeWithInt:OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z];
    }
  }
  else {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_set_translateDirection_(self, nil);
    if ([point isGeoElement3D]) {
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(point, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) setMoveModeWithInt:OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT];
    }
  }
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateAroundLineWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if ([self selGeos] == 0) {
    OrgGeogebraCommonEuclidianHits *rotAbles = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = [self addSelectedGeoWithOrgGeogebraCommonEuclidianHits:rotAbles withInt:1 withBoolean:NO];
  }
  if (count == 0) {
    count = [self addSelectedPolygonWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  }
  if (count == 0) {
    [self addSelectedLineWithOrgGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  }
  if (([self selLines] == 1) && ([self selGeos] > 0)) {
    IOSObjectArray *selGeos = [self getSelectedGeos];
    [((OrgGeogebraCommonMainDialogManager *) nil_chk([self getDialogManager])) showNumberInputDialogRotateWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getMenuWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getModeTextWithInt:self->mode_]] withOrgGeogebraCommonKernelGeosGeoPolygonArray:[self getSelectedPolygons] withOrgGeogebraCommonKernelKernelNDGeoLineNDArray:[self getSelectedLinesND] withOrgGeogebraCommonKernelGeosGeoElementArray:selGeos withOrgGeogebraCommonEuclidianEuclidianController:self];
    return nil;
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_mirrorAtPlaneWithOrgGeogebraCommonEuclidianHits_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *self, OrgGeogebraCommonEuclidianHits *hits) {
  if ([((OrgGeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty]) {
    return nil;
  }
  jint count = 0;
  if ([self selGeos] == 0) {
    OrgGeogebraCommonEuclidianHits *mirAbles = [hits getHitsWithOrgGeogebraCommonKernelGeosTestEnum:OrgGeogebraCommonKernelGeosTestEnum_get_TRANSFORMABLE() withOrgGeogebraCommonEuclidianHits:self->tempArrayList_];
    count = [self addSelectedGeoWithOrgGeogebraCommonEuclidianHits:mirAbles withInt:1 withBoolean:NO];
  }
  if (count == 0) {
    OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_addSelectedCS2DWithOrgGeogebraCommonEuclidianHits_withInt_withBoolean_(self, hits, 1, NO);
  }
  if (OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_selCS2D(self) == 1) {
    if ([self selGeos] > 0) {
      IOSObjectArray *geos = [self getSelectedGeos];
      id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_getSelectedCS2D(self)), 0);
      id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> mirror = plane;
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoConic]) {
        plane = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Plane3DWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:mirror];
      }
      JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
      [self checkZooming];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
        if (IOSObjectArray_Get(geos, i) != mirror) {
          if ([OrgGeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Mirror3DWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:plane])];
          }
          else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) isGeoPolygon]) {
            [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Mirror3DWithNSString:nil withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:plane])];
          }
        }
      }
      IOSObjectArray *retex = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return [ret toArrayWithNSObjectArray:retex];
    }
  }
  return nil;
}

NSString *OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_rotateObjectWithOrgGeogebraCommonMainApp_withNSString_withBoolean_withOrgGeogebraCommonKernelGeosGeoPolygonArray_withOrgGeogebraCommonKernelKernelNDGeoLineNDArray_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_(OrgGeogebraCommonMainApp *app, NSString *inputText, jboolean clockwise, IOSObjectArray *polys, IOSObjectArray *lines, IOSObjectArray *selGeos, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *ec) {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_initialize();
  NSString *defaultRotateAngle = OrgGeogebraCommonUtilUnicode_get_FORTY_FIVE_DEGREES_();
  NSString *angleText = inputText;
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getKernel];
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
  jboolean oldVal = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(ec)) viewOrientationForClockwiseWithBoolean:clockwise withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(nil_chk(lines), 0)]) {
    inputText = JreStrcat("$$C", @"-(", inputText, ')');
  }
  IOSObjectArray *result = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) processAlgebraCommandWithNSString:inputText withBoolean:NO];
  [cons setSuppressLabelCreationWithBoolean:oldVal];
  jboolean success = result != nil && [OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(result, 0)];
  if (success) {
    id<OrgGeogebraCommonKernelGeosGeoNumberValue> num = (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(result), 0), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue));
    if ([((NSString *) nil_chk(angleText)) hasSuffix:OrgGeogebraCommonUtilUnicode_get_DEGREE_()]) defaultRotateAngle = angleText;
    if (((IOSObjectArray *) nil_chk(polys))->size_ == 1) {
      IOSObjectArray *geos = [ec rotateAroundLineWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(polys, 0) withOrgGeogebraCommonKernelGeosGeoNumberValue:num withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 0)];
      if (geos != nil) {
        [app storeUndoInfo];
        [ec memorizeJustCreatedGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:geos];
      }
      return defaultRotateAngle;
    }
    JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(selGeos))->size_; i++) {
      if (IOSObjectArray_Get(selGeos, i) != IOSObjectArray_Get(lines, 0)) {
        if ([OrgGeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(selGeos, i)]) {
          [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([ec rotateAroundLineWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(selGeos, i) withOrgGeogebraCommonKernelGeosGeoNumberValue:num withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 0)])];
        }
        else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(selGeos, i))) isGeoPolygon]) {
          [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([ec rotateAroundLineWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(selGeos, i) withOrgGeogebraCommonKernelGeosGeoNumberValue:num withOrgGeogebraCommonKernelKernelNDGeoLineND:IOSObjectArray_Get(lines, 0)])];
        }
      }
    }
    if (![ret isEmpty]) {
      [app storeUndoInfo];
      [ec memorizeJustCreatedGeosWithJavaUtilArrayList:ret];
    }
  }
  return defaultRotateAngle;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D)

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *)outer$
                                          withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo1
                                          withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo2
                                          withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)result
                                                                        withBoolean:(jboolean)hitted
                           withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, outer$, geo1, geo2, result, hitted, drawable);
  return self;
}

- (void)dealloc {
  RELEASE_(geo1_);
  RELEASE_(geo2_);
  RELEASE_(result_);
  RELEASE_(drawable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:withBoolean:withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "IntersectionCurve", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo1_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "geo2_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "result_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "drawable_", NULL, 0x1, "Lorg.geogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", NULL, NULL,  },
    { "hitted_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve = { 2, "IntersectionCurve", "org.geogebra.common.geogebra3D.euclidian3D", "EuclidianController3D", 0x1, 1, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *outer$, OrgGeogebraCommonKernelGeosGeoElement *geo1, OrgGeogebraCommonKernelGeosGeoElement *geo2, OrgGeogebraCommonKernelGeosGeoElement *result, jboolean hitted, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  NSObject_init(self);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_set_geo1_(self, geo1);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_set_geo2_(self, geo2);
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_set_result_(self, result);
  self->hitted_ = hitted;
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_set_drawable_(self, drawable);
}

OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *new_OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *outer$, OrgGeogebraCommonKernelGeosGeoElement *geo1, OrgGeogebraCommonKernelGeosGeoElement *geo2, OrgGeogebraCommonKernelGeosGeoElement *result, jboolean hitted, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve *self = [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, outer$, geo1, geo2, result, hitted, drawable);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_IntersectionCurve)
