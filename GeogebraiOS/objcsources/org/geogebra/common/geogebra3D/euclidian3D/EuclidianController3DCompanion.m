//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/EuclidianController3DCompanion.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/Previewable.h"
#include "org/geogebra/common/euclidian/event/AbstractEvent.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianController3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianController3DCompanion.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidianFor3D/EuclidianControllerFor3DCompanion.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/Region.h"
#include "org/geogebra/common/kernel/RegionParameters.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion () {
 @public
  OrgGeogebraCommonKernelMatrixCoords *tmpCoords1_, *tmpCoords2_;
  OrgGeogebraCommonKernelMatrixCoords *captureCoords_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion, tmpCoords1_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion, tmpCoords2_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion, captureCoords_, OrgGeogebraCommonKernelMatrixCoords *)

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion

- (instancetype)initWithOrgGeogebraCommonEuclidianEuclidianController:(OrgGeogebraCommonEuclidianEuclidianController *)ec {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianController_(self, ec);
  return self;
}

- (void)movePointWithBoolean:(jboolean)repaint
withOrgGeogebraCommonEuclidianEventAbstractEvent:(OrgGeogebraCommonEuclidianEventAbstractEvent *)event {
  if ([((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->movedGeoPoint_ isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]]) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *movedGeoPoint3D = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(ec_->movedGeoPoint_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
    if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(movedGeoPoint3D)) hasPath]) {
      [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])) setMouseInformationWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:movedGeoPoint3D];
      [movedGeoPoint3D doPath];
      OrgGeogebraCommonKernelMatrixCoords *coords = [movedGeoPoint3D getInhomCoordsInDWithInt:3];
      if ([self checkPointCapturingXYThenZWithOrgGeogebraCommonKernelMatrixCoords:coords]) {
        [movedGeoPoint3D setWillingCoordsWithOrgGeogebraCommonKernelMatrixCoords:coords];
        [movedGeoPoint3D setWillingDirectionUndefined];
        [movedGeoPoint3D doPath];
      }
    }
    else if ([movedGeoPoint3D hasRegion]) {
      [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])) setMouseInformationWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:movedGeoPoint3D];
      [movedGeoPoint3D doRegion];
      jboolean changed = NO;
      OrgGeogebraCommonKernelMatrixCoords *coords = [movedGeoPoint3D getCoords];
      if ([movedGeoPoint3D getRegion] == [((OrgGeogebraCommonKernelKernel *) nil_chk([ec_ getKernel])) getXOYPlane]) {
        changed = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])) checkXYMinMaxWithOrgGeogebraCommonKernelMatrixCoords:coords];
      }
      if ([self checkPointCapturingXYThenZWithOrgGeogebraCommonKernelMatrixCoords:coords] || changed) {
        [movedGeoPoint3D setWillingCoordsWithOrgGeogebraCommonKernelMatrixCoords:coords];
        [movedGeoPoint3D setWillingDirectionUndefined];
        [movedGeoPoint3D doRegion];
      }
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_)) getCursor3D])) setMoveNormalDirectionWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelRegionParameters *) nil_chk([movedGeoPoint3D getRegionParameters])) getNormal]];
    }
    else {
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(ec_->movedGeoPoint_)) getMoveMode] == OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z || ([ec_->movedGeoPoint_ getMoveMode] == OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT && [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])) getPointMoveMode] == OrgGeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z)) {
        OrgGeogebraCommonKernelMatrixCoords *o = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:ec_->mouseLoc_];
        [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_ toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:o];
        [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])) addOffsetForTranslationWithOrgGeogebraCommonKernelMatrixCoords:o];
        [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([movedGeoPoint3D getCoords])) projectNearLineWithOrgGeogebraCommonKernelMatrixCoords:o withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_ getHittingDirection] withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])) getNormalTranslateDirection] withOrgGeogebraCommonKernelMatrixCoords:tmpCoords1_];
        if ([ec_ getMoveMode] == OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT) {
          if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) getZ] > IOSDoubleArray_Get(nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->zMinMax_), 1)) [tmpCoords1_ setZWithDouble:IOSDoubleArray_Get(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->zMinMax_, 1)];
          else if ([tmpCoords1_ getZ] < IOSDoubleArray_Get(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->zMinMax_, 0)) [tmpCoords1_ setZWithDouble:IOSDoubleArray_Get(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->zMinMax_, 0)];
        }
        {
          jdouble z0;
          jdouble gz;
          jdouble z;
          switch ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getPointCapturingMode]) {
            case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS:
            case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC:
            if (![ec_->view_ isGridOrAxesShown]) {
              break;
            }
            case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON:
            case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID:
            z0 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) getZ];
            gz = [ec_->view_ getGridDistancesWithInt:2];
            z = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(z0, gz);
            if ([ec_->view_ getPointCapturingMode] == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID || JavaLangMath_absWithDouble_(z - z0) < gz * [ec_ getPointCapturingPercentage]) {
              [tmpCoords1_ setZWithDouble:z];
            }
          }
        }
        [movedGeoPoint3D setCoordsWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords1_];
        [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])) getCurrentPlane])) setWithOrgGeogebraCommonKernelMatrixCoords:[movedGeoPoint3D getCoords] withInt:4];
      }
      else {
        [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])) movePointOnCurrentPlaneWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:movedGeoPoint3D withBoolean:NO];
      }
      if ([ec_ getMoveMode] == OrgGeogebraCommonEuclidianEuclidianController_MOVE_POINT) {
        [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_)) updatePointDecorationsWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:movedGeoPoint3D];
      }
    }
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_)) getCursor3D])) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[movedGeoPoint3D getCoords] withBoolean:NO];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_ updateMatrixForCursor3D];
    if (repaint) {
      [movedGeoPoint3D updateRepaint];
    }
    else {
      [movedGeoPoint3D updateCascade];
    }
    if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getPreviewDrawable] != nil) [ec_->view_ updatePreviewable];
    ec_->movedGeoPointDragged_ = YES;
  }
  else {
    OrgGeogebraCommonKernelMatrixCoords *o = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_)) getPickPointWithOrgGeogebraCommonAwtGPoint:ec_->mouseLoc_];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_ toSceneCoords3DWithOrgGeogebraCommonKernelMatrixCoords:o];
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:OrgGeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_ getHittingDirection] withOrgGeogebraCommonKernelMatrixCoords:tmpCoords1_ withOrgGeogebraCommonKernelMatrixCoords:tmpCoords2_];
    [self checkPointCapturingXYWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords2_];
    ec_->xRW_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords2_)) getX];
    ec_->yRW_ = [tmpCoords2_ getY];
    [super movePointWithBoolean:repaint withOrgGeogebraCommonEuclidianEventAbstractEvent:((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->mouseEvent_];
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_ getCursor3D])) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(ec_->movedGeoPoint_)) getCoordsInD3] withBoolean:NO];
  }
}

- (jboolean)checkPointCapturingXYWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  {
    jdouble x0;
    jdouble y0;
    jdouble gx;
    jdouble gy;
    jdouble x;
    jdouble y;
    switch ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getPointCapturingMode]) {
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC:
      if (![ec_->view_ isGridOrAxesShown]) {
        return NO;
      }
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID:
      x0 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
      y0 = [coords getY];
      gx = [ec_->view_ getGridDistancesWithInt:0];
      gy = [ec_->view_ getGridDistancesWithInt:1];
      x = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(x0, gx);
      y = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(y0, gy);
      if ([ec_->view_ getPointCapturingMode] == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID || (JavaLangMath_absWithDouble_(x - x0) < gx * [ec_ getPointCapturingPercentage] && JavaLangMath_absWithDouble_(y - y0) < gy * [ec_ getPointCapturingPercentage])) {
        [coords setXWithDouble:x];
        [coords setYWithDouble:y];
        return YES;
      }
      return NO;
    }
  }
  return NO;
}

- (jboolean)checkPointCapturingXYZWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  {
    jdouble x0;
    jdouble y0;
    jdouble z0;
    jdouble gx;
    jdouble gy;
    jdouble gz;
    jdouble x;
    jdouble y;
    jdouble z;
    switch ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getPointCapturingMode]) {
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC:
      if (![ec_->view_ isGridOrAxesShown]) {
        return NO;
      }
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID:
      x0 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
      y0 = [coords getY];
      z0 = [coords getZ];
      gx = [ec_->view_ getGridDistancesWithInt:0];
      gy = [ec_->view_ getGridDistancesWithInt:1];
      gz = [ec_->view_ getGridDistancesWithInt:2];
      x = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(x0, gx);
      y = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(y0, gy);
      z = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(z0, gz);
      if ([ec_->view_ getPointCapturingMode] == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID || (JavaLangMath_absWithDouble_(x - x0) < gx * [ec_ getPointCapturingPercentage] && JavaLangMath_absWithDouble_(y - y0) < gy * [ec_ getPointCapturingPercentage] && JavaLangMath_absWithDouble_(z - z0) < gz * [ec_ getPointCapturingPercentage])) {
        [coords setXWithDouble:x];
        [coords setYWithDouble:y];
        [coords setZWithDouble:z];
        return YES;
      }
      return NO;
    }
  }
  return NO;
}

- (jboolean)checkPointCapturingXYThenZWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  {
    jdouble x0;
    jdouble y0;
    jdouble z0;
    jdouble gx;
    jdouble gy;
    jdouble gz;
    jdouble x;
    jdouble y;
    jdouble z;
    switch ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getPointCapturingMode]) {
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC:
      if (![ec_->view_ isGridOrAxesShown]) {
        return NO;
      }
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON:
      case OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID:
      x0 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
      y0 = [coords getY];
      z0 = [coords getZ];
      gx = [ec_->view_ getGridDistancesWithInt:0];
      gy = [ec_->view_ getGridDistancesWithInt:1];
      gz = [ec_->view_ getGridDistancesWithInt:2];
      x = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(x0, gx);
      y = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(y0, gy);
      z = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(z0, gz);
      if ([ec_->view_ getPointCapturingMode] == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID || (JavaLangMath_absWithDouble_(x - x0) < gx * [ec_ getPointCapturingPercentage] && JavaLangMath_absWithDouble_(y - y0) < gy * [ec_ getPointCapturingPercentage])) {
        [coords setXWithDouble:x];
        [coords setYWithDouble:y];
        if ([ec_->view_ getPointCapturingMode] == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID || JavaLangMath_absWithDouble_(z - z0) < gz * [ec_ getPointCapturingPercentage]) {
          [coords setZWithDouble:z];
        }
        return YES;
      }
      else if ([ec_->view_ getPointCapturingMode] == OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID || JavaLangMath_absWithDouble_(z - z0) < gz * [ec_ getPointCapturingPercentage]) {
        [coords setZWithDouble:z];
        return YES;
      }
      return NO;
    }
  }
  return NO;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                                               withBoolean:(jboolean)complex {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D;
  if (!forPreviewable) {
    if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))))->view3D_)) getCursor3DType] == OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE) return nil;
    point3D = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Point3DWithNSString:nil withDouble:0 withDouble:0 withDouble:0 withBoolean:NO], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  }
  else {
    point3D = [self createNewFreePointWithBoolean:complex];
    if (point3D == nil) return nil;
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setPathWithOrgGeogebraCommonKernelPath:nil];
    [point3D setRegionWithOrgGeogebraCommonKernelRegion:nil];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))))->view3D_)) setCursor3DTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_FREE];
    return point3D;
  }
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4_IdentityWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) getCurrentPlane]);
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) movePointOnCurrentPlaneWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:point3D withBoolean:NO];
  return point3D;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                           withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                                                               withBoolean:(jboolean)complex {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D;
  if (!forPreviewable) point3D = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getKernel])) getManager3D])) Point3DWithNSString:nil withOrgGeogebraCommonKernelPath:path withBoolean:NO], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  else {
    point3D = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))))->view3D_)) getCursor3D];
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setPathWithOrgGeogebraCommonKernelPath:path];
    [point3D setRegionWithOrgGeogebraCommonKernelRegion:nil];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))))->view3D_ setCursor3DTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_PATH];
  }
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) setMouseInformationWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:point3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) doPath];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) setWithOrgGeogebraCommonKernelMatrixCoords:[point3D getInhomCoordsInD3]];
  if ([self checkPointCapturingXYThenZWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords1_]) {
    [point3D setWillingCoordsWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords1_];
    [point3D doPath];
  }
  return point3D;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                         withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                                                               withBoolean:(jboolean)complex {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point3D = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))))->view3D_)) getCursor3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point3D)) setPathWithOrgGeogebraCommonKernelPath:nil];
  [point3D setRegionWithOrgGeogebraCommonKernelRegion:region];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) setMouseInformationWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:point3D];
  [point3D doRegion];
  [point3D setMoveNormalDirectionWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelRegionParameters *) nil_chk([point3D getRegionParameters])) getNormal]];
  if (region == [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getKernel])) getXOYPlane]) {
    OrgGeogebraCommonKernelMatrixCoords *coords = [point3D getInhomCoords];
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(region, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
    if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] < [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(plane)) getXmin] || [coords getX] > [plane getXmax] || [coords getY] < [plane getYmin] || [coords getY] > [plane getYmax]) {
      [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_ setCursor3DTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE];
      return nil;
    }
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(captureCoords_)) setValuesWithOrgGeogebraCommonKernelMatrixCoords:coords withInt:2];
    if ([self checkPointCapturingXYWithOrgGeogebraCommonKernelMatrixCoords:captureCoords_]) {
      [point3D setCoordsWithOrgGeogebraCommonKernelMatrixCoords:captureCoords_ withBoolean:NO];
    }
  }
  else {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) setWithOrgGeogebraCommonKernelMatrixCoords:[point3D getInhomCoordsInD3]];
    if ([self checkPointCapturingXYThenZWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords1_]) {
      [point3D setWillingCoordsWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords1_];
      [point3D doRegion];
    }
  }
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(ec_, [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class]))->view3D_ setCursor3DTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION];
  if (!forPreviewable) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *ret = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([ec_ getKernel])) getManager3D])) Point3DInWithNSString:nil withOrgGeogebraCommonKernelRegion:region withBoolean:NO], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(ret)) setWithOrgGeogebraCommonKernelGeosGeoElement:point3D];
    [ret doRegion];
    return ret;
  }
  return point3D;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)createNewFreePointWithBoolean:(jboolean)complex {
  return (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([self createNewPointWithBoolean:YES withOrgGeogebraCommonKernelRegion:[((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getKernel])) getXOYPlane] withBoolean:complex], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
}

- (jboolean)setCoordsToMouseLocWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)loc {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(loc)) setCoordsWithDouble:((OrgGeogebraCommonAwtGPoint *) nil_chk(((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->mouseLoc_))->x_ withDouble:ec_->mouseLoc_->y_ withDouble:1.0];
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonEuclidianEuclidianController:", "EuclidianController3DCompanion", NULL, 0x1, NULL, NULL },
    { "movePointWithBoolean:withOrgGeogebraCommonEuclidianEventAbstractEvent:", "movePoint", "V", 0x1, NULL, NULL },
    { "checkPointCapturingXYWithOrgGeogebraCommonKernelMatrixCoords:", "checkPointCapturingXY", "Z", 0x1, NULL, NULL },
    { "checkPointCapturingXYZWithOrgGeogebraCommonKernelMatrixCoords:", "checkPointCapturingXYZ", "Z", 0x1, NULL, NULL },
    { "checkPointCapturingXYThenZWithOrgGeogebraCommonKernelMatrixCoords:", "checkPointCapturingXYThenZ", "Z", 0x1, NULL, NULL },
    { "createNewPointWithBoolean:withBoolean:", "createNewPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithBoolean:withOrgGeogebraCommonKernelPath:withBoolean:", "createNewPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithBoolean:withOrgGeogebraCommonKernelRegion:withBoolean:", "createNewPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewFreePointWithBoolean:", "createNewFreePoint", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x4, NULL, NULL },
    { "setCoordsToMouseLocWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setCoordsToMouseLoc", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tmpCoords1_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoords2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "captureCoords_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion = { 2, "EuclidianController3DCompanion", "org.geogebra.common.geogebra3D.euclidian3D", NULL, 0x1, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianController_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *self, OrgGeogebraCommonEuclidianEuclidianController *ec) {
  (void) OrgGeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianController_(self, ec);
  self->tmpCoords1_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  self->tmpCoords2_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  self->captureCoords_ = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
}

OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *new_OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianController_(OrgGeogebraCommonEuclidianEuclidianController *ec) {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion *self = [OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion_initWithOrgGeogebraCommonEuclidianEuclidianController_(self, ec);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianController3DCompanion)
