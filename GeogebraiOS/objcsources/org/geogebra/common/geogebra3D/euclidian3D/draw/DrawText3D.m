//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawText3D.java
//


#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3DForText.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawText3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DCurves.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D ()

- (OrgGeogebraCommonAwtGFont *)getFont;

@end

__attribute__((unused)) static OrgGeogebraCommonAwtGFont *OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_getFont(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *self);

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3d
                                       withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoText_(self, a_view3d, text);
  return self;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *)newDrawLabel3DWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D {
  return [new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(view3D, self) autorelease];
}

- (void)updateForView {
}

- (jboolean)updateForItSelf {
  return YES;
}

- (void)drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
}

- (void)updateLabel {
  OrgGeogebraCommonKernelGeosGeoText *text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoText class]);
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) isLaTeX]) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) setIsVisibleWithBoolean:NO];
  }
  else {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) updateWithNSString:[text getTextString] withOrgGeogebraCommonAwtGFont:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_getFont(self) withOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getBackgroundColor] withOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getObjectColor] withOrgGeogebraCommonKernelMatrixCoords:[self getLabelPosition] withFloat:[self getLabelOffsetX] withFloat:-[self getLabelOffsetY]];
  }
}

- (void)updateLabelPosition {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer]];
}

- (OrgGeogebraCommonAwtGFont *)getFont {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_getFont(self);
}

- (jboolean)isLabelVisible {
  return [self isVisible];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  OrgGeogebraCommonKernelGeosGeoText *text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoText class]);
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) isAbsoluteScreenLocActive]) return [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_([text getAbsoluteScreenLocX], [text getAbsoluteScreenLocY], 0, 1) autorelease];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> loc = [text getStartPoint];
  if (loc == nil) return [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1) autorelease];
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(loc)) isDefined]) {
    return nil;
  }
  return [loc getInhomCoordsInD3];
}

- (jint)getPickOrder {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_TEXT;
}

- (jboolean)hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:(OrgGeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) hitWithOrgGeogebraCommonAwtGPoint:((OrgGeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting))->pos_]) {
    [self setZPickWithDouble:[label_ getDrawZ] withDouble:[label_ getDrawZ]];
    return YES;
  }
  return NO;
}

- (jboolean)hitLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:(OrgGeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
                     withOrgGeogebraCommonGeogebra3DEuclidian3DHits3D:(OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *)hits {
  return NO;
}

- (void)addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_TEXTS];
}

- (void)removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_TEXTS];
}

- (void)drawNotAbsolutePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  OrgGeogebraCommonKernelGeosGeoText *text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoText class]);
  if (![((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) isAbsoluteScreenLocActive]) {
    [self drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawAbsolutePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  OrgGeogebraCommonKernelGeosGeoText *text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoText class]);
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) isAbsoluteScreenLocActive]) {
    [self drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonKernelGeosGeoText:", "DrawText3D", NULL, 0x1, NULL, NULL },
    { "newDrawLabel3DWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "newDrawLabel3D", "Lorg.geogebra.common.geogebra3D.euclidian3D.draw.DrawLabel3D;", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "updateLabel", NULL, "V", 0x4, NULL, NULL },
    { "updateLabelPosition", NULL, "V", 0x4, NULL, NULL },
    { "getFont", NULL, "Lorg.geogebra.common.awt.GFont;", 0x2, NULL, NULL },
    { "isLabelVisible", NULL, "Z", 0x4, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
    { "hitLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:withOrgGeogebraCommonGeogebra3DEuclidian3DHits3D:", "hitLabel", "Z", 0x4, NULL, NULL },
    { "addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
    { "drawNotAbsolutePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawNotAbsolutePosition", "V", 0x1, NULL, NULL },
    { "drawAbsolutePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawAbsolutePosition", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D = { 2, "DrawText3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 17, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d, OrgGeogebraCommonKernelGeosGeoText *text) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoElement_(self, a_view3d, text);
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *) nil_chk(((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *) check_class_cast(self->label_, [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText class])))) setGeoWithOrgGeogebraCommonKernelGeosGeoText:text];
  [self setPickingTypeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d, OrgGeogebraCommonKernelGeosGeoText *text) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoText_(self, a_view3d, text);
  return self;
}

OrgGeogebraCommonAwtGFont *OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_getFont(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D *self) {
  OrgGeogebraCommonKernelGeosGeoText *text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoText class]);
  jint newFontSize = J2ObjCFpToInt(JavaLangMath_maxWithDouble_withDouble_(4, [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getFontSize] * [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) getFontSizeMultiplier]));
  jint newFontStyle = [text getFontStyle];
  jboolean newSerifFont = [text isSerifFont];
  OrgGeogebraCommonAwtGFont *textFont = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getApplication])) getFontCanDisplayWithNSString:[text getTextString] withBoolean:newSerifFont withInt:newFontStyle withInt:newFontSize];
  return textFont;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D)
