//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPolygon3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPolygon3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawSegment3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DSurfaces.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/discrete/PolygonTriangulation.h"
#include "org/geogebra/common/kernel/geos/FromMeta.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D () {
 @public
  IOSObjectArray *vertices_;
  OrgGeogebraCommonKernelDiscretePolygonTriangulation *pt_;
  OrgGeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
  JavaUtilArrayList *selectedPoints_;
  JavaUtilArrayList *segments_;
  JavaUtilArrayList *segmentsPoints_;
  jboolean isPreview_;
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *hittingPointForOutline_;
  OrgGeogebraCommonKernelMatrixCoords *project_, *globalCoords_, *inPlaneCoords_;
  IOSDoubleArray *parameters_;
}

- (void)updateVerticesWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
                                                        withInt:(jint)pointLength;

- (void)updateOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                 withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)vertices
                                                                      withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, vertices_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, pt_, OrgGeogebraCommonKernelDiscretePolygonTriangulation *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, boundsMin_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, boundsMax_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, selectedPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, segments_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, segmentsPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, hittingPointForOutline_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, project_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, globalCoords_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, inPlaneCoords_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, parameters_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithOrgGeogebraCommonKernelGeosGeoPolygon_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, OrgGeogebraCommonKernelGeosGeoPolygon *polygon, jint pointLength);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, IOSObjectArray *vertices, jint length);

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                    withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, a_view3D, polygon);
  return self;
}

- (void)drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLayerWithFloat:[self getLayer]];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:[self getGeometryIndex]];
  [renderer setLayerWithFloat:0];
}

- (void)drawOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible]) {
    [self setHighlightingColor];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getTextures])) setDashFromLineTypeWithInt:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineType]];
    [self drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  [self drawTracesOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withBoolean:NO];
}

- (void)drawGeometryHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawSurfaceGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryHiddenWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryForPickingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
              withOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  if (type == OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()) {
    [self drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  else {
    if ([self getAlpha] > 0) {
      [self drawSurfaceGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
    }
  }
}

- (void)drawSurfaceGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLayerWithFloat:[self getLayer]];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:[self getSurfaceIndex]];
  [renderer setLayerWithFloat:0];
}

- (jint)getPickOrder {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_SURFACE;
}

- (void)addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  if ([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class])))) isPartOfClosedSurface]) [self addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED];
  else [self addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES];
  if (![((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class])))) wasInitLabelsCalled]) {
    [self addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES];
  }
}

- (void)removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  if ([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class])))) isPartOfClosedSurface]) [self removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED];
  else [self removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES];
  if (![((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class])))) wasInitLabelsCalled]) {
    [self removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES];
  }
}

- (void)updateVerticesWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
                                                        withInt:(jint)pointLength {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithOrgGeogebraCommonKernelGeosGeoPolygon_withInt_(self, polygon, pointLength);
}

- (void)enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)min
                     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)max {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
}

- (jboolean)updateForItSelf {
  OrgGeogebraCommonKernelGeosGeoPolygon *polygon = (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class]);
  jint pointLength = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getPointsLength];
  if (pointLength < 3) {
    [self setSurfaceIndexWithInt:-1];
    return YES;
  }
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithOrgGeogebraCommonKernelGeosGeoPolygon_withInt_(self, polygon, pointLength);
  if (!isPreview_ && ![polygon wasInitLabelsCalled]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_(self, renderer, vertices_, pointLength);
  }
  jint index = [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) startPolygonsWithInt:[self getReusableSurfaceIndex]];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_drawPolygonWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelDiscretePolygonTriangulation_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_(renderer, polygon, pt_, vertices_, pointLength);
  [renderer endPolygons];
  [self setSurfaceIndexWithInt:index];
  return YES;
}

+ (void)drawPolygonWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
                    withOrgGeogebraCommonKernelDiscretePolygonTriangulation:(OrgGeogebraCommonKernelDiscretePolygonTriangulation *)pt
                               withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)vertices
                                                                    withInt:(jint)verticesLength {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_drawPolygonWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelDiscretePolygonTriangulation_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_(renderer, polygon, pt, vertices, verticesLength);
}

- (void)updateOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                 withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)vertices
                                                                      withInt:(jint)length {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_(self, renderer, vertices, length);
}

- (void)updateForView {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) {
    if (![((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class])))) wasInitLabelsCalled]) {
      OrgGeogebraCommonKernelGeosGeoPolygon *polygon = (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class]);
      jint pointLength = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getPointsLength];
      OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
      OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithOrgGeogebraCommonKernelGeosGeoPolygon_withInt_(self, polygon, pointLength);
      OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_(self, renderer, vertices_, pointLength);
      [self recordTrace];
    }
  }
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                                        withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, a_view3D, selectedPoints);
  return self;
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
}

- (void)updatePreview {
  if (segmentsPoints_ == nil) {
    [self setWaitForUpdate];
    return;
  }
  jint index = 0;
  id<JavaUtilIterator> spi = [((JavaUtilArrayList *) nil_chk(segmentsPoints_)) iterator];
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(selectedPoints_)) iterator];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = nil;
  JavaUtilArrayList *sp = nil;
  for (; [((id<JavaUtilIterator>) nil_chk(i)) hasNext] && [((id<JavaUtilIterator>) nil_chk(spi)) hasNext]; ) {
    point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([i next], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    if (sp != nil) [sp addWithId:point];
    sp = [((id<JavaUtilIterator>) nil_chk(spi)) next];
    [((JavaUtilArrayList *) nil_chk(sp)) clear];
    [sp addWithId:point];
  }
  for (; [((id<JavaUtilIterator>) nil_chk(spi)) hasNext]; ) {
    sp = [spi next];
    [((JavaUtilArrayList *) nil_chk(sp)) clear];
  }
  for (; [i hasNext]; ) {
    if (sp != nil && point != nil) [sp addWithId:point];
    sp = new_JavaUtilArrayList_init();
    [segmentsPoints_ addWithId:sp];
    point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([i next], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    [sp addWithId:point];
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D *s = new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_([self getView3D], sp);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([s getGeoElement])) setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:[self getGeoElement]];
    [((JavaUtilArrayList *) nil_chk(segments_)) addWithId:s];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:s];
  }
  for (id<JavaUtilIterator> s = [((JavaUtilArrayList *) nil_chk(segments_)) iterator]; [((id<JavaUtilIterator>) nil_chk(s)) hasNext]; ) [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D *) nil_chk([s next])) updatePreview];
  if ([selectedPoints_ size] < 2) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:NO];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:YES];
  IOSObjectArray *points = [IOSObjectArray newArrayWithLength:[selectedPoints_ size] + 1 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  index = 0;
  for (id<JavaUtilIterator> p = [selectedPoints_ iterator]; [((id<JavaUtilIterator>) nil_chk(p)) hasNext]; ) {
    (void) IOSObjectArray_Set(points, index, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([p next], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
    index++;
  }
  (void) IOSObjectArray_Set(points, index, [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCursor3D]);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast([self getGeoElement], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])))) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points withOrgGeogebraCommonKernelMatrixCoordSys:nil withBoolean:NO];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast([self getGeoElement], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])))) updateCoordSys];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isDefined]) [self setWaitForUpdate];
}

- (void)disposePreview {
  [self updatePreview];
  [super disposePreview];
  if (segments_ != nil) {
    for (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D * __strong s in segments_) {
      [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D *) nil_chk(s)) disposePreview];
    }
  }
  if (segmentsPoints_ != nil) {
    [segmentsPoints_ clear];
  }
}

- (jboolean)doHighlighting {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getMetasLength] > 0) {
    {
      IOSObjectArray *a__ = [((id<OrgGeogebraCommonKernelGeosFromMeta>) nil_chk(((id<OrgGeogebraCommonKernelGeosFromMeta>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelGeosFromMeta))))) getMetas];
      OrgGeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgGeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgGeogebraCommonKernelGeosGeoElement *meta = *b__++;
        if (meta != nil && [meta doHighlighting]) return YES;
      }
    }
  }
  return [super doHighlighting];
}

- (jboolean)hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:(OrgGeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  if (waitForReset_) {
    return NO;
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getAlphaValue] < OrgGeogebraCommonEuclidianEuclidianController_MIN_VISIBLE_ALPHA_VALUE) {
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoPolygon *poly = (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class]);
  if ([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) getCoordSys] == nil) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@", poly));
    return NO;
  }
  if (globalCoords_ == nil) {
    globalCoords_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
    inPlaneCoords_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  }
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting)) isSphere]) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(hitting->origin_)) projectPlaneWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([poly getCoordSys])) getMatrixOrthonormal] withOrgGeogebraCommonKernelMatrixCoords:globalCoords_];
    if (hittingPointForOutline_ == nil) {
      hittingPointForOutline_ = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_([poly getConstruction]);
      [hittingPointForOutline_ setWillingCoordsUndefined];
      [hittingPointForOutline_ setWillingDirectionUndefined];
    }
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(hittingPointForOutline_)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:globalCoords_];
    [poly pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:hittingPointForOutline_];
    OrgGeogebraCommonKernelMatrixCoords *p3d = [hittingPointForOutline_ getInhomCoordsInD3];
    if (project_ == nil) {
      project_ = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
    }
    jdouble d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p3d)) distanceWithOrgGeogebraCommonKernelMatrixCoords:hitting->origin_];
    jdouble scale_ = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
    if (d * scale_ <= [poly getLineThickness] + [hitting getThreshold]) {
      [self setZPickWithDouble:-d withDouble:-d];
      [self setPickingTypeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
      return YES;
    }
    [hittingPointForOutline_ setCoordsWithOrgGeogebraCommonKernelMatrixCoords:globalCoords_];
    [hittingPointForOutline_ setRegionWithOrgGeogebraCommonKernelRegion:poly];
    [poly pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:hittingPointForOutline_];
    p3d = [hittingPointForOutline_ getInhomCoordsInD3];
    d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p3d)) distanceWithOrgGeogebraCommonKernelMatrixCoords:hitting->origin_];
    if (d * scale_ <= [hitting getThreshold]) {
      [self setZPickWithDouble:-d withDouble:-d];
      [self setPickingTypeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
      return YES;
    }
  }
  else {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(hitting->origin_)) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([poly getCoordSys])) getMatrixOrthonormal] withOrgGeogebraCommonKernelMatrixCoords:hitting->direction_ withOrgGeogebraCommonKernelMatrixCoords:globalCoords_ withOrgGeogebraCommonKernelMatrixCoords:inPlaneCoords_];
    if (![hitting isInsideClippingWithOrgGeogebraCommonKernelMatrixCoords:globalCoords_]) {
      return NO;
    }
    jboolean ret = NO;
    if ([poly isInRegionWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(inPlaneCoords_)) getX] withDouble:[inPlaneCoords_ getY]]) {
      jdouble parameterOnHitting = [inPlaneCoords_ getZ];
      [self setZPickWithDouble:parameterOnHitting withDouble:parameterOnHitting];
      [self setPickingTypeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
      ret = YES;
    }
    if (![poly wasInitLabelsCalled]) {
      if (hittingPointForOutline_ == nil) {
        hittingPointForOutline_ = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_([poly getConstruction]);
      }
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(hittingPointForOutline_)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:globalCoords_];
      [poly pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:hittingPointForOutline_];
      OrgGeogebraCommonKernelMatrixCoords *p3d = [hittingPointForOutline_ getInhomCoordsInD3];
      if ([hitting isInsideClippingWithOrgGeogebraCommonKernelMatrixCoords:p3d]) {
        if (project_ == nil) {
          project_ = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
        }
        [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p3d)) projectLineWithOrgGeogebraCommonKernelMatrixCoords:hitting->origin_ withOrgGeogebraCommonKernelMatrixCoords:hitting->direction_ withOrgGeogebraCommonKernelMatrixCoords:project_ withDoubleArray:parameters_];
        jdouble d = [p3d distanceWithOrgGeogebraCommonKernelMatrixCoords:project_];
        jdouble scale_ = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
        if (d * scale_ <= [poly getLineThickness] + [hitting getThreshold]) {
          jdouble z = -IOSDoubleArray_Get(nil_chk(parameters_), 0);
          jdouble dz = [poly getLineThickness] / scale_;
          [self setZPickWithDouble:z + dz withDouble:z - dz];
          [self setPickingTypeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
          return YES;
        }
      }
    }
    return ret;
  }
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonKernelGeosGeoPolygon:", "DrawPolygon3D", NULL, 0x1, NULL, NULL },
    { "drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "drawOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawOutline", "V", 0x1, NULL, NULL },
    { "drawGeometryHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHiding", "V", 0x1, NULL, NULL },
    { "drawGeometryHiddenWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHidden", "V", 0x1, NULL, NULL },
    { "drawGeometryForPickingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "drawGeometryForPicking", "V", 0x4, NULL, NULL },
    { "drawSurfaceGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawSurfaceGeometry", "V", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
    { "updateVerticesWithOrgGeogebraCommonKernelGeosGeoPolygon:withInt:", "updateVertices", "V", 0x2, NULL, NULL },
    { "enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "drawPolygonWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelDiscretePolygonTriangulation:withOrgGeogebraCommonKernelMatrixCoordsArray:withInt:", "drawPolygon", "V", 0x19, NULL, NULL },
    { "updateOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withOrgGeogebraCommonKernelMatrixCoordsArray:withInt:", "updateOutline", "V", 0x2, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:", "DrawPolygon3D", NULL, 0x1, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "doHighlighting", NULL, "Z", 0x1, NULL, NULL },
    { "hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vertices_", NULL, 0x2, "[Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "pt_", NULL, 0x2, "Lorg.geogebra.common.kernel.discrete.PolygonTriangulation;", NULL, NULL,  },
    { "boundsMin_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "selectedPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "segments_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/euclidian3D/draw/DrawSegment3D;>;",  },
    { "segmentsPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/util/ArrayList;>;",  },
    { "isPreview_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hittingPointForOutline_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "project_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "globalCoords_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "inPlaneCoords_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "parameters_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D = { 2, "DrawPolygon3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 22, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, OrgGeogebraCommonKernelGeosGeoPolygon *polygon) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DSurfaces_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoElement_(self, a_view3D, polygon);
  self->vertices_ = [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
  self->pt_ = new_OrgGeogebraCommonKernelDiscretePolygonTriangulation_init();
  self->boundsMin_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->boundsMax_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->isPreview_ = NO;
  self->parameters_ = [IOSDoubleArray newArrayWithLength:2];
  [self->pt_ setPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:polygon];
  [self setPickingTypeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, OrgGeogebraCommonKernelGeosGeoPolygon *polygon) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, a_view3D, polygon);
  return self;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithOrgGeogebraCommonKernelGeosGeoPolygon_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, OrgGeogebraCommonKernelGeosGeoPolygon *polygon, jint pointLength) {
  if (((IOSObjectArray *) nil_chk(self->vertices_))->size_ < pointLength) {
    self->vertices_ = [IOSObjectArray newArrayWithLength:pointLength type:OrgGeogebraCommonKernelMatrixCoords_class_()];
    for (jint i = 0; i < pointLength; i++) {
      (void) IOSObjectArray_Set(self->vertices_, i, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
    }
  }
  for (jint i = 0; i < pointLength; i++) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->vertices_, i))) setValuesWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getPoint3DWithInt:i] withInt:3];
  }
  if (pointLength > 0) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->boundsMin_)) setValuesWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(self->vertices_, 0) withInt:3];
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->boundsMax_)) setValuesWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(self->vertices_, 0) withInt:3];
    for (jint i = 1; i < pointLength; i++) {
      OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(self->boundsMin_, self->boundsMax_, IOSObjectArray_Get(self->vertices_, i));
    }
  }
}

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_drawPolygonWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelDiscretePolygonTriangulation_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, OrgGeogebraCommonKernelGeosGeoPolygon *polygon, OrgGeogebraCommonKernelDiscretePolygonTriangulation *pt, IOSObjectArray *vertices, jint verticesLength) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initialize();
  OrgGeogebraCommonKernelMatrixCoords *n = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getMainDirection];
  [((OrgGeogebraCommonKernelDiscretePolygonTriangulation *) nil_chk(pt)) clear];
  @try {
    if ([pt updatePoints] > 2) {
      OrgGeogebraCommonKernelDiscretePolygonTriangulation_ConvexityEnum *convexity = [pt checkIsConvex];
      if (convexity != OrgGeogebraCommonKernelDiscretePolygonTriangulation_ConvexityEnum_get_NOT()) {
        jboolean reverse = [polygon getReverseNormalForDrawing] ^ (convexity == OrgGeogebraCommonKernelDiscretePolygonTriangulation_ConvexityEnum_get_CLOCKWISE());
        [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawPolygonConvexWithOrgGeogebraCommonKernelMatrixCoords:n withOrgGeogebraCommonKernelMatrixCoordsArray:vertices withInt:verticesLength withBoolean:reverse];
      }
      else {
        [pt setIntersections];
        [pt triangulate];
        IOSObjectArray *verticesWithIntersections = [pt getCompleteVerticesWithOrgGeogebraCommonKernelMatrixCoordsArray:vertices withOrgGeogebraCommonKernelMatrixCoordSys:[polygon getCoordSys] withInt:verticesLength];
        for (OrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan * __strong triFan in nil_chk([pt getTriangleFans])) {
          [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawTriangleFanWithOrgGeogebraCommonKernelMatrixCoords:n withOrgGeogebraCommonKernelMatrixCoordsArray:verticesWithIntersections withOrgGeogebraCommonKernelDiscretePolygonTriangulation_TriangleFan:triFan];
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    [e printStackTrace];
  }
}

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withOrgGeogebraCommonKernelMatrixCoordsArray_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, IOSObjectArray *vertices, jint length) {
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush = [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getBrush];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) startWithInt:[self getReusableGeometryIndex]];
  [brush setThicknessWithInt:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness] withFloat:(jfloat) [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
  for (jint i = 0; i < length - 1; i++) {
    [brush setAffineTextureWithFloat:0.5f withFloat:0.25f];
    [brush segmentWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(vertices), i) withOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(vertices, i + 1)];
  }
  [brush setAffineTextureWithFloat:0.5f withFloat:0.25f];
  [brush segmentWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(vertices), length - 1) withOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(vertices, 0)];
  [self setGeometryIndexWithInt:[brush end]];
}

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DSurfaces_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  self->vertices_ = [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
  self->pt_ = new_OrgGeogebraCommonKernelDiscretePolygonTriangulation_init();
  self->boundsMin_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->boundsMax_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->isPreview_ = NO;
  self->parameters_ = [IOSDoubleArray newArrayWithLength:2];
  OrgGeogebraCommonGeogebra3DKernel3DKernel3D *kernel = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getKernel];
  [self setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_([((OrgGeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk(kernel)) getConstruction], nil)];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setIsPickableWithBoolean:NO];
  [self->pt_ setPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [OrgGeogebraCommonKernelGeosGeoPolygon class])];
  self->selectedPoints_ = selectedPoints;
  self->segments_ = new_JavaUtilArrayList_init();
  self->segmentsPoints_ = new_JavaUtilArrayList_init();
  [self setPickingTypeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
  self->isPreview_ = YES;
  [self updatePreview];
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, a_view3D, selectedPoints);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D)
