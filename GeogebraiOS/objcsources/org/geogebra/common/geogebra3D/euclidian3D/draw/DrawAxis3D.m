//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawAxis3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Collection.h"
#include "java/util/TreeMap.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawAxis3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawJoinPoints.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLine3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/NumberFormatAdapter.h"

static void (*OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_super$_setDrawMinMaxWithDouble_withDouble_)(id, SEL, jdouble, jdouble);

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D () {
 @public
  JavaUtilTreeMap *labels_;
  jint numbersXOffset_, numbersYOffset_;
  jboolean outsideBox_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D, labels_, JavaUtilTreeMap *)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D)

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D
                                 withOrgGeogebraCommonKernelKernelNDGeoAxisND:(id<OrgGeogebraCommonKernelKernelNDGeoAxisND>)axis3D {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoAxisND_(self, view3D, axis3D);
  return self;
}

- (void)drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isEuclidianVisible]) return;
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isLabelVisible]) return;
  for (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D * __strong label in nil_chk([((JavaUtilTreeMap *) nil_chk(labels_)) values])) [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label)) drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [super drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)setWaitForReset {
  [super setWaitForReset];
  for (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D * __strong label in nil_chk([((JavaUtilTreeMap *) nil_chk(labels_)) values])) [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label)) setWaitForReset];
}

- (void)updateLabel {
  id<OrgGeogebraCommonKernelKernelNDGeoAxisND> axis = (id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoAxisND));
  jint axisIndex = [((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(axis)) getType];
  id<OrgGeogebraCommonUtilNumberFormatAdapter> numberFormat = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getAxisNumberFormatWithInt:axisIndex];
  jdouble distance = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getAxisNumberingDistanceWithInt:axisIndex];
  IOSDoubleArray *minmax = [self getDrawMinMax];
  jint iMin = J2ObjCFpToInt((IOSDoubleArray_Get(nil_chk(minmax), 0) / distance));
  jint iMax = J2ObjCFpToInt((IOSDoubleArray_Get(minmax, 1) / distance));
  if (IOSDoubleArray_Get(minmax, 0) > 0) iMin++;
  else if (IOSDoubleArray_Get(minmax, 1) < 0) iMax--;
  jint nb = iMax - iMin + 1;
  if (nb < 1) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I", @"nb=", nb));
    return;
  }
  for (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D * __strong label in nil_chk([((JavaUtilTreeMap *) nil_chk(labels_)) values])) [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label)) setIsVisibleWithBoolean:NO];
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getShowAxisNumbersWithInt:axisIndex]) {
    NSString *unitLabel = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getAxisUnitLabelWithInt:axisIndex];
    if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getPiAxisUnitWithInt:axisIndex]) {
      unitLabel = nil;
    }
    for (jint i = iMin; i <= iMax; i++) {
      jdouble val = i * distance;
      OrgGeogebraCommonKernelMatrixCoords *origin = [((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoAxisND))))) getPointInDWithInt:3 withDouble:val];
      NSString *strNum = [((OrgGeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getKernel])) formatPiEWithDouble:val withOrgGeogebraCommonUtilNumberFormatAdapter:numberFormat withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (unitLabel != nil) {
        strNum = JreStrcat("$$", strNum, unitLabel);
      }
      OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *label = [labels_ getWithId:strNum];
      if (label != nil) {
        [label setIsVisibleWithBoolean:YES];
        [label updateWithNSString:strNum withOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getFontAxes] withOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getObjectColor] withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(origin)) copyVector] withFloat:numbersXOffset_ withFloat:numbersYOffset_];
        [label updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer]];
      }
      else {
        label = new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_([self getView3D], self);
        [label setAnchorWithBoolean:YES];
        [label updateWithNSString:strNum withOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getApplication])) getPlainFontCommon] withOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getObjectColor] withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(origin)) copyVector] withFloat:numbersXOffset_ withFloat:numbersYOffset_];
        [label updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer]];
        (void) [labels_ putWithId:strNum withId:label];
      }
    }
  }
  NSString *text = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getAxisLabelWithInt:axisIndex];
  if (text == nil || ((jint) [text length]) == 0) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) setIsVisibleWithBoolean:NO];
  }
  else {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) setAnchorWithBoolean:YES];
    [label_ updateWithNSString:text withOrgGeogebraCommonAwtGFont:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getAxisLabelFontWithInt:axisIndex] withOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getObjectColor] withOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoAxisND))))) getPointInDWithInt:3 withDouble:IOSDoubleArray_Get(minmax, 1)] withFloat:((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement]))->labelOffsetX_ withFloat:((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement]))->labelOffsetY_];
    [label_ updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer]];
  }
}

- (void)setLabelWaitForReset {
  [super setLabelWaitForReset];
  for (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D * __strong l in nil_chk([((JavaUtilTreeMap *) nil_chk(labels_)) values])) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(l)) setWaitForReset];
  }
}

- (void)updateLabelPosition {
}

- (jboolean)updateForItSelf {
  [self setLabelWaitForUpdate];
  IOSDoubleArray *minmax = [self getDrawMinMax];
  jint axisIndex = [((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoAxisND))))) getType];
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush = [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer])) getGeometryManager])) getBrush];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) setArrowTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_ARROW_TYPE_SIMPLE];
  switch ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getAxisTickStyleWithInt:axisIndex]) {
    case 0:
    default:
    [brush setTicksWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_TicksEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_TicksEnum_get_MAJOR_AND_MINOR()];
    break;
    case 1:
    [brush setTicksWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_TicksEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_TicksEnum_get_MAJOR()];
    break;
    case 2:
    [brush setTicksWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_TicksEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_TicksEnum_get_NONE()];
    break;
  }
  [brush setTicksDistanceWithFloat:(jfloat) [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getAxisNumberingDistanceWithInt:axisIndex]];
  [brush setTicksOffsetWithFloat:(jfloat) (-IOSDoubleArray_Get(nil_chk(minmax), 0) / (IOSDoubleArray_Get(minmax, 1) - IOSDoubleArray_Get(minmax, 0)))];
  [super updateForItSelfWithBoolean:NO];
  [brush setArrowTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_ARROW_TYPE_NONE];
  [brush setTicksWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_TicksEnum:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_TicksEnum_get_NONE()];
  return YES;
}

- (void)updateDecorations {
  id<OrgGeogebraCommonKernelKernelNDGeoAxisND> axis = (id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoAxisND));
  OrgGeogebraCommonKernelMatrixCoords *v = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getToScreenMatrix])) mulWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(axis)) getDirectionInD3]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) setWithInt:3 withDouble:0];
  jdouble vScale = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
  jint vx = J2ObjCFpToInt(([v getWithInt:1] * 1.5 * [axis getTickSize] / vScale));
  jint vy = J2ObjCFpToInt(([v getWithInt:2] * 1.5 * [axis getTickSize] / vScale));
  numbersXOffset_ = -vy;
  numbersYOffset_ = vx;
  if ([axis getType] == OrgGeogebraCommonKernelKernelNDGeoAxisND_X_AXIS) {
    numbersXOffset_ = -numbersXOffset_;
    numbersYOffset_ = -numbersYOffset_;
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setLabelOffsetWithInt:((-vx - numbersXOffset_) * 3) / 2 withInt:((-vy - numbersYOffset_) * 3) / 2];
}

- (jdouble)getNumbersDistance {
  return 1;
}

- (void)updateForView {
}

- (void)setDrawMinMaxImmediatlyWithDoubleArray2:(IOSObjectArray *)minMax {
  jint type = [((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoAxisND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoAxisND))))) getType];
  jdouble min = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(minMax), type)), 0);
  jdouble max = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, type)), 1);
  outsideBox_ = NO;
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getPositiveAxisWithInt:type]) {
    if (min < 0) {
      if (max > 0) {
        min = 0;
      }
      else {
        outsideBox_ = YES;
      }
    }
  }
  if (!outsideBox_) {
    switch (type) {
      case OrgGeogebraCommonKernelKernelNDGeoAxisND_X_AXIS:
      outsideBox_ = ((IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS)), 0) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS)), 1) > 0) || (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_Z_AXIS)), 0) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_Z_AXIS)), 1) > 0));
      break;
      case OrgGeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS:
      outsideBox_ = ((IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_Z_AXIS)), 0) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_Z_AXIS)), 1) > 0) || (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_X_AXIS)), 0) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_X_AXIS)), 1) > 0));
      break;
      case OrgGeogebraCommonKernelKernelNDGeoAxisND_Z_AXIS:
      outsideBox_ = ((IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_X_AXIS)), 0) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_X_AXIS)), 1) > 0) || (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS)), 0) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, OrgGeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS)), 1) > 0));
      break;
    }
  }
  if (outsideBox_) {
    for (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D * __strong label in nil_chk([((JavaUtilTreeMap *) nil_chk(labels_)) values])) {
      [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label)) setIsVisibleWithBoolean:NO];
    }
  }
  [super setDrawMinMaxWithDouble:min withDouble:max];
}

- (jboolean)isVisible {
  return (!outsideBox_) && [super isVisible];
}

- (jboolean)hitLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:(OrgGeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
                     withOrgGeogebraCommonGeogebra3DEuclidian3DHits3D:(OrgGeogebraCommonGeogebra3DEuclidian3DHits3D *)hits {
  return NO;
}

- (jboolean)hasPickableLable {
  return NO;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D class]) {
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_super$_setDrawMinMaxWithDouble_withDouble_ = (void (*)(id, SEL, jdouble, jdouble))[OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D instanceMethodForSelector:@selector(setDrawMinMaxWithDouble:withDouble:)];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonKernelKernelNDGeoAxisND:", "DrawAxis3D", NULL, 0x1, NULL, NULL },
    { "drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabel", "V", 0x1, NULL, NULL },
    { "setWaitForReset", NULL, "V", 0x1, NULL, NULL },
    { "updateLabel", NULL, "V", 0x4, NULL, NULL },
    { "setLabelWaitForReset", NULL, "V", 0x1, NULL, NULL },
    { "updateLabelPosition", NULL, "V", 0x4, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateDecorations", NULL, "V", 0x1, NULL, NULL },
    { "getNumbersDistance", NULL, "D", 0x1, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "setDrawMinMaxImmediatlyWithDoubleArray2:", "setDrawMinMaxImmediatly", "V", 0x1, NULL, NULL },
    { "isVisible", NULL, "Z", 0x14, NULL, NULL },
    { "hitLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:withOrgGeogebraCommonGeogebra3DEuclidian3DHits3D:", "hitLabel", "Z", 0x4, NULL, NULL },
    { "hasPickableLable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "labels_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/String;Lorg/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D;>;",  },
    { "numbersXOffset_", NULL, 0x2, "I", NULL, NULL,  },
    { "numbersYOffset_", NULL, 0x2, "I", NULL, NULL,  },
    { "outsideBox_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D = { 2, "DrawAxis3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 14, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoAxisND_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, id<OrgGeogebraCommonKernelKernelNDGeoAxisND> axis3D) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, view3D, axis3D);
  self->outsideBox_ = NO;
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_super$_setDrawMinMaxWithDouble_withDouble_(self, @selector(setDrawMinMaxWithDouble:withDouble:), -2, 2);
  self->labels_ = new_JavaUtilTreeMap_init();
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoAxisND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, id<OrgGeogebraCommonKernelKernelNDGeoAxisND> axis3D) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoAxisND_(self, view3D, axis3D);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D)
