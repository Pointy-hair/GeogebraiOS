//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLine3D.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawCoordSys1D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawJoinPoints.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLine3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                 withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, a_view3D, line);
  return self;
}

- (jboolean)updateForItSelf {
  [self updateForItSelfWithBoolean:YES];
  return YES;
}

- (void)updateForItSelfWithBoolean:(jboolean)updateDrawMinMax {
  if (updateDrawMinMax) [self updateDrawMinMax];
  [super updateForItSelf];
}

- (void)updateDrawMinMax {
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> line = (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND));
  OrgGeogebraCommonKernelMatrixCoords *o = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  OrgGeogebraCommonKernelMatrixCoords *v = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([line getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithOrgGeogebraCommonKernelMatrixCoords:o];
  IOSDoubleArray *minmax = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getIntervalClippedWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangDouble_NEGATIVE_INFINITY, JavaLangDouble_POSITIVE_INFINITY } count:2] withOrgGeogebraCommonKernelMatrixCoords:o withOrgGeogebraCommonKernelMatrixCoords:v];
  [self setDrawMinMaxWithDouble:IOSDoubleArray_Get(nil_chk(minmax), 0) withDouble:IOSDoubleArray_Get(minmax, 1)];
}

- (void)updateForView {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom] || [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByTranslate]) [self updateForItSelf];
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                                        withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, a_view3D, selectedPoints);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "DrawLine3D", NULL, 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateForItSelfWithBoolean:", "updateForItSelf", "V", 0x4, NULL, NULL },
    { "updateDrawMinMax", NULL, "V", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:", "DrawLine3D", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D = { 2, "DrawLine3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, id<OrgGeogebraCommonKernelKernelNDGeoLineND> line) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCoordSys1D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoElement_(self, a_view3D, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, id<OrgGeogebraCommonKernelKernelNDGeoLineND> line) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, a_view3D, line);
  return self;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCoordSys1D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_(self, a_view3D, selectedPoints, [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(a_view3D)) getKernel])) getConstruction]) autorelease]);
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, a_view3D, selectedPoints);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D)
