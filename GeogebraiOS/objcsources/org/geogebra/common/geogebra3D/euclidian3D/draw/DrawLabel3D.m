//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/awt/GBufferedImage.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GDimension.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GKey.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/awt/GRenderingHints.h"
#include "org/geogebra/common/euclidian/DrawEquation.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D () {
 @public
  OrgGeogebraCommonKernelMatrixCoords *backgroundColor_, *color_;
  jfloat xOffset_, yOffset_;
  jboolean anchor_;
  jboolean isVisible_;
  jint height2_, width2_;
  jint textureIndex_;
  jboolean waitForReset__;
  OrgGeogebraCommonKernelMatrixCoords *v_;
  jint pickingX_, pickingY_, pickingW_, pickingH_;
  jint textIndex_;
  jint pickingIndex_;
}

+ (jboolean)isLatexWithNSString:(NSString *)text;

+ (jint)drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                                   withDouble:(jdouble)x
                                                                   withDouble:(jdouble)y
                                                                   withDouble:(jdouble)z
                                                                   withDouble:(jdouble)w
                                                                   withDouble:(jdouble)h
                                                                      withInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D, backgroundColor_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D, color_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D, v_, OrgGeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(NSString *text);

__attribute__((unused)) static jint OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, jdouble x, jdouble y, jdouble z, jdouble w, jdouble h, jint index);

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view
                     withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  return self;
}

- (void)updateWithNSString:(NSString *)text
withOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)font
withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color
withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v
                 withFloat:(jfloat)xOffset
                 withFloat:(jfloat)yOffset {
  [self updateWithNSString:text withOrgGeogebraCommonAwtGFont:font withOrgGeogebraCommonAwtGColor:nil withOrgGeogebraCommonAwtGColor:color withOrgGeogebraCommonKernelMatrixCoords:v withFloat:xOffset withFloat:yOffset];
}

- (jdouble)getFontScale {
  return [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getFontScale];
}

- (void)updateWithNSString:(NSString *)text
withOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)font0
withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)backgroundColor
withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color
withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v
                 withFloat:(jfloat)xOffset
                 withFloat:(jfloat)yOffset {
  self->origin_ = v;
  if (((jint) [((NSString *) nil_chk(text)) length]) == 0) return;
  if (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(text)) {
    [self setIsVisibleWithBoolean:NO];
    return;
  }
  self->color_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_((jdouble) [((OrgGeogebraCommonAwtGColor *) nil_chk(color)) getRed] / 255, (jdouble) [color getGreen] / 255, (jdouble) [color getBlue] / 255, 1);
  if (backgroundColor != nil) self->backgroundColor_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_((jdouble) [backgroundColor getRed] / 255, (jdouble) [backgroundColor getGreen] / 255, (jdouble) [backgroundColor getBlue] / 255, 1);
  else self->backgroundColor_ = nil;
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) isGrayScaled]) [self->color_ convertToGrayScale];
  [self setIsVisibleWithBoolean:YES];
  if (waitForReset__ || ![text isEqual:self->text_] || ![((OrgGeogebraCommonAwtGFont *) nil_chk(font0)) isEqual:self->fontOriginal_]) {
    self->text_ = text;
    fontOriginal_ = font0;
    jint style = [((OrgGeogebraCommonAwtGFont *) nil_chk(fontOriginal_)) getStyle];
    jint size = [fontOriginal_ getSize];
    font_ = [fontOriginal_ deriveFontWithInt:style withFloat:(jfloat) (size * [self getFontScale])];
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(tempGraphics_)) setFontWithOrgGeogebraCommonAwtGFont:font_];
    id<OrgGeogebraCommonAwtGRectangle> rectangle = [self getBounds];
    jint xMin = J2ObjCFpToInt([((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rectangle)) getMinX]) - 1;
    jint xMax = J2ObjCFpToInt([rectangle getMaxX]) + 1;
    jint yMin = J2ObjCFpToInt([rectangle getMinY]) - 1;
    jint yMax = J2ObjCFpToInt([rectangle getMaxY]) + 1;
    width_ = xMax - xMin;
    height_ = yMax - yMin;
    xOffset2_ = xMin;
    yOffset2_ = -yMax;
    id<OrgGeogebraCommonAwtGBufferedImage> bimg = [self draw];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([view_ getRenderer])) createAlphaTextureWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:self withOrgGeogebraCommonAwtGBufferedImage:bimg];
    waitForReset__ = NO;
  }
  self->xOffset_ = xOffset;
  self->yOffset_ = yOffset;
}

- (id<OrgGeogebraCommonAwtGGraphics2D>)createGraphics2DWithOrgGeogebraCommonAwtGBufferedImage:(id<OrgGeogebraCommonAwtGBufferedImage>)bimg {
  id<OrgGeogebraCommonAwtGGraphics2D> g2d = [((id<OrgGeogebraCommonAwtGBufferedImage>) nil_chk(bimg)) createGraphics];
  id<OrgGeogebraCommonAwtGAffineTransform> gt = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(gt)) scale__WithDouble:1 withDouble:-1.0];
  [gt translateWithDouble:-xOffset2_ withDouble:yOffset2_];
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) transformWithOrgGeogebraCommonAwtGAffineTransform:gt];
  [g2d setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_()];
  [g2d setFontWithOrgGeogebraCommonAwtGFont:font_];
  [g2d setRenderingHintWithOrgGeogebraCommonAwtGKey:OrgGeogebraCommonAwtGRenderingHints_get_KEY_ANTIALIASING_() withId:OrgGeogebraCommonAwtGRenderingHints_get_VALUE_ANTIALIAS_ON_()];
  return g2d;
}

- (id<OrgGeogebraCommonAwtGBufferedImage>)createBufferedImage {
  return [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getRenderer])) createBufferedImageWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:self];
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  id<OrgGeogebraCommonAwtGRectangle> rectangle = OrgGeogebraCommonEuclidianEuclidianStatic_drawMultiLineTextWithOrgGeogebraCommonMainApp_withNSString_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_withBoolean_withOrgGeogebraCommonAwtGFont_([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], text_, 0, 0, tempGraphics_, NO, [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(tempGraphics_)) getFont]);
  if ([((NSString *) nil_chk(text_)) contains:@"_"]) {
    hasIndex_ = YES;
    OrgGeogebraCommonAwtGPoint *p = OrgGeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([view_ getApplication], tempGraphics_, text_, 0, 0, NO, NO);
    [rectangle setRectWithDouble:[((id<OrgGeogebraCommonAwtGRectangle>) nil_chk(rectangle)) getMinX] withDouble:[rectangle getMinY] withDouble:[rectangle getWidth] withDouble:[rectangle getHeight] + ((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->y_];
  }
  else {
    hasIndex_ = NO;
  }
  return rectangle;
}

+ (jboolean)isLatexWithNSString:(NSString *)text {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(text);
}

- (id<OrgGeogebraCommonAwtGBufferedImage>)draw {
  id<OrgGeogebraCommonAwtGBufferedImage> bimg;
  id<OrgGeogebraCommonAwtGGraphics2D> g2d;
  if (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(text_) && ((jint) [((NSString *) nil_chk(text_)) length]) > 1) {
    jboolean serif = YES;
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable_)) getGeoElement];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) serif = [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) isSerifFont];
    jint offsetY = 10 + [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getFontSize];
    height_ += offsetY;
    bimg = [self createBufferedImage];
    g2d = [self createGraphics2DWithOrgGeogebraCommonAwtGBufferedImage:bimg];
    OrgGeogebraCommonMainApp *app = [view_ getApplication];
    (void) [((OrgGeogebraCommonEuclidianDrawEquation *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getDrawEquation])) drawEquationWithOrgGeogebraCommonMainApp:[((OrgGeogebraCommonKernelKernel *) nil_chk([geo getKernel])) getApplication] withOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonAwtGGraphics2D:g2d withInt:0 withInt:-offsetY withNSString:[text_ substring:1 endIndex:((jint) [text_ length]) - 1] withOrgGeogebraCommonAwtGFont:[((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) getFont] withBoolean:serif withOrgGeogebraCommonAwtGColor:[g2d getColor] withOrgGeogebraCommonAwtGColor:[g2d getBackground] withBoolean:YES withBoolean:NO];
    return bimg;
  }
  bimg = [self createBufferedImage];
  g2d = [self createGraphics2DWithOrgGeogebraCommonAwtGBufferedImage:bimg];
  if (hasIndex_) {
    (void) OrgGeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], g2d, text_, 0, 0, NO, NO);
  }
  else {
    [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawStringWithNSString:text_ withInt:0 withInt:0];
  }
  return bimg;
}

- (void)setWaitForReset {
  waitForReset__ = YES;
  textIndex_ = -1;
  pickingIndex_ = -1;
  backgroundIndex_ = -1;
}

- (jboolean)waitForReset {
  return waitForReset__;
}

- (void)setAnchorWithBoolean:(jboolean)flag {
  anchor_ = flag;
}

- (void)drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withBoolean:NO];
}

- (jdouble)getDrawZ {
  return drawZ_;
}

- (void)updateDrawPosition {
  if (origin_ == nil) {
    return;
  }
  (void) [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) setMulWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getToScreenMatrix] withOrgGeogebraCommonKernelMatrixCoords:origin_];
  drawX_ = J2ObjCFpToInt(([v_ getX] + xOffset_));
  if (anchor_ && xOffset_ < 0) {
    drawX_ -= width_ / [self getFontScale];
  }
  else {
    drawX_ += xOffset2_ / [self getFontScale];
  }
  drawY_ = J2ObjCFpToInt(([v_ getY] + yOffset_));
  if (anchor_ && yOffset_ < 0) {
    drawY_ -= height_ / [self getFontScale];
  }
  else {
    drawY_ += yOffset2_ / [self getFontScale];
  }
  drawZ_ = J2ObjCFpToInt([v_ getZ]);
}

- (jboolean)hitWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)pos {
  if (backgroundColor_ != nil) {
    return drawX_ <= ((OrgGeogebraCommonAwtGPoint *) nil_chk(pos))->x_ && drawX_ + width_ >= pos->x_ && drawY_ <= pos->y_ && drawY_ + height_ >= pos->y_;
  }
  return drawX_ + pickingX_ <= ((OrgGeogebraCommonAwtGPoint *) nil_chk(pos))->x_ && drawX_ + pickingX_ + pickingW_ >= pos->x_ && drawY_ + pickingY_ <= pos->y_ && drawY_ + pickingY_ + pickingH_ >= pos->y_;
}

- (void)drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                         withBoolean:(jboolean)forPicking {
  if (!isVisible_) return;
  if (textureIndex_ == -1) return;
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLabelOriginWithOrgGeogebraCommonKernelMatrixCoords:origin_];
  if (forPicking) {
    if (backgroundColor_ != nil) {
      [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:backgroundIndex_];
    }
    else {
      [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:pickingIndex_];
    }
  }
  else {
    if (backgroundColor_ != nil) {
      [renderer setColorWithOrgGeogebraCommonKernelMatrixCoords:backgroundColor_];
      [renderer disableTextures];
      [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:backgroundIndex_];
    }
    [self drawTextWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawTextWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setColorWithOrgGeogebraCommonKernelMatrixCoords:color_];
  [renderer enableTextures];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([renderer getTextures])) setTextureLinearWithInt:textureIndex_];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawLabelWithInt:textIndex_];
}

- (void)setTextureIndexWithInt:(jint)i {
  textureIndex_ = i;
}

- (jint)getTextureIndex {
  return textureIndex_;
}

- (void)setIsVisibleWithBoolean:(jboolean)flag {
  isVisible_ = flag;
}

- (jint)getWidth {
  return width_;
}

- (jint)getHeight {
  return height_;
}

- (jint)getWidthPowerOfTwo {
  return width2_;
}

- (jint)getHeightPowerOfTwo {
  return height2_;
}

- (void)setPickingDimensionWithInt:(jint)x
                           withInt:(jint)y
                           withInt:(jint)w
                           withInt:(jint)h {
  pickingX_ = x;
  pickingY_ = y;
  pickingW_ = w;
  pickingH_ = h;
}

- (void)setDimensionPowerOfTwoWithInt:(jint)w
                              withInt:(jint)h {
  width2_ = w;
  height2_ = h;
}

- (jboolean)isPickable {
  return [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable_)) hasPickableLable];
}

- (void)updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self updateDrawPosition];
  if (origin_ == nil) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) removeWithInt:textIndex_];
    textIndex_ = -1;
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:pickingIndex_];
    pickingIndex_ = -1;
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:backgroundIndex_];
    backgroundIndex_ = -1;
    return;
  }
  jint old = textIndex_;
  textIndex_ = OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(renderer, drawX_, drawY_, drawZ_, width2_ / [self getFontScale], height2_ / [self getFontScale], textIndex_);
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) removeWithInt:old];
  old = pickingIndex_;
  pickingIndex_ = OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(renderer, drawX_ + pickingX_ / [self getFontScale], drawY_ + pickingY_ / [self getFontScale], drawZ_, pickingW_ / [self getFontScale], pickingH_ / [self getFontScale], pickingIndex_);
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:old];
  old = backgroundIndex_;
  backgroundIndex_ = OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(renderer, drawX_, drawY_, drawZ_, width_ / [self getFontScale], height_ / [self getFontScale], backgroundIndex_);
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:old];
}

+ (jint)drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                                   withDouble:(jdouble)x
                                                                   withDouble:(jdouble)y
                                                                   withDouble:(jdouble)z
                                                                   withDouble:(jdouble)w
                                                                   withDouble:(jdouble)h
                                                                      withInt:(jint)index {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(renderer, x, y, z, w, h, index);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "DrawLabel3D", NULL, 0x1, NULL, NULL },
    { "updateWithNSString:withOrgGeogebraCommonAwtGFont:withOrgGeogebraCommonAwtGColor:withOrgGeogebraCommonKernelMatrixCoords:withFloat:withFloat:", "update", "V", 0x1, NULL, NULL },
    { "getFontScale", NULL, "D", 0x4, NULL, NULL },
    { "updateWithNSString:withOrgGeogebraCommonAwtGFont:withOrgGeogebraCommonAwtGColor:withOrgGeogebraCommonAwtGColor:withOrgGeogebraCommonKernelMatrixCoords:withFloat:withFloat:", "update", "V", 0x1, NULL, NULL },
    { "createGraphics2DWithOrgGeogebraCommonAwtGBufferedImage:", "createGraphics2D", "Lorg.geogebra.common.awt.GGraphics2D;", 0x4, NULL, NULL },
    { "createBufferedImage", NULL, "Lorg.geogebra.common.awt.GBufferedImage;", 0x4, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x4, NULL, NULL },
    { "isLatexWithNSString:", "isLatex", "Z", 0xa, NULL, NULL },
    { "draw", NULL, "Lorg.geogebra.common.awt.GBufferedImage;", 0x4, NULL, NULL },
    { "setWaitForReset", NULL, "V", 0x1, NULL, NULL },
    { "waitForReset", NULL, "Z", 0x1, NULL, NULL },
    { "setAnchorWithBoolean:", "setAnchor", "V", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "draw", "V", 0x1, NULL, NULL },
    { "getDrawZ", NULL, "D", 0x1, NULL, NULL },
    { "updateDrawPosition", NULL, "V", 0x1, NULL, NULL },
    { "hitWithOrgGeogebraCommonAwtGPoint:", "hit", "Z", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withBoolean:", "draw", "V", 0x1, NULL, NULL },
    { "drawTextWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawText", "V", 0x4, NULL, NULL },
    { "setTextureIndexWithInt:", "setTextureIndex", "V", 0x1, NULL, NULL },
    { "getTextureIndex", NULL, "I", 0x1, NULL, NULL },
    { "setIsVisibleWithBoolean:", "setIsVisible", "V", 0x1, NULL, NULL },
    { "getWidth", NULL, "I", 0x1, NULL, NULL },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "getWidthPowerOfTwo", NULL, "I", 0x1, NULL, NULL },
    { "getHeightPowerOfTwo", NULL, "I", 0x1, NULL, NULL },
    { "setPickingDimensionWithInt:withInt:withInt:withInt:", "setPickingDimension", "V", 0x1, NULL, NULL },
    { "setDimensionPowerOfTwoWithInt:withInt:", "setDimensionPowerOfTwo", "V", 0x1, NULL, NULL },
    { "isPickable", NULL, "Z", 0x1, NULL, NULL },
    { "updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "updatePosition", "V", 0x1, NULL, NULL },
    { "drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "drawRectangle", "I", 0x1a, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "font_", NULL, 0x4, "Lorg.geogebra.common.awt.GFont;", NULL, NULL,  },
    { "fontOriginal_", NULL, 0x4, "Lorg.geogebra.common.awt.GFont;", NULL, NULL,  },
    { "backgroundColor_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "color_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "origin_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "xOffset_", NULL, 0x2, "F", NULL, NULL,  },
    { "yOffset_", NULL, 0x2, "F", NULL, NULL,  },
    { "xOffset2_", NULL, 0x4, "F", NULL, NULL,  },
    { "yOffset2_", NULL, 0x4, "F", NULL, NULL,  },
    { "anchor_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "height_", NULL, 0x4, "I", NULL, NULL,  },
    { "width_", NULL, 0x4, "I", NULL, NULL,  },
    { "height2_", NULL, 0x2, "I", NULL, NULL,  },
    { "width2_", NULL, 0x2, "I", NULL, NULL,  },
    { "textureIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "waitForReset__", "waitForReset", 0x2, "Z", NULL, NULL,  },
    { "tempGraphics_", NULL, 0x4, "Lorg.geogebra.common.awt.GGraphics2D;", NULL, NULL,  },
    { "drawable_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", NULL, NULL,  },
    { "hasIndex_", NULL, 0x4, "Z", NULL, NULL,  },
    { "drawX_", NULL, 0x4, "D", NULL, NULL,  },
    { "drawY_", NULL, 0x4, "D", NULL, NULL,  },
    { "drawZ_", NULL, 0x4, "D", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "pickingX_", NULL, 0x2, "I", NULL, NULL,  },
    { "pickingY_", NULL, 0x2, "I", NULL, NULL,  },
    { "pickingW_", NULL, 0x2, "I", NULL, NULL,  },
    { "pickingH_", NULL, 0x2, "I", NULL, NULL,  },
    { "textIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "pickingIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "backgroundIndex_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D = { 2, "DrawLabel3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 30, methods, 33, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  (void) NSObject_init(self);
  self->textureIndex_ = -1;
  self->tempGraphics_ = [((id<OrgGeogebraCommonAwtGBufferedImage>) nil_chk([((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newBufferedImageWithInt:1 withInt:1 withInt:OrgGeogebraCommonAwtGBufferedImage_TYPE_INT_ARGB])) createGraphics];
  self->hasIndex_ = NO;
  self->v_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->textIndex_ = -1;
  self->pickingIndex_ = -1;
  self->backgroundIndex_ = -1;
  self->view_ = view;
  self->drawable_ = drawable;
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  return self;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(NSString *text) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initialize();
  return ([((NSString *) nil_chk(text)) charAtWithInt:0] == '$') && [text hasSuffix:@"$"];
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_drawRectangleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, jdouble x, jdouble y, jdouble z, jdouble w, jdouble h, jint index) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initialize();
  return [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) rectangleWithDouble:x withDouble:y withDouble:z withDouble:w withDouble:h withInt:index];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D)
