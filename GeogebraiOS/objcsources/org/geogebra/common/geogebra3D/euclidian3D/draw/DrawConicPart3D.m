//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawConicPart3D.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawConic3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawConicPart3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterSurface.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicPartND.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D ()

- (void)updateSectorSegmentsWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush
                                                                              withDouble:(jdouble)start
                                                                              withDouble:(jdouble)end;

@end

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_updateSectorSegmentsWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withDouble_withDouble_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush, jdouble start, jdouble end);

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3d
                            withOrgGeogebraCommonKernelKernelNDGeoConicPartND:(id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>)conic {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, view3d, conic);
  return self;
}

- (jdouble)getEllipseSurfaceStart {
  return [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))))) getParameterStart];
}

- (jdouble)getEllipseSurfaceExtent {
  return [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))))) getParameterExtent];
}

- (void)updateCircleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  jdouble start = [self getEllipseSurfaceStart];
  jdouble extent = [self getEllipseSurfaceExtent];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) arcWithOrgGeogebraCommonKernelMatrixCoords:m_ withOrgGeogebraCommonKernelMatrixCoords:ev1_ withOrgGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:start withDouble:extent withInt:longitude_];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_updateSectorSegmentsWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withDouble_withDouble_(self, brush, start, start + extent);
}

- (void)updateEllipseWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  jdouble start = [self getEllipseSurfaceStart];
  jdouble extent = [self getEllipseSurfaceExtent];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) arcEllipseWithOrgGeogebraCommonKernelMatrixCoords:m_ withOrgGeogebraCommonKernelMatrixCoords:ev1_ withOrgGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:e2_ withDouble:start withDouble:extent];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_updateSectorSegmentsWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withDouble_withDouble_(self, brush, start, start + extent);
}

- (void)updateSectorSegmentsWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush
                                                                              withDouble:(jdouble)start
                                                                              withDouble:(jdouble)end {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_updateSectorSegmentsWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withDouble_withDouble_(self, brush, start, end);
}

- (void)updateLinesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(conic_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))))) positiveOrientation]) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) segmentWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getOrigin3DWithInt:0] withOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(conic_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))) getSegmentEnd3D]];
  }
  else {
    m_ = [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getOrigin3DWithInt:0];
    d_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(conic_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))) getSegmentEnd3D])) subWithOrgGeogebraCommonKernelMatrixCoords:m_];
    minmax_ = [self getLineMinMaxWithInt:0];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) segmentWithOrgGeogebraCommonKernelMatrixCoords:m_ withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(m_)) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(d_)) mulWithDouble:IOSDoubleArray_Get(nil_chk(minmax_), 0)]]];
    [brush segmentWithOrgGeogebraCommonKernelMatrixCoords:[conic_ getOrigin3DWithInt:1] withOrgGeogebraCommonKernelMatrixCoords:[m_ addWithOrgGeogebraCommonKernelMatrixCoords:[d_ mulWithDouble:IOSDoubleArray_Get(minmax_, 1)]]];
  }
}

- (void)updateParallelLinesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
}

- (void)updateSinglePointWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  [self setGeometryIndexWithInt:-1];
}

- (jboolean)isSector {
  return [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(conic_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))))) getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonKernelKernelNDGeoConicPartND:", "DrawConicPart3D", NULL, 0x1, NULL, NULL },
    { "getEllipseSurfaceStart", NULL, "D", 0x4, NULL, NULL },
    { "getEllipseSurfaceExtent", NULL, "D", 0x4, NULL, NULL },
    { "updateCircleWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "updateCircle", "V", 0x4, NULL, NULL },
    { "updateEllipseWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "updateEllipse", "V", 0x4, NULL, NULL },
    { "updateSectorSegmentsWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:withDouble:withDouble:", "updateSectorSegments", "V", 0x2, NULL, NULL },
    { "updateLinesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "updateLines", "V", 0x4, NULL, NULL },
    { "updateParallelLinesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "updateParallelLines", "V", 0x4, NULL, NULL },
    { "updateSinglePointWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "updateSinglePoint", "V", 0x4, NULL, NULL },
    { "isSector", NULL, "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D = { 2, "DrawConicPart3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 10, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3d, id<OrgGeogebraCommonKernelKernelNDGeoConicPartND> conic) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, view3d, (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(conic, [OrgGeogebraCommonKernelKernelNDGeoConicND class]));
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3d, id<OrgGeogebraCommonKernelKernelNDGeoConicPartND> conic) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoConicPartND_(self, view3d, conic);
  return self;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_updateSectorSegmentsWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withDouble_withDouble_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush, jdouble start, jdouble end) {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))))) getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) setAffineTextureWithFloat:0.5f withFloat:0.25f];
    [brush segmentWithOrgGeogebraCommonKernelMatrixCoords:self->m_ withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->m_)) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->ev1_)) mulWithDouble:self->e1_ * JavaLangMath_cosWithDouble_(start)]])) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->ev2_)) mulWithDouble:self->e2_ * JavaLangMath_sinWithDouble_(start)]]];
    [brush segmentWithOrgGeogebraCommonKernelMatrixCoords:self->m_ withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self->m_ addWithOrgGeogebraCommonKernelMatrixCoords:[self->ev1_ mulWithDouble:self->e1_ * JavaLangMath_cosWithDouble_(end)]])) addWithOrgGeogebraCommonKernelMatrixCoords:[self->ev2_ mulWithDouble:self->e2_ * JavaLangMath_sinWithDouble_(end)]]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D)
