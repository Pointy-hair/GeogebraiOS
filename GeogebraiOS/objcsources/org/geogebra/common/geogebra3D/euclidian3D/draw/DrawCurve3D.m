//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawCurve3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/euclidian/plot/CurvePlotter.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawCurve3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DCurves.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/kernelND/CurveEvaluable.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D () {
 @public
  id<OrgGeogebraCommonKernelKernelNDCurveEvaluable> curve_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D, curve_, id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>)

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3d
                            withOrgGeogebraCommonKernelKernelNDCurveEvaluable:(id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>)curve {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(self, a_view3d, curve);
  return self;
}

- (void)drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawWithInt:[self getGeometryIndex]];
}

- (jboolean)updateForItSelf {
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view = [self getView3D];
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view)) getRenderer];
  OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush = [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getBrush];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) startWithInt:[self getReusableGeometryIndex]];
  [brush setThicknessWithInt:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness] withFloat:(jfloat) [view getScale]];
  [brush setAffineTextureWithFloat:0.0f withFloat:0.0f];
  [brush setLengthWithFloat:1.0f];
  jdouble min, max;
  if ([curve_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
    if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(curve_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) hasInterval]) {
      min = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(curve_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getIntervalMin];
      max = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(curve_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getIntervalMax];
      jdouble minView = [view getXmin];
      jdouble maxView = [view getXmax];
      if (min < minView) min = minView;
      if (max > maxView) max = maxView;
    }
    else {
      min = [view getXmin];
      max = [view getXmax];
    }
  }
  else {
    min = [((id<OrgGeogebraCommonKernelKernelNDCurveEvaluable>) nil_chk(curve_)) getMinParameter];
    max = [curve_ getMaxParameter];
  }
  (void) OrgGeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithOrgGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withOrgGeogebraCommonEuclidianEuclidianView_withOrgGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withOrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(curve_, min, max, view, brush, NO, OrgGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_MOVE_TO());
  [self setGeometryIndexWithInt:[brush end]];
  return YES;
}

- (void)updateForView {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom] || [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByTranslate]) {
    [self updateForItSelf];
  }
}

- (jint)getPickOrder {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_PATH;
}

- (void)addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_CURVES];
}

- (void)removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_CURVES];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonKernelKernelNDCurveEvaluable:", "DrawCurve3D", NULL, 0x1, NULL, NULL },
    { "drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "curve_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.CurveEvaluable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D = { 2, "DrawCurve3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d, id<OrgGeogebraCommonKernelKernelNDCurveEvaluable> curve) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoElement_(self, a_view3d, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(curve, [OrgGeogebraCommonKernelGeosGeoElement class]));
  self->curve_ = curve;
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d, id<OrgGeogebraCommonKernelKernelNDCurveEvaluable> curve) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDCurveEvaluable_(self, a_view3d, curve);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D)
