//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3DForText.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GBufferedImage.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/EuclidianStatic.h"
#include "org/geogebra/common/euclidian/draw/DrawText.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3DForText.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText () {
 @public
  jint highLightIndex_;
}

@end

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view
                     withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  return self;
}

- (id<OrgGeogebraCommonAwtGRectangle>)getBounds {
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(geo_)) isLaTeX]) {
    return OrgGeogebraCommonEuclidianEuclidianStatic_drawMultilineLaTeXWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGGraphics2D_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonAwtGGraphics2D_withOrgGeogebraCommonAwtGFont_withOrgGeogebraCommonAwtGColor_withOrgGeogebraCommonAwtGColor_withNSString_withInt_withInt_withBoolean_([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], tempGraphics_, geo_, tempGraphics_, font_, OrgGeogebraCommonAwtGColor_get_BLACK_(), OrgGeogebraCommonAwtGColor_get_WHITE_(), text_, 0, 0, NO);
  }
  return OrgGeogebraCommonEuclidianEuclidianStatic_drawMultiLineTextWithOrgGeogebraCommonMainApp_withNSString_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_withBoolean_withOrgGeogebraCommonAwtGFont_([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], text_, 0, 0, tempGraphics_, NO, [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(tempGraphics_)) getFont]);
}

- (id<OrgGeogebraCommonAwtGBufferedImage>)draw {
  id<OrgGeogebraCommonAwtGBufferedImage> bimg = [self createBufferedImage];
  id<OrgGeogebraCommonAwtGGraphics2D> g2d = [self createGraphics2DWithOrgGeogebraCommonAwtGBufferedImage:bimg];
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(geo_)) isLaTeX]) {
    (void) OrgGeogebraCommonEuclidianEuclidianStatic_drawMultilineLaTeXWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonAwtGGraphics2D_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonAwtGGraphics2D_withOrgGeogebraCommonAwtGFont_withOrgGeogebraCommonAwtGColor_withOrgGeogebraCommonAwtGColor_withNSString_withInt_withInt_withBoolean_([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], tempGraphics_, geo_, g2d, font_, OrgGeogebraCommonAwtGColor_get_BLACK_(), OrgGeogebraCommonAwtGColor_get_WHITE_(), text_, 0, 0, NO);
  }
  else {
    (void) OrgGeogebraCommonEuclidianEuclidianStatic_drawMultiLineTextWithOrgGeogebraCommonMainApp_withNSString_withInt_withInt_withOrgGeogebraCommonAwtGGraphics2D_withBoolean_withOrgGeogebraCommonAwtGFont_([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], text_, 0, 0, g2d, NO, [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) getFont]);
  }
  return bimg;
}

- (void)setGeoWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)geo {
  self->geo_ = geo;
}

- (void)drawTextWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawTextWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(geo_)) doHighlighting]) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) disableTextures];
    [renderer disableMultisample];
    [renderer setLineWidthWithDouble:[geo_ getLineThickness] / 2];
    [renderer setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonEuclidianDrawDrawText_get_HIGHLIGHT_COLOR_()];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:highLightIndex_];
    [renderer enableMultisample];
    [renderer enableTextures];
  }
}

- (void)updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  if (origin_ == nil) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) removeWithInt:highLightIndex_];
    highLightIndex_ = -1;
    return;
  }
  jint old = highLightIndex_;
  highLightIndex_ = [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) rectangleBoundsWithDouble:drawX_ withDouble:drawY_ withDouble:drawZ_ withDouble:width_ / [self getFontScale] withDouble:height_ / [self getFontScale] withInt:highLightIndex_];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:old];
}

- (void)setWaitForReset {
  [super setWaitForReset];
  highLightIndex_ = -1;
}

- (void)updateDrawPosition {
  if ([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(geo_)) isAbsoluteScreenLocActive]) {
    if (origin_ == nil) {
      return;
    }
    drawX_ = J2ObjCFpToInt(([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(origin_)) getX] - [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable_)) getView3D])) getWidth] / 2 + xOffset2_ / [self getFontScale]));
    drawY_ = J2ObjCFpToInt(([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([drawable_ getView3D])) getHeight] / 2 - [origin_ getY] + yOffset2_ / [self getFontScale]));
    drawZ_ = 0;
  }
  else {
    [super updateDrawPosition];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "DrawLabel3DForText", NULL, 0x1, NULL, NULL },
    { "getBounds", NULL, "Lorg.geogebra.common.awt.GRectangle;", 0x14, NULL, NULL },
    { "draw", NULL, "Lorg.geogebra.common.awt.GBufferedImage;", 0x14, NULL, NULL },
    { "setGeoWithOrgGeogebraCommonKernelGeosGeoText:", "setGeo", "V", 0x1, NULL, NULL },
    { "drawTextWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawText", "V", 0x4, NULL, NULL },
    { "updatePositionWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "updatePosition", "V", 0x1, NULL, NULL },
    { "setWaitForReset", NULL, "V", 0x1, NULL, NULL },
    { "updateDrawPosition", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "highLightIndex_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText = { 2, "DrawLabel3DForText", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  self->highLightIndex_ = -1;
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText)
