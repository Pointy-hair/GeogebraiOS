//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawVector3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawJoinPoints.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawVector3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D () {
 @public
  OrgGeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D, boundsMin_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D, boundsMax_, OrgGeogebraCommonKernelMatrixCoords *)

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D
                               withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)vector {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, view3D, vector);
  return self;
}

- (void)setArrowTypeBeforeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) setArrowTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_ARROW_TYPE_SIMPLE];
}

- (void)setArrowTypeAfterWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) setArrowTypeWithInt:OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_ARROW_TYPE_NONE];
}

- (void)updateForView {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) {
    [self updateForItSelf];
  }
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D
                                                        withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, view3D, selectedPoints);
  return self;
}

- (void)setPreviewableCoordsWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)firstPoint
                            withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)secondPoint {
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast([self getGeoElement], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])))) setCoordsWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(secondPoint)) getInhomCoordsInD3])) subWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(firstPoint)) getInhomCoordsInD3]])) get]];
  @try {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast([self getGeoElement], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])))) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:firstPoint];
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    [((OrgGeogebraCommonKernelCircularDefinitionException *) nil_chk(e)) printStackTrace];
  }
}

- (IOSObjectArray *)calcPoints {
  id<OrgGeogebraCommonKernelKernelNDGeoVectorND> geo = ((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND)));
  [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(geo)) updateStartPointPosition];
  OrgGeogebraCommonKernelMatrixCoords *p1;
  if ([geo getStartPoint] == nil) {
    p1 = [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
    [p1 setWWithDouble:1];
  }
  else p1 = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([geo getStartPoint])) getInhomCoordsInD3];
  OrgGeogebraCommonKernelMatrixCoords *p2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p1)) addWithOrgGeogebraCommonKernelMatrixCoords:[geo getCoordsInD3]];
  return [IOSObjectArray arrayWithObjects:(id[]){ p1, p2 } count:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
}

- (void)setStartEndPointsWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p1
                         withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p2 {
  [super setStartEndPointsWithOrgGeogebraCommonKernelMatrixCoords:p1 withOrgGeogebraCommonKernelMatrixCoords:p2];
  jdouble radius = [self getLineThickness] * OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_LINE3D_THICKNESS / [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
  for (jint i = 1; i <= 3; i++) {
    if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p1)) getWithInt:i] < [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p2)) getWithInt:i]) {
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setWithInt:i withDouble:[p1 getWithInt:i] - radius];
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setWithInt:i withDouble:[p2 getWithInt:i] + radius];
    }
    else {
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setWithInt:i withDouble:[p2 getWithInt:i] - radius];
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setWithInt:i withDouble:[p1 getWithInt:i] + radius];
    }
  }
}

- (void)enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)min
                     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)max {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
}

- (void)dealloc {
  RELEASE_(boundsMin_);
  RELEASE_(boundsMax_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "DrawVector3D", NULL, 0x1, NULL, NULL },
    { "setArrowTypeBeforeWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "setArrowTypeBefore", "V", 0x4, NULL, NULL },
    { "setArrowTypeAfterWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "setArrowTypeAfter", "V", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:", "DrawVector3D", NULL, 0x1, NULL, NULL },
    { "setPreviewableCoordsWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setPreviewableCoords", "V", 0x4, NULL, NULL },
    { "calcPoints", NULL, "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "setStartEndPointsWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "setStartEndPoints", "V", 0x4, NULL, NULL },
    { "enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "boundsMin_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D = { 2, "DrawVector3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> vector) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoElement_(self, view3D, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(vector, [OrgGeogebraCommonKernelGeosGeoElement class]));
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_setAndConsume_boundsMin_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_setAndConsume_boundsMax_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  [self setDrawMinMaxWithDouble:0 withDouble:1];
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> vector) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, view3D, vector);
  return self;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, JavaUtilArrayList *selectedPoints) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_(self, view3D, selectedPoints, [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D)) getKernel])) getConstruction]) autorelease]);
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_setAndConsume_boundsMin_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_setAndConsume_boundsMax_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, JavaUtilArrayList *selectedPoints) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, view3D, selectedPoints);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D)
