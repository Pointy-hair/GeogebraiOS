//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPlaneConstant3D.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawAxis3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPlane3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPlaneConstant3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D () {
 @public
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *xAxis_, *yAxis_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D, xAxis_, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D, yAxis_, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                        withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)a_plane3D
                     withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)xAxis
                     withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)yAxis {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(self, a_view3D, a_plane3D, xAxis, yAxis);
  return self;
}

- (jboolean)updateForItSelf {
  IOSDoubleArray *xMinMax = [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(xAxis_)) getDrawMinMax];
  IOSDoubleArray *yMinMax = [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(yAxis_)) getDrawMinMax];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *geo = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getGeoElement], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(geo)) setGridCornersWithDouble:IOSDoubleArray_Get(nil_chk(xMinMax), 0) withDouble:IOSDoubleArray_Get(nil_chk(yMinMax), 0) withDouble:IOSDoubleArray_Get(xMinMax, 1) withDouble:IOSDoubleArray_Get(yMinMax, 1)];
  [geo setGridDistancesWithDouble:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getGridDistancesWithInt:0] withDouble:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getGridDistancesWithInt:1]];
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getShowPlane] || [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getShowGrid]) {
    [super updateGeometry];
  }
  return YES;
}

- (void)updateForView {
}

- (void)setMinMax {
}

- (jboolean)isGridVisible {
  return [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getGeoElement], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) isGridVisible];
}

- (void)dealloc {
  RELEASE_(xAxis_);
  RELEASE_(yAxis_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D:withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D:", "DrawPlaneConstant3D", NULL, 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "setMinMax", NULL, "V", 0x4, NULL, NULL },
    { "isGridVisible", NULL, "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "xAxis_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.euclidian3D.draw.DrawAxis3D;", NULL, NULL,  },
    { "yAxis_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.euclidian3D.draw.DrawAxis3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D = { 2, "DrawPlaneConstant3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *a_plane3D, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *xAxis, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *yAxis) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, a_view3D, a_plane3D);
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_set_xAxis_(self, xAxis);
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_set_yAxis_(self, yAxis);
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *a_plane3D, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *xAxis, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *yAxis) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(self, a_view3D, a_plane3D, xAxis, yAxis);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D)
