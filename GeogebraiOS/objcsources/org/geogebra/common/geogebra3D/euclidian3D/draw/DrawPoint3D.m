//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPoint3D.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/euclidian/draw/DrawPoint.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawPoint3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DCurves.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D () {
 @public
  OrgGeogebraCommonKernelMatrixCoords *center_;
  OrgGeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
  OrgGeogebraCommonKernelMatrixCoords *project_;
  IOSDoubleArray *parameters_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D, center_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D, boundsMin_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D, boundsMax_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D, project_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D, parameters_, IOSDoubleArray *)

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, view3D, point);
  return self;
}

- (void)drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawWithInt:[self getGeometryIndex] withOrgGeogebraCommonKernelMatrixCoords:center_];
}

- (void)drawInObjFormatWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible]) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawInObjFormatWithOrgGeogebraCommonKernelGeosGeoElement:[self getGeoElement] withInt:[self getGeometryIndex]];
  }
}

- (void)drawGeometryHiddenWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)setLineTextureHiddenWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCenter {
  return center_;
}

- (jboolean)updateForItSelf {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(center_)) setValuesWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3] withInt:3];
  [center_ setWWithDouble:[point getPointSize]];
  [self setGeometryIndexWithInt:[((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer])) getGeometryManager])) drawPointWithInt:[point getPointSize] withOrgGeogebraCommonKernelMatrixCoords:center_ withInt:[self getReusableGeometryIndex]]];
  jdouble radius = [point getPointSize] / [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] * OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_DRAW_POINT_FACTOR;
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setXWithDouble:[center_ getX] - radius];
  [boundsMin_ setYWithDouble:[center_ getY] - radius];
  [boundsMin_ setZWithDouble:[center_ getZ] - radius];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setXWithDouble:[center_ getX] + radius];
  [boundsMax_ setYWithDouble:[center_ getY] + radius];
  [boundsMax_ setZWithDouble:[center_ getZ] + radius];
  return YES;
}

- (void)doRemoveGeometryIndexWithInt:(jint)index {
}

- (void)updateForView {
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) {
    [self updateForItSelf];
  }
}

- (jint)getPickOrder {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_POINT;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  return self;
}

- (void)disposePreview {
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
}

- (void)updatePreview {
}

- (void)addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_POINTS];
}

- (void)removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_POINTS];
}

- (OrgGeogebraCommonKernelMatrixCoords *)evaluatePointWithDouble:(jdouble)u
                                                      withDouble:(jdouble)v {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  jdouble r = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getPointSize] / [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] * 1.5;
  OrgGeogebraCommonKernelMatrixCoords *n = new_OrgGeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray newArrayWithDoubles:(jdouble[]){ JavaLangMath_cosWithDouble_(u) * JavaLangMath_cosWithDouble_(v) * r, JavaLangMath_sinWithDouble_(u) * JavaLangMath_cosWithDouble_(v) * r, JavaLangMath_sinWithDouble_(v) * r } count:3]);
  return [n addWithOrgGeogebraCommonKernelMatrixCoords:[point getInhomCoordsInD3]];
}

- (OrgGeogebraCommonKernelMatrixCoords *)evaluateNormalWithDouble:(jdouble)u
                                                       withDouble:(jdouble)v {
  return new_OrgGeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray newArrayWithDoubles:(jdouble[]){ JavaLangMath_cosWithDouble_(u) * JavaLangMath_cosWithDouble_(v), JavaLangMath_sinWithDouble_(u) * JavaLangMath_cosWithDouble_(v), JavaLangMath_sinWithDouble_(v) } count:3]);
}

- (jdouble)getMinParameterWithInt:(jint)index {
  switch (index) {
    case 0:
    default:
    return 0;
    case 1:
    return -JavaLangMath_PI / 2;
  }
}

- (jdouble)getMaxParameterWithInt:(jint)index {
  switch (index) {
    case 0:
    default:
    return 2 * JavaLangMath_PI;
    case 1:
    return JavaLangMath_PI / 2;
  }
}

- (jfloat)getLabelOffsetX {
  return [super getLabelOffsetX] + 4;
}

- (jfloat)getLabelOffsetY {
  return [super getLabelOffsetY] - 2 * [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))))) getPointSize];
}

- (jdouble)getColorShift {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_COLOR_SHIFT_POINTS;
}

- (jboolean)hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:(OrgGeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  OrgGeogebraCommonKernelMatrixCoords *p = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3];
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withOrgGeogebraCommonKernelMatrixCoords_withDoubleArray_withBoolean_(hitting, p, self, [point getPointSize], project_, parameters_, NO);
}

- (jboolean)hitForListWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:(OrgGeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getGeoElement], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  OrgGeogebraCommonKernelMatrixCoords *p = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3];
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withOrgGeogebraCommonKernelMatrixCoords_withDoubleArray_withBoolean_(hitting, p, self, [point getPointSize], project_, parameters_, YES);
}

+ (jboolean)hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:(OrgGeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
                         withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p
        withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable
                                                         withInt:(jint)pointSize
                         withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)project
                                                 withDoubleArray:(IOSDoubleArray *)parameters
                                                     withBoolean:(jboolean)checkRealPointSize {
  return OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withOrgGeogebraCommonKernelMatrixCoords_withDoubleArray_withBoolean_(hitting, p, drawable, pointSize, project, parameters, checkRealPointSize);
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *)newTraceIndex {
  return new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_withOrgGeogebraCommonKernelMatrixCoords_(self, [self getGeometryIndex], [self getSurfaceIndex], [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(center_)) copyVector]);
}

- (void)drawGeomWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
     withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *)index {
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawWithInt:((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *) nil_chk(index))->geom_ withOrgGeogebraCommonKernelMatrixCoords:index->center_];
}

- (void)enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)min
                     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)max {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "DrawPoint3D", NULL, 0x1, NULL, NULL },
    { "drawGeometryWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "drawInObjFormatWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawInObjFormat", "V", 0x1, NULL, NULL },
    { "drawGeometryHiddenWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHidden", "V", 0x1, NULL, NULL },
    { "setLineTextureHiddenWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "setLineTextureHidden", "V", 0x4, NULL, NULL },
    { "getCenter", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "doRemoveGeometryIndexWithInt:", "doRemoveGeometryIndex", "V", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "DrawPoint3D", NULL, 0x1, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:", "evaluatePoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluateNormalWithDouble:withDouble:", "evaluateNormal", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "getLabelOffsetX", NULL, "F", 0x4, NULL, NULL },
    { "getLabelOffsetY", NULL, "F", 0x4, NULL, NULL },
    { "getColorShift", NULL, "D", 0x4, NULL, NULL },
    { "hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
    { "hitForListWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:", "hitForList", "Z", 0x1, NULL, NULL },
    { "hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withInt:withOrgGeogebraCommonKernelMatrixCoords:withDoubleArray:withBoolean:", "hit", "Z", 0x9, NULL, NULL },
    { "newTraceIndex", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$TraceIndex;", 0x4, NULL, NULL },
    { "drawGeomWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:", "drawGeom", "V", 0x4, NULL, NULL },
    { "enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DRAW_POINT_FACTOR_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_DRAW_POINT_FACTOR },
    { "center_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMin_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "project_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "parameters_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D = { 2, "DrawPoint3D", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 29, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelGeosGeoElement_(self, view3D, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]));
  self->center_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  self->boundsMin_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->boundsMax_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->project_ = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
  self->parameters_ = [IOSDoubleArray newArrayWithLength:2];
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, view3D, point);
  return self;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  self->center_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  self->boundsMin_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->boundsMax_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  self->project_ = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
  self->parameters_ = [IOSDoubleArray newArrayWithLength:2];
  [self setGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(a_view3D)) getCursor3D]];
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  return self;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_hitWithOrgGeogebraCommonGeogebra3DEuclidian3DHitting_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withOrgGeogebraCommonKernelMatrixCoords_withDoubleArray_withBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DHitting *hitting, OrgGeogebraCommonKernelMatrixCoords *p, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable, jint pointSize, OrgGeogebraCommonKernelMatrixCoords *project, IOSDoubleArray *parameters, jboolean checkRealPointSize) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initialize();
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting)) isSphere]) {
    jdouble d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) distanceWithOrgGeogebraCommonKernelMatrixCoords:hitting->origin_];
    jdouble scale_ = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable)) getView3D])) getScale];
    if (d * scale_ <= pointSize + [hitting getThreshold]) {
      [drawable setZPickWithDouble:-d withDouble:-d];
      return YES;
    }
  }
  else {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectLineWithOrgGeogebraCommonKernelMatrixCoords:hitting->origin_ withOrgGeogebraCommonKernelMatrixCoords:hitting->direction_ withOrgGeogebraCommonKernelMatrixCoords:project withDoubleArray:parameters];
    if (![hitting isInsideClippingWithOrgGeogebraCommonKernelMatrixCoords:project]) {
      return NO;
    }
    jdouble d = [p distanceWithOrgGeogebraCommonKernelMatrixCoords:project];
    jdouble scale_ = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable)) getView3D])) getScale];
    jboolean hitted;
    if (checkRealPointSize) {
      hitted = (d * scale_ <= pointSize + 2);
    }
    else {
      hitted = (d * scale_ <= OrgGeogebraCommonEuclidianDrawDrawPoint_getSelectionThresholdWithInt_([hitting getThreshold]));
    }
    if (hitted) {
      jdouble z = -IOSDoubleArray_Get(nil_chk(parameters), 0);
      jdouble dz = pointSize / scale_;
      [drawable setZPickWithDouble:z + dz withDouble:z - dz];
      return YES;
    }
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D)
