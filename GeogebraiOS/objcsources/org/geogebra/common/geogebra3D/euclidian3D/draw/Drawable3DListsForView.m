//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DListsForView.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/DrawList3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DListsForView.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView () {
 @public
  OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D_;
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *listForPicking_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView, view3D_, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView, listForPicking_, OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *)

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view3D);
  return self;
}

- (void)addWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  [super addWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:drawable];
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable)) getGeoElement] != nil && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([drawable getGeoElement])) isPickable]) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) addOneGeoToPick];
    [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(listForPicking_)) addWithId:drawable];
  }
}

- (void)removeWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  [super removeWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:drawable];
  if (drawable != nil) {
    if ([drawable getGeoElement] != nil && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([drawable getGeoElement])) isPickable]) {
      if ([drawable isKindOfClass:[OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class]]) {
        [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast(drawable, [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])) removeAllGeosToPick];
      }
      else {
        [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) removeOneGeoToPick];
      }
      [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(listForPicking_)) removeWithId:drawable];
    }
  }
}

- (void)clear {
  [super clear];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(listForPicking_)) clear];
}

- (void)drawHiddenTexturedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawHiddenTexturedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawHiddenWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawTranspWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawTranspWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawTranspWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawSurfacesForHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawSurfacesForHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawForPickingPointsAndCurvesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawForPickingPointsAndCurvesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) disableCulling];
  [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawForPickingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [renderer enableCulling];
  [renderer setCullFaceBack];
}

- (void)drawLabelForPickingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(listForPicking_)) {
    [((OrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) pickLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
  }
}

- (void)enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)min
                     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)max {
  {
    IOSObjectArray *a__ = lists_;
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *l = *b__++;
      for (OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(l)) {
        if ([((OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) isVisible]) {
          [d enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:min withOrgGeogebraCommonKernelMatrixCoords:max];
        }
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "Drawable3DListsForView", NULL, 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "add", "V", 0x1, NULL, NULL },
    { "removeWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "remove", "V", 0x4, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "drawHiddenTexturedWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHiddenTextured", "V", 0x1, NULL, NULL },
    { "drawTranspWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTransp", "V", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "draw", "V", 0x1, NULL, NULL },
    { "drawLabelWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabel", "V", 0x1, NULL, NULL },
    { "drawSurfacesForHidingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawSurfacesForHiding", "V", 0x1, NULL, NULL },
    { "drawForPickingPointsAndCurvesWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawForPickingPointsAndCurves", "V", 0x1, NULL, NULL },
    { "drawLabelForPickingWithOrgGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabelForPicking", "V", 0x1, NULL, NULL },
    { "enlargeBoundsWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "view3D_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "listForPicking_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.euclidian3D.draw.Drawable3DLists$Drawable3DList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView = { 2, "Drawable3DListsForView", "org.geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 12, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_init(self);
  self->listForPicking_ = new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_initWithOrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_(self);
  self->view3D_ = view3D;
}

OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *new_OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D) {
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *self = [OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view3D);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView)
