//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/CharArrayBuffer.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/BufferUnderflowException.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ByteOrder.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/CharArrayBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/CharBuffer.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer

- (instancetype)initWithCharArray:(IOSCharArray *)array {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithCharArray_(self, array);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithInt:(jint)capacity
              withCharArray:(IOSCharArray *)backingArray
                    withInt:(jint)offset {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithInt_withCharArray_withInt_(self, capacity, backingArray, offset);
  return self;
}

- (jchar)get {
  if (position__ == limit__) {
    @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferUnderflowException_init();
  }
  return IOSCharArray_Get(nil_chk(backingArray_), offset_ + position__++);
}

- (jchar)getWithInt:(jint)index {
  if (index < 0 || index >= limit__) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSCharArray_Get(nil_chk(backingArray_), offset_ + index);
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)getWithCharArray:(IOSCharArray *)dest
                                                                           withInt:(jint)off
                                                                           withInt:(jint)len {
  jint length = ((IOSCharArray *) nil_chk(dest))->size_;
  if ((off < 0) || (len < 0) || (jlong) off + (jlong) len > length) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  if (len > [self remaining]) {
    @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferUnderflowException_init();
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(backingArray_, offset_ + position__, dest, off, len);
  position__ += len;
  return self;
}

- (jboolean)isDirect {
  return NO;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioByteOrder *)order {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioByteOrder_nativeOrder();
}

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end {
  if (start < 0 || end < start || end > [self remaining]) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *result = [self duplicate];
  (void) [((OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *) nil_chk(result)) limitWithInt:position__ + end];
  (void) [result positionWithInt:position__ + start];
  return result;
}

- (NSString *)description {
  return NSString_valueOfChars_offset_count_(backingArray_, offset_ + position__, [self remaining]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithCharArray:", "CharArrayBuffer", NULL, 0x0, NULL, NULL },
    { "initWithInt:", "CharArrayBuffer", NULL, 0x0, NULL, NULL },
    { "initWithInt:withCharArray:withInt:", "CharArrayBuffer", NULL, 0x0, NULL, NULL },
    { "get", NULL, "C", 0x11, NULL, NULL },
    { "getWithInt:", "get", "C", 0x11, NULL, NULL },
    { "getWithCharArray:withInt:withInt:", "get", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x11, NULL, NULL },
    { "isDirect", NULL, "Z", 0x11, NULL, NULL },
    { "order", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.ByteOrder;", 0x11, NULL, NULL },
    { "subSequenceFrom:to:", "subSequence", "Ljava.lang.CharSequence;", 0x11, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "backingArray_", NULL, 0x14, "[C", NULL, NULL,  },
    { "offset_", NULL, 0x14, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer = { 2, "CharArrayBuffer", "org.geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x400, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithCharArray_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer *self, IOSCharArray *array) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithInt_withCharArray_withInt_(self, ((IOSCharArray *) nil_chk(array))->size_, array, 0);
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer *self, jint capacity) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithInt_withCharArray_withInt_(self, capacity, [IOSCharArray newArrayWithLength:capacity], 0);
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithInt_withCharArray_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer *self, jint capacity, IOSCharArray *backingArray, jint offset) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer_initWithInt_(self, capacity);
  self->backingArray_ = backingArray;
  self->offset_ = offset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer)
