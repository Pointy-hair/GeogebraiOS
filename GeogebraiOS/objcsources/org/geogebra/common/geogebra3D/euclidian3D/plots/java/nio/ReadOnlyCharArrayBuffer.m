//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyCharArrayBuffer.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/CharArrayBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/CharBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyBufferException.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyCharArrayBuffer.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer

+ (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer *)copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer:(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer *)other
                                                                                                                                                   withInt:(jint)markOfOther {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_withInt_(other, markOfOther);
}

- (instancetype)initWithInt:(jint)capacity
              withCharArray:(IOSCharArray *)backingArray
                    withInt:(jint)arrayOffset {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_initWithInt_withCharArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)asReadOnlyBuffer {
  return [self duplicate];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)compact {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)duplicate {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_withInt_(self, mark__);
}

- (jboolean)isReadOnly {
  return YES;
}

- (IOSCharArray *)protectedArray {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (jint)protectedArrayOffset {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (jboolean)protectedHasArray {
  return NO;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)putWithChar:(jchar)c {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)putWithInt:(jint)index
                                                                    withChar:(jchar)c {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)putWithCharArray:(IOSCharArray *)src
                                                                           withInt:(jint)off
                                                                           withInt:(jint)len {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)putWithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer:(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)src {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)putWithNSString:(NSString *)src
                                                                          withInt:(jint)start
                                                                          withInt:(jint)end {
  if ((start < 0) || (end < 0) || (jlong) start + (jlong) end > ((jint) [((NSString *) nil_chk(src)) length])) {
    @throw [new_JavaLangIndexOutOfBoundsException_init() autorelease];
  }
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer *)slice {
  return [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_initWithInt_withCharArray_withInt_([self remaining], backingArray_, offset_ + position__) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer:withInt:", "copy", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.ReadOnlyCharArrayBuffer;", 0x8, NULL, NULL },
    { "initWithInt:withCharArray:withInt:", "ReadOnlyCharArrayBuffer", NULL, 0x0, NULL, NULL },
    { "asReadOnlyBuffer", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x1, NULL, NULL },
    { "compact", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x1, NULL, NULL },
    { "duplicate", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x1, NULL, NULL },
    { "isReadOnly", NULL, "Z", 0x1, NULL, NULL },
    { "protectedArray", NULL, "[C", 0x4, NULL, NULL },
    { "protectedArrayOffset", NULL, "I", 0x4, NULL, NULL },
    { "protectedHasArray", NULL, "Z", 0x4, NULL, NULL },
    { "putWithChar:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x1, NULL, NULL },
    { "putWithInt:withChar:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x1, NULL, NULL },
    { "putWithCharArray:withInt:withInt:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x11, NULL, NULL },
    { "putWithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharBuffer:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x11, NULL, NULL },
    { "putWithNSString:withInt:withInt:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x1, NULL, NULL },
    { "slice", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.CharBuffer;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer = { 2, "ReadOnlyCharArrayBuffer", "org.geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x10, 15, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer;
}

@end

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer *other, jint markOfOther) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_initialize();
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer *buf = [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_initWithInt_withCharArray_withInt_([((OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer *) nil_chk(other)) capacity], other->backingArray_, other->offset_) autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_initWithInt_withCharArray_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer *self, jint capacity, IOSCharArray *backingArray, jint arrayOffset) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioCharArrayBuffer_initWithInt_withCharArray_withInt_(self, capacity, backingArray, arrayOffset);
}

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer *new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_initWithInt_withCharArray_withInt_(jint capacity, IOSCharArray *backingArray, jint arrayOffset) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer *self = [OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer_initWithInt_withCharArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyCharArrayBuffer)
