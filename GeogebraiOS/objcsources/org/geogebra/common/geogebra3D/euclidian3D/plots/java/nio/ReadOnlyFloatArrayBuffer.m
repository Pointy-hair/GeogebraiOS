//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyFloatArrayBuffer.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/FloatArrayBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/FloatBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyBufferException.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyFloatArrayBuffer.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer

+ (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer *)copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer:(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *)other
                                                                                                                                                     withInt:(jint)markOfOther {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_withInt_(other, markOfOther);
}

- (instancetype)initWithInt:(jint)capacity
             withFloatArray:(IOSFloatArray *)backingArray
                    withInt:(jint)arrayOffset {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)asReadOnlyBuffer {
  return [self duplicate];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)compact {
  @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init();
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)duplicate {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_withInt_(self, mark__);
}

- (jboolean)isReadOnly {
  return YES;
}

- (IOSFloatArray *)protectedArray {
  @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init();
}

- (jint)protectedArrayOffset {
  @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init();
}

- (jboolean)protectedHasArray {
  return NO;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)putWithFloat:(jfloat)c {
  @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init();
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)putWithInt:(jint)index
                                                                    withFloat:(jfloat)c {
  @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init();
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)putWithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer:(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)buf {
  @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init();
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)putWithFloatArray:(IOSFloatArray *)src
                                                                             withInt:(jint)off
                                                                             withInt:(jint)len {
  @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init();
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)slice {
  return new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_initWithInt_withFloatArray_withInt_([self remaining], backingArray_, offset_ + position__);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer:withInt:", "copy", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.ReadOnlyFloatArrayBuffer;", 0x8, NULL, NULL },
    { "initWithInt:withFloatArray:withInt:", "ReadOnlyFloatArrayBuffer", NULL, 0x0, NULL, NULL },
    { "asReadOnlyBuffer", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "compact", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "duplicate", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "isReadOnly", NULL, "Z", 0x1, NULL, NULL },
    { "protectedArray", NULL, "[F", 0x4, NULL, NULL },
    { "protectedArrayOffset", NULL, "I", 0x4, NULL, NULL },
    { "protectedHasArray", NULL, "Z", 0x4, NULL, NULL },
    { "putWithFloat:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "putWithInt:withFloat:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "putWithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "putWithFloatArray:withInt:withInt:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x11, NULL, NULL },
    { "slice", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer = { 2, "ReadOnlyFloatArrayBuffer", "org.geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x10, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer;
}

@end

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *other, jint markOfOther) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_initialize();
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer *buf = new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_initWithInt_withFloatArray_withInt_([((OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *) nil_chk(other)) capacity], other->backingArray_, other->offset_);
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_initWithInt_withFloatArray_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer *self, jint capacity, IOSFloatArray *backingArray, jint arrayOffset) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, capacity, backingArray, arrayOffset);
}

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer *new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_initWithInt_withFloatArray_withInt_(jint capacity, IOSFloatArray *backingArray, jint arrayOffset) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer *self = [OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer)
