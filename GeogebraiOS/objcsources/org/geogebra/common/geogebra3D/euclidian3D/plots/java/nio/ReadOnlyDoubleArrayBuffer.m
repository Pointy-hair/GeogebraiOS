//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyDoubleArrayBuffer.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/DoubleArrayBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/DoubleBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyBufferException.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyDoubleArrayBuffer.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer

+ (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer *)copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer:(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer *)other
                                                                                                                                                       withInt:(jint)markOfOther {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer_withInt_(other, markOfOther);
}

- (instancetype)initWithInt:(jint)capacity
            withDoubleArray:(IOSDoubleArray *)backingArray
                    withInt:(jint)arrayOffset {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_initWithInt_withDoubleArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)asReadOnlyBuffer {
  return [self duplicate];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)compact {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)duplicate {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer_withInt_(self, mark__);
}

- (jboolean)isReadOnly {
  return YES;
}

- (IOSDoubleArray *)protectedArray {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (jint)protectedArrayOffset {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (jboolean)protectedHasArray {
  return NO;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithDouble:(jdouble)c {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithInt:(jint)index
                                                                    withDouble:(jdouble)c {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithDoubleArray:(IOSDoubleArray *)src
                                                                               withInt:(jint)off
                                                                               withInt:(jint)len {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer:(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)buf {
  @throw [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyBufferException_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)slice {
  return [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_initWithInt_withDoubleArray_withInt_([self remaining], backingArray_, offset_ + position__) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer:withInt:", "copy", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.ReadOnlyDoubleArrayBuffer;", 0x8, NULL, NULL },
    { "initWithInt:withDoubleArray:withInt:", "ReadOnlyDoubleArrayBuffer", NULL, 0x0, NULL, NULL },
    { "asReadOnlyBuffer", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "compact", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "duplicate", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "isReadOnly", NULL, "Z", 0x1, NULL, NULL },
    { "protectedArray", NULL, "[D", 0x4, NULL, NULL },
    { "protectedArrayOffset", NULL, "I", 0x4, NULL, NULL },
    { "protectedHasArray", NULL, "Z", 0x4, NULL, NULL },
    { "putWithDouble:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "putWithInt:withDouble:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "putWithDoubleArray:withInt:withInt:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x11, NULL, NULL },
    { "putWithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x11, NULL, NULL },
    { "slice", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer = { 2, "ReadOnlyDoubleArrayBuffer", "org.geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x10, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer;
}

@end

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_copy__WithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer *other, jint markOfOther) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_initialize();
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer *buf = [new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_initWithInt_withDoubleArray_withInt_([((OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer *) nil_chk(other)) capacity], other->backingArray_, other->offset_) autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_initWithInt_withDoubleArray_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer *self, jint capacity, IOSDoubleArray *backingArray, jint arrayOffset) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleArrayBuffer_initWithInt_withDoubleArray_withInt_(self, capacity, backingArray, arrayOffset);
}

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer *new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_initWithInt_withDoubleArray_withInt_(jint capacity, IOSDoubleArray *backingArray, jint arrayOffset) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer *self = [OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer_initWithInt_withDoubleArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyDoubleArrayBuffer)
