//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/geogebra3D/euclidian3D/plots/Collision.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/Collision.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"

@interface OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision ()

+ (IOSFloatArray *)crossWithFloatArray:(IOSFloatArray *)v1
                        withFloatArray:(IOSFloatArray *)v2;

+ (jfloat)dotWithFloatArray:(IOSFloatArray *)v1
             withFloatArray:(IOSFloatArray *)v2;

+ (IOSFloatArray *)subWithFloatArray:(IOSFloatArray *)v1
                      withFloatArray:(IOSFloatArray *)v2;

+ (IOSFloatArray *)addWithFloatArray:(IOSFloatArray *)v1
                      withFloatArray:(IOSFloatArray *)v2;

+ (void)multInlineWithFloatArray:(IOSFloatArray *)v
                       withFloat:(jfloat)factor;

+ (IOSFloatArray *)multWithFloatArray:(IOSFloatArray *)v
                            withFloat:(jfloat)factor;

+ (jboolean)sortWithJavaLangFloat:(JavaLangFloat *)a
                withJavaLangFloat:(JavaLangFloat *)b;

+ (jboolean)edgeEdgeIntersectWithFloatArray:(IOSFloatArray *)v0
                             withFloatArray:(IOSFloatArray *)u0
                             withFloatArray:(IOSFloatArray *)u1
                                    withInt:(jint)i0
                                    withInt:(jint)i1
                                  withFloat:(jfloat)ax
                                  withFloat:(jfloat)ay;

+ (jboolean)segmentAgainstTriEdgesWithFloatArray:(IOSFloatArray *)p0
                                  withFloatArray:(IOSFloatArray *)p1
                                  withFloatArray:(IOSFloatArray *)t0
                                  withFloatArray:(IOSFloatArray *)t1
                                  withFloatArray:(IOSFloatArray *)t2
                                         withInt:(jint)i0
                                         withInt:(jint)i1;

+ (jboolean)coplanarTriTriWithFloatArray:(IOSFloatArray *)n
                          withFloatArray:(IOSFloatArray *)t0
                          withFloatArray:(IOSFloatArray *)t1
                          withFloatArray:(IOSFloatArray *)t2
                          withFloatArray:(IOSFloatArray *)u0
                          withFloatArray:(IOSFloatArray *)u1
                          withFloatArray:(IOSFloatArray *)u2;

+ (jboolean)pointInTriWithFloatArray:(IOSFloatArray *)p
                      withFloatArray:(IOSFloatArray *)t0
                      withFloatArray:(IOSFloatArray *)t1
                      withFloatArray:(IOSFloatArray *)t2
                             withInt:(jint)i0
                             withInt:(jint)i1;

+ (IOSFloatArray *)isect2WithFloatArray:(IOSFloatArray *)vt0
                         withFloatArray:(IOSFloatArray *)vt1
                         withFloatArray:(IOSFloatArray *)vt2
                              withFloat:(jfloat)vv0
                              withFloat:(jfloat)vv1
                              withFloat:(jfloat)vv2
                              withFloat:(jfloat)d0
                              withFloat:(jfloat)d1
                              withFloat:(jfloat)d2
                         withFloatArray:(IOSFloatArray *)isectpoint0
                         withFloatArray:(IOSFloatArray *)isectpoint1;

+ (IOSFloatArray *)computeIntervalsIntersectionLineWithFloatArray:(IOSFloatArray *)t0
                                                   withFloatArray:(IOSFloatArray *)t1
                                                   withFloatArray:(IOSFloatArray *)t2
                                                        withFloat:(jfloat)vv0
                                                        withFloat:(jfloat)vv1
                                                        withFloat:(jfloat)vv2
                                                        withFloat:(jfloat)d0
                                                        withFloat:(jfloat)d1
                                                        withFloat:(jfloat)d2
                                                        withFloat:(jfloat)d0d1
                                                        withFloat:(jfloat)d0d2
                                                   withFloatArray:(IOSFloatArray *)isectpoint0
                                                   withFloatArray:(IOSFloatArray *)isectpoint1
                                              withJavaLangBoolean:(JavaLangBoolean *)coplanar;

+ (jboolean)pointBoxIntersectWithFloatArray:(IOSFloatArray *)bb
                             withFloatArray:(IOSFloatArray *)pt;

@end

__attribute__((unused)) static IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_crossWithFloatArray_withFloatArray_(IOSFloatArray *v1, IOSFloatArray *v2);

__attribute__((unused)) static jfloat OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(IOSFloatArray *v1, IOSFloatArray *v2);

__attribute__((unused)) static IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(IOSFloatArray *v1, IOSFloatArray *v2);

__attribute__((unused)) static IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_addWithFloatArray_withFloatArray_(IOSFloatArray *v1, IOSFloatArray *v2);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multInlineWithFloatArray_withFloat_(IOSFloatArray *v, jfloat factor);

__attribute__((unused)) static IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multWithFloatArray_withFloat_(IOSFloatArray *v, jfloat factor);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_sortWithJavaLangFloat_withJavaLangFloat_(JavaLangFloat *a, JavaLangFloat *b);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_edgeEdgeIntersectWithFloatArray_withFloatArray_withFloatArray_withInt_withInt_withFloat_withFloat_(IOSFloatArray *v0, IOSFloatArray *u0, IOSFloatArray *u1, jint i0, jint i1, jfloat ax, jfloat ay);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentAgainstTriEdgesWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(IOSFloatArray *p0, IOSFloatArray *p1, IOSFloatArray *t0, IOSFloatArray *t1, IOSFloatArray *t2, jint i0, jint i1);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_coplanarTriTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_(IOSFloatArray *n, IOSFloatArray *t0, IOSFloatArray *t1, IOSFloatArray *t2, IOSFloatArray *u0, IOSFloatArray *u1, IOSFloatArray *u2);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointInTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(IOSFloatArray *p, IOSFloatArray *t0, IOSFloatArray *t1, IOSFloatArray *t2, jint i0, jint i1);

__attribute__((unused)) static IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_isect2WithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_(IOSFloatArray *vt0, IOSFloatArray *vt1, IOSFloatArray *vt2, jfloat vv0, jfloat vv1, jfloat vv2, jfloat d0, jfloat d1, jfloat d2, IOSFloatArray *isectpoint0, IOSFloatArray *isectpoint1);

__attribute__((unused)) static IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_computeIntervalsIntersectionLineWithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_withJavaLangBoolean_(IOSFloatArray *t0, IOSFloatArray *t1, IOSFloatArray *t2, jfloat vv0, jfloat vv1, jfloat vv2, jfloat d0, jfloat d1, jfloat d2, jfloat d0d1, jfloat d0d2, IOSFloatArray *isectpoint0, IOSFloatArray *isectpoint1, JavaLangBoolean *coplanar);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointBoxIntersectWithFloatArray_withFloatArray_(IOSFloatArray *bb, IOSFloatArray *pt);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision)

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_AAB_NORMALS_;

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision

+ (IOSFloatArray *)triangleBoundingBoxWithFloatArray:(IOSFloatArray *)tri {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triangleBoundingBoxWithFloatArray_(tri);
}

+ (IOSFloatArray *)segmentBoundingBoxWithFloatArray:(IOSFloatArray *)p0
                                     withFloatArray:(IOSFloatArray *)p1 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentBoundingBoxWithFloatArray_withFloatArray_(p0, p1);
}

+ (IOSObjectArray *)triTriIntersectionWithOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)t1
                                      withOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)t2 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triTriIntersectionWithOrgGeogebraCommonKernelMatrixCoordsArray_withOrgGeogebraCommonKernelMatrixCoordsArray_(t1, t2);
}

+ (IOSFloatArray *)crossWithFloatArray:(IOSFloatArray *)v1
                        withFloatArray:(IOSFloatArray *)v2 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_crossWithFloatArray_withFloatArray_(v1, v2);
}

+ (jfloat)dotWithFloatArray:(IOSFloatArray *)v1
             withFloatArray:(IOSFloatArray *)v2 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(v1, v2);
}

+ (IOSFloatArray *)subWithFloatArray:(IOSFloatArray *)v1
                      withFloatArray:(IOSFloatArray *)v2 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(v1, v2);
}

+ (IOSFloatArray *)addWithFloatArray:(IOSFloatArray *)v1
                      withFloatArray:(IOSFloatArray *)v2 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_addWithFloatArray_withFloatArray_(v1, v2);
}

+ (void)multInlineWithFloatArray:(IOSFloatArray *)v
                       withFloat:(jfloat)factor {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multInlineWithFloatArray_withFloat_(v, factor);
}

+ (IOSFloatArray *)multWithFloatArray:(IOSFloatArray *)v
                            withFloat:(jfloat)factor {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multWithFloatArray_withFloat_(v, factor);
}

+ (jboolean)sortWithJavaLangFloat:(JavaLangFloat *)a
                withJavaLangFloat:(JavaLangFloat *)b {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_sortWithJavaLangFloat_withJavaLangFloat_(a, b);
}

+ (IOSFloatArray *)triTriIntersectWithFloatArray:(IOSFloatArray *)t0
                                  withFloatArray:(IOSFloatArray *)t1
                             withJavaLangBoolean:(JavaLangBoolean *)coplanar
                             withJavaLangBoolean:(JavaLangBoolean *)intersect {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triTriIntersectWithFloatArray_withFloatArray_withJavaLangBoolean_withJavaLangBoolean_(t0, t1, coplanar, intersect);
}

+ (jboolean)edgeEdgeIntersectWithFloatArray:(IOSFloatArray *)v0
                             withFloatArray:(IOSFloatArray *)u0
                             withFloatArray:(IOSFloatArray *)u1
                                    withInt:(jint)i0
                                    withInt:(jint)i1
                                  withFloat:(jfloat)ax
                                  withFloat:(jfloat)ay {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_edgeEdgeIntersectWithFloatArray_withFloatArray_withFloatArray_withInt_withInt_withFloat_withFloat_(v0, u0, u1, i0, i1, ax, ay);
}

+ (jboolean)segmentAgainstTriEdgesWithFloatArray:(IOSFloatArray *)p0
                                  withFloatArray:(IOSFloatArray *)p1
                                  withFloatArray:(IOSFloatArray *)t0
                                  withFloatArray:(IOSFloatArray *)t1
                                  withFloatArray:(IOSFloatArray *)t2
                                         withInt:(jint)i0
                                         withInt:(jint)i1 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentAgainstTriEdgesWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(p0, p1, t0, t1, t2, i0, i1);
}

+ (jboolean)coplanarTriTriWithFloatArray:(IOSFloatArray *)n
                          withFloatArray:(IOSFloatArray *)t0
                          withFloatArray:(IOSFloatArray *)t1
                          withFloatArray:(IOSFloatArray *)t2
                          withFloatArray:(IOSFloatArray *)u0
                          withFloatArray:(IOSFloatArray *)u1
                          withFloatArray:(IOSFloatArray *)u2 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_coplanarTriTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_(n, t0, t1, t2, u0, u1, u2);
}

+ (jboolean)pointInTriWithFloatArray:(IOSFloatArray *)p
                      withFloatArray:(IOSFloatArray *)t0
                      withFloatArray:(IOSFloatArray *)t1
                      withFloatArray:(IOSFloatArray *)t2
                             withInt:(jint)i0
                             withInt:(jint)i1 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointInTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(p, t0, t1, t2, i0, i1);
}

+ (IOSFloatArray *)isect2WithFloatArray:(IOSFloatArray *)vt0
                         withFloatArray:(IOSFloatArray *)vt1
                         withFloatArray:(IOSFloatArray *)vt2
                              withFloat:(jfloat)vv0
                              withFloat:(jfloat)vv1
                              withFloat:(jfloat)vv2
                              withFloat:(jfloat)d0
                              withFloat:(jfloat)d1
                              withFloat:(jfloat)d2
                         withFloatArray:(IOSFloatArray *)isectpoint0
                         withFloatArray:(IOSFloatArray *)isectpoint1 {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_isect2WithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_(vt0, vt1, vt2, vv0, vv1, vv2, d0, d1, d2, isectpoint0, isectpoint1);
}

+ (IOSFloatArray *)computeIntervalsIntersectionLineWithFloatArray:(IOSFloatArray *)t0
                                                   withFloatArray:(IOSFloatArray *)t1
                                                   withFloatArray:(IOSFloatArray *)t2
                                                        withFloat:(jfloat)vv0
                                                        withFloat:(jfloat)vv1
                                                        withFloat:(jfloat)vv2
                                                        withFloat:(jfloat)d0
                                                        withFloat:(jfloat)d1
                                                        withFloat:(jfloat)d2
                                                        withFloat:(jfloat)d0d1
                                                        withFloat:(jfloat)d0d2
                                                   withFloatArray:(IOSFloatArray *)isectpoint0
                                                   withFloatArray:(IOSFloatArray *)isectpoint1
                                              withJavaLangBoolean:(JavaLangBoolean *)coplanar {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_computeIntervalsIntersectionLineWithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_withJavaLangBoolean_(t0, t1, t2, vv0, vv1, vv2, d0, d1, d2, d0d1, d0d2, isectpoint0, isectpoint1, coplanar);
}

+ (jint)rayTriIntersectWithFloatArray:(IOSFloatArray *)p0
                       withFloatArray:(IOSFloatArray *)p1
                       withFloatArray:(IOSFloatArray *)t
                    withJavaLangFloat:(JavaLangFloat *)param
                       withFloatArray:(IOSFloatArray *)intersection {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_rayTriIntersectWithFloatArray_withFloatArray_withFloatArray_withJavaLangFloat_withFloatArray_(p0, p1, t, param, intersection);
}

+ (jboolean)rayBoxIntersectWithFloatArray:(IOSFloatArray *)box
                           withFloatArray:(IOSFloatArray *)origin
                           withFloatArray:(IOSFloatArray *)t
                           withFloatArray:(IOSFloatArray *)entry_
                           withFloatArray:(IOSFloatArray *)exit {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_rayBoxIntersectWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_(box, origin, t, entry_, exit);
}

+ (jboolean)pointBoxIntersectWithFloatArray:(IOSFloatArray *)bb
                             withFloatArray:(IOSFloatArray *)pt {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointBoxIntersectWithFloatArray_withFloatArray_(bb, pt);
}

+ (jboolean)segmentTriIntersectWithFloatArray:(IOSFloatArray *)p0
                               withFloatArray:(IOSFloatArray *)p1
                               withFloatArray:(IOSFloatArray *)t
                               withFloatArray:(IOSFloatArray *)intersection {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentTriIntersectWithFloatArray_withFloatArray_withFloatArray_withFloatArray_(p0, p1, t, intersection);
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_AAB_NORMALS_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSFloatArray arrayWithFloats:(jfloat[]){ -1, 0, 0 } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ 1, 0, 0 } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ 0, -1, 0 } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 1, 0 } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 0, -1 } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 0, 1 } count:3] } count:6 type:IOSClass_floatArray(1)]);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "triangleBoundingBoxWithFloatArray:", "triangleBoundingBox", "[F", 0x9, NULL, NULL },
    { "segmentBoundingBoxWithFloatArray:withFloatArray:", "segmentBoundingBox", "[F", 0x9, NULL, NULL },
    { "triTriIntersectionWithOrgGeogebraCommonKernelMatrixCoordsArray:withOrgGeogebraCommonKernelMatrixCoordsArray:", "triTriIntersection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x9, NULL, NULL },
    { "crossWithFloatArray:withFloatArray:", "cross", "[F", 0xa, NULL, NULL },
    { "dotWithFloatArray:withFloatArray:", "dot", "F", 0xa, NULL, NULL },
    { "subWithFloatArray:withFloatArray:", "sub", "[F", 0xa, NULL, NULL },
    { "addWithFloatArray:withFloatArray:", "add", "[F", 0xa, NULL, NULL },
    { "multInlineWithFloatArray:withFloat:", "multInline", "V", 0xa, NULL, NULL },
    { "multWithFloatArray:withFloat:", "mult", "[F", 0xa, NULL, NULL },
    { "sortWithJavaLangFloat:withJavaLangFloat:", "sort", "Z", 0xa, NULL, NULL },
    { "triTriIntersectWithFloatArray:withFloatArray:withJavaLangBoolean:withJavaLangBoolean:", "triTriIntersect", "[F", 0x9, NULL, NULL },
    { "edgeEdgeIntersectWithFloatArray:withFloatArray:withFloatArray:withInt:withInt:withFloat:withFloat:", "edgeEdgeIntersect", "Z", 0xa, NULL, NULL },
    { "segmentAgainstTriEdgesWithFloatArray:withFloatArray:withFloatArray:withFloatArray:withFloatArray:withInt:withInt:", "segmentAgainstTriEdges", "Z", 0xa, NULL, NULL },
    { "coplanarTriTriWithFloatArray:withFloatArray:withFloatArray:withFloatArray:withFloatArray:withFloatArray:withFloatArray:", "coplanarTriTri", "Z", 0xa, NULL, NULL },
    { "pointInTriWithFloatArray:withFloatArray:withFloatArray:withFloatArray:withInt:withInt:", "pointInTri", "Z", 0xa, NULL, NULL },
    { "isect2WithFloatArray:withFloatArray:withFloatArray:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloatArray:withFloatArray:", "isect2", "[F", 0xa, NULL, NULL },
    { "computeIntervalsIntersectionLineWithFloatArray:withFloatArray:withFloatArray:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloatArray:withFloatArray:withJavaLangBoolean:", "computeIntervalsIntersectionLine", "[F", 0xa, NULL, NULL },
    { "rayTriIntersectWithFloatArray:withFloatArray:withFloatArray:withJavaLangFloat:withFloatArray:", "rayTriIntersect", "I", 0x8, NULL, NULL },
    { "rayBoxIntersectWithFloatArray:withFloatArray:withFloatArray:withFloatArray:withFloatArray:", "rayBoxIntersect", "Z", 0x9, NULL, NULL },
    { "pointBoxIntersectWithFloatArray:withFloatArray:", "pointBoxIntersect", "Z", 0xa, NULL, NULL },
    { "segmentTriIntersectWithFloatArray:withFloatArray:withFloatArray:withFloatArray:", "segmentTriIntersect", "Z", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "USE_EPSILON_TEST_", NULL, 0x18, "Z", NULL, NULL, .constantValue.asBOOL = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_USE_EPSILON_TEST },
    { "EPSILON_", NULL, 0x18, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON },
    { "AAB_NORMALS_", NULL, 0x8, "[[F", &OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_AAB_NORMALS_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision = { 2, "Collision", "org.geogebra.common.geogebra3D.euclidian3D.plots", NULL, 0x1, 22, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision;
}

@end

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triangleBoundingBoxWithFloatArray_(IOSFloatArray *tri) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  IOSFloatArray *bb = [IOSFloatArray arrayWithLength:6];
  for (jint i = 0; i < 3; i++) {
    jboolean s1 = IOSFloatArray_Get(nil_chk(tri), i) < IOSFloatArray_Get(tri, i + 3);
    jboolean s2 = IOSFloatArray_Get(tri, i + 3) < IOSFloatArray_Get(tri, i + 6);
    jboolean s3 = IOSFloatArray_Get(tri, i) < IOSFloatArray_Get(tri, i + 6);
    *IOSFloatArray_GetRef(bb, i * 2) = s1 ? (s3 ? IOSFloatArray_Get(tri, i) : IOSFloatArray_Get(tri, i + 6)) : (s2 ? IOSFloatArray_Get(tri, i + 3) : IOSFloatArray_Get(tri, i + 6));
    *IOSFloatArray_GetRef(bb, i * 2 + 1) = s1 ? (s2 ? IOSFloatArray_Get(tri, i + 6) : IOSFloatArray_Get(tri, i + 3)) : (s3 ? IOSFloatArray_Get(tri, i + 6) : IOSFloatArray_Get(tri, i));
  }
  return bb;
}

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentBoundingBoxWithFloatArray_withFloatArray_(IOSFloatArray *p0, IOSFloatArray *p1) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  jboolean x = IOSFloatArray_Get(nil_chk(p0), 0) < IOSFloatArray_Get(nil_chk(p1), 0);
  jboolean y = IOSFloatArray_Get(p0, 1) < IOSFloatArray_Get(p1, 1);
  jboolean z = IOSFloatArray_Get(p0, 2) < IOSFloatArray_Get(p1, 2);
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ x ? IOSFloatArray_Get(p0, 0) : IOSFloatArray_Get(p1, 0), x ? IOSFloatArray_Get(p1, 0) : IOSFloatArray_Get(p0, 0), y ? IOSFloatArray_Get(p0, 0) : IOSFloatArray_Get(p1, 0), y ? IOSFloatArray_Get(p1, 0) : IOSFloatArray_Get(p0, 0), z ? IOSFloatArray_Get(p0, 0) : IOSFloatArray_Get(p1, 0), z ? IOSFloatArray_Get(p1, 0) : IOSFloatArray_Get(p0, 0) } count:6];
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triTriIntersectionWithOrgGeogebraCommonKernelMatrixCoordsArray_withOrgGeogebraCommonKernelMatrixCoordsArray_(IOSObjectArray *t1, IOSObjectArray *t2) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  OrgGeogebraCommonKernelMatrixCoords *V10 = IOSObjectArray_Get(nil_chk(t1), 0);
  OrgGeogebraCommonKernelMatrixCoords *V11 = IOSObjectArray_Get(t1, 1);
  OrgGeogebraCommonKernelMatrixCoords *V12 = IOSObjectArray_Get(t1, 2);
  OrgGeogebraCommonKernelMatrixCoords *V20 = IOSObjectArray_Get(nil_chk(t2), 0);
  OrgGeogebraCommonKernelMatrixCoords *V21 = IOSObjectArray_Get(t2, 1);
  OrgGeogebraCommonKernelMatrixCoords *V22 = IOSObjectArray_Get(t2, 2);
  OrgGeogebraCommonKernelMatrixCoords *N1 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(V11)) subWithOrgGeogebraCommonKernelMatrixCoords:V10])) crossProductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(V12)) subWithOrgGeogebraCommonKernelMatrixCoords:V10]];
  jdouble d1 = -[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(N1)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:V10];
  OrgGeogebraCommonKernelMatrixCoords *N2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(V21)) subWithOrgGeogebraCommonKernelMatrixCoords:V20])) crossProductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(V22)) subWithOrgGeogebraCommonKernelMatrixCoords:V20]];
  jdouble d2 = -[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(N2)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:V20];
  jdouble dV10 = [N2 dotproductWithOrgGeogebraCommonKernelMatrixCoords:V10] + d2;
  jdouble dV11 = [N2 dotproductWithOrgGeogebraCommonKernelMatrixCoords:V11] + d2;
  jdouble dV12 = [N2 dotproductWithOrgGeogebraCommonKernelMatrixCoords:V12] + d2;
  jdouble dV20 = [N1 dotproductWithOrgGeogebraCommonKernelMatrixCoords:V20] + d1;
  jdouble dV21 = [N1 dotproductWithOrgGeogebraCommonKernelMatrixCoords:V21] + d1;
  jdouble dV22 = [N1 dotproductWithOrgGeogebraCommonKernelMatrixCoords:V22] + d1;
  if ((dV10 > 0 && dV11 > 0 && dV12 > 0) || (dV10 < 0 && dV11 < 0 && dV12 < 0)) return nil;
  if ((dV20 > 0 && dV21 > 0 && dV22 > 0) || (dV20 < 0 && dV21 < 0 && dV22 < 0)) return nil;
  if (dV10 == 0 && dV11 == 0 && dV12 == 0) {
    return nil;
  }
  jboolean V11side = dV11 < 0;
  if (dV11 < 0 == V11side) {
    OrgGeogebraCommonKernelMatrixCoords *temp = V11;
    V11 = V12;
    V12 = temp;
  }
  else if (dV12 < 0 == V11side) {
    OrgGeogebraCommonKernelMatrixCoords *temp = V11;
    V11 = V12;
    V12 = temp;
  }
  jboolean V21side = dV11 < 0;
  if (dV21 < 0 == V21side) {
    OrgGeogebraCommonKernelMatrixCoords *temp = V21;
    V21 = V22;
    V22 = temp;
  }
  else if (dV22 < 0 == V21side) {
    OrgGeogebraCommonKernelMatrixCoords *temp = V21;
    V21 = V22;
    V22 = temp;
  }
  OrgGeogebraCommonKernelMatrixCoords *D = [N1 crossProductWithOrgGeogebraCommonKernelMatrixCoords:N2];
  OrgGeogebraCommonKernelMatrixCoords *l = [V11 subWithOrgGeogebraCommonKernelMatrixCoords:V10];
  OrgGeogebraCommonKernelMatrixCoords *l0 = V11;
  OrgGeogebraCommonKernelMatrixCoords *p0 = V20;
  OrgGeogebraCommonKernelMatrixCoords *n = N2;
  jdouble d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p0)) subWithOrgGeogebraCommonKernelMatrixCoords:l0]))) dotproductWithOrgGeogebraCommonKernelMatrixCoords:n] / ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(l)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:n]);
  OrgGeogebraCommonKernelMatrixCoords *O = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([l mulWithDouble:d])) addWithOrgGeogebraCommonKernelMatrixCoords:l0];
  jdouble pV10 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(D)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(V10)) subWithOrgGeogebraCommonKernelMatrixCoords:D]];
  jdouble pV11 = [D dotproductWithOrgGeogebraCommonKernelMatrixCoords:[V11 subWithOrgGeogebraCommonKernelMatrixCoords:D]];
  jdouble pV12 = [D dotproductWithOrgGeogebraCommonKernelMatrixCoords:[V12 subWithOrgGeogebraCommonKernelMatrixCoords:D]];
  jdouble pV20 = [D dotproductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(V20)) subWithOrgGeogebraCommonKernelMatrixCoords:D]];
  jdouble pV21 = [D dotproductWithOrgGeogebraCommonKernelMatrixCoords:[V21 subWithOrgGeogebraCommonKernelMatrixCoords:D]];
  jdouble pV22 = [D dotproductWithOrgGeogebraCommonKernelMatrixCoords:[V22 subWithOrgGeogebraCommonKernelMatrixCoords:D]];
  jdouble t11 = pV10 + (pV10 - pV11) * dV10 / (dV10 - dV11);
  jdouble t12 = pV12 + (pV12 - pV11) * dV12 / (dV12 - dV11);
  jdouble t21 = pV20 + (pV20 - pV21) * dV20 / (dV20 - dV21);
  jdouble t22 = pV22 + (pV22 - pV21) * dV22 / (dV22 - dV21);
  if (t11 > t12) {
    jdouble temp = t11;
    t11 = t12;
    t12 = temp;
  }
  if (t21 > t22) {
    jdouble temp = t21;
    t21 = t22;
    t22 = temp;
  }
  jdouble tf1, tf2;
  tf1 = tf2 = 0;
  if (t11 < t21) {
    if (t12 < t21) return nil;
    tf1 = t21;
    tf2 = t12;
  }
  else if (t21 < t11) {
    if (t22 < t11) return nil;
    tf1 = t11;
    tf2 = t22;
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(O)) addWithOrgGeogebraCommonKernelMatrixCoords:[D mulWithDouble:tf1]], [O addWithOrgGeogebraCommonKernelMatrixCoords:[D mulWithDouble:tf2]] } count:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
}

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_crossWithFloatArray_withFloatArray_(IOSFloatArray *v1, IOSFloatArray *v2) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(v1), 1) * IOSFloatArray_Get(nil_chk(v2), 2) - IOSFloatArray_Get(v1, 2) * IOSFloatArray_Get(v2, 1), IOSFloatArray_Get(v1, 2) * IOSFloatArray_Get(v2, 0) - IOSFloatArray_Get(v1, 0) * IOSFloatArray_Get(v2, 2), IOSFloatArray_Get(v1, 0) * IOSFloatArray_Get(v2, 1) - IOSFloatArray_Get(v1, 1) * IOSFloatArray_Get(v2, 0) } count:3];
}

jfloat OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(IOSFloatArray *v1, IOSFloatArray *v2) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  return IOSFloatArray_Get(nil_chk(v1), 0) * IOSFloatArray_Get(nil_chk(v2), 0) + IOSFloatArray_Get(v1, 1) * IOSFloatArray_Get(v2, 1) + IOSFloatArray_Get(v1, 2) * IOSFloatArray_Get(v2, 2);
}

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(IOSFloatArray *v1, IOSFloatArray *v2) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(v1), 0) - IOSFloatArray_Get(nil_chk(v2), 0), IOSFloatArray_Get(v1, 1) - IOSFloatArray_Get(v2, 1), IOSFloatArray_Get(v1, 2) - IOSFloatArray_Get(v2, 2) } count:3];
}

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_addWithFloatArray_withFloatArray_(IOSFloatArray *v1, IOSFloatArray *v2) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(v1), 0) + IOSFloatArray_Get(nil_chk(v2), 0), IOSFloatArray_Get(v1, 1) + IOSFloatArray_Get(v2, 1), IOSFloatArray_Get(v1, 2) + IOSFloatArray_Get(v2, 2) } count:3];
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multInlineWithFloatArray_withFloat_(IOSFloatArray *v, jfloat factor) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  *IOSFloatArray_GetRef(nil_chk(v), 0) *= factor;
  *IOSFloatArray_GetRef(v, 1) *= factor;
  *IOSFloatArray_GetRef(v, 2) *= factor;
}

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multWithFloatArray_withFloat_(IOSFloatArray *v, jfloat factor) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(v), 0) * factor, IOSFloatArray_Get(v, 1) * factor, IOSFloatArray_Get(v, 2) * factor } count:3];
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_sortWithJavaLangFloat_withJavaLangFloat_(JavaLangFloat *a, JavaLangFloat *b) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  if ([((JavaLangFloat *) nil_chk(a)) floatValue] > [((JavaLangFloat *) nil_chk(b)) floatValue]) {
    jfloat c;
    c = [a floatValue];
    a = b;
    b = JavaLangFloat_valueOfWithFloat_(c);
    return YES;
  }
  else return NO;
}

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triTriIntersectWithFloatArray_withFloatArray_withJavaLangBoolean_withJavaLangBoolean_(IOSFloatArray *t0, IOSFloatArray *t1, JavaLangBoolean *coplanar, JavaLangBoolean *intersect) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  IOSFloatArray *v0 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(t0), 0), IOSFloatArray_Get(t0, 1), IOSFloatArray_Get(t0, 2) } count:3];
  IOSFloatArray *v1 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(t0, 3), IOSFloatArray_Get(t0, 4), IOSFloatArray_Get(t0, 5) } count:3];
  IOSFloatArray *v2 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(t0, 6), IOSFloatArray_Get(t0, 7), IOSFloatArray_Get(t0, 8) } count:3];
  IOSFloatArray *u0 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(t1), 0), IOSFloatArray_Get(t1, 1), IOSFloatArray_Get(t1, 2) } count:3];
  IOSFloatArray *u1 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(t1, 3), IOSFloatArray_Get(t1, 4), IOSFloatArray_Get(t1, 5) } count:3];
  IOSFloatArray *u2 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(t1, 6), IOSFloatArray_Get(t1, 7), IOSFloatArray_Get(t1, 8) } count:3];
  IOSFloatArray *n1 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_crossWithFloatArray_withFloatArray_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(v1, v0), OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(v2, v0));
  jfloat d1 = -OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n1, v0);
  jfloat du0 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n1, u0) + d1;
  jfloat du1 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n1, u1) + d1;
  jfloat du2 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n1, u2) + d1;
  {
    if (JavaLangMath_absWithFloat_(du0) < OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON) du0 = 0.0f;
    if (JavaLangMath_absWithFloat_(du1) < OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON) du1 = 0.0f;
    if (JavaLangMath_absWithFloat_(du2) < OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON) du2 = 0.0f;
  }
  jfloat du0du1 = du0 * du1;
  jfloat du0du2 = du0 * du2;
  if (du0du1 > 0.0f && du0du2 > 0.0f) return nil;
  IOSFloatArray *n2 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_crossWithFloatArray_withFloatArray_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(u1, u0), OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(u2, u0));
  jfloat d2 = -OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n2, u0);
  jfloat dv0 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n2, v0) + d2;
  jfloat dv1 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n2, v1) + d2;
  jfloat dv2 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n2, v2) + d2;
  {
    if (JavaLangMath_absWithFloat_(dv0) < OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON) dv0 = 0.0f;
    if (JavaLangMath_absWithFloat_(dv1) < OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON) dv1 = 0.0f;
    if (JavaLangMath_absWithFloat_(dv2) < OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON) dv2 = 0.0f;
  }
  jfloat dv0dv1 = dv0 * dv1;
  jfloat dv0dv2 = dv0 * dv2;
  if (dv0dv1 > 0.0f && dv0dv2 > 0.0f) return nil;
  IOSFloatArray *D = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_crossWithFloatArray_withFloatArray_(n1, n2);
  jfloat max = JavaLangMath_absWithFloat_(IOSFloatArray_Get(nil_chk(D), 0));
  jint index = 0;
  jfloat b = JavaLangMath_absWithFloat_(IOSFloatArray_Get(D, 1));
  jfloat c = JavaLangMath_absWithFloat_(IOSFloatArray_Get(D, 2));
  if (b > max) {
    max = b;
    index = 1;
  }
  if (c > max) {
    max = c;
    index = 2;
  }
  jfloat vp0 = IOSFloatArray_Get(v0, index);
  jfloat vp1 = IOSFloatArray_Get(v1, index);
  jfloat vp2 = IOSFloatArray_Get(v2, index);
  jfloat up0 = IOSFloatArray_Get(u0, index);
  jfloat up1 = IOSFloatArray_Get(u1, index);
  jfloat up2 = IOSFloatArray_Get(u2, index);
  IOSFloatArray *isectpointA1 = [IOSFloatArray arrayWithLength:3];
  IOSFloatArray *isectpointA2 = [IOSFloatArray arrayWithLength:3];
  IOSFloatArray *isect1 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_computeIntervalsIntersectionLineWithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_withJavaLangBoolean_(v0, v1, v2, vp0, vp1, vp2, dv0, dv1, dv2, dv0dv1, dv0dv2, isectpointA1, isectpointA2, coplanar);
  if ([((JavaLangBoolean *) nil_chk(coplanar)) booleanValue]) {
    intersect = JavaLangBoolean_valueOfWithBoolean_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_coplanarTriTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_(n1, v0, v1, v2, u0, u1, u2));
    return nil;
  }
  IOSFloatArray *isectpointB1 = [IOSFloatArray arrayWithLength:3];
  IOSFloatArray *isectpointB2 = [IOSFloatArray arrayWithLength:3];
  IOSFloatArray *isect2 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_computeIntervalsIntersectionLineWithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_withJavaLangBoolean_(u0, u1, u2, up0, up1, up2, du0, du1, du2, du0du1, du0du2, isectpointB1, isectpointB2, coplanar);
  jboolean rev1 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_sortWithJavaLangFloat_withJavaLangFloat_(JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(nil_chk(isect1), 0)), JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(isect1, 1)));
  jboolean rev2 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_sortWithJavaLangFloat_withJavaLangFloat_(JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(nil_chk(isect2), 0)), JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(isect2, 1)));
  if (IOSFloatArray_Get(isect1, 1) < IOSFloatArray_Get(isect2, 0) || IOSFloatArray_Get(isect2, 1) < IOSFloatArray_Get(isect1, 0)) return nil;
  IOSFloatArray *isectpt1, *isectpt2;
  if (IOSFloatArray_Get(isect2, 0) < IOSFloatArray_Get(isect1, 0)) {
    isectpt1 = rev1 ? isectpointA2 : isectpointA1;
    if (IOSFloatArray_Get(isect2, 1) < IOSFloatArray_Get(isect1, 1)) isectpt2 = rev2 ? isectpointB1 : isectpointB2;
    else isectpt2 = rev1 ? isectpointA1 : isectpointA2;
  }
  else {
    isectpt1 = rev2 ? isectpointB2 : isectpointB1;
    if (IOSFloatArray_Get(isect2, 1) > IOSFloatArray_Get(isect1, 1)) isectpt2 = rev1 ? isectpointA1 : isectpointA2;
    else isectpt2 = rev2 ? isectpointB1 : isectpointB2;
  }
  intersect = JavaLangBoolean_valueOfWithBoolean_(YES);
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(isectpt1), 0), IOSFloatArray_Get(isectpt1, 1), IOSFloatArray_Get(isectpt1, 2), IOSFloatArray_Get(nil_chk(isectpt2), 0), IOSFloatArray_Get(isectpt2, 1), IOSFloatArray_Get(isectpt2, 2) } count:6];
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_edgeEdgeIntersectWithFloatArray_withFloatArray_withFloatArray_withInt_withInt_withFloat_withFloat_(IOSFloatArray *v0, IOSFloatArray *u0, IOSFloatArray *u1, jint i0, jint i1, jfloat ax, jfloat ay) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  jfloat bx = IOSFloatArray_Get(nil_chk(u0), i0) - IOSFloatArray_Get(nil_chk(u1), i0);
  jfloat by = IOSFloatArray_Get(u0, i1) - IOSFloatArray_Get(u1, i1);
  jfloat cx = IOSFloatArray_Get(nil_chk(v0), i0) - IOSFloatArray_Get(u0, i0);
  jfloat cy = IOSFloatArray_Get(v0, i1) - IOSFloatArray_Get(u0, i1);
  jfloat f = ay * bx - ax * by;
  jfloat d = by * cx - bx * cy;
  if ((f > 0 && d >= 0 && d <= f) || (f < 0 && d <= 0 && d >= f)) {
    jfloat e = ax * cy - ay * cx;
    if (f > 0) {
      if (e >= 0 && e <= f) return YES;
    }
    else {
      if (e <= 0 && e >= f) return YES;
    }
  }
  return NO;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentAgainstTriEdgesWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(IOSFloatArray *p0, IOSFloatArray *p1, IOSFloatArray *t0, IOSFloatArray *t1, IOSFloatArray *t2, jint i0, jint i1) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  jfloat ax = IOSFloatArray_Get(nil_chk(p1), i0) - IOSFloatArray_Get(nil_chk(p0), i0);
  jfloat ay = IOSFloatArray_Get(p1, i1) - IOSFloatArray_Get(p0, i1);
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_edgeEdgeIntersectWithFloatArray_withFloatArray_withFloatArray_withInt_withInt_withFloat_withFloat_(p0, t0, t1, i0, i1, ax, ay)) return YES;
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_edgeEdgeIntersectWithFloatArray_withFloatArray_withFloatArray_withInt_withInt_withFloat_withFloat_(p0, t1, t2, i0, i1, ax, ay)) return YES;
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_edgeEdgeIntersectWithFloatArray_withFloatArray_withFloatArray_withInt_withInt_withFloat_withFloat_(p0, t2, t0, i0, i1, ax, ay)) return YES;
  return NO;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_coplanarTriTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_(IOSFloatArray *n, IOSFloatArray *t0, IOSFloatArray *t1, IOSFloatArray *t2, IOSFloatArray *u0, IOSFloatArray *u1, IOSFloatArray *u2) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  IOSFloatArray *a = [IOSFloatArray arrayWithLength:3];
  jshort i0, i1;
  *IOSFloatArray_GetRef(a, 0) = JavaLangMath_absWithFloat_(IOSFloatArray_Get(nil_chk(n), 0));
  *IOSFloatArray_GetRef(a, 1) = JavaLangMath_absWithFloat_(IOSFloatArray_Get(n, 1));
  *IOSFloatArray_GetRef(a, 2) = JavaLangMath_absWithFloat_(IOSFloatArray_Get(n, 2));
  if (IOSFloatArray_Get(a, 0) > IOSFloatArray_Get(a, 1)) {
    if (IOSFloatArray_Get(a, 0) > IOSFloatArray_Get(a, 2)) {
      i0 = 1;
      i1 = 2;
    }
    else {
      i0 = 0;
      i1 = 1;
    }
  }
  else {
    if (IOSFloatArray_Get(a, 2) > IOSFloatArray_Get(a, 1)) {
      i0 = 0;
      i1 = 1;
    }
    else {
      i0 = 0;
      i1 = 2;
    }
  }
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentAgainstTriEdgesWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(t0, t1, u0, u1, u2, i0, i1)) return YES;
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentAgainstTriEdgesWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(t1, t2, u0, u1, u2, i0, i1)) return YES;
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentAgainstTriEdgesWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(t2, t0, u0, u1, u2, i0, i1)) return YES;
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointInTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(t0, u0, u1, u2, i0, i1)) return YES;
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointInTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(u0, t0, t1, t2, i0, i1)) return YES;
  return NO;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointInTriWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withInt_withInt_(IOSFloatArray *p, IOSFloatArray *t0, IOSFloatArray *t1, IOSFloatArray *t2, jint i0, jint i1) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  jfloat a = IOSFloatArray_Get(nil_chk(t1), i1) - IOSFloatArray_Get(nil_chk(t0), i1);
  jfloat b = -(IOSFloatArray_Get(t1, i0) - IOSFloatArray_Get(t0, i0));
  jfloat c = -a * IOSFloatArray_Get(t0, i0) - b * IOSFloatArray_Get(t0, i1);
  jfloat d0 = a * IOSFloatArray_Get(nil_chk(p), i0) + b * IOSFloatArray_Get(p, i1) + c;
  a = IOSFloatArray_Get(nil_chk(t2), i1) - IOSFloatArray_Get(t1, i1);
  b = -(IOSFloatArray_Get(t2, i0) - IOSFloatArray_Get(t1, i0));
  c = -a * IOSFloatArray_Get(t1, i0) - b * IOSFloatArray_Get(t1, i1);
  jfloat d1 = a * IOSFloatArray_Get(p, i0) + b * IOSFloatArray_Get(p, i1) + c;
  a = IOSFloatArray_Get(t0, i1) - IOSFloatArray_Get(t2, i1);
  b = -(IOSFloatArray_Get(t0, i0) - IOSFloatArray_Get(t2, i0));
  c = -a * IOSFloatArray_Get(t2, i0) - b * IOSFloatArray_Get(t2, i1);
  jfloat d2 = a * IOSFloatArray_Get(p, i0) + b * IOSFloatArray_Get(p, i1) + c;
  if (d0 * d1 > 0.0 && d0 * d2 > 0.0) return YES;
  return NO;
}

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_isect2WithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_(IOSFloatArray *vt0, IOSFloatArray *vt1, IOSFloatArray *vt2, jfloat vv0, jfloat vv1, jfloat vv2, jfloat d0, jfloat d1, jfloat d2, IOSFloatArray *isectpoint0, IOSFloatArray *isectpoint1) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  jfloat tmp = d0 / (d0 - d1);
  jfloat isect0 = vv0 + (vv1 - vv0) * tmp;
  IOSFloatArray *diff = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(vt1, vt0);
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multInlineWithFloatArray_withFloat_(diff, tmp);
  isectpoint0 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_addWithFloatArray_withFloatArray_(diff, vt0);
  tmp = d0 / (d0 - d2);
  jfloat isect1 = vv0 + (vv2 - vv0) * tmp;
  diff = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(vt2, vt0);
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multInlineWithFloatArray_withFloat_(diff, tmp);
  isectpoint1 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_addWithFloatArray_withFloatArray_(vt0, diff);
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ isect0, isect1 } count:2];
}

IOSFloatArray *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_computeIntervalsIntersectionLineWithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_withJavaLangBoolean_(IOSFloatArray *t0, IOSFloatArray *t1, IOSFloatArray *t2, jfloat vv0, jfloat vv1, jfloat vv2, jfloat d0, jfloat d1, jfloat d2, jfloat d0d1, jfloat d0d2, IOSFloatArray *isectpoint0, IOSFloatArray *isectpoint1, JavaLangBoolean *coplanar) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  IOSFloatArray *isect = nil;
  if (d0d1 > 0.0f) isect = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_isect2WithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_(t2, t0, t1, vv2, vv0, vv1, d2, d0, d1, isectpoint0, isectpoint1);
  else if (d0d2 > 0.0f) isect = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_isect2WithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_(t1, t0, t2, vv1, vv0, vv2, d1, d0, d2, isectpoint0, isectpoint1);
  else if (d1 * d2 > 0.0f || d0 != 0.0f) isect = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_isect2WithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_(t0, t1, t2, vv0, vv1, vv2, d0, d1, d2, isectpoint0, isectpoint1);
  else if (d1 != 0.0f) isect = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_isect2WithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_(t1, t0, t2, vv1, vv0, vv2, d1, d0, d2, isectpoint0, isectpoint1);
  else if (d2 != 0.0f) isect = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_isect2WithFloatArray_withFloatArray_withFloatArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloatArray_withFloatArray_(t2, t0, t1, vv2, vv0, vv1, d2, d0, d1, isectpoint0, isectpoint1);
  else coplanar = JavaLangBoolean_valueOfWithBoolean_(YES);
  coplanar = JavaLangBoolean_valueOfWithBoolean_(NO);
  return isect;
}

jint OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_rayTriIntersectWithFloatArray_withFloatArray_withFloatArray_withJavaLangFloat_withFloatArray_(IOSFloatArray *p0, IOSFloatArray *p1, IOSFloatArray *t, JavaLangFloat *param, IOSFloatArray *intersection) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  IOSFloatArray *v0 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(t), 0), IOSFloatArray_Get(t, 1), IOSFloatArray_Get(t, 2) } count:3];
  IOSFloatArray *v1 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(t, 3), IOSFloatArray_Get(t, 4), IOSFloatArray_Get(t, 5) } count:3];
  IOSFloatArray *v2 = [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(t, 6), IOSFloatArray_Get(t, 7), IOSFloatArray_Get(t, 8) } count:3];
  IOSFloatArray *u = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(v1, v0);
  IOSFloatArray *v = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(v2, v0);
  IOSFloatArray *n = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_crossWithFloatArray_withFloatArray_(u, v);
  if (IOSFloatArray_Get(nil_chk(n), 0) == 0 && IOSFloatArray_Get(n, 1) == 0 && IOSFloatArray_Get(n, 2) == 0) return -1;
  IOSFloatArray *dir = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(p1, p0);
  IOSFloatArray *w0 = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(p0, v0);
  jfloat a = -OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n, w0);
  jfloat b = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n, dir);
  if (JavaLangMath_absWithFloat_(b) < OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON) {
    if (a == 0) return 2;
    else return 0;
  }
  jfloat r = a / b;
  if (r < 0.0) return 0;
  *IOSFloatArray_GetRef(nil_chk(intersection), 0) = IOSFloatArray_Get(nil_chk(p0), 0) + r * IOSFloatArray_Get(nil_chk(dir), 0);
  *IOSFloatArray_GetRef(intersection, 1) = IOSFloatArray_Get(p0, 1) + r * IOSFloatArray_Get(dir, 1);
  *IOSFloatArray_GetRef(intersection, 2) = IOSFloatArray_Get(p0, 2) + r * IOSFloatArray_Get(dir, 2);
  param = JavaLangFloat_valueOfWithFloat_(r);
  jfloat uu = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(u, u);
  jfloat uv = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(u, v);
  jfloat vv = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(v, v);
  IOSFloatArray *w = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(intersection, v0);
  jfloat wu = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(w, u);
  jfloat wv = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(w, v);
  jfloat D = uv * uv - uu * vv;
  jfloat s, d;
  s = (uv * wv - vv * wu) / D;
  if (s < 0.0 || s > 1.0) return 0;
  d = (uv * wu - uu * wv) / D;
  if (d < 0.0 || (s + d) > 1.0) return 0;
  return 1;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_rayBoxIntersectWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_(IOSFloatArray *box, IOSFloatArray *origin, IOSFloatArray *t, IOSFloatArray *entry_, IOSFloatArray *exit) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  IOSFloatArray *params = [IOSFloatArray arrayWithLength:6];
  IOSBooleanArray *intersect = [IOSBooleanArray arrayWithLength:6];
  IOSObjectArray *pts = [IOSObjectArray arrayWithLength:2 type:IOSClass_floatArray(1)];
  IOSFloatArray *p = [IOSFloatArray arrayWithLength:2];
  IOSObjectArray *pp = [IOSObjectArray arrayWithObjects:(id[]){ [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(nil_chk(box), 0), IOSFloatArray_Get(box, 2), IOSFloatArray_Get(box, 4) } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(box, 1), IOSFloatArray_Get(box, 2), IOSFloatArray_Get(box, 4) } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(box, 0), IOSFloatArray_Get(box, 2), IOSFloatArray_Get(box, 4) } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(box, 0), IOSFloatArray_Get(box, 3), IOSFloatArray_Get(box, 4) } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(box, 0), IOSFloatArray_Get(box, 2), IOSFloatArray_Get(box, 4) } count:3], [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(box, 0), IOSFloatArray_Get(box, 2), IOSFloatArray_Get(box, 5) } count:3] } count:6 type:IOSClass_floatArray(1)];
  for (jint i = 0; i < 6; i++) {
    IOSFloatArray *n = IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_AAB_NORMALS_), i);
    jfloat dot = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n, t);
    *IOSBooleanArray_GetRef(intersect, i) = (dot != 0);
    if (IOSBooleanArray_Get(intersect, i) == NO) continue;
    IOSFloatArray *diff = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_subWithFloatArray_withFloatArray_(IOSObjectArray_Get(pp, i), origin);
    *IOSFloatArray_GetRef(params, i) = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_dotWithFloatArray_withFloatArray_(n, diff) / dot;
  }
  jint j = 0;
  for (jint i = 0; i < 6; i++) {
    if (IOSBooleanArray_Get(intersect, i)) {
      IOSFloatArray *in = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_addWithFloatArray_withFloatArray_(origin, OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_multWithFloatArray_withFloat_(t, IOSFloatArray_Get(params, i)));
      if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointBoxIntersectWithFloatArray_withFloatArray_(IOSObjectArray_Get(pts, i), box)) {
        IOSObjectArray_Set(pts, j++, in);
        *IOSFloatArray_GetRef(p, j) = IOSFloatArray_Get(params, i);
      }
    }
  }
  if (j == 0) return NO;
  else if (j != 2) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"error"];
  else {
    jboolean rev = IOSFloatArray_Get(p, 0) > IOSFloatArray_Get(p, 1);
    entry_ = rev ? IOSObjectArray_Get(pts, 1) : IOSObjectArray_Get(pts, 0);
    exit = rev ? IOSObjectArray_Get(pts, 0) : IOSObjectArray_Get(pts, 1);
  }
  return YES;
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_pointBoxIntersectWithFloatArray_withFloatArray_(IOSFloatArray *bb, IOSFloatArray *pt) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  return IOSFloatArray_Get(nil_chk(pt), 0) > IOSFloatArray_Get(nil_chk(bb), 0) && IOSFloatArray_Get(pt, 0) < IOSFloatArray_Get(bb, 1) && IOSFloatArray_Get(pt, 1) > IOSFloatArray_Get(bb, 2) && IOSFloatArray_Get(pt, 1) < IOSFloatArray_Get(bb, 3) && IOSFloatArray_Get(pt, 2) > IOSFloatArray_Get(bb, 4) && IOSFloatArray_Get(pt, 3) < IOSFloatArray_Get(bb, 5);
}

jboolean OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentTriIntersectWithFloatArray_withFloatArray_withFloatArray_withFloatArray_(IOSFloatArray *p0, IOSFloatArray *p1, IOSFloatArray *t, IOSFloatArray *intersection) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_initialize();
  JavaLangFloat *param = [new_JavaLangFloat_initWithFloat_(-1) autorelease];
  if (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_rayTriIntersectWithFloatArray_withFloatArray_withFloatArray_withJavaLangFloat_withFloatArray_(p0, p1, t, param, intersection) == 1) return [param floatValue] > 0.0f && [param floatValue] < 1.0f;
  return NO;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_init(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision *self) {
  NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision *new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_init() {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision *self = [OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsCollision)
