//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/DoubleBuffer.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/BufferFactory.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/BufferOverflowException.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/BufferUnderflowException.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ByteOrder.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/DoubleBuffer.h"

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_putWithDoubleArray_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *self, IOSDoubleArray *src);

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer

+ (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)allocateWithInt:(jint)capacity {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_allocateWithInt_(capacity);
}

+ (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)wrapWithDoubleArray:(IOSDoubleArray *)array {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_wrapWithDoubleArray_(array);
}

+ (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)wrapWithDoubleArray:(IOSDoubleArray *)array
                                                                                withInt:(jint)start
                                                                                withInt:(jint)len {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_wrapWithDoubleArray_withInt_withInt_(array, start, len);
}

- (instancetype)initWithInt:(jint)capacity {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_initWithInt_(self, capacity);
  return self;
}

- (IOSDoubleArray *)array {
  return [self protectedArray];
}

- (jint)arrayOffset {
  return [self protectedArrayOffset];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)asReadOnlyBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)compact {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)compareToWithId:(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)otherBuffer {
  (void) check_class_cast(otherBuffer, [OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer class]);
  jint compareRemaining = ([self remaining] < [((OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *) nil_chk(otherBuffer)) remaining]) ? [self remaining] : [otherBuffer remaining];
  jint thisPos = position__;
  jint otherPos = otherBuffer->position__;
  jdouble thisDouble, otherDouble;
  while (compareRemaining > 0) {
    thisDouble = [self getWithInt:thisPos];
    otherDouble = [otherBuffer getWithInt:otherPos];
    if ((thisDouble != otherDouble) && ((thisDouble == thisDouble) || (otherDouble == otherDouble))) {
      return thisDouble < otherDouble ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return [self remaining] - [otherBuffer remaining];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)duplicate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer class]])) {
    return NO;
  }
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *otherBuffer = (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *) check_class_cast(other, [OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer class]);
  if ([self remaining] != [((OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *) nil_chk(otherBuffer)) remaining]) {
    return NO;
  }
  jint myPosition = position__;
  jint otherPosition = otherBuffer->position__;
  jboolean equalSoFar = YES;
  while (equalSoFar && (myPosition < limit__)) {
    equalSoFar = ([self getWithInt:myPosition++] == [otherBuffer getWithInt:otherPosition++]);
  }
  return equalSoFar;
}

- (jdouble)get {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)getWithDoubleArray:(IOSDoubleArray *)dest {
  return [self getWithDoubleArray:dest withInt:0 withInt:((IOSDoubleArray *) nil_chk(dest))->size_];
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)getWithDoubleArray:(IOSDoubleArray *)dest
                                                                               withInt:(jint)off
                                                                               withInt:(jint)len {
  jint length = ((IOSDoubleArray *) nil_chk(dest))->size_;
  if (off < 0 || len < 0 || (jlong) off + (jlong) len > length) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  if (len > [self remaining]) {
    @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferUnderflowException_init();
  }
  for (jint i = off; i < off + len; i++) {
    *IOSDoubleArray_GetRef(dest, i) = [self get];
  }
  return self;
}

- (jdouble)getWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasArray {
  return [self protectedHasArray];
}

- (jboolean)isDirect {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioByteOrder *)order {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSDoubleArray *)protectedArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)protectedArrayOffset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)protectedHasArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithDouble:(jdouble)d {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithDoubleArray:(IOSDoubleArray *)src {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_putWithDoubleArray_(self, src);
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithDoubleArray:(IOSDoubleArray *)src
                                                                               withInt:(jint)off
                                                                               withInt:(jint)len {
  jint length = ((IOSDoubleArray *) nil_chk(src))->size_;
  if (off < 0 || len < 0 || (jlong) off + (jlong) len > length) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  if (len > [self remaining]) {
    @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferOverflowException_init();
  }
  for (jint i = off; i < off + len; i++) {
    (void) [self putWithDouble:IOSDoubleArray_Get(src, i)];
  }
  return self;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer:(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)src {
  if (src == self) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if ([((OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *) nil_chk(src)) remaining] > [self remaining]) {
    @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferOverflowException_init();
  }
  IOSDoubleArray *doubles = [IOSDoubleArray newArrayWithLength:[src remaining]];
  (void) [src getWithDoubleArray:doubles];
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_putWithDoubleArray_(self, doubles);
  return self;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)putWithInt:(jint)index
                                                                    withDouble:(jdouble)d {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *)slice {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  (void) [buf appendWithNSString:[[self getClass] getName]];
  (void) [buf appendWithNSString:@", status: capacity="];
  (void) [buf appendWithInt:[self capacity]];
  (void) [buf appendWithNSString:@" position="];
  (void) [buf appendWithInt:[self position]];
  (void) [buf appendWithNSString:@" limit="];
  (void) [buf appendWithInt:[self limit]];
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "allocateWithInt:", "allocate", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x9, NULL, NULL },
    { "wrapWithDoubleArray:", "wrap", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x9, NULL, NULL },
    { "wrapWithDoubleArray:withInt:withInt:", "wrap", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x9, NULL, NULL },
    { "initWithInt:", "DoubleBuffer", NULL, 0x0, NULL, NULL },
    { "array", NULL, "[D", 0x11, NULL, NULL },
    { "arrayOffset", NULL, "I", 0x11, NULL, NULL },
    { "asReadOnlyBuffer", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x401, NULL, NULL },
    { "compact", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x401, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "duplicate", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x401, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "get", NULL, "D", 0x401, NULL, NULL },
    { "getWithDoubleArray:", "get", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "getWithDoubleArray:withInt:withInt:", "get", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "getWithInt:", "get", "D", 0x401, NULL, NULL },
    { "hasArray", NULL, "Z", 0x11, NULL, NULL },
    { "isDirect", NULL, "Z", 0x401, NULL, NULL },
    { "order", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.ByteOrder;", 0x401, NULL, NULL },
    { "protectedArray", NULL, "[D", 0x400, NULL, NULL },
    { "protectedArrayOffset", NULL, "I", 0x400, NULL, NULL },
    { "protectedHasArray", NULL, "Z", 0x400, NULL, NULL },
    { "putWithDouble:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x401, NULL, NULL },
    { "putWithDoubleArray:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x11, NULL, NULL },
    { "putWithDoubleArray:withInt:withInt:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "putWithOrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x1, NULL, NULL },
    { "putWithInt:withDouble:", "put", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x401, NULL, NULL },
    { "slice", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.DoubleBuffer;", 0x401, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer = { 2, "DoubleBuffer", "org.geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x401, 28, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Lorg/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer;Ljava/lang/Comparable<Lorg/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/DoubleBuffer;>;" };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer;
}

@end

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_allocateWithInt_(jint capacity) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_initialize();
  if (capacity < 0) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferFactory_newDoubleBufferWithInt_(capacity);
}

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_wrapWithDoubleArray_(IOSDoubleArray *array) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_initialize();
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_wrapWithDoubleArray_withInt_withInt_(array, 0, ((IOSDoubleArray *) nil_chk(array))->size_);
}

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_wrapWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint start, jint len) {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_initialize();
  jint length = ((IOSDoubleArray *) nil_chk(array))->size_;
  if (start < 0 || len < 0 || (jlong) start + (jlong) len > length) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *buf = OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferFactory_newDoubleBufferWithDoubleArray_(array);
  ((OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *) nil_chk(buf))->position__ = start;
  buf->limit__ = start + len;
  return buf;
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_initWithInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *self, jint capacity) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBuffer_initWithInt_(self, capacity);
}

OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer_putWithDoubleArray_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer *self, IOSDoubleArray *src) {
  return [self putWithDoubleArray:src withInt:0 withInt:((IOSDoubleArray *) nil_chk(src))->size_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioDoubleBuffer)
