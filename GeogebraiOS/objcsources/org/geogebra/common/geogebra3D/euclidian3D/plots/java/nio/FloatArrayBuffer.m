//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/FloatArrayBuffer.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/BufferUnderflowException.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ByteOrder.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/FloatArrayBuffer.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/FloatBuffer.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer

- (instancetype)initWithFloatArray:(IOSFloatArray *)array {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithFloatArray_(self, array);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithInt:(jint)capacity
             withFloatArray:(IOSFloatArray *)backingArray
                    withInt:(jint)offset {
  OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, capacity, backingArray, offset);
  return self;
}

- (jfloat)get {
  if (position__ == limit__) {
    @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferUnderflowException_init();
  }
  return IOSFloatArray_Get(nil_chk(backingArray_), offset_ + position__++);
}

- (jfloat)getWithInt:(jint)index {
  if (index < 0 || index >= limit__) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSFloatArray_Get(nil_chk(backingArray_), offset_ + index);
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)getWithFloatArray:(IOSFloatArray *)dest
                                                                             withInt:(jint)off
                                                                             withInt:(jint)len {
  jint length = ((IOSFloatArray *) nil_chk(dest))->size_;
  if (off < 0 || len < 0 || (jlong) off + (jlong) len > length) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  if (len > [self remaining]) {
    @throw new_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferUnderflowException_init();
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(backingArray_, offset_ + position__, dest, off, len);
  position__ += len;
  return self;
}

- (jboolean)isDirect {
  return NO;
}

- (OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioByteOrder *)order {
  return OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioByteOrder_nativeOrder();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFloatArray:", "FloatArrayBuffer", NULL, 0x0, NULL, NULL },
    { "initWithInt:", "FloatArrayBuffer", NULL, 0x0, NULL, NULL },
    { "initWithInt:withFloatArray:withInt:", "FloatArrayBuffer", NULL, 0x0, NULL, NULL },
    { "get", NULL, "F", 0x11, NULL, NULL },
    { "getWithInt:", "get", "F", 0x11, NULL, NULL },
    { "getWithFloatArray:withInt:withInt:", "get", "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x11, NULL, NULL },
    { "isDirect", NULL, "Z", 0x11, NULL, NULL },
    { "order", NULL, "Lorg.geogebra.common.geogebra3D.euclidian3D.plots.java.nio.ByteOrder;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "backingArray_", NULL, 0x14, "[F", NULL, NULL,  },
    { "offset_", NULL, 0x14, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer = { 2, "FloatArrayBuffer", "org.geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x400, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithFloatArray_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *self, IOSFloatArray *array) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, ((IOSFloatArray *) nil_chk(array))->size_, array, 0);
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *self, jint capacity) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, capacity, [IOSFloatArray newArrayWithLength:capacity], 0);
}

void OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_withFloatArray_withInt_(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *self, jint capacity, IOSFloatArray *backingArray, jint offset) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer_initWithInt_(self, capacity);
  self->backingArray_ = backingArray;
  self->offset_ = offset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer)
