//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/euclidian3D/HittingSphere.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "org/geogebra/common/geogebra3D/euclidian3D/HittingSphere.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"

@implementation OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere

- (instancetype)initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view {
  OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
  return self;
}

- (void)setHitsWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)pos
                                               withInt:(jint)threshold {
  origin_ = pos;
  direction_ = [((OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getHittingDirection];
  self->threshold_ = threshold;
  [self setHits];
}

- (jboolean)isSphere {
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "HittingSphere", NULL, 0x1, NULL, NULL },
    { "setHitsWithOrgGeogebraCommonKernelMatrixCoords:withInt:", "setHits", "V", 0x1, NULL, NULL },
    { "isSphere", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere = { 2, "HittingSphere", "org.geogebra.common.geogebra3D.euclidian3D", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere;
}

@end

void OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere *self, OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view) {
  (void) OrgGeogebraCommonGeogebra3DEuclidian3DHitting_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
}

OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere *new_OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(OrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view) {
  OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere *self = [OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere alloc];
  OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere_initWithOrgGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DEuclidian3DHittingSphere)
