//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/ConstructionDefaults3D.java
//


#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/geogebra3D/kernel3D/ConstructionDefaults3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoAxis3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedronNet.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSurfaceCartesian3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/plugin/GeoClass.h"

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPlane3D_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D, colPlane3D_, OrgGeogebraCommonAwtGColor *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPolyhedron_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D, colPolyhedron_, OrgGeogebraCommonAwtGColor *)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D)

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colCurveCartesian3D_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colIntersectionCurve_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colXAXIS_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colYAXIS_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colZAXIS_;

@implementation OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (void)createDefaultGeoElements {
  [super createDefaultGeoElements];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *intersectionCurve = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [intersectionCurve setLocalVariableLabelWithNSString:@"Intersection curve"];
  [intersectionCurve setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colIntersectionCurve_];
  [intersectionCurve setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA];
  [intersectionCurve setDefaultGeoTypeWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_INTERSECTION_CURVE];
  (void) [((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_INTERSECTION_CURVE) withId:intersectionCurve];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *axis = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [axis setLocalVariableLabelWithNSString:@"Axis3D"];
  [axis setDefaultGeoTypeWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_AXIS3D];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_AXIS3D) withId:axis];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [curve setLocalVariableLabelWithNSString:@"Curve3D"];
  [curve setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colCurveCartesian3D_];
  [curve setDefaultGeoTypeWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_CURVECARTESIAN3D];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_CURVECARTESIAN3D) withId:curve];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [plane setLocalVariableLabelWithNSString:@"Plane3D"];
  [plane setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPlane3D_];
  [plane setAlphaValueWithFloat:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D_ALPHA];
  [plane setLineThicknessWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D_GRID_THICKNESS];
  [plane setFadingWithFloat:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D_FADING];
  [plane setDefaultGeoTypeWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D) withId:plane];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *polyhedron = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [polyhedron setLocalVariableLabelWithNSString:@"Polyhedron"];
  [polyhedron setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPolyhedron_];
  [polyhedron setAlphaValueWithFloat:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_POLYHEDRON_ALPHA];
  [polyhedron setDefaultGeoTypeWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_POLYHEDRON];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_POLYHEDRON) withId:polyhedron];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *polyhedronNet = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [polyhedronNet setLocalVariableLabelWithNSString:@"Net"];
  [polyhedronNet setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPolyhedron_];
  [polyhedronNet setAlphaValueWithFloat:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_POLYHEDRON_ALPHA];
  [polyhedronNet setDefaultGeoTypeWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_NET];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_NET) withId:polyhedronNet];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [quadric setLocalVariableLabelWithNSString:@"Quadric"];
  [quadric setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_get_colQuadric_()];
  [quadric setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_QUADRIC_ALPHA];
  [quadric setDefaultGeoTypeWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_QUADRIC];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_QUADRIC) withId:quadric];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSurfaceCartesian3D *surface = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSurfaceCartesian3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [surface setLocalVariableLabelWithNSString:@"surface"];
  [surface setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_get_colQuadric_()];
  [surface setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_QUADRIC_ALPHA];
  [surface setDefaultGeoTypeWithInt:OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_SURFACECARTESIAN3D];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_SURFACECARTESIAN3D) withId:surface];
}

- (jint)getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_POINT3D:
    return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_POINT()];
    case OrgGeogebraCommonPluginGeoClass_ANGLE3D:
    return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_ANGLE()];
    case OrgGeogebraCommonPluginGeoClass_LINE3D:
    if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])) isIntersection]) {
      return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_INTERSECTION_CURVE;
    }
    return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_LINE()];
    case OrgGeogebraCommonPluginGeoClass_SEGMENT3D:
    if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) isIntersection]) {
      return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_INTERSECTION_CURVE;
    }
    return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_SEGMENT()];
    case OrgGeogebraCommonPluginGeoClass_RAY3D:
    if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D class])) isIntersection]) {
      return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_INTERSECTION_CURVE;
    }
    return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_RAY()];
    case OrgGeogebraCommonPluginGeoClass_AXIS3D:
    return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_AXIS3D;
    case OrgGeogebraCommonPluginGeoClass_VECTOR3D:
    return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_VECTOR()];
    case OrgGeogebraCommonPluginGeoClass_CONIC3D:
    case OrgGeogebraCommonPluginGeoClass_CONICSECTION:
    if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class])) isIntersection]) {
      return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_INTERSECTION_CURVE;
    }
    return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_CONIC()];
    case OrgGeogebraCommonPluginGeoClass_CURVE_CARTESIAN3D:
    return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_CURVECARTESIAN3D;
    case OrgGeogebraCommonPluginGeoClass_PLANE3D:
    return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D;
    case OrgGeogebraCommonPluginGeoClass_POLYGON3D:
    if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])) isIntersection]) {
      return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_INTERSECTION_CURVE;
    }
    return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_POLYGON()];
    case OrgGeogebraCommonPluginGeoClass_POLYHEDRON:
    case OrgGeogebraCommonPluginGeoClass_QUADRIC_LIMITED:
    return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_POLYHEDRON;
    case OrgGeogebraCommonPluginGeoClass_NET:
    return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_NET;
    case OrgGeogebraCommonPluginGeoClass_QUADRIC:
    case OrgGeogebraCommonPluginGeoClass_QUADRIC_PART:
    return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_QUADRIC;
    case OrgGeogebraCommonPluginGeoClass_SURFACECARTESIAN3D:
    return OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_SURFACECARTESIAN3D;
  }
  return [super getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)getXMLWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                              withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D]) [super getXMLWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:sb];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D class]) {
    OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colCurveCartesian3D_ = OrgGeogebraCommonKernelConstructionDefaults_get_colConic_();
    OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPlane3D_ = OrgGeogebraCommonAwtGColor_get_DARK_CYAN_();
    OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPolyhedron_ = OrgGeogebraCommonKernelConstructionDefaults_get_colPolygon_();
    OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colIntersectionCurve_ = OrgGeogebraCommonAwtGColor_get_ORANGE_();
    OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colXAXIS_ = OrgGeogebraCommonAwtGColor_get_RED_();
    OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colYAXIS_ = OrgGeogebraCommonAwtGColor_get_GREEN_();
    OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colZAXIS_ = OrgGeogebraCommonAwtGColor_get_BLUE_();
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "ConstructionDefaults3D", NULL, 0x1, NULL, NULL },
    { "createDefaultGeoElements", NULL, "V", 0x1, NULL, NULL },
    { "getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:", "getDefaultType", "I", 0x1, NULL, NULL },
    { "getXMLWithOrgGeogebraCommonKernelGeosGeoElement:withJavaLangStringBuilder:", "getXML", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INTERSECTION_CURVE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_INTERSECTION_CURVE },
    { "DEFAULT_AXIS3D_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_AXIS3D },
    { "DEFAULT_CURVECARTESIAN3D_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_CURVECARTESIAN3D },
    { "DEFAULT_PLANE3D_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D },
    { "DEFAULT_POLYHEDRON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_POLYHEDRON },
    { "DEFAULT_QUADRIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_QUADRIC },
    { "DEFAULT_FUNCTION_NVAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_FUNCTION_NVAR },
    { "DEFAULT_SURFACECARTESIAN3D_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_SURFACECARTESIAN3D },
    { "DEFAULT_NET_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_NET },
    { "colCurveCartesian3D_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colCurveCartesian3D_, NULL,  },
    { "colPlane3D_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPlane3D_, NULL,  },
    { "DEFAULT_PLANE3D_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D_ALPHA },
    { "DEFAULT_PLANE3D_GRID_THICKNESS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D_GRID_THICKNESS },
    { "DEFAULT_PLANE3D_FADING_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_PLANE3D_FADING },
    { "colPolyhedron_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colPolyhedron_, NULL,  },
    { "DEFAULT_POLYHEDRON_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_DEFAULT_POLYHEDRON_ALPHA },
    { "colIntersectionCurve_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colIntersectionCurve_, NULL,  },
    { "colXAXIS_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colXAXIS_, NULL,  },
    { "colYAXIS_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colYAXIS_, NULL,  },
    { "colZAXIS_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_colZAXIS_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D = { 2, "ConstructionDefaults3D", "org.geogebra.common.geogebra3D.kernel3D", NULL, 0x1, 4, methods, 20, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D *self, OrgGeogebraCommonKernelConstruction *cons) {
  (void) OrgGeogebraCommonKernelConstructionDefaults_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
}

OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D *new_OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D *self = [OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DConstructionDefaults3D)
