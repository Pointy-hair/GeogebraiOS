//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/Kernel3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/GeoGebraConstants.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/geogebra3D/io/MyXMLHandler3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Construction3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDispatcher3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoVectorPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/Manager3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/arithmetic/ExpressionNodeEvaluator3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/AlgebraProcessor3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CommandDispatcher3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoAngle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoAxis3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoClippingCube3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConicPart3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCoords4D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3DConstant.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSpace.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSurfaceCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/io/MyXMLHandler.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeEvaluator.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CommandDispatcher.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoRayND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DKernel3D () {
 @public
  jdouble zmin3_, zmax3_, zscale3_;
}

@end

@implementation OrgGeogebraCommonGeogebra3DKernel3DKernel3D

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonGeogebra3DKernel3DKernel3D_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoAxisND>)getXAxis3D {
  return [((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getXAxis3D];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoAxisND>)getYAxis3D {
  return [((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getYAxis3D];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *)getZAxis3D {
  return [((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getZAxis3D];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3DConstant *)getXOYPlane {
  return [((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getXOYPlane];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *)getClippingCube {
  return [((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getClippingCube];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSpace *)getSpace {
  return [((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getSpace];
}

- (NSString *)getModeTextWithInt:(jint)mode {
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF:
    return @"ViewInFrontOf";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
    return @"PlaneThreePoint";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PLANE:
    return @"Plane";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_PLANE:
    return @"OrthogonalPlane";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
    return @"ParallelPlane";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
    return @"Cube";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
    return @"Tetrahedron";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    return @"Prism";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    return @"Extrusion";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    return @"Conify";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    return @"Pyramid";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_NET:
    return @"Net";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
    return @"SpherePointRadius";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
    return @"Sphere2";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
    return @"Cone";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
    return @"Cylinder";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATEVIEW:
    return @"RotateView";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS_DIRECTION:
    return @"CirclePointRadiusDirection";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_AXIS_POINT:
    return @"CircleAxisPoint";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME:
    return @"Volume";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_PLANE:
    return @"MirrorAtPlane";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_AROUND_LINE:
    return @"RotateAroundLine";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_THREE_D:
    return @"OrthogonalThreeD";
    default:
    return [super getModeTextWithInt:mode];
  }
}

- (id<OrgGeogebraCommonKernelManager3DInterface>)newManager3DWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithOrgGeogebraCommonKernelKernel_(kernel) autorelease];
}

- (jboolean)isZvarAllowed {
  return NO;
}

- (void)newConstruction {
  OrgGeogebraCommonKernelKernel_setAndConsume_cons_(self, new_OrgGeogebraCommonGeogebra3DKernel3DConstruction3D_initWithOrgGeogebraCommonGeogebra3DKernel3DKernel3D_(self));
}

- (OrgGeogebraCommonIoMyXMLHandler *)newMyXMLHandlerWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                              withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)construction {
  return [new_OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(kernel, construction) autorelease];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *)newExpressionNodeEvaluatorWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return [new_OrgGeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D_initWithOrgGeogebraCommonMainLocalization_withOrgGeogebraCommonKernelKernel_([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLocalization], kernel) autorelease];
}

- (OrgGeogebraCommonKernelCommandsAlgebraProcessor *)newAlgebraProcessorWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCommandDispatcher *cd = [new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithOrgGeogebraCommonKernelKernel_(kernel) autorelease];
  return [new_OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(kernel, cd) autorelease];
}

- (JavaUtilTreeSet *)getPointSet {
  JavaUtilTreeSet *t3d = [((OrgGeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) getGeoSetLabelOrderWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_POINT3D()];
  JavaUtilTreeSet *t = [super getPointSet];
  [((JavaUtilTreeSet *) nil_chk(t)) addAllWithJavaUtilCollection:t3d];
  return t;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createGeoElementWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1
                                                                                      withNSString:(NSString *)type {
  switch ([((NSString *) nil_chk(type)) charAtWithInt:0]) {
    case 'a':
    if ([type isEqual:@"axis3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"angle3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'c':
    if ([type isEqual:@"conic3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"curvecartesian3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'l':
    if ([type isEqual:@"line3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'p':
    if ([type isEqual:@"point3d"]) {
      return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    else if ([type isEqual:@"polygon3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, nil) autorelease];
    else if ([type isEqual:@"plane3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"polyline3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, nil) autorelease];
    else if ([type isEqual:@"polyhedron"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'q':
    if ([type isEqual:@"quadric3d"] || [type isEqual:@"quadric"]) {
      return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    else if ([type isEqual:@"quadric3dpart"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"quadric3dlimited"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'r':
    if ([type isEqual:@"ray3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 's':
    if ([type isEqual:@"segment3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    if ([type isEqual:@"surfacecartesian3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSurfaceCartesian3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'v':
    if ([type isEqual:@"vector3d"]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
  }
  return [super createGeoElementWithOrgGeogebraCommonKernelConstruction:cons1 withNSString:type];
}

- (jboolean)handleCoordsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                        withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if ([geo isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]]) {
    @try {
      jdouble ox = JavaLangDouble_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"ox"]);
      jdouble oy = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"oy"]);
      jdouble oz = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"oz"]);
      jdouble ow = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"ow"]);
      jdouble vx = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"vx"]);
      jdouble vy = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"vy"]);
      jdouble vz = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"vz"]);
      jdouble vw = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"vw"]);
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithOrgGeogebraCommonKernelMatrixCoords:[new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(ox, oy, oz, ow) autorelease] withOrgGeogebraCommonKernelMatrixCoords:[new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(vx, vy, vz, vw) autorelease]];
      return YES;
    }
    @catch (JavaLangException *e) {
      return NO;
    }
  }
  if (!([OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCoords4D_class_() isInstance:geo])) {
    return [super handleCoordsWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaUtilLinkedHashMap:attrs];
  }
  @try {
    jdouble x = JavaLangDouble_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
    jdouble y = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"y"]);
    jdouble z = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"z"]);
    jdouble w = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"w"]);
    [((id<OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCoords4D>) nil_chk(((id<OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCoords4D>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCoords4D))))) setCoordsWithDouble:x withDouble:y withDouble:z withDouble:w];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)getDefaultPlane {
  return [self getXOYPlane];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLineWithNSString:(NSString *)label
                             withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                              withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)l
                         withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) OrthogonalLine3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:P withOrgGeogebraCommonKernelKernelNDGeoDirectionND:l withOrgGeogebraCommonKernelKernelNDGeoDirectionND:direction];
}

- (NSString *)getXMLFileFormat {
  return OrgGeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_();
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy3DWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *v;
    OrgGeogebraCommonKernelGeosGeoElement *ret;
    switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_POINT:
      return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelKernelNDGeoPointND_((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))) autorelease];
      case OrgGeogebraCommonPluginGeoClass_VECTOR:
      v = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [v setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      return v;
      case OrgGeogebraCommonPluginGeoClass_LINE:
      ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [ret setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case OrgGeogebraCommonPluginGeoClass_SEGMENT:
      ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithOrgGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [ret setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case OrgGeogebraCommonPluginGeoClass_RAY:
      ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [ret setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case OrgGeogebraCommonPluginGeoClass_POLYGON:
      ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithOrgGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [ret setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case OrgGeogebraCommonPluginGeoClass_CONIC:
      return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithOrgGeogebraCommonKernelKernelNDGeoConicND_((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [OrgGeogebraCommonKernelKernelNDGeoConicND class])) autorelease];
      case OrgGeogebraCommonPluginGeoClass_CONICPART:
      return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D_initWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))) autorelease];
      default:
      return [super copy3DWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternal3DWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                       withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *poly;
    OrgGeogebraCommonKernelGeosGeoElement *ret;
    switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_POLYGON:
      poly = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil) autorelease];
      [((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolygon class])) copyInternalWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoPolygon:poly];
      return poly;
      case OrgGeogebraCommonPluginGeoClass_CONICPART:
      return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D_initWithOrgGeogebraCommonKernelKernelNDGeoConicPartND_((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))) autorelease];
      case OrgGeogebraCommonPluginGeoClass_RAY:
      ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_([geo getConstruction], [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelKernelNDGeoPointND_([((id<OrgGeogebraCommonKernelKernelNDGeoRayND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoRayND))) getStartPoint]) autorelease]) autorelease];
      [ret setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case OrgGeogebraCommonPluginGeoClass_SEGMENT:
      ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_([geo getConstruction], [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelKernelNDGeoPointND_([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND))) getStartPoint]) autorelease], [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelKernelNDGeoPointND_([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND))) getEndPoint]) autorelease]) autorelease];
      [ret setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      default:
      return [super copyInternal3DWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoRayND>)RayNDWithNSString:(NSString *)label
                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) Ray3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:P withOrgGeogebraCommonKernelKernelNDGeoPointND:Q];
  return [super RayWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)SegmentNDWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) Segment3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:P withOrgGeogebraCommonKernelKernelNDGeoPointND:Q];
  return [super SegmentWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

- (IOSObjectArray *)PolygonNDWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  jboolean is3D = NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_ && !is3D; i++) if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(P, i), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) is3D = YES;
  if (is3D) return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) Polygon3DWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:P];
  return [super PolygonWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:P];
}

- (IOSObjectArray *)PolyLineNDWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  jboolean is3D = NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_ && !is3D; i++) if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(P, i), [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) is3D = YES;
  if (is3D) return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) PolyLine3DWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:P];
  return [super PolyLineWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:P withBoolean:NO];
}

- (OrgGeogebraCommonKernelAlgosAlgoDispatcher *)newAlgoDispatcherWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  return [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
}

- (jdouble)getZmaxWithInt:(jint)i {
  if (i == 2) {
    return zmax3_;
  }
  return [super getZmaxWithInt:i];
}

- (jdouble)getZminWithInt:(jint)i {
  if (i == 2) {
    return zmin3_;
  }
  return [super getZminWithInt:i];
}

- (jdouble)getZscaleWithInt:(jint)i {
  if (i == 2) {
    return zscale3_;
  }
  return [super getZscaleWithInt:i];
}

- (void)setEuclidianView3DBoundsWithInt:(jint)view
                             withDouble:(jdouble)xmin
                             withDouble:(jdouble)xmax
                             withDouble:(jdouble)ymin
                             withDouble:(jdouble)ymax
                             withDouble:(jdouble)zmin
                             withDouble:(jdouble)zmax
                             withDouble:(jdouble)xscale
                             withDouble:(jdouble)yscale
                             withDouble:(jdouble)zscale {
  if (3 > ((IOSDoubleArray *) nil_chk(self->xmin_))->size_) {
    OrgGeogebraCommonKernelKernel_set_xmin_(self, [self prolongWithDoubleArray:self->xmin_ withInt:3]);
    OrgGeogebraCommonKernelKernel_set_xmax_(self, [self prolongWithDoubleArray:self->xmin_ withInt:3]);
    OrgGeogebraCommonKernelKernel_set_ymin_(self, [self prolongWithDoubleArray:self->ymin_ withInt:3]);
    OrgGeogebraCommonKernelKernel_set_ymax_(self, [self prolongWithDoubleArray:self->ymax_ withInt:3]);
    OrgGeogebraCommonKernelKernel_set_xscale_(self, [self prolongWithDoubleArray:self->xscale_ withInt:3]);
    OrgGeogebraCommonKernelKernel_set_yscale_(self, [self prolongWithDoubleArray:self->yscale_ withInt:3]);
  }
  *IOSDoubleArray_GetRef(nil_chk(self->xmin_), 2) = xmin;
  *IOSDoubleArray_GetRef(nil_chk(self->xmax_), 2) = xmax;
  *IOSDoubleArray_GetRef(nil_chk(self->ymin_), 2) = ymin;
  *IOSDoubleArray_GetRef(nil_chk(self->ymax_), 2) = ymax;
  self->zmin3_ = zmin;
  self->zmax3_ = zmax;
  *IOSDoubleArray_GetRef(nil_chk(self->xscale_), 2) = xscale;
  *IOSDoubleArray_GetRef(nil_chk(self->yscale_), 2) = yscale;
  self->zscale3_ = zscale;
  [self notifyEuclidianViewCE];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)RigidPolygonPointOnCircleWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)circle
                                                                          withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point1 {
  if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle)) isGeoElement3D]) {
    return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) Point3DWithNSString:nil withOrgGeogebraCommonKernelPath:circle withDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point1)) getInhomX] withDouble:[point1 getInhomY] withDouble:[point1 getInhomZ] withBoolean:NO withBoolean:YES];
  }
  return [super RigidPolygonPointOnCircleWithOrgGeogebraCommonKernelKernelNDGeoConicND:circle withOrgGeogebraCommonKernelKernelNDGeoPointND:point1];
}

- (void)RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                 withBoolean:(jboolean)is3D {
  if (is3D) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"],xOyPlane]"];
  }
  else {
    [super RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:sb withBoolean:is3D];
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)wrapInVectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pt {
  if ([pt isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVectorPoint3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVectorPoint3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, pt) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
    return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getVector], [OrgGeogebraCommonKernelGeosGeoElement class]);
  }
  OrgGeogebraCommonKernelAlgosAlgoVectorPoint *algo = [new_OrgGeogebraCommonKernelAlgosAlgoVectorPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, pt) autorelease];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getVector], [OrgGeogebraCommonKernelGeosGeoElement class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "Kernel3D", NULL, 0x1, NULL, NULL },
    { "getXAxis3D", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoAxisND;", 0x1, NULL, NULL },
    { "getYAxis3D", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoAxisND;", 0x1, NULL, NULL },
    { "getZAxis3D", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoAxis3D;", 0x1, NULL, NULL },
    { "getXOYPlane", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3DConstant;", 0x1, NULL, NULL },
    { "getClippingCube", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoClippingCube3D;", 0x1, NULL, NULL },
    { "getSpace", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoSpace;", 0x1, NULL, NULL },
    { "getModeTextWithInt:", "getModeText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "newManager3DWithOrgGeogebraCommonKernelKernel:", "newManager3D", "Lorg.geogebra.common.kernel.Manager3DInterface;", 0x1, NULL, NULL },
    { "isZvarAllowed", NULL, "Z", 0x1, NULL, NULL },
    { "newConstruction", NULL, "V", 0x4, NULL, NULL },
    { "newMyXMLHandlerWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelConstruction:", "newMyXMLHandler", "Lorg.geogebra.common.io.MyXMLHandler;", 0x1, NULL, NULL },
    { "newExpressionNodeEvaluatorWithOrgGeogebraCommonKernelKernel:", "newExpressionNodeEvaluator", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNodeEvaluator;", 0x1, NULL, NULL },
    { "newAlgebraProcessorWithOrgGeogebraCommonKernelKernel:", "newAlgebraProcessor", "Lorg.geogebra.common.kernel.commands.AlgebraProcessor;", 0x1, NULL, NULL },
    { "getPointSet", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "createGeoElementWithOrgGeogebraCommonKernelConstruction:withNSString:", "createGeoElement", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "handleCoordsWithOrgGeogebraCommonKernelGeosGeoElement:withJavaUtilLinkedHashMap:", "handleCoords", "Z", 0x1, NULL, NULL },
    { "getDefaultPlane", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x1, NULL, NULL },
    { "OrthogonalLineWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "OrthogonalLine", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "getXMLFileFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "copy3DWithOrgGeogebraCommonKernelGeosGeoElement:", "copy3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyInternal3DWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:", "copyInternal3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "RayNDWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "RayND", "Lorg.geogebra.common.kernel.kernelND.GeoRayND;", 0x11, NULL, NULL },
    { "SegmentNDWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "SegmentND", "Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x11, NULL, NULL },
    { "PolygonNDWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "PolygonND", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyLineNDWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "PolyLineND", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "newAlgoDispatcherWithOrgGeogebraCommonKernelConstruction:", "newAlgoDispatcher", "Lorg.geogebra.common.kernel.algos.AlgoDispatcher;", 0x4, NULL, NULL },
    { "getZmaxWithInt:", "getZmax", "D", 0x1, NULL, NULL },
    { "getZminWithInt:", "getZmin", "D", 0x1, NULL, NULL },
    { "getZscaleWithInt:", "getZscale", "D", 0x1, NULL, NULL },
    { "setEuclidianView3DBoundsWithInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setEuclidianView3DBounds", "V", 0x11, NULL, NULL },
    { "RigidPolygonPointOnCircleWithOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "RigidPolygonPointOnCircle", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:withBoolean:", "RigidPolygonAddEndOfCommand", "V", 0x4, NULL, NULL },
    { "wrapInVectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "wrapInVector", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "zmin3_", NULL, 0x2, "D", NULL, NULL,  },
    { "zmax3_", NULL, 0x2, "D", NULL, NULL,  },
    { "zscale3_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DKernel3D = { 2, "Kernel3D", "org.geogebra.common.geogebra3D.kernel3D", NULL, 0x1, 34, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DKernel3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DKernel3D_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonGeogebra3DKernel3DKernel3D *self, OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonKernelKernel_initWithOrgGeogebraCommonMainApp_(self, app);
}

OrgGeogebraCommonGeogebra3DKernel3DKernel3D *new_OrgGeogebraCommonGeogebra3DKernel3DKernel3D_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonGeogebra3DKernel3DKernel3D *self = [OrgGeogebraCommonGeogebra3DKernel3DKernel3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DKernel3D_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DKernel3D)
