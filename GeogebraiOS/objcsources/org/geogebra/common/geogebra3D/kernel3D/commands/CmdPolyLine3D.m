//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/commands/CmdPolyLine3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPolyLine3D.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/commands/CmdPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)pointList {
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(pointList)) size]; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([pointList getWithInt:i])) isGeoElement3D]) {
      return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) PolyLine3DWithNSStringArray:labels withOrgGeogebraCommonKernelGeosGeoList:pointList];
    }
  }
  return [super PolyLineWithNSStringArray:labels withOrgGeogebraCommonKernelGeosGeoList:pointList];
}

- (jboolean)checkIs3DWithBoolean:(jboolean)is3D
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (is3D) {
    return YES;
  }
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D];
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                  withBoolean:(jboolean)penStroke
                                  withBoolean:(jboolean)is3D {
  if (is3D) {
    return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) PolyLine3DWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points];
  }
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) PolyLineWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points withBoolean:penStroke];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdPolyLine3D", NULL, 0x1, NULL, NULL },
    { "PolyLineWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoList:", "PolyLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "checkIs3DWithBoolean:withOrgGeogebraCommonKernelGeosGeoElement:", "checkIs3D", "Z", 0x4, NULL, NULL },
    { "PolyLineWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:withBoolean:", "PolyLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D = { 2, "CmdPolyLine3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCmdPolyLine_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D)
