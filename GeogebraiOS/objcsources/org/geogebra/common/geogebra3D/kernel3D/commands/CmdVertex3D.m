//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/commands/CmdVertex3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDrawingPadCorner3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoVertexConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoVertexPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdVertex3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoVertexConic.h"
#include "org/geogebra/common/kernel/algos/AlgoVertexPolygon.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/CmdVertex.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)cornerOfDrawingPadWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)number
                               withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)ev {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getLoadingMode] && ev != nil && OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_is3DWithOrgGeogebraCommonKernelArithmeticNumberValue_(ev)) {
    return [self cornerOfDrawingPad3DWithNSString:label withOrgGeogebraCommonKernelArithmeticNumberValue:number withOrgGeogebraCommonKernelArithmeticNumberValue:ev];
  }
  return [super cornerOfDrawingPadWithNSString:label withOrgGeogebraCommonKernelArithmeticNumberValue:number withOrgGeogebraCommonKernelArithmeticNumberValue:ev];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)cornerOfDrawingPad3DWithNSString:(NSString *)label
                                 withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)number
                                 withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)ev {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D *algo = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, number, ev);
  return [algo getCorner];
}

- (OrgGeogebraCommonKernelAlgosAlgoVertexPolygon *)newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                                  withNSString:(NSString *)label
                                                                        withOrgGeogebraCommonKernelGeosGeoPoly:(id<OrgGeogebraCommonKernelGeosGeoPoly>)p
                                                                 withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)v {
  if ([((id<OrgGeogebraCommonKernelGeosGeoPoly>) nil_chk(p)) isGeoElement3D]) {
    return new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVertexPolygon3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoly_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, label, p, v);
  }
  return [super newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:cons withNSString:label withOrgGeogebraCommonKernelGeosGeoPoly:p withOrgGeogebraCommonKernelGeosGeoNumberValue:v];
}

- (OrgGeogebraCommonKernelAlgosAlgoVertexConic *)newAlgoVertexConicWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                         withNSStringArray:(IOSObjectArray *)labels
                                                             withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isGeoElement3D]) {
    return new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVertexConic3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons, labels, conic);
  }
  return [super newAlgoVertexConicWithOrgGeogebraCommonKernelConstruction:cons withNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoConicND:conic];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdVertex3D", NULL, 0x1, NULL, NULL },
    { "cornerOfDrawingPadWithNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "cornerOfDrawingPad", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "cornerOfDrawingPad3DWithNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "cornerOfDrawingPad3D", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoly:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "newAlgoVertexPolygon", "Lorg.geogebra.common.kernel.algos.AlgoVertexPolygon;", 0x4, NULL, NULL },
    { "newAlgoVertexConicWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "newAlgoVertexConic", "Lorg.geogebra.common.kernel.algos.AlgoVertexConic;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D = { 2, "CmdVertex3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCmdVertex_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D)
