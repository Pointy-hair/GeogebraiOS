//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/commands/CmdAxes3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAxes3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdAxes3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/advanced/CmdAxes.h"
#include "org/geogebra/common/kernel/algos/AlgoAxesQuadricND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgoAxesQuadricND *)axesConicWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1
                                                                                  withNSStringArray:(IOSObjectArray *)labels
                                                    withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)c {
  if ([((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(c)) isGeoElement3D]) {
    return new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons1, labels, c);
  }
  return [super axesConicWithOrgGeogebraCommonKernelConstruction:cons1 withNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoQuadricND:c];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdAxes3D", NULL, 0x1, NULL, NULL },
    { "axesConicWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "axesConic", "Lorg.geogebra.common.kernel.algos.AlgoAxesQuadricND;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D = { 2, "CmdAxes3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelAdvancedCmdAxes_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D)
