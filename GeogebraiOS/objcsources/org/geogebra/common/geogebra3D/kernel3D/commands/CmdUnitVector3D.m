//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/commands/CmdUnitVector3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdUnitVector3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoUnitVector.h"
#include "org/geogebra/common/kernel/algos/CmdUnitVector.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processNotLineNotVectorWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                              withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)arg {
  if ([OrgGeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:arg]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], (id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(arg, @protocol(OrgGeogebraCommonKernelKernelNDGeoDirectionND))) autorelease];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getVector], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super processNotLineNotVectorWithOrgGeogebraCommonKernelArithmeticCommand:c withOrgGeogebraCommonKernelGeosGeoElement:arg];
}

- (OrgGeogebraCommonKernelAlgosAlgoUnitVector *)algoWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) isGeoElement3D]) {
    return [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, line) autorelease];
  }
  return [super algoWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoLineND:line];
}

- (OrgGeogebraCommonKernelAlgosAlgoUnitVector *)algoWithNSString:(NSString *)label
                  withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) isGeoElement3D]) {
    return [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, v) autorelease];
  }
  return [super algoWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoVectorND:v];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdUnitVector3D", NULL, 0x1, NULL, NULL },
    { "processNotLineNotVectorWithOrgGeogebraCommonKernelArithmeticCommand:withOrgGeogebraCommonKernelGeosGeoElement:", "processNotLineNotVector", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, "Lorg.geogebra.common.main.MyError;", NULL },
    { "algoWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "algo", "Lorg.geogebra.common.kernel.algos.AlgoUnitVector;", 0x4, NULL, NULL },
    { "algoWithNSString:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "algo", "Lorg.geogebra.common.kernel.algos.AlgoUnitVector;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D = { 2, "CmdUnitVector3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelAlgosCmdUnitVector_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D)
