//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/commands/CmdAngle3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdAngle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CmdAngle.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                                withInt:(jint)n
                                                       withBooleanArray:(IOSBooleanArray *)ok {
  if (n == 4) {
    IOSObjectArray *arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 3) = ([OrgGeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 3)]))) {
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoElement3D] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoElement3D] && IOSObjectArray_Get(arg, 3) == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getXOYPlane]) {
        return [self angleWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)) withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)) withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
      }
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)) withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)) withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)) withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 3), @protocol(OrgGeogebraCommonKernelKernelNDGeoDirectionND))] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
  }
  return [super processWithOrgGeogebraCommonKernelArithmeticCommand:c withInt:n withBooleanArray:ok];
}

- (IOSObjectArray *)process2WithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                          withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                        withBooleanArray:(IOSBooleanArray *)ok {
  if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane]))) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  if ((*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane]))) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane]))) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon])) && (*IOSBooleanArray_GetRef(ok, 1) = ([OrgGeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoElement3D] && IOSObjectArray_Get(arg, 1) == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getXOYPlane]) {
      return [super angleWithNSStringArray:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels] withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoPolygon class])];
    }
    IOSObjectArray *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angles3DWithNSStringArray:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels] withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoPolygon class]) withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoDirectionND))];
    return ret;
  }
  return [super process2WithOrgGeogebraCommonKernelArithmeticCommand:c withOrgGeogebraCommonKernelGeosGeoElementArray:arg withBooleanArray:ok];
}

- (IOSObjectArray *)process3WithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                          withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                        withBooleanArray:(IOSBooleanArray *)ok {
  if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoElement3D] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D] && IOSObjectArray_Get(arg, 2) == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getXOYPlane]) {
      return [super angleWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND))];
    }
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelKernelNDGeoDirectionND))] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoVector])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoVector])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoElement3D] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D] && IOSObjectArray_Get(arg, 2) == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getXOYPlane]) {
      return [self angleWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND)) withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND))];
    }
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND)) withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND)) withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelKernelNDGeoDirectionND))] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super process3WithOrgGeogebraCommonKernelArithmeticCommand:c withOrgGeogebraCommonKernelGeosGeoElementArray:arg withBooleanArray:ok];
}

- (IOSObjectArray *)angleWithNSString:(NSString *)label
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p1
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p2
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p3 {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p3)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:p1 withOrgGeogebraCommonKernelKernelNDGeoPointND:p2 withOrgGeogebraCommonKernelKernelNDGeoPointND:p3] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super angleWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:p1 withOrgGeogebraCommonKernelKernelNDGeoPointND:p2 withOrgGeogebraCommonKernelKernelNDGeoPointND:p3];
}

- (IOSObjectArray *)angleWithNSString:(NSString *)label
withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)h {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(h)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoLineND:g withOrgGeogebraCommonKernelKernelNDGeoLineND:h] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super angleWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoLineND:g withOrgGeogebraCommonKernelKernelNDGeoLineND:h];
}

- (IOSObjectArray *)angleWithNSString:(NSString *)label
withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v
withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)w {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(w)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoVectorND:v withOrgGeogebraCommonKernelKernelNDGeoVectorND:w] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super angleWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoVectorND:v withOrgGeogebraCommonKernelKernelNDGeoVectorND:w];
}

- (IOSObjectArray *)anglePointOrVectorWithNSString:(NSString *)label
         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)v {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(v)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D *algo;
    if ([v isGeoVector]) {
      algo = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast(v, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class]));
    }
    else {
      algo = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(v, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]));
    }
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D *) nil_chk(algo)) getAngle] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super anglePointOrVectorWithNSString:label withOrgGeogebraCommonKernelGeosGeoElement:v];
}

- (IOSObjectArray *)angleWithNSString:(NSString *)label
withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D *algo = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleConic3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast(c, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class]));
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [algo getAngle] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super angleWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)angleWithNSStringArray:(IOSObjectArray *)labels
 withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p {
  if ([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isGeoElement3D]) {
    return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angles3DWithNSStringArray:labels withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])];
  }
  return [super angleWithNSStringArray:labels withOrgGeogebraCommonKernelGeosGeoPolygon:p];
}

- (IOSObjectArray *)angleWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p1
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p2
withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)a {
  id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> direction = [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getApplication])) getActiveEuclidianView])) getDirection];
  if (direction == [kernelA_ getSpace]) {
    return [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  if (direction == [kernelA_ getXOYPlane]) {
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D]) {
      return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([kernelA_ getManager3D])) AngleWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointND:p1 withOrgGeogebraCommonKernelKernelNDGeoPointND:p2 withOrgGeogebraCommonKernelGeosGeoNumberValue:a withOrgGeogebraCommonKernelKernelNDGeoDirectionND:[kernelA_ getXOYPlane] withBoolean:YES];
    }
    return [super angleWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointND:p1 withOrgGeogebraCommonKernelKernelNDGeoPointND:p2 withOrgGeogebraCommonKernelGeosGeoNumberValue:a];
  }
  return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([kernelA_ getManager3D])) AngleWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointND:p1 withOrgGeogebraCommonKernelKernelNDGeoPointND:p2 withOrgGeogebraCommonKernelGeosGeoNumberValue:a withOrgGeogebraCommonKernelKernelNDGeoDirectionND:direction withBoolean:YES];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdAngle3D", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:withInt:withBooleanArray:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, "Lorg.geogebra.common.main.MyError;", NULL },
    { "process2WithOrgGeogebraCommonKernelArithmeticCommand:withOrgGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "process2", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "process3WithOrgGeogebraCommonKernelArithmeticCommand:withOrgGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "process3", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "anglePointOrVectorWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:", "anglePointOrVector", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:", "angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D = { 2, "CmdAngle3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCmdAngle_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D)
