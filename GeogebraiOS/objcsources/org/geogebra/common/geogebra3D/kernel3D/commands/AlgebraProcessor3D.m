//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/commands/AlgebraProcessor3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCurveCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/AlgebraProcessor3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVec4D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoCurveCartesian.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CommandDispatcher.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D ()

- (IOSObjectArray *)processQuadricWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ;

- (IOSObjectArray *)processPlaneWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ;

@end

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processQuadricWithOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processPlaneWithOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, OrgGeogebraCommonKernelArithmeticEquation *equ);

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
 withOrgGeogebraCommonKernelCommandsCommandDispatcher:(OrgGeogebraCommonKernelCommandsCommandDispatcher *)cd {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, cd);
  return self;
}

- (IOSObjectArray *)processPointVector3DWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                       withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  NSString *label = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  IOSDoubleArray *p = [((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(evaluate, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue))))) getPointAsDouble];
  jint mode = [((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(evaluate, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue))))) getMode];
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  jboolean isIndependent = [n isConstant];
  if (label != nil) {
    if (!([n isForcedPoint] || [n isForcedVector])) {
      if (JavaLangCharacter_isLowerCaseWithChar_([label charAtWithInt:0])) [n setForceVector];
      else [n setForcePoint];
    }
  }
  jboolean isVector = [n shouldEvaluateToGeoVector];
  if (isIndependent) {
    jdouble x = IOSDoubleArray_Get(nil_chk(p), 0);
    jdouble y = IOSDoubleArray_Get(p, 1);
    jdouble z = IOSDoubleArray_Get(p, 2);
    if (isVector) (void) IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Vector3DWithNSString:label withDouble:x withDouble:y withDouble:z]);
    else (void) IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Point3DWithNSString:label withDouble:x withDouble:y withDouble:z withBoolean:NO]);
  }
  else {
    if (isVector) (void) IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) DependentVector3DWithNSString:label withOrgGeogebraCommonKernelArithmeticExpressionNode:n]);
    else (void) IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) DependentPoint3DWithNSString:label withOrgGeogebraCommonKernelArithmeticExpressionNode:n]);
  }
  if (mode == OrgGeogebraCommonKernelKernel_COORD_SPHERICAL) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVec4D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVec4D *) check_class_cast(IOSObjectArray_Get(ret, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVec4D class])))) setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_SPHERICAL];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  }
  return ret;
}

- (void)checkNoTermsInZWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  if ([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) containsZ]) {
    switch ([equ degree]) {
      case 1:
      [equ setForcePlane];
      break;
      case 2:
      [equ setForceQuadric];
      break;
    }
  }
}

- (IOSObjectArray *)processLineWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  if ([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) isForcedLine]) return [super processLineWithOrgGeogebraCommonKernelArithmeticEquation:equ];
  if ([equ isForcedPlane] || [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isParsingFor3D]) {
    return OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processPlaneWithOrgGeogebraCommonKernelArithmeticEquation_(self, equ);
  }
  return [super processLineWithOrgGeogebraCommonKernelArithmeticEquation:equ];
}

- (IOSObjectArray *)processConicWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  if ([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) isForcedConic]) return [super processConicWithOrgGeogebraCommonKernelArithmeticEquation:equ];
  if ([equ isForcedQuadric] || [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getActiveEuclidianView])) isEuclidianView3D]) {
    return OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processQuadricWithOrgGeogebraCommonKernelArithmeticEquation_(self, equ);
  }
  return [super processConicWithOrgGeogebraCommonKernelArithmeticEquation:equ];
}

- (IOSObjectArray *)processQuadricWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  return OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processQuadricWithOrgGeogebraCommonKernelArithmeticEquation_(self, equ);
}

- (IOSObjectArray *)processPlaneWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  return OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processPlaneWithOrgGeogebraCommonKernelArithmeticEquation_(self, equ);
}

- (IOSObjectArray *)processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp
                                            withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                           withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                    withNSString:(NSString *)label {
  if ([OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:ev]) {
    OrgGeogebraCommonKernelGeosGeoNumeric *loc = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons_);
    [loc setLocalVariableLabelWithNSString:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) getSetVarString]];
    (void) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv withOrgGeogebraCommonKernelArithmeticExpressionValue:loc];
    OrgGeogebraCommonKernelArithmeticExpressionNode *cx = [self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withInt:0];
    OrgGeogebraCommonKernelArithmeticExpressionNode *cy = [self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withInt:1];
    OrgGeogebraCommonKernelArithmeticExpressionNode *cz = [self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withInt:2];
    IOSObjectArray *coefX = [IOSObjectArray newArrayWithLength:5 type:OrgGeogebraCommonKernelArithmeticExpressionValue_class_()];
    IOSObjectArray *coefY = [IOSObjectArray newArrayWithLength:5 type:OrgGeogebraCommonKernelArithmeticExpressionValue_class_()];
    IOSObjectArray *coefZ = [IOSObjectArray newArrayWithLength:5 type:OrgGeogebraCommonKernelArithmeticExpressionValue_class_()];
    for (jint i = 0; i < coefX->size_; i++) {
      (void) IOSObjectArray_Set(coefX, i, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0));
      (void) IOSObjectArray_Set(coefY, i, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0));
      (void) IOSObjectArray_Set(coefZ, i, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0));
    }
    jint degX = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:cx withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1) withOrgGeogebraCommonKernelGeosGeoNumeric:loc];
    jint degY = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:cy withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefY withOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1) withOrgGeogebraCommonKernelGeosGeoNumeric:loc];
    jint degZ = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:cz withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefZ withOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1) withOrgGeogebraCommonKernelGeosGeoNumeric:loc];
    if ((degX >= 0 && degY >= 0 && degZ >= 0) && (degX < 2 && degY < 2 && degZ < 2)) {
      OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *line = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 0))) isConstant] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 0))) isConstant] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefZ, 0))) isConstant] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) isConstant] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 1))) isConstant] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefZ, 1))) isConstant]) {
        OrgGeogebraCommonKernelMatrixCoords *start = new_OrgGeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray newArrayWithDoubles:(jdouble[]){ [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 0))) evaluateDouble], [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 0))) evaluateDouble], [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefZ, 0))) evaluateDouble] } count:3]);
        OrgGeogebraCommonKernelMatrixCoords *v = new_OrgGeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray newArrayWithDoubles:(jdouble[]){ [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) evaluateDouble], [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 1))) evaluateDouble], [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefZ, 1))) evaluateDouble] } count:3]);
        [line setCoordWithOrgGeogebraCommonKernelMatrixCoords:start withOrgGeogebraCommonKernelMatrixCoords:v];
        [line setParameterWithNSString:[fv getSetVarString]];
        [line setLabelWithNSString:label];
      }
      else {
        line = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Line3DWithNSString:label withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefY withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefZ], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]);
      }
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(line)) setParameterWithNSString:[fv getSetVarString]];
      return [IOSObjectArray newArrayWithObjects:(id[]){ line } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    OrgGeogebraCommonKernelAlgosAlgoDependentNumber *nx = new_OrgGeogebraCommonKernelAlgosAlgoDependentNumber_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cx, NO);
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:nx];
    OrgGeogebraCommonKernelAlgosAlgoDependentNumber *ny = new_OrgGeogebraCommonKernelAlgosAlgoDependentNumber_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cy, NO);
    [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:ny];
    OrgGeogebraCommonKernelAlgosAlgoDependentNumber *nz = new_OrgGeogebraCommonKernelAlgosAlgoDependentNumber_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cz, NO);
    [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:nz];
    OrgGeogebraCommonKernelGeosGeoNumeric *from = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, -10);
    OrgGeogebraCommonKernelGeosGeoNumeric *to = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, 10);
    OrgGeogebraCommonKernelAlgosAlgoCurveCartesian *ac = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCurveCartesian3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValueArray_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, [IOSObjectArray newArrayWithObjects:(id[]){ [nx getNumber], [ny getNumber], [nz getNumber] } count:3 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()], loc, from, to);
    return [ac getOutput];
  }
  return [super processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withOrgGeogebraCommonKernelArithmeticExpressionValue:ev withOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withNSString:label];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelCommandsCommandDispatcher:", "AlgebraProcessor3D", NULL, 0x1, NULL, NULL },
    { "processPointVector3DWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "processPointVector3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "checkNoTermsInZWithOrgGeogebraCommonKernelArithmeticEquation:", "checkNoTermsInZ", "V", 0x4, NULL, NULL },
    { "processLineWithOrgGeogebraCommonKernelArithmeticEquation:", "processLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processConicWithOrgGeogebraCommonKernelArithmeticEquation:", "processConic", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processQuadricWithOrgGeogebraCommonKernelArithmeticEquation:", "processQuadric", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processPlaneWithOrgGeogebraCommonKernelArithmeticEquation:", "processPlane", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticFunctionVariable:withNSString:", "processParametricFunction", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D = { 2, "AlgebraProcessor3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelCommandsCommandDispatcher *cd) {
  (void) OrgGeogebraCommonKernelCommandsAlgebraProcessor_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, cd);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelCommandsCommandDispatcher *cd) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, cd);
  return self;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processQuadricWithOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  jdouble xx = 0, yy = 0, zz = 0, xy = 0, xz = 0, yz = 0, x = 0, y = 0, z = 0, c = 0;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric;
  NSString *label = [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  OrgGeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isIndependent = [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant];
  if (isIndependent) {
    xx = [lhs getCoeffValueWithNSString:@"xx"];
    yy = [lhs getCoeffValueWithNSString:@"yy"];
    zz = [lhs getCoeffValueWithNSString:@"zz"];
    c = [lhs getCoeffValueWithNSString:@""];
    xy = [lhs getCoeffValueWithNSString:@"xy"] / 2;
    xz = [lhs getCoeffValueWithNSString:@"xz"] / 2;
    yz = [lhs getCoeffValueWithNSString:@"yz"] / 2;
    x = [lhs getCoeffValueWithNSString:@"x"] / 2;
    y = [lhs getCoeffValueWithNSString:@"y"] / 2;
    z = [lhs getCoeffValueWithNSString:@"z"] / 2;
    IOSDoubleArray *coeffs = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ xx, yy, zz, c, xy, xz, yz, x, y, z } count:10];
    quadric = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(self->cons_, label, coeffs);
  }
  else {
    quadric = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) DependentQuadric3DWithNSString:label withOrgGeogebraCommonKernelArithmeticEquation:equ], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  }
  (void) IOSObjectArray_Set(ret, 0, quadric);
  return ret;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processPlaneWithOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  jdouble a = 0, b = 0, c = 0, d = 0;
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = nil;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  OrgGeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isIndependent = [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant];
  if (isIndependent) {
    a = [lhs getCoeffValueWithNSString:@"x"];
    b = [lhs getCoeffValueWithNSString:@"y"];
    c = [lhs getCoeffValueWithNSString:@"z"];
    d = [lhs getCoeffValueWithNSString:@""];
    plane = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Plane3DWithNSString:label withDouble:a withDouble:b withDouble:c withDouble:d], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  }
  else plane = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) DependentPlane3DWithNSString:label withOrgGeogebraCommonKernelArithmeticEquation:equ], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  (void) IOSObjectArray_Set(ret, 0, plane);
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D)
