//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/commands/CommandDispatcher3D.java
//


#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdAngle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdAngularBisector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdArcSector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdArchimedeanSolid.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdArea3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdAxes3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdBottom.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCircle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCircleArcSector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCircumcircleArc3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCircumcircleSector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdClosestPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdClosestPointRegion.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCone.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdConeInfinite.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCorner3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCurveCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCylinder.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdCylinderInfinite.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdDiameter3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdDilate3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdDistance3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdEllipseHyperbola3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdEnds.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdFocus3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdFunction2Var.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdHeight.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdIntersect3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdIntersectConic.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdIntersectPath3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdLength3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdLineBisector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdLocus3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdMidpoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdMirror3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdOrthogonalLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdOrthogonalPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdOrthogonalVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdParabola3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPlaneBisector.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPointIn3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPolar3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPolyLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPolyhedronNet.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPrism.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPyramid.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdQuadricSide.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdRay3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdRotate3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdSegment3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdSemicircle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdSphere3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdSurfaceCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdTangent3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdTop.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdTranslate3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdUnitOrthogonalVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdUnitVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdVertex3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdVertexForce3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdVolume.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CommandDispatcher3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/scripting/CmdSetSpinSpeed.h"
#include "org/geogebra/common/geogebra3D/kernel3D/scripting/CmdSetViewDirection.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/commands/CommandDispatcher.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/main/App.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandProcessor *)commandTableSwitchWithNSString:(NSString *)cmdName {
  @try {
    switch ([OrgGeogebraCommonKernelCommandsCommandsEnum_valueOfWithNSString_(cmdName) ordinal]) {
      case OrgGeogebraCommonKernelCommandsCommands_Segment:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdSegment3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Line:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdLine3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Ray:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdRay3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Vector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVector3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Polygon:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolygon3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Area:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdArea3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_PolyLine:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Point:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Midpoint:
      case OrgGeogebraCommonKernelCommandsCommands_Center:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Tangent:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdTangent3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Polar:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Diameter:
      case OrgGeogebraCommonKernelCommandsCommands_ConjugateDiameter:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdDiameter3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Circle:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCircle3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Ellipse:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdEllipseHyperbola3D_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel_, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE);
      case OrgGeogebraCommonKernelCommandsCommands_Hyperbola:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdEllipseHyperbola3D_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel_, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA);
      case OrgGeogebraCommonKernelCommandsCommands_Conic:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdConic3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_CircumcircleSector:
      case OrgGeogebraCommonKernelCommandsCommands_CircumcircularSector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCircumcircleSector3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_CircumcircleArc:
      case OrgGeogebraCommonKernelCommandsCommands_CircumcircularArc:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCircumcircleArc3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Arc:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel_, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC);
      case OrgGeogebraCommonKernelCommandsCommands_Sector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel_, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR);
      case OrgGeogebraCommonKernelCommandsCommands_CircleArc:
      case OrgGeogebraCommonKernelCommandsCommands_CircularArc:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel_, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC);
      case OrgGeogebraCommonKernelCommandsCommands_CircleSector:
      case OrgGeogebraCommonKernelCommandsCommands_CircularSector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel_, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR);
      case OrgGeogebraCommonKernelCommandsCommands_Semicircle:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdSemicircle3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Parabola:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdParabola3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Corner:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCorner3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_CornerThreeD:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertexForce3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Locus:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdLocus3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Vertex:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Focus:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdFocus3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_OrthogonalLine:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdOrthogonalLine3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_LineBisector:
      case OrgGeogebraCommonKernelCommandsCommands_PerpendicularBisector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdLineBisector3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_AngleBisector:
      case OrgGeogebraCommonKernelCommandsCommands_AngularBisector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngularBisector3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_OrthogonalVector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdOrthogonalVector3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_UnitOrthogonalVector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitOrthogonalVector3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_UnitVector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Curve:
      case OrgGeogebraCommonKernelCommandsCommands_CurveCartesian:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCurveCartesian3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Plane:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPlane_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_PerpendicularPlane:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdOrthogonalPlane_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_OrthogonalPlane:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdOrthogonalPlane_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_PlaneBisector:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPlaneBisector_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Prism:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPrism_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Pyramid:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPyramid_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Tetrahedron:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandsEnum_(kernel_, OrgGeogebraCommonKernelCommandsCommandsEnum_get_Tetrahedron());
      case OrgGeogebraCommonKernelCommandsCommands_Cube:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandsEnum_(kernel_, OrgGeogebraCommonKernelCommandsCommandsEnum_get_Cube());
      case OrgGeogebraCommonKernelCommandsCommands_Octahedron:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandsEnum_(kernel_, OrgGeogebraCommonKernelCommandsCommandsEnum_get_Octahedron());
      case OrgGeogebraCommonKernelCommandsCommands_Dodecahedron:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandsEnum_(kernel_, OrgGeogebraCommonKernelCommandsCommandsEnum_get_Dodecahedron());
      case OrgGeogebraCommonKernelCommandsCommands_Icosahedron:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandsEnum_(kernel_, OrgGeogebraCommonKernelCommandsCommandsEnum_get_Icosahedron());
      case OrgGeogebraCommonKernelCommandsCommands_Net:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolyhedronNet_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_PointIn:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPointIn3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Distance:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdDistance3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_ClosestPoint:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdClosestPoint3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_ClosestPointRegion:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdClosestPointRegion_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Intersect:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_IntersectPath:
      case OrgGeogebraCommonKernelCommandsCommands_IntersectionPaths:
      case OrgGeogebraCommonKernelCommandsCommands_IntersectRegion:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_IntersectCircle:
      case OrgGeogebraCommonKernelCommandsCommands_IntersectConic:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectConic_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Sphere:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdSphere3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Cone:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCone_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_InfiniteCone:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdConeInfinite_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_ConeInfinite:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdConeInfinite_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Cylinder:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCylinder_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_InfiniteCylinder:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCylinderInfinite_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_CylinderInfinite:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdCylinderInfinite_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_QuadricSide:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdQuadricSide_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Bottom:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdBottom_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Top:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdTop_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Ends:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdEnds_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Function:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdFunction2Var_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Surface:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdSurfaceCartesian3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Angle:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Translate:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdTranslate3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Rotate:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdRotate3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Mirror:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdMirror3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Dilate:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdDilate3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Length:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Volume:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdVolume_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Height:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdHeight_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_Axes:
      return new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_SetViewDirection:
      return new_OrgGeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      case OrgGeogebraCommonKernelCommandsCommands_SetSpinSpeed:
      return new_OrgGeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed_initWithOrgGeogebraCommonKernelKernel_(kernel_);
      default:
      return [super commandTableSwitchWithNSString:cmdName];
    }
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"command not found / CAS command called");
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CommandDispatcher3D", NULL, 0x1, NULL, NULL },
    { "commandTableSwitchWithNSString:", "commandTableSwitch", "Lorg.geogebra.common.kernel.commands.CommandProcessor;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D = { 2, "CommandDispatcher3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCommandDispatcher_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D)
