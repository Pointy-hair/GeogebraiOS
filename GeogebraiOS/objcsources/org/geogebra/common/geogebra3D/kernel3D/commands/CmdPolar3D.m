//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/commands/CmdPolar3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPolar3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/advanced/CmdPolar.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)PolarLineWithNSString:(NSString *)label
                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                   withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isGeoElement3D] || [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, c, P) autorelease];
    return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getLine], [OrgGeogebraCommonKernelGeosGeoElement class]);
  }
  return [super PolarLineWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:P withOrgGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)PolarPointWithNSString:(NSString *)label
                     withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line
                    withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) isGeoElement3D] || [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarPoint3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, c, line) autorelease];
    return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getPoint], [OrgGeogebraCommonKernelGeosGeoElement class]);
  }
  return [super PolarPointWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoLineND:line withOrgGeogebraCommonKernelKernelNDGeoConicND:c];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdPolar3D", NULL, 0x1, NULL, NULL },
    { "PolarLineWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "PolarLine", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "PolarPointWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "PolarPoint", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D = { 2, "CmdPolar3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelAdvancedCmdPolar_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D)
