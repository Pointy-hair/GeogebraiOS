//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/commands/CmdIntersectPath3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdIntersectPath3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/advanced/CmdIntersectPath.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/main/MyError.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D ()

+ (OrgGeogebraCommonKernelGeosGeoElement *)intersectPlaneQuadricLimitedWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernelA
                                                                                            withNSString:(NSString *)label
                                                           withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                          withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)quadric;

@end

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(OrgGeogebraCommonKernelKernel *kernelA, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *quadric);

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray newArrayWithLength:n];
  IOSObjectArray *arg;
  {
    OrgGeogebraCommonKernelGeosGeoElement *ret;
    switch (n) {
      case 2:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoElement3D] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D]) return [super processWithOrgGeogebraCommonKernelArithmeticCommand:c];
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon]))) {
        IOSObjectArray *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPathWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelGeosGeoSurfaceFinite:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoPolygon class])];
        return ret;
      }
      else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
        IOSObjectArray *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPathWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)) withOrgGeogebraCommonKernelGeosGeoSurfaceFinite:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoPolygon class])];
        return ret;
      }
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon]))) return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPathWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoPolygon class])];
      else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon]))) return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPathWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoPolygon class])];
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolyhedron]))) return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectRegionWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]) withIntArray:[c getOutputSizes]];
      else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolyhedron]))) return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectRegionWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]) withIntArray:[c getOutputSizes]];
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane]))) {
        IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPlanesWithNSString:[c getLabel] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND))] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      ret = OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_processQuadricPlaneWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticCommand_withOrgGeogebraCommonKernelGeosGeoElementArray_withBooleanArray_(kernelA_, c, arg, ok);
      if (ret != nil) {
        return [IOSObjectArray newArrayWithObjects:(id[]){ ret } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
      default:
      return [super processWithOrgGeogebraCommonKernelArithmeticCommand:c];
    }
  }
}

+ (OrgGeogebraCommonKernelGeosGeoElement *)processQuadricPlaneWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernelA
                                                   withOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                 withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                                               withBooleanArray:(IOSBooleanArray *)ok {
  return OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_processQuadricPlaneWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticCommand_withOrgGeogebraCommonKernelGeosGeoElementArray_withBooleanArray_(kernelA, c, arg, ok);
}

+ (OrgGeogebraCommonKernelGeosGeoElement *)intersectPlaneQuadricLimitedWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernelA
                                                                                            withNSString:(NSString *)label
                                                           withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                          withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)quadric {
  return OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(kernelA, label, plane, quadric);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdIntersectPath3D", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "processQuadricPlaneWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticCommand:withOrgGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "processQuadricPlane", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x19, NULL, NULL },
    { "intersectPlaneQuadricLimitedWithOrgGeogebraCommonKernelKernel:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:", "intersectPlaneQuadricLimited", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1a, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D = { 2, "CmdIntersectPath3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelAdvancedCmdIntersectPath_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_processQuadricPlaneWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticCommand_withOrgGeogebraCommonKernelGeosGeoElementArray_withBooleanArray_(OrgGeogebraCommonKernelKernel *kernelA, OrgGeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *arg, IOSBooleanArray *ok) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initialize();
  if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([OrgGeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)])) && (*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]))) {
    return OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(kernelA, [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], (id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)), (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]));
  }
  else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]])) && (*IOSBooleanArray_GetRef(ok, 0) = ([OrgGeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
    return OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(kernelA, [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], (id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)), (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]));
  }
  if ((*IOSBooleanArray_GetRef(ok, 0) = ([OrgGeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 0)])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[OrgGeogebraCommonKernelKernelNDGeoQuadricND class]]))) {
    OrgGeogebraCommonKernelGeosGeoElement *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA)) getManager3D])) IntersectWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelKernelNDGeoQuadricND class])];
    return ret;
  }
  else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonKernelKernelNDGeoQuadricND class]]) && ([OrgGeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 1)])) {
    OrgGeogebraCommonKernelGeosGeoElement *ret = [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA)) getManager3D])) IntersectWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND)) withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelKernelNDGeoQuadricND class])];
    return ret;
  }
  return nil;
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(OrgGeogebraCommonKernelKernel *kernelA, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *quadric) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initialize();
  return [((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA)) getManager3D])) IntersectQuadricLimitedWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPlaneND:plane withOrgGeogebraCommonKernelKernelNDGeoQuadricND:quadric];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D)
