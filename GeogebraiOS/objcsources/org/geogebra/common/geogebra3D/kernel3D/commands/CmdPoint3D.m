//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/geogebra3D/kernel3D/commands/CmdPoint3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPointVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/commands/CmdPoint3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/Region.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CmdPoint.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  {
    OrgGeogebraCommonKernelGeosGeoElement *geo0;
    switch (n) {
      case 1:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      geo0 = IOSObjectArray_Get(nil_chk(arg), 0);
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) isGeoElement3D] || ([geo0 isGeoList] && [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo0, [OrgGeogebraCommonKernelGeosGeoList class])) containsGeoElement3D])) {
        if ([geo0 isPath]) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Point3DWithNSString:[c getLabel] withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>) check_protocol_cast(geo0, @protocol(OrgGeogebraCommonKernelPath)) withBoolean:NO], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        if ([geo0 isRegion]) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Point3DInWithNSString:[c getLabel] withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelRegion)) withBoolean:NO], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:geo0];
      }
    }
  }
  return [super processWithOrgGeogebraCommonKernelArithmeticCommand:c];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)pointWithNSString:(NSString *)label
                             withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
               withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)value {
  if ([((id<OrgGeogebraCommonKernelPath>) nil_chk(path)) isGeoElement3D] || ([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(path, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoList] && [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(path, [OrgGeogebraCommonKernelGeosGeoList class])) containsGeoElement3D])) {
    return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Point3DWithNSString:label withOrgGeogebraCommonKernelPath:path withOrgGeogebraCommonKernelArithmeticNumberValue:value], [OrgGeogebraCommonKernelGeosGeoElement class]);
  }
  return [super pointWithNSString:label withOrgGeogebraCommonKernelPath:path withOrgGeogebraCommonKernelGeosGeoNumberValue:value];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pointWithNSString:(NSString *)label
                     withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                    withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)vector {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vector)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPointVector3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPointVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, point, vector) autorelease];
    return [algo getQ];
  }
  return [super pointWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:point withOrgGeogebraCommonKernelKernelNDGeoVectorND:vector];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdPoint3D", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "pointWithNSString:withOrgGeogebraCommonKernelPath:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "point", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "pointWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "point", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D = { 2, "CmdPoint3D", "org.geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdPoint_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D *new_OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D *self = [OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D)
