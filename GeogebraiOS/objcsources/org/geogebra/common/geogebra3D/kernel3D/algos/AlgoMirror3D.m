//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoMirror3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoMirror3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTransformation3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/MirrorableAtPlane.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoMirror.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/Mirrorable.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> mirrorPlane_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D, mirrorPlane_, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, point);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, line);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
           withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, inArg, plane);
  return self;
}

- (void)computeRegardingMirror {
  if (mirror_ == mirrorPlane_) {
    [((id<OrgGeogebraCommonGeogebra3DKernel3DTransformMirrorableAtPlane>) nil_chk(((id<OrgGeogebraCommonGeogebra3DKernel3DTransformMirrorableAtPlane>) check_protocol_cast(out_, @protocol(OrgGeogebraCommonGeogebra3DKernel3DTransformMirrorableAtPlane))))) mirrorWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:mirrorPlane_];
  }
  else {
    [super computeRegardingMirror];
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__WithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoElement3D]) return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) copy3DWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  return [super copy__WithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] || [geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]]) && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoElement3D]) return new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  return [super getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                     withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoElement3D]) return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) copyInternal3DWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:geo];
  return [super copyInternalWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)setOutGeo {
  if ([inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_toGeoCurveCartesianWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(kernel_, (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(inGeo_, [OrgGeogebraCommonKernelGeosGeoFunction class]), (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast(outGeo_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]));
  }
  else {
    [super setOutGeo];
  }
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMirrorCoords {
  return [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(mirrorPoint_)) getInhomCoordsInD3];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoMirror3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "AlgoMirror3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "AlgoMirror3D", NULL, 0x1, NULL, NULL },
    { "computeRegardingMirror", NULL, "V", 0x4, NULL, NULL },
    { "copy__WithOrgGeogebraCommonKernelGeosGeoElement:", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setOutGeo", NULL, "V", 0x4, NULL, NULL },
    { "getMirrorCoords", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mirrorPlane_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoCoordSys2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D = { 2, "AlgoMirror3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  (void) OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, point);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, point);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoLineND> line) {
  (void) OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, line);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoLineND> line) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, line);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  (void) OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->mirrorPlane_ = plane;
  [self endOfConstructionWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:inArg withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane, [OrgGeogebraCommonKernelGeosGeoElement class])];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, inArg, plane);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D)
