//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentPoint3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineIncludedConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoTangentPointND.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D () {
 @public
  IOSDoubleArray *polarCoords_;
  OrgGeogebraCommonKernelMatrixCoords *polarOrigin_, *polarDirection_;
  OrgGeogebraCommonKernelMatrixCoords *coords2D_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D, polarCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D, polarOrigin_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D, polarDirection_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D, coords2D_, OrgGeogebraCommonKernelMatrixCoords *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
  return self;
}

- (void)setPolar {
  polarCoords_ = [IOSDoubleArray newArrayWithLength:3];
  polar_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  algoIntersect_ = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, polar_, c_);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoIntersect_];
  tangentPoints_ = [algoIntersect_ getIntersectionPoints];
}

- (void)setTangentFromPolarWithInt:(jint)i {
  if (i == 0) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(polar_)) getCoordsWithDoubleArray:polarCoords_];
    polarDirection_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getVectorWithDouble:-IOSDoubleArray_Get(nil_chk(polarCoords_), 1) withDouble:IOSDoubleArray_Get(polarCoords_, 0)];
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(polarCoords_, 0))) {
      polarOrigin_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:0 withDouble:-IOSDoubleArray_Get(polarCoords_, 2) / IOSDoubleArray_Get(polarCoords_, 1)];
    }
    else {
      polarOrigin_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:-IOSDoubleArray_Get(polarCoords_, 2) / IOSDoubleArray_Get(polarCoords_, 0) withDouble:0];
    }
  }
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), i), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithOrgGeogebraCommonKernelMatrixCoords:polarOrigin_ withOrgGeogebraCommonKernelMatrixCoords:polarDirection_];
}

- (void)setTangents {
  tangents_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_class_()];
  (void) IOSObjectArray_Set(tangents_, 0, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  (void) IOSObjectArray_Set(tangents_, 1, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(tangents_, 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:P_];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:P_];
}

- (jboolean)checkUndefined {
  if ([super checkUndefined]) {
    return YES;
  }
  coords2D_ = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getInhomCoordsInD3]]), 1);
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords2D_)) getZ])) {
    return YES;
  }
  [coords2D_ setZWithDouble:1];
  return NO;
}

- (void)updatePolarLine {
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) polarLineWithOrgGeogebraCommonKernelMatrixCoords:coords2D_ withOrgGeogebraCommonKernelGeosGeoLine:polar_];
}

- (jboolean)isIntersectionPointIncident {
  return [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) isIntersectionPointIncidentWithOrgGeogebraCommonKernelMatrixCoords:coords2D_ withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION];
}

- (void)updateTangents {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(tangentPoints_), 0))) isDefined]) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(tangents_), 0))) setUndefined];
  }
  else {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), 0), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithOrgGeogebraCommonKernelKernelNDGeoPointND:P_ withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints_, 0)];
  }
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(tangentPoints_, 1))) isDefined]) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(tangents_), 1))) setUndefined];
  }
  else {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithOrgGeogebraCommonKernelKernelNDGeoPointND:P_ withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints_, 1)];
  }
}

- (void)initForNearToRelationship {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initForNearToRelationshipWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints_, IOSObjectArray_Get(nil_chk(tangents_), 0), algoIntersect_);
}

+ (void)initForNearToRelationshipWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)tangentPoints
                                       withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)tangent
                                 withOrgGeogebraCommonKernelKernelNDAlgoIntersectND:(OrgGeogebraCommonKernelKernelNDAlgoIntersectND *)algoIntersect {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initForNearToRelationshipWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints, tangent, algoIntersect);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentPoint3D", NULL, 0x1, NULL, NULL },
    { "setPolar", NULL, "V", 0x4, NULL, NULL },
    { "setTangentFromPolarWithInt:", "setTangentFromPolar", "V", 0x4, NULL, NULL },
    { "setTangents", NULL, "V", 0x4, NULL, NULL },
    { "checkUndefined", NULL, "Z", 0x4, NULL, NULL },
    { "updatePolarLine", NULL, "V", 0x4, NULL, NULL },
    { "isIntersectionPointIncident", NULL, "Z", 0x4, NULL, NULL },
    { "updateTangents", NULL, "V", 0x4, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "initForNearToRelationshipWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDAlgoIntersectND:", "initForNearToRelationship", "V", 0x19, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polarCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "polarOrigin_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "polarDirection_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "coords2D_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D = { 2, "AlgoTangentPoint3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  (void) OrgGeogebraCommonKernelAlgosAlgoTangentPointND_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initForNearToRelationshipWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDAlgoIntersectND_(IOSObjectArray *tangentPoints, id<OrgGeogebraCommonKernelKernelNDGeoLineND> tangent, OrgGeogebraCommonKernelKernelNDAlgoIntersectND *algoIntersect) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initialize();
  OrgGeogebraCommonKernelMatrixCoords *firstTangentPoint = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(tangentPoints), 0))) getInhomCoordsInD3];
  if (![((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(tangent, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords:firstTangentPoint withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION]) {
    [((OrgGeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(algoIntersect)) initForNearToRelationship];
    [algoIntersect setIntersectionPointWithInt:0 withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints, 1)];
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(IOSObjectArray_Get(tangentPoints, 1), [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:firstTangentPoint];
    [algoIntersect setIntersectionPointWithInt:1 withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints, 1)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D)
