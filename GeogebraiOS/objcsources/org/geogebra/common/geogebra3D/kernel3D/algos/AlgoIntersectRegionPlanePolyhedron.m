//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathLinePolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathPlanePolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectPathLinePolygon.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoElementND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/main/Localization.h"

@class OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent;
@class OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices;
@class OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList;

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron () {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *polyhedron_;
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputPolygons_;
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputPoints_;
  jboolean hasLabels_AlgoIntersectRegionPlanePolyhedron_;
  JavaUtilTreeSet *polyhedronVertices_;
  JavaUtilTreeMap *parentToPolygons_;
  JavaUtilTreeMap *newCoordsList_;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *verticesList_;
  JavaUtilArrayList *polyhedronFaces_;
  JavaUtilTreeSet *checkVerticesList_;
  JavaUtilArrayList *segmentCoords_;
  jint removeSegmentCoordsIndex_;
  OrgGeogebraCommonKernelGeosGeoPolygon *removeSegmentCoordsPolygon_;
}

- (JavaUtilTreeSet *)getPolygonsWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)coords;

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
      withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p
                                                withBoolean:(jboolean)hasLabels;

- (void)setNewCoordsList;

- (JavaUtilArrayList *)getSegmentsCoords;

- (void)addSegmentWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startSegment
                  withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)endSegment
                                                                                            withJavaUtilArrayList:(JavaUtilArrayList *)segmentList;

- (void)addParentToPolygonsWithOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)parent;

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)nextVertexWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p2
                                                     withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startPoint
                                                                                                     withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)oldPoint;

- (void)removeSegmentCoords;

- (void)removeSegmentCoordsWithInt:(jint)index
withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p2;

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)nextVertexWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startPoint
                                                                                                                                                           withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)oldParent
                                                                                                                                                           withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)firstParent;

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)addVertices;

- (void)addPolyhedronVerticesToOutputWithInt:(jint)indexPolygon
                                     withInt:(jint)indexPoint
                                     withInt:(jint)indexSegment;

- (void)addToVerticesListWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)vertices;

- (void)updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler:(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)outputHandler;

- (void)createOutput;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, polyhedron_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, outputPolygons_, OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, outputPoints_, OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, polyhedronVertices_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, parentToPolygons_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, newCoordsList_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, verticesList_, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, polyhedronFaces_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, checkVerticesList_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, segmentCoords_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, removeSegmentCoordsPolygon_, OrgGeogebraCommonKernelGeosGeoPolygon *)

__attribute__((unused)) static JavaUtilTreeSet *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getPolygonsWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *coords);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, jboolean hasLabels);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, jboolean hasLabels) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

__attribute__((unused)) static JavaUtilArrayList *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getSegmentsCoords(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startSegment, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *endSegment, JavaUtilArrayList *segmentList);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, id<OrgGeogebraCommonKernelKernelNDGeoElementND> parent);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonKernelGeosGeoPolygon *p2, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint, id<OrgGeogebraCommonKernelKernelNDGeoElementND> oldPoint);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, jint index, OrgGeogebraCommonKernelGeosGeoPolygon *p2);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_withOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint, id<OrgGeogebraCommonKernelKernelNDGeoElementND> oldParent, id<OrgGeogebraCommonKernelKernelNDGeoElementND> firstParent);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addVertices(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, jint indexPolygon, jint indexPoint, jint indexSegment);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputHandler);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_createOutput(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent : OrgGeogebraCommonKernelMatrixCoords < JavaLangComparable > {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoElementND> parent_;
  JavaLangDouble *parameter_;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$
                                                                                withJavaLangDouble:(JavaLangDouble *)parameter
                                                           withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v
                                                   withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)parent;

- (jint)compareToWithId:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)o;

- (jint)compareParentToWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent, parent_, id<OrgGeogebraCommonKernelKernelNDGeoElementND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent, parameter_, JavaLangDouble *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, JavaLangDouble *parameter, OrgGeogebraCommonKernelMatrixCoords *v, id<OrgGeogebraCommonKernelKernelNDGeoElementND> parent);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, JavaLangDouble *parameter, OrgGeogebraCommonKernelMatrixCoords *v, id<OrgGeogebraCommonKernelKernelNDGeoElementND> parent) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent)

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment : NSObject {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1_, *p2_;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$
   withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)p1
   withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)p2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment, p1_, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment, p2_, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p2);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p2) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment)

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices : JavaUtilArrayList < JavaLangComparable > {
 @public
  jint lowest_;
  jshort direction_;
  jint current_;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

- (jboolean)addWithId:(OrgGeogebraCommonKernelMatrixCoords *)e;

- (void)setDirection;

- (OrgGeogebraCommonKernelMatrixCoords *)next;

- (void)start;

- (jint)compareToWithId:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)o;


@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices)

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList : JavaUtilArrayList {
 @public
  jint cumulateSize_;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

- (jboolean)addWithId:(JavaUtilArrayList *)vertices;

- (void)clear;


@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList)

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 : NSObject < OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *this$0_;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2, this$0_, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2)

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 : NSObject < OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *this$0_;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3, this$0_, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3)

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 : NSObject < OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *this$0_;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4, this$0_, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4)

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(OrgGeogebraCommonKernelMatrixCoords *)o1
               withId:(OrgGeogebraCommonKernelMatrixCoords *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron)

id<JavaUtilComparator> OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_;

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron

- (JavaUtilTreeSet *)getPolygonsWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)coords {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getPolygonsWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, coords);
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
      withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, c, plane, p);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
      withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p
                                                withBoolean:(jboolean)hasLabels {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(self, c, plane, p, hasLabels);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
      withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p
                                               withIntArray:(IOSIntArray *)outputSizes {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(self, c, labels, plane, p, outputSizes);
  return self;
}

- (void)setSecondInputWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->polyhedron_ = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return polyhedron_;
}

- (void)addCoordsWithDouble:(jdouble)parameter
withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)parent {
  OrgGeogebraCommonKernelMatrixCoords *c = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) copyVector];
  [((JavaUtilTreeSet *) nil_chk(newCoords_AlgoIntersectRegionPlanePolyhedron_)) addWithId:new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelKernelNDGeoElementND_(self, JavaLangDouble_valueOfWithDouble_(parameter), c, parent)];
  if ([OrgGeogebraCommonKernelKernelNDGeoPointND_class_() isInstance:parent]) {
    [((JavaUtilTreeSet *) nil_chk(polyhedronVertices_)) addWithId:c];
  }
}

- (void)setNewCoords {
  if (newCoordsList_ == nil) newCoordsList_ = new_JavaUtilTreeMap_init();
  else [newCoordsList_ clear];
  if (parentToPolygons_ == nil) parentToPolygons_ = new_JavaUtilTreeMap_init();
  else [parentToPolygons_ clear];
  if (polyhedronVertices_ == nil) polyhedronVertices_ = new_JavaUtilTreeSet_initWithJavaUtilComparator_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_);
  else [polyhedronVertices_ clear];
  for (OrgGeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) getPolygons])) {
    p_ = polygon;
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(self);
  }
  for (OrgGeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk([polyhedron_ getPolygonsLinked])) {
    p_ = polygon;
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(self);
  }
}

- (void)setNewCoordsList {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(self);
}

- (JavaUtilArrayList *)getSegmentsCoords {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getSegmentsCoords(self);
}

- (void)addSegmentWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startSegment
                  withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)endSegment
                                                                                            withJavaUtilArrayList:(JavaUtilArrayList *)segmentList {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(self, startSegment, endSegment, segmentList);
}

- (void)addParentToPolygonsWithOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)parent {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithOrgGeogebraCommonKernelKernelNDGeoElementND_(self, parent);
}

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)nextVertexWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p2
                                                     withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startPoint
                                                                                                     withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)oldPoint {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_(self, p2, startPoint, oldPoint);
}

- (void)removeSegmentCoords {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(self);
}

- (void)removeSegmentCoordsWithInt:(jint)index
withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, index, p2);
}

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)nextVertexWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startPoint
                                                                                                                                                           withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)oldParent
                                                                                                                                                           withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)firstParent {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_withOrgGeogebraCommonKernelKernelNDGeoElementND_(self, startPoint, oldParent, firstParent);
}

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)addVertices {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addVertices(self);
}

- (void)addPolyhedronVerticesToOutputWithInt:(jint)indexPolygon
                                     withInt:(jint)indexPoint
                                     withInt:(jint)indexSegment {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(self, indexPolygon, indexPoint, indexSegment);
}

- (void)addToVerticesListWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)vertices {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(self, vertices);
}

- (void)updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler:(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)outputHandler {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(self, outputHandler);
}

- (void)compute {
  if (verticesList_ == nil) verticesList_ = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self);
  else [verticesList_ clear];
  if (checkVerticesList_ == nil) checkVerticesList_ = new_JavaUtilTreeSet_init();
  else [checkVerticesList_ clear];
  if (polyhedronFaces_ == nil) polyhedronFaces_ = new_JavaUtilArrayList_init();
  else [polyhedronFaces_ clear];
  [self setNewCoords];
  if ([((JavaUtilTreeMap *) nil_chk(newCoordsList_)) size] == 0 && [((JavaUtilArrayList *) nil_chk(polyhedronFaces_)) size] == 0) {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygons_)) adjustOutputSizeWithInt:[((JavaUtilTreeSet *) nil_chk(polyhedronVertices_)) size] withBoolean:NO];
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:[polyhedronVertices_ size] withBoolean:NO];
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_AlgoIntersectRegionPlanePolyhedron_)) adjustOutputSizeWithInt:[polyhedronVertices_ size] withBoolean:NO];
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(self, 0, 0, 0);
  }
  else {
    while ([newCoordsList_ size] != 0) {
      p_ = [newCoordsList_ firstKey];
      OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addVertices(self);
      if (vertices != nil) {
        [vertices setDirection];
        if ([((JavaUtilTreeSet *) nil_chk(checkVerticesList_)) addWithId:vertices]) {
          OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(self, vertices);
        }
      }
    }
    for (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices * __strong vertices in nil_chk(polyhedronFaces_)) {
      if ([((JavaUtilTreeSet *) nil_chk(checkVerticesList_)) addWithId:vertices]) {
        OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(self, vertices);
      }
    }
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *) nil_chk(verticesList_))->cumulateSize_ + [((JavaUtilTreeSet *) nil_chk(polyhedronVertices_)) size] withBoolean:NO];
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(self, outputPoints_);
    jint segmentIndex = 0;
    for (JavaUtilArrayList * __strong vertices in verticesList_) {
      jint length = [((JavaUtilArrayList *) nil_chk(vertices)) size];
      for (jint i = 0; i < length; i++) {
        OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [outputPoints_ getElementWithInt:segmentIndex];
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[vertices getWithInt:i]];
        segmentIndex++;
      }
    }
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygons_)) adjustOutputSizeWithInt:[verticesList_ size] + [polyhedronVertices_ size] withBoolean:NO];
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(self, outputPolygons_);
    IOSObjectArray *points = [IOSObjectArray newArrayWithLength:verticesList_->cumulateSize_ type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()];
    points = [outputPoints_ getOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:points];
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_AlgoIntersectRegionPlanePolyhedron_)) adjustOutputSizeWithInt:verticesList_->cumulateSize_ + [polyhedronVertices_ size] withBoolean:NO];
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(self, outputSegments_AlgoIntersectRegionPlanePolyhedron_);
    jint pointIndex = 0;
    jint polygonIndex = 0;
    segmentIndex = 0;
    for (JavaUtilArrayList * __strong vertices in verticesList_) {
      jint length = [((JavaUtilArrayList *) nil_chk(vertices)) size];
      OrgGeogebraCommonKernelGeosGeoPolygon *outputPoly = [outputPolygons_ getElementWithInt:polygonIndex];
      IOSObjectArray *polyPoints = [IOSObjectArray newArrayWithLength:length type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()];
      IOSObjectArray *polySegments = [IOSObjectArray newArrayWithLength:length type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_class_()];
      for (jint i = 0; i < length; i++) {
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([outputSegments_AlgoIntersectRegionPlanePolyhedron_ getElementWithInt:segmentIndex])) modifyInputPolyAndPointsWithOrgGeogebraCommonKernelGeosGeoElement:outputPoly withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), pointIndex + i) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, pointIndex + (i + 1) % length)];
        (void) IOSObjectArray_Set(polyPoints, i, IOSObjectArray_Get(points, pointIndex + i));
        (void) IOSObjectArray_Set(polySegments, i, [outputSegments_AlgoIntersectRegionPlanePolyhedron_ getElementWithInt:segmentIndex]);
        segmentIndex++;
      }
      [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(outputPoly)) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:polyPoints withOrgGeogebraCommonKernelMatrixCoordSys:nil withBoolean:NO];
      [outputPoly setSegmentsWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:polySegments];
      [outputPoly calcArea];
      pointIndex += length;
      polygonIndex++;
    }
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(self, polygonIndex, pointIndex, segmentIndex);
  }
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return YES;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_IntersectPath();
}

- (void)createOutput {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_createOutput(self);
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, [self getFirstInput]);
  (void) IOSObjectArray_Set(input_, 1, [self getSecondInput]);
  for (jint i = 0; i < input_->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)getCmdOutputXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
       withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<outputSizes val=\""];
  (void) [sb appendWithInt:[((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygons_)) size]];
  (void) [sb appendWithNSString:@","];
  (void) [sb appendWithInt:[((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]];
  (void) [sb appendWithNSString:@","];
  (void) [sb appendWithInt:[((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_AlgoIntersectRegionPlanePolyhedron_)) size]];
  (void) [sb appendWithNSString:@"\""];
  (void) [sb appendWithNSString:@"/>\n"];
  [super getCmdOutputXMLWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionOfAandB" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getFirstInput])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getSecondInput])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron class]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_ = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init();
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getPolygonsWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:", "getPolygons", "Ljava.util.TreeSet;", 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:", "AlgoIntersectRegionPlanePolyhedron", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:withBoolean:", "AlgoIntersectRegionPlanePolyhedron", NULL, 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:withIntArray:", "AlgoIntersectRegionPlanePolyhedron", NULL, 0x1, NULL, NULL },
    { "setSecondInputWithOrgGeogebraCommonKernelGeosGeoElement:", "setSecondInput", "V", 0x4, NULL, NULL },
    { "getSecondInput", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "addCoordsWithDouble:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelKernelNDGeoElementND:", "addCoords", "V", 0x4, NULL, NULL },
    { "setNewCoords", NULL, "V", 0x4, NULL, NULL },
    { "setNewCoordsList", NULL, "V", 0x2, NULL, NULL },
    { "getSegmentsCoords", NULL, "Ljava.util.ArrayList;", 0x2, NULL, NULL },
    { "addSegmentWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withJavaUtilArrayList:", "addSegment", "V", 0x2, NULL, NULL },
    { "addParentToPolygonsWithOrgGeogebraCommonKernelKernelNDGeoElementND:", "addParentToPolygons", "V", 0x2, NULL, NULL },
    { "nextVertexWithOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withOrgGeogebraCommonKernelKernelNDGeoElementND:", "nextVertex", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", 0x2, NULL, NULL },
    { "removeSegmentCoords", NULL, "V", 0x2, NULL, NULL },
    { "removeSegmentCoordsWithInt:withOrgGeogebraCommonKernelGeosGeoPolygon:", "removeSegmentCoords", "V", 0x2, NULL, NULL },
    { "nextVertexWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withOrgGeogebraCommonKernelKernelNDGeoElementND:withOrgGeogebraCommonKernelKernelNDGeoElementND:", "nextVertex", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", 0x2, NULL, NULL },
    { "addVertices", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$Vertices;", 0x2, NULL, NULL },
    { "addPolyhedronVerticesToOutputWithInt:withInt:withInt:", "addPolyhedronVerticesToOutput", "V", 0x2, NULL, NULL },
    { "addToVerticesListWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices:", "addToVerticesList", "V", 0x2, NULL, NULL },
    { "updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler:", "updateLabels", "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x11, NULL, NULL },
    { "createOutput", NULL, "V", 0x12, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCmdOutputXMLWithJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "getCmdOutputXML", "V", 0x4, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polyhedron_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPolyhedron;", NULL, NULL,  },
    { "outputPolygons_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "outputPoints_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D;>;",  },
    { "outputSegments_AlgoIntersectRegionPlanePolyhedron_", "outputSegments", 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "hasLabels_AlgoIntersectRegionPlanePolyhedron_", "hasLabels", 0x2, "Z", NULL, NULL,  },
    { "newCoords_AlgoIntersectRegionPlanePolyhedron_", "newCoords", 0x4, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;>;",  },
    { "polyhedronVertices_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/Matrix/Coords;>;",  },
    { "parentToPolygons_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lorg/geogebra/common/kernel/kernelND/GeoElementND;Ljava/util/TreeSet<Lorg/geogebra/common/kernel/geos/GeoPolygon;>;>;",  },
    { "newCoordsList_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lorg/geogebra/common/kernel/geos/GeoPolygon;Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Segment;>;>;",  },
    { "verticesList_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$VerticesList;", NULL, NULL,  },
    { "polyhedronFaces_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Vertices;>;",  },
    { "checkVerticesList_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Vertices;>;",  },
    { "segmentCoords_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Segment;>;",  },
    { "removeSegmentCoordsIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "removeSegmentCoordsPolygon_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "COORDS_COMPARATOR_", NULL, 0x19, "Ljava.util.Comparator;", &OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_, "Ljava/util/Comparator<Lorg/geogebra/common/kernel/Matrix/Coords;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$Segment;", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$Vertices;", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$VerticesList;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron = { 2, "AlgoIntersectRegionPlanePolyhedron", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 27, methods, 16, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron;
}

@end

JavaUtilTreeSet *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getPolygonsWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *coords) {
  return [((JavaUtilTreeMap *) nil_chk(self->parentToPolygons_)) getWithId:((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(coords))->parent_];
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(self, c, plane, p, NO);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, c, plane, p);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, jboolean hasLabels) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->hasLabels_AlgoIntersectRegionPlanePolyhedron_ = NO;
  self->hasLabels_AlgoIntersectRegionPlanePolyhedron_ = hasLabels;
  [self setFirstInputWithOrgGeogebraCommonKernelGeosGeoElement:plane];
  [self setSecondInputWithOrgGeogebraCommonKernelGeosGeoElement:p];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_createOutput(self);
  [self setInputOutput];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, jboolean hasLabels) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(self, c, plane, p, hasLabels);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, IOSIntArray *outputSizes) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(self, c, plane, p, YES);
  if (labels == nil) {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) setLabelsWithNSStringArray:nil];
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) setLabelsWithNSStringArray:nil];
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_AlgoIntersectRegionPlanePolyhedron_)) setLabelsWithNSStringArray:nil];
  }
  else {
    jint labelsLength = labels->size_;
    if (labelsLength > 1) {
      if (outputSizes != nil) {
        [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) adjustOutputSizeWithInt:IOSIntArray_Get(outputSizes, 0) withBoolean:NO];
        [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) adjustOutputSizeWithInt:IOSIntArray_Get(outputSizes, 1) withBoolean:NO];
        [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_AlgoIntersectRegionPlanePolyhedron_)) adjustOutputSizeWithInt:IOSIntArray_Get(outputSizes, 2) withBoolean:NO];
        jint i1 = 0;
        jint i2 = 0;
        while (i1 < IOSIntArray_Get(outputSizes, 0)) {
          [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([self->outputPolygons_ getElementWithInt:i1])) setLabelWithNSString:IOSObjectArray_Get(labels, i2)];
          i1++;
          i2++;
        }
        i1 = 0;
        while (i1 < IOSIntArray_Get(outputSizes, 1)) {
          [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self->outputPoints_ getElementWithInt:i1])) setLabelWithNSString:IOSObjectArray_Get(labels, i2)];
          i1++;
          i2++;
        }
        i1 = 0;
        while (i1 < IOSIntArray_Get(outputSizes, 2)) {
          [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([self->outputSegments_AlgoIntersectRegionPlanePolyhedron_ getElementWithInt:i1])) setLabelWithNSString:IOSObjectArray_Get(labels, i2)];
          i1++;
          i2++;
        }
      }
      else {
        [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) setLabelsWithNSStringArray:nil];
        [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_AlgoIntersectRegionPlanePolyhedron_)) setLabelsWithNSStringArray:nil];
        [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) setLabelsWithNSStringArray:nil];
      }
    }
    else if (labelsLength == 1) {
      [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
    }
  }
  [self update];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, IOSIntArray *outputSizes) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(self, c, labels, plane, p, outputSizes);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->p_)) isDefined]) return;
  [self setIntersectionLine];
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->d1_)) isZero] && !(OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->o1_)) getW]))) {
    IOSObjectArray *points = [self->p_ getPointsND];
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self);
    {
      IOSObjectArray *a__ = points;
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = *b__++;
        [vertices addWithId:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3]];
      }
    }
    [vertices setDirection];
    [((JavaUtilArrayList *) nil_chk(self->polyhedronFaces_)) addWithId:vertices];
  }
  else {
    if (self->newCoords_AlgoIntersectRegionPlanePolyhedron_ == nil) self->newCoords_AlgoIntersectRegionPlanePolyhedron_ = new_JavaUtilTreeSet_init();
    else [self->newCoords_AlgoIntersectRegionPlanePolyhedron_ clear];
    [self intersectionsCoordsWithOrgGeogebraCommonKernelGeosGeoPolygon:self->p_];
    [self addPolygonPoints];
    if ([((JavaUtilTreeSet *) nil_chk(self->newCoords_AlgoIntersectRegionPlanePolyhedron_)) size] > 1) {
      self->segmentCoords_ = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getSegmentsCoords(self);
      if ([((JavaUtilArrayList *) nil_chk(self->segmentCoords_)) size] > 0) {
        (void) [((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) putWithId:self->p_ withId:self->segmentCoords_];
      }
    }
  }
}

JavaUtilArrayList *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getSegmentsCoords(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->newCoords_AlgoIntersectRegionPlanePolyhedron_)) iterator];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *b = [((id<JavaUtilIterator>) nil_chk(it)) next];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startSegment = nil;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *endSegment = nil;
  while ([it hasNext]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *a = b;
    b = [it next];
    if ([self checkMidpointWithOrgGeogebraCommonKernelGeosGeoPolygon:self->p_ withOrgGeogebraCommonKernelMatrixCoords:a withOrgGeogebraCommonKernelMatrixCoords:b]) {
      if (startSegment == nil) startSegment = a;
      endSegment = b;
    }
    else {
      if (startSegment != nil) {
        OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(self, startSegment, endSegment, ret);
        startSegment = nil;
      }
    }
  }
  if (startSegment != nil) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(self, startSegment, endSegment, ret);
  return ret;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startSegment, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *endSegment, JavaUtilArrayList *segmentList) {
  [((JavaUtilArrayList *) nil_chk(segmentList)) addWithId:new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, startSegment, endSegment)];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithOrgGeogebraCommonKernelKernelNDGeoElementND_(self, ((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(startSegment))->parent_);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithOrgGeogebraCommonKernelKernelNDGeoElementND_(self, ((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(endSegment))->parent_);
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, id<OrgGeogebraCommonKernelKernelNDGeoElementND> parent) {
  JavaUtilTreeSet *polygons = [((JavaUtilTreeMap *) nil_chk(self->parentToPolygons_)) getWithId:parent];
  if (polygons == nil) {
    polygons = new_JavaUtilTreeSet_init();
    (void) [self->parentToPolygons_ putWithId:parent withId:polygons];
  }
  [((JavaUtilTreeSet *) nil_chk(polygons)) addWithId:self->p_];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonKernelGeosGeoPolygon *p2, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint, id<OrgGeogebraCommonKernelKernelNDGeoElementND> oldPoint) {
  self->segmentCoords_ = [((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) getWithId:p2];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *a;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *b = nil;
  jboolean notFound = YES;
  jint i;
  for (i = 0; i < [((JavaUtilArrayList *) nil_chk(self->segmentCoords_)) size] && notFound; i++) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *segment = [self->segmentCoords_ getWithInt:i];
    a = ((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *) nil_chk(segment))->p1_;
    if (((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(a))->parent_ == ((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(startPoint))->parent_) {
      b = segment->p2_;
      if (((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(b))->parent_ != oldPoint) {
        notFound = NO;
      }
    }
    else {
      b = a;
      a = segment->p2_;
      if (((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(a))->parent_ == startPoint->parent_) {
        if (b->parent_ != oldPoint) {
          notFound = NO;
        }
      }
    }
  }
  if (notFound) {
    b = nil;
  }
  else {
    self->removeSegmentCoordsIndex_ = i - 1;
    self->removeSegmentCoordsPolygon_ = p2;
  }
  return b;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, self->removeSegmentCoordsIndex_, self->removeSegmentCoordsPolygon_);
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, jint index, OrgGeogebraCommonKernelGeosGeoPolygon *p2) {
  (void) [((JavaUtilArrayList *) nil_chk(self->segmentCoords_)) removeWithInt:index];
  if ([self->segmentCoords_ size] == 0) (void) [((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) removeWithId:p2];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_withOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint, id<OrgGeogebraCommonKernelKernelNDGeoElementND> oldParent, id<OrgGeogebraCommonKernelKernelNDGeoElementND> firstParent) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *b;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *bFirstPoint = nil;
  OrgGeogebraCommonKernelGeosGeoPolygon *pFirstPoint = nil;
  jint indexFirstPoint = 0;
  if ([((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) containsKeyWithId:self->p_]) {
    b = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_(self, self->p_, startPoint, oldParent);
    if (b != nil) {
      if (b->parent_ == firstParent) {
        bFirstPoint = b;
        pFirstPoint = self->p_;
        indexFirstPoint = self->removeSegmentCoordsIndex_;
      }
      else {
        OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(self);
        return b;
      }
    }
  }
  JavaUtilTreeSet *polySet = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getPolygonsWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, startPoint);
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(polySet)) iterator];
  OrgGeogebraCommonKernelGeosGeoPolygon *p2 = nil;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    p2 = [it next];
    if (p2 != self->p_ && [self->newCoordsList_ containsKeyWithId:p2]) {
      b = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_(self, p2, startPoint, oldParent);
      if (b != nil) {
        if (b->parent_ == firstParent) {
          bFirstPoint = b;
          pFirstPoint = p2;
          indexFirstPoint = self->removeSegmentCoordsIndex_;
        }
        else {
          self->p_ = p2;
          OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(self);
          return b;
        }
      }
    }
  }
  if (bFirstPoint != nil) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, indexFirstPoint, pFirstPoint);
    self->p_ = pFirstPoint;
    return bFirstPoint;
  }
  return nil;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addVertices(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self);
  self->segmentCoords_ = [((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) getWithId:self->p_];
  if ([((JavaUtilArrayList *) nil_chk(self->segmentCoords_)) isEmpty]) {
    (void) [self->newCoordsList_ removeWithId:self->p_];
    return nil;
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *firstPoint = ((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *) nil_chk([self->segmentCoords_ getWithInt:0]))->p1_;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint = ((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *) nil_chk([self->segmentCoords_ getWithInt:0]))->p2_;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, 0, self->p_);
  [vertices addWithId:firstPoint];
  id<OrgGeogebraCommonKernelKernelNDGeoElementND> oldParent = nil;
  while (((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(startPoint))->parent_ != ((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(firstPoint))->parent_) {
    [vertices addWithId:startPoint];
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *c = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonKernelKernelNDGeoElementND_withOrgGeogebraCommonKernelKernelNDGeoElementND_(self, startPoint, oldParent, firstPoint->parent_);
    if (c == nil) return nil;
    oldParent = startPoint->parent_;
    startPoint = c;
  }
  return vertices;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, jint indexPolygon, jint indexPoint, jint indexSegment) {
  for (OrgGeogebraCommonKernelMatrixCoords * __strong coords in nil_chk(self->polyhedronVertices_)) {
    OrgGeogebraCommonKernelGeosGeoPolygon *outputPoly = [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) getElementWithInt:indexPolygon];
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) getElementWithInt:indexPoint];
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:coords];
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *seg = [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_AlgoIntersectRegionPlanePolyhedron_)) getElementWithInt:indexSegment];
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) modifyInputPolyAndPointsWithOrgGeogebraCommonKernelGeosGeoElement:outputPoly withOrgGeogebraCommonKernelKernelNDGeoPointND:point withOrgGeogebraCommonKernelKernelNDGeoPointND:point];
    [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(outputPoly)) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:[IOSObjectArray newArrayWithObjects:(id[]){ point, point } count:2 type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()] withOrgGeogebraCommonKernelMatrixCoordSys:nil withBoolean:NO];
    [outputPoly setSegmentsWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:[IOSObjectArray newArrayWithObjects:(id[]){ seg, seg } count:2 type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_class_()]];
    [outputPoly calcArea];
    indexPolygon++;
    indexPoint++;
    indexSegment++;
  }
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices) {
  [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *) nil_chk(self->verticesList_)) addWithId:vertices];
  if ([((JavaUtilTreeSet *) nil_chk(self->polyhedronVertices_)) size] > 0) {
    for (OrgGeogebraCommonKernelMatrixCoords * __strong coords in nil_chk(vertices)) {
      [self->polyhedronVertices_ removeWithId:coords];
    }
  }
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithOrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputHandler) {
  if (self->hasLabels_AlgoIntersectRegionPlanePolyhedron_) [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputHandler)) updateLabels];
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_createOutput(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  self->outputPolygons_ = new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self));
  [self->outputPolygons_ adjustOutputSizeWithInt:1 withBoolean:NO];
  self->outputPoints_ = new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self));
  [self->outputPoints_ adjustOutputSizeWithInt:1 withBoolean:NO];
  self->outputSegments_AlgoIntersectRegionPlanePolyhedron_ = new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$
                                                                                withJavaLangDouble:(JavaLangDouble *)parameter
                                                           withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v
                                                   withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)parent {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelKernelNDGeoElementND_(self, outer$, parameter, v, parent);
  return self;
}

- (jint)compareToWithId:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)o {
  (void) check_class_cast(o, [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent class]);
  if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_([((JavaLangDouble *) nil_chk(parameter_)) doubleValue], [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(o))->parameter_ doubleValue])) return 1;
  if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_([o->parameter_ doubleValue], [parameter_ doubleValue])) return -1;
  return [self compareParentToWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:o];
}

- (jint)compareParentToWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)o {
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoElementND>) nil_chk(parent_)) toGeoElement])) compareToWithId:[((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(o))->parent_ toGeoElement]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:withJavaLangDouble:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelKernelNDGeoElementND:", "CoordsWithParent", NULL, 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "compareParentToWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:", "compareParentTo", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoElementND;", NULL, NULL,  },
    { "parameter_", NULL, 0x2, "Ljava.lang.Double;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent = { 2, "CoordsWithParent", "org.geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x2, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Lorg/geogebra/common/kernel/Matrix/Coords;Ljava/lang/Comparable<Lorg/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;>;" };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, JavaLangDouble *parameter, OrgGeogebraCommonKernelMatrixCoords *v, id<OrgGeogebraCommonKernelKernelNDGeoElementND> parent) {
  (void) OrgGeogebraCommonKernelMatrixCoords_initWithOrgGeogebraCommonKernelMatrixCoords_(self, v);
  self->parent_ = parent;
  self->parameter_ = parameter;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, JavaLangDouble *parameter, OrgGeogebraCommonKernelMatrixCoords *v, id<OrgGeogebraCommonKernelKernelNDGeoElementND> parent) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelKernelNDGeoElementND_(self, outer$, parameter, v, parent);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$
   withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)p1
   withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)p2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, outer$, p1, p2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:", "Segment", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "p1_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", NULL, NULL,  },
    { "p2_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment = { 2, "Segment", "org.geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x2, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p2) {
  (void) NSObject_init(self);
  self->p1_ = p1;
  self->p2_ = p2;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, outer$, p1, p2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

- (jboolean)addWithId:(OrgGeogebraCommonKernelMatrixCoords *)e {
  if (lowest_ == -1) {
    lowest_ = 0;
  }
  else {
    if ([((id<JavaUtilComparator>) nil_chk(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_())) compareWithId:e withId:[self getWithInt:lowest_]] < 0) {
      lowest_ = [self size];
    }
  }
  return [super addWithId:e];
}

- (void)setDirection {
  jint n1 = lowest_ - 1;
  jint n2 = lowest_ + 1;
  if (n1 < 0) {
    n1 = [self size] - 1;
  }
  else if (n2 >= [self size]) {
    n2 = 0;
  }
  if ([((id<JavaUtilComparator>) nil_chk(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_())) compareWithId:[self getWithInt:n1] withId:[self getWithInt:n2]] < 0) {
    direction_ = -1;
  }
  else {
    direction_ = 1;
  }
}

- (OrgGeogebraCommonKernelMatrixCoords *)next {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(self);
}

- (void)start {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(self);
}

- (jint)compareToWithId:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)o {
  (void) check_class_cast(o, [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices class]);
  if ([self size] < [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *) nil_chk(o)) size]) return -1;
  if ([o size] < [self size]) return 1;
  if ([((id<JavaUtilComparator>) nil_chk(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_())) compareWithId:[self getWithInt:lowest_] withId:[o getWithInt:o->lowest_]] < 0) return -1;
  if ([OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_() compareWithId:[self getWithInt:lowest_] withId:[o getWithInt:o->lowest_]] > 0) return 1;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(self);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(o);
  jint visited = 0;
  while (visited < [self size]) {
    OrgGeogebraCommonKernelMatrixCoords *thisCoords = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(self);
    OrgGeogebraCommonKernelMatrixCoords *oCoords = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(o);
    if ([OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_() compareWithId:thisCoords withId:oCoords] < 0) return -1;
    if ([OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_() compareWithId:thisCoords withId:oCoords] > 0) return 1;
    visited++;
  }
  return 0;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "Vertices", NULL, 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "setDirection", NULL, "V", 0x1, NULL, NULL },
    { "next", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "start", NULL, "V", 0x2, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lowest_", NULL, 0x2, "I", NULL, NULL,  },
    { "direction_", NULL, 0x2, "S", NULL, NULL,  },
    { "current_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.Matrix.Coords;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices = { 2, "Vertices", "org.geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x2, 6, methods, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/Matrix/Coords;>;Ljava/lang/Comparable<Lorg/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Vertices;>;" };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  (void) JavaUtilArrayList_init(self);
  self->lowest_ = -1;
  self->direction_ = 0;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self) {
  self->current_ += self->direction_;
  if (self->current_ >= [self size]) {
    self->current_ = 0;
  }
  else if (self->current_ < 0) {
    self->current_ = [self size] - 1;
  }
  return [self getWithInt:self->current_];
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self) {
  self->current_ = self->lowest_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

- (jboolean)addWithId:(JavaUtilArrayList *)vertices {
  cumulateSize_ += [((JavaUtilArrayList *) nil_chk(vertices)) size];
  return [super addWithId:vertices];
}

- (void)clear {
  cumulateSize_ = 0;
  [super clear];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "VerticesList", NULL, 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cumulateSize_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Ljava.util.ArrayList;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList = { 2, "VerticesList", "org.geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x2, 3, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/ArrayList<Ljava/util/ArrayList<Lorg/geogebra/common/kernel/Matrix/Coords;>;>;" };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  (void) JavaUtilArrayList_init(self);
  self->cumulateSize_ = 0;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)newElement {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *p = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(this$0_->cons_, YES);
  [p setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:this$0_];
  if ([((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPolygons_)) size] > 0) [p setAllVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:[this$0_->outputPolygons_ getElementWithInt:0] withBoolean:NO];
  [p setViewFlagsWithJavaUtilList:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([this$0_ getFirstInput])) getViewSet]];
  [p setVisibleInView3DWithOrgGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  [p setVisibleInViewForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  [p setNotFixedPointsLengthWithBoolean:YES];
  [p setOrthoNormalRegionCS];
  if (this$0_->hasLabels_AlgoIntersectRegionPlanePolyhedron_) {
    [p setInitLabelsCalledWithBoolean:YES];
  }
  return p;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron", "createOutput" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 = { 2, "", "org.geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;" };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)newElement {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *newPoint = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(this$0_->cons_);
  [newPoint setCoordsWithDouble:0 withDouble:0 withDouble:0 withDouble:1];
  [newPoint setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:this$0_];
  [newPoint setAuxiliaryObjectWithBoolean:YES];
  [newPoint setViewFlagsWithJavaUtilList:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([this$0_ getFirstInput])) getViewSet]];
  [newPoint setVisibleInView3DWithOrgGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  [newPoint setVisibleInViewForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  jint size = [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPoints_)) size];
  if (size > 0) {
    jboolean visible = NO;
    jboolean labelVisible = NO;
    for (jint i = 0; i < size && !visible && !labelVisible; i++) {
      visible = (visible || [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([this$0_->outputPoints_ getElementWithInt:i])) isEuclidianVisible]);
      labelVisible = (labelVisible || [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([this$0_->outputPoints_ getElementWithInt:i])) getLabelVisible]);
    }
    [newPoint setEuclidianVisibleWithBoolean:visible];
    if (!visible) {
      [newPoint dontSetEuclidianVisibleBySetParentAlgorithm];
    }
    [newPoint setLabelVisibleWithBoolean:labelVisible];
  }
  if ([((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPolygons_)) size] > 0) {
    OrgGeogebraCommonKernelGeosGeoPolygon *polygon = [this$0_->outputPolygons_ getElementWithInt:0];
    if ([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getShowObjectCondition] != nil) {
      @try {
        [newPoint setShowObjectConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:[polygon getShowObjectCondition]];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
  return newPoint;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron", "createOutput" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 = { 2, "", "org.geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D;>;" };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)newElement {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *segment = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPolygons_)) getElementWithInt:0])) createSegmentWithOrgGeogebraCommonKernelKernelNDGeoPointND:[((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPoints_)) getElementWithInt:0] withOrgGeogebraCommonKernelKernelNDGeoPointND:[this$0_->outputPoints_ getElementWithInt:0] withBoolean:YES], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setAuxiliaryObjectWithBoolean:YES];
  [segment setViewFlagsWithJavaUtilList:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([this$0_ getFirstInput])) getViewSet]];
  [segment setVisibleInView3DWithOrgGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  [segment setVisibleInViewForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  return segment;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron", "createOutput" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 = { 2, "", "org.geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;" };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *self, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1

- (jint)compareWithId:(OrgGeogebraCommonKernelMatrixCoords *)o1
               withId:(OrgGeogebraCommonKernelMatrixCoords *)o {
  if (((IOSDoubleArray *) nil_chk(((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o1))->val_))->size_ < ((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o))->val_->size_) return -1;
  if (o1->val_->size_ > o->val_->size_) return 1;
  for (jint i = 0; i < o1->val_->size_; i++) {
    if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(IOSDoubleArray_Get(o->val_, i), IOSDoubleArray_Get(o1->val_, i))) return -1;
    if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(IOSDoubleArray_Get(o1->val_, i), IOSDoubleArray_Get(o->val_, i))) return 1;
  }
  return 0;
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 = { 2, "", "org.geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/geogebra/common/kernel/Matrix/Coords;>;" };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init() {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1)
