//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoVolume.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoVolume.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/kernelND/HasVolume.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume () {
 @public
  id<OrgGeogebraCommonKernelKernelNDHasVolume> hasVolume_;
  OrgGeogebraCommonKernelGeosGeoNumeric *volume_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume, hasVolume_, id<OrgGeogebraCommonKernelKernelNDHasVolume>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume, volume_, OrgGeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_compute(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume *self);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDHasVolume:(id<OrgGeogebraCommonKernelKernelNDHasVolume>)hasVolume {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDHasVolume_(self, cons, label, hasVolume);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Volume();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(hasVolume_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:volume_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getVolume {
  return volume_;
}

- (void)compute {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_compute(self);
}

- (void)dealloc {
  RELEASE_(hasVolume_);
  RELEASE_(volume_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDHasVolume:", "AlgoVolume", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVolume", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hasVolume_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.HasVolume;", NULL, NULL,  },
    { "volume_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume = { 2, "AlgoVolume", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDHasVolume_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDHasVolume> hasVolume) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_set_hasVolume_(self, hasVolume);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_setAndConsume_volume_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_compute(self);
  [self->volume_ setLabelWithNSString:label];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDHasVolume_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDHasVolume> hasVolume) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDHasVolume_(self, cons, label, hasVolume);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_compute(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume *self) {
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->volume_)) setValueWithDouble:[((id<OrgGeogebraCommonKernelKernelNDHasVolume>) nil_chk(self->hasVolume_)) getVolume]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume)
