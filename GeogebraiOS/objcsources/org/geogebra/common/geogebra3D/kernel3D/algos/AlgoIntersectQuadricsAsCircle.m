//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectQuadricsAsCircle.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectQuadricsAsCircle.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle () {
 @public
  OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric1_, *quadric2_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle, quadric1_, OrgGeogebraCommonKernelKernelNDGeoQuadricND *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle, quadric2_, OrgGeogebraCommonKernelKernelNDGeoQuadricND *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
            withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric1
            withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, labels, quadric1, quadric2);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
            withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric1
            withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, quadric1, quadric2);
  return self;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)getConic {
  return circle_;
}

- (void)compute {
  if (![((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric1_)) isDefined] || ![((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric2_)) isDefined]) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle_)) setDefined];
  if ([quadric1_ getType] == OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE) {
    if ([((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric2_)) getType] == OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE) {
      OrgGeogebraCommonKernelMatrixCoords *o1 = [quadric1_ getMidpoint3D];
      jdouble r1 = [quadric1_ getHalfAxisWithInt:0];
      OrgGeogebraCommonKernelMatrixCoords *o2 = [quadric2_ getMidpoint3D];
      jdouble r2 = [quadric2_ getHalfAxisWithInt:0];
      if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o1)) equalsForKernelWithOrgGeogebraCommonKernelMatrixCoords:o2]) {
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(r1) && OrgGeogebraCommonKernelKernel_isZeroWithDouble_(r2)) {
          OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_withOrgGeogebraCommonKernelMatrixCoords_(circle_, o1);
          return;
        }
        if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(r1, r2)) {
          [circle_ setUndefined];
          return;
        }
        [circle_ empty];
        return;
      }
      OrgGeogebraCommonKernelMatrixCoords *v = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o2)) subWithOrgGeogebraCommonKernelMatrixCoords:o1];
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) calcNorm];
      jdouble d = [v getNorm];
      if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(d, r1 + r2)) {
        [circle_ empty];
        return;
      }
      v = [v mulWithDouble:1 / d];
      jdouble x = (d + (r1 * r1 - r2 * r2) / d) / 2;
      OrgGeogebraCommonKernelMatrixCoords *o = [o1 addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) mulWithDouble:x]];
      IOSObjectArray *vs = [v completeOrthonormal];
      OrgGeogebraCommonKernelMatrixCoordSys *coordSys = [circle_ getCoordSys];
      [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys)) resetCoordSys];
      [coordSys addPointWithOrgGeogebraCommonKernelMatrixCoords:o];
      [coordSys addVectorWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(vs), 0)];
      [coordSys addVectorWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(vs, 1)];
      [coordSys makeOrthoMatrixWithBoolean:NO withBoolean:NO];
      [circle_ setSphereNDWithOrgGeogebraCommonKernelMatrixCoords:[new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_(0, 0) autorelease] withDouble:JavaLangMath_sqrtWithDouble_(r1 * r1 - x * x)];
      return;
    }
  }
  [circle_ setUndefined];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_IntersectConic();
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionCircleOfAB" withNSString:[((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric1_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric2_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]]];
  return [sb description];
}

- (void)dealloc {
  RELEASE_(quadric1_);
  RELEASE_(quadric2_);
  RELEASE_(circle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoIntersectQuadricsAsCircle", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoIntersectQuadricsAsCircle", NULL, 0x0, NULL, NULL },
    { "getConic", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "quadric1_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoQuadricND;", NULL, NULL,  },
    { "quadric2_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoQuadricND;", NULL, NULL,  },
    { "circle_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle = { 2, "AlgoIntersectQuadricsAsCircle", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric1, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, quadric1, quadric2);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->circle_)) setLabelWithNSString:nil];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric1, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, labels, quadric1, quadric2);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric1, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_set_quadric1_(self, quadric1);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_set_quadric2_(self, quadric2);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_setAndConsume_circle_(self, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons, YES));
  [self->circle_ setCoordSysWithOrgGeogebraCommonKernelMatrixCoordSys:[new_OrgGeogebraCommonKernelMatrixCoordSys_initWithInt_(2) autorelease]];
  [self setInputOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ quadric1, quadric2 } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()] withOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ self->circle_ } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]];
  [self compute];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric1, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, quadric1, quadric2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle)
