//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersect3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersect3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D () {
 @public
  jint numberOfUsers_AlgoIntersect3D_;
  IOSBooleanArray *didSetIntersectionPoint_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D, didSetIntersectionPoint_, IOSBooleanArray *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)avoidDoubleTangentPoint {
  IOSObjectArray *points = [self getIntersectionPoints];
  if (![((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(points), 1))) isLabelSet] && [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(points, 0))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(points, 1)]) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(points, 1))) setUndefined];
  }
}

- (jint)getClosestPointIndexWithDouble:(jdouble)xRW
                            withDouble:(jdouble)yRW
withOrgGeogebraCommonKernelMatrixCoordMatrix:(OrgGeogebraCommonKernelMatrixCoordMatrix *)mat {
  IOSObjectArray *P = [self getIntersectionPoints];
  jdouble x, y, lengthSqr, mindist = JavaLangDouble_POSITIVE_INFINITY;
  jint minIndex = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_; i++) {
    OrgGeogebraCommonKernelMatrixCoords *toScreenCoords;
    if (mat == nil) toScreenCoords = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(P, i))) getInhomCoords];
    else toScreenCoords = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([mat mulWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(P, i))) getCoords])) getCoordsLast1]])) getInhomCoords];
    x = ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(toScreenCoords)) getX] - xRW);
    y = ([toScreenCoords getY] - yRW);
    lengthSqr = x * x + y * y;
    if (lengthSqr < mindist) {
      mindist = lengthSqr;
      minIndex = i;
    }
  }
  return minIndex;
}

- (IOSObjectArray *)getIntersectionPoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getClosestPointIndexWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)refPoint {
  OrgGeogebraCommonKernelMatrixCoords *refInhom = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(refPoint)) getInhomCoordsInD3];
  IOSObjectArray *P = [self getIntersectionPoints];
  jdouble x, y, z, lengthSqr, mindist = JavaLangDouble_POSITIVE_INFINITY;
  jint minIndex = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_; i++) {
    OrgGeogebraCommonKernelMatrixCoords *PInhom = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(P, i))) getInhomCoordsInD3];
    x = ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(PInhom)) getX] - [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(refInhom)) getX]);
    y = ([PInhom getY] - [refInhom getY]);
    z = ([PInhom getZ] - [refInhom getZ]);
    lengthSqr = x * x + y * y + z * z;
    if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(mindist, lengthSqr)) {
      mindist = lengthSqr;
      minIndex = i;
    }
  }
  return minIndex;
}

- (void)setCoordsWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)destination
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)source {
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(destination, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(source, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) getCoords]];
}

- (void)compute {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initForNearToRelationship {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoIntersect3D", NULL, 0x1, NULL, NULL },
    { "avoidDoubleTangentPoint", NULL, "V", 0x4, NULL, NULL },
    { "getClosestPointIndexWithDouble:withDouble:withOrgGeogebraCommonKernelMatrixCoordMatrix:", "getClosestPointIndex", "I", 0x0, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x401, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x404, NULL, NULL },
    { "getClosestPointIndexWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "getClosestPointIndex", "I", 0x0, NULL, NULL },
    { "setCoordsWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setCoords", "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x401, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "numberOfUsers_AlgoIntersect3D_", "numberOfUsers", 0x2, "I", NULL, NULL,  },
    { "didSetIntersectionPoint_", NULL, 0x2, "[Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D = { 2, "AlgoIntersect3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelKernelNDAlgoIntersectND_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->numberOfUsers_AlgoIntersect3D_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D)
