//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/kernelND/RotateableND.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)angle {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, inArg, angle);
  return self;
}

- (void)setOutput {
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_inGeo_(self, g);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_outGeo_(self, g2);
  if (!([outGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]])) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_out_(self, (id<OrgGeogebraCommonKernelKernelNDRotateableND>) check_protocol_cast(outGeo_, @protocol(OrgGeogebraCommonKernelKernelNDRotateableND)));
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] || [geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]]) return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  return [super getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__WithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) copy3DWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                     withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) copyInternal3DWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)dealloc {
  RELEASE_(inGeo_);
  RELEASE_(outGeo_);
  RELEASE_(out_);
  RELEASE_(angle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoRotate3D", NULL, 0x1, NULL, NULL },
    { "setOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "copy__WithOrgGeogebraCommonKernelGeosGeoElement:", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inGeo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "out_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.RotateableND;", NULL, NULL,  },
    { "angle_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D = { 2, "AlgoRotate3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelArithmeticNumberValue> angle) {
  OrgGeogebraCommonKernelAlgosAlgoTransformation_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_inGeo_(self, inArg);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_angle_(self, angle);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_outGeo_(self, [self getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:self->inGeo_]);
  if (!([self->outGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]])) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_out_(self, (id<OrgGeogebraCommonKernelKernelNDRotateableND>) check_protocol_cast(self->outGeo_, @protocol(OrgGeogebraCommonKernelKernelNDRotateableND)));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D)
