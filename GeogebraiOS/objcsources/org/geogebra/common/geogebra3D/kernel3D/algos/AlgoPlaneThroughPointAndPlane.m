//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndPlane.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPoint.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> cs_AlgoPlaneThroughPointAndPlane_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane, cs_AlgoPlaneThroughPointAndPlane_, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_compute(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *self);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
           withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)cs {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, label, point, cs);
  return self;
}

- (void)compute {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_compute(self);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs_AlgoPlaneThroughPointAndPlane_, [OrgGeogebraCommonKernelGeosGeoElement class]);
}

- (void)dealloc {
  RELEASE_(cs_AlgoPlaneThroughPointAndPlane_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "AlgoPlaneThroughPointAndPlane", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getSecondInput", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cs_AlgoPlaneThroughPointAndPlane_", "cs", 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoCoordSys2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane = { 2, "AlgoPlaneThroughPointAndPlane", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> cs) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, point);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_set_cs_AlgoPlaneThroughPointAndPlane_(self, cs);
  [self setInputOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs, [OrgGeogebraCommonKernelGeosGeoElement class]) } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()] withOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getPlane] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_compute(self);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getPlane])) setLabelWithNSString:label];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> cs) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, label, point, cs);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_compute(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *self) {
  OrgGeogebraCommonKernelMatrixCoordSys *coordsys = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getPlane])) getCoordSys];
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) resetCoordSys];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(self->cs_AlgoPlaneThroughPointAndPlane_)) toGeoElement])) isDefined]) return;
  OrgGeogebraCommonKernelMatrixCoords *o = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3];
  [coordsys addPointWithOrgGeogebraCommonKernelMatrixCoords:o];
  OrgGeogebraCommonKernelMatrixCoordSys *inputCS = [self->cs_AlgoPlaneThroughPointAndPlane_ getCoordSys];
  [coordsys addVectorWithoutCheckMadeCoordSysWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(inputCS)) getVx]];
  [coordsys addVectorWithoutCheckMadeCoordSysWithOrgGeogebraCommonKernelMatrixCoords:[inputCS getVy]];
  [coordsys makeOrthoMatrixWithBoolean:YES withBoolean:NO];
  if ([self->cs_AlgoPlaneThroughPointAndPlane_ isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]]) {
    [coordsys setEquationVectorWithOrgGeogebraCommonKernelMatrixCoords:o withOrgGeogebraCommonKernelMatrixCoords:[inputCS getEquationVector]];
  }
  else {
    [coordsys setEquationVectorWithOrgGeogebraCommonKernelMatrixCoords:o withOrgGeogebraCommonKernelMatrixCoords:[inputCS getVz]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane)
