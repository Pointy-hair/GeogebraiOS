//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D1D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D1D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCoordSys.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)cs1
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)cs2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, cs1, cs2);
  return self;
}

- (void)compute {
  if (![self outputIsDefined]) return;
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> line1 = (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getCS1], @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND));
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> line2 = (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getCS2], @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND));
  OrgGeogebraCommonKernelMatrixCoords *o1 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line1)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  OrgGeogebraCommonKernelMatrixCoords *d1 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([line1 getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithOrgGeogebraCommonKernelMatrixCoords:o1];
  OrgGeogebraCommonKernelMatrixCoords *o2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line2)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  OrgGeogebraCommonKernelMatrixCoords *d2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([line2 getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithOrgGeogebraCommonKernelMatrixCoords:o2];
  IOSObjectArray *project = OrgGeogebraCommonKernelMatrixCoordMatrixUtil_nearestPointsFromTwoLinesWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(o1, d1, o2, d2);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([self getIntersection], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (project == nil) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
  else if (JavaLangDouble_isNaNWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 2))) getWithInt:1])) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getCS1])) isGeoSegment] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getCS1])) isGeoRay] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getCS2])) isGeoSegment] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getCS2])) isGeoRay]) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
    else {
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(project, 0)];
      [p updateCoords];
    }
  }
  else if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 0))) equalsForKernelWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(project, 1) withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) {
    jdouble t1 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 2))) getWithInt:1];
    jdouble t2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 2))) getWithInt:2];
    if (t1 > [line1 getMinParameter] - OrgGeogebraCommonKernelKernel_STANDARD_PRECISION && t1 < [line1 getMaxParameter] + OrgGeogebraCommonKernelKernel_STANDARD_PRECISION && t2 > [line2 getMinParameter] - OrgGeogebraCommonKernelKernel_STANDARD_PRECISION && t2 < [line2 getMaxParameter] + OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(project, 0)];
    else [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
  }
  else [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (NSString *)getIntersectionTypeString {
  return @"IntersectionPointOfAB";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "AlgoIntersectCS1D1D", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x11, NULL, NULL },
    { "getIntersectionTypeString", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D = { 2, "AlgoIntersectCS1D1D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> cs1, id<OrgGeogebraCommonKernelKernelNDGeoLineND> cs2) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs1, [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs2, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> cs1, id<OrgGeogebraCommonKernelKernelNDGeoLineND> cs2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, cs1, cs2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D)
