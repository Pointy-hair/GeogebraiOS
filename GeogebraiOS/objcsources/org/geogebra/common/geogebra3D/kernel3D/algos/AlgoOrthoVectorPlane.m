//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoVectorPlane.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoVectorPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane () {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *vector_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane, vector_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
           withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, label, plane);
  return self;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)getVector {
  return vector_;
}

- (void)compute {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane_, [OrgGeogebraCommonKernelGeosGeoElement class])))) isDefined]) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(vector_)) setUndefined];
    return;
  }
  [self updateCoords];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(vector_)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:vCoords_];
}

- (void)updateCoords {
  if ([plane_ isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]]) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vCoords_)) setValuesWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane_)) getCoordSys])) getEquationVector] withInt:3];
  }
  else {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_set_vCoords_(self, [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane_)) getCoordSys])) getVz]);
  }
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalVector();
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"VectorPerpendicularToA" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(plane_);
  RELEASE_(vector_);
  RELEASE_(vCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "AlgoOrthoVectorPlane", NULL, 0x0, NULL, NULL },
    { "getVector", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "updateCoords", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoCoordSys2D;", NULL, NULL,  },
    { "vector_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", NULL, NULL,  },
    { "vCoords_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane = { 2, "AlgoOrthoVectorPlane", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_setAndConsume_vCoords_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4));
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_set_plane_(self, plane);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_setAndConsume_vector_(self, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane, [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()] withOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ self->vector_ } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]];
  [self->vector_ setLabelWithNSString:label];
  [self compute];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, label, plane);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane)
