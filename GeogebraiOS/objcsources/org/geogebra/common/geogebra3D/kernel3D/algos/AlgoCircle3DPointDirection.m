//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection () {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection, circle_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_compute(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *self);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)secondInput
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)forAxis {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, point, secondInput, forAxis);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)secondInput
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)forAxis {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, point, secondInput, forAxis);
  return self;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)getCircle {
  return circle_;
}

- (void)compute {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_compute(self);
}

- (jboolean)setCoordSys {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) resetCoordSys];
  [coordsys_ addPointWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getInhomCoordsInD3]];
  IOSObjectArray *v = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(forAxis_, @protocol(OrgGeogebraCommonKernelKernelNDGeoDirectionND))))) getDirectionInD3])) completeOrthonormal];
  [coordsys_ addVectorWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(v), 0)];
  [coordsys_ addVectorWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(v, 1)];
  [coordsys_ makeOrthoMatrixWithBoolean:NO withBoolean:NO];
  return YES;
}

- (jdouble)getRadius {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getCenter {
  return point_;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirection {
  return [((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(forAxis_, @protocol(OrgGeogebraCommonKernelKernelNDGeoDirectionND))))) getDirectionInD3];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return secondInput_;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getForAxis {
  return forAxis_;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:[self getCommandString] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(secondInput_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk((forAxis_))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (NSString *)getCommandString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "AlgoCircle3DPointDirection", NULL, 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoCircle3DPointDirection", NULL, 0x1, NULL, NULL },
    { "getCircle", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setCoordSys", NULL, "Z", 0x4, NULL, NULL },
    { "getRadius", NULL, "D", 0x404, NULL, NULL },
    { "getCenter", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getDirection", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getSecondInput", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getForAxis", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCommandString", NULL, "Ljava.lang.String;", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "secondInput_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "forAxis_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", NULL, NULL,  },
    { "coordsys_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.CoordSys;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection = { 2, "AlgoCircle3DPointDirection", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 13, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, OrgGeogebraCommonKernelGeosGeoElement *secondInput, OrgGeogebraCommonKernelGeosGeoElement *forAxis) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->point_ = point;
  self->forAxis_ = forAxis;
  self->secondInput_ = secondInput;
  self->circle_ = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithOrgGeogebraCommonKernelConstruction_(cons);
  self->coordsys_ = new_OrgGeogebraCommonKernelMatrixCoordSys_initWithInt_(2);
  [self->circle_ setCoordSysWithOrgGeogebraCommonKernelMatrixCoordSys:self->coordsys_];
  [self setInputOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray newArrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]), secondInput, forAxis } count:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()] withOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->circle_ } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_compute(self);
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, OrgGeogebraCommonKernelGeosGeoElement *secondInput, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> forAxis) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, point, secondInput, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(forAxis, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->circle_)) setLabelWithNSString:label];
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_compute(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *self) {
  if ([self setCoordSys]) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->circle_)) setDefined];
    [self->circle_ setSphereNDWithOrgGeogebraCommonKernelMatrixCoords:new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_(0, 0) withDouble:[self getRadius]];
  }
  else {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->circle_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection)
