//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineQuadric3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersect3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineQuadric3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/main/Localization.h"

#define OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_serialVersionUID 1LL

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> g_;
  OrgGeogebraCommonKernelKernelNDGeoQuadricND *q_;
  IOSObjectArray *D_;
  jint intersectionType_;
}

- (void)checkIsOnLineWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)p;

- (void)setPointsUndefined;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D, g_, id<OrgGeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D, q_, OrgGeogebraCommonKernelKernelNDGeoQuadricND *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D, D_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D, serialVersionUID, jlong)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_checkIsOnLineWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initForNearToRelationship(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
    withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)q {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, cons, label, g, q);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
    withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)q {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, cons, labels, g, q);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
            withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)q {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, g, q);
  return self;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, q_);
  [self setOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:Q_];
  [self noUndefinedPointsInAlgebraView];
  [self setDependencies];
}

- (IOSObjectArray *)getIntersectionPoints {
  return Q_;
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  return D_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)getLine {
  return g_;
}

- (OrgGeogebraCommonKernelKernelNDGeoQuadricND *)getQuadric {
  return q_;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(q_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)compute {
  OrgGeogebraCommonKernelMatrixCoords *o = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getStartInhomCoords];
  OrgGeogebraCommonKernelMatrixCoords *d = [g_ getDirectionInD3];
  IOSDoubleArray *m = [((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(q_)) getFlatMatrix];
  jdouble v1 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getDirectionInD3])) getX];
  jdouble v2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getDirectionInD3])) getY];
  jdouble v3 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getDirectionInD3])) getZ];
  jdouble Sv1 = IOSDoubleArray_Get(nil_chk(m), 0) * v1 + IOSDoubleArray_Get(m, 4) * v2 + IOSDoubleArray_Get(m, 5) * v3;
  jdouble Sv2 = IOSDoubleArray_Get(m, 4) * v1 + IOSDoubleArray_Get(m, 1) * v2 + IOSDoubleArray_Get(m, 6) * v3;
  jdouble Sv3 = IOSDoubleArray_Get(m, 5) * v1 + IOSDoubleArray_Get(m, 6) * v2 + IOSDoubleArray_Get(m, 2) * v3;
  jdouble p1 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getStartInhomCoords])) getX];
  jdouble p2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getStartInhomCoords])) getY];
  jdouble p3 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getStartInhomCoords])) getZ];
  jdouble u = v1 * Sv1 + v2 * Sv2 + v3 * Sv3;
  jdouble b = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getStartInhomCoords])) getX] * Sv1 + [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getStartInhomCoords])) getY] * Sv2 + [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getStartInhomCoords])) getZ] * Sv3 + IOSDoubleArray_Get(m, 7) * v1 + IOSDoubleArray_Get(m, 8) * v2 + IOSDoubleArray_Get(m, 9) * v3;
  jdouble w = p1 * (IOSDoubleArray_Get(m, 0) * p1 + IOSDoubleArray_Get(m, 4) * p2 + IOSDoubleArray_Get(m, 5) * p3 + IOSDoubleArray_Get(m, 7)) + p2 * (IOSDoubleArray_Get(m, 4) * p1 + IOSDoubleArray_Get(m, 1) * p2 + IOSDoubleArray_Get(m, 6) * p3 + IOSDoubleArray_Get(m, 8)) + p3 * (IOSDoubleArray_Get(m, 5) * p1 + IOSDoubleArray_Get(m, 6) * p2 + IOSDoubleArray_Get(m, 2) * p3 + IOSDoubleArray_Get(m, 9)) + IOSDoubleArray_Get(m, 7) * p1 + IOSDoubleArray_Get(m, 8) * p2 + IOSDoubleArray_Get(m, 9) * p3 + IOSDoubleArray_Get(m, 3);
  OrgGeogebraCommonKernelKernel *kernel = [q_ getKernel];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(u)) {
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(b)) {
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(w)) {
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(Q_), 0))) setUndefined];
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(Q_, 1))) setUndefined];
        intersectionType_ = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_PRODUCING_LINE;
      }
      else {
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(Q_), 0))) setUndefined];
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(Q_, 1))) setUndefined];
        intersectionType_ = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_ASYMPTOTIC_LINE;
      }
    }
    else {
      jdouble t0 = -w / (2.0 * b);
      if (b < 0) {
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(Q_), 0))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[g_ getPointInDWithInt:3 withDouble:t0]];
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(Q_, 1))) setUndefined];
      }
      else {
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(Q_), 0))) setUndefined];
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(Q_, 1))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[g_ getPointInDWithInt:3 withDouble:t0]];
      }
      intersectionType_ = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_MEETING_LINE;
    }
  }
  else {
    jdouble dis = b * b - u * w;
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(dis)) {
      jdouble t1 = -b / u;
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(Q_), 0))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[g_ getPointInDWithInt:3 withDouble:t1]];
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(Q_, 1))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(Q_, 0))) getCoords]];
      intersectionType_ = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_TANGENT_LINE;
    }
    else {
      if (dis > 0) {
        dis = JavaLangMath_sqrtWithDouble_(dis);
        jboolean swap = b < 0.0;
        if (swap) {
          dis = -dis;
        }
        jdouble n = -(b + dis);
        jdouble t1 = swap ? w / n : n / u;
        jdouble t2 = swap ? n / u : w / n;
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(Q_), 0))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[g_ getPointInDWithInt:3 withDouble:t1]];
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(Q_, 1))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[g_ getPointInDWithInt:3 withDouble:t2]];
        intersectionType_ = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_SECANT_LINE;
      }
      else {
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(Q_), 0))) setUndefined];
        [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(Q_, 1))) setUndefined];
        intersectionType_ = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_PASSING_LINE;
      }
    }
  }
  for (jint i = 0; i < 2; i++) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_checkIsOnLineWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_(self, IOSObjectArray_Get(nil_chk(Q_), i));
}

- (void)checkIsOnLineWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)p {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_checkIsOnLineWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_(self, p);
}

- (void)setPointsUndefined {
  for (jint i = 0; i < 2; i++) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(Q_), i))) setUndefined];
}

- (void)initForNearToRelationship {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initForNearToRelationship(self);
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(q_);
  RELEASE_(D_);
  RELEASE_(P_);
  RELEASE_(Q_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:", "AlgoIntersectLineQuadric3D", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:", "AlgoIntersectLineQuadric3D", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoIntersectLineQuadric3D", NULL, 0x0, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x4, NULL, NULL },
    { "getLine", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x0, NULL, NULL },
    { "getQuadric", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoQuadricND;", 0x0, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "checkIsOnLineWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:", "checkIsOnLine", "V", 0x2, NULL, NULL },
    { "setPointsUndefined", NULL, "V", 0x2, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_serialVersionUID },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "q_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoQuadricND;", NULL, NULL,  },
    { "D_", NULL, 0x2, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "P_", NULL, 0x4, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "Q_", NULL, 0x4, "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "intersectionType_", NULL, 0x2, "I", NULL, NULL,  },
    { "INTERSECTION_PRODUCING_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_PRODUCING_LINE },
    { "INTERSECTION_ASYMPTOTIC_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_ASYMPTOTIC_LINE },
    { "INTERSECTION_MEETING_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_MEETING_LINE },
    { "INTERSECTION_TANGENT_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_TANGENT_LINE },
    { "INTERSECTION_SECANT_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_SECANT_LINE },
    { "INTERSECTION_PASSING_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_INTERSECTION_PASSING_LINE },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D = { 2, "AlgoIntersectLineQuadric3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 15, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *q) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, g, q);
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withOrgGeogebraCommonKernelGeosGeoElementArray_(label, self->Q_);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *q) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, cons, label, g, q);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *q) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, g, q);
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, self->Q_);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *q) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, cons, labels, g, q);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoQuadricND *q) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_set_g_(self, g);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_set_q_(self, q);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_setAndConsume_P_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_setAndConsume_Q_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_setAndConsume_D_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()]);
  for (jint i = 0; i < 2; i++) {
    IOSObjectArray_SetAndConsume(self->P_, i, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(cons));
    IOSObjectArray_SetAndConsume(self->Q_, i, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(cons));
    IOSObjectArray_SetAndConsume(self->D_, i, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(cons));
  }
  [self setInputOutput];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initForNearToRelationship(self);
  [self compute];
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoQuadricND *q) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, g, q);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_checkIsOnLineWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p) {
  if (![((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) isDefined]) return;
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(self->g_)) respectLimitedPathWithOrgGeogebraCommonKernelMatrixCoords:[p getCoords] withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION]) [p setUndefined];
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initForNearToRelationship(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D)
