//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointPlane.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrtho.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane ()

- (id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)getCS;

@end

__attribute__((unused)) static id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_getCS(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane *self);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
           withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)cs {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, label, point, cs);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalLine();
}

- (id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)getCS {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_getCS(self);
}

- (void)compute {
  OrgGeogebraCommonKernelMatrixCoordSys *coordsys = [((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_getCS(self))) getCoordSys];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk([self getLine])) setCoordWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3] withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) getVz]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "AlgoOrthoLinePointPlane", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getCS", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoCoordSys2D;", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane = { 2, "AlgoOrthoLinePointPlane", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> cs) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrtho_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, point, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> cs) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, label, point, cs);
  return self;
}

id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_getCS(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane *self) {
  return (id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([self getInputOrtho], @protocol(OrgGeogebraCommonKernelKernelNDGeoCoordSys2D));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane)
