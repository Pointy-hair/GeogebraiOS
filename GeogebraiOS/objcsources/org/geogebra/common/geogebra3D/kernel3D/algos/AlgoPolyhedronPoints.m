//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPoints.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Collection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPoints.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints () {
 @public
  IOSObjectArray *bottomPoints_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> topPoint_;
  jint shift_;
}

- (void)createPolyhedron;

- (void)setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints, bottomPoints_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints, topPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, labels, points);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, c, labels, polygon, point);
  return self;
}

- (void)createOutputSegments {
  outputSegmentsBottom_ = [self createOutputSegmentsHandler];
  outputSegmentsSide_ = [self createOutputSegmentsHandler];
  outputSegmentsTop_ = [self createOutputSegmentsHandler];
}

- (void)createOutputPolygons {
  outputPolygonsBottom_ = [self createOutputPolygonsHandler];
  outputPolygonsSide_ = [self createOutputPolygonsHandler];
  outputPolygonsTop_ = [self createOutputPolygonsHandler];
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels == nil || labels->size_ <= 1) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) initLabelsWithNSStringArray:labels];
  else {
    [self augmentOutputSizeWithInt:labels->size_];
    for (jint i = 0; i < labels->size_; i++) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setLabelWithNSString:IOSObjectArray_Get(labels, i)];
    }
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setAllLabelsAreSetWithBoolean:YES];
  }
}

- (void)augmentOutputSizeWithInt:(jint)length {
  jint n = [self getSideLengthFromLabelsLengthWithInt:length];
  if (n > [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) size]) {
    if ([[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND class]]) {
      OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND *algo = (OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND class]);
      jint nOld = [((OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND *) nil_chk(algo)) getCurrentPointsLength];
      if (nOld < n) {
        [algo computeWithInt:n];
        [self updateOutputWithInt:n];
        [algo computeWithInt:nOld];
      }
      else {
        [self updateOutputWithInt:n];
      }
    }
    else {
      OrgGeogebraCommonKernelGeosGeoPolygon *polygon = [self getBottom];
      jint nOld = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getPointsLength];
      if (nOld < n) {
        [polygon setPointsAndSegmentsLengthWithInt:n];
        [self updateOutputWithInt:n];
        [polygon setPointsAndSegmentsLengthWithInt:nOld];
      }
      [self updateOutputWithInt:n];
    }
  }
}

- (jint)getSideLengthFromLabelsLengthWithInt:(jint)length {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)height {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, polygon, height);
  return self;
}

- (void)initCoords {
}

- (void)updateOutputPoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateOutputSegmentsAndPolygonsParentAlgorithms {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)createPolyhedron {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(self);
}

- (void)createPolyhedronWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)bottomPoints1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateOutputWithInt:(jint)newBottomPointsLength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setBottomWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)polyhedron {
  if (bottom_ != nil) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron)) addPolygonLinkedWithOrgGeogebraCommonKernelGeosGeoPolygon:bottom_];
  }
  else {
    IOSObjectArray *bottomPoints = [self getBottomPoints];
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron)) startNewFace];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(bottomPoints))->size_; i++) {
      [polyhedron addPointToCurrentFaceWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(bottomPoints, i)];
    }
    [polyhedron endCurrentFace];
  }
}

- (OrgGeogebraCommonKernelGeosGeoPolygon *)getBottom {
  if (bottom_ != nil) return bottom_;
  return [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) getElementWithInt:0];
}

- (jint)getShift {
  return shift_;
}

- (jboolean)preCompute {
  if (bottomAsInput_) {
    if (![((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) isDefined]) {
      [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setUndefined];
      return NO;
    }
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setDefined];
    [self updateOutputWithInt:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(bottom_)) getPointsLength]];
    if (height_ == nil && ![((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) wasInitLabelsCalled]) {
      [self updateOutputSegmentsAndPolygonsParentAlgorithms];
    }
  }
  jdouble h;
  if (height_ != nil) {
    h = [height_ getDouble];
  }
  else {
    h = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getTopPoint])) getInhomCoordsInD3])) distPlaneOrientedWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk([self getBottomPoints]), 0))) getInhomCoordsInD3] withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getDirectionInD3]];
  }
  [self updateVolumeWithDouble:JavaLangMath_absWithDouble_(h)];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setOrientedHeightWithDouble:h];
  if (height_ != nil) {
    [polyhedron_ setReverseNormalsForDrawingWithBoolean:[height_ getDouble] < 0];
  }
  return YES;
}

- (void)updateVolumeWithDouble:(jdouble)height {
  if (!bottomAsInput_) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast([self getBottom], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])))) updateCoordSys];
    [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) calcArea];
  }
}

- (IOSObjectArray *)getBottomPoints {
  if (bottom_ != nil) return [bottom_ getPointsND];
  return bottomPoints_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getTopPoint {
  return topPoint_;
}

- (void)setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, p);
}

- (void)setOutputOtherEuclidianVisibleWithBoolean:(jboolean)visible {
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) size]; i++) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([outputSegmentsBottom_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) size]; i++) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([outputSegmentsSide_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsTop_)) size]; i++) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([outputSegmentsTop_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) size]; i++) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([outputPolygonsBottom_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible withBoolean:NO];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) size]; i++) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([outputPolygonsSide_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible withBoolean:NO];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsTop_)) size]; i++) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([outputPolygonsTop_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible withBoolean:NO];
}

- (void)notifyUpdateOutputOther {
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) size]; i++) [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:[outputSegmentsBottom_ getElementWithInt:i]];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) size]; i++) [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:[outputSegmentsSide_ getElementWithInt:i]];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsTop_)) size]; i++) [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:[outputSegmentsTop_ getElementWithInt:i]];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) size]; i++) [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:[outputPolygonsBottom_ getElementWithInt:i]];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) size]; i++) [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:[outputPolygonsSide_ getElementWithInt:i]];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsTop_)) size]; i++) [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:[outputPolygonsTop_ getElementWithInt:i]];
}

- (void)setOutputPointsEuclidianVisibleWithBoolean:(jboolean)visible {
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([outputPoints_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible];
}

- (void)notifyUpdateOutputPoints {
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:[outputPoints_ getElementWithInt:i]];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getBottomMiddlePoint {
  OrgGeogebraCommonKernelMatrixCoords *ret = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  IOSObjectArray *points = [self getBottomPoints];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) ret = [ret addWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomCoordsInD3]];
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(ret)) mulWithDouble:(jdouble) 1 / points->size_];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getTopMiddlePoint {
  OrgGeogebraCommonKernelMatrixCoords *ret = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) ret = [ret addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([outputPoints_ getElementWithInt:i])) getInhomCoordsInD3]];
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(ret)) mulWithDouble:(jdouble) 1 / [outputPoints_ size]];
}

- (OrgGeogebraCommonKernelGeosGeoPolygon *)getTopFace {
  return [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsTop_)) getElementWithInt:0];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)getSideWithInt:(jint)i {
  return [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) getElementWithInt:i];
}

- (id<OrgGeogebraCommonKernelArithmeticNumberValue>)getHeight {
  return height_;
}

- (jboolean)isFirstInputPointVisible {
  OrgGeogebraCommonKernelGeosGeoElement *point = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk([self getBottomPoints]), 0), [OrgGeogebraCommonKernelGeosGeoElement class]);
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(point)) isEuclidianVisible] && [point isLabelSet];
}

- (jboolean)isFirstInputPointLabelVisible {
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk([self getBottomPoints]), 0), [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelVisible];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "AlgoPolyhedronPoints", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoPolyhedronPoints", NULL, 0x1, NULL, NULL },
    { "createOutputSegments", NULL, "V", 0x4, NULL, NULL },
    { "createOutputPolygons", NULL, "V", 0x4, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "augmentOutputSizeWithInt:", "augmentOutputSize", "V", 0x4, NULL, NULL },
    { "getSideLengthFromLabelsLengthWithInt:", "getSideLengthFromLabelsLength", "I", 0x404, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoPolyhedronPoints", NULL, 0x1, NULL, NULL },
    { "initCoords", NULL, "V", 0x4, NULL, NULL },
    { "updateOutputPoints", NULL, "V", 0x404, NULL, NULL },
    { "updateOutputSegmentsAndPolygonsParentAlgorithms", NULL, "V", 0x404, NULL, NULL },
    { "createPolyhedron", NULL, "V", 0x12, NULL, NULL },
    { "createPolyhedronWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "createPolyhedron", "V", 0x404, NULL, NULL },
    { "updateOutputWithInt:", "updateOutput", "V", 0x404, NULL, NULL },
    { "setBottomWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:", "setBottom", "V", 0x4, NULL, NULL },
    { "getBottom", NULL, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", 0x4, NULL, NULL },
    { "getShift", NULL, "I", 0x4, NULL, NULL },
    { "preCompute", NULL, "Z", 0x1, NULL, NULL },
    { "updateVolumeWithDouble:", "updateVolume", "V", 0x4, NULL, NULL },
    { "getBottomPoints", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getTopPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setTopPoint", "V", 0x2, NULL, NULL },
    { "setOutputOtherEuclidianVisibleWithBoolean:", "setOutputOtherEuclidianVisible", "V", 0x1, NULL, NULL },
    { "notifyUpdateOutputOther", NULL, "V", 0x1, NULL, NULL },
    { "setOutputPointsEuclidianVisibleWithBoolean:", "setOutputPointsEuclidianVisible", "V", 0x1, NULL, NULL },
    { "notifyUpdateOutputPoints", NULL, "V", 0x1, NULL, NULL },
    { "getBottomMiddlePoint", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getTopMiddlePoint", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getTopFace", NULL, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "getSideWithInt:", "getSide", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "getHeight", NULL, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "isFirstInputPointVisible", NULL, "Z", 0x14, NULL, NULL },
    { "isFirstInputPointLabelVisible", NULL, "Z", 0x14, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bottomPoints_", NULL, 0x2, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "points_", NULL, 0x4, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "topPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "bottom_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "height_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "bottomAsInput_", NULL, 0x4, "Z", NULL, NULL,  },
    { "bottomPointsLength_", NULL, 0x4, "I", NULL, NULL,  },
    { "outputSegmentsBottom_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "outputSegmentsSide_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "outputSegmentsTop_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "outputPolygonsBottom_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "outputPolygonsSide_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "outputPolygonsTop_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "shift_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints = { 2, "AlgoPolyhedronPoints", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 33, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, IOSObjectArray *points) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedron_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->bottomAsInput_ = NO;
  self->bottomPointsLength_ = -1;
  [self initCoords];
  self->bottomPoints_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ - 1 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (jint i = 0; i < points->size_ - 1; i++) (void) IOSObjectArray_Set(self->bottomPoints_, i, IOSObjectArray_Get(points, i));
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(points, points->size_ - 1));
  self->shift_ = 1;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(self);
  self->input_ = [IOSObjectArray newArrayWithLength:points->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < points->size_; i++) (void) IOSObjectArray_Set(self->input_, i, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class]));
  [self addAlgoToInput];
  [self updateOutputPoints];
  [self createFaces];
  [self setOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
  [self updateOutputSegmentsAndPolygonsParentAlgorithms];
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoPolygon *polygon, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedron_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->bottomAsInput_ = NO;
  self->bottomPointsLength_ = -1;
  [self initCoords];
  self->bottom_ = polygon;
  self->bottomAsInput_ = YES;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, point);
  self->shift_ = 1;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(self);
  self->input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(self->input_, 0, self->bottom_);
  (void) IOSObjectArray_Set(self->input_, 1, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->topPoint_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [self addAlgoToInput];
  [self updateOutputPoints];
  [self createFaces];
  [self setOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
  [self updateOutputSegmentsAndPolygonsParentAlgorithms];
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoPolygon *polygon, id<OrgGeogebraCommonKernelArithmeticNumberValue> height) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedron_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->bottomAsInput_ = NO;
  self->bottomPointsLength_ = -1;
  [self initCoords];
  self->bottom_ = polygon;
  self->bottomAsInput_ = YES;
  self->height_ = height;
  self->shift_ = 0;
  [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) augmentOutputSizeWithInt:1 withBoolean:NO];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, [self->outputPoints_ getElementWithInt:0]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(self);
  self->input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(self->input_, 0, self->bottom_);
  (void) IOSObjectArray_Set(self->input_, 1, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(height, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [self addAlgoToInput];
  [self updateOutputPoints];
  [self createFaces];
  [self setOutput];
  if ([height isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    if ([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(height, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) isIndependent]) {
      for (OrgGeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(self->polyhedron_)) getPolygons])) {
        [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) setChangeableCoordParentWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(height, [OrgGeogebraCommonKernelGeosGeoNumeric class]) withOrgGeogebraCommonKernelGeosGeoElement:self->bottom_];
      }
    }
  }
  [self setLabelsWithNSStringArray:labels];
  [self update];
  [self updateOutputSegmentsAndPolygonsParentAlgorithms];
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self) {
  IOSObjectArray *bottomPoints1 = [self getBottomPoints];
  if (bottomPoints1 == nil) {
    if ([[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND class]]) {
      OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND *algo = (OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND class]);
      [((OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND *) nil_chk(algo)) computeWithInt:3];
      bottomPoints1 = [self getBottomPoints];
      [self createPolyhedronWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:bottomPoints1];
      [algo computeWithInt:2];
    }
  }
  else {
    [self createPolyhedronWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:bottomPoints1];
  }
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p) {
  self->topPoint_ = p;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints)
