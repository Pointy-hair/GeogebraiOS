//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolygon.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/TreeMap.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolygon.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/HasSegments.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon () {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon, plane_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
      withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, c, labels, plane, p);
  return self;
}

- (void)setFirstInputWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_set_plane_(self, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]));
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getFirstInput {
  return plane_;
}

- (void)setIntersectionLine {
  IOSObjectArray *intersection = OrgGeogebraCommonKernelMatrixCoordMatrixUtil_intersectPlanesWithOrgGeogebraCommonKernelMatrixCoordMatrix_withOrgGeogebraCommonKernelMatrixCoordMatrix_([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(plane_)) getCoordSys])) getMatrixOrthonormal], [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(p_, [OrgGeogebraCommonKernelGeosGeoPolygon class])))) getCoordSys])) getMatrixOrthonormal]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_o1_(self, IOSObjectArray_Get(nil_chk(intersection), 0));
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_d1_(self, IOSObjectArray_Get(intersection, 1));
}

- (void)intersectionsCoordsWithOrgGeogebraCommonKernelKernelNDHasSegments:(id<OrgGeogebraCommonKernelKernelNDHasSegments>)p
                                                      withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  [self intersectionsCoordsContainedWithOrgGeogebraCommonKernelKernelNDHasSegments:p withJavaUtilTreeMap:newCoords];
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return YES;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (void)dealloc {
  RELEASE_(plane_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withOrgGeogebraCommonKernelGeosGeoPolygon:", "AlgoIntersectPlanePolygon", NULL, 0x1, NULL, NULL },
    { "setFirstInputWithOrgGeogebraCommonKernelGeosGeoElement:", "setFirstInput", "V", 0x4, NULL, NULL },
    { "getFirstInput", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setIntersectionLine", NULL, "V", 0x4, NULL, NULL },
    { "intersectionsCoordsWithOrgGeogebraCommonKernelKernelNDHasSegments:withJavaUtilTreeMap:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon = { 2, "AlgoIntersectPlanePolygon", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonKernelGeosGeoPolygon *p) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDHasSegments_(self, c, labels, plane, p);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonKernelGeosGeoPolygon *p) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, c, labels, plane, p);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon)
