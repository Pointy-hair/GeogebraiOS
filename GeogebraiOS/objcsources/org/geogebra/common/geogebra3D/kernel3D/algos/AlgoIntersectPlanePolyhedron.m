//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolyhedron.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/util/TreeMap.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/kernelND/HasSegments.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron () {
 @public
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane_;
}

- (OrgGeogebraCommonKernelMatrixCoords *)intersectionCoordsWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)seg;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron, plane_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)

__attribute__((unused)) static OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_intersectionCoordsWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self, id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> seg);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
      withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, c, labels, plane, p);
  return self;
}

- (void)setFirstInputWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->plane_ = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getFirstInput {
  return plane_;
}

- (void)setIntersectionLine {
}

- (void)intersectionsCoordsWithOrgGeogebraCommonKernelKernelNDHasSegments:(id<OrgGeogebraCommonKernelKernelNDHasSegments>)p
                                                      withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDHasSegments>) nil_chk(p)) getSegments]))->size_; i++) {
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> seg = IOSObjectArray_Get(nil_chk([p getSegments]), i);
    OrgGeogebraCommonKernelMatrixCoords *coords = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_intersectionCoordsWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_(self, seg);
    if (coords != nil) (void) [((JavaUtilTreeMap *) nil_chk(newCoords)) putWithId:JavaLangDouble_valueOfWithDouble_((jdouble) i) withId:coords];
  }
}

- (OrgGeogebraCommonKernelMatrixCoords *)intersectionCoordsWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)seg {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_intersectionCoordsWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_(self, seg);
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return YES;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:", "AlgoIntersectPlanePolyhedron", NULL, 0x1, NULL, NULL },
    { "setFirstInputWithOrgGeogebraCommonKernelGeosGeoElement:", "setFirstInput", "V", 0x4, NULL, NULL },
    { "getFirstInput", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setIntersectionLine", NULL, "V", 0x4, NULL, NULL },
    { "intersectionsCoordsWithOrgGeogebraCommonKernelKernelNDHasSegments:withJavaUtilTreeMap:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "intersectionCoordsWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "intersectionCoords", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron = { 2, "AlgoIntersectPlanePolyhedron", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 8, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDHasSegments_(self, c, labels, plane, p);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, c, labels, plane, p);
  return self;
}

OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_intersectionCoordsWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self, id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> seg) {
  OrgGeogebraCommonKernelMatrixCoords *o = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  OrgGeogebraCommonKernelMatrixCoords *d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([seg getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithOrgGeogebraCommonKernelMatrixCoords:o];
  OrgGeogebraCommonKernelMatrixCoords *globalCoords = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  OrgGeogebraCommonKernelMatrixCoords *inPlaneCoords = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(self->plane_)) getCoordSys])) getMatrixOrthonormal] withOrgGeogebraCommonKernelMatrixCoords:d withOrgGeogebraCommonKernelMatrixCoords:globalCoords withOrgGeogebraCommonKernelMatrixCoords:inPlaneCoords];
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([globalCoords getW]) && [seg respectLimitedPathWithDouble:-[inPlaneCoords getWithInt:3]]) return globalCoords;
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron)
