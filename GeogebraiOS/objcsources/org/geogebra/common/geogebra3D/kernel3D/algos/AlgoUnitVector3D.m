//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitVector3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoUnitVector.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)line {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, line);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)line {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, line);
  return self;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)createVectorWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *ret = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(cons);
  return ret;
}

- (void)compute {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(inputGeo_, @protocol(OrgGeogebraCommonKernelKernelNDGeoDirectionND))))) getDirectionInD3];
  length_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) norm];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(length_)) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(u_)) setUndefined];
  }
  else {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast(u_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])))) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[coords mulWithDouble:1 / length_]];
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getInputStartPoint {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inputGeo_)) isGeoLine]) {
    return [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(inputGeo_, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND))) getStartPoint];
  }
  if ([inputGeo_ isGeoVector]) {
    return [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(inputGeo_, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND))) getStartPoint];
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoUnitVector3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoUnitVector3D", NULL, 0x1, NULL, NULL },
    { "createVectorWithOrgGeogebraCommonKernelConstruction:", "createVector", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getInputStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D = { 2, "AlgoUnitVector3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> line) {
  (void) OrgGeogebraCommonKernelAlgosAlgoUnitVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> line) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, line);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> line) {
  (void) OrgGeogebraCommonKernelAlgosAlgoUnitVector_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> line) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, line);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D)
