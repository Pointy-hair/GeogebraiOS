//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricPart.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricLimited.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricPart.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricEnds.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricSide.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart () {
 @public
  OrgGeogebraCommonKernelKernelNDGeoConicND *bottom_, *top_;
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnds *algoEnds_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart, bottom_, OrgGeogebraCommonKernelKernelNDGeoConicND *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart, top_, OrgGeogebraCommonKernelKernelNDGeoConicND *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart, algoEnds_, OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnds *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
      withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
            withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, plane, quadric);
  return self;
}

- (void)end {
  if ([[((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric_)) getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide class]]) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *parent = [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *) check_class_cast([quadric_ getParentAlgorithm], [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide class])))) getInputQuadric];
    bottom_ = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(parent)) getBottom];
    top_ = [parent getTop];
  }
  else {
    jboolean oldSilentMode = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isSilentMode];
    [kernel_ setSilentModeWithBoolean:YES];
    algoEnds_ = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnds_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, quadric_);
    bottom_ = [algoEnds_ getSection1];
    top_ = [algoEnds_ getSection2];
    [kernel_ setSilentModeWithBoolean:oldSilentMode];
  }
  [super end];
}

- (void)compute {
  if (algoEnds_ != nil) {
    [algoEnds_ compute];
  }
  [super compute];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)getBottom {
  return bottom_;
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)getTop {
  return top_;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)getSide {
  return (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(quadric_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]);
}

- (jdouble)getBottomParameter {
  return [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(quadric_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])))) getBottomParameter];
}

- (jdouble)getTopParameter {
  return [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(quadric_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])))) getTopParameter];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoIntersectPlaneQuadricPart", NULL, 0x1, NULL, NULL },
    { "end", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getBottom", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "getTop", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "getSide", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DPart;", 0x4, NULL, NULL },
    { "getBottomParameter", NULL, "D", 0x4, NULL, NULL },
    { "getTopParameter", NULL, "D", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bottom_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "top_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "algoEnds_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoQuadricEnds;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart = { 2, "AlgoIntersectPlaneQuadricPart", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, plane, quadric);
  self->algoEnds_ = nil;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, OrgGeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, plane, quadric);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart)
