//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTransformation3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTransformation3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D

+ (void)toGeoCurveCartesianWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                  withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)geoFun
withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)curve {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_toGeoCurveCartesianWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(kernel, geoFun, curve);
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toGeoCurveCartesianWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:", "toGeoCurveCartesian", "V", 0x19, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D = { 2, "AlgoTransformation3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_toGeoCurveCartesianWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelGeosGeoFunction *geoFun, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_initialize();
  OrgGeogebraCommonKernelArithmeticFunctionVariable *t = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel, @"t");
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(geoFun)) getFunction])) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticExpressionNode *yExp = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([geoFun getFunction])) getExpression])) deepCopyWithOrgGeogebraCommonKernelKernel:kernel], [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:x withOrgGeogebraCommonKernelArithmeticExpressionValue:t], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  IOSObjectArray *fun = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelArithmeticFunction_class_()];
  (void) IOSObjectArray_Set(fun, 0, new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, t), t));
  (void) IOSObjectArray_Set(fun, 1, new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(yExp, t));
  (void) IOSObjectArray_Set(fun, 2, new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 0), t));
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(curve)) setFunWithOrgGeogebraCommonKernelArithmeticFunctionArray:fun];
  if ([geoFun hasInterval]) {
    [curve setIntervalWithDouble:[geoFun getIntervalMin] withDouble:[geoFun getIntervalMax]];
  }
  else {
    jdouble min = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getXminForFunctions];
    jdouble max = [kernel getXmaxForFunctions];
    [curve setIntervalWithDouble:min withDouble:max];
  }
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_init(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_init() {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D)
