//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDiameterLine3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDiameterLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoDiameterLineND.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D () {
 @public
  OrgGeogebraCommonKernelMatrixCoords *direction_, *direction3D_;
  OrgGeogebraCommonKernelGeosGeoLine *diameter2D_;
  IOSDoubleArray *diameterCoords_;
  OrgGeogebraCommonKernelMatrixCoords *diameterOrigin_, *diameterDirection_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D, direction_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D, direction3D_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D, diameter2D_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D, diameterCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D, diameterOrigin_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D, diameterDirection_, OrgGeogebraCommonKernelMatrixCoords *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, c, g);
  return self;
}

- (void)createOutputWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelAlgosAlgoDiameterLineND_setAndConsume_diameter_(self, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_setAndConsume_diameter2D_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_setAndConsume_diameterCoords_(self, [IOSDoubleArray newArrayWithLength:3]);
}

- (void)compute {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_set_direction3D_(self, [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getDirectionInD3]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_set_direction_(self, IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:direction3D_]), 1));
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction_)) getZ])) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(diameter_)) setUndefined];
    return;
  }
  [c_ diameterLineWithDouble:[direction_ getX] withDouble:[direction_ getY] withOrgGeogebraCommonKernelGeosGeoLine:diameter2D_];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(diameter2D_)) getCoordsWithDoubleArray:diameterCoords_];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_set_diameterDirection_(self, [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getVectorWithDouble:-IOSDoubleArray_Get(nil_chk(diameterCoords_), 1) withDouble:IOSDoubleArray_Get(diameterCoords_, 0)]);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(diameterCoords_, 0))) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_set_diameterOrigin_(self, [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:0 withDouble:-IOSDoubleArray_Get(diameterCoords_, 2) / IOSDoubleArray_Get(diameterCoords_, 1)]);
  }
  else {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_set_diameterOrigin_(self, [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:-IOSDoubleArray_Get(diameterCoords_, 2) / IOSDoubleArray_Get(diameterCoords_, 0) withDouble:0]);
  }
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(diameter_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithOrgGeogebraCommonKernelMatrixCoords:diameterOrigin_ withOrgGeogebraCommonKernelMatrixCoords:diameterDirection_];
}

- (void)dealloc {
  RELEASE_(direction_);
  RELEASE_(direction3D_);
  RELEASE_(diameter2D_);
  RELEASE_(diameterCoords_);
  RELEASE_(diameterOrigin_);
  RELEASE_(diameterDirection_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "AlgoDiameterLine3D", NULL, 0x1, NULL, NULL },
    { "createOutputWithOrgGeogebraCommonKernelConstruction:", "createOutput", "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "direction_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "direction3D_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "diameter2D_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "diameterCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "diameterOrigin_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "diameterDirection_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D = { 2, "AlgoDiameterLine3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 3, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelKernelNDGeoConicND *c, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonKernelAlgosAlgoDiameterLineND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, c, g);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelKernelNDGeoConicND *c, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, c, g);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D)
