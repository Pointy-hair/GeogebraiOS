//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarLine3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoPolarLineND.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D () {
 @public
  OrgGeogebraCommonKernelGeosGeoLine *polar2D_;
  OrgGeogebraCommonKernelMatrixCoords *coords2D_;
  IOSDoubleArray *polarCoords_;
  OrgGeogebraCommonKernelMatrixCoords *polarOrigin_, *polarDirection_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, polar2D_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, coords2D_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, polarCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, polarOrigin_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D, polarDirection_, OrgGeogebraCommonKernelMatrixCoords *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, c, P);
  return self;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)newGeoLineWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  polar2D_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons);
  polarCoords_ = [IOSDoubleArray newArrayWithLength:3];
  return new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(cons);
}

- (void)compute {
  coords2D_ = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getInhomCoordsInD3]]), 1);
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords2D_)) getZ])) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(polar_)) setUndefined];
    return;
  }
  [coords2D_ setZWithDouble:1];
  [c_ polarLineWithOrgGeogebraCommonKernelMatrixCoords:coords2D_ withOrgGeogebraCommonKernelGeosGeoLine:polar2D_];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(polar2D_)) getCoordsWithDoubleArray:polarCoords_];
  polarDirection_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getVectorWithDouble:-IOSDoubleArray_Get(nil_chk(polarCoords_), 1) withDouble:IOSDoubleArray_Get(polarCoords_, 0)];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(polarCoords_, 0))) {
    polarOrigin_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:0 withDouble:-IOSDoubleArray_Get(polarCoords_, 2) / IOSDoubleArray_Get(polarCoords_, 1)];
  }
  else {
    polarOrigin_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:-IOSDoubleArray_Get(polarCoords_, 2) / IOSDoubleArray_Get(polarCoords_, 0) withDouble:0];
  }
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(polar_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithOrgGeogebraCommonKernelMatrixCoords:polarOrigin_ withOrgGeogebraCommonKernelMatrixCoords:polarDirection_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoPolarLine3D", NULL, 0x1, NULL, NULL },
    { "newGeoLineWithOrgGeogebraCommonKernelConstruction:", "newGeoLine", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polar2D_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "coords2D_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "polarCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "polarOrigin_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "polarDirection_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D = { 2, "AlgoPolarLine3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 3, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelKernelNDGeoConicND *c, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P) {
  (void) OrgGeogebraCommonKernelAlgosAlgoPolarLineND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, c, P);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelKernelNDGeoConicND *c, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, c, P);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D)
