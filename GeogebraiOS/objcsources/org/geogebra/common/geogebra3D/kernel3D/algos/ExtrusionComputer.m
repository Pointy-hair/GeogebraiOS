//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/ExtrusionComputer.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoForExtrusion.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/ExtrusionComputer.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer () {
 @public
  id<OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion> algo_;
  jint computed_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer, algo_, id<OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion>)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion:(id<OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion>)algo {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion_(self, algo);
  return self;
}

- (void)compute {
  computed_++;
}

- (jint)getComputed {
  return computed_;
}

- (id<OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion>)getAlgo {
  return algo_;
}

- (void)dealloc {
  RELEASE_(algo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion:", "ExtrusionComputer", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getComputed", NULL, "I", 0x1, NULL, NULL },
    { "getAlgo", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoForExtrusion;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algo_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoForExtrusion;", NULL, NULL,  },
    { "computed_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer = { 2, "ExtrusionComputer", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion_(OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer *self, id<OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion> algo) {
  NSObject_init(self);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer_set_algo_(self, algo);
  [((id<OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion>) nil_chk(algo)) setExtrusionComputerWithOrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer:self];
  self->computed_ = 0;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion_(id<OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion> algo) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer_initWithOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion_(self, algo);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosExtrusionComputer)
