//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyLine3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyLine3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D ()

- (void)updatePointArrayWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)pointList;

@end

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_updatePointArrayWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, OrgGeogebraCommonKernelGeosGeoList *pointList);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, labels, geoList);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, labels, points);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
  return self;
}

- (void)createPolyLine {
  OrgGeogebraCommonKernelAlgosAlgoPolyLine_setAndConsume_poly_(self, new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self->cons_, self->points_));
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE;
}

- (void)updatePointArrayWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)pointList {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_updatePointArrayWithOrgGeogebraCommonKernelGeosGeoList_(self, pointList);
}

- (void)update {
  [self compute];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) update];
}

- (IOSObjectArray *)getPointsND {
  return points_;
}

- (void)compute {
  if (geoList_ != nil) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_updatePointArrayWithOrgGeogebraCommonKernelGeosGeoList_(self, geoList_);
  }
  [((OrgGeogebraCommonKernelGeosGeoPolyLine *) nil_chk(poly_)) calcLength];
}

- (void)setInputOutput {
  IOSObjectArray *efficientInput = [self createEfficientInput];
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(efficientInput))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < efficientInput->size_; i++) IOSObjectArray_Set(input_, i, IOSObjectArray_Get(efficientInput, i));
  [self setEfficientDependenciesWithOrgGeogebraCommonKernelGeosGeoElementArray:input_ withOrgGeogebraCommonKernelGeosGeoElementArray:efficientInput];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:poly_];
  [self setDependencies];
}

- (IOSObjectArray *)createEfficientInput {
  IOSObjectArray *efficientInput;
  if (geoList_ != nil) {
    efficientInput = [IOSObjectArray arrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray_Set(efficientInput, 0, geoList_);
  }
  else {
    efficientInput = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points_))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    for (jint i = 0; i < points_->size_; i++) IOSObjectArray_Set(efficientInput, i, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoElement class]));
  }
  return efficientInput;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoPolyLine3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "AlgoPolyLine3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoPolyLine3D", NULL, 0x4, NULL, NULL },
    { "createPolyLine", NULL, "V", 0x4, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "updatePointArrayWithOrgGeogebraCommonKernelGeosGeoList:", "updatePointArray", "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "getPointsND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "createEfficientInput", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D = { 2, "AlgoPolyLine3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, labels, nil, geoList);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, labels, geoList);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, nil);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, labels, points);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelAlgosAlgoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_updatePointArrayWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, OrgGeogebraCommonKernelGeosGeoList *pointList) {
  if (![((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(pointList)) getElementType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_POINT()]) {
    [((OrgGeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  jint size = [pointList size];
  OrgGeogebraCommonKernelAlgosAlgoPolyLine_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:size type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()]);
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(self->points_, i, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([pointList getWithInt:i], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
  }
  [((OrgGeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D)
