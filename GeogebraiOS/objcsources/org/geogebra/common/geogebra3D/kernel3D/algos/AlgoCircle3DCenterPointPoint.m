//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DCenterPointPoint.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DCenterPointPoint.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)center
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pointThrough
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)forAxis {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, center, pointThrough, forAxis);
  return self;
}

- (jdouble)getRadius {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> pointThrough = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getSecondInput], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  OrgGeogebraCommonKernelMatrixCoords *radius = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pointThrough)) getInhomCoordsInD3])) subWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getCenter])) getInhomCoordsInD3]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(radius)) calcNorm];
  return [radius getNorm];
}

- (jboolean)setCoordSys {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) resetCoordSys];
  [coordsys_ addPointWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getInhomCoordsInD3]];
  [coordsys_ addPointWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(secondInput_, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))))) getInhomCoordsInD3]];
  [coordsys_ addPointWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(forAxis_, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))))) getInhomCoordsInD3]];
  [coordsys_ makeOrthoMatrixWithBoolean:NO withBoolean:NO];
  return YES;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (NSString *)getCommandString {
  return @"CircleWithCenterAThroughBParallelToABC";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoCircle3DCenterPointPoint", NULL, 0x1, NULL, NULL },
    { "getRadius", NULL, "D", 0x14, NULL, NULL },
    { "setCoordSys", NULL, "Z", 0x14, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getCommandString", NULL, "Ljava.lang.String;", 0x14, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint = { 2, "AlgoCircle3DCenterPointPoint", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> center, id<OrgGeogebraCommonKernelKernelNDGeoPointND> pointThrough, id<OrgGeogebraCommonKernelKernelNDGeoPointND> forAxis) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, center, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(pointThrough, [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(forAxis, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> center, id<OrgGeogebraCommonKernelKernelNDGeoPointND> pointThrough, id<OrgGeogebraCommonKernelKernelNDGeoPointND> forAxis) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, center, pointThrough, forAxis);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint)
