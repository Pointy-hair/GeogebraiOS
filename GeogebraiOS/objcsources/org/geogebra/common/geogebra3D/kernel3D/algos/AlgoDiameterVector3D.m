//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDiameterVector3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDiameterVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoDiameterVectorND.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D () {
 @public
  OrgGeogebraCommonKernelMatrixCoords *direction_;
  OrgGeogebraCommonKernelGeosGeoLine *diameter2D_;
  IOSDoubleArray *diameterCoords_;
  OrgGeogebraCommonKernelMatrixCoords *diameterOrigin_, *diameterDirection_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D, direction_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D, diameter2D_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D, diameterCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D, diameterOrigin_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D, diameterDirection_, OrgGeogebraCommonKernelMatrixCoords *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
             withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, label, c, v);
  return self;
}

- (void)createOutputWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  diameter_ = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(cons);
  diameter2D_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons);
  diameterCoords_ = [IOSDoubleArray newArrayWithLength:3];
}

- (void)compute {
  direction_ = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v_)) getCoordsInD3]]), 1);
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction_)) getZ])) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(diameter_)) setUndefined];
    return;
  }
  [c_ diameterLineWithDouble:[direction_ getX] withDouble:[direction_ getY] withOrgGeogebraCommonKernelGeosGeoLine:diameter2D_];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(diameter2D_)) getCoordsWithDoubleArray:diameterCoords_];
  diameterDirection_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getVectorWithDouble:-IOSDoubleArray_Get(nil_chk(diameterCoords_), 1) withDouble:IOSDoubleArray_Get(diameterCoords_, 0)];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(diameterCoords_, 0))) {
    diameterOrigin_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:0 withDouble:-IOSDoubleArray_Get(diameterCoords_, 2) / IOSDoubleArray_Get(diameterCoords_, 1)];
  }
  else {
    diameterOrigin_ = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:-IOSDoubleArray_Get(diameterCoords_, 2) / IOSDoubleArray_Get(diameterCoords_, 0) withDouble:0];
  }
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(diameter_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithOrgGeogebraCommonKernelMatrixCoords:diameterOrigin_ withOrgGeogebraCommonKernelMatrixCoords:diameterDirection_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "AlgoDiameterVector3D", NULL, 0x1, NULL, NULL },
    { "createOutputWithOrgGeogebraCommonKernelConstruction:", "createOutput", "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "direction_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "diameter2D_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "diameterCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "diameterOrigin_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "diameterDirection_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D = { 2, "AlgoDiameterVector3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 3, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelKernelNDGeoConicND *c, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v) {
  (void) OrgGeogebraCommonKernelAlgosAlgoDiameterVectorND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, label, c, v);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelKernelNDGeoConicND *c, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, label, c, v);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D)
