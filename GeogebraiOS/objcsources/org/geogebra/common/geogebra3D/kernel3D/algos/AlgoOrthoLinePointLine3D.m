//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointLine3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Construction3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrtho.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSpace.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D ()

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)getInputLine;

@end

__attribute__((unused)) static id<OrgGeogebraCommonKernelKernelNDGeoLineND> OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_getInputLine(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *self);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, point, line);
  return self;
}

- (void)setSpecificInputOutput {
  [self setInputOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point_, [OrgGeogebraCommonKernelGeosGeoElement class]), inputOrtho_, [((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getSpace] } count:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()] withOrgGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ line_ } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalLine();
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)getInputLine {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_getInputLine(self);
}

- (void)compute {
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> line = OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_getInputLine(self);
  OrgGeogebraCommonKernelMatrixCoords *o = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  OrgGeogebraCommonKernelMatrixCoords *v1 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([line getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithOrgGeogebraCommonKernelMatrixCoords:o];
  OrgGeogebraCommonKernelMatrixCoords *o2 = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3];
  OrgGeogebraCommonKernelMatrixCoords *v2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o2)) subWithOrgGeogebraCommonKernelMatrixCoords:o];
  OrgGeogebraCommonKernelMatrixCoords *v3 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v1)) crossProductWithOrgGeogebraCommonKernelMatrixCoords:v2];
  OrgGeogebraCommonKernelMatrixCoords *v = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v3)) crossProductWithOrgGeogebraCommonKernelMatrixCoords:v1];
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) equalsForKernelWithDouble:0 withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk([self getLine])) setUndefined];
  else [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk([self getLine])) setCoordWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3] withOrgGeogebraCommonKernelMatrixCoords:[v normalize]];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAPerpendicularToBinSpace" withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inputOrtho_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "AlgoOrthoLinePointLine3D", NULL, 0x1, NULL, NULL },
    { "setSpecificInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getInputLine", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D = { 2, "AlgoOrthoLinePointLine3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, id<OrgGeogebraCommonKernelKernelNDGeoLineND> line) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrtho_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, point, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, id<OrgGeogebraCommonKernelKernelNDGeoLineND> line) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, point, line);
  return self;
}

id<OrgGeogebraCommonKernelKernelNDGeoLineND> OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_getInputLine(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *self) {
  return (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getInputOrtho], @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D)
