//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanes.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCoordSys.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanes.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes () {
 @public
  OrgGeogebraCommonKernelMatrixCoords *o_, *vn_, *vn1_, *vn2_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes, o_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes, vn_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes, vn1_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes, vn2_, OrgGeogebraCommonKernelMatrixCoords *)

jint OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_NA_ = -1;
jint OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_GENERAL_ = 1;
jint OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_PARALLEL_ = 2;
jint OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_CONTAINED_ = 3;

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)cs1
              withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)cs2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(self, cons, label, cs1, cs2);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)cs1
              withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)cs2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(self, cons, cs1, cs2);
  return self;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoElement3D *)createIntersectionWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons, YES) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_setAndConsume_o_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1));
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_setAndConsume_vn_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_setAndConsume_vn1_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_setAndConsume_vn2_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  return ret;
}

- (void)compute {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p1 = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS1], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p2 = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS2], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  OrgGeogebraCommonKernelMatrixCoords *v1 = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS1], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) getCoordSys])) getEquationVector];
  OrgGeogebraCommonKernelMatrixCoords *v2 = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS2], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) getCoordSys])) getEquationVector];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vn_)) setCrossProductWithOrgGeogebraCommonKernelMatrixCoords:v1 withOrgGeogebraCommonKernelMatrixCoords:v2];
  if ([vn_ isZero]) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoElement3D *) nil_chk([self getIntersection])) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelMatrixCoords *o1 = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS1], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) getCoordSys])) getOrigin];
  OrgGeogebraCommonKernelMatrixCoords *o2 = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS2], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) getCoordSys])) getOrigin];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vn1_)) setCrossProductWithOrgGeogebraCommonKernelMatrixCoords:v1 withOrgGeogebraCommonKernelMatrixCoords:vn_];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vn2_)) setCrossProductWithOrgGeogebraCommonKernelMatrixCoords:v2 withOrgGeogebraCommonKernelMatrixCoords:vn_];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(o2)) projectPlaneWithOrgGeogebraCommonKernelMatrixCoords:vn_ withOrgGeogebraCommonKernelMatrixCoords:vn1_ withOrgGeogebraCommonKernelMatrixCoords:vn2_ withOrgGeogebraCommonKernelMatrixCoords:o1 withOrgGeogebraCommonKernelMatrixCoords:o_];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *l = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast([self getIntersection], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(l)) setCoordWithOrgGeogebraCommonKernelMatrixCoords:o_ withOrgGeogebraCommonKernelMatrixCoords:vn_];
}

+ (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)getIntersectPlanePlaneWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)cs1
                                                                            withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)cs2 {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getIntersectPlanePlaneWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cs1, cs2);
}

+ (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)getIntersectPlanePlaneWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                          withOrgGeogebraCommonKernelMatrixCoordSys:(OrgGeogebraCommonKernelMatrixCoordSys *)cs1
                                                                          withOrgGeogebraCommonKernelMatrixCoordSys:(OrgGeogebraCommonKernelMatrixCoordSys *)cs2 {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getIntersectPlanePlaneWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelMatrixCoordSys_withOrgGeogebraCommonKernelMatrixCoordSys_(cons, cs1, cs2);
}

+ (jint)getConfigPlanePlaneWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane1
                           withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane2 {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(plane1, plane2);
}

+ (jint)getConfigPlanePlaneWithOrgGeogebraCommonKernelMatrixCoordSys:(OrgGeogebraCommonKernelMatrixCoordSys *)cs1
                           withOrgGeogebraCommonKernelMatrixCoordSys:(OrgGeogebraCommonKernelMatrixCoordSys *)cs2 {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithOrgGeogebraCommonKernelMatrixCoordSys_withOrgGeogebraCommonKernelMatrixCoordSys_(cs1, cs2);
}

- (NSString *)getIntersectionTypeString {
  return @"IntersectionLineOfAB";
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_IntersectPath();
}

- (void)dealloc {
  RELEASE_(o_);
  RELEASE_(vn_);
  RELEASE_(vn1_);
  RELEASE_(vn2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:", "AlgoIntersectPlanes", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:", "AlgoIntersectPlanes", NULL, 0x1, NULL, NULL },
    { "createIntersectionWithOrgGeogebraCommonKernelConstruction:", "createIntersection", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoElement3D;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getIntersectPlanePlaneWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "getIntersectPlanePlane", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x9, NULL, NULL },
    { "getIntersectPlanePlaneWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelMatrixCoordSys:withOrgGeogebraCommonKernelMatrixCoordSys:", "getIntersectPlanePlane", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x9, NULL, NULL },
    { "getConfigPlanePlaneWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "getConfigPlanePlane", "I", 0x9, NULL, NULL },
    { "getConfigPlanePlaneWithOrgGeogebraCommonKernelMatrixCoordSys:withOrgGeogebraCommonKernelMatrixCoordSys:", "getConfigPlanePlane", "I", 0x9, NULL, NULL },
    { "getIntersectionTypeString", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "o_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vn_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vn1_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vn2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "RESULTCATEGORY_NA_", NULL, 0x9, "I", &OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_NA_, NULL,  },
    { "RESULTCATEGORY_GENERAL_", NULL, 0x9, "I", &OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_GENERAL_, NULL,  },
    { "RESULTCATEGORY_PARALLEL_", NULL, 0x9, "I", &OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_PARALLEL_, NULL,  },
    { "RESULTCATEGORY_CONTAINED_", NULL, 0x9, "I", &OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_CONTAINED_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes = { 2, "AlgoIntersectPlanes", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 10, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> cs1, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> cs2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs1, [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs2, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> cs1, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> cs2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(self, cons, label, cs1, cs2);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> cs1, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> cs2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs1, [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(cs2, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> cs1, id<OrgGeogebraCommonKernelKernelNDGeoPlaneND> cs2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(self, cons, cs1, cs2);
  return self;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getIntersectPlanePlaneWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> cs1, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> cs2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initialize();
  IOSObjectArray *intersection = OrgGeogebraCommonKernelMatrixCoordMatrixUtil_intersectPlanesWithOrgGeogebraCommonKernelMatrixCoordMatrix_withOrgGeogebraCommonKernelMatrixCoordMatrix_([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(cs1)) getCoordSys])) getMatrixOrthonormal], [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(cs2)) getCoordSys])) getMatrixOrthonormal]);
  OrgGeogebraCommonKernelConstruction *c = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([cs1 toGeoElement])) getConstruction];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) getKernel])) setSilentModeWithBoolean:YES];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *l = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(c, IOSObjectArray_Get(nil_chk(intersection), 0), IOSObjectArray_Get(intersection, 1)) autorelease];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([c getKernel])) setSilentModeWithBoolean:NO];
  return l;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getIntersectPlanePlaneWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelMatrixCoordSys_withOrgGeogebraCommonKernelMatrixCoordSys_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelMatrixCoordSys *cs1, OrgGeogebraCommonKernelMatrixCoordSys *cs2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initialize();
  IOSObjectArray *intersection = OrgGeogebraCommonKernelMatrixCoordMatrixUtil_intersectPlanesWithOrgGeogebraCommonKernelMatrixCoordMatrix_withOrgGeogebraCommonKernelMatrixCoordMatrix_([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(cs1)) getMatrixOrthonormal], [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(cs2)) getMatrixOrthonormal]);
  [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel])) setSilentModeWithBoolean:YES];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *l = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(cons, IOSObjectArray_Get(nil_chk(intersection), 0), IOSObjectArray_Get(intersection, 1)) autorelease];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([cons getKernel])) setSilentModeWithBoolean:NO];
  return l;
}

jint OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane1, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initialize();
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane1)) getDirectionInD3])) crossProductWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane2)) getDirectionInD3]])) isZero]) {
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([plane2 getCoordSys])) getOrigin])) subWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([plane1 getCoordSys])) getOrigin]])) dotproductWithOrgGeogebraCommonKernelMatrixCoords:[plane1 getDirectionInD3]])) {
      return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_CONTAINED_;
    }
    else {
      return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_PARALLEL_;
    }
  }
  else {
    return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_GENERAL_;
  }
}

jint OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithOrgGeogebraCommonKernelMatrixCoordSys_withOrgGeogebraCommonKernelMatrixCoordSys_(OrgGeogebraCommonKernelMatrixCoordSys *cs1, OrgGeogebraCommonKernelMatrixCoordSys *cs2) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initialize();
  if ([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(cs1)) getDimension] != 2 || [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(cs2)) getDimension] != 2) return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_NA_;
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([cs1 getNormal])) crossProductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(cs2)) getNormal]])) isZero]) {
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([cs2 getOrigin])) subWithOrgGeogebraCommonKernelMatrixCoords:[cs1 getOrigin]])) dotproductWithOrgGeogebraCommonKernelMatrixCoords:[cs1 getNormal]])) {
      return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_CONTAINED_;
    }
    else {
      return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_PARALLEL_;
    }
  }
  else {
    return OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_GENERAL_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes)
