//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/algos/Manager3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/geogebra3D/kernel3D/Construction3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLinePlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLines3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLines3DOrientation.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePlanes.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoints3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoints3DOrientation.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePolygon3DOrientation.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleVectors3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleVectors3DOrientation.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngularBisectorLines3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngularBisectorPoints3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngularBisectorPoints3DOrientation.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoArchimedeanSolid.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoArchimedeanSolidThreePoints.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCenterConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCenterQuadric.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DAxisPoint.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointPointDirection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointRadiusDirection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DThreePoints.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoClosestPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoClosestPointLines3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoClosestPointToRegion3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCommonTangents3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoConeInfinitePointPointNumber.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoConeInfinitePointVectorNumber.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoConePointLineAngle.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoConicFivePoints3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartCircle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartCircle3DOrientation.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartCircumcircle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCornerConicSection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCurveCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCylinderAxisRadius.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCylinderInfinitePointPointNumber.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoCylinderInfinitePointVectorNumber.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentQuadric3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDiameterLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDiameterVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDistanceLines3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoDistancePointPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoEllipseHyperbolaFociPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoEllipseHyperbolaFociPoint3DOriented.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoFunctionNVarND.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D1D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D2D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectConics3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCoordSys.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineQuadric3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathLinePolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathPlanePolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneConic.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolygon.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadric.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricLimited.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricPart.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanes.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectQuadricsAsCircle.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectSingle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoJoinPoints3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoLengthVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoLineBisectorSegmentDirection3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoLineBisectorTwoPointsDirection3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePointLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePointVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoLocus3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoLocusSlider3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoMidpoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoMidpointSegment3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrientedHeight.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLineLineLine.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointDirectionDirection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlaneBisectorPointPoint.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlaneBisectorSegment.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlanePointLine.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlanePointVector.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoVectorLineDirection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoVectorPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoParabolaPointLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneCS2D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThreePoints.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndLine.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneTwoLines.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPoint3DInRegion.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPoint3DOnPath.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3DDirection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygonRegular3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronConvex.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNetConvex.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNetPrism.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNetPyramid.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPrism.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPyramid.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadric.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricEnd.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricEndBottom.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricEndTop.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedConicHeightCone.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedConicHeightCylinder.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadius.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadiusCone.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadiusCylinder.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricSide.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoSemicircle3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoSpherePointRadius.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoSphereTwoPoints.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoSurfaceCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentCurve3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitOrthoVectorPlane.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoVolume.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/Manager3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/Geo3DVec.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConicPart3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoConicSection.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3DConstant.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSpace.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/Transform3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/TransformDilate3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/TransformMirror3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/TransformRotate3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/TransformTranslate3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/Region.h"
#include "org/geogebra/common/kernel/Transform.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoDistancePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "org/geogebra/common/kernel/algos/AlgoMidpoint.h"
#include "org/geogebra/common/kernel/algos/AlgoOrthoLinePointLine.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygon.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoSurfaceFinite.h"
#include "org/geogebra/common/kernel/kernelND/Geo3DVec.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSurfaceCartesianND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/kernel/kernelND/HasHeight.h"
#include "org/geogebra/common/kernel/kernelND/HasVolume.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D () {
 @public
  OrgGeogebraCommonKernelKernel *kernel_;
  OrgGeogebraCommonKernelConstruction *cons_;
}

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                                                                             withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c;

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)A
                                                                                             withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)B;

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)A
                                                                                                withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D, cons_, OrgGeogebraCommonKernelConstruction *)

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DInWithNSString_withOrgGeogebraCommonKernelRegion_withOrgGeogebraCommonKernelMatrixCoords_withBoolean_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelRegion> region, OrgGeogebraCommonKernelMatrixCoords *coords, jboolean addToConstruction, jboolean coords2D);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DWithNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelPath> path, jdouble x, jdouble y, jdouble z, jboolean addToConstruction, jboolean coords2D);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoConicND *c);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoConicND *c, jint index);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, OrgGeogebraCommonKernelKernelNDGeoConicND *A, OrgGeogebraCommonKernelKernelNDGeoConicND *B, jint index);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<OrgGeogebraCommonKernelKernelNDGeoLineND> A, OrgGeogebraCommonKernelKernelNDGeoQuadricND *B);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineQuadricSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoQuadricND *q, jint index);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> A, OrgGeogebraCommonKernelKernelNDGeoConicND *B);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, id<OrgGeogebraCommonKernelKernelNDGeoLineND> h);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, id<OrgGeogebraCommonKernelKernelNDGeoLineND> h, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Rotate3DWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *geoRot, id<OrgGeogebraCommonKernelGeosGeoNumberValue> phi, id<OrgGeogebraCommonKernelKernelNDGeoPointND> center, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_CircleArcSector3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, jint type);

__attribute__((unused)) static OrgGeogebraCommonKernelKernelNDGeoConicND *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_EllipseHyperbola3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, jint type);

@implementation OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DWithNSString:(NSString *)label
                                                                withDouble:(jdouble)x
                                                                withDouble:(jdouble)y
                                                                withDouble:(jdouble)z
                                                               withBoolean:(jboolean)coords2D {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  if (coords2D) [p setCartesian];
  else [p setCartesian3D];
  [p setCoordsWithDouble:x withDouble:y withDouble:z withDouble:1.0];
  [p setLabelWithNSString:label];
  return p;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DWithDouble:(jdouble)x
                                                              withDouble:(jdouble)y
                                                              withDouble:(jdouble)z
                                                             withBoolean:(jboolean)coords2D {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  if (coords2D) [p setCartesian];
  else [p setCartesian3D];
  [p setCoordsWithDouble:x withDouble:y withDouble:z withDouble:1.0];
  return p;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)DependentPoint3DWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(cons_, label, root) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *P = [algo getPoint3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(P)) setCartesian3D];
  [P update];
  return P;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)DependentVector3DWithNSString:(NSString *)label
                                  withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(cons_, label, root) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *P = [algo getVector3D];
  return P;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)Vector3DWithNSString:(NSString *)label
                                                                  withDouble:(jdouble)x
                                                                  withDouble:(jdouble)y
                                                                  withDouble:(jdouble)z {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *v = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, x, y, z) autorelease];
  [v setLabelWithNSString:label];
  return v;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)Vector3DWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVector3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P, Q) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *v = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast([algo getVector], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class]);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(v)) setEuclidianVisibleWithBoolean:YES];
  [v update];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:v];
  return v;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DInWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                                     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
                                                                 withBoolean:(jboolean)addToConstruction
                                                                 withBoolean:(jboolean)coords2D {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DInWithNSString_withOrgGeogebraCommonKernelRegion_withOrgGeogebraCommonKernelMatrixCoords_withBoolean_withBoolean_(self, label, region, coords, addToConstruction, coords2D);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DInWithOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                                                          withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
                                                                                      withBoolean:(jboolean)coords2D {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DInRegion *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DInRegion_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelRegion_withOrgGeogebraCommonKernelMatrixCoords_(cons_, region, coords) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [algo getP];
  if (coords2D) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian];
  else [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) update];
  return p;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DInWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                                                                 withBoolean:(jboolean)coords2D {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DInWithNSString_withOrgGeogebraCommonKernelRegion_withOrgGeogebraCommonKernelMatrixCoords_withBoolean_withBoolean_(self, label, region, nil, YES, coords2D);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                                                                withDouble:(jdouble)x
                                                                withDouble:(jdouble)y
                                                                withDouble:(jdouble)z
                                                               withBoolean:(jboolean)addToConstruction
                                                               withBoolean:(jboolean)coords2D {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DWithNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_withBoolean_(self, label, path, x, y, z, addToConstruction, coords2D);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                                                               withBoolean:(jboolean)coords2D {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DWithNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_withBoolean_(self, label, path, 0, 0, 0, YES, coords2D);
  return p;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Point3DWithNSString:(NSString *)label
                                     withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                    withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)param {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath *algo = nil;
  if (param == nil) {
    algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_(cons_, label, path, 0, 0, 0) autorelease];
  }
  else {
    algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, path, 0, 0, 0, param) autorelease];
  }
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath *) nil_chk(algo)) getP], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (![((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) isDefined]) {
    [p setCoordsWithDouble:1 withDouble:0 withDouble:0 withDouble:1];
    [algo update];
  }
  if (![p isDefined]) {
    [p setCoordsWithDouble:JavaLangMath_random() withDouble:0 withDouble:0 withDouble:1];
    [algo update];
  }
  return p;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)MidpointWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P, Q) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *M = [algo getPoint];
  return M;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)MidpointWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpointSegment3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_(cons_, label, segment) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *M = [algo getPoint];
  return M;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)CenterWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCenterConic3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCenterConic3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, label, conic) autorelease];
  return [algo getPoint];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)CenterQuadricWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCenterQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCenterQuadric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(quadric, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])) autorelease];
  return [algo getPoint];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)Segment3DWithNSString:(NSString *)label
                                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P1
                                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonPluginGeoClassEnum_(cons_, label, P1, P2, OrgGeogebraCommonPluginGeoClassEnum_get_SEGMENT3D()) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *s = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast([algo getCS], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]);
  return s;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)Line3DWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P1
                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonPluginGeoClassEnum_(cons_, label, P1, P2, OrgGeogebraCommonPluginGeoClassEnum_get_LINE3D()) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *l = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast([algo getCS], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]);
  return l;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)Line3DWithNSString:(NSString *)label
                     withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                      withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)l {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, P, l) autorelease];
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> g = [algo getLine];
  return g;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)Line3DWithNSString:(NSString *)label
                     withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                    withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointVector3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, P, v) autorelease];
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> g = [algo getLine];
  return g;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *)Ray3DWithNSString:(NSString *)label
                         withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P1
                         withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonPluginGeoClassEnum_(cons_, label, P1, P2, OrgGeogebraCommonPluginGeoClassEnum_get_RAY3D()) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *l = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *) check_class_cast([algo getCS], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D class]);
  return l;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLine3DWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                            withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)cs {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, point, cs) autorelease];
  return [algo getLine];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLine3DWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, point, line) autorelease];
  return [algo getLine];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLine3DWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                           withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)line
                           withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  if ([OrgGeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:line] && [direction isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSpace class]]) return [self OrthogonalLine3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:point withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(line, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND))];
  if ((!([cons_ isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class]]) || direction == [((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [OrgGeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getXOYPlane]) && ([point isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) && ([line isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]])) {
    OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, label, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(line, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    return [algo getLine];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, point, line, direction) autorelease];
  return [algo getLine];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLine3DWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line1
                                withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLineLineLine *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLineLineLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, line1, line2) autorelease];
  return [algo getLine];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)OrthogonalVector3DWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, plane) autorelease];
  return [algo getVector];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)OrthogonalVector3DWithNSString:(NSString *)label
                                    withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line
                               withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorLineDirection *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorLineDirection_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, line, direction) autorelease];
  return [algo getVector];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)UnitOrthogonalVector3DWithNSString:(NSString *)label
                                    withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitOrthoVectorPlane *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitOrthoVectorPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, plane) autorelease];
  return [algo getVector];
}

- (IOSObjectArray *)Polygon3DWithNSStringArray:(IOSObjectArray *)label
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, label, points, nil) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)Polygon3DWithNSStringArray:(IOSObjectArray *)label
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  OrgGeogebraCommonKernelAlgosAlgoPolygon *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, points, direction) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolyLine3DWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, labels, P) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolyLine3DWithNSStringArray:(IOSObjectArray *)labels
         withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)pointList {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_(cons_, labels, pointList) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PrismWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, labels, points) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PrismWithNSStringArray:(IOSObjectArray *)labels
 withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, labels, polygon, point) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PrismWithNSStringArray:(IOSObjectArray *)labels
 withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)height {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, polygon, height) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PyramidWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, labels, points) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PyramidWithNSStringArray:(IOSObjectArray *)labels
   withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, labels, polygon, point) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PyramidWithNSStringArray:(IOSObjectArray *)labels
   withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon
withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)height {
  OrgGeogebraCommonMainApp_debugWithNSString_(@"pyramid");
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, polygon, height) autorelease];
  return [algo getOutput];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                                                                withDouble:(jdouble)a
                                                                withDouble:(jdouble)b
                                                                withDouble:(jdouble)c
                                                                withDouble:(jdouble)d {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(cons_, label, a, b, c, d) autorelease];
  return plane;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)DependentPlane3DWithNSString:(NSString *)label
                                      withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPlane3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPlane3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticEquation_(cons_, label, equ) autorelease];
  return [algo getPlane];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)DependentQuadric3DWithNSString:(NSString *)label
                                          withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentQuadric3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticEquation_(cons_, label, equ) autorelease];
  return [algo getQuadric];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                             withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                              withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, point, line) autorelease];
  return [algo getPlane];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                             withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                          withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)cs {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, point, cs) autorelease];
  return [algo getPlane];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)OrthogonalPlane3DWithNSString:(NSString *)label
                                       withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                        withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  return [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePointLine *) [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePointLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, point, line) autorelease]) getPlane];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)OrthogonalPlane3DWithNSString:(NSString *)label
                                       withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                      withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)vector {
  return [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePointVector *) [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, point, vector) autorelease]) getPlane];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)PlaneBisectorWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point1
                                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point2 {
  return [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorPointPoint *) [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorPointPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, point1, point2) autorelease]) getPlane];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)PlaneBisectorWithNSString:(NSString *)label
                                 withOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment *) [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_(cons_, label, segment) autorelease]) getPlane];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)SphereWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
                           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSpherePointRadius *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSpherePointRadius_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, M, r) autorelease];
  return [algo getSphere];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)SphereWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSphereTwoPoints *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSphereTwoPoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, M, P) autorelease];
  return [algo getSphere];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)ConeWithNSString:(NSString *)label
                            withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
                           withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)direction
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)angle {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConeInfinitePointVectorNumber_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, direction, angle) autorelease];
  return [algo getQuadric];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)ConeWithNSString:(NSString *)label
                            withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
                            withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)secondPoint
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)angle {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConeInfinitePointPointNumber_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, secondPoint, angle) autorelease];
  return [algo getQuadric];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)ConeWithNSString:(NSString *)label
                            withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
                             withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)axis
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)angle {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, axis, angle) autorelease];
  return [algo getQuadric];
}

- (IOSObjectArray *)ConeLimitedWithNSStringArray:(IOSObjectArray *)labels
   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)secondPoint
withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCone_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, origin, secondPoint, r) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)ConeLimitedWithNSStringArray:(IOSObjectArray *)labels
   withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)bottom
withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)height {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCone *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCone_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, bottom, height) autorelease];
  [algo update];
  return [algo getOutput];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)CylinderWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
                               withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)direction
                             withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderInfinitePointVectorNumber_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, direction, r) autorelease];
  return [algo getQuadric];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)CylinderWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)secondPoint
                             withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderInfinitePointPointNumber_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, secondPoint, r) autorelease];
  return [algo getQuadric];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)CylinderWithNSString:(NSString *)label
                                 withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)axis
                             withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, axis, r) autorelease];
  return [algo getQuadric];
}

- (IOSObjectArray *)CylinderLimitedWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
       withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)secondPoint
    withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, origin, secondPoint, r) autorelease];
  [algo update];
  return [algo getOutput];
}

- (IOSObjectArray *)CylinderLimitedWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)bottom
    withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)height {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCylinder *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCylinder_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, bottom, height) autorelease];
  [algo update];
  return [algo getOutput];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)QuadricSideWithNSString:(NSString *)label
                                     withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])) autorelease];
  return (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast([algo getQuadric], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)QuadricBottomWithNSString:(NSString *)label
                                 withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnd *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEndBottom_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])) autorelease];
  return [algo getSection];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)QuadricTopWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnd *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEndTop_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])) autorelease];
  return [algo getSection];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)Circle3DWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, A, B, C) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast([algo getCircle], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class]);
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle)) update];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:circle];
  return circle;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)Circle3DWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)axis
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DAxisPoint *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DAxisPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, axis, A) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle = [algo getCircle];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle)) update];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:circle];
  return circle;
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)Circle3DWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                   withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)radius
                  withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)axis {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) isGeoElement3D] && axis == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) CircleWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelArithmeticNumberValue:radius];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, radius, axis) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle = [algo getCircle];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle)) update];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:circle];
  return circle;
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)Circle3DWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                   withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)radius {
  return [self Circle3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:A withOrgGeogebraCommonKernelArithmeticNumberValue:radius withOrgGeogebraCommonKernelKernelNDGeoDirectionND:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)Circle3DWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                  withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] && orientation == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) CircleWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoPoint class])];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointPointDirection_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, B, orientation) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle = [algo getCircle];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle)) update];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:circle];
  return circle;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                             withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                             withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                             withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThreePoints *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, A, B, C) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([algo getCoordSys], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  return plane;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)Plane3DWithNSString:(NSString *)label
                  withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)a
                  withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)b {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, a, b) autorelease];
  return (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([algo getCoordSys], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                          withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)cs2D {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, cs2D) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([algo getCoordSys], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  return plane;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)cs2D {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, cs2D) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([algo getCoordSys], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  return plane;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)IntersectWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)cs1
                       withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)cs2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys *algo = nil;
  if ([OrgGeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:cs1]) {
    if ([OrgGeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:cs2]) algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(cs1, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)), (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(cs2, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND))) autorelease];
    else if ([OrgGeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:cs2]) algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, label, cs1, cs2) autorelease];
  }
  else if ([OrgGeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:cs1]) {
    if ([OrgGeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:cs2]) algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, label, cs1, cs2) autorelease];
  }
  return [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys *) nil_chk(algo)) getIntersection];
}

- (IOSObjectArray *)IntersectionPointWithNSStringArray:(IOSObjectArray *)labels
          withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
       withOrgGeogebraCommonKernelGeosGeoSurfaceFinite:(id<OrgGeogebraCommonKernelGeosGeoSurfaceFinite>)p {
  if ([p isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolygon class]]) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, g, (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPolygon class])) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectionPointWithNSStringArray:(IOSObjectArray *)labels
         withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
             withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)s {
  if ([s isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolygon class]]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(s, [OrgGeogebraCommonKernelGeosGeoPolygon class])) autorelease];
    return [algo getOutput];
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(s)) isGeoPolyhedron]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(cons_, labels, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(s, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectPathWithNSStringArray:(IOSObjectArray *)labels
      withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
   withOrgGeogebraCommonKernelGeosGeoSurfaceFinite:(id<OrgGeogebraCommonKernelGeosGeoSurfaceFinite>)p {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathLinePolygon3D *algo;
  if ([p isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolygon class]]) {
    algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathLinePolygon3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, labels, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPolygon class])) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectPathWithNSStringArray:(IOSObjectArray *)labels
     withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)p {
  if ([p isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolygon class]]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, labels, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPolygon class])) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectPathWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                     withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), p) autorelease];
  [algo update];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectRegionWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
           withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)p
                                        withIntArray:(IOSIntArray *)outputSizes {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(p)) isGeoPolyhedron]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(cons_, labels, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]), outputSizes) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectRegionWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                       withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)p {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(p)) isGeoPolyhedron]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(cons_, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])) autorelease];
    [algo update];
    return [algo getOutput];
  }
  return nil;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)IntersectWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
                             withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  if ([quadric isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
    return [algo getConic];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
  return [algo getConic];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)IntersectQuadricLimitedWithNSString:(NSString *)label
                                     withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                   withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
  return [algo getConic];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)IntersectQuadricLimitedWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                                                    withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
  return [algo getConic];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)IntersectWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                                              withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
  return [algo getConic];
}

- (IOSObjectArray *)IntersectAsCircleWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric1
       withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, labels, quadric1, quadric2) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectAsCircleWithOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric1
                                     withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)quadric2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, quadric1, quadric2) autorelease];
  return [algo getOutput];
}

- (OrgGeogebraCommonKernelGeosGeoFunctionNVar *)Function2VarWithNSString:(NSString *)label
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)zcoord
                               withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)localVarU
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)Ufrom
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)Uto
                               withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)localVarV
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)Vfrom
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)Vto {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoFunctionNVarND *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoFunctionNVarND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValueArray_withOrgGeogebraCommonKernelGeosGeoNumericArray_withOrgGeogebraCommonKernelArithmeticNumberValueArray_withOrgGeogebraCommonKernelArithmeticNumberValueArray_(cons_, label, [IOSObjectArray arrayWithObjects:(id[]){ zcoord } count:1 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ localVarU, localVarV } count:2 type:OrgGeogebraCommonKernelGeosGeoNumeric_class_()], [IOSObjectArray arrayWithObjects:(id[]){ Ufrom, Vfrom } count:2 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ Uto, Vto } count:2 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()]) autorelease];
  return [algo getFunction];
}

- (OrgGeogebraCommonKernelGeosGeoFunctionNVar *)Function2VarWithNSString:(NSString *)label
                          withOrgGeogebraCommonKernelGeosGeoFunctionNVar:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *)f
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)xFrom
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)xTo
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)yFrom
                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)yTo {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoFunctionNVarND *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoFunctionNVarND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_withOrgGeogebraCommonKernelArithmeticNumberValueArray_withOrgGeogebraCommonKernelArithmeticNumberValueArray_(cons_, label, f, [IOSObjectArray arrayWithObjects:(id[]){ xFrom, yFrom } count:2 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ xTo, yTo } count:2 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()]) autorelease];
  return [algo getFunction];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)CurveCartesian3DWithNSString:(NSString *)label
                                            withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)xcoord
                                            withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)ycoord
                                            withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)zcoord
                                                   withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)localVar
                                            withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)from
                                            withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)to {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCurveCartesian3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCurveCartesian3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValueArray_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, [IOSObjectArray arrayWithObjects:(id[]){ xcoord, ycoord, zcoord } count:3 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()], localVar, from, to) autorelease];
  return (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast([algo getCurve], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)SurfaceCartesian3DWithNSString:(NSString *)label
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)xcoord
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)ycoord
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)zcoord
                                withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)uVar
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)uFrom
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)uTo
                                withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)vVar
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)vFrom
                         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)vTo {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValueArray_withOrgGeogebraCommonKernelGeosGeoNumericArray_withOrgGeogebraCommonKernelArithmeticNumberValueArray_withOrgGeogebraCommonKernelArithmeticNumberValueArray_(cons_, label, [IOSObjectArray arrayWithObjects:(id[]){ xcoord, ycoord, zcoord } count:3 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ uVar, vVar } count:2 type:OrgGeogebraCommonKernelGeosGeoNumeric_class_()], [IOSObjectArray arrayWithObjects:(id[]){ uFrom, vFrom } count:2 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ uTo, vTo } count:2 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()]) autorelease];
  return [algo getSurface];
}

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                                                                             withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
}

- (IOSObjectArray *)IntersectLineConicWithNSStringArray:(IOSObjectArray *)labels
           withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
          withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
  [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineConicSingleWithNSString:(NSString *)label
                                               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
                                                                                 withDouble:(jdouble)xRW
                                                                                 withDouble:(jdouble)yRW
                                               withOrgGeogebraCommonKernelMatrixCoordMatrix:(OrgGeogebraCommonKernelMatrixCoordMatrix *)mat {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
  jint index = [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW withOrgGeogebraCommonKernelMatrixCoordMatrix:mat];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineConicSingleWithNSString:(NSString *)label
                                               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
                                           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)index {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, label, g, c, J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(index)) getDouble]) - 1);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineConicSingleWithNSString:(NSString *)label
                                               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
                                                                                    withInt:(jint)index {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, label, g, c, index);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineConicSingleWithNSString:(NSString *)label
                                               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
                                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)refPoint {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withOrgGeogebraCommonKernelKernelNDGeoPointND_(label, algo, refPoint) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)A
                                                                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:A withOrgGeogebraCommonKernelGeosGeoElement:B];
  if (existingAlgo != nil) return (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *) check_class_cast(existingAlgo, [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D class]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, A, B) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) addIntersectionAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoIntersectAbstract:algo];
  return algo;
}

- (IOSObjectArray *)IntersectConicsWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)A
       withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoConicND:A withOrgGeogebraCommonKernelKernelNDGeoConicND:B];
  [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectConicsSingleWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)A
                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B
                                                                              withDouble:(jdouble)xRW
                                                                              withDouble:(jdouble)yRW
                                            withOrgGeogebraCommonKernelMatrixCoordMatrix:(OrgGeogebraCommonKernelMatrixCoordMatrix *)mat {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoConicND:A withOrgGeogebraCommonKernelKernelNDGeoConicND:B];
  jint index = [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW withOrgGeogebraCommonKernelMatrixCoordMatrix:mat];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectConicsSingleWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)A
                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B
                                        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)index {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, label, A, B, J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(index)) getDouble]) - 1);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectConicsSingleWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)A
                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B
                                                                                 withInt:(jint)index {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, label, A, B, index);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectConicsSingleWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)A
                                           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B
                                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)refPoint {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoConicND:A withOrgGeogebraCommonKernelKernelNDGeoConicND:B];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withOrgGeogebraCommonKernelKernelNDGeoPointND_(label, algo, refPoint) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)A
                                                                                             withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)B {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, A, B);
}

- (IOSObjectArray *)IntersectLineQuadricWithNSStringArray:(IOSObjectArray *)labels
             withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)A
          withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)B {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, A, B);
  [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineQuadricSingleWithNSString:(NSString *)label
                                                 withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                              withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)q
                                             withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)index {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineQuadricSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withInt_(self, label, g, q, J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(index)) getDouble]) - 1);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineQuadricSingleWithNSString:(NSString *)label
                                                 withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                              withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)q
                                                                                      withInt:(jint)index {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineQuadricSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withInt_(self, label, g, q, index);
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineQuadricSingleWithNSString:(NSString *)label
                                                 withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                              withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)q
                                                                                   withDouble:(jdouble)xRW
                                                                                   withDouble:(jdouble)yRW
                                              withOrgGeogebraCommonKernelMatrixCoordMatrix4x4:(OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)mat {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, g, q);
  jint index = [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW withOrgGeogebraCommonKernelMatrixCoordMatrix:mat];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineQuadricSingleWithNSString:(NSString *)label
                                                 withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                                              withOrgGeogebraCommonKernelKernelNDGeoQuadricND:(OrgGeogebraCommonKernelKernelNDGeoQuadricND *)q
                                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)refPoint {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, g, q);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withOrgGeogebraCommonKernelKernelNDGeoPointND_(label, algo, refPoint) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)A
                                                                                                withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, A, B);
}

- (IOSObjectArray *)IntersectPlaneConicWithNSStringArray:(IOSObjectArray *)labels
        withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)A
           withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)B {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, A, B);
  [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)IntersectPlanesWithNSString:(NSString *)label
                         withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)cs1
                         withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)cs2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(cons_, label, cs1, cs2) autorelease];
  return [algo getIntersection];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)IntersectPlanesWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)cs1
                                                          withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)cs2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(cons_, cs1, cs2) autorelease];
  return [algo getIntersection];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)ClosestPointWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                       withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)h {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, g, h) autorelease];
  return [algo getPoint];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)ClosestPointWithNSString:(NSString *)label
                                                withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)p
                                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPoint3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, p, P) autorelease];
  return (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([algo getP], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)ClosestPointWithNSString:(NSString *)label
                                        withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)r
                            withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointToRegion3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointToRegion3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelRegion_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, r, P) autorelease];
  return [algo getOutputPoint];
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, label, A, B, C);
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
           withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, label, A, B, C, orientation);
}

- (IOSObjectArray *)AngleWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)alpha
withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                               withBoolean:(jboolean)posOrientation {
  NSString *pointLabel = nil, *angleLabel = nil;
  if (labels != nil) {
    switch (labels->size_) {
      case 2:
      pointLabel = IOSObjectArray_Get(labels, 1);
      case 1:
      angleLabel = IOSObjectArray_Get(labels, 0);
      default:
      ;
    }
  }
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> C = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Rotate3DWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, pointLabel, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoElement class]), alpha, A, orientation)), 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  OrgGeogebraCommonKernelGeosGeoAngle *angle;
  if (posOrientation) {
    angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, angleLabel, B, A, C, orientation);
  }
  else {
    angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, angleLabel, C, A, B, orientation);
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ angle, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(C, [OrgGeogebraCommonKernelGeosGeoElement class]) } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
                withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)h {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, label, g, h);
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
                withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)h
           withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, label, g, h, orientation);
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)p1
               withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)p2 {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(cons_, label, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(p1, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(p2, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
                withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)l
               withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)p {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(cons_, label, l, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)createLineAngleWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line1
                                                        withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line2 {
  OrgGeogebraCommonKernelGeosGeoAngle *angle = nil;
  if (([OrgGeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:line1]) && ([OrgGeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:line2])) {
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> a = (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(line1, @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND));
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> b = (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(line2, @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND));
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> a1 = [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(a)) getStartPoint];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> a2 = [a getEndPoint];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> b1 = [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(b)) getStartPoint];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> b2 = [b getEndPoint];
    if (a1 == b1) {
      angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, nil, a2, a1, b2);
    }
    else if (a1 == b2) {
      angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, nil, a2, a1, b1);
    }
    else if (a2 == b1) {
      angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, nil, a1, a2, b2);
    }
    else if (a2 == b2) {
      angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, nil, a1, a2, b1);
    }
  }
  if (angle == nil) {
    angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, nil, line1, line2);
  }
  return angle;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)createLineAngleWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line1
                                                        withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line2
                                                   withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonKernelGeosGeoAngle *angle = nil;
  if (([OrgGeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:line1]) && ([OrgGeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:line2])) {
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> a = (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(line1, @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND));
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> b = (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(line2, @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND));
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> a1 = [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(a)) getStartPoint];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> a2 = [a getEndPoint];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> b1 = [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(b)) getStartPoint];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> b2 = [b getEndPoint];
    if (a1 == b1) {
      angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, a2, a1, b2, orientation);
    }
    else if (a1 == b2) {
      angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, a2, a1, b1, orientation);
    }
    else if (a2 == b1) {
      angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, a1, a2, b2, orientation);
    }
    else if (a2 == b2) {
      angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, a1, a2, b1, orientation);
    }
  }
  if (angle == nil) {
    angle = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, line1, line2, orientation);
  }
  return angle;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v
              withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)w {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVectors3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVectors3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, v, w) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v
              withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)w
           withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVectors3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVectors3DOrientation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, v, w, orientation) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (IOSObjectArray *)Angles3DWithNSStringArray:(IOSObjectArray *)labels
    withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePolygon3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePolygon3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, poly) autorelease];
  IOSObjectArray *angles = [algo getAngles];
  return angles;
}

- (IOSObjectArray *)Angles3DWithNSStringArray:(IOSObjectArray *)labels
    withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly
withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePolygon3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePolygon3DOrientation_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, labels, poly, orientation) autorelease];
  IOSObjectArray *angles = [algo getAngles];
  return angles;
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)LengthWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLengthVector3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLengthVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, v) autorelease];
  OrgGeogebraCommonKernelGeosGeoNumeric *num = [algo getLength];
  return num;
}

- (IOSObjectArray *)ArchimedeanSolidWithNSStringArray:(IOSObjectArray *)labels
        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
    withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)v
      withOrgGeogebraCommonKernelCommandsCommandsEnum:(OrgGeogebraCommonKernelCommandsCommandsEnum *)name {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolid *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolid_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withOrgGeogebraCommonKernelCommandsCommandsEnum_(cons_, labels, A, B, v, name) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)ArchimedeanSolidWithNSStringArray:(IOSObjectArray *)labels
        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
      withOrgGeogebraCommonKernelCommandsCommandsEnum:(OrgGeogebraCommonKernelCommandsCommandsEnum *)name {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolidThreePoints *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolidThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelCommandsCommandsEnum_(cons_, labels, A, B, C, name) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)ArchimedeanSolidWithNSStringArray:(IOSObjectArray *)labels
        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
      withOrgGeogebraCommonKernelCommandsCommandsEnum:(OrgGeogebraCommonKernelCommandsCommandsEnum *)name {
  id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> segAB;
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algoSegment = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonPluginGeoClassEnum_(cons_, A, B, nil, OrgGeogebraCommonPluginGeoClassEnum_get_SEGMENT3D()) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoSegment];
    segAB = (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([algoSegment getCS], @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND));
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment *algoSegment = [new_OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoPoint class]), nil) autorelease];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoSegment];
    segAB = [algoSegment getSegment];
  }
  OrgGeogebraCommonKernelAlgosAlgoDistancePoints *algoDistance = [new_OrgGeogebraCommonKernelAlgosAlgoDistancePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, A, B) autorelease];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoDistance];
  OrgGeogebraCommonKernelGeosGeoNumeric *distance = [algoDistance getDistance];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> center;
  OrgGeogebraCommonKernelGeosGeoNumeric *radius;
  {
    OrgGeogebraCommonKernelArithmeticExpressionNode *expr;
    OrgGeogebraCommonKernelAlgosAlgoDependentNumber *exprAlgo;
    OrgGeogebraCommonKernelArithmeticExpressionNode *exprSqrt5;
    OrgGeogebraCommonKernelArithmeticExpressionNode *exprPoint;
    OrgGeogebraCommonKernelArithmeticExpressionNode *expr2;
    switch ([name ordinal]) {
      case OrgGeogebraCommonKernelCommandsCommands_Tetrahedron:
      case OrgGeogebraCommonKernelCommandsCommands_Octahedron:
      case OrgGeogebraCommonKernelCommandsCommands_Icosahedron:
      if ([A isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D]) {
        OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D *algoMidpoint = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, A, B) autorelease];
        [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoMidpoint];
        center = [algoMidpoint getPoint];
      }
      else {
        OrgGeogebraCommonKernelAlgosAlgoMidpoint *algoMidpoint = [new_OrgGeogebraCommonKernelAlgosAlgoMidpoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoPoint class])) autorelease];
        [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoMidpoint];
        center = [algoMidpoint getPoint];
      }
      expr = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 3) autorelease], OrgGeogebraCommonPluginOperationEnum_get_SQRT(), nil) autorelease];
      expr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([expr divideWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:distance];
      exprAlgo = [new_OrgGeogebraCommonKernelAlgosAlgoDependentNumber_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, expr, NO) autorelease];
      [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:exprAlgo];
      radius = [exprAlgo getNumber];
      break;
      case OrgGeogebraCommonKernelCommandsCommands_Cube:
      default:
      center = B;
      radius = distance;
      break;
      case OrgGeogebraCommonKernelCommandsCommands_Dodecahedron:
      exprSqrt5 = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 5) autorelease], OrgGeogebraCommonPluginOperationEnum_get_SQRT(), nil) autorelease];
      expr = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1) autorelease], OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      exprPoint = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, A, OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      expr = [exprPoint multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[expr subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:exprSqrt5]];
      expr2 = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 3) autorelease], OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      exprPoint = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, B, OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      expr2 = [exprPoint multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[expr2 plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:exprSqrt5]];
      expr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:expr2])) divideWithDouble:4];
      if ([A isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D]) {
        OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D *exprAlgoPoint = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(cons_, expr) autorelease];
        [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:exprAlgoPoint];
        center = [exprAlgoPoint getPoint3D];
      }
      else {
        OrgGeogebraCommonKernelAlgosAlgoDependentPoint *exprAlgoPoint = [new_OrgGeogebraCommonKernelAlgosAlgoDependentPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, expr, NO) autorelease];
        [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:exprAlgoPoint];
        center = [exprAlgoPoint getPoint];
      }
      expr = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 10) autorelease], OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      expr2 = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 2) autorelease], OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      expr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([expr plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[exprSqrt5 multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:expr2]])) sqrt])) divideWithDouble:4])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:distance];
      exprAlgo = [new_OrgGeogebraCommonKernelAlgosAlgoDependentNumber_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, expr, NO) autorelease];
      [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:exprAlgo];
      radius = [exprAlgo getNumber];
      break;
    }
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection *algoCircle = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, center, radius, segAB) autorelease];
  [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoCircle];
  OrgGeogebraCommonKernelMatrixCoords *cA = [A getInhomCoordsInD3];
  OrgGeogebraCommonKernelMatrixCoords *cB = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) getInhomCoordsInDWithInt:3];
  OrgGeogebraCommonKernelMatrixCoords *AB = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(cB)) subWithOrgGeogebraCommonKernelMatrixCoords:cA];
  OrgGeogebraCommonKernelMatrixCoords *vn = [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(AB)) completeOrthonormalKeepInXOYPlaneIfPossibleWithOrgGeogebraCommonKernelMatrixCoords:vn];
  OrgGeogebraCommonKernelMatrixCoords *coords = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(center)) getInhomCoordsInDWithInt:3])) addWithOrgGeogebraCommonKernelMatrixCoords:[vn mulWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(radius)) getDouble]]];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath *algoPoint = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_(cons_, nil, [algoCircle getCircle], [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY], [coords getZ]) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolidThreePoints *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolidThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelCommandsCommandsEnum_(cons_, labels, A, B, [algoPoint getP], name) autorelease];
  return [algo getOutput];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                   withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                   withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)h {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDistanceLines3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDistanceLines3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, g, h) autorelease];
  return [algo getDistance];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                  withOrgGeogebraCommonKernelKernelNDGeoPlaneND:(id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)plane {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDistancePointPlane3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDistancePointPlane3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPlaneND_(cons_, label, point, plane) autorelease];
  return [algo getDistance];
}

- (IOSObjectArray *)Translate3DWithNSString:(NSString *)label
  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoTrans
withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransform3D *t = [new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, v) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoTrans withNSString:label];
}

- (id<OrgGeogebraCommonKernelKernelNDGeo3DVec>)newGeo3DVecWithDouble:(jdouble)x
                                                          withDouble:(jdouble)y
                                                          withDouble:(jdouble)z {
  return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_withDouble_(kernel_, x, y, z) autorelease];
}

- (IOSObjectArray *)Rotate3DWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoRot
withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)phi
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)center
withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Rotate3DWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, label, geoRot, phi, center, orientation);
}

- (IOSObjectArray *)Rotate3DWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoRot
withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)phi
withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, phi, line) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoRot withNSString:label];
}

- (IOSObjectArray *)Mirror3DWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, p) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geo withNSString:label];
}

- (IOSObjectArray *)Mirror3DWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, line) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geo withNSString:label];
}

- (IOSObjectArray *)Mirror3DWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, plane) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geo withNSString:label];
}

- (IOSObjectArray *)Dilate3DWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoDil
withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformDilate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, r, S) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoDil withNSString:label];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)VolumeWithNSString:(NSString *)label
                 withOrgGeogebraCommonKernelKernelNDHasVolume:(id<OrgGeogebraCommonKernelKernelNDHasVolume>)hasVolume {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDHasVolume_(cons_, label, hasVolume) autorelease];
  return [algo getVolume];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)OrientedHeightWithNSString:(NSString *)label
                         withOrgGeogebraCommonKernelKernelNDHasHeight:(id<OrgGeogebraCommonKernelKernelNDHasHeight>)hasHeight {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrientedHeight *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoOrientedHeight_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDHasHeight_(cons_, label, hasHeight) autorelease];
  return [algo getOrientedHeight];
}

- (IOSObjectArray *)CornerWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCornerConicSection *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCornerConicSection_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection_(cons_, labels, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(conic, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])) autorelease];
  return [algo getCorners];
}

- (IOSObjectArray *)RegularPolygonWithNSStringArray:(IOSObjectArray *)labels
      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
   withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)n
  withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, labels, A, B, n, direction) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolyhedronNetWithNSStringArray:(IOSObjectArray *)labels
         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)p
  withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)v
         withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)bottomFace
withOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)pivotSegments {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo;
  switch ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])))) getType]) {
    case OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PYRAMID:
    algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]), v) autorelease];
    return [algo getOutput];
    case OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PRISM:
    algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPrism_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]), v) autorelease];
    return [algo getOutput];
    default:
    algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetConvex_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray_(cons_, labels, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]), v, bottomFace, pivotSegments) autorelease];
    return [algo getOutput];
  }
}

- (IOSObjectArray *)PolyhedronConvexWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)pointList {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronConvex_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(cons_, labels, pointList) autorelease];
  return [algo getOutput];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *)CircumcircleArc3DWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, label, A, B, C, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) autorelease];
  return [algo getConicPart];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *)CircumcircleSector3DWithNSString:(NSString *)label
                                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, label, A, B, C, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) autorelease];
  return [algo getConicPart];
}

- (IOSObjectArray *)AngularBisector3DWithNSStringArray:(IOSObjectArray *)labels
          withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
          withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)h {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, labels, g, h) autorelease];
  IOSObjectArray *lines = [algo getLines];
  return lines;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)AngularBisector3DWithNSString:(NSString *)label
                                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorPoints3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorPoints3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, A, B, C) autorelease];
  return [algo getLine];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)AngularBisector3DWithNSString:(NSString *)label
                                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                                  withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorPoints3DOrientation *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorPoints3DOrientation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, B, C, orientation) autorelease];
  return [algo getLine];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *)CircleArcSector3DWithNSString:(NSString *)label
                                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                                                                                 withInt:(jint)type {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_CircleArcSector3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, label, A, B, C, type);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>)CircleArcSector3DWithNSString:(NSString *)label
                                     withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                     withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                     withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                                 withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                                                                           withInt:(jint)type {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(C, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    if (orientation == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace]) {
      return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_CircleArcSector3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, nil, A, B, C, type);
    }
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3DOrientation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(cons_, label, A, B, C, orientation, type) autorelease];
    return [algo getConicPart];
  }
  if (orientation == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) CircleArcSectorWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(C, [OrgGeogebraCommonKernelGeosGeoPoint class]) withInt:type];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3DOrientation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(cons_, label, A, B, C, orientation, type) autorelease];
  return [algo getConicPart];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)Line3DWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
               withOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefY
               withOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefZ {
  OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *start = [new_OrgGeogebraCommonKernelArithmetic3DMyVec3DNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(coefX), 0), IOSObjectArray_Get(nil_chk(coefY), 0), IOSObjectArray_Get(nil_chk(coefZ), 0)) autorelease];
  OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *v = [new_OrgGeogebraCommonKernelArithmetic3DMyVec3DNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(coefX, 1), IOSObjectArray_Get(coefY, 1), IOSObjectArray_Get(coefZ, 1)) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D *pt = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(cons_, [start wrap]) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D *vec = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(cons_, [v wrap]) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointVector3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, [pt getPoint3D], [vec getVector3D]) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *g = [algo getLine];
  return g;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>)Semicircle3DWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                            withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSemicircle3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSemicircle3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, B, orientation) autorelease];
    return [algo getSemicircle];
  }
  if (orientation == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) SemicircleWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [OrgGeogebraCommonKernelGeosGeoPoint class])];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSemicircle3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoSemicircle3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, B, orientation) autorelease];
  return [algo getSemicircle];
}

- (IOSObjectArray *)Tangent3DWithNSStringArray:(IOSObjectArray *)labels
 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
 withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isGeoElement3D] || [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, P, c) autorelease];
    return [algo getOutput];
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) TangentWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointND:P withOrgGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)Tangent3DWithNSStringArray:(IOSObjectArray *)labels
  withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)l
 withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(l)) isGeoElement3D] || [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, l, c) autorelease];
    return [algo getOutput];
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) TangentWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoLineND:l withOrgGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)CommonTangents3DWithNSStringArray:(IOSObjectArray *)labels
        withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c1
        withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c2 {
  if ([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c1)) isGeoElement3D] || [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c2)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCommonTangents3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoCommonTangents3D_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, c1, c2) autorelease];
    return [algo getOutput];
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) CommonTangentsWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoConicND:c1 withOrgGeogebraCommonKernelKernelNDGeoConicND:c2];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)DiameterLine3DWithNSString:(NSString *)label
                         withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                        withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) isGeoElement3D] || [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, c, g) autorelease];
    return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getDiameter], [OrgGeogebraCommonKernelGeosGeoElement class]);
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DiameterLineWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoLineND:g withOrgGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)DiameterLine3DWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v
                        withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) isGeoElement3D] || [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, c, v) autorelease];
    return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getDiameter], [OrgGeogebraCommonKernelGeosGeoElement class]);
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DiameterLineWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoVectorND:v withOrgGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)LineBisector3DWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment
                    withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) isGeoElement3D] && orientation == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) LineBisectorWithNSString:nil withOrgGeogebraCommonKernelGeosGeoSegment:(OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(segment, [OrgGeogebraCommonKernelGeosGeoSegment class])];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, segment, orientation) autorelease];
  return [algo getLine];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)LineBisector3DWithNSString:(NSString *)label
                        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)a
                        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)b
                    withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(a)) isGeoElement3D] && ![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(b)) isGeoElement3D] && orientation == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) LineBisectorWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(b, [OrgGeogebraCommonKernelGeosGeoPoint class])];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorTwoPointsDirection3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorTwoPointsDirection3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, a, b, orientation) autorelease];
  return [algo getLine];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)Conic3DWithNSString:(NSString *)label
                withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicFivePoints3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicFivePoints3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, label, points) autorelease];
  return [algo getConic];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)EllipseHyperbola3DWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                                                                      withInt:(jint)type {
  return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_EllipseHyperbola3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, label, A, B, C, type);
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)EllipseHyperbola3DWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                            withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                                                                      withInt:(jint)type {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) isGeoElement3D] && ![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D] && ![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C)) isGeoElement3D] && orientation == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) EllipseHyperbolaWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:A withOrgGeogebraCommonKernelKernelNDGeoPointND:B withOrgGeogebraCommonKernelKernelNDGeoPointND:C withInt:type];
  }
  if (orientation == [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace]) {
    return OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_EllipseHyperbola3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, nil, A, B, C, type);
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(cons_, label, A, B, C, orientation, type) autorelease];
  return [algo getConic];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)Parabola3DWithNSString:(NSString *)label
                        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)F
                         withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)l {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, F, l) autorelease];
  return [algo getParabola];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)Locus3DWithNSString:(NSString *)label
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) LocusCheckWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withOrgGeogebraCommonKernelKernelNDGeoPointND:Q]) {
    return nil;
  }
  return [([new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLocus3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, Q, P) autorelease]) getLocus];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)Tangent3DWithNSString:(NSString *)label
                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
          withOrgGeogebraCommonKernelKernelNDGeoCurveCartesianND:(OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND *)curve {
  if ([((OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND *) nil_chk(curve)) isGeoElement3D]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentCurve3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentCurve3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(cons_, label, point, (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast(curve, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class])) autorelease];
    [algo update];
    return IOSObjectArray_Get(nil_chk([algo getOutput]), 0);
  }
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) TangentWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:point withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(curve, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)Locus3DWithNSString:(NSString *)label
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q
                     withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)slider {
  return [((OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLocusSlider3D *) [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoLocusSlider3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, label, Q, slider) autorelease]) getLocus];
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(cons_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "Manager3D", NULL, 0x1, NULL, NULL },
    { "Point3DWithNSString:withDouble:withDouble:withDouble:withBoolean:", "Point3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DWithDouble:withDouble:withDouble:withBoolean:", "Point3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "DependentPoint3DWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "DependentPoint3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "DependentVector3DWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "DependentVector3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x11, NULL, NULL },
    { "Vector3DWithNSString:withDouble:withDouble:withDouble:", "Vector3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x11, NULL, NULL },
    { "Vector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Vector3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x11, NULL, NULL },
    { "Point3DInWithNSString:withOrgGeogebraCommonKernelRegion:withOrgGeogebraCommonKernelMatrixCoords:withBoolean:withBoolean:", "Point3DIn", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DInWithOrgGeogebraCommonKernelRegion:withOrgGeogebraCommonKernelMatrixCoords:withBoolean:", "Point3DIn", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DInWithNSString:withOrgGeogebraCommonKernelRegion:withBoolean:", "Point3DIn", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DWithNSString:withOrgGeogebraCommonKernelPath:withDouble:withDouble:withDouble:withBoolean:withBoolean:", "Point3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DWithNSString:withOrgGeogebraCommonKernelPath:withBoolean:", "Point3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DWithNSString:withOrgGeogebraCommonKernelPath:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Point3D", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "MidpointWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Midpoint", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "MidpointWithNSString:withOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "Midpoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "CenterWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Center", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "CenterQuadricWithNSString:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "CenterQuadric", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "Segment3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Segment3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", 0x11, NULL, NULL },
    { "Line3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Line3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x11, NULL, NULL },
    { "Line3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Line3D", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x11, NULL, NULL },
    { "Line3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "Line3D", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x11, NULL, NULL },
    { "Ray3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Ray3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoRay3D;", 0x11, NULL, NULL },
    { "OrthogonalLine3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "OrthogonalLine3D", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "OrthogonalLine3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "OrthogonalLine3D", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "OrthogonalLine3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "OrthogonalLine3D", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "OrthogonalLine3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "OrthogonalLine3D", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "OrthogonalVector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "OrthogonalVector3D", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "OrthogonalVector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "OrthogonalVector3D", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "UnitOrthogonalVector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "UnitOrthogonalVector3D", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "Polygon3DWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "Polygon3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Polygon3DWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Polygon3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyLine3DWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "PolyLine3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyLine3DWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoList:", "PolyLine3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PrismWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "Prism", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PrismWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Prism", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PrismWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Prism", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PyramidWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "Pyramid", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PyramidWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Pyramid", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PyramidWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Pyramid", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Plane3DWithNSString:withDouble:withDouble:withDouble:withDouble:", "Plane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "DependentPlane3DWithNSString:withOrgGeogebraCommonKernelArithmeticEquation:", "DependentPlane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "DependentQuadric3DWithNSString:withOrgGeogebraCommonKernelArithmeticEquation:", "DependentQuadric3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "Plane3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Plane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "Plane3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "Plane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "OrthogonalPlane3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "OrthogonalPlane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "OrthogonalPlane3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "OrthogonalPlane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "PlaneBisectorWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "PlaneBisector", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "PlaneBisectorWithNSString:withOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "PlaneBisector", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "SphereWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Sphere", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "SphereWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Sphere", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "ConeWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Cone", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "ConeWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Cone", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "ConeWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Cone", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "ConeLimitedWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "ConeLimited", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "ConeLimitedWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "ConeLimited", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "CylinderWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Cylinder", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "CylinderWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Cylinder", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "CylinderWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Cylinder", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "CylinderLimitedWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "CylinderLimited", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "CylinderLimitedWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "CylinderLimited", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "QuadricSideWithNSString:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "QuadricSide", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DPart;", 0x11, NULL, NULL },
    { "QuadricBottomWithNSString:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "QuadricBottom", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x11, NULL, NULL },
    { "QuadricTopWithNSString:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "QuadricTop", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x11, NULL, NULL },
    { "Circle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Circle3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x11, NULL, NULL },
    { "Circle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Circle3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "Circle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Circle3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "Circle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Circle3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "Circle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Circle3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "Plane3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Plane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "Plane3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Plane3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "Plane3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "Plane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "Plane3DWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "Plane3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "IntersectWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "Intersect", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectionPointWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelGeosGeoSurfaceFinite:", "IntersectionPoint", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectionPointWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelGeosGeoElement:", "IntersectionPoint", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectPathWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelGeosGeoSurfaceFinite:", "IntersectPath", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectPathWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelGeosGeoElement:", "IntersectPath", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectPathWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelGeosGeoPolygon:", "IntersectPath", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectRegionWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelGeosGeoElement:withIntArray:", "IntersectRegion", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectRegionWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelGeosGeoElement:", "IntersectRegion", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "Intersect", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "IntersectQuadricLimitedWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectQuadricLimited", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "IntersectQuadricLimitedWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectQuadricLimited", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "IntersectWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "Intersect", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "IntersectAsCircleWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectAsCircle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectAsCircleWithOrgGeogebraCommonKernelKernelNDGeoQuadricND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectAsCircle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "Function2VarWithNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Function2Var", "Lorg.geogebra.common.kernel.geos.GeoFunctionNVar;", 0x11, NULL, NULL },
    { "Function2VarWithNSString:withOrgGeogebraCommonKernelGeosGeoFunctionNVar:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Function2Var", "Lorg.geogebra.common.kernel.geos.GeoFunctionNVar;", 0x11, NULL, NULL },
    { "CurveCartesian3DWithNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "CurveCartesian3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", 0x11, NULL, NULL },
    { "SurfaceCartesian3DWithNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "SurfaceCartesian3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "getIntersectionAlgorithm", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectLineConic3D;", 0x2, NULL, NULL },
    { "IntersectLineConicWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "IntersectLineConic", "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:withDouble:withDouble:withOrgGeogebraCommonKernelMatrixCoordMatrix:", "IntersectLineConicSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "IntersectLineConicSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:withInt:", "IntersectLineConicSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "IntersectLineConicSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "getIntersectionAlgorithm", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectConics3D;", 0x1, NULL, NULL },
    { "IntersectConicsWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "IntersectConics", "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:withDouble:withDouble:withOrgGeogebraCommonKernelMatrixCoordMatrix:", "IntersectConicsSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "IntersectConicsSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:withInt:", "IntersectConicsSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "IntersectConicsSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "getIntersectionAlgorithm", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectLineQuadric3D;", 0x2, NULL, NULL },
    { "IntersectLineQuadricWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectLineQuadric", "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "IntersectLineQuadricSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "IntersectLineQuadricSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineQuadricSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:withInt:", "IntersectLineQuadricSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineQuadricSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:withDouble:withDouble:withOrgGeogebraCommonKernelMatrixCoordMatrix4x4:", "IntersectLineQuadricSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineQuadricSingleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoQuadricND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "IntersectLineQuadricSingle", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "getIntersectionAlgorithm", "Lorg.geogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectPlaneConic;", 0x2, NULL, NULL },
    { "IntersectPlaneConicWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "IntersectPlaneConic", "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "IntersectPlanesWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:", "IntersectPlanes", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectPlanesWithOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:", "IntersectPlanes", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "ClosestPointWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "ClosestPoint", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "ClosestPointWithNSString:withOrgGeogebraCommonKernelPath:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "ClosestPoint", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "ClosestPointWithNSString:withOrgGeogebraCommonKernelRegion:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "ClosestPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "Angle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Angle3D", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Angle3D", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "AngleWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoNumberValue:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:withBoolean:", "Angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Angle3D", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Angle3D", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:", "Angle3D", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:", "Angle3D", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "createLineAngleWithOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "createLineAngle", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "createLineAngleWithOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "createLineAngle", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "Angle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "Angle3D", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Angle3D", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angles3DWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:", "Angles3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Angles3DWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Angles3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LengthWithNSString:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "Length", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "ArchimedeanSolidWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:withOrgGeogebraCommonKernelCommandsCommandsEnum:", "ArchimedeanSolid", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "ArchimedeanSolidWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelCommandsCommandsEnum:", "ArchimedeanSolid", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "ArchimedeanSolidWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelCommandsCommandsEnum:", "ArchimedeanSolid", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DistanceWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Distance", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "DistanceWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPlaneND:", "Distance", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "Translate3DWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "Translate3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "newGeo3DVecWithDouble:withDouble:withDouble:", "newGeo3DVec", "Lorg.geogebra.common.kernel.kernelND.Geo3DVec;", 0x1, NULL, NULL },
    { "Rotate3DWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Rotate3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Rotate3DWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoNumberValue:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Rotate3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Mirror3DWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Mirror3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Mirror3DWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Mirror3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Mirror3DWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "Mirror3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Dilate3DWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Dilate3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "VolumeWithNSString:withOrgGeogebraCommonKernelKernelNDHasVolume:", "Volume", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "OrientedHeightWithNSString:withOrgGeogebraCommonKernelKernelNDHasHeight:", "OrientedHeight", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "CornerWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Corner", "[Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "RegularPolygonWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "RegularPolygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyhedronNetWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:", "PolyhedronNet", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "PolyhedronConvexWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoElementArray:", "PolyhedronConvex", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "CircumcircleArc3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "CircumcircleArc3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConicPart3D;", 0x11, NULL, NULL },
    { "CircumcircleSector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "CircumcircleSector3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConicPart3D;", 0x11, NULL, NULL },
    { "AngularBisector3DWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "AngularBisector3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "AngularBisector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AngularBisector3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x11, NULL, NULL },
    { "AngularBisector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "AngularBisector3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x11, NULL, NULL },
    { "CircleArcSector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "CircleArcSector3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoConicPart3D;", 0x11, NULL, NULL },
    { "CircleArcSector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:withInt:", "CircleArcSector3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicPartND;", 0x11, NULL, NULL },
    { "Line3DWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionValueArray:withOrgGeogebraCommonKernelArithmeticExpressionValueArray:withOrgGeogebraCommonKernelArithmeticExpressionValueArray:", "Line3D", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x1, NULL, NULL },
    { "Semicircle3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "Semicircle3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicPartND;", 0x11, NULL, NULL },
    { "Tangent3DWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Tangent3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Tangent3DWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Tangent3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "CommonTangents3DWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "CommonTangents3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DiameterLine3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "DiameterLine3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DiameterLine3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "DiameterLine3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LineBisector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoSegmentND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "LineBisector3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LineBisector3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "LineBisector3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Conic3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "Conic3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "EllipseHyperbola3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "EllipseHyperbola3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "EllipseHyperbola3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:withInt:", "EllipseHyperbola3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "Parabola3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Parabola3D", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "Locus3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Locus3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Tangent3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoCurveCartesianND:", "Tangent3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "Locus3DWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoNumeric:", "Locus3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D = { 2, "Manager3D", "org.geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 171, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, OrgGeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_set_kernel_(self, kernel);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_set_cons_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction]);
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *new_OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self = [OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DInWithNSString_withOrgGeogebraCommonKernelRegion_withOrgGeogebraCommonKernelMatrixCoords_withBoolean_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelRegion> region, OrgGeogebraCommonKernelMatrixCoords *coords, jboolean addToConstruction, jboolean coords2D) {
  jboolean oldMacroMode = NO;
  if (!addToConstruction) {
    oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DInRegion *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DInRegion_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelRegion_withOrgGeogebraCommonKernelMatrixCoords_(self->cons_, label, region, coords) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [algo getP];
  if (coords2D) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian];
  else [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) update];
  if (!addToConstruction) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  return p;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DWithNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelPath> path, jdouble x, jdouble y, jdouble z, jboolean addToConstruction, jboolean coords2D) {
  jboolean oldMacroMode = NO;
  if (!addToConstruction) {
    oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  }
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_(self->cons_, label, path, x, y, z) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([algo getP], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (coords2D) [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian];
  else [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian3D];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) update];
  if (!addToConstruction) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  return p;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:c];
  if (existingAlgo != nil) return (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *) check_class_cast(existingAlgo, [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D class]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self->cons_, g, c) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) addIntersectionAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoIntersectAbstract:algo];
  return algo;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoConicND *c, jint index) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, OrgGeogebraCommonKernelKernelNDGeoConicND *A, OrgGeogebraCommonKernelKernelNDGeoConicND *B, jint index) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoConicND:A withOrgGeogebraCommonKernelKernelNDGeoConicND:B];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<OrgGeogebraCommonKernelKernelNDGeoLineND> A, OrgGeogebraCommonKernelKernelNDGeoQuadricND *B) {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:B];
  if (existingAlgo != nil) return (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *) check_class_cast(existingAlgo, [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D class]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self->cons_, A, B) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) addIntersectionAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoIntersectAbstract:algo];
  return algo;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineQuadricSingleWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoQuadricND *q, jint index) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoQuadricND_(self, g, q);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withOrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> A, OrgGeogebraCommonKernelKernelNDGeoConicND *B) {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:B];
  if (existingAlgo != nil) return (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *) check_class_cast(existingAlgo, [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic class]);
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self->cons_, A, B) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) addIntersectionAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoIntersectAbstract:algo];
  return algo;
}

OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self->cons_, label, A, B, C) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3DOrientation *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3DOrientation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self->cons_, label, A, B, C, orientation) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, id<OrgGeogebraCommonKernelKernelNDGeoLineND> h) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->cons_, label, g, h) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, id<OrgGeogebraCommonKernelKernelNDGeoLineND> h, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self->cons_, label, g, h, orientation) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_Rotate3DWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *geoRot, id<OrgGeogebraCommonKernelGeosGeoNumberValue> phi, id<OrgGeogebraCommonKernelKernelNDGeoPointND> center, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self->cons_, phi, center, orientation) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoRot withNSString:label];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_CircleArcSector3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self->cons_, label, A, B, C, type) autorelease];
  return [algo getConicPart];
}

OrgGeogebraCommonKernelKernelNDGeoConicND *OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D_EllipseHyperbola3DWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self->cons_, label, A, B, C, type) autorelease];
  return [algo getConic];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DAlgosManager3D)
