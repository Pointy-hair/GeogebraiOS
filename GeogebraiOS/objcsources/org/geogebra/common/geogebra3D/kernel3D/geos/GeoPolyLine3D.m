//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyLine3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D () {
 @public
  jboolean defined_GeoPolyLine3D_;
  jint index1_;
  jint index2_;
  OrgGeogebraCommonKernelMatrixCoords *direction1_;
  OrgGeogebraCommonKernelMatrixCoords *direction2_;
  OrgGeogebraCommonKernelMatrixCoords *direction3_;
  jboolean isPlanar__;
  OrgGeogebraCommonKernelMatrixCoords *normal_;
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *seg_GeoPolyLine3D_;
}

- (void)setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)geoPoint
                        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)geoPoint2;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, direction1_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, direction2_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, direction3_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, normal_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, seg_GeoPolyLine3D_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> geoPoint, id<OrgGeogebraCommonKernelKernelNDGeoPointND> geoPoint2);

@implementation OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  return self;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_POLYLINE3D();
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *ret = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil);
  ret->points_ = OrgGeogebraCommonKernelGeosGeoElement_copyPointsNDWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, points_);
  [ret setWithOrgGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *poly = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D class]);
  length_ = ((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *) nil_chk(poly))->length_;
  defined_GeoPolyLine3D_ = poly->defined_GeoPolyLine3D_;
  if (((IOSObjectArray *) nil_chk(points_))->size_ != poly->points_->size_) {
    IOSObjectArray *tempPoints = [IOSObjectArray newArrayWithLength:poly->points_->size_ type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
    for (jint i = 0; i < tempPoints->size_; i++) {
      (void) IOSObjectArray_Set(tempPoints, i, i < points_->size_ ? IOSObjectArray_Get(points_, i) : [self createNewPoint]);
    }
    points_ = tempPoints;
  }
  for (jint i = 0; i < points_->size_; i++) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) setWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(poly->points_, i)];
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)createNewPoint {
  return new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
}

- (void)setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)geoPoint
                        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)geoPoint2 {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, geoPoint, geoPoint2);
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                       withDouble:(jdouble)eps {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath] == self) return YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_ - 1; i++) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(points_, i), IOSObjectArray_Get(points_, i + 1));
    if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg_GeoPolyLine3D_)) isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withDouble:eps]) return YES;
  }
  return NO;
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  jint index;
  OrgGeogebraCommonKernelPathParameter *pp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  jdouble t = [((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
  if (t == ((IOSObjectArray *) nil_chk(points_))->size_ - 1) {
    index = points_->size_ - 2;
  }
  else {
    t = fmod(t, (points_->size_ - 1));
    if (t < 0) t += (points_->size_ - 1);
    index = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(t));
  }
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(points_, index), IOSObjectArray_Get(points_, index + 1));
  jdouble segParameter = t - index;
  [P setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg_GeoPolyLine3D_)) getPointCoordsWithDouble:segParameter] withBoolean:NO];
  [pp setTWithDouble:t];
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelPathParameter *pp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  jdouble t = [((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
  jdouble localT = 0;
  jint index;
  index = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(t));
  jint direction = 0;
  while (index >= 0 && index < [self getNumPoints] - 1) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(nil_chk(points_), index), IOSObjectArray_Get(points_, index + 1));
    localT = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg_GeoPolyLine3D_)) getParamOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    if (localT < 0 && direction <= 0) {
      direction = -1;
      index--;
    }
    else if (localT > 1 && direction >= 0) {
      direction = 1;
      index++;
    }
    else break;
  }
  if (index >= [self getNumPoints] - 1) index = [self getNumPoints] - 1;
  else if (index < 0) index = 0;
  t = index + JavaLangMath_minWithDouble_withDouble_(1, JavaLangMath_maxWithDouble_withDouble_(0, localT));
  [pp setTWithDouble:t];
  [self pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
}

- (void)calcLength {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, ((IOSObjectArray *) nil_chk(points_))->size_ - 1))) isDefined]) {
    [self setUndefined];
    length_ = JavaLangDouble_NaN;
    return;
  }
  length_ = 0;
  for (jint i = 0; i < points_->size_ - 1; i++) {
    if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) isDefined]) {
      [self setUndefined];
      length_ = JavaLangDouble_NaN;
      return;
    }
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(points_, i), IOSObjectArray_Get(points_, i + 1));
    length_ += [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg_GeoPolyLine3D_)) getLength];
  }
  [self setDefined];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  return;
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S {
  return;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  return;
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  return;
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S {
  return;
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  return;
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  return;
}

- (jboolean)isAllVertexLabelsSet {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) isLabelSet]) return NO;
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  return;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getPointWithInt:(jint)i {
  return nil;
}

- (void)toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)curve {
  return;
}

- (jboolean)isPlanar {
  return isPlanar__;
}

- (void)calcIsPlanar {
  if (![self isDefined]) return;
  if ([self getNumPoints] <= 3) {
    isPlanar__ = YES;
    return;
  }
  normal_ = nil;
  index1_ = index2_ = 0;
  direction1_ = direction2_ = direction3_ = nil;
  for (; index1_ < [self getNumPoints] - 1; index1_++) {
    if (![((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points_), index1_))) getInhomCoordsInD3])) equalsForKernelWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, 0))) getInhomCoordsInD3] withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) {
      direction1_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, index1_))) getInhomCoordsInD3])) subWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, 0))) getInhomCoordsInD3]];
      break;
    }
  }
  if (direction1_ == nil) {
    isPlanar__ = YES;
    return;
  }
  for (index2_ = index1_ + 1; index2_ < [self getNumPoints]; index2_++) {
    direction2_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points_), index2_))) getInhomCoordsInD3])) subWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, index1_))) getInhomCoordsInD3]];
    normal_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction1_)) crossProductWithOrgGeogebraCommonKernelMatrixCoords:direction2_];
    if (![((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) equalsForKernelWithOrgGeogebraCommonKernelMatrixCoords:new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 0, 0) withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) {
      break;
    }
    else {
      direction2_ = nil;
      normal_ = nil;
    }
  }
  if (direction2_ == nil || index2_ == [self getNumPoints] - 1) {
    isPlanar__ = YES;
    return;
  }
  if (index2_ + 1 < [self getNumPoints]) {
    direction3_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points_), index2_ + 1))) getInhomCoordsInD3])) subWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, index2_))) getInhomCoordsInD3]];
    if (![((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction3_)) crossProductWithOrgGeogebraCommonKernelMatrixCoords:normal_])) equalsForKernelWithOrgGeogebraCommonKernelMatrixCoords:new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 0, 0) withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) {
      isPlanar__ = NO;
      return;
    }
    isPlanar__ = YES;
    direction3_ = nil;
    return;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "GeoPolyLine3D", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "createNewPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setSegmentPoints", "V", 0x2, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "calcLength", NULL, "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "dilate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "isAllVertexLabelsSet", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "getPointWithInt:", "getPoint", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "toGeoCurveCartesian", "V", 0x1, NULL, NULL },
    { "isPlanar", NULL, "Z", 0x1, NULL, NULL },
    { "calcIsPlanar", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defined_GeoPolyLine3D_", "defined", 0x2, "Z", NULL, NULL,  },
    { "index1_", NULL, 0x2, "I", NULL, NULL,  },
    { "index2_", NULL, 0x2, "I", NULL, NULL,  },
    { "direction1_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "direction2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "direction3_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "isPlanar__", "isPlanar", 0x2, "Z", NULL, NULL,  },
    { "normal_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "seg_GeoPolyLine3D_", "seg", 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D = { 2, "GeoPolyLine3D", "org.geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 24, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *points) {
  (void) OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  self->defined_GeoPolyLine3D_ = NO;
  self->direction1_ = nil;
  self->direction2_ = nil;
  self->direction3_ = nil;
  self->isPlanar__ = NO;
  self->normal_ = nil;
  self->seg_GeoPolyLine3D_ = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *points) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> geoPoint, id<OrgGeogebraCommonKernelKernelNDGeoPointND> geoPoint2) {
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(self->seg_GeoPolyLine3D_)) setCoordWithOrgGeogebraCommonKernelKernelNDGeoPointND:geoPoint withOrgGeogebraCommonKernelKernelNDGeoPointND:geoPoint2];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D)
