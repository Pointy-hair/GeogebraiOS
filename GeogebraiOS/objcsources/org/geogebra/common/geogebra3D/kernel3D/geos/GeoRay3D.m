//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoJoinPoints3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoRayPointVector3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Transform.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoRayND.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D () {
 @public
  jboolean allowOutlyingIntersections__;
  jboolean keepTypeOnGeometricTransform_;
}

@end

@implementation OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)O
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, c, O, Q);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)O {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, c, O);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)construction {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_(self, construction);
  return self;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_RAY3D();
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *)createWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  return new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_(cons);
}

- (jdouble)getMinParameter {
  return 0;
}

- (jboolean)isValidCoordWithDouble:(jdouble)x {
  return (x >= 0);
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p
                                                 withDouble:(jdouble)eps {
  if (![super isOnPathWithOrgGeogebraCommonKernelMatrixCoords:p withDouble:eps]) return NO;
  return [self respectLimitedPathWithOrgGeogebraCommonKernelMatrixCoords:p withDouble:eps];
}

- (jboolean)respectLimitedPathWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p
                                                           withDouble:(jdouble)eps {
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getW], 0, eps)) return NO;
  jdouble d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([p subWithOrgGeogebraCommonKernelMatrixCoords:[self getStartInhomCoords]])) dotproductWithOrgGeogebraCommonKernelMatrixCoords:[self getDirectionInD3]];
  if (d < -eps) return NO;
  return YES;
}

- (jboolean)isLimitedPath {
  return YES;
}

- (jboolean)allowOutlyingIntersections {
  return allowOutlyingIntersections__;
}

- (void)setAllowOutlyingIntersectionsWithBoolean:(jboolean)flag {
  allowOutlyingIntersections__ = flag;
}

- (jboolean)keepsTypeOnGeometricTransform {
  return keepTypeOnGeometricTransform_;
}

- (void)setKeepTypeOnGeometricTransformWithBoolean:(jboolean)flag {
  keepTypeOnGeometricTransform_ = flag;
}

- (IOSObjectArray *)createTransformedObjectWithOrgGeogebraCommonKernelTransform:(OrgGeogebraCommonKernelTransform *)t
                                                                   withNSString:(NSString *)label {
  OrgGeogebraCommonKernelAlgosAlgoElement *algoParent = keepTypeOnGeometricTransform_ ? [self getParentAlgorithm] : nil;
  if ([algoParent isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D class]] && [((OrgGeogebraCommonKernelTransform *) nil_chk(t)) isAffine]) {
    OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algo = (OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *) check_class_cast(algoParent, [OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D class]);
    IOSObjectArray *points = [IOSObjectArray newArrayWithObjects:(id[]){ [algo getP], [algo getQ] } count:2 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
    points = [t transformPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    OrgGeogebraCommonKernelGeosGeoElement *ray = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<OrgGeogebraCommonKernelManager3DInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Ray3DWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)], [OrgGeogebraCommonKernelGeosGeoElement class]);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(ray)) setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:self];
    IOSObjectArray *geos = [IOSObjectArray newArrayWithObjects:(id[]){ ray, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 0), [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [OrgGeogebraCommonKernelGeosGeoElement class]) } count:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
  else {
    OrgGeogebraCommonKernelGeosGeoElement *transformedLine = [((OrgGeogebraCommonKernelTransform *) nil_chk(t)) getTransformedLineWithOrgGeogebraCommonKernelKernelNDGeoLineND:self];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(transformedLine)) setLabelWithNSString:label];
    IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ transformedLine } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
}

- (jboolean)isAllEndpointsLabelsSet {
  return [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) isLabelSet];
}

- (jboolean)isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p
                                                                    withDouble:(jdouble)eps {
  if (allowOutlyingIntersections__) return [self isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getCoordsInD3] withDouble:eps];
  else return [self isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withDouble:eps];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *ray = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) copyInternalWithOrgGeogebraCommonKernelConstruction:cons], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
  [ray setWithOrgGeogebraCommonKernelGeosGeoElement:self];
  return ray;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [super setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoRay]) return;
  if (![geo isDefined]) [self setUndefined];
  id<OrgGeogebraCommonKernelKernelNDGeoRayND> ray = (id<OrgGeogebraCommonKernelKernelNDGeoRayND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoRayND));
  [self setKeepTypeOnGeometricTransformWithBoolean:[ray keepsTypeOnGeometricTransform]];
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) setWithOrgGeogebraCommonKernelKernelNDGeoPointND:[ray getStartPoint]];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<outlyingIntersections val=\""];
  (void) [sb appendWithBoolean:allowOutlyingIntersections__];
  (void) [sb appendWithNSString:@"\"/>\n"];
  (void) [sb appendWithNSString:@"\t<keepTypeOnTransform val=\""];
  (void) [sb appendWithBoolean:keepTypeOnGeometricTransform_];
  (void) [sb appendWithNSString:@"\"/>\n"];
}

- (jboolean)isGeoRay {
  return YES;
}

- (jboolean)respectLimitedPathWithDouble:(jdouble)parameter {
  return OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(parameter, 0);
}

- (void)getCoordsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyFreeRay {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint1 = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getStartPoint])) copyInternalWithOrgGeogebraCommonKernelConstruction:cons_], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  OrgGeogebraCommonKernelMatrixCoords *direction = [self getDirectionInD3];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *directionVec = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [directionVec setCoordsWithOrgGeogebraCommonKernelMatrixCoords:direction];
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRayPointVector3D *algo = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoRayPointVector3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, nil, startPoint1, directionVec);
  return [algo getOutputWithInt:0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "GeoRay3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "GeoRay3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoRay3D", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "createWithOrgGeogebraCommonKernelConstruction:", "create", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoCoordSys1D;", 0x4, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "isValidCoordWithDouble:", "isValidCoord", "Z", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "respectLimitedPathWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "isLimitedPath", NULL, "Z", 0x11, NULL, NULL },
    { "allowOutlyingIntersections", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowOutlyingIntersectionsWithBoolean:", "setAllowOutlyingIntersections", "V", 0x1, NULL, NULL },
    { "keepsTypeOnGeometricTransform", NULL, "Z", 0x1, NULL, NULL },
    { "setKeepTypeOnGeometricTransformWithBoolean:", "setKeepTypeOnGeometricTransform", "V", 0x1, NULL, NULL },
    { "createTransformedObjectWithOrgGeogebraCommonKernelTransform:withNSString:", "createTransformedObject", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isAllEndpointsLabelsSet", NULL, "Z", 0x1, NULL, NULL },
    { "isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:withDouble:", "isIntersectionPointIncident", "Z", 0x1, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isGeoRay", NULL, "Z", 0x1, NULL, NULL },
    { "respectLimitedPathWithDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "getCoordsXMLWithJavaLangStringBuilder:", "getCoordsXML", "V", 0x14, NULL, NULL },
    { "copyFreeRay", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "allowOutlyingIntersections__", "allowOutlyingIntersections", 0x2, "Z", NULL, NULL,  },
    { "keepTypeOnGeometricTransform_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D = { 2, "GeoRay3D", "org.geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 24, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self, OrgGeogebraCommonKernelConstruction *c, id<OrgGeogebraCommonKernelKernelNDGeoPointND> O, id<OrgGeogebraCommonKernelKernelNDGeoPointND> Q) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, c, O, Q);
  self->allowOutlyingIntersections__ = NO;
  self->keepTypeOnGeometricTransform_ = YES;
  [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:O];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *c, id<OrgGeogebraCommonKernelKernelNDGeoPointND> O, id<OrgGeogebraCommonKernelKernelNDGeoPointND> Q) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, c, O, Q);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self, OrgGeogebraCommonKernelConstruction *c, id<OrgGeogebraCommonKernelKernelNDGeoPointND> O) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->allowOutlyingIntersections__ = NO;
  self->keepTypeOnGeometricTransform_ = YES;
  [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:O];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *c, id<OrgGeogebraCommonKernelKernelNDGeoPointND> O) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, c, O);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self, OrgGeogebraCommonKernelConstruction *construction) {
  (void) OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithOrgGeogebraCommonKernelConstruction_(self, construction);
  self->allowOutlyingIntersections__ = NO;
  self->keepTypeOnGeometricTransform_ = YES;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *construction) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithOrgGeogebraCommonKernelConstruction_(self, construction);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoRay3D)
