//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/Geo3DVec.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVec.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVec4D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocateableList.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint_;
  OrgGeogebraCommonKernelMatrixCoordMatrix *matrix_;
  OrgGeogebraCommonKernelMatrixCoords *labelPosition_;
  JavaLangStringBuilder *sbToString_GeoVector3D_;
  JavaLangStringBuilder *sbBuildValueString_GeoVector3D_;
  JavaLangStringBuilder *sb_;
  jboolean trace_;
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)setCoordSepWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)o1
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)vn;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, startPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, matrix_, OrgGeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, labelPosition_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, sbToString_GeoVector3D_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, sbBuildValueString_GeoVector3D_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isFinite(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self);

__attribute__((unused)) static JavaLangStringBuilder *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phiValue);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phiValue, OrgGeogebraCommonKernelMatrixCoords *o1, OrgGeogebraCommonKernelMatrixCoords *vn);

@implementation OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                 withDouble:(jdouble)x
                                                 withDouble:(jdouble)y
                                                 withDouble:(jdouble)z {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  return self;
}

- (void)setCoordsWithDoubleArray:(IOSDoubleArray *)vals {
  [super setCoordsWithDoubleArray:vals];
  if (matrix_ == nil) OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_matrix_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithOrgGeogebraCommonKernelMatrixCoords:[self getCoords] withInt:1];
}

- (void)updateStartPointPosition {
  if (startPoint_ != nil) [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithOrgGeogebraCommonKernelMatrixCoords:[startPoint_ getInhomCoordsInD3] withInt:2];
  else {
    for (jint i = 1; i < 4; i++) [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithInt:i withInt:2 withDouble:0.0];
    [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithInt:4 withInt:2 withDouble:1.0];
  }
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_set_labelPosition_(self, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) getOrigin])) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([matrix_ getVx])) mulWithDouble:0.5]]);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return labelPosition_;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_([self getConstruction]) autorelease];
  [ret setWithOrgGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_VECTOR3D();
}

- (jboolean)isDefined {
  return (!(JavaLangDouble_isNaNWithDouble_([self getX]) || JavaLangDouble_isNaNWithDouble_([self getY]) || JavaLangDouble_isNaNWithDouble_([self getZ]) || JavaLangDouble_isNaNWithDouble_([self getW])));
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoVector]) return NO;
  id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v = (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND));
  if (!(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isFinite(self) && [v isFinite])) return NO;
  OrgGeogebraCommonKernelMatrixCoords *c1 = [self getCoords];
  OrgGeogebraCommonKernelMatrixCoords *c2 = [v getCoordsInD3];
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(c1)) getX], [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(c2)) getX]) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([c1 getY], [c2 getY]) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([c1 getZ], [c2 getZ]);
}

- (jboolean)isInfinite {
  return OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(self);
}

- (jboolean)isFinite {
  return OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isFinite(self);
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoVector]) {
    id<OrgGeogebraCommonKernelKernelNDGeoVectorND> vec = (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND));
    [self setCoordsWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([vec getCoordsInD3])) get]];
    if (geo->cons_ != cons_ && [self isAlgoMacroOutput]) return;
    @try {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> sp = [vec getStartPoint];
      if (sp != nil) {
        if ([vec hasAbsoluteLocation]) {
          [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:[sp copy__]];
        }
        else {
          [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:sp];
        }
      }
    }
    @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
      OrgGeogebraCommonMainApp_debugWithNSString_(@"set GeoVector3D: CircularDefinitionException");
    }
  }
}

- (void)setUndefined {
  [self setCoordsWithDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return [self isDefined] && !OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(self);
}

- (jboolean)evaluatesTo3DVector {
  return YES;
}

- (jboolean)isPath {
  return YES;
}

- (jboolean)isGeoVector {
  return YES;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoVector3D_)) setLengthWithInt:0];
  [sbToString_GeoVector3D_ appendWithNSString:label_];
  switch ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getCoordStyle]]) {
    case OrgGeogebraCommonKernelKernel_COORD_STYLE_FRENCH:
    [sbToString_GeoVector3D_ appendWithNSString:@": "];
    case OrgGeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
    break;
    default:
    [sbToString_GeoVector3D_ appendWithNSString:@" = "];
  }
  [sbToString_GeoVector3D_ appendWithJavaLangCharSequence:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl)];
  return [sbToString_GeoVector3D_ description];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (jboolean)evaluatesToVectorNotPoint {
  return YES;
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (void)setCoordSepWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  if ([self getMode] == OrgGeogebraCommonKernelKernel_COORD_CARTESIAN_3D) {
    OrgGeogebraCommonKernelGeosGeoVector_buildLatexValueStringCoordCartesian3DWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withBoolean_(kernel_, tpl, [self getX], [self getY], [self getZ], sb_, self, symbolic);
    return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
  }
  if ([self getMode] == OrgGeogebraCommonKernelKernel_COORD_SPHERICAL) {
    OrgGeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [self getX], [self getY], [self getZ], sb_);
    return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
  }
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([self getZ])) {
    if ([self getMode] == OrgGeogebraCommonKernelKernel_COORD_POLAR) {
      OrgGeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [self getX], [self getY], [self getZ], sb_);
    }
    else {
      OrgGeogebraCommonKernelGeosGeoVector_buildLatexValueStringCoordCartesian3DWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withBoolean_(kernel_, tpl, [self getX], [self getY], [self getZ], sb_, self, symbolic);
    }
    return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
  }
  return OrgGeogebraCommonKernelGeosGeoVector_buildLatexStringWithOrgGeogebraCommonKernelKernel_withJavaLangStringBuilder_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(kernel_, sb_, symbolic, tpl, toStringMode_, [self getX], [self getY], self);
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  switch (toStringMode_) {
    case OrgGeogebraCommonKernelKernel_COORD_POLAR:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"polar\"/>\n"];
    break;
    case OrgGeogebraCommonKernelKernel_COORD_COMPLEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"complex\"/>\n"];
    break;
    case OrgGeogebraCommonKernelKernel_COORD_CARTESIAN:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"cartesian\"/>\n"];
    break;
    case OrgGeogebraCommonKernelKernel_COORD_SPHERICAL:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"spherical\"/>\n"];
    break;
    default:
    ;
  }
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  if (startPoint_ != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[startPoint_ getStartPointXML]];
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getStartPoint {
  return startPoint_;
}

- (void)setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (startPoint_ == p) return;
  if ([self isAlgoMacroOutput]) return;
  if ([self isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:p]) @throw [new_OrgGeogebraCommonKernelCircularDefinitionException_init() autorelease];
  if (startPoint_ != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_set_startPoint_(self, p);
  if (startPoint_ != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) registerLocateableWithOrgGeogebraCommonKernelLocateable:self];
}

- (IOSObjectArray *)getStartPoints {
  if (startPoint_ == nil) return nil;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  IOSObjectArray_Set(ret, 0, startPoint_);
  return ret;
}

- (jboolean)hasAbsoluteLocation {
  return startPoint_ == nil || [startPoint_ isAbsoluteStartPoint];
}

- (void)initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                            withInt:(jint)number {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_set_startPoint_(self, p);
}

- (jboolean)isAlwaysFixed {
  return NO;
}

- (void)removeStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (startPoint_ == p) {
    @try {
      [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (void)setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                           withInt:(jint)number {
  [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:p];
}

- (void)setWaitForStartPoint {
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *)getVector {
  return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_withDouble_(kernel_, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getX], [v_ getY], [v_ getZ]) autorelease];
}

- (IOSDoubleArray *)getPointAsDouble {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getX], [v_ getY], [v_ getZ] } count:3];
  return ret;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsInD2 {
  OrgGeogebraCommonKernelMatrixCoords *ret = [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  [ret setValuesWithOrgGeogebraCommonKernelMatrixCoords:v_ withInt:3];
  return ret;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsInD3 {
  OrgGeogebraCommonKernelMatrixCoords *ret = [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  [ret setValuesWithOrgGeogebraCommonKernelMatrixCoords:v_ withInt:4];
  return ret;
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  return [self getCoordsInD3];
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (void)getInhomCoordsWithDoubleArray:(IOSDoubleArray *)coords {
  *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getX];
  *IOSDoubleArray_GetRef(coords, 1) = [v_ getY];
  *IOSDoubleArray_GetRef(coords, 2) = [v_ getZ];
}

- (IOSDoubleArray *)getInhomCoords {
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:3];
  [self getInhomCoordsWithDoubleArray:coords];
  return coords;
}

- (void)updateColumnHeadingsForTraceValues {
  [self resetSpreadsheetColumnHeadings];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:[self getColumnHeadingTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) getXBracket], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) getCloseBracket]) autorelease]) autorelease]]];
  [spreadsheetColumnHeadings_ addWithId:[self getColumnHeadingTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) getYBracket], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) getCloseBracket]) autorelease]) autorelease]]];
  [spreadsheetColumnHeadings_ addWithId:[self getColumnHeadingTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) getZBracket], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) getCloseBracket]) autorelease]) autorelease]]];
}

- (OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_OR_COPY();
}

- (NSString *)getTraceDialogAsValues {
  NSString *name = [self getLabelTextOrHTMLWithBoolean:NO];
  JavaLangStringBuilder *sb1 = [new_JavaLangStringBuilder_init() autorelease];
  [sb1 appendWithNSString:@"x("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@"), y("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@"), z("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@")"];
  return [sb1 description];
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  OrgGeogebraCommonKernelGeosGeoNumeric *xx = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getX]) autorelease];
  [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:xx];
  OrgGeogebraCommonKernelGeosGeoNumeric *yy = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [v_ getY]) autorelease];
  [spreadsheetTraceList addWithId:yy];
  OrgGeogebraCommonKernelGeosGeoNumeric *zz = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [v_ getZ]) autorelease];
  [spreadsheetTraceList addWithId:zz];
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (void)updateLocation {
  [self updateGeo];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateLocationWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_(self, phiValue);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_(self, phiValue);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S
             withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonKernelMatrixCoords *o1 = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3];
  OrgGeogebraCommonKernelMatrixCoords *vn = [((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)o1
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)vn {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue
                  withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonKernelMatrixCoords *o1 = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  OrgGeogebraCommonKernelMatrixCoords *vn = [line getDirectionInD3];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  [self setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) mulWithDouble:-1]];
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonKernelMatrixCoords *vn = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) normalized];
  [self setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vn)) mulWithDouble:2 * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:vn]])) addWithOrgGeogebraCommonKernelMatrixCoords:[v_ mulWithDouble:-1]]];
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  OrgGeogebraCommonKernelMatrixCoords *vn = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getDirectionInD3])) normalized];
  [self setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[v_ addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vn)) mulWithDouble:-2 * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:vn]]]];
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)rval
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  [self setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v_)) mulWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble]]];
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a
                       withDouble:(jdouble)b
                       withDouble:(jdouble)c
                       withDouble:(jdouble)d {
  jdouble x = [self getX];
  jdouble y = [self getY];
  JavaLangDouble *x1 = JavaLangDouble_valueOfWithDouble_(a * x + b * y);
  JavaLangDouble *y1 = JavaLangDouble_valueOfWithDouble_(c * x + d * y);
  [self setCoordsWithDouble:[x1 doubleValue] withDouble:[y1 doubleValue] withDouble:[self getZ] withDouble:[self getW]];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  jdouble x = [self getX];
  jdouble y = [self getY];
  jdouble z = [self getZ];
  jdouble x1 = a00 * x + a01 * y + a02 * z;
  jdouble y1 = a10 * x + a11 * y + a12 * z;
  jdouble z1 = a20 * x + a21 * y + a22 * z;
  [self setCoordsWithDouble:x1 withDouble:y1 withDouble:z1 withDouble:[self getW]];
}

- (void)setCartesian {
  [self setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_CARTESIAN];
}

- (void)setCartesian3D {
  [self setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_CARTESIAN_3D];
}

- (void)setSpherical {
  [self setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_SPHERICAL];
}

- (void)setPolar {
  [self setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_POLAR];
}

- (void)setComplex {
  [self setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_COMPLEX];
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (jboolean)moveVectorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)rwTransVec
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)endPosition {
  jboolean movedGeo = NO;
  if (endPosition != nil) {
  }
  else {
    OrgGeogebraCommonKernelMatrixCoords *coords;
    OrgGeogebraCommonKernelMatrixCoords *current = [self getCoords];
    if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(current)) getLength] < [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getLength]) {
      coords = [current addWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec];
    }
    else {
      coords = [current addSmallerWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec];
    }
    [self setCoordsWithOrgGeogebraCommonKernelMatrixCoords:coords];
    movedGeo = YES;
  }
  return movedGeo;
}

- (void)dealloc {
  RELEASE_(startPoint_);
  RELEASE_(matrix_);
  RELEASE_(labelPosition_);
  RELEASE_(sbToString_GeoVector3D_);
  RELEASE_(sbBuildValueString_GeoVector3D_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoVector3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withDouble:withDouble:withDouble:", "GeoVector3D", NULL, 0x1, NULL, NULL },
    { "setCoordsWithDoubleArray:", "setCoords", "V", 0x1, NULL, NULL },
    { "updateStartPointPosition", NULL, "V", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x11, NULL, NULL },
    { "isFinite", NULL, "Z", 0x11, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoVector", NULL, "Z", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "buildValueStringWithOrgGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "setCoordSepWithOrgGeogebraCommonKernelStringTemplate:", "setCoordSep", "V", 0x2, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setStartPoint", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "getStartPoints", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "hasAbsoluteLocation", NULL, "Z", 0x1, NULL, NULL },
    { "initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "initStartPoint", "V", 0x1, NULL, NULL },
    { "isAlwaysFixed", NULL, "Z", 0x1, NULL, NULL },
    { "removeStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "removeStartPoint", "V", 0x1, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "setStartPoint", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "setWaitForStartPoint", NULL, "V", 0x1, NULL, NULL },
    { "getVector", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.Geo3DVec;", 0x1, NULL, NULL },
    { "getPointAsDouble", NULL, "[D", 0x1, NULL, NULL },
    { "getCoordsInD2", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD3", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "getDirectionInD3", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "getInhomCoordsWithDoubleArray:", "getInhomCoords", "V", 0x1, NULL, NULL },
    { "getInhomCoords", NULL, "[D", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "getTraceDialogAsValues", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "updateLocation", NULL, "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x2, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "setCartesian", NULL, "V", 0x1, NULL, NULL },
    { "setCartesian3D", NULL, "V", 0x1, NULL, NULL },
    { "setSpherical", NULL, "V", 0x1, NULL, NULL },
    { "setPolar", NULL, "V", 0x1, NULL, NULL },
    { "setComplex", NULL, "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "moveVectorWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "moveVector", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "startPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "matrix_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "labelPosition_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "sbToString_GeoVector3D_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildValueString_GeoVector3D_", "sbBuildValueString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D = { 2, "GeoVector3D", "org.geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 70, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_labelPosition_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sbToString_GeoVector3D_(self, new_JavaLangStringBuilder_initWithInt_(50));
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sbBuildValueString_GeoVector3D_(self, new_JavaLangStringBuilder_initWithInt_(50));
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_matrix_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  [self setCartesian3D];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, OrgGeogebraCommonKernelConstruction *c, jdouble x, jdouble y, jdouble z) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_withDouble_(self, c, x, y, z, 0);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_labelPosition_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sbToString_GeoVector3D_(self, new_JavaLangStringBuilder_initWithInt_(50));
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sbBuildValueString_GeoVector3D_(self, new_JavaLangStringBuilder_initWithInt_(50));
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_matrix_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  [self setCartesian3D];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelConstruction *c, jdouble x, jdouble y, jdouble z) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  return self;
}

jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self) {
  OrgGeogebraCommonKernelMatrixCoords *v = [self getCoords];
  return JavaLangDouble_isInfiniteWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX]) || JavaLangDouble_isInfiniteWithDouble_([v getY]) || JavaLangDouble_isInfiniteWithDouble_([v getZ]);
}

jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isFinite(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self) {
  return !OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(self);
}

JavaLangStringBuilder *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_GeoVector3D_)) setLengthWithInt:0];
  switch ([[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:@"ggbvect["];
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:[self getX] withOrgGeogebraCommonKernelStringTemplate:tpl]];
    [self->sbBuildValueString_GeoVector3D_ appendWithChar:','];
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[self->kernel_ formatWithDouble:[self getY] withOrgGeogebraCommonKernelStringTemplate:tpl]];
    [self->sbBuildValueString_GeoVector3D_ appendWithChar:','];
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[self->kernel_ formatWithDouble:[self getZ] withOrgGeogebraCommonKernelStringTemplate:tpl]];
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:@"]"];
    return self->sbBuildValueString_GeoVector3D_;
    default:
    ;
  }
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:@"("];
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:[self getX] withOrgGeogebraCommonKernelStringTemplate:tpl]];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[self->kernel_ formatWithDouble:[self getY] withOrgGeogebraCommonKernelStringTemplate:tpl]];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[self->kernel_ formatWithDouble:[self getZ] withOrgGeogebraCommonKernelStringTemplate:tpl]];
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:@")"];
  return self->sbBuildValueString_GeoVector3D_;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  switch ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getCoordStyle]]) {
    case OrgGeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
    [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_GeoVector3D_)) appendWithNSString:@" | "];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_GeoVector3D_)) appendWithNSString:@", "];
  }
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phiValue) {
  jdouble phi = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x = [self getX];
  jdouble y = [self getY];
  jdouble z = [self getZ];
  [self setCoordsWithDouble:x * cos - y * sin withDouble:x * sin + y * cos withDouble:z withDouble:[self getW]];
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phiValue, OrgGeogebraCommonKernelMatrixCoords *o1, OrgGeogebraCommonKernelMatrixCoords *vn) {
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vn)) isZero]) {
    [self setUndefined];
    return;
  }
  jdouble phi = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  OrgGeogebraCommonKernelMatrixCoords *vn2 = [vn normalized];
  OrgGeogebraCommonKernelMatrixCoords *v2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vn2)) crossProduct4WithOrgGeogebraCommonKernelMatrixCoords:self->v_];
  OrgGeogebraCommonKernelMatrixCoords *v1 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v2)) crossProduct4WithOrgGeogebraCommonKernelMatrixCoords:vn2];
  [self setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v1)) mulWithDouble:cos])) addWithOrgGeogebraCommonKernelMatrixCoords:[v2 mulWithDouble:sin]])) addWithOrgGeogebraCommonKernelMatrixCoords:[vn2 mulWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->v_)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:vn2]]]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D)
