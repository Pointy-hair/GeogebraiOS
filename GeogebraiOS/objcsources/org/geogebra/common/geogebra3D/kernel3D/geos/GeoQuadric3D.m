//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/EquationSolver.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/RegionParameters.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D () {
 @public
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *eigenMatrix_;
  jdouble detS_;
  jdouble volume_;
  OrgGeogebraCommonKernelMatrixCoordMatrix *tmpMatrix4x2_, *tmpMatrix2x4_;
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
  OrgGeogebraCommonKernelMatrixCoords *tmpCoords_;
}

- (void)classifyMidpointQuadricWithBoolean:(jboolean)degenerate;

- (void)ellipsoid;

- (jboolean)checkDefined;

- (void)setEigenMatrixWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)z;

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionToCenterWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p;

- (void)rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:(OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)tm;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, eigenMatrix_, OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, tmpMatrix4x2_, OrgGeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, tmpMatrix2x4_, OrgGeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, tmpMatrix4x4_, OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, tmpCoords_, OrgGeogebraCommonKernelMatrixCoords *)

static IOSObjectArray *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_vars3D_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, vars3D_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, vars3D_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setMatrixWithDoubleArray_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, IOSDoubleArray *coeffs);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_classifyMidpointQuadricWithBoolean_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, jboolean degenerate);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_ellipsoid(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_checkDefined(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, jdouble x, jdouble y, jdouble z);

__attribute__((unused)) static OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_getDirectionToCenterWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, OrgGeogebraCommonKernelMatrixCoords *p);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *tm);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D)

@implementation OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
                                            withDoubleArray:(IOSDoubleArray *)coeffs {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(self, c, label, coeffs);
  return self;
}

- (void)setMatrixWithDoubleArray:(IOSDoubleArray *)coeffs {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setMatrixWithDoubleArray_(self, coeffs);
}

- (void)classifyQuadric {
  [self classifyQuadricWithBoolean:NO];
}

- (void)classifyQuadricWithBoolean:(jboolean)degenerate {
  defined_ = (degenerate || OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_checkDefined(self));
  if (!defined_) return;
  detS_ = IOSDoubleArray_Get(nil_chk(matrix_), 0) * IOSDoubleArray_Get(matrix_, 1) * IOSDoubleArray_Get(matrix_, 2) - IOSDoubleArray_Get(matrix_, 0) * IOSDoubleArray_Get(matrix_, 6) * IOSDoubleArray_Get(matrix_, 6) - IOSDoubleArray_Get(matrix_, 1) * IOSDoubleArray_Get(matrix_, 5) * IOSDoubleArray_Get(matrix_, 5) - IOSDoubleArray_Get(matrix_, 2) * IOSDoubleArray_Get(matrix_, 4) * IOSDoubleArray_Get(matrix_, 4) + 2 * IOSDoubleArray_Get(matrix_, 4) * IOSDoubleArray_Get(matrix_, 5) * IOSDoubleArray_Get(matrix_, 6);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(detS_)) {
    type_ = OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
  }
  else {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_classifyMidpointQuadricWithBoolean_(self, degenerate);
  }
}

- (void)classifyMidpointQuadricWithBoolean:(jboolean)degenerate {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_classifyMidpointQuadricWithBoolean_(self, degenerate);
}

- (void)ellipsoid {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_ellipsoid(self);
}

- (jboolean)checkDefined {
  return OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_checkDefined(self);
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)quadric {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, quadric);
  return self;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMidpointND {
  return [self getMidpoint3D];
}

- (void)setSphereNDMatrixWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)M
                                                      withDouble:(jdouble)r {
  [super setSphereNDMatrixWithOrgGeogebraCommonKernelMatrixCoords:M withDouble:r];
  volume_ = 4 * JavaLangMath_PI * [self getHalfAxisWithInt:0] * [self getHalfAxisWithInt:1] * [self getHalfAxisWithInt:2] / 3;
  *IOSDoubleArray_GetRef(nil_chk(diagonal_), 0) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 1) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 2) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 3) = -r * r;
  [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) setOriginWithOrgGeogebraCommonKernelMatrixCoords:[self getMidpoint3D]];
  for (jint i = 1; i <= 3; i++) {
    [eigenMatrix_ setWithInt:i withInt:i withDouble:[self getHalfAxisWithInt:i - 1]];
  }
}

- (void)setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
                 withOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
}

- (void)setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  [self setSphereNDMatrixWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(M)) getInhomCoordsInD3] withDouble:[M distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]];
}

- (void)setConeWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
              withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)direction
                                                  withDouble:(jdouble)angle {
  defined_ = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(origin, [OrgGeogebraCommonKernelGeosGeoElement class])))) isDefined] && ![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin)) isInfinite]);
  jdouble r;
  jdouble c = JavaLangMath_cosWithDouble_(angle);
  jdouble s = JavaLangMath_sinWithDouble_(angle);
  if (c < 0 || s < 0) defined_ = NO;
  else if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(c)) defined_ = NO;
  else if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(s)) defined_ = NO;
  else {
    r = s / c;
    [self setConeWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin)) getInhomCoordsInD3] withOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(direction)) getCoordsInD3] withDouble:r];
  }
}

- (void)setConeWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)origin
               withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)direction
                                            withDouble:(jdouble)r {
  [self setMidpointWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(origin)) get]];
  IOSObjectArray_Set(nil_chk(eigenvecND_), 2, direction);
  IOSObjectArray *ee = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction)) completeOrthonormal];
  IOSObjectArray_Set(eigenvecND_, 0, IOSObjectArray_Get(nil_chk(ee), 0));
  IOSObjectArray_Set(eigenvecND_, 1, IOSObjectArray_Get(ee, 1));
  for (jint i = 0; i < 2; i++) *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) = r;
  *IOSDoubleArray_GetRef(nil_chk(halfAxes_), 2) = 1;
  *IOSDoubleArray_GetRef(nil_chk(diagonal_), 0) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 1) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 2) = -r * r;
  *IOSDoubleArray_GetRef(diagonal_, 3) = 0;
  [self setMatrixFromEigen];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, IOSDoubleArray_Get(halfAxes_, 0), IOSDoubleArray_Get(halfAxes_, 1), 1);
  type_ = OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE;
}

- (void)setCylinderWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)origin
                         withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)direction
                                                      withDouble:(jdouble)r {
  defined_ = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(origin, [OrgGeogebraCommonKernelGeosGeoElement class])))) isDefined] && ![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin)) isInfinite]);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(r)) {
    r = 0;
  }
  else if (r < 0) {
    defined_ = NO;
  }
  if (defined_) {
    [self setCylinderWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin)) getInhomCoordsInD3] withOrgGeogebraCommonKernelMatrixCoords:direction withDouble:r];
  }
}

- (void)setCylinderWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)origin
                   withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)direction
                                                withDouble:(jdouble)r {
  [self setMidpointWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(origin)) get]];
  IOSObjectArray_Set(nil_chk(eigenvecND_), 2, direction);
  IOSObjectArray *ee = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction)) completeOrthonormal];
  IOSObjectArray_Set(eigenvecND_, 0, IOSObjectArray_Get(nil_chk(ee), 0));
  IOSObjectArray_Set(eigenvecND_, 1, IOSObjectArray_Get(ee, 1));
  for (jint i = 0; i < 2; i++) *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) = r;
  *IOSDoubleArray_GetRef(nil_chk(halfAxes_), 2) = 1;
  *IOSDoubleArray_GetRef(nil_chk(diagonal_), 0) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 1) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 2) = 0;
  *IOSDoubleArray_GetRef(diagonal_, 3) = -r * r;
  [self setMatrixFromEigen];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, IOSDoubleArray_Get(halfAxes_, 0), IOSDoubleArray_Get(halfAxes_, 1), 1);
  type_ = OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER;
}

- (void)setEigenMatrixWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)z {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, x, y, z);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self) autorelease];
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_QUADRIC();
}

- (NSString *)getTypeString {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    return @"Sphere";
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    return @"Cylinder";
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    return @"Cone";
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED:
    default:
    return @"Quadric";
  }
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  toStringMode_ = ((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric))->toStringMode_;
  type_ = quadric->type_;
  for (jint i = 0; i < 10; i++) *IOSDoubleArray_GetRef(nil_chk(matrix_), i) = IOSDoubleArray_Get(quadric->matrix_, i);
  for (jint i = 0; i < 3; i++) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvecND_), i))) setWithOrgGeogebraCommonKernelMatrixCoords:[quadric getEigenvec3DWithInt:i]];
    *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) = IOSDoubleArray_Get(quadric->halfAxes_, i);
  }
  for (jint i = 0; i < 4; i++) {
    *IOSDoubleArray_GetRef(nil_chk(diagonal_), i) = IOSDoubleArray_Get(quadric->diagonal_, i);
  }
  [self setMidpointWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([quadric getMidpoint])) get]];
  [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) setWithOrgGeogebraCommonKernelMatrixCoordMatrix:quadric->eigenMatrix_];
  defined_ = quadric->defined_;
  volume_ = quadric->volume_;
  [super setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return type_ != OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToValueString = [new_JavaLangStringBuilder_init() autorelease];
  {
    IOSDoubleArray *coeffs;
    switch (type_) {
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      [self buildSphereNDStringWithJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      default:
      coeffs = [IOSDoubleArray arrayWithLength:10];
      *IOSDoubleArray_GetRef(coeffs, 0) = IOSDoubleArray_Get(nil_chk(matrix_), 0);
      *IOSDoubleArray_GetRef(coeffs, 1) = IOSDoubleArray_Get(matrix_, 1);
      *IOSDoubleArray_GetRef(coeffs, 2) = IOSDoubleArray_Get(matrix_, 2);
      *IOSDoubleArray_GetRef(coeffs, 9) = IOSDoubleArray_Get(matrix_, 3);
      *IOSDoubleArray_GetRef(coeffs, 3) = 2 * IOSDoubleArray_Get(matrix_, 4);
      *IOSDoubleArray_GetRef(coeffs, 4) = 2 * IOSDoubleArray_Get(matrix_, 5);
      *IOSDoubleArray_GetRef(coeffs, 5) = 2 * IOSDoubleArray_Get(matrix_, 6);
      *IOSDoubleArray_GetRef(coeffs, 6) = 2 * IOSDoubleArray_Get(matrix_, 7);
      *IOSDoubleArray_GetRef(coeffs, 7) = 2 * IOSDoubleArray_Get(matrix_, 8);
      *IOSDoubleArray_GetRef(coeffs, 8) = 2 * IOSDoubleArray_Get(matrix_, 9);
      return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildImplicitEquationWithDoubleArray:coeffs withNSStringArray:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_vars3D_ withBoolean:NO withBoolean:YES withBoolean:YES withChar:'=' withOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  return sbToValueString;
}

- (jboolean)isFillable {
  return YES;
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (OrgGeogebraCommonKernelMatrixCoords *)evaluatePointWithDouble:(jdouble)u
                                                      withDouble:(jdouble)v {
  OrgGeogebraCommonKernelMatrixCoords *ret = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
  [self evaluatePointWithDouble:u withDouble:v withOrgGeogebraCommonKernelMatrixCoords:ret];
  return ret;
}

- (void)evaluatePointWithDouble:(jdouble)u
                     withDouble:(jdouble)v
withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)point {
  {
    jdouble v2;
    switch (type_) {
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) setMulPointWithOrgGeogebraCommonKernelMatrixCoordMatrix:eigenMatrix_ withDouble:JavaLangMath_cosWithDouble_(u) * JavaLangMath_cosWithDouble_(v) withDouble:JavaLangMath_sinWithDouble_(u) * JavaLangMath_cosWithDouble_(v) withDouble:JavaLangMath_sinWithDouble_(v)];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      v2 = JavaLangMath_absWithDouble_(v);
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) setMulPointWithOrgGeogebraCommonKernelMatrixCoordMatrix:eigenMatrix_ withDouble:JavaLangMath_cosWithDouble_(u) * v2 withDouble:JavaLangMath_sinWithDouble_(u) * v2 withDouble:v];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) setMulPointWithOrgGeogebraCommonKernelMatrixCoordMatrix:eigenMatrix_ withDouble:JavaLangMath_cosWithDouble_(u) withDouble:JavaLangMath_sinWithDouble_(u) withDouble:v];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT:
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) setWithOrgGeogebraCommonKernelMatrixCoords:[self getMidpoint3D]];
      break;
      default:
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("@$I", self, @" has wrong type : ", type_));
      break;
    }
  }
}

- (OrgGeogebraCommonKernelMatrixCoords *)evaluateNormalWithDouble:(jdouble)u
                                                       withDouble:(jdouble)v {
  OrgGeogebraCommonKernelMatrixCoords *n;
  {
    jdouble r;
    jdouble r2;
    switch (type_) {
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      return [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(JavaLangMath_cosWithDouble_(u) * JavaLangMath_cosWithDouble_(v), JavaLangMath_sinWithDouble_(u) * JavaLangMath_cosWithDouble_(v), JavaLangMath_sinWithDouble_(v), 0) autorelease];
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      r = [self getHalfAxisWithInt:0];
      r2 = JavaLangMath_sqrtWithDouble_(1 + r * r);
      if (v < 0) r = -r;
      n = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:1])) mulWithDouble:JavaLangMath_sinWithDouble_(u) / r2])) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:0])) mulWithDouble:JavaLangMath_cosWithDouble_(u) / r2])) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:2])) mulWithDouble:-r / r2]]];
      return n;
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      n = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:1])) mulWithDouble:JavaLangMath_sinWithDouble_(u)])) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:0])) mulWithDouble:JavaLangMath_cosWithDouble_(u)]];
      return n;
      default:
      return nil;
    }
  }
}

- (jdouble)getMinParameterWithInt:(jint)index {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    switch (index) {
      case 0:
      default:
      return 0;
      case 1:
      return -JavaLangMath_PI / 2;
    }
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    switch (index) {
      case 0:
      default:
      return 0;
      case 1:
      return JavaLangDouble_NEGATIVE_INFINITY;
    }
    default:
    return 0;
  }
}

- (jdouble)getMaxParameterWithInt:(jint)index {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    switch (index) {
      case 0:
      default:
      return 2 * JavaLangMath_PI;
      case 1:
      return JavaLangMath_PI / 2;
    }
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    switch (index) {
      case 0:
      default:
      return 2 * JavaLangMath_PI;
      case 1:
      return JavaLangDouble_POSITIVE_INFINITY;
    }
    default:
    return 0;
  }
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMainDirection {
  return OrgGeogebraCommonKernelMatrixCoords_get_VZ_();
}

- (jboolean)isRegion {
  return YES;
}

- (void)getNormalProjectionParametersWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
                                                             withDoubleArray:(IOSDoubleArray *)parameters {
  OrgGeogebraCommonKernelMatrixCoords *eigenCoords = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) solveWithOrgGeogebraCommonKernelMatrixCoords:coords];
  jdouble x = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(eigenCoords)) getX];
  jdouble y = [eigenCoords getY];
  jdouble z = [eigenCoords getZ];
  {
    jdouble r;
    switch ([self getType]) {
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      *IOSDoubleArray_GetRef(nil_chk(parameters), 0) = JavaLangMath_atan2WithDouble_withDouble_(y, x);
      r = JavaLangMath_sqrtWithDouble_(x * x + y * y);
      *IOSDoubleArray_GetRef(parameters, 1) = JavaLangMath_atan2WithDouble_withDouble_(z, r);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      *IOSDoubleArray_GetRef(nil_chk(parameters), 0) = JavaLangMath_atan2WithDouble_withDouble_(y, x);
      *IOSDoubleArray_GetRef(parameters, 1) = z;
      break;
      default:
      OrgGeogebraCommonMainApp_printStacktraceWithId_(JreStrcat("$I", @"TODO -- type: ", [self getType]));
      break;
    }
  }
}

- (IOSObjectArray *)getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  [self getNormalProjectionParametersWithOrgGeogebraCommonKernelMatrixCoords:coords withDoubleArray:tmpDouble2_];
  return [IOSObjectArray arrayWithObjects:(id[]){ [self getPointWithDouble:IOSDoubleArray_Get(nil_chk(tmpDouble2_), 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1)], [new_OrgGeogebraCommonKernelMatrixCoords_initWithDoubleArray_(tmpDouble2_) autorelease] } count:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
}

- (IOSObjectArray *)getProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingDirection
                                                              withDouble:(jdouble)t1
                                                              withDouble:(jdouble)t2 {
  return [self getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingDirection)) mulWithDouble:t1]]];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)u
                                                 withDouble:(jdouble)v {
  return [self evaluatePointWithDouble:u withDouble:v];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getPointInRegionWithDouble:(jdouble)u
                                                         withDouble:(jdouble)v {
  return [self getPointWithDouble:u withDouble:v];
}

- (IOSObjectArray *)getProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)oldCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingDirection {
  OrgGeogebraCommonKernelMatrixCoordMatrix *qm = [self getSymetricMatrix];
  if (tmpMatrix4x2_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x2_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  }
  [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix4x2_)) setVxWithOrgGeogebraCommonKernelMatrixCoords:willingDirection];
  [tmpMatrix4x2_ setOriginWithOrgGeogebraCommonKernelMatrixCoords:willingCoords];
  if (tmpMatrix2x4_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix2x4_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(2, 4));
  }
  [tmpMatrix4x2_ transposeCopyWithOrgGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix2x4_];
  OrgGeogebraCommonKernelMatrixCoordMatrix *sm = [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix2x4_)) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:qm])) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix4x2_];
  jdouble a = [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(sm)) getWithInt:1 withInt:1];
  jdouble b = [sm getWithInt:1 withInt:2];
  jdouble c = [sm getWithInt:2 withInt:2];
  jdouble Delta = b * b - a * c;
  if (Delta >= 0) {
    jdouble t1 = (-b - JavaLangMath_sqrtWithDouble_(Delta)) / a;
    jdouble t2 = (-b + JavaLangMath_sqrtWithDouble_(Delta)) / a;
    return [self getProjectionWithOrgGeogebraCommonKernelMatrixCoords:willingCoords withOrgGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t1 withDouble:t2];
  }
  return [self getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingDirection)) mulWithDouble:-b / a]]];
}

- (void)getProjectionsWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)oldCoords
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingCoords
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingDirection
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p1
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p2 {
  OrgGeogebraCommonKernelMatrixCoordMatrix *qm = [self getSymetricMatrix];
  if (tmpMatrix4x2_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x2_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  }
  [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix4x2_)) setVxWithOrgGeogebraCommonKernelMatrixCoords:willingDirection];
  [tmpMatrix4x2_ setOriginWithOrgGeogebraCommonKernelMatrixCoords:willingCoords];
  if (tmpMatrix2x4_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix2x4_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(2, 4));
  }
  [tmpMatrix4x2_ transposeCopyWithOrgGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix2x4_];
  OrgGeogebraCommonKernelMatrixCoordMatrix *sm = [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix2x4_)) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:qm])) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix4x2_];
  jdouble a = [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(sm)) getWithInt:1 withInt:1];
  jdouble b = [sm getWithInt:1 withInt:2];
  jdouble c = [sm getWithInt:2 withInt:2];
  jdouble Delta = b * b - a * c;
  if (Delta >= 0) {
    jdouble t1 = (-b - JavaLangMath_sqrtWithDouble_(Delta)) / a;
    jdouble t2 = (-b + JavaLangMath_sqrtWithDouble_(Delta)) / a;
    [tmpCoords_ setAddWithOrgGeogebraCommonKernelMatrixCoords:willingCoords withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setMulWithOrgGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t1]];
    [self getNormalProjectionParametersWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:tmpDouble2_];
    [self checkParametersWithDoubleArray:tmpDouble2_];
    [self evaluatePointWithDouble:IOSDoubleArray_Get(nil_chk(tmpDouble2_), 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1) withOrgGeogebraCommonKernelMatrixCoords:p1];
    [tmpCoords_ setAddWithOrgGeogebraCommonKernelMatrixCoords:willingCoords withOrgGeogebraCommonKernelMatrixCoords:[tmpCoords_ setMulWithOrgGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t2]];
    [self getNormalProjectionParametersWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:tmpDouble2_];
    [self checkParametersWithDoubleArray:tmpDouble2_];
    [self evaluatePointWithDouble:IOSDoubleArray_Get(tmpDouble2_, 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1) withOrgGeogebraCommonKernelMatrixCoords:p2];
  }
  else {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p1)) setWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk([self getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingDirection)) mulWithDouble:-b / a]]]), 0)];
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p2)) setUndefined];
  }
}

- (jboolean)checkParametersWithDoubleArray:(IOSDoubleArray *)parameters {
  return YES;
}

- (jboolean)isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  return [self isInRegionWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD3]];
}

- (jboolean)isInRegionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  return OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk([self getSymetricMatrix])) mulWithOrgGeogebraCommonKernelMatrixCoords:coords]]);
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  return NO;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionToCenterWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p {
  return OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_getDirectionToCenterWithOrgGeogebraCommonKernelMatrixCoords_(self, p);
}

- (void)pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[self getMidpoint3D] withBoolean:NO];
    [p updateCoords];
    return;
  }
  OrgGeogebraCommonKernelMatrixCoords *willingCoords;
  if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) hasWillingCoords]) {
    willingCoords = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([p getWillingCoords])) copyVector];
    [p setWillingCoordsUndefined];
  }
  else {
    willingCoords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD3];
  }
  OrgGeogebraCommonKernelMatrixCoords *willingDirection;
  if ([p hasWillingDirection]) {
    willingDirection = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([p getWillingDirection])) copyVector];
    [p setWillingDirectionUndefined];
  }
  else {
    willingDirection = OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_getDirectionToCenterWithOrgGeogebraCommonKernelMatrixCoords_(self, willingCoords);
  }
  IOSObjectArray *coords = [self getProjectionWithOrgGeogebraCommonKernelMatrixCoords:nil withOrgGeogebraCommonKernelMatrixCoords:willingCoords withOrgGeogebraCommonKernelMatrixCoords:willingDirection];
  OrgGeogebraCommonKernelRegionParameters *rp = [p getRegionParameters];
  [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) setT1WithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(coords), 1))) getWithInt:1]];
  [rp setT2WithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(coords, 1))) getWithInt:2]];
  [rp setNormalWithOrgGeogebraCommonKernelMatrixCoords:[self evaluateNormalWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(coords, 1))) getWithInt:1] withDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(coords, 1))) getWithInt:2]]];
  [p setCoordsWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(coords, 0) withBoolean:NO];
  [p updateCoords];
}

- (void)regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[self getMidpoint3D] withBoolean:NO];
    [p updateCoords];
    return;
  }
  OrgGeogebraCommonKernelRegionParameters *rp = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) getRegionParameters];
  OrgGeogebraCommonKernelMatrixCoords *coords = [self getPointInRegionWithDouble:[((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) getT1] withDouble:[rp getT2]];
  [p setCoordsWithOrgGeogebraCommonKernelMatrixCoords:coords withBoolean:NO];
  [p updateCoords];
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  OrgGeogebraCommonKernelMatrixCoords *m = [self getMidpoint3D];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(m)) addInsideWithOrgGeogebraCommonKernelMatrixCoords:v];
  [self setMidpointWithDoubleArray:[m get]];
  OrgGeogebraCommonKernelMatrixCoordMatrix *sm = [self getSymetricMatrix];
  OrgGeogebraCommonKernelMatrixCoordMatrix *tm = OrgGeogebraCommonKernelMatrixCoordMatrix_IdentityWithInt_(4);
  [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tm)) subToOriginWithOrgGeogebraCommonKernelMatrixCoords:v];
  [self setMatrixWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(([tm transposeCopy]))) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:sm])) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:tm]];
  [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) setOriginWithOrgGeogebraCommonKernelMatrixCoords:m];
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S {
  if (tmpMatrix4x4_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x4_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordMatrix4x4_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3], tmpMatrix4x4_);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  if (tmpMatrix4x4_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x4_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithDouble_withOrgGeogebraCommonKernelMatrixCoordMatrix4x4_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], tmpMatrix4x4_);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:(OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *)tm {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tm);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S
             withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (tmpMatrix4x4_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x4_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithOrgGeogebraCommonKernelMatrixCoords_withDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordMatrix4x4_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3])) normalized], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3], tmpMatrix4x4_);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                  withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  if (tmpMatrix4x4_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x4_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithOrgGeogebraCommonKernelMatrixCoords_withDouble_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordMatrix4x4_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) normalized], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [line getStartInhomCoords], tmpMatrix4x4_);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)point {
  [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) mulInsideWithDouble:-1];
  [eigenMatrix_ addToOriginWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) mulWithDouble:2]];
  [self setMidpointWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([eigenMatrix_ getOrigin])) get]];
  for (jint i = 0; i < 3; i++) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvecND_), i))) mulInsideWithDouble:-1];
  }
  [self setMatrixFromEigen];
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonKernelMatrixCoords *point = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  OrgGeogebraCommonKernelMatrixCoords *direction = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([line getDirectionInD3])) normalized];
  OrgGeogebraCommonKernelMatrixCoords *mp = [self getMidpoint3D];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(mp)) projectLineWithOrgGeogebraCommonKernelMatrixCoords:point withOrgGeogebraCommonKernelMatrixCoords:direction withOrgGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:nil];
  [mp mulInsideWithDouble:-1];
  [mp addInsideWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) mulWithDouble:2]];
  [self setMidpointWithDoubleArray:[mp get]];
  for (jint i = 0; i < 3; i++) {
    OrgGeogebraCommonKernelMatrixCoords *v = IOSObjectArray_Get(nil_chk(eigenvecND_), i);
    jdouble a = 2 * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:direction];
    [v mulInsideWithDouble:-1];
    [v addInsideWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction)) mulWithDouble:a]];
  }
  [self setMatrixFromEigen];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, [self getHalfAxisWithInt:0], [self getHalfAxisWithInt:1], [self getHalfAxisWithInt:2]);
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  OrgGeogebraCommonKernelMatrixCoords *vn = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getDirectionInD3])) normalized];
  OrgGeogebraCommonKernelMatrixCoords *mp = [self getMidpoint3D];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(mp)) projectPlaneWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([plane getCoordSys])) getMatrixOrthonormal] withOrgGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [mp mulInsideWithDouble:-1];
  [mp addInsideWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) mulWithDouble:2]];
  [self setMidpointWithDoubleArray:[mp get]];
  for (jint i = 0; i < 3; i++) {
    OrgGeogebraCommonKernelMatrixCoords *v = IOSObjectArray_Get(nil_chk(eigenvecND_), i);
    jdouble a = -2 * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithOrgGeogebraCommonKernelMatrixCoords:vn];
    [v addInsideWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(vn)) mulWithDouble:a]];
  }
  [self setMatrixFromEigen];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, [self getHalfAxisWithInt:0], [self getHalfAxisWithInt:1], [self getHalfAxisWithInt:2]);
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)rval
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  OrgGeogebraCommonKernelMatrixCoords *mp = [self getMidpoint3D];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(mp)) mulInsideWithDouble:r];
  [mp addInsideWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(S)) mulWithDouble:1 - r]];
  [self setMidpointWithDoubleArray:[mp get]];
  if (r < 0) {
    for (jint i = 0; i < 3; i++) {
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvecND_), i))) mulInsideWithDouble:-1];
    }
    r = -r;
  }
  switch ([self getType]) {
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    *IOSDoubleArray_GetRef(nil_chk(diagonal_), 3) *= r * r;
    for (jint i = 0; i < 3; i++) {
      *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) *= r;
    }
    break;
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    break;
  }
  [self setMatrixFromEigen];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, [self getHalfAxisWithInt:0], [self getHalfAxisWithInt:1], [self getHalfAxisWithInt:2]);
  volume_ *= r * r * r;
}

- (jdouble)getVolume {
  switch ([self getType]) {
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    return volume_;
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    default:
    return JavaLangDouble_NaN;
  }
}

- (jboolean)hasFiniteVolume {
  switch ([self getType]) {
    case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    return [self isDefined];
    default:
    return NO;
  }
}

- (void)setUndefined {
  [super setUndefined];
  volume_ = JavaLangDouble_NaN;
}

- (void)singlePoint {
  type_ = OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT;
}

- (jboolean)isGeoQuadric {
  return YES;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getXMLtagsMatrixWithJavaLangStringBuilder:sb];
}

- (void)getXMLtagsMatrixWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<matrix"];
  for (jint i = 0; i < 10; i++) [sb appendWithNSString:JreStrcat("$I$DC", @" A", i, @"=\"", IOSDoubleArray_Get(nil_chk(matrix_), i), '"')];
  [sb appendWithNSString:@"/>\n"];
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (void)dealloc {
  RELEASE_(eigenMatrix_);
  RELEASE_(tmpDouble2_);
  RELEASE_(tmpDouble2bis_);
  RELEASE_(tmpMatrix4x2_);
  RELEASE_(tmpMatrix2x4_);
  RELEASE_(tmpMatrix4x4_);
  RELEASE_(tmpCoords_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_vars3D_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ @"x\u00b2", @"y\u00b2", @"z\u00b2", @"x y", @"x z", @"y z", @"x", @"y", @"z" } count:9 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoQuadric3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withDoubleArray:", "GeoQuadric3D", NULL, 0x1, NULL, NULL },
    { "setMatrixWithDoubleArray:", "setMatrix", "V", 0x11, NULL, NULL },
    { "classifyQuadric", NULL, "V", 0x4, NULL, NULL },
    { "classifyQuadricWithBoolean:", "classifyQuadric", "V", 0x1, NULL, NULL },
    { "classifyMidpointQuadricWithBoolean:", "classifyMidpointQuadric", "V", 0x2, NULL, NULL },
    { "ellipsoid", NULL, "V", 0x2, NULL, NULL },
    { "checkDefined", NULL, "Z", 0x12, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:", "GeoQuadric3D", NULL, 0x1, NULL, NULL },
    { "getMidpointND", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setSphereNDMatrixWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "setSphereNDMatrix", "V", 0x4, NULL, NULL },
    { "setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setConeWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withDouble:", "setCone", "V", 0x1, NULL, NULL },
    { "setConeWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withDouble:", "setCone", "V", 0x1, NULL, NULL },
    { "setCylinderWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelMatrixCoords:withDouble:", "setCylinder", "V", 0x1, NULL, NULL },
    { "setCylinderWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withDouble:", "setCylinder", "V", 0x1, NULL, NULL },
    { "setEigenMatrixWithDouble:withDouble:withDouble:", "setEigenMatrix", "V", 0x2, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "buildValueStringWithOrgGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:", "evaluatePoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:withOrgGeogebraCommonKernelMatrixCoords:", "evaluatePoint", "V", 0x1, NULL, NULL },
    { "evaluateNormalWithDouble:withDouble:", "evaluateNormal", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "getNormalProjectionParametersWithOrgGeogebraCommonKernelMatrixCoords:withDoubleArray:", "getNormalProjectionParameters", "V", 0x4, NULL, NULL },
    { "getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:", "getNormalProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withDouble:withDouble:", "getProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getPointWithDouble:withDouble:", "getPoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointInRegionWithDouble:withDouble:", "getPointInRegion", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getProjectionWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "getProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionsWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "getProjections", "V", 0x1, NULL, NULL },
    { "checkParametersWithDoubleArray:", "checkParameters", "Z", 0x4, NULL, NULL },
    { "isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithOrgGeogebraCommonKernelMatrixCoords:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "getDirectionToCenterWithOrgGeogebraCommonKernelMatrixCoords:", "getDirectionToCenter", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChangedForRegion", "V", 0x1, NULL, NULL },
    { "regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:", "rotate", "V", 0x2, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "getVolume", NULL, "D", 0x1, NULL, NULL },
    { "hasFiniteVolume", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "singlePoint", NULL, "V", 0x14, NULL, NULL },
    { "isGeoQuadric", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getXMLtagsMatrixWithJavaLangStringBuilder:", "getXMLtagsMatrix", "V", 0x4, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vars3D_", NULL, 0xa, "[Ljava.lang.String;", &OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_vars3D_, NULL,  },
    { "eigenMatrix_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "detS_", NULL, 0x2, "D", NULL, NULL,  },
    { "volume_", NULL, 0x2, "D", NULL, NULL,  },
    { "tmpDouble2_", NULL, 0x4, "[D", NULL, NULL,  },
    { "tmpDouble2bis_", NULL, 0x4, "[D", NULL, NULL,  },
    { "tmpMatrix4x2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "tmpMatrix2x4_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpCoords_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D = { 2, "GeoQuadric3D", "org.geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 69, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelKernelNDGeoQuadricND_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, c, 3);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_set_eigenMatrix_(self, OrgGeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  self->volume_ = JavaLangDouble_NaN;
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpDouble2_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpDouble2bis_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpCoords_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4));
  OrgGeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_eigenvecND_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelMatrixCoords_class_()]);
  for (jint i = 0; i < 3; i++) {
    IOSObjectArray_SetAndConsume(self->eigenvecND_, i, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4));
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->eigenvecND_, i))) setWithInt:i + 1 withDouble:1];
  }
  OrgGeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_diagonal_(self, [IOSDoubleArray newArrayWithLength:4]);
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, IOSDoubleArray *coeffs) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setMatrixWithDoubleArray_(self, coeffs);
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(OrgGeogebraCommonKernelConstruction *c, NSString *label, IOSDoubleArray *coeffs) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(self, c, label, coeffs);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setMatrixWithDoubleArray_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, IOSDoubleArray *coeffs) {
  for (jint i = 0; i < 10; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->matrix_), i) = IOSDoubleArray_Get(nil_chk(coeffs), i);
  }
  [self classifyQuadric];
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_classifyMidpointQuadricWithBoolean_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, jboolean degenerate) {
  jdouble x = (-IOSDoubleArray_Get(nil_chk(self->matrix_), 1) * IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 7) + IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 9) + IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 8) - IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 9) - IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 8) + IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 7)) / self->detS_;
  jdouble y = (-IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 8) + IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 9) + IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 7) - IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 9) + IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 8) - IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 7)) / self->detS_;
  jdouble z = (-IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 9) + IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 8) + IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 7) + IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 9) - IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 8) - IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 7)) / self->detS_;
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ x, y, z, 1 } count:4];
  [self setMidpointWithDoubleArray:coords];
  *IOSDoubleArray_GetRef(nil_chk(self->eigenval_), 0) = self->detS_;
  *IOSDoubleArray_GetRef(self->eigenval_, 1) = -IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 1) - IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 2) - IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 0) + IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 4) + IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 5) + IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 6);
  *IOSDoubleArray_GetRef(self->eigenval_, 2) = IOSDoubleArray_Get(self->matrix_, 0) + IOSDoubleArray_Get(self->matrix_, 1) + IOSDoubleArray_Get(self->matrix_, 2);
  *IOSDoubleArray_GetRef(self->eigenval_, 3) = -1;
  jint nRoots = [((OrgGeogebraCommonKernelEquationSolver *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) getEquationSolver])) solveCubicWithDoubleArray:self->eigenval_ withDoubleArray:self->eigenval_ withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION];
  if (nRoots == 1) {
    *IOSDoubleArray_GetRef(self->eigenval_, 1) = IOSDoubleArray_Get(self->eigenval_, 0);
    nRoots++;
  }
  if (nRoots == 2) {
    *IOSDoubleArray_GetRef(self->eigenval_, 2) = IOSDoubleArray_Get(self->eigenval_, 1);
  }
  jdouble beta = IOSDoubleArray_Get(self->matrix_, 7) * x + IOSDoubleArray_Get(self->matrix_, 8) * y + IOSDoubleArray_Get(self->matrix_, 9) * z + IOSDoubleArray_Get(self->matrix_, 3);
  if (degenerate || OrgGeogebraCommonKernelKernel_isZeroWithDouble_(beta)) {
    self->type_ = OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(self->mu_), 0) = -IOSDoubleArray_Get(self->eigenval_, 0) / beta;
    *IOSDoubleArray_GetRef(self->mu_, 1) = -IOSDoubleArray_Get(self->eigenval_, 1) / beta;
    *IOSDoubleArray_GetRef(self->mu_, 2) = -IOSDoubleArray_Get(self->eigenval_, 2) / beta;
    if (self->detS_ < 0) {
      self->type_ = OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
    }
    else {
      if (IOSDoubleArray_Get(self->mu_, 0) > 0 && IOSDoubleArray_Get(self->mu_, 1) > 0 && IOSDoubleArray_Get(self->mu_, 2) > 0) {
        OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_ellipsoid(self);
      }
      else {
        [self empty];
      }
    }
  }
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_ellipsoid(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self) {
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(self->mu_), 0) / IOSDoubleArray_Get(self->mu_, 1), 1.0) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(self->mu_, 0) / IOSDoubleArray_Get(self->mu_, 2), 1.0)) {
    jdouble r = JavaLangMath_sqrtWithDouble_(1.0 / IOSDoubleArray_Get(self->mu_, 0));
    for (jint i = 0; i < 3; i++) {
      *IOSDoubleArray_GetRef(nil_chk(self->halfAxes_), i) = r;
    }
    self->type_ = OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE;
    self->linearEccentricity_ = 0.0;
    self->eccentricity_ = 0.0;
    self->volume_ = 4 * JavaLangMath_PI * [self getHalfAxisWithInt:0] * [self getHalfAxisWithInt:1] * [self getHalfAxisWithInt:2] / 3;
    *IOSDoubleArray_GetRef(nil_chk(self->diagonal_), 0) = 1;
    *IOSDoubleArray_GetRef(self->diagonal_, 1) = 1;
    *IOSDoubleArray_GetRef(self->diagonal_, 2) = 1;
    *IOSDoubleArray_GetRef(self->diagonal_, 3) = -r * r;
    [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->eigenMatrix_)) setOriginWithOrgGeogebraCommonKernelMatrixCoords:[self getMidpoint3D]];
    for (jint i = 1; i <= 3; i++) {
      [self->eigenMatrix_ setWithInt:i withInt:i withDouble:[self getHalfAxisWithInt:i - 1]];
    }
  }
  else {
    self->type_ = OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
  }
}

jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_checkDefined(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self) {
  return YES;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonKernelConstruction_(self, [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric)) getConstruction]);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:quadric];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithOrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, quadric);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, jdouble x, jdouble y, jdouble z) {
  [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->eigenMatrix_)) setOriginWithOrgGeogebraCommonKernelMatrixCoords:[self getMidpoint3D]];
  [self->eigenMatrix_ setVxWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvecND_), 0))) mulWithDouble:x]];
  [self->eigenMatrix_ setVyWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->eigenvecND_, 1))) mulWithDouble:y]];
  [self->eigenMatrix_ setVzWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->eigenvecND_, 2))) mulWithDouble:z]];
}

OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_getDirectionToCenterWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, OrgGeogebraCommonKernelMatrixCoords *p) {
  {
    OrgGeogebraCommonKernelMatrixCoords *eigenCoords;
    OrgGeogebraCommonKernelMatrixCoords *eigenDir;
    switch ([self getType]) {
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getMidpoint3D])) subWithOrgGeogebraCommonKernelMatrixCoords:p];
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      case OrgGeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      eigenCoords = [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->eigenMatrix_)) solveWithOrgGeogebraCommonKernelMatrixCoords:p];
      eigenDir = [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(eigenCoords)) getX], [eigenCoords getY], 0, 0) autorelease];
      return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self->eigenMatrix_ mulWithOrgGeogebraCommonKernelMatrixCoords:eigenDir])) normalized])) mulWithDouble:-1];
      default:
      return nil;
    }
  }
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *tm) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_set_eigenMatrix_(self, [((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tm)) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix4x4:self->eigenMatrix_]);
  [self setMidpointWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->eigenMatrix_)) getOrigin])) get]];
  for (jint i = 0; i < 3; i++) {
    IOSObjectArray_Set(nil_chk(self->eigenvecND_), i, [tm mulWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(self->eigenvecND_, i)]);
  }
  OrgGeogebraCommonKernelMatrixCoordMatrix *tmInv = [tm inverse];
  [self setMatrixWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(([((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmInv)) transposeCopy]))) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:[self getSymetricMatrix]])) mulWithOrgGeogebraCommonKernelMatrixCoordMatrix:tmInv]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D)
