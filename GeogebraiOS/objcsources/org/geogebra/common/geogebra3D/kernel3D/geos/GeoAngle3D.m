//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/geogebra3D/kernel3D/geos/GeoAngle3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoAngle3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D () {
 @public
  jboolean hasOrientation__;
}

@end

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_hasOrientation(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D *self);

@implementation OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_ANGLE3D();
}

- (jboolean)hasOrientation {
  return OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_hasOrientation(self);
}

- (void)setHasOrientationWithBoolean:(jboolean)flag {
  hasOrientation__ = flag;
}

+ (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D *)newAngle3DWithDefaultIntervalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  return OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_newAngle3DWithDefaultIntervalWithOrgGeogebraCommonKernelConstruction_(cons);
}

- (void)setAngleStyleWithOrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:(OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)angleStyle {
  if (!OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_hasOrientation(self) && (angleStyle == OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE() || angleStyle == OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED())) {
    [super setAngleStyleWithOrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_NOTREFLEX()];
  }
  else {
    [super setAngleStyleWithOrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:angleStyle];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoAngle3D", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x11, NULL, NULL },
    { "hasOrientation", NULL, "Z", 0x11, NULL, NULL },
    { "setHasOrientationWithBoolean:", "setHasOrientation", "V", 0x1, NULL, NULL },
    { "newAngle3DWithDefaultIntervalWithOrgGeogebraCommonKernelConstruction:", "newAngle3DWithDefaultInterval", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoAngle3D;", 0x19, NULL, NULL },
    { "setAngleStyleWithOrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:", "setAngleStyle", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hasOrientation__", "hasOrientation", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D = { 2, "GeoAngle3D", "org.geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x11, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoAngle_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->hasOrientation__ = NO;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_hasOrientation(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D *self) {
  return self->hasOrientation__;
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_newAngle3DWithDefaultIntervalWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initialize();
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D *ret = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithOrgGeogebraCommonKernelConstruction_(cons) autorelease];
  [ret setHasOrientationWithBoolean:YES];
  [ret setDrawableWithBoolean:YES];
  [ret setAngleStyleWithOrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:[((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(((OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE], [OrgGeogebraCommonKernelGeosGeoAngle class])))) getAngleStyle]];
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D)
