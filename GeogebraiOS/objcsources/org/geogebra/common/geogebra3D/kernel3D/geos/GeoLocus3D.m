//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/geos/GeoLocus3D.java
//


#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/geogebra3D/kernel3D/MyPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoLocus3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> changingPoint_;
  OrgGeogebraCommonKernelMatrixCoords *changingCoords_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D, changingPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D, changingCoords_, OrgGeogebraCommonKernelMatrixCoords *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D *)newGeoLocus {
  return new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
}

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                   withDouble:(jdouble)z
                  withBoolean:(jboolean)lineTo {
  [((JavaUtilArrayList *) nil_chk(myPointList_)) addWithId:new_OrgGeogebraCommonGeogebra3DKernel3DMyPoint3D_initWithDouble_withDouble_withDouble_withBoolean_(x, y, z, lineTo)];
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3];
  [self setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
  OrgGeogebraCommonKernelMyPoint *closestPoint = [self getClosestPoint];
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  if (closestPoint != nil) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) setXWithDouble:closestPoint->x_];
    [coords setYWithDouble:closestPoint->y_];
    [coords setZWithDouble:[closestPoint getZ]];
    [coords setWWithDouble:1.0];
    ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = closestPointIndex_ + closestPointParameter_;
  }
  [P setCoordsWithOrgGeogebraCommonKernelMatrixCoords:coords withBoolean:NO];
  [P updateCoords];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)newGeoSegment {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *segment = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  return segment;
}

- (void)setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  changingPoint_ = P;
  changingCoords_ = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3];
}

- (jdouble)changingPointDistanceWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *seg = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(segment, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]);
  jdouble t = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) getParamOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:changingPoint_];
  if (t < 0) {
    t = 0;
  }
  else if (t > 1) {
    t = 1;
  }
  OrgGeogebraCommonKernelMatrixCoords *project = [seg getPointWithDouble:t];
  OrgGeogebraCommonKernelMatrixCoords *coords = changingCoords_;
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(changingPoint_)) isGeoElement3D]) {
    if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(changingPoint_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) hasWillingCoords]) {
      coords = [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(changingPoint_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) getWillingCoords];
      if ([((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(changingPoint_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) hasWillingDirection]) {
        return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(project)) distLineWithOrgGeogebraCommonKernelMatrixCoords:coords withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(changingPoint_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) getWillingDirection]];
      }
    }
  }
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) distanceWithOrgGeogebraCommonKernelMatrixCoords:project];
}

- (jdouble)getChangingPointParameterWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(segment, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])))) getParamOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:changingPoint_];
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoLocus3D", NULL, 0x1, NULL, NULL },
    { "newGeoLocus", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoLocus3D;", 0x4, NULL, NULL },
    { "insertPointWithDouble:withDouble:withDouble:withBoolean:", "insertPoint", "V", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "newGeoSegment", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x4, NULL, NULL },
    { "setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setChangingPoint", "V", 0x4, NULL, NULL },
    { "changingPointDistanceWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "changingPointDistance", "D", 0x4, NULL, NULL },
    { "getChangingPointParameterWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "getChangingPointParameter", "D", 0x4, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "changingPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "changingCoords_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.geogebra3D.kernel3D.MyPoint3D;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D = { 2, "GeoLocus3D", "org.geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 10, methods, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "Lorg/geogebra/common/kernel/geos/GeoLocusND<Lorg/geogebra/common/geogebra3D/kernel3D/MyPoint3D;>;" };
  return &_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelGeosGeoLocusND_initWithOrgGeogebraCommonKernelConstruction_(self, c);
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D)
