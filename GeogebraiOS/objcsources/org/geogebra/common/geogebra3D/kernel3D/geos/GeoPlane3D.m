//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "org/geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/RegionParameters.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/AppCompanion.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D () {
 @public
  OrgGeogebraCommonKernelMatrixCoordMatrix *parametricMatrix_;
  jfloat fading_;
  OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *euclidianViewForPlane_;
  OrgGeogebraCommonKernelMatrixCoords *tmpCoords1_, *tmpCoords2_;
  jboolean trace_;
}

- (void)setEquationWithDouble:(jdouble)a
                   withDouble:(jdouble)b
                   withDouble:(jdouble)c
                   withDouble:(jdouble)d
                  withBoolean:(jboolean)makeCoordSys;

- (void)setEquationWithDoubleArray:(IOSDoubleArray *)v
                       withBoolean:(jboolean)makeCoordSys;

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)center
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)direction;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D, parametricMatrix_, OrgGeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D, euclidianViewForPlane_, OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D, tmpCoords1_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D, tmpCoords2_, OrgGeogebraCommonKernelMatrixCoords *)

static IOSCharArray *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_Labels_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D, Labels_, IOSCharArray *)

static jboolean OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_KEEP_LEADING_SIGN_ = YES;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D, KEEP_LEADING_SIGN_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D, KEEP_LEADING_SIGN_, jboolean)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDouble_withDouble_withDouble_withDouble_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, jdouble a, jdouble b, jdouble c, jdouble d, jboolean makeCoordSys);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDoubleArray_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, IOSDoubleArray *v, jboolean makeCoordSys);

__attribute__((unused)) static JavaLangStringBuilder *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phiVal, OrgGeogebraCommonKernelMatrixCoords *center, OrgGeogebraCommonKernelMatrixCoords *direction);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D)

IOSObjectArray *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_VAR_STRING_;

@implementation OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                                                 withDouble:(jdouble)a
                                                 withDouble:(jdouble)b
                                                 withDouble:(jdouble)c
                                                 withDouble:(jdouble)d {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(self, cons, label, a, b, c, d);
  return self;
}

- (void)setEquationWithDouble:(jdouble)a
                   withDouble:(jdouble)b
                   withDouble:(jdouble)c
                   withDouble:(jdouble)d
                  withBoolean:(jboolean)makeCoordSys {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, a, b, c, d, makeCoordSys);
}

- (void)setEquationWithDouble:(jdouble)a
                   withDouble:(jdouble)b
                   withDouble:(jdouble)c
                   withDouble:(jdouble)d {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, a, b, c, d, YES);
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z
                 withDouble:(jdouble)w {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, x, y, z, w, NO);
}

- (void)setEquationWithDoubleArray:(IOSDoubleArray *)v
                       withBoolean:(jboolean)makeCoordSys {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDoubleArray_withBoolean_(self, v, makeCoordSys);
}

- (jboolean)isRegion {
  return YES;
}

- (IOSObjectArray *)getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:coords];
}

- (IOSObjectArray *)getProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)oldCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingDirection {
  IOSObjectArray *result = [IOSObjectArray arrayWithObjects:(id[]){ [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease], [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease] } count:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getMatrixOrthonormal] withOrgGeogebraCommonKernelMatrixCoords:oldCoords withOrgGeogebraCommonKernelMatrixCoords:willingDirection withOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 0) withOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 1)];
  return result;
}

- (jboolean)isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelMatrixCoords *planeCoords = IOSObjectArray_Get(nil_chk([self getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3]]), 1);
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(planeCoords)) getWithInt:3], 0, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  return YES;
}

- (void)pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) updateCoords2D];
  [P updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:nil];
}

- (void)regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  OrgGeogebraCommonKernelRegionParameters *rp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getRegionParameters];
  [P setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[self getPointWithDouble:[((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) getT1] withDouble:[rp getT2]] withBoolean:NO];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)x2d
                                                 withDouble:(jdouble)y2d {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithDouble:x2d withDouble:y2d];
}

- (void)setPlateCornersWithDouble:(jdouble)x1
                       withDouble:(jdouble)y1
                       withDouble:(jdouble)x2
                       withDouble:(jdouble)y2 {
  if (x1 < x2) {
    self->xPlateMin_ = x1;
    self->xPlateMax_ = x2;
  }
  else {
    self->xPlateMin_ = x2;
    self->xPlateMax_ = x1;
  }
  if (y1 < y2) {
    self->yPlateMin_ = y1;
    self->yPlateMax_ = y2;
  }
  else {
    self->yPlateMin_ = y2;
    self->yPlateMax_ = y1;
  }
}

- (void)setGridCornersWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2 {
  if (x1 < x2) {
    self->xmin_ = x1;
    self->xmax_ = x2;
  }
  else {
    self->xmin_ = x2;
    self->xmax_ = x1;
  }
  if (y1 < y2) {
    self->ymin_ = y1;
    self->ymax_ = y2;
  }
  else {
    self->ymin_ = y2;
    self->ymax_ = y1;
  }
}

- (void)setGridDistancesWithDouble:(jdouble)dx
                        withDouble:(jdouble)dy {
  self->dx_ = dx;
  self->dy_ = dy;
}

- (jdouble)getXmin {
  return xmin_;
}

- (jdouble)getYmin {
  return ymin_;
}

- (jdouble)getXmax {
  return xmax_;
}

- (jdouble)getYmax {
  return ymax_;
}

- (jdouble)getXPlateMin {
  return xPlateMin_;
}

- (jdouble)getYPlateMin {
  return yPlateMin_;
}

- (jdouble)getXPlateMax {
  return xPlateMax_;
}

- (jdouble)getYPlateMax {
  return yPlateMax_;
}

- (jboolean)isGridVisible {
  return gridVisible_ && [self isEuclidianVisible];
}

- (jboolean)setGridVisibleWithBoolean:(jboolean)grid {
  if (gridVisible_ == grid) {
    return NO;
  }
  gridVisible_ = grid;
  return YES;
}

- (jboolean)isPlateVisible {
  return plateVisible_ && [self isEuclidianVisible];
}

- (void)setPlateVisibleWithBoolean:(jboolean)flag {
  plateVisible_ = flag;
}

- (jdouble)getGridXd {
  return dx_;
}

- (jdouble)getGridYd {
  return dy_;
}

- (OrgGeogebraCommonKernelMatrixCoordMatrix *)getParametricMatrix {
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *m4 = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getMatrixOrthonormal];
  if (parametricMatrix_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setAndConsume_parametricMatrix_(self, new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 3));
  }
  [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(parametricMatrix_)) setVxWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(m4)) getVx]];
  [parametricMatrix_ setVyWithOrgGeogebraCommonKernelMatrixCoords:[m4 getVy]];
  [parametricMatrix_ setOriginWithOrgGeogebraCommonKernelMatrixCoords:[m4 getOrigin]];
  return parametricMatrix_;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMainDirection {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getNormal];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithDouble:0.5 withDouble:0.5];
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_PLANE3D();
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)copy__ {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p = [new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  OrgGeogebraCommonKernelMatrixCoordSys *cs = [p getCoordSys];
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(cs)) setWithOrgGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
  return p;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]]) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(geo, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
    [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) setWithOrgGeogebraCommonKernelMatrixCoordSys:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(plane)) getCoordSys]];
  }
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
    OrgGeogebraCommonKernelGeosGeoLine *line = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLine class]);
    [self setEquationWithDouble:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line)) getX] withDouble:[line getY] withDouble:0 withDouble:[line getZ]];
  }
}

- (void)setCoordSysWithOrgGeogebraCommonKernelMatrixCoordSys:(OrgGeogebraCommonKernelMatrixCoordSys *)cs {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) setWithOrgGeogebraCommonKernelMatrixCoordSys:cs];
}

- (void)setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPlane]) {
    [self setFadingWithFloat:[((id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND))) getFading]];
  }
}

- (void)setUndefined {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) setUndefined];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [self getSbToString];
  [((JavaLangStringBuilder *) nil_chk(sbToString)) setLengthWithInt:0];
  [sbToString appendWithNSString:label_];
  [sbToString appendWithNSString:@": "];
  [sbToString appendWithJavaLangCharSequence:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl)];
  return [sbToString description];
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (jboolean)isFillable {
  return YES;
}

- (OrgGeogebraCommonKernelMatrixCoords *)evaluateNormalWithDouble:(jdouble)u
                                                       withDouble:(jdouble)v {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) getNormal];
}

- (OrgGeogebraCommonKernelMatrixCoords *)evaluatePointWithDouble:(jdouble)u
                                                      withDouble:(jdouble)v {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) getPointForDrawingWithDouble:u withDouble:v];
}

- (jdouble)getMinParameterWithInt:(jint)index {
  return 0;
}

- (jdouble)getMaxParameterWithInt:(jint)index {
  return 0;
}

- (OrgGeogebraCommonKernelMatrixCoordSys *)getCoordSys {
  return coordsys_;
}

- (jboolean)isDefined {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) isDefined];
}

- (jboolean)isMoveable {
  return NO;
}

- (NSString *)getDefaultLabel {
  return [self getDefaultLabelWithCharArray:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_Labels_ withBoolean:NO];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  OrgGeogebraCommonKernelMatrixCoords *equation = [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getEquationVector];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coords"];
  [sb appendWithNSString:@" x=\""];
  [sb appendWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getX]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" y=\""];
  [sb appendWithDouble:[equation getY]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" z=\""];
  [sb appendWithDouble:[equation getZ]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" w=\""];
  [sb appendWithDouble:[equation getW]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@"/>\n"];
  [sb appendWithNSString:@"\t<fading val=\""];
  [sb appendWithFloat:[self getFading]];
  [sb appendWithNSString:@"\"/>\n"];
}

- (jboolean)isGeoPlane {
  return YES;
}

- (void)setFadingWithFloat:(jfloat)fading {
  self->fading_ = fading;
}

- (jfloat)getFading {
  return fading_;
}

- (void)createView2D {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_set_euclidianViewForPlane_(self, (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast([((OrgGeogebraCommonMainAppCompanion *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getCompanion])) createEuclidianViewForPlaneWithOrgGeogebraCommonKernelKernelNDViewCreator:self withBoolean:YES], [OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class]));
  [((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) setTransformRegardingView];
}

- (void)removeView2D {
  [((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) doRemove];
}

- (void)doRemove {
  if (euclidianViewForPlane_ != nil) {
    [self removeView2D];
  }
  [super doRemove];
}

- (jboolean)hasView2DVisible {
  return euclidianViewForPlane_ != nil && [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getGuiManager])) showViewWithInt:[euclidianViewForPlane_ getId]];
}

- (void)setView2DVisibleWithBoolean:(jboolean)flag {
  if (euclidianViewForPlane_ == nil) {
    if (flag) [self createView2D];
    return;
  }
  [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getGuiManager])) setShowViewWithBoolean:flag withInt:[((OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) getId]];
}

- (void)update {
  [super update];
  if (euclidianViewForPlane_ != nil) {
    [euclidianViewForPlane_ updateForPlane];
  }
}

- (void)setEuclidianViewForPlaneWithOrgGeogebraCommonEuclidianEuclidianViewCompanion:(OrgGeogebraCommonEuclidianEuclidianViewCompanion *)view {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_set_euclidianViewForPlane_(self, (OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast(view, [OrgGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class]));
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getNormal];
}

- (jdouble)getMeasure {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jdouble)distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  return JavaLangMath_absWithDouble_([self distanceWithSignWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]);
}

- (jdouble)distanceWithSignWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (tmpCoords1_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setAndConsume_tmpCoords1_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  if (tmpCoords2_ == nil) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setAndConsume_tmpCoords2_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) setSubWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3] withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin]];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords2_)) setValuesWithOrgGeogebraCommonKernelMatrixCoords:[self getDirectionInD3] withInt:3];
  [tmpCoords2_ normalize];
  return [tmpCoords1_ dotproductWithOrgGeogebraCommonKernelMatrixCoords:tmpCoords2_];
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) translateWithOrgGeogebraCommonKernelMatrixCoords:v];
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) translateEquationVectorWithOrgGeogebraCommonKernelMatrixCoords:v];
}

- (jboolean)isTranslateable {
  return YES;
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (void)rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix:(OrgGeogebraCommonKernelMatrixCoordMatrix *)rot
                   withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)center {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix:rot withOrgGeogebraCommonKernelMatrixCoords:center];
  [coordsys_ makeEquationVector];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) rotateWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble] withOrgGeogebraCommonKernelMatrixCoords:OrgGeogebraCommonKernelMatrixCoords_get_O_()];
  [coordsys_ makeEquationVector];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) rotateWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble] withOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q)) getInhomCoordsInD3]];
  [coordsys_ makeEquationVector];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)center
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)direction {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(self, phiVal, center, direction);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q
             withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(self, phiVal, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q)) getInhomCoordsInD3], [((id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3]);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal
                  withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(self, phiVal, [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords], [line getDirectionInD3]);
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) mirrorWithOrgGeogebraCommonKernelMatrixCoords:Q];
  [coordsys_ mirrorEquationVectorWithOrgGeogebraCommonKernelMatrixCoords:Q];
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonKernelMatrixCoords *point = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  OrgGeogebraCommonKernelMatrixCoords *direction = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([line getDirectionInD3])) normalized];
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) mirrorWithOrgGeogebraCommonKernelMatrixCoords:point withOrgGeogebraCommonKernelMatrixCoords:direction];
  [coordsys_ makeEquationVector];
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) mirrorWithOrgGeogebraCommonKernelMatrixCoordSys:[((id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getCoordSys]];
  [coordsys_ makeEquationVector];
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)rval
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) dilateWithDouble:r withOrgGeogebraCommonKernelMatrixCoords:S];
  [coordsys_ dilateEquationVectorWithDouble:r withOrgGeogebraCommonKernelMatrixCoords:S];
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (jboolean)is6dofMoveable {
  return YES;
}

- (void)dealloc {
  RELEASE_(coordsys_);
  RELEASE_(parametricMatrix_);
  RELEASE_(euclidianViewForPlane_);
  RELEASE_(tmpCoords1_);
  RELEASE_(tmpCoords2_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_Labels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'p', 'q', 'r' } count:3]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_VAR_STRING_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ @"x", @"y", @"z" } count:3 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoPlane3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withDouble:withDouble:withDouble:withDouble:", "GeoPlane3D", NULL, 0x1, NULL, NULL },
    { "setEquationWithDouble:withDouble:withDouble:withDouble:withBoolean:", "setEquation", "V", 0x2, NULL, NULL },
    { "setEquationWithDouble:withDouble:withDouble:withDouble:", "setEquation", "V", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:withDouble:", "setCoords", "V", 0x1, NULL, NULL },
    { "setEquationWithDoubleArray:withBoolean:", "setEquation", "V", 0x2, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:", "getNormalProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "getProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChangedForRegion", "V", 0x1, NULL, NULL },
    { "regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x1, NULL, NULL },
    { "getPointWithDouble:withDouble:", "getPoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setPlateCornersWithDouble:withDouble:withDouble:withDouble:", "setPlateCorners", "V", 0x1, NULL, NULL },
    { "setGridCornersWithDouble:withDouble:withDouble:withDouble:", "setGridCorners", "V", 0x1, NULL, NULL },
    { "setGridDistancesWithDouble:withDouble:", "setGridDistances", "V", 0x1, NULL, NULL },
    { "getXmin", NULL, "D", 0x1, NULL, NULL },
    { "getYmin", NULL, "D", 0x1, NULL, NULL },
    { "getXmax", NULL, "D", 0x1, NULL, NULL },
    { "getYmax", NULL, "D", 0x1, NULL, NULL },
    { "getXPlateMin", NULL, "D", 0x1, NULL, NULL },
    { "getYPlateMin", NULL, "D", 0x1, NULL, NULL },
    { "getXPlateMax", NULL, "D", 0x1, NULL, NULL },
    { "getYPlateMax", NULL, "D", 0x1, NULL, NULL },
    { "isGridVisible", NULL, "Z", 0x1, NULL, NULL },
    { "setGridVisibleWithBoolean:", "setGridVisible", "Z", 0x1, NULL, NULL },
    { "isPlateVisible", NULL, "Z", 0x1, NULL, NULL },
    { "setPlateVisibleWithBoolean:", "setPlateVisible", "V", 0x1, NULL, NULL },
    { "getGridXd", NULL, "D", 0x1, NULL, NULL },
    { "getGridYd", NULL, "D", 0x1, NULL, NULL },
    { "getParametricMatrix", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setCoordSysWithOrgGeogebraCommonKernelMatrixCoordSys:", "setCoordSys", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "buildValueStringWithOrgGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "evaluateNormalWithDouble:withDouble:", "evaluateNormal", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:", "evaluatePoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "getCoordSys", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordSys;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "isMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "getDefaultLabel", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isGeoPlane", NULL, "Z", 0x1, NULL, NULL },
    { "setFadingWithFloat:", "setFading", "V", 0x1, NULL, NULL },
    { "getFading", NULL, "F", 0x1, NULL, NULL },
    { "createView2D", NULL, "V", 0x1, NULL, NULL },
    { "removeView2D", NULL, "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "hasView2DVisible", NULL, "Z", 0x1, NULL, NULL },
    { "setView2DVisibleWithBoolean:", "setView2DVisible", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "setEuclidianViewForPlaneWithOrgGeogebraCommonEuclidianEuclidianViewCompanion:", "setEuclidianViewForPlane", "V", 0x1, NULL, NULL },
    { "getDirectionInD3", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMeasure", NULL, "D", 0x1, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithSignWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "distanceWithSign", "D", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelMatrixCoordMatrix:withOrgGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x12, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "is6dofMoveable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "Labels_", NULL, 0x1a, "[C", &OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_Labels_, NULL,  },
    { "KEEP_LEADING_SIGN_", NULL, 0xa, "Z", &OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_KEEP_LEADING_SIGN_, NULL,  },
    { "xmin_", NULL, 0x0, "D", NULL, NULL,  },
    { "xmax_", NULL, 0x0, "D", NULL, NULL,  },
    { "ymin_", NULL, 0x0, "D", NULL, NULL,  },
    { "ymax_", NULL, 0x0, "D", NULL, NULL,  },
    { "xPlateMin_", NULL, 0x0, "D", NULL, NULL,  },
    { "xPlateMax_", NULL, 0x0, "D", NULL, NULL,  },
    { "yPlateMin_", NULL, 0x0, "D", NULL, NULL,  },
    { "yPlateMax_", NULL, 0x0, "D", NULL, NULL,  },
    { "gridVisible_", NULL, 0x0, "Z", NULL, NULL,  },
    { "plateVisible_", NULL, 0x0, "Z", NULL, NULL,  },
    { "dx_", NULL, 0x0, "D", NULL, NULL,  },
    { "dy_", NULL, 0x0, "D", NULL, NULL,  },
    { "coordsys_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.CoordSys;", NULL, NULL,  },
    { "VAR_STRING_", NULL, 0x1c, "[Ljava.lang.String;", &OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_VAR_STRING_, NULL,  },
    { "parametricMatrix_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "fading_", NULL, 0x2, "F", NULL, NULL,  },
    { "euclidianViewForPlane_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.euclidianForPlane.EuclidianViewForPlaneCompanion;", NULL, NULL,  },
    { "tmpCoords1_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoords2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D = { 2, "GeoPlane3D", "org.geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 87, methods, 22, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoElement3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->gridVisible_ = NO;
  self->plateVisible_ = YES;
  self->dx_ = JavaLangDouble_NaN;
  self->dy_ = JavaLangDouble_NaN;
  self->fading_ = 0.10f;
  [self setConstructionDefaults];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setAndConsume_coordsys_(self, new_OrgGeogebraCommonKernelMatrixCoordSys_initWithInt_(2));
  self->xmin_ = -2.5;
  self->xmax_ = 2.5;
  self->ymin_ = -2.5;
  self->ymax_ = 2.5;
  [self setGridVisibleWithBoolean:NO];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, jdouble a, jdouble b, jdouble c, jdouble d) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  [self setEquationWithDouble:a withDouble:b withDouble:c withDouble:d];
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, jdouble a, jdouble b, jdouble c, jdouble d) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self = [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(self, cons, label, a, b, c, d);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDouble_withDouble_withDouble_withDouble_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, jdouble a, jdouble b, jdouble c, jdouble d, jboolean makeCoordSys) {
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDoubleArray_withBoolean_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ a, b, c, d } count:4], makeCoordSys);
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_setEquationWithDoubleArray_withBoolean_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, IOSDoubleArray *v, jboolean makeCoordSys) {
  if (makeCoordSys || ![((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) isDefined]) {
    [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) makeCoordSysWithDoubleArray:v];
    [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) makeOrthoMatrixWithBoolean:YES withBoolean:YES];
  }
}

JavaLangStringBuilder *OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  JavaLangStringBuilder *ret = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildImplicitEquationWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getEquationVector])) get] withNSStringArray:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_VAR_STRING_ withBoolean:OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:![self isLabelSet] withChar:'=' withOrgGeogebraCommonKernelStringTemplate:tpl];
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasCASType]) {
    JavaLangStringBuilder *sbTemp = [new_JavaLangStringBuilder_init() autorelease];
    [sbTemp appendWithNSString:@"plane("];
    [sbTemp appendWithJavaLangCharSequence:ret];
    [sbTemp appendWithNSString:@")"];
    return sbTemp;
  }
  return ret;
}

void OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phiVal, OrgGeogebraCommonKernelMatrixCoords *center, OrgGeogebraCommonKernelMatrixCoords *direction) {
  [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk(self->coordsys_)) rotateWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble] withOrgGeogebraCommonKernelMatrixCoords:center withOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(direction)) normalized]];
  [self->coordsys_ makeEquationVector];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D)
