//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/kernel3D/transform/TransformMirror3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoMirror3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/TransformMirror3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/TransformMirror.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, point);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, line);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
           withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, plane);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelAlgosAlgoTransformation *algo = nil;
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoPoint]) algo = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, geo, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(mirror_, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
  else if ([mirror_ isGeoLine]) algo = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, geo, (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(mirror_, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND)));
  else if ([OrgGeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:mirror_]) algo = new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, geo, (id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast(mirror_, @protocol(OrgGeogebraCommonKernelKernelNDGeoCoordSys2D)));
  return algo;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "TransformMirror3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "TransformMirror3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D:", "TransformMirror3D", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lorg.geogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D = { 2, "TransformMirror3D", "org.geogebra.common.geogebra3D.kernel3D.transform", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  (void) OrgGeogebraCommonKernelTransformMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self = [OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, point);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoLineND> line) {
  (void) OrgGeogebraCommonKernelTransformMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoLineND> line) {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self = [OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, line);
  return self;
}

void OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  (void) OrgGeogebraCommonKernelTransformMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(plane, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self = [OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, plane);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D)
