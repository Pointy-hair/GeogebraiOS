//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/kernel3D/transform/TransformTranslate3D.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/geogebra3D/kernel3D/algos/AlgoTranslate3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/Transform3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/transform/TransformTranslate3D.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Transform.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"

@interface OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D () {
 @public
  OrgGeogebraCommonKernelGeosGeoElement *transVec_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D, transVec_, OrgGeogebraCommonKernelGeosGeoElement *)

@implementation OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
             withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)transVec {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, transVec);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTranslate3D *algo = [new_OrgGeogebraCommonGeogebra3DKernel3DAlgosAlgoTranslate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, geo, transVec_) autorelease];
  return algo;
}

- (void)dealloc {
  RELEASE_(transVec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "TransformTranslate3D", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lorg.geogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "transVec_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D = { 2, "TransformTranslate3D", "org.geogebra.common.geogebra3D.kernel3D.transform", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D;
}

@end

void OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> transVec) {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransform3D_init(self);
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_set_transVec_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(transVec, [OrgGeogebraCommonKernelGeosGeoElement class]));
  OrgGeogebraCommonKernelTransform_set_cons_(self, cons);
}

OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D *new_OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> transVec) {
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D *self = [OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D alloc];
  OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, transVec);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D)
