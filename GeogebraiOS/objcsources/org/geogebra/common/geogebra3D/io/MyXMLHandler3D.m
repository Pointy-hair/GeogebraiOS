//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/io/MyXMLHandler3D.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/LinkedHashMap.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/geogebra3D/io/MyXMLHandler3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "org/geogebra/common/geogebra3D/main/settings/EuclidianSettingsForPlane.h"
#include "org/geogebra/common/io/MyXMLHandler.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/SurfaceEvaluable.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/main/settings/EuclidianSettings3D.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D ()

+ (jboolean)handleCoordSystem3DWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *)evs
                                                          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleFadingWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLevelOfDetailQualityWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (OrgGeogebraCommonAwtGColor *)handleColorAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleTransformForPlaneWithOrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane:(OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *)ev
                                                                              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

@end

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleCoordSystem3DWithOrgGeogebraCommonMainSettingsEuclidianSettings3D_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings3D *evs, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleFadingWithJavaUtilLinkedHashMap_(OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleLevelOfDetailQualityWithJavaUtilLinkedHashMap_(OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleColorAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleTransformForPlaneWithOrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_withJavaUtilLinkedHashMap_(OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *ev, JavaUtilLinkedHashMap *attrs);

@implementation OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
              withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(self, kernel, cons);
  return self;
}

- (void)startEuclidianView3DElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if (evSet_ == nil) evSet_ = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSettings])) getEuclidianWithInt:3];
  if (resetEVsettingsNeeded_) {
    resetEVsettingsNeeded_ = NO;
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evSet_)) reset];
  }
  jboolean ok = YES;
  switch ([((NSString *) nil_chk(eName)) charAtWithInt:0]) {
    case 'a':
    if ([eName isEqual:@"axesColor"]) {
      break;
    }
    else if ([eName isEqual:@"axis"]) {
      ok = [self handleAxisWithOrgGeogebraCommonMainSettingsEuclidianSettings:evSet_ withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'b':
    if ([eName isEqual:@"bgColor"]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleBgColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    case 'c':
    if ([eName isEqual:@"coordSystem"]) {
      ok = OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleCoordSystem3DWithOrgGeogebraCommonMainSettingsEuclidianSettings3D_withJavaUtilLinkedHashMap_((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast(evSet_, [OrgGeogebraCommonMainSettingsEuclidianSettings3D class]), attrs);
      break;
    }
    else if ([eName isEqual:@"clipping"]) {
      ok = [self handleClippingWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast(evSet_, [OrgGeogebraCommonMainSettingsEuclidianSettings3D class]) withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'e':
    if ([@"evSettings" isEqual:eName]) {
      ok = [self handleEvSettingsWithOrgGeogebraCommonMainSettingsEuclidianSettings:evSet_ withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'g':
    if ([eName isEqual:@"grid"]) {
      ok = [self handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings:evSet_ withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'l':
    if ([eName isEqual:@"light"]) {
      ok = [self handleLightWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast(evSet_, [OrgGeogebraCommonMainSettingsEuclidianSettings3D class]) withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'p':
    if ([eName isEqual:@"plate"]) {
      ok = [self handlePlateWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast(evSet_, [OrgGeogebraCommonMainSettingsEuclidianSettings3D class]) withJavaUtilLinkedHashMap:attrs];
      break;
    }
    else if ([eName isEqual:@"plane"]) {
      ok = [self handlePlaneWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast(evSet_, [OrgGeogebraCommonMainSettingsEuclidianSettings3D class]) withJavaUtilLinkedHashMap:attrs];
      break;
    }
    else if ([eName isEqual:@"projection"]) {
      ok = [self handleProjectionWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast(evSet_, [OrgGeogebraCommonMainSettingsEuclidianSettings3D class]) withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'y':
    if ([eName isEqual:@"yAxisVertical"]) {
      ok = [self handleYAxisIsUpWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast(evSet_, [OrgGeogebraCommonMainSettingsEuclidianSettings3D class]) withJavaUtilLinkedHashMap:attrs];
      break;
    }
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <euclidianView3D>: ", eName));
  }
  if (!ok) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <euclidianView3D>: ", eName));
  }
}

- (void)startGeoElementWithNSString:(NSString *)eName
          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if (geo_ == nil) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$C", @"no element set for <", eName, '>'));
    return;
  }
  jboolean ok = YES;
  switch ([((NSString *) nil_chk(eName)) charAtWithInt:0]) {
    case 'f':
    if ([eName isEqual:@"fading"]) {
      ok = OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleFadingWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'l':
    if ([eName isEqual:@"levelOfDetailQuality"]) {
      ok = OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleLevelOfDetailQualityWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    [super startGeoElementWithNSString:eName withJavaUtilLinkedHashMap:attrs];
  }
  if (!ok) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <element>: ", eName));
  }
}

+ (jboolean)handleCoordSystem3DWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *)evs
                                                          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleCoordSystem3DWithOrgGeogebraCommonMainSettingsEuclidianSettings3D_withJavaUtilLinkedHashMap_(evs, attrs);
}

- (jboolean)handleFadingWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleFadingWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleLevelOfDetailQualityWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleLevelOfDetailQualityWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handlePlaneWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *)evs
                                                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return [self handlePlateWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:evs withJavaUtilLinkedHashMap:attrs];
}

- (jboolean)handlePlateWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *)evs
                                                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    NSString *strShowPlate = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"];
    if (strShowPlate != nil) {
      jboolean showPlate = [self parseBooleanWithNSString:strShowPlate];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setShowPlateWithBoolean:showPlate];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (jboolean)handleYAxisIsUpWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *)evs
                                                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    NSString *strYAxisVertical = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
    if (strYAxisVertical != nil) {
      jboolean yAxisVertical = [self parseBooleanWithNSString:strYAxisVertical];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setYAxisVerticalWithBoolean:yAxisVertical];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (jboolean)handleLightWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *)evs
                                                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    NSString *strLight = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
    if (strLight != nil) {
      jboolean light = [self parseBooleanWithNSString:strLight];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setUseLightWithBoolean:light];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (jboolean)handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)evs
                                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    NSString *strShowGrid = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"];
    if (strShowGrid != nil) {
      jboolean showGrid = [self parseBooleanWithNSString:strShowGrid];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evs)) showGridWithBoolean:showGrid];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (jboolean)handleClippingWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *)evs
                                                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    NSString *strUseClipping = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"use"];
    if (strUseClipping != nil) {
      jboolean useClipping = [self parseBooleanWithNSString:strUseClipping];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setUseClippingCubeWithBoolean:useClipping];
    }
    NSString *strShowClipping = [attrs getWithId:@"show"];
    if (strShowClipping != nil) {
      jboolean showClipping = [self parseBooleanWithNSString:strShowClipping];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setShowClippingCubeWithBoolean:showClipping];
    }
    NSString *strSizeClipping = [attrs getWithId:@"size"];
    if (strSizeClipping != nil) {
      jint sizeClipping = JavaLangInteger_parseIntWithNSString_(strSizeClipping);
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setClippingReductionWithInt:sizeClipping];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (jboolean)handleProjectionWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:(OrgGeogebraCommonMainSettingsEuclidianSettings3D *)evs
                                                       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    NSString *strType = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"];
    if (strType != nil) {
      jint type = JavaLangInteger_parseIntWithNSString_(strType);
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setProjectionWithInt:type];
    }
    NSString *strDistance = [attrs getWithId:@"distance"];
    if (strDistance != nil) {
      jint distance = JavaLangInteger_parseIntWithNSString_(strDistance);
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setProjectionPerspectiveEyeDistanceWithInt:distance];
    }
    NSString *strSep = [attrs getWithId:@"separation"];
    if (strSep != nil) {
      jint sep = JavaLangInteger_parseIntWithNSString_(strSep);
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setEyeSepWithInt:sep];
    }
    NSString *strAngle = [attrs getWithId:@"obliqueAngle"];
    if (strAngle != nil) {
      jdouble angle = JavaLangDouble_parseDoubleWithNSString_(strAngle);
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setProjectionObliqueAngleWithDouble:angle];
    }
    NSString *strFactor = [attrs getWithId:@"obliqueFactor"];
    if (strFactor != nil) {
      jdouble factor = JavaLangDouble_parseDoubleWithNSString_(strFactor);
      [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setProjectionObliqueFactorWithDouble:factor];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)handleAbsoluteStartPointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  jdouble x = JavaLangDouble_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
  jdouble y = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"y"]);
  jdouble z = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"z"]);
  NSString *wStr = [attrs getWithId:@"w"];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> p;
  if (wStr != nil) {
    jdouble w = JavaLangDouble_parseDoubleWithNSString_(wStr);
    p = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithOrgGeogebraCommonKernelConstruction_(cons_);
    [p setCoordsWithDouble:x withDouble:y withDouble:z withDouble:w];
  }
  else {
    p = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
    [p setCoordsWithDouble:x withDouble:y withDouble:z];
  }
  return p;
}

+ (OrgGeogebraCommonAwtGColor *)handleColorAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
}

- (void)startEuclidianViewElementCheckViewIdWithNSString:(NSString *)eName
                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if ([@"viewId" isEqual:eName]) {
    NSString *plane = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"plane"];
    evSet_ = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSettings])) getEuclidianForPlaneWithNSString:plane];
    if (evSet_ == nil) {
      evSet_ = new_OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_initWithOrgGeogebraCommonMainSettingsEuclidianSettings_(nil);
      [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) setEuclidianSettingsForPlaneWithNSString:plane withOrgGeogebraCommonMainSettingsEuclidianSettings:evSet_];
    }
  }
}

- (jboolean)startEuclidianViewElementSwitchWithNSString:(NSString *)eName
                              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs
                                               withChar:(jchar)firstChar {
  if (firstChar == 't') {
    if ([@"transformForPlane" isEqual:eName]) {
      return OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleTransformForPlaneWithOrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_withJavaUtilLinkedHashMap_((OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *) check_class_cast(evSet_, [OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane class]), attrs);
    }
  }
  return [super startEuclidianViewElementSwitchWithNSString:eName withJavaUtilLinkedHashMap:attrs withChar:firstChar];
}

+ (jboolean)handleTransformForPlaneWithOrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane:(OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *)ev
                                                                              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleTransformForPlaneWithOrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_withJavaUtilLinkedHashMap_(ev, attrs);
}

- (void)handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isGeoQuadric]) {
    OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(geo_, [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
    IOSDoubleArray *matrix = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"A0"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A1"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A2"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A3"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A4"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A5"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A6"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A7"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A8"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A9"]) } count:10];
    [quadric setMatrixWithDoubleArray:matrix];
  }
  else {
    [super handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:attrs];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelConstruction:", "MyXMLHandler3D", NULL, 0x1, NULL, NULL },
    { "startEuclidianView3DElementWithNSString:withJavaUtilLinkedHashMap:", "startEuclidianView3DElement", "V", 0x4, NULL, NULL },
    { "startGeoElementWithNSString:withJavaUtilLinkedHashMap:", "startGeoElement", "V", 0x4, NULL, NULL },
    { "handleCoordSystem3DWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:withJavaUtilLinkedHashMap:", "handleCoordSystem3D", "Z", 0xa, NULL, NULL },
    { "handleFadingWithJavaUtilLinkedHashMap:", "handleFading", "Z", 0x2, NULL, NULL },
    { "handleLevelOfDetailQualityWithJavaUtilLinkedHashMap:", "handleLevelOfDetailQuality", "Z", 0x2, NULL, NULL },
    { "handlePlaneWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:withJavaUtilLinkedHashMap:", "handlePlane", "Z", 0x4, NULL, NULL },
    { "handlePlateWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:withJavaUtilLinkedHashMap:", "handlePlate", "Z", 0x4, NULL, NULL },
    { "handleYAxisIsUpWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:withJavaUtilLinkedHashMap:", "handleYAxisIsUp", "Z", 0x4, NULL, NULL },
    { "handleLightWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:withJavaUtilLinkedHashMap:", "handleLight", "Z", 0x4, NULL, NULL },
    { "handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleGrid", "Z", 0x4, NULL, NULL },
    { "handleClippingWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:withJavaUtilLinkedHashMap:", "handleClipping", "Z", 0x4, NULL, NULL },
    { "handleProjectionWithOrgGeogebraCommonMainSettingsEuclidianSettings3D:withJavaUtilLinkedHashMap:", "handleProjection", "Z", 0x4, NULL, NULL },
    { "handleAbsoluteStartPointWithJavaUtilLinkedHashMap:", "handleAbsoluteStartPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "handleColorAttrsWithJavaUtilLinkedHashMap:", "handleColorAttrs", "Lorg.geogebra.common.awt.GColor;", 0xa, NULL, NULL },
    { "startEuclidianViewElementCheckViewIdWithNSString:withJavaUtilLinkedHashMap:", "startEuclidianViewElementCheckViewId", "V", 0x4, NULL, NULL },
    { "startEuclidianViewElementSwitchWithNSString:withJavaUtilLinkedHashMap:withChar:", "startEuclidianViewElementSwitch", "Z", 0x4, NULL, NULL },
    { "handleTransformForPlaneWithOrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane:withJavaUtilLinkedHashMap:", "handleTransformForPlane", "Z", 0xa, NULL, NULL },
    { "handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:", "handleMatrixConicOrQuadric", "V", 0x4, "Ljava.lang.Exception;", NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D = { 2, "MyXMLHandler3D", "org.geogebra.common.geogebra3D.io", NULL, 0x1, 19, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D;
}

@end

void OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D *self, OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelConstruction *cons) {
  (void) OrgGeogebraCommonIoMyXMLHandler_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(self, kernel, cons);
}

OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D *new_OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D *self = [OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D alloc];
  OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(self, kernel, cons);
  return self;
}

jboolean OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleCoordSystem3DWithOrgGeogebraCommonMainSettingsEuclidianSettings3D_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings3D *evs, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_initialize();
  @try {
    jdouble xZero = JavaLangDouble_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"xZero"]);
    jdouble yZero = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"yZero"]);
    jdouble zZero = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"zZero"]);
    jdouble scale_ = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"scale"]);
    jdouble xAngle = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"xAngle"]);
    jdouble zAngle = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"zAngle"]);
    [((OrgGeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) setXscaleWithDouble:scale_];
    [evs setYscaleWithDouble:scale_];
    [evs setZscaleWithDouble:scale_];
    [evs setRotXYinDegreesWithDouble:zAngle withDouble:xAngle];
    [evs updateOriginWithDouble:xZero withDouble:yZero withDouble:zZero];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleFadingWithJavaUtilLinkedHashMap_(OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jfloat fading = JavaLangFloat_parseFloatWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]);
    [((id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelKernelNDGeoPlaneND))))) setFadingWithFloat:fading];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleLevelOfDetailQualityWithJavaUtilLinkedHashMap_(OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean lod = JavaLangBoolean_parseBooleanWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]);
    if (lod) {
      [((id<OrgGeogebraCommonKernelKernelNDSurfaceEvaluable>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDSurfaceEvaluable>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelKernelNDSurfaceEvaluable))))) setLevelOfDetailWithOrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum:OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum_get_QUALITY()];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleColorAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_initialize();
  @try {
    jint red = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"r"]);
    jint green = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"g"]);
    jint blue = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"b"]);
    return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

jboolean OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_handleTransformForPlaneWithOrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane_withJavaUtilLinkedHashMap_(OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *ev, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D_initialize();
  @try {
    [((OrgGeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *) nil_chk(ev)) setTransformForPlaneWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"mirror"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"rotate"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DIoMyXMLHandler3D)
