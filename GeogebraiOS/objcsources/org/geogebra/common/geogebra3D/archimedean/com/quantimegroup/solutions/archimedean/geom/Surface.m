//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Surface.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/BspTree.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Facet.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/FacetState.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Geometry.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Surface.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/TransformablePoint.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/IntList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Quick3X3Matrix.h"

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface () {
 @public
  id<JavaUtilList> rootFacets_;
  id<JavaUtilSet> excludedRootFacetIndices_;
  id<JavaUtilList> facets_;
  id<JavaUtilList> boundaries_;
  jdouble transformPercent_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *bspTree_;
  jint nonTransientPointCount_;
  JavaUtilTreeMap *savedBspTrees_;
}

- (void)saveBspTree;

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *)getBestBspTreeNew;

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *)getBestBspTree;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface, rootFacets_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface, excludedRootFacetIndices_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface, facets_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface, boundaries_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface, bspTree_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface, savedBspTrees_, JavaUtilTreeMap *)

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_getBestBspTree(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *self);

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_Listener : NSObject
@end

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)points {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(self, points);
  return self;
}

- (void)square {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *ots = [self getPoints];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *firstSide = [self getFacetWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *firstSideNormal = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(firstSide)) getNormal])) unit];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *desiredFirstSideNormal = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, -1);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *firstEdgeVector = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(ots)) getWithInt:1])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[ots getWithInt:0]])) unit];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *desiredFirstEdgeVector = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(1, 0, 0);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix *m = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix_findRotationMatrixWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(firstSideNormal, desiredFirstSideNormal, firstEdgeVector, desiredFirstEdgeVector);
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple * __strong ot in ots) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(ot)) becomeWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix *) nil_chk(m)) timesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:ot]];
  }
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet * __strong facet in nil_chk(facets_)) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(facet)) calcNormal];
  }
}

- (void)addRootFacetWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *)f {
  [((id<JavaUtilList>) nil_chk(rootFacets_)) addWithId:f];
  boundaries_ = nil;
}

- (void)excludeRootFacetWithInt:(jint)index {
  [((id<JavaUtilSet>) nil_chk(excludedRootFacetIndices_)) addWithId:JavaLangInteger_valueOfWithInt_(index)];
  boundaries_ = nil;
}

- (void)excludeAllRootFacets {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(rootFacets_)) size]; ++i) {
    [self excludeRootFacetWithInt:i];
  }
  boundaries_ = nil;
}

- (void)includeRootFacetWithInt:(jint)index {
  [((id<JavaUtilSet>) nil_chk(excludedRootFacetIndices_)) removeWithId:JavaLangInteger_valueOfWithInt_(index)];
  boundaries_ = nil;
}

- (void)includeAllRootFacets {
  [((id<JavaUtilSet>) nil_chk(excludedRootFacetIndices_)) clear];
  boundaries_ = nil;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *)getRootFacetWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(rootFacets_)) getWithInt:index];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *)getFacetWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(facets_)) getWithInt:index];
}

- (id<JavaUtilList>)getFacets {
  return facets_;
}

- (jint)getFacetCount {
  return [((id<JavaUtilList>) nil_chk(facets_)) size];
}

- (id<JavaUtilList>)getBoundaries {
  if (boundaries_ == nil) {
    [self calcBoundary];
  }
  return boundaries_;
}

- (void)bspBuild {
  if (nonTransientPointCount_ < 0) {
    nonTransientPointCount_ = [self getPointCount];
  }
  [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([super getPoints])) setSizeWithInt:nonTransientPointCount_];
  id<JavaUtilList> includedFacets = new_JavaUtilArrayList_init();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(rootFacets_)) size]; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *rootFacet = [rootFacets_ getWithInt:i];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(rootFacet)) clearChildren];
    if ([((id<JavaUtilSet>) nil_chk(excludedRootFacetIndices_)) containsWithId:JavaLangInteger_valueOfWithInt_(i)]) {
      continue;
    }
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk([rootFacets_ getWithInt:i])) getState])) isReal]) {
      [includedFacets addWithId:rootFacet];
    }
  }
  bspTree_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree_buildWithJavaUtilList_(includedFacets);
  [((id<JavaUtilList>) nil_chk(facets_)) clear];
  [facets_ addAllWithJavaUtilCollection:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *) nil_chk(bspTree_)) getMasterFacetList]];
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$I", @"Points: ", [self getPointCount])];
}

- (IOSIntArray *)bspSortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)viewer {
  if ([((id<JavaUtilList>) nil_chk(facets_)) isEmpty]) {
    return [IOSIntArray newArrayWithLength:0];
  }
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *) nil_chk(bspTree_)) sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:viewer];
}

- (jboolean)calcBoundary {
  boundaries_ = new_JavaUtilArrayList_init();
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *edges1 = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_withInt_(0, 10);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *edges2 = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_withInt_(0, 10);
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet * __strong sa in nil_chk(facets_)) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *pointIndicesA = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(sa)) getPointIndices];
    for (jint a = 0; a < [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(pointIndicesA)) size]; ++a) {
      {
        jint ai1 = [pointIndicesA getWithInt:a];
        jint ai2 = [pointIndicesA wrapgetWithInt:a + 1];
        for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet * __strong sb in facets_) {
          if (sb == sa) {
            continue;
          }
          OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *pointIndicesB = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(sb)) getPointIndices];
          for (jint b = 0; b < [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(pointIndicesB)) size]; ++b) {
            jint bi1 = [pointIndicesB getWithInt:b];
            jint bi2 = [pointIndicesB wrapgetWithInt:b + 1];
            if (bi2 == ai1 && bi1 == ai2) {
              goto continue_A;
            }
          }
        }
        [edges1 addWithInt:ai1];
        [edges2 addWithInt:ai2];
      }
      continue_A: ;
    }
  }
  if ([edges1 isEmpty]) {
    return NO;
  }
  while (![edges1 isEmpty]) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *boundary = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_withInt_(0, 1);
    [boundaries_ addWithId:boundary];
    jint b1 = [edges1 getWithInt:0];
    jint b2 = [edges2 getWithInt:0];
    [boundary addWithInt:b1];
    [boundary addWithInt:b2];
    [edges1 orderedRemoveIndexWithInt:0];
    [edges2 orderedRemoveIndexWithInt:0];
    while (YES) {
      jint bi = [edges1 findWithInt:[boundary getWithInt:[boundary size] - 1]];
      if (bi == -1) {
        break;
      }
      jint newBi = [edges2 getWithInt:bi];
      if (newBi != [boundary getWithInt:0]) {
        [boundary addWithInt:newBi];
      }
      [edges1 orderedRemoveIndexWithInt:bi];
      [edges2 orderedRemoveIndexWithInt:bi];
      b2 = bi;
    }
  }
  return YES;
}

- (jdouble)getTransformPercent {
  return transformPercent_;
}

- (void)transformWithDouble:(jdouble)percent {
  self->transformPercent_ = percent;
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple * __strong p in nil_chk([self getPoints])) {
    if ([p isKindOfClass:[OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint class]]) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *tp = (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *) check_class_cast(p, [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint class]);
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *) nil_chk(tp)) transformWithDouble:percent];
    }
  }
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet * __strong facet in nil_chk(rootFacets_)) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(facet)) setTransformPercentWithDouble:percent];
  }
}

- (jint)getTotalFacetCount {
  return [((id<JavaUtilList>) nil_chk(facets_)) size];
}

- (jint)getRootFacetCount {
  return [((id<JavaUtilList>) nil_chk(rootFacets_)) size];
}

- (jint)getExcludedRootFacetCount {
  return [((id<JavaUtilSet>) nil_chk(excludedRootFacetIndices_)) size];
}

- (id<JavaUtilIterator>)rootFacetsIterator {
  return [((id<JavaUtilList>) nil_chk(rootFacets_)) iterator];
}

- (void)saveBspTree {
  (void) [((JavaUtilTreeMap *) nil_chk(savedBspTrees_)) putWithId:JavaLangDouble_valueOfWithDouble_(transformPercent_) withId:bspTree_];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *)getBestBspTreeNew {
  if ([((JavaUtilTreeMap *) nil_chk(savedBspTrees_)) isEmpty]) {
    return bspTree_;
  }
  JavaLangDouble *d = nil;
  JavaLangDouble *prevD = nil;
  jdouble minDelta = JavaLangDouble_POSITIVE_INFINITY;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([savedBspTrees_ entrySet])) {
    d = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    jdouble delta = transformPercent_ - [((JavaLangDouble *) nil_chk(d)) doubleValue];
    minDelta = JavaLangMath_minWithDouble_withDouble_(minDelta, delta);
    if ([d doubleValue] >= transformPercent_) {
      if (delta == minDelta) {
        return [entry_ getValue];
      }
      else {
        return [savedBspTrees_ getWithId:prevD];
      }
    }
    prevD = d;
  }
  return [savedBspTrees_ getWithId:d];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *)getBestBspTree {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_getBestBspTree(self);
}

- (jboolean)useBestBspTree {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *best = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_getBestBspTree(self);
  if (bspTree_ != best) {
    bspTree_ = best;
    [((id<JavaUtilList>) nil_chk(facets_)) clear];
    [facets_ addAllWithJavaUtilCollection:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *) nil_chk(bspTree_)) getMasterFacetList]];
    return YES;
  }
  return NO;
}

+ (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *)createTestSurface1 {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_createTestSurface1();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "Surface", NULL, 0x1, NULL, NULL },
    { "square", NULL, "V", 0x1, NULL, NULL },
    { "addRootFacetWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet:", "addRootFacet", "V", 0x1, NULL, NULL },
    { "excludeRootFacetWithInt:", "excludeRootFacet", "V", 0x1, NULL, NULL },
    { "excludeAllRootFacets", NULL, "V", 0x1, NULL, NULL },
    { "includeRootFacetWithInt:", "includeRootFacet", "V", 0x1, NULL, NULL },
    { "includeAllRootFacets", NULL, "V", 0x1, NULL, NULL },
    { "getRootFacetWithInt:", "getRootFacet", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.Facet;", 0x1, NULL, NULL },
    { "getFacetWithInt:", "getFacet", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.Facet;", 0x1, NULL, NULL },
    { "getFacets", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "getFacetCount", NULL, "I", 0x1, NULL, NULL },
    { "getBoundaries", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "bspBuild", NULL, "V", 0x1, NULL, NULL },
    { "bspSortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "bspSort", "[I", 0x1, NULL, NULL },
    { "calcBoundary", NULL, "Z", 0x1, NULL, NULL },
    { "getTransformPercent", NULL, "D", 0x1, NULL, NULL },
    { "transformWithDouble:", "transform", "V", 0x1, NULL, NULL },
    { "getTotalFacetCount", NULL, "I", 0x1, NULL, NULL },
    { "getRootFacetCount", NULL, "I", 0x1, NULL, NULL },
    { "getExcludedRootFacetCount", NULL, "I", 0x1, NULL, NULL },
    { "rootFacetsIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "saveBspTree", NULL, "V", 0x2, NULL, NULL },
    { "getBestBspTreeNew", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.BspTree;", 0x2, NULL, NULL },
    { "getBestBspTree", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.BspTree;", 0x2, NULL, NULL },
    { "useBestBspTree", NULL, "Z", 0x1, NULL, NULL },
    { "createTestSurface1", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.Surface;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rootFacets_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Facet;>;",  },
    { "excludedRootFacetIndices_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/Integer;>;",  },
    { "facets_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Facet;>;",  },
    { "boundaries_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/IntList;>;",  },
    { "transformPercent_", NULL, 0x2, "D", NULL, NULL,  },
    { "bspTree_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.BspTree;", NULL, NULL,  },
    { "nonTransientPointCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "savedBspTrees_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Double;Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/BspTree;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.Surface$Listener;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface = { 2, "Surface", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x1, 26, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points) {
  (void) OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometry_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(self, points);
  self->rootFacets_ = new_JavaUtilArrayList_init();
  self->excludedRootFacetIndices_ = new_JavaUtilHashSet_init();
  self->facets_ = new_JavaUtilArrayList_init();
  self->boundaries_ = nil;
  self->nonTransientPointCount_ = -1;
  self->savedBspTrees_ = new_JavaUtilTreeMap_init();
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(self, points);
  return self;
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomBspTree *OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_getBestBspTree(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *self) {
  if ([((JavaUtilTreeMap *) nil_chk(self->savedBspTrees_)) isEmpty]) {
    return self->bspTree_;
  }
  JavaLangDouble *d = nil;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([self->savedBspTrees_ entrySet])) {
    d = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    if ([((JavaLangDouble *) nil_chk(d)) doubleValue] >= self->transformPercent_) {
      return [entry_ getValue];
    }
  }
  return [self->savedBspTrees_ getWithId:d];
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_createTestSurface1() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_initialize();
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(10, 10);
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(-100, -50, 100)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(-100, -50, -100)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(100, -50, -100)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(100, -50, 100)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(50, -100, -100)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(50, -100, 100)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(50, 100, 100)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(50, 100, -100)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(100, 100, -50)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(-100, 100, -50)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(-100, -100, -50)];
  [points addWithId:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(100, -100, -50)];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *surface = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(points);
  [surface addRootFacetWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_withIntArray_(surface, [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 2, 3 } count:4])];
  [surface addRootFacetWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_withIntArray_(surface, [IOSIntArray newArrayWithInts:(jint[]){ 4, 5, 6, 7 } count:4])];
  [surface addRootFacetWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_withIntArray_(surface, [IOSIntArray newArrayWithInts:(jint[]){ 8, 9, 10, 11 } count:4])];
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet * __strong facet in nil_chk([surface getFacets])) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(facet)) calcNormal];
  }
  return surface;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_Listener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "surfaceChanged", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_Listener = { 2, "Listener", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "Surface", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_Listener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_Listener)
