//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiFacet.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiBuilder.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiFacet.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/FacetShapeCalculator.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/FacetStateCalculator.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/GeometryUtils.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Axes.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/IntList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Rotater.h"

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet () {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *vertexIndices_;
  jint normalIndex_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points_, *vectors_;
  jboolean isREGULAR__;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator *stateCalculator_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator *shapeCalculator_;
}

- (IOSObjectArray *)threeDistinctPoints;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet, vertexIndices_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet, points_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet, vectors_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet, stateCalculator_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet, shapeCalculator_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator *)

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_threeDistinctPoints(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *self);

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)getPoints {
  return points_;
}

- (void)setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)p {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_set_points_(self, p);
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)getVectors {
  return vectors_;
}

- (void)setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)p {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_set_vectors_(self, p);
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getNormal {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(vectors_)) getWithInt:normalIndex_];
}

- (jint)getNormalIndex {
  return normalIndex_;
}

- (void)setNormalWithInt:(jint)p {
  normalIndex_ = p;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)getVertexIndices {
  return vertexIndices_;
}

- (void)setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)p {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_set_vertexIndices_(self, p);
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)numPoints {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(self, numPoints);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p0
                    withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p1
                    withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p2
                       withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)s
                      withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(self, p0, p1, p2, s, boss);
  return self;
}

+ (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)sideFromTwoPointsAndNormalWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p0
                                                                                                                        withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p1
                                                                                                                        withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)n
                                                                                                                           withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)s
                                                                                                                          withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_sideFromTwoPointsAndNormalWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(p0, p1, n, s, boss);
}

- (jboolean)hasPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p {
  for (jint i = 0; i < [self getVertexCount]; ++i) {
    if ([self getPointWithInt:i] == p) return YES;
  }
  return NO;
}

- (jint)findPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p {
  for (jint i = 0; i < [self getVertexCount]; ++i) {
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_)) getWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_)) getWithInt:i]] == p) return i;
  }
  return -1;
}

- (jint)findIndexWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_)) findWithInt:i];
}

- (jint)toRangeWithInt:(jint)i {
  while (i < 0) i += [self getVertexCount];
  while (i >= [self getVertexCount]) i -= [self getVertexCount];
  return i;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getPointWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_)) getWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_)) getWithInt:i]];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)wrapgetPointWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_)) getWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_)) getWithInt:[self toRangeWithInt:i]]];
}

- (jint)getIndexWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_)) getWithInt:i];
}

- (jint)wrapgetIndexWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_)) wrapgetWithInt:i];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)calcNormal {
  IOSObjectArray *p = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_threeDistinctPoints(self);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(nil_chk(p), 0))) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:IOSObjectArray_Get(p, 1)];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, 2))) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:IOSObjectArray_Get(p, 1)];
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(v1)) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v2];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getIncenter {
  IOSObjectArray *p = [self fourDistinctPoints];
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getIncenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(IOSObjectArray_Get(nil_chk(p), 0), IOSObjectArray_Get(p, 1), IOSObjectArray_Get(p, 2), IOSObjectArray_Get(p, 3));
}

- (IOSObjectArray *)fourDistinctPoints {
  IOSObjectArray *p = [IOSObjectArray arrayWithLength:4 type:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_class_()];
  jdouble epsilon = 1e-10;
  IOSObjectArray_Set(p, 0, [self getPointWithInt:0]);
  jint i;
  for (i = 1; i < [self getVertexCount]; ++i) {
    IOSObjectArray_Set(p, 1, [self getPointWithInt:i]);
    if (![((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, 1))) isApproxWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:IOSObjectArray_Get(p, 0) withDouble:epsilon]) break;
  }
  for (i = i + 1; i < [self getVertexCount]; ++i) {
    IOSObjectArray_Set(p, 2, [self getPointWithInt:i]);
    if (![((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, 2))) isApproxWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:IOSObjectArray_Get(p, 1) withDouble:epsilon]) break;
  }
  for (i = i + 1; i < [self getVertexCount] * 2; ++i) {
    IOSObjectArray_Set(p, 3, [self wrapgetPointWithInt:i]);
    if (![((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, 3))) isApproxWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:IOSObjectArray_Get(p, 2) withDouble:epsilon]) break;
  }
  return p;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)outwardPerpendicularWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p1
                                                                                                                      withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p2 {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getNormal])) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p2)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p1]];
}

- (jboolean)insideWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p {
  jdouble epsilon = 1e-5;
  jint numRealSides = 0;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *L1, *L2 = [self wrapgetPointWithInt:-1];
  for (jint i = 0; i < [self getVertexCount]; ++i) {
    L1 = L2;
    L2 = [self getPointWithInt:i];
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(L1)) equalsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:L2]) continue;
    ++numRealSides;
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:L1])) dotWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[self outwardPerpendicularWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:L1 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:L2]] > epsilon) return NO;
  }
  return numRealSides >= 3;
}

- (jboolean)isClockwiseWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)norm {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self calcNormal])) dotWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:norm] > 0;
}

- (jboolean)isAdjacentWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s {
  jint count = 0;
  for (jint i = 0; i < [self getVertexCount]; ++i) {
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s))->vertexIndices_ findWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_)) getWithInt:i]] != -1) ++count;
  }
  return count == 2;
}

- (IOSObjectArray *)threeDistinctPoints {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_threeDistinctPoints(self);
}

- (jdouble)getArea {
  jdouble area = 0;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p0 = [self getPointWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2 = [self getPointWithInt:1];
  jdouble a, b;
  jdouble c = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p2)) distanceWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p0];
  for (jint i = 2; i < [self getVertexCount]; ++i) {
    p1 = p2;
    p2 = [self getPointWithInt:i];
    a = c;
    b = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p2)) distanceWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p1];
    c = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p0)) distanceWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p2];
    area += OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_triangleAreaWithDouble_withDouble_withDouble_(a, b, c);
  }
  return area;
}

- (jboolean)calcRegular {
  jdouble epsilon = 1e-1;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *tempPoints = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([self getVertexCount]) autorelease];
  for (jint i = 0; i < [self getVertexCount]; ++i) {
    [tempPoints addWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_([self getPointWithInt:i]) autorelease]];
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *axis = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(self);
  if (axis == nil) {
    return NO;
  }
  if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(axis)) isApproxWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_origin() withDouble:epsilon]) {
    axis = [self getNormal];
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsRotater *r = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsRotater_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withDouble_(axis, JavaLangMath_PI * 2 / [self getVertexCount]) autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes *a = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes_init() autorelease];
  [a timesEqualsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix:r];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *copiedPoints = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([self getVertexCount]) autorelease];
  for (jint i = 0; i < [self getVertexCount]; ++i) {
    [copiedPoints addWithId:[self getPointWithInt:i]];
  }
  for (jint i = 0; i < tempPoints->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pi = [tempPoints getWithInt:i];
    [a transformPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:pi];
    jint found = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(pi, copiedPoints);
    if (found == -1) return NO;
    else [copiedPoints removeIndexWithInt:found];
  }
  return copiedPoints->num_ == 0;
}

- (jboolean)isREGULAR {
  return isREGULAR__;
}

- (void)setREGULARWithBoolean:(jboolean)isREGULAR {
  self->isREGULAR__ = isREGULAR;
}

- (jint)getVertexCount {
  return ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_))->num_;
}

- (IOSIntArray *)getVertexIndicesArray {
  return ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(vertexIndices_)) shrink]))->ints_;
}

- (void)setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator *)stateCalculator {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_set_stateCalculator_(self, stateCalculator);
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator *)getStateCalculator {
  return stateCalculator_;
}

- (void)setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator *)shapeCalculator {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_set_shapeCalculator_(self, shapeCalculator);
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator *)getShapeCalculator {
  return shapeCalculator_;
}

- (void)dealloc {
  RELEASE_(vertexIndices_);
  RELEASE_(points_);
  RELEASE_(vectors_);
  RELEASE_(stateCalculator_);
  RELEASE_(shapeCalculator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getPoints", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x1, NULL, NULL },
    { "setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "setPoints", "V", 0x1, NULL, NULL },
    { "getVectors", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x1, NULL, NULL },
    { "setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "setVectors", "V", 0x1, NULL, NULL },
    { "getNormal", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "getNormalIndex", NULL, "I", 0x1, NULL, NULL },
    { "setNormalWithInt:", "setNormal", "V", 0x1, NULL, NULL },
    { "getVertexIndices", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x1, NULL, NULL },
    { "setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:", "setVertexIndices", "V", 0x1, NULL, NULL },
    { "init", "ArchiFacet", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "ArchiFacet", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "ArchiFacet", NULL, 0x1, "Ljava.lang.Exception;", NULL },
    { "sideFromTwoPointsAndNormalWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "sideFromTwoPointsAndNormal", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiFacet;", 0x9, "Ljava.lang.Exception;", NULL },
    { "hasPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "hasPoint", "Z", 0x1, NULL, NULL },
    { "findPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "findPoint", "I", 0x1, NULL, NULL },
    { "findIndexWithInt:", "findIndex", "I", 0x1, NULL, NULL },
    { "toRangeWithInt:", "toRange", "I", 0x0, NULL, NULL },
    { "getPointWithInt:", "getPoint", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "wrapgetPointWithInt:", "wrapgetPoint", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "getIndexWithInt:", "getIndex", "I", 0x1, NULL, NULL },
    { "wrapgetIndexWithInt:", "wrapgetIndex", "I", 0x1, NULL, NULL },
    { "calcNormal", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "getIncenter", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "fourDistinctPoints", NULL, "[Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "outwardPerpendicularWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "outwardPerpendicular", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "insideWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "inside", "Z", 0x1, NULL, NULL },
    { "isClockwiseWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "isClockwise", "Z", 0x0, NULL, NULL },
    { "isAdjacentWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:", "isAdjacent", "Z", 0x1, NULL, NULL },
    { "threeDistinctPoints", NULL, "[Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x2, NULL, NULL },
    { "getArea", NULL, "D", 0x1, NULL, NULL },
    { "calcRegular", NULL, "Z", 0x1, NULL, NULL },
    { "isREGULAR", NULL, "Z", 0x1, NULL, NULL },
    { "setREGULARWithBoolean:", "setREGULAR", "V", 0x1, NULL, NULL },
    { "getVertexCount", NULL, "I", 0x1, NULL, NULL },
    { "getVertexIndicesArray", NULL, "[I", 0x1, NULL, NULL },
    { "setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:", "setStateCalculator", "V", 0x1, NULL, NULL },
    { "getStateCalculator", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetStateCalculator;", 0x1, NULL, NULL },
    { "setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:", "setShapeCalculator", "V", 0x1, NULL, NULL },
    { "getShapeCalculator", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShapeCalculator;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vertexIndices_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
    { "normalIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "points_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;",  },
    { "vectors_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;",  },
    { "isREGULAR__", "isREGULAR", 0x2, "Z", NULL, NULL,  },
    { "stateCalculator_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetStateCalculator;", NULL, NULL,  },
    { "shapeCalculator_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShapeCalculator;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet = { 2, "ArchiFacet", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x0, 39, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *self) {
  NSObject_init(self);
  self->isREGULAR__ = YES;
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init(self);
  return self;
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *self, jint numPoints) {
  NSObject_init(self);
  self->isREGULAR__ = YES;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_setAndConsume_vertexIndices_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numPoints));
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(jint numPoints) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(self, numPoints);
  return self;
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(self, ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes *a = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes_init() autorelease];
  [a setXWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p0)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p1]];
  [a setYWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p1)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p0])) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p2)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p1]]];
  [a setZWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([a getX])) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[a getY]]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes_set_origin_(a, p0);
  [a correct];
  for (jint i = 0; i < s->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(([s getWithInt:i]))) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[s getWithInt:0]];
    [a transformPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(self->vertexIndices_)) addWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p]];
  }
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(self, p0, p1, p2, s, boss);
  return self;
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_sideFromTwoPointsAndNormalWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *n, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initialize();
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *me = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_) autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes *a = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes_init() autorelease];
  [a setXWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p0)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p1]];
  [a setYWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:n];
  [a setZWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([a getX])) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[a getY]]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes_set_origin_(a, p0);
  [a correct];
  for (jint i = 0; i < s->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(([s getWithInt:i]))) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[s getWithInt:0]];
    [a transformPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(me->vertexIndices_)) addWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p]];
  }
  return me;
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_threeDistinctPoints(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *self) {
  IOSObjectArray *p = [IOSObjectArray arrayWithLength:3 type:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_class_()];
  jdouble epsilon = 1e-10;
  IOSObjectArray_Set(p, 0, [self getPointWithInt:0]);
  jint i;
  for (i = 1; i < [self getVertexCount]; ++i) {
    IOSObjectArray_Set(p, 1, [self getPointWithInt:i]);
    if (![((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, 1))) isApproxWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:IOSObjectArray_Get(p, 0) withDouble:epsilon]) break;
  }
  for (i = i + 1; i < [self getVertexCount]; ++i) {
    IOSObjectArray_Set(p, 2, [self getPointWithInt:i]);
    if (![((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, 2))) isApproxWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:IOSObjectArray_Get(p, 1) withDouble:epsilon]) break;
  }
  return p;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet)
