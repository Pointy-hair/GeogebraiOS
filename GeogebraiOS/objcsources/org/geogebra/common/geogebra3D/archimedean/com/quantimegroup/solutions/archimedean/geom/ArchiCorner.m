//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiCorner.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiBuilder.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiCorner.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiFacet.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/MySolver.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/IntList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Misc.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple.h"

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner () {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *firstSides_;
  jint hub_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *spokes_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pole_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sides_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, boss_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, firstSides_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, spokes_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, pole_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, sides_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)getBoss {
  return boss_;
}

- (void)setBossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)p {
  boss_ = p;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)getFirstSides {
  return firstSides_;
}

- (void)setFirstSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)p {
  firstSides_ = p;
}

- (jint)getHub {
  return hub_;
}

- (void)setHubWithInt:(jint)p {
  hub_ = p;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)getSpokes {
  return spokes_;
}

- (void)setSpokesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)p {
  spokes_ = p;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)getSides {
  return sides_;
}

- (void)setSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)p {
  sides_ = p;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getPole {
  if (pole_ == nil) return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getHubPoint])) negative];
  return pole_;
}

- (void)setPoleWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p {
  pole_ = p;
}

+ (jdouble)computePoleThetaWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)firstSides
                                                                                                              withDouble:(jdouble)length {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_computePoleThetaWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_(firstSides, length);
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init(self);
  return self;
}

- (void)init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                                                                                                       withInt:(jint)numSpokes
                withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  self->boss_ = boss;
  self->hub_ = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub];
  self->spokes_ = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numSpokes);
  self->sides_ = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numSpokes);
  self->firstSides_ = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(numSpokes);
}

- (void)init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                  withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
                  withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                       withInt:(jint)numSpokes
                                                                                                    withDouble:(jdouble)poleTheta
                withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss
                                                                                                       withInt:(jint)recursionDepth {
  [self init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withInt:numSpokes withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss];
  [self startWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:numSpokes withDouble:poleTheta];
  [self completeWithInt:numSpokes withDouble:poleTheta withInt:recursionDepth];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)createWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                                                                                                                                                                                              withInt:(jint)numSpokes
                                                                                                       withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
  [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withInt:numSpokes withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss];
  return c;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)createWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                                                                                                         withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
                                                                                                         withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                                                                                                              withInt:(jint)numSpokes
                                                                                                                                                                                           withDouble:(jdouble)poleTheta
                                                                                                       withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss
                                                                                                                                                                                              withInt:(jint)recursionDepth {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
  [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:numSpokes withDouble:poleTheta withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss withInt:recursionDepth];
  return c;
}

+ (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)simpleCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                                                                                                               withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
                                                                                                               withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                                                                                                                    withInt:(jint)numSpokes
                                                                                                                                                                                                 withDouble:(jdouble)poleTheta
                                                                                                             withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_simpleCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(hub, s1, s2, numSpokes, poleTheta, boss);
}

+ (void)createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)firstSides
                                                                                                            withDouble:(jdouble)length
                                                                                                               withInt:(jint)numSpokes
                                                                                                            withDouble:(jdouble)poleTheta
                        withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(firstSides, length, numSpokes, poleTheta, boss);
}

+ (void)createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)firstSides
                                                                                                            withDouble:(jdouble)length
                                                                                                               withInt:(jint)numSpokes
                                                                                                            withDouble:(jdouble)poleTheta
                        withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss
                                                                                                           withBoolean:(jboolean)finish {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withBoolean_(firstSides, length, numSpokes, poleTheta, boss, finish);
}

- (void)startWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
             withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                  withInt:(jint)numSpokes
                                                                                               withDouble:(jdouble)poleTheta {
  jint i1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) findIndexWithInt:hub_];
  jint i2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) findIndexWithInt:hub_];
  [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_)) addWithInt:[s1 wrapgetIndexWithInt:i1 + 1]];
  [spokes_ addWithInt:[s1 wrapgetIndexWithInt:i1 - 1]];
  [spokes_ addWithInt:[s2 wrapgetIndexWithInt:i2 - 1]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *h = [self getHubPoint];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk((([self getSpokeWithInt:0])))) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk((([self getSpokeWithInt:1])))) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
  pole_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_findThirdVectorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withDouble_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(v1, v2, poleTheta, poleTheta, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(v1)) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v2]);
  [self getFirstSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:0 withInt:numSpokes];
}

- (jint)getFirstSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
                     withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                          withInt:(jint)start
                                                                                                          withInt:(jint)numSpokes {
  jint foundi = -1, inc = 0;
  for (jint i = start; i < numSpokes; ++i) {
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) getVertexCount] == ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_))->firstSides_)) getWithInt:i]))->num_) {
      if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) getVertexCount] == ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([boss_->firstSides_ wrapgetWithInt:i + 1]))->num_) {
        foundi = i;
        inc = 1;
        break;
      }
      else if ([s2 getVertexCount] == ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([boss_->firstSides_ wrapgetWithInt:i - 1]))->num_) {
        foundi = i;
        inc = -1;
        break;
      }
    }
  }
  if (inc == 0 || foundi == -1) {
    NSString *str = NSString_valueOf_(JreStrcat("$I$I", @"EXCEPTION getFirstSides. inc = ", inc, @" foundi = ", foundi));
    str = JreStrcat("$$", str, NSString_valueOf_(JreStrcat("$I$I", @"\ns1.points.num = ", [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) getVertexCount], @" s2.points.num = ", [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) getVertexCount])));
    @throw new_JavaLangException_initWithNSString_(str);
  }
  firstSides_ = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_))->firstSides_)) wrapCopyWithInt:foundi withInt:inc];
  return foundi + 1;
}

- (void)completeWithInt:(jint)numSpokes
             withDouble:(jdouble)poleTheta
                withInt:(jint)recursionDepth {
  if (recursionDepth > 400) {
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$I", @"recursion Depth = ", recursionDepth));
  }
  [self completeSpokesWithDouble:poleTheta];
  [self completeSides];
  [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) registerCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner:self];
  [self errorCheck];
  [self propagateCornersWithInt:numSpokes withDouble:poleTheta withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss_ withInt:recursionDepth];
}

- (void)completeSpokesWithDouble:(jdouble)poleTheta {
  for (jint i = 1; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides_))->num_; ++i) {
    if (((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_))->num_ > i) {
      continue;
    }
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = [firstSides_ getWithInt:i - 1];
    jdouble polyTheta = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *h = [self getHubPoint];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *lastSpoke = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self wrapgetSpokeWithInt:i - 1])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *nextSpoke = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_findThirdVectorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withDouble_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(pole_, lastSpoke, poleTheta, polyTheta, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(pole_)) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:lastSpoke]);
    [spokes_ addWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(h)) plusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:nextSpoke]]];
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *s1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getSpokeWithInt:0])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[self getHubPoint]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *s2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getSpokeWithInt:firstSides_->num_ - 1])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[self getHubPoint]];
  jdouble check1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(s1)) radBetweenWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:s2];
  jdouble check2 = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([firstSides_ getLast]))->num_);
  if (!OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(check1, check2, 1e-5)) {
    IOSIntArray *polyTypes = [IOSIntArray newArrayWithLength:firstSides_->num_];
    for (jint i = 0; i < firstSides_->num_; ++i) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = [firstSides_ getWithInt:i];
      *IOSIntArray_GetRef(polyTypes, i) = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_;
    }
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver *solver1 = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver_initWithIntArray_withInt_withDouble_withBoolean_(polyTypes, polyTypes->size_, 100, YES);
    jdouble r1 = [solver1 solve];
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithDouble:r1];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver *solver2 = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver_initWithIntArray_withInt_withDouble_withBoolean_(polyTypes, polyTypes->size_, 100, NO);
    jdouble r2 = [solver2 solve];
    [JavaLangSystem_get_out_() printlnWithDouble:r2];
  }
}

- (void)completeSides {
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p0 = [self getSpokeWithInt:i];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1 = [self getHubPoint];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2 = [self wrapgetSpokeWithInt:i + 1];
    jint index = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) sideIsBuiltWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p2 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p1 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p0];
    if (index == -1) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *master = [firstSides_ getWithInt:i];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(p2, p1, p0, master, boss_);
      [s setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:boss_->points_];
      [s setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:boss_->vectors_];
      index = [boss_ registerSideWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s];
    }
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_)) addWithInt:index];
  }
}

- (void)propagateCornersWithInt:(jint)numSpokes
                     withDouble:(jdouble)poleTheta
withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss
                        withInt:(jint)recursionDepth {
  jint hubIndex, s1index, s2index;
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *newHub = [self getSpokeWithInt:i];
    hubIndex = [spokes_ getWithInt:i];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s1 = [self getSideWithInt:i];
    s1index = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_)) getWithInt:i];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s2 = [self wrapgetSideWithInt:i - 1];
    s2index = [sides_ wrapgetWithInt:i - 1];
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) cornerIsBuiltWithInt:hubIndex withInt:s1index withInt:s2index] == -1) {
      if (!(boss->ambiguous_ && [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) getVertexCount] == boss->ambiguousPoly_ && [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) getVertexCount] == boss->ambiguousPoly_)) {
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *newc = [boss createArchiCorner];
        [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(newc)) init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:newHub withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:numSpokes withDouble:poleTheta withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss withInt:recursionDepth];
      }
    }
  }
}

- (void)errorCheck {
  if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_))->points_)) size] < [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(boss_->corners_)) size]) {
    @throw new_JavaLangException_initWithNSString_(@"Error completing solid. More corners than vertices.");
  }
}

+ (jdouble)polyAngleWithInt:(jint)numSides {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_(numSides);
}

+ (jboolean)isApproxWithDouble:(jdouble)a
                    withDouble:(jdouble)b
                    withDouble:(jdouble)e {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_isApproxWithDouble_withDouble_withDouble_(a, b, e);
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getSpokeWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getPointWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_)) getWithInt:i]];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)wrapgetSpokeWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getPointWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_)) wrapgetWithInt:i]];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)getSideWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getSideWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_)) getWithInt:i]];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)wrapgetSideWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getSideWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_)) wrapgetWithInt:i]];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getHubPoint {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getPointWithInt:hub_];
}

- (IOSIntArray *)getSignature {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sign = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_))->num_);
  for (jint i = 0; i < sides_->num_; ++i) {
    [sign addWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk([self getSideWithInt:i])) getVertexCount]];
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *bestSign = sign, *temp;
  for (jint i = 0; i < sides_->num_; ++i) {
    temp = [sign wrapCopyWithInt:i withInt:1];
    if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_arrayCompareWithIntArray_withIntArray_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(temp))->ints_, bestSign->ints_) < 0) bestSign = temp;
    temp = [sign wrapCopyWithInt:i withInt:-1];
  }
  return bestSign->ints_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getBoss", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, NULL, NULL },
    { "setBossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "setBoss", "V", 0x1, NULL, NULL },
    { "getFirstSides", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x1, NULL, NULL },
    { "setFirstSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "setFirstSides", "V", 0x1, NULL, NULL },
    { "getHub", NULL, "I", 0x1, NULL, NULL },
    { "setHubWithInt:", "setHub", "V", 0x1, NULL, NULL },
    { "getSpokes", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x1, NULL, NULL },
    { "setSpokesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:", "setSpokes", "V", 0x1, NULL, NULL },
    { "getSides", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x1, NULL, NULL },
    { "setSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:", "setSides", "V", 0x1, NULL, NULL },
    { "getPole", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "setPoleWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "setPole", "V", 0x1, NULL, NULL },
    { "computePoleThetaWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withDouble:", "computePoleTheta", "D", 0x9, NULL, NULL },
    { "init", "ArchiCorner", NULL, 0x4, NULL, NULL },
    { "init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "init", "V", 0x4, "Ljava.lang.Exception;", NULL },
    { "init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withDouble:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withInt:", "init", "V", 0x4, "Ljava.lang.Exception;", NULL },
    { "createWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "create", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x4, "Ljava.lang.Exception;", NULL },
    { "createWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withDouble:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withInt:", "create", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x4, "Ljava.lang.Exception;", NULL },
    { "simpleCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withDouble:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "simpleCorner", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x9, "Ljava.lang.Exception;", NULL },
    { "createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withDouble:withInt:withDouble:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "createFirstCorner", "V", 0x9, "Ljava.lang.Exception;", NULL },
    { "createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withDouble:withInt:withDouble:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withBoolean:", "createFirstCorner", "V", 0x9, "Ljava.lang.Exception;", NULL },
    { "startWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withDouble:", "start", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "getFirstSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withInt:", "getFirstSides", "I", 0x1, "Ljava.lang.Exception;", NULL },
    { "completeWithInt:withDouble:withInt:", "complete", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "completeSpokesWithDouble:", "completeSpokes", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "completeSides", NULL, "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "propagateCornersWithInt:withDouble:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withInt:", "propagateCorners", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "errorCheck", NULL, "V", 0x4, "Ljava.lang.Exception;", NULL },
    { "polyAngleWithInt:", "polyAngle", "D", 0x8, NULL, NULL },
    { "isApproxWithDouble:withDouble:withDouble:", "isApprox", "Z", 0x8, NULL, NULL },
    { "getSpokeWithInt:", "getSpoke", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "wrapgetSpokeWithInt:", "wrapgetSpoke", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x0, NULL, NULL },
    { "getSideWithInt:", "getSide", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiFacet;", 0x0, NULL, NULL },
    { "wrapgetSideWithInt:", "wrapgetSide", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiFacet;", 0x0, NULL, NULL },
    { "getHubPoint", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "getSignature", NULL, "[I", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "boss_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", NULL, NULL,  },
    { "firstSides_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;>;",  },
    { "hub_", NULL, 0x2, "I", NULL, NULL,  },
    { "spokes_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
    { "pole_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", NULL, NULL,  },
    { "sides_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner = { 2, "ArchiCorner", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x1, 36, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner;
}

@end

jdouble OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_computePoleThetaWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *firstSides, jdouble length) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  IOSIntArray *polyTypes = [IOSIntArray newArrayWithLength:((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides))->num_];
  for (jint i = 0; i < firstSides->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = [firstSides getWithInt:i];
    *IOSIntArray_GetRef(polyTypes, i) = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_;
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver *solver = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver_initWithIntArray_withDouble_(polyTypes, length);
  jdouble r = [solver solve];
  return JavaLangMath_asinWithDouble_(r / length);
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init(self);
  return self;
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_simpleCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *hub, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s1, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s2, jint numSpokes, jdouble poleTheta, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c))->boss_ = boss;
  c->hub_ = [boss registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub];
  c->spokes_ = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numSpokes);
  c->sides_ = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numSpokes);
  c->firstSides_ = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(numSpokes);
  jint i1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) findIndexWithInt:c->hub_];
  jint i2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) findIndexWithInt:c->hub_];
  [c->spokes_ addWithInt:[s1 wrapgetIndexWithInt:i1 + 1]];
  [c->spokes_ addWithInt:[s1 wrapgetIndexWithInt:i1 - 1]];
  [c->spokes_ addWithInt:[s2 wrapgetIndexWithInt:i2 - 1]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *h = [c getHubPoint];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getSpokeWithInt:0])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getSpokeWithInt:1])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
  c->pole_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_findThirdVectorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withDouble_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(v1, v2, poleTheta, poleTheta, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(v1)) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v2]);
  return c;
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *firstSides, jdouble length, jint numSpokes, jdouble poleTheta, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withBoolean_(firstSides, length, numSpokes, poleTheta, boss, YES);
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withBoolean_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *firstSides, jdouble length, jint numSpokes, jdouble poleTheta, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss, jboolean finish) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  if (finish) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *hub = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, 0);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withInt:numSpokes withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss];
    c->firstSides_ = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides)) copy__];
    c->pole_ = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, -1, 0) timesWithDouble:length];
    jdouble y = length * JavaLangMath_cosWithDouble_(poleTheta);
    jdouble x = JavaLangMath_sqrtWithDouble_(length * length - y * y);
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(c->spokes_)) addWithInt:[boss registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(x, -y, 0)]];
    [c completeWithInt:numSpokes withDouble:poleTheta withInt:0];
  }
  else {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *hub = new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, 0);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) init__WithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withInt:numSpokes withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss];
    c->boss_ = boss;
    c->firstSides_ = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides)) copy__];
    c->pole_ = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_yAxis())) timesWithDouble:length];
    jdouble y = length * JavaLangMath_cosWithDouble_(poleTheta);
    jdouble x = JavaLangMath_sqrtWithDouble_(length * length - y * y);
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(c->spokes_)) addWithInt:[boss registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(x, y, 0)]];
    [c completeSpokesWithDouble:poleTheta];
    [c completeSides];
    [c->boss_ registerCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner:c];
    [c errorCheck];
  }
}

jdouble OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_(jint numSides) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  return JavaLangMath_PI * (1 - 2.0 / numSides);
}

jboolean OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_isApproxWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble e) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  return JavaLangMath_absWithDouble_(a - b) <= e;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner)
