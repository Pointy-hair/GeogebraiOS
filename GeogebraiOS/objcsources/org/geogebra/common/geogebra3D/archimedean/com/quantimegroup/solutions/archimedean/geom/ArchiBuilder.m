//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiBuilder.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/IdentityHashMap.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/common/SolidDefinition.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiBuilder.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiCorner.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiFacet.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Facet.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/FacetShape.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/FacetShapeCalculator.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/FacetState.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/FacetStateCalculator.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/GeometryUtils.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Surface.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/TransformablePoint.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/IntList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Misc.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Quick3X3Matrix.h"

#define OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_VERBOSE NO

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder () {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *sides_;
  jint type_;
  jboolean untwist_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *dualPartner_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)findCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)h;

- (void)setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)truncSide
                                                                                                                      withInt:(jint)polyType
                                   withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)sortedPolyTypes
                                                                                                                  withBoolean:(jboolean)platonic
                                                                                                                  withBoolean:(jboolean)corner
                                                                                                              withDoubleArray:(IOSDoubleArray *)truncPercents;

- (void)setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)truncSide
                                                                                                                    withInt:(jint)polyType
                                 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)sortedPolyTypes
                                                                                                                withBoolean:(jboolean)edge
                                                                                                                    withInt:(jint)vertexCount1
                                                                                                                    withInt:(jint)vertexCount2
                                                                                                            withDoubleArray:(IOSDoubleArray *)truncPercents;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, sides_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, dualPartner_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)

static jdouble OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_maxError_ = 0;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, maxError_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, maxError_, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, VERBOSE, jboolean)

static jdouble OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_COMMIT_EPSILON_ = 1e-5;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, COMMIT_EPSILON_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, COMMIT_EPSILON_, jdouble)

static jdouble OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_FIND_APPROX_POINT_EPSILON_ = 1e-2;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, FIND_APPROX_POINT_EPSILON_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder, FIND_APPROX_POINT_EPSILON_, jdouble)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withBoolean_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *truncSide, jint polyType, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sortedPolyTypes, jboolean platonic, jboolean corner, IOSDoubleArray *truncPercents);

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withInt_withInt_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *truncSide, jint polyType, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sortedPolyTypes, jboolean edge, jint vertexCount1, jint vertexCount2, IOSDoubleArray *truncPercents);

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *this$0_;
  IOSDoubleArray *val$truncPercents_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent;

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)outer$
                                                                                                   withDoubleArray:(IOSDoubleArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1, this$0_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1, val$truncPercents_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1 *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *outer$, IOSDoubleArray *capture$0);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *outer$, IOSDoubleArray *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator {
 @public
  IOSDoubleArray *val$truncPercents_;
  jint val$polyType_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent;

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0
                            withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2, val$truncPercents_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2_initWithDoubleArray_withInt_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2 *self, IOSDoubleArray *capture$0, jint capture$1);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2_initWithDoubleArray_withInt_(IOSDoubleArray *capture$0, jint capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *this$0_;
  IOSDoubleArray *val$truncPercents_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *val$sortedPolyTypes_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent;

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)outer$
                                                                                                   withDoubleArray:(IOSDoubleArray *)capture$0
                        withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3, this$0_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3, val$truncPercents_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3, val$sortedPolyTypes_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3 *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *outer$, IOSDoubleArray *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$1);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *outer$, IOSDoubleArray *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *real_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *notReal_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4, real_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4, notReal_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4 *self);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator {
 @public
  IOSDoubleArray *val$truncPercents_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *val$sortedPolyTypes_;
  jint val$vertexCount1_;
  jint val$vertexCount2_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent;

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0
withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)capture$1
                            withInt:(jint)capture$2
                            withInt:(jint)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5, val$truncPercents_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5, val$sortedPolyTypes_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_initWithDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withInt_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5 *self, IOSDoubleArray *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$1, jint capture$2, jint capture$3);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_initWithDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withInt_(IOSDoubleArray *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$1, jint capture$2, jint capture$3) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *real_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *notReal_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *val$sortedPolyTypes_;
  jint val$polyType_;
  IOSDoubleArray *val$truncPercents_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent;

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)capture$0
                                                                                                       withInt:(jint)capture$1
                                                                                               withDoubleArray:(IOSDoubleArray *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6, real_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6, notReal_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6, val$sortedPolyTypes_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6, val$truncPercents_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6 *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$0, jint capture$1, IOSDoubleArray *capture$2);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$0, jint capture$1, IOSDoubleArray *capture$2) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *state_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7, state_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7 *self);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator {
 @public
  IOSDoubleArray *val$truncPercents_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent;

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8, val$truncPercents_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8_initWithDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8 *self, IOSDoubleArray *capture$0);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8_initWithDoubleArray_(IOSDoubleArray *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9 *self);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator {
 @public
  IOSDoubleArray *val$truncPercents_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent;

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10, val$truncPercents_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10_initWithDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10 *self, IOSDoubleArray *capture$0);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10_initWithDoubleArray_(IOSDoubleArray *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11 *self);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator {
 @public
  IOSDoubleArray *val$truncPercents_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent;

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12, val$truncPercents_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12_initWithDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12 *self, IOSDoubleArray *capture$0);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12_initWithDoubleArray_(IOSDoubleArray *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12)

@interface OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13 : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13 *self);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder

- (jint)getType {
  return type_;
}

- (void)setTypeWithInt:(jint)type {
  self->type_ = type;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)createArchiCorner {
  return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)createArchiBuilder {
  return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_init() autorelease];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)looseArchiBuilderWithInt:(jint)numEdges {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *looseBuilder = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_init() autorelease];
  [looseBuilder setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(200) autorelease]];
  [looseBuilder setSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(1) autorelease]];
  [looseBuilder setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(1) autorelease]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_createPolyWithInt_withDouble_(numEdges, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH);
  jdouble r = [self getMaxRadius];
  IOSObjectArray *p = [IOSObjectArray arrayWithLength:((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_ type:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_class_()];
  for (jint i = 0; i < s->num_; ++i) {
    IOSObjectArray_Set(p, i, [s getWithInt:i]);
    ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, i)))->y_ = -JavaLangMath_sqrtWithDouble_(r * r - ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, i)))->x_ * ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, i)))->x_ - ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, i)))->z_ * ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(IOSObjectArray_Get(p, i)))->z_);
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *looseSide = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(IOSObjectArray_Get(p, 0), IOSObjectArray_Get(p, 1), IOSObjectArray_Get(p, 2), s, looseBuilder) autorelease];
  [looseSide setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:[looseBuilder getPoints]];
  [looseSide setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:[looseBuilder getVectors]];
  [looseSide setNormalWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([looseBuilder getVectors])) addReturnIndexWithId:[looseSide calcNormal]]];
  [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([looseBuilder getSides])) addWithId:looseSide];
  return looseBuilder;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)manualArchiBuilderWithIntArray:(IOSIntArray *)polyTypes
                                                                                                                       withInt:(jint)numPolys {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *starter = [self createArchiBuilder];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_maxError_ = 0;
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(starter))->type_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_getSolidTypeWithIntArray_withInt_(polyTypes, numPolys);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_points_(starter, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(10000));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_corners_(starter, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(10000));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_vectors_(starter, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(10000));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_sides_(starter, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(10000));
  @try {
    [starter createFirstSidesWithIntArray:polyTypes withInt:numPolys];
    [starter getAmbiguous];
    jdouble poleTheta = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_computePoleThetaWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_(starter->firstSides_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withBoolean_(starter->firstSides_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH, numPolys, poleTheta, starter, NO);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [starter getCornerWithInt:0];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *P1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getHubPoint])) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getSpokeWithInt:0]];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *n = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getHubPoint])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getSpokeWithInt:0]];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *perp = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(n)) arbitraryPerpendicular];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *P2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(P1)) plusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:perp];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *P3 = [P1 plusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(perp)) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:n]];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *L1 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 100, 0) autorelease];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *L2 = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_origin();
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *center = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_sectPlaneLineWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(P1, P2, P3, L1, L2);
    for (jint i = 0; i < starter->points_->num_; ++i) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p = [starter getPointWithInt:i];
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p)) minusEqualsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:center];
      if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(p->x_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->x_ = 0;
      if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(p->y_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->y_ = 0;
      if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(p->z_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->z_ = 0;
    }
  }
  @catch (JavaLangException *e) {
    [starter center];
    starter->type_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_UNDEFINED;
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
  }
  return starter;
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_init(self);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)polyTypes {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_(self, polyTypes);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)polyTypes
                         withInt:(jint)numPolys {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_(self, polyTypes, numPolys);
  return self;
}

- (void)identify {
}

- (instancetype)initWithIntArray:(IOSIntArray *)polyTypes
                         withInt:(jint)numPolys
                     withBoolean:(jboolean)untwist {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_withBoolean_(self, polyTypes, numPolys, untwist);
  return self;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *)createSurface {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points = [self getPoints];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *surface = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(points) autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *sides = [self getSides];
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet * __strong side in nil_chk(sides)) {
    IOSIntArray *pointIndices = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(side)) getVertexIndices]))->ints_;
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *normal = [side getNormal];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *facet = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface_(surface) autorelease];
    [facet init__WithIntArray:pointIndices withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:normal];
    [facet setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:[side getStateCalculator]];
    [facet setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:[side getShapeCalculator]];
    [surface addRootFacetWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet:facet];
  }
  return surface;
}

- (void)recurseWithInt:(jint)numSpokes
            withDouble:(jdouble)poleTheta {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s1 = nil, *s2 = nil;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *newHub = nil;
  jint hubIndex, s1index, s2index;
  for (jint c = 0; c < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_; ++c) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *curCorner = [corners_ getWithInt:c];
    for (jint s = 0; s < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(curCorner)) getSpokes]))->num_; ++s) {
      newHub = [curCorner getSpokeWithInt:s];
      hubIndex = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([curCorner getSpokes])) getWithInt:s];
      s1 = [curCorner wrapgetSideWithInt:s];
      s1index = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([curCorner getSides])) getWithInt:s];
      s2 = [curCorner wrapgetSideWithInt:s - 1];
      s2index = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([curCorner getSides])) wrapgetWithInt:s - 1];
      if ([self cornerIsBuiltWithInt:hubIndex withInt:s1index withInt:s2index] == -1) {
        s = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([curCorner getSpokes]))->num_;
        c = corners_->num_;
        break;
      }
    }
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_simpleCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(newHub, s1, s2, numSpokes, poleTheta, self);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState *state = [self getState];
  for (jint nextPosition = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getFirstSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:0 withInt:numSpokes]; ; nextPosition = [c getFirstSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:nextPosition withInt:numSpokes]) {
    @try {
      [c completeWithInt:numSpokes withDouble:poleTheta withInt:0];
      if ([self isComplete]) break;
      [self recurseWithInt:numSpokes withDouble:poleTheta];
      if ([self isComplete]) break;
    }
    @catch (JavaLangException *e) {
      [self setStateWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState:state];
      ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes]))->num_ = 3;
      ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides]))->num_ = 0;
      continue;
    }
  }
}

- (jboolean)isComplete {
  if (((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_ == ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_) return YES;
  if (untwist_ == YES) {
    IOSIntArray *sign = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk([self getCornerWithInt:0])) getSignature];
    IOSIntArray *bug = [IOSIntArray arrayWithInts:(jint[]){ 3, 4, 4, 4 } count:4];
    if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_arrayCompareWithIntArray_withIntArray_(sign, bug) != 0) return NO;
    jint numNeighbors = 0;
    jint numTriangles = 0;
    for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *si = [self getSideWithInt:i];
      if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(si)) getVertexCount] != 4) continue;
      numNeighbors = 0;
      numTriangles = 0;
      for (jint j = 0; j < sides_->num_; ++j) {
        if (j == i) continue;
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *sj = [self getSideWithInt:j];
        if ([si isAdjacentWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:sj]) {
          ++numNeighbors;
          if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(sj)) getVertexCount] == 3) numTriangles++;
        }
      }
      if (numNeighbors == 4 && numTriangles == 1) @throw [new_JavaLangException_initWithNSString_(@"3444 exception") autorelease];
    }
  }
  return NO;
}

- (void)getAmbiguous {
  ambiguous_ = NO;
  ambiguousPoly_ = 0;
  jint p1, p2, p3, curPoly;
  p1 = p2 = p3 = curPoly = 0;
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides_))->num_ + 2; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = [firstSides_ wrapgetWithInt:i];
    p3 = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_;
    if (p3 == p2 && p3 == p1) {
      ambiguousPoly_ = p3;
      ambiguous_ = YES;
      break;
    }
    else {
      p1 = p2;
      p2 = p3;
      curPoly = p1;
    }
  }
  if (ambiguous_) {
    for (jint i = 0; i < firstSides_->num_; ++i) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = [firstSides_ getWithInt:i];
      if (((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_ != ambiguousPoly_) {
        return;
      }
    }
    ambiguous_ = NO;
  }
}

- (void)createFirstSidesWithIntArray:(IOSIntArray *)polyTypes
                             withInt:(jint)numPolys {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_firstSides_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(numPolys));
  for (jint i = 0; i < numPolys; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_createPolyWithInt_withDouble_(IOSIntArray_Get(nil_chk(polyTypes), i), OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH);
    [firstSides_ addWithId:s];
  }
}

- (jint)registerPointExactMatchWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p {
  IOSClass *pClass = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p)) getClass];
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *curp = [self getPointWithInt:i];
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(curp)) getClass] == pClass && [p equalsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:curp]) return i;
  }
  return [points_ addReturnIndexWithId:p];
}

- (jint)registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p {
  if ([p isKindOfClass:[OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint class]]) {
    return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_)) addReturnIndexWithId:p];
  }
  if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p))->x_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->x_ = 0;
  if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(p->y_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->y_ = 0;
  if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(p->z_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->z_ = 0;
  IOSClass *pClass = [p getClass];
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *curp = [points_ getWithInt:i];
    if ([curp isKindOfClass:[OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint class]]) {
      continue;
    }
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(curp)) getClass] == pClass) {
      if ([p distanceSquaredWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:curp] < OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON) {
        jdouble error = [p distanceWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:curp];
        if (error > OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_maxError_) OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_maxError_ = error;
        return i;
      }
      if (ambiguous_ && [p distanceWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:curp] < OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH * 0.99) @throw [new_JavaLangException_initWithNSString_(@"EXCEPTION: overlapping sides.") autorelease];
    }
  }
  return [points_ addReturnIndexWithId:p];
}

+ (jint)findApproxPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p
                          withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)l {
  return OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(p, l);
}

- (jint)registerCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)c {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_)) addReturnIndexWithId:c];
}

- (jint)registerSideWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *n = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) calcNormal];
  [s setNormalWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(vectors_)) addReturnIndexWithId:n]];
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_)) addReturnIndexWithId:s];
}

- (jint)cornerIsBuiltWithInt:(jint)p
                     withInt:(jint)s1i
                     withInt:(jint)s2i {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s1 = [self getSideWithInt:s1i];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s2 = [self getSideWithInt:s2i];
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [corners_ getWithInt:i];
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getHub] == p) {
      for (jint j = 0; j < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides]))->num_; ++j) {
        if ([c getSideWithInt:j] == s1 && [c wrapgetSideWithInt:j + 1] == s2) return 1;
      }
    }
  }
  return -1;
}

- (jint)sideIsBuiltWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p1
                   withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p2
                   withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p3 {
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [sides_ getWithInt:i];
    jint index = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) findPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p1];
    if (index != -1 && [s wrapgetPointWithInt:index + 1] == p2 && [s wrapgetPointWithInt:index + 2] == p3) return i;
  }
  return -1;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)findCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)h {
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:i];
    if (h == [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getHubPoint]) return c;
  }
  return nil;
}

- (void)center {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_)) getWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getHubPoint];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p1)) plusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getPole]];
  c = [corners_ getWithInt:1];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p3 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getHubPoint];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p4 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p3)) plusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getPole]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *center = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_sectLinesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(p1, p2, p3, p4);
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p = [points_ getWithInt:i];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p)) minusEqualsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:center];
    if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(p->x_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->x_ = 0;
    if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(p->y_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->y_ = 0;
    if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(p->z_, 0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON)) p->z_ = 0;
  }
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)getSideWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_)) getWithInt:i];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)wrapgetSideWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_)) wrapgetWithInt:i];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)getCornerWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_)) getWithInt:i];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)wrapgetCornerWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_)) wrapgetWithInt:i];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getPointWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_)) getWithInt:i];
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)wrapgetPointWithInt:(jint)i {
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_)) wrapgetWithInt:i];
}

- (void)setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)points {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_points_(self, points);
}

- (void)setSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)sides {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_sides_(self, sides);
}

- (void)setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)vectors {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_vectors_(self, vectors);
}

- (void)clearPoints {
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_ = 0;
}

- (void)clearVectors {
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(vectors_))->num_ = 0;
}

- (void)clearSides {
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_ = 0;
}

- (void)print {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"points.num = ", (points_ == nil ? @"null" : NSString_valueOfInt_(points_->num_)))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"corners.num = ", (corners_ == nil ? @"null" : NSString_valueOfInt_(corners_->num_)))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"sides.num = ", (sides_ == nil ? @"null" : NSString_valueOfInt_(sides_->num_)))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"vectors.num = ", (vectors_ == nil ? @"null" : NSString_valueOfInt_(vectors_->num_)))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$D", @"edgeLength = ", OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH)];
  [JavaLangSystem_get_out_() println];
}

- (jdouble)truncStage1 {
  jdouble radius = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getPointWithInt:0])) length];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pole = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getPole];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [c getSideWithInt:0];
  jdouble l = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH;
  jdouble theta = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount]);
  jdouble x = l / (2 * JavaLangMath_sinWithDouble_(theta / 2) + 2);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getSpokeWithInt:0])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getHubPoint]])) unit])) timesWithDouble:x];
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(pole)) compWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v] / radius * 100;
}

- (jdouble)truncStage2 {
  jdouble radius = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getPointWithInt:0])) length];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pole = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getPole];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getSpokeWithInt:0])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getHubPoint]])) dividedByWithDouble:2];
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(pole)) compWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v] / radius * 100;
}

- (jdouble)truncStage3 {
  jdouble radius = [self getMinRadius];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *corner = [self getCornerWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pole = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(corner)) getPole];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s0 = [corner getSideWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s1 = [corner getSideWithInt:1];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *a, *b, *c, *d, *e, *f, *g, *x, *y, *z, *S, *T, *U;
  jdouble K, A, B, C;
  IOSDoubleArray *roots;
  a = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([corner getHubPoint])) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[corner getSpokeWithInt:0]];
  b = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([corner getHubPoint])) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[corner getSpokeWithInt:1]];
  c = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(s0);
  d = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(s1);
  x = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(c)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:a];
  y = [c minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:b];
  z = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(d)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:b];
  S = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(b)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:a];
  T = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(y)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:x];
  U = [y minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:z];
  A = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(T)) lengthSquared] - [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(U)) lengthSquared];
  B = 2 * [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(S)) dotWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:T];
  C = [S lengthSquared];
  @try {
    roots = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_solveQuadraticWithDouble_withDouble_withDouble_(A, B, C);
  }
  @catch (JavaLangException *exc) {
    return 0;
  }
  if (((IOSDoubleArray *) nil_chk(roots))->size_ == 1) K = IOSDoubleArray_Get(roots, 0);
  else if (roots->size_ == 3) K = IOSDoubleArray_Get(roots, 2);
  else if (IOSDoubleArray_Get(roots, 0) > 0 && IOSDoubleArray_Get(roots, 0) < 1) K = IOSDoubleArray_Get(roots, 0);
  else K = IOSDoubleArray_Get(roots, 1);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(a)) plusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(x)) timesWithDouble:K]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[corner getHubPoint]];
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(pole)) compWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v] / radius * 100;
}

- (jdouble)truncStage4 {
  jdouble radius = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getPointWithInt:0])) length];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pole = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getPole];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [c getSideWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *center = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(s);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(center)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getHubPoint]];
  return [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(pole)) compWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v] / radius * 100;
}

- (IOSDoubleArray *)calcStellateStages {
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 25, 50, 100 } count:4];
}

- (IOSDoubleArray *)calcEdgeTruncStages {
  IOSDoubleArray *ts = [IOSDoubleArray arrayWithLength:5];
  *IOSDoubleArray_GetRef(ts, 0) = 0;
  jint numStages = 1;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *truncVector;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *minSide = nil;
  jint lastMinPoints = 0;
  do {
    minSide = nil;
    for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSides]))->num_; ++i) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [c getSideWithInt:i];
      if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount] > lastMinPoints && (minSide == nil || [s getVertexCount] < [minSide getVertexCount])) {
        minSide = s;
      }
    }
    if (minSide == nil) break;
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1 = [minSide wrapgetPointWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(minSide)) findIndexWithInt:[c getHub]]];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2 = [minSide wrapgetPointWithInt:[minSide findIndexWithInt:[c getHub]] + 1];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *mid = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p1)) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p2];
    truncVector = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(mid)) negative];
    jdouble radius = [mid length];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *center = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(minSide);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(center)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:mid];
    *IOSDoubleArray_GetRef(ts, numStages) = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(truncVector)) compWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v] / radius * 100;
    ++numStages;
    lastMinPoints = [minSide getVertexCount];
  }
  while (minSide != nil);
  IOSDoubleArray *result = [IOSDoubleArray arrayWithLength:numStages];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ts, 0, result, 0, numStages);
  return result;
}

- (IOSDoubleArray *)calcArchiTruncStagesWithIntArray:(IOSIntArray *)polys
                                             withInt:(jint)numPolys {
  IOSDoubleArray *ts = [IOSDoubleArray arrayWithLength:5];
  *IOSDoubleArray_GetRef(ts, 0) = 0;
  *IOSDoubleArray_GetRef(ts, 1) = [self truncStage2];
  jint numStages = 2;
  jdouble radius = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getPointWithInt:0])) length];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pole = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getPole];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *minSide = nil;
  jint lastMinPoints = 0;
  do {
    minSide = nil;
    for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides]))->num_; ++i) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [c getSideWithInt:i];
      if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount] > lastMinPoints && (minSide == nil || [s getVertexCount] < [minSide getVertexCount])) {
        minSide = s;
      }
    }
    if (minSide == nil) break;
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *center = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(minSide);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(center)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getHubPoint]];
    *IOSDoubleArray_GetRef(ts, numStages) = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(pole)) compWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v] / radius * 100;
    ++numStages;
    lastMinPoints = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(minSide)) getVertexCount];
  }
  while (minSide != nil);
  IOSDoubleArray *result = [IOSDoubleArray arrayWithLength:numStages];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ts, 0, result, 0, numStages);
  return result;
}

- (IOSDoubleArray *)calcCornerTruncStages {
  IOSDoubleArray *result = nil;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:0];
  IOSIntArray *polys = [IOSIntArray arrayWithLength:((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSpokes]))->num_];
  for (jint i = 0; i < polys->size_; ++i) {
    *IOSIntArray_GetRef(polys, i) = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk([c getSideWithInt:i])) getVertexCount];
  }
  {
    IOSDoubleArray *temp1;
    switch (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_getSolidTypeWithIntArray_(polys)) {
      case OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_PLATONIC:
      temp1 = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, [self truncStage1], [self truncStage2], [self truncStage3], [self truncStage4] } count:5];
      result = temp1;
      break;
      case OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_ARCHIMEDEAN:
      result = [self calcArchiTruncStagesWithIntArray:polys withInt:polys->size_];
      break;
    }
  }
  return result;
}

- (jint)countCornersWithHubAndSpokeWithInt:(jint)hubIndex
                                   withInt:(jint)spokeIndex
withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)sideIndices {
  jint count = 0;
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:i];
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getHub] == hubIndex) {
      if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes])) findWithInt:spokeIndex] >= 0 && [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) intersectWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:sideIndices])) size] == 2) {
        count++;
      }
    }
  }
  return count;
}

- (jint)findCornerByHubAndSpokeAndSidesWithInt:(jint)hubIndex
                                       withInt:(jint)spokeIndex
withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)sideIndices {
  jint count = [self countCornersWithHubAndSpokeWithInt:hubIndex withInt:spokeIndex withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:sideIndices];
  if (count > 1) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithInt:count];
  }
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:i];
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getHub] == hubIndex) {
      if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes])) findWithInt:spokeIndex] >= 0 && [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) intersectWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:sideIndices])) size] == 2) {
        return i;
      }
    }
  }
  return -1;
}

- (void)setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)truncSide
                                                                                                                      withInt:(jint)polyType
                                   withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)sortedPolyTypes
                                                                                                                  withBoolean:(jboolean)platonic
                                                                                                                  withBoolean:(jboolean)corner
                                                                                                              withDoubleArray:(IOSDoubleArray *)truncPercents {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withBoolean_withDoubleArray_(self, truncSide, polyType, sortedPolyTypes, platonic, corner, truncPercents);
}

- (void)setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)truncSide
                                                                                                                    withInt:(jint)polyType
                                 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)sortedPolyTypes
                                                                                                                withBoolean:(jboolean)edge
                                                                                                                    withInt:(jint)vertexCount1
                                                                                                                    withInt:(jint)vertexCount2
                                                                                                            withDoubleArray:(IOSDoubleArray *)truncPercents {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withInt_withInt_withDoubleArray_(self, truncSide, polyType, sortedPolyTypes, edge, vertexCount1, vertexCount2, truncPercents);
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)prepareCornerTrunc {
  JavaUtilIdentityHashMap *handledSides = [new_JavaUtilIdentityHashMap_init() autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *trunc = [self createArchiBuilder];
  [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(trunc)) setSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([self getSideCount] + [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_)) size]) autorelease]];
  [trunc setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([self getSideCount] + [corners_ size]) autorelease]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_points_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(100, 100));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_nonUpdatingPoints_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(100, 100));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_signature_(trunc, signature_);
  trunc->type_ = type_;
  IOSIntArray *sortedSignature = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_cloneWithIntArray_(signature_);
  JavaUtilArrays_sortWithIntArray_(sortedSignature);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *temp = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithIntArray_(sortedSignature) autorelease];
  [temp orderedRemoveDuplicates];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sortedPolyTypes = temp;
  IOSDoubleArray *truncPercents = [self calcCornerTruncStages];
  jint originIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_origin()];
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner * __strong corner in corners_) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *cornerSide = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init() autorelease];
    jint cornerPolyType = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(corner)) getSpokes])) size];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withBoolean_withDoubleArray_(self, cornerSide, cornerPolyType, sortedPolyTypes, type_ == OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_PLATONIC, YES, truncPercents);
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(trunc->sides_)) addWithId:cornerSide];
    [cornerSide setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->points_];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *cornerSideIndices = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([corner getSpokes])) size] * 2) autorelease];
    [cornerSide setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:cornerSideIndices];
    [cornerSide setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->vectors_];
    jint cornerNormalIndex = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(trunc->vectors_)) addReturnIndexWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_([corner getHubPoint]) autorelease]];
    [cornerSide setNormalWithInt:cornerNormalIndex];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *hub = [corner getHubPoint];
    for (jint i = 0; i < [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([corner getSides])) size]; ++i) {
      jint sideIndex = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([corner getSides])) getWithInt:i];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *mid = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([corner getSpokeWithInt:i])) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub];
      jint midIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:mid];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *af = [corner getSideWithInt:i];
      jint flankPolyType = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(af)) getVertexCount];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *curCenter = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(af);
      jint curCenterIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:curCenter];
      jint curPolyType = [af getVertexCount];
      jint curRank = [sortedPolyTypes findWithInt:curPolyType];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *prevSide = [corner wrapgetSideWithInt:i - 1];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *prevCenter = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(prevSide);
      jint nextCenterIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:prevCenter];
      jint prevPolyType = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(prevSide)) getVertexCount];
      jint prevRank = [sortedPolyTypes findWithInt:prevPolyType];
      jdouble midTruncPercent = 0;
      jdouble centerTruncPercent = 0;
      jdouble prevCenterTruncPercent = 0;
      if ([self canCornerTruncWithInt:type_]) {
        if (type_ == OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_PLATONIC) {
          midTruncPercent = IOSDoubleArray_Get(nil_chk(truncPercents), 2);
          centerTruncPercent = IOSDoubleArray_Get(truncPercents, 4);
          prevCenterTruncPercent = IOSDoubleArray_Get(truncPercents, 4);
        }
        else {
          midTruncPercent = IOSDoubleArray_Get(nil_chk(truncPercents), 1);
          centerTruncPercent = IOSDoubleArray_Get(truncPercents, curRank + 2);
          prevCenterTruncPercent = IOSDoubleArray_Get(truncPercents, prevRank + 2);
        }
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Unhandled type"];
      }
      jint cornerStartIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(hub) autorelease]];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *cornerct2 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, cornerStartIndex) autorelease];
      jint cornerct2Index = [trunc->points_ addReturnIndexWithId:cornerct2];
      [cornerSideIndices addWithInt:cornerct2Index];
      [cornerct2 addStageWithInt:cornerStartIndex withDouble:IOSDoubleArray_Get(nil_chk(truncPercents), 0)];
      [cornerct2 addStageWithInt:midIndex withDouble:midTruncPercent];
      [cornerct2 addStageWithInt:nextCenterIndex withDouble:prevCenterTruncPercent];
      [cornerct2 addStageWithInt:originIndex withDouble:100];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *cornerct1 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, cornerStartIndex) autorelease];
      jint cornerct1Index = [trunc->points_ addReturnIndexWithId:cornerct1];
      [cornerSideIndices addWithInt:cornerct1Index];
      [cornerct1 addStageWithInt:cornerStartIndex withDouble:IOSDoubleArray_Get(truncPercents, 0)];
      [cornerct1 addStageWithInt:midIndex withDouble:midTruncPercent];
      [cornerct1 addStageWithInt:curCenterIndex withDouble:centerTruncPercent];
      [cornerct1 addStageWithInt:originIndex withDouble:100];
      if ([handledSides containsKeyWithId:af]) {
        continue;
      }
      [handledSides putWithId:af withId:nil];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *afCenter = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(af);
      jint centerIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(afCenter) autorelease]];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *flank = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init() autorelease];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withBoolean_withDoubleArray_(self, flank, flankPolyType, sortedPolyTypes, type_ == OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_PLATONIC, NO, truncPercents);
      [trunc->sides_ addWithId:flank];
      [flank setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->points_];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *flankIndices = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_([af getVertexCount] * 2) autorelease];
      [flank setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:flankIndices];
      [flank setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->vectors_];
      jint flankNormalIndex = [trunc->vectors_ addReturnIndexWithId:[af getNormal]];
      [flank setNormalWithInt:flankNormalIndex];
      for (jint vertexIndex = 0; vertexIndex < [af getVertexCount]; ++vertexIndex) {
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *curp = [af getPointWithInt:vertexIndex];
        jint flankStartIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(curp) autorelease]];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *prevp = [af wrapgetPointWithInt:vertexIndex - 1];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *nextp = [af wrapgetPointWithInt:vertexIndex + 1];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *ct1 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, flankStartIndex) autorelease];
        jint ct1Index = [trunc->points_ addReturnIndexWithId:ct1];
        [flankIndices addWithInt:ct1Index];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *mid1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(curp)) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:prevp];
        jint mid1Index = [trunc->nonUpdatingPoints_ addReturnIndexWithId:mid1];
        [ct1 addStageWithInt:flankStartIndex withDouble:IOSDoubleArray_Get(truncPercents, 0)];
        [ct1 addStageWithInt:mid1Index withDouble:midTruncPercent];
        [ct1 addStageWithInt:centerIndex withDouble:centerTruncPercent];
        [ct1 addStageWithInt:originIndex withDouble:100];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *ct2 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, flankStartIndex) autorelease];
        jint ct2Index = [trunc->points_ addReturnIndexWithId:ct2];
        [flankIndices addWithInt:ct2Index];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *mid2 = [curp midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:nextp];
        jint mid2Index = [trunc->nonUpdatingPoints_ addReturnIndexWithId:mid2];
        [ct2 addStageWithInt:flankStartIndex withDouble:IOSDoubleArray_Get(truncPercents, 0)];
        [ct2 addStageWithInt:mid2Index withDouble:midTruncPercent];
        [ct2 addStageWithInt:centerIndex withDouble:centerTruncPercent];
        [ct2 addStageWithInt:originIndex withDouble:100];
      }
    }
  }
  return trunc;
}

- (jboolean)canCornerTruncWithInt:(jint)type {
  return type == OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_PLATONIC || type == OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_ARCHIMEDEAN;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)dual {
  if (dualPartner_ != nil) {
    return dualPartner_;
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *dual = [self createArchiBuilder];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_sides_(nil_chk(dual), new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_points_(dual, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(sides_->num_));
  dual->points_->num_ = sides_->num_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_vectors_(dual, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(corners_->num_));
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner * __strong c in corners_) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pole = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getPole];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *h = [c getHubPoint];
    for (jint j = 0; j < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides]))->num_; ++j) {
      jint s = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) getWithInt:j];
      if ([dual getPointWithInt:s] != nil) continue;
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *spoke1 = [c getSpokeWithInt:j];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *spoke2 = [c wrapgetSpokeWithInt:j + 1];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *spokev1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(spoke1)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *spokev2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(spoke2)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(spokev1)) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:pole];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(spokev2)) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:pole];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *m1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(h)) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:spoke1];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *m2 = [h midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:spoke2];
      [dual->points_ setWithInt:s withId:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_sectLinesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(m1, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(m1)) plusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v1], m2, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(m2)) plusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v2])];
    }
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes]))->num_) autorelease];
    [s setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7_init() autorelease]];
    [s setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) copy__]];
    [s setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:dual->points_];
    [s setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:dual->vectors_];
    [s setNormalWithInt:[dual->vectors_ addReturnIndexWithId:[s calcNormal]]];
    [dual->sides_ addWithId:s];
  }
  if (type_ == OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_PLATONIC) dual->type_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_PLATONIC;
  else dual->type_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_DUAL;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_signature_(dual, signature_);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_dualPartner_(self, dual);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_dualPartner_(dual, self);
  return dual;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)antiDual {
  if (dualPartner_ != nil) {
    return dualPartner_;
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *antiDual = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_init() autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_sides_(antiDual, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_points_(antiDual, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(sides_->num_));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_vectors_(antiDual, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(corners_->num_));
  for (jint i = 0; i < sides_->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    [antiDual->points_ addWithId:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getIncenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getPointWithInt:0], [s getPointWithInt:1], [s getPointWithInt:2], [s wrapgetPointWithInt:3])];
  }
  for (jint i = 0; i < corners_->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:i];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSpokes]))->num_) autorelease];
    [s setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) copy__]];
    [s setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:antiDual->points_];
    [s setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:antiDual->vectors_];
    [s setNormalWithInt:[antiDual->vectors_ addReturnIndexWithId:[s calcNormal]]];
    [antiDual->sides_ addWithId:s];
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *spokes = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSpokes];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1 = [c getHubPoint];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2 = [c getSpokeWithInt:1];
  jint s1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) getWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p3 = [antiDual getPointWithInt:s1];
  jint s2 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) getWithInt:1];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p4 = [antiDual getPointWithInt:s2];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *origin = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, 0) autorelease];
  jdouble dist = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_sectPlaneLineWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(p3, p4, origin, p1, p2))) length];
  jdouble dualDist = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_sectPlaneLineWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(p1, p2, origin, p3, p4))) length];
  jdouble ratio = dist / dualDist;
  for (jint i = 0; i < antiDual->points_->num_; ++i) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([antiDual getPointWithInt:i])) timesEqualsWithDouble:ratio];
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_signature_(antiDual, signature_);
  antiDual->type_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_ARCHIMEDEAN;
  return antiDual;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)prepareEdgeTrunc {
  jint numSpokes = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk([self getCornerWithInt:0])) getSpokes]))->num_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *trunc = [self createArchiBuilder];
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(trunc))->type_ = type_;
  jint numPoints = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_;
  jint numSides = 0;
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    numPoints += [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount];
    numSides += [s getVertexCount];
  }
  numSides = numSides / 2 + sides_->num_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_points_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(numPoints));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_sides_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(numSides, 10));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_vectors_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(numSides, 10));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_nonUpdatingPoints_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(1 + sides_->num_ + points_->num_));
  for (jint i = 0; i < points_->num_; ++i) {
    [trunc->nonUpdatingPoints_ addWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_([self getPointWithInt:i]) autorelease]];
  }
  jint origin = [trunc->nonUpdatingPoints_ addReturnIndexWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, 0) autorelease]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *centers = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(sides_->num_) autorelease];
  for (jint i = 0; i < sides_->num_; ++i) {
    [centers addWithInt:[trunc->nonUpdatingPoints_ addReturnIndexWithId:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_([self getSideWithInt:i])]];
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *corner = [self getCornerWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *edgev = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(corner)) getHubPoint])) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[corner getSpokeWithInt:0]])) negative];
  jdouble totalDist = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(edgev)) length];
  for (jint i = 0; i < points_->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *tp = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, i) autorelease];
    [tp addStageWithInt:origin withDouble:100];
    [trunc->points_ addWithId:tp];
  }
  IOSIntArray *sortedSignature = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_cloneWithIntArray_(signature_);
  JavaUtilArrays_sortWithIntArray_(sortedSignature);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *temp = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithIntArray_(sortedSignature) autorelease];
  [temp orderedRemoveDuplicates];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sortedPolyTypes = temp;
  IOSDoubleArray *truncPercents = [self calcEdgeTruncStages];
  for (jint i = 0; i < sides_->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    jint vertexCount = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *truncSide = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_([s getVertexCount]) autorelease];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withInt_withInt_withDoubleArray_(self, truncSide, vertexCount, sortedPolyTypes, NO, -1, -1, truncPercents);
    [truncSide setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->vectors_];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *center = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_getCenterWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(s);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *sidev1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(center)) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[s getPointWithInt:0]];
    edgev = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([s getPointWithInt:0])) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[s getPointWithInt:1]])) negative];
    jdouble speed = 1 / [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(edgev)) cosWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:sidev1];
    for (jint j = 0; j < [s getVertexCount]; ++j) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *p = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, [s getIndexWithInt:j]) autorelease];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *goalPoint0 = [s getPointWithInt:j];
      jint sideCenter = [centers getWithInt:i];
      jdouble poleDistance = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(goalPoint0)) distanceWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[trunc->nonUpdatingPoints_ getWithInt:sideCenter]] / speed;
      jdouble truncPercent = poleDistance / totalDist * 100;
      [p addStageWithInt:sideCenter withDouble:truncPercent];
      poleDistance = [goalPoint0 distanceWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[trunc->nonUpdatingPoints_ getWithInt:origin]];
      [p addStageWithInt:origin withDouble:100];
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([truncSide getVertexIndices])) addWithInt:[trunc->points_ addReturnIndexWithId:p]];
    }
    [truncSide setNormalWithInt:[trunc->vectors_ addReturnIndexWithId:[s getNormal]]];
    [trunc->sides_ addWithId:truncSide];
  }
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:i];
    for (jint j = 0; j < numSpokes; ++j) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *spoke = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSpokeWithInt:j];
      if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getHubPoint])) sortOrderWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:spoke] == 1) {
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *truncSide = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithInt_(6) autorelease];
        [truncSide setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->points_];
        [truncSide setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->vectors_];
        jint hub = [c getHub];
        [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([truncSide getVertexIndices])) addWithInt:hub];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s1 = [c wrapgetSideWithInt:j - 1];
        jint sindex = [sides_ findWithId:s1];
        jint pindex = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) getVertexIndices])) findWithInt:hub];
        [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([truncSide getVertexIndices])) addWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk([trunc getSideWithInt:sindex])) getIndexWithInt:pindex]];
        [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([truncSide getVertexIndices])) addWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk([trunc getSideWithInt:sindex])) wrapgetIndexWithInt:pindex - 1]];
        pindex = [points_ findWithId:spoke];
        [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([truncSide getVertexIndices])) addWithInt:pindex];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s2 = [c wrapgetSideWithInt:j];
        sindex = [sides_ findWithId:s2];
        pindex = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) findPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:spoke];
        [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([truncSide getVertexIndices])) addWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk([trunc getSideWithInt:sindex])) getIndexWithInt:pindex]];
        [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([truncSide getVertexIndices])) addWithInt:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk([trunc getSideWithInt:sindex])) wrapgetIndexWithInt:pindex - 1]];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *normal = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([truncSide getPointWithInt:0])) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[truncSide getPointWithInt:3]];
        [truncSide setNormalWithInt:[trunc->vectors_ addReturnIndexWithId:normal]];
        [trunc->sides_ addWithId:truncSide];
        OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withInt_withInt_withDoubleArray_(self, truncSide, -1, sortedPolyTypes, YES, [s1 getVertexCount], [s2 getVertexCount], truncPercents);
      }
    }
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_signature_(trunc, signature_);
  return trunc;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)prepareStellate {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *trunc = [self createArchiBuilder];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_points_(nil_chk(trunc), new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(100, 100));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_vectors_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(100, 100));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_nonUpdatingPoints_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(100, 100));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_sides_(trunc, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(12 * 6, 12));
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple * __strong p in points_) {
    [trunc->points_ addWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(p) autorelease]];
  }
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple * __strong v in vectors_) {
    [trunc->vectors_ addWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(v) autorelease]];
  }
  IOSDoubleArray *truncPercents = [self calcStellateStages];
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet * __strong ss in sides_) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *goalsA = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(5) autorelease];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *goalIndicesA = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(5) autorelease];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *stellSidesB = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(5) autorelease];
    [trunc->sides_ addWithId:ss];
    for (jint i = 0; i < [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(ss)) getVertexIndices])) size]; ++i) {
      jint i0 = [ss wrapgetIndexWithInt:i - 1];
      jint i1 = [ss wrapgetIndexWithInt:i];
      jint i2 = [ss wrapgetIndexWithInt:i + 1];
      jint i3 = [ss wrapgetIndexWithInt:i + 2];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p0 = [trunc getPointWithInt:i0];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1 = [trunc getPointWithInt:i1];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2 = [trunc getPointWithInt:i2];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p3 = [trunc getPointWithInt:i3];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *start = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p1)) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p2];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *goal = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_sectLinesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(p0, p1, p2, p3);
      [goalsA addWithId:goal];
      jint startIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:start];
      jint goalIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:goal];
      [goalIndicesA addWithInt:goalIndex];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *sp = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, startIndex) autorelease];
      [sp addStageWithInt:goalIndex withDouble:25];
      [sp addStageWithInt:goalIndex withDouble:50];
      [sp addStageWithInt:goalIndex withDouble:100];
      jint spIndex = [trunc->points_ addReturnIndexWithId:sp];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *stellSideA = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init() autorelease];
      [stellSideA setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8_initWithDoubleArray_(truncPercents) autorelease]];
      [stellSideA setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9_init() autorelease]];
      [stellSideA setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithIntArray_([IOSIntArray arrayWithInts:(jint[]){ i1, spIndex, i2 } count:3]) autorelease]];
      [stellSideA setNormalWithInt:[ss getNormalIndex]];
      [stellSideA setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->points_];
      [stellSideA setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->vectors_];
      [trunc->sides_ addWithId:stellSideA];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *stellSideB = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init() autorelease];
      [stellSideB setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10_initWithDoubleArray_(truncPercents) autorelease]];
      [stellSideB setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11_init() autorelease]];
      jint startIndexB = [trunc->nonUpdatingPoints_ addReturnIndexWithId:p1];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *spb1 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, startIndexB) autorelease];
      jint spbIndex1 = [trunc->points_ addReturnIndexWithId:spb1];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *spb2 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, startIndexB) autorelease];
      jint spbIndex2 = [trunc->points_ addReturnIndexWithId:spb2];
      [stellSideB setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithIntArray_([IOSIntArray arrayWithInts:(jint[]){ i1, spbIndex1, spbIndex2 } count:3]) autorelease]];
      [stellSideB setNormalWithInt:[ss getNormalIndex]];
      [stellSideB setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->points_];
      [stellSideB setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->vectors_];
      [stellSidesB addWithId:stellSideB];
      [trunc->sides_ addWithId:stellSideB];
      [spb1 addStageWithInt:startIndexB withDouble:25];
      [spb2 addStageWithInt:startIndexB withDouble:25];
    }
    for (jint i = 0; i < [stellSidesB size]; ++i) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *stellSideB = [stellSidesB getWithInt:i];
      jint goalIndex0 = [goalIndicesA wrapgetWithInt:i - 2];
      jint goalIndex1 = [goalIndicesA wrapgetWithInt:i - 1];
      jint goalIndex2 = [goalIndicesA wrapgetWithInt:i];
      jint goalIndex3 = [goalIndicesA wrapgetWithInt:i + 1];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *goal0 = [trunc->nonUpdatingPoints_ getWithInt:goalIndex0];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *goal1 = [trunc->nonUpdatingPoints_ getWithInt:goalIndex1];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *goal2 = [trunc->nonUpdatingPoints_ getWithInt:goalIndex2];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *goal3 = [trunc->nonUpdatingPoints_ getWithInt:goalIndex3];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *spb1 = (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *) check_class_cast([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(stellSideB)) getPointWithInt:1], [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint class]);
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *) nil_chk(spb1)) addStageWithInt:goalIndex2 withDouble:50];
      [spb1 addStageWithInt:goalIndex2 withDouble:100];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *spb2 = (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *) check_class_cast([stellSideB getPointWithInt:2], [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint class]);
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *) nil_chk(spb2)) addStageWithInt:goalIndex1 withDouble:50];
      [spb2 addStageWithInt:goalIndex1 withDouble:100];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *stellSideC = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_init() autorelease];
      [stellSideC setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12_initWithDoubleArray_(truncPercents) autorelease]];
      [stellSideC setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13_init() autorelease]];
      jint i0 = [trunc->points_ addReturnIndexWithId:goal1];
      jint i1 = [trunc->points_ addReturnIndexWithId:goal2];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *mid = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(goal1)) midWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:goal2];
      jint startIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:mid];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *sp = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(trunc->nonUpdatingPoints_, startIndex) autorelease];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *finalGoal = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_sectLinesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(goal0, goal1, goal2, goal3);
      jint finalGoalIndex = [trunc->nonUpdatingPoints_ addReturnIndexWithId:finalGoal];
      [sp addStageWithInt:startIndex withDouble:25];
      [sp addStageWithInt:startIndex withDouble:50];
      [sp addStageWithInt:finalGoalIndex withDouble:100];
      jint i2 = [trunc->points_ addReturnIndexWithId:sp];
      [stellSideC setVertexIndicesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithIntArray_([IOSIntArray arrayWithInts:(jint[]){ i0, i1, i2 } count:3]) autorelease]];
      [stellSideC setNormalWithInt:[ss getNormalIndex]];
      [stellSideC setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->points_];
      [stellSideC setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:trunc->vectors_];
      [trunc->sides_ addWithId:stellSideC];
    }
  }
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_signature_(trunc, signature_);
  return trunc;
}

- (jdouble)getMinRadius {
  jdouble cur, min = JavaLangDouble_POSITIVE_INFINITY;
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_; ++i) {
    cur = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getPointWithInt:i])) length];
    if (cur < min) min = cur;
  }
  return min;
}

- (jdouble)getMaxRadius {
  jdouble cur, max = JavaLangDouble_NEGATIVE_INFINITY;
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_; ++i) {
    cur = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getPointWithInt:i])) length];
    if (cur > max) max = cur;
  }
  return max;
}

- (IOSIntArray *)getPointUsage {
  IOSIntArray *table = [IOSIntArray arrayWithLength:((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_];
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    for (jint j = 0; j < [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount]; ++j) {
      (*IOSIntArray_GetRef(table, [s getIndexWithInt:j]))++;
    }
  }
  return table;
}

- (void)completeCorners {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_corners_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_));
  IOSObjectArray *table = [IOSObjectArray arrayWithLength:points_->num_ type:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_class_()];
  for (jint i = 0; i < points_->num_; ++i) {
    IOSObjectArray_SetAndConsume(table, i, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_withInt_(10, 5));
  }
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    for (jint j = 0; j < [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount]; ++j) {
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, [s getIndexWithInt:j]))) addWithInt:i];
    }
  }
  for (jint i = 0; i < points_->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init() autorelease];
    [c setBossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:self];
    [c setHubWithInt:i];
    if (((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i)))->num_ == 0) {
      JavaLangException *e = [new_JavaLangException_init() autorelease];
      [e printStackTrace];
    }
    [c setSpokesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i)))->num_) autorelease]];
    [c setSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i)))->num_) autorelease]];
    jint sideIndex = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i))) getWithInt:0];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) addWithInt:sideIndex];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:sideIndex];
    jint find = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) findIndexWithInt:i];
    jint spoke = [s wrapgetIndexWithInt:find + 1];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes])) addWithInt:spoke];
    spoke = [s wrapgetIndexWithInt:find - 1];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i))) removeIndexWithInt:0];
    while (((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i)))->num_ > 0) {
      for (jint j = 0; j < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i)))->num_; ++j) {
        sideIndex = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i))) getWithInt:j];
        s = [self getSideWithInt:sideIndex];
        find = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) findIndexWithInt:spoke];
        if (find != -1) {
          [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) addWithInt:sideIndex];
          [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes])) addWithInt:spoke];
          spoke = [s wrapgetIndexWithInt:find - 2];
          [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(IOSObjectArray_Get(table, i))) removeIndexWithInt:j];
          --j;
          break;
        }
      }
    }
    [corners_ addWithId:c];
  }
  return;
}

- (void)reclaim {
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:points_];
    [s setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:vectors_];
  }
}

- (void)printType {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_typeToStringWithInt_(type_)];
}

- (jint)numEdges {
  jint numEdges = 0;
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    numEdges += [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount];
  }
  return numEdges / 2;
}

- (void)reflect {
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_; ++i) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getPointWithInt:i])) timesEqualsWithDouble:-1];
  }
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(vectors_))->num_; ++i) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(([vectors_ getWithInt:i]))) timesEqualsWithDouble:-1];
  }
  if (nonUpdatingPoints_ != nil) {
    for (jint i = 0; i < nonUpdatingPoints_->num_; ++i) {
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(([nonUpdatingPoints_ getWithInt:i]))) timesEqualsWithDouble:-1];
    }
  }
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexIndices])) reverse];
  }
  if (corners_ != nil) {
    for (jint i = 0; i < corners_->num_; ++i) {
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [self getCornerWithInt:i];
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSpokes])) reverse];
      [c setSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:[((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSides])) wrapCopyWithInt:-2 withInt:-1]];
      [c setPoleWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:nil];
    }
  }
}

- (jint)getCornerCount {
  return ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_;
}

- (jint)getPointCount {
  return ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_;
}

- (jint)getSideCount {
  return ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_;
}

- (void)sectLineWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)L1
                withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)L2
               withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacetArray:(IOSObjectArray *)sideArray
           withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTripleArray:(IOSObjectArray *)sects {
  jint n = 0;
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [self getSideWithInt:i];
    IOSObjectArray *p = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_threeDistinctPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(s);
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *sect = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_sectPlaneLineWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(IOSObjectArray_Get(nil_chk(p), 0), IOSObjectArray_Get(p, 1), IOSObjectArray_Get(p, 2), L1, L2);
    if (sect == nil) continue;
    if (n > 0 && [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(sect)) isApproxWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:IOSObjectArray_Get(nil_chk(sects), 0) withDouble:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_COMMIT_EPSILON_]) continue;
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) insideWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:sect]) {
      IOSObjectArray_Set(nil_chk(sects), n, sect);
      IOSObjectArray_Set(nil_chk(sideArray), n, s);
      n++;
      if (n == 2) break;
    }
  }
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState *)getState {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState *s = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState_init() autorelease];
  s->numCorners_ = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_;
  s->numVectors_ = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(vectors_))->num_;
  s->numPoints_ = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_;
  s->numSides_ = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_;
  return s;
}

- (void)setStateWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState *)s {
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners_))->num_ = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState *) nil_chk(s))->numCorners_;
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(vectors_))->num_ = s->numVectors_;
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_))->num_ = s->numPoints_;
  ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides_))->num_ = s->numSides_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)getCorners {
  return corners_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)getPoints {
  return points_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)getVectors {
  return vectors_;
}

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)getSides {
  return sides_;
}

- (IOSIntArray *)getSignature {
  return signature_;
}

- (void)square {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *ots = [self getPoints];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *firstSide = [self getSideWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *firstSideNormal = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(firstSide)) calcNormal])) unit];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *desiredFirstSideNormal = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, -1) autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *firstEdgeVector = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(ots)) getWithInt:1])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[ots getWithInt:0]])) unit];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *desiredFirstEdgeVector = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(1, 0, 0) autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix *m = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix_findRotationMatrixWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(firstSideNormal, desiredFirstSideNormal, firstEdgeVector, desiredFirstEdgeVector);
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple * __strong ot in ots) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(ot)) becomeWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_roundWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix *) nil_chk(m)) timesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:ot], 12)];
  }
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple * __strong v in nil_chk([self getVectors])) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(v)) becomeWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_roundWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix *) nil_chk(m)) timesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v], 12)];
  }
}

- (void)dealloc {
  RELEASE_(points_);
  RELEASE_(vectors_);
  RELEASE_(corners_);
  RELEASE_(nonUpdatingPoints_);
  RELEASE_(sides_);
  RELEASE_(firstSides_);
  RELEASE_(signature_);
  RELEASE_(dualPartner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getType", NULL, "I", 0x1, NULL, NULL },
    { "setTypeWithInt:", "setType", "V", 0x4, NULL, NULL },
    { "createArchiCorner", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x4, NULL, NULL },
    { "createArchiBuilder", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x4, NULL, NULL },
    { "looseArchiBuilderWithInt:", "looseArchiBuilder", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, "Ljava.lang.Exception;", NULL },
    { "manualArchiBuilderWithIntArray:withInt:", "manualArchiBuilder", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, NULL, NULL },
    { "init", "ArchiBuilder", NULL, 0x1, NULL, NULL },
    { "initWithIntArray:", "ArchiBuilder", NULL, 0x1, "Ljava.lang.Exception;", NULL },
    { "initWithIntArray:withInt:", "ArchiBuilder", NULL, 0x1, "Ljava.lang.Exception;", NULL },
    { "identify", NULL, "V", 0x4, NULL, NULL },
    { "initWithIntArray:withInt:withBoolean:", "ArchiBuilder", NULL, 0x1, "Ljava.lang.Exception;", NULL },
    { "createSurface", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.Surface;", 0x1, NULL, NULL },
    { "recurseWithInt:withDouble:", "recurse", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "isComplete", NULL, "Z", 0x1, "Ljava.lang.Exception;", NULL },
    { "getAmbiguous", NULL, "V", 0x0, NULL, NULL },
    { "createFirstSidesWithIntArray:withInt:", "createFirstSides", "V", 0x0, "Ljava.lang.Exception;", NULL },
    { "registerPointExactMatchWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "registerPointExactMatch", "I", 0x0, NULL, NULL },
    { "registerPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "registerPoint", "I", 0x1, "Ljava.lang.Exception;", NULL },
    { "findApproxPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "findApproxPoint", "I", 0x9, NULL, NULL },
    { "registerCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner:", "registerCorner", "I", 0x0, NULL, NULL },
    { "registerSideWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:", "registerSide", "I", 0x1, NULL, NULL },
    { "cornerIsBuiltWithInt:withInt:withInt:", "cornerIsBuilt", "I", 0x0, NULL, NULL },
    { "sideIsBuiltWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "sideIsBuilt", "I", 0x0, NULL, NULL },
    { "findCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "findCorner", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x2, NULL, NULL },
    { "center", NULL, "V", 0x0, NULL, NULL },
    { "getSideWithInt:", "getSide", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiFacet;", 0x1, NULL, NULL },
    { "wrapgetSideWithInt:", "wrapgetSide", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiFacet;", 0x0, NULL, NULL },
    { "getCornerWithInt:", "getCorner", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x1, NULL, NULL },
    { "wrapgetCornerWithInt:", "wrapgetCorner", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x0, NULL, NULL },
    { "getPointWithInt:", "getPoint", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "wrapgetPointWithInt:", "wrapgetPoint", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x0, NULL, NULL },
    { "setPointsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "setPoints", "V", 0x1, NULL, NULL },
    { "setSidesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "setSides", "V", 0x1, NULL, NULL },
    { "setVectorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "setVectors", "V", 0x1, NULL, NULL },
    { "clearPoints", NULL, "V", 0x1, NULL, NULL },
    { "clearVectors", NULL, "V", 0x1, NULL, NULL },
    { "clearSides", NULL, "V", 0x1, NULL, NULL },
    { "print", NULL, "V", 0x0, NULL, NULL },
    { "truncStage1", NULL, "D", 0x0, NULL, NULL },
    { "truncStage2", NULL, "D", 0x0, NULL, NULL },
    { "truncStage3", NULL, "D", 0x0, NULL, NULL },
    { "truncStage4", NULL, "D", 0x0, NULL, NULL },
    { "calcStellateStages", NULL, "[D", 0x1, NULL, NULL },
    { "calcEdgeTruncStages", NULL, "[D", 0x1, NULL, NULL },
    { "calcArchiTruncStagesWithIntArray:withInt:", "calcArchiTruncStages", "[D", 0x0, NULL, NULL },
    { "calcCornerTruncStages", NULL, "[D", 0x1, NULL, NULL },
    { "countCornersWithHubAndSpokeWithInt:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:", "countCornersWithHubAndSpoke", "I", 0x0, NULL, NULL },
    { "findCornerByHubAndSpokeAndSidesWithInt:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:", "findCornerByHubAndSpokeAndSides", "I", 0x0, NULL, NULL },
    { "setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withBoolean:withBoolean:withDoubleArray:", "setCornerTruncCalculators", "V", 0x2, NULL, NULL },
    { "setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withBoolean:withInt:withInt:withDoubleArray:", "setEdgeTruncCalculators", "V", 0x2, NULL, NULL },
    { "prepareCornerTrunc", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, NULL, NULL },
    { "canCornerTruncWithInt:", "canCornerTrunc", "Z", 0x4, NULL, NULL },
    { "dual", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, NULL, NULL },
    { "antiDual", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, NULL, NULL },
    { "prepareEdgeTrunc", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, NULL, NULL },
    { "prepareStellate", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, NULL, NULL },
    { "getMinRadius", NULL, "D", 0x0, NULL, NULL },
    { "getMaxRadius", NULL, "D", 0x1, NULL, NULL },
    { "getPointUsage", NULL, "[I", 0x0, NULL, NULL },
    { "completeCorners", NULL, "V", 0x1, NULL, NULL },
    { "reclaim", NULL, "V", 0x1, NULL, NULL },
    { "printType", NULL, "V", 0x0, NULL, NULL },
    { "numEdges", NULL, "I", 0x1, NULL, NULL },
    { "reflect", NULL, "V", 0x1, NULL, NULL },
    { "getCornerCount", NULL, "I", 0x1, NULL, NULL },
    { "getPointCount", NULL, "I", 0x1, NULL, NULL },
    { "getSideCount", NULL, "I", 0x1, NULL, NULL },
    { "sectLineWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacetArray:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTripleArray:", "sectLine", "V", 0x0, NULL, NULL },
    { "getState", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.State;", 0x1, NULL, NULL },
    { "setStateWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState:", "setState", "V", 0x1, NULL, NULL },
    { "getCorners", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x1, NULL, NULL },
    { "getPoints", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x1, NULL, NULL },
    { "getVectors", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x1, NULL, NULL },
    { "getSides", NULL, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x1, NULL, NULL },
    { "getSignature", NULL, "[I", 0x1, NULL, NULL },
    { "square", NULL, "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "points_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;",  },
    { "vectors_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;",  },
    { "corners_", NULL, 0x4, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiCorner;>;",  },
    { "nonUpdatingPoints_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;",  },
    { "sides_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiFacet;>;",  },
    { "firstSides_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;>;",  },
    { "ambiguous_", NULL, 0x0, "Z", NULL, NULL,  },
    { "ambiguousPoly_", NULL, 0x0, "I", NULL, NULL,  },
    { "EDGE_LENGTH_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "signature_", NULL, 0x0, "[I", NULL, NULL,  },
    { "maxError_", NULL, 0xa, "D", &OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_maxError_, NULL,  },
    { "untwist_", NULL, 0x2, "Z", NULL, NULL,  },
    { "VERBOSE_", NULL, 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_VERBOSE },
    { "dualPartner_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", NULL, NULL,  },
    { "REGISTER_POINT_EPSILON_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_REGISTER_POINT_EPSILON },
    { "COMMIT_EPSILON_", NULL, 0xa, "D", &OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_COMMIT_EPSILON_, NULL,  },
    { "FIND_APPROX_POINT_EPSILON_", NULL, 0xa, "D", &OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_FIND_APPROX_POINT_EPSILON_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder = { 2, "ArchiBuilder", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x1, 76, methods, 18, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self) {
  NSObject_init(self);
  self->ambiguous_ = NO;
  self->ambiguousPoly_ = 0;
  self->untwist_ = YES;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_dualPartner_(self, nil);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_init(self);
  return self;
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self, IOSIntArray *polyTypes) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_(self, polyTypes, ((IOSIntArray *) nil_chk(polyTypes))->size_);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_(IOSIntArray *polyTypes) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_(self, polyTypes);
  return self;
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self, IOSIntArray *polyTypes, jint numPolys) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_withBoolean_(self, polyTypes, numPolys, YES);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_(IOSIntArray *polyTypes, jint numPolys) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_(self, polyTypes, numPolys);
  return self;
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self, IOSIntArray *polyTypes, jint numPolys, jboolean untwist) {
  NSObject_init(self);
  self->ambiguous_ = NO;
  self->ambiguousPoly_ = 0;
  self->untwist_ = YES;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_dualPartner_(self, nil);
  self->untwist_ = untwist;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_maxError_ = 0;
  self->type_ = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanCommonSolidDefinition_getSolidTypeWithIntArray_withInt_(polyTypes, numPolys);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_points_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(10000));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_corners_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(10000));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_vectors_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(10000));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setAndConsume_sides_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(10000));
  [self createFirstSidesWithIntArray:polyTypes withInt:numPolys];
  [self getAmbiguous];
  jdouble poleTheta = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_computePoleThetaWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_(self->firstSides_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(self->firstSides_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_EDGE_LENGTH, numPolys, poleTheta, self);
  if (self->ambiguous_ && ![self isComplete]) {
    [self recurseWithInt:numPolys withDouble:poleTheta];
  }
  [self identify];
  [self center];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_set_signature_(self, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk([self getCornerWithInt:0])) getSignature]);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_withBoolean_(IOSIntArray *polyTypes, jint numPolys, jboolean untwist) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_withBoolean_(self, polyTypes, numPolys, untwist);
  return self;
}

jint OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *l) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initialize();
  for (jint i = 0; i < ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(l))->num_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *curp = [l getWithInt:i];
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(curp)) isApproxWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p withDouble:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_FIND_APPROX_POINT_EPSILON_]) return i;
  }
  return -1;
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withBoolean_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *truncSide, jint polyType, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sortedPolyTypes, jboolean platonic, jboolean corner, IOSDoubleArray *truncPercents) {
  jint rank = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sortedPolyTypes)) findWithInt:polyType];
  if (platonic) {
    if (corner) {
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(truncSide)) setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_greaterThanWithDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_(0, [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(YES, NO) autorelease], [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(NO, NO) autorelease])];
      [truncSide setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_(self, truncPercents) autorelease]];
    }
    else {
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(truncSide)) setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_lessThanWithDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_(IOSDoubleArray_Get(nil_chk(truncPercents), rank + 4), [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(YES, YES) autorelease], [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(NO, YES) autorelease])];
      [truncSide setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2_initWithDoubleArray_withInt_(truncPercents, polyType) autorelease]];
    }
  }
  else {
    if (corner) {
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(truncSide)) setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_greaterThanWithDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_(0, [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(YES, NO) autorelease], [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(NO, NO) autorelease])];
      [truncSide setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_(self, truncPercents, sortedPolyTypes) autorelease]];
    }
    else {
      [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(truncSide)) setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_lessThanWithDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_(IOSDoubleArray_Get(nil_chk(truncPercents), rank + 2), [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(YES, YES) autorelease], [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(NO, YES) autorelease])];
      [truncSide setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator_betweenWithDouble_withDouble_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_(IOSDoubleArray_Get(truncPercents, 0), IOSDoubleArray_Get(truncPercents, 1), [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(polyType * 2, NO) autorelease], [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(polyType, YES) autorelease])];
    }
  }
}

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withBoolean_withInt_withInt_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *truncSide, jint polyType, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sortedPolyTypes, jboolean edge, jint vertexCount1, jint vertexCount2, IOSDoubleArray *truncPercents) {
  jint rank = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sortedPolyTypes)) findWithInt:polyType];
  if (edge) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(truncSide)) setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_init() autorelease]];
    [truncSide setShapeCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_initWithDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withInt_(truncPercents, sortedPolyTypes, vertexCount1, vertexCount2) autorelease]];
  }
  else {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(truncSide)) setStateCalculatorWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator:[new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withDoubleArray_(sortedPolyTypes, polyType, truncPercents) autorelease]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState

- (void)print {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$I", @"numCorners = ", numCorners_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"numPoints = ", numPoints_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"numSides = ", numSides_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"numVectors = ", numSides_)];
  [JavaLangSystem_get_out_() println];
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "print", NULL, "V", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "numCorners_", NULL, 0x0, "I", NULL, NULL,  },
    { "numPoints_", NULL, 0x0, "I", NULL, NULL,  },
    { "numSides_", NULL, 0x0, "I", NULL, NULL,  },
    { "numVectors_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState = { 2, "State", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x0, 2, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState *self) {
  NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomState)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent {
  if (truncPercent <= IOSDoubleArray_Get(nil_chk(val$truncPercents_), 2)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(((IOSIntArray *) nil_chk(this$0_->signature_))->size_, YES) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 3)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(((IOSIntArray *) nil_chk(this$0_->signature_))->size_ * 2, NO) autorelease];
  }
  else if (truncPercent == IOSDoubleArray_Get(val$truncPercents_, 3)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(((IOSIntArray *) nil_chk(this$0_->signature_))->size_ * 2, YES) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 4)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(((IOSIntArray *) nil_chk(this$0_->signature_))->size_ * 2, NO) autorelease];
  }
  else if (truncPercent == IOSDoubleArray_Get(val$truncPercents_, 4)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(((IOSIntArray *) nil_chk(this$0_->signature_))->size_, YES) autorelease];
  }
  return nil;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)outer$
                                                                                                   withDoubleArray:(IOSDoubleArray *)capture$0 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$truncPercents_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcShapeWithDouble:", "calcShape", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShape;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withDoubleArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", NULL, NULL,  },
    { "val$truncPercents_", NULL, 0x1012, "[D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withBoolean:withBoolean:withDoubleArray:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1 *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *outer$, IOSDoubleArray *capture$0) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_set_this$0_(self, outer$);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_set_val$truncPercents_(self, capture$0);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *outer$, IOSDoubleArray *capture$0) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$1)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent {
  if (truncPercent <= IOSDoubleArray_Get(nil_chk(val$truncPercents_), 0)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(val$polyType_, YES) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 1)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(val$polyType_ * 2, NO) autorelease];
  }
  else if (truncPercent == IOSDoubleArray_Get(val$truncPercents_, 1)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(val$polyType_ * 2, YES) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 2)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(val$polyType_ * 2, NO) autorelease];
  }
  else {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(val$polyType_, YES) autorelease];
  }
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0
                            withInt:(jint)capture$1 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2_initWithDoubleArray_withInt_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$truncPercents_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcShapeWithDouble:", "calcShape", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShape;", 0x1, NULL, NULL },
    { "initWithDoubleArray:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$truncPercents_", NULL, 0x1012, "[D", NULL, NULL,  },
    { "val$polyType_", NULL, 0x1012, "I", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withBoolean:withBoolean:withDoubleArray:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2_initWithDoubleArray_withInt_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2 *self, IOSDoubleArray *capture$0, jint capture$1) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2_set_val$truncPercents_(self, capture$0);
  self->val$polyType_ = capture$1;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2_initWithDoubleArray_withInt_(IOSDoubleArray *capture$0, jint capture$1) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2_initWithDoubleArray_withInt_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$2)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent {
  if (truncPercent <= IOSDoubleArray_Get(nil_chk(val$truncPercents_), 1)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(((IOSIntArray *) nil_chk(this$0_->signature_))->size_, NO) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 2)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(((IOSIntArray *) nil_chk(this$0_->signature_))->size_ * 2, NO) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 3)) {
    jint numVertices = ((IOSIntArray *) nil_chk(this$0_->signature_))->size_ * 2 - OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_countOccurencesWithIntArray_withInt_(this$0_->signature_, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(val$sortedPolyTypes_)) getWithInt:0]);
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(numVertices, NO) autorelease];
  }
  else if (truncPercent == IOSDoubleArray_Get(val$truncPercents_, 3) && val$truncPercents_->size_ == 4) {
    jint numVertices = ((IOSIntArray *) nil_chk(this$0_->signature_))->size_ * 2 - OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_countOccurencesWithIntArray_withInt_(this$0_->signature_, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(val$sortedPolyTypes_)) getWithInt:0]) - OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_countOccurencesWithIntArray_withInt_(this$0_->signature_, [val$sortedPolyTypes_ getWithInt:1]);
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(numVertices, NO) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 4)) {
    jint numVertices = ((IOSIntArray *) nil_chk(this$0_->signature_))->size_ * 2 - OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_countOccurencesWithIntArray_withInt_(this$0_->signature_, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(val$sortedPolyTypes_)) getWithInt:1]) - OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_countOccurencesWithIntArray_withInt_(this$0_->signature_, [val$sortedPolyTypes_ getWithInt:0]);
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(numVertices, NO) autorelease];
  }
  else if (truncPercent == IOSDoubleArray_Get(val$truncPercents_, 4) && val$truncPercents_->size_ == 5) {
    jint numVertices = ((IOSIntArray *) nil_chk(this$0_->signature_))->size_ * 2 - OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_countOccurencesWithIntArray_withInt_(this$0_->signature_, [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(val$sortedPolyTypes_)) getWithInt:0]) - OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_countOccurencesWithIntArray_withInt_(this$0_->signature_, [val$sortedPolyTypes_ getWithInt:1]) - OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_countOccurencesWithIntArray_withInt_(this$0_->signature_, [val$sortedPolyTypes_ getWithInt:2]);
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(numVertices, NO) autorelease];
  }
  return nil;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)outer$
                                                                                                   withDoubleArray:(IOSDoubleArray *)capture$0
                        withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)capture$1 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$truncPercents_);
  RELEASE_(val$sortedPolyTypes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcShapeWithDouble:", "calcShape", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShape;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withDoubleArray:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", NULL, NULL,  },
    { "val$truncPercents_", NULL, 0x1012, "[D", NULL, NULL,  },
    { "val$sortedPolyTypes_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "setCornerTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withBoolean:withBoolean:withDoubleArray:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3 *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *outer$, IOSDoubleArray *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$1) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_set_this$0_(self, outer$);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_set_val$truncPercents_(self, capture$0);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_set_val$sortedPolyTypes_(self, capture$1);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *outer$, IOSDoubleArray *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$1) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$3)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent {
  return truncPercent <= 0 ? notReal_ : real_;
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(real_);
  RELEASE_(notReal_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcStateWithDouble:", "calcState", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "real_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", NULL, NULL,  },
    { "notReal_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withBoolean:withInt:withInt:withDoubleArray:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4 *self) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_init(self);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_setAndConsume_real_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(YES, NO));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_setAndConsume_notReal_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(NO, NO));
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$4)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent {
  if (truncPercent < IOSDoubleArray_Get(nil_chk(val$truncPercents_), 1)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(6, NO) autorelease];
  }
  else if (truncPercent >= IOSDoubleArray_Get(val$truncPercents_, val$truncPercents_->size_ - 1)) {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(4, NO) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 2)) {
    jint vertexCount = 6;
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(val$sortedPolyTypes_)) getWithInt:0] == val$vertexCount1_) {
      vertexCount--;
    }
    if ([val$sortedPolyTypes_ getWithInt:0] == val$vertexCount2_) {
      vertexCount--;
    }
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(vertexCount, NO) autorelease];
  }
  else if (truncPercent < IOSDoubleArray_Get(val$truncPercents_, 3)) {
    jint vertexCount = 6;
    if ([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(val$sortedPolyTypes_)) getWithInt:0] == val$vertexCount1_) {
      vertexCount--;
    }
    if ([val$sortedPolyTypes_ getWithInt:0] == val$vertexCount2_) {
      vertexCount--;
    }
    if ([val$sortedPolyTypes_ getWithInt:1] == val$vertexCount1_) {
      vertexCount--;
    }
    if ([val$sortedPolyTypes_ getWithInt:1] == val$vertexCount2_) {
      vertexCount--;
    }
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(vertexCount, NO) autorelease];
  }
  else {
    return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(4, NO) autorelease];
  }
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0
withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)capture$1
                            withInt:(jint)capture$2
                            withInt:(jint)capture$3 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_initWithDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withInt_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$truncPercents_);
  RELEASE_(val$sortedPolyTypes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcShapeWithDouble:", "calcShape", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShape;", 0x1, NULL, NULL },
    { "initWithDoubleArray:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withInt:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$truncPercents_", NULL, 0x1012, "[D", NULL, NULL,  },
    { "val$sortedPolyTypes_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
    { "val$vertexCount1_", NULL, 0x1012, "I", NULL, NULL,  },
    { "val$vertexCount2_", NULL, 0x1012, "I", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withBoolean:withInt:withInt:withDoubleArray:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 4, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_initWithDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withInt_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5 *self, IOSDoubleArray *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$1, jint capture$2, jint capture$3) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_set_val$truncPercents_(self, capture$0);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_set_val$sortedPolyTypes_(self, capture$1);
  self->val$vertexCount1_ = capture$2;
  self->val$vertexCount2_ = capture$3;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_initWithDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withInt_(IOSDoubleArray *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$1, jint capture$2, jint capture$3) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5_initWithDoubleArray_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withInt_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$5)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent {
  jint triggerTrunc = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(val$sortedPolyTypes_)) findWithInt:val$polyType_] + 1;
  return truncPercent < IOSDoubleArray_Get(nil_chk(val$truncPercents_), triggerTrunc) ? real_ : notReal_;
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)capture$0
                                                                                                       withInt:(jint)capture$1
                                                                                               withDoubleArray:(IOSDoubleArray *)capture$2 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withDoubleArray_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(real_);
  RELEASE_(notReal_);
  RELEASE_(val$sortedPolyTypes_);
  RELEASE_(val$truncPercents_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcStateWithDouble:", "calcState", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withInt:withDoubleArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "real_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", NULL, NULL,  },
    { "notReal_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", NULL, NULL,  },
    { "val$sortedPolyTypes_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
    { "val$polyType_", NULL, 0x1012, "I", NULL, NULL,  },
    { "val$truncPercents_", NULL, 0x1012, "[D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "setEdgeTruncCalculatorsWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:withBoolean:withInt:withInt:withDoubleArray:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 5, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6 *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$0, jint capture$1, IOSDoubleArray *capture$2) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_set_val$sortedPolyTypes_(self, capture$0);
  self->val$polyType_ = capture$1;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_set_val$truncPercents_(self, capture$2);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_init(self);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_setAndConsume_real_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(YES, YES));
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_setAndConsume_notReal_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(NO, YES));
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *capture$0, jint capture$1, IOSDoubleArray *capture$2) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_withInt_withDoubleArray_(self, capture$0, capture$1, capture$2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$6)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent {
  return state_;
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcStateWithDouble:", "calcState", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "state_", NULL, 0x0, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "dual" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7 *self) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_init(self);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7_setAndConsume_state_(self, new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_initWithBoolean_withBoolean_(YES, NO));
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$7)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent {
  return truncPercent <= IOSDoubleArray_Get(nil_chk(val$truncPercents_), 0) ? OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_get_NOT_REAL_() : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_get_REAL_();
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8_initWithDoubleArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$truncPercents_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcStateWithDouble:", "calcState", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", 0x1, NULL, NULL },
    { "initWithDoubleArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$truncPercents_", NULL, 0x1012, "[D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "prepareStellate" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8_initWithDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8 *self, IOSDoubleArray *capture$0) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8_set_val$truncPercents_(self, capture$0);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8_initWithDoubleArray_(IOSDoubleArray *capture$0) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8_initWithDoubleArray_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$8)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent {
  return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(5, YES) autorelease];
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcShapeWithDouble:", "calcShape", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShape;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "prepareStellate" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9 *self) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$9)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent {
  return truncPercent <= IOSDoubleArray_Get(nil_chk(val$truncPercents_), 1) ? OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_get_NOT_REAL_() : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_get_REAL_();
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10_initWithDoubleArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$truncPercents_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcStateWithDouble:", "calcState", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", 0x1, NULL, NULL },
    { "initWithDoubleArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$truncPercents_", NULL, 0x1012, "[D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "prepareStellate" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10_initWithDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10 *self, IOSDoubleArray *capture$0) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10_set_val$truncPercents_(self, capture$0);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10_initWithDoubleArray_(IOSDoubleArray *capture$0) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10_initWithDoubleArray_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$10)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent {
  return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(5, YES) autorelease];
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcShapeWithDouble:", "calcShape", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShape;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "prepareStellate" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11 *self) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$11)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState *)calcStateWithDouble:(jdouble)truncPercent {
  return truncPercent <= IOSDoubleArray_Get(nil_chk(val$truncPercents_), 2) ? OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_get_NOT_REAL_() : OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetState_get_REAL_();
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)capture$0 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12_initWithDoubleArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$truncPercents_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcStateWithDouble:", "calcState", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetState;", 0x1, NULL, NULL },
    { "initWithDoubleArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$truncPercents_", NULL, 0x1012, "[D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "prepareStellate" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12_initWithDoubleArray_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12 *self, IOSDoubleArray *capture$0) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12_set_val$truncPercents_(self, capture$0);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetStateCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12_initWithDoubleArray_(IOSDoubleArray *capture$0) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12_initWithDoubleArray_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$12)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13

- (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape *)calcShapeWithDouble:(jdouble)truncPercent {
  return [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShape_initWithInt_withBoolean_(5, YES) autorelease];
}

- (instancetype)init {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcShapeWithDouble:", "calcShape", "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.FacetShape;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder", "prepareStellate" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "ArchiBuilder", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13_init(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13 *self) {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacetShapeCalculator_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13 *new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13_init() {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13 *self = [OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_$13)
