//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/geogebra3D/archimedean/support/AbstractArchimedeanSolid.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiBuilder.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Facet.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Surface.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/IntList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple.h"
#include "org/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Quick3X3Matrix.h"
#include "org/geogebra/common/geogebra3D/archimedean/support/AbstractArchimedeanSolid.h"
#include "org/geogebra/common/geogebra3D/archimedean/support/Point.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid () {
 @public
  IOSObjectArray *vertices_;
  IOSObjectArray *faces_;
  IOSObjectArray *verticesInABv_;
}

+ (IOSObjectArray *)sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)vertices;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid, vertices_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid, faces_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid, verticesInABv_, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *vertices);

@interface OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face () {
 @public
  IOSIntArray *vertexIndices_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face, vertexIndices_, IOSIntArray *)

@interface OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1 : NSObject < JavaUtilComparator > {
 @public
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *val$vertices_;
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *val$zeroAngleVector_;
}

- (jint)compareWithId:(JavaLangInteger *)o1
               withId:(JavaLangInteger *)o2;

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)capture$0
                 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1, val$vertices_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1, val$zeroAngleVector_, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)

__attribute__((unused)) static void OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1 *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *capture$1);

__attribute__((unused)) static OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1 *new_OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid

- (jint)getVertexCount {
  return ((IOSObjectArray *) nil_chk(vertices_))->size_;
}

- (IOSObjectArray *)getVertices {
  return vertices_;
}

- (IOSObjectArray *)getVerticesInABv {
  return verticesInABv_;
}

- (void)calcVerticesInABv {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportPoint *A = IOSObjectArray_Get(nil_chk(vertices_), 0);
  OrgGeogebraCommonGeogebra3DArchimedeanSupportPoint *B = IOSObjectArray_Get(vertices_, 1);
  OrgGeogebraCommonGeogebra3DArchimedeanSupportPoint *C = IOSObjectArray_Get(vertices_, 2);
  OrgGeogebraCommonKernelMatrixCoords *v1l = [((OrgGeogebraCommonGeogebra3DArchimedeanSupportPoint *) nil_chk(B)) subWithOrgGeogebraCommonKernelMatrixCoords:A];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v1l)) calcNorm];
  jdouble l = [v1l getNorm];
  OrgGeogebraCommonKernelMatrixCoords *v1 = [v1l mulWithDouble:1 / l];
  OrgGeogebraCommonKernelMatrixCoords *v3 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v1)) crossProductWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonGeogebra3DArchimedeanSupportPoint *) nil_chk(C)) subWithOrgGeogebraCommonKernelMatrixCoords:B]])) normalized];
  OrgGeogebraCommonKernelMatrixCoords *v2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v3)) crossProductWithOrgGeogebraCommonKernelMatrixCoords:v1];
  OrgGeogebraCommonKernelMatrixCoordMatrix4x4 *matrix = [new_OrgGeogebraCommonKernelMatrixCoordMatrix4x4_init() autorelease];
  [matrix setOriginWithOrgGeogebraCommonKernelMatrixCoords:A];
  [matrix setVxWithOrgGeogebraCommonKernelMatrixCoords:v1l];
  [matrix setVyWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v2)) mulWithDouble:l]];
  [matrix setVzWithOrgGeogebraCommonKernelMatrixCoords:[v3 mulWithDouble:l]];
  OrgGeogebraCommonKernelMatrixCoordMatrix *mInv = [matrix inverse];
  jint count = [self getVertexCount];
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_setAndConsume_verticesInABv_(self, [IOSObjectArray newArrayWithLength:count type:OrgGeogebraCommonKernelMatrixCoords_class_()]);
  for (jint i = 0; i < count; i++) IOSObjectArray_Set(verticesInABv_, i, [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(mInv)) mulWithOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(vertices_, i)]);
}

- (jint)getFaceCount {
  return ((IOSObjectArray *) nil_chk(faces_))->size_;
}

- (IOSObjectArray *)getFaces {
  return faces_;
}

- (instancetype)initWithIntArray:(IOSIntArray *)polyTypes
                         withInt:(jint)numPolys
                     withBoolean:(jboolean)untwist {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_initWithIntArray_withInt_withBoolean_(self, polyTypes, numPolys, untwist);
  return self;
}

+ (IOSObjectArray *)sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)vertices {
  return OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(vertices);
}

- (void)setVerticesWithOrgGeogebraCommonGeogebra3DArchimedeanSupportPointArray:(IOSObjectArray *)vertices {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_set_vertices_(self, vertices);
}

- (void)setFacesWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_FaceArray:(IOSObjectArray *)faces {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_set_faces_(self, faces);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:JreStrcat("I$", ((IOSObjectArray *) nil_chk(vertices_))->size_, @" Vertices:")];
  for (jint i = 0; i < vertices_->size_; ++i) {
    OrgGeogebraCommonGeogebra3DArchimedeanSupportPoint *p = IOSObjectArray_Get(vertices_, i);
    [sb appendWithNSString:JreStrcat("$I$@", @"\n\t", i, @": ", p)];
  }
  [sb appendWithNSString:JreStrcat("$I$", @"\n\n", ((IOSObjectArray *) nil_chk(faces_))->size_, @" Faces:")];
  {
    IOSObjectArray *a__ = faces_;
    OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face * const *b__ = a__->buffer_;
    OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face *f = *b__++;
      [sb appendWithNSString:JreStrcat("$@", @"\n\t", f)];
    }
  }
  return [sb description];
}

- (void)dealloc {
  RELEASE_(vertices_);
  RELEASE_(faces_);
  RELEASE_(verticesInABv_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getVertexCount", NULL, "I", 0x1, NULL, NULL },
    { "getVertices", NULL, "[Lorg.geogebra.common.geogebra3D.archimedean.support.Point;", 0x1, NULL, NULL },
    { "getVerticesInABv", NULL, "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "calcVerticesInABv", NULL, "V", 0x1, NULL, NULL },
    { "getFaceCount", NULL, "I", 0x1, NULL, NULL },
    { "getFaces", NULL, "[Lorg.geogebra.common.geogebra3D.archimedean.support.IFace;", 0x1, NULL, NULL },
    { "initWithIntArray:withInt:withBoolean:", "AbstractArchimedeanSolid", NULL, 0x4, "Ljava.lang.Exception;", NULL },
    { "sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "sort", "[Ljava.lang.Integer;", 0xa, NULL, NULL },
    { "setVerticesWithOrgGeogebraCommonGeogebra3DArchimedeanSupportPointArray:", "setVertices", "V", 0x84, NULL, NULL },
    { "setFacesWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_FaceArray:", "setFaces", "V", 0x84, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vertices_", NULL, 0x2, "[Lorg.geogebra.common.geogebra3D.archimedean.support.Point;", NULL, NULL,  },
    { "faces_", NULL, 0x2, "[Lorg.geogebra.common.geogebra3D.archimedean.support.AbstractArchimedeanSolid$Face;", NULL, NULL,  },
    { "verticesInABv_", NULL, 0x2, "[Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.geogebra3D.archimedean.support.AbstractArchimedeanSolid$Face;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid = { 2, "AbstractArchimedeanSolid", "org.geogebra.common.geogebra3D.archimedean.support", NULL, 0x400, 11, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_initWithIntArray_withInt_withBoolean_(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid *self, IOSIntArray *polyTypes, jint numPolys, jboolean untwist) {
  NSObject_init(self);
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *surface = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_initWithIntArray_withInt_withBoolean_(polyTypes, numPolys, untwist) autorelease]) createSurface];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *ots = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomSurface *) nil_chk(surface)) getPoints];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *firstSide = [surface getRootFacetWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *firstSideNormal = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(firstSide)) getNormal])) unit];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *desiredFirstSideNormal = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, -1) autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *firstEdgeVector = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(ots)) getWithInt:1])) minusWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[ots getWithInt:0]])) unit];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *desiredFirstEdgeVector = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(1, 0, 0) autorelease];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix *m = OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix_findRotationMatrixWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(firstSideNormal, desiredFirstSideNormal, firstEdgeVector, desiredFirstEdgeVector);
  for (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple * __strong ot in ots) {
    [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(ot)) becomeWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_roundWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix *) nil_chk(m)) timesWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:ot], 12)];
  }
  IOSObjectArray *indexOrder = OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(ots);
  IOSIntArray *inverseIndexOrder = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(indexOrder))->size_];
  for (jint i = 0; i < indexOrder->size_; ++i) {
    *IOSIntArray_GetRef(inverseIndexOrder, [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(indexOrder, i))) intValue]) = i;
  }
  id<JavaUtilList> pointList = [new_JavaUtilArrayList_init() autorelease];
  {
    IOSObjectArray *a__ = indexOrder;
    JavaLangInteger * const *b__ = a__->buffer_;
    JavaLangInteger * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint index = [((JavaLangInteger *) nil_chk(*b__++)) intValue];
      OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *ot = [ots getWithInt:index];
      [pointList addWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanSupportPoint_initWithDouble_withDouble_withDouble_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(ot))->x_, ot->y_, ot->z_) autorelease]];
    }
  }
  [self setVerticesWithOrgGeogebraCommonGeogebra3DArchimedeanSupportPointArray:[pointList toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgGeogebraCommonGeogebra3DArchimedeanSupportPoint_class_()]]];
  [self calcVerticesInABv];
  id<JavaUtilList> faceList = [new_JavaUtilArrayList_init() autorelease];
  for (id<JavaUtilIterator> it = [surface rootFacetsIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *ss = [it next];
    IOSIntArray *vertexIndices = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomFacet *) nil_chk(ss)) getPointIndices])) toArray];
    IOSIntArray *sortedVertexIndices = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(vertexIndices))->size_];
    for (jint i = 0; i < vertexIndices->size_; ++i) {
      *IOSIntArray_GetRef(sortedVertexIndices, i) = IOSIntArray_Get(inverseIndexOrder, IOSIntArray_Get(vertexIndices, i));
    }
    [faceList addWithId:[new_OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face_initWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_withIntArray_(self, sortedVertexIndices) autorelease]];
  }
  [self setFacesWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_FaceArray:[faceList toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face_class_()]]];
}

IOSObjectArray *OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *vertices) {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_initialize();
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p0 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(vertices)) getWithInt:0];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *zeroAngleVector = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p0))->x_, p0->y_, 0) autorelease];
  IOSObjectArray *indexList = [IOSObjectArray arrayWithLength:[vertices size] type:JavaLangInteger_class_()];
  for (jint i = 0; i < [vertices size]; ++i) {
    IOSObjectArray_Set(indexList, i, JavaLangInteger_valueOfWithInt_(i));
  }
  id<JavaUtilComparator> comp = [new_OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(vertices, zeroAngleVector) autorelease];
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(indexList, comp);
  return indexList;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid:(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid *)outer$
                                                                                 withIntArray:(IOSIntArray *)vertexIndices {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face_initWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_withIntArray_(self, outer$, vertexIndices);
  return self;
}

- (IOSIntArray *)getVertexIndices {
  return vertexIndices_;
}

- (jint)getVertexCount {
  return ((IOSIntArray *) nil_chk(vertexIndices_))->size_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"("];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(vertexIndices_))->size_; ++i) {
    if (i > 0) {
      [sb appendWithNSString:@", "];
    }
    [sb appendWithNSString:NSString_valueOfInt_(IOSIntArray_Get(vertexIndices_, i))];
  }
  [sb appendWithNSString:@")"];
  return [sb description];
}

- (void)dealloc {
  RELEASE_(vertexIndices_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid:withIntArray:", "Face", NULL, 0x84, NULL, NULL },
    { "getVertexIndices", NULL, "[I", 0x1, NULL, NULL },
    { "getVertexCount", NULL, "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vertexIndices_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face = { 2, "Face", "org.geogebra.common.geogebra3D.archimedean.support", "AbstractArchimedeanSolid", 0x4, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face_initWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_withIntArray_(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face *self, OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid *outer$, IOSIntArray *vertexIndices) {
  NSObject_init(self);
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face_set_vertexIndices_(self, vertexIndices);
}

OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face *new_OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face_initWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_withIntArray_(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid *outer$, IOSIntArray *vertexIndices) {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face *self = [OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face_initWithOrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_withIntArray_(self, outer$, vertexIndices);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_Face)

@implementation OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1

- (jint)compareWithId:(JavaLangInteger *)o1
               withId:(JavaLangInteger *)o2 {
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *ot1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(val$vertices_)) getWithInt:[((JavaLangInteger *) nil_chk(o1)) intValue]];
  OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *ot2 = [val$vertices_ getWithInt:[((JavaLangInteger *) nil_chk(o2)) intValue]];
  jdouble zDiff = ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(ot1))->z_ - ((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(ot2))->z_;
  if (OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(zDiff, 0, 1e-8)) {
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *projectedOt1 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(ot1->x_, ot1->y_, 0) autorelease];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *projectedOt2 = [new_OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(ot2->x_, ot2->y_, 0) autorelease];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *cross1 = [((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(val$zeroAngleVector_)) crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:projectedOt1];
    OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *cross2 = [val$zeroAngleVector_ crossWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:projectedOt2];
    jdouble angle1 = [val$zeroAngleVector_ degBetweenWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:projectedOt1];
    if (((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(cross1))->z_ < 0) {
      angle1 = 360 - angle1;
    }
    jdouble angle2 = [val$zeroAngleVector_ degBetweenWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:projectedOt2];
    if (((OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(cross2))->z_ < 0) {
      angle2 = 360 - angle2;
    }
    jdouble angleDiff = angle1 - angle2;
    if (angleDiff > 0) {
      return 1;
    }
    else if (angleDiff < 0) {
      return -1;
    }
    else {
      return 0;
    }
  }
  else if (zDiff > 0) {
    return 1;
  }
  else {
    return -1;
  }
}

- (instancetype)initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)capture$0
                 withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)capture$1 {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$vertices_);
  RELEASE_(val$zeroAngleVector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$vertices_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lorg/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;",  },
    { "val$zeroAngleVector_", NULL, 0x1012, "Lorg.geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid", "sortWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1 = { 2, "", "org.geogebra.common.geogebra3D.archimedean.support", "AbstractArchimedeanSolid", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Integer;>;" };
  return &_OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1;
}

@end

void OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1 *self, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *capture$1) {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_set_val$vertices_(self, capture$0);
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_set_val$zeroAngleVector_(self, capture$1);
  NSObject_init(self);
}

OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1 *new_OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *capture$0, OrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *capture$1) {
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1 *self = [OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1 alloc];
  OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1_initWithOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withOrgGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonGeogebra3DArchimedeanSupportAbstractArchimedeanSolid_$1)
