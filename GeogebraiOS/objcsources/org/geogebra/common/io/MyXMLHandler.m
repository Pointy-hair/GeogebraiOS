//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/io/MyXMLHandler.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "org/geogebra/common/GeoGebraConstants.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GDimension.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/GRectangle.h"
#include "org/geogebra/common/euclidian/DrawEquation.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/io/MyXMLHandler.h"
#include "org/geogebra/common/io/layout/DockPanelData.h"
#include "org/geogebra/common/io/layout/DockSplitPaneData.h"
#include "org/geogebra/common/io/layout/Perspective.h"
#include "org/geogebra/common/javax/swing/SwingConstants.h"
#include "org/geogebra/common/kernel/AnimationManager.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/KernelCAS.h"
#include "org/geogebra/common/kernel/Locateable.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/MacroKernel.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/PathRegionHandling.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoBarChart.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/AbsoluteScreenLocateable.h"
#include "org/geogebra/common/kernel/geos/AngleProperties.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoButton.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/kernel/geos/GeoUserInputElement.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/LimitedPath.h"
#include "org/geogebra/common/kernel/geos/PointProperties.h"
#include "org/geogebra/common/kernel/geos/TextProperties.h"
#include "org/geogebra/common/kernel/geos/Traceable.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/CoordStyle.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/main/settings/AlgebraSettings.h"
#include "org/geogebra/common/main/settings/CASSettings.h"
#include "org/geogebra/common/main/settings/ConstructionProtocolSettings.h"
#include "org/geogebra/common/main/settings/DataCollectionSettings.h"
#include "org/geogebra/common/main/settings/EuclidianSettings.h"
#include "org/geogebra/common/main/settings/KeyboardSettings.h"
#include "org/geogebra/common/main/settings/LayoutSettings.h"
#include "org/geogebra/common/main/settings/ProbabilityCalculatorSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/main/settings/SpreadsheetSettings.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/ScriptManager.h"
#include "org/geogebra/common/plugin/ScriptType.h"
#include "org/geogebra/common/plugin/SensorLogger.h"
#include "org/geogebra/common/plugin/script/Script.h"
#include "org/geogebra/common/util/SpreadsheetTraceSettings.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/debug/Log.h"
#include "org/xml/sax/SAXException.h"

#define OrgGeogebraCommonIoMyXMLHandler_MODE_INVALID -1
#define OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA 1
#define OrgGeogebraCommonIoMyXMLHandler_MODE_MACRO 50
#define OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW 100
#define OrgGeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW 150
#define OrgGeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW 151
#define OrgGeogebraCommonIoMyXMLHandler_MODE_DATA_COLLECTION_VIEW 152
#define OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL 161
#define OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR 162
#define OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL 163
#define OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL 164
#define OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL 165
#define OrgGeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR 170
#define OrgGeogebraCommonIoMyXMLHandler_MODE_KERNEL 200
#define OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION 300
#define OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT 301
#define OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND 302
#define OrgGeogebraCommonIoMyXMLHandler_MODE_GUI 400
#define OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES 401
#define OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE 402
#define OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES 403
#define OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS 404
#define OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS 500
#define OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULT_GEO 501
#define OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT 1
#define OrgGeogebraCommonIoMyXMLHandler_JSplitPane_VERTICAL_SPLIT 0
#define OrgGeogebraCommonIoMyXMLHandler_MIN_TEXT_SIZE 4.0

@interface OrgGeogebraCommonIoMyXMLHandler () {
 @public
  jint mode_;
  jint constMode_;
  jint casMode_;
  OrgGeogebraCommonKernelGeosGeoCasCell *geoCasCell_;
  OrgGeogebraCommonKernelArithmeticCommand *cmd_;
  OrgGeogebraCommonKernelMacro *macro_;
  IOSObjectArray *macroInputLabels_, *macroOutputLabels_;
  IOSObjectArray *cmdOutput_;
  jboolean startAnimation_;
  jint docPointStyle_;
  OrgGeogebraCommonKernelKernel *kernel_, *origKernel_;
  OrgGeogebraCommonKernelConstruction *origCons_;
  OrgGeogebraCommonKernelParserParser *parser_, *origParser_;
  JavaUtilLinkedList *startPointList_;
  JavaUtilLinkedList *linkedGeoList_;
  JavaUtilLinkedList *showObjectConditionList_;
  JavaUtilLinkedList *dynamicColorList_;
  JavaUtilLinkedList *animationSpeedList_;
  JavaUtilLinkedList *animationStepList_;
  JavaUtilLinkedList *animatingList_;
  JavaUtilLinkedList *minMaxList_;
  jint consStep_;
  jdouble ggbFileFormat_;
  jboolean hasGuiElement_;
  OrgGeogebraCommonIoLayoutPerspective *tmp_perspective_;
  JavaUtilArrayList *tmp_perspectives_;
  JavaUtilArrayList *tmp_panes_;
  JavaUtilArrayList *tmp_views_;
  jint tmp_sp1_, tmp_sp2_;
  jboolean tmp_spHorizontal_;
  jboolean tmp_showAlgebra_, tmp_showSpreadsheet_;
  JavaUtilHashMap *xmin_, *xmax_, *ymin_, *ymax_;
}

- (void)resetWithBoolean:(jboolean)start;

- (void)initKernelVars OBJC_METHOD_FAMILY_NONE;

- (void)startScriptingElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startGeoGebraElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)handleKeyboardWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startMacroElementWithNSString:(NSString *)eName
            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleExtraTagWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startEuclidianViewElementWithNSString:(NSString *)eName
                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startSpreadsheetViewElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startDataCollectionViewElementWithNSString:(NSString *)eName
                         withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startProbabilityCalculatorElementWithNSString:(NSString *)eName
                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleProbabilityDistributionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleProbabilityIntervalWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startAlgebraViewElementWithNSString:(NSString *)eName
                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCoordSystemWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleEvSizeWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetColumnWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetFormatWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetRowWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetLayoutWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleAxesColorWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleGridColorWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleLineStyleWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startKernelElementWithNSString:(NSString *)eName
             withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAngleUnitWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelCoordStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelInvTrigWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelDecimalsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelStartAnimationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelLocalizationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCasSettingsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelFiguresWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelContinuousWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startGuiElementWithNSString:(NSString *)eName
          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)createCompabilityLayout;

+ (jboolean)handleConsProtColumnsWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleConsProtocolWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleConsProtNavigationBarWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app1
                                          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleGuiShowWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app1
                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleGuiSettingsWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleGraphicsSettingsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSplitDividerWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleToolbarWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleWindowSizeWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleFontWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                         withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleMenuFontWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                             withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleTooltipSettingsWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleMouseWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleLabelingStyleWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startGuiPerspectivesElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handlePerspectiveWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)endGuiPerspectivesElement;

- (void)startGuiPerspectiveElementWithNSString:(NSString *)eName
                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleDockBarWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)endGuiPerspectiveElement;

- (void)startGuiViewsElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleViewWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startGuiPanesElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handlePaneWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)handleConstructionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)initMacroWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs OBJC_METHOD_FAMILY_NONE;

- (void)endMacro;

- (void)handleWorksheetTextWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startCasCellWithNSString:(NSString *)eName
       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)endCasCellWithNSString:(NSString *)eName;

- (void)startCellPair;

- (void)endCellPairWithNSString:(NSString *)eName;

- (void)startCellOutputElementWithNSString:(NSString *)eName
                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startCellInputElementWithNSString:(NSString *)eName
                withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startCellTextElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startDefaultWithNSString:(NSString *)eName
       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startConstructionElementWithNSString:(NSString *)eName
                   withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)endConstructionElementWithNSString:(NSString *)eName;

- (void)endDefaultElementWithNSString:(NSString *)eName;

- (void)processEvSizes;

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleDimensionsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jchar)firstCharWithNSString:(NSString *)eName;

- (jboolean)handleShowWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleShowOnAxisWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleObjColorWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleBgColorWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (OrgGeogebraCommonAwtGColor *)handleColorAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (OrgGeogebraCommonAwtGColor *)handleColorAlphaAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLineStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleDecorationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleEqnStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCurveParamWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCoordsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCoordStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleListenersWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCaptionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleScriptWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs
        withOrgGeogebraCommonPluginScriptTypeEnum:(OrgGeogebraCommonPluginScriptTypeEnum *)type;

- (jboolean)handleConditionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCheckboxWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleValueWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handlePointSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handlePointStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLayerWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCasCellInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCasCellOutputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSliderWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTraceWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetTraceWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleShowTrimmedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSelectionAllowedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSelectedIndexWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAnimationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleFixedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleBreakpointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleFileWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTextFontWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTextDecimalsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTextFiguresWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleInBackgroundWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleInterpolateWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAuxiliaryWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleIsLaTeXWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleArcSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAllowReflexAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleEmphasizeRightAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleComboBoxWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAngleStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleForceReflexAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleOutlyingIntersectionsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKeepTypeOnTransformWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSlopeTriangleSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleStartPointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)processStartPointList;

- (jboolean)handleLengthWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleListTypeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLinkedGeoWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)processLinkedGeoList;

- (void)processShowObjectConditionList;

- (void)processAnimationSpeedList;

- (void)processAnimationStepList;

- (void)processAnimatingList;

- (void)processMinMaxList;

- (void)processDynamicColorList;

- (jboolean)handleEigenvectorsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleMatrixWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLabelOffsetWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLabelModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTooltipModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCoefficientsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleUserInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (OrgGeogebraCommonKernelArithmeticCommand *)getCommandWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startCommandElementWithNSString:(NSString *)eName
              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCmdInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCmdOutputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCmdOutputSizesWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (IOSObjectArray *)getAttributeStringsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startExpressionElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraViewModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, geoCasCell_, OrgGeogebraCommonKernelGeosGeoCasCell *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, cmd_, OrgGeogebraCommonKernelArithmeticCommand *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, macro_, OrgGeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, macroInputLabels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, macroOutputLabels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, cmdOutput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, origKernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, origCons_, OrgGeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, parser_, OrgGeogebraCommonKernelParserParser *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, origParser_, OrgGeogebraCommonKernelParserParser *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, startPointList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, linkedGeoList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, showObjectConditionList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, dynamicColorList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, animationSpeedList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, animationStepList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, animatingList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, minMaxList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, tmp_perspective_, OrgGeogebraCommonIoLayoutPerspective *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, tmp_perspectives_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, tmp_panes_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, tmp_views_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, xmin_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, xmax_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, ymin_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler, ymax_, JavaUtilHashMap *)

static jdouble OrgGeogebraCommonIoMyXMLHandler_FORMAT_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, FORMAT_, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_INVALID, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_GEOGEBRA, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_MACRO, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_EUCLIDIAN_VIEW, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_SPREADSHEET_VIEW, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_ALGEBRA_VIEW, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_DATA_COLLECTION_VIEW, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_CONST_CAS_CELL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_CAS_CELL_PAIR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_CAS_INPUT_CELL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_CAS_OUTPUT_CELL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_CAS_TEXT_CELL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_PROBABILITY_CALCULATOR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_KERNEL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_CONSTRUCTION, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_CONST_GEO_ELEMENT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_CONST_COMMAND, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_GUI, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_GUI_PERSPECTIVES, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_GUI_PERSPECTIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_GUI_PERSPECTIVE_PANES, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_GUI_PERSPECTIVE_VIEWS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_DEFAULTS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MODE_DEFAULT_GEO, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, JSplitPane_HORIZONTAL_SPLIT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, JSplitPane_VERTICAL_SPLIT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, MIN_TEXT_SIZE, jdouble)

static jboolean OrgGeogebraCommonIoMyXMLHandler_isPreferencesXML_ = NO;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonIoMyXMLHandler, isPreferencesXML_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonIoMyXMLHandler, isPreferencesXML_, jboolean)

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_resetWithBoolean_(OrgGeogebraCommonIoMyXMLHandler *self, jboolean start);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_initKernelVars(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startScriptingElementWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startGeoGebraElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_handleKeyboardWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startMacroElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleExtraTagWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startEuclidianViewElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startSpreadsheetViewElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startDataCollectionViewElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startProbabilityCalculatorElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleProbabilityDistributionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleProbabilityIntervalWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startAlgebraViewElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCoordSystemWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleEvSizeWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetColumnWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetFormatWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetRowWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetLayoutWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAxesColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleGridColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleLineStyleWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startKernelElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAngleUnitWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelCoordStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelInvTrigWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelDecimalsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelStartAnimationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelLocalizationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCasSettingsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelFiguresWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelContinuousWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startGuiElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_createCompabilityLayout(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleConsProtColumnsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleConsProtocolWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleConsProtNavigationBarWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonMainApp *app1, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleGuiShowWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonMainApp *app1, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleGuiSettingsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleGraphicsSettingsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSplitDividerWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleWindowSizeWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleFontWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleMenuFontWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleTooltipSettingsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleMouseWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleLabelingStyleWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startGuiPerspectivesElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handlePerspectiveWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_endGuiPerspectivesElement(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startGuiPerspectiveElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraInputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleDockBarWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_endGuiPerspectiveElement(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startGuiViewsElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleViewWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startGuiPanesElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handlePaneWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_initMacroWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_endMacro(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_handleWorksheetTextWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startCasCellWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_endCasCellWithNSString_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startCellPair(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_endCellPairWithNSString_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startCellOutputElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startCellInputElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startCellTextElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startDefaultWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startConstructionElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_endConstructionElementWithNSString_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_endDefaultElementWithNSString_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processEvSizes(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleDimensionsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jchar OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(NSString *eName);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleShowWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleShowOnAxisWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleObjColorWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleBgColorWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonIoMyXMLHandler_handleColorAlphaAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleLineStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleDecorationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleEqnStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCurveParamWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCoordsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCoordStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleListenersWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCaptionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleScriptWithJavaUtilLinkedHashMap_withOrgGeogebraCommonPluginScriptTypeEnum_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs, OrgGeogebraCommonPluginScriptTypeEnum *type);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleConditionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCheckboxWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleValueWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handlePointSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handlePointStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleLayerWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCasCellInputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCasCellOutputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSliderWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleTraceWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetTraceWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleShowTrimmedWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSelectionAllowedWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSelectedIndexWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAnimationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleFixedWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleBreakpointWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleFileWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleTextFontWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleTextDecimalsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleTextFiguresWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleInBackgroundWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleInterpolateWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAuxiliaryWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleIsLaTeXWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleArcSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAllowReflexAngleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleEmphasizeRightAngleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleComboBoxWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAngleStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleForceReflexAngleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleOutlyingIntersectionsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleKeepTypeOnTransformWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleSlopeTriangleSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleStartPointWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processStartPointList(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleLengthWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleListTypeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleLinkedGeoWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processLinkedGeoList(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processShowObjectConditionList(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processAnimationSpeedList(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processAnimationStepList(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processAnimatingList(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processMinMaxList(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_processDynamicColorList(OrgGeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleEigenvectorsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleMatrixWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleLabelOffsetWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleLabelModeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleTooltipModeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCoefficientsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleUserInputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticCommand *OrgGeogebraCommonIoMyXMLHandler_getCommandWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startCommandElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCmdInputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCmdOutputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleCmdOutputSizesWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_startExpressionElementWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewModeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

@interface OrgGeogebraCommonIoMyXMLHandler_GeoExpPair : NSObject {
 @public
  OrgGeogebraCommonKernelGeosGeoElement *geoElement_;
  NSString *exp_;
}

- (instancetype)initWithOrgGeogebraCommonIoMyXMLHandler:(OrgGeogebraCommonIoMyXMLHandler *)outer$
              withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                                           withNSString:(NSString *)exp;

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeo;

- (void)setGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonIoMyXMLHandler_GeoExpPair)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler_GeoExpPair, geoElement_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler_GeoExpPair, exp_, NSString *)

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *self, OrgGeogebraCommonIoMyXMLHandler *outer$, OrgGeogebraCommonKernelGeosGeoElement *g, NSString *exp);

__attribute__((unused)) static OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *new_OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(OrgGeogebraCommonIoMyXMLHandler *outer$, OrgGeogebraCommonKernelGeosGeoElement *g, NSString *exp) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonIoMyXMLHandler_GeoExpPair)

@interface OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax : NSObject {
 @public
  OrgGeogebraCommonKernelGeosGeoElement *geoElement_;
  NSString *min_;
  NSString *max_;
}

- (instancetype)initWithOrgGeogebraCommonIoMyXMLHandler:(OrgGeogebraCommonIoMyXMLHandler *)outer$
              withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                                           withNSString:(NSString *)min
                                           withNSString:(NSString *)max;

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeo;

- (void)setGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax, geoElement_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax, min_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax, max_, NSString *)

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax *self, OrgGeogebraCommonIoMyXMLHandler *outer$, OrgGeogebraCommonKernelGeosGeoElement *g, NSString *min, NSString *max);

__attribute__((unused)) static OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax *new_OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(OrgGeogebraCommonIoMyXMLHandler *outer$, OrgGeogebraCommonKernelGeosGeoElement *g, NSString *min, NSString *max) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax)

@interface OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair : NSObject {
 @public
  id<OrgGeogebraCommonKernelLocateable> locateable_;
  NSString *exp_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point_;
  jint number_;
}

- (instancetype)initWithOrgGeogebraCommonIoMyXMLHandler:(OrgGeogebraCommonIoMyXMLHandler *)outer$
                  withOrgGeogebraCommonKernelLocateable:(id<OrgGeogebraCommonKernelLocateable>)g
                                           withNSString:(NSString *)s
                                                withInt:(jint)n;

- (instancetype)initWithOrgGeogebraCommonIoMyXMLHandler:(OrgGeogebraCommonIoMyXMLHandler *)outer$
                  withOrgGeogebraCommonKernelLocateable:(id<OrgGeogebraCommonKernelLocateable>)g
          withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                withInt:(jint)n;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair, locateable_, id<OrgGeogebraCommonKernelLocateable>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair, exp_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair, point_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withNSString_withInt_(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *self, OrgGeogebraCommonIoMyXMLHandler *outer$, id<OrgGeogebraCommonKernelLocateable> g, NSString *s, jint n);

__attribute__((unused)) static OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *new_OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withNSString_withInt_(OrgGeogebraCommonIoMyXMLHandler *outer$, id<OrgGeogebraCommonKernelLocateable> g, NSString *s, jint n) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *self, OrgGeogebraCommonIoMyXMLHandler *outer$, id<OrgGeogebraCommonKernelLocateable> g, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p, jint n);

__attribute__((unused)) static OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *new_OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonIoMyXMLHandler *outer$, id<OrgGeogebraCommonKernelLocateable> g, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p, jint n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonIoMyXMLHandler)

IOSIntArray *OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_;
IOSObjectArray *OrgGeogebraCommonIoMyXMLHandler_tooltipTimeouts_;
IOSObjectArray *OrgGeogebraCommonIoMyXMLHandler_cbTimeoutOptions_;

@implementation OrgGeogebraCommonIoMyXMLHandler

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
              withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonIoMyXMLHandler_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(self, kernel, cons);
  return self;
}

- (void)resetWithBoolean:(jboolean)start {
  OrgGeogebraCommonIoMyXMLHandler_resetWithBoolean_(self, start);
}

- (void)initKernelVars {
  OrgGeogebraCommonIoMyXMLHandler_initKernelVars(self);
}

- (jint)getConsStep {
  return consStep_;
}

+ (JavaLangInteger *)getTimeoutOptionWithLong:(jlong)integer {
  return OrgGeogebraCommonIoMyXMLHandler_getTimeoutOptionWithLong_(integer);
}

- (void)textWithNSString:(NSString *)str {
}

- (void)startDocument {
  OrgGeogebraCommonIoMyXMLHandler_resetWithBoolean_(self, YES);
}

- (void)endDocument {
  if (mode_ == OrgGeogebraCommonIoMyXMLHandler_MODE_INVALID) @throw new_OrgXmlSaxSAXException_initWithNSString_([((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"XMLTagANotFound" withNSString:@"<geogebra>"]);
}

- (void)startElementWithNSString:(NSString *)eName
       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  switch (mode_) {
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA:
    OrgGeogebraCommonIoMyXMLHandler_startGeoGebraElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW:
    OrgGeogebraCommonIoMyXMLHandler_startEuclidianViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW3D:
    [self startEuclidianView3DElementWithNSString:eName withJavaUtilLinkedHashMap:attrs];
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW:
    OrgGeogebraCommonIoMyXMLHandler_startSpreadsheetViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_DATA_COLLECTION_VIEW:
    OrgGeogebraCommonIoMyXMLHandler_startDataCollectionViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW:
    OrgGeogebraCommonIoMyXMLHandler_startAlgebraViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR:
    OrgGeogebraCommonIoMyXMLHandler_startProbabilityCalculatorElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_KERNEL:
    OrgGeogebraCommonIoMyXMLHandler_startKernelElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_MACRO:
    OrgGeogebraCommonIoMyXMLHandler_startMacroElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS:
    OrgGeogebraCommonIoMyXMLHandler_startDefaultWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION:
    OrgGeogebraCommonIoMyXMLHandler_startConstructionElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI:
    OrgGeogebraCommonIoMyXMLHandler_startGuiElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES:
    OrgGeogebraCommonIoMyXMLHandler_startGuiPerspectivesElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE:
    OrgGeogebraCommonIoMyXMLHandler_startGuiPerspectiveElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES:
    OrgGeogebraCommonIoMyXMLHandler_startGuiPanesElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS:
    OrgGeogebraCommonIoMyXMLHandler_startGuiViewsElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_INVALID:
    if ([@"geogebra" isEqual:eName]) {
      mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
      @try {
        ggbFileFormat_ = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"format"]);
        ggbFileFormat_ = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(ggbFileFormat_);
        if (ggbFileFormat_ > OrgGeogebraCommonIoMyXMLHandler_FORMAT_) {
          OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$D", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"FileFormatNewer"], @": ", ggbFileFormat_));
        }
        if (ggbFileFormat_ < 3.0) {
          if (!([kernel_ isKindOfClass:[OrgGeogebraCommonKernelMacroKernel class]])) [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) setContinuousWithBoolean:YES];
          *OrgGeogebraCommonPluginEuclidianStyleConstants_getRef_automaticGridDistanceFactor_() = 0.5;
        }
      }
      @catch (JavaLangException *e) {
        @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(loc_, @"FileFormatUnknown");
      }
      NSString *ggbVersion = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"version"];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setFileVersionWithNSString:ggbVersion];
      NSString *uniqueId = [attrs getWithId:@"id"];
      if (uniqueId != nil) [app_ setUniqueIdWithNSString:uniqueId];
    }
    break;
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"unknown mode: ", mode_));
  }
}

- (void)startScriptingElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startScriptingElementWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)endElementWithNSString:(NSString *)eName {
  switch (mode_) {
    case OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW:
    if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isHTML5Applet]) {
      OrgGeogebraCommonAwtGDimension *gd = [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evSet_)) getPreferredSize];
      if ([((OrgGeogebraCommonAwtGDimension *) nil_chk(gd)) getWidth] == 0 || [gd getHeight] == 0) {
        jint width = 0;
        jint height = 0;
        if (!OrgGeogebraCommonMainApp_isFullAppGui()) {
          width = [app_ getAppletWidth] - 2;
          height = [app_ getAppletHeight] - 2;
          if (width == 0 || height == 0) {
            width = 598;
            height = 438;
          }
        }
        else {
          width = [app_ getAppCanvasWidth];
          height = [app_ getAppCanvasHeight];
        }
        [evSet_ setPreferredSizeWithOrgGeogebraCommonAwtGDimension:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:width withInt:height]];
      }
    }
    if ([@"euclidianView" isEqual:eName]) {
      evSet_ = nil;
      mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW3D:
    if ([@"euclidianView3D" isEqual:eName]) {
      evSet_ = nil;
      mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW:
    if ([@"algebraView" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW:
    if ([@"spreadsheetView" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_DATA_COLLECTION_VIEW:
    if ([@"dataCollectionView" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR:
    if ([@"probabilityCalculator" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_KERNEL:
    if ([@"kernel" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI:
    if ([@"gui" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES:
    if ([@"perspectives" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI;
    OrgGeogebraCommonIoMyXMLHandler_endGuiPerspectivesElement(self);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE:
    if ([@"perspective" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES;
    OrgGeogebraCommonIoMyXMLHandler_endGuiPerspectiveElement(self);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES:
    if ([@"panes" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS:
    if ([@"views" isEqual:eName]) mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION:
    OrgGeogebraCommonIoMyXMLHandler_endConstructionElementWithNSString_(self, eName);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS:
    OrgGeogebraCommonIoMyXMLHandler_endDefaultElementWithNSString_(self, eName);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_MACRO:
    if ([@"macro" isEqual:eName]) {
      OrgGeogebraCommonIoMyXMLHandler_endMacro(self);
      mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA:
    if ([@"geogebra" isEqual:eName]) {
      if (startAnimation_) {
        if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) isApplet] && ![app_ isHTML5Applet]) [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) setWantAnimationStarted];
        else [((OrgGeogebraCommonKernelAnimationManager *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAnimatonManager])) startAnimation];
      }
      if (hasGuiElement_) {
        if (ggbFileFormat_ < 3.3) {
          OrgGeogebraCommonIoMyXMLHandler_createCompabilityLayout(self);
        }
        else if (!OrgGeogebraCommonIoMyXMLHandler_isPreferencesXML_ && [((JavaUtilArrayList *) nil_chk(tmp_perspectives_)) isEmpty]) {
          OrgGeogebraCommonIoMyXMLHandler_createCompabilityLayout(self);
        }
      }
    }
    break;
  }
}

- (void)startGeoGebraElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startGeoGebraElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)handleKeyboardWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_handleKeyboardWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startMacroElementWithNSString:(NSString *)eName
            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startMacroElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startEuclidianView3DElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonMainApp_debugWithNSString_(@"TODO : warn that it's a 3D file");
}

- (void)startEuclidianViewElementCheckViewIdWithNSString:(NSString *)eName
                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
}

- (jboolean)startEuclidianViewElementSwitchWithNSString:(NSString *)eName
                              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs
                                               withChar:(jchar)firstChar {
  jboolean ok = YES;
  switch (firstChar) {
    case 'a':
    if ([@"axesColor" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAxesColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    else if ([@"axis" isEqual:eName]) {
      ok = [self handleAxisWithOrgGeogebraCommonMainSettingsEuclidianSettings:evSet_ withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'b':
    if ([@"bgColor" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleBgColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    case 'c':
    if ([@"coordSystem" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCoordSystemWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(self, evSet_, attrs);
      break;
    }
    case 'e':
    if ([@"evSettings" isEqual:eName]) {
      ok = [self handleEvSettingsWithOrgGeogebraCommonMainSettingsEuclidianSettings:evSet_ withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'g':
    if ([@"grid" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    else if ([@"gridColor" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleGridColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    case 'l':
    if ([@"lineStyle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleLineStyleWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    case 's':
    if ([@"size" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleEvSizeWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(self, evSet_, attrs);
      break;
    }
    break;
    case 'v':
    if ([@"viewNumber" isEqual:eName]) {
      ok = YES;
      break;
    }
    else if ([@"viewId" isEqual:eName]) {
      ok = YES;
      break;
    }
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <euclidianView>: ", eName));
  }
  return ok;
}

- (jboolean)handleExtraTagWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleExtraTagWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startEuclidianViewElementWithNSString:(NSString *)eName
                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startEuclidianViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startSpreadsheetViewElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startSpreadsheetViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startDataCollectionViewElementWithNSString:(NSString *)eName
                         withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startDataCollectionViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startProbabilityCalculatorElementWithNSString:(NSString *)eName
                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startProbabilityCalculatorElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleProbabilityDistributionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleProbabilityDistributionWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleProbabilityIntervalWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleProbabilityIntervalWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startAlgebraViewElementWithNSString:(NSString *)eName
                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startAlgebraViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleCoordSystemWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCoordSystemWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(self, ev, attrs);
}

- (jboolean)handleEvSettingsWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    NSString *strAxes = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"axes"];
    if (strAxes != nil) {
      jboolean showAxes = [self parseBooleanWithNSString:strAxes];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setShowAxesWithBoolean:showAxes withBoolean:showAxes];
    }
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) showGridWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"grid"]]];
    @try {
      [ev setGridIsBoldWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"gridIsBold"]]];
    }
    @catch (JavaLangException *e) {
    }
    @try {
      if ([attrs getWithId:@"lockedAxesRatio"] != nil) {
        [ev setLockedAxesRatioWithDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"lockedAxesRatio"])];
      }
    }
    @catch (JavaLangException *e) {
    }
    @try {
      [ev setGridTypeWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"gridType"])];
    }
    @catch (JavaLangException *e) {
    }
    NSString *str = [attrs getWithId:@"pointCapturing"];
    if (str != nil) {
      jint pointCapturingMode;
      if ([str isEqual:@"false"]) {
        pointCapturingMode = 0;
      }
      else if ([str isEqual:@"true"]) {
        pointCapturingMode = 1;
      }
      else {
        pointCapturingMode = JavaLangInteger_parseIntWithNSString_(str);
        if (pointCapturingMode > OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_XML_MAX) {
          pointCapturingMode = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_DEFAULT;
        }
      }
      [ev setPointCapturingWithInt:pointCapturingMode];
    }
    else {
      [ev setPointCapturingWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC];
    }
    if (ggbFileFormat_ < 3.3) {
      NSString *strPointStyle = [attrs getWithId:@"pointStyle"];
      if (strPointStyle != nil) {
        docPointStyle_ = JavaLangInteger_parseIntWithNSString_(strPointStyle);
      }
      else {
        docPointStyle_ = OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
      }
    }
    else {
      docPointStyle_ = -1;
    }
    NSString *strBooleanSize = [attrs getWithId:@"checkboxSize"];
    if (strBooleanSize != nil) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setCheckboxSizeWithInt:JavaLangInteger_parseIntWithNSString_(strBooleanSize)];
    }
    jboolean asm_ = [self parseBooleanWithNSString:[attrs getWithId:@"allowShowMouseCoords"]];
    [ev setAllowShowMouseCoordsWithBoolean:asm_];
    NSString *att = [attrs getWithId:@"allowToolTips"];
    if (att != nil) [ev setAllowToolTipsWithInt:JavaLangInteger_parseIntWithNSString_(att)];
    else [ev setAllowToolTipsWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC];
    NSString *del = [attrs getWithId:@"deleteToolSize"];
    if (del != nil) [ev setDeleteToolSizeWithInt:JavaLangInteger_parseIntWithNSString_(del)];
    NSString *strRightAngleStyle = [attrs getWithId:@"rightAngleStyle"];
    if (strRightAngleStyle == nil) {
      if (![ev is3D]) {
        ((OrgGeogebraCommonMainApp *) nil_chk(app_))->rightAngleStyle_ = OrgGeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_DOT;
      }
      else {
        [((OrgGeogebraCommonMainApp *) nil_chk(app_)) setRightAngleStyleLocalDefault];
      }
    }
    else {
      if (![ev isViewForPlane]) {
        ((OrgGeogebraCommonMainApp *) nil_chk(app_))->rightAngleStyle_ = JavaLangInteger_parseIntWithNSString_(strRightAngleStyle);
      }
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (jboolean)handleEvSizeWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleEvSizeWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(self, ev, attrs);
}

- (jboolean)handleSpreadsheetSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetColumnWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetColumnWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetFormatWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetFormatWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetRowWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetRowWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetLayoutWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetLayoutWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (jboolean)handleBgColorWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)evSet
                                                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleBgColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet, attrs);
}

+ (jboolean)handleAxesColorWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAxesColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(ev, attrs);
}

+ (jboolean)handleGridColorWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleGridColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(ev, attrs);
}

+ (jboolean)handleLineStyleWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleLineStyleWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(ev, attrs);
}

+ (jboolean)handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(ev, attrs);
}

- (jboolean)handleAxisWithOrgGeogebraCommonMainSettingsEuclidianSettings:(OrgGeogebraCommonMainSettingsEuclidianSettings *)ev
                                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    jint axis = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    NSString *strShowAxis = [attrs getWithId:@"show"];
    NSString *label = [attrs getWithId:@"label"];
    NSString *unitLabel = [attrs getWithId:@"unitLabel"];
    jboolean showNumbers = [self parseBooleanWithNSString:[attrs getWithId:@"showNumbers"]];
    if (strShowAxis != nil) {
      jboolean showAxis = [self parseBooleanWithNSString:strShowAxis];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setShowAxisWithInt:axis withBoolean:showAxis];
    }
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setAxisLabelWithInt:axis withNSString:label];
    if (unitLabel != nil && ((jint) [unitLabel length]) > 0) {
      IOSObjectArray *unitLabels = [ev getAxesUnitLabels];
      (void) IOSObjectArray_Set(nil_chk(unitLabels), axis, unitLabel);
      [ev setAxesUnitLabelsWithNSStringArray:unitLabels];
    }
    [ev setShowAxisNumbersWithInt:axis withBoolean:showNumbers];
    NSString *strTickDist = [attrs getWithId:@"tickDistance"];
    if (strTickDist != nil) {
      jdouble tickDist = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(strTickDist);
      [ev setAxesNumberingDistanceWithDouble:tickDist withInt:axis];
    }
    NSString *strTickStyle = [attrs getWithId:@"tickStyle"];
    if (strTickStyle != nil) {
      jint tickStyle = JavaLangInteger_parseIntWithNSString_(strTickStyle);
      [ev setAxisTickStyleWithInt:axis withInt:tickStyle];
    }
    else {
      [ev setAxisTickStyleWithInt:axis withInt:OrgGeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR_MINOR];
    }
    NSString *axisCross = [attrs getWithId:@"axisCross"];
    NSString *axisCrossEdge = [attrs getWithId:@"axisCrossEdge"];
    jboolean acb = NO;
    if (axisCrossEdge != nil) {
      acb = [self parseBooleanWithNSString:axisCrossEdge];
    }
    if (acb) {
      [ev setAxisCrossWithInt:axis withDouble:0];
      [ev setDrawBorderAxesWithInt:axis withBoolean:YES];
    }
    else if (axisCross != nil) {
      jdouble ac = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(axisCross);
      [ev setAxisCrossWithInt:axis withDouble:ac];
      [ev setDrawBorderAxesWithInt:axis withBoolean:NO];
    }
    else {
      [ev setAxisCrossWithInt:axis withDouble:0];
      [ev setDrawBorderAxesWithInt:axis withBoolean:NO];
    }
    NSString *posAxis = [attrs getWithId:@"positiveAxis"];
    if (posAxis != nil) {
      jboolean isPositive = JavaLangBoolean_parseBooleanWithNSString_(posAxis);
      [ev setPositiveAxisWithInt:axis withBoolean:isPositive];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (void)startKernelElementWithNSString:(NSString *)eName
             withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startKernelElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleAngleUnitWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAngleUnitWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAlgebraStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAlgebraStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelCoordStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKernelCoordStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelInvTrigWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKernelInvTrigWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelDecimalsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKernelDecimalsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelStartAnimationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKernelStartAnimationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelLocalizationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKernelLocalizationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCasSettingsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCasSettingsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelFiguresWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKernelFiguresWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelContinuousWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKernelContinuousWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startGuiElementWithNSString:(NSString *)eName
          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startGuiElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)createCompabilityLayout {
  OrgGeogebraCommonIoMyXMLHandler_createCompabilityLayout(self);
}

+ (jboolean)handleConsProtColumnsWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleConsProtColumnsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

- (jboolean)handleConsProtocolWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleConsProtocolWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleConsProtNavigationBarWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app1
                                          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleConsProtNavigationBarWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, app1, attrs);
}

- (jboolean)handleGuiShowWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app1
                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleGuiShowWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, app1, attrs);
}

+ (jboolean)handleGuiSettingsWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleGuiSettingsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

- (jboolean)handleGraphicsSettingsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleGraphicsSettingsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSplitDividerWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSplitDividerWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleToolbarWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (jboolean)handleWindowSizeWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleWindowSizeWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleFontWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                         withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleFontWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleMenuFontWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                             withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleMenuFontWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleTooltipSettingsWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleTooltipSettingsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleMouseWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleMouseWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleLabelingStyleWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app
                                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleLabelingStyleWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

- (void)startGuiPerspectivesElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startGuiPerspectivesElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handlePerspectiveWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handlePerspectiveWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)endGuiPerspectivesElement {
  OrgGeogebraCommonIoMyXMLHandler_endGuiPerspectivesElement(self);
}

- (void)startGuiPerspectiveElementWithNSString:(NSString *)eName
                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startGuiPerspectiveElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleAlgebraInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAlgebraInputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleDockBarWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleDockBarWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)endGuiPerspectiveElement {
  OrgGeogebraCommonIoMyXMLHandler_endGuiPerspectiveElement(self);
}

- (void)startGuiViewsElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startGuiViewsElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleViewWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleViewWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startGuiPanesElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startGuiPanesElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handlePaneWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handlePaneWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)handleConstructionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)initMacroWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_initMacroWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)endMacro {
  OrgGeogebraCommonIoMyXMLHandler_endMacro(self);
}

- (void)handleWorksheetTextWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_handleWorksheetTextWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startCasCellWithNSString:(NSString *)eName
       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startCasCellWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)endCasCellWithNSString:(NSString *)eName {
  OrgGeogebraCommonIoMyXMLHandler_endCasCellWithNSString_(self, eName);
}

- (void)startCellPair {
  OrgGeogebraCommonIoMyXMLHandler_startCellPair(self);
}

- (void)endCellPairWithNSString:(NSString *)eName {
  OrgGeogebraCommonIoMyXMLHandler_endCellPairWithNSString_(self, eName);
}

- (void)startCellOutputElementWithNSString:(NSString *)eName
                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startCellOutputElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startCellInputElementWithNSString:(NSString *)eName
                withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startCellInputElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startCellTextElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startCellTextElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startDefaultWithNSString:(NSString *)eName
       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startDefaultWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startConstructionElementWithNSString:(NSString *)eName
                   withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startConstructionElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)endConstructionElementWithNSString:(NSString *)eName {
  OrgGeogebraCommonIoMyXMLHandler_endConstructionElementWithNSString_(self, eName);
}

- (void)endDefaultElementWithNSString:(NSString *)eName {
  OrgGeogebraCommonIoMyXMLHandler_endDefaultElementWithNSString_(self, eName);
}

- (void)processEvSizes {
  OrgGeogebraCommonIoMyXMLHandler_processEvSizes(self);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startGeoElementWithNSString:(NSString *)eName
          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if (geo_ == nil) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$C", @"no element set for <", eName, '>'));
    return;
  }
  jboolean ok = YES;
  OrgGeogebraCommonPluginScriptTypeEnum *scriptType = OrgGeogebraCommonPluginScriptTypeEnum_getTypeWithXMLNameWithNSString_(eName);
  if (scriptType != nil) {
    ok = OrgGeogebraCommonIoMyXMLHandler_handleScriptWithJavaUtilLinkedHashMap_withOrgGeogebraCommonPluginScriptTypeEnum_(self, attrs, scriptType);
  }
  else switch (OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'a':
    if ([@"auxiliary" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAuxiliaryWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"animation" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAnimationWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"arcSize" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleArcSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"allowReflexAngle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAllowReflexAngleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"absoluteScreenLocation" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"angleStyle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAngleStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'b':
    if ([@"breakpoint" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleBreakpointWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"bgColor" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleBgColorWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'c':
    if ([@"coords" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCoordsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"coordStyle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCoordStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"caption" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCaptionWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"condition" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleConditionWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"checkbox" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCheckboxWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"coefficients" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCoefficientsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"comboBox" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleComboBoxWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"curveParam" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCurveParamWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'd':
    if ([@"decoration" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleDecorationWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"decimals" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleTextDecimalsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"dimensions" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleDimensionsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'e':
    if ([@"eqnStyle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleEqnStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"eigenvectors" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleEigenvectorsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"emphasizeRightAngle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleEmphasizeRightAngleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'f':
    if ([@"fixed" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleFixedWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"file" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleFileWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"font" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleTextFontWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"forceReflexAngle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleForceReflexAngleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'i':
    if ([@"isLaTeX" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleIsLaTeXWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"inBackground" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleInBackgroundWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"interpolate" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleInterpolateWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'k':
    if ([@"keepTypeOnTransform" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleKeepTypeOnTransformWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'l':
    if ([@"lineStyle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleLineStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"labelOffset" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleLabelOffsetWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"labelMode" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleLabelModeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"layer" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleLayerWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"linkedGeo" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleLinkedGeoWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"length" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleLengthWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"listType" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleListTypeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"listener" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleListenersWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'm':
    if ([@"matrix" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleMatrixWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'o':
    if ([@"objColor" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleObjColorWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"outlyingIntersections" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleOutlyingIntersectionsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'p':
    if ([@"pointSize" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handlePointSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"pointStyle" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handlePointStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 's':
    if ([@"show" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleShowWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"showOnAxis" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleShowOnAxisWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"startPoint" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleStartPointWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"slider" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSliderWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"slopeTriangleSize" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSlopeTriangleSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"significantfigures" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleTextFiguresWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"spreadsheetTrace" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetTraceWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"showTrimmed" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleShowTrimmedWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"selectionAllowed" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSelectionAllowedWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"selectedIndex" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSelectedIndexWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 't':
    if ([@"trace" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleTraceWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"tooltipMode" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleTooltipModeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"tag" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleExtraTagWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"tags" isEqual:eName]) {
      ok = YES;
      break;
    }
    case 'u':
    if ([@"userinput" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleUserInputWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'v':
    if ([@"value" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleValueWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <element>: ", eName));
  }
  if (!ok) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <element>: ", eName));
  }
}

- (jboolean)handleDimensionsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleDimensionsWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (jchar)firstCharWithNSString:(NSString *)eName {
  return OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName);
}

- (jboolean)handleShowWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleShowWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleShowOnAxisWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleShowOnAxisWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleObjColorWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleObjColorWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleBgColorWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleBgColorWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (OrgGeogebraCommonAwtGColor *)handleColorAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
}

+ (OrgGeogebraCommonAwtGColor *)handleColorAlphaAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleColorAlphaAttrsWithJavaUtilLinkedHashMap_(attrs);
}

- (jboolean)handleLineStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleLineStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleDecorationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleDecorationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleEqnStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleEqnStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCurveParamWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCurveParamWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCoordsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCoordsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCoordStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCoordStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleListenersWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleListenersWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCaptionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCaptionWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleScriptWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs
        withOrgGeogebraCommonPluginScriptTypeEnum:(OrgGeogebraCommonPluginScriptTypeEnum *)type {
  return OrgGeogebraCommonIoMyXMLHandler_handleScriptWithJavaUtilLinkedHashMap_withOrgGeogebraCommonPluginScriptTypeEnum_(self, attrs, type);
}

- (jboolean)handleConditionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleConditionWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCheckboxWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCheckboxWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleValueWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleValueWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handlePointSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handlePointSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handlePointStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handlePointStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleLayerWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleLayerWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCasCellInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCasCellInputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCasCellOutputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCasCellOutputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSliderWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSliderWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTraceWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleTraceWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetTraceWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetTraceWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleShowTrimmedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleShowTrimmedWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSelectionAllowedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSelectionAllowedWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSelectedIndexWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSelectedIndexWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAnimationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAnimationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleFixedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleFixedWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleBreakpointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleBreakpointWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleFileWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleFileWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTextFontWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleTextFontWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTextDecimalsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleTextDecimalsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTextFiguresWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleTextFiguresWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleInBackgroundWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleInBackgroundWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleInterpolateWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleInterpolateWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAuxiliaryWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAuxiliaryWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleIsLaTeXWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleIsLaTeXWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleArcSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleArcSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAllowReflexAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAllowReflexAngleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleEmphasizeRightAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleEmphasizeRightAngleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleComboBoxWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleComboBoxWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAngleStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAngleStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleForceReflexAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleForceReflexAngleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleOutlyingIntersectionsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleOutlyingIntersectionsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKeepTypeOnTransformWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleKeepTypeOnTransformWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSlopeTriangleSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleSlopeTriangleSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleStartPointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleStartPointWithJavaUtilLinkedHashMap_(self, attrs);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)handleAbsoluteStartPointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  jdouble x = JavaLangDouble_NaN;
  jdouble y = JavaLangDouble_NaN;
  jdouble z = JavaLangDouble_NaN;
  x = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
  y = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y"]);
  z = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"z"]);
  OrgGeogebraCommonKernelGeosGeoPoint *p = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [p setCoordsWithDouble:x withDouble:y withDouble:z];
  return p;
}

- (void)processStartPointList {
  OrgGeogebraCommonIoMyXMLHandler_processStartPointList(self);
}

- (jboolean)handleLengthWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleLengthWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleListTypeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleListTypeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleLinkedGeoWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleLinkedGeoWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)processLinkedGeoList {
  OrgGeogebraCommonIoMyXMLHandler_processLinkedGeoList(self);
}

- (void)processShowObjectConditionList {
  OrgGeogebraCommonIoMyXMLHandler_processShowObjectConditionList(self);
}

- (void)processAnimationSpeedList {
  OrgGeogebraCommonIoMyXMLHandler_processAnimationSpeedList(self);
}

- (void)processAnimationStepList {
  OrgGeogebraCommonIoMyXMLHandler_processAnimationStepList(self);
}

- (void)processAnimatingList {
  OrgGeogebraCommonIoMyXMLHandler_processAnimatingList(self);
}

- (void)processMinMaxList {
  OrgGeogebraCommonIoMyXMLHandler_processMinMaxList(self);
}

- (void)processDynamicColorList {
  OrgGeogebraCommonIoMyXMLHandler_processDynamicColorList(self);
}

- (jboolean)handleEigenvectorsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleEigenvectorsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleMatrixWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleMatrixWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isGeoConic]) {
    OrgGeogebraCommonKernelKernelNDGeoConicND *conic = (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo_, [OrgGeogebraCommonKernelKernelNDGeoConicND class]);
    IOSDoubleArray *matrix = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"A0"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A1"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A2"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A3"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A4"]), OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A5"]) } count:6];
    [conic setMatrixWithDoubleArray:matrix];
  }
}

- (jboolean)handleLabelOffsetWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleLabelOffsetWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleLabelModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleLabelModeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTooltipModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleTooltipModeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCoefficientsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCoefficientsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleUserInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleUserInputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (OrgGeogebraCommonKernelArithmeticCommand *)getCommandWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_getCommandWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startCommandElementWithNSString:(NSString *)eName
              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startCommandElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleCmdInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCmdInputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCmdOutputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCmdOutputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCmdOutputSizesWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleCmdOutputSizesWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (IOSObjectArray *)getAttributeStringsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(attrs);
}

- (void)startExpressionElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  OrgGeogebraCommonIoMyXMLHandler_startExpressionElementWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAlgebraViewModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewModeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)parseBooleanWithNSString:(NSString *)str {
  return [@"true" isEqual:str];
}

- (jboolean)parseBooleanRevWithNSString:(NSString *)str {
  return ![@"false" isEqual:str];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonIoMyXMLHandler class]) {
    OrgGeogebraCommonIoMyXMLHandler_FORMAT_ = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(OrgGeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_());
    OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_ = [IOSIntArray newArrayWithInts:(jint[]){ 12, 14, 16, 18, 20, 24, 28, 32, 48 } count:9];
    OrgGeogebraCommonIoMyXMLHandler_tooltipTimeouts_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"1", @"3", @"5", @"10", @"20", @"30", @"60", @"0" } count:8 type:NSString_class_()];
    OrgGeogebraCommonIoMyXMLHandler_cbTimeoutOptions_ = [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(30), JavaLangInteger_valueOfWithInt_(60) } count:5 type:JavaLangInteger_class_()];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonIoMyXMLHandler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelConstruction:", "MyXMLHandler", NULL, 0x1, NULL, NULL },
    { "resetWithBoolean:", "reset", "V", 0x2, NULL, NULL },
    { "initKernelVars", NULL, "V", 0x2, NULL, NULL },
    { "getConsStep", NULL, "I", 0x1, NULL, NULL },
    { "getTimeoutOptionWithLong:", "getTimeoutOption", "Ljava.lang.Integer;", 0x9, NULL, NULL },
    { "textWithNSString:", "text", "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "startDocument", NULL, "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "endDocument", NULL, "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "startElementWithNSString:withJavaUtilLinkedHashMap:", "startElement", "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "startScriptingElementWithJavaUtilLinkedHashMap:", "startScriptingElement", "V", 0x2, NULL, NULL },
    { "endElementWithNSString:", "endElement", "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "startGeoGebraElementWithNSString:withJavaUtilLinkedHashMap:", "startGeoGebraElement", "V", 0x2, NULL, NULL },
    { "handleKeyboardWithJavaUtilLinkedHashMap:", "handleKeyboard", "V", 0x2, NULL, NULL },
    { "startMacroElementWithNSString:withJavaUtilLinkedHashMap:", "startMacroElement", "V", 0x2, NULL, NULL },
    { "startEuclidianView3DElementWithNSString:withJavaUtilLinkedHashMap:", "startEuclidianView3DElement", "V", 0x4, NULL, NULL },
    { "startEuclidianViewElementCheckViewIdWithNSString:withJavaUtilLinkedHashMap:", "startEuclidianViewElementCheckViewId", "V", 0x4, NULL, NULL },
    { "startEuclidianViewElementSwitchWithNSString:withJavaUtilLinkedHashMap:withChar:", "startEuclidianViewElementSwitch", "Z", 0x4, NULL, NULL },
    { "handleExtraTagWithJavaUtilLinkedHashMap:", "handleExtraTag", "Z", 0x2, NULL, NULL },
    { "startEuclidianViewElementWithNSString:withJavaUtilLinkedHashMap:", "startEuclidianViewElement", "V", 0x2, NULL, NULL },
    { "startSpreadsheetViewElementWithNSString:withJavaUtilLinkedHashMap:", "startSpreadsheetViewElement", "V", 0x2, NULL, NULL },
    { "startDataCollectionViewElementWithNSString:withJavaUtilLinkedHashMap:", "startDataCollectionViewElement", "V", 0x2, NULL, NULL },
    { "startProbabilityCalculatorElementWithNSString:withJavaUtilLinkedHashMap:", "startProbabilityCalculatorElement", "V", 0x2, NULL, NULL },
    { "handleProbabilityDistributionWithJavaUtilLinkedHashMap:", "handleProbabilityDistribution", "Z", 0x2, NULL, NULL },
    { "handleProbabilityIntervalWithJavaUtilLinkedHashMap:", "handleProbabilityInterval", "Z", 0x2, NULL, NULL },
    { "startAlgebraViewElementWithNSString:withJavaUtilLinkedHashMap:", "startAlgebraViewElement", "V", 0x2, NULL, NULL },
    { "handleCoordSystemWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleCoordSystem", "Z", 0x2, NULL, NULL },
    { "handleEvSettingsWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleEvSettings", "Z", 0x4, NULL, NULL },
    { "handleEvSizeWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleEvSize", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetSizeWithJavaUtilLinkedHashMap:", "handleSpreadsheetSize", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetColumnWithJavaUtilLinkedHashMap:", "handleSpreadsheetColumn", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap:", "handleSpreadsheetCellSize", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetFormatWithJavaUtilLinkedHashMap:", "handleSpreadsheetFormat", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetRowWithJavaUtilLinkedHashMap:", "handleSpreadsheetRow", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetLayoutWithJavaUtilLinkedHashMap:", "handleSpreadsheetLayout", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap:", "handleSpreadsheetInitalSelection", "Z", 0x2, NULL, NULL },
    { "handleBgColorWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleBgColor", "Z", 0xc, NULL, NULL },
    { "handleAxesColorWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleAxesColor", "Z", 0xa, NULL, NULL },
    { "handleGridColorWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleGridColor", "Z", 0xa, NULL, NULL },
    { "handleLineStyleWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleLineStyle", "Z", 0xa, NULL, NULL },
    { "handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleGrid", "Z", 0xa, NULL, NULL },
    { "handleAxisWithOrgGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleAxis", "Z", 0x4, NULL, NULL },
    { "startKernelElementWithNSString:withJavaUtilLinkedHashMap:", "startKernelElement", "V", 0x2, NULL, NULL },
    { "handleAngleUnitWithJavaUtilLinkedHashMap:", "handleAngleUnit", "Z", 0x2, NULL, NULL },
    { "handleAlgebraStyleWithJavaUtilLinkedHashMap:", "handleAlgebraStyle", "Z", 0x2, NULL, NULL },
    { "handleKernelCoordStyleWithJavaUtilLinkedHashMap:", "handleKernelCoordStyle", "Z", 0x2, NULL, NULL },
    { "handleKernelInvTrigWithJavaUtilLinkedHashMap:", "handleKernelInvTrig", "Z", 0x2, NULL, NULL },
    { "handleKernelDecimalsWithJavaUtilLinkedHashMap:", "handleKernelDecimals", "Z", 0x2, NULL, NULL },
    { "handleKernelStartAnimationWithJavaUtilLinkedHashMap:", "handleKernelStartAnimation", "Z", 0x2, NULL, NULL },
    { "handleKernelLocalizationWithJavaUtilLinkedHashMap:", "handleKernelLocalization", "Z", 0x2, NULL, NULL },
    { "handleCasSettingsWithJavaUtilLinkedHashMap:", "handleCasSettings", "Z", 0x2, NULL, NULL },
    { "handleKernelFiguresWithJavaUtilLinkedHashMap:", "handleKernelFigures", "Z", 0x2, NULL, NULL },
    { "handleKernelContinuousWithJavaUtilLinkedHashMap:", "handleKernelContinuous", "Z", 0x2, NULL, NULL },
    { "handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap:", "handleKernelUsePathAndRegionParameters", "Z", 0x2, NULL, NULL },
    { "startGuiElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiElement", "V", 0x2, NULL, NULL },
    { "createCompabilityLayout", NULL, "V", 0x2, NULL, NULL },
    { "handleConsProtColumnsWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleConsProtColumns", "Z", 0xa, NULL, NULL },
    { "handleConsProtocolWithJavaUtilLinkedHashMap:", "handleConsProtocol", "Z", 0x2, NULL, NULL },
    { "handleConsProtNavigationBarWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleConsProtNavigationBar", "Z", 0x2, NULL, NULL },
    { "handleGuiShowWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleGuiShow", "Z", 0x2, NULL, NULL },
    { "handleGuiSettingsWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleGuiSettings", "Z", 0xa, NULL, NULL },
    { "handleGraphicsSettingsWithJavaUtilLinkedHashMap:", "handleGraphicsSettings", "Z", 0x2, NULL, NULL },
    { "handleSplitDividerWithJavaUtilLinkedHashMap:", "handleSplitDivider", "Z", 0x2, NULL, NULL },
    { "handleToolbarWithJavaUtilLinkedHashMap:", "handleToolbar", "Z", 0x2, NULL, NULL },
    { "handleWindowSizeWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleWindowSize", "Z", 0xa, NULL, NULL },
    { "handleFontWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleFont", "Z", 0xa, NULL, NULL },
    { "handleMenuFontWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleMenuFont", "Z", 0xa, NULL, NULL },
    { "handleTooltipSettingsWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleTooltipSettings", "Z", 0xa, NULL, NULL },
    { "handleMouseWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleMouse", "Z", 0xa, NULL, NULL },
    { "handleLabelingStyleWithOrgGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleLabelingStyle", "Z", 0xa, NULL, NULL },
    { "startGuiPerspectivesElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiPerspectivesElement", "V", 0x2, NULL, NULL },
    { "handlePerspectiveWithJavaUtilLinkedHashMap:", "handlePerspective", "Z", 0x2, NULL, NULL },
    { "endGuiPerspectivesElement", NULL, "V", 0x2, NULL, NULL },
    { "startGuiPerspectiveElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiPerspectiveElement", "V", 0x2, NULL, NULL },
    { "handleAlgebraInputWithJavaUtilLinkedHashMap:", "handleAlgebraInput", "Z", 0x2, NULL, NULL },
    { "handleDockBarWithJavaUtilLinkedHashMap:", "handleDockBar", "Z", 0x2, NULL, NULL },
    { "endGuiPerspectiveElement", NULL, "V", 0x2, NULL, NULL },
    { "startGuiViewsElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiViewsElement", "V", 0x2, NULL, NULL },
    { "handleViewWithJavaUtilLinkedHashMap:", "handleView", "Z", 0x2, NULL, NULL },
    { "startGuiPanesElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiPanesElement", "V", 0x2, NULL, NULL },
    { "handlePaneWithJavaUtilLinkedHashMap:", "handlePane", "Z", 0x2, NULL, NULL },
    { "handleConstructionWithJavaUtilLinkedHashMap:", "handleConstruction", "V", 0x2, NULL, NULL },
    { "initMacroWithJavaUtilLinkedHashMap:", "initMacro", "V", 0x2, NULL, NULL },
    { "endMacro", NULL, "V", 0x2, NULL, NULL },
    { "handleWorksheetTextWithJavaUtilLinkedHashMap:", "handleWorksheetText", "V", 0x2, NULL, NULL },
    { "startCasCellWithNSString:withJavaUtilLinkedHashMap:", "startCasCell", "V", 0x2, NULL, NULL },
    { "endCasCellWithNSString:", "endCasCell", "V", 0x2, NULL, NULL },
    { "startCellPair", NULL, "V", 0x2, NULL, NULL },
    { "endCellPairWithNSString:", "endCellPair", "V", 0x2, NULL, NULL },
    { "startCellOutputElementWithNSString:withJavaUtilLinkedHashMap:", "startCellOutputElement", "V", 0x2, NULL, NULL },
    { "startCellInputElementWithNSString:withJavaUtilLinkedHashMap:", "startCellInputElement", "V", 0x2, NULL, NULL },
    { "startCellTextElementWithNSString:withJavaUtilLinkedHashMap:", "startCellTextElement", "V", 0x2, NULL, NULL },
    { "startDefaultWithNSString:withJavaUtilLinkedHashMap:", "startDefault", "V", 0x2, NULL, NULL },
    { "startConstructionElementWithNSString:withJavaUtilLinkedHashMap:", "startConstructionElement", "V", 0x2, NULL, NULL },
    { "endConstructionElementWithNSString:", "endConstructionElement", "V", 0x2, NULL, NULL },
    { "endDefaultElementWithNSString:", "endDefaultElement", "V", 0x2, NULL, NULL },
    { "processEvSizes", NULL, "V", 0x2, NULL, NULL },
    { "getGeoElementWithJavaUtilLinkedHashMap:", "getGeoElement", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "startGeoElementWithNSString:withJavaUtilLinkedHashMap:", "startGeoElement", "V", 0x4, NULL, NULL },
    { "handleDimensionsWithJavaUtilLinkedHashMap:", "handleDimensions", "Z", 0x2, NULL, NULL },
    { "firstCharWithNSString:", "firstChar", "C", 0xa, NULL, NULL },
    { "handleShowWithJavaUtilLinkedHashMap:", "handleShow", "Z", 0x2, NULL, NULL },
    { "handleShowOnAxisWithJavaUtilLinkedHashMap:", "handleShowOnAxis", "Z", 0x2, NULL, NULL },
    { "handleObjColorWithJavaUtilLinkedHashMap:", "handleObjColor", "Z", 0x2, NULL, NULL },
    { "handleBgColorWithJavaUtilLinkedHashMap:", "handleBgColor", "Z", 0x2, NULL, NULL },
    { "handleColorAttrsWithJavaUtilLinkedHashMap:", "handleColorAttrs", "Lorg.geogebra.common.awt.GColor;", 0xa, NULL, NULL },
    { "handleColorAlphaAttrsWithJavaUtilLinkedHashMap:", "handleColorAlphaAttrs", "Lorg.geogebra.common.awt.GColor;", 0xa, NULL, NULL },
    { "handleLineStyleWithJavaUtilLinkedHashMap:", "handleLineStyle", "Z", 0x2, NULL, NULL },
    { "handleDecorationWithJavaUtilLinkedHashMap:", "handleDecoration", "Z", 0x2, NULL, NULL },
    { "handleEqnStyleWithJavaUtilLinkedHashMap:", "handleEqnStyle", "Z", 0x2, NULL, NULL },
    { "handleCurveParamWithJavaUtilLinkedHashMap:", "handleCurveParam", "Z", 0x2, NULL, NULL },
    { "handleCoordsWithJavaUtilLinkedHashMap:", "handleCoords", "Z", 0x2, NULL, NULL },
    { "handleCoordStyleWithJavaUtilLinkedHashMap:", "handleCoordStyle", "Z", 0x2, NULL, NULL },
    { "handleListenersWithJavaUtilLinkedHashMap:", "handleListeners", "Z", 0x2, NULL, NULL },
    { "handleCaptionWithJavaUtilLinkedHashMap:", "handleCaption", "Z", 0x2, NULL, NULL },
    { "handleScriptWithJavaUtilLinkedHashMap:withOrgGeogebraCommonPluginScriptTypeEnum:", "handleScript", "Z", 0x2, NULL, NULL },
    { "handleConditionWithJavaUtilLinkedHashMap:", "handleCondition", "Z", 0x2, NULL, NULL },
    { "handleCheckboxWithJavaUtilLinkedHashMap:", "handleCheckbox", "Z", 0x2, NULL, NULL },
    { "handleValueWithJavaUtilLinkedHashMap:", "handleValue", "Z", 0x2, NULL, NULL },
    { "handlePointSizeWithJavaUtilLinkedHashMap:", "handlePointSize", "Z", 0x2, NULL, NULL },
    { "handlePointStyleWithJavaUtilLinkedHashMap:", "handlePointStyle", "Z", 0x2, NULL, NULL },
    { "handleLayerWithJavaUtilLinkedHashMap:", "handleLayer", "Z", 0x2, NULL, NULL },
    { "handleCasCellInputWithJavaUtilLinkedHashMap:", "handleCasCellInput", "Z", 0x2, NULL, NULL },
    { "handleCasCellOutputWithJavaUtilLinkedHashMap:", "handleCasCellOutput", "Z", 0x2, NULL, NULL },
    { "handleSliderWithJavaUtilLinkedHashMap:", "handleSlider", "Z", 0x2, NULL, NULL },
    { "handleTraceWithJavaUtilLinkedHashMap:", "handleTrace", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetTraceWithJavaUtilLinkedHashMap:", "handleSpreadsheetTrace", "Z", 0x2, NULL, NULL },
    { "handleShowTrimmedWithJavaUtilLinkedHashMap:", "handleShowTrimmed", "Z", 0x2, NULL, NULL },
    { "handleSelectionAllowedWithJavaUtilLinkedHashMap:", "handleSelectionAllowed", "Z", 0x2, NULL, NULL },
    { "handleSelectedIndexWithJavaUtilLinkedHashMap:", "handleSelectedIndex", "Z", 0x2, NULL, NULL },
    { "handleAnimationWithJavaUtilLinkedHashMap:", "handleAnimation", "Z", 0x2, NULL, NULL },
    { "handleFixedWithJavaUtilLinkedHashMap:", "handleFixed", "Z", 0x2, NULL, NULL },
    { "handleBreakpointWithJavaUtilLinkedHashMap:", "handleBreakpoint", "Z", 0x2, NULL, NULL },
    { "handleFileWithJavaUtilLinkedHashMap:", "handleFile", "Z", 0x2, NULL, NULL },
    { "handleTextFontWithJavaUtilLinkedHashMap:", "handleTextFont", "Z", 0x2, NULL, NULL },
    { "handleTextDecimalsWithJavaUtilLinkedHashMap:", "handleTextDecimals", "Z", 0x2, NULL, NULL },
    { "handleTextFiguresWithJavaUtilLinkedHashMap:", "handleTextFigures", "Z", 0x2, NULL, NULL },
    { "handleInBackgroundWithJavaUtilLinkedHashMap:", "handleInBackground", "Z", 0x2, NULL, NULL },
    { "handleInterpolateWithJavaUtilLinkedHashMap:", "handleInterpolate", "Z", 0x2, NULL, NULL },
    { "handleAuxiliaryWithJavaUtilLinkedHashMap:", "handleAuxiliary", "Z", 0x2, NULL, NULL },
    { "handleIsLaTeXWithJavaUtilLinkedHashMap:", "handleIsLaTeX", "Z", 0x2, NULL, NULL },
    { "handleArcSizeWithJavaUtilLinkedHashMap:", "handleArcSize", "Z", 0x2, NULL, NULL },
    { "handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap:", "handleAbsoluteScreenLocation", "Z", 0x2, NULL, NULL },
    { "handleAllowReflexAngleWithJavaUtilLinkedHashMap:", "handleAllowReflexAngle", "Z", 0x2, NULL, NULL },
    { "handleEmphasizeRightAngleWithJavaUtilLinkedHashMap:", "handleEmphasizeRightAngle", "Z", 0x2, NULL, NULL },
    { "handleComboBoxWithJavaUtilLinkedHashMap:", "handleComboBox", "Z", 0x2, NULL, NULL },
    { "handleAngleStyleWithJavaUtilLinkedHashMap:", "handleAngleStyle", "Z", 0x2, NULL, NULL },
    { "handleForceReflexAngleWithJavaUtilLinkedHashMap:", "handleForceReflexAngle", "Z", 0x2, NULL, NULL },
    { "handleOutlyingIntersectionsWithJavaUtilLinkedHashMap:", "handleOutlyingIntersections", "Z", 0x2, NULL, NULL },
    { "handleKeepTypeOnTransformWithJavaUtilLinkedHashMap:", "handleKeepTypeOnTransform", "Z", 0x2, NULL, NULL },
    { "handleSlopeTriangleSizeWithJavaUtilLinkedHashMap:", "handleSlopeTriangleSize", "Z", 0x2, NULL, NULL },
    { "handleStartPointWithJavaUtilLinkedHashMap:", "handleStartPoint", "Z", 0x2, NULL, NULL },
    { "handleAbsoluteStartPointWithJavaUtilLinkedHashMap:", "handleAbsoluteStartPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "processStartPointList", NULL, "V", 0x2, NULL, NULL },
    { "handleLengthWithJavaUtilLinkedHashMap:", "handleLength", "Z", 0x2, NULL, NULL },
    { "handleListTypeWithJavaUtilLinkedHashMap:", "handleListType", "Z", 0x2, NULL, NULL },
    { "handleLinkedGeoWithJavaUtilLinkedHashMap:", "handleLinkedGeo", "Z", 0x2, NULL, NULL },
    { "processLinkedGeoList", NULL, "V", 0x2, NULL, NULL },
    { "processShowObjectConditionList", NULL, "V", 0x2, NULL, NULL },
    { "processAnimationSpeedList", NULL, "V", 0x2, NULL, NULL },
    { "processAnimationStepList", NULL, "V", 0x2, NULL, NULL },
    { "processAnimatingList", NULL, "V", 0x2, NULL, NULL },
    { "processMinMaxList", NULL, "V", 0x2, NULL, NULL },
    { "processDynamicColorList", NULL, "V", 0x2, NULL, NULL },
    { "handleEigenvectorsWithJavaUtilLinkedHashMap:", "handleEigenvectors", "Z", 0x2, NULL, NULL },
    { "handleMatrixWithJavaUtilLinkedHashMap:", "handleMatrix", "Z", 0x2, NULL, NULL },
    { "handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:", "handleMatrixConicOrQuadric", "V", 0x4, "Ljava.lang.Exception;", NULL },
    { "handleLabelOffsetWithJavaUtilLinkedHashMap:", "handleLabelOffset", "Z", 0x2, NULL, NULL },
    { "handleLabelModeWithJavaUtilLinkedHashMap:", "handleLabelMode", "Z", 0x2, NULL, NULL },
    { "handleTooltipModeWithJavaUtilLinkedHashMap:", "handleTooltipMode", "Z", 0x2, NULL, NULL },
    { "handleCoefficientsWithJavaUtilLinkedHashMap:", "handleCoefficients", "Z", 0x2, NULL, NULL },
    { "handleUserInputWithJavaUtilLinkedHashMap:", "handleUserInput", "Z", 0x2, NULL, NULL },
    { "getCommandWithJavaUtilLinkedHashMap:", "getCommand", "Lorg.geogebra.common.kernel.arithmetic.Command;", 0x2, NULL, NULL },
    { "startCommandElementWithNSString:withJavaUtilLinkedHashMap:", "startCommandElement", "V", 0x2, NULL, NULL },
    { "handleCmdInputWithJavaUtilLinkedHashMap:", "handleCmdInput", "Z", 0x2, NULL, NULL },
    { "handleCmdOutputWithJavaUtilLinkedHashMap:", "handleCmdOutput", "Z", 0x2, NULL, NULL },
    { "handleCmdOutputSizesWithJavaUtilLinkedHashMap:", "handleCmdOutputSizes", "Z", 0x2, NULL, NULL },
    { "getAttributeStringsWithJavaUtilLinkedHashMap:", "getAttributeStrings", "[Ljava.lang.String;", 0xa, NULL, NULL },
    { "startExpressionElementWithJavaUtilLinkedHashMap:", "startExpressionElement", "V", 0x2, NULL, NULL },
    { "handleAlgebraViewModeWithJavaUtilLinkedHashMap:", "handleAlgebraViewMode", "Z", 0x2, NULL, NULL },
    { "handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap:", "handleAlgebraViewShowAuxiliaryObjects", "Z", 0x2, NULL, NULL },
    { "handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap:", "handleAlgebraViewCollapsedNodes", "Z", 0x2, NULL, NULL },
    { "parseBooleanWithNSString:", "parseBoolean", "Z", 0x4, NULL, NULL },
    { "parseBooleanRevWithNSString:", "parseBooleanRev", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FORMAT_", NULL, 0x1a, "D", &OrgGeogebraCommonIoMyXMLHandler_FORMAT_, NULL,  },
    { "MODE_INVALID_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_INVALID },
    { "MODE_GEOGEBRA_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA },
    { "MODE_MACRO_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_MACRO },
    { "MODE_EUCLIDIAN_VIEW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW },
    { "MODE_EUCLIDIAN_VIEW3D_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW3D },
    { "MODE_SPREADSHEET_VIEW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW },
    { "MODE_ALGEBRA_VIEW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW },
    { "MODE_DATA_COLLECTION_VIEW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_DATA_COLLECTION_VIEW },
    { "MODE_CONST_CAS_CELL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL },
    { "MODE_CAS_CELL_PAIR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR },
    { "MODE_CAS_INPUT_CELL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL },
    { "MODE_CAS_OUTPUT_CELL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL },
    { "MODE_CAS_TEXT_CELL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL },
    { "MODE_PROBABILITY_CALCULATOR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR },
    { "MODE_KERNEL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_KERNEL },
    { "MODE_CONSTRUCTION_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION },
    { "MODE_CONST_GEO_ELEMENT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT },
    { "MODE_CONST_COMMAND_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND },
    { "MODE_GUI_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI },
    { "MODE_GUI_PERSPECTIVES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES },
    { "MODE_GUI_PERSPECTIVE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE },
    { "MODE_GUI_PERSPECTIVE_PANES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES },
    { "MODE_GUI_PERSPECTIVE_VIEWS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS },
    { "MODE_DEFAULTS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS },
    { "MODE_DEFAULT_GEO_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULT_GEO },
    { "menuFontSizes_", NULL, 0x19, "[I", &OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_, NULL,  },
    { "tooltipTimeouts_", NULL, 0x19, "[Ljava.lang.String;", &OrgGeogebraCommonIoMyXMLHandler_tooltipTimeouts_, NULL,  },
    { "cbTimeoutOptions_", NULL, 0x19, "[Ljava.lang.Integer;", &OrgGeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, NULL,  },
    { "JSplitPane_HORIZONTAL_SPLIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT },
    { "JSplitPane_VERTICAL_SPLIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonIoMyXMLHandler_JSplitPane_VERTICAL_SPLIT },
    { "MIN_TEXT_SIZE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonIoMyXMLHandler_MIN_TEXT_SIZE },
    { "mode_", NULL, 0x2, "I", NULL, NULL,  },
    { "constMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "casMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "geo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "geoCasCell_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoCasCell;", NULL, NULL,  },
    { "cmd_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Command;", NULL, NULL,  },
    { "macro_", NULL, 0x2, "Lorg.geogebra.common.kernel.Macro;", NULL, NULL,  },
    { "app_", NULL, 0x14, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x14, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "macroInputLabels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "macroOutputLabels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "cmdOutput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "startAnimation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "docPointStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "origKernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x4, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "origCons_", NULL, 0x2, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "parser_", NULL, 0x2, "Lorg.geogebra.common.kernel.parser.Parser;", NULL, NULL,  },
    { "origParser_", NULL, 0x2, "Lorg.geogebra.common.kernel.parser.Parser;", NULL, NULL,  },
    { "startPointList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/io/MyXMLHandler$LocateableExpPair;>;",  },
    { "linkedGeoList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "showObjectConditionList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "dynamicColorList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "animationSpeedList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "animationStepList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "animatingList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "minMaxList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/io/MyXMLHandler$GeoNumericMinMax;>;",  },
    { "consStep_", NULL, 0x2, "I", NULL, NULL,  },
    { "ggbFileFormat_", NULL, 0x2, "D", NULL, NULL,  },
    { "hasGuiElement_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmp_perspective_", NULL, 0x2, "Lorg.geogebra.common.io.layout.Perspective;", NULL, NULL,  },
    { "tmp_perspectives_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/io/layout/Perspective;>;",  },
    { "tmp_panes_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/io/layout/DockSplitPaneData;>;",  },
    { "tmp_views_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/io/layout/DockPanelData;>;",  },
    { "tmp_sp1_", NULL, 0x2, "I", NULL, NULL,  },
    { "tmp_sp2_", NULL, 0x2, "I", NULL, NULL,  },
    { "tmp_spHorizontal_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmp_showAlgebra_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmp_showSpreadsheet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "resetEVsettingsNeeded_", NULL, 0x4, "Z", NULL, NULL,  },
    { "evSet_", NULL, 0x4, "Lorg.geogebra.common.main.settings.EuclidianSettings;", NULL, NULL,  },
    { "xmin_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/main/settings/EuclidianSettings;Ljava/lang/String;>;",  },
    { "xmax_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/main/settings/EuclidianSettings;Ljava/lang/String;>;",  },
    { "ymin_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/main/settings/EuclidianSettings;Ljava/lang/String;>;",  },
    { "ymax_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/main/settings/EuclidianSettings;Ljava/lang/String;>;",  },
    { "isPreferencesXML_", NULL, 0xa, "Z", &OrgGeogebraCommonIoMyXMLHandler_isPreferencesXML_, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.io.MyXMLHandler$GeoExpPair;", "Lorg.geogebra.common.io.MyXMLHandler$GeoNumericMinMax;", "Lorg.geogebra.common.io.MyXMLHandler$LocateableExpPair;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonIoMyXMLHandler = { 2, "MyXMLHandler", "org.geogebra.common.io", NULL, 0x1, 183, methods, 79, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonIoMyXMLHandler;
}

@end

void OrgGeogebraCommonIoMyXMLHandler_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelConstruction *cons) {
  (void) NSObject_init(self);
  self->startPointList_ = new_JavaUtilLinkedList_init();
  self->linkedGeoList_ = new_JavaUtilLinkedList_init();
  self->showObjectConditionList_ = new_JavaUtilLinkedList_init();
  self->dynamicColorList_ = new_JavaUtilLinkedList_init();
  self->animationSpeedList_ = new_JavaUtilLinkedList_init();
  self->animationStepList_ = new_JavaUtilLinkedList_init();
  self->animatingList_ = new_JavaUtilLinkedList_init();
  self->minMaxList_ = new_JavaUtilLinkedList_init();
  self->hasGuiElement_ = NO;
  self->tmp_perspectives_ = new_JavaUtilArrayList_init();
  self->resetEVsettingsNeeded_ = NO;
  self->evSet_ = nil;
  self->xmin_ = new_JavaUtilHashMap_init();
  self->xmax_ = new_JavaUtilHashMap_init();
  self->ymin_ = new_JavaUtilHashMap_init();
  self->ymax_ = new_JavaUtilHashMap_init();
  self->origKernel_ = kernel;
  self->origCons_ = cons;
  self->origParser_ = new_OrgGeogebraCommonKernelParserParser_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(self->origKernel_, self->origCons_);
  self->app_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->origKernel_)) getApplication];
  self->loc_ = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization];
  OrgGeogebraCommonIoMyXMLHandler_initKernelVars(self);
  self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_INVALID;
  self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
}

OrgGeogebraCommonIoMyXMLHandler *new_OrgGeogebraCommonIoMyXMLHandler_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonIoMyXMLHandler *self = [OrgGeogebraCommonIoMyXMLHandler alloc];
  OrgGeogebraCommonIoMyXMLHandler_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(self, kernel, cons);
  return self;
}

void OrgGeogebraCommonIoMyXMLHandler_resetWithBoolean_(OrgGeogebraCommonIoMyXMLHandler *self, jboolean start) {
  [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->animationStepList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) clear];
  if (start) self->consStep_ = -2;
  self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_INVALID;
  self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
  self->hasGuiElement_ = NO;
  OrgGeogebraCommonIoMyXMLHandler_initKernelVars(self);
  [((JavaUtilHashMap *) nil_chk(self->xmin_)) clear];
  [((JavaUtilHashMap *) nil_chk(self->xmax_)) clear];
  [((JavaUtilHashMap *) nil_chk(self->ymin_)) clear];
  [((JavaUtilHashMap *) nil_chk(self->ymax_)) clear];
}

void OrgGeogebraCommonIoMyXMLHandler_initKernelVars(OrgGeogebraCommonIoMyXMLHandler *self) {
  self->kernel_ = self->origKernel_;
  self->parser_ = self->origParser_;
  self->cons_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->origKernel_)) getConstruction];
}

JavaLangInteger *OrgGeogebraCommonIoMyXMLHandler_getTimeoutOptionWithLong_(jlong integer) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(OrgGeogebraCommonIoMyXMLHandler_cbTimeoutOptions_))->size_; i++) if ([((JavaLangInteger *) nil_chk(IOSObjectArray_Get(OrgGeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, i))) intValue] == integer) return IOSObjectArray_Get(OrgGeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, i);
  return IOSObjectArray_Get(OrgGeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, 0);
}

void OrgGeogebraCommonIoMyXMLHandler_startScriptingElementWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *scriptingLanguage = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"language"];
    [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) setScriptingLanguageWithNSString:scriptingLanguage];
    jboolean blockScripting = [@"true" isEqual:[attrs getWithId:@"blocked"]];
    [self->app_ setBlockUpdateScriptsWithBoolean:blockScripting];
    jboolean scriptingDisabled = [@"true" isEqual:[attrs getWithId:@"disabled"]];
    [self->app_ setScriptingDisabledWithBoolean:scriptingDisabled];
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_errorWithNSString_(@"error in element <scripting>");
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startGeoGebraElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if ([@"euclidianView" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW;
    self->resetEVsettingsNeeded_ = YES;
  }
  else if ([@"euclidianView3D" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW3D;
    self->resetEVsettingsNeeded_ = YES;
  }
  else if ([@"algebraView" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW;
  }
  else if ([@"kernel" isEqual:eName]) {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setUsePathAndRegionParametersWithOrgGeogebraCommonKernelPathRegionHandlingEnum:OrgGeogebraCommonKernelPathRegionHandlingEnum_get_ON()];
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_KERNEL;
  }
  else if ([@"spreadsheetView" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW;
  }
  else if ([@"dataCollectionView" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_DATA_COLLECTION_VIEW;
  }
  else if ([@"scripting" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_startScriptingElementWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"probabilityCalculator" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR;
  }
  else if ([@"gui" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI;
    self->hasGuiElement_ = YES;
    OrgGeogebraCommonIoMyXMLHandler_isPreferencesXML_ = NO;
    self->tmp_perspective_ = new_OrgGeogebraCommonIoLayoutPerspective_initWithNSString_(@"tmp");
    [((JavaUtilArrayList *) nil_chk(self->tmp_perspectives_)) clear];
  }
  else if ([@"macro" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_MACRO;
    OrgGeogebraCommonIoMyXMLHandler_initMacroWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"construction" isEqual:eName]) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"parsing start", JavaLangSystem_currentTimeMillis()));
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    OrgGeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"casSession" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
  }
  else if ([@"keyboard" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKeyboardWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"defaults" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS;
    self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS;
  }
  else {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <geogebra>: ", eName));
  }
}

void OrgGeogebraCommonIoMyXMLHandler_handleKeyboardWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint width = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]);
    OrgGeogebraCommonMainSettingsKeyboardSettings *kbs = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getKeyboard];
    [((OrgGeogebraCommonMainSettingsKeyboardSettings *) nil_chk(kbs)) setKeyboardWidthWithInt:width];
    jint height = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"]);
    [kbs setKeyboardHeightWithInt:height];
    jfloat opacity = JavaLangFloat_parseFloatWithNSString_([attrs getWithId:@"opacity"]);
    [kbs setKeyboardOpacityWithFloat:opacity];
    jboolean showOnStart = JavaLangBoolean_parseBooleanWithNSString_([attrs getWithId:@"show"]);
    [kbs setShowKeyboardOnStartWithBoolean:showOnStart];
    [kbs setKeyboardLocaleWithNSString:[attrs getWithId:@"language"]];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgGeogebraCommonMainApp_errorWithNSString_(@"error in element <keyboard>");
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startMacroElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if ([@"macroInput" isEqual:eName]) {
    self->macroInputLabels_ = OrgGeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(attrs);
  }
  else if ([@"macroOutput" isEqual:eName]) {
    self->macroOutputLabels_ = OrgGeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(attrs);
  }
  else if ([@"construction" isEqual:eName]) {
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    OrgGeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <macro>: ", eName));
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleExtraTagWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonKernelAlgosAlgoBarChart *algo = (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]);
  if (![@"" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"key"]] && ![@"" isEqual:[attrs getWithId:@"value"]] && ![@"" isEqual:[attrs getWithId:@"barNumber"]]) {
    if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barAlpha"]) {
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarAlphaWithFloat:JavaLangFloat_parseFloatWithNSString_([attrs getWithId:@"value"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barHatchDistance"]) {
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarHatchDistanceWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"value"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barFillType"]) {
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values()), JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"value"])) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barHatchAngle"]) {
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarHatchAngleWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"value"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barImage"]) {
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarImageWithNSString:[attrs getWithId:@"value"] withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barSymbol"]) {
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarSymbolWithNSString:[attrs getWithId:@"value"] withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barColor"]) {
      IOSObjectArray *c = [((NSString *) nil_chk([attrs getWithId:@"value"])) split:@","];
      [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(c), 0))) substring:5]) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(c, 1)) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(c, 2))] withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
  }
  return NO;
}

void OrgGeogebraCommonIoMyXMLHandler_startEuclidianViewElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if ([@"viewNumber" isEqual:eName]) {
    jint number = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"viewNo"]);
    if (number == 2) self->evSet_ = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getEuclidianWithInt:2];
    else self->evSet_ = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getEuclidianWithInt:1];
  }
  else {
    [self startEuclidianViewElementCheckViewIdWithNSString:eName withJavaUtilLinkedHashMap:attrs];
  }
  if (self->evSet_ == nil) self->evSet_ = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getEuclidianWithInt:1];
  if (self->resetEVsettingsNeeded_) {
    self->resetEVsettingsNeeded_ = NO;
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(self->evSet_)) reset];
  }
  if (![self startEuclidianViewElementSwitchWithNSString:eName withJavaUtilLinkedHashMap:attrs withChar:OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)]) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <euclidianView>: ", eName));
}

void OrgGeogebraCommonIoMyXMLHandler_startSpreadsheetViewElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'l':
    if ([@"layout" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetLayoutWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'p':
    if ([@"prefCellSize" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 's':
    if ([@"size" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    if ([@"spreadsheetColumn" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetColumnWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    if ([@"spreadsheetRow" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetRowWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    if ([@"selection" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    if ([@"spreadsheetCellFormat" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetFormatWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <spreadsheetView>: ", eName));
  }
  if (!ok) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <spreadsheetView>: ", eName));
}

void OrgGeogebraCommonIoMyXMLHandler_startDataCollectionViewElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonPluginSensorLogger_TypesEnum *type = OrgGeogebraCommonPluginSensorLogger_TypesEnum_lookupWithNSString_(eName);
  NSString *mappedGeoLabel = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"geo"];
  if (type != nil) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@$$", @"found sensor mapping ", type, @" = ", mappedGeoLabel));
    OrgGeogebraCommonMainSettingsDataCollectionSettings *settings = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getDataCollection];
    [((OrgGeogebraCommonMainSettingsDataCollectionSettings *) nil_chk(settings)) mapSensorToGeoWithOrgGeogebraCommonPluginSensorLogger_TypesEnum:type withNSString:mappedGeoLabel];
  }
  else {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$$@", @"unknown tag in <dataCollectionView>: ", eName, @" = ", self->geo_));
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startProbabilityCalculatorElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'd':
    if ([@"distribution" isEqual:eName]) {
      if ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) isUsingFullGui]) ok = OrgGeogebraCommonIoMyXMLHandler_handleProbabilityDistributionWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'i':
    if ([@"interval" isEqual:eName]) {
      if ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) isUsingFullGui]) ok = OrgGeogebraCommonIoMyXMLHandler_handleProbabilityIntervalWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <probabilityCalculator>: ", eName));
  }
  if (!ok) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <probabilityCalculator>: ", eName));
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleProbabilityDistributionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint distributionType = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"]);
    [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getProbCalcSettings])) setDistributionTypeWithOrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_values()), distributionType)];
    jboolean isCumulative = [self parseBooleanWithNSString:[attrs getWithId:@"isCumulative"]];
    [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getProbCalcSettings])) setCumulativeWithBoolean:isCumulative];
    NSString *parmString = [attrs getWithId:@"parameters"];
    IOSObjectArray *parmStringArray = [((NSString *) nil_chk(parmString)) split:@","];
    IOSDoubleArray *parameters = [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(parmStringArray))->size_];
    for (jint i = 0; i < parmStringArray->size_; i++) *IOSDoubleArray_GetRef(parameters, i) = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(IOSObjectArray_Get(parmStringArray, i));
    [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getProbCalcSettings])) setParametersWithDoubleArray:parameters];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleProbabilityIntervalWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint probMode = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"mode"]);
    [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getProbCalcSettings])) setProbModeWithInt:probMode];
    [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getProbCalcSettings])) setLowWithDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"low"])];
    [((OrgGeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getProbCalcSettings])) setHighWithDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"high"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startAlgebraViewElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'a':
    if ([@"auxiliary" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'c':
    if ([@"collapsed" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'm':
    if ([@"mode" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewModeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <algebraView>: ", eName));
  }
  if (!ok) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <algebraView>: ", eName));
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCoordSystemWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  if ([((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(self->xmin_)) keySet])) size] > 1) {
    [self->xmin_ clear];
    [((JavaUtilHashMap *) nil_chk(self->xmax_)) clear];
    [((JavaUtilHashMap *) nil_chk(self->ymin_)) clear];
    [((JavaUtilHashMap *) nil_chk(self->ymax_)) clear];
  }
  if ([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"xZero"] != nil) {
    @try {
      jdouble xZero = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"xZero"]);
      jdouble yZero = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"yZero"]);
      jdouble scale_ = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"scale"]);
      jdouble yscale = scale_;
      NSString *strYscale = [attrs getWithId:@"yscale"];
      if (strYscale != nil) {
        yscale = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(strYscale);
      }
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setCoordSystemWithDouble:xZero withDouble:yZero withDouble:scale_ withDouble:yscale withBoolean:YES];
      (void) [self->xmin_ putWithId:ev withId:nil];
      (void) [((JavaUtilHashMap *) nil_chk(self->xmax_)) putWithId:ev withId:nil];
      (void) [((JavaUtilHashMap *) nil_chk(self->ymin_)) putWithId:ev withId:nil];
      (void) [((JavaUtilHashMap *) nil_chk(self->ymax_)) putWithId:ev withId:nil];
      return YES;
    }
    @catch (JavaLangException *e) {
      return NO;
    }
  }
  @try {
    (void) [self->xmin_ putWithId:ev withId:[attrs getWithId:@"xMin"]];
    (void) [((JavaUtilHashMap *) nil_chk(self->xmax_)) putWithId:ev withId:[attrs getWithId:@"xMax"]];
    (void) [((JavaUtilHashMap *) nil_chk(self->ymin_)) putWithId:ev withId:[attrs getWithId:@"yMin"]];
    (void) [((JavaUtilHashMap *) nil_chk(self->ymax_)) putWithId:ev withId:[attrs getWithId:@"yMax"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleEvSizeWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint width;
    jint height;
    if (!OrgGeogebraCommonMainApp_isFullAppGui()) {
      width = ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getAppletWidth] > 2 && ![self->app_ getUseFullGui]) ? [self->app_ getAppletWidth] - 2 : JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]);
      height = ([self->app_ getAppletHeight] > 2 && ![self->app_ getUseFullGui]) ? [self->app_ getAppletHeight] - 2 : JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"height"]);
    }
    else {
      width = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getAppCanvasWidth];
      height = [self->app_ getAppCanvasHeight];
    }
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setPreferredSizeWithOrgGeogebraCommonAwtGDimension:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:width withInt:height]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) isApplet] && ![self->app_ isHTML5Applet]) return YES;
  @try {
    jint width = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]);
    jint height = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"]);
    [((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getSpreadsheet])) setPreferredSizeWithOrgGeogebraCommonAwtGDimension:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:width withInt:height]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetColumnWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint col = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    jint width = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"width"]);
    [((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet])) addWidthWithInt:col withInt:width];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint width = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]);
    jint height = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"]);
    [((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet])) setPreferredColumnWidthWithInt:width];
    [((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getSpreadsheet])) setPreferredRowHeightWithInt:height];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetFormatWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *cellFormat = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"formatMap"];
    [((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet])) setCellFormatWithNSString:cellFormat];
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_printStacktraceWithId_([((JavaLangException *) nil_chk(e)) getMessage]);
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetRowWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint row = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    jint height = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"]);
    [((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet])) addHeightWithInt:row withInt:height];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetLayoutWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonMainSettingsSpreadsheetSettings *settings = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet];
  @try {
    [((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk(settings)) setShowFormulaBarWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"showFormulaBar"]]];
    [settings setShowGridWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showGrid"]]];
    [settings setShowColumnHeaderWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showColumnHeader"]]];
    [settings setShowRowHeaderWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showRowHeader"]]];
    [settings setShowHScrollBarWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showHScrollBar"]]];
    [settings setShowVScrollBarWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showVScrollBar"]]];
    [settings setAllowSpecialEditorWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"allowSpecialEditor"]]];
    [settings setAllowToolTipsWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"allowToolTips"]]];
    [settings setEqualsRequiredWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"equalsRequired"]]];
    [settings setEnableAutoCompleteWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"autoComplete"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonMainSettingsSpreadsheetSettings *settings = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet];
  @try {
    jint hScroll = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"hScroll"]);
    jint vScroll = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"vScroll"]);
    [((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk(settings)) setScrollPositionWithOrgGeogebraCommonAwtGPoint:new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(hScroll, vScroll)];
    jint row = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"row"]);
    jint column = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"column"]);
    [settings setScrollPositionWithOrgGeogebraCommonAwtGPoint:new_OrgGeogebraCommonAwtGPoint_initWithInt_withInt_(row, column)];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleBgColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *evSet, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  OrgGeogebraCommonAwtGColor *col = OrgGeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evSet)) setBackgroundWithOrgGeogebraCommonAwtGColor:col];
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAxesColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  OrgGeogebraCommonAwtGColor *col = OrgGeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setAxesColorWithOrgGeogebraCommonAwtGColor:col];
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleGridColorWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  OrgGeogebraCommonAwtGColor *col = OrgGeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setGridColorWithOrgGeogebraCommonAwtGColor:col];
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleLineStyleWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setAxesLineStyleWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"axes"])];
    [ev setGridLineStyleWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"grid"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleGridWithOrgGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    IOSDoubleArray *dists = [IOSDoubleArray newArrayWithLength:3];
    *IOSDoubleArray_GetRef(dists, 0) = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"distX"]);
    *IOSDoubleArray_GetRef(dists, 1) = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"distY"]);
    NSString *theta = [attrs getWithId:@"distTheta"];
    if (theta != nil) *IOSDoubleArray_GetRef(dists, 2) = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"distTheta"]);
    else *IOSDoubleArray_GetRef(dists, 2) = JavaLangMath_PI / 6;
    [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setGridDistancesWithDoubleArray:dists];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startKernelElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if ([@"angleUnit" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleAngleUnitWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"algebraStyle" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleAlgebraStyleWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"coordStyle" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKernelCoordStyleWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"angleFromInvTrig" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKernelInvTrigWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"continuous" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKernelContinuousWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"usePathAndRegionParameters" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"decimals" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKernelDecimalsWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"significantfigures" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKernelFiguresWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"startAnimation" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKernelStartAnimationWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"localization" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleKernelLocalizationWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"casSettings" isEqual:eName]) {
    OrgGeogebraCommonIoMyXMLHandler_handleCasSettingsWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"uses3D" isEqual:eName]) {
  }
  else OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <kernel>: ", eName));
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAngleUnitWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (attrs == nil) return NO;
  NSString *angleUnit = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
  if (angleUnit == nil) return NO;
  if ([((NSString *) nil_chk(angleUnit)) isEqual:@"degree"]) [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setAngleUnitWithInt:OrgGeogebraCommonKernelKernel_ANGLE_DEGREE];
  else if ([angleUnit isEqual:@"radiant"]) [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setAngleUnitWithInt:OrgGeogebraCommonKernelKernel_ANGLE_RADIANT];
  else return NO;
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setAlgebraStyleWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelCoordStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setCoordStyleWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelInvTrigWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setInverseTrigReturnsAngleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelDecimalsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setPrintDecimalsWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelStartAnimationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    self->startAnimation_ = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelLocalizationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean digits = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"digits"]];
    [((OrgGeogebraCommonMainLocalization *) nil_chk(self->loc_)) setUseLocalizedDigitsWithBoolean:digits withOrgGeogebraCommonMainApp:self->app_];
    jboolean labels = [self parseBooleanWithNSString:[attrs getWithId:@"labels"]];
    [self->loc_ setUseLocalizedLabelsWithBoolean:labels];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCasSettingsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean expRoots = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"expRoots"]];
    [((OrgGeogebraCommonMainSettingsCASSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getCasSettings])) setShowExpAsRootsWithBoolean:expRoots];
    jint timeout = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"timeout"]);
    if (timeout > 0) [((OrgGeogebraCommonMainSettingsCASSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getCasSettings])) setTimeoutMillisecondsWithLong:[((JavaLangInteger *) nil_chk(OrgGeogebraCommonIoMyXMLHandler_getTimeoutOptionWithLong_(timeout))) intValue] * 1000];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelFiguresWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setPrintFiguresWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelContinuousWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setContinuousWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setUsePathAndRegionParametersWithOrgGeogebraCommonKernelPathRegionHandlingEnum:OrgGeogebraCommonKernelPathRegionHandlingEnum_parseWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startGuiElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'c':
    if ([@"consProtColumns" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleConsProtColumnsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    else if ([@"consProtocol" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleConsProtocolWithJavaUtilLinkedHashMap_(self, attrs);
    else if ([@"consProtNavigationBar" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleConsProtNavigationBarWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, self->app_, attrs);
    break;
    case 'f':
    if ([@"font" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleFontWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 'g':
    if ([@"graphicsSettings" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleGraphicsSettingsWithJavaUtilLinkedHashMap_(self, attrs);
    break;
    case 'm':
    if ([@"menuFont" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleMenuFontWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    else if ([@"mouse" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleMouseWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 'l':
    if ([@"labelingStyle" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleLabelingStyleWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 'p':
    if ([@"perspectives" isEqual:eName]) {
      self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES;
      [((JavaUtilArrayList *) nil_chk(self->tmp_perspectives_)) clear];
    }
    break;
    case 's':
    if ([@"show" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleGuiShowWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, self->app_, attrs);
    else if ([@"splitDivider" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleSplitDividerWithJavaUtilLinkedHashMap_(self, attrs);
    else if ([@"settings" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleGuiSettingsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 't':
    if ([@"toolbar" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(self, attrs);
    else if ([@"tooltipSettings" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleTooltipSettingsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 'w':
    if ([@"window" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleWindowSizeWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <gui>: ", eName));
  }
  if (!ok) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <gui>: ", eName));
}

void OrgGeogebraCommonIoMyXMLHandler_createCompabilityLayout(OrgGeogebraCommonIoMyXMLHandler *self) {
  jint splitOrientation = self->tmp_spHorizontal_ ? OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT : OrgGeogebraCommonIoMyXMLHandler_JSplitPane_VERTICAL_SPLIT;
  NSString *defEV, *defSV, *defAV;
  if (splitOrientation == OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT) {
    if (self->tmp_showSpreadsheet_ && self->tmp_showAlgebra_) {
      defEV = @"1,3";
      defSV = @"1,1";
      defAV = @"3";
    }
    else {
      if (self->tmp_showSpreadsheet_) {
        defEV = @"3";
        defSV = @"1";
        defAV = @"3,3";
      }
      else {
        defEV = @"1";
        defAV = @"3";
        defSV = @"1,1";
      }
    }
  }
  else {
    if (self->tmp_showSpreadsheet_ && self->tmp_showAlgebra_) {
      defEV = @"0";
      defAV = @"2,0";
      defSV = @"2,2";
    }
    else {
      if (self->tmp_showSpreadsheet_) {
        defEV = @"0";
        defSV = @"2";
        defAV = @"0,0";
      }
      else {
        defEV = @"2";
        defAV = @"0";
        defSV = @"2,2";
      }
    }
  }
  OrgGeogebraCommonAwtGDimension *evSize = [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getEuclidianWithInt:1])) getPreferredSize];
  jint width = [((OrgGeogebraCommonAwtGDimension *) nil_chk(evSize)) getWidth];
  jint height = [evSize getHeight];
  if (width <= 100 || height <= 100) {
    width = 600;
    height = 440;
  }
  jint ssize = 200;
  if (self->tmp_showSpreadsheet_) {
    if (splitOrientation == OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT) {
      ssize = [((OrgGeogebraCommonAwtGDimension *) nil_chk([((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getSpreadsheet])) preferredSize])) getWidth];
    }
    else {
      ssize = [((OrgGeogebraCommonAwtGDimension *) nil_chk([((OrgGeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getSpreadsheet])) preferredSize])) getHeight];
    }
  }
  IOSObjectArray *dpXml = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonIoLayoutDockPanelData_initWithInt_withNSString_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonAwtGRectangle_withNSString_withInt_(OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN, nil, YES, NO, NO, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:400 withInt:400], defEV, width), new_OrgGeogebraCommonIoLayoutDockPanelData_initWithInt_withNSString_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonAwtGRectangle_withNSString_withInt_(OrgGeogebraCommonMainApp_VIEW_ALGEBRA, nil, self->tmp_showAlgebra_, NO, NO, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangleWithInt:200 withInt:400], defAV, (self->tmp_showAlgebra_ && self->tmp_sp2_ > 0) ? self->tmp_sp2_ : 200), new_OrgGeogebraCommonIoLayoutDockPanelData_initWithInt_withNSString_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonAwtGRectangle_withNSString_withInt_(OrgGeogebraCommonMainApp_VIEW_SPREADSHEET, nil, self->tmp_showSpreadsheet_, NO, NO, [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangleWithInt:400 withInt:400], defSV, ssize) } count:3 type:OrgGeogebraCommonIoLayoutDockPanelData_class_()];
  [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setDockPanelDataWithOrgGeogebraCommonIoLayoutDockPanelDataArray:dpXml];
  [self->tmp_perspective_ setShowToolBarWithBoolean:YES];
  if (splitOrientation == OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT) {
    if (self->tmp_showSpreadsheet_) {
      width += 5 + ssize;
    }
    if (self->tmp_showAlgebra_) {
      width += 5 + self->tmp_sp2_;
    }
  }
  else {
    if (self->tmp_showSpreadsheet_) {
      height += 5 + ssize;
    }
    if (self->tmp_showAlgebra_) {
      height += 5 + self->tmp_sp2_;
    }
  }
  IOSObjectArray *spXml;
  if (self->tmp_showSpreadsheet_ && self->tmp_showAlgebra_) {
    jint total = (splitOrientation == OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT ? width : height);
    jfloat relative1 = (jfloat) self->tmp_sp2_ / total;
    jfloat relative2 = (jfloat) self->tmp_sp1_ / (total - self->tmp_sp2_);
    spXml = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonIoLayoutDockSplitPaneData_initWithNSString_withDouble_withInt_(@"", relative1, splitOrientation), new_OrgGeogebraCommonIoLayoutDockSplitPaneData_initWithNSString_withDouble_withInt_((splitOrientation == OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT ? @"1" : @"2"), relative2, splitOrientation) } count:2 type:OrgGeogebraCommonIoLayoutDockSplitPaneData_class_()];
  }
  else {
    jint total = (splitOrientation == OrgGeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT ? width : height);
    jfloat relative;
    if (self->tmp_showSpreadsheet_) {
      relative = (jfloat) self->tmp_sp1_ / total;
    }
    else {
      relative = (jfloat) self->tmp_sp2_ / total;
    }
    spXml = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonIoLayoutDockSplitPaneData_initWithNSString_withDouble_withInt_(@"", relative, splitOrientation) } count:1 type:OrgGeogebraCommonIoLayoutDockSplitPaneData_class_()];
  }
  width += 15;
  height += 90;
  if ([self->tmp_perspective_ getShowInputPanel]) {
    height += 50;
  }
  [self->tmp_perspective_ setSplitPaneDataWithOrgGeogebraCommonIoLayoutDockSplitPaneDataArray:spXml];
  self->tmp_perspectives_ = new_JavaUtilArrayList_init();
  [self->tmp_perspectives_ addWithId:self->tmp_perspective_];
  [self->app_ setPreferredSizeWithOrgGeogebraCommonAwtGDimension:[OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newDimensionWithInt:width withInt:height]];
  [self->app_ setTmpPerspectivesWithJavaUtilArrayList:self->tmp_perspectives_];
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleConsProtColumnsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    IOSBooleanArray *colsVis = [IOSBooleanArray newArrayWithLength:[((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) keySet])) size]];
    JavaUtilArrayList *keys = new_JavaUtilArrayList_initWithJavaUtilCollection_([attrs keySet]);
    for (NSString * __strong key in keys) {
      jint k = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(key)) substring:3]);
      *IOSBooleanArray_GetRef(colsVis, k) = JavaLangBoolean_parseBooleanWithNSString_([attrs getWithId:key]);
    }
    OrgGeogebraCommonMainSettingsConstructionProtocolSettings *cpSettings = [((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getSettings])) getConstructionProtocol];
    [((OrgGeogebraCommonMainSettingsConstructionProtocolSettings *) nil_chk(cpSettings)) setColsVisibilityWithBooleanArray:colsVis];
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonUtilDebugLog_debugWithId_(e);
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleConsProtocolWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean showOnlyBreakpoints = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"showOnlyBreakpoints"]];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) setShowOnlyBreakpointsWithBoolean:showOnlyBreakpoints];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleConsProtNavigationBarWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonMainApp *app1, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean show = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"]];
    jboolean playButton = [self parseBooleanWithNSString:[attrs getWithId:@"playButton"]];
    jdouble playDelay = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"playDelay"]);
    jboolean showProtButton = [self parseBooleanWithNSString:[attrs getWithId:@"protButton"]];
    [((OrgGeogebraCommonMainApp *) nil_chk(app1)) setShowConstructionProtocolNavigationWithBoolean:show withBoolean:playButton withDouble:playDelay withBoolean:showProtButton];
    NSString *strConsStep = [attrs getWithId:@"consStep"];
    if (strConsStep != nil) self->consStep_ = JavaLangInteger_parseIntWithNSString_(strConsStep);
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleGuiShowWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, OrgGeogebraCommonMainApp *app1, JavaUtilLinkedHashMap *attrs) {
  @try {
    self->tmp_showAlgebra_ = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"algebraView"]];
    self->tmp_showSpreadsheet_ = [self parseBooleanWithNSString:[attrs getWithId:@"spreadsheetView"]];
    NSString *str = [attrs getWithId:@"auxiliaryObjects"];
    jboolean auxiliaryObjects = (str != nil && [str isEqual:@"true"]);
    [((OrgGeogebraCommonMainApp *) nil_chk(app1)) setShowAuxiliaryObjectsWithBoolean:auxiliaryObjects];
    str = [attrs getWithId:@"algebraInput"];
    jboolean algebraInput = (str == nil || [str isEqual:@"true"]);
    [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowInputPanelWithBoolean:algebraInput];
    str = [attrs getWithId:@"cmdList"];
    jboolean cmdList = (str == nil || [str isEqual:@"true"]);
    [self->tmp_perspective_ setShowInputPanelCommandsWithBoolean:cmdList];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$@", [e getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleGuiSettingsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  OrgGeogebraCommonIoMyXMLHandler_isPreferencesXML_ = YES;
  @try {
    jboolean ignoreDocument = ![((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"ignoreDocument"])) isEqual:@"false"];
    [((OrgGeogebraCommonMainSettingsLayoutSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getSettings])) getLayout])) setIgnoreDocumentLayoutWithBoolean:ignoreDocument];
    jboolean showTitleBar = ![((NSString *) nil_chk([attrs getWithId:@"showTitleBar"])) isEqual:@"false"];
    [((OrgGeogebraCommonMainSettingsLayoutSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getLayout])) setShowTitleBarWithBoolean:showTitleBar];
    if ([attrs containsKeyWithId:@"allowStyleBar"]) {
      jboolean allowStyleBar = ![((NSString *) nil_chk([attrs getWithId:@"allowStyleBar"])) isEqual:@"false"];
      [((OrgGeogebraCommonMainSettingsLayoutSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getLayout])) setAllowStyleBarWithBoolean:allowStyleBar];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [e getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleGraphicsSettingsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    if ([@"true" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"javaLatexFonts"]]) [((OrgGeogebraCommonEuclidianDrawEquation *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getDrawEquation])) setUseJavaFontsForLaTeXWithOrgGeogebraCommonMainApp:self->app_ withBoolean:YES];
    else if ([@"false" isEqual:[attrs getWithId:@"javaLatexFonts"]]) [((OrgGeogebraCommonEuclidianDrawEquation *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getDrawEquation])) setUseJavaFontsForLaTeXWithOrgGeogebraCommonMainApp:self->app_ withBoolean:NO];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [e getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSplitDividerWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    self->tmp_sp1_ = 0;
    self->tmp_sp2_ = 0;
    self->tmp_spHorizontal_ = ![@"false" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"horizontal"]];
    if ([attrs getWithId:@"loc2"] == nil) {
      (void) [attrs putWithId:@"loc2" withId:[attrs getWithId:@"loc"]];
      (void) [attrs putWithId:@"loc" withId:@"0"];
    }
    if (self->tmp_spHorizontal_) {
      self->tmp_sp1_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"loc"]);
      self->tmp_sp2_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"loc2"]);
    }
    else {
      NSString *strLocVert = [attrs getWithId:@"locVertical"];
      if (strLocVert != nil) {
        self->tmp_sp1_ = JavaLangInteger_parseIntWithNSString_(strLocVert);
      }
      else {
        self->tmp_sp1_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"loc"]);
      }
      NSString *strLocVert2 = [attrs getWithId:@"locVertical2"];
      if (strLocVert2 != nil) {
        self->tmp_sp2_ = JavaLangInteger_parseIntWithNSString_(strLocVert2);
      }
      else {
        self->tmp_sp2_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"loc2"]);
      }
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    self->tmp_sp1_ = 0;
    self->tmp_sp2_ = 0;
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *toolbarStr = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"str"];
    if (toolbarStr != nil) {
      JavaLangStringBuilder *converted = new_JavaLangStringBuilder_init();
      for (jint lv = 0; lv < ((jint) [toolbarStr length]); lv++) {
        jchar c = [toolbarStr charAtWithInt:lv];
        if (JavaLangCharacter_isDigitWithChar_(c)) {
          JavaLangStringBuilder *numStr = new_JavaLangStringBuilder_init();
          jchar cc;
          while (lv < ((jint) [toolbarStr length]) && JavaLangCharacter_isDigitWithChar_(cc = [toolbarStr charAtWithInt:lv])) {
            (void) [numStr appendWithChar:cc];
            lv++;
          }
          jint num = JavaLangInteger_parseIntWithNSString_([numStr description]);
          if (num > 999) {
            num = num + 100000 - 1000;
          }
          (void) [converted appendWithInt:num];
          (void) [converted appendWithNSString:@" "];
        }
        else {
          (void) [converted appendWithChar:c];
        }
      }
      toolbarStr = [converted description];
      [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowToolBarWithBoolean:YES];
      [self->tmp_perspective_ setToolbarDefinitionWithNSString:toolbarStr];
    }
    else {
      NSString *showToolBar = [attrs getWithId:@"show"];
      if (showToolBar == nil) {
        [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowToolBarWithBoolean:YES];
      }
      else {
        [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowToolBarWithBoolean:[showToolBar isEqual:@"true"]];
      }
      [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setToolbarDefinitionWithNSString:[attrs getWithId:@"items"]];
      if ([attrs getWithId:@"position"] != nil) {
        JavaLangInteger *toolBarPosition = JavaLangInteger_valueOfWithInt_(JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"position"]));
        [self->tmp_perspective_ setToolBarPositionWithInt:[toolBarPosition intValue]];
        [self->tmp_perspective_ setShowToolBarHelpWithBoolean:![((NSString *) nil_chk([attrs getWithId:@"help"])) isEqual:@"false"]];
      }
      else {
        [self->tmp_perspective_ setToolBarPositionWithInt:OrgGeogebraCommonJavaxSwingSwingConstants_NORTH];
        [self->tmp_perspective_ setShowToolBarHelpWithBoolean:YES];
      }
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleWindowSizeWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    OrgGeogebraCommonAwtGDimension *size = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"])];
    [((OrgGeogebraCommonMainApp *) nil_chk(app)) setPreferredSizeWithOrgGeogebraCommonAwtGDimension:size];
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleFontWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint guiSize = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"size"]);
    [((OrgGeogebraCommonMainApp *) nil_chk(app)) setFontSizeWithInt:guiSize];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleMenuFontWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint guiSize = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"size"]);
    if (guiSize <= 0) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app)) setGUIFontSizeWithInt:-1];
    }
    else {
      for (jint i = 0; i < ((IOSIntArray *) nil_chk(OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_))->size_; i++) {
        if (IOSIntArray_Get(OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_, i) >= guiSize) {
          guiSize = IOSIntArray_Get(OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_, i);
          break;
        }
      }
      if (guiSize > IOSIntArray_Get(OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_, OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_->size_ - 1)) guiSize = IOSIntArray_Get(OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_, OrgGeogebraCommonIoMyXMLHandler_menuFontSizes_->size_ - 1);
      [((OrgGeogebraCommonMainApp *) nil_chk(app)) setGUIFontSizeWithInt:guiSize];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleTooltipSettingsWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    NSString *ttl = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"language"];
    if ([@"" isEqual:ttl]) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app)) setTooltipLanguageWithNSString:nil];
    }
    else if (ttl != nil) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app)) setTooltipLanguageWithNSString:ttl];
    }
    jint ttt = -1;
    @try {
      ttt = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"timeout"]);
    }
    @catch (JavaLangNumberFormatException *e) {
    }
    [((OrgGeogebraCommonMainApp *) nil_chk(app)) setTooltipTimeoutWithInt:ttt];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleMouseWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  [((OrgGeogebraCommonMainApp *) nil_chk(app)) reverseMouseWheelWithBoolean:[@"true" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"reverseWheel"]]];
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleLabelingStyleWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(OrgGeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint style = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]);
    [((OrgGeogebraCommonMainApp *) nil_chk(app)) setLabelingStyleWithInt:style];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startGuiPerspectivesElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  if ([@"perspective" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handlePerspectiveWithJavaUtilLinkedHashMap_(self, attrs);
  else OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown tag in <perspectives>: ", eName));
  if (!ok) OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <perspectives>: ", eName));
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handlePerspectiveWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    self->tmp_perspective_ = new_OrgGeogebraCommonIoLayoutPerspective_initWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    [((JavaUtilArrayList *) nil_chk(self->tmp_perspectives_)) addWithId:self->tmp_perspective_];
    if (self->tmp_panes_ == nil) {
      self->tmp_panes_ = new_JavaUtilArrayList_init();
    }
    else {
      [self->tmp_panes_ clear];
    }
    if (self->tmp_views_ == nil) {
      self->tmp_views_ = new_JavaUtilArrayList_init();
    }
    else {
      [self->tmp_views_ clear];
    }
    self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE;
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

void OrgGeogebraCommonIoMyXMLHandler_endGuiPerspectivesElement(OrgGeogebraCommonIoMyXMLHandler *self) {
  [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) setTmpPerspectivesWithJavaUtilArrayList:self->tmp_perspectives_];
}

void OrgGeogebraCommonIoMyXMLHandler_startGuiPerspectiveElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'd':
    if ([@"dockBar" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleDockBarWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'i':
    if ([@"input" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleAlgebraInputWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'p':
    if ([@"panes" isEqual:eName]) {
      self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES;
      break;
    }
    case 's':
    if ([@"show" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleGuiShowWithOrgGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, self->app_, attrs);
      break;
    }
    case 't':
    if ([@"toolbar" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'v':
    if ([@"views" isEqual:eName]) {
      self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS;
      break;
    }
    default:
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown tag in <perspective>: ", eName));
  }
  if (!ok) OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <perspective>: ", eName));
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraInputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowInputPanelWithBoolean:![((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"])) isEqual:@"false"]];
    [self->tmp_perspective_ setShowInputPanelCommandsWithBoolean:![((NSString *) nil_chk([attrs getWithId:@"cmd"])) isEqual:@"false"]];
    OrgGeogebraCommonMainApp_InputPositonEnum *ip = [((NSString *) nil_chk([attrs getWithId:@"top"])) isEqual:@"true"] ? OrgGeogebraCommonMainApp_InputPositonEnum_get_top() : ([@"false" isEqual:[attrs getWithId:@"top"]] ? OrgGeogebraCommonMainApp_InputPositonEnum_get_bottom() : OrgGeogebraCommonMainApp_InputPositonEnum_get_algebraView());
    [self->tmp_perspective_ setInputPositionWithOrgGeogebraCommonMainApp_InputPositonEnum:ip];
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleDockBarWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowDockBarWithBoolean:![((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"])) isEqual:@"false"]];
    [self->tmp_perspective_ setDockBarEastWithBoolean:![((NSString *) nil_chk([attrs getWithId:@"east"])) isEqual:@"false"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

void OrgGeogebraCommonIoMyXMLHandler_endGuiPerspectiveElement(OrgGeogebraCommonIoMyXMLHandler *self) {
  IOSObjectArray *dpInfo = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->tmp_views_)) size] type:OrgGeogebraCommonIoLayoutDockPanelData_class_()];
  IOSObjectArray *spInfo = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->tmp_panes_)) size] type:OrgGeogebraCommonIoLayoutDockSplitPaneData_class_()];
  [((OrgGeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setDockPanelDataWithOrgGeogebraCommonIoLayoutDockPanelDataArray:[self->tmp_views_ toArrayWithNSObjectArray:dpInfo]];
  [self->tmp_perspective_ setSplitPaneDataWithOrgGeogebraCommonIoLayoutDockSplitPaneDataArray:[self->tmp_panes_ toArrayWithNSObjectArray:spInfo]];
}

void OrgGeogebraCommonIoMyXMLHandler_startGuiViewsElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  if ([@"view" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handleViewWithJavaUtilLinkedHashMap_(self, attrs);
  else OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown tag in <views>: ", eName));
  if (!ok) OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <views>: ", eName));
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleViewWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint viewId = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    NSString *toolbar = [attrs getWithId:@"toolbar"];
    jboolean isVisible = ![((NSString *) nil_chk([attrs getWithId:@"visible"])) isEqual:@"false"];
    jboolean openInFrame = ![((NSString *) nil_chk([attrs getWithId:@"inframe"])) isEqual:@"false"];
    NSString *showStyleBarStr = [attrs getWithId:@"stylebar"];
    jboolean showStyleBar = (showStyleBarStr != nil ? ![showStyleBarStr isEqual:@"false"] : NO);
    IOSObjectArray *window = [((NSString *) nil_chk([attrs getWithId:@"window"])) split:@","];
    id<OrgGeogebraCommonAwtGRectangle> windowRect = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(window), 0)) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(window, 1)) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(window, 2)) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(window, 3))];
    NSString *embeddedDef = [attrs getWithId:@"location"];
    jint embeddedSize = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"size"]);
    NSString *plane = [attrs getWithId:@"plane"];
    [((JavaUtilArrayList *) nil_chk(self->tmp_views_)) addWithId:new_OrgGeogebraCommonIoLayoutDockPanelData_initWithInt_withNSString_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonAwtGRectangle_withNSString_withInt_withNSString_(viewId, toolbar, isVisible, openInFrame, showStyleBar, windowRect, embeddedDef, embeddedSize, plane)];
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startGuiPanesElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  if ([@"pane" isEqual:eName]) ok = OrgGeogebraCommonIoMyXMLHandler_handlePaneWithJavaUtilLinkedHashMap_(self, attrs);
  else OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown tag in <panes>: ", eName));
  if (!ok) OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <panes>: ", eName));
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handlePaneWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *location = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"location"];
    jdouble dividerLocation = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"divider"]);
    jint orientation = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"orientation"]);
    [((JavaUtilArrayList *) nil_chk(self->tmp_panes_)) addWithId:new_OrgGeogebraCommonIoLayoutDockSplitPaneData_initWithNSString_withDouble_withInt_(location, dividerLocation, orientation)];
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

void OrgGeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setAllowUnboundedAnglesWithBoolean:OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(self->ggbFileFormat_, 4.4)];
    NSString *title = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"title"];
    NSString *author = [attrs getWithId:@"author"];
    NSString *date = [attrs getWithId:@"date"];
    if (title != nil) [self->cons_ setTitleWithNSString:title];
    if (author != nil) [self->cons_ setAuthorWithNSString:author];
    if (date != nil) [self->cons_ setDateWithNSString:date];
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_errorWithNSString_(@"error in <construction>");
  }
}

void OrgGeogebraCommonIoMyXMLHandler_initMacroWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *cmdName = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"cmdName"];
    NSString *toolName = [attrs getWithId:@"toolName"];
    NSString *toolHelp = [attrs getWithId:@"toolHelp"];
    NSString *iconFile = [attrs getWithId:@"iconFile"];
    jboolean copyCaptions = [self parseBooleanWithNSString:[attrs getWithId:@"copyCaptions"]];
    NSString *strShowInToolBar = [attrs getWithId:@"showInToolBar"];
    jint n = 0;
    NSString *myCmdName = cmdName;
    while ([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getMacroWithNSString:myCmdName] != nil) {
      n++;
      myCmdName = JreStrcat("$I", cmdName, n);
    }
    self->macro_ = new_OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, myCmdName);
    [self->macro_ setToolNameWithNSString:toolName];
    [self->macro_ setCopyCaptionsAndVisibilityWithBoolean:copyCaptions];
    [self->macro_ setToolHelpWithNSString:toolHelp];
    [self->macro_ setIconFileNameWithNSString:iconFile];
    jboolean showTool = strShowInToolBar == nil ? YES : [self parseBooleanWithNSString:strShowInToolBar];
    [self->macro_ setShowInToolBarWithBoolean:showTool];
    OrgGeogebraCommonKernelMacroKernel *macroKernel = [self->kernel_ newMacroKernel];
    [((OrgGeogebraCommonKernelMacroKernel *) nil_chk(macroKernel)) setContinuousWithBoolean:NO];
    self->kernel_ = macroKernel;
    self->cons_ = [macroKernel getConstruction];
    self->parser_ = new_OrgGeogebraCommonKernelParserParser_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(macroKernel, self->cons_);
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_errorWithNSString_(@"error in <macro>");
  }
}

void OrgGeogebraCommonIoMyXMLHandler_endMacro(OrgGeogebraCommonIoMyXMLHandler *self) {
  [((OrgGeogebraCommonKernelMacro *) nil_chk(self->macro_)) initMacroWithOrgGeogebraCommonKernelConstruction:self->cons_ withNSStringArray:self->macroInputLabels_ withNSStringArray:self->macroOutputLabels_];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->origKernel_)) addMacroWithOrgGeogebraCommonKernelMacro:self->macro_];
  OrgGeogebraCommonIoMyXMLHandler_initKernelVars(self);
}

void OrgGeogebraCommonIoMyXMLHandler_handleWorksheetTextWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *above = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"above"];
  NSString *below = [attrs getWithId:@"below"];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setWorksheetTextWithNSString:above withInt:0];
  [self->cons_ setWorksheetTextWithNSString:below withInt:1];
}

void OrgGeogebraCommonIoMyXMLHandler_startCasCellWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  switch (self->casMode_) {
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL:
    if ([@"cellPair" isEqual:eName]) {
      self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR;
      OrgGeogebraCommonIoMyXMLHandler_startCellPair(self);
    }
    else {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <cellPair>: ", eName));
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR:
    if ([@"inputCell" isEqual:eName]) {
      self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL;
    }
    else if ([@"outputCell" isEqual:eName]) {
      self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL;
    }
    else if ([@"useAsText" isEqual:eName]) {
      self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL;
    }
    else {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <cellPair>: ", eName));
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL:
    OrgGeogebraCommonIoMyXMLHandler_startCellTextElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL:
    OrgGeogebraCommonIoMyXMLHandler_startCellInputElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL:
    OrgGeogebraCommonIoMyXMLHandler_startCellOutputElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"unknown cas session mode:", self->constMode_));
  }
}

void OrgGeogebraCommonIoMyXMLHandler_endCasCellWithNSString_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName) {
  switch (self->casMode_) {
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL:
    if ([@"cascell" isEqual:eName]) {
      self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
      self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
      self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
      self->geoCasCell_ = nil;
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR:
    if ([@"cellPair" isEqual:eName]) {
      self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
      OrgGeogebraCommonIoMyXMLHandler_endCellPairWithNSString_(self, eName);
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL:
    if ([@"useAsText" isEqual:eName]) self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL:
    if ([@"inputCell" isEqual:eName]) self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL:
    if ([@"outputCell" isEqual:eName]) self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR;
    break;
    default:
    self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"unknown cas session mode:", self->constMode_));
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startCellPair(OrgGeogebraCommonIoMyXMLHandler *self) {
  self->geoCasCell_ = new_OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
}

void OrgGeogebraCommonIoMyXMLHandler_endCellPairWithNSString_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName) {
  if (self->geoCasCell_ == nil) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$C", @"no element set for <", eName, '>'));
    return;
  }
  @try {
    jboolean independentCell = ![((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->geoCasCell_)) hasVariablesOrCommands];
    if (independentCell) {
      if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getCasCellWithInt:0] == nil && [((NSString *) nil_chk([self->geoCasCell_ getInputWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@""]) {
        return;
      }
      [self->cons_ addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->geoCasCell_ withBoolean:YES];
      [self->cons_ addToGeoSetWithCasCellsWithOrgGeogebraCommonKernelGeosGeoCasCell:self->geoCasCell_];
      if ([self->geoCasCell_ isAssignmentVariableDefined]) {
        if ([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) isUpdateConstructionRunning]) {
          [self->geoCasCell_ computeOutput];
        }
        else {
          [self->geoCasCell_ updateTwinGeoWithBoolean:NO];
        }
        [self->geoCasCell_ setLabelOfTwinGeo];
        if ([self->geoCasCell_ hasTwinGeo] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoCasCell_ getTwinGeo])) isInConstructionList]) {
          if (![((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoCasCell_ getTwinGeo])) getParentAlgorithm])) isInConstructionList]) [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoCasCell_ getTwinGeo])) getParentAlgorithm])) addToConstructionList];
        }
      }
      else if ([self->geoCasCell_ isOutputEmpty] && [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isGeoGebraCASready]) {
        [self->geoCasCell_ computeOutput];
      }
    }
    else {
      (void) OrgGeogebraCommonKernelKernelCAS_DependentCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell_(self->geoCasCell_);
    }
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error when processing <cellpair>: ", [((JavaLangException *) nil_chk(e)) getMessage]));
    [e printStackTrace];
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startCellOutputElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if (self->geoCasCell_ == nil) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$C", @"no element set for <", eName, '>'));
    return;
  }
  jboolean ok = YES;
  switch (OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'e':
    if ([@"expression" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCasCellOutputWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <outputCell>: ", eName));
  }
  if (!ok) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <outputCell>: ", eName));
}

void OrgGeogebraCommonIoMyXMLHandler_startCellInputElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if (self->geoCasCell_ == nil) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$C", @"no element set for <", eName, '>'));
    return;
  }
  jboolean ok = YES;
  switch (OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'e':
    if ([@"expression" isEqual:eName]) {
      ok = OrgGeogebraCommonIoMyXMLHandler_handleCasCellInputWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <inputCell>: ", eName));
  }
  if (!ok) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <inputCell>: ", eName));
}

void OrgGeogebraCommonIoMyXMLHandler_startCellTextElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if (self->geoCasCell_ == nil) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$C", @"no element set for <", eName, '>'));
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->geoCasCell_)) setUseAsTextWithBoolean:YES];
  jboolean ok = YES;
  if ([@"FontStyle" isEqual:eName]) {
    NSString *style = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
    [self->geoCasCell_ setFontStyleWithInt:JavaLangInteger_parseIntWithNSString_(style)];
  }
  else if ([@"FontSizeM" isEqual:eName]) {
    NSString *size = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
    if (OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(size) > 0) [self->geoCasCell_ setFontSizeMultiplierWithDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(size)];
  }
  else if ([@"FontColor" isEqual:eName]) {
    NSString *r = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"r"];
    NSString *b = [attrs getWithId:@"b"];
    NSString *g = [attrs getWithId:@"g"];
    [self->geoCasCell_ setFontColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:JavaLangInteger_parseIntWithNSString_(r) withInt:JavaLangInteger_parseIntWithNSString_(g) withInt:JavaLangInteger_parseIntWithNSString_(b)]];
  }
  else OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <useAsText>: ", eName));
  if (!ok) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <useAsText>: ", eName));
}

void OrgGeogebraCommonIoMyXMLHandler_startDefaultWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  switch (self->constMode_) {
    case OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS:
    if ([@"element" isEqual:eName]) {
      jboolean old = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getElementDefaultAllowed];
      [self->kernel_ setElementDefaultAllowedWithBoolean:YES];
      self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULT_GEO;
      self->geo_ = OrgGeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(self, attrs);
      [self->kernel_ setElementDefaultAllowedWithBoolean:old];
    }
    else {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <default>: ", eName));
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULT_GEO:
    [self startGeoElementWithNSString:eName withJavaUtilLinkedHashMap:attrs];
    break;
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"unknown default mode:", self->constMode_));
  }
}

void OrgGeogebraCommonIoMyXMLHandler_startConstructionElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  switch (self->constMode_) {
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION:
    if ([@"element" isEqual:eName]) {
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setOutputGeoWithNSString:nil];
      self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT;
      self->geo_ = OrgGeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(self, attrs);
    }
    else if ([@"command" isEqual:eName]) {
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setOutputGeoWithNSString:nil];
      self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND;
      self->cmd_ = OrgGeogebraCommonIoMyXMLHandler_getCommandWithJavaUtilLinkedHashMap_(self, attrs);
    }
    else if ([@"expression" isEqual:eName]) {
      OrgGeogebraCommonIoMyXMLHandler_startExpressionElementWithJavaUtilLinkedHashMap_(self, attrs);
    }
    else if ([@"cascell" isEqual:eName]) {
      self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
      self->casMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
    }
    else if ([@"worksheetText" isEqual:eName]) {
      OrgGeogebraCommonIoMyXMLHandler_handleWorksheetTextWithJavaUtilLinkedHashMap_(self, attrs);
    }
    else {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <construction>: ", eName));
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT:
    [self startGeoElementWithNSString:eName withJavaUtilLinkedHashMap:attrs];
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND:
    OrgGeogebraCommonIoMyXMLHandler_startCommandElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL:
    OrgGeogebraCommonIoMyXMLHandler_startCasCellWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"unknown construction mode:", self->constMode_));
  }
}

void OrgGeogebraCommonIoMyXMLHandler_endConstructionElementWithNSString_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName) {
  switch (self->constMode_) {
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION:
    if ([@"construction" isEqual:eName]) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"cons tag end", JavaLangSystem_currentTimeMillis()));
      OrgGeogebraCommonIoMyXMLHandler_processStartPointList(self);
      OrgGeogebraCommonIoMyXMLHandler_processLinkedGeoList(self);
      OrgGeogebraCommonIoMyXMLHandler_processShowObjectConditionList(self);
      OrgGeogebraCommonIoMyXMLHandler_processDynamicColorList(self);
      OrgGeogebraCommonIoMyXMLHandler_processAnimationSpeedList(self);
      OrgGeogebraCommonIoMyXMLHandler_processAnimationStepList(self);
      OrgGeogebraCommonIoMyXMLHandler_processMinMaxList(self);
      OrgGeogebraCommonIoMyXMLHandler_processEvSizes(self);
      OrgGeogebraCommonIoMyXMLHandler_processAnimatingList(self);
      if (self->kernel_ == self->origKernel_) {
        self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
      }
      else {
        self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_MACRO;
      }
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT:
    if ([@"element" isEqual:eName]) self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND:
    if ([@"command" isEqual:eName]) {
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setOutputGeoWithNSString:nil];
      self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL:
    OrgGeogebraCommonIoMyXMLHandler_endCasCellWithNSString_(self, eName);
    break;
    default:
    self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"unknown construction mode:", self->constMode_));
  }
}

void OrgGeogebraCommonIoMyXMLHandler_endDefaultElementWithNSString_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName) {
  switch (self->constMode_) {
    case OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS:
    if ([@"defaults" isEqual:eName]) {
      self->mode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
      self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    }
    break;
    case OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULT_GEO:
    if ([@"element" isEqual:eName]) self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS;
    break;
    default:
    self->constMode_ = OrgGeogebraCommonIoMyXMLHandler_MODE_DEFAULTS;
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"unknown defaults mode:", self->constMode_));
  }
}

void OrgGeogebraCommonIoMyXMLHandler_processEvSizes(OrgGeogebraCommonIoMyXMLHandler *self) {
  JavaUtilArrayList *eSet = new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(self->xmin_)) keySet]);
  for (OrgGeogebraCommonMainSettingsEuclidianSettings * __strong ev in eSet) {
    if ([self->xmin_ getWithId:ev] == nil) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:nil withBoolean:YES];
    }
    else {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> n = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:[self->xmin_ getWithId:ev] withBoolean:YES];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setXminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:n withBoolean:YES];
    }
  }
  for (OrgGeogebraCommonMainSettingsEuclidianSettings * __strong ev in eSet) {
    if ([((JavaUtilHashMap *) nil_chk(self->xmax_)) getWithId:ev] == nil) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:nil withBoolean:YES];
    }
    else {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> n = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:[self->xmax_ getWithId:ev] withBoolean:YES];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setXmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:n withBoolean:YES];
    }
  }
  for (OrgGeogebraCommonMainSettingsEuclidianSettings * __strong ev in eSet) {
    if ([((JavaUtilHashMap *) nil_chk(self->ymin_)) getWithId:ev] == nil) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:nil withBoolean:YES];
    }
    else {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> n = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:[self->ymin_ getWithId:ev] withBoolean:YES];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setYminObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:n withBoolean:YES];
    }
  }
  for (OrgGeogebraCommonMainSettingsEuclidianSettings * __strong ev in eSet) {
    if ([((JavaUtilHashMap *) nil_chk(self->ymax_)) getWithId:ev] == nil) {
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:nil withBoolean:YES];
    }
    else {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> n = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:[self->ymax_ getWithId:ev] withBoolean:YES];
      [((OrgGeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setYmaxObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:n withBoolean:YES];
    }
  }
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonKernelGeosGeoElement *geo1 = nil;
  NSString *label = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"label"];
  NSString *type = [attrs getWithId:@"type"];
  NSString *defaultset = [attrs getWithId:@"default"];
  if (label == nil || type == nil) {
    OrgGeogebraCommonUtilDebugLog_errorWithNSString_(@"attributes missing in <element>");
    return geo1;
  }
  if (defaultset == nil || ![((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getElementDefaultAllowed]) {
    geo1 = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:label];
    if (geo1 == nil) {
      geo1 = [self->kernel_ createGeoElementWithOrgGeogebraCommonKernelConstruction:self->cons_ withNSString:type];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) setLoadedLabelWithNSString:label];
      [geo1 setEuclidianVisibleWithBoolean:NO];
    }
  }
  else {
    jint defset = JavaLangInteger_parseIntWithNSString_(defaultset);
    geo1 = [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:defset];
    if (geo1 == nil) {
      geo1 = [self->kernel_ lookupLabelWithNSString:label];
      if (geo1 == nil) {
        geo1 = [self->kernel_ createGeoElementWithOrgGeogebraCommonKernelConstruction:self->cons_ withNSString:type];
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) setLoadedLabelWithNSString:label];
        [geo1 setEuclidianVisibleWithBoolean:NO];
      }
    }
  }
  if ([((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) getGeoClassType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_POINT()] && self->ggbFileFormat_ < 3.3) {
    [((id<OrgGeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo1, @protocol(OrgGeogebraCommonKernelGeosPointProperties))) setPointStyleWithInt:self->docPointStyle_];
  }
  if ([geo1 isLimitedPath]) {
    id<OrgGeogebraCommonKernelGeosLimitedPath> lp = (id<OrgGeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(geo1, @protocol(OrgGeogebraCommonKernelGeosLimitedPath));
    [lp setAllowOutlyingIntersectionsWithBoolean:YES];
    [lp setKeepTypeOnGeometricTransformWithBoolean:NO];
  }
  return geo1;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleDimensionsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *width = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"];
  NSString *height = [attrs getWithId:@"height"];
  if (width != nil && height != nil) {
    if ([width matches:@"\\d{2,3}"] && [height matches:@"\\d{2,3}"]) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoButton]) {
        OrgGeogebraCommonKernelGeosGeoButton *button = (OrgGeogebraCommonKernelGeosGeoButton *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoButton class]);
        [button setWidthWithInt:JavaLangInteger_parseIntWithNSString_(width)];
        [button setHeightWithInt:JavaLangInteger_parseIntWithNSString_(height)];
        [button setFixedSizeWithBoolean:YES];
        return YES;
      }
      return NO;
    }
    return YES;
  }
  return NO;
}

jchar OrgGeogebraCommonIoMyXMLHandler_firstCharWithNSString_(NSString *eName) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  if (eName == nil || ((jint) [eName length]) == 0) return '?';
  return [((NSString *) nil_chk(eName)) charAtWithInt:0];
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleShowWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setEuclidianVisibleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"object"]]];
    [self->geo_ setLabelVisibleWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"label"]]];
    jint EVs = 0;
    NSString *str = [attrs getWithId:@"ev"];
    if (str != nil) EVs = JavaLangInteger_parseIntWithNSString_(str);
    if ((EVs & 1) == 0) [self->geo_ addViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN];
    else [self->geo_ removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN];
    if ((EVs & 2) == 2) {
      [self->geo_ addViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
    }
    else {
      [self->geo_ removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2];
    }
    if ((EVs & 4) == 4) {
      [self->geo_ addViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
    }
    if ((EVs & 8) == 8) {
      [self->geo_ removeViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
    }
    if ((EVs & 16) == 16) {
      [self->geo_ setVisibleInViewForPlaneWithBoolean:YES];
      [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) addToViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:self->geo_];
    }
    if ((EVs & 32) == 32) {
      [self->geo_ setVisibleInViewForPlaneWithBoolean:NO];
      [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) removeFromViewsForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:self->geo_];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleShowOnAxisWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    if (!([self->geo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]])) return NO;
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) setShowOnAxisWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleObjColorWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonAwtGColor *col = OrgGeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setObjColorWithOrgGeogebraCommonAwtGColor:col];
  NSString *red = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"dynamicr"];
  NSString *green = [attrs getWithId:@"dynamicg"];
  NSString *blue = [attrs getWithId:@"dynamicb"];
  NSString *alpha = [attrs getWithId:@"dynamica"];
  NSString *colorSpace = [attrs getWithId:@"colorSpace"];
  if (red != nil && green != nil && blue != nil) @try {
    if (![red isEqual:@""] || ![green isEqual:@""] || ![blue isEqual:@""]) {
      if ([red isEqual:@""]) red = @"0";
      if ([green isEqual:@""]) green = @"0";
      if ([blue isEqual:@""]) blue = @"0";
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      (void) [sb appendWithChar:'{'];
      (void) [sb appendWithNSString:red];
      (void) [sb appendWithChar:','];
      (void) [sb appendWithNSString:green];
      (void) [sb appendWithChar:','];
      (void) [sb appendWithNSString:blue];
      if (alpha != nil && ![alpha isEqual:@""]) {
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:alpha];
      }
      (void) [sb appendWithChar:'}'];
      [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) addWithId:new_OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, [sb description])];
      [self->geo_ setColorSpaceWithInt:colorSpace == nil ? OrgGeogebraCommonKernelGeosGeoElement_COLORSPACE_RGB : JavaLangInteger_parseIntWithNSString_(colorSpace)];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgGeogebraCommonMainApp_errorWithNSString_(@"Error loading Dynamic Colors");
  }
  NSString *angle = [attrs getWithId:@"hatchAngle"];
  if (angle != nil) {
    [self->geo_ setHatchingAngleWithInt:JavaLangInteger_parseIntWithNSString_(angle)];
  }
  NSString *inverse = [attrs getWithId:@"inverseFill"];
  if (inverse != nil) {
    [self->geo_ setInverseFillWithBoolean:JavaLangBoolean_parseBooleanWithNSString_(inverse)];
  }
  NSString *distance = [attrs getWithId:@"hatchDistance"];
  if (angle != nil) {
    [self->geo_ setHatchingDistanceWithInt:JavaLangInteger_parseIntWithNSString_(distance)];
    [self->geo_ setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_HATCH()];
  }
  NSString *fillType = [attrs getWithId:@"fillType"];
  if (fillType != nil) {
    [self->geo_ setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values()), JavaLangInteger_parseIntWithNSString_(fillType))];
  }
  NSString *fillSymbol = [attrs getWithId:@"fillSymbol"];
  if (fillSymbol != nil) {
    [self->geo_ setFillSymbolWithNSString:fillSymbol];
  }
  NSString *filename = [attrs getWithId:@"image"];
  if (filename != nil) {
    [self->geo_ setFillImageWithNSString:filename];
    [self->geo_ setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE()];
  }
  alpha = [attrs getWithId:@"alpha"];
  if (alpha != nil && (![self->geo_ isGeoList] || self->ggbFileFormat_ > 3.19)) [self->geo_ setAlphaValueWithFloat:JavaLangFloat_parseFloatWithNSString_(alpha)];
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleBgColorWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonAwtGColor *col = OrgGeogebraCommonIoMyXMLHandler_handleColorAlphaAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setBackgroundColorWithOrgGeogebraCommonAwtGColor:col];
  [self->geo_ updateRepaint];
  return YES;
}

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint red = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"r"]);
    jint green = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"g"]);
    jint blue = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"b"]);
    return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonIoMyXMLHandler_handleColorAlphaAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint red = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"r"]);
    jint green = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"g"]);
    jint blue = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"b"]);
    jint alpha = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"alpha"]);
    return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue withInt:alpha];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleLineStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setLineTypeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"])];
    [self->geo_ setLineThicknessWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"thickness"])];
    NSString *typeHidden = [attrs getWithId:@"typeHidden"];
    if (typeHidden != nil) [self->geo_ setLineTypeHiddenWithInt:JavaLangInteger_parseIntWithNSString_(typeHidden)];
    NSString *opacity = [attrs getWithId:@"opacity"];
    if (opacity != nil) {
      [self->geo_ setLineOpacityWithInt:JavaLangInteger_parseIntWithNSString_(opacity)];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleDecorationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setDecorationTypeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleEqnStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoLine]) {
    id<OrgGeogebraCommonKernelKernelNDGeoLineND> line = (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND));
    NSString *style = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"style"];
    if ([((NSString *) nil_chk(style)) isEqual:@"implicit"]) {
      [line setToImplicit];
    }
    else if ([style isEqual:@"explicit"]) {
      [line setToExplicit];
    }
    else if ([style isEqual:@"parametric"]) {
      NSString *parameter = [attrs getWithId:@"parameter"];
      [line setToParametricWithNSString:parameter];
    }
    else {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown style for line in <eqnStyle>: ", style));
      return NO;
    }
  }
  else if ([self->geo_ isGeoConic]) {
    OrgGeogebraCommonKernelKernelNDGeoConicND *conic = (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelKernelNDGeoConicND class]);
    NSString *style = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"style"];
    if ([((NSString *) nil_chk(style)) isEqual:@"implicit"]) {
      [conic setToImplicit];
    }
    else if ([style isEqual:@"specific"]) {
      [conic setToSpecific];
    }
    else if ([style isEqual:@"explicit"]) {
      [conic setToExplicit];
    }
    else {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown style for conic in <eqnStyle>: ", style));
      return NO;
    }
  }
  else {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <eqnStyle>: ", [self->geo_ getClass]));
    return NO;
  }
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCurveParamWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([self->geo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVec3D class]])) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <curveParam>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoVec3D *v = (OrgGeogebraCommonKernelGeosGeoVec3D *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoVec3D class]);
  @try {
    NSString *tAttr = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"t"];
    if (tAttr != nil) {
      jdouble t = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(tAttr);
      [((OrgGeogebraCommonKernelPathParameter *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(v, [OrgGeogebraCommonKernelGeosGeoPoint class])))) getPathParameter])) setTWithDouble:t];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"problem in <curveParam>: ", [((JavaLangException *) nil_chk(e)) getMessage]));
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCoordsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) handleCoordsWithOrgGeogebraCommonKernelGeosGeoElement:self->geo_ withJavaUtilLinkedHashMap:attrs];
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCoordStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelKernelNDCoordStyle_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <coordStyle>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  id<OrgGeogebraCommonKernelKernelNDCoordStyle> v = (id<OrgGeogebraCommonKernelKernelNDCoordStyle>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelKernelNDCoordStyle));
  NSString *style = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"style"];
  if ([((NSString *) nil_chk(style)) isEqual:@"cartesian"]) {
    [((id<OrgGeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setCartesian];
  }
  else if ([style isEqual:@"polar"]) {
    [((id<OrgGeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setPolar];
  }
  else if ([style isEqual:@"complex"]) {
    [((id<OrgGeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setComplex];
  }
  else if ([style isEqual:@"cartesian3d"]) {
    [((id<OrgGeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setCartesian3D];
  }
  else if ([style isEqual:@"spherical"]) {
    [((id<OrgGeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setSpherical];
  }
  else {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown style in <coordStyle>: ", style));
    return NO;
  }
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleListenersWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    if ([@"objectUpdate" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"]]) {
      (void) [((JavaUtilHashMap *) nil_chk([((OrgGeogebraCommonPluginScriptManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getScriptManager])) getUpdateListenerMap])) putWithId:self->geo_ withId:[attrs getWithId:@"val"]];
    }
    if ([@"objectClick" isEqual:[attrs getWithId:@"type"]]) {
      (void) [((JavaUtilHashMap *) nil_chk([((OrgGeogebraCommonPluginScriptManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getScriptManager])) getClickListenerMap])) putWithId:self->geo_ withId:[attrs getWithId:@"val"]];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonUtilDebugLog_errorWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCaptionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setCaptionWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleScriptWithJavaUtilLinkedHashMap_withOrgGeogebraCommonPluginScriptTypeEnum_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs, OrgGeogebraCommonPluginScriptTypeEnum *type) {
  @try {
    NSString *text = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
    if (text != nil && ((jint) [text length]) > 0) {
      OrgGeogebraCommonPluginScriptScript *script = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) createScriptWithOrgGeogebraCommonPluginScriptTypeEnum:type withNSString:text withBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setClickScriptWithOrgGeogebraCommonPluginScriptScript:script];
    }
    text = [attrs getWithId:@"onUpdate"];
    if (text != nil && ((jint) [text length]) > 0) {
      OrgGeogebraCommonPluginScriptScript *script = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) createScriptWithOrgGeogebraCommonPluginScriptTypeEnum:type withNSString:text withBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setUpdateScriptWithOrgGeogebraCommonPluginScriptScript:script];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleConditionWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *strShowObjectCond = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"showObject"];
    if (strShowObjectCond != nil) {
      [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) addWithId:new_OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, strShowObjectCond)];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCheckboxWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoBoolean])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <checkbox>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    OrgGeogebraCommonKernelGeosGeoBoolean *bool_ = (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoBoolean class]);
    [bool_ setCheckboxFixedWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"fixed"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleValueWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  jboolean isBoolean = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoBoolean];
  jboolean isNumber = [self->geo_ isGeoNumeric];
  jboolean isButton = [self->geo_ isGeoButton];
  if (!(isNumber || isBoolean || isButton)) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <value>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    NSString *strVal = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
    if (isNumber) {
      OrgGeogebraCommonKernelGeosGeoNumeric *n = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
      [n setValueWithDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(strVal)];
      [n setRandomWithBoolean:[@"true" isEqual:[attrs getWithId:@"random"]]];
    }
    else if (isBoolean) {
      OrgGeogebraCommonKernelGeosGeoBoolean *bool_ = (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoBoolean class]);
      [bool_ setValueWithBoolean:[self parseBooleanWithNSString:strVal]];
    }
    else if (isButton) {
      OrgGeogebraCommonKernelGeosGeoButton *button = (OrgGeogebraCommonKernelGeosGeoButton *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoButton class]);
      OrgGeogebraCommonPluginScriptScript *script = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) createScriptWithOrgGeogebraCommonPluginScriptTypeEnum:OrgGeogebraCommonPluginScriptTypeEnum_get_JAVASCRIPT() withNSString:strVal withBoolean:NO];
      [button setClickScriptWithOrgGeogebraCommonPluginScriptScript:script];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handlePointSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosPointProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <pointSize>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosPointProperties> p = (id<OrgGeogebraCommonKernelGeosPointProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosPointProperties));
    [((id<OrgGeogebraCommonKernelGeosPointProperties>) nil_chk(p)) setPointSizeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handlePointStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosPointProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <pointStyle>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosPointProperties> p = (id<OrgGeogebraCommonKernelGeosPointProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosPointProperties));
    jint style = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]);
    if (style == -1) {
      style = self->docPointStyle_;
    }
    [((id<OrgGeogebraCommonKernelGeosPointProperties>) nil_chk(p)) setPointStyleWithInt:style];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleLayerWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setLayerWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCasCellInputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *input = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
    [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->geoCasCell_)) setInputWithNSString:input withBoolean:YES];
    jboolean pointList = [self parseBooleanWithNSString:[attrs getWithId:@"pointList"]];
    [self->geoCasCell_ setPointListWithBoolean:pointList];
    NSString *prefix = [attrs getWithId:@"prefix"];
    NSString *eval = [attrs getWithId:@"eval"];
    NSString *postfix = [attrs getWithId:@"postfix"];
    if (eval != nil) {
      [self->geoCasCell_ setProcessingInformationWithNSString:prefix withNSString:eval withNSString:postfix];
    }
    NSString *evalCmd = [attrs getWithId:@"evalCmd"];
    [self->geoCasCell_ setEvalCommandWithNSString:evalCmd];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCasCellOutputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if ([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->geoCasCell_)) isUseAsText]) return YES;
  @try {
    NSString *output = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
    jboolean error = [self parseBooleanWithNSString:[attrs getWithId:@"error"]];
    jboolean nativeOutput = [self parseBooleanWithNSString:[attrs getWithId:@"native"]];
    [self->geoCasCell_ setNativeWithBoolean:nativeOutput];
    if (error) {
      [self->geoCasCell_ setErrorWithNSString:output];
    }
    else {
      if (!nativeOutput) {
        [self->geoCasCell_ computeOutput];
      }
      else {
        [self->geoCasCell_ setOutputWithNSString:output withBoolean:NO];
      }
    }
    NSString *evalCommandComment = [attrs getWithId:@"evalCommand"];
    if (evalCommandComment != nil) {
      [self->geoCasCell_ setEvalCommandWithNSString:evalCommandComment];
    }
    else {
      [self->geoCasCell_ setEvalCommandWithNSString:@""];
    }
    NSString *evalComment = [attrs getWithId:@"evalComment"];
    if (evalComment != nil) {
      [self->geoCasCell_ setEvalCommentWithNSString:evalComment];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSliderWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoNumeric])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <slider>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    if ([((OrgGeogebraCommonKernelKernel *) nil_chk([self->geo_ getKernel])) isMacroKernel]) return YES;
    OrgGeogebraCommonKernelGeosGeoNumeric *num = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
    NSString *strMin = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"min"];
    NSString *strMax = [attrs getWithId:@"max"];
    if (strMin != nil || strMax != nil) {
      [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) addWithId:new_OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(self, self->geo_, strMin, strMax)];
    }
    NSString *str = [attrs getWithId:@"absoluteScreenLocation"];
    if (str != nil) {
      [num setAbsoluteScreenLocActiveWithBoolean:[self parseBooleanWithNSString:str]];
    }
    else {
      [num setAbsoluteScreenLocActiveWithBoolean:NO];
    }
    jdouble x = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"x"]);
    jdouble y = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y"]);
    [num setSliderLocationWithDouble:x withDouble:y withBoolean:YES];
    [num setSliderWidthWithDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"width"])];
    [num setSliderFixedWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"fixed"]]];
    [num setSliderHorizontalWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"horizontal"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleTraceWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosTraceable_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <trace>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosTraceable> t = (id<OrgGeogebraCommonKernelGeosTraceable>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosTraceable));
    [((id<OrgGeogebraCommonKernelGeosTraceable>) nil_chk(t)) setTraceWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSpreadsheetTraceWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isSpreadsheetTraceable]) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <trace>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    [self->geo_ setSpreadsheetTraceWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    OrgGeogebraCommonUtilSpreadsheetTraceSettings *t = [self->geo_ getTraceSettings];
    ((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"traceColumn1"]);
    t->traceColumn2_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"traceColumn2"]);
    t->traceRow1_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"traceRow1"]);
    t->traceRow2_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"traceRow2"]);
    t->tracingRow_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"tracingRow"]);
    t->numRows_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"numRows"]);
    t->headerOffset_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"headerOffset"]);
    t->doColumnReset_ = ([self parseBooleanWithNSString:[attrs getWithId:@"doColumnReset"]]);
    t->doRowLimit_ = ([self parseBooleanWithNSString:[attrs getWithId:@"doRowLimit"]]);
    t->showLabel_ = ([self parseBooleanWithNSString:[attrs getWithId:@"showLabel"]]);
    t->showTraceList_ = ([self parseBooleanWithNSString:[attrs getWithId:@"showTraceList"]]);
    t->doTraceGeoCopy_ = ([self parseBooleanWithNSString:[attrs getWithId:@"doTraceGeoCopy"]]);
    NSString *stringPause = [attrs getWithId:@"pause"];
    if (stringPause == nil) {
      t->pause_ = NO;
    }
    else {
      t->pause_ = [self parseBooleanWithNSString:stringPause];
    }
    [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) setNeedsSpreadsheetTableModel];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleShowTrimmedWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setShowTrimmedIntersectionLinesWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSelectionAllowedWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setSelectionAllowedWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSelectedIndexWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoList]) [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoList class])) setSelectedIndexWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]) withBoolean:NO];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAnimationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *strStep = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"step"];
    if (strStep != nil) {
      [((JavaUtilLinkedList *) nil_chk(self->animationStepList_)) addWithId:new_OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, strStep)];
    }
    NSString *strSpeed = [attrs getWithId:@"speed"];
    if (strSpeed != nil) {
      [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) addWithId:new_OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, strSpeed)];
    }
    NSString *type = [attrs getWithId:@"type"];
    if (type != nil) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setAnimationTypeWithInt:JavaLangInteger_parseIntWithNSString_(type)];
    if ([self parseBooleanWithNSString:[attrs getWithId:@"playing"]]) [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) addWithId:self->geo_];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleFixedWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setFixedWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleBreakpointWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setConsProtocolBreakpointWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleFileWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoImage] || [self->geo_ isGeoButton] || [self->geo_ isGeoTurtle])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <file>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    [self->geo_ setImageFileNameWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"name"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleTextFontWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosTextProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <font>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  id serif = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"serif"];
  id style = [attrs getWithId:@"style"];
  @try {
    id<OrgGeogebraCommonKernelGeosTextProperties> text = (id<OrgGeogebraCommonKernelGeosTextProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosTextProperties));
    NSString *oldSize = [attrs getWithId:@"size"];
    NSString *size = [attrs getWithId:@"sizeM"];
    if (size == nil) {
      jdouble appSize = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getFontSize];
      jdouble oldSizeInt = JavaLangInteger_parseIntWithNSString_(oldSize);
      [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontSizeMultiplierWithDouble:JavaLangMath_maxWithDouble_withDouble_(appSize + oldSizeInt, OrgGeogebraCommonIoMyXMLHandler_MIN_TEXT_SIZE) / appSize];
    }
    else {
      [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontSizeMultiplierWithDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_(size)];
    }
    if (serif != nil) [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setSerifFontWithBoolean:[self parseBooleanWithNSString:(NSString *) check_class_cast(serif, [NSString class])]];
    if (style != nil) [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontStyleWithInt:JavaLangInteger_parseIntWithNSString_((NSString *) check_class_cast(style, [NSString class]))];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleTextDecimalsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosTextProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <decimals>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosTextProperties> text = (id<OrgGeogebraCommonKernelGeosTextProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosTextProperties));
    [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setPrintDecimalsWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]) withBoolean:YES];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleTextFiguresWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosTextProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <decimals>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosTextProperties> text = (id<OrgGeogebraCommonKernelGeosTextProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosTextProperties));
    [((id<OrgGeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setPrintFiguresWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]) withBoolean:YES];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleInBackgroundWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoImage])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <inBackground>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    [((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoImage class])) setInBackgroundWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleInterpolateWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoImage])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <interpolate>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    [((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoImage class])) setInterpolateWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAuxiliaryWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setAuxiliaryObjectWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleIsLaTeXWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoText class])))) setLaTeXWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]] withBoolean:NO];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleArcSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <arcSize>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosAngleProperties> angle = (id<OrgGeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosAngleProperties));
    [((id<OrgGeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setArcSizeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <absoluteScreenLocation>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable> absLoc = (id<OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable));
    jint x = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
    jint y = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"y"]);
    [((id<OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable>) nil_chk(absLoc)) setAbsoluteScreenLocWithInt:x withInt:y];
    [absLoc setAbsoluteScreenLocActiveWithBoolean:YES];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAllowReflexAngleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <allowReflexAngle>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosAngleProperties> angle = (id<OrgGeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosAngleProperties));
    [((id<OrgGeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setAllowReflexAngleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleEmphasizeRightAngleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <emphasizeRightAngle>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosAngleProperties> angle = (id<OrgGeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosAngleProperties));
    [((id<OrgGeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setEmphasizeRightAngleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleComboBoxWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoList])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <comboBox>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    OrgGeogebraCommonKernelGeosGeoList *list = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoList class]);
    [list setDrawAsComboBoxWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAngleStyleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <angleStyle>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosAngleProperties> angle = (id<OrgGeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosAngleProperties));
    [((id<OrgGeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setAngleStyleWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleForceReflexAngleWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <forceReflexAngle>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosAngleProperties> angle = (id<OrgGeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosAngleProperties));
    [((id<OrgGeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setForceReflexAngleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleOutlyingIntersectionsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosLimitedPath_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <outlyingIntersections>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosLimitedPath> lpath = (id<OrgGeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosLimitedPath));
    [((id<OrgGeogebraCommonKernelGeosLimitedPath>) nil_chk(lpath)) setAllowOutlyingIntersectionsWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleKeepTypeOnTransformWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelGeosLimitedPath_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <outlyingIntersections>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getGeoClassType]));
    return NO;
  }
  @try {
    id<OrgGeogebraCommonKernelGeosLimitedPath> lpath = (id<OrgGeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelGeosLimitedPath));
    [((id<OrgGeogebraCommonKernelGeosLimitedPath>) nil_chk(lpath)) setKeepTypeOnGeometricTransformWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleSlopeTriangleSizeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoNumeric])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <slopeTriangleSize>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    OrgGeogebraCommonKernelGeosGeoNumeric *num = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
    [num setSlopeTriangleSizeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleStartPointWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([OrgGeogebraCommonKernelLocateable_class_() isInstance:self->geo_])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <startPoint>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  id<OrgGeogebraCommonKernelLocateable> locGeo = (id<OrgGeogebraCommonKernelLocateable>) check_protocol_cast(self->geo_, @protocol(OrgGeogebraCommonKernelLocateable));
  NSString *exp = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"exp"];
  if (exp == nil) exp = [attrs getWithId:@"label"];
  jint number = 0;
  @try {
    number = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"number"]);
  }
  @catch (JavaLangException *e) {
  }
  if (exp != nil) {
    [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) addWithId:new_OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withNSString_withInt_(self, locGeo, exp, number)];
    [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(locGeo)) setWaitForStartPoint];
  }
  else {
    @try {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = [self handleAbsoluteStartPointWithJavaUtilLinkedHashMap:attrs];
      if (number == 0) {
        [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(locGeo)) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:p];
      }
      else {
        [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) addWithId:new_OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, locGeo, p, number)];
        [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(locGeo)) setWaitForStartPoint];
      }
    }
    @catch (JavaLangException *e) {
      return NO;
    }
  }
  return YES;
}

void OrgGeogebraCommonIoMyXMLHandler_processStartPointList(OrgGeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) iterator];
    OrgGeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *pair = [it next];
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> P = ((OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *) nil_chk(pair))->point_ != nil ? pair->point_ : [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToPointWithNSString:pair->exp_ withBoolean:YES withBoolean:YES];
      [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(pair->locateable_)) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withInt:pair->number_];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processStartPointList: ", [e description]));
  }
  [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) clear];
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleLengthWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *val = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
  if ([self->geo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTextField class]]) {
    [((OrgGeogebraCommonKernelGeosGeoTextField *) nil_chk(((OrgGeogebraCommonKernelGeosGeoTextField *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoTextField class])))) setLengthWithInt:JavaLangInteger_parseIntWithNSString_(val)];
  }
  else {
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@", @"handleLength: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getGeoClassType]));
  }
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleListTypeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *val = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
  if ([self->geo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoList class])))) setTypeStringForXMLWithNSString:val];
  }
  else {
    OrgGeogebraCommonUtilDebugLog_errorWithNSString_(JreStrcat("$@", @"handleListType: expected LIST, got ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getGeoClassType]));
  }
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleLinkedGeoWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *exp = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"exp"];
  if (exp != nil) {
    [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) addWithId:new_OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, exp)];
  }
  else return NO;
  return YES;
}

void OrgGeogebraCommonIoMyXMLHandler_processLinkedGeoList(OrgGeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      [((OrgGeogebraCommonKernelGeosGeoTextField *) nil_chk(((OrgGeogebraCommonKernelGeosGeoTextField *) check_class_cast([((OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair)) getGeo], [OrgGeogebraCommonKernelGeosGeoTextField class])))) setLinkedGeoWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:pair->exp_]];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processlinkedGeoList: ", [e description]));
  }
  [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) clear];
}

void OrgGeogebraCommonIoMyXMLHandler_processShowObjectConditionList(OrgGeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) iterator];
    OrgGeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      OrgGeogebraCommonKernelGeosGeoBoolean *condition = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToBooleanWithNSString:((OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair))->exp_ withBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([pair getGeo])) setShowObjectConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:condition];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processShowObjectConditionList: ", [e description]));
  }
  [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) clear];
}

void OrgGeogebraCommonIoMyXMLHandler_processAnimationSpeedList(OrgGeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) iterator];
    OrgGeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      id<OrgGeogebraCommonKernelArithmeticNumberValue> num = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToNumericWithNSString:((OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair))->exp_ withBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([pair getGeo])) setAnimationSpeedObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:num];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processAnimationSpeedList: ", [e description]));
  }
  [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) clear];
}

void OrgGeogebraCommonIoMyXMLHandler_processAnimationStepList(OrgGeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->animationStepList_)) iterator];
    OrgGeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      id<OrgGeogebraCommonKernelArithmeticNumberValue> num = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToNumericWithNSString:((OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair))->exp_ withBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([pair getGeo])) setAnimationStepWithOrgGeogebraCommonKernelArithmeticNumberValue:num];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->animationStepList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processAnimationStepList: ", [e description]));
  }
  [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) clear];
}

void OrgGeogebraCommonIoMyXMLHandler_processAnimatingList(OrgGeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo1 = [it next];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) setAnimatingWithBoolean:YES];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processAnimatingList: ", [e description]));
  }
  [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) clear];
}

void OrgGeogebraCommonIoMyXMLHandler_processMinMaxList(OrgGeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) iterator];
    OrgGeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax *pair = [it next];
      jboolean wasDefined = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax *) nil_chk(pair)) getGeo])) isDefined];
      if (pair->min_ != nil) {
        id<OrgGeogebraCommonKernelArithmeticNumberValue> num = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToNumericWithNSString:pair->min_ withBoolean:NO];
        [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([pair getGeo], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setIntervalMinWithOrgGeogebraCommonKernelArithmeticNumberValue:num];
      }
      if (pair->max_ != nil) {
        id<OrgGeogebraCommonKernelArithmeticNumberValue> num2 = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToNumericWithNSString:pair->max_ withBoolean:NO];
        [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([pair getGeo], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setIntervalMaxWithOrgGeogebraCommonKernelArithmeticNumberValue:num2];
      }
      if (!wasDefined) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([pair getGeo])) setUndefined];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processMinMaxList: ", [e description]));
  }
  [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) clear];
}

void OrgGeogebraCommonIoMyXMLHandler_processDynamicColorList(OrgGeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) iterator];
    OrgGeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair)) getGeo])) setColorFunctionWithOrgGeogebraCommonKernelGeosGeoList:[((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToListWithNSString:pair->exp_]];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"dynamicColorList: ", [e description]));
  }
  [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) clear];
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleEigenvectorsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoConic])) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <eigenvectors>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    OrgGeogebraCommonKernelKernelNDGeoConicND *conic = (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelKernelNDGeoConicND class]);
    [conic setEigenvectorsWithDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x0"]) withDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y0"]) withDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"z0"]) withDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"x1"]) withDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y1"]) withDouble:OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"z1"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleMatrixWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoConic] && ![self->geo_ isGeoQuadric]) {
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <matrix>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    [self handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:attrs];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleLabelOffsetWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_))->labelOffsetX_ = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
    self->geo_->labelOffsetY_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"y"]);
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleLabelModeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setLabelModeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleTooltipModeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setTooltipModeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCoefficientsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoImplicitPoly])) {
    OrgGeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$@", @"wrong element type for <coefficients>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    NSString *rep = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"rep"];
    if (rep == nil) return NO;
    if ([((NSString *) nil_chk([attrs getWithId:@"rep"])) isEqual:@"array"]) {
      NSString *data = [attrs getWithId:@"data"];
      if (data == nil) return NO;
      JavaUtilArrayList *collect = new_JavaUtilArrayList_init();
      JavaUtilArrayList *newRow = new_JavaUtilArrayList_init();
      jint start = 0;
      for (jint c = 1; c < ((jint) [((NSString *) nil_chk(data)) length]); c++) {
        switch ([data charAtWithInt:c]) {
          case '[':
          if ([newRow size] > 0) return NO;
          start = c + 1;
          break;
          case ']':
          [newRow addWithId:JavaLangDouble_valueOfWithDouble_(OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([data substring:start endIndex:c]))];
          start = c + 1;
          [collect addWithId:newRow];
          newRow = new_JavaUtilArrayList_init();
          c++;
          break;
          case ',':
          [newRow addWithId:JavaLangDouble_valueOfWithDouble_(OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([data substring:start endIndex:c]))];
          start = c + 1;
        }
      }
      IOSObjectArray *coeff = [IOSObjectArray newArrayWithLength:[collect size] type:IOSClass_doubleArray(1)];
      for (jint i = 0; i < [collect size]; i++) {
        JavaUtilArrayList *row = [collect getWithInt:i];
        (void) IOSObjectArray_SetAndConsume(coeff, i, [IOSDoubleArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(row)) size]]);
        for (jint j = 0; j < [row size]; j++) {
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, i)), j) = [((JavaLangDouble *) nil_chk([row getWithInt:j])) doubleValue];
        }
      }
      [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class])) setCoeffWithDoubleArray2:coeff];
      return YES;
    }
  }
  @catch (JavaLangException *e) {
    return NO;
  }
  return NO;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleUserInputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([self->geo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoUserInputElement class]])) {
    OrgGeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$@", @"wrong element type for <userinput>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isIndependent]) {
      NSString *value = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
      if (value == nil) return NO;
      OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((OrgGeogebraCommonKernelParserParser *) nil_chk(self->parser_)) parseGeoGebraExpressionWithNSString:value];
      [((OrgGeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoUserInputElement class])) setUserInputWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    }
    if ([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"] != nil && [((NSString *) nil_chk([attrs getWithId:@"show"])) isEqual:@"true"]) [((OrgGeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoUserInputElement class])) setInputForm];
    else [((OrgGeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoUserInputElement class])) setExtendedForm];
    if ([attrs getWithId:@"valid"] != nil) {
      [((OrgGeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(self->geo_, [OrgGeogebraCommonKernelGeosGeoUserInputElement class])) setValidInputFormWithBoolean:[((NSString *) nil_chk([attrs getWithId:@"valid"])) isEqual:@"true"]];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    return NO;
  }
}

OrgGeogebraCommonKernelArithmeticCommand *OrgGeogebraCommonIoMyXMLHandler_getCommandWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonKernelArithmeticCommand *command = nil;
  NSString *name = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"name"];
  NSString *type = [attrs getWithId:@"type"];
  if (type != nil) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setOutputGeoWithNSString:type];
  }
  NSString *var = [attrs getWithId:@"var"];
  if (var != nil) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"reading var");
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) registerFunctionVariableWithNSString:var];
  }
  if (name != nil) command = new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(self->kernel_, name, NO);
  else @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, @"name missing in <command>");
  return command;
}

void OrgGeogebraCommonIoMyXMLHandler_startCommandElementWithNSString_withJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  if ([@"input" isEqual:eName]) {
    if (self->cmd_ == nil) @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, @"no command set for <input>");
    ok = OrgGeogebraCommonIoMyXMLHandler_handleCmdInputWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"output" isEqual:eName]) {
    ok = OrgGeogebraCommonIoMyXMLHandler_handleCmdOutputWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"outputSizes" isEqual:eName]) {
    ok = OrgGeogebraCommonIoMyXMLHandler_handleCmdOutputSizesWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <command>: ", eName));
  if (!ok) OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <command>: ", eName));
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCmdInputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonKernelGeosGeoElement *geo1;
  OrgGeogebraCommonKernelArithmeticExpressionNode *en;
  NSString *arg = nil;
  JavaUtilArrayList *keys = new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) keySet]);
  for (NSString * __strong key in keys) {
    @try {
      arg = [attrs getWithId:key];
      if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(self->cmd_)) getName])) isEqual:@"Sequence"] || [((NSString *) nil_chk([self->cmd_ getName])) isEqual:@"CurveCartesian"] || [((NSString *) nil_chk([self->cmd_ getName])) isEqual:@"Surface"]) geo1 = nil;
      else geo1 = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:arg];
      if (geo1 != nil && [((NSString *) nil_chk(arg)) indexOf:'$'] < 0) {
        en = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, geo1);
      }
      else {
        en = [((OrgGeogebraCommonKernelParserParser *) nil_chk(self->parser_)) parseCmdExpressionWithNSString:arg];
      }
      [self->cmd_ addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:en];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"unknown command input: ", arg));
    }
    @catch (JavaLangError *e) {
      [((JavaLangError *) nil_chk(e)) printStackTrace];
      @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"unknown command input: ", arg));
    }
  }
  return YES;
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCmdOutputWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *label;
    jint countLabels = 0;
    JavaUtilArrayList *attrKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) keySet]);
    for (NSString * __strong key in attrKeys) {
      label = [attrs getWithId:key];
      if ([@"" isEqual:label]) label = nil;
      else countLabels++;
      [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(self->cmd_)) addLabelWithNSString:label];
    }
    if (countLabels == 0) return YES;
    self->cmdOutput_ = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) processCommandWithOrgGeogebraCommonKernelArithmeticCommand:self->cmd_ withBoolean:YES];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) registerFunctionVariableWithNSString:nil];
    NSString *cmdName = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(self->cmd_)) getName];
    if (self->cmdOutput_ == nil) @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@$", @"processing of command ", self->cmd_, @" failed"));
    self->cmd_ = nil;
    if ([attrs size] != ((IOSObjectArray *) nil_chk(self->cmdOutput_))->size_) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <output>: wrong number of labels for command ", cmdName));
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I$I", @"   cmdOutput.length = ", self->cmdOutput_->size_, @", labels = ", [attrs size]));
      return NO;
    }
    jint i = 0;
    for (NSString * __strong key in attrKeys) {
      label = [attrs getWithId:key];
      if ([@"" isEqual:label]) label = nil;
      if (label != nil && IOSObjectArray_Get(self->cmdOutput_, i) != nil) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->cmdOutput_, i))) setLoadedLabelWithNSString:label];
      }
      i++;
    }
    return YES;
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@", @"processing of command: ", self->cmd_));
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleCmdOutputSizesWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    IOSObjectArray *vals = [((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])) split:@","];
    IOSIntArray *sizes = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(vals))->size_];
    for (jint i = 0; i < vals->size_; i++) {
      *IOSIntArray_GetRef(sizes, i) = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(vals, i));
    }
    [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(self->cmd_)) setOutputSizesWithIntArray:sizes];
    return YES;
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@", @"processing of command: ", self->cmd_));
  }
}

IOSObjectArray *OrgGeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs) {
  OrgGeogebraCommonIoMyXMLHandler_initialize();
  id<JavaUtilCollection> values = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) values];
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(values)) iterator];
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[values size] type:NSString_class_()];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(ret, i, [it next]);
    i++;
  }
  return ret;
}

void OrgGeogebraCommonIoMyXMLHandler_startExpressionElementWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *label = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"label"];
  OrgGeogebraCommonKernelGeosGeoElement *geo1 = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:label];
  if (geo1 != nil && [geo1 getCorrespondingCasCell] != nil) return;
  NSString *exp = [attrs getWithId:@"exp"];
  if (exp == nil) @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, @"exp missing in <expression>");
  NSString *type = [attrs getWithId:@"type"];
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((OrgGeogebraCommonKernelParserParser *) nil_chk(self->parser_)) parseGeoGebraExpressionWithNSString:exp];
    if (label != nil) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) setLabelWithNSString:label];
    if (type != nil) {
      if ([type isEqual:@"point"] && [ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
        [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) setForcePoint];
      }
      else if ([type isEqual:@"vector"] && [ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
        [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) setForceVector];
      }
      else if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
        if ([type isEqual:@"line"]) {
          [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class])))) setForceLine];
        }
        else if ([type isEqual:@"plane"]) {
          [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class])))) setForcePlane];
        }
        else if ([type isEqual:@"conic"]) {
          [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class])))) setForceConic];
        }
        else if ([type isEqual:@"quadric"]) {
          [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class])))) setForceQuadric];
        }
        else if ([type isEqual:@"implicitPoly"]) {
          [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class])))) setForceImplicitPoly];
        }
      }
    }
    IOSObjectArray *result = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) registerFunctionVariableWithNSString:nil];
    if (result != nil && label != nil && result->size_ == 1) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(result, 0))) setLoadedLabelWithNSString:label];
    }
    else {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$$$", @"error in <expression>: ", exp, @", label: ", label));
    }
  }
  @catch (JavaLangException *e) {
    NSString *msg = JreStrcat("$$$$", @"error in <expression>: label=", label, @", exp= ", exp);
    OrgGeogebraCommonMainApp_errorWithNSString_(msg);
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, msg);
  }
  @catch (JavaLangError *e) {
    NSString *msg = JreStrcat("$$$$", @"error in <expression>: label = ", label, @", exp = ", exp);
    OrgGeogebraCommonMainApp_errorWithNSString_(msg);
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(self->loc_, msg);
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewModeWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint val = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]);
    [((OrgGeogebraCommonMainSettingsAlgebraSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getAlgebra])) setTreeModeWithInt:val];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean b = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"]];
    [((OrgGeogebraCommonMainSettingsAlgebraSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getAlgebra])) setShowAuxiliaryObjectsWithBoolean:b];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean OrgGeogebraCommonIoMyXMLHandler_handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap_(OrgGeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    IOSObjectArray *strings = [((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])) split:@","];
    IOSIntArray *vals = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(strings))->size_];
    for (jint i = 0; i < strings->size_; i++) *IOSIntArray_GetRef(vals, i) = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(strings, i));
    [((OrgGeogebraCommonMainSettingsAlgebraSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getAlgebra])) setCollapsedNodesWithIntArray:vals];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonIoMyXMLHandler)

@implementation OrgGeogebraCommonIoMyXMLHandler_GeoExpPair

- (instancetype)initWithOrgGeogebraCommonIoMyXMLHandler:(OrgGeogebraCommonIoMyXMLHandler *)outer$
              withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                                           withNSString:(NSString *)exp {
  OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(self, outer$, g, exp);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeo {
  return geoElement_;
}

- (void)setGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geoElement_ = geo;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonIoMyXMLHandler:withOrgGeogebraCommonKernelGeosGeoElement:withNSString:", "GeoExpPair", NULL, 0x0, NULL, NULL },
    { "getGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x0, NULL, NULL },
    { "setGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeo", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoElement_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "exp_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonIoMyXMLHandler_GeoExpPair = { 2, "GeoExpPair", "org.geogebra.common.io", "MyXMLHandler", 0x2, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonIoMyXMLHandler_GeoExpPair;
}

@end

void OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *self, OrgGeogebraCommonIoMyXMLHandler *outer$, OrgGeogebraCommonKernelGeosGeoElement *g, NSString *exp) {
  (void) NSObject_init(self);
  [self setGeoWithOrgGeogebraCommonKernelGeosGeoElement:g];
  self->exp_ = exp;
}

OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *new_OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(OrgGeogebraCommonIoMyXMLHandler *outer$, OrgGeogebraCommonKernelGeosGeoElement *g, NSString *exp) {
  OrgGeogebraCommonIoMyXMLHandler_GeoExpPair *self = [OrgGeogebraCommonIoMyXMLHandler_GeoExpPair alloc];
  OrgGeogebraCommonIoMyXMLHandler_GeoExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(self, outer$, g, exp);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonIoMyXMLHandler_GeoExpPair)

@implementation OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax

- (instancetype)initWithOrgGeogebraCommonIoMyXMLHandler:(OrgGeogebraCommonIoMyXMLHandler *)outer$
              withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                                           withNSString:(NSString *)min
                                           withNSString:(NSString *)max {
  OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(self, outer$, g, min, max);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeo {
  return geoElement_;
}

- (void)setGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->geoElement_ = geo;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonIoMyXMLHandler:withOrgGeogebraCommonKernelGeosGeoElement:withNSString:withNSString:", "GeoNumericMinMax", NULL, 0x0, NULL, NULL },
    { "getGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x0, NULL, NULL },
    { "setGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "setGeo", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoElement_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "min_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "max_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax = { 2, "GeoNumericMinMax", "org.geogebra.common.io", "MyXMLHandler", 0x2, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax;
}

@end

void OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax *self, OrgGeogebraCommonIoMyXMLHandler *outer$, OrgGeogebraCommonKernelGeosGeoElement *g, NSString *min, NSString *max) {
  (void) NSObject_init(self);
  [self setGeoWithOrgGeogebraCommonKernelGeosGeoElement:g];
  self->min_ = min;
  self->max_ = max;
}

OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax *new_OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(OrgGeogebraCommonIoMyXMLHandler *outer$, OrgGeogebraCommonKernelGeosGeoElement *g, NSString *min, NSString *max) {
  OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax *self = [OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax alloc];
  OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(self, outer$, g, min, max);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonIoMyXMLHandler_GeoNumericMinMax)

@implementation OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair

- (instancetype)initWithOrgGeogebraCommonIoMyXMLHandler:(OrgGeogebraCommonIoMyXMLHandler *)outer$
                  withOrgGeogebraCommonKernelLocateable:(id<OrgGeogebraCommonKernelLocateable>)g
                                           withNSString:(NSString *)s
                                                withInt:(jint)n {
  OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withNSString_withInt_(self, outer$, g, s, n);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonIoMyXMLHandler:(OrgGeogebraCommonIoMyXMLHandler *)outer$
                  withOrgGeogebraCommonKernelLocateable:(id<OrgGeogebraCommonKernelLocateable>)g
          withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                withInt:(jint)n {
  OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, outer$, g, p, n);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonIoMyXMLHandler:withOrgGeogebraCommonKernelLocateable:withNSString:withInt:", "LocateableExpPair", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonIoMyXMLHandler:withOrgGeogebraCommonKernelLocateable:withOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "LocateableExpPair", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "locateable_", NULL, 0x0, "Lorg.geogebra.common.kernel.Locateable;", NULL, NULL,  },
    { "exp_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "point_", NULL, 0x0, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "number_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair = { 2, "LocateableExpPair", "org.geogebra.common.io", "MyXMLHandler", 0x2, 2, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair;
}

@end

void OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withNSString_withInt_(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *self, OrgGeogebraCommonIoMyXMLHandler *outer$, id<OrgGeogebraCommonKernelLocateable> g, NSString *s, jint n) {
  (void) NSObject_init(self);
  self->locateable_ = g;
  self->exp_ = s;
  self->number_ = n;
}

OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *new_OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withNSString_withInt_(OrgGeogebraCommonIoMyXMLHandler *outer$, id<OrgGeogebraCommonKernelLocateable> g, NSString *s, jint n) {
  OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *self = [OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair alloc];
  OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withNSString_withInt_(self, outer$, g, s, n);
  return self;
}

void OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *self, OrgGeogebraCommonIoMyXMLHandler *outer$, id<OrgGeogebraCommonKernelLocateable> g, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p, jint n) {
  (void) NSObject_init(self);
  self->locateable_ = g;
  self->point_ = p;
  self->number_ = n;
}

OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *new_OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonIoMyXMLHandler *outer$, id<OrgGeogebraCommonKernelLocateable> g, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p, jint n) {
  OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair *self = [OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair alloc];
  OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithOrgGeogebraCommonIoMyXMLHandler_withOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, outer$, g, p, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonIoMyXMLHandler_LocateableExpPair)
