//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/StringTemplate.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/export/MathmlTemplate.h"
#include "org/geogebra/common/factories/FormatFactory.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/ListValue.h"
#include "org/geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNDNode.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/NumberFormatAdapter.h"
#include "org/geogebra/common/util/ScientificFormatAdapter.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"
#include "org/geogebra/common/util/debug/Log.h"

#define OrgGeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR 1.000000000000001

@interface OrgGeogebraCommonKernelStringTemplate () {
 @public
  NSString *name_;
  jboolean hideLHS_;
  OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType_;
  jboolean internationalizeDigits__;
  NSString *casPrintFormPI_;
  id<OrgGeogebraCommonUtilScientificFormatAdapter> sf_;
  id<OrgGeogebraCommonUtilNumberFormatAdapter> nf_;
  jboolean forceSF_;
  jboolean forceNF_;
  jboolean allowMoreDigits__;
  jboolean useRealLabels_;
  jboolean localizeCmds_;
  jboolean usePrefix_;
  IOSDoubleArray *precisions_;
}

- (void)setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)t;

- (OrgGeogebraCommonKernelStringTemplate *)copy__ OBJC_METHOD_FAMILY_NONE;

- (NSString *)printVariableNameWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)printForm
                                                                                              withNSString:(NSString *)label;

- (NSString *)addTempVariablePrefixWithNSString:(NSString *)label;

- (NSString *)right;

- (NSString *)left;

+ (NSString *)opWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)right
                                                        withBoolean:(jboolean)reverse;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStringTemplate, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStringTemplate, stringType_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStringTemplate, casPrintFormPI_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStringTemplate, sf_, id<OrgGeogebraCommonUtilScientificFormatAdapter>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStringTemplate, nf_, id<OrgGeogebraCommonUtilNumberFormatAdapter>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStringTemplate, precisions_, IOSDoubleArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelStringTemplate, ROUND_HALF_UP_FACTOR, jdouble)

__attribute__((unused)) static void OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate *self, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *t);

__attribute__((unused)) static OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_copy__(OrgGeogebraCommonKernelStringTemplate *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelStringTemplate_printVariableNameWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withNSString_(OrgGeogebraCommonKernelStringTemplate *self, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *printForm, NSString *label);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(OrgGeogebraCommonKernelStringTemplate *self, NSString *label);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelStringTemplate_right(OrgGeogebraCommonKernelStringTemplate *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelStringTemplate_left(OrgGeogebraCommonKernelStringTemplate *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelStringTemplate_opWithOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNode *right, jboolean reverse);

@interface OrgGeogebraCommonKernelStringTemplate_$1 : OrgGeogebraCommonKernelStringTemplate

- (jdouble)getRoundHalfUpFactorWithDouble:(jdouble)abs
withOrgGeogebraCommonUtilNumberFormatAdapter:(id<OrgGeogebraCommonUtilNumberFormatAdapter>)nf2
withOrgGeogebraCommonUtilScientificFormatAdapter:(id<OrgGeogebraCommonUtilScientificFormatAdapter>)sf2
                              withBoolean:(jboolean)useSF;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelStringTemplate_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelStringTemplate_$1_initWithNSString_(OrgGeogebraCommonKernelStringTemplate_$1 *self, NSString *arg$0);

__attribute__((unused)) static OrgGeogebraCommonKernelStringTemplate_$1 *new_OrgGeogebraCommonKernelStringTemplate_$1_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelStringTemplate_$1)

@interface OrgGeogebraCommonKernelStringTemplate_$2 : OrgGeogebraCommonKernelStringTemplate

- (NSString *)multiplyStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                            withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                                    withNSString:(NSString *)leftStr
                                                                    withNSString:(NSString *)rightStr
                                                                     withBoolean:(jboolean)valueForm
                                           withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelStringTemplate_$2)

__attribute__((unused)) static void OrgGeogebraCommonKernelStringTemplate_$2_initWithNSString_(OrgGeogebraCommonKernelStringTemplate_$2 *self, NSString *arg$0);

__attribute__((unused)) static OrgGeogebraCommonKernelStringTemplate_$2 *new_OrgGeogebraCommonKernelStringTemplate_$2_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelStringTemplate_$2)

@interface OrgGeogebraCommonKernelStringTemplate_$3 : OrgGeogebraCommonKernelStringTemplate

- (jint)getCoordStyleWithInt:(jint)coordStyle;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelStringTemplate_$3)

__attribute__((unused)) static void OrgGeogebraCommonKernelStringTemplate_$3_initWithNSString_(OrgGeogebraCommonKernelStringTemplate_$3 *self, NSString *arg$0);

__attribute__((unused)) static OrgGeogebraCommonKernelStringTemplate_$3 *new_OrgGeogebraCommonKernelStringTemplate_$3_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelStringTemplate_$3)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelStringTemplate)

OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_noLocalDefault_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_prefixedDefault_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_defaultTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_defaultTemplateLocal_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_realTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_latexTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_latexTemplateMQ_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_mathmlTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_libreofficeTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_giacTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_xmlTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_editTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_regression_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_ogpTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_maxPrecision_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_maxPrecision13_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_numericDefault_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_numericNoLocal_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_numericLatex_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_testTemplate_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_testTemplateJSON_;
OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_testNumeric_;

@implementation OrgGeogebraCommonKernelStringTemplate

- (jboolean)isInsertLineBreaks {
  return NO;
}

- (instancetype)initWithNSString:(NSString *)name {
  OrgGeogebraCommonKernelStringTemplate_initWithNSString_(self, name);
  return self;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)getStringType {
  return self->stringType_;
}

- (jboolean)internationalizeDigits {
  return self->internationalizeDigits__;
}

- (NSString *)getPi {
  return casPrintFormPI_;
}

+ (OrgGeogebraCommonKernelStringTemplate *)getWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)t {
  return OrgGeogebraCommonKernelStringTemplate_getWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(t);
}

- (void)setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)t {
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(self, t);
}

- (jboolean)useScientificWithBoolean:(jboolean)kernelUsesSF {
  return forceSF_ || (kernelUsesSF && !forceNF_);
}

- (jboolean)hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)t {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:t];
}

+ (OrgGeogebraCommonKernelStringTemplate *)printDecimalsWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)type
                                                                                                                            withInt:(jint)decimals
                                                                                                                        withBoolean:(jboolean)allowMore {
  return OrgGeogebraCommonKernelStringTemplate_printDecimalsWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, decimals, allowMore);
}

+ (OrgGeogebraCommonKernelStringTemplate *)printFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)type
                                                                                                                           withInt:(jint)decimals
                                                                                                                       withBoolean:(jboolean)allowMore {
  return OrgGeogebraCommonKernelStringTemplate_printFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, decimals, allowMore);
}

+ (OrgGeogebraCommonKernelStringTemplate *)fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)type {
  return OrgGeogebraCommonKernelStringTemplate_fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(type);
}

+ (OrgGeogebraCommonKernelStringTemplate *)printScientificWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)type
                                                                                                                              withInt:(jint)decimals
                                                                                                                          withBoolean:(jboolean)allowMore {
  return OrgGeogebraCommonKernelStringTemplate_printScientificWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, decimals, allowMore);
}

- (id<OrgGeogebraCommonUtilScientificFormatAdapter>)getSFWithOrgGeogebraCommonUtilScientificFormatAdapter:(id<OrgGeogebraCommonUtilScientificFormatAdapter>)sfk {
  return sf_ == nil || (allowMoreDigits__ && [((id<OrgGeogebraCommonUtilScientificFormatAdapter>) nil_chk(sfk)) getSigDigits] > [sf_ getSigDigits]) ? sfk : sf_;
}

- (id<OrgGeogebraCommonUtilNumberFormatAdapter>)getNFWithOrgGeogebraCommonUtilNumberFormatAdapter:(id<OrgGeogebraCommonUtilNumberFormatAdapter>)nfk {
  return nf_ == nil || (allowMoreDigits__ && [((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk(nfk)) getMaximumFractionDigits] > [nf_ getMaximumFractionDigits]) ? nfk : nf_;
}

- (jboolean)isPrintLocalizedCommandNames {
  return localizeCmds_;
}

- (jint)getCoordStyleWithInt:(jint)coordStyle {
  return coordStyle;
}

- (jboolean)isUseTempVariablePrefix {
  return usePrefix_;
}

- (jdouble)getRoundHalfUpFactorWithDouble:(jdouble)abs
withOrgGeogebraCommonUtilNumberFormatAdapter:(id<OrgGeogebraCommonUtilNumberFormatAdapter>)nf2
withOrgGeogebraCommonUtilScientificFormatAdapter:(id<OrgGeogebraCommonUtilScientificFormatAdapter>)sf2
                              withBoolean:(jboolean)useSF {
  jint digits = useSF ? [((id<OrgGeogebraCommonUtilScientificFormatAdapter>) nil_chk(sf2)) getSigDigits] : [((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk(nf2)) getMaximumFractionDigits];
  if (digits >= 15) {
    return 1;
  }
  if (abs < 1000) {
    return OrgGeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR;
  }
  if (abs > 10E7) {
    return 1;
  }
  if (useSF) {
    if ([self getSFWithOrgGeogebraCommonUtilScientificFormatAdapter:sf2] != nil && [((id<OrgGeogebraCommonUtilScientificFormatAdapter>) nil_chk([self getSFWithOrgGeogebraCommonUtilScientificFormatAdapter:sf2])) getSigDigits] < 10) {
      return OrgGeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR;
    }
  }
  else {
    if ([self getNFWithOrgGeogebraCommonUtilNumberFormatAdapter:nf2] != nil && [((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk([self getNFWithOrgGeogebraCommonUtilNumberFormatAdapter:nf2])) getMaximumFractionDigits] < 10) {
      return OrgGeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR;
    }
  }
  return 1;
}

- (jboolean)allowMoreDigits {
  return allowMoreDigits__;
}

- (jdouble)getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:(id<OrgGeogebraCommonUtilNumberFormatAdapter>)nf2 {
  jint digits = [((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk([self getNFWithOrgGeogebraCommonUtilNumberFormatAdapter:nf2])) getMaximumFractionDigits];
  return digits <= 16 ? IOSDoubleArray_Get(nil_chk(precisions_), digits) : JavaLangMath_powWithDouble_withDouble_(10, -digits);
}

- (jboolean)isUseRealLabels {
  return useRealLabels_;
}

- (OrgGeogebraCommonKernelStringTemplate *)deriveReal {
  OrgGeogebraCommonKernelStringTemplate *copy_ = OrgGeogebraCommonKernelStringTemplate_copy__(self);
  ((OrgGeogebraCommonKernelStringTemplate *) nil_chk(copy_))->useRealLabels_ = YES;
  return copy_;
}

- (OrgGeogebraCommonKernelStringTemplate *)copy__ {
  return OrgGeogebraCommonKernelStringTemplate_copy__(self);
}

- (NSString *)description {
  return name_;
}

- (NSString *)printVariableNameWithNSString:(NSString *)label {
  NSString *ret;
  if ([self isUseTempVariablePrefix]) {
    ret = OrgGeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(self, label);
  }
  ret = OrgGeogebraCommonKernelStringTemplate_printVariableNameWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withNSString_(self, [self getStringType], label);
  if (((jint) [((NSString *) nil_chk(ret)) length]) == 1 && [ret isEqual:@"l"] && [self hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    ret = @"\\ell";
  }
  return ret;
}

- (NSString *)printVariableNameWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)printForm
                                                                                              withNSString:(NSString *)label {
  return OrgGeogebraCommonKernelStringTemplate_printVariableNameWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withNSString_(self, printForm, label);
}

- (NSString *)addTempVariablePrefixWithNSString:(NSString *)label {
  return OrgGeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(self, label);
}

- (OrgGeogebraCommonKernelStringTemplate *)deriveMathMLTemplate {
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    return self;
  }
  OrgGeogebraCommonKernelStringTemplate *ret = OrgGeogebraCommonKernelStringTemplate_copy__(self);
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(nil_chk(ret), OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML());
  return ret;
}

- (OrgGeogebraCommonKernelStringTemplate *)deriveLaTeXTemplate {
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    return self;
  }
  OrgGeogebraCommonKernelStringTemplate *ret = OrgGeogebraCommonKernelStringTemplate_copy__(self);
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(nil_chk(ret), OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX());
  return ret;
}

- (jboolean)hasCASType {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()];
}

- (jboolean)isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) evaluatesToNonComplex2DVector] || [v evaluatesTo3DVector];
}

- (NSString *)plusStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)l
                        withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)r
                                                                withNSString:(NSString *)leftStr
                                                                withNSString:(NSString *)rightStr
                                                                 withBoolean:(jboolean)valueForm {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(l)) unwrap];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(r)) unwrap];
  OrgGeogebraCommonPluginOperationEnum *operation = OrgGeogebraCommonPluginOperationEnum_get_PLUS();
  switch ([stringType_ ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<plus/>", leftStr, rightStr);
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@CZ", left, ' ', [left evaluatesToList]));
      [sb appendWithNSString:@"map("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",ggx->ggx+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")"];
    }
    else if (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left]) && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToList]) {
      [sb appendWithNSString:@"map("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",ggx->ggx+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")"];
    }
    else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point(real("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"[1])+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",im("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"[1])+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
    }
    else if (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) && [left evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point(real("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"[1])+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",im("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"[1])+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    else if (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left]) && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesTo3DVector]) {
      [sb appendWithNSString:@"(("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[0]+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[1]+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[2]+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
    }
    else if ([left evaluatesTo3DVector] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
      [sb appendWithNSString:@"(("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[0]+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[1]+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[2]+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    else if ([left evaluatesToVectorNotPoint] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToVectorNotPoint]) {
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:rightStr];
    }
    else if ([OrgGeogebraCommonKernelArithmeticMyVecNDNode_class_() isInstance:right] && [OrgGeogebraCommonKernelArithmeticMyVecNDNode_class_() isInstance:left]) {
      id<OrgGeogebraCommonKernelArithmeticMyVecNDNode> leftVN = (id<OrgGeogebraCommonKernelArithmeticMyVecNDNode>) check_protocol_cast(left, @protocol(OrgGeogebraCommonKernelArithmeticMyVecNDNode));
      id<OrgGeogebraCommonKernelArithmeticMyVecNDNode> rightVN = (id<OrgGeogebraCommonKernelArithmeticMyVecNDNode>) check_protocol_cast(right, @protocol(OrgGeogebraCommonKernelArithmeticMyVecNDNode));
      jboolean leftIsVector = [leftVN isCASVector];
      jboolean rightIsVector = [((id<OrgGeogebraCommonKernelArithmeticMyVecNDNode>) nil_chk(rightVN)) isCASVector];
      if (leftIsVector && rightIsVector) {
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@"+"];
        [sb appendWithNSString:rightStr];
      }
      else if (!leftIsVector && !rightIsVector) {
        [sb appendWithNSString:@"point("];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@"+"];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
      }
      else {
        if ([leftVN getDimension] == 3 || [rightVN getDimension] == 3) {
          [sb appendWithNSString:@"point("];
          [sb appendWithNSString:@"xcoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"+"];
          [sb appendWithNSString:@"xcoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@"),"];
          [sb appendWithNSString:@"ycoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"+"];
          [sb appendWithNSString:@"ycoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@"),"];
          [sb appendWithNSString:@"zcoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"+"];
          [sb appendWithNSString:@"zcoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@")"];
          [sb appendWithNSString:@")"];
        }
        else {
          [sb appendWithNSString:@"point("];
          [sb appendWithNSString:leftStr];
          [sb appendWithNSString:@"+"];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@")"];
        }
      }
    }
    else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToNonComplex2DVector] && [left evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    else if ([self isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:right] && [self isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:left]) {
      OrgGeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("@C@", [left getClass], ' ', [right getClass]));
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:@"xcoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:@"xcoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),"];
      [sb appendWithNSString:@"ycoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:@"ycoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),"];
      [sb appendWithNSString:@"zcoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:@"zcoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")"];
      [sb appendWithNSString:@")"];
    }
    else {
      [sb appendWithChar:'('];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")+("];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    break;
    default:
    if (valueForm) {
      if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, 0, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(right, 0, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
        break;
      }
    }
    if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:[self rightBracket]];
    }
    else {
      [sb appendWithNSString:leftStr];
    }
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToText] && (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || ([right isGeoElement] && ![((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoElement class])) isLabelSet]))) {
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
        [sb appendWithNSString:@" \\-+ "];
      }
      else {
        [sb appendWithNSString:@" + "];
      }
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:[self rightBracket]];
    }
    else {
      if ([((NSString *) nil_chk(rightStr)) charAtWithInt:0] == '-') {
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-- "];
        }
        else {
          [sb appendWithNSString:@" - "];
        }
        [sb appendWithNSString:[rightStr substring:1]];
      }
      else if ([rightStr hasPrefix:OrgGeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) {
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-- "];
        }
        else {
          [sb appendWithNSString:@" - "];
        }
        [self appendWithJavaLangStringBuilder:sb withNSString:[rightStr substring:3] withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_PLUS()];
      }
      else {
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-+ "];
        }
        else {
          [sb appendWithNSString:@" + "];
        }
        [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_PLUS()];
      }
    }
    break;
  }
  return [sb description];
}

- (NSString *)leftBracket {
  return JreStrcat("$C", OrgGeogebraCommonKernelStringTemplate_left(self), '(');
}

- (NSString *)rightBracket {
  return JreStrcat("$C", OrgGeogebraCommonKernelStringTemplate_right(self), ')');
}

- (NSString *)leftSquareBracket {
  return JreStrcat("$C", OrgGeogebraCommonKernelStringTemplate_left(self), '[');
}

- (NSString *)rightSquareBracket {
  return JreStrcat("$C", OrgGeogebraCommonKernelStringTemplate_right(self), ']');
}

- (NSString *)right {
  return OrgGeogebraCommonKernelStringTemplate_right(self);
}

- (NSString *)left {
  return OrgGeogebraCommonKernelStringTemplate_left(self);
}

- (NSString *)minusStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)l
                         withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)r
                                                                 withNSString:(NSString *)leftStr
                                                                 withNSString:(NSString *)rightStr
                                                                  withBoolean:(jboolean)valueForm
                                        withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(l)) unwrap];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(r)) unwrap];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  switch ([stringType_ ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<minus/>", leftStr, rightStr);
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@CZ", left, ' ', [left evaluatesToList]));
      [sb appendWithNSString:@"map("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",ggx->ggx-"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")"];
    }
    else if (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left]) && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToList]) {
      [sb appendWithNSString:@"map("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",ggx->"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-ggx)"];
    }
    else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-real("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"[1])"];
      [sb appendWithNSString:@","];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-im("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"[1]))"];
    }
    else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right] && [left evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point(real("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"[1])-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),real("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"[1])-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"))"];
    }
    else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesTo3DVector]) {
      [sb appendWithNSString:@"("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[0]"];
      [sb appendWithNSString:@","];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[1]"];
      [sb appendWithNSString:@","];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[2])"];
    }
    else if ([left evaluatesTo3DVector] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
      [sb appendWithNSString:@"(("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[0]-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[1]-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[2]-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"))"];
    }
    else if ([left evaluatesToVectorNotPoint] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToVectorNotPoint]) {
      [sb appendWithChar:'('];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"))"];
    }
    else if ([OrgGeogebraCommonKernelArithmeticMyVecNDNode_class_() isInstance:right] && [OrgGeogebraCommonKernelArithmeticMyVecNDNode_class_() isInstance:left]) {
      id<OrgGeogebraCommonKernelArithmeticMyVecNDNode> leftVN = (id<OrgGeogebraCommonKernelArithmeticMyVecNDNode>) check_protocol_cast(left, @protocol(OrgGeogebraCommonKernelArithmeticMyVecNDNode));
      id<OrgGeogebraCommonKernelArithmeticMyVecNDNode> rightVN = (id<OrgGeogebraCommonKernelArithmeticMyVecNDNode>) check_protocol_cast(right, @protocol(OrgGeogebraCommonKernelArithmeticMyVecNDNode));
      jboolean leftIsVector = [leftVN isCASVector];
      jboolean rightIsVector = [((id<OrgGeogebraCommonKernelArithmeticMyVecNDNode>) nil_chk(rightVN)) isCASVector];
      if (leftIsVector && rightIsVector) {
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@"-("];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@"))"];
      }
      else if (!leftIsVector && !rightIsVector) {
        [sb appendWithNSString:@"point("];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@"-"];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
      }
      else {
        if ([leftVN getDimension] == 3 || [rightVN getDimension] == 3) {
          [sb appendWithNSString:@"point("];
          [sb appendWithNSString:@"xcoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"-"];
          [sb appendWithNSString:@"xcoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@"),"];
          [sb appendWithNSString:@"ycoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"-"];
          [sb appendWithNSString:@"ycoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@"),"];
          [sb appendWithNSString:@"zcoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"-"];
          [sb appendWithNSString:@"zcoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@")"];
          [sb appendWithNSString:@")"];
        }
        else {
          [sb appendWithNSString:@"point("];
          [sb appendWithNSString:leftStr];
          [sb appendWithNSString:@"-"];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@")"];
        }
      }
    }
    else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToNonComplex2DVector] && [left evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    else if ([self isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:right] && [self isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:left]) {
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:@"xcoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:@"xcoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),"];
      [sb appendWithNSString:@"ycoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:@"ycoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),"];
      [sb appendWithNSString:@"zcoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:@"zcoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")"];
      [sb appendWithNSString:@")"];
    }
    else {
      [sb appendWithChar:'('];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    break;
    default:
    if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:[self rightBracket]];
    }
    else {
      [sb appendWithNSString:leftStr];
    }
    if (valueForm && [((NSString *) nil_chk(rightStr)) isEqual:JreStrcat("C", ((OrgGeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_)]) {
      break;
    }
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || (OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(right) >= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
      if ([((NSString *) nil_chk(rightStr)) charAtWithInt:0] == '-') {
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-+ "];
        }
        else {
          [sb appendWithNSString:@" + "];
        }
        [sb appendWithNSString:[rightStr substring:1]];
      }
      else if ([rightStr hasPrefix:OrgGeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) {
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-+ "];
        }
        else {
          [sb appendWithNSString:@" + "];
        }
        [sb appendWithNSString:[rightStr substring:3]];
      }
      else {
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-- "];
        }
        else {
          [sb appendWithNSString:@" - "];
        }
        [sb appendWithNSString:rightStr];
      }
    }
    else {
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
        [sb appendWithNSString:@" \\-- "];
      }
      else {
        [sb appendWithNSString:@" - "];
      }
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:[self rightBracket]];
    }
    break;
  }
  return [sb description];
}

- (NSString *)multiplyStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                            withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                                    withNSString:(NSString *)leftStr
                                                                    withNSString:(NSString *)rightStr
                                                                     withBoolean:(jboolean)valueForm
                                           withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  OrgGeogebraCommonPluginOperationEnum *operation = OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY();
  {
    jboolean nounary;
    jint opIDright;
    switch ([stringType_ ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
      OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<times/>", leftStr, rightStr);
      break;
      default:
      if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, 1, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(right, 1, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (((((jint) [((NSString *) nil_chk(rightStr)) length]) == 2) && ((([rightStr charAtWithInt:0] == OrgGeogebraCommonUtilUnicode_DEGREE_CHAR) && ([rightStr charAtWithInt:1] == (((OrgGeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_ + 1))) || (([rightStr charAtWithInt:0] == OrgGeogebraCommonUtilUnicode_DEGREE_CHAR) && ([rightStr charAtWithInt:1] == (((OrgGeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_ + 1))))) || [rightStr isEqual:OrgGeogebraCommonUtilUnicode_get_DEGREE_()]) {
        jboolean rtl = [((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) isRightToLeftDigitsWithOrgGeogebraCommonKernelStringTemplate:self];
        if (rtl) {
          [sb appendWithNSString:OrgGeogebraCommonUtilUnicode_get_DEGREE_()];
        }
        if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) {
          [sb appendWithChar:'('];
        }
        [sb appendWithNSString:leftStr];
        if (![left isLeaf]) {
          [sb appendWithChar:')'];
        }
        if (!rtl) {
          [sb appendWithNSString:OrgGeogebraCommonUtilUnicode_get_DEGREE_()];
        }
        break;
      }
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      nounary = YES;
      if (![self isPrintLocalizedCommandNames] || ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && [self isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:right])) {
        [sb appendWithNSString:[self leftBracket]];
      }
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] || (OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(left) >= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
        if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, -1, !valueForm)) {
          nounary = NO;
          [sb appendWithChar:'-'];
        }
        else {
          if ([((NSString *) nil_chk(leftStr)) hasPrefix:OrgGeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) {
            [sb appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
            [sb appendWithNSString:[self leftBracket]];
            [sb appendWithNSString:leftStr];
            [sb appendWithNSString:[self rightBracket]];
            [sb appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
          }
          else {
            [sb appendWithNSString:leftStr];
          }
        }
      }
      else {
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      opIDright = OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(right);
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || (opIDright >= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
        jboolean showMultiplicationSign = NO;
        jboolean multiplicationSpaceNeeded = YES;
        if (nounary) {
          {
            jchar lastLeft;
            jchar firstRight;
            jchar firstLeft;
            switch ([stringType_ ordinal]) {
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
              showMultiplicationSign = YES;
              break;
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
              lastLeft = [leftStr charAtWithInt:((jint) [((NSString *) nil_chk(leftStr)) length]) - 1];
              firstRight = [((NSString *) nil_chk(rightStr)) charAtWithInt:0];
              showMultiplicationSign = ((OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(lastLeft) || (lastLeft == '}')) && (OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(firstRight) || [rightStr hasPrefix:@"\\frac"]));
              multiplicationSpaceNeeded = !([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]] && [((NSString *) nil_chk(OrgGeogebraCommonUtilUnicode_get_DEGREE_())) isEqual:[right toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_defaultTemplate_]]);
              break;
              default:
              firstLeft = [((NSString *) nil_chk(leftStr)) charAtWithInt:0];
              lastLeft = [leftStr charAtWithInt:((jint) [leftStr length]) - 1];
              firstRight = [((NSString *) nil_chk(rightStr)) charAtWithInt:0];
              showMultiplicationSign = (JavaLangCharacter_isDigitWithChar_(lastLeft) && (OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(firstRight) || ([rightStr charAtWithInt:0] == 'E')));
              multiplicationSpaceNeeded = showMultiplicationSign;
              if (!multiplicationSpaceNeeded) {
                jboolean leftIsNumber = [left isLeaf] && (OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(firstLeft) || (firstLeft == '-')) && OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(lastLeft);
                multiplicationSpaceNeeded = (showMultiplicationSign || !(leftIsNumber && !JavaLangCharacter_isDigitWithChar_(firstRight)));
              }
            }
          }
          if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
            [sb appendWithNSString:@"\\-"];
          }
          if (showMultiplicationSign) {
            [sb appendWithNSString:[self multiplicationSign]];
          }
          else if (multiplicationSpaceNeeded) {
            [sb appendWithNSString:[self multiplicationSpace]];
          }
        }
        jboolean rtlMinus;
        if (((rtlMinus = [((NSString *) nil_chk(rightStr)) hasPrefix:OrgGeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) || ([rightStr charAtWithInt:0] == '-')) || (!nounary && ![right isLeaf] && (opIDright <= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_DIVIDE())) ordinal])) || (showMultiplicationSign && [((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()])) {
          if (rtlMinus) {
            [sb appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
          }
          [sb appendWithNSString:[self leftBracket]];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:[self rightBracket]];
          if (rtlMinus) {
            [sb appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
          }
        }
        else {
          [sb appendWithNSString:rightStr];
        }
      }
      else {
        if (nounary) {
          switch ([stringType_ ordinal]) {
            case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
            case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
            case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
            case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
            [sb appendWithNSString:[self multiplicationSign]];
            break;
            default:
            [sb appendWithNSString:[self multiplicationSpace]];
          }
        }
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      if (![self isPrintLocalizedCommandNames] || ([left evaluatesToList] && [self isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:right])) {
        [sb appendWithNSString:[self rightBracket]];
      }
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]] && [right isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getOperation])) isInequality]) {
        jboolean reverse = [((NSString *) nil_chk(leftStr)) hasPrefix:@"-"];
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] withBoolean:valueForm]];
        [sb appendWithChar:')'];
        [sb appendWithNSString:OrgGeogebraCommonKernelStringTemplate_opWithOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), reverse)];
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getRight] withBoolean:valueForm]];
        [sb appendWithChar:')'];
      }
      else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]] && [left isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getOperation])) isInequality]) {
        jboolean reverse = [((NSString *) nil_chk(rightStr)) hasPrefix:@"-"];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] withBoolean:valueForm]];
        [sb appendWithChar:')'];
        [sb appendWithNSString:OrgGeogebraCommonKernelStringTemplate_opWithOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), reverse)];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getRight] withBoolean:valueForm]];
        [sb appendWithChar:')'];
      }
      else if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, -1, !valueForm)) {
        [sb appendWithNSString:@"-("];
        [sb appendWithNSString:rightStr];
        [sb appendWithChar:')'];
      }
      else {
        [sb appendWithNSString:@"("];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
        break;
      }
      break;
    }
  }
  return [sb description];
}

- (NSString *)expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v
                                                                  withBoolean:(jboolean)valueMode {
  return valueMode ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:self] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) toStringWithOrgGeogebraCommonKernelStringTemplate:self];
}

+ (NSString *)opWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)right
                                                        withBoolean:(jboolean)reverse {
  return OrgGeogebraCommonKernelStringTemplate_opWithOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(right, reverse);
}

- (NSString *)multiplicationSign {
  switch ([stringType_ ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    return @" \\cdot ";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @" cdot ";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA:
    return @" ";
    default:
    return @" * ";
  }
}

- (NSString *)multiplicationSpace {
  return ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) ? @" \\; " : @" ";
}

- (void)appendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                           withNSString:(NSString *)str
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op {
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isLeaf] || ((OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(ev) >= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) ordinal]) && (!OrgGeogebraCommonKernelArithmeticExpressionNode_chainedBooleanOpWithOrgGeogebraCommonPluginOperationEnum_(op) || !OrgGeogebraCommonKernelArithmeticExpressionNode_chainedBooleanOpWithOrgGeogebraCommonPluginOperationEnum_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([ev wrap])) getOperation])))) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:str];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self leftBracket]];
    [sb appendWithNSString:str];
    [sb appendWithNSString:[self rightBracket]];
  }
}

- (NSString *)divideStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                          withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                                  withNSString:(NSString *)leftStr
                                                                  withNSString:(NSString *)rightStr
                                                                   withBoolean:(jboolean)valueForm {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  switch ([stringType_ ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<divide/>", leftStr, rightStr);
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if (([((NSString *) nil_chk(leftStr)) charAtWithInt:0] == '-') && ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] || ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && OrgGeogebraCommonKernelArithmeticExpressionNode_isMultiplyOrDivideWithOrgGeogebraCommonKernelArithmeticExpressionNode_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))))) {
      [sb appendWithNSString:@"-\\frac{"];
      [sb appendWithNSString:[leftStr substring:1]];
      [sb appendWithNSString:@"}{"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"}"];
    }
    else {
      [sb appendWithNSString:@"\\frac{"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"}{"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"}"];
    }
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    [sb appendWithNSString:@"{ "];
    [sb appendWithNSString:leftStr];
    [sb appendWithNSString:@" } over { "];
    [sb appendWithNSString:rightStr];
    [sb appendWithNSString:@" }"];
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    [sb appendWithNSString:@"("];
    [sb appendWithNSString:leftStr];
    [sb appendWithNSString:@")/("];
    [sb appendWithNSString:rightStr];
    [sb appendWithChar:')'];
    break;
    default:
    if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(right, 1, !valueForm)) {
      [sb appendWithNSString:leftStr];
      break;
    }
    [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()];
    [sb appendWithNSString:@" / "];
    [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_POWER()];
  }
  return [sb description];
}

- (NSString *)notStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                                               withNSString:(NSString *)leftStr {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<not/>", leftStr, nil);
  }
  else {
    switch ([stringType_ ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      [sb appendWithNSString:@"\\neg "];
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      [sb appendWithNSString:@"neg "];
      break;
      default:
      [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strNOT_()];
    }
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) {
      [sb appendWithNSString:leftStr];
    }
    else {
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:[self rightBracket]];
    }
  }
  return [sb description];
}

+ (void)appendOpWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                             withNSString:(NSString *)string
                             withNSString:(NSString *)leftStr
                             withNSString:(NSString *)rightStr {
  OrgGeogebraCommonKernelStringTemplate_appendOpWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, string, leftStr, rightStr);
}

- (NSString *)orStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                      withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                              withNSString:(NSString *)leftStr
                                                              withNSString:(NSString *)rightStr {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<or/>", leftStr, rightStr);
  }
  else {
    [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_OR()];
    [sb appendWithChar:' '];
    switch ([stringType_ ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if ([self isInsertLineBreaks]) {
        [sb appendWithNSString:@"\\-"];
      }
      [sb appendWithNSString:@"\\vee"];
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      [sb appendWithNSString:@"or"];
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      [sb appendWithNSString:@"||"];
      break;
      default:
      [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strOR_()];
    }
    [sb appendWithChar:' '];
    [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_OR()];
  }
  return [sb description];
}

- (NSString *)geqSign {
  switch ([[self getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\geq";
    }
    return @"\\geq";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return @">=";
    default:
    return OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strGREATER_EQUAL_();
  }
}

- (NSString *)leqSign {
  switch ([[self getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\leq";
    }
    return @"\\leq";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return @"<=";
    default:
    return OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strLESS_EQUAL_();
  }
}

- (NSString *)greaterSign {
  if ([self hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
    return @"\\->";
  }
  return @">";
}

- (NSString *)lessSign {
  if ([self hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
    return @"\\-<";
  }
  return @" < ";
}

- (NSString *)strictSubsetSign {
  switch ([[self getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\subset";
    }
    return @"\\subset";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"subset";
    default:
    return OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strIS_SUBSET_OF_STRICT_();
  }
}

- (NSString *)subsetSign {
  switch ([[self getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\subseteq";
    }
    return @"\\subseteq";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"subseteq";
    default:
    return OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strIS_SUBSET_OF_();
  }
}

- (NSString *)notEqualSign {
  switch ([[self getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\neq";
    }
    return @"\\neq";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"<>";
    default:
    return OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strNOT_EQUAL_();
  }
}

- (NSString *)equalSign {
  switch ([[self getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\questeq ";
    }
    return @"\\questeq ";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return @"=";
    default:
    return OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strEQUAL_BOOLEAN_();
  }
}

- (NSString *)perpSign {
  switch ([[self getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\perp";
    }
    return @"\\perp";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"ortho";
    default:
    return OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strPERPENDICULAR_();
  }
}

- (NSString *)parallelSign {
  switch ([[self getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\parallel";
    }
    return @"\\parallel";
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"parallel";
    default:
    return OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strPARALLEL_();
  }
}

- (void)infixBinaryWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
    withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
                                withNSString:(NSString *)leftStr
                                withNSString:(NSString *)rightStr
   withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                withNSString:(NSString *)operationString {
  [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:' '];
  [sb appendWithNSString:operationString];
  [sb appendWithChar:' '];
  [tpl appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
}

- (NSString *)andIntervalStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                               withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                                       withNSString:(NSString *)leftStr
                                                                       withNSString:(NSString *)rightStr
                                                                        withBoolean:(jboolean)valueForm {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()] || [stringType_ isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    return [self andStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr];
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode]) {
    [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) wrap])) getCASstringWithOrgGeogebraCommonKernelStringTemplate:self withBoolean:!valueForm]];
    [sb appendWithChar:' '];
    switch ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation] ordinal]) {
      case OrgGeogebraCommonPluginOperation_LESS:
      [sb appendWithNSString:[self lessSign]];
      break;
      case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
      [sb appendWithNSString:[self leqSign]];
      break;
      case OrgGeogebraCommonPluginOperation_GREATER:
      [sb appendWithNSString:[self greaterSign]];
      break;
      case OrgGeogebraCommonPluginOperation_EQUAL_BOOLEAN:
      [sb appendWithNSString:[self equalSign]];
      break;
      case OrgGeogebraCommonPluginOperation_NOT_EQUAL:
      [sb appendWithNSString:[self notEqualSign]];
      break;
      case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
      [sb appendWithNSString:[self geqSign]];
      break;
      case OrgGeogebraCommonPluginOperation_IS_SUBSET_OF:
      [sb appendWithNSString:[self subsetSign]];
      break;
      case OrgGeogebraCommonPluginOperation_IS_SUBSET_OF_STRICT:
      [sb appendWithNSString:[self strictSubsetSign]];
      break;
      case OrgGeogebraCommonPluginOperation_PARALLEL:
      [sb appendWithNSString:[self parallelSign]];
      break;
      case OrgGeogebraCommonPluginOperation_PERPENDICULAR:
      [sb appendWithNSString:[self perpSign]];
      break;
      default:
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$", [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation], @" invalid in chain"));
    }
    [sb appendWithChar:' '];
    [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getRightTree])) getCASstringWithOrgGeogebraCommonKernelStringTemplate:self withBoolean:!valueForm]];
    return [sb description];
  }
  return [self andStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr];
}

- (NSString *)andStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                       withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                               withNSString:(NSString *)leftStr
                                                               withNSString:(NSString *)rightStr {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<and/>", leftStr, rightStr);
  }
  else if ([stringType_ isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    [sb appendWithChar:'('];
    [sb appendWithNSString:leftStr];
    [sb appendWithNSString:@" && "];
    [sb appendWithNSString:rightStr];
    [sb appendWithChar:')'];
  }
  else {
    [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_AND()];
    [sb appendWithChar:' '];
    switch ([stringType_ ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if ([self isInsertLineBreaks]) {
        [sb appendWithNSString:@"\\-"];
      }
      [sb appendWithNSString:@"\\wedge"];
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      [sb appendWithNSString:@"and"];
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      [sb appendWithNSString:@"&&"];
      break;
      default:
      [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strAND_()];
    }
    [sb appendWithChar:' '];
    [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_AND()];
  }
  return [sb description];
}

- (NSString *)powerStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                         withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                                 withNSString:(NSString *)leftStr
                                                                 withNSString:(NSString *)rightStr
                                                                  withBoolean:(jboolean)valueForm {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<power/>", leftStr, rightStr);
  }
  else {
    jboolean finished = NO;
    if ([stringType_ isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode]) {
      {
        jdouble indexD;
        jint index;
        switch ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation] ordinal]) {
          case OrgGeogebraCommonPluginOperation_SIN:
          case OrgGeogebraCommonPluginOperation_COS:
          case OrgGeogebraCommonPluginOperation_TAN:
          case OrgGeogebraCommonPluginOperation_SEC:
          case OrgGeogebraCommonPluginOperation_CSC:
          case OrgGeogebraCommonPluginOperation_COT:
          case OrgGeogebraCommonPluginOperation_SINH:
          case OrgGeogebraCommonPluginOperation_COSH:
          case OrgGeogebraCommonPluginOperation_TANH:
          case OrgGeogebraCommonPluginOperation_SECH:
          case OrgGeogebraCommonPluginOperation_CSCH:
          case OrgGeogebraCommonPluginOperation_COTH:
          indexD = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluateDouble];
          index = (jint) JavaLangMath_roundWithDouble_(indexD);
          if (!(JavaLangDouble_isInfiniteWithDouble_(indexD) || JavaLangDouble_isNaNWithDouble_(indexD)) && (index > 0)) {
            NSString *leftStrTrimmed = [((NSString *) nil_chk(leftStr)) trim];
            jint spaceIndex = [((NSString *) nil_chk([((NSString *) nil_chk(leftStrTrimmed)) trim])) indexOf:' '];
            [sb appendWithNSString:[leftStrTrimmed substring:0 endIndex:spaceIndex]];
            [sb appendWithNSString:@" ^{"];
            [sb appendWithNSString:rightStr];
            [sb appendWithNSString:@"}"];
            [sb appendWithNSString:[leftStrTrimmed substring:spaceIndex + 1]];
            finished = YES;
            break;
          }
          default:
          ;
        }
      }
      if (finished) {
        return [sb description];
      }
    }
    switch ([stringType_ ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      if ([@"e" isEqual:leftStr] || [((NSString *) nil_chk(OrgGeogebraCommonUtilUnicode_get_EULER_STRING_())) isEqual:leftStr]) {
        [sb appendWithNSString:@"exp("];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
        break;
      }
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()) {
        OrgGeogebraCommonKernelArithmeticExpressionNode *enR = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
        [sb appendWithNSString:@"simplify(surd("];
        [sb appendWithNSString:leftStr];
        [sb appendWithChar:','];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[enR getRight] withBoolean:valueForm]];
        [sb appendWithNSString:@")"];
        [sb appendWithNSString:@"^("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[enR getLeft] withBoolean:valueForm]];
        [sb appendWithNSString:@"))"];
      }
      else {
        [sb appendWithNSString:@"("];
        [sb appendWithNSString:leftStr];
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && !([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:[left unwrap]] && [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast([left unwrap], @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) isMatrix])) {
          [sb appendWithNSString:@").^("];
        }
        else {
          [sb appendWithNSString:@")^("];
        }
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
      }
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] && ([((NSString *) nil_chk(leftStr)) charAtWithInt:0] != '-')) {
        [sb appendWithNSString:leftStr];
        break;
      }
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      default:
      if (([((NSString *) nil_chk(leftStr)) charAtWithInt:0] != '-') && ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] || ((OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(left) > [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_POWER())) ordinal]) && (OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(left) != [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_EXP())) ordinal])))) {
        [sb appendWithNSString:leftStr];
      }
      else {
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      break;
    }
    {
      jboolean addParentheses;
      switch ([stringType_ ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        if ([@"1" isEqual:rightStr]) {
          break;
        }
        [sb appendWithChar:'^'];
        addParentheses = ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_POWER()]);
        [sb appendWithChar:'{'];
        if (addParentheses) {
          [sb appendWithNSString:[self leftBracket]];
        }
        [sb appendWithNSString:rightStr];
        if (addParentheses) {
          [sb appendWithNSString:[self rightBracket]];
        }
        [sb appendWithChar:'}'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
        [sb appendWithChar:'^'];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithChar:')'];
        break;
        default:
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || ((OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(right) > [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_POWER())) ordinal]) && (OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(right) != [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_EXP())) ordinal]))) {
          @try {
            jint i = JavaLangInteger_parseIntWithNSString_(rightStr);
            NSString *index = @"";
            if (i < 0) {
              [sb appendWithChar:0x207b];
              i = -i;
            }
            if (i == 0) {
              [sb appendWithChar:0x2070];
            }
            else {
              while (i > 0) {
                switch (i % 10) {
                  case 0:
                  index = JreStrcat("C$", 0x2070, index);
                  break;
                  case 1:
                  index = JreStrcat("C$", 0x00b9, index);
                  break;
                  case 2:
                  index = JreStrcat("C$", 0x00b2, index);
                  break;
                  case 3:
                  index = JreStrcat("C$", 0x00b3, index);
                  break;
                  case 4:
                  index = JreStrcat("C$", 0x2074, index);
                  break;
                  case 5:
                  index = JreStrcat("C$", 0x2075, index);
                  break;
                  case 6:
                  index = JreStrcat("C$", 0x2076, index);
                  break;
                  case 7:
                  index = JreStrcat("C$", 0x2077, index);
                  break;
                  case 8:
                  index = JreStrcat("C$", 0x2078, index);
                  break;
                  case 9:
                  index = JreStrcat("C$", 0x2079, index);
                  break;
                }
                i = i / 10;
              }
            }
            [sb appendWithNSString:index];
          }
          @catch (JavaLangException *e) {
            [sb appendWithChar:'^'];
            [sb appendWithNSString:rightStr];
          }
        }
        else {
          [sb appendWithChar:'^'];
          [sb appendWithNSString:[self leftBracket]];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:[self rightBracket]];
        }
      }
    }
  }
  return [sb description];
}

- (NSString *)convertScientificNotationWithNSString:(NSString *)scientificStr {
  if ([self hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    return OrgGeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(scientificStr);
  }
  if ([self hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()]) {
    return scientificStr;
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(scientificStr)) length]) * 2) autorelease];
  jboolean Efound = NO;
  for (jint i = 0; i < ((jint) [scientificStr length]); i++) {
    jchar ch = [scientificStr charAtWithInt:i];
    if (ch == 'E') {
      if ([self hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
        [sb appendWithNSString:@" \\cdot 10^{"];
      }
      else {
        [sb appendWithNSString:@"*10^("];
      }
      Efound = YES;
    }
    else if (ch != '+') {
      [sb appendWithChar:ch];
    }
  }
  if (Efound) {
    if ([self hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
      [sb appendWithNSString:@"}"];
    }
    else {
      [sb appendWithNSString:@")"];
    }
  }
  return [sb description];
}

+ (NSString *)convertScientificNotationGiacWithNSString:(NSString *)originalString {
  return OrgGeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(originalString);
}

- (jboolean)isHideLHS {
  return self->hideLHS_;
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(stringType_);
  RELEASE_(casPrintFormPI_);
  RELEASE_(sf_);
  RELEASE_(nf_);
  RELEASE_(precisions_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelStringTemplate class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_noLocalDefault_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"nonLocalDefault"));
    {
      OrgGeogebraCommonKernelStringTemplate_noLocalDefault_->localizeCmds_ = NO;
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_prefixedDefault_, nil, new_OrgGeogebraCommonKernelStringTemplate_$1_initWithNSString_(@"prefixedDefault"));
    {
      OrgGeogebraCommonKernelStringTemplate_prefixedDefault_->localizeCmds_ = NO;
      OrgGeogebraCommonKernelStringTemplate_prefixedDefault_->internationalizeDigits__ = NO;
      OrgGeogebraCommonKernelStringTemplate_prefixedDefault_->forceNF_ = YES;
      OrgGeogebraCommonKernelStringTemplate_prefixedDefault_->usePrefix_ = YES;
      OrgGeogebraCommonKernelStringTemplate_set_nf_(OrgGeogebraCommonKernelStringTemplate_prefixedDefault_, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithInt:15]);
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_defaultTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"defaultTemplate"));
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_defaultTemplateLocal_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"defaultTemplateLocal"));
    {
      OrgGeogebraCommonKernelStringTemplate_defaultTemplateLocal_->localizeCmds_ = YES;
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_realTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"realTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_realTemplate_->useRealLabels_ = YES;
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_latexTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"latexTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_latexTemplate_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX());
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_latexTemplateMQ_, nil, new_OrgGeogebraCommonKernelStringTemplate_$2_initWithNSString_(@"latexTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_latexTemplateMQ_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX());
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_mathmlTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"mathmlTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_mathmlTemplate_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML());
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_libreofficeTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"libreOfficeTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_libreofficeTemplate_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE());
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_giacTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"giacTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_giacTemplate_->internationalizeDigits__ = NO;
      OrgGeogebraCommonKernelStringTemplate_giacTemplate_->usePrefix_ = NO;
      OrgGeogebraCommonKernelStringTemplate_giacTemplate_->forceNF_ = YES;
      OrgGeogebraCommonKernelStringTemplate_giacTemplate_->localizeCmds_ = NO;
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_giacTemplate_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC());
      OrgGeogebraCommonKernelStringTemplate_set_nf_(OrgGeogebraCommonKernelStringTemplate_giacTemplate_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getNumberFormatWithInt:15]);
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_xmlTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_$3_initWithNSString_(@"xmlTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_xmlTemplate_->forceSF_ = YES;
      OrgGeogebraCommonKernelStringTemplate_xmlTemplate_->allowMoreDigits__ = YES;
      OrgGeogebraCommonKernelStringTemplate_xmlTemplate_->internationalizeDigits__ = NO;
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_xmlTemplate_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML());
      OrgGeogebraCommonKernelStringTemplate_xmlTemplate_->localizeCmds_ = NO;
      OrgGeogebraCommonKernelStringTemplate_set_sf_(OrgGeogebraCommonKernelStringTemplate_xmlTemplate_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_editTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"editTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_set_sf_(OrgGeogebraCommonKernelStringTemplate_editTemplate_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:OrgGeogebraCommonKernelGeosGeoElement_MIN_EDITING_PRINT_PRECISION withInt:20 withBoolean:NO]);
      OrgGeogebraCommonKernelStringTemplate_set_nf_(OrgGeogebraCommonKernelStringTemplate_editTemplate_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getNumberFormatWithInt:OrgGeogebraCommonKernelGeosGeoElement_MIN_EDITING_PRINT_PRECISION]);
      OrgGeogebraCommonKernelStringTemplate_editTemplate_->allowMoreDigits__ = YES;
      OrgGeogebraCommonKernelStringTemplate_editTemplate_->hideLHS_ = YES;
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_regression_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"regression"));
    {
      OrgGeogebraCommonKernelStringTemplate_set_sf_(OrgGeogebraCommonKernelStringTemplate_regression_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:6 withInt:20 withBoolean:NO]);
      OrgGeogebraCommonKernelStringTemplate_set_nf_(OrgGeogebraCommonKernelStringTemplate_regression_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getNumberFormatWithInt:6]);
      OrgGeogebraCommonKernelStringTemplate_regression_->forceSF_ = YES;
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_regression_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML());
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_ogpTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"ogpTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_ogpTemplate_->forceSF_ = NO;
      OrgGeogebraCommonKernelStringTemplate_ogpTemplate_->internationalizeDigits__ = NO;
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_ogpTemplate_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_OGP());
      OrgGeogebraCommonKernelStringTemplate_ogpTemplate_->localizeCmds_ = NO;
      OrgGeogebraCommonKernelStringTemplate_set_nf_(OrgGeogebraCommonKernelStringTemplate_ogpTemplate_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getNumberFormatWithInt:0]);
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_maxPrecision_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"maxPrecision"));
    {
      OrgGeogebraCommonKernelStringTemplate_set_sf_(OrgGeogebraCommonKernelStringTemplate_maxPrecision_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
      OrgGeogebraCommonKernelStringTemplate_maxPrecision_->allowMoreDigits__ = YES;
      OrgGeogebraCommonKernelStringTemplate_maxPrecision_->forceSF_ = YES;
      OrgGeogebraCommonKernelStringTemplate_maxPrecision_->localizeCmds_ = NO;
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_maxPrecision13_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"maxPrecision13"));
    {
      OrgGeogebraCommonKernelStringTemplate_set_sf_(OrgGeogebraCommonKernelStringTemplate_maxPrecision13_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:13 withInt:20 withBoolean:NO]);
      OrgGeogebraCommonKernelStringTemplate_maxPrecision13_->allowMoreDigits__ = YES;
      OrgGeogebraCommonKernelStringTemplate_maxPrecision13_->forceSF_ = YES;
      OrgGeogebraCommonKernelStringTemplate_maxPrecision13_->localizeCmds_ = NO;
      OrgGeogebraCommonKernelStringTemplate_set_casPrintFormPI_(OrgGeogebraCommonKernelStringTemplate_maxPrecision13_, @"3.141592653590");
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_numericDefault_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"numericDefault"));
    {
      OrgGeogebraCommonKernelStringTemplate_numericDefault_->allowMoreDigits__ = YES;
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_numericNoLocal_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"numericNoLocal"));
    {
      OrgGeogebraCommonKernelStringTemplate_numericNoLocal_->allowMoreDigits__ = YES;
      OrgGeogebraCommonKernelStringTemplate_numericNoLocal_->localizeCmds_ = NO;
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_numericLatex_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"numericLatex"));
    {
      OrgGeogebraCommonKernelStringTemplate_set_stringType_(OrgGeogebraCommonKernelStringTemplate_numericLatex_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX());
      OrgGeogebraCommonKernelStringTemplate_numericLatex_->allowMoreDigits__ = YES;
      OrgGeogebraCommonKernelStringTemplate_numericLatex_->useRealLabels_ = YES;
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_testTemplate_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"testTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_testTemplate_->internationalizeDigits__ = NO;
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_testTemplate_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML());
      OrgGeogebraCommonKernelStringTemplate_set_sf_(OrgGeogebraCommonKernelStringTemplate_testTemplate_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_testTemplateJSON_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"testTemplate"));
    {
      OrgGeogebraCommonKernelStringTemplate_testTemplate_->internationalizeDigits__ = NO;
      OrgGeogebraCommonKernelStringTemplate_set_sf_(OrgGeogebraCommonKernelStringTemplate_testTemplate_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
    }
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelStringTemplate_testNumeric_, nil, new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(@"testNumeric"));
    {
      OrgGeogebraCommonKernelStringTemplate_testNumeric_->internationalizeDigits__ = NO;
      OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate_testNumeric_, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML());
      OrgGeogebraCommonKernelStringTemplate_testNumeric_->allowMoreDigits__ = YES;
      OrgGeogebraCommonKernelStringTemplate_set_sf_(OrgGeogebraCommonKernelStringTemplate_testNumeric_, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
    }
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelStringTemplate)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isInsertLineBreaks", NULL, "Z", 0x1, NULL, NULL },
    { "initWithNSString:", "StringTemplate", NULL, 0x4, NULL, NULL },
    { "getStringType", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNodeConstants$StringType;", 0x1, NULL, NULL },
    { "internationalizeDigits", NULL, "Z", 0x1, NULL, NULL },
    { "getPi", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "get", "Lorg.geogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "setType", "V", 0x2, NULL, NULL },
    { "useScientificWithBoolean:", "useScientific", "Z", 0x1, NULL, NULL },
    { "hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "hasType", "Z", 0x1, NULL, NULL },
    { "printDecimalsWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:withInt:withBoolean:", "printDecimals", "Lorg.geogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "printFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:withInt:withBoolean:", "printFigures", "Lorg.geogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "fullFigures", "Lorg.geogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "printScientificWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:withInt:withBoolean:", "printScientific", "Lorg.geogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "getSFWithOrgGeogebraCommonUtilScientificFormatAdapter:", "getSF", "Lorg.geogebra.common.util.ScientificFormatAdapter;", 0x1, NULL, NULL },
    { "getNFWithOrgGeogebraCommonUtilNumberFormatAdapter:", "getNF", "Lorg.geogebra.common.util.NumberFormatAdapter;", 0x1, NULL, NULL },
    { "isPrintLocalizedCommandNames", NULL, "Z", 0x1, NULL, NULL },
    { "getCoordStyleWithInt:", "getCoordStyle", "I", 0x1, NULL, NULL },
    { "isUseTempVariablePrefix", NULL, "Z", 0x1, NULL, NULL },
    { "getRoundHalfUpFactorWithDouble:withOrgGeogebraCommonUtilNumberFormatAdapter:withOrgGeogebraCommonUtilScientificFormatAdapter:withBoolean:", "getRoundHalfUpFactor", "D", 0x1, NULL, NULL },
    { "allowMoreDigits", NULL, "Z", 0x1, NULL, NULL },
    { "getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:", "getPrecision", "D", 0x1, NULL, NULL },
    { "isUseRealLabels", NULL, "Z", 0x1, NULL, NULL },
    { "deriveReal", NULL, "Lorg.geogebra.common.kernel.StringTemplate;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.StringTemplate;", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "printVariableNameWithNSString:", "printVariableName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "printVariableNameWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:withNSString:", "printVariableName", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "addTempVariablePrefixWithNSString:", "addTempVariablePrefix", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "deriveMathMLTemplate", NULL, "Lorg.geogebra.common.kernel.StringTemplate;", 0x1, NULL, NULL },
    { "deriveLaTeXTemplate", NULL, "Lorg.geogebra.common.kernel.StringTemplate;", 0x1, NULL, NULL },
    { "hasCASType", NULL, "Z", 0x1, NULL, NULL },
    { "isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "isNDvector", "Z", 0x4, NULL, NULL },
    { "plusStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:", "plusString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "leftBracket", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "rightBracket", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "leftSquareBracket", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "rightSquareBracket", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "right", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "left", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "minusStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:withOrgGeogebraCommonMainLocalization:", "minusString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "multiplyStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:withOrgGeogebraCommonMainLocalization:", "multiplyString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "expToString", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "opWithOrgGeogebraCommonKernelArithmeticExpressionNode:withBoolean:", "op", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "multiplicationSign", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "multiplicationSpace", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "appendWithJavaLangStringBuilder:withNSString:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:", "append", "V", 0x1, NULL, NULL },
    { "divideStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:", "divideString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "notStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "notString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "appendOpWithJavaLangStringBuilder:withNSString:withNSString:withNSString:", "appendOp", "V", 0x9, NULL, NULL },
    { "orStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:", "orString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "geqSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "leqSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "greaterSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "lessSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "strictSubsetSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "subsetSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "notEqualSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "equalSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "perpSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parallelSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "infixBinaryWithJavaLangStringBuilder:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:withNSString:withNSString:withOrgGeogebraCommonKernelStringTemplate:withNSString:", "infixBinary", "V", 0x1, NULL, NULL },
    { "andIntervalStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:", "andIntervalString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "andStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:", "andString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "powerStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:", "powerString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "convertScientificNotationWithNSString:", "convertScientificNotation", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "convertScientificNotationGiacWithNSString:", "convertScientificNotationGiac", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "isHideLHS", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ROUND_HALF_UP_FACTOR_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "hideLHS_", NULL, 0x2, "Z", NULL, NULL,  },
    { "noLocalDefault_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_noLocalDefault_, NULL,  },
    { "prefixedDefault_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_prefixedDefault_, NULL,  },
    { "defaultTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_defaultTemplate_, NULL,  },
    { "defaultTemplateLocal_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_defaultTemplateLocal_, NULL,  },
    { "realTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_realTemplate_, NULL,  },
    { "latexTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_latexTemplate_, NULL,  },
    { "latexTemplateMQ_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_latexTemplateMQ_, NULL,  },
    { "mathmlTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_mathmlTemplate_, NULL,  },
    { "libreofficeTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_libreofficeTemplate_, NULL,  },
    { "giacTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_giacTemplate_, NULL,  },
    { "xmlTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_xmlTemplate_, NULL,  },
    { "editTemplate_", NULL, 0x9, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_editTemplate_, NULL,  },
    { "regression_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_regression_, NULL,  },
    { "ogpTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_ogpTemplate_, NULL,  },
    { "maxPrecision_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_maxPrecision_, NULL,  },
    { "maxPrecision13_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_maxPrecision13_, NULL,  },
    { "numericDefault_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_numericDefault_, NULL,  },
    { "numericNoLocal_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_numericNoLocal_, NULL,  },
    { "numericLatex_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_numericLatex_, NULL,  },
    { "testTemplate_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_testTemplate_, NULL,  },
    { "testTemplateJSON_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_testTemplateJSON_, NULL,  },
    { "testNumeric_", NULL, 0x19, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelStringTemplate_testNumeric_, NULL,  },
    { "stringType_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNodeConstants$StringType;", NULL, NULL,  },
    { "internationalizeDigits__", "internationalizeDigits", 0x2, "Z", NULL, NULL,  },
    { "casPrintFormPI_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "sf_", NULL, 0x2, "Lorg.geogebra.common.util.ScientificFormatAdapter;", NULL, NULL,  },
    { "nf_", NULL, 0x2, "Lorg.geogebra.common.util.NumberFormatAdapter;", NULL, NULL,  },
    { "forceSF_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceNF_", NULL, 0x2, "Z", NULL, NULL,  },
    { "allowMoreDigits__", "allowMoreDigits", 0x2, "Z", NULL, NULL,  },
    { "useRealLabels_", NULL, 0x2, "Z", NULL, NULL,  },
    { "localizeCmds_", NULL, 0x2, "Z", NULL, NULL,  },
    { "usePrefix_", NULL, 0x2, "Z", NULL, NULL,  },
    { "precisions_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStringTemplate = { 2, "StringTemplate", "org.geogebra.common.kernel", NULL, 0x1, 67, methods, 37, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStringTemplate;
}

@end

void OrgGeogebraCommonKernelStringTemplate_initWithNSString_(OrgGeogebraCommonKernelStringTemplate *self, NSString *name) {
  NSObject_init(self);
  self->hideLHS_ = NO;
  OrgGeogebraCommonKernelStringTemplate_setAndConsume_precisions_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7, 1E-8, 1E-9, 1E-10, 1E-11, 1E-12, 1E-13, 1E-14, 1E-15, 1E-16 } count:17]);
  self->internationalizeDigits__ = YES;
  self->localizeCmds_ = YES;
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(self, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA());
  OrgGeogebraCommonKernelStringTemplate_set_name_(self, name);
}

OrgGeogebraCommonKernelStringTemplate *new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelStringTemplate *self = [OrgGeogebraCommonKernelStringTemplate alloc];
  OrgGeogebraCommonKernelStringTemplate_initWithNSString_(self, name);
  return self;
}

OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_getWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *t) {
  OrgGeogebraCommonKernelStringTemplate_initialize();
  if (t == nil || [t isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()]) {
    return OrgGeogebraCommonKernelStringTemplate_defaultTemplate_;
  }
  OrgGeogebraCommonKernelStringTemplate *tpl = [new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@", @"TemplateFor:", t)) autorelease];
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, t);
  return tpl;
}

void OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelStringTemplate *self, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *t) {
  OrgGeogebraCommonKernelStringTemplate_set_stringType_(self, t);
  switch ([t ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    OrgGeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, @"%pi");
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
    OrgGeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, @"pi");
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    OrgGeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, @"\\pi");
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    OrgGeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, @"%pi");
    break;
    default:
    OrgGeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, OrgGeogebraCommonUtilUnicode_get_PI_STRING_());
  }
}

OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_printDecimalsWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type, jint decimals, jboolean allowMore) {
  OrgGeogebraCommonKernelStringTemplate_initialize();
  OrgGeogebraCommonKernelStringTemplate *tpl = [new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@$ICZ", @"TemplateFor:", type, @",Decimals:", decimals, ',', allowMore)) autorelease];
  tpl->forceNF_ = YES;
  tpl->allowMoreDigits__ = allowMore;
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, type);
  OrgGeogebraCommonKernelStringTemplate_set_nf_(tpl, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithInt:decimals]);
  return tpl;
}

OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_printFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type, jint decimals, jboolean allowMore) {
  OrgGeogebraCommonKernelStringTemplate_initialize();
  OrgGeogebraCommonKernelStringTemplate *tpl = [new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@$ICZ", @"TemplateFor:", type, @",Figures:", decimals, ',', allowMore)) autorelease];
  tpl->forceSF_ = YES;
  tpl->allowMoreDigits__ = allowMore;
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, type);
  OrgGeogebraCommonKernelStringTemplate_set_sf_(tpl, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getScientificFormatWithInt:decimals withInt:20 withBoolean:NO]);
  return tpl;
}

OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type) {
  OrgGeogebraCommonKernelStringTemplate_initialize();
  OrgGeogebraCommonKernelStringTemplate *tpl = [new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@", @"FullFiguresFor:", type)) autorelease];
  tpl->forceSF_ = YES;
  tpl->allowMoreDigits__ = YES;
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, type);
  OrgGeogebraCommonKernelStringTemplate_set_sf_(tpl, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getScientificFormatWithInt:16 withInt:350 withBoolean:NO]);
  return tpl;
}

OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_printScientificWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type, jint decimals, jboolean allowMore) {
  OrgGeogebraCommonKernelStringTemplate_initialize();
  OrgGeogebraCommonKernelStringTemplate *tpl = [new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@$ICZ", @"TemplateForScientific:", type, @",Decimals:", decimals, ',', allowMore)) autorelease];
  tpl->forceSF_ = YES;
  tpl->allowMoreDigits__ = allowMore;
  OrgGeogebraCommonKernelStringTemplate_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, type);
  OrgGeogebraCommonKernelStringTemplate_set_sf_(tpl, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getScientificFormatWithInt:decimals withInt:20 withBoolean:YES]);
  return tpl;
}

OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelStringTemplate_copy__(OrgGeogebraCommonKernelStringTemplate *self) {
  OrgGeogebraCommonKernelStringTemplate *result = [new_OrgGeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$$", @"CopyOf:", self->name_)) autorelease];
  OrgGeogebraCommonKernelStringTemplate_set_stringType_(result, self->stringType_);
  OrgGeogebraCommonKernelStringTemplate_set_nf_(result, self->nf_);
  OrgGeogebraCommonKernelStringTemplate_set_sf_(result, self->sf_);
  result->usePrefix_ = self->usePrefix_;
  result->allowMoreDigits__ = self->allowMoreDigits__;
  OrgGeogebraCommonKernelStringTemplate_set_casPrintFormPI_(result, self->casPrintFormPI_);
  result->internationalizeDigits__ = self->internationalizeDigits__;
  result->useRealLabels_ = self->useRealLabels_;
  result->localizeCmds_ = self->localizeCmds_;
  result->forceNF_ = self->forceNF_;
  result->forceSF_ = self->forceSF_;
  return result;
}

NSString *OrgGeogebraCommonKernelStringTemplate_printVariableNameWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withNSString_(OrgGeogebraCommonKernelStringTemplate *self, OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *printForm, NSString *label) {
  switch ([printForm ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return OrgGeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(self, [((NSString *) nil_chk(label)) replace:@"$" withSequence:@""]);
    default:
    return label;
  }
}

NSString *OrgGeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(OrgGeogebraCommonKernelStringTemplate *self, NSString *label) {
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([self getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()] && ([@"x" isEqual:label] || [@"y" isEqual:label] || [@"y'" isEqual:label] || [@"y''" isEqual:label] || [@"z" isEqual:label])) {
    return label;
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:OrgGeogebraCommonKernelKernel_get_TMP_VARIABLE_PREFIX_()];
  [sb appendWithNSString:[((NSString *) nil_chk(label)) replaceAll:@"'" withReplacement:@"unicode39u"]];
  return [sb description];
}

NSString *OrgGeogebraCommonKernelStringTemplate_right(OrgGeogebraCommonKernelStringTemplate *self) {
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(self->stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) return @" \\right";
  else if ([self->stringType_ isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) return @" right ";
  else return @"";
}

NSString *OrgGeogebraCommonKernelStringTemplate_left(OrgGeogebraCommonKernelStringTemplate *self) {
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(self->stringType_)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) return @" \\left";
  else if ([self->stringType_ isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) return @" left ";
  else return @"";
}

NSString *OrgGeogebraCommonKernelStringTemplate_opWithOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNode *right, jboolean reverse) {
  OrgGeogebraCommonKernelStringTemplate_initialize();
  switch ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(right)) getOperation] ordinal]) {
    case OrgGeogebraCommonPluginOperation_LESS:
    return reverse ? @">" : @"<";
    case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
    return reverse ? @">=" : @"<=";
    case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
    return reverse ? @"<=" : @">=";
    case OrgGeogebraCommonPluginOperation_GREATER:
    return reverse ? @"<" : @">";
  }
  return nil;
}

void OrgGeogebraCommonKernelStringTemplate_appendOpWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(JavaLangStringBuilder *sb, NSString *string, NSString *leftStr, NSString *rightStr) {
  OrgGeogebraCommonKernelStringTemplate_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:string];
  [sb appendWithChar:'('];
  [sb appendWithNSString:leftStr];
  [sb appendWithChar:','];
  [sb appendWithNSString:rightStr];
  [sb appendWithChar:')'];
}

NSString *OrgGeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(NSString *originalString) {
  OrgGeogebraCommonKernelStringTemplate_initialize();
  if ([((NSString *) nil_chk(originalString)) indexOfString:@"E-"] > -1) {
    IOSObjectArray *s = [originalString split:@"E-"];
    jint i = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(s), 1));
    jint dotIndex = [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) indexOf:'.'];
    if (dotIndex > -1) {
      i += ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) length]) - dotIndex - 1;
      IOSObjectArray_Set(s, 0, [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) replace:@"." withSequence:@""]);
    }
    return JreStrcat("C$$$C", '(', IOSObjectArray_Get(s, 0), @"/1", OrgGeogebraCommonUtilStringUtil_repeatWithChar_withInt_('0', i), ')');
  }
  else if ([originalString indexOfString:@"E"] > -1) {
    IOSObjectArray *s = [originalString split:@"E"];
    jint i = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(s), 1));
    jint dotIndex = [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) indexOf:'.'];
    if (dotIndex > -1) {
      i -= ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) length]) - dotIndex - 1;
      IOSObjectArray_Set(s, 0, [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) replace:@"." withSequence:@""]);
    }
    if (i < 0) {
      return JreStrcat("$C$", [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) substring:0 endIndex:((jint) [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) length]) + i], '.', [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) substring:((jint) [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) length]) + i]);
    }
    if (i == 0) {
      return IOSObjectArray_Get(s, 0);
    }
    return JreStrcat("$$", IOSObjectArray_Get(s, 0), OrgGeogebraCommonUtilStringUtil_repeatWithChar_withInt_('0', i));
  }
  jint dotIndex = [originalString indexOf:'.'];
  if (dotIndex > -1) {
    if ([originalString hasSuffix:@"%"]) {
      return JreStrcat("C$$$C", '(', [((NSString *) nil_chk([originalString substring:0 endIndex:((jint) [originalString length]) - 1])) replace:@"." withSequence:@""], @"/1", OrgGeogebraCommonUtilStringUtil_repeatWithChar_withInt_('0', ((jint) [originalString length]) - dotIndex), ')');
    }
    return JreStrcat("C$$$C", '(', [((NSString *) nil_chk(([originalString replace:@"." withSequence:@""]))) replaceFirst:@"^0+(?!$)" withReplacement:@""], @"/1", OrgGeogebraCommonUtilStringUtil_repeatWithChar_withInt_('0', ((jint) [originalString length]) - dotIndex - 1), ')');
  }
  return originalString;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStringTemplate)

@implementation OrgGeogebraCommonKernelStringTemplate_$1

- (jdouble)getRoundHalfUpFactorWithDouble:(jdouble)abs
withOrgGeogebraCommonUtilNumberFormatAdapter:(id<OrgGeogebraCommonUtilNumberFormatAdapter>)nf2
withOrgGeogebraCommonUtilScientificFormatAdapter:(id<OrgGeogebraCommonUtilScientificFormatAdapter>)sf2
                              withBoolean:(jboolean)useSF {
  return 1;
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  OrgGeogebraCommonKernelStringTemplate_$1_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getRoundHalfUpFactorWithDouble:withOrgGeogebraCommonUtilNumberFormatAdapter:withOrgGeogebraCommonUtilScientificFormatAdapter:withBoolean:", "getRoundHalfUpFactor", "D", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStringTemplate_$1 = { 2, "", "org.geogebra.common.kernel", "StringTemplate", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStringTemplate_$1;
}

@end

void OrgGeogebraCommonKernelStringTemplate_$1_initWithNSString_(OrgGeogebraCommonKernelStringTemplate_$1 *self, NSString *arg$0) {
  OrgGeogebraCommonKernelStringTemplate_initWithNSString_(self, arg$0);
}

OrgGeogebraCommonKernelStringTemplate_$1 *new_OrgGeogebraCommonKernelStringTemplate_$1_initWithNSString_(NSString *arg$0) {
  OrgGeogebraCommonKernelStringTemplate_$1 *self = [OrgGeogebraCommonKernelStringTemplate_$1 alloc];
  OrgGeogebraCommonKernelStringTemplate_$1_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStringTemplate_$1)

@implementation OrgGeogebraCommonKernelStringTemplate_$2

- (NSString *)multiplyStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                            withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                                    withNSString:(NSString *)leftStr
                                                                    withNSString:(NSString *)rightStr
                                                                     withBoolean:(jboolean)valueForm
                                           withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  OrgGeogebraCommonPluginOperationEnum *operation = OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY();
  {
    jboolean nounary;
    jint opIDright;
    switch ([[self getStringType] ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
      OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<times/>", leftStr, rightStr);
      break;
      default:
      if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, 1, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(right, 1, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (((((jint) [((NSString *) nil_chk(rightStr)) length]) == 2) && ((([rightStr charAtWithInt:0] == OrgGeogebraCommonUtilUnicode_DEGREE_CHAR) && ([rightStr charAtWithInt:1] == (((OrgGeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_ + 1))) || (([rightStr charAtWithInt:0] == OrgGeogebraCommonUtilUnicode_DEGREE_CHAR) && ([rightStr charAtWithInt:1] == (((OrgGeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_ + 1))))) || [rightStr isEqual:OrgGeogebraCommonUtilUnicode_get_DEGREE_()]) {
        jboolean rtl = [((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) isRightToLeftDigitsWithOrgGeogebraCommonKernelStringTemplate:self];
        if (rtl) {
          [sb appendWithNSString:OrgGeogebraCommonUtilUnicode_get_DEGREE_()];
        }
        if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) {
          [sb appendWithChar:'('];
        }
        [sb appendWithNSString:leftStr];
        if (![left isLeaf]) {
          [sb appendWithChar:')'];
        }
        if (!rtl) {
          [sb appendWithNSString:OrgGeogebraCommonUtilUnicode_get_DEGREE_()];
        }
        break;
      }
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      nounary = YES;
      if (![self isPrintLocalizedCommandNames] || ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && [self isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:right])) {
        [sb appendWithNSString:[self leftBracket]];
      }
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] || (OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(left) >= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
        if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, -1, !valueForm)) {
          nounary = NO;
          [sb appendWithChar:'-'];
        }
        else {
          if ([((NSString *) nil_chk(leftStr)) hasPrefix:OrgGeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) {
            [sb appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
            [sb appendWithNSString:[self leftBracket]];
            [sb appendWithNSString:leftStr];
            [sb appendWithNSString:[self rightBracket]];
            [sb appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
          }
          else {
            [sb appendWithNSString:leftStr];
          }
        }
      }
      else {
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      opIDright = OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(right);
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || (opIDright >= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
        jboolean showMultiplicationSign = YES;
        jboolean multiplicationSpaceNeeded = NO;
        if (nounary) {
          {
            jchar lastLeft;
            jchar firstRight;
            jchar firstLeft;
            switch ([[self getStringType] ordinal]) {
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
              showMultiplicationSign = YES;
              break;
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
              case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
              lastLeft = [leftStr charAtWithInt:((jint) [((NSString *) nil_chk(leftStr)) length]) - 1];
              firstRight = [((NSString *) nil_chk(rightStr)) charAtWithInt:0];
              showMultiplicationSign = !([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]] && [((NSString *) nil_chk(OrgGeogebraCommonUtilUnicode_get_DEGREE_())) isEqual:[right toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]);
              multiplicationSpaceNeeded = !([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]] && [((NSString *) nil_chk(OrgGeogebraCommonUtilUnicode_get_DEGREE_())) isEqual:[right toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]);
              break;
              default:
              firstLeft = [((NSString *) nil_chk(leftStr)) charAtWithInt:0];
              lastLeft = [leftStr charAtWithInt:((jint) [leftStr length]) - 1];
              firstRight = [((NSString *) nil_chk(rightStr)) charAtWithInt:0];
              showMultiplicationSign = (JavaLangCharacter_isDigitWithChar_(lastLeft) && (OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(firstRight) || ([rightStr charAtWithInt:0] == 'E')));
              multiplicationSpaceNeeded = showMultiplicationSign;
              if (!multiplicationSpaceNeeded) {
                jboolean leftIsNumber = [left isLeaf] && (OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(firstLeft) || (firstLeft == '-')) && OrgGeogebraCommonUtilStringUtil_isDigitWithChar_(lastLeft);
                multiplicationSpaceNeeded = (showMultiplicationSign || !(leftIsNumber && !JavaLangCharacter_isDigitWithChar_(firstRight)));
              }
            }
          }
          if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([self getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
            [sb appendWithNSString:@"\\-"];
          }
          if (showMultiplicationSign) {
            [sb appendWithNSString:[self multiplicationSign]];
          }
          else if (multiplicationSpaceNeeded) {
            [sb appendWithNSString:[self multiplicationSpace]];
          }
        }
        jboolean rtlMinus;
        if (((rtlMinus = [((NSString *) nil_chk(rightStr)) hasPrefix:OrgGeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) || ([rightStr charAtWithInt:0] == '-')) || (!nounary && ![right isLeaf] && (opIDright <= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_DIVIDE())) ordinal])) || (showMultiplicationSign && [((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([self getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()])) {
          if (rtlMinus) {
            [sb appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
          }
          [sb appendWithNSString:[self leftBracket]];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:[self rightBracket]];
          if (rtlMinus) {
            [sb appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
          }
        }
        else {
          [sb appendWithNSString:rightStr];
        }
      }
      else {
        if (nounary) {
          switch ([[self getStringType] ordinal]) {
            case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
            case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
            case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
            case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
            [sb appendWithNSString:[self multiplicationSign]];
            break;
            default:
            [sb appendWithNSString:[self multiplicationSpace]];
          }
        }
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      if (![self isPrintLocalizedCommandNames] || ([left evaluatesToList] && [self isNDvectorWithOrgGeogebraCommonKernelArithmeticExpressionValue:right])) {
        [sb appendWithNSString:[self rightBracket]];
      }
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]] && [right isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getOperation])) isInequality]) {
        jboolean reverse = [((NSString *) nil_chk(leftStr)) hasPrefix:@"-"];
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] withBoolean:valueForm]];
        [sb appendWithChar:')'];
        [sb appendWithNSString:OrgGeogebraCommonKernelStringTemplate_opWithOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), reverse)];
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getRight] withBoolean:valueForm]];
        [sb appendWithChar:')'];
      }
      else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]] && [left isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getOperation])) isInequality]) {
        jboolean reverse = [((NSString *) nil_chk(rightStr)) hasPrefix:@"-"];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] withBoolean:valueForm]];
        [sb appendWithChar:')'];
        [sb appendWithNSString:OrgGeogebraCommonKernelStringTemplate_opWithOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), reverse)];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getRight] withBoolean:valueForm]];
        [sb appendWithChar:')'];
      }
      else if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, -1, !valueForm)) {
        [sb appendWithNSString:@"-("];
        [sb appendWithNSString:rightStr];
        [sb appendWithChar:')'];
      }
      else {
        [sb appendWithNSString:@"("];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
        break;
      }
      break;
    }
  }
  return [sb description];
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  OrgGeogebraCommonKernelStringTemplate_$2_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "multiplyStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:withOrgGeogebraCommonMainLocalization:", "multiplyString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStringTemplate_$2 = { 2, "", "org.geogebra.common.kernel", "StringTemplate", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStringTemplate_$2;
}

@end

void OrgGeogebraCommonKernelStringTemplate_$2_initWithNSString_(OrgGeogebraCommonKernelStringTemplate_$2 *self, NSString *arg$0) {
  OrgGeogebraCommonKernelStringTemplate_initWithNSString_(self, arg$0);
}

OrgGeogebraCommonKernelStringTemplate_$2 *new_OrgGeogebraCommonKernelStringTemplate_$2_initWithNSString_(NSString *arg$0) {
  OrgGeogebraCommonKernelStringTemplate_$2 *self = [OrgGeogebraCommonKernelStringTemplate_$2 alloc];
  OrgGeogebraCommonKernelStringTemplate_$2_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStringTemplate_$2)

@implementation OrgGeogebraCommonKernelStringTemplate_$3

- (jint)getCoordStyleWithInt:(jint)coordStyle {
  return OrgGeogebraCommonKernelKernel_COORD_STYLE_DEFAULT;
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  OrgGeogebraCommonKernelStringTemplate_$3_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCoordStyleWithInt:", "getCoordStyle", "I", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStringTemplate_$3 = { 2, "", "org.geogebra.common.kernel", "StringTemplate", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStringTemplate_$3;
}

@end

void OrgGeogebraCommonKernelStringTemplate_$3_initWithNSString_(OrgGeogebraCommonKernelStringTemplate_$3 *self, NSString *arg$0) {
  OrgGeogebraCommonKernelStringTemplate_initWithNSString_(self, arg$0);
}

OrgGeogebraCommonKernelStringTemplate_$3 *new_OrgGeogebraCommonKernelStringTemplate_$3_initWithNSString_(NSString *arg$0) {
  OrgGeogebraCommonKernelStringTemplate_$3 *self = [OrgGeogebraCommonKernelStringTemplate_$3 alloc];
  OrgGeogebraCommonKernelStringTemplate_$3_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStringTemplate_$3)
