//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/PointPairList.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/PointPair.h"
#include "org/geogebra/common/kernel/PointPairList.h"

@interface OrgGeogebraCommonKernelPointPairList () {
 @public
  OrgGeogebraCommonKernelPointPair *head_;
  jint size__;
  jboolean isStrict__;
}

+ (jboolean)smallerThanWithOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)a
                       withOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)b;

+ (jboolean)smallerThan2WithOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)a
                        withOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)b;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelPointPairList, head_, OrgGeogebraCommonKernelPointPair *)

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelPointPairList_smallerThanWithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(OrgGeogebraCommonKernelPointPair *a, OrgGeogebraCommonKernelPointPair *b);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelPointPairList_smallerThan2WithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(OrgGeogebraCommonKernelPointPair *a, OrgGeogebraCommonKernelPointPair *b);

__attribute__((unused)) static OrgGeogebraCommonKernelPointPair *OrgGeogebraCommonKernelPointPairList_getHead(OrgGeogebraCommonKernelPointPairList *self);

@implementation OrgGeogebraCommonKernelPointPairList

- (jboolean)isEmpty {
  return head_ == nil;
}

- (void)clear {
  OrgGeogebraCommonKernelPointPairList_set_head_(self, nil);
  isStrict__ = YES;
  size__ = 0;
}

- (void)insertPointPairWithInt:(jint)indexD
                   withBoolean:(jboolean)isPalive
                       withInt:(jint)indexQ
                   withBoolean:(jboolean)isQonPath
                    withDouble:(jdouble)distance {
  OrgGeogebraCommonKernelPointPair *newPair = [new_OrgGeogebraCommonKernelPointPair_initWithInt_withBoolean_withInt_withBoolean_withDouble_(indexD, isPalive, indexQ, isQonPath, distance) autorelease];
  if (head_ == nil || OrgGeogebraCommonKernelPointPairList_smallerThanWithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(newPair, head_)) {
    OrgGeogebraCommonKernelPointPair_set_next_(newPair, head_);
    OrgGeogebraCommonKernelPointPairList_set_head_(self, newPair);
    size__++;
    return;
  }
  OrgGeogebraCommonKernelPointPair *currentPair = head_;
  while (((OrgGeogebraCommonKernelPointPair *) nil_chk(currentPair))->next_ != nil) {
    if (OrgGeogebraCommonKernelPointPairList_smallerThanWithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(newPair, currentPair->next_)) break;
    currentPair = currentPair->next_;
  }
  OrgGeogebraCommonKernelPointPair_set_next_(newPair, ((OrgGeogebraCommonKernelPointPair *) nil_chk(currentPair))->next_);
  OrgGeogebraCommonKernelPointPair_set_next_(currentPair, newPair);
  size__++;
}

+ (jboolean)smallerThanWithOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)a
                       withOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)b {
  return OrgGeogebraCommonKernelPointPairList_smallerThanWithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(a, b);
}

+ (jboolean)smallerThan2WithOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)a
                        withOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)b {
  return OrgGeogebraCommonKernelPointPairList_smallerThan2WithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(a, b);
}

- (void)removeAllPairsWithOrgGeogebraCommonKernelPointPair:(OrgGeogebraCommonKernelPointPair *)pair {
  if (head_ == nil) return;
  while (((OrgGeogebraCommonKernelPointPair *) nil_chk(head_))->indexP_ == ((OrgGeogebraCommonKernelPointPair *) nil_chk(pair))->indexP_ || head_->indexQ_ == pair->indexQ_) {
    OrgGeogebraCommonKernelPointPairList_set_head_(self, head_->next_);
    if (head_ == nil) return;
  }
  OrgGeogebraCommonKernelPointPair *prevPair = head_, *currentPair = ((OrgGeogebraCommonKernelPointPair *) nil_chk(head_))->next_;
  while (currentPair != nil) {
    if (((OrgGeogebraCommonKernelPointPair *) nil_chk(currentPair))->indexP_ == pair->indexP_ || currentPair->indexQ_ == pair->indexQ_) {
      OrgGeogebraCommonKernelPointPair_set_next_(nil_chk(prevPair), currentPair->next_);
      currentPair = currentPair->next_;
      size__--;
    }
    else {
      prevPair = currentPair;
      currentPair = currentPair->next_;
    }
  }
}

- (OrgGeogebraCommonKernelPointPair *)getHead {
  return OrgGeogebraCommonKernelPointPairList_getHead(self);
}

- (jboolean)isStrict {
  isStrict__ = YES;
  return isStrict__;
}

- (jint)size {
  return size__;
}

- (jint)getClosestPWithindexQWithInt:(jint)indexQ {
  OrgGeogebraCommonKernelPointPair *pair = OrgGeogebraCommonKernelPointPairList_getHead(self);
  while (pair != nil) {
    if (((OrgGeogebraCommonKernelPointPair *) nil_chk(pair))->indexQ_ == indexQ) return pair->indexP_;
    pair = pair->next_;
  }
  return -1;
}

- (jint)getClosestQWithindexPWithInt:(jint)indexP {
  OrgGeogebraCommonKernelPointPair *pair = OrgGeogebraCommonKernelPointPairList_getHead(self);
  while (pair != nil) {
    if (((OrgGeogebraCommonKernelPointPair *) nil_chk(pair))->indexP_ == indexP) return pair->indexP_;
    pair = pair->next_;
  }
  return -1;
}

- (instancetype)init {
  OrgGeogebraCommonKernelPointPairList_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(head_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isEmpty", NULL, "Z", 0x11, NULL, NULL },
    { "clear", NULL, "V", 0x11, NULL, NULL },
    { "insertPointPairWithInt:withBoolean:withInt:withBoolean:withDouble:", "insertPointPair", "V", 0x11, NULL, NULL },
    { "smallerThanWithOrgGeogebraCommonKernelPointPair:withOrgGeogebraCommonKernelPointPair:", "smallerThan", "Z", 0xa, NULL, NULL },
    { "smallerThan2WithOrgGeogebraCommonKernelPointPair:withOrgGeogebraCommonKernelPointPair:", "smallerThan2", "Z", 0xa, NULL, NULL },
    { "removeAllPairsWithOrgGeogebraCommonKernelPointPair:", "removeAllPairs", "V", 0x11, NULL, NULL },
    { "getHead", NULL, "Lorg.geogebra.common.kernel.PointPair;", 0x11, NULL, NULL },
    { "isStrict", NULL, "Z", 0x11, NULL, NULL },
    { "size", NULL, "I", 0x11, NULL, NULL },
    { "getClosestPWithindexQWithInt:", "getClosestPWithindexQ", "I", 0x11, NULL, NULL },
    { "getClosestQWithindexPWithInt:", "getClosestQWithindexP", "I", 0x11, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "head_", NULL, 0x2, "Lorg.geogebra.common.kernel.PointPair;", NULL, NULL,  },
    { "size__", "size", 0x2, "I", NULL, NULL,  },
    { "isStrict__", "isStrict", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelPointPairList = { 2, "PointPairList", "org.geogebra.common.kernel", NULL, 0x1, 12, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelPointPairList;
}

@end

jboolean OrgGeogebraCommonKernelPointPairList_smallerThanWithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(OrgGeogebraCommonKernelPointPair *a, OrgGeogebraCommonKernelPointPair *b) {
  OrgGeogebraCommonKernelPointPairList_initialize();
  if (((OrgGeogebraCommonKernelPointPair *) nil_chk(a))->isPalive_) {
    if (((OrgGeogebraCommonKernelPointPair *) nil_chk(b))->isPalive_) {
      return OrgGeogebraCommonKernelPointPairList_smallerThan2WithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(a, b);
    }
    return YES;
  }
  if (((OrgGeogebraCommonKernelPointPair *) nil_chk(b))->isPalive_) {
    return NO;
  }
  return OrgGeogebraCommonKernelPointPairList_smallerThan2WithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(a, b);
}

jboolean OrgGeogebraCommonKernelPointPairList_smallerThan2WithOrgGeogebraCommonKernelPointPair_withOrgGeogebraCommonKernelPointPair_(OrgGeogebraCommonKernelPointPair *a, OrgGeogebraCommonKernelPointPair *b) {
  OrgGeogebraCommonKernelPointPairList_initialize();
  if (((OrgGeogebraCommonKernelPointPair *) nil_chk(a))->isQonPath_) {
    if (((OrgGeogebraCommonKernelPointPair *) nil_chk(b))->isQonPath_) {
      return (a->dist_ < b->dist_);
    }
    return YES;
  }
  if (((OrgGeogebraCommonKernelPointPair *) nil_chk(b))->isQonPath_) {
    return NO;
  }
  return (a->dist_ < b->dist_);
}

OrgGeogebraCommonKernelPointPair *OrgGeogebraCommonKernelPointPairList_getHead(OrgGeogebraCommonKernelPointPairList *self) {
  return self->head_;
}

void OrgGeogebraCommonKernelPointPairList_init(OrgGeogebraCommonKernelPointPairList *self) {
  NSObject_init(self);
  self->size__ = 0;
  self->isStrict__ = YES;
}

OrgGeogebraCommonKernelPointPairList *new_OrgGeogebraCommonKernelPointPairList_init() {
  OrgGeogebraCommonKernelPointPairList *self = [OrgGeogebraCommonKernelPointPairList alloc];
  OrgGeogebraCommonKernelPointPairList_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelPointPairList)
