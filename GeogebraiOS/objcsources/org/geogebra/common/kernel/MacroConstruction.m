//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/MacroConstruction.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/MacroConstruction.h"
#include "org/geogebra/common/kernel/MacroKernel.h"
#include "org/geogebra/common/kernel/UndoManager.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/StringUtil.h"

static void (*OrgGeogebraCommonKernelMacroConstruction_super$_setFileLoadingWithBoolean_)(id, SEL, jboolean);

@interface OrgGeogebraCommonKernelMacroConstruction () {
 @public
  OrgGeogebraCommonKernelConstruction *parentCons_;
  JavaUtilHashSet *reservedLabels_;
  jboolean globalVariableLookup_;
}

- (jboolean)isReservedLabelWithNSString:(NSString *)label;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacroConstruction, parentCons_, OrgGeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacroConstruction, reservedLabels_, JavaUtilHashSet *)

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelMacroConstruction_lookupLabelWithNSString_withBoolean_(OrgGeogebraCommonKernelMacroConstruction *self, NSString *label, jboolean autoCreate);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelMacroConstruction_isReservedLabelWithNSString_(OrgGeogebraCommonKernelMacroConstruction *self, NSString *label);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelMacroConstruction)

@implementation OrgGeogebraCommonKernelMacroConstruction

- (instancetype)initWithOrgGeogebraCommonKernelMacroKernel:(OrgGeogebraCommonKernelMacroKernel *)kernel {
  OrgGeogebraCommonKernelMacroConstruction_initWithOrgGeogebraCommonKernelMacroKernel_(self, kernel);
  return self;
}

- (void)loadXMLWithNSString:(NSString *)xmlString {
  if (undoManager_ == nil) undoManager_ = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getUndoManagerWithOrgGeogebraCommonKernelConstruction:self];
  [self setFileLoadingWithBoolean:YES];
  [((OrgGeogebraCommonKernelUndoManager *) nil_chk(undoManager_)) processXMLWithNSString:xmlString];
  [self setFileLoadingWithBoolean:NO];
}

- (void)addReservedLabelWithNSString:(NSString *)label {
  if (label != nil) {
    [((JavaUtilHashSet *) nil_chk(reservedLabels_)) addWithId:label];
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)lookupLabelWithNSString:(NSString *)label
                                                       withBoolean:(jboolean)autoCreate {
  return OrgGeogebraCommonKernelMacroConstruction_lookupLabelWithNSString_withBoolean_(self, label, autoCreate);
}

- (jboolean)isReservedLabelWithNSString:(NSString *)label {
  return OrgGeogebraCommonKernelMacroConstruction_isReservedLabelWithNSString_(self, label);
}

- (jboolean)isGlobalVariableLookup {
  return globalVariableLookup_;
}

- (void)setGlobalVariableLookupWithBoolean:(jboolean)globalVariableLookup {
  self->globalVariableLookup_ = globalVariableLookup;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelMacroConstruction class]) {
    OrgGeogebraCommonKernelMacroConstruction_super$_setFileLoadingWithBoolean_ = (void (*)(id, SEL, jboolean))[OrgGeogebraCommonKernelConstruction instanceMethodForSelector:@selector(setFileLoadingWithBoolean:)];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelMacroConstruction)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelMacroKernel:", "MacroConstruction", NULL, 0x1, NULL, NULL },
    { "loadXMLWithNSString:", "loadXML", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "addReservedLabelWithNSString:", "addReservedLabel", "V", 0x1, NULL, NULL },
    { "lookupLabelWithNSString:withBoolean:", "lookupLabel", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isReservedLabelWithNSString:", "isReservedLabel", "Z", 0x2, NULL, NULL },
    { "isGlobalVariableLookup", NULL, "Z", 0x1, NULL, NULL },
    { "setGlobalVariableLookupWithBoolean:", "setGlobalVariableLookup", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parentCons_", NULL, 0x2, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "reservedLabels_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Ljava/lang/String;>;",  },
    { "globalVariableLookup_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelMacroConstruction = { 2, "MacroConstruction", "org.geogebra.common.kernel", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelMacroConstruction;
}

@end

void OrgGeogebraCommonKernelMacroConstruction_initWithOrgGeogebraCommonKernelMacroKernel_(OrgGeogebraCommonKernelMacroConstruction *self, OrgGeogebraCommonKernelMacroKernel *kernel) {
  (void) OrgGeogebraCommonKernelConstruction_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(self, kernel, [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelMacroKernel *) nil_chk(kernel)) getParentKernel])) getConstruction]);
  self->globalVariableLookup_ = NO;
  self->parentCons_ = [((OrgGeogebraCommonKernelKernel *) nil_chk([kernel getParentKernel])) getConstruction];
  self->reservedLabels_ = new_JavaUtilHashSet_init();
  OrgGeogebraCommonKernelMacroConstruction_super$_setFileLoadingWithBoolean_(self, @selector(setFileLoadingWithBoolean:), YES);
}

OrgGeogebraCommonKernelMacroConstruction *new_OrgGeogebraCommonKernelMacroConstruction_initWithOrgGeogebraCommonKernelMacroKernel_(OrgGeogebraCommonKernelMacroKernel *kernel) {
  OrgGeogebraCommonKernelMacroConstruction *self = [OrgGeogebraCommonKernelMacroConstruction alloc];
  OrgGeogebraCommonKernelMacroConstruction_initWithOrgGeogebraCommonKernelMacroKernel_(self, kernel);
  return self;
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelMacroConstruction_lookupLabelWithNSString_withBoolean_(OrgGeogebraCommonKernelMacroConstruction *self, NSString *label, jboolean autoCreate) {
  if (label == nil) return nil;
  NSString *label1 = label;
  if (self->localVariableTable_ != nil) {
    OrgGeogebraCommonKernelGeosGeoElement *localGeo = [self->localVariableTable_ getWithId:label1];
    if (localGeo != nil) return localGeo;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [self geoTableVarLookupWithNSString:label1];
  if (geo != nil) {
    return geo;
  }
  label1 = OrgGeogebraCommonKernelKernel_removeCASVariablePrefixWithNSString_(label1);
  geo = [self geoTableVarLookupWithNSString:label1];
  if (geo != nil) {
    return geo;
  }
  if ([((NSString *) nil_chk(label1)) indexOf:'$'] > -1) {
    JavaLangStringBuilder *labelWithout$ = new_JavaLangStringBuilder_initWithInt_(((jint) [label1 length]) - 1);
    for (jint i = 0; i < ((jint) [label1 length]); i++) {
      jchar ch = [label1 charAtWithInt:i];
      if (ch != '$') {
        (void) [labelWithout$ appendWithChar:ch];
      }
    }
    NSString *labelString = [labelWithout$ description];
    geo = OrgGeogebraCommonKernelMacroConstruction_lookupLabelWithNSString_withBoolean_(self, labelString, autoCreate);
    if (geo != nil) {
      return geo;
    }
    if ([((NSString *) nil_chk(labelString)) charAtWithInt:0] >= '0' && [labelString charAtWithInt:0] <= '9') {
      jint cell = 0;
      @try {
        cell = JavaLangInteger_parseIntWithNSString_([labelWithout$ description]);
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
      if (cell > 0) {
        return [self getCasCellWithInt:cell - 1];
      }
    }
  }
  if (autoCreate) {
    if (OrgGeogebraCommonUtilStringUtil_isLetterWithChar_([label1 charAtWithInt:0]) && OrgGeogebraCommonUtilStringUtil_isDigitWithChar_([label1 charAtWithInt:((jint) [label1 length]) - 1])) {
      NSString *upperCaseLabel = [label1 uppercaseString];
      geo = [self geoTableVarLookupWithNSString:upperCaseLabel];
      if (geo != nil) {
        return geo;
      }
    }
  }
  if (self->globalVariableLookup_ && !OrgGeogebraCommonKernelMacroConstruction_isReservedLabelWithNSString_(self, label1)) {
    geo = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->parentCons_)) lookupLabelWithNSString:label1 withBoolean:autoCreate];
  }
  return geo;
}

jboolean OrgGeogebraCommonKernelMacroConstruction_isReservedLabelWithNSString_(OrgGeogebraCommonKernelMacroConstruction *self, NSString *label) {
  return [((JavaUtilHashSet *) nil_chk(self->reservedLabels_)) containsWithId:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelMacroConstruction)
