//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/kernelND/GeoConicND.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GAffineTransform.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/EquationSolver.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverGeneric.h"
#include "org/geogebra/common/kernel/PathNormalizer.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/RegionParameters.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoConicFivePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoEllipseFociLength.h"
#include "org/geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPoint.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/GgbMat.h"
#include "org/geogebra/common/util/MyMath.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgGeogebraCommonKernelKernelNDGeoConicND () {
 @public
  jdouble detS_, length_, temp_, temp1_, temp2_, nx_, ny_, lambda_;
  jint index_;
  OrgGeogebraCommonKernelGeosGeoVec2D *c_;
  IOSDoubleArray *coeffs_;
  jboolean eigenvectorsSetOnLoad_;
  OrgGeogebraCommonUtilGgbMat *polarMatrix_;
  jdouble area_;
  jboolean isEndOfQuadric__;
  OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *lastHitType_;
  OrgGeogebraCommonKernelMatrixCoords *labelPosition_;
  OrgGeogebraCommonKernelPathParameter *labelParameter_;
  JavaUtilTreeSet *metas_;
}

- (IOSDoubleArray *)getPerpendicularParamsWithDouble:(jdouble)abspx
                                          withDouble:(jdouble)abspy;

- (jboolean)compatibleTypeWithInt:(jint)t;

- (void)coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P;

- (void)translateByCenterWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P;

- (void)setLinesWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)co;

- (jboolean)checkDefined;

- (void)rotateWithDouble:(jdouble)phi;

- (void)setParabolicEigenvectors;

- (void)makePathParametersInvalid;

- (jboolean)isDetSzero;

- (void)classifyMidpointConicWithBoolean:(jboolean)degenerate;

- (void)intersectingLinesWithDoubleArray:(IOSDoubleArray *)mu1;

- (void)ellipseWithDoubleArray:(IOSDoubleArray *)mu1;

- (void)hyperbolaWithDoubleArray:(IOSDoubleArray *)mu1;

- (void)classifyParabolicConicWithBoolean:(jboolean)degenerate;

- (void)doubleLine;

- (void)handleSzero;

- (void)setStartPointsForLines;

- (void)setStartPointsForDoubleLine;

- (void)parabola;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernelNDGeoConicND, c_, OrgGeogebraCommonKernelGeosGeoVec2D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernelNDGeoConicND, coeffs_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernelNDGeoConicND, polarMatrix_, OrgGeogebraCommonUtilGgbMat *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernelNDGeoConicND, lastHitType_, OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernelNDGeoConicND, labelPosition_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernelNDGeoConicND, labelParameter_, OrgGeogebraCommonKernelPathParameter *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernelNDGeoConicND, metas_, JavaUtilTreeSet *)

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setCircleWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelGeosGeoPoint *M, OrgGeogebraCommonKernelGeosGeoPoint *P);

__attribute__((unused)) static IOSDoubleArray *OrgGeogebraCommonKernelKernelNDGeoConicND_getPerpendicularParamsWithDouble_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble abspx, jdouble abspy);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_compatibleTypeWithInt_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jint t);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, jdouble eps);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelMatrixCoords *P, jdouble eps);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelMatrixCoords *P);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelMatrixCoords *P);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_translateByCenterWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelMatrixCoords *P);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setLinesWithOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelKernelNDGeoConicND *co);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setToStringModeWithInt_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jint mode);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isSpecificPossible(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isExplicitPossible(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_checkDefined(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setCoeffsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble a, jdouble b, jdouble c, jdouble d, jdouble e, jdouble f);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelKernelNDGeoConicND_getLines(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static id<OrgGeogebraCommonAwtGAffineTransform> OrgGeogebraCommonKernelKernelNDGeoConicND_getAffineTransform(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setCircleWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoSegment_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelGeosGeoPoint *M, OrgGeogebraCommonKernelGeosGeoSegment *geoSegment);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_doTranslateWithDouble_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble vx, jdouble vy);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_rotateWithDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble phi);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_doDilateWithDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble factor);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_updateDegenerates(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setParabolicEigenvectors(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_makePathParametersInvalid(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isDetSzero(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_classifyMidpointConicWithBoolean_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jboolean degenerate);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_singlePoint(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_intersectingLinesWithDoubleArray_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, IOSDoubleArray *mu1);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_ellipseWithDoubleArray_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, IOSDoubleArray *mu1);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_hyperbolaWithDoubleArray_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, IOSDoubleArray *mu1);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_classifyParabolicConicWithBoolean_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jboolean degenerate);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_doubleLine(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_handleSzero(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_parallelLinesWithDoubleArray_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, IOSDoubleArray *mu1);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForLines(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForDoubleLine(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_parabola(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_hasPositiveEigenvectorOrientation(OrgGeogebraCommonKernelKernelNDGeoConicND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_setPositiveEigenvectorOrientationWithBoolean_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jboolean flag);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble x, jdouble y);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_polarPointWithDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble x, jdouble y, jdouble z, OrgGeogebraCommonKernelGeosGeoPoint *polar);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernelNDGeoConicND_diameterLineWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble vx, jdouble vy, OrgGeogebraCommonKernelGeosGeoLine *diameter);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelKernelNDGeoConicND)

IOSObjectArray *OrgGeogebraCommonKernelKernelNDGeoConicND_vars_;
IOSObjectArray *OrgGeogebraCommonKernelKernelNDGeoConicND_varsLateX_;
IOSObjectArray *OrgGeogebraCommonKernelKernelNDGeoConicND_varsCAS_;
jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ = NO;

@implementation OrgGeogebraCommonKernelKernelNDGeoConicND

- (OrgGeogebraCommonKernelMatrixCoords *)getEigenvecWithInt:(jint)i {
  return new_OrgGeogebraCommonKernelMatrixCoords_initWithDoubleArray_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), i))) getCoords]);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getEigenvec3DWithInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelMatrixCoordSys *)getCoordSys {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirection3DWithInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getOrigin3DWithInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                    withInt:(jint)dimension {
  OrgGeogebraCommonKernelKernelNDGeoConicND_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, c, dimension);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                    withInt:(jint)dimension
                                                withBoolean:(jboolean)isIntersection {
  OrgGeogebraCommonKernelKernelNDGeoConicND_initWithOrgGeogebraCommonKernelConstruction_withInt_withBoolean_(self, c, dimension, isIntersection);
  return self;
}

- (OrgGeogebraCommonKernelMatrixCoordMatrix *)getSymetricMatrixWithDoubleArray:(IOSDoubleArray *)vals {
  OrgGeogebraCommonKernelMatrixCoordMatrix *ret = new_OrgGeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(3, 3);
  [ret setWithInt:1 withInt:1 withDouble:IOSDoubleArray_Get(nil_chk(vals), 0)];
  [ret setWithInt:2 withInt:2 withDouble:IOSDoubleArray_Get(vals, 1)];
  [ret setWithInt:3 withInt:3 withDouble:IOSDoubleArray_Get(vals, 2)];
  [ret setWithInt:1 withInt:2 withDouble:IOSDoubleArray_Get(vals, 3)];
  [ret setWithInt:2 withInt:1 withDouble:IOSDoubleArray_Get(vals, 3)];
  [ret setWithInt:1 withInt:3 withDouble:IOSDoubleArray_Get(vals, 4)];
  [ret setWithInt:3 withInt:1 withDouble:IOSDoubleArray_Get(vals, 4)];
  [ret setWithInt:2 withInt:3 withDouble:IOSDoubleArray_Get(vals, 5)];
  [ret setWithInt:3 withInt:2 withDouble:IOSDoubleArray_Get(vals, 5)];
  return ret;
}

- (void)setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)M
                                              withDouble:(jdouble)r {
  [self setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:M withDouble:r];
}

- (void)setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)M
                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setCircleWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, M, P);
}

- (void)setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
                                                      withDouble:(jdouble)r {
  defined_ = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(M, [OrgGeogebraCommonKernelGeosGeoElement class])))) isDefined] && ![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(M)) isInfinite]);
  [self setSphereNDWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(M)) getInhomCoordsInD2] withDouble:r];
}

- (jboolean)isPath {
  return YES;
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2WithOrgGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [self pointChangedWithOrgGeogebraCommonKernelMatrixCoords:coords withOrgGeogebraCommonKernelPathParameter:pp];
  [P setCoords2DWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  [P updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
  [P updateCoords];
}

- (void)pointChangedWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                   withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp {
  [self pointChangedWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp withBoolean:YES];
}

- (void)pointChangedWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                   withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp
                                                withBoolean:(jboolean)checkSection {
  jdouble px, py, ha, hb, hc_2;
  jdouble abspx, abspy;
  jdouble tolerance = OrgGeogebraCommonKernelKernel_STANDARD_PRECISION;
  [((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) setPathTypeWithInt:type_];
  {
    jboolean firstLine;
    OrgGeogebraCommonKernelGeosGeoLine *line;
    jdouble s;
    switch (type_) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:JavaLangDouble_NaN];
      [P setYWithDouble:JavaLangDouble_NaN];
      [P setZWithDouble:JavaLangDouble_NaN];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(singlePoint__))->x_];
      [P setYWithDouble:singlePoint__->y_];
      [P setZWithDouble:singlePoint__->z_];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      firstLine = ([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) distanceHomWithOrgGeogebraCommonKernelMatrixCoords:P] <= [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines_, 1))) distanceHomWithOrgGeogebraCommonKernelMatrixCoords:P]);
      line = firstLine ? IOSObjectArray_Get(lines_, 0) : IOSObjectArray_Get(lines_, 1);
      [line doPointChangedWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp];
      [pp setTWithDouble:OrgGeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_([pp getT])];
      if (!firstLine) {
        [pp setTWithDouble:[pp getT] + 2];
      }
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      (void) OrgGeogebraCommonKernelKernelNDGeoConicND_getLines(self);
      [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) doPointChangedWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] / [P getZ];
      py = [P getY] / [P getZ];
      [pp setTWithDouble:JavaLangMath_atan2WithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * py, IOSDoubleArray_Get(halfAxes_, 1) * px)];
      [P setXWithDouble:IOSDoubleArray_Get(halfAxes_, 0) * JavaLangMath_cosWithDouble_([pp getT])];
      [P setYWithDouble:IOSDoubleArray_Get(halfAxes_, 1) * JavaLangMath_sinWithDouble_([pp getT])];
      [P setZWithDouble:1.0];
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] / [P getZ];
      py = [P getY] / [P getZ];
      abspx = JavaLangMath_absWithDouble_(px);
      abspy = JavaLangMath_absWithDouble_(py);
      ha = IOSDoubleArray_Get(nil_chk(halfAxes_), 0);
      hb = IOSDoubleArray_Get(halfAxes_, 1);
      hc_2 = ha * ha - hb * hb;
      if (abspx < OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) {
        if (abspy < OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) {
          if (hb < ha) {
            [pp setTWithDouble:JavaLangMath_PI / 2];
          }
          else {
            [pp setTWithDouble:0];
          }
        }
        else {
          if (hb < ha) {
            [pp setTWithDouble:JavaLangMath_PI / 2];
          }
          else {
            if (abspy * hb < hc_2) {
              [pp setTWithDouble:JavaLangMath_asinWithDouble_(hb * abspy / hc_2)];
            }
            else {
              [pp setTWithDouble:JavaLangMath_PI / 2];
            }
          }
        }
      }
      else if (abspy < OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) {
        if (ha < hb) {
          [pp setTWithDouble:0];
        }
        else {
          if (abspx * ha < hc_2) {
            [pp setTWithDouble:JavaLangMath_acosWithDouble_(ha * abspx / hc_2)];
          }
          else {
            [pp setTWithDouble:0];
          }
        }
      }
      else {
        IOSDoubleArray *roots = OrgGeogebraCommonKernelKernelNDGeoConicND_getPerpendicularParamsWithDouble_withDouble_(self, abspx, abspy);
        if (IOSDoubleArray_Get(nil_chk(roots), 0) > 0) {
          [pp setTWithDouble:JavaLangMath_asinWithDouble_(IOSDoubleArray_Get(roots, 0))];
        }
        else if (IOSDoubleArray_Get(roots, 1) > 0) {
          [pp setTWithDouble:JavaLangMath_asinWithDouble_(IOSDoubleArray_Get(roots, 1))];
        }
        else if (IOSDoubleArray_Get(roots, 2) > 0) {
          [pp setTWithDouble:JavaLangMath_asinWithDouble_(IOSDoubleArray_Get(roots, 2))];
        }
        else {
          [pp setTWithDouble:JavaLangMath_asinWithDouble_(IOSDoubleArray_Get(roots, 3))];
        }
      }
      if (px < 0) {
        [pp setTWithDouble:JavaLangMath_PI - [pp getT]];
      }
      if (py < 0) {
        [pp setTWithDouble:-[pp getT]];
      }
      [P setXWithDouble:ha * JavaLangMath_cosWithDouble_([pp getT])];
      [P setYWithDouble:hb * JavaLangMath_sinWithDouble_([pp getT])];
      [P setZWithDouble:1.0];
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] / [P getZ];
      py = [P getY] / [P getZ];
      abspx = JavaLangMath_absWithDouble_(px);
      abspy = JavaLangMath_absWithDouble_(py);
      ha = IOSDoubleArray_Get(nil_chk(halfAxes_), 0);
      hb = IOSDoubleArray_Get(halfAxes_, 1);
      hc_2 = ha * ha + hb * hb;
      if (abspy < OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) {
        s = OrgGeogebraCommonUtilMyMath_acoshWithDouble_(JavaLangMath_maxWithDouble_withDouble_(1, ha * abspx / hc_2));
      }
      else {
        IOSDoubleArray *roots = OrgGeogebraCommonKernelKernelNDGeoConicND_getPerpendicularParamsWithDouble_withDouble_(self, abspx, abspy);
        if (IOSDoubleArray_Get(nil_chk(roots), 0) > 0) {
          s = OrgGeogebraCommonUtilMyMath_asinhWithDouble_(IOSDoubleArray_Get(roots, 0));
        }
        else if (IOSDoubleArray_Get(roots, 1) > 0) {
          s = OrgGeogebraCommonUtilMyMath_asinhWithDouble_(IOSDoubleArray_Get(roots, 1));
        }
        else if (IOSDoubleArray_Get(roots, 2) > 0) {
          s = OrgGeogebraCommonUtilMyMath_asinhWithDouble_(IOSDoubleArray_Get(roots, 2));
        }
        else {
          s = OrgGeogebraCommonUtilMyMath_asinhWithDouble_(IOSDoubleArray_Get(roots, 3));
        }
      }
      if (py < 0) {
        s = -s;
      }
      [pp setTWithDouble:OrgGeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_(s)];
      [P setXWithDouble:ha * JavaLangMath_coshWithDouble_(s)];
      [P setYWithDouble:hb * JavaLangMath_sinhWithDouble_(s)];
      [P setZWithDouble:1.0];
      if (px < 0) {
        [pp setTWithDouble:[pp getT] + 2];
        [P setXWithDouble:-[P getX]];
      }
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] / [P getZ];
      py = [P getY] / [P getZ];
      abspy = JavaLangMath_absWithDouble_(py);
      if (abspy < tolerance) {
        [pp setTWithDouble:JavaLangMath_sqrtWithDouble_(JavaLangMath_maxWithDouble_withDouble_(0, 2 * (px - p_) / p_))];
      }
      else {
        IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ abspy, -p_ + px, 0, -p_ / 2 } count:4];
        IOSDoubleArray *roots = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0, 0 } count:3];
        [((OrgGeogebraCommonKernelEquationSolver *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel])) getEquationSolver])) solveCubicWithDoubleArray:eqn withDoubleArray:roots withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION];
        if (IOSDoubleArray_Get(roots, 0) > 0) {
          [pp setTWithDouble:IOSDoubleArray_Get(roots, 0)];
        }
        else if (IOSDoubleArray_Get(roots, 1) > 0) {
          [pp setTWithDouble:IOSDoubleArray_Get(roots, 1)];
        }
        else {
          [pp setTWithDouble:IOSDoubleArray_Get(roots, 2)];
        }
        if (py < 0) {
          [pp setTWithDouble:-[pp getT]];
        }
      }
      [P setXWithDouble:p_ * [pp getT] * [pp getT] / 2.0];
      [P setYWithDouble:p_ * [pp getT]];
      [P setZWithDouble:1.0];
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      break;
    }
  }
}

- (IOSDoubleArray *)getPerpendicularParamsWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
  jdouble px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] / [P getZ];
  jdouble py = [P getY] / [P getZ];
  jdouble abspx = JavaLangMath_absWithDouble_(px);
  jdouble abspy = JavaLangMath_absWithDouble_(py);
  return OrgGeogebraCommonKernelKernelNDGeoConicND_getPerpendicularParamsWithDouble_withDouble_(self, abspx, abspy);
}

- (IOSDoubleArray *)getPerpendicularParamsWithDouble:(jdouble)abspx
                                          withDouble:(jdouble)abspy {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_getPerpendicularParamsWithDouble_withDouble_(self, abspx, abspy);
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2WithOrgGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [self pathChangedWithOrgGeogebraCommonKernelMatrixCoords:coords withOrgGeogebraCommonKernelPathParameter:pp];
  [P setCoords2DWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  [P updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
}

- (jboolean)compatibleTypeWithInt:(jint)t {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_compatibleTypeWithInt_(self, t);
}

- (void)pathChangedWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                  withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp {
  if (!OrgGeogebraCommonKernelKernelNDGeoConicND_compatibleTypeWithInt_(self, [((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) getPathType]) || JavaLangDouble_isNaNWithDouble_([pp getT])) {
    [self pointChangedWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp];
    return;
  }
  [self pathChangedWithoutCheckWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp withBoolean:YES];
}

- (void)pathChangedWithoutCheckEllipseWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                                     withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp
                                                                  withBoolean:(jboolean)checkSection {
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * JavaLangMath_cosWithDouble_([((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) getT])];
  [P setYWithDouble:IOSDoubleArray_Get(halfAxes_, 1) * JavaLangMath_sinWithDouble_([pp getT])];
  [P setZWithDouble:1.0];
  OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
}

- (void)pathChangedWithoutCheckParabolaWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                                      withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp
                                                                   withBoolean:(jboolean)checkSection {
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setYWithDouble:p_ * [((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) getT]];
  [P setXWithDouble:[P getY] * [pp getT] / 2.0];
  [P setZWithDouble:1.0];
  OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
}

- (void)pathChangedWithoutCheckHyperbolaWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                                       withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp
                                                                    withBoolean:(jboolean)checkSection {
  jboolean leftBranch = [((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) getT] > 1;
  jdouble t = leftBranch ? [pp getT] - 2 : [pp getT];
  jdouble s = t / (1 - JavaLangMath_absWithDouble_(t));
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * OrgGeogebraCommonUtilMyMath_coshWithDouble_(s)];
  [P setYWithDouble:IOSDoubleArray_Get(halfAxes_, 1) * OrgGeogebraCommonUtilMyMath_sinhWithDouble_(s)];
  [P setZWithDouble:1.0];
  if (leftBranch) [P setXWithDouble:-[P getX]];
  OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
}

- (void)pathChangedWithoutCheckWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                              withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp
                                                           withBoolean:(jboolean)checkSection {
  {
    jdouble pathParam;
    jboolean leftBranch;
    switch (type_) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:JavaLangDouble_NaN];
      [P setYWithDouble:JavaLangDouble_NaN];
      [P setZWithDouble:JavaLangDouble_NaN];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(singlePoint__))->x_];
      [P setYWithDouble:singlePoint__->y_];
      [P setZWithDouble:singlePoint__->z_];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      pathParam = [((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
      leftBranch = (pathParam > 1);
      [pp setTWithDouble:leftBranch ? pathParam - 2 : pathParam];
      [pp setTWithDouble:[pp getT] / (1 - JavaLangMath_absWithDouble_([pp getT]))];
      if (leftBranch) {
        [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 1))) pathChangedWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) pathChangedWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp];
      }
      [pp setTWithDouble:pathParam];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) pathChangedWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      [self pathChangedWithoutCheckEllipseWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp withBoolean:checkSection];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      [self pathChangedWithoutCheckHyperbolaWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp withBoolean:checkSection];
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      [self pathChangedWithoutCheckParabolaWithOrgGeogebraCommonKernelMatrixCoords:P withOrgGeogebraCommonKernelPathParameter:pp withBoolean:checkSection];
      break;
    }
  }
}

- (jdouble)getMaxParameter {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    return JavaLangDouble_POSITIVE_INFINITY;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return JavaLangMath_PI;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    return 3;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    default:
    return 0;
  }
}

- (jdouble)getMinParameter {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    return JavaLangDouble_NEGATIVE_INFINITY;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    return -1;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return -JavaLangMath_PI;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    default:
    return 0;
  }
}

- (jboolean)isClosedPath {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return YES;
    default:
    return NO;
  }
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                       withDouble:(jdouble)eps {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath] == self) return YES;
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND_withDouble_(self, P, eps);
}

- (jboolean)isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                            withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND_withDouble_(self, P, eps);
}

- (jboolean)isOnFullConicWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                                                      withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(self, P, eps);
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return new_OrgGeogebraCommonKernelPathMoverGeneric_initWithOrgGeogebraCommonKernelPath_(self);
}

- (void)coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
}

- (void)coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
}

- (void)translateByCenterWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  OrgGeogebraCommonKernelKernelNDGeoConicND_translateByCenterWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
}

- (jboolean)isFillable {
  return YES;
}

- (void)setMatrixWithOrgGeogebraCommonKernelMatrixCoordMatrix:(OrgGeogebraCommonKernelMatrixCoordMatrix *)m {
  *IOSDoubleArray_GetRef(nil_chk(matrix_), 0) = [((OrgGeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getWithInt:1 withInt:1];
  *IOSDoubleArray_GetRef(matrix_, 1) = [m getWithInt:2 withInt:2];
  *IOSDoubleArray_GetRef(matrix_, 2) = [m getWithInt:3 withInt:3];
  *IOSDoubleArray_GetRef(matrix_, 3) = ([m getWithInt:1 withInt:2] + [m getWithInt:2 withInt:1]) / 2.0;
  *IOSDoubleArray_GetRef(matrix_, 4) = ([m getWithInt:1 withInt:3] + [m getWithInt:3 withInt:1]) / 2.0;
  *IOSDoubleArray_GetRef(matrix_, 5) = ([m getWithInt:2 withInt:3] + [m getWithInt:3 withInt:2]) / 2.0;
  [self classifyConic];
}

- (JavaUtilArrayList *)getPointsOnConic {
  return pointsOnConic_;
}

- (void)setPointsOnConicWithJavaUtilArrayList:(JavaUtilArrayList *)points {
  pointsOnConic_ = points;
}

- (void)addPointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pt {
  if (pointsOnConic_ == nil) pointsOnConic_ = new_JavaUtilArrayList_init();
  if (![((JavaUtilArrayList *) nil_chk(pointsOnConic_)) containsWithId:pt]) [pointsOnConic_ addWithId:pt];
}

- (void)removePointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pt {
  if (pointsOnConic_ != nil) [pointsOnConic_ removeWithId:pt];
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
    OrgGeogebraCommonKernelGeosGeoLine *line = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLine class]);
    OrgGeogebraCommonKernelKernelNDGeoConicND_setCoeffsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, 0, 0, 0, [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line)) getX], [line getY], [line getZ]);
    return;
  }
  OrgGeogebraCommonKernelKernelNDGeoConicND *co = (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [OrgGeogebraCommonKernelKernelNDGeoConicND class]);
  toStringMode_ = ((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(co))->toStringMode_;
  type_ = co->type_;
  for (jint i = 0; i < 6; i++) *IOSDoubleArray_GetRef(nil_chk(matrix_), i) = IOSDoubleArray_Get(co->matrix_, i);
  if (co->transform_ != nil) {
    id<OrgGeogebraCommonAwtGAffineTransform> at = OrgGeogebraCommonKernelKernelNDGeoConicND_getAffineTransform(self);
    [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(at)) setTransformWithOrgGeogebraCommonAwtGAffineTransform:co->transform_];
  }
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:IOSObjectArray_Get(co->eigenvec_, 0)];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:IOSObjectArray_Get(co->eigenvec_, 1)];
  [self setMidpointWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([co getMidpoint])) get]];
  *IOSDoubleArray_GetRef(nil_chk(halfAxes_), 0) = IOSDoubleArray_Get(co->halfAxes_, 0);
  *IOSDoubleArray_GetRef(halfAxes_, 1) = IOSDoubleArray_Get(co->halfAxes_, 1);
  linearEccentricity_ = co->linearEccentricity_;
  eccentricity_ = co->eccentricity_;
  p_ = co->p_;
  *IOSDoubleArray_GetRef(nil_chk(mu_), 0) = IOSDoubleArray_Get(co->mu_, 0);
  *IOSDoubleArray_GetRef(mu_, 1) = IOSDoubleArray_Get(co->mu_, 1);
  OrgGeogebraCommonKernelKernelNDGeoConicND_setLinesWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, co);
  if (co->singlePoint__ != nil) {
    if (singlePoint__ == nil) singlePoint__ = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
    [singlePoint__ setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:co->singlePoint__];
  }
  if (co->startPoints_ != nil) {
    if (startPoints_ == nil) {
      startPoints_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
      for (jint i = 0; i < 2; i++) {
        (void) IOSObjectArray_Set(startPoints_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
      }
    }
    for (jint i = 0; i < 2; i++) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(startPoints_, i))) setWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(co->startPoints_, i)];
    }
  }
  defined_ = co->defined_;
  [super setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)setLinesWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)co {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setLinesWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, co);
}

- (void)update {
  OrgGeogebraCommonKernelKernelNDGeoConicND_makePathParametersInvalid(self);
  [super update];
}

- (void)setToStringModeWithInt:(jint)mode {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setToStringModeWithInt_(self, mode);
}

- (jint)getToStringMode {
  return toStringMode_;
}

- (jboolean)isCircle {
  return type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE;
}

- (void)setToSpecific {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setToStringModeWithInt_(self, OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_SPECIFIC);
}

- (void)setToImplicit {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setToStringModeWithInt_(self, OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_IMPLICIT);
}

- (void)setToExplicit {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setToStringModeWithInt_(self, OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_EXPLICIT);
}

- (jboolean)isSpecificPossible {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isSpecificPossible(self);
}

- (jboolean)isExplicitPossible {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isExplicitPossible(self);
}

- (jboolean)checkDefined {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_checkDefined(self);
}

- (jboolean)showInEuclidianView {
  return [self isDefined] && (type_ != OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY || [self isInverseFill]);
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)isLineConic {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    return YES;
    default:
    return NO;
  }
}

- (jboolean)isDegenerate {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    return NO;
    default:
    return YES;
  }
}

- (void)setCoeffsWithDoubleArray:(IOSDoubleArray *)coeffs {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setCoeffsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, IOSDoubleArray_Get(nil_chk(coeffs), 0), IOSDoubleArray_Get(coeffs, 1), IOSDoubleArray_Get(coeffs, 2), IOSDoubleArray_Get(coeffs, 3), IOSDoubleArray_Get(coeffs, 4), IOSDoubleArray_Get(coeffs, 5));
}

- (void)setCoeffsWithDouble:(jdouble)a
                 withDouble:(jdouble)b
                 withDouble:(jdouble)c
                 withDouble:(jdouble)d
                 withDouble:(jdouble)e
                 withDouble:(jdouble)f {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setCoeffsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, a, b, c, d, e, f);
}

- (NSString *)toValueStringMinimalWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self getXMLtagsMinimal];
}

- (NSString *)toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self getXMLtagsMinimal];
}

- (NSString *)getXMLtagsMinimal {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < 5; i++) (void) [sb appendWithNSString:JreStrcat("$C", [self regrFormatWithDouble:IOSDoubleArray_Get(nil_chk(matrix_), i)], ' ')];
  (void) [sb appendWithNSString:[self regrFormatWithDouble:IOSDoubleArray_Get(nil_chk(matrix_), 5)]];
  return [sb description];
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self buildValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl withDoubleArray:matrix_];
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                                     withDoubleArray:(IOSDoubleArray *)matrix1 {
  JavaLangStringBuilder *sbToValueString = new_JavaLangStringBuilder_init();
  if (![self isDefined]) {
    (void) [sbToValueString appendWithNSString:@"?"];
    return sbToValueString;
  }
  *IOSDoubleArray_GetRef(nil_chk(coeffs_), 0) = IOSDoubleArray_Get(nil_chk(matrix1), 0);
  *IOSDoubleArray_GetRef(coeffs_, 2) = IOSDoubleArray_Get(matrix1, 1);
  *IOSDoubleArray_GetRef(coeffs_, 5) = IOSDoubleArray_Get(matrix1, 2);
  *IOSDoubleArray_GetRef(coeffs_, 1) = 2 * IOSDoubleArray_Get(matrix1, 3);
  *IOSDoubleArray_GetRef(coeffs_, 3) = 2 * IOSDoubleArray_Get(matrix1, 4);
  *IOSDoubleArray_GetRef(coeffs_, 4) = 2 * IOSDoubleArray_Get(matrix1, 5);
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    JavaLangStringBuilder *sb = sbToValueString;
    [sb setLengthWithInt:0];
    NSString *x = [tpl printVariableNameWithNSString:@"x"];
    NSString *y = [tpl printVariableNameWithNSString:@"y"];
    (void) [sb appendWithNSString:@"("];
    (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:IOSDoubleArray_Get(coeffs_, 0) withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb appendWithNSString:@")*"];
    (void) [sb appendWithNSString:x];
    (void) [sb appendWithNSString:@"^2+("];
    (void) [sb appendWithNSString:[kernel_ formatWithDouble:IOSDoubleArray_Get(coeffs_, 1) withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb appendWithNSString:@")*"];
    (void) [sb appendWithNSString:x];
    (void) [sb appendWithNSString:@"*"];
    (void) [sb appendWithNSString:y];
    (void) [sb appendWithNSString:@"+("];
    (void) [sb appendWithNSString:[kernel_ formatWithDouble:IOSDoubleArray_Get(coeffs_, 2) withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb appendWithNSString:@")*"];
    (void) [sb appendWithNSString:y];
    (void) [sb appendWithNSString:@"^2+("];
    (void) [sb appendWithNSString:[kernel_ formatWithDouble:IOSDoubleArray_Get(coeffs_, 3) withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb appendWithNSString:@")*"];
    (void) [sb appendWithNSString:x];
    (void) [sb appendWithNSString:@"+("];
    (void) [sb appendWithNSString:[kernel_ formatWithDouble:IOSDoubleArray_Get(coeffs_, 4) withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb appendWithNSString:@")*"];
    (void) [sb appendWithNSString:y];
    (void) [sb appendWithNSString:@"="];
    (void) [sb appendWithNSString:[kernel_ formatWithDouble:-IOSDoubleArray_Get(coeffs_, 5) withOrgGeogebraCommonKernelStringTemplate:tpl]];
    return sb;
  }
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) toStringLHSWithJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
    (void) [sbToValueString appendWithNSString:@" = 0"];
    return sbToValueString;
  }
  NSString *squared;
  IOSObjectArray *myVars;
  switch ([[tpl getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    squared = @"^{2}";
    myVars = OrgGeogebraCommonKernelKernelNDGeoConicND_varsLateX_;
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    squared = @"^2";
    myVars = OrgGeogebraCommonKernelKernelNDGeoConicND_varsCAS_;
    break;
    default:
    squared = @"\u00b2";
    myVars = OrgGeogebraCommonKernelKernelNDGeoConicND_vars_;
  }
  switch (toStringMode_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_SPECIFIC:
    if (!OrgGeogebraCommonKernelKernelNDGeoConicND_isSpecificPossible(self)) return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildImplicitEquationWithDoubleArray:coeffs_ withNSStringArray:myVars withBoolean:OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withChar:'=' withOrgGeogebraCommonKernelStringTemplate:tpl];
    switch (type_) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      [self buildSphereNDStringWithJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
      return sbToValueString;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(coeffs_, 1))) {
        jdouble coeff0, coeff1;
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) getY])) {
          coeff0 = IOSDoubleArray_Get(nil_chk(halfAxes_), 0);
          coeff1 = IOSDoubleArray_Get(halfAxes_, 1);
        }
        else {
          coeff0 = IOSDoubleArray_Get(nil_chk(halfAxes_), 1);
          coeff1 = IOSDoubleArray_Get(halfAxes_, 0);
        }
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX])) {
          (void) [sbToValueString appendWithNSString:@"x"];
          (void) [sbToValueString appendWithNSString:squared];
        }
        else {
          (void) [sbToValueString appendWithNSString:@"(x "];
          [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatSignedWithDouble:-[b_ getX] withJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
          (void) [sbToValueString appendWithNSString:@")"];
          (void) [sbToValueString appendWithNSString:squared];
        }
        (void) [sbToValueString appendWithNSString:@" / "];
        (void) [sbToValueString appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:coeff0 * coeff0 withOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sbToValueString appendWithNSString:@" + "];
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([b_ getY])) {
          (void) [sbToValueString appendWithNSString:@"y"];
          (void) [sbToValueString appendWithNSString:squared];
        }
        else {
          (void) [sbToValueString appendWithNSString:@"(y "];
          [kernel_ formatSignedWithDouble:-[b_ getY] withJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
          (void) [sbToValueString appendWithNSString:@")"];
          (void) [sbToValueString appendWithNSString:squared];
        }
        (void) [sbToValueString appendWithNSString:@" / "];
        (void) [sbToValueString appendWithNSString:[kernel_ formatWithDouble:coeff1 * coeff1 withOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sbToValueString appendWithNSString:@" = 1"];
        return sbToValueString;
      }
      return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildImplicitEquationWithDoubleArray:coeffs_ withNSStringArray:myVars withBoolean:OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withChar:'=' withOrgGeogebraCommonKernelStringTemplate:tpl];
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(coeffs_, 1))) {
        jchar firstVar, secondVar;
        jdouble b1, b2;
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) getY])) {
          firstVar = 'x';
          secondVar = 'y';
          b1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX];
          b2 = [b_ getY];
        }
        else {
          firstVar = 'y';
          secondVar = 'x';
          b1 = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getY];
          b2 = [b_ getX];
        }
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(b1)) {
          (void) [sbToValueString appendWithChar:firstVar];
          (void) [sbToValueString appendWithNSString:squared];
        }
        else {
          (void) [sbToValueString appendWithChar:'('];
          (void) [sbToValueString appendWithChar:firstVar];
          (void) [sbToValueString appendWithChar:' '];
          [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatSignedWithDouble:-b1 withJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
          (void) [sbToValueString appendWithNSString:@")"];
          (void) [sbToValueString appendWithNSString:squared];
        }
        (void) [sbToValueString appendWithNSString:@" / "];
        (void) [sbToValueString appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * IOSDoubleArray_Get(halfAxes_, 0) withOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sbToValueString appendWithNSString:@" - "];
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(b2)) {
          (void) [sbToValueString appendWithChar:secondVar];
          (void) [sbToValueString appendWithNSString:squared];
        }
        else {
          (void) [sbToValueString appendWithChar:'('];
          (void) [sbToValueString appendWithChar:secondVar];
          (void) [sbToValueString appendWithChar:' '];
          [kernel_ formatSignedWithDouble:-b2 withJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
          (void) [sbToValueString appendWithNSString:@")"];
          (void) [sbToValueString appendWithNSString:squared];
        }
        (void) [sbToValueString appendWithNSString:@" / "];
        (void) [sbToValueString appendWithNSString:[kernel_ formatWithDouble:IOSDoubleArray_Get(halfAxes_, 1) * IOSDoubleArray_Get(halfAxes_, 1) withOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sbToValueString appendWithNSString:@" = 1"];
        return sbToValueString;
      }
      return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildImplicitEquationWithDoubleArray:coeffs_ withNSStringArray:myVars withBoolean:OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withChar:'=' withOrgGeogebraCommonKernelStringTemplate:tpl];
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(coeffs_, 2))) return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildExplicitConicEquationWithDoubleArray:coeffs_ withNSStringArray:myVars withInt:2 withBoolean:OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ withOrgGeogebraCommonKernelStringTemplate:tpl];
      else if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(coeffs_, 0))) return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildExplicitConicEquationWithDoubleArray:coeffs_ withNSStringArray:myVars withInt:0 withBoolean:OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ withOrgGeogebraCommonKernelStringTemplate:tpl];
      else return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildImplicitEquationWithDoubleArray:coeffs_ withNSStringArray:myVars withBoolean:OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withChar:'=' withOrgGeogebraCommonKernelStringTemplate:tpl];
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      (void) [sbToValueString appendWithChar:'('];
      [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) toStringLHSWithJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
      (void) [sbToValueString appendWithNSString:@")"];
      (void) [sbToValueString appendWithNSString:squared];
      (void) [sbToValueString appendWithNSString:@" = 0"];
      return sbToValueString;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      (void) [sbToValueString appendWithChar:'('];
      [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) toStringLHSWithJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
      (void) [sbToValueString appendWithNSString:@") ("];
      [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines_, 1))) toStringLHSWithJavaLangStringBuilder:sbToValueString withOrgGeogebraCommonKernelStringTemplate:tpl];
      (void) [sbToValueString appendWithNSString:@") = 0"];
      return sbToValueString;
    }
    case OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_EXPLICIT:
    if (OrgGeogebraCommonKernelKernelNDGeoConicND_isExplicitPossible(self)) return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildExplicitConicEquationWithDoubleArray:coeffs_ withNSStringArray:myVars withInt:4 withBoolean:OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ withOrgGeogebraCommonKernelStringTemplate:tpl];
    default:
    return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildImplicitEquationWithDoubleArray:coeffs_ withNSStringArray:myVars withBoolean:OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withChar:'=' withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
}

- (IOSDoubleArray *)getHalfAxes {
  return halfAxes_;
}

- (IOSObjectArray *)getLines {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_getLines(self);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getSinglePoint {
  return singlePoint__;
}

- (id<OrgGeogebraCommonAwtGAffineTransform>)getAffineTransform {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_getAffineTransform(self);
}

- (void)setAffineTransform {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
}

- (OrgGeogebraCommonKernelGeosGeoVec2D *)getTranslationVector {
  return b_;
}

- (jdouble)getCircleRadius {
  return [self getHalfAxisWithInt:0];
}

- (void)coordsEVtoRWWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  jdouble px = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->x_;
  P->x_ = px * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) getX] + P->y_ * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) getX];
  P->y_ = px * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) getY] + P->y_ * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) getY];
  P->x_ = P->x_ + P->z_ * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX];
  P->y_ = P->y_ + P->z_ * [b_ getY];
}

- (IOSDoubleArray *)getMatrix {
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(nil_chk(matrix_), 0), IOSDoubleArray_Get(matrix_, 1), IOSDoubleArray_Get(matrix_, 2), IOSDoubleArray_Get(matrix_, 3), IOSDoubleArray_Get(matrix_, 4), IOSDoubleArray_Get(matrix_, 5) } count:6];
  return ret;
}

- (void)getMatrixWithDoubleArray:(IOSDoubleArray *)outArg {
  for (jint i = 0; i < 6; i++) {
    *IOSDoubleArray_GetRef(nil_chk(outArg), i) = IOSDoubleArray_Get(nil_chk(matrix_), i);
  }
}

- (void)setMatrixWithDoubleArray:(IOSDoubleArray *)matrix {
  for (jint i = 0; i < 6; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->matrix_), i) = IOSDoubleArray_Get(nil_chk(matrix), i);
  }
  [self classifyConic];
}

- (void)setDegenerateMatrixFromArrayWithDoubleArray:(IOSDoubleArray *)matrix {
  for (jint i = 0; i < 6; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->matrix_), i) = IOSDoubleArray_Get(nil_chk(matrix), i);
  }
  [self classifyConicWithBoolean:YES];
}

- (void)setMatrixWithDoubleArray2:(IOSObjectArray *)C {
  *IOSDoubleArray_GetRef(nil_chk(matrix_), 0) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(C), 0)), 0);
  *IOSDoubleArray_GetRef(matrix_, 1) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(C, 1)), 1);
  *IOSDoubleArray_GetRef(matrix_, 2) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(C, 2)), 2);
  *IOSDoubleArray_GetRef(matrix_, 3) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(C, 0)), 1) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(C, 1)), 0)) / 2.0;
  *IOSDoubleArray_GetRef(matrix_, 4) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(C, 0)), 2) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(C, 2)), 0)) / 2.0;
  *IOSDoubleArray_GetRef(matrix_, 5) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(C, 1)), 2) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(C, 2)), 1)) / 2.0;
  [self classifyConic];
}

- (void)setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)M
                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C {
  defined_ = ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(M)) isDefined] && ![M isInfinite] && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(B)) isDefined] && ![B isInfinite] && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(C)) isDefined] && ![C isInfinite]);
  jdouble r = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(B)) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:C];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(r)) {
    r = 0;
  }
  else if (r < 0) {
    defined_ = NO;
  }
  if (defined_) {
    [self setCircleMatrixWithOrgGeogebraCommonKernelGeosGeoPoint:M withDouble:r];
    OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
  }
}

- (void)setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
                 withOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setCircleWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoSegment_(self, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(M, [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(segment, [OrgGeogebraCommonKernelGeosGeoSegment class]));
}

- (void)setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)M
               withOrgGeogebraCommonKernelGeosGeoSegment:(OrgGeogebraCommonKernelGeosGeoSegment *)geoSegment {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setCircleWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoSegment_(self, M, geoSegment);
}

- (void)setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setCircleWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(M, [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class]));
}

- (void)setCircleMatrixWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)M
                                                    withDouble:(jdouble)r {
  [self setSphereNDMatrixWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(M)) getInhomCoordsInD2] withDouble:r];
}

- (void)setParabolaWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)F
                    withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  defined_ = ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(F)) isDefined] && ![F isInfinite] && [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) isDefined]);
  if (!defined_) return;
  jdouble fx = F->inhomX_;
  jdouble fy = F->inhomY_;
  *IOSDoubleArray_GetRef(nil_chk(matrix_), 0) = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g))->y_ * g->y_;
  *IOSDoubleArray_GetRef(matrix_, 1) = g->x_ * g->x_;
  jdouble lsq = IOSDoubleArray_Get(matrix_, 0) + IOSDoubleArray_Get(matrix_, 1);
  *IOSDoubleArray_GetRef(matrix_, 2) = lsq * (fx * fx + fy * fy) - g->z_ * g->z_;
  *IOSDoubleArray_GetRef(matrix_, 3) = -g->x_ * g->y_;
  *IOSDoubleArray_GetRef(matrix_, 4) = -(lsq * fx + g->x_ * g->z_);
  *IOSDoubleArray_GetRef(matrix_, 5) = -(lsq * fy + g->y_ * g->z_);
  [self classifyConic];
}

- (void)setParabolaWithDouble:(jdouble)y0 {
  *IOSDoubleArray_GetRef(nil_chk(matrix_), 0) = 1;
  *IOSDoubleArray_GetRef(matrix_, 1) = 0;
  *IOSDoubleArray_GetRef(matrix_, 2) = -y0 * y0;
  *IOSDoubleArray_GetRef(matrix_, 3) = 0;
  *IOSDoubleArray_GetRef(matrix_, 4) = 0;
  *IOSDoubleArray_GetRef(matrix_, 5) = y0;
  [self classifyConic];
}

- (void)setEllipseHyperbolaWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                           withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C
                                                        withDouble:(jdouble)a {
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(B)) isInfinite] || [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(C)) isInfinite] || a < -OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) {
    defined_ = NO;
    return;
  }
  else {
    defined_ = YES;
  }
  jdouble b1 = B->inhomX_;
  jdouble b2 = B->inhomY_;
  jdouble c1 = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(C))->inhomX_;
  jdouble c2 = C->inhomY_;
  jdouble diff1 = b1 - c1;
  jdouble diff2 = b2 - c2;
  jdouble sqsumb = b1 * b1 + b2 * b2;
  jdouble sqsumc = c1 * c1 + c2 * c2;
  jdouble sqsumdiff = sqsumb - sqsumc;
  jdouble a2 = 2.0 * a;
  jdouble asq4 = a2 * a2;
  jdouble asq = a * a;
  jdouble afo = asq * asq;
  *IOSDoubleArray_GetRef(nil_chk(matrix_), 0) = 4.0 * (a2 - diff1) * (a2 + diff1);
  *IOSDoubleArray_GetRef(matrix_, 3) = -4.0 * diff1 * diff2;
  *IOSDoubleArray_GetRef(matrix_, 1) = 4.0 * (a2 - diff2) * (a2 + diff2);
  *IOSDoubleArray_GetRef(matrix_, 4) = -2.0 * (asq4 * (b1 + c1) - diff1 * sqsumdiff);
  *IOSDoubleArray_GetRef(matrix_, 5) = -2.0 * (asq4 * (b2 + c2) - diff2 * sqsumdiff);
  *IOSDoubleArray_GetRef(matrix_, 2) = -16.0 * afo - sqsumdiff * sqsumdiff + 8.0 * asq * (sqsumb + sqsumc);
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) setXWithDouble:c1 - b1];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) setYWithDouble:c2 - b2];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) setXWithDouble:-[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) getY]];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) setYWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) getX]];
  [self classifyConic];
  if (!(type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA || type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE || type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE || type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE)) {
    defined_ = NO;
  }
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  [self doTranslateWithOrgGeogebraCommonKernelMatrixCoords:v];
  OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
  OrgGeogebraCommonKernelKernelNDGeoConicND_updateDegenerates(self);
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)translateWithDouble:(jdouble)vx
                 withDouble:(jdouble)vy {
  OrgGeogebraCommonKernelKernelNDGeoConicND_doTranslateWithDouble_withDouble_(self, vx, vy);
  OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
  OrgGeogebraCommonKernelKernelNDGeoConicND_updateDegenerates(self);
}

- (void)doTranslateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  OrgGeogebraCommonKernelKernelNDGeoConicND_doTranslateWithDouble_withDouble_(self, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX], [v getY]);
}

- (void)doTranslateWithDouble:(jdouble)vx
                   withDouble:(jdouble)vy {
  OrgGeogebraCommonKernelKernelNDGeoConicND_doTranslateWithDouble_withDouble_(self, vx, vy);
}

- (void)translateMatrixWithDoubleArray:(IOSDoubleArray *)mat
                            withDouble:(jdouble)vx
                            withDouble:(jdouble)vy {
  *IOSDoubleArray_GetRef(nil_chk(mat), 2) = IOSDoubleArray_Get(mat, 2) + vx * (IOSDoubleArray_Get(mat, 0) * vx - 2.0 * IOSDoubleArray_Get(mat, 4)) + vy * (IOSDoubleArray_Get(mat, 1) * vy - 2.0 * IOSDoubleArray_Get(mat, 5) + 2.0 * IOSDoubleArray_Get(mat, 3) * vx);
  *IOSDoubleArray_GetRef(mat, 4) = IOSDoubleArray_Get(mat, 4) - IOSDoubleArray_Get(mat, 0) * vx - IOSDoubleArray_Get(mat, 3) * vy;
  *IOSDoubleArray_GetRef(mat, 5) = IOSDoubleArray_Get(mat, 5) - IOSDoubleArray_Get(mat, 3) * vx - IOSDoubleArray_Get(mat, 1) * vy;
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal {
  jdouble phi = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble];
  OrgGeogebraCommonKernelKernelNDGeoConicND_rotateWithDouble_(self, phi);
  OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
  OrgGeogebraCommonKernelKernelNDGeoConicND_updateDegenerates(self);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonKernelMatrixCoords *Q = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  jdouble phi = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble];
  jdouble qx = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = [Q getY];
  OrgGeogebraCommonKernelKernelNDGeoConicND_doTranslateWithDouble_withDouble_(self, -qx, -qy);
  OrgGeogebraCommonKernelKernelNDGeoConicND_rotateWithDouble_(self, phi);
  OrgGeogebraCommonKernelKernelNDGeoConicND_doTranslateWithDouble_withDouble_(self, qx, qy);
  OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
  OrgGeogebraCommonKernelKernelNDGeoConicND_updateDegenerates(self);
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  jdouble det = a00 * a11 - a01 * a10;
  jdouble det2 = det * det;
  jdouble A0 = a11 * (a11 * IOSDoubleArray_Get(nil_chk(matrix_), 0) - a10 * IOSDoubleArray_Get(matrix_, 3)) - a10 * (a11 * IOSDoubleArray_Get(matrix_, 3) - a10 * IOSDoubleArray_Get(matrix_, 1));
  jdouble A3 = a00 * (a11 * IOSDoubleArray_Get(matrix_, 3) - a10 * IOSDoubleArray_Get(matrix_, 1)) - a01 * (a11 * IOSDoubleArray_Get(matrix_, 0) - a10 * IOSDoubleArray_Get(matrix_, 3));
  jdouble A1 = a00 * (a00 * IOSDoubleArray_Get(matrix_, 1) - a01 * IOSDoubleArray_Get(matrix_, 3)) - a01 * (a00 * IOSDoubleArray_Get(matrix_, 3) - a01 * IOSDoubleArray_Get(matrix_, 0));
  jdouble A4 = a11 * IOSDoubleArray_Get(matrix_, 4) - a10 * IOSDoubleArray_Get(matrix_, 5);
  *IOSDoubleArray_GetRef(matrix_, 5) = (a00 * IOSDoubleArray_Get(matrix_, 5) - a01 * IOSDoubleArray_Get(matrix_, 4)) / det;
  *IOSDoubleArray_GetRef(matrix_, 0) = A0 / det2;
  *IOSDoubleArray_GetRef(matrix_, 1) = A1 / det2;
  *IOSDoubleArray_GetRef(matrix_, 3) = A3 / det2;
  *IOSDoubleArray_GetRef(matrix_, 4) = A4 / det;
  [self classifyConic];
}

- (void)rotateWithDouble:(jdouble)phi {
  OrgGeogebraCommonKernelKernelNDGeoConicND_rotateWithDouble_(self, phi);
}

+ (void)rotateMatrixWithDoubleArray:(IOSDoubleArray *)matrix
                         withDouble:(jdouble)phi {
  OrgGeogebraCommonKernelKernelNDGeoConicND_rotateMatrixWithDoubleArray_withDouble_(matrix, phi);
}

- (void)dilateWithDouble:(jdouble)r {
  jboolean oldOrientation = OrgGeogebraCommonKernelKernelNDGeoConicND_hasPositiveEigenvectorOrientation(self);
  OrgGeogebraCommonKernelKernelNDGeoConicND_doDilateWithDouble_(self, r);
  [self classifyConic];
  OrgGeogebraCommonKernelKernelNDGeoConicND_setPositiveEigenvectorOrientationWithBoolean_(self, oldOrientation);
}

- (void)doDilateWithDouble:(jdouble)factor {
  OrgGeogebraCommonKernelKernelNDGeoConicND_doDilateWithDouble_(self, factor);
}

- (void)updateDegenerates {
  OrgGeogebraCommonKernelKernelNDGeoConicND_updateDegenerates(self);
}

- (void)setEigenvectorsWithDouble:(jdouble)x0
                       withDouble:(jdouble)y0
                       withDouble:(jdouble)z0
                       withDouble:(jdouble)x1
                       withDouble:(jdouble)y1
                       withDouble:(jdouble)z1 {
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) setXWithDouble:x0 / z0];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) setYWithDouble:y0 / z0];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) setXWithDouble:x1 / z1];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) setYWithDouble:y1 / z1];
  eigenvectorsSetOnLoad_ = YES;
}

- (void)setFirstEigenvectorWithDoubleArray:(IOSDoubleArray *)coords {
  eigenvecX_ = IOSDoubleArray_Get(nil_chk(coords), 0);
  eigenvecY_ = IOSDoubleArray_Get(coords, 1);
}

- (void)setEigenvectors {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(self);
}

- (void)setParabolicEigenvectors {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setParabolicEigenvectors(self);
}

- (void)makePathParametersInvalid {
  OrgGeogebraCommonKernelKernelNDGeoConicND_makePathParametersInvalid(self);
}

- (void)classifyConic {
  [self classifyConicWithBoolean:NO];
}

- (void)classifyConicWithBoolean:(jboolean)degenerate {
  defined_ = (degenerate || OrgGeogebraCommonKernelKernelNDGeoConicND_checkDefined(self));
  if (!defined_) return;
  if (OrgGeogebraCommonKernelKernelNDGeoConicND_isDetSzero(self)) {
    OrgGeogebraCommonKernelKernelNDGeoConicND_classifyParabolicConicWithBoolean_(self, degenerate);
  }
  else {
    detS_ = IOSDoubleArray_Get(nil_chk(matrix_), 0) * IOSDoubleArray_Get(matrix_, 1) - IOSDoubleArray_Get(matrix_, 3) * IOSDoubleArray_Get(matrix_, 3);
    OrgGeogebraCommonKernelKernelNDGeoConicND_classifyMidpointConicWithBoolean_(self, degenerate);
  }
  OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
}

- (jboolean)isDetSzero {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isDetSzero(self);
}

- (void)classifyMidpointConicWithBoolean:(jboolean)degenerate {
  OrgGeogebraCommonKernelKernelNDGeoConicND_classifyMidpointConicWithBoolean_(self, degenerate);
}

- (void)singlePoint {
  OrgGeogebraCommonKernelKernelNDGeoConicND_singlePoint(self);
}

- (void)intersectingLinesWithDoubleArray:(IOSDoubleArray *)mu1 {
  OrgGeogebraCommonKernelKernelNDGeoConicND_intersectingLinesWithDoubleArray_(self, mu1);
}

- (void)ellipseWithDoubleArray:(IOSDoubleArray *)mu1 {
  OrgGeogebraCommonKernelKernelNDGeoConicND_ellipseWithDoubleArray_(self, mu1);
}

- (void)hyperbolaWithDoubleArray:(IOSDoubleArray *)mu1 {
  OrgGeogebraCommonKernelKernelNDGeoConicND_hyperbolaWithDoubleArray_(self, mu1);
}

- (void)classifyParabolicConicWithBoolean:(jboolean)degenerate {
  OrgGeogebraCommonKernelKernelNDGeoConicND_classifyParabolicConicWithBoolean_(self, degenerate);
}

- (void)doubleLine {
  OrgGeogebraCommonKernelKernelNDGeoConicND_doubleLine(self);
}

- (void)enforceDoubleLine {
  defined_ = YES;
  OrgGeogebraCommonKernelKernelNDGeoConicND_doubleLine(self);
}

- (void)handleSzero {
  OrgGeogebraCommonKernelKernelNDGeoConicND_handleSzero(self);
}

- (void)parallelLinesWithDoubleArray:(IOSDoubleArray *)mu1 {
  OrgGeogebraCommonKernelKernelNDGeoConicND_parallelLinesWithDoubleArray_(self, mu1);
}

- (void)setStartPointsForLines {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForLines(self);
}

- (void)setStartPointsForDoubleLine {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForDoubleLine(self);
}

- (void)parabola {
  OrgGeogebraCommonKernelKernelNDGeoConicND_parabola(self);
}

+ (jdouble)detWithDoubleArray:(IOSDoubleArray *)matrix {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_detWithDoubleArray_(matrix);
}

- (jboolean)hasPositiveEigenvectorOrientation {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_hasPositiveEigenvectorOrientation(self);
}

- (void)setPositiveEigenvectorOrientationWithBoolean:(jboolean)flag {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setPositiveEigenvectorOrientationWithBoolean_(self, flag);
}

- (jboolean)isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                                                                    withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND_withDouble_(self, P, eps);
}

- (jboolean)isIntersectionPointIncidentWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                                                                    withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(self, P, eps);
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) return NO;
  OrgGeogebraCommonKernelKernelNDGeoConicND *conic = (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [OrgGeogebraCommonKernelKernelNDGeoConicND class]);
  IOSDoubleArray *B = conic->matrix_;
  jdouble lambda1 = 0.0;
  jboolean aZero, bZero, equal = YES;
  for (jint i = 0; i < 6; i++) {
    aZero = OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(matrix_), i));
    bZero = OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(B), i));
    if (aZero && !bZero) equal = NO;
    else if (bZero && !aZero) equal = NO;
    else if (!aZero && !bZero) {
      if (lambda1 == 0.0) lambda1 = IOSDoubleArray_Get(matrix_, i) / IOSDoubleArray_Get(B, i);
      else equal = OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(matrix_, i), lambda1 * IOSDoubleArray_Get(B, i));
    }
    if (!equal) break;
  }
  return equal;
}

- (jdouble)evaluateWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->x_ * (IOSDoubleArray_Get(nil_chk(matrix_), 0) * P->x_ + IOSDoubleArray_Get(matrix_, 3) * P->y_ + IOSDoubleArray_Get(matrix_, 4) * P->z_) + P->y_ * (IOSDoubleArray_Get(matrix_, 3) * P->x_ + IOSDoubleArray_Get(matrix_, 1) * P->y_ + IOSDoubleArray_Get(matrix_, 5) * P->z_) + P->z_ * (IOSDoubleArray_Get(matrix_, 4) * P->x_ + IOSDoubleArray_Get(matrix_, 5) * P->y_ + IOSDoubleArray_Get(matrix_, 2) * P->z_);
}

- (jdouble)evaluateWithOrgGeogebraCommonKernelGeosGeoVec2D:(OrgGeogebraCommonKernelGeosGeoVec2D *)pt {
  return IOSDoubleArray_Get(nil_chk(matrix_), 2) + IOSDoubleArray_Get(matrix_, 4) * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(pt)) getX] + IOSDoubleArray_Get(matrix_, 5) * [pt getY] + [pt getY] * (IOSDoubleArray_Get(matrix_, 5) + IOSDoubleArray_Get(matrix_, 3) * [pt getX] + IOSDoubleArray_Get(matrix_, 1) * [pt getY]) + [pt getX] * (IOSDoubleArray_Get(matrix_, 4) + IOSDoubleArray_Get(matrix_, 0) * [pt getX] + IOSDoubleArray_Get(matrix_, 3) * [pt getY]);
}

- (jdouble)evaluateWithDouble:(jdouble)x
                   withDouble:(jdouble)y {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(self, x, y);
}

- (void)polarLineWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                  withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)polar {
  if (![self isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(polar)) setUndefined];
  }
  else {
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(polar))->x_ = IOSDoubleArray_Get(nil_chk(matrix_), 0) * ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->x_ + IOSDoubleArray_Get(matrix_, 3) * P->y_ + IOSDoubleArray_Get(matrix_, 4) * P->z_;
    polar->y_ = IOSDoubleArray_Get(matrix_, 3) * P->x_ + IOSDoubleArray_Get(matrix_, 1) * P->y_ + IOSDoubleArray_Get(matrix_, 5) * P->z_;
    polar->z_ = IOSDoubleArray_Get(matrix_, 4) * P->x_ + IOSDoubleArray_Get(matrix_, 5) * P->y_ + IOSDoubleArray_Get(matrix_, 2) * P->z_;
  }
}

- (void)polarPointWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line
                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)polar {
  OrgGeogebraCommonKernelKernelNDGeoConicND_polarPointWithDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(self, ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line))->x_, line->y_, line->z_, polar);
}

- (void)polarPointWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)equation
                  withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)polar {
  OrgGeogebraCommonKernelKernelNDGeoConicND_polarPointWithDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(self, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getX], [equation getY], [equation getZ], polar);
}

- (void)polarPointWithDouble:(jdouble)x
                  withDouble:(jdouble)y
                  withDouble:(jdouble)z
withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)polar {
  OrgGeogebraCommonKernelKernelNDGeoConicND_polarPointWithDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(self, x, y, z, polar);
}

- (void)polarLineWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)project
                  withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)polar {
  if (![self isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(polar)) setUndefined];
  }
  else {
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(polar))->x_ = IOSDoubleArray_Get(nil_chk(matrix_), 0) * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(project)) getX] + IOSDoubleArray_Get(matrix_, 3) * [project getY] + IOSDoubleArray_Get(matrix_, 4) * [project getZ];
    polar->y_ = IOSDoubleArray_Get(matrix_, 3) * [project getX] + IOSDoubleArray_Get(matrix_, 1) * [project getY] + IOSDoubleArray_Get(matrix_, 5) * [project getZ];
    polar->z_ = IOSDoubleArray_Get(matrix_, 4) * [project getX] + IOSDoubleArray_Get(matrix_, 5) * [project getY] + IOSDoubleArray_Get(matrix_, 2) * [project getZ];
  }
}

- (void)diameterLineWithOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v
                      withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)diameter {
  OrgGeogebraCommonKernelKernelNDGeoConicND_diameterLineWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLine_(self, ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(v))->x_, v->y_, diameter);
}

- (void)diameterLineWithDouble:(jdouble)vx
                    withDouble:(jdouble)vy
withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)diameter {
  OrgGeogebraCommonKernelKernelNDGeoConicND_diameterLineWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLine_(self, vx, vy, diameter);
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<eigenvectors "];
  (void) [sb appendWithNSString:JreStrcat("$DC", @" x0=\"", [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) getX], '"')];
  (void) [sb appendWithNSString:JreStrcat("$DC", @" y0=\"", [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) getY], '"')];
  (void) [sb appendWithNSString:@" z0=\"1.0\""];
  (void) [sb appendWithNSString:JreStrcat("$DC", @" x1=\"", [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) getX], '"')];
  (void) [sb appendWithNSString:JreStrcat("$DC", @" y1=\"", [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 1))) getY], '"')];
  (void) [sb appendWithNSString:@" z1=\"1.0\""];
  (void) [sb appendWithNSString:@"/>\n"];
  (void) [sb appendWithNSString:@"\t<matrix"];
  for (jint i = 0; i < 6; i++) (void) [sb appendWithNSString:JreStrcat("$I$DC", @" A", i, @"=\"", IOSDoubleArray_Get(nil_chk(matrix_), i), '"')];
  (void) [sb appendWithNSString:@"/>\n"];
  switch (toStringMode_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_SPECIFIC:
    (void) [sb appendWithNSString:@"\t<eqnStyle style=\"specific\"/>\n"];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_EXPLICIT:
    (void) [sb appendWithNSString:@"\t<eqnStyle style=\"explicit\"/>\n"];
    break;
    default:
    (void) [sb appendWithNSString:@"\t<eqnStyle style=\"implicit\"/>\n"];
  }
}

- (NSString *)getSpecificEquation {
  NSString *ret = nil;
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"CircleEquation"];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"EllipseEquation"];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"HyperbolaEquation"];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ParabolaEquation"];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"DoubleLineEquation"];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ConicLinesEquation"];
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"DoubleLineEquation"];
    break;
  }
  return ret;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isGeoConic {
  return YES;
}

- (void)setZero {
  OrgGeogebraCommonKernelKernelNDGeoConicND_setCoeffsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, 1, 0, 1, 0, 0, 0);
}

- (void)setMidpointWithDoubleArray:(IOSDoubleArray *)coords {
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) setXWithDouble:IOSDoubleArray_Get(nil_chk(coords), 0)];
  [b_ setYWithDouble:IOSDoubleArray_Get(coords, 1)];
  [super setMidpointWithDouble:IOSDoubleArray_Get(coords, 0) withDouble:IOSDoubleArray_Get(coords, 1)];
}

- (void)setMidpointWithDouble:(jdouble)x
                   withDouble:(jdouble)y {
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) setXWithDouble:x];
  [b_ setYWithDouble:y];
  [super setMidpointWithDouble:x withDouble:y];
}

- (NSString *)getAssignmentOperator {
  return @": ";
}

- (jboolean)isRegion {
  return YES;
}

- (jboolean)isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getCoordsInD2WithOrgGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
  return [self isInRegionWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY]];
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  return OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(self, x0, y0) * [self evaluateInSignificantPoint] >= 0;
}

- (jdouble)evaluateInSignificantPoint {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    return OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(self, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX] + ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0)))->x_ + ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines_, 1)))->x_, [b_ getY] + ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines_, 0)))->y_ + ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines_, 1)))->y_);
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    return -OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(self, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX], [b_ getY]);
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    return OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(self, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX] + p_ * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) getX], [b_ getY] + p_ * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) getY]);
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    return OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(self, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX] + 1, [b_ getY]);
    default:
    return OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(self, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX], [b_ getY]);
  }
}

- (void)pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) updateCoords2D];
  OrgGeogebraCommonKernelRegionParameters *rp = [PI getRegionParameters];
  if (![self isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self moveBackToRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI withOrgGeogebraCommonKernelRegionParameters:rp];
  }
  else {
    OrgGeogebraCommonKernelMatrixCoords *coords = [PI getCoordsInD2WithOrgGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
    [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) setIsOnPathWithBoolean:NO];
    OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(self, coords);
    if (type_ != OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA) {
      [rp setT1WithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] / IOSDoubleArray_Get(nil_chk(self->halfAxes_), 0)];
      [rp setT2WithDouble:[coords getY] / IOSDoubleArray_Get(self->halfAxes_, 1)];
    }
    else {
      [rp setT1WithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX]];
      [rp setT2WithDouble:[coords getY] / JavaLangMath_sqrtWithDouble_(self->p_)];
    }
    OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, coords);
  }
  [PI updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:nil];
}

- (void)moveBackToRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pi
                          withOrgGeogebraCommonKernelRegionParameters:(OrgGeogebraCommonKernelRegionParameters *)rp {
  [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:pi];
  [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) setIsOnPathWithBoolean:YES];
}

- (void)regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  OrgGeogebraCommonKernelRegionParameters *rp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getRegionParameters];
  if ([((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) isOnPath]) [self pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
  else {
    OrgGeogebraCommonKernelMatrixCoords *P = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
    if ([P isDefined]) {
      if (type_ != OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA) {
        [P setXWithDouble:[rp getT1] * IOSDoubleArray_Get(nil_chk(halfAxes_), 0)];
        [P setYWithDouble:[rp getT2] * IOSDoubleArray_Get(halfAxes_, 1)];
      }
      else {
        [P setXWithDouble:[rp getT1]];
        [P setYWithDouble:[rp getT2] * JavaLangMath_sqrtWithDouble_(self->p_)];
      }
      [P setZWithDouble:1.0];
      OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
      [PI setCoords2DWithDouble:[P getX] withDouble:[P getY] withDouble:[P getZ]];
      [PI updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
    }
    if (![self isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI]) {
      [self moveBackToRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI withOrgGeogebraCommonKernelRegionParameters:rp];
    }
  }
}

- (void)toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)curve {
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"t");
  OrgGeogebraCommonKernelArithmeticExpressionNode *evX = nil, *evY = nil;
  jdouble min = 0, max = 0;
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE) {
    evX = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_COS(), nil), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(nil_chk(halfAxes_), 0)));
    evY = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_SIN(), nil), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(halfAxes_, 1)));
    OrgGeogebraCommonKernelArithmeticExpressionNode *rwX = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, evX, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX]));
    OrgGeogebraCommonKernelArithmeticExpressionNode *rwY = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, evY, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [b_ getY]));
    [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve)) setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction:new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(rwX, fv)];
    [curve setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction:new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(rwY, fv)];
    [curve setIntervalWithDouble:0 withDouble:2 * JavaLangMath_PI];
    return;
  }
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE) {
    evX = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_COS(), nil), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -IOSDoubleArray_Get(nil_chk(halfAxes_), 0)));
    evY = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_SIN(), nil), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(halfAxes_, 1)));
    min = 0;
    max = 2 * JavaLangMath_PI;
  }
  else if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) {
    evX = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_COSH(), nil), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(nil_chk(halfAxes_), 0)));
    evY = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_SINH(), nil), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(halfAxes_, 1)));
    min = -2 * JavaLangMath_PI;
    max = 2 * JavaLangMath_PI;
  }
  else if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA) {
    evY = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, JavaLangMath_sqrtWithDouble_(2 * p_)));
    evX = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), fv);
    min = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXminForFunctions];
    max = [kernel_ getXmaxForFunctions];
  }
  else return;
  OrgGeogebraCommonKernelArithmeticExpressionNode *rwX = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, evX, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvec_), 0))) getX])), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, evY, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) getY]))), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(b_)) getX]));
  OrgGeogebraCommonKernelArithmeticExpressionNode *rwY = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, evX, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) getY])), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, evY, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(eigenvec_, 0))) getX]))), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [b_ getY]));
  [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve)) setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction:new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(rwX, fv)];
  [curve setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction:new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(rwY, fv)];
  [curve setIntervalWithDouble:min withDouble:max];
}

- (void)toGeoImplicitPolyWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)implicitPoly {
  IOSObjectArray *coeff = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ 3, 3 }];
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 0)), 0) = IOSDoubleArray_Get(nil_chk(matrix_), 2);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 1)), 1) = 2 * IOSDoubleArray_Get(matrix_, 3);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 2)), 2) = 0;
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 1)), 0) = 2 * IOSDoubleArray_Get(matrix_, 4);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 0)), 1) = 2 * IOSDoubleArray_Get(matrix_, 5);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 2)), 0) = IOSDoubleArray_Get(matrix_, 0);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 0)), 2) = IOSDoubleArray_Get(matrix_, 1);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 2)), 1) = *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, 1)), 2) = 0;
  [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(implicitPoly)) setCoeffWithDoubleArray2:coeff];
}

- (jboolean)keepsType {
  if ([self getParentAlgorithm] == nil) return YES;
  if ([[self getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoConicFivePoints class]]) return NO;
  if ([[self getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint class]]) return NO;
  if ([[self getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoEllipseFociLength class]]) return NO;
  return YES;
}

- (jdouble)distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)pt {
  jboolean tempLabeling = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoPoint *closestPoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->x_, pt->y_, pt->z_);
  [cons_ setSuppressLabelCreationWithBoolean:tempLabeling];
  [closestPoint setPathWithOrgGeogebraCommonKernelPath:self];
  [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:closestPoint];
  [closestPoint updateCoords];
  return [pt distanceWithOrgGeogebraCommonKernelGeosGeoPoint:closestPoint];
}

- (NSString *)getTypeString {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    return @"Circle";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    return @"DoubleLine";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return @"Ellipse";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
    return @"EmptySet";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    return @"Hyperbola";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    return @"IntersectingLines";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    return @"Line";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    return @"Parabola";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    return @"ParallelLines";
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    return @"Point";
    default:
    return @"Conic";
  }
}

- (void)calcArea {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    area_ = [self getHalfAxisWithInt:0] * [self getHalfAxisWithInt:0] * JavaLangMath_PI;
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    area_ = 0;
    break;
    default:
    OrgGeogebraCommonMainApp_printStacktraceWithId_(JreStrcat("$IC", @"TODO (type=", type_, ')'));
  }
}

- (jdouble)getArea {
  if (defined_) return area_;
  OrgGeogebraCommonMainApp_printStacktraceWithId_(JreStrcat("$IC", @"TODO ? (type=", type_, ')'));
  return JavaLangDouble_NaN;
}

- (void)setIsEndOfQuadricWithBoolean:(jboolean)flag {
  isEndOfQuadric__ = flag;
}

- (jboolean)isEndOfQuadric {
  return isEndOfQuadric__;
}

- (void)doRemove {
  if (pointsOnConic_ != nil) {
    for (jint i = 0; i < [pointsOnConic_ size]; ++i) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> pt = [pointsOnConic_ getWithInt:i];
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pt)) removeIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self];
    }
  }
  [super doRemove];
}

- (void)setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:(OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)type {
  lastHitType_ = type;
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return lastHitType_;
}

- (NSString *)getTypeStringForAlgebraView {
  return @"Conic";
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  if (labelPosition_ == nil) {
    labelPosition_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 0, 1);
    labelParameter_ = new_OrgGeogebraCommonKernelPathParameter_initWithDouble_(0);
  }
  [self pathChangedWithoutCheckWithOrgGeogebraCommonKernelMatrixCoords:labelPosition_ withOrgGeogebraCommonKernelPathParameter:labelParameter_ withBoolean:YES];
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithOrgGeogebraCommonKernelMatrixCoords:labelPosition_];
}

- (IOSObjectArray *)getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:coords];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)x2d
                                                 withDouble:(jdouble)y2d {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithDouble:x2d withDouble:y2d];
}

- (IOSObjectArray *)getProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)oldCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingDirection {
  IOSObjectArray *result = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4), new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) } count:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getMatrixOrthonormal] withOrgGeogebraCommonKernelMatrixCoords:oldCoords withOrgGeogebraCommonKernelMatrixCoords:willingDirection withOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 0) withOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 1)];
  return result;
}

- (jint)getMetasLength {
  if (metas_ == nil) {
    return 0;
  }
  return [((JavaUtilTreeSet *) nil_chk(metas_)) size];
}

- (IOSObjectArray *)getMetas {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[((JavaUtilTreeSet *) nil_chk(metas_)) size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) [metas_ toArrayWithNSObjectArray:ret];
  return ret;
}

- (void)addMetaWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)limitedQuadric {
  if (metas_ == nil) {
    metas_ = new_JavaUtilTreeSet_init();
  }
  [((JavaUtilTreeSet *) nil_chk(metas_)) addWithId:limitedQuadric];
}

- (void)removeMetaWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)limitedQuadric {
  if (metas_ != nil) {
    [metas_ removeWithId:limitedQuadric];
  }
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMidpointND {
  return [self getMidpoint2D];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelKernelNDGeoConicND class]) {
    OrgGeogebraCommonKernelKernelNDGeoConicND_vars_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"x\u00b2", @"x y", @"y\u00b2", @"x", @"y" } count:5 type:NSString_class_()];
    OrgGeogebraCommonKernelKernelNDGeoConicND_varsLateX_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"x^{2}", @"x y", @"y^{2}", @"x", @"y" } count:5 type:NSString_class_()];
    OrgGeogebraCommonKernelKernelNDGeoConicND_varsCAS_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"x^2", @"x*y", @"y^2", @"x", @"y" } count:5 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelKernelNDGeoConicND)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getEigenvecWithInt:", "getEigenvec", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getEigenvec3DWithInt:", "getEigenvec3D", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x401, NULL, NULL },
    { "getCoordSys", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordSys;", 0x401, NULL, NULL },
    { "getDirection3DWithInt:", "getDirection3D", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x401, NULL, NULL },
    { "getOrigin3DWithInt:", "getOrigin3D", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x401, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withInt:", "GeoConicND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withInt:withBoolean:", "GeoConicND", NULL, 0x1, NULL, NULL },
    { "getSymetricMatrixWithDoubleArray:", "getSymetricMatrix", "Lorg.geogebra.common.kernel.Matrix.CoordMatrix;", 0x4, NULL, NULL },
    { "setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:withDouble:", "setCircle", "V", 0x11, NULL, NULL },
    { "setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "setCircle", "V", 0x11, NULL, NULL },
    { "setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "setSphereND", "V", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:withBoolean:", "pointChanged", "V", 0x1, NULL, NULL },
    { "getPerpendicularParamsWithOrgGeogebraCommonKernelMatrixCoords:", "getPerpendicularParams", "[D", 0x1, NULL, NULL },
    { "getPerpendicularParamsWithDouble:withDouble:", "getPerpendicularParams", "[D", 0x2, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "compatibleTypeWithInt:", "compatibleType", "Z", 0x2, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:", "pathChanged", "V", 0x4, NULL, NULL },
    { "pathChangedWithoutCheckEllipseWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:withBoolean:", "pathChangedWithoutCheckEllipse", "V", 0x4, NULL, NULL },
    { "pathChangedWithoutCheckParabolaWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:withBoolean:", "pathChangedWithoutCheckParabola", "V", 0x4, NULL, NULL },
    { "pathChangedWithoutCheckHyperbolaWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:withBoolean:", "pathChangedWithoutCheckHyperbola", "V", 0x4, NULL, NULL },
    { "pathChangedWithoutCheckWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:withBoolean:", "pathChangedWithoutCheck", "V", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnFullConic", "Z", 0x11, NULL, NULL },
    { "isOnFullConicWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "isOnFullConic", "Z", 0x11, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords:", "coordsEVtoRW", "V", 0x14, NULL, NULL },
    { "coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords:", "coordsRWtoEV", "V", 0x2, NULL, NULL },
    { "translateByCenterWithOrgGeogebraCommonKernelMatrixCoords:", "translateByCenter", "V", 0x2, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "setMatrixWithOrgGeogebraCommonKernelMatrixCoordMatrix:", "setMatrix", "V", 0x11, NULL, NULL },
    { "getPointsOnConic", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "setPointsOnConicWithJavaUtilArrayList:", "setPointsOnConic", "V", 0x11, NULL, NULL },
    { "addPointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "addPointOnConic", "V", 0x11, NULL, NULL },
    { "removePointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "removePointOnConic", "V", 0x11, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setLinesWithOrgGeogebraCommonKernelKernelNDGeoConicND:", "setLines", "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "setToStringModeWithInt:", "setToStringMode", "V", 0x11, NULL, NULL },
    { "getToStringMode", NULL, "I", 0x11, NULL, NULL },
    { "isCircle", NULL, "Z", 0x1, NULL, NULL },
    { "setToSpecific", NULL, "V", 0x11, NULL, NULL },
    { "setToImplicit", NULL, "V", 0x11, NULL, NULL },
    { "setToExplicit", NULL, "V", 0x11, NULL, NULL },
    { "isSpecificPossible", NULL, "Z", 0x11, NULL, NULL },
    { "isExplicitPossible", NULL, "Z", 0x11, NULL, NULL },
    { "checkDefined", NULL, "Z", 0x12, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x14, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "isLineConic", NULL, "Z", 0x11, NULL, NULL },
    { "isDegenerate", NULL, "Z", 0x11, NULL, NULL },
    { "setCoeffsWithDoubleArray:", "setCoeffs", "V", 0x11, NULL, NULL },
    { "setCoeffsWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCoeffs", "V", 0x11, NULL, NULL },
    { "toValueStringMinimalWithOrgGeogebraCommonKernelStringTemplate:", "toValueStringMinimal", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLtagsMinimal", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "buildValueStringWithOrgGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "buildValueStringWithOrgGeogebraCommonKernelStringTemplate:withDoubleArray:", "buildValueString", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "getHalfAxes", NULL, "[D", 0x11, NULL, NULL },
    { "getLines", NULL, "[Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "getSinglePoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getAffineTransform", NULL, "Lorg.geogebra.common.awt.GAffineTransform;", 0x11, NULL, NULL },
    { "setAffineTransform", NULL, "V", 0x14, NULL, NULL },
    { "getTranslationVector", NULL, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", 0x11, NULL, NULL },
    { "getCircleRadius", NULL, "D", 0x11, NULL, NULL },
    { "coordsEVtoRWWithOrgGeogebraCommonKernelGeosGeoPoint:", "coordsEVtoRW", "V", 0x14, NULL, NULL },
    { "getMatrix", NULL, "[D", 0x11, NULL, NULL },
    { "getMatrixWithDoubleArray:", "getMatrix", "V", 0x11, NULL, NULL },
    { "setMatrixWithDoubleArray:", "setMatrix", "V", 0x11, NULL, NULL },
    { "setDegenerateMatrixFromArrayWithDoubleArray:", "setDegenerateMatrixFromArray", "V", 0x11, NULL, NULL },
    { "setMatrixWithDoubleArray2:", "setMatrix", "V", 0x11, NULL, NULL },
    { "setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "setCircle", "V", 0x11, NULL, NULL },
    { "setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoSegment:", "setCircle", "V", 0x11, NULL, NULL },
    { "setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setCircleMatrixWithOrgGeogebraCommonKernelGeosGeoPoint:withDouble:", "setCircleMatrix", "V", 0x4, NULL, NULL },
    { "setParabolaWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoLine:", "setParabola", "V", 0x11, NULL, NULL },
    { "setParabolaWithDouble:", "setParabola", "V", 0x11, NULL, NULL },
    { "setEllipseHyperbolaWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withDouble:", "setEllipseHyperbola", "V", 0x11, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x11, NULL, NULL },
    { "doTranslateWithOrgGeogebraCommonKernelMatrixCoords:", "doTranslate", "V", 0x4, NULL, NULL },
    { "doTranslateWithDouble:withDouble:", "doTranslate", "V", 0x14, NULL, NULL },
    { "translateMatrixWithDoubleArray:withDouble:withDouble:", "translateMatrix", "V", 0x4, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "rotateWithDouble:", "rotate", "V", 0x12, NULL, NULL },
    { "rotateMatrixWithDoubleArray:withDouble:", "rotateMatrix", "V", 0x1c, NULL, NULL },
    { "dilateWithDouble:", "dilate", "V", 0x14, NULL, NULL },
    { "doDilateWithDouble:", "doDilate", "V", 0x14, NULL, NULL },
    { "updateDegenerates", NULL, "V", 0x14, NULL, NULL },
    { "setEigenvectorsWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setEigenvectors", "V", 0x11, NULL, NULL },
    { "setFirstEigenvectorWithDoubleArray:", "setFirstEigenvector", "V", 0x4, NULL, NULL },
    { "setEigenvectors", NULL, "V", 0x14, NULL, NULL },
    { "setParabolicEigenvectors", NULL, "V", 0x12, NULL, NULL },
    { "makePathParametersInvalid", NULL, "V", 0x2, NULL, NULL },
    { "classifyConic", NULL, "V", 0x4, NULL, NULL },
    { "classifyConicWithBoolean:", "classifyConic", "V", 0x1, NULL, NULL },
    { "isDetSzero", NULL, "Z", 0x2, NULL, NULL },
    { "classifyMidpointConicWithBoolean:", "classifyMidpointConic", "V", 0x12, NULL, NULL },
    { "singlePoint", NULL, "V", 0x14, NULL, NULL },
    { "intersectingLinesWithDoubleArray:", "intersectingLines", "V", 0x12, NULL, NULL },
    { "ellipseWithDoubleArray:", "ellipse", "V", 0x12, NULL, NULL },
    { "hyperbolaWithDoubleArray:", "hyperbola", "V", 0x12, NULL, NULL },
    { "classifyParabolicConicWithBoolean:", "classifyParabolicConic", "V", 0x12, NULL, NULL },
    { "doubleLine", NULL, "V", 0x12, NULL, NULL },
    { "enforceDoubleLine", NULL, "V", 0x11, NULL, NULL },
    { "handleSzero", NULL, "V", 0x12, NULL, NULL },
    { "parallelLinesWithDoubleArray:", "parallelLines", "V", 0x14, NULL, NULL },
    { "setStartPointsForLines", NULL, "V", 0x2, NULL, NULL },
    { "setStartPointsForDoubleLine", NULL, "V", 0x2, NULL, NULL },
    { "parabola", NULL, "V", 0x12, NULL, NULL },
    { "detWithDoubleArray:", "det", "D", 0x9, NULL, NULL },
    { "hasPositiveEigenvectorOrientation", NULL, "Z", 0x14, NULL, NULL },
    { "setPositiveEigenvectorOrientationWithBoolean:", "setPositiveEigenvectorOrientation", "V", 0x14, NULL, NULL },
    { "isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:withDouble:", "isIntersectionPointIncident", "Z", 0x1, NULL, NULL },
    { "isIntersectionPointIncidentWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "isIntersectionPointIncident", "Z", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelGeosGeoPoint:", "evaluate", "D", 0x11, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelGeosGeoVec2D:", "evaluate", "D", 0x11, NULL, NULL },
    { "evaluateWithDouble:withDouble:", "evaluate", "D", 0x11, NULL, NULL },
    { "polarLineWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoLine:", "polarLine", "V", 0x11, NULL, NULL },
    { "polarPointWithOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoPoint:", "polarPoint", "V", 0x11, NULL, NULL },
    { "polarPointWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelGeosGeoPoint:", "polarPoint", "V", 0x11, NULL, NULL },
    { "polarPointWithDouble:withDouble:withDouble:withOrgGeogebraCommonKernelGeosGeoPoint:", "polarPoint", "V", 0x11, NULL, NULL },
    { "polarLineWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelGeosGeoLine:", "polarLine", "V", 0x11, NULL, NULL },
    { "diameterLineWithOrgGeogebraCommonKernelGeosGeoVector:withOrgGeogebraCommonKernelGeosGeoLine:", "diameterLine", "V", 0x11, NULL, NULL },
    { "diameterLineWithDouble:withDouble:withOrgGeogebraCommonKernelGeosGeoLine:", "diameterLine", "V", 0x11, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getSpecificEquation", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoConic", NULL, "Z", 0x11, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "setMidpointWithDoubleArray:", "setMidpoint", "V", 0x4, NULL, NULL },
    { "setMidpointWithDouble:withDouble:", "setMidpoint", "V", 0x4, NULL, NULL },
    { "getAssignmentOperator", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "evaluateInSignificantPoint", NULL, "D", 0x1, NULL, NULL },
    { "pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChangedForRegion", "V", 0x1, NULL, NULL },
    { "moveBackToRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelRegionParameters:", "moveBackToRegion", "V", 0x4, NULL, NULL },
    { "regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x1, NULL, NULL },
    { "toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "toGeoCurveCartesian", "V", 0x1, NULL, NULL },
    { "toGeoImplicitPolyWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "toGeoImplicitPoly", "V", 0x1, NULL, NULL },
    { "keepsType", NULL, "Z", 0x1, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "calcArea", NULL, "V", 0x1, NULL, NULL },
    { "getArea", NULL, "D", 0x1, NULL, NULL },
    { "setIsEndOfQuadricWithBoolean:", "setIsEndOfQuadric", "V", 0x1, NULL, NULL },
    { "isEndOfQuadric", NULL, "Z", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "setLastHitTypeWithOrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum:", "setLastHitType", "V", 0x11, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "getTypeStringForAlgebraView", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:", "getNormalProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointWithDouble:withDouble:", "getPoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "getProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMetasLength", NULL, "I", 0x1, NULL, NULL },
    { "getMetas", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "addMetaWithOrgGeogebraCommonKernelGeosGeoElement:", "addMeta", "V", 0x1, NULL, NULL },
    { "removeMetaWithOrgGeogebraCommonKernelGeosGeoElement:", "removeMeta", "V", 0x1, NULL, NULL },
    { "getMidpointND", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_COEFFICIENT_SIZE_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernelNDGeoConicND_MAX_COEFFICIENT_SIZE },
    { "MIN_COEFFICIENT_SIZE_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernelNDGeoConicND_MIN_COEFFICIENT_SIZE },
    { "EQUATION_IMPLICIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_IMPLICIT },
    { "EQUATION_EXPLICIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_EXPLICIT },
    { "EQUATION_SPECIFIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_SPECIFIC },
    { "vars_", NULL, 0xc, "[Ljava.lang.String;", &OrgGeogebraCommonKernelKernelNDGeoConicND_vars_, NULL,  },
    { "varsLateX_", NULL, 0xc, "[Ljava.lang.String;", &OrgGeogebraCommonKernelKernelNDGeoConicND_varsLateX_, NULL,  },
    { "varsCAS_", NULL, 0xc, "[Ljava.lang.String;", &OrgGeogebraCommonKernelKernelNDGeoConicND_varsCAS_, NULL,  },
    { "KEEP_LEADING_SIGN_", NULL, 0xc, "Z", &OrgGeogebraCommonKernelKernelNDGeoConicND_KEEP_LEADING_SIGN_, NULL,  },
    { "singlePoint__", "singlePoint", 0x4, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "lines_", NULL, 0x1, "[Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "eigenvec_", NULL, 0x1, "[Lorg.geogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "eigenvecX_", NULL, 0x4, "D", NULL, NULL,  },
    { "eigenvecY_", NULL, 0x4, "D", NULL, NULL,  },
    { "transform_", NULL, 0x4, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "oldTransform_", NULL, 0x4, "Lorg.geogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "b_", NULL, 0x1, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "startPoints_", NULL, 0x4, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "pointsOnConic_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "detS_", NULL, 0x82, "D", NULL, NULL,  },
    { "length_", NULL, 0x82, "D", NULL, NULL,  },
    { "temp_", NULL, 0x82, "D", NULL, NULL,  },
    { "temp1_", NULL, 0x82, "D", NULL, NULL,  },
    { "temp2_", NULL, 0x82, "D", NULL, NULL,  },
    { "nx_", NULL, 0x82, "D", NULL, NULL,  },
    { "ny_", NULL, 0x82, "D", NULL, NULL,  },
    { "lambda_", NULL, 0x82, "D", NULL, NULL,  },
    { "index_", NULL, 0x2, "I", NULL, NULL,  },
    { "c_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "errDetS_", NULL, 0x1, "D", NULL, NULL,  },
    { "coeffs_", NULL, 0x2, "[D", NULL, NULL,  },
    { "eigenvectorsSetOnLoad_", NULL, 0x2, "Z", NULL, NULL,  },
    { "polarMatrix_", NULL, 0x2, "Lorg.geogebra.common.util.GgbMat;", NULL, NULL,  },
    { "area_", NULL, 0x2, "D", NULL, NULL,  },
    { "isEndOfQuadric__", "isEndOfQuadric", 0x2, "Z", NULL, NULL,  },
    { "lastHitType_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", NULL, NULL,  },
    { "labelPosition_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "labelParameter_", NULL, 0x2, "Lorg.geogebra.common.kernel.PathParameter;", NULL, NULL,  },
    { "metas_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelKernelNDGeoConicND = { 2, "GeoConicND", "org.geogebra.common.kernel.kernelND", NULL, 0x401, 173, methods, 39, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelKernelNDGeoConicND;
}

@end

void OrgGeogebraCommonKernelKernelNDGeoConicND_initWithOrgGeogebraCommonKernelConstruction_withInt_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelConstruction *c, jint dimension) {
  (void) OrgGeogebraCommonKernelKernelNDGeoConicND_initWithOrgGeogebraCommonKernelConstruction_withInt_withBoolean_(self, c, dimension, NO);
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_initWithOrgGeogebraCommonKernelConstruction_withInt_withBoolean_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelConstruction *c, jint dimension, jboolean isIntersection) {
  (void) OrgGeogebraCommonKernelKernelNDGeoQuadricND_initWithOrgGeogebraCommonKernelConstruction_withInt_withBoolean_(self, c, dimension, isIntersection);
  self->eigenvec_ = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_(self->kernel_, 1, 0), new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_(self->kernel_, 0, 1) } count:2 type:OrgGeogebraCommonKernelGeosGeoVec2D_class_()];
  self->b_ = new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
  self->index_ = 0;
  self->c_ = new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
  self->errDetS_ = OrgGeogebraCommonKernelKernel_STANDARD_PRECISION;
  self->coeffs_ = [IOSDoubleArray newArrayWithLength:6];
  self->eigenvectorsSetOnLoad_ = NO;
  self->isEndOfQuadric__ = NO;
  self->lastHitType_ = OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_NONE();
  self->toStringMode_ = OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_IMPLICIT;
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setCircleWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelGeosGeoPoint *M, OrgGeogebraCommonKernelGeosGeoPoint *P) {
  self->defined_ = ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(M)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) isDefined] && ![P isInfinite]);
  if (!self->defined_) {
    return;
  }
  if ([M isInfinite]) {
    IOSDoubleArray *coords = [IOSDoubleArray newArrayWithLength:3];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getCoordsWithDoubleArray:coords];
    [self setMidpointWithDoubleArray:coords];
    self->eigenvecX_ = -M->y_;
    self->eigenvecY_ = M->x_;
    OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(self);
    *IOSDoubleArray_GetRef(nil_chk(self->halfAxes_), 0) = JavaLangDouble_POSITIVE_INFINITY;
    *IOSDoubleArray_GetRef(self->halfAxes_, 1) = JavaLangDouble_POSITIVE_INFINITY;
    *IOSDoubleArray_GetRef(nil_chk(self->mu_), 0) = 0.0;
    OrgGeogebraCommonKernelKernelNDGeoConicND_parallelLinesWithDoubleArray_(self, self->mu_);
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 1)))->x_ = JavaLangDouble_NaN;
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->y_ = JavaLangDouble_NaN;
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->z_ = JavaLangDouble_NaN;
    *IOSDoubleArray_GetRef(nil_chk(self->matrix_), 0) = 0.0;
    *IOSDoubleArray_GetRef(self->matrix_, 1) = 0.0;
    *IOSDoubleArray_GetRef(self->matrix_, 2) = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->z_;
    *IOSDoubleArray_GetRef(self->matrix_, 3) = 0.0;
    *IOSDoubleArray_GetRef(self->matrix_, 4) = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->x_ / 2.0;
    *IOSDoubleArray_GetRef(self->matrix_, 5) = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->y_ / 2.0;
  }
  else {
    [self setCircleMatrixWithOrgGeogebraCommonKernelGeosGeoPoint:M withDouble:[M distanceWithOrgGeogebraCommonKernelGeosGeoPoint:P]];
  }
  OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
}

IOSDoubleArray *OrgGeogebraCommonKernelKernelNDGeoConicND_getPerpendicularParamsWithDouble_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble abspx, jdouble abspy) {
  jdouble ha = IOSDoubleArray_Get(nil_chk(self->halfAxes_), 0);
  jdouble hb = IOSDoubleArray_Get(self->halfAxes_, 1);
  jdouble bpy = hb * abspy;
  IOSDoubleArray *roots = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0, 0, 0 } count:4];
  IOSDoubleArray *eqn;
  if (self->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE) {
    jdouble hc_2 = ha * ha - hb * hb;
    eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ bpy * bpy, 2 * bpy * hc_2, -bpy * bpy + hc_2 * hc_2 - ha * ha * abspx * abspx, -2 * bpy * hc_2, -hc_2 * hc_2 } count:5];
  }
  else {
    jdouble hc_2 = ha * ha + hb * hb;
    eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ bpy * bpy, -2 * bpy * hc_2, bpy * bpy + hc_2 * hc_2 - ha * ha * abspx * abspx, -2 * bpy * hc_2, hc_2 * hc_2 } count:5];
  }
  [((OrgGeogebraCommonKernelEquationSolver *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) getEquationSolver])) solveQuarticWithDoubleArray:eqn withDoubleArray:roots withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION];
  return roots;
}

jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_compatibleTypeWithInt_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jint t) {
  if (self->type_ == t) return YES;
  if (t == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY || t == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT) return YES;
  return NO;
}

jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, jdouble eps) {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isDefined]) return NO;
  return OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(self, [P getCoordsInD2], eps);
}

jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isOnFullConicWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelMatrixCoords *P, jdouble eps) {
  {
    OrgGeogebraCommonKernelMatrixCoords *singlePointCoords;
    switch (self->type_) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      singlePointCoords = new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->singlePoint__))->x_, self->singlePoint__->y_, self->singlePoint__->z_);
      return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) distanceWithOrgGeogebraCommonKernelMatrixCoords:singlePointCoords] < eps;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      return [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 0))) isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords:P withDouble:eps] || [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1))) isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords:P withDouble:eps];
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
      return [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 0))) isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords:P withDouble:eps];
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
      return NO;
    }
  }
  jdouble Px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX];
  jdouble Py = [P getY];
  jdouble Pz = [P getZ];
  if (self->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE) {
    OrgGeogebraCommonKernelKernelNDGeoConicND_translateByCenterWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
  }
  else {
    OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
  }
  jdouble px = [P getX] / [P getZ];
  jdouble py = [P getY] / [P getZ];
  jboolean result = NO;
  {
    jdouble radius2;
    switch (self->type_) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      radius2 = IOSDoubleArray_Get(nil_chk(self->halfAxes_), 0) * IOSDoubleArray_Get(self->halfAxes_, 0);
      result = OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(px * px / radius2 + py * py / radius2, 1, eps);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      result = OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(px * px / (IOSDoubleArray_Get(nil_chk(self->halfAxes_), 0) * IOSDoubleArray_Get(self->halfAxes_, 0)) + py * py / (IOSDoubleArray_Get(self->halfAxes_, 1) * IOSDoubleArray_Get(self->halfAxes_, 1)), 1, eps);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      result = OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(px * px / (IOSDoubleArray_Get(nil_chk(self->halfAxes_), 0) * IOSDoubleArray_Get(self->halfAxes_, 0)), 1 + py * py / (IOSDoubleArray_Get(self->halfAxes_, 1) * IOSDoubleArray_Get(self->halfAxes_, 1)), eps);
      break;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      result = OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(py * py, 2 * self->p_ * px, eps);
      break;
    }
  }
  [P setXWithDouble:Px];
  [P setYWithDouble:Py];
  [P setZWithDouble:Pz];
  return result;
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_coordsEVtoRWWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelMatrixCoords *P) {
  jdouble px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX];
  jdouble py = [P getY];
  OrgGeogebraCommonKernelMatrixCoords *eigenvec0 = [self getEigenvecWithInt:0];
  OrgGeogebraCommonKernelMatrixCoords *eigenvec1 = [self getEigenvecWithInt:1];
  [P setXWithDouble:px * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(eigenvec0)) getX] + py * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(eigenvec1)) getX]];
  [P setYWithDouble:px * [eigenvec0 getY] + py * [eigenvec1 getY]];
  OrgGeogebraCommonKernelMatrixCoords *mid = [self getMidpoint];
  [P setXWithDouble:[P getX] + [P getZ] * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(mid)) getX]];
  [P setYWithDouble:[P getY] + [P getZ] * [mid getY]];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_coordsRWtoEVWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelMatrixCoords *P) {
  OrgGeogebraCommonKernelMatrixCoords *mid = [self getMidpoint];
  [P setXWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] - [P getZ] * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(mid)) getX]];
  [P setYWithDouble:[P getY] - [P getZ] * [mid getY]];
  jdouble px = [P getX];
  jdouble py = [P getY];
  OrgGeogebraCommonKernelMatrixCoords *eigenvec0 = [self getEigenvecWithInt:0];
  OrgGeogebraCommonKernelMatrixCoords *eigenvec1 = [self getEigenvecWithInt:1];
  [P setXWithDouble:px * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(eigenvec0)) getX] + py * [eigenvec0 getY]];
  [P setYWithDouble:px * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(eigenvec1)) getX] + py * [eigenvec1 getY]];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_translateByCenterWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelMatrixCoords *P) {
  OrgGeogebraCommonKernelMatrixCoords *mid = [self getMidpoint];
  [P setXWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] - [P getZ] * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(mid)) getX]];
  [P setYWithDouble:[P getY] - [P getZ] * [mid getY]];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setLinesWithOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelKernelNDGeoConicND *co) {
  if (((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(co))->lines_ != nil) {
    (void) OrgGeogebraCommonKernelKernelNDGeoConicND_getLines(self);
    for (jint i = 0; i < 2; i++) {
      [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(co->lines_, i)];
      if (((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(co->lines_, i)))->startPoint_ != nil) {
        [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, i))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(co->lines_, i)))->startPoint_ copy__]];
      }
      if (((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(co->lines_, i)))->endPoint_ != nil) {
        [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, i))) setEndPointWithOrgGeogebraCommonKernelGeosGeoPoint:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(co->lines_, i)))->endPoint_ copy__]];
      }
    }
  }
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setToStringModeWithInt_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jint mode) {
  switch (mode) {
    case OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_SPECIFIC:
    self->toStringMode_ = OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_SPECIFIC;
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_EXPLICIT:
    self->toStringMode_ = OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_EXPLICIT;
    break;
    default:
    self->toStringMode_ = OrgGeogebraCommonKernelKernelNDGeoConicND_EQUATION_IMPLICIT;
  }
}

jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isSpecificPossible(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  switch (self->type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    return YES;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    return (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(self->matrix_), 3)));
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    return OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(self->matrix_), 0)) || OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(self->matrix_, 1));
    default:
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    return NO;
  }
}

jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isExplicitPossible(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  if (self->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE) return NO;
  return !OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(self->matrix_), 5)) && OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(self->matrix_, 3)) && OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(self->matrix_, 1));
}

jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_checkDefined(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  jboolean allZero = YES;
  jdouble maxCoeffAbs = 0;
  for (jint i = 0; i < 6; i++) {
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(self->matrix_), i)) || JavaLangDouble_isInfiniteWithDouble_(IOSDoubleArray_Get(self->matrix_, i))) {
      return NO;
    }
    jdouble abs = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->matrix_, i));
    if (abs > OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) allZero = NO;
    if ((i == 0 || i == 1 || i == 3) && maxCoeffAbs < abs) {
      maxCoeffAbs = abs;
    }
  }
  if (allZero) {
    return NO;
  }
  if (maxCoeffAbs == 0) {
    return YES;
  }
  jdouble factor = 1.0;
  if (maxCoeffAbs < OrgGeogebraCommonKernelKernelNDGeoConicND_MIN_COEFFICIENT_SIZE) {
    factor = 2;
    while (maxCoeffAbs * factor < OrgGeogebraCommonKernelKernelNDGeoConicND_MIN_COEFFICIENT_SIZE) factor *= 2;
  }
  else if (maxCoeffAbs > OrgGeogebraCommonKernelKernelNDGeoConicND_MAX_COEFFICIENT_SIZE) {
    factor = 0.5;
    while (maxCoeffAbs * factor > OrgGeogebraCommonKernelKernelNDGeoConicND_MAX_COEFFICIENT_SIZE) factor *= 0.5;
  }
  if (factor != 1.0 && !JavaLangDouble_isInfiniteWithDouble_(factor) && !JavaLangDouble_isNaNWithDouble_(factor)) {
    maxCoeffAbs *= factor;
    for (jint i = 0; i < 6; i++) {
      *IOSDoubleArray_GetRef(nil_chk(self->matrix_), i) *= factor;
    }
  }
  return YES;
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setCoeffsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble a, jdouble b, jdouble c, jdouble d, jdouble e, jdouble f) {
  *IOSDoubleArray_GetRef(nil_chk(self->matrix_), 0) = a;
  *IOSDoubleArray_GetRef(self->matrix_, 1) = c;
  *IOSDoubleArray_GetRef(self->matrix_, 2) = f;
  *IOSDoubleArray_GetRef(self->matrix_, 3) = b / 2.0;
  *IOSDoubleArray_GetRef(self->matrix_, 4) = d / 2.0;
  *IOSDoubleArray_GetRef(self->matrix_, 5) = e / 2.0;
  [self classifyConic];
}

IOSObjectArray *OrgGeogebraCommonKernelKernelNDGeoConicND_getLines(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  if (self->lines_ == nil) {
    self->lines_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoLine_class_()];
    (void) IOSObjectArray_Set(self->lines_, 0, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
    (void) IOSObjectArray_Set(self->lines_, 1, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  }
  return self->lines_;
}

id<OrgGeogebraCommonAwtGAffineTransform> OrgGeogebraCommonKernelKernelNDGeoConicND_getAffineTransform(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  if (self->transform_ == nil) self->transform_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  return self->transform_;
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  id<OrgGeogebraCommonAwtGAffineTransform> at = OrgGeogebraCommonKernelKernelNDGeoConicND_getAffineTransform(self);
  [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(at)) setTransformWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) getX] withDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) getY] withDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getX] withDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getY] withDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->b_)) getX] withDouble:[self->b_ getY]];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setCircleWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoSegment_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, OrgGeogebraCommonKernelGeosGeoPoint *M, OrgGeogebraCommonKernelGeosGeoSegment *geoSegment) {
  self->defined_ = ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(M)) isDefined] && ![M isInfinite] && [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(geoSegment)) isDefined]);
  jdouble r = [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(geoSegment)) getLength];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(r)) {
    r = 0;
  }
  else if (r < 0) {
    self->defined_ = NO;
  }
  if (self->defined_) {
    [self setCircleMatrixWithOrgGeogebraCommonKernelGeosGeoPoint:M withDouble:r];
    OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
  }
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_doTranslateWithDouble_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble vx, jdouble vy) {
  [self translateMatrixWithDoubleArray:self->matrix_ withDouble:vx withDouble:vy];
  [self setMidpointWithDoubleArray:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getMidpoint])) addWithOrgGeogebraCommonKernelMatrixCoords:new_OrgGeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray newArrayWithDoubles:(jdouble[]){ vx, vy, 0 } count:3])])) get]];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_rotateWithDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble phi) {
  OrgGeogebraCommonKernelKernelNDGeoConicND_rotateMatrixWithDoubleArray_withDouble_(self->matrix_, phi);
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) rotateWithDouble:phi];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) rotateWithDouble:phi];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->b_)) rotateWithDouble:phi];
  [self setMidpointWithDoubleArray:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ [self->b_ getX], [self->b_ getY] } count:2]];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_rotateMatrixWithDoubleArray_withDouble_(IOSDoubleArray *matrix, jdouble phi) {
  OrgGeogebraCommonKernelKernelNDGeoConicND_initialize();
  jdouble sum = IOSDoubleArray_Get(nil_chk(matrix), 0) + IOSDoubleArray_Get(matrix, 1);
  jdouble diff = IOSDoubleArray_Get(matrix, 0) - IOSDoubleArray_Get(matrix, 1);
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble cos2 = (cos + sin) * (cos - sin);
  jdouble sin2 = 2.0 * cos * sin;
  jdouble temp = diff * cos2 - 2.0 * IOSDoubleArray_Get(matrix, 3) * sin2;
  jdouble A0 = (sum + temp) / 2.0;
  jdouble A1 = (sum - temp) / 2.0;
  jdouble A3 = IOSDoubleArray_Get(matrix, 3) * cos2 + diff * cos * sin;
  jdouble A4 = IOSDoubleArray_Get(matrix, 4) * cos - IOSDoubleArray_Get(matrix, 5) * sin;
  *IOSDoubleArray_GetRef(matrix, 5) = IOSDoubleArray_Get(matrix, 5) * cos + IOSDoubleArray_Get(matrix, 4) * sin;
  *IOSDoubleArray_GetRef(matrix, 0) = A0;
  *IOSDoubleArray_GetRef(matrix, 1) = A1;
  *IOSDoubleArray_GetRef(matrix, 3) = A3;
  *IOSDoubleArray_GetRef(matrix, 4) = A4;
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_doDilateWithDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble factor) {
  jdouble r = 1.0 / factor;
  jdouble r2 = r * r;
  *IOSDoubleArray_GetRef(nil_chk(self->matrix_), 0) *= r2;
  *IOSDoubleArray_GetRef(self->matrix_, 1) *= r2;
  *IOSDoubleArray_GetRef(self->matrix_, 3) *= r2;
  *IOSDoubleArray_GetRef(self->matrix_, 4) *= r;
  *IOSDoubleArray_GetRef(self->matrix_, 5) *= r;
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_updateDegenerates(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  switch (self->type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    OrgGeogebraCommonKernelKernelNDGeoConicND_singlePoint(self);
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    OrgGeogebraCommonKernelKernelNDGeoConicND_intersectingLinesWithDoubleArray_(self, self->mu_);
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    OrgGeogebraCommonKernelKernelNDGeoConicND_doubleLine(self);
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    OrgGeogebraCommonKernelKernelNDGeoConicND_parallelLinesWithDoubleArray_(self, self->mu_);
    break;
  }
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  self->length_ = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(self->eigenvecX_, self->eigenvecY_);
  if (self->length_ != 1.0) {
    self->eigenvecX_ = self->eigenvecX_ / self->length_;
    self->eigenvecY_ = self->eigenvecY_ / self->length_;
  }
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
    if ([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) getX] * self->eigenvecX_ < -[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) getY] * self->eigenvecY_) {
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) setXWithDouble:-self->eigenvecX_];
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) setYWithDouble:-self->eigenvecY_];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) setXWithDouble:self->eigenvecX_];
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) setYWithDouble:self->eigenvecY_];
    }
    if ([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getY] * self->eigenvecX_ < [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getX] * self->eigenvecY_) {
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setXWithDouble:self->eigenvecY_];
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setYWithDouble:-self->eigenvecX_];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setXWithDouble:-self->eigenvecY_];
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setYWithDouble:self->eigenvecX_];
    }
  }
  else if (!self->eigenvectorsSetOnLoad_) {
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) setXWithDouble:self->eigenvecX_];
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) setYWithDouble:self->eigenvecY_];
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setXWithDouble:-self->eigenvecY_];
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setYWithDouble:self->eigenvecX_];
  }
  self->eigenvectorsSetOnLoad_ = NO;
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setParabolicEigenvectors(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  self->length_ = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(self->eigenvecX_, self->eigenvecY_);
  if (self->length_ != 1.0) {
    self->eigenvecX_ = self->eigenvecX_ / self->length_;
    self->eigenvecY_ = self->eigenvecY_ / self->length_;
  }
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) setXWithDouble:self->eigenvecX_];
  [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) setYWithDouble:self->eigenvecY_];
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
    if ([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getY] * self->eigenvecX_ < [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getX] * self->eigenvecY_) {
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setXWithDouble:self->eigenvecY_];
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setYWithDouble:-self->eigenvecX_];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setXWithDouble:-self->eigenvecY_];
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setYWithDouble:self->eigenvecX_];
    }
  }
  else if (!self->eigenvectorsSetOnLoad_) {
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setXWithDouble:-self->eigenvecY_];
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setYWithDouble:self->eigenvecX_];
  }
  self->eigenvectorsSetOnLoad_ = NO;
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_makePathParametersInvalid(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  if (self->pointsOnConic_ == nil) return;
  (void) OrgGeogebraCommonKernelKernelNDGeoConicND_getAffineTransform(self);
  if (self->oldTransform_ == nil) self->oldTransform_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  jboolean eigenVectorsSame = OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->transform_)) getScaleX], [((id<OrgGeogebraCommonAwtGAffineTransform>) nil_chk(self->oldTransform_)) getScaleX], OrgGeogebraCommonKernelKernel_MIN_PRECISION) || OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->transform_ getScaleY], [self->oldTransform_ getScaleY], OrgGeogebraCommonKernelKernel_MIN_PRECISION) || OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->transform_ getShearX], [self->oldTransform_ getShearX], OrgGeogebraCommonKernelKernel_MIN_PRECISION) || OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->transform_ getShearY], [self->oldTransform_ getShearY], OrgGeogebraCommonKernelKernel_MIN_PRECISION);
  if (!eigenVectorsSame) {
    [self->oldTransform_ setTransformWithOrgGeogebraCommonAwtGAffineTransform:self->transform_];
    jint size = [((JavaUtilArrayList *) nil_chk(self->pointsOnConic_)) size];
    for (jint i = 0; i < size; i++) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = [self->pointsOnConic_ getWithInt:i];
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getPath] == self) {
        [((OrgGeogebraCommonKernelPathParameter *) nil_chk([point getPathParameter])) setTWithDouble:JavaLangDouble_NaN];
      }
    }
  }
}

jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_isDetSzero(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  jdouble maxAbs = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(self->matrix_), 0));
  jdouble abs = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->matrix_, 1));
  if (abs > maxAbs) maxAbs = abs;
  abs = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->matrix_, 3));
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 1), IOSDoubleArray_Get(self->matrix_, 3) * IOSDoubleArray_Get(self->matrix_, 3), self->errDetS_);
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_classifyMidpointConicWithBoolean_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jboolean degenerate) {
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(self->matrix_), 3))) {
    *IOSDoubleArray_GetRef(nil_chk(self->eigenval_), 0) = IOSDoubleArray_Get(self->matrix_, 0);
    *IOSDoubleArray_GetRef(self->eigenval_, 1) = IOSDoubleArray_Get(self->matrix_, 1);
    self->eigenvecX_ = 1.0;
    self->eigenvecY_ = 0.0;
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(self->eigenval_), 0) = self->detS_;
    *IOSDoubleArray_GetRef(self->eigenval_, 1) = -(IOSDoubleArray_Get(self->matrix_, 0) + IOSDoubleArray_Get(self->matrix_, 1));
    *IOSDoubleArray_GetRef(self->eigenval_, 2) = 1.0;
    jint nRoots = [((OrgGeogebraCommonKernelEquationSolver *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) getEquationSolver])) solveQuadraticWithDoubleArray:self->eigenval_ withDoubleArray:self->eigenval_ withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION];
    if (nRoots == 1) {
      *IOSDoubleArray_GetRef(self->eigenval_, 1) = IOSDoubleArray_Get(self->eigenval_, 0);
    }
    self->eigenvecX_ = -IOSDoubleArray_Get(self->matrix_, 3);
    self->eigenvecY_ = -IOSDoubleArray_Get(self->eigenval_, 0) + IOSDoubleArray_Get(self->matrix_, 0);
  }
  [self setMidpointWithDoubleArray:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ (IOSDoubleArray_Get(self->matrix_, 3) * IOSDoubleArray_Get(self->matrix_, 5) - IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 4)) / self->detS_, (IOSDoubleArray_Get(self->matrix_, 3) * IOSDoubleArray_Get(self->matrix_, 4) - IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 5)) / self->detS_ } count:2]];
  jdouble beta = IOSDoubleArray_Get(self->matrix_, 4) * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->b_)) getX] + IOSDoubleArray_Get(self->matrix_, 5) * [self->b_ getY] + IOSDoubleArray_Get(self->matrix_, 2);
  if (degenerate || OrgGeogebraCommonKernelKernel_isZeroWithDouble_(beta)) {
    OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(self);
    *IOSDoubleArray_GetRef(nil_chk(self->mu_), 0) = IOSDoubleArray_Get(nil_chk(self->eigenval_), 0) / IOSDoubleArray_Get(self->eigenval_, 1);
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(self->mu_, 0))) {
      *IOSDoubleArray_GetRef(self->mu_, 0) = 0.0;
      OrgGeogebraCommonKernelKernelNDGeoConicND_intersectingLinesWithDoubleArray_(self, self->mu_);
    }
    else if (IOSDoubleArray_Get(self->mu_, 0) < 0.0) {
      *IOSDoubleArray_GetRef(self->mu_, 0) = JavaLangMath_sqrtWithDouble_(-IOSDoubleArray_Get(self->mu_, 0));
      OrgGeogebraCommonKernelKernelNDGeoConicND_intersectingLinesWithDoubleArray_(self, self->mu_);
    }
    else {
      OrgGeogebraCommonKernelKernelNDGeoConicND_singlePoint(self);
    }
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(self->mu_), 0) = -IOSDoubleArray_Get(nil_chk(self->eigenval_), 0) / beta;
    *IOSDoubleArray_GetRef(self->mu_, 1) = -IOSDoubleArray_Get(self->eigenval_, 1) / beta;
    if (self->detS_ < 0) {
      OrgGeogebraCommonKernelKernelNDGeoConicND_hyperbolaWithDoubleArray_(self, self->mu_);
    }
    else {
      if (IOSDoubleArray_Get(self->mu_, 0) > 0 && IOSDoubleArray_Get(self->mu_, 1) > 0) {
        OrgGeogebraCommonKernelKernelNDGeoConicND_ellipseWithDoubleArray_(self, self->mu_);
      }
      else {
        [self empty];
      }
    }
  }
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_singlePoint(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  self->type_ = OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT;
  if (self->singlePoint__ == nil) self->singlePoint__ = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->singlePoint__)) setCoordsWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->b_)) getX] withDouble:[self->b_ getY] withDouble:1.0];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_intersectingLinesWithDoubleArray_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, IOSDoubleArray *mu1) {
  self->type_ = OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES;
  (void) OrgGeogebraCommonKernelKernelNDGeoConicND_getLines(self);
  self->temp1_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) getX] * IOSDoubleArray_Get(nil_chk(mu1), 0);
  self->temp2_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) getY] * IOSDoubleArray_Get(mu1, 0);
  self->nx_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getX] - self->temp1_;
  self->ny_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getY] - self->temp2_;
  if (JavaLangMath_absWithDouble_(self->nx_ * ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 0)))->x_ + self->ny_ * ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->y_) < JavaLangMath_absWithDouble_(self->nx_ * ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->x_ + self->ny_ * ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->y_)) self->index_ = 1;
  else self->index_ = 0;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, self->index_)))->x_ = self->nx_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, self->index_)))->y_ = self->ny_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, self->index_)))->z_ = -(self->nx_ * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->b_)) getX] + self->ny_ * [self->b_ getY]);
  self->nx_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getX] + self->temp1_;
  self->ny_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getY] + self->temp2_;
  self->index_ = 1 - self->index_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, self->index_)))->x_ = self->nx_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, self->index_)))->y_ = self->ny_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, self->index_)))->z_ = -(self->nx_ * [self->b_ getX] + self->ny_ * [self->b_ getY]);
  OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForLines(self);
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_ellipseWithDoubleArray_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, IOSDoubleArray *mu1) {
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(mu1), 0) / IOSDoubleArray_Get(mu1, 1), 1.0)) {
    self->eigenvecX_ = 1;
    self->eigenvecY_ = 0;
    OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(self);
    self->type_ = OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE;
    *IOSDoubleArray_GetRef(nil_chk(self->halfAxes_), 0) = JavaLangMath_sqrtWithDouble_(1.0 / IOSDoubleArray_Get(mu1, 0));
    *IOSDoubleArray_GetRef(self->halfAxes_, 1) = IOSDoubleArray_Get(self->halfAxes_, 0);
    self->linearEccentricity_ = 0.0;
    self->eccentricity_ = 0.0;
  }
  else {
    if (IOSDoubleArray_Get(mu1, 0) > IOSDoubleArray_Get(mu1, 1)) {
      self->temp_ = IOSDoubleArray_Get(mu1, 0);
      *IOSDoubleArray_GetRef(mu1, 0) = IOSDoubleArray_Get(mu1, 1);
      *IOSDoubleArray_GetRef(mu1, 1) = self->temp_;
      self->temp_ = self->eigenvecX_;
      self->eigenvecX_ = -self->eigenvecY_;
      self->eigenvecY_ = self->temp_;
    }
    OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(self);
    self->type_ = OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE;
    *IOSDoubleArray_GetRef(mu1, 0) = 1.0 / IOSDoubleArray_Get(mu1, 0);
    *IOSDoubleArray_GetRef(mu1, 1) = 1.0 / IOSDoubleArray_Get(mu1, 1);
    *IOSDoubleArray_GetRef(nil_chk(self->halfAxes_), 0) = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(mu1, 0));
    *IOSDoubleArray_GetRef(self->halfAxes_, 1) = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(mu1, 1));
    self->linearEccentricity_ = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(mu1, 0) - IOSDoubleArray_Get(mu1, 1));
    self->eccentricity_ = self->linearEccentricity_ / JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(mu1, 0));
  }
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_hyperbolaWithDoubleArray_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, IOSDoubleArray *mu1) {
  self->type_ = OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA;
  if (IOSDoubleArray_Get(nil_chk(mu1), 0) < 0) {
    self->temp_ = IOSDoubleArray_Get(mu1, 0);
    *IOSDoubleArray_GetRef(mu1, 0) = IOSDoubleArray_Get(mu1, 1);
    *IOSDoubleArray_GetRef(mu1, 1) = self->temp_;
    self->temp_ = self->eigenvecX_;
    self->eigenvecX_ = -self->eigenvecY_;
    self->eigenvecY_ = self->temp_;
  }
  OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(self);
  *IOSDoubleArray_GetRef(mu1, 0) = 1.0 / IOSDoubleArray_Get(mu1, 0);
  *IOSDoubleArray_GetRef(mu1, 1) = -1.0 / IOSDoubleArray_Get(mu1, 1);
  *IOSDoubleArray_GetRef(nil_chk(self->halfAxes_), 0) = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(mu1, 0));
  *IOSDoubleArray_GetRef(self->halfAxes_, 1) = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(mu1, 1));
  self->linearEccentricity_ = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(mu1, 0) + IOSDoubleArray_Get(mu1, 1));
  self->eccentricity_ = self->linearEccentricity_ / JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(mu1, 0));
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_classifyParabolicConicWithBoolean_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jboolean degenerate) {
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(self->matrix_), 3))) {
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(self->matrix_, 0))) {
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(self->matrix_, 1))) {
        OrgGeogebraCommonKernelKernelNDGeoConicND_handleSzero(self);
        return;
      }
      self->lambda_ = IOSDoubleArray_Get(self->matrix_, 1);
      self->eigenvecX_ = 1.0;
      self->eigenvecY_ = 0.0;
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->c_)) setXWithDouble:IOSDoubleArray_Get(self->matrix_, 4)];
      [self->c_ setYWithDouble:IOSDoubleArray_Get(self->matrix_, 5)];
    }
    else {
      self->lambda_ = IOSDoubleArray_Get(self->matrix_, 0);
      self->eigenvecX_ = 0.0;
      self->eigenvecY_ = 1.0;
      [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->c_)) setXWithDouble:IOSDoubleArray_Get(self->matrix_, 5)];
      [self->c_ setYWithDouble:-IOSDoubleArray_Get(self->matrix_, 4)];
    }
  }
  else {
    self->lambda_ = IOSDoubleArray_Get(self->matrix_, 0) + IOSDoubleArray_Get(self->matrix_, 1);
    self->length_ = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(IOSDoubleArray_Get(self->matrix_, 3), IOSDoubleArray_Get(self->matrix_, 0));
    self->eigenvecX_ = IOSDoubleArray_Get(self->matrix_, 3) / self->length_;
    self->eigenvecY_ = -IOSDoubleArray_Get(self->matrix_, 0) / self->length_;
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->c_)) setXWithDouble:IOSDoubleArray_Get(self->matrix_, 4) * self->eigenvecX_ + IOSDoubleArray_Get(self->matrix_, 5) * self->eigenvecY_];
    [self->c_ setYWithDouble:IOSDoubleArray_Get(self->matrix_, 5) * self->eigenvecX_ - IOSDoubleArray_Get(self->matrix_, 4) * self->eigenvecY_];
  }
  if (degenerate || OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->c_)) getX])) {
    OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(self);
    self->temp_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->c_)) getY] / self->lambda_;
    [self setMidpointWithDoubleArray:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ self->temp_ * self->eigenvecY_, -self->temp_ * self->eigenvecX_ } count:2]];
    *IOSDoubleArray_GetRef(nil_chk(self->mu_), 0) = -self->temp_ * self->temp_ + IOSDoubleArray_Get(self->matrix_, 2) / self->lambda_;
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(self->mu_, 0))) {
      OrgGeogebraCommonKernelKernelNDGeoConicND_doubleLine(self);
    }
    else if (IOSDoubleArray_Get(self->mu_, 0) < 0) {
      *IOSDoubleArray_GetRef(self->mu_, 0) = JavaLangMath_sqrtWithDouble_(-IOSDoubleArray_Get(self->mu_, 0));
      OrgGeogebraCommonKernelKernelNDGeoConicND_parallelLinesWithDoubleArray_(self, self->mu_);
    }
    else {
      [self empty];
    }
  }
  else {
    OrgGeogebraCommonKernelKernelNDGeoConicND_parabola(self);
  }
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_doubleLine(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  self->type_ = OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE;
  (void) OrgGeogebraCommonKernelKernelNDGeoConicND_getLines(self);
  self->nx_ = -[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) getY];
  self->ny_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) getX];
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 0)))->x_ = self->nx_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->y_ = self->ny_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->z_ = -([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->b_)) getX] * self->nx_ + [self->b_ getY] * self->ny_);
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->x_ = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->x_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->y_ = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->y_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->z_ = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->z_;
  OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForDoubleLine(self);
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_handleSzero(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(self->matrix_), 4))) {
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(self->matrix_, 5))) {
      [self empty];
      return;
    }
    [self setMidpointWithDoubleArray:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, -IOSDoubleArray_Get(self->matrix_, 2) / (2 * IOSDoubleArray_Get(self->matrix_, 5)) } count:2]];
  }
  else {
    [self setMidpointWithDoubleArray:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -IOSDoubleArray_Get(self->matrix_, 2) / (2 * IOSDoubleArray_Get(self->matrix_, 4)), 0 } count:2]];
  }
  self->eigenvecX_ = IOSDoubleArray_Get(self->matrix_, 5);
  self->eigenvecY_ = -IOSDoubleArray_Get(self->matrix_, 4);
  OrgGeogebraCommonKernelKernelNDGeoConicND_setEigenvectors(self);
  OrgGeogebraCommonKernelKernelNDGeoConicND_doubleLine(self);
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_parallelLinesWithDoubleArray_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, IOSDoubleArray *mu1) {
  self->type_ = OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES;
  (void) OrgGeogebraCommonKernelKernelNDGeoConicND_getLines(self);
  self->nx_ = -[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) getY];
  self->ny_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) getX];
  self->temp1_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->b_)) getX] * self->nx_ + [self->b_ getY] * self->ny_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 0)))->x_ = self->nx_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->y_ = self->ny_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->x_ = self->nx_;
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->y_ = self->ny_;
  self->temp2_ = IOSDoubleArray_Get(nil_chk(mu1), 0) - self->temp1_;
  if (JavaLangMath_absWithDouble_(((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->z_ - self->temp2_) < JavaLangMath_absWithDouble_(((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->z_ - self->temp2_)) {
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->z_ = self->temp2_;
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->z_ = -self->temp1_ - IOSDoubleArray_Get(mu1, 0);
  }
  else {
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->z_ = -self->temp1_ - IOSDoubleArray_Get(mu1, 0);
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->z_ = self->temp2_;
  }
  OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForLines(self);
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForLines(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  if (self->startPoints_ == nil) {
    self->startPoints_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
    for (jint i = 0; i < 2; i++) {
      (void) IOSObjectArray_Set(self->startPoints_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
    }
  }
  for (jint i = 0; i < 2; i++) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), i))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:nil];
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, i))) getPointOnLineWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(nil_chk(self->startPoints_), i)];
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, i))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->startPoints_, i)];
  }
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setStartPointsForDoubleLine(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  if (self->startPoints_ == nil) {
    self->startPoints_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
    for (jint i = 0; i < 2; i++) {
      (void) IOSObjectArray_Set(self->startPoints_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 0))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:nil];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0))) getPointOnLineWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(nil_chk(self->startPoints_), 0)];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->startPoints_, 0)];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->startPoints_, 0)];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_parabola(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  self->type_ = OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA;
  self->temp2_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->c_)) getY] / self->lambda_;
  self->temp1_ = ([self->c_ getY] * self->temp2_ - IOSDoubleArray_Get(nil_chk(self->matrix_), 2)) / (2 * [self->c_ getX]);
  [self setMidpointWithDoubleArray:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ self->eigenvecY_ * self->temp2_ + self->eigenvecX_ * self->temp1_, self->eigenvecY_ * self->temp1_ - self->eigenvecX_ * self->temp2_ } count:2]];
  OrgGeogebraCommonKernelKernelNDGeoConicND_setParabolicEigenvectors(self);
  self->p_ = -[self->c_ getX] / self->lambda_;
  if (self->p_ < 0) {
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) setXWithDouble:-[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) getX]];
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) setYWithDouble:-[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) getY]];
    self->p_ = -self->p_;
  }
  self->linearEccentricity_ = self->p_ / 2;
  self->eccentricity_ = 1;
}

jdouble OrgGeogebraCommonKernelKernelNDGeoConicND_detWithDoubleArray_(IOSDoubleArray *matrix) {
  OrgGeogebraCommonKernelKernelNDGeoConicND_initialize();
  return IOSDoubleArray_Get(nil_chk(matrix), 0) * (IOSDoubleArray_Get(matrix, 1) * IOSDoubleArray_Get(matrix, 2) - IOSDoubleArray_Get(matrix, 5) * IOSDoubleArray_Get(matrix, 5)) - IOSDoubleArray_Get(matrix, 2) * IOSDoubleArray_Get(matrix, 3) * IOSDoubleArray_Get(matrix, 3) - IOSDoubleArray_Get(matrix, 1) * IOSDoubleArray_Get(matrix, 4) * IOSDoubleArray_Get(matrix, 4) + 2 * IOSDoubleArray_Get(matrix, 3) * IOSDoubleArray_Get(matrix, 4) * IOSDoubleArray_Get(matrix, 5);
}

jboolean OrgGeogebraCommonKernelKernelNDGeoConicND_hasPositiveEigenvectorOrientation(OrgGeogebraCommonKernelKernelNDGeoConicND *self) {
  return [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 0))) getX] * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getY] > [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 0))) getY] * [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getX];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_setPositiveEigenvectorOrientationWithBoolean_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jboolean flag) {
  if (flag != OrgGeogebraCommonKernelKernelNDGeoConicND_hasPositiveEigenvectorOrientation(self)) {
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvec_), 1))) setXWithDouble:-[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getX]];
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) setYWithDouble:-[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->eigenvec_, 1))) getY]];
    OrgGeogebraCommonKernelKernelNDGeoConicND_setAffineTransform(self);
  }
}

jdouble OrgGeogebraCommonKernelKernelNDGeoConicND_evaluateWithDouble_withDouble_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble x, jdouble y) {
  return IOSDoubleArray_Get(nil_chk(self->matrix_), 2) + IOSDoubleArray_Get(self->matrix_, 4) * x + IOSDoubleArray_Get(self->matrix_, 5) * y + y * (IOSDoubleArray_Get(self->matrix_, 5) + IOSDoubleArray_Get(self->matrix_, 3) * x + IOSDoubleArray_Get(self->matrix_, 1) * y) + x * (IOSDoubleArray_Get(self->matrix_, 4) + IOSDoubleArray_Get(self->matrix_, 0) * x + IOSDoubleArray_Get(self->matrix_, 3) * y);
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_polarPointWithDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble x, jdouble y, jdouble z, OrgGeogebraCommonKernelGeosGeoPoint *polar) {
  if (![self isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(polar)) setUndefined];
    return;
  }
  if (self->polarMatrix_ == nil) {
    self->polarMatrix_ = new_OrgGeogebraCommonUtilGgbMat_initWithInt_withInt_(3, 3);
  }
  [((OrgGeogebraCommonUtilGgbMat *) nil_chk(self->polarMatrix_)) set3x3fromConicWithDoubleArray:self->matrix_];
  [self->polarMatrix_ inverseImmediate];
  if ([self->polarMatrix_ isUndefined]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(polar)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(polar)) setCoordsWithDouble:[self->polarMatrix_ getEntryWithInt:0 withInt:0] * x + [self->polarMatrix_ getEntryWithInt:0 withInt:1] * y + [self->polarMatrix_ getEntryWithInt:0 withInt:2] * z withDouble:[self->polarMatrix_ getEntryWithInt:1 withInt:0] * x + [self->polarMatrix_ getEntryWithInt:1 withInt:1] * y + [self->polarMatrix_ getEntryWithInt:1 withInt:2] * z withDouble:[self->polarMatrix_ getEntryWithInt:2 withInt:0] * x + [self->polarMatrix_ getEntryWithInt:2 withInt:1] * y + [self->polarMatrix_ getEntryWithInt:2 withInt:2] * z];
}

void OrgGeogebraCommonKernelKernelNDGeoConicND_diameterLineWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelKernelNDGeoConicND *self, jdouble vx, jdouble vy, OrgGeogebraCommonKernelGeosGeoLine *diameter) {
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(diameter))->x_ = IOSDoubleArray_Get(nil_chk(self->matrix_), 0) * vx + IOSDoubleArray_Get(self->matrix_, 3) * vy;
  diameter->y_ = IOSDoubleArray_Get(self->matrix_, 3) * vx + IOSDoubleArray_Get(self->matrix_, 1) * vy;
  diameter->z_ = IOSDoubleArray_Get(self->matrix_, 4) * vx + IOSDoubleArray_Get(self->matrix_, 5) * vy;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelKernelNDGeoConicND)
