//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/kernelND/GeoElementND.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgorithmSet.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoElementND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonKernelKernelNDGeoElementND : NSObject
@end

@implementation OrgGeogebraCommonKernelKernelNDGeoElementND

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setLabelWithNSString:", "setLabel", "V", 0x401, NULL, NULL },
    { "update", NULL, "V", 0x401, NULL, NULL },
    { "setObjColorWithOrgGeogebraCommonAwtGColor:", "setObjColor", "V", 0x401, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x401, NULL, NULL },
    { "isEuclidianVisible", NULL, "Z", 0x401, NULL, NULL },
    { "isLabelVisible", NULL, "Z", 0x401, NULL, NULL },
    { "isLabelSet", NULL, "Z", 0x401, NULL, NULL },
    { "getLabelWithOrgGeogebraCommonKernelStringTemplate:", "getLabel", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x401, NULL, NULL },
    { "updateVisualStyle", NULL, "V", 0x401, NULL, NULL },
    { "remove", NULL, "V", 0x401, NULL, NULL },
    { "getSpreadsheetTrace", NULL, "Z", 0x401, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x401, NULL, NULL },
    { "isIndependent", NULL, "Z", 0x401, NULL, NULL },
    { "getParentAlgorithm", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement;", 0x401, NULL, NULL },
    { "isDefined", NULL, "Z", 0x401, NULL, NULL },
    { "setUndefined", NULL, "V", 0x401, NULL, NULL },
    { "setLineTypeWithInt:", "setLineType", "V", 0x401, NULL, NULL },
    { "setLineThicknessWithInt:", "setLineThickness", "V", 0x401, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x401, NULL, NULL },
    { "setLineOpacityWithInt:", "setLineOpacity", "V", 0x401, NULL, NULL },
    { "getLineOpacity", NULL, "I", 0x401, NULL, NULL },
    { "setLabelVisibleWithBoolean:", "setLabelVisible", "V", 0x401, NULL, NULL },
    { "isPointOnPath", NULL, "Z", 0x401, NULL, NULL },
    { "isPointInRegion", NULL, "Z", 0x401, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "distance", "D", 0x401, NULL, NULL },
    { "updateCascade", NULL, "V", 0x401, NULL, NULL },
    { "updateRepaint", NULL, "V", 0x401, NULL, NULL },
    { "getLineType", NULL, "I", 0x401, NULL, NULL },
    { "getLineThickness", NULL, "I", 0x401, NULL, NULL },
    { "isInverseFill", NULL, "Z", 0x401, NULL, NULL },
    { "getAnimationStep", NULL, "D", 0x401, NULL, NULL },
    { "getConstructionIndex", NULL, "I", 0x401, NULL, NULL },
    { "getAlgoUpdateSet", NULL, "Lorg.geogebra.common.kernel.algos.AlgorithmSet;", 0x401, NULL, NULL },
    { "hasAlgoUpdateSet", NULL, "Z", 0x401, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x401, NULL, NULL },
    { "isGeoText", NULL, "Z", 0x401, NULL, NULL },
    { "getLabelMode", NULL, "I", 0x401, NULL, NULL },
    { "setLabelModeWithInt:", "setLabelMode", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelKernelNDGeoElementND = { 2, "GeoElementND", "org.geogebra.common.kernel.kernelND", NULL, 0x609, 39, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelKernelNDGeoElementND;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelKernelNDGeoElementND)
