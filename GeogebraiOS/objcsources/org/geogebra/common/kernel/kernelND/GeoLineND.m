//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/kernelND/GeoLineND.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonKernelKernelNDGeoLineND : NSObject
@end

@implementation OrgGeogebraCommonKernelKernelNDGeoLineND

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getPointInDWithInt:withDouble:", "getPointInD", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x401, NULL, NULL },
    { "getTrace", NULL, "Z", 0x401, NULL, NULL },
    { "getCartesianEquationVectorWithOrgGeogebraCommonKernelMatrixCoordMatrix:", "getCartesianEquationVector", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x401, NULL, NULL },
    { "getStartInhomCoords", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x401, NULL, NULL },
    { "getEndInhomCoords", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x401, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x401, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x401, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x401, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "isOnPath", "Z", 0x401, NULL, NULL },
    { "respectLimitedPathWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "respectLimitedPath", "Z", 0x401, NULL, NULL },
    { "respectLimitedPathWithDouble:", "respectLimitedPath", "Z", 0x401, NULL, NULL },
    { "isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "isOnFullLine", "Z", 0x401, NULL, NULL },
    { "getEndPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x401, NULL, NULL },
    { "getStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x401, NULL, NULL },
    { "removePointOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "removePointOnLine", "V", 0x401, NULL, NULL },
    { "addPointOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "addPointOnLine", "V", 0x401, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "distance", "D", 0x401, NULL, NULL },
    { "setToImplicit", NULL, "V", 0x401, NULL, NULL },
    { "setToExplicit", NULL, "V", 0x401, NULL, NULL },
    { "setToParametricWithNSString:", "setToParametric", "V", 0x401, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x401, NULL, NULL },
    { "setLineThroughWithDouble:withDouble:", "setLineThrough", "V", 0x401, NULL, NULL },
    { "getDirectionForEquation", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x401, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x401, NULL, NULL },
    { "setStandardStartPoint", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelKernelNDGeoLineND = { 2, "GeoLineND", "org.geogebra.common.kernel.kernelND", NULL, 0x609, 25, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelKernelNDGeoLineND;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelKernelNDGeoLineND)
