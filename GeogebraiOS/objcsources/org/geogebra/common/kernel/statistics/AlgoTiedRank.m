//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/AlgoTiedRank.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/math/stat/ranking/NaturalRanking.h"
#include "org/apache/commons/math/stat/ranking/TiesStrategy.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoTiedRank.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoTiedRank () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  OrgGeogebraCommonKernelGeosGeoList *outputList_;
  jint size_;
  OrgApacheCommonsMathStatRankingNaturalRanking *rankingAlgorithm_;
  IOSDoubleArray *inputArray_;
  IOSDoubleArray *outputArray_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTiedRank, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTiedRank, outputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTiedRank, rankingAlgorithm_, OrgApacheCommonsMathStatRankingNaturalRanking *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTiedRank, inputArray_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTiedRank, outputArray_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoTiedRank_compute(OrgGeogebraCommonKernelStatisticsAlgoTiedRank *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoTiedRank

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_TiedRank();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:outputList_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  RELEASE_(rankingAlgorithm_);
  RELEASE_(inputArray_);
  RELEASE_(outputArray_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoTiedRank", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "rankingAlgorithm_", NULL, 0x2, "Lorg.apache.commons.math.stat.ranking.NaturalRanking;", NULL, NULL,  },
    { "inputArray_", NULL, 0x2, "[D", NULL, NULL,  },
    { "outputArray_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoTiedRank = { 2, "AlgoTiedRank", "org.geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoTiedRank;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoTiedRank_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoTiedRank *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank_set_inputList_(self, inputList);
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank_setAndConsume_outputList_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoTiedRank *new_OrgGeogebraCommonKernelStatisticsAlgoTiedRank_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank *self = [OrgGeogebraCommonKernelStatisticsAlgoTiedRank alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoTiedRank_compute(OrgGeogebraCommonKernelStatisticsAlgoTiedRank *self) {
  self->size_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || self->size_ == 0) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank_setAndConsume_inputArray_(self, [IOSDoubleArray newArrayWithLength:self->size_]);
  for (jint i = 0; i < self->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      *IOSDoubleArray_GetRef(self->inputArray_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
      return;
    }
  }
  if (self->rankingAlgorithm_ == nil) OrgGeogebraCommonKernelStatisticsAlgoTiedRank_setAndConsume_rankingAlgorithm_(self, new_OrgApacheCommonsMathStatRankingNaturalRanking_initWithOrgApacheCommonsMathStatRankingTiesStrategyEnum_(OrgApacheCommonsMathStatRankingTiesStrategyEnum_get_AVERAGE()));
  OrgGeogebraCommonKernelStatisticsAlgoTiedRank_set_outputArray_(self, [((OrgApacheCommonsMathStatRankingNaturalRanking *) nil_chk(self->rankingAlgorithm_)) rankWithDoubleArray:self->inputArray_]);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  for (jint i = 0; i < self->size_; i++) {
    [self->outputList_ addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(nil_chk(self->outputArray_), i)) autorelease]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoTiedRank)
