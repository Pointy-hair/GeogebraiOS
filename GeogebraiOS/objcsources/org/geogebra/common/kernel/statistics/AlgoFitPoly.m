//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoFitPoly.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoPolynomialFromCoordinates.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitPoly.h"
#include "org/geogebra/common/kernel/statistics/RegressionMath.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoFitPoly () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geolist_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> degree_;
  OrgGeogebraCommonKernelGeosGeoFunction *geofunction_;
  OrgGeogebraCommonKernelGeosGeoElement *geodegree_;
  OrgGeogebraCommonKernelStatisticsRegressionMath *regMath_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitPoly, geolist_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitPoly, degree_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitPoly, geofunction_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitPoly, geodegree_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitPoly, regMath_, OrgGeogebraCommonKernelStatisticsRegressionMath *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFitPoly_compute(OrgGeogebraCommonKernelStatisticsAlgoFitPoly *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoFitPoly

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geolist
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)degree {
  OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, geolist, degree);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geolist
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)degree {
  OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, geolist, degree);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_FitPoly();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, geolist_);
  (void) IOSObjectArray_Set(input_, 1, geodegree_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:geofunction_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFitPoly {
  return geofunction_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoFitPoly_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoFitPoly", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoFitPoly", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitPoly", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geolist_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "degree_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "geofunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "geodegree_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "regMath_", NULL, 0x12, "Lorg.geogebra.common.kernel.statistics.RegressionMath;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoFitPoly = { 2, "AlgoFitPoly", "org.geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoFitPoly;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelStatisticsAlgoFitPoly *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geolist, id<OrgGeogebraCommonKernelArithmeticNumberValue> degree) {
  (void) OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, geolist, degree);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoFitPoly *new_OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geolist, id<OrgGeogebraCommonKernelArithmeticNumberValue> degree) {
  OrgGeogebraCommonKernelStatisticsAlgoFitPoly *self = [OrgGeogebraCommonKernelStatisticsAlgoFitPoly alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, geolist, degree);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelStatisticsAlgoFitPoly *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *geolist, id<OrgGeogebraCommonKernelArithmeticNumberValue> degree) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->regMath_ = new_OrgGeogebraCommonKernelStatisticsRegressionMath_init();
  self->geolist_ = geolist;
  self->degree_ = degree;
  self->geodegree_ = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(degree)) toGeoElement];
  self->geofunction_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoFitPoly_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoFitPoly *new_OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *geolist, id<OrgGeogebraCommonKernelArithmeticNumberValue> degree) {
  OrgGeogebraCommonKernelStatisticsAlgoFitPoly *self = [OrgGeogebraCommonKernelStatisticsAlgoFitPoly alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFitPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, geolist, degree);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFitPoly_compute(OrgGeogebraCommonKernelStatisticsAlgoFitPoly *self) {
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) size];
  jint par;
  jboolean regok = YES;
  IOSDoubleArray *cof = nil;
  par = (jint) JavaLangMath_roundWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->degree_)) getDouble]);
  if (![self->geolist_ isDefined] || (size < 2) || (par >= size)) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
  switch (par) {
    case OrgGeogebraCommonKernelStatisticsRegressionMath_LINEAR:
    regok = [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(self->regMath_)) doLinearWithOrgGeogebraCommonKernelGeosGeoList:self->geolist_];
    if (regok) {
      cof = [IOSDoubleArray newArrayWithLength:2];
      *IOSDoubleArray_GetRef(cof, 0) = [self->regMath_ getP1];
      *IOSDoubleArray_GetRef(cof, 1) = [self->regMath_ getP2];
    }
    break;
    case OrgGeogebraCommonKernelStatisticsRegressionMath_QUAD:
    regok = [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(self->regMath_)) doQuadWithOrgGeogebraCommonKernelGeosGeoList:self->geolist_];
    if (regok) {
      cof = [IOSDoubleArray newArrayWithLength:3];
      *IOSDoubleArray_GetRef(cof, 0) = [self->regMath_ getP1];
      *IOSDoubleArray_GetRef(cof, 1) = [self->regMath_ getP2];
      *IOSDoubleArray_GetRef(cof, 2) = [self->regMath_ getP3];
    }
    break;
    case OrgGeogebraCommonKernelStatisticsRegressionMath_CUBIC:
    regok = [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(self->regMath_)) doCubicWithOrgGeogebraCommonKernelGeosGeoList:self->geolist_];
    if (regok) {
      cof = [IOSDoubleArray newArrayWithLength:4];
      *IOSDoubleArray_GetRef(cof, 0) = [self->regMath_ getP1];
      *IOSDoubleArray_GetRef(cof, 1) = [self->regMath_ getP2];
      *IOSDoubleArray_GetRef(cof, 2) = [self->regMath_ getP3];
      *IOSDoubleArray_GetRef(cof, 3) = [self->regMath_ getP4];
    }
    break;
    case OrgGeogebraCommonKernelStatisticsRegressionMath_QUART:
    regok = [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(self->regMath_)) doQuartWithOrgGeogebraCommonKernelGeosGeoList:self->geolist_];
    if (regok) {
      cof = [IOSDoubleArray newArrayWithLength:5];
      *IOSDoubleArray_GetRef(cof, 0) = [self->regMath_ getP1];
      *IOSDoubleArray_GetRef(cof, 1) = [self->regMath_ getP2];
      *IOSDoubleArray_GetRef(cof, 2) = [self->regMath_ getP3];
      *IOSDoubleArray_GetRef(cof, 3) = [self->regMath_ getP4];
      *IOSDoubleArray_GetRef(cof, 4) = [self->regMath_ getP5];
    }
    break;
    default:
    if ((par > 4) && (par < 300)) {
      regok = [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(self->regMath_)) doPolyNWithOrgGeogebraCommonKernelGeosGeoList:self->geolist_ withInt:par];
      if (regok) {
        cof = [IOSDoubleArray newArrayWithLength:par + 1];
        cof = [self->regMath_ getPar];
      }
    }
    else {
      regok = NO;
    }
  }
  if (!regok) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:OrgGeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_buildPolyFunctionExpressionWithOrgGeogebraCommonKernelKernel_withDoubleArray_([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel], cof)];
  [self->geofunction_ setDefinedWithBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoFitPoly)
