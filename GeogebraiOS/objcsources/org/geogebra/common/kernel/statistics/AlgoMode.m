//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoMode.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoMode.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoMode () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  OrgGeogebraCommonKernelGeosGeoList *outputList_;
  jint size_;
}

- (void)setListElementWithInt:(jint)index
                   withDouble:(jdouble)value;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoMode, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoMode, outputList_, OrgGeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoMode_compute(OrgGeogebraCommonKernelStatisticsAlgoMode *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoMode_setListElementWithInt_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoMode *self, jint index, jdouble value);

@implementation OrgGeogebraCommonKernelStatisticsAlgoMode

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonKernelStatisticsAlgoMode_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Mode();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, inputList_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:outputList_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoMode_compute(self);
}

- (void)setListElementWithInt:(jint)index
                   withDouble:(jdouble)value {
  OrgGeogebraCommonKernelStatisticsAlgoMode_setListElementWithInt_withDouble_(self, index, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoMode", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setListElementWithInt:withDouble:", "setListElement", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoMode = { 2, "AlgoMode", "org.geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoMode;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoMode_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoMode *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->inputList_ = inputList;
  self->outputList_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoMode_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoMode *new_OrgGeogebraCommonKernelStatisticsAlgoMode_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelStatisticsAlgoMode *self = [OrgGeogebraCommonKernelStatisticsAlgoMode alloc];
  OrgGeogebraCommonKernelStatisticsAlgoMode_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoMode_compute(OrgGeogebraCommonKernelStatisticsAlgoMode *self) {
  self->size_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || self->size_ == 0) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  IOSDoubleArray *sortList = [IOSDoubleArray newArrayWithLength:self->size_];
  for (jint i = 0; i < self->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      *IOSDoubleArray_GetRef(sortList, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
      return;
    }
  }
  JavaUtilArrays_sortWithDoubleArray_(sortList);
  jint maxRun = 1;
  jint run = 1;
  jdouble val = IOSDoubleArray_Get(sortList, 0);
  for (jint i = 1; i < self->size_; i++) {
    if (IOSDoubleArray_Get(sortList, i) == val) {
      run++;
    }
    else {
      if (run >= maxRun) maxRun = run;
      run = 1;
      val = IOSDoubleArray_Get(sortList, i);
    }
  }
  if (run >= maxRun) maxRun = run;
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  if (maxRun == 1) return;
  run = 1;
  val = IOSDoubleArray_Get(sortList, 0);
  jint modeNo = 0;
  for (jint i = 1; i < self->size_; i++) {
    if (IOSDoubleArray_Get(sortList, i) == val) {
      run++;
      if (run == maxRun) OrgGeogebraCommonKernelStatisticsAlgoMode_setListElementWithInt_withDouble_(self, modeNo++, val);
    }
    else {
      run = 1;
      val = IOSDoubleArray_Get(sortList, i);
    }
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoMode_setListElementWithInt_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoMode *self, jint index, jdouble value) {
  OrgGeogebraCommonKernelGeosGeoNumeric *listElement;
  if (index < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) getCacheSize]) {
    listElement = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->outputList_ getCachedWithInt:index], [OrgGeogebraCommonKernelGeosGeoNumeric class]);
  }
  else {
    listElement = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
    [listElement setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
    [listElement setConstructionDefaults];
    [listElement setUseVisualDefaultsWithBoolean:NO];
  }
  [self->outputList_ addWithOrgGeogebraCommonKernelGeosGeoElement:listElement];
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(listElement)) setValueWithDouble:value];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoMode)
