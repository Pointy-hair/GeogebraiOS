//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoContingencyTable.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/statistics/AlgoChiSquaredTest.h"
#include "org/geogebra/common/kernel/statistics/AlgoContingencyTable.h"
#include "org/geogebra/common/kernel/statistics/AlgoFrequency.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoContingencyTable () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *list1_, *list2_, *rowList_, *colList_, *freqMatrix_;
  OrgGeogebraCommonKernelGeosGeoText *args_;
  OrgGeogebraCommonKernelGeosGeoText *table_;
  OrgGeogebraCommonKernelStatisticsAlgoFrequency *freq_;
  JavaLangStringBuilder *tableSb_;
  jboolean isRawData_;
  IOSObjectArray *rowValues_;
  IOSObjectArray *colValues_;
  IOSObjectArray *freqValues_;
  IOSObjectArray *expected_;
  IOSObjectArray *chiCont_;
  IOSIntArray *rowSum_;
  IOSIntArray *colSum_;
  jint totalSum_;
  jboolean showRowPercent_, showColPercent_, showTotalPercent_, showChi_, showExpected_, showTest_;
  jint rowCount_;
  jint colCount_;
  jint lastRow_;
}

- (void)parseArgs;

- (jboolean)loadRawDataValues;

- (jboolean)loadPreparedDataValues;

- (void)computeChiTestValues;

- (void)endTableWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb2;

- (void)addChiTestWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (void)beginTable;

- (void)addTableRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                     withInt:(jint)rowIndex
                                withNSString:(NSString *)header
                                withNSString:(NSString *)type
                                 withBoolean:(jboolean)lineBelow;

- (void)startRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                              withBoolean:(jboolean)lineBelow
                              withBoolean:(jboolean)lineAbove;

- (jboolean)useJLaTeXMath;

- (void)endRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                            withBoolean:(jboolean)lineBelow;

- (void)endCellWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)handleSpecialCharWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, list1_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, list2_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, rowList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, colList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, freqMatrix_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, args_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, table_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, freq_, OrgGeogebraCommonKernelStatisticsAlgoFrequency *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, tableSb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, rowValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, colValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, freqValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, expected_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, chiCont_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, rowSum_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable, colSum_, IOSIntArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_parseArgs(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_loadRawDataValues(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_loadPreparedDataValues(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_computeChiTestValues(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_compute(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endTableWithJavaLangStringBuilder_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb2);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addChiTestWithJavaLangStringBuilder_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_beginTable(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jint rowIndex, NSString *header, NSString *type, jboolean lineBelow);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_startRowWithJavaLangStringBuilder_withBoolean_withBoolean_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jboolean lineBelow, jboolean lineAbove);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endRowWithJavaLangStringBuilder_withBoolean_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jboolean lineBelow);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, NSString *s);

@implementation OrgGeogebraCommonKernelStatisticsAlgoContingencyTable

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list1
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list2
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)args {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, list1, list2, args);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)rowList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)colList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)freqMatrix
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)args {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, rowList, colList, freqMatrix, args);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ContingencyTable();
}

- (void)setInputOutput {
  JavaUtilArrayList *outList = new_JavaUtilArrayList_init();
  if (list1_ != nil) [outList addWithId:list1_];
  if (list2_ != nil) [outList addWithId:list2_];
  if (rowList_ != nil) [outList addWithId:rowList_];
  if (colList_ != nil) [outList addWithId:colList_];
  if (freqMatrix_ != nil) [outList addWithId:freqMatrix_];
  if (args_ != nil) [outList addWithId:args_];
  input_ = [IOSObjectArray newArrayWithLength:[outList size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  input_ = [outList toArrayWithNSObjectArray:input_];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:table_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoText *)getResult {
  return table_;
}

- (void)parseArgs {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_parseArgs(self);
}

- (jboolean)loadRawDataValues {
  return OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_loadRawDataValues(self);
}

- (jboolean)loadPreparedDataValues {
  return OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_loadPreparedDataValues(self);
}

- (void)computeChiTestValues {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_computeChiTestValues(self);
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_compute(self);
}

- (void)endTableWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb2 {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endTableWithJavaLangStringBuilder_(self, sb2);
}

- (void)addChiTestWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addChiTestWithJavaLangStringBuilder_(self, sb);
}

- (void)beginTable {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_beginTable(self);
}

- (void)addTableRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                     withInt:(jint)rowIndex
                                withNSString:(NSString *)header
                                withNSString:(NSString *)type
                                 withBoolean:(jboolean)lineBelow {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, sb, rowIndex, header, type, lineBelow);
}

- (void)startRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                              withBoolean:(jboolean)lineBelow
                              withBoolean:(jboolean)lineAbove {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_startRowWithJavaLangStringBuilder_withBoolean_withBoolean_(self, sb, lineBelow, lineAbove);
}

- (jboolean)useJLaTeXMath {
  return OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(self);
}

- (void)endRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                            withBoolean:(jboolean)lineBelow {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endRowWithJavaLangStringBuilder_withBoolean_(self, sb, lineBelow);
}

- (void)endCellWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(self, sb);
}

- (NSString *)handleSpecialCharWithNSString:(NSString *)s {
  return OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoContingencyTable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoContingencyTable", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "parseArgs", NULL, "V", 0x2, NULL, NULL },
    { "loadRawDataValues", NULL, "Z", 0x2, NULL, NULL },
    { "loadPreparedDataValues", NULL, "Z", 0x2, NULL, NULL },
    { "computeChiTestValues", NULL, "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "endTableWithJavaLangStringBuilder:", "endTable", "V", 0x2, NULL, NULL },
    { "addChiTestWithJavaLangStringBuilder:", "addChiTest", "V", 0x2, NULL, NULL },
    { "beginTable", NULL, "V", 0x2, NULL, NULL },
    { "addTableRowWithJavaLangStringBuilder:withInt:withNSString:withNSString:withBoolean:", "addTableRow", "V", 0x2, NULL, NULL },
    { "startRowWithJavaLangStringBuilder:withBoolean:withBoolean:", "startRow", "V", 0x2, NULL, NULL },
    { "useJLaTeXMath", NULL, "Z", 0x2, NULL, NULL },
    { "endRowWithJavaLangStringBuilder:withBoolean:", "endRow", "V", 0x2, NULL, NULL },
    { "endCellWithJavaLangStringBuilder:", "endCell", "V", 0x2, NULL, NULL },
    { "handleSpecialCharWithNSString:", "handleSpecialChar", "Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "list1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "list2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "rowList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "colList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "freqMatrix_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "args_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "table_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "freq_", NULL, 0x2, "Lorg.geogebra.common.kernel.statistics.AlgoFrequency;", NULL, NULL,  },
    { "tableSb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "isRawData_", NULL, 0x2, "Z", NULL, NULL,  },
    { "rowValues_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "colValues_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "freqValues_", NULL, 0x2, "[[I", NULL, NULL,  },
    { "expected_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "chiCont_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "rowSum_", NULL, 0x2, "[I", NULL, NULL,  },
    { "colSum_", NULL, 0x2, "[I", NULL, NULL,  },
    { "totalSum_", NULL, 0x2, "I", NULL, NULL,  },
    { "showRowPercent_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showColPercent_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showTotalPercent_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showChi_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showExpected_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showTest_", NULL, 0x2, "Z", NULL, NULL,  },
    { "rowCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "colCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "lastRow_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoContingencyTable = { 2, "AlgoContingencyTable", "org.geogebra.common.kernel.statistics", NULL, 0x1, 19, methods, 27, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoContingencyTable;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *list1, OrgGeogebraCommonKernelGeosGeoList *list2, OrgGeogebraCommonKernelGeosGeoText *args) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->tableSb_ = new_JavaLangStringBuilder_init();
  self->isRawData_ = YES;
  self->list1_ = list1;
  self->list2_ = list2;
  self->args_ = args;
  self->freq_ = new_OrgGeogebraCommonKernelStatisticsAlgoFrequency_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withBoolean_(cons, list1, list2, YES);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->freq_];
  self->table_ = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  self->table_->isTextCommand__ = YES;
  [self->table_ setLaTeXWithBoolean:YES withBoolean:NO];
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_compute(self);
  [self->table_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *list1, OrgGeogebraCommonKernelGeosGeoList *list2, OrgGeogebraCommonKernelGeosGeoText *args) {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoContingencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, list1, list2, args);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *rowList, OrgGeogebraCommonKernelGeosGeoList *colList, OrgGeogebraCommonKernelGeosGeoList *freqMatrix, OrgGeogebraCommonKernelGeosGeoText *args) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->tableSb_ = new_JavaLangStringBuilder_init();
  self->isRawData_ = NO;
  self->rowList_ = rowList;
  self->colList_ = colList;
  self->freqMatrix_ = freqMatrix;
  self->args_ = args;
  self->table_ = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  self->table_->isTextCommand__ = YES;
  [self->table_ setLaTeXWithBoolean:YES withBoolean:NO];
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_compute(self);
  [self->table_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *rowList, OrgGeogebraCommonKernelGeosGeoList *colList, OrgGeogebraCommonKernelGeosGeoList *freqMatrix, OrgGeogebraCommonKernelGeosGeoText *args) {
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoContingencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, rowList, colList, freqMatrix, args);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_parseArgs(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  self->showRowPercent_ = NO;
  self->showColPercent_ = NO;
  self->showTotalPercent_ = NO;
  self->showChi_ = NO;
  self->showExpected_ = NO;
  self->showTest_ = NO;
  self->lastRow_ = 0;
  if (self->args_ != nil) {
    NSString *optionsStr = [self->args_ getTextString];
    if ([((NSString *) nil_chk(optionsStr)) indexOfString:@"_"] > -1) {
      self->showRowPercent_ = YES;
      self->lastRow_ = 1;
    }
    if ([optionsStr indexOfString:@"|"] > -1) {
      self->showColPercent_ = YES;
      self->lastRow_ = 2;
    }
    if ([optionsStr indexOfString:@"+"] > -1) {
      self->showTotalPercent_ = YES;
      self->lastRow_ = 3;
    }
    if ([optionsStr indexOfString:@"e"] > -1) {
      self->showExpected_ = YES;
      self->lastRow_ = 4;
    }
    if ([optionsStr indexOfString:@"k"] > -1) {
      self->showChi_ = YES;
      self->lastRow_ = 5;
    }
    if ([optionsStr indexOfString:@"="] > -1) {
      self->showTest_ = YES;
    }
  }
}

jboolean OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_loadRawDataValues(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoList *) nil_chk([((OrgGeogebraCommonKernelStatisticsAlgoFrequency *) nil_chk(self->freq_)) getResult])) isDefined]) {
    return NO;
  }
  self->rowValues_ = [self->freq_ getContingencyRowValues];
  self->colValues_ = [self->freq_ getContingencyColumnValues];
  OrgGeogebraCommonKernelGeosGeoList *fr = [self->freq_ getResult];
  self->rowSum_ = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->rowValues_))->size_];
  self->colSum_ = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->colValues_))->size_];
  self->totalSum_ = 0;
  self->freqValues_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->rowValues_->size_, self->colValues_->size_ }];
  for (jint rowIndex = 0; rowIndex < self->rowValues_->size_; rowIndex++) {
    OrgGeogebraCommonKernelGeosGeoList *rowGeo = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(fr)) getWithInt:rowIndex], [OrgGeogebraCommonKernelGeosGeoList class]);
    for (jint colIndex = 0; colIndex < self->colValues_->size_; colIndex++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex) = J2ObjCFpToInt([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(rowGeo)) getWithInt:colIndex], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
      *IOSIntArray_GetRef(self->rowSum_, rowIndex) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
      *IOSIntArray_GetRef(self->colSum_, colIndex) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
      self->totalSum_ += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
    }
  }
  return YES;
}

jboolean OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_loadPreparedDataValues(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  if (self->rowList_ == nil || self->colList_ == nil || self->freqMatrix_ == nil || ![self->rowList_ isDefined] || ![self->colList_ isDefined] || ![self->freqMatrix_ isDefined] || ![self->freqMatrix_ isMatrix]) {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
    return NO;
  }
  self->rowCount_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->rowList_)) size];
  if ([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->freqMatrix_)) size] != self->rowCount_) {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
    return NO;
  }
  self->colCount_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->colList_)) size];
  self->rowValues_ = [IOSObjectArray newArrayWithLength:self->rowCount_ type:NSString_class_()];
  self->colValues_ = [IOSObjectArray newArrayWithLength:self->colCount_ type:NSString_class_()];
  self->rowSum_ = [IOSIntArray newArrayWithLength:self->rowCount_];
  self->colSum_ = [IOSIntArray newArrayWithLength:self->colCount_];
  for (jint i = 0; i < self->rowCount_; i++) {
    geo = [self->rowList_ getWithInt:i];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return NO;
    (void) IOSObjectArray_Set(self->rowValues_, i, [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) getTextString]);
  }
  for (jint i = 0; i < self->colCount_; i++) {
    geo = [self->colList_ getWithInt:i];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return NO;
    (void) IOSObjectArray_Set(self->colValues_, i, [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) getTextString]);
  }
  self->freqValues_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->rowSum_->size_, self->colValues_->size_ }];
  self->totalSum_ = 0;
  for (jint rowIndex = 0; rowIndex < self->rowCount_; rowIndex++) {
    OrgGeogebraCommonKernelGeosGeoList *rowGeo = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([self->freqMatrix_ getWithInt:rowIndex], [OrgGeogebraCommonKernelGeosGeoList class]);
    for (jint colIndex = 0; colIndex < self->colCount_; colIndex++) {
      geo = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(rowGeo)) getWithInt:colIndex];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) return NO;
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex) = J2ObjCFpToInt([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([rowGeo getWithInt:colIndex], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
      *IOSIntArray_GetRef(self->rowSum_, rowIndex) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
      *IOSIntArray_GetRef(self->colSum_, colIndex) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
      self->totalSum_ += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
    }
  }
  return YES;
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_computeChiTestValues(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  self->expected_ = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ ((IOSObjectArray *) nil_chk(self->rowValues_))->size_, ((IOSObjectArray *) nil_chk(self->colValues_))->size_ }];
  self->chiCont_ = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ self->rowValues_->size_, self->colValues_->size_ }];
  for (jint rowIndex = 0; rowIndex < self->rowValues_->size_; rowIndex++) {
    for (jint colIndex = 0; colIndex < self->colValues_->size_; colIndex++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->expected_, rowIndex)), colIndex) = 1.0 * IOSIntArray_Get(nil_chk(self->rowSum_), rowIndex) * IOSIntArray_Get(nil_chk(self->colSum_), colIndex) / self->totalSum_;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->chiCont_, rowIndex)), colIndex) = (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->expected_, rowIndex)), colIndex));
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->chiCont_, rowIndex)), colIndex) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->chiCont_, rowIndex)), colIndex) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->chiCont_, rowIndex)), colIndex) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->expected_, rowIndex)), colIndex);
    }
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_compute(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  jboolean dataLoaded;
  if (self->isRawData_) {
    dataLoaded = OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_loadRawDataValues(self);
  }
  else {
    dataLoaded = OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_loadPreparedDataValues(self);
  }
  if (!dataLoaded) {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_parseArgs(self);
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_computeChiTestValues(self);
  [((JavaLangStringBuilder *) nil_chk(self->tableSb_)) setLengthWithInt:0];
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_beginTable(self);
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, -1, OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Frequency"]), @"colValue", self->lastRow_ == 0);
  if (self->showRowPercent_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"RowPercent"]), @"blank", self->lastRow_ == 1);
  if (self->showColPercent_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ColumnPercent"]), @"blank", self->lastRow_ == 2);
  if (self->showTotalPercent_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TotalPercent"]), @"blank", self->lastRow_ == 3);
  if (self->showExpected_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ExpectedCount"]), @"blank", self->lastRow_ == 4);
  if (self->showChi_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ChiSquaredContribution"]), @"blank", self->lastRow_ == 5);
  for (jint rowIndex = 0; rowIndex < ((IOSObjectArray *) nil_chk(self->rowValues_))->size_; rowIndex++) {
    OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, IOSObjectArray_Get(self->rowValues_, rowIndex), @"count", self->lastRow_ == 0);
    if (self->showRowPercent_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"_", self->lastRow_ == 1);
    if (self->showColPercent_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"|", self->lastRow_ == 2);
    if (self->showTotalPercent_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"+", self->lastRow_ == 3);
    if (self->showExpected_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"e", self->lastRow_ == 4);
    if (self->showChi_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"k", self->lastRow_ == 5);
  }
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, -1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Total"], @"tableFooter", !self->showRowPercent_);
  if (self->showRowPercent_) OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, nil, @"rowPercentFooter", YES);
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endTableWithJavaLangStringBuilder_(self, self->tableSb_);
  if (self->showTest_) {
    OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addChiTestWithJavaLangStringBuilder_(self, self->tableSb_);
  }
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setTextStringWithNSString:[self->tableSb_ description]];
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endTableWithJavaLangStringBuilder_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb2) {
  if (!OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(self)) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb2)) appendWithNSString:@"}"];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb2)) appendWithNSString:@"\\end{array}"];
  }
  OrgGeogebraCommonMainApp_debugWithNSString_([((JavaLangStringBuilder *) nil_chk(sb2)) description]);
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addChiTestWithJavaLangStringBuilder_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb) {
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *test;
  if (self->isRawData_) {
    test = new_OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, [((OrgGeogebraCommonKernelStatisticsAlgoFrequency *) nil_chk(self->freq_)) getResult], nil);
  }
  else {
    test = new_OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self->cons_, self->freqMatrix_, nil);
  }
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:test];
  OrgGeogebraCommonKernelGeosGeoList *result = [((OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *) nil_chk(test)) getResult];
  NSString *split = !OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(self) ? @"}\\ggbtdl{" : @"&";
  NSString *rowHeader = JreStrcat("$$CC$$", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"DegreesOfFreedom.short"], split, OrgGeogebraCommonUtilUnicode_chi, OrgGeogebraCommonUtilUnicode_Superscript_2, split, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"PValue"]);
  NSString *degFreedom = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:(((IOSObjectArray *) nil_chk(self->rowValues_))->size_ - 1) * (((IOSObjectArray *) nil_chk(self->colValues_))->size_ - 1) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()];
  NSString *secondRow = JreStrcat("$$$$$", degFreedom, split, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(result)) getWithInt:1])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()], split, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([result getWithInt:0])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()]);
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\\\ \\text{"];
  (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"ChiSquaredTest"]];
  (void) [sb appendWithNSString:@"}\\\\"];
  if (!OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(self)) {
    (void) [sb appendWithNSString:@"\\ggbtable{\\ggbtrl{\\ggbtdl{"];
    (void) [sb appendWithNSString:rowHeader];
    (void) [sb appendWithNSString:@"}}\\ggbtrl{\\ggbtdl{"];
    (void) [sb appendWithNSString:secondRow];
    (void) [sb appendWithNSString:@"}}}"];
  }
  else {
    (void) [sb appendWithNSString:@"\\begin{array}{|l|l|l|l|}"];
    (void) [sb appendWithNSString:@" \\\\ \\hline "];
    (void) [sb appendWithNSString:rowHeader];
    (void) [sb appendWithNSString:@"\\\\"];
    (void) [sb appendWithNSString:@"\\hline "];
    (void) [sb appendWithNSString:secondRow];
    (void) [sb appendWithNSString:@"\\\\"];
    (void) [sb appendWithNSString:@"\\hline "];
    (void) [sb appendWithNSString:@"\\end{array}"];
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_beginTable(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  if (!OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(self)) {
    (void) [((JavaLangStringBuilder *) nil_chk(self->tableSb_)) appendWithNSString:@"\\ggbtable{"];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(self->tableSb_)) appendWithNSString:@"\\begin{array}{|l"];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->colValues_))->size_ - 1; i++) {
      (void) [self->tableSb_ appendWithNSString:@"|l"];
    }
    (void) [self->tableSb_ appendWithNSString:@"|l||l|}"];
    (void) [self->tableSb_ appendWithNSString:@" \\\\ "];
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jint rowIndex, NSString *header, NSString *type, jboolean lineBelow) {
  jdouble x;
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_startRowWithJavaLangStringBuilder_withBoolean_withBoolean_(self, sb, lineBelow, rowIndex == -1);
  if (header == nil) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\;"];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:header];
  }
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(self, sb);
  for (jint colIndex = 0; colIndex < ((IOSObjectArray *) nil_chk(self->colValues_))->size_; colIndex++) {
    if ([((NSString *) nil_chk(type)) isEqual:@"blank"]) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\;"];
    }
    else if ([type isEqual:@"colValue"]) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:IOSObjectArray_Get(self->colValues_, colIndex)];
    }
    else if ([type isEqual:@"count"]) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex)];
    }
    else if ([type isEqual:@"_"]) {
      x = 100.0 * IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex) / IOSIntArray_Get(nil_chk(self->rowSum_), rowIndex);
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"|"]) {
      x = 100.0 * IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex) / IOSIntArray_Get(nil_chk(self->colSum_), colIndex);
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"+"]) {
      x = 100.0 * IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex) / self->totalSum_;
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"e"]) {
      x = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->expected_), rowIndex)), colIndex);
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"k"]) {
      x = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->chiCont_), rowIndex)), colIndex);
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"tableFooter"]) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:IOSIntArray_Get(nil_chk(self->colSum_), colIndex)];
    }
    else if ([type isEqual:@"rowPercentFooter"]) {
      x = 100.0 * IOSIntArray_Get(nil_chk(self->colSum_), colIndex) / self->totalSum_;
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(self, sb);
  }
  if ([((NSString *) nil_chk(type)) isEqual:@"count"]) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:IOSIntArray_Get(nil_chk(self->rowSum_), rowIndex)];
  }
  else if ([type isEqual:@"colValue"]) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Total"]];
  }
  else if ([type isEqual:@"|"]) {
    x = 100.0 * IOSIntArray_Get(nil_chk(self->rowSum_), rowIndex) / self->totalSum_;
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()]];
  }
  else if ([type isEqual:@"tableFooter"]) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:self->totalSum_];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\;"];
  }
  OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endRowWithJavaLangStringBuilder_withBoolean_(self, sb, lineBelow);
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_startRowWithJavaLangStringBuilder_withBoolean_withBoolean_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jboolean lineBelow, jboolean lineAbove) {
  if (!OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(self)) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:lineBelow ? (lineAbove ? @"\\ggbtrl{" : @"\\ggbtrlb{") : (lineAbove ? @"\\ggbtrlt{" : @"\\ggbtr{")];
    (void) [sb appendWithNSString:@"\\ggbtdl{"];
  }
  else if (lineAbove) {
    (void) [((JavaLangStringBuilder *) nil_chk(self->tableSb_)) appendWithNSString:@"\\hline "];
  }
}

jboolean OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  return ![((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:nil];
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endRowWithJavaLangStringBuilder_withBoolean_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jboolean lineBelow) {
  if (!OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(self)) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"}}"];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\\\"];
    if (lineBelow) {
      (void) [sb appendWithNSString:@"\\hline "];
    }
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb) {
  if (!OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_useJLaTeXMath(self)) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"}\\ggbtdl{"];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"&"];
  }
}

NSString *OrgGeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable *self, NSString *s) {
  return [((NSString *) nil_chk(s)) replaceAll:@" " withReplacement:@"\\\\;"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoContingencyTable)
