//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoFit.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/QRDecompositionImpl.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/statistics/AlgoFit.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoFit () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *pointlist_;
  OrgGeogebraCommonKernelGeosGeoList *functionlist_;
  OrgGeogebraCommonKernelGeosGeoFunction *fitfunction_;
  jint datasize_;
  jint functionsize_;
  IOSObjectArray *functionarray_;
  id<OrgApacheCommonsMathLinearRealMatrix> M_;
  id<OrgApacheCommonsMathLinearRealMatrix> Y_;
  id<OrgApacheCommonsMathLinearRealMatrix> P_;
}

- (jboolean)makeMatrixes;

- (OrgGeogebraCommonKernelGeosGeoFunction *)makeFunction;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFit, pointlist_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFit, functionlist_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFit, fitfunction_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFit, functionarray_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFit, M_, id<OrgApacheCommonsMathLinearRealMatrix>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFit, Y_, id<OrgApacheCommonsMathLinearRealMatrix>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFit, P_, id<OrgApacheCommonsMathLinearRealMatrix>)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFit_compute(OrgGeogebraCommonKernelStatisticsAlgoFit *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelStatisticsAlgoFit_makeMatrixes(OrgGeogebraCommonKernelStatisticsAlgoFit *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelStatisticsAlgoFit_makeFunction(OrgGeogebraCommonKernelStatisticsAlgoFit *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoFit

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)pointlist
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)functionlist {
  OrgGeogebraCommonKernelStatisticsAlgoFit_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, pointlist, functionlist);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Fit();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, pointlist_);
  (void) IOSObjectArray_Set(input_, 1, functionlist_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:fitfunction_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFit {
  return fitfunction_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoFit_compute(self);
}

- (jboolean)makeMatrixes {
  return OrgGeogebraCommonKernelStatisticsAlgoFit_makeMatrixes(self);
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)makeFunction {
  return OrgGeogebraCommonKernelStatisticsAlgoFit_makeFunction(self);
}

- (IOSDoubleArray *)getCoeffs {
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithLength:functionsize_];
  for (jint i = 0; i < functionsize_; i++) {
    *IOSDoubleArray_GetRef(ret, i) = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(P_)) getEntryWithInt:functionsize_ - i - 1 withInt:0];
  }
  return ret;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFit", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFit", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "makeMatrixes", NULL, "Z", 0x12, NULL, NULL },
    { "makeFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x12, NULL, NULL },
    { "getCoeffs", NULL, "[D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pointlist_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "functionlist_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "fitfunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "datasize_", NULL, 0x2, "I", NULL, NULL,  },
    { "functionsize_", NULL, 0x2, "I", NULL, NULL,  },
    { "functionarray_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoFunctionable;", NULL, NULL,  },
    { "M_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
    { "Y_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
    { "P_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoFit = { 2, "AlgoFit", "org.geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoFit;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoFit_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoFit *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *pointlist, OrgGeogebraCommonKernelGeosGeoList *functionlist) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->datasize_ = 0;
  self->functionsize_ = 0;
  self->functionarray_ = nil;
  self->M_ = nil;
  self->Y_ = nil;
  self->P_ = nil;
  self->pointlist_ = pointlist;
  self->functionlist_ = functionlist;
  self->fitfunction_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoFit_compute(self);
  [self->fitfunction_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoFit *new_OrgGeogebraCommonKernelStatisticsAlgoFit_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *pointlist, OrgGeogebraCommonKernelGeosGeoList *functionlist) {
  OrgGeogebraCommonKernelStatisticsAlgoFit *self = [OrgGeogebraCommonKernelStatisticsAlgoFit alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFit_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, pointlist, functionlist);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFit_compute(OrgGeogebraCommonKernelStatisticsAlgoFit *self) {
  OrgGeogebraCommonKernelGeosGeoElement *geo1 = nil;
  OrgGeogebraCommonKernelGeosGeoElement *geo2 = nil;
  self->datasize_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->pointlist_)) size];
  self->functionsize_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->functionlist_)) size];
  self->functionarray_ = [IOSObjectArray newArrayWithLength:self->functionsize_ type:OrgGeogebraCommonKernelGeosGeoFunctionable_class_()];
  self->M_ = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(self->datasize_, self->functionsize_);
  self->Y_ = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(self->datasize_, 1);
  self->P_ = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(self->functionsize_, 1);
  if (![self->pointlist_ isDefined] || ![self->functionlist_ isDefined] || (self->functionsize_ > self->datasize_) || (self->functionsize_ < 1) || (self->datasize_ < 1)) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->fitfunction_)) setUndefined];
    return;
  }
  geo1 = [self->functionlist_ getWithInt:0];
  geo2 = [self->pointlist_ getWithInt:0];
  if (!([OrgGeogebraCommonKernelGeosGeoFunctionable_class_() isInstance:geo1]) || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isGeoPoint]) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->fitfunction_)) setUndefined];
    return;
  }
  @try {
    if (!OrgGeogebraCommonKernelStatisticsAlgoFit_makeMatrixes(self)) {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->fitfunction_)) setUndefined];
      return;
    }
    id<OrgApacheCommonsMathLinearDecompositionSolver> solver = [new_OrgApacheCommonsMathLinearQRDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(self->M_) getSolver];
    if ([((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(solver)) isNonSingular]) {
      self->P_ = [solver solveWithOrgApacheCommonsMathLinearRealMatrix:self->Y_];
      self->fitfunction_ = OrgGeogebraCommonKernelStatisticsAlgoFit_makeFunction(self);
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->fitfunction_)) setUndefined];
    }
  }
  @catch (JavaLangThrowable *t) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->fitfunction_)) setUndefined];
  }
}

jboolean OrgGeogebraCommonKernelStatisticsAlgoFit_makeMatrixes(OrgGeogebraCommonKernelStatisticsAlgoFit *self) {
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  OrgGeogebraCommonKernelGeosGeoPoint *point = nil;
  jdouble x, y;
  for (jint i = 0; i < self->functionsize_; i++) {
    geo = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->functionlist_)) getWithInt:i];
    if (!([OrgGeogebraCommonKernelGeosGeoFunctionable_class_() isInstance:geo])) {
      return NO;
    }
    (void) IOSObjectArray_Set(nil_chk(self->functionarray_), i, (id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast([self->functionlist_ getWithInt:i], @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable)));
  }
  self->M_ = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(self->datasize_, self->functionsize_);
  self->Y_ = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(self->datasize_, 1);
  for (jint r = 0; r < self->datasize_; r++) {
    geo = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->pointlist_)) getWithInt:r];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      return NO;
    }
    point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class]);
    x = [point getX];
    y = [point getY];
    [self->Y_ setEntryWithInt:r withInt:0 withDouble:y];
    for (jint c = 0; c < self->functionsize_; c++) {
      [self->M_ setEntryWithInt:r withInt:c withDouble:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(IOSObjectArray_Get(nil_chk(self->functionarray_), c))) getGeoFunction])) evaluateWithDouble:x]];
    }
  }
  return YES;
}

OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelStatisticsAlgoFit_makeFunction(OrgGeogebraCommonKernelStatisticsAlgoFit *self) {
  jdouble p;
  OrgGeogebraCommonKernelGeosGeoFunction *gf = nil;
  OrgGeogebraCommonKernelGeosGeoFunction *product = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
  p = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(self->P_)) getEntryWithInt:0 withInt:0];
  gf = [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->functionlist_)) getWithInt:0], @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction];
  self->fitfunction_ = OrgGeogebraCommonKernelGeosGeoFunction_multWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withOrgGeogebraCommonKernelGeosGeoFunction_(self->fitfunction_, p, gf);
  for (jint i = 1; i < self->functionsize_; i++) {
    p = [self->P_ getEntryWithInt:i withInt:0];
    gf = [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast([self->functionlist_ getWithInt:i], @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction];
    product = OrgGeogebraCommonKernelGeosGeoFunction_multWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withOrgGeogebraCommonKernelGeosGeoFunction_(product, p, gf);
    self->fitfunction_ = OrgGeogebraCommonKernelGeosGeoFunction_addWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(self->fitfunction_, self->fitfunction_, product);
  }
  return self->fitfunction_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoFit)
