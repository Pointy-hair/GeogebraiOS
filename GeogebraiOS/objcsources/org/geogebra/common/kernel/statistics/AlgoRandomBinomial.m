//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoRandomBinomial.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoTwoNumFunction.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoRandomBinomial.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial ()

- (jint)randomBinomialWithDouble:(jdouble)n
                      withDouble:(jdouble)p;

@end

__attribute__((unused)) static jint OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial_randomBinomialWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial *self, jdouble n, jdouble p);

@implementation OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b {
  OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_RandomBinomial();
}

- (void)compute {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    if ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble] < 0) [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
    else {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial_randomBinomialWithDouble_withDouble_(self, J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble]), [b_ getDouble])];
    }
  }
  else [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
}

- (void)setRandomValueWithDouble:(jdouble)d {
  d = JavaLangMath_roundWithDouble_(OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(d));
  if (d >= 0 && d <= [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:d];
    [num_ updateRepaint];
  }
}

- (jint)randomBinomialWithDouble:(jdouble)n
                      withDouble:(jdouble)p {
  return OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial_randomBinomialWithDouble_withDouble_(self, n, p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoRandomBinomial", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setRandomValueWithDouble:", "setRandomValue", "V", 0x1, NULL, NULL },
    { "randomBinomialWithDouble:withDouble:", "randomBinomial", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial = { 2, "AlgoRandomBinomial", "org.geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b) {
  (void) OrgGeogebraCommonKernelAlgosAlgoTwoNumFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) addRandomGeoWithOrgGeogebraCommonKernelGeosGeoElement:self->num_];
}

OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial *new_OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b) {
  OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial *self = [OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial alloc];
  OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

jint OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial_randomBinomialWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial *self, jdouble n, jdouble p) {
  jint count = 0;
  for (jint i = 0; i < n; i++) {
    if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getRandomNumber] < p) count++;
  }
  return count;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoRandomBinomial)
