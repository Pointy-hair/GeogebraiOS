//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/AlgoRSquare.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/statistics/AlgoRSquare.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoRSquare () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  id<OrgGeogebraCommonKernelGeosGeoFunctionable> function_;
  OrgGeogebraCommonKernelGeosGeoNumeric *r2_;
  jint size_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRSquare, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRSquare, function_, id<OrgGeogebraCommonKernelGeosGeoFunctionable>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRSquare, r2_, OrgGeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoRSquare_compute(OrgGeogebraCommonKernelStatisticsAlgoRSquare *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoRSquare

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList
             withOrgGeogebraCommonKernelGeosGeoFunctionable:(id<OrgGeogebraCommonKernelGeosGeoFunctionable>)function {
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(self, cons, label, inputList, function);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList
             withOrgGeogebraCommonKernelGeosGeoFunctionable:(id<OrgGeogebraCommonKernelGeosGeoFunctionable>)function {
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(self, cons, inputList, function);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_RSquare();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  IOSObjectArray_Set(input_, 1, [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(function_)) toGeoElement]);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:r2_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getRSquare {
  return r2_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(function_);
  RELEASE_(r2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoFunctionable:", "AlgoRSquare", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoFunctionable:", "AlgoRSquare", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getRSquare", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "function_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunctionable;", NULL, NULL,  },
    { "r2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoRSquare = { 2, "AlgoRSquare", "org.geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoRSquare;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(OrgGeogebraCommonKernelStatisticsAlgoRSquare *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList, id<OrgGeogebraCommonKernelGeosGeoFunctionable> function) {
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(self, cons, inputList, function);
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->r2_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoRSquare *new_OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList, id<OrgGeogebraCommonKernelGeosGeoFunctionable> function) {
  OrgGeogebraCommonKernelStatisticsAlgoRSquare *self = [OrgGeogebraCommonKernelStatisticsAlgoRSquare alloc];
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(self, cons, label, inputList, function);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(OrgGeogebraCommonKernelStatisticsAlgoRSquare *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *inputList, id<OrgGeogebraCommonKernelGeosGeoFunctionable> function) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_set_inputList_(self, inputList);
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_set_function_(self, function);
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_setAndConsume_r2_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoRSquare *new_OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *inputList, id<OrgGeogebraCommonKernelGeosGeoFunctionable> function) {
  OrgGeogebraCommonKernelStatisticsAlgoRSquare *self = [OrgGeogebraCommonKernelStatisticsAlgoRSquare alloc];
  OrgGeogebraCommonKernelStatisticsAlgoRSquare_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunctionable_(self, cons, inputList, function);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoRSquare_compute(OrgGeogebraCommonKernelStatisticsAlgoRSquare *self) {
  self->size_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(self->function_)) toGeoElement])) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->r2_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelGeosGeoFunction *funGeo = [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(self->function_)) getGeoFunction];
  jdouble sumyy = 0.0;
  jdouble sumy = 0.0;
  jdouble syy = 0.0;
  jdouble errorsum = 0.0;
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  OrgGeogebraCommonKernelGeosGeoPoint *point = nil;
  jdouble x, y, v;
  for (jint i = 0; i < self->size_; i++) {
    geo = [self->inputList_ getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class]);
      x = [point getX];
      y = [point getY];
      v = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(funGeo)) evaluateWithDouble:x];
      errorsum += (v - y) * (v - y);
      sumy += y;
      sumyy += y * y;
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->r2_)) setUndefined];
      return;
    }
  }
  syy = sumyy - sumy * sumy / self->size_;
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->r2_)) setValueWithDouble:1 - errorsum / syy];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoRSquare)
