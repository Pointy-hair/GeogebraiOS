//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/AlgoFrequencyTable.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoBarChart.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/statistics/AlgoFrequency.h"
#include "org/geogebra/common/kernel/statistics/AlgoFrequencyTable.h"
#include "org/geogebra/common/kernel/statistics/AlgoHistogram.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"

@class OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum;

@interface OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable () {
 @public
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *type_;
  OrgGeogebraCommonKernelGeosGeoList *dataList_;
  OrgGeogebraCommonKernelGeosGeoList *classList_;
  OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative_;
  OrgGeogebraCommonKernelGeosGeoBoolean *useDensity_;
  OrgGeogebraCommonKernelGeosGeoNumeric *density_;
  OrgGeogebraCommonKernelGeosGeoNumeric *scale__;
  OrgGeogebraCommonKernelGeosGeoNumeric *chart_;
  OrgGeogebraCommonKernelGeosGeoText *table_;
  OrgGeogebraCommonKernelStatisticsAlgoFrequency *freq_;
  JavaLangStringBuilder *sb_;
}

- (void)createTable;

- (void)createLaTeXTableWithBoolean:(jboolean)useClassList;

- (void)createLaTeXTableDWithBoolean:(jboolean)useClassList;

- (void)createLaTeXTableMQWithBoolean:(jboolean)useClassList;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, type_, OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, dataList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, classList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, isCumulative_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, useDensity_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, density_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, scale__, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, chart_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, table_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, freq_, OrgGeogebraCommonKernelStatisticsAlgoFrequency *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableDWithBoolean_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableMQWithBoolean_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList);

typedef NS_ENUM(NSUInteger, OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_STANDARD = 0,
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_HISTOGRAM = 1,
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_BARCHART = 2,
};

@interface OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values();

+ (OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)

FOUNDATION_EXPORT OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[];

#define OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_STANDARD OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_STANDARD]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum, STANDARD)

#define OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_HISTOGRAM OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_HISTOGRAM]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum, HISTOGRAM)

#define OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_BARCHART OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_BARCHART]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum, BARCHART)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)

@implementation OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable

- (void)createTable {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(self);
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)classList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, isCumulative, classList, dataList);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)classList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)scale_ {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, scale_);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)classList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)density {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)classList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)density
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)scale_ {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)classList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)dataList
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)density
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)scale_ {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)chart {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, chart);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)chart {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, chart);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_FrequencyTable();
}

- (void)setInputOutput {
  {
    JavaUtilArrayList *tempList;
    switch ([type_ ordinal]) {
      case OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_HISTOGRAM:
      case OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_BARCHART:
      OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
      IOSObjectArray_Set(input_, 0, chart_);
      break;
      case OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_STANDARD:
      tempList = [new_JavaUtilArrayList_init() autorelease];
      if (isCumulative_ != nil) [tempList addWithId:isCumulative_];
      if (classList_ != nil) [tempList addWithId:classList_];
      [tempList addWithId:dataList_];
      if (useDensity_ != nil) [tempList addWithId:useDensity_];
      if (density_ != nil) [tempList addWithId:density_];
      if (scale__ != nil) [tempList addWithId:scale__];
      OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[tempList size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
      OrgGeogebraCommonKernelAlgosAlgoElement_set_input_(self, [tempList toArrayWithNSObjectArray:input_]);
      break;
    }
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:table_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoText *)getResult {
  return table_;
}

- (IOSObjectArray *)getValueString {
  if (![((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(table_)) isDefined]) {
    return nil;
  }
  return strValue_;
}

- (IOSObjectArray *)getFrequencyString {
  if (![((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(table_)) isDefined]) {
    return nil;
  }
  return strFrequency_;
}

- (IOSObjectArray *)getHeaderString {
  if (![((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(table_)) isDefined]) {
    return nil;
  }
  return strHeader_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(self);
}

- (void)createLaTeXTableWithBoolean:(jboolean)useClassList {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, useClassList);
}

- (void)createLaTeXTableDWithBoolean:(jboolean)useClassList {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableDWithBoolean_(self, useClassList);
}

- (void)createLaTeXTableMQWithBoolean:(jboolean)useClassList {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableMQWithBoolean_(self, useClassList);
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(dataList_);
  RELEASE_(classList_);
  RELEASE_(isCumulative_);
  RELEASE_(useDensity_);
  RELEASE_(density_);
  RELEASE_(scale__);
  RELEASE_(chart_);
  RELEASE_(table_);
  RELEASE_(freq_);
  RELEASE_(strHeader_);
  RELEASE_(strValue_);
  RELEASE_(strFrequency_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createTable", NULL, "V", 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "getValueString", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFrequencyString", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getHeaderString", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "createLaTeXTableWithBoolean:", "createLaTeXTable", "V", 0x2, NULL, NULL },
    { "createLaTeXTableDWithBoolean:", "createLaTeXTableD", "V", 0x2, NULL, NULL },
    { "createLaTeXTableMQWithBoolean:", "createLaTeXTableMQ", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x2, "Lorg.geogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;", NULL, NULL,  },
    { "dataList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "classList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "isCumulative_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "useDensity_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "density_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "scale__", "scale", 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "chart_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "table_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "freq_", NULL, 0x2, "Lorg.geogebra.common.kernel.statistics.AlgoFrequency;", NULL, NULL,  },
    { "strHeader_", NULL, 0x0, "[Ljava.lang.String;", NULL, NULL,  },
    { "strValue_", NULL, 0x0, "[Ljava.lang.String;", NULL, NULL,  },
    { "strFrequency_", NULL, 0x0, "[Ljava.lang.String;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable = { 2, "AlgoFrequencyTable", "org.geogebra.common.kernel.statistics", NULL, 0x1, 18, methods, 14, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_table_(self, new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self->table_ setAbsoluteScreenLocWithInt:0 withInt:0];
  [self->table_ setAbsoluteScreenLocActiveWithBoolean:YES];
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, nil, nil, nil);
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, isCumulative, classList, dataList);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList, OrgGeogebraCommonKernelGeosGeoNumeric *scale_) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, nil, nil, scale_);
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList, OrgGeogebraCommonKernelGeosGeoNumeric *scale_) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, scale_);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList, OrgGeogebraCommonKernelGeosGeoBoolean *useDensity, OrgGeogebraCommonKernelGeosGeoNumeric *density) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density, nil);
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList, OrgGeogebraCommonKernelGeosGeoBoolean *useDensity, OrgGeogebraCommonKernelGeosGeoNumeric *density) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList, OrgGeogebraCommonKernelGeosGeoBoolean *useDensity, OrgGeogebraCommonKernelGeosGeoNumeric *density, OrgGeogebraCommonKernelGeosGeoNumeric *scale_) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, scale_);
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList, OrgGeogebraCommonKernelGeosGeoBoolean *useDensity, OrgGeogebraCommonKernelGeosGeoNumeric *density, OrgGeogebraCommonKernelGeosGeoNumeric *scale_) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList, OrgGeogebraCommonKernelGeosGeoBoolean *useDensity, OrgGeogebraCommonKernelGeosGeoNumeric *density, OrgGeogebraCommonKernelGeosGeoNumeric *scale_) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strHeader_(self, nil);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strValue_(self, nil);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strFrequency_(self, nil);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_classList_(self, classList);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_dataList_(self, dataList);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_isCumulative_(self, isCumulative);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_useDensity_(self, useDensity);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_density_(self, density);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_scale__(self, scale_);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_freq_(self, new_OrgGeogebraCommonKernelStatisticsAlgoFrequency_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons, isCumulative, classList, dataList, useDensity, density, scale_));
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->freq_];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(self);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_type_(self, OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_get_STANDARD());
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(self);
  ((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_))->isTextCommand__ = YES;
  [self->table_ setLaTeXWithBoolean:YES withBoolean:NO];
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoBoolean *isCumulative, OrgGeogebraCommonKernelGeosGeoList *classList, OrgGeogebraCommonKernelGeosGeoList *dataList, OrgGeogebraCommonKernelGeosGeoBoolean *useDensity, OrgGeogebraCommonKernelGeosGeoNumeric *density, OrgGeogebraCommonKernelGeosGeoNumeric *scale_) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *chart) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, chart);
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *chart) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, chart);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *chart) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strHeader_(self, nil);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strValue_(self, nil);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strFrequency_(self, nil);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(chart)) getParentAlgorithm];
  if ([algo isKindOfClass:[OrgGeogebraCommonKernelStatisticsAlgoHistogram class]]) {
    OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_type_(self, OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_get_HISTOGRAM());
  }
  else {
    OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_type_(self, OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_get_BARCHART());
  }
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_chart_(self, chart);
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(self);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(self);
  ((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_))->isTextCommand__ = YES;
  [self->table_ setLaTeXWithBoolean:YES withBoolean:NO];
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *chart) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, chart);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self) {
  {
    OrgGeogebraCommonKernelStatisticsAlgoHistogram *algoHistogram;
    IOSDoubleArray *leftBorder;
    IOSDoubleArray *f;
    OrgGeogebraCommonKernelAlgosAlgoBarChart *algoBarChart;
    IOSDoubleArray *f2;
    jboolean useDens;
    OrgGeogebraCommonKernelGeosGeoList *fr;
    jint length;
    switch ([self->type_ ordinal]) {
      case OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_HISTOGRAM:
      algoHistogram = (OrgGeogebraCommonKernelStatisticsAlgoHistogram *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->chart_)) getParentAlgorithm], [OrgGeogebraCommonKernelStatisticsAlgoHistogram class]);
      if (algoHistogram == nil || [algoHistogram getLeftBorder] == nil || [algoHistogram getYValue] == nil) {
        [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
        return;
      }
      OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strHeader_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
      IOSObjectArray_Set(self->strHeader_, 0, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Interval"]);
      if ([((OrgGeogebraCommonKernelStatisticsAlgoHistogram *) nil_chk(algoHistogram)) getUseDensityGeo] != nil && [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast([algoHistogram getUseDensityGeo], [OrgGeogebraCommonKernelGeosGeoBoolean class])))) getBoolean]) {
        IOSObjectArray_Set(self->strHeader_, 1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Frequency"]);
      }
      else {
        IOSObjectArray_Set(self->strHeader_, 1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Count"]);
      }
      leftBorder = [algoHistogram getLeftBorder];
      f = [algoHistogram getYValue];
      OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strValue_(self, [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(f))->size_ type:NSString_class_()]);
      OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strFrequency_(self, [IOSObjectArray newArrayWithLength:f->size_ type:NSString_class_()]);
      for (jint i = 0; i < f->size_; i++) {
        IOSObjectArray_Set(self->strValue_, i, [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:IOSDoubleArray_Get(nil_chk(leftBorder), i) withOrgGeogebraCommonKernelStringTemplate:[((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
        IOSObjectArray_Set(self->strFrequency_, i, [self->kernel_ formatWithDouble:IOSDoubleArray_Get(f, i) withOrgGeogebraCommonKernelStringTemplate:[self->table_ getStringTemplate]]);
      }
      OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, YES);
      break;
      case OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_BARCHART:
      algoBarChart = (OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->chart_)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoBarChart class]);
      if (algoBarChart == nil || [algoBarChart getValue] == nil || [algoBarChart getYValue] == nil) {
        [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
        return;
      }
      OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strHeader_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
      IOSObjectArray_Set(self->strHeader_, 0, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Value"]);
      IOSObjectArray_Set(self->strHeader_, 1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Count"]);
      OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strValue_(self, [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algoBarChart)) getValue]);
      f2 = [algoBarChart getYValue];
      OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strFrequency_(self, [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(f2))->size_ type:NSString_class_()]);
      for (jint i = 0; i < f2->size_; i++) {
        IOSObjectArray_Set(self->strFrequency_, i, [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:IOSDoubleArray_Get(f2, i) withOrgGeogebraCommonKernelStringTemplate:[((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
      }
      OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, NO);
      break;
      case OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_STANDARD:
      if (![((OrgGeogebraCommonKernelGeosGeoList *) nil_chk([((OrgGeogebraCommonKernelStatisticsAlgoFrequency *) nil_chk(self->freq_)) getResult])) isDefined]) {
        [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
        return;
      }
      useDens = (self->useDensity_ != nil && [self->useDensity_ getBoolean]);
      fr = [self->freq_ getResult];
      length = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(fr)) size];
      if (self->classList_ == nil) {
        if (self->scale__ != nil) {
          useDens = YES;
        }
        OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strHeader_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
        IOSObjectArray_Set(self->strHeader_, 0, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Value"]);
        if (useDens) {
          if (self->scale__ != nil) {
            jdouble scaleValue = [self->scale__ getDouble];
            if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(scaleValue, 1.0)) {
              IOSObjectArray_Set(self->strHeader_, 1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.Count"]);
            }
            else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(scaleValue * [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->dataList_)) size], 1)) {
              IOSObjectArray_Set(self->strHeader_, 1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.RelativeFrequency"]);
            }
            else {
              IOSObjectArray_Set(self->strHeader_, 1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.Frequency"]);
            }
          }
          else {
            IOSObjectArray_Set(self->strHeader_, 1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.Frequency"]);
          }
        }
        else {
          IOSObjectArray_Set(self->strHeader_, 1, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.Count"]);
        }
        OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strValue_(self, [IOSObjectArray newArrayWithLength:length type:NSString_class_()]);
        OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strFrequency_(self, [IOSObjectArray newArrayWithLength:length type:NSString_class_()]);
        OrgGeogebraCommonKernelGeosGeoList *va = [self->freq_ getValue];
        for (jint i = 0; i < length; i++) {
          IOSObjectArray_Set(self->strValue_, i, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(va)) getWithInt:i])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
          IOSObjectArray_Set(self->strFrequency_, i, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([fr getWithInt:i])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[self->table_ getStringTemplate]]);
        }
        OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, NO);
      }
      else {
        if (![self->classList_ isDefined]) {
          [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
          return;
        }
        OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strHeader_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
        IOSObjectArray_Set(self->strHeader_, 0, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Interval"]);
        IOSObjectArray_Set(self->strHeader_, 1, useDens ? [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Frequency"] : [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Count"]);
        OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strValue_(self, [IOSObjectArray newArrayWithLength:length + 1 type:NSString_class_()]);
        OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strFrequency_(self, [IOSObjectArray newArrayWithLength:length + 1 type:NSString_class_()]);
        for (jint i = 0; i < length; i++) {
          IOSObjectArray_Set(self->strValue_, i, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->classList_ getWithInt:i])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
          IOSObjectArray_Set(self->strFrequency_, i, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([fr getWithInt:i])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[self->table_ getStringTemplate]]);
        }
        IOSObjectArray_Set(self->strValue_, length, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->classList_ getWithInt:length])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:[((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
        OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, YES);
      }
      break;
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setTextStringWithNSString:[((JavaLangStringBuilder *) nil_chk(self->sb_)) description]];
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList) {
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:nil]) {
    OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableMQWithBoolean_(self, useClassList);
  }
  else {
    OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableDWithBoolean_(self, useClassList);
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableDWithBoolean_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList) {
  [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
  [self->sb_ appendWithNSString:@"\\begin{array}{c|c}"];
  [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strHeader_), 0)];
  [self->sb_ appendWithNSString:@"&\\text{"];
  [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strHeader_, 1)];
  [self->sb_ appendWithNSString:@"} \\\\\\hline "];
  if (useClassList) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->strFrequency_))->size_ - 1; i++) {
      [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strValue_), i)];
      [self->sb_ appendWithNSString:@"\\text{ -- }"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strValue_, i + 1)];
      [self->sb_ appendWithNSString:@"&"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strFrequency_, i)];
      [self->sb_ appendWithNSString:@"\\\\"];
    }
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->strFrequency_))->size_; i++) {
      [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strValue_), i)];
      [self->sb_ appendWithNSString:@"&"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strFrequency_, i)];
      [self->sb_ appendWithNSString:@"\\\\"];
    }
  }
  [self->sb_ appendWithNSString:@"\\end{array}"];
}

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableMQWithBoolean_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList) {
  [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
  [self->sb_ appendWithNSString:@"\\ggbtable{\\ggbtrlb{\\ggbtd{"];
  [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strHeader_), 0)];
  [self->sb_ appendWithNSString:@"}\\ggbtdll{\\text{"];
  [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strHeader_, 1)];
  [self->sb_ appendWithNSString:@"}}}\\ggbtr{\\ggbtd{ "];
  if (useClassList) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->strFrequency_))->size_ - 1; i++) {
      [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strValue_), i)];
      [self->sb_ appendWithNSString:@"\\text{ -- }"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strValue_, i + 1)];
      [self->sb_ appendWithNSString:@"}\\ggbtdll{"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strFrequency_, i)];
      [self->sb_ appendWithNSString:@"}\\ggbtr{\\ggbtd{"];
    }
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->strFrequency_))->size_; i++) {
      [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strValue_), i)];
      [self->sb_ appendWithNSString:@"}\\ggbtdll{"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strFrequency_, i)];
      [self->sb_ appendWithNSString:@"}}\\ggbtr{\\ggbtd{"];
    }
  }
  [self->sb_ appendWithNSString:@"}}}"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[3];

@implementation OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values() {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_ count:3 type:OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values();
}

+ (OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *e = OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum class]) {
    OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_STANDARD = new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(@"STANDARD", 0);
    OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_HISTOGRAM = new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(@"HISTOGRAM", 1);
    OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_BARCHART = new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(@"BARCHART", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD", "STANDARD", 0x4019, "Lorg.geogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;", &OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_STANDARD, NULL,  },
    { "HISTOGRAM", "HISTOGRAM", 0x4019, "Lorg.geogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;", &OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_HISTOGRAM, NULL,  },
    { "BARCHART", "BARCHART", 0x4019, "Lorg.geogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;", &OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_BARCHART, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum = { 2, "inputType", "org.geogebra.common.kernel.statistics", "AlgoFrequencyTable", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/statistics/AlgoFrequencyTable$inputType;>;" };
  return &_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *new_OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *self = [OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)
