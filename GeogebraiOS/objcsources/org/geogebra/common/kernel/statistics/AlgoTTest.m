//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoTTest.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.h"
#include "org/apache/commons/math/stat/inference/TTestImpl.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/statistics/AlgoTTest.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoTTest () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geoList_;
  OrgGeogebraCommonKernelGeosGeoNumeric *hypMean_, *mean_, *sd_, *n_;
  OrgGeogebraCommonKernelGeosGeoText *tail_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  OrgApacheCommonsMathStatInferenceTTestImpl *tTestImpl_;
  IOSDoubleArray *val_;
  jdouble p_, testStat_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, geoList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, hypMean_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, mean_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, sd_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, n_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, tail_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, result_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, tTestImpl_, OrgApacheCommonsMathStatInferenceTTestImpl *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest, val_, IOSDoubleArray *)

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoTTest *self, jdouble p, jdouble testStatistic);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoTTest_compute(OrgGeogebraCommonKernelStatisticsAlgoTTest *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoTTest

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail {
  OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, geoList, hypMean, tail);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)mean
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)sd
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail {
  OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, mean, sd, n, hypMean, tail);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)mean
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)sd
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail {
  OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_TTest();
}

- (void)setInputOutput {
  if (geoList_ != nil) {
    input_ = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(input_, 0, geoList_);
    (void) IOSObjectArray_Set(input_, 1, hypMean_);
    (void) IOSObjectArray_Set(input_, 2, tail_);
  }
  else {
    input_ = [IOSObjectArray newArrayWithLength:5 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(input_, 0, mean_);
    (void) IOSObjectArray_Set(input_, 1, sd_);
    (void) IOSObjectArray_Set(input_, 2, n_);
    (void) IOSObjectArray_Set(input_, 3, hypMean_);
    (void) IOSObjectArray_Set(input_, 4, tail_);
  }
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic {
  return OrgGeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(self, p, testStatistic);
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoTTest_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoTTest", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoTTest", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoTTest", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "adjustedPValueWithDouble:withDouble:", "adjustedPValue", "D", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "hypMean_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "tTestImpl_", NULL, 0x2, "Lorg.apache.commons.math.stat.inference.TTestImpl;", NULL, NULL,  },
    { "val_", NULL, 0x2, "[D", NULL, NULL,  },
    { "p_", NULL, 0x2, "D", NULL, NULL,  },
    { "testStat_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoTTest = { 2, "AlgoTTest", "org.geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoTTest;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoTTest *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList, OrgGeogebraCommonKernelGeosGeoNumeric *hypMean, OrgGeogebraCommonKernelGeosGeoText *tail) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->geoList_ = geoList;
  self->hypMean_ = hypMean;
  self->tail_ = tail;
  self->mean_ = nil;
  self->sd_ = nil;
  self->n_ = nil;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoTTest_compute(self);
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoTTest *new_OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList, OrgGeogebraCommonKernelGeosGeoNumeric *hypMean, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoTTest *self = [OrgGeogebraCommonKernelStatisticsAlgoTTest alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, geoList, hypMean, tail);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoTTest *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *mean, OrgGeogebraCommonKernelGeosGeoNumeric *sd, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *hypMean, OrgGeogebraCommonKernelGeosGeoText *tail) {
  (void) OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoTTest *new_OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *mean, OrgGeogebraCommonKernelGeosGeoNumeric *sd, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *hypMean, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoTTest *self = [OrgGeogebraCommonKernelStatisticsAlgoTTest alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, mean, sd, n, hypMean, tail);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoTTest *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *mean, OrgGeogebraCommonKernelGeosGeoNumeric *sd, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *hypMean, OrgGeogebraCommonKernelGeosGeoText *tail) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->geoList_ = nil;
  self->hypMean_ = hypMean;
  self->tail_ = tail;
  self->mean_ = mean;
  self->sd_ = sd;
  self->n_ = n;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoTTest_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoTTest *new_OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *mean, OrgGeogebraCommonKernelGeosGeoNumeric *sd, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *hypMean, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoTTest *self = [OrgGeogebraCommonKernelStatisticsAlgoTTest alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  return self;
}

jdouble OrgGeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoTTest *self, jdouble p, jdouble testStatistic) {
  if (OrgGeogebraCommonUtilStringUtil_isNotEqualWithNSString_([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString])) {
    return p;
  }
  else if (([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@">"] && testStatistic > 0) || ([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@"<"] && testStatistic < 0)) {
    return p / 2;
  }
  else {
    return 1 - p / 2;
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoTTest_compute(OrgGeogebraCommonKernelStatisticsAlgoTTest *self) {
  if (!(OrgGeogebraCommonUtilStringUtil_isInequalityWithNSString_([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString]))) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  if (((IOSObjectArray *) nil_chk(self->input_))->size_ == 3) {
    jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
    if (![self->geoList_ isDefined] || size < 2) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    self->val_ = [IOSDoubleArray newArrayWithLength:size];
    for (jint i = 0; i < size; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getWithInt:i];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
        id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(self->val_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
    @try {
      if (self->tTestImpl_ == nil) self->tTestImpl_ = new_OrgApacheCommonsMathStatInferenceTTestImpl_init();
      self->testStat_ = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) tWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->hypMean_)) getDouble] withDoubleArray:self->val_];
      self->p_ = [self->tTestImpl_ tTestWithDouble:[self->hypMean_ getDouble] withDoubleArray:self->val_];
      self->p_ = OrgGeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(self, self->p_, self->testStat_);
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
      [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->p_)];
      [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->testStat_)];
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
    }
    @catch (OrgApacheCommonsMathMathException *e) {
      [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
    }
  }
  else {
    if ([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) getDouble] < 0 || [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble] < 2) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    @try {
      OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues *sumStats = new_OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues_initWithDouble_withDouble_withLong_withDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean_)) getDouble], [self->sd_ getDouble] * [self->sd_ getDouble], J2ObjCFpToLong([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble]), -1, -1, -1);
      if (self->tTestImpl_ == nil) self->tTestImpl_ = new_OrgApacheCommonsMathStatInferenceTTestImpl_init();
      self->testStat_ = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) tWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->hypMean_)) getDouble] withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats];
      self->p_ = [self->tTestImpl_ tTestWithDouble:[self->hypMean_ getDouble] withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats];
      self->p_ = OrgGeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(self, self->p_, self->testStat_);
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
      [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->p_)];
      [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->testStat_)];
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    @catch (OrgApacheCommonsMathMathException *e) {
      [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoTTest)
