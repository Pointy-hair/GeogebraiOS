//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoRandomNormal.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoTwoNumFunction.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoRandomNormal.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoRandomNormal ()

- (jdouble)randomNormalWithDouble:(jdouble)mean
                       withDouble:(jdouble)sd;

@end

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelStatisticsAlgoRandomNormal_randomNormalWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoRandomNormal *self, jdouble mean, jdouble sd);

@implementation OrgGeogebraCommonKernelStatisticsAlgoRandomNormal

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b {
  OrgGeogebraCommonKernelStatisticsAlgoRandomNormal_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_RandomNormal();
}

- (void)compute {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    if ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble] < 0) [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
    else [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:OrgGeogebraCommonKernelStatisticsAlgoRandomNormal_randomNormalWithDouble_withDouble_(self, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble], [b_ getDouble])];
  }
  else [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
}

- (jdouble)randomNormalWithDouble:(jdouble)mean
                       withDouble:(jdouble)sd {
  return OrgGeogebraCommonKernelStatisticsAlgoRandomNormal_randomNormalWithDouble_withDouble_(self, mean, sd);
}

- (void)setRandomValueWithDouble:(jdouble)d {
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:d];
  [num_ updateRepaint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoRandomNormal", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "randomNormalWithDouble:withDouble:", "randomNormal", "D", 0x2, NULL, NULL },
    { "setRandomValueWithDouble:", "setRandomValue", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoRandomNormal = { 2, "AlgoRandomNormal", "org.geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoRandomNormal;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoRandomNormal_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelStatisticsAlgoRandomNormal *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b) {
  (void) OrgGeogebraCommonKernelAlgosAlgoTwoNumFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) addRandomGeoWithOrgGeogebraCommonKernelGeosGeoElement:self->num_];
}

OrgGeogebraCommonKernelStatisticsAlgoRandomNormal *new_OrgGeogebraCommonKernelStatisticsAlgoRandomNormal_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b) {
  OrgGeogebraCommonKernelStatisticsAlgoRandomNormal *self = [OrgGeogebraCommonKernelStatisticsAlgoRandomNormal alloc];
  OrgGeogebraCommonKernelStatisticsAlgoRandomNormal_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

jdouble OrgGeogebraCommonKernelStatisticsAlgoRandomNormal_randomNormalWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoRandomNormal *self, jdouble mean, jdouble sd) {
  jdouble fac, rsq, v1, v2;
  do {
    v1 = 2.0 * [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getRandomNumber] - 1;
    v2 = 2.0 * [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getRandomNumber] - 1;
    rsq = v1 * v1 + v2 * v2;
  }
  while (rsq >= 1.0 || rsq == 0.0);
  fac = JavaLangMath_sqrtWithDouble_(-2.0 * JavaLangMath_logWithDouble_(rsq) / rsq);
  return v1 * fac * sd + mean;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoRandomNormal)
