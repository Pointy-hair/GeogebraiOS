//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoChiSquaredTest.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/distribution/ChiSquaredDistribution.h"
#include "org/apache/commons/math/distribution/ChiSquaredDistributionImpl.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoChiSquaredTest.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geoList1_, *geoList2_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  jdouble p_, testStat_;
  id<OrgApacheCommonsMathDistributionChiSquaredDistribution> chisquared_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest, geoList1_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest, geoList2_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest, result_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest, chisquared_, id<OrgApacheCommonsMathDistributionChiSquaredDistribution>)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_compute(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList2 {
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList, geoList2);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList2 {
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geoList, geoList2);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ChiSquaredTest();
}

- (void)setInputOutput {
  if (geoList2_ == nil) {
    input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(input_, 0, geoList1_);
  }
  else {
    input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(input_, 0, geoList1_);
    (void) IOSObjectArray_Set(input_, 1, geoList2_);
  }
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (id<OrgApacheCommonsMathDistributionChiSquaredDistribution>)getChiSquaredDistributionWithDouble:(jdouble)df {
  if (chisquared_ == nil || [chisquared_ getDegreesOfFreedom] != df) chisquared_ = new_OrgApacheCommonsMathDistributionChiSquaredDistributionImpl_initWithDouble_(df);
  return chisquared_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoChiSquaredTest", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoChiSquaredTest", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoChiSquaredTest", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getChiSquaredDistributionWithDouble:", "getChiSquaredDistribution", "Lorg.apache.commons.math.distribution.ChiSquaredDistribution;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoList2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "p_", NULL, 0x2, "D", NULL, NULL,  },
    { "testStat_", NULL, 0x2, "D", NULL, NULL,  },
    { "chisquared_", NULL, 0x2, "Lorg.apache.commons.math.distribution.ChiSquaredDistribution;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest = { 2, "AlgoChiSquaredTest", "org.geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  (void) OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geoList, nil);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *new_OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *self = [OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest alloc];
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList, OrgGeogebraCommonKernelGeosGeoList *geoList2) {
  (void) OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geoList, geoList2);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *new_OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList, OrgGeogebraCommonKernelGeosGeoList *geoList2) {
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *self = [OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest alloc];
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList, geoList2);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *geoList, OrgGeogebraCommonKernelGeosGeoList *geoList2) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->chisquared_ = nil;
  self->geoList1_ = geoList;
  self->geoList2_ = geoList2;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *new_OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *geoList, OrgGeogebraCommonKernelGeosGeoList *geoList2) {
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *self = [OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest alloc];
  OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geoList, geoList2);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest_compute(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest *self) {
  jint df;
  jint rows = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList1_)) size];
  jint columns = 0;
  if (![self->geoList1_ isDefined] || rows < 2) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  if (self->geoList2_ != nil) {
    if (![self->geoList2_ isDefined] || [self->geoList2_ size] != rows) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
  IOSObjectArray *observed = nil;
  IOSObjectArray *expected = nil;
  IOSObjectArray *diff = nil;
  if (![self->geoList1_ isMatrix]) {
    if (self->geoList2_ == nil) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    columns = 1;
    df = rows - 1;
    observed = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows, columns }];
    expected = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows, columns }];
    for (jint i = 0; i < rows; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [self->geoList1_ getWithInt:i];
      OrgGeogebraCommonKernelGeosGeoElement *geo2 = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList2_)) getWithInt:i];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo2]) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(observed, i)), 0) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(expected, i)), 0) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo2, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
  }
  else {
    columns = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([self->geoList1_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class])))) size];
    observed = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows, columns }];
    expected = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows, columns }];
    df = (columns - 1) * (rows - 1);
    for (jint i = 0; i < rows; i++) {
      for (jint j = 0; j < columns; j++) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([self->geoList1_ getWithInt:i], [OrgGeogebraCommonKernelGeosGeoList class])))) getWithInt:j];
        if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(observed, i)), j) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
        }
        else {
          [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
          return;
        }
        if (self->geoList2_ != nil) {
          OrgGeogebraCommonKernelGeosGeoElement *geo2 = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([self->geoList2_ getWithInt:i], [OrgGeogebraCommonKernelGeosGeoList class])))) getWithInt:j];
          if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo2]) {
            *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(expected, i)), j) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo2, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
          }
          else {
            [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
            return;
          }
        }
      }
    }
    if (self->geoList2_ == nil) {
      IOSDoubleArray *columnSum = [IOSDoubleArray newArrayWithLength:columns];
      for (jint j = 0; j < columns; j++) {
        *IOSDoubleArray_GetRef(columnSum, j) = 0;
      }
      IOSDoubleArray *rowSum = [IOSDoubleArray newArrayWithLength:rows];
      for (jint i = 0; i < rows; i++) {
        *IOSDoubleArray_GetRef(rowSum, i) = 0;
      }
      jdouble total = 0;
      for (jint i = 0; i < rows; i++) {
        for (jint j = 0; j < columns; j++) {
          *IOSDoubleArray_GetRef(rowSum, i) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(observed, i)), j);
          *IOSDoubleArray_GetRef(columnSum, j) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(observed, i)), j);
          total += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(observed, i)), j);
        }
      }
      for (jint i = 0; i < rows; i++) {
        for (jint j = 0; j < columns; j++) {
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(expected, i)), j) = IOSDoubleArray_Get(rowSum, i) * IOSDoubleArray_Get(columnSum, j) / total;
        }
      }
    }
  }
  diff = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rows, columns }];
  self->testStat_ = 0;
  for (jint i = 0; i < rows; i++) {
    for (jint j = 0; j < columns; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(diff, i)), j) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(observed), i)), j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(expected), i)), j)) * (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(observed, i)), j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(expected, i)), j)) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(expected, i)), j);
      self->testStat_ += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(diff, i)), j);
    }
  }
  @try {
    jdouble leftArea = [((id<OrgApacheCommonsMathDistributionChiSquaredDistribution>) nil_chk([self getChiSquaredDistributionWithDouble:df])) cumulativeProbabilityWithDouble:self->testStat_];
    self->p_ = 1 - leftArea;
  }
  @catch (JavaLangIllegalArgumentException *e) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->p_)];
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->testStat_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoChiSquaredTest)
