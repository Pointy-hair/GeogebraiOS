//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/AlgoTTestPaired.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/stat/inference/TTestImpl.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/statistics/AlgoTTestPaired.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoTTestPaired () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geoList0_, *geoList1_;
  OrgGeogebraCommonKernelGeosGeoText *tail_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  OrgApacheCommonsMathStatInferenceTTestImpl *tTestImpl_;
  IOSDoubleArray *val0_, *val1_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired, geoList0_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired, geoList1_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired, tail_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired, result_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired, tTestImpl_, OrgApacheCommonsMathStatInferenceTTestImpl *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired, val0_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired, val1_, IOSDoubleArray *)

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_adjustedPValueWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired *self, jdouble p, jdouble testStatistic);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_compute(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoTTestPaired

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList0
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList1
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail {
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, geoList0, geoList1, tail);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_TTestPaired();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList0_);
  IOSObjectArray_Set(input_, 1, geoList1_);
  IOSObjectArray_Set(input_, 2, tail_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic {
  return OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_adjustedPValueWithDouble_withDouble_(self, p, testStatistic);
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList0_);
  RELEASE_(geoList1_);
  RELEASE_(tail_);
  RELEASE_(result_);
  RELEASE_(tTestImpl_);
  RELEASE_(val0_);
  RELEASE_(val1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoTTestPaired", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "adjustedPValueWithDouble:withDouble:", "adjustedPValue", "D", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList0_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoList1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "tTestImpl_", NULL, 0x2, "Lorg.apache.commons.math.stat.inference.TTestImpl;", NULL, NULL,  },
    { "val0_", NULL, 0x2, "[D", NULL, NULL,  },
    { "val1_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoTTestPaired = { 2, "AlgoTTestPaired", "org.geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoTTestPaired;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList0, OrgGeogebraCommonKernelGeosGeoList *geoList1, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_set_geoList0_(self, geoList0);
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_set_geoList1_(self, geoList1);
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_set_tail_(self, tail);
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_setAndConsume_result_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_compute(self);
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoTTestPaired *new_OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList0, OrgGeogebraCommonKernelGeosGeoList *geoList1, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired *self = [OrgGeogebraCommonKernelStatisticsAlgoTTestPaired alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, geoList0, geoList1, tail);
  return self;
}

jdouble OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_adjustedPValueWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired *self, jdouble p, jdouble testStatistic) {
  if (OrgGeogebraCommonUtilStringUtil_isNotEqualWithNSString_([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString])) return p;
  else if (([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@">"] && testStatistic > 0) || ([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@"<"] && testStatistic < 0)) return p / 2;
  else return 1 - p / 2;
}

void OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_compute(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired *self) {
  if (!(OrgGeogebraCommonUtilStringUtil_isInequalityWithNSString_([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString]))) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  jdouble p, testStat;
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList0_)) size];
  if (![((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList1_)) isDefined] || [self->geoList1_ size] != size) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_setAndConsume_val0_(self, [IOSDoubleArray newArrayWithLength:size]);
  OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_setAndConsume_val1_(self, [IOSDoubleArray newArrayWithLength:size]);
  OrgGeogebraCommonKernelGeosGeoElement *geo0, *geo1;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> num0, num1;
  for (jint i = 0; i < size; i++) {
    geo0 = [self->geoList0_ getWithInt:i];
    geo1 = [self->geoList1_ getWithInt:i];
    if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo0] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo1]) {
      num0 = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo0, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      num1 = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo1, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      *IOSDoubleArray_GetRef(self->val0_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num0)) getDouble];
      *IOSDoubleArray_GetRef(self->val1_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num1)) getDouble];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
  @try {
    if (self->tTestImpl_ == nil) OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_setAndConsume_tTestImpl_(self, new_OrgApacheCommonsMathStatInferenceTTestImpl_init());
    testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) pairedTWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
    p = [self->tTestImpl_ pairedTTestWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
    testStat = [self->tTestImpl_ pairedTWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
    p = OrgGeogebraCommonKernelStatisticsAlgoTTestPaired_adjustedPValueWithDouble_withDouble_(self, p, testStat);
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
    [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, p) autorelease]];
    [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, testStat) autorelease]];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoTTestPaired)
