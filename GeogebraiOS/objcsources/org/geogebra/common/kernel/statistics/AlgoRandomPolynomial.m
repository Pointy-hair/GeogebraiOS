//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/AlgoRandomPolynomial.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/statistics/AlgoRandomPolynomial.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial () {
 @public
  id<OrgGeogebraCommonKernelArithmeticNumberValue> degree_, min_, max_;
  OrgGeogebraCommonKernelGeosGeoFunction *polynomial_;
  OrgGeogebraCommonKernelArithmeticFunction *f_;
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv_;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)randomCoefWithBoolean:(jboolean)acceptZero;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial, degree_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial, min_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial, max_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial, polynomial_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial, f_, OrgGeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial, fv_, OrgGeogebraCommonKernelArithmeticFunctionVariable *)

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_randomCoefWithBoolean_(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial *self, jboolean acceptZero);

@implementation OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)degree
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)min
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)max {
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, degree, min, max);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:polynomial_];
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(degree_)) toGeoElement], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(min_)) toGeoElement], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(max_)) toGeoElement] } count:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  if (![((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(degree_)) isDefined] || ![((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(min_)) isDefined] || ![((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(max_)) isDefined] || [degree_ getDouble] < 0) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(polynomial_)) setUndefined];
    return;
  }
  jint lower = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(min_)) getDouble]));
  jint upper = J2ObjCFpToInt(JavaLangMath_floorWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(max_)) getDouble]));
  if (lower > upper || (lower == 0 && upper == 0)) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(polynomial_)) setUndefined];
    return;
  }
  jint deg = J2ObjCFpToInt(JavaLangMath_floorWithDouble_([degree_ getDouble]));
  OrgGeogebraCommonKernelArithmeticExpressionNode *varExpr = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv_) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *newExpr = OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_randomCoefWithBoolean_(self, deg != 0);
  for (jint i = 1; i <= deg; i++) {
    newExpr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([varExpr powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, i) autorelease]])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_randomCoefWithBoolean_(self, i != deg)])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:newExpr];
  }
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f_)) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:newExpr withOrgGeogebraCommonKernelArithmeticFunctionVariable:fv_];
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(polynomial_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:f_];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)randomCoefWithBoolean:(jboolean)acceptZero {
  return OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_randomCoefWithBoolean_(self, acceptZero);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_RandomPolynomial();
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getResult {
  return polynomial_;
}

- (void)dealloc {
  RELEASE_(degree_);
  RELEASE_(min_);
  RELEASE_(max_);
  RELEASE_(polynomial_);
  RELEASE_(f_);
  RELEASE_(fv_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoRandomPolynomial", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "randomCoefWithBoolean:", "randomCoef", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "degree_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "min_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "max_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "polynomial_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "fv_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial = { 2, "AlgoRandomPolynomial", "org.geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> degree, id<OrgGeogebraCommonKernelArithmeticNumberValue> min, id<OrgGeogebraCommonKernelArithmeticNumberValue> max) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_set_degree_(self, degree);
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_set_min_(self, min);
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_set_max_(self, max);
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_setAndConsume_fv_(self, new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(self->kernel_));
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_setAndConsume_f_(self, new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->fv_) autorelease], self->fv_));
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_setAndConsume_polynomial_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->polynomial_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial *new_OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> degree, id<OrgGeogebraCommonKernelArithmeticNumberValue> min, id<OrgGeogebraCommonKernelArithmeticNumberValue> max) {
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial *self = [OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial alloc];
  OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, degree, min, max);
  return self;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial_randomCoefWithBoolean_(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial *self, jboolean acceptZero) {
  jdouble minD = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->min_)) getDouble];
  jdouble maxD = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->max_)) getDouble];
  if (acceptZero || JavaLangMath_signumWithDouble_(maxD) == JavaLangMath_signumWithDouble_(minD)) {
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getRandomIntegerBetweenWithDouble:minD withDouble:maxD]) autorelease];
  }
  jint rnd = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getRandomIntegerBetweenWithDouble:minD withDouble:maxD - 1];
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, rnd >= 0 ? rnd + 1 : rnd) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoRandomPolynomial)
