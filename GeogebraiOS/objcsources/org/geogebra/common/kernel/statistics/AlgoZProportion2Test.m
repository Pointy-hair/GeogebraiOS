//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoZProportion2Test.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/apache/commons/math/distribution/NormalDistributionImpl.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/statistics/AlgoZProportion2Test.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test () {
 @public
  OrgGeogebraCommonKernelGeosGeoNumeric *proportion_, *n_, *proportion2_, *n_2_;
  OrgGeogebraCommonKernelGeosGeoText *tail_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  jdouble se_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test, proportion_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test, n_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test, proportion2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test, n_2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test, tail_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test, result_, OrgGeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_compute(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)proportion
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)proportion2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n_2
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail {
  OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, proportion, n, proportion2, n_2, tail);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)proportion
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)proportion2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n_2
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail {
  OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, proportion, n, proportion2, n_2, tail);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ZProportionTest();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:5 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, proportion_);
  (void) IOSObjectArray_Set(input_, 1, n_);
  (void) IOSObjectArray_Set(input_, 2, proportion2_);
  (void) IOSObjectArray_Set(input_, 3, n_2_);
  (void) IOSObjectArray_Set(input_, 4, tail_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (jdouble)getSE {
  return se_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoZProportion2Test", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoZProportion2Test", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getSE", NULL, "D", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "proportion_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "proportion2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n_2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "se_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test = { 2, "AlgoZProportion2Test", "org.geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *proportion, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *proportion2, OrgGeogebraCommonKernelGeosGeoNumeric *n_2, OrgGeogebraCommonKernelGeosGeoText *tail) {
  (void) OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, proportion, n, proportion2, n_2, tail);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *new_OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *proportion, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *proportion2, OrgGeogebraCommonKernelGeosGeoNumeric *n_2, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *self = [OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test alloc];
  OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, proportion, n, proportion2, n_2, tail);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *proportion, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *proportion2, OrgGeogebraCommonKernelGeosGeoNumeric *n_2, OrgGeogebraCommonKernelGeosGeoText *tail) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->tail_ = tail;
  self->proportion_ = proportion;
  self->n_ = n;
  self->proportion2_ = proportion2;
  self->n_2_ = n_2;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *new_OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *proportion, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *proportion2, OrgGeogebraCommonKernelGeosGeoNumeric *n_2, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *self = [OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test alloc];
  OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, proportion, n, proportion2, n_2, tail);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test_compute(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test *self) {
  NSString *testType;
  if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString])) isEqual:@"<"]) {
    testType = @"left";
  }
  else if ([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@">"]) {
    testType = @"right";
  }
  else if (OrgGeogebraCommonUtilStringUtil_isNotEqualWithNSString_([self->tail_ getTextString])) {
    testType = @"two";
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  jdouble n1 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble];
  jdouble phat1 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion_)) getDouble];
  jdouble n2 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_2_)) getDouble];
  jdouble phat2 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion2_)) getDouble];
  jdouble x1 = phat1 * n1;
  jdouble x2 = phat2 * n2;
  jdouble phatTotal = (x1 + x2) / (n1 + n2);
  self->se_ = JavaLangMath_sqrtWithDouble_(phatTotal * (1 - phatTotal) * (1 / n1 + 1 / n2));
  jdouble testStatistic = (phat1 - phat2) / self->se_;
  OrgApacheCommonsMathDistributionNormalDistributionImpl *normalDist = new_OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(0, 1);
  jdouble P = 0;
  @try {
    P = [normalDist cumulativeProbabilityWithDouble:testStatistic];
  }
  @catch (JavaLangException *e) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  if ([@"right" isEqual:testType]) {
    P = 1 - P;
  }
  else if ([@"two" isEqual:testType]) {
    if (testStatistic < 0) {
      P = 2 * P;
    }
    else {
      P = 2 * (1 - P);
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, P)];
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, testStatistic)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoZProportion2Test)
