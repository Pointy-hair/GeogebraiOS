//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoTTest2.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.h"
#include "org/apache/commons/math/stat/inference/TTestImpl.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/statistics/AlgoTTest2.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoTTest2 () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geoList0_, *geoList1_;
  OrgGeogebraCommonKernelGeosGeoNumeric *mean0_, *mean1_, *sd0_, *sd1_, *n0_, *n1_;
  OrgGeogebraCommonKernelGeosGeoText *tail_;
  OrgGeogebraCommonKernelGeosGeoBoolean *pooled_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  OrgApacheCommonsMathStatInferenceTTestImpl *tTestImpl_;
  IOSDoubleArray *val0_, *val1_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, geoList0_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, geoList1_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, mean0_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, mean1_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, sd0_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, sd1_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, n0_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, n1_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, tail_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, pooled_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, result_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, tTestImpl_, OrgApacheCommonsMathStatInferenceTTestImpl *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, val0_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTTest2, val1_, IOSDoubleArray *)

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self, jdouble p, jdouble testStatistic);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoTTest2_compute(OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoTTest2

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList0
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList1
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)pooled {
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoList0, geoList1, tail, pooled);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)mean0
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)sd0
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n0
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)mean1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)sd1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n1
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)pooled {
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)mean0
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)sd0
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n0
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)mean1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)sd1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n1
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)pooled {
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_TTest2();
}

- (void)setInputOutput {
  if (geoList0_ != nil) {
    input_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(input_, 0, geoList0_);
    (void) IOSObjectArray_Set(input_, 1, geoList1_);
    (void) IOSObjectArray_Set(input_, 2, tail_);
    (void) IOSObjectArray_Set(input_, 3, pooled_);
  }
  else {
    input_ = [IOSObjectArray newArrayWithLength:8 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(input_, 0, mean0_);
    (void) IOSObjectArray_Set(input_, 1, sd0_);
    (void) IOSObjectArray_Set(input_, 2, n0_);
    (void) IOSObjectArray_Set(input_, 3, mean1_);
    (void) IOSObjectArray_Set(input_, 4, sd1_);
    (void) IOSObjectArray_Set(input_, 5, n1_);
    (void) IOSObjectArray_Set(input_, 6, tail_);
    (void) IOSObjectArray_Set(input_, 7, pooled_);
  }
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic {
  return OrgGeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStatistic);
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoText:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoTTest2", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoTTest2", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoTTest2", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "adjustedPValueWithDouble:withDouble:", "adjustedPValue", "D", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList0_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoList1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "mean0_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd0_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n0_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "pooled_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "tTestImpl_", NULL, 0x2, "Lorg.apache.commons.math.stat.inference.TTestImpl;", NULL, NULL,  },
    { "val0_", NULL, 0x2, "[D", NULL, NULL,  },
    { "val1_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoTTest2 = { 2, "AlgoTTest2", "org.geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoTTest2;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList0, OrgGeogebraCommonKernelGeosGeoList *geoList1, OrgGeogebraCommonKernelGeosGeoText *tail, OrgGeogebraCommonKernelGeosGeoBoolean *pooled) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->geoList0_ = geoList0;
  self->geoList1_ = geoList1;
  self->tail_ = tail;
  self->pooled_ = pooled;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_compute(self);
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoTTest2 *new_OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList0, OrgGeogebraCommonKernelGeosGeoList *geoList1, OrgGeogebraCommonKernelGeosGeoText *tail, OrgGeogebraCommonKernelGeosGeoBoolean *pooled) {
  OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self = [OrgGeogebraCommonKernelStatisticsAlgoTTest2 alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoList0, geoList1, tail, pooled);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *mean0, OrgGeogebraCommonKernelGeosGeoNumeric *sd0, OrgGeogebraCommonKernelGeosGeoNumeric *n0, OrgGeogebraCommonKernelGeosGeoNumeric *mean1, OrgGeogebraCommonKernelGeosGeoNumeric *sd1, OrgGeogebraCommonKernelGeosGeoNumeric *n1, OrgGeogebraCommonKernelGeosGeoText *tail, OrgGeogebraCommonKernelGeosGeoBoolean *pooled) {
  (void) OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoTTest2 *new_OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *mean0, OrgGeogebraCommonKernelGeosGeoNumeric *sd0, OrgGeogebraCommonKernelGeosGeoNumeric *n0, OrgGeogebraCommonKernelGeosGeoNumeric *mean1, OrgGeogebraCommonKernelGeosGeoNumeric *sd1, OrgGeogebraCommonKernelGeosGeoNumeric *n1, OrgGeogebraCommonKernelGeosGeoText *tail, OrgGeogebraCommonKernelGeosGeoBoolean *pooled) {
  OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self = [OrgGeogebraCommonKernelStatisticsAlgoTTest2 alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *mean0, OrgGeogebraCommonKernelGeosGeoNumeric *sd0, OrgGeogebraCommonKernelGeosGeoNumeric *n0, OrgGeogebraCommonKernelGeosGeoNumeric *mean1, OrgGeogebraCommonKernelGeosGeoNumeric *sd1, OrgGeogebraCommonKernelGeosGeoNumeric *n1, OrgGeogebraCommonKernelGeosGeoText *tail, OrgGeogebraCommonKernelGeosGeoBoolean *pooled) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->mean0_ = mean0;
  self->mean1_ = mean1;
  self->sd0_ = sd0;
  self->sd1_ = sd1;
  self->n0_ = n0;
  self->n1_ = n1;
  self->tail_ = tail;
  self->pooled_ = pooled;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoTTest2 *new_OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *mean0, OrgGeogebraCommonKernelGeosGeoNumeric *sd0, OrgGeogebraCommonKernelGeosGeoNumeric *n0, OrgGeogebraCommonKernelGeosGeoNumeric *mean1, OrgGeogebraCommonKernelGeosGeoNumeric *sd1, OrgGeogebraCommonKernelGeosGeoNumeric *n1, OrgGeogebraCommonKernelGeosGeoText *tail, OrgGeogebraCommonKernelGeosGeoBoolean *pooled) {
  OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self = [OrgGeogebraCommonKernelStatisticsAlgoTTest2 alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTTest2_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  return self;
}

jdouble OrgGeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self, jdouble p, jdouble testStatistic) {
  if (OrgGeogebraCommonUtilStringUtil_isNotEqualWithNSString_([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString])) {
    return p;
  }
  else if (([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@">"] && testStatistic > 0) || ([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@"<"] && testStatistic < 0)) return p / 2;
  else return 1 - p / 2;
}

void OrgGeogebraCommonKernelStatisticsAlgoTTest2_compute(OrgGeogebraCommonKernelStatisticsAlgoTTest2 *self) {
  if (!(OrgGeogebraCommonUtilStringUtil_isInequalityWithNSString_([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString]))) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  jdouble p, testStat;
  if (((IOSObjectArray *) nil_chk(self->input_))->size_ == 4) {
    jint size0 = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList0_)) size];
    if (![self->geoList0_ isDefined] || size0 < 2) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    jint size1 = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList1_)) size];
    if (![self->geoList1_ isDefined] || size1 < 2) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    self->val0_ = [IOSDoubleArray newArrayWithLength:size0];
    self->val1_ = [IOSDoubleArray newArrayWithLength:size1];
    for (jint i = 0; i < size0; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo0 = [self->geoList0_ getWithInt:i];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo0]) {
        id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo0, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(self->val0_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
    for (jint i = 0; i < size1; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo1 = [self->geoList1_ getWithInt:i];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo1]) {
        id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo1, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(self->val1_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
    @try {
      if (self->tTestImpl_ == nil) self->tTestImpl_ = new_OrgApacheCommonsMathStatInferenceTTestImpl_init();
      if ([((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->pooled_)) getBoolean]) {
        testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) homoscedasticTWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
        p = [self->tTestImpl_ homoscedasticTTestWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
        p = OrgGeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStat);
      }
      else {
        testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) tWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
        p = [self->tTestImpl_ tTestWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
        p = OrgGeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStat);
      }
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
      [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, p)];
      [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, testStat)];
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
    }
    @catch (OrgApacheCommonsMathMathException *e) {
      [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
    }
  }
  else {
    if ([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd0_)) getDouble] < 0 || [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd1_)) getDouble] < 0 || [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n0_)) getDouble] < 2 || [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n1_)) getDouble] < 2) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues *sumStats0 = new_OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues_initWithDouble_withDouble_withLong_withDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean0_)) getDouble], [self->sd0_ getDouble] * [self->sd0_ getDouble], J2ObjCFpToLong([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n0_)) getDouble]), -1, -1, -1);
    OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues *sumStats1 = new_OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues_initWithDouble_withDouble_withLong_withDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean1_)) getDouble], [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd1_)) getDouble] * [self->sd1_ getDouble], J2ObjCFpToLong([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n1_)) getDouble]), -1, -1, -1);
    @try {
      if (self->tTestImpl_ == nil) self->tTestImpl_ = new_OrgApacheCommonsMathStatInferenceTTestImpl_init();
      if ([((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->pooled_)) getBoolean]) {
        testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) homoscedasticTWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats0 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats1];
        p = [self->tTestImpl_ homoscedasticTTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats0 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats1];
        p = OrgGeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStat);
      }
      else {
        testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) tWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats0 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats1];
        p = [self->tTestImpl_ tTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats0 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats1];
        p = OrgGeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStat);
      }
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
      [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, p)];
      [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, testStat)];
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
    }
    @catch (OrgApacheCommonsMathMathException *e) {
      [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoTTest2)
