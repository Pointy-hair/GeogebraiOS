//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/DistributionFunctionFactory.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/statistics/DistributionFunctionFactory.h"

@implementation OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory

+ (OrgGeogebraCommonKernelGeosGeoFunction *)zeroWhenNegativeWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  return OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenNegativeWithOrgGeogebraCommonKernelConstruction_(cons);
}

+ (OrgGeogebraCommonKernelGeosGeoFunction *)zeroWhenLessThanWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)border
                                                                         withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  return OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenLessThanWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelConstruction_(border, cons);
}

- (instancetype)init {
  OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "zeroWhenNegativeWithOrgGeogebraCommonKernelConstruction:", "zeroWhenNegative", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x9, NULL, NULL },
    { "zeroWhenLessThanWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelConstruction:", "zeroWhenLessThan", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory = { 2, "DistributionFunctionFactory", "org.geogebra.common.kernel.statistics", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory;
}

@end

OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenNegativeWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_initialize();
  return OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenLessThanWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelConstruction_([new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel], 0) autorelease], cons);
}

OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenLessThanWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelConstruction_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> border, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_initialize();
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fv wrap])) lessThanWithOrgGeogebraCommonKernelArithmeticExpressionValue:border])) ifElseWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 0) autorelease] withOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 0) autorelease]];
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) buildFunctionWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv];
}

void OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_init(OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory *new_OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_init() {
  OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory *self = [OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory alloc];
  OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsDistributionFunctionFactory)
