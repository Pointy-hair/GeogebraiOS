//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoTMean2Estimate.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/distribution/TDistributionImpl.h"
#include "org/apache/commons/math/stat/descriptive/SummaryStatistics.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoTMean2Estimate.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geoList1_, *geoList2_;
  OrgGeogebraCommonKernelGeosGeoNumeric *geoLevel_, *geoMean1_, *geoSD1_, *geoN1_, *geoMean2_, *geoSD2_, *geoN2_;
  OrgGeogebraCommonKernelGeosGeoBoolean *geoPooled_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  IOSDoubleArray *val1_, *val2_;
  jint size1_, size2_;
  jdouble level_, mean1_, var1_, n1_, mean2_, var2_, n2_, me_;
  OrgApacheCommonsMathStatDescriptiveSummaryStatistics *stats_;
  OrgApacheCommonsMathDistributionTDistributionImpl *tDist_;
  jdouble difference_;
}

+ (jdouble)getDegreeOfFreedomWithDouble:(jdouble)v1
                             withDouble:(jdouble)v2
                             withDouble:(jdouble)n1
                             withDouble:(jdouble)n2
                            withBoolean:(jboolean)pooled;

- (jdouble)getMarginOfErrorWithDouble:(jdouble)v1
                           withDouble:(jdouble)n1
                           withDouble:(jdouble)v2
                           withDouble:(jdouble)n2
                           withDouble:(jdouble)confLevel
                          withBoolean:(jboolean)pooled;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoList1_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoList2_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoLevel_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoMean1_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoSD1_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoN1_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoMean2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoSD2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoN2_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoPooled_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, result_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, val1_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, val2_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, stats_, OrgApacheCommonsMathStatDescriptiveSummaryStatistics *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate, tDist_, OrgApacheCommonsMathDistributionTDistributionImpl *)

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(jdouble v1, jdouble v2, jdouble n1, jdouble n2, jboolean pooled);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getMarginOfErrorWithDouble_withDouble_withDouble_withDouble_withDouble_withBoolean_(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, jdouble v1, jdouble n1, jdouble v2, jdouble n2, jdouble confLevel, jboolean pooled);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList1
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoLevel
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)geoPooled {
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoList1, geoList2, geoLevel, geoPooled);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoMean1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoSD1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoN1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoMean2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoSD2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoN2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoLevel
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)geoPooled {
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoMean1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoSD1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoN1
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoMean2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoSD2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoN2
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geoLevel
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)geoPooled {
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_TMean2Estimate();
}

- (void)setInputOutput {
  if (geoList1_ != nil) {
    input_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(input_, 0, geoList1_);
    (void) IOSObjectArray_Set(input_, 1, geoList2_);
    (void) IOSObjectArray_Set(input_, 2, geoLevel_);
    (void) IOSObjectArray_Set(input_, 3, geoPooled_);
  }
  else {
    input_ = [IOSObjectArray newArrayWithLength:8 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    (void) IOSObjectArray_Set(input_, 0, geoMean1_);
    (void) IOSObjectArray_Set(input_, 1, geoSD1_);
    (void) IOSObjectArray_Set(input_, 2, geoN1_);
    (void) IOSObjectArray_Set(input_, 3, geoMean2_);
    (void) IOSObjectArray_Set(input_, 4, geoSD2_);
    (void) IOSObjectArray_Set(input_, 5, geoN2_);
    (void) IOSObjectArray_Set(input_, 6, geoLevel_);
    (void) IOSObjectArray_Set(input_, 7, geoPooled_);
  }
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

+ (jdouble)getDegreeOfFreedomWithDouble:(jdouble)v1
                             withDouble:(jdouble)v2
                             withDouble:(jdouble)n1
                             withDouble:(jdouble)n2
                            withBoolean:(jboolean)pooled {
  return OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(v1, v2, n1, n2, pooled);
}

- (jdouble)getMarginOfErrorWithDouble:(jdouble)v1
                           withDouble:(jdouble)n1
                           withDouble:(jdouble)v2
                           withDouble:(jdouble)n2
                           withDouble:(jdouble)confLevel
                          withBoolean:(jboolean)pooled {
  return OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getMarginOfErrorWithDouble_withDouble_withDouble_withDouble_withDouble_withBoolean_(self, v1, n1, v2, n2, confLevel, pooled);
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoTMean2Estimate", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoTMean2Estimate", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoTMean2Estimate", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getDegreeOfFreedomWithDouble:withDouble:withDouble:withDouble:withBoolean:", "getDegreeOfFreedom", "D", 0xa, NULL, NULL },
    { "getMarginOfErrorWithDouble:withDouble:withDouble:withDouble:withDouble:withBoolean:", "getMarginOfError", "D", 0x2, "Lorg.apache.commons.math.MathException;", NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoList2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoLevel_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoMean1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoSD1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoN1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoMean2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoSD2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoN2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoPooled_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "val1_", NULL, 0x2, "[D", NULL, NULL,  },
    { "val2_", NULL, 0x2, "[D", NULL, NULL,  },
    { "size1_", NULL, 0x2, "I", NULL, NULL,  },
    { "size2_", NULL, 0x2, "I", NULL, NULL,  },
    { "level_", NULL, 0x2, "D", NULL, NULL,  },
    { "mean1_", NULL, 0x2, "D", NULL, NULL,  },
    { "var1_", NULL, 0x2, "D", NULL, NULL,  },
    { "n1_", NULL, 0x2, "D", NULL, NULL,  },
    { "mean2_", NULL, 0x2, "D", NULL, NULL,  },
    { "var2_", NULL, 0x2, "D", NULL, NULL,  },
    { "n2_", NULL, 0x2, "D", NULL, NULL,  },
    { "me_", NULL, 0x2, "D", NULL, NULL,  },
    { "pooled_", NULL, 0x0, "Z", NULL, NULL,  },
    { "stats_", NULL, 0x2, "Lorg.apache.commons.math.stat.descriptive.SummaryStatistics;", NULL, NULL,  },
    { "tDist_", NULL, 0x2, "Lorg.apache.commons.math.distribution.TDistributionImpl;", NULL, NULL,  },
    { "difference_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate = { 2, "AlgoTMean2Estimate", "org.geogebra.common.kernel.statistics", NULL, 0x1, 9, methods, 27, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList1, OrgGeogebraCommonKernelGeosGeoList *geoList2, OrgGeogebraCommonKernelGeosGeoNumeric *geoLevel, OrgGeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->geoList1_ = geoList1;
  self->geoList2_ = geoList2;
  self->geoLevel_ = geoLevel;
  self->geoPooled_ = geoPooled;
  self->geoMean1_ = nil;
  self->geoSD1_ = nil;
  self->geoN1_ = nil;
  self->geoMean2_ = nil;
  self->geoSD2_ = nil;
  self->geoN2_ = nil;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(self);
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *new_OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList1, OrgGeogebraCommonKernelGeosGeoList *geoList2, OrgGeogebraCommonKernelGeosGeoNumeric *geoLevel, OrgGeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self = [OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoList1, geoList2, geoLevel, geoPooled);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *geoMean1, OrgGeogebraCommonKernelGeosGeoNumeric *geoSD1, OrgGeogebraCommonKernelGeosGeoNumeric *geoN1, OrgGeogebraCommonKernelGeosGeoNumeric *geoMean2, OrgGeogebraCommonKernelGeosGeoNumeric *geoSD2, OrgGeogebraCommonKernelGeosGeoNumeric *geoN2, OrgGeogebraCommonKernelGeosGeoNumeric *geoLevel, OrgGeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  (void) OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *new_OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *geoMean1, OrgGeogebraCommonKernelGeosGeoNumeric *geoSD1, OrgGeogebraCommonKernelGeosGeoNumeric *geoN1, OrgGeogebraCommonKernelGeosGeoNumeric *geoMean2, OrgGeogebraCommonKernelGeosGeoNumeric *geoSD2, OrgGeogebraCommonKernelGeosGeoNumeric *geoN2, OrgGeogebraCommonKernelGeosGeoNumeric *geoLevel, OrgGeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self = [OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *geoMean1, OrgGeogebraCommonKernelGeosGeoNumeric *geoSD1, OrgGeogebraCommonKernelGeosGeoNumeric *geoN1, OrgGeogebraCommonKernelGeosGeoNumeric *geoMean2, OrgGeogebraCommonKernelGeosGeoNumeric *geoSD2, OrgGeogebraCommonKernelGeosGeoNumeric *geoN2, OrgGeogebraCommonKernelGeosGeoNumeric *geoLevel, OrgGeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->geoList1_ = nil;
  self->geoList2_ = nil;
  self->geoLevel_ = geoLevel;
  self->geoPooled_ = geoPooled;
  self->geoMean1_ = geoMean1;
  self->geoSD1_ = geoSD1;
  self->geoN1_ = geoN1;
  self->geoMean2_ = geoMean2;
  self->geoSD2_ = geoSD2;
  self->geoN2_ = geoN2;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *new_OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *geoMean1, OrgGeogebraCommonKernelGeosGeoNumeric *geoSD1, OrgGeogebraCommonKernelGeosGeoNumeric *geoN1, OrgGeogebraCommonKernelGeosGeoNumeric *geoMean2, OrgGeogebraCommonKernelGeosGeoNumeric *geoSD2, OrgGeogebraCommonKernelGeosGeoNumeric *geoN2, OrgGeogebraCommonKernelGeosGeoNumeric *geoLevel, OrgGeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self = [OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate alloc];
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  return self;
}

jdouble OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(jdouble v1, jdouble v2, jdouble n1, jdouble n2, jboolean pooled) {
  OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_initialize();
  if (pooled) return n1 + n2 - 2;
  return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) / ((v1 * v1) / (n1 * n1 * (n1 - 1.0)) + (v2 * v2) / (n2 * n2 * (n2 - 1.0)));
}

jdouble OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getMarginOfErrorWithDouble_withDouble_withDouble_withDouble_withDouble_withBoolean_(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, jdouble v1, jdouble n1, jdouble v2, jdouble n2, jdouble confLevel, jboolean pooled) {
  if (pooled) {
    jdouble pooledVariance = ((n1 - 1) * v1 + (n2 - 1) * v2) / (n1 + n2 - 2);
    jdouble se = JavaLangMath_sqrtWithDouble_(pooledVariance * (1.0 / n1 + 1.0 / n2));
    self->tDist_ = new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(v1, v2, n1, n2, pooled));
    jdouble a = [self->tDist_ inverseCumulativeProbabilityWithDouble:(confLevel + 1.0) / 2];
    return a * se;
  }
  jdouble se = JavaLangMath_sqrtWithDouble_((v1 / n1) + (v2 / n2));
  self->tDist_ = new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(v1, v2, n1, n2, pooled));
  jdouble a = [self->tDist_ inverseCumulativeProbabilityWithDouble:(confLevel + 1.0) / 2];
  return a * se;
}

void OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate *self) {
  @try {
    if (((IOSObjectArray *) nil_chk(self->input_))->size_ == 4) {
      self->size1_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList1_)) size];
      if (![self->geoList1_ isDefined] || self->size1_ < 2) {
        [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
      self->size2_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList2_)) size];
      if (![self->geoList2_ isDefined] || self->size2_ < 2) {
        [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
      self->val1_ = [IOSDoubleArray newArrayWithLength:self->size1_];
      for (jint i = 0; i < self->size1_; i++) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [self->geoList1_ getWithInt:i];
        if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
          id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
          *IOSDoubleArray_GetRef(self->val1_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
        }
        else {
          [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
          return;
        }
      }
      self->val2_ = [IOSDoubleArray newArrayWithLength:self->size2_];
      for (jint i = 0; i < self->size2_; i++) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = [self->geoList2_ getWithInt:i];
        if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
          id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
          *IOSDoubleArray_GetRef(self->val2_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
        }
        else {
          [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
          return;
        }
      }
      self->stats_ = new_OrgApacheCommonsMathStatDescriptiveSummaryStatistics_init();
      for (jint i = 0; i < self->val1_->size_; i++) {
        [self->stats_ addValueWithDouble:IOSDoubleArray_Get(self->val1_, i)];
      }
      self->n1_ = [self->stats_ getN];
      self->var1_ = [self->stats_ getVariance];
      self->mean1_ = [self->stats_ getMean];
      [self->stats_ clear];
      for (jint i = 0; i < self->val2_->size_; i++) {
        [self->stats_ addValueWithDouble:IOSDoubleArray_Get(self->val2_, i)];
      }
      self->n2_ = [self->stats_ getN];
      self->var2_ = [self->stats_ getVariance];
      self->mean2_ = [self->stats_ getMean];
    }
    else {
      self->mean1_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoMean1_)) getDouble];
      self->var1_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoSD1_)) getDouble] * [self->geoSD1_ getDouble];
      self->n1_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoN1_)) getDouble];
      self->mean2_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoMean2_)) getDouble];
      self->var2_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoSD2_)) getDouble] * [self->geoSD2_ getDouble];
      self->n2_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoN2_)) getDouble];
    }
    self->level_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoLevel_)) getDouble];
    self->pooled_ = [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->geoPooled_)) getBoolean];
    if (self->level_ < 0 || self->level_ > 1 || self->var1_ < 0 || self->n1_ < 1 || self->var2_ < 0 || self->n2_ < 1) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    self->me_ = OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate_getMarginOfErrorWithDouble_withDouble_withDouble_withDouble_withDouble_withBoolean_(self, self->var1_, self->n1_, self->var2_, self->n2_, self->level_, self->pooled_);
    self->difference_ = self->mean1_ - self->mean2_;
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
    jboolean oldSuppress = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
    [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->difference_ - self->me_)];
    [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->difference_ + self->me_)];
    [self->cons_ setSuppressLabelCreationWithBoolean:oldSuppress];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoTMean2Estimate)
