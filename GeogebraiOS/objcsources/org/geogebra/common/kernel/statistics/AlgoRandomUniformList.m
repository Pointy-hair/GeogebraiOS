//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoRandomUniformList.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoRandomUniformList.h"
#include "org/geogebra/common/main/RandomUtil.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList ()

- (void)ensureListSizeWithInt:(jint)n;

@end

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList_ensureListSizeWithInt_(OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList *self, jint n);

@implementation OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)length {
  OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b, length);
  return self;
}

- (id<OrgGeogebraCommonKernelAlgosGetCommand>)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_RandomUniform();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) toGeoElement]);
  (void) IOSObjectArray_Set(input_, 1, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) toGeoElement]);
  (void) IOSObjectArray_Set(input_, 2, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(length_)) toGeoElement]);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:list_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return list_;
}

- (void)ensureListSizeWithInt:(jint)n {
  OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList_ensureListSizeWithInt_(self, n);
}

- (void)compute {
  if (![((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) isDefined] || ![((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) isDefined] || ![((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(length_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
    return;
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(length_)) getDouble] < 1) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList_ensureListSizeWithInt_(self, J2ObjCFpToInt([length_ getDouble]));
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) size]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list_ getWithInt:i], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:OrgGeogebraCommonMainRandomUtil_randomUniformWithDouble_withDouble_([a_ getDouble], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble])];
  }
}

- (void)setRandomValueWithDouble:(jdouble)d {
  if (d >= [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble] && d <= [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) updateRepaint];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoRandomUniformList", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "ensureListSizeWithInt:", "ensureListSize", "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setRandomValueWithDouble:", "setRandomValue", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "a_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "length_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "list_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList = { 2, "AlgoRandomUniformList", "org.geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, id<OrgGeogebraCommonKernelArithmeticNumberValue> length) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->a_ = a;
  self->b_ = b;
  self->length_ = length;
  self->list_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) addRandomGeoWithOrgGeogebraCommonKernelGeosGeoElement:self->list_];
  [self setInputOutput];
  [self compute];
  [self->list_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList *new_OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, id<OrgGeogebraCommonKernelArithmeticNumberValue> length) {
  OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList *self = [OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList alloc];
  OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b, length);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList_ensureListSizeWithInt_(OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList *self, jint n) {
  jboolean oldSuppressLabels = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  if ([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) size] < n) {
    for (jint i = [self->list_ size]; i < n; i++) {
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_)];
    }
  }
  else if ([self->list_ size] > n) {
    for (jint i = n - 1; i < [self->list_ size]; i++) {
      [self->list_ removeWithInt:i];
    }
  }
  [self->cons_ setSuppressLabelCreationWithBoolean:oldSuppressLabels];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoRandomUniformList)
