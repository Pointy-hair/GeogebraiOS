//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoFitNL.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "org/apache/commons/math/optimization/fitting/CurveFitter.h"
#include "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/optimization/FitRealFunction.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitNL.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoFitNL () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *pointlist_;
  OrgGeogebraCommonKernelGeosGeoFunction *inputfunction_;
  OrgGeogebraCommonKernelGeosGeoFunction *outputfunction_;
  jint datasize_;
  IOSDoubleArray *xdata_;
  IOSDoubleArray *ydata_;
  OrgGeogebraCommonKernelOptimizationFitRealFunction *prfunction_;
  OrgApacheCommonsMathOptimizationGeneralLevenbergMarquardtOptimizer *LMO_;
  OrgApacheCommonsMathOptimizationFittingCurveFitter *curvefitter_;
}

- (jboolean)makeDataArrays;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitNL, pointlist_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitNL, inputfunction_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitNL, outputfunction_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitNL, xdata_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitNL, ydata_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitNL, prfunction_, OrgGeogebraCommonKernelOptimizationFitRealFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitNL, LMO_, OrgApacheCommonsMathOptimizationGeneralLevenbergMarquardtOptimizer *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitNL, curvefitter_, OrgApacheCommonsMathOptimizationFittingCurveFitter *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFitNL_compute(OrgGeogebraCommonKernelStatisticsAlgoFitNL *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelStatisticsAlgoFitNL_makeDataArrays(OrgGeogebraCommonKernelStatisticsAlgoFitNL *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoFitNL

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)pointlist
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)inputfunction {
  OrgGeogebraCommonKernelStatisticsAlgoFitNL_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, pointlist, inputfunction);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Fit();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, pointlist_);
  (void) IOSObjectArray_Set(input_, 1, inputfunction_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:outputfunction_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFitNL {
  return outputfunction_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoFitNL_compute(self);
}

- (jboolean)makeDataArrays {
  return OrgGeogebraCommonKernelStatisticsAlgoFitNL_makeDataArrays(self);
}

- (IOSDoubleArray *)getCoeffs {
  IOSObjectArray *coeffs = [((OrgGeogebraCommonKernelOptimizationFitRealFunction *) nil_chk(prfunction_)) getCoeffs];
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(coeffs))->size_];
  for (jint i = 0; i < coeffs->size_; i++) {
    *IOSDoubleArray_GetRef(ret, i) = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(IOSObjectArray_Get(coeffs, i))) getDouble];
  }
  return ret;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoFitNL", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitNL", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "makeDataArrays", NULL, "Z", 0x12, NULL, NULL },
    { "getCoeffs", NULL, "[D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pointlist_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "inputfunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "outputfunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "datasize_", NULL, 0x2, "I", NULL, NULL,  },
    { "xdata_", NULL, 0x2, "[D", NULL, NULL,  },
    { "ydata_", NULL, 0x2, "[D", NULL, NULL,  },
    { "prfunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.optimization.FitRealFunction;", NULL, NULL,  },
    { "LMO_", NULL, 0x2, "Lorg.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;", NULL, NULL,  },
    { "curvefitter_", NULL, 0x2, "Lorg.apache.commons.math.optimization.fitting.CurveFitter;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoFitNL = { 2, "AlgoFitNL", "org.geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoFitNL;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoFitNL_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelStatisticsAlgoFitNL *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *pointlist, OrgGeogebraCommonKernelGeosGeoFunction *inputfunction) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->datasize_ = 0;
  self->xdata_ = nil;
  self->ydata_ = nil;
  self->prfunction_ = nil;
  self->LMO_ = new_OrgApacheCommonsMathOptimizationGeneralLevenbergMarquardtOptimizer_init();
  self->curvefitter_ = new_OrgApacheCommonsMathOptimizationFittingCurveFitter_initWithOrgApacheCommonsMathOptimizationDifferentiableMultivariateVectorialOptimizer_(self->LMO_);
  self->pointlist_ = pointlist;
  self->inputfunction_ = inputfunction;
  self->outputfunction_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoFitNL_compute(self);
  [self->outputfunction_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoFitNL *new_OrgGeogebraCommonKernelStatisticsAlgoFitNL_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *pointlist, OrgGeogebraCommonKernelGeosGeoFunction *inputfunction) {
  OrgGeogebraCommonKernelStatisticsAlgoFitNL *self = [OrgGeogebraCommonKernelStatisticsAlgoFitNL alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFitNL_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, pointlist, inputfunction);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFitNL_compute(OrgGeogebraCommonKernelStatisticsAlgoFitNL *self) {
  OrgGeogebraCommonKernelGeosGeoElement *geo1 = nil;
  OrgGeogebraCommonKernelGeosGeoElement *geo2 = nil;
  self->datasize_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->pointlist_)) size];
  if (![self->pointlist_ isDefined] || ![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->inputfunction_)) isDefined] || (self->datasize_ < 1)) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
    return;
  }
  geo1 = [self->pointlist_ getWithInt:0];
  geo2 = self->inputfunction_;
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isGeoFunction] || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isGeoPoint]) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
    return;
  }
  @try {
    if (!OrgGeogebraCommonKernelStatisticsAlgoFitNL_makeDataArrays(self)) {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
      return;
    }
    self->prfunction_ = new_OrgGeogebraCommonKernelOptimizationFitRealFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->inputfunction_)) getFunction]);
    if (!self->prfunction_->parametersOK_) {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
      return;
    }
    [((OrgApacheCommonsMathOptimizationFittingCurveFitter *) nil_chk(self->curvefitter_)) clearObservations];
    for (jint i = 0; i < self->datasize_; i++) {
      [self->curvefitter_ addObservedPointWithDouble:1.0 withDouble:IOSDoubleArray_Get(nil_chk(self->xdata_), i) withDouble:IOSDoubleArray_Get(nil_chk(self->ydata_), i)];
    }
    (void) [self->curvefitter_ fitWithOrgApacheCommonsMathOptimizationFittingParametricRealFunction:self->prfunction_ withDoubleArray:[self->prfunction_ getStartValues]];
    jint iter = [((OrgApacheCommonsMathOptimizationGeneralLevenbergMarquardtOptimizer *) nil_chk(self->LMO_)) getIterations];
    if (iter > 200) {
      OrgGeogebraCommonMainApp_debugWithNSString_(@"More than 200 iterations...");
    }
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:[self->prfunction_ getFunction]];
    [self->outputfunction_ setDefinedWithBoolean:YES];
  }
  @catch (JavaLangThrowable *t) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
    OrgGeogebraCommonMainApp_debugWithNSString_([((JavaLangThrowable *) nil_chk(t)) getMessage]);
  }
}

jboolean OrgGeogebraCommonKernelStatisticsAlgoFitNL_makeDataArrays(OrgGeogebraCommonKernelStatisticsAlgoFitNL *self) {
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  OrgGeogebraCommonKernelGeosGeoPoint *point = nil;
  self->datasize_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->pointlist_)) size];
  self->xdata_ = [IOSDoubleArray newArrayWithLength:self->datasize_];
  self->ydata_ = [IOSDoubleArray newArrayWithLength:self->datasize_];
  for (jint i = 0; i < self->datasize_; i++) {
    geo = [self->pointlist_ getWithInt:i];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      return NO;
    }
    point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class]);
    *IOSDoubleArray_GetRef(self->xdata_, i) = [point getX];
    *IOSDoubleArray_GetRef(self->ydata_, i) = [point getY];
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoFitNL)
