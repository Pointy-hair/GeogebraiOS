//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoCellRange.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgorithmSet.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoListForCellRange.h"
#include "org/geogebra/common/kernel/statistics/AlgoCellRange.h"
#include "org/geogebra/common/main/AlgoCellRangeManager.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/SpreadsheetTableModel.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoCellRange () {
 @public
  OrgGeogebraCommonKernelGeosGeoListForCellRange *geoList_;
  NSString *startCell_, *endCell_;
  NSString *toStringOutput_;
  OrgGeogebraCommonGuiViewSpreadsheetCellRange *cellRange_;
  JavaUtilArrayList *listItems_;
  OrgGeogebraCommonAwtGPoint *startCoords_, *endCoords_;
  jint maxExistingCol_;
  jint maxExistingRow_;
}

- (void)clearGeoList;

- (void)updateList;

- (void)addWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (void)addToListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (JavaUtilArrayList *)initCellRangeListWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)startCoords
                                        withOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)endCoords OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoCellRange, geoList_, OrgGeogebraCommonKernelGeosGeoListForCellRange *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoCellRange, startCell_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoCellRange, endCell_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoCellRange, toStringOutput_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoCellRange, cellRange_, OrgGeogebraCommonGuiViewSpreadsheetCellRange *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoCellRange, listItems_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoCellRange, startCoords_, OrgGeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoCellRange, endCoords_, OrgGeogebraCommonAwtGPoint *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoCellRange_clearGeoList(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoCellRange_updateList(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoCellRange_addWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoCellRange_addToListWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static JavaUtilArrayList *OrgGeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithOrgGeogebraCommonAwtGPoint_withOrgGeogebraCommonAwtGPoint_(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self, OrgGeogebraCommonAwtGPoint *startCoords, OrgGeogebraCommonAwtGPoint *endCoords);

@implementation OrgGeogebraCommonKernelStatisticsAlgoCellRange

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                                               withNSString:(NSString *)startCell
                                               withNSString:(NSString *)endCell {
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(self, cons, label, startCell, endCell);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return OrgGeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)remove {
  if (removed_) return;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(listItems_)) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [super remove];
  [((OrgGeogebraCommonMainAlgoCellRangeManager *) nil_chk([((OrgGeogebraCommonMainSpreadsheetTableModel *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getApplication])) getSpreadsheetTableModel])) getCellRangeManager])) unregisterCellRangeListenerAlgoWithOrgGeogebraCommonKernelStatisticsAlgoCellRange:self];
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_clearGeoList(self);
}

- (void)clearGeoList {
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_clearGeoList(self);
}

- (void)updateListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                withBoolean:(jboolean)isRemoveAction {
  if ([((JavaUtilArrayList *) nil_chk(listItems_)) containsWithId:geo]) {
    if (!isRemoveAction) {
      return;
    }
    [listItems_ removeWithId:geo];
  }
  else {
    listItems_ = OrgGeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithOrgGeogebraCommonAwtGPoint_withOrgGeogebraCommonAwtGPoint_(self, startCoords_, endCoords_);
  }
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_updateList(self);
  [self update];
  [((OrgGeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(geoList_)) updateRepaint];
}

- (void)updateList {
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_updateList(self);
}

- (void)addWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_addWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addToListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                            withOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)loc {
  if (((OrgGeogebraCommonAwtGPoint *) nil_chk(loc))->x_ >= maxExistingCol_ && loc->y_ > maxExistingRow_) {
    maxExistingCol_ = loc->x_;
    maxExistingRow_ = loc->y_;
    OrgGeogebraCommonKernelStatisticsAlgoCellRange_addToListWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
  else {
    [self updateListWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:NO];
  }
}

- (void)addToListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_addToListWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)setInputOutput {
  startCoords_ = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(startCell_);
  endCoords_ = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(endCell_);
  toStringOutput_ = JreStrcat("$C$", startCell_, ':', endCell_);
  cellRange_ = new_OrgGeogebraCommonGuiViewSpreadsheetCellRange_initWithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getApplication], ((OrgGeogebraCommonAwtGPoint *) nil_chk(startCoords_))->x_, startCoords_->y_, ((OrgGeogebraCommonAwtGPoint *) nil_chk(endCoords_))->x_, endCoords_->y_);
  listItems_ = OrgGeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithOrgGeogebraCommonAwtGPoint_withOrgGeogebraCommonAwtGPoint_(self, startCoords_, endCoords_);
  geoList_ = new_OrgGeogebraCommonKernelGeosGeoListForCellRange_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelStatisticsAlgoCellRange_(cons_, self);
  input_ = [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_updateList(self);
  [self update];
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:geoList_];
  [self setDependenciesOutputOnly];
}

- (JavaUtilArrayList *)initCellRangeListWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)startCoords
                                        withOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)endCoords {
  return OrgGeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithOrgGeogebraCommonAwtGPoint_withOrgGeogebraCommonAwtGPoint_(self, startCoords, endCoords);
}

- (OrgGeogebraCommonKernelGeosGeoList *)getList {
  return geoList_;
}

- (OrgGeogebraCommonGuiViewSpreadsheetCellRange *)getCellRange {
  return cellRange_;
}

- (void)compute {
  [((OrgGeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(geoList_)) update];
}

- (NSString *)getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return toStringOutput_;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return toStringOutput_;
}

- (IOSObjectArray *)getRectangle {
  OrgGeogebraCommonAwtGPoint *startCoords = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(startCell_);
  OrgGeogebraCommonAwtGPoint *endCoords = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(endCell_);
  IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ startCoords, endCoords } count:2 type:OrgGeogebraCommonAwtGPoint_class_()];
  return ret;
}

- (void)addToItemsAlgoUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algo {
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(listItems_)) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:algo];
  }
}

- (NSString *)getStart {
  return startCell_;
}

- (NSString *)getEnd {
  return endCell_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withNSString:withNSString:", "AlgoCellRange", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "clearGeoList", NULL, "V", 0x2, NULL, NULL },
    { "updateListWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "updateList", "V", 0x1, NULL, NULL },
    { "updateList", NULL, "V", 0x2, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x2, NULL, NULL },
    { "addToListWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonAwtGPoint:", "addToList", "V", 0x1, NULL, NULL },
    { "addToListWithOrgGeogebraCommonKernelGeosGeoElement:", "addToList", "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "initCellRangeListWithOrgGeogebraCommonAwtGPoint:withOrgGeogebraCommonAwtGPoint:", "initCellRangeList", "Ljava.util.ArrayList;", 0x2, NULL, NULL },
    { "getList", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getCellRange", NULL, "Lorg.geogebra.common.gui.view.spreadsheet.CellRange;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:", "getCommandDescription", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getRectangle", NULL, "[Lorg.geogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "addToItemsAlgoUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "addToItemsAlgoUpdateSets", "V", 0x1, NULL, NULL },
    { "getStart", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getEnd", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoListForCellRange;", NULL, NULL,  },
    { "startCell_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "endCell_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "toStringOutput_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "cellRange_", NULL, 0x2, "Lorg.geogebra.common.gui.view.spreadsheet.CellRange;", NULL, NULL,  },
    { "listItems_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "startCoords_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "endCoords_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "maxExistingCol_", NULL, 0x2, "I", NULL, NULL,  },
    { "maxExistingRow_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoCellRange = { 2, "AlgoCellRange", "org.geogebra.common.kernel.statistics", NULL, 0x1, 20, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoCellRange;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoCellRange_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, NSString *startCell, NSString *endCell) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->startCell_ = startCell;
  self->endCell_ = endCell;
  [self setInputOutput];
  [((OrgGeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoCellRange *new_OrgGeogebraCommonKernelStatisticsAlgoCellRange_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, NSString *startCell, NSString *endCell) {
  OrgGeogebraCommonKernelStatisticsAlgoCellRange *self = [OrgGeogebraCommonKernelStatisticsAlgoCellRange alloc];
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(self, cons, label, startCell, endCell);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoCellRange_clearGeoList(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self) {
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) size]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:i])) removeCellRangeUser];
  }
  [self->geoList_ clear];
}

void OrgGeogebraCommonKernelStatisticsAlgoCellRange_updateList(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self) {
  [((OrgGeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) clear];
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(self->listItems_)) {
    OrgGeogebraCommonKernelStatisticsAlgoCellRange_addWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoCellRange_addWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  [((OrgGeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  id<JavaUtilIterator> it = [((OrgGeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self->geoList_ getAlgoUpdateSet])) getIterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [geo addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:[it next]];
  }
}

void OrgGeogebraCommonKernelStatisticsAlgoCellRange_addToListWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  [((JavaUtilArrayList *) nil_chk(self->listItems_)) addWithId:geo];
  OrgGeogebraCommonKernelStatisticsAlgoCellRange_addWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
  [((OrgGeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) updateRepaint];
}

JavaUtilArrayList *OrgGeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithOrgGeogebraCommonAwtGPoint_withOrgGeogebraCommonAwtGPoint_(OrgGeogebraCommonKernelStatisticsAlgoCellRange *self, OrgGeogebraCommonAwtGPoint *startCoords, OrgGeogebraCommonAwtGPoint *endCoords) {
  JavaUtilArrayList *listItems = new_JavaUtilArrayList_init();
  jboolean validRange = startCoords != nil && endCoords != nil;
  if (!validRange) {
    return listItems;
  }
  jint minCol = JavaLangMath_minWithInt_withInt_(((OrgGeogebraCommonAwtGPoint *) nil_chk(startCoords))->x_, ((OrgGeogebraCommonAwtGPoint *) nil_chk(endCoords))->x_);
  jint maxCol = JavaLangMath_maxWithInt_withInt_(startCoords->x_, endCoords->x_);
  jint minRow = JavaLangMath_minWithInt_withInt_(startCoords->y_, endCoords->y_);
  jint maxRow = JavaLangMath_maxWithInt_withInt_(startCoords->y_, endCoords->y_);
  self->maxExistingCol_ = minCol - 1;
  self->maxExistingRow_ = minRow - 1;
  for (jint colIndex = minCol; colIndex <= maxCol; colIndex++) {
    for (jint rowIndex = minRow; rowIndex <= maxRow; rowIndex++) {
      NSString *cellLabel = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(colIndex, rowIndex);
      OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:cellLabel];
      if (geo == nil || [geo isEmptySpreadsheetCell]) {
        continue;
      }
      [listItems addWithId:geo];
      self->maxExistingCol_ = colIndex;
      self->maxExistingRow_ = rowIndex;
    }
  }
  return listItems;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoCellRange)
