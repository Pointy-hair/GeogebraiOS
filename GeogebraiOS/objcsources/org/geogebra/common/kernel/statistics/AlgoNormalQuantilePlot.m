//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/AlgoNormalQuantilePlot.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/distribution/NormalDistributionImpl.h"
#include "org/apache/commons/math/stat/descriptive/SummaryStatistics.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/statistics/AlgoNormalQuantilePlot.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  OrgGeogebraCommonKernelGeosGeoList *outputList_;
  jint size_;
  IOSDoubleArray *zValues_;
  IOSDoubleArray *sortedData_;
}

- (void)calculateZValuesWithInt:(jint)n;

- (OrgGeogebraCommonKernelGeosGeoSegment *)getQQLineSegment;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot, outputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot, zValues_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot, sortedData_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_calculateZValuesWithInt_(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self, jint n);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoSegment *OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_getQQLineSegment(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_compute(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_NormalQuantilePlot();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)calculateZValuesWithInt:(jint)n {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_calculateZValuesWithInt_(self, n);
}

- (OrgGeogebraCommonKernelGeosGeoSegment *)getQQLineSegment {
  return OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_getQQLineSegment(self);
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  RELEASE_(zValues_);
  RELEASE_(sortedData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoNormalQuantilePlot", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoNormalQuantilePlot", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "calculateZValuesWithInt:", "calculateZValues", "V", 0x2, NULL, NULL },
    { "getQQLineSegment", NULL, "Lorg.geogebra.common.kernel.geos.GeoSegment;", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "zValues_", NULL, 0x2, "[D", NULL, NULL,  },
    { "sortedData_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot = { 2, "AlgoNormalQuantilePlot", "org.geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *new_OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self = [OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot alloc];
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_set_inputList_(self, inputList);
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_setAndConsume_outputList_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *new_OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self = [OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot alloc];
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_calculateZValuesWithInt_(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self, jint n) {
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_setAndConsume_zValues_(self, [IOSDoubleArray newArrayWithLength:n]);
  OrgApacheCommonsMathDistributionNormalDistributionImpl *normalDist = [new_OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(0, 1) autorelease];
  jdouble x;
  @try {
    x = 1 - JavaLangMath_powWithDouble_withDouble_(0.5, 1.0 / n);
    *IOSDoubleArray_GetRef(self->zValues_, 0) = [normalDist inverseCumulativeProbabilityWithDouble:x];
    for (jint i = 2; i < n; i++) {
      x = (i - 0.3175) / (n + 0.365);
      *IOSDoubleArray_GetRef(self->zValues_, i - 1) = [normalDist inverseCumulativeProbabilityWithDouble:x];
    }
    x = JavaLangMath_powWithDouble_withDouble_(0.5, 1.0 / n);
    *IOSDoubleArray_GetRef(self->zValues_, n - 1) = [normalDist inverseCumulativeProbabilityWithDouble:x];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
}

OrgGeogebraCommonKernelGeosGeoSegment *OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_getQQLineSegment(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self) {
  OrgApacheCommonsMathStatDescriptiveSummaryStatistics *stats = [new_OrgApacheCommonsMathStatDescriptiveSummaryStatistics_init() autorelease];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->sortedData_))->size_; i++) {
    [stats addValueWithDouble:IOSDoubleArray_Get(self->sortedData_, i)];
  }
  jdouble sd = [stats getStandardDeviation];
  jdouble mean = [stats getMean];
  jdouble min = [stats getMin];
  jdouble max = [stats getMax];
  OrgGeogebraCommonKernelGeosGeoPoint *startPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_) autorelease];
  [startPoint setCoordsWithDouble:min withDouble:(min / sd) - mean / sd withDouble:1.0];
  OrgGeogebraCommonKernelGeosGeoPoint *endPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_) autorelease];
  [endPoint setCoordsWithDouble:max withDouble:(max / sd) - mean / sd withDouble:1.0];
  OrgGeogebraCommonKernelGeosGeoSegment *seg = [new_OrgGeogebraCommonKernelGeosGeoSegment_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self->cons_, startPoint, endPoint) autorelease];
  [seg calcLength];
  return seg;
}

void OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_compute(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *self) {
  self->size_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || self->size_ == 0) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_setAndConsume_sortedData_(self, [IOSDoubleArray newArrayWithLength:self->size_]);
  for (jint i = 0; i < self->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      *IOSDoubleArray_GetRef(self->sortedData_, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
      return;
    }
  }
  JavaUtilArrays_sortWithDoubleArray_(self->sortedData_);
  OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_calculateZValuesWithInt_(self, self->size_);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  for (jint i = [self->outputList_ size] - 1; i >= self->size_; i--) {
    OrgGeogebraCommonKernelGeosGeoElement *extraGeo = [self->outputList_ getWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(extraGeo)) remove];
    [self->outputList_ removeWithOrgGeogebraCommonKernelGeosGeoElement:extraGeo];
  }
  jint oldListSize = [self->outputList_ size];
  jboolean suppressLabelCreation = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  for (jint i = 0; i < self->sortedData_->size_; i++) {
    if (i < oldListSize) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->outputList_ getWithInt:i], [OrgGeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:IOSDoubleArray_Get(self->sortedData_, i) withDouble:IOSDoubleArray_Get(nil_chk(self->zValues_), i) withDouble:1.0];
    else [self->outputList_ addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, IOSDoubleArray_Get(self->sortedData_, i), IOSDoubleArray_Get(nil_chk(self->zValues_), i), 1.0) autorelease]];
  }
  [self->outputList_ addWithOrgGeogebraCommonKernelGeosGeoElement:OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_getQQLineSegment(self)];
  [self->cons_ setSuppressLabelCreationWithBoolean:suppressLabelCreation];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoNormalQuantilePlot)
