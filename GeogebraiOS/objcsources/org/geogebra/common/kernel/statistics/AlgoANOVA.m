//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/AlgoANOVA.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "org/apache/commons/math/stat/inference/OneWayAnovaImpl.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/statistics/AlgoANOVA.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoANOVA () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geoList_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  JavaUtilArrayList *categoryData_;
  jdouble p_, testStat_;
  OrgApacheCommonsMathStatInferenceOneWayAnovaImpl *anovaImpl_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoANOVA, geoList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoANOVA, result_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoANOVA, categoryData_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoANOVA, anovaImpl_, OrgApacheCommonsMathStatInferenceOneWayAnovaImpl *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoANOVA_compute(OrgGeogebraCommonKernelStatisticsAlgoANOVA *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoANOVA

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  OrgGeogebraCommonKernelStatisticsAlgoANOVA_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ANOVA();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoANOVA_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(result_);
  RELEASE_(categoryData_);
  RELEASE_(anovaImpl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoANOVA", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "categoryData_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<L[D;>;",  },
    { "p_", NULL, 0x2, "D", NULL, NULL,  },
    { "testStat_", NULL, 0x2, "D", NULL, NULL,  },
    { "anovaImpl_", NULL, 0x2, "Lorg.apache.commons.math.stat.inference.OneWayAnovaImpl;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoANOVA = { 2, "AlgoANOVA", "org.geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoANOVA;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoANOVA_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoANOVA *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoANOVA_set_geoList_(self, geoList);
  OrgGeogebraCommonKernelStatisticsAlgoANOVA_setAndConsume_result_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoANOVA_compute(self);
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoANOVA *new_OrgGeogebraCommonKernelStatisticsAlgoANOVA_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelStatisticsAlgoANOVA *self = [OrgGeogebraCommonKernelStatisticsAlgoANOVA alloc];
  OrgGeogebraCommonKernelStatisticsAlgoANOVA_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoANOVA_compute(OrgGeogebraCommonKernelStatisticsAlgoANOVA *self) {
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  if (size < 2) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  for (jint index = 0; index < size; index++) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:index])) isDefined] || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:index])) isGeoList] || [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([self->geoList_ getWithInt:index], [OrgGeogebraCommonKernelGeosGeoList class])))) size] < 2) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
  if (self->categoryData_ == nil) {
    OrgGeogebraCommonKernelStatisticsAlgoANOVA_setAndConsume_categoryData_(self, new_JavaUtilArrayList_init());
  }
  else {
    [self->categoryData_ clear];
  }
  OrgGeogebraCommonKernelGeosGeoList *list;
  for (jint index = 0; index < size; index++) {
    list = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([self->geoList_ getWithInt:index], [OrgGeogebraCommonKernelGeosGeoList class]);
    IOSDoubleArray *val = [IOSDoubleArray arrayWithLength:[((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) size]];
    for (jint i = 0; i < [list size]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [list getWithInt:i];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
        id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(val, i) = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
    [((JavaUtilArrayList *) nil_chk(self->categoryData_)) addWithId:val];
  }
  @try {
    if (self->anovaImpl_ == nil) OrgGeogebraCommonKernelStatisticsAlgoANOVA_setAndConsume_anovaImpl_(self, new_OrgApacheCommonsMathStatInferenceOneWayAnovaImpl_init());
    self->p_ = [((OrgApacheCommonsMathStatInferenceOneWayAnovaImpl *) nil_chk(self->anovaImpl_)) anovaPValueWithJavaUtilCollection:self->categoryData_];
    self->testStat_ = [self->anovaImpl_ anovaFValueWithJavaUtilCollection:self->categoryData_];
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
    [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->p_) autorelease]];
    [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->testStat_) autorelease]];
  }
  @catch (JavaLangException *e) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoANOVA)
