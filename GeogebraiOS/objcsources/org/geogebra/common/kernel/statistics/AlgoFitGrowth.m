//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoFitGrowth.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitGrowth.h"
#include "org/geogebra/common/kernel/statistics/RegressionMath.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoFitGrowth () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geolist_;
  OrgGeogebraCommonKernelGeosGeoFunction *geofunction_;
  OrgGeogebraCommonKernelStatisticsRegressionMath *regMath_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitGrowth, geolist_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitGrowth, geofunction_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitGrowth, regMath_, OrgGeogebraCommonKernelStatisticsRegressionMath *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_compute(OrgGeogebraCommonKernelStatisticsAlgoFitGrowth *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoFitGrowth

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geolist {
  OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geolist {
  OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_FitGrowth();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, geolist_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:geofunction_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFitGrowth {
  return geofunction_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_compute(self);
}

- (IOSDoubleArray *)getCoeffs {
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(regMath_)) getP1], [regMath_ getP2] } count:2];
  return ret;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFitGrowth", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFitGrowth", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitGrowth", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getCoeffs", NULL, "[D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geolist_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geofunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "regMath_", NULL, 0x2, "Lorg.geogebra.common.kernel.statistics.RegressionMath;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoFitGrowth = { 2, "AlgoFitGrowth", "org.geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoFitGrowth;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoFitGrowth *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geolist) {
  (void) OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoFitGrowth *new_OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geolist) {
  OrgGeogebraCommonKernelStatisticsAlgoFitGrowth *self = [OrgGeogebraCommonKernelStatisticsAlgoFitGrowth alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoFitGrowth *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *geolist) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->regMath_ = new_OrgGeogebraCommonKernelStatisticsRegressionMath_init();
  self->geolist_ = geolist;
  self->geofunction_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoFitGrowth *new_OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *geolist) {
  OrgGeogebraCommonKernelStatisticsAlgoFitGrowth *self = [OrgGeogebraCommonKernelStatisticsAlgoFitGrowth alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFitGrowth_compute(OrgGeogebraCommonKernelStatisticsAlgoFitGrowth *self) {
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) size];
  jboolean regok = YES;
  jdouble a, b;
  if (![self->geolist_ isDefined] || (size < 2)) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
  regok = [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(self->regMath_)) doExpWithOrgGeogebraCommonKernelGeosGeoList:self->geolist_];
  if (regok) {
    a = [self->regMath_ getP1];
    b = [self->regMath_ getP2];
    b = JavaLangMath_expWithDouble_(b);
    OrgGeogebraCommonKernelArithmeticMyDouble *A = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a);
    OrgGeogebraCommonKernelArithmeticMyDouble *B = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, b);
    OrgGeogebraCommonKernelArithmeticFunctionVariable *X = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> expr = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, B, OrgGeogebraCommonPluginOperationEnum_get_POWER(), X);
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, A, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), expr);
    OrgGeogebraCommonKernelArithmeticFunction *f = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(node, X);
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:f];
    [self->geofunction_ setDefinedWithBoolean:YES];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoFitGrowth)
