//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/statistics/AlgoSample.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/statistics/AlgoSample.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoSample () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  OrgGeogebraCommonKernelGeosGeoBoolean *replacement_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> num_;
  OrgGeogebraCommonKernelGeosGeoList *outputList_;
}

- (void)setListElementWithInt:(jint)index
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoSample, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoSample, replacement_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoSample, num_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoSample, outputList_, OrgGeogebraCommonKernelGeosGeoList *)

static jint OrgGeogebraCommonKernelStatisticsAlgoSample_SAMPLE_MAXSIZE_ = 10000;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelStatisticsAlgoSample, SAMPLE_MAXSIZE_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelStatisticsAlgoSample, SAMPLE_MAXSIZE_, jint)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoSample_compute(OrgGeogebraCommonKernelStatisticsAlgoSample *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoSample_setListElementWithInt_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelStatisticsAlgoSample *self, jint index, OrgGeogebraCommonKernelGeosGeoElement *geo);

@implementation OrgGeogebraCommonKernelStatisticsAlgoSample

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)num
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)replacement {
  OrgGeogebraCommonKernelStatisticsAlgoSample_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, inputList, num, replacement);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Sample();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:replacement_ == nil ? 2 : 3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, inputList_);
  (void) IOSObjectArray_Set(input_, 1, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) toGeoElement]);
  if (replacement_ != nil) (void) IOSObjectArray_Set(input_, 2, replacement_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoSample_compute(self);
}

- (void)setListElementWithInt:(jint)index
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelStatisticsAlgoSample_setListElementWithInt_withOrgGeogebraCommonKernelGeosGeoElement_(self, index, geo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoSample", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setListElementWithInt:withOrgGeogebraCommonKernelGeosGeoElement:", "setListElement", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SAMPLE_MAXSIZE_", NULL, 0xa, "I", &OrgGeogebraCommonKernelStatisticsAlgoSample_SAMPLE_MAXSIZE_, NULL,  },
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "replacement_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoSample = { 2, "AlgoSample", "org.geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoSample;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoSample_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelStatisticsAlgoSample *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList, id<OrgGeogebraCommonKernelArithmeticNumberValue> num, OrgGeogebraCommonKernelGeosGeoBoolean *replacement) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->inputList_ = inputList;
  self->replacement_ = replacement;
  self->num_ = num;
  self->outputList_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoSample_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoSample *new_OrgGeogebraCommonKernelStatisticsAlgoSample_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList, id<OrgGeogebraCommonKernelArithmeticNumberValue> num, OrgGeogebraCommonKernelGeosGeoBoolean *replacement) {
  OrgGeogebraCommonKernelStatisticsAlgoSample *self = [OrgGeogebraCommonKernelStatisticsAlgoSample alloc];
  OrgGeogebraCommonKernelStatisticsAlgoSample_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, inputList, num, replacement);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoSample_compute(OrgGeogebraCommonKernelStatisticsAlgoSample *self) {
  jint size = J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->num_)) getDouble]);
  if (![((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) isDefined] || [self->num_ getDouble] < 1 || [self->num_ getDouble] > OrgGeogebraCommonKernelStatisticsAlgoSample_SAMPLE_MAXSIZE_) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  jboolean withReplacement = YES;
  if (self->replacement_ != nil) {
    withReplacement = [self->replacement_ getBoolean];
  }
  jint inputListSize = [self->inputList_ size];
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) clear];
  if (withReplacement) {
    for (jint i = 0; i < size; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo;
      @try {
        geo = [self->inputList_ getWithInt:J2ObjCFpToInt(JavaLangMath_floorWithDouble_([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getApplication])) getRandomNumber] * inputListSize))];
      }
      @catch (JavaLangClassCastException *e) {
        [self->outputList_ setUndefined];
        return;
      }
      OrgGeogebraCommonKernelStatisticsAlgoSample_setListElementWithInt_withOrgGeogebraCommonKernelGeosGeoElement_(self, i, geo);
    }
  }
  else {
    if (size > inputListSize) {
      [self->outputList_ setUndefined];
      return;
    }
    JavaUtilArrayList *list = new_JavaUtilArrayList_init();
    for (jint i = 0; i < inputListSize; i++) {
      [list addWithId:[self->inputList_ getWithInt:i]];
    }
    for (jint i = 0; i < size; i++) {
      jint pos = J2ObjCFpToInt(JavaLangMath_floorWithDouble_([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getApplication])) getRandomNumber] * (inputListSize - i)));
      [self->outputList_ addWithOrgGeogebraCommonKernelGeosGeoElement:[list getWithInt:pos]];
      (void) [list removeWithInt:pos];
    }
  }
  [self->outputList_ setDefinedWithBoolean:YES];
}

void OrgGeogebraCommonKernelStatisticsAlgoSample_setListElementWithInt_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelStatisticsAlgoSample *self, jint index, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonKernelGeosGeoElement *listElement;
  if (index < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) getCacheSize]) {
    listElement = [self->outputList_ getCachedWithInt:index];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    listElement = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) copy__];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
    [listElement setConstructionDefaults];
    [listElement setUseVisualDefaultsWithBoolean:NO];
  }
  [self->outputList_ addWithOrgGeogebraCommonKernelGeosGeoElement:listElement];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoSample)
