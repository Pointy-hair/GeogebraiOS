//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/statistics/AlgoFitLog.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/statistics/AlgoFitLog.h"
#include "org/geogebra/common/kernel/statistics/RegressionMath.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoFitLog () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geolist_;
  OrgGeogebraCommonKernelGeosGeoFunction *geofunction_;
  OrgGeogebraCommonKernelStatisticsRegressionMath *regMath_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitLog, geolist_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitLog, geofunction_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoFitLog, regMath_, OrgGeogebraCommonKernelStatisticsRegressionMath *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoFitLog_compute(OrgGeogebraCommonKernelStatisticsAlgoFitLog *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoFitLog

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geolist {
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geolist {
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_FitLog();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geolist_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:geofunction_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFitLog {
  return geofunction_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_compute(self);
}

- (IOSDoubleArray *)getCoeffs {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(regMath_)) getP1], [regMath_ getP2] } count:2];
  return ret;
}

- (void)dealloc {
  RELEASE_(geolist_);
  RELEASE_(geofunction_);
  RELEASE_(regMath_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFitLog", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFitLog", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitLog", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getCoeffs", NULL, "[D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geolist_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geofunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "regMath_", NULL, 0x12, "Lorg.geogebra.common.kernel.statistics.RegressionMath;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoFitLog = { 2, "AlgoFitLog", "org.geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoFitLog;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoFitLog *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geolist) {
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoFitLog *new_OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geolist) {
  OrgGeogebraCommonKernelStatisticsAlgoFitLog *self = [OrgGeogebraCommonKernelStatisticsAlgoFitLog alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelStatisticsAlgoFitLog *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *geolist) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_set_geolist_(self, geolist);
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_setAndConsume_geofunction_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_setAndConsume_regMath_(self, new_OrgGeogebraCommonKernelStatisticsRegressionMath_init());
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoFitLog *new_OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *geolist) {
  OrgGeogebraCommonKernelStatisticsAlgoFitLog *self = [OrgGeogebraCommonKernelStatisticsAlgoFitLog alloc];
  OrgGeogebraCommonKernelStatisticsAlgoFitLog_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoFitLog_compute(OrgGeogebraCommonKernelStatisticsAlgoFitLog *self) {
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) size];
  jboolean regok = YES;
  jdouble a, b;
  if (![self->geolist_ isDefined] || (size < 2)) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
  regok = [((OrgGeogebraCommonKernelStatisticsRegressionMath *) nil_chk(self->regMath_)) doLogWithOrgGeogebraCommonKernelGeosGeoList:self->geolist_];
  if (regok) {
    a = [self->regMath_ getP1];
    b = [self->regMath_ getP2];
    OrgGeogebraCommonKernelArithmeticMyDouble *A = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a) autorelease];
    OrgGeogebraCommonKernelArithmeticMyDouble *B = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, b) autorelease];
    OrgGeogebraCommonKernelArithmeticFunctionVariable *X = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> expr = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, X, OrgGeogebraCommonPluginOperationEnum_get_LOG(), X) autorelease];
    expr = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, B, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), expr) autorelease];
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, A, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), expr) autorelease];
    OrgGeogebraCommonKernelArithmeticFunction *f = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(node, X) autorelease];
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:f];
    [self->geofunction_ setDefinedWithBoolean:YES];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoFitLog)
