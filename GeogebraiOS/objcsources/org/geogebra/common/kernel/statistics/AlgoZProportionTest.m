//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/statistics/AlgoZProportionTest.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/apache/commons/math/distribution/NormalDistributionImpl.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/statistics/AlgoZProportionTest.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelStatisticsAlgoZProportionTest () {
 @public
  OrgGeogebraCommonKernelGeosGeoNumeric *hypPropertion_, *proportion_, *n_;
  OrgGeogebraCommonKernelGeosGeoText *tail_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  jdouble se_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest, hypPropertion_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest, proportion_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest, n_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest, tail_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest, result_, OrgGeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_compute(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *self);

@implementation OrgGeogebraCommonKernelStatisticsAlgoZProportionTest

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)proportion
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)hypProportion
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail {
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, proportion, n, hypProportion, tail);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)proportion
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)hypProportion
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)tail {
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, proportion, n, hypProportion, tail);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ZProportionTest();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, proportion_);
  IOSObjectArray_Set(input_, 1, n_);
  IOSObjectArray_Set(input_, 2, hypPropertion_);
  IOSObjectArray_Set(input_, 3, tail_);
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (jdouble)getSE {
  return se_;
}

- (void)compute {
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_compute(self);
}

- (void)dealloc {
  RELEASE_(hypPropertion_);
  RELEASE_(proportion_);
  RELEASE_(n_);
  RELEASE_(tail_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoZProportionTest", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoZProportionTest", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getSE", NULL, "D", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hypPropertion_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "proportion_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "se_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelStatisticsAlgoZProportionTest = { 2, "AlgoZProportionTest", "org.geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelStatisticsAlgoZProportionTest;
}

@end

void OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *proportion, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *hypProportion, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, proportion, n, hypProportion, tail);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *new_OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *proportion, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *hypProportion, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *self = [OrgGeogebraCommonKernelStatisticsAlgoZProportionTest alloc];
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, proportion, n, hypProportion, tail);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *proportion, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *hypProportion, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_set_hypPropertion_(self, hypProportion);
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_set_tail_(self, tail);
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_set_proportion_(self, proportion);
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_set_n_(self, n);
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_setAndConsume_result_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_compute(self);
}

OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *new_OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoNumeric *proportion, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *hypProportion, OrgGeogebraCommonKernelGeosGeoText *tail) {
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *self = [OrgGeogebraCommonKernelStatisticsAlgoZProportionTest alloc];
  OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, proportion, n, hypProportion, tail);
  return self;
}

void OrgGeogebraCommonKernelStatisticsAlgoZProportionTest_compute(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest *self) {
  NSString *testType;
  if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString])) isEqual:@"<"]) {
    testType = @"left";
  }
  else if ([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@">"]) {
    testType = @"right";
  }
  else if (OrgGeogebraCommonUtilStringUtil_isNotEqualWithNSString_([self->tail_ getTextString])) {
    testType = @"two";
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  jdouble n1 = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble];
  jdouble hyp = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->hypPropertion_)) getDouble];
  jdouble phat = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion_)) getDouble];
  self->se_ = JavaLangMath_sqrtWithDouble_(hyp * (1 - hyp) / n1);
  jdouble testStatistic = (phat - hyp) / self->se_;
  OrgApacheCommonsMathDistributionNormalDistributionImpl *normalDist = [new_OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(0, 1) autorelease];
  jdouble P = 0;
  @try {
    P = [normalDist cumulativeProbabilityWithDouble:testStatistic];
  }
  @catch (JavaLangException *e) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  if ([@"right" isEqual:testType]) {
    P = 1 - P;
  }
  else if ([@"two" isEqual:testType]) {
    if (testStatistic < 0) {
      P = 2 * P;
    }
    else {
      P = 2 * (1 - P);
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, P) autorelease]];
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, testStatistic) autorelease]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelStatisticsAlgoZProportionTest)
