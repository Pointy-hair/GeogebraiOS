//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/SliderMover.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverGeneric.h"
#include "org/geogebra/common/kernel/PathNormalizer.h"
#include "org/geogebra/common/kernel/SliderMover.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

#define OrgGeogebraCommonKernelSliderMover_BOUNDS_FIXED 1
#define OrgGeogebraCommonKernelSliderMover_BOUNDS_INFINITE 2
#define OrgGeogebraCommonKernelSliderMover_BOUNDS_FIXED_INFINITE 3
#define OrgGeogebraCommonKernelSliderMover_BOUNDS_INFINITE_FIXED 4

@interface OrgGeogebraCommonKernelSliderMover () {
 @public
  OrgGeogebraCommonKernelGeosGeoNumeric *slider_;
}

- (void)init__WithDouble:(jdouble)param OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelSliderMover, slider_, OrgGeogebraCommonKernelGeosGeoNumeric *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelSliderMover, BOUNDS_FIXED, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelSliderMover, BOUNDS_INFINITE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelSliderMover, BOUNDS_FIXED_INFINITE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelSliderMover, BOUNDS_INFINITE_FIXED, jint)

__attribute__((unused)) static void OrgGeogebraCommonKernelSliderMover_init__WithDouble_(OrgGeogebraCommonKernelSliderMover *self, jdouble param);

@implementation OrgGeogebraCommonKernelSliderMover

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)path {
  OrgGeogebraCommonKernelSliderMover_initWithOrgGeogebraCommonKernelGeosGeoNumeric_(self, path);
  return self;
}

- (void)init__WithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)p {
  OrgGeogebraCommonKernelSliderMover_init__WithDouble_(self, [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(p)) getValue]);
}

- (void)init__WithDouble:(jdouble)param {
  OrgGeogebraCommonKernelSliderMover_init__WithDouble_(self, param);
}

- (void)getCurrentPositionWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)p {
  [self calcPointWithOrgGeogebraCommonKernelGeosGeoNumeric:p];
}

- (jboolean)getNextWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)p {
  jboolean lineTo = YES;
  last_param_ = curr_param_;
  lastMaxBorderSet_ = maxBorderSet_;
  lastMinBorderSet_ = minBorderSet_;
  if (maxBorderSet_) {
    curr_param_ = min_param_;
    lineTo = NO;
    maxBorderSet_ = NO;
  }
  else if (minBorderSet_) {
    curr_param_ = max_param_;
    lineTo = NO;
    minBorderSet_ = NO;
  }
  else {
    jdouble new_param = curr_param_ + step_width_;
    if (new_param >= max_param_) {
      while (new_param >= max_param_ && [self smallerStep]) {
        new_param = curr_param_ + step_width_;
      }
      if (new_param >= max_param_) {
        new_param = max_param_;
        maxBorderSet_ = YES;
      }
    }
    else if (new_param <= min_param_) {
      while (new_param <= min_param_ && [self smallerStep]) {
        new_param = curr_param_ + step_width_;
      }
      if (new_param <= min_param_) {
        new_param = min_param_;
        minBorderSet_ = YES;
      }
    }
    curr_param_ = new_param;
  }
  [self calcPointWithOrgGeogebraCommonKernelGeosGeoNumeric:p];
  return lineTo;
}

- (void)calcPointWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)p {
  jdouble param;
  switch (mode_) {
    case OrgGeogebraCommonKernelSliderMover_BOUNDS_FIXED:
    param = curr_param_;
    break;
    case OrgGeogebraCommonKernelSliderMover_BOUNDS_INFINITE:
    param = OrgGeogebraCommonKernelPathNormalizer_infFunctionWithDouble_(curr_param_);
    break;
    case OrgGeogebraCommonKernelSliderMover_BOUNDS_FIXED_INFINITE:
    case OrgGeogebraCommonKernelSliderMover_BOUNDS_INFINITE_FIXED:
    param = offset_ + OrgGeogebraCommonKernelPathNormalizer_infFunctionWithDouble_(curr_param_);
    break;
    default:
    param = JavaLangDouble_NaN;
  }
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(p)) setValueWithDouble:param];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoNumeric:", "SliderMover", NULL, 0x1, NULL, NULL },
    { "init__WithOrgGeogebraCommonKernelGeosGeoNumeric:", "init", "V", 0x1, NULL, NULL },
    { "init__WithDouble:", "init", "V", 0x2, NULL, NULL },
    { "getCurrentPositionWithOrgGeogebraCommonKernelGeosGeoNumeric:", "getCurrentPosition", "V", 0x1, NULL, NULL },
    { "getNextWithOrgGeogebraCommonKernelGeosGeoNumeric:", "getNext", "Z", 0x1, NULL, NULL },
    { "calcPointWithOrgGeogebraCommonKernelGeosGeoNumeric:", "calcPoint", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BOUNDS_FIXED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelSliderMover_BOUNDS_FIXED },
    { "BOUNDS_INFINITE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelSliderMover_BOUNDS_INFINITE },
    { "BOUNDS_FIXED_INFINITE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelSliderMover_BOUNDS_FIXED_INFINITE },
    { "BOUNDS_INFINITE_FIXED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelSliderMover_BOUNDS_INFINITE_FIXED },
    { "slider_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelSliderMover = { 2, "SliderMover", "org.geogebra.common.kernel", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelSliderMover;
}

@end

void OrgGeogebraCommonKernelSliderMover_initWithOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelSliderMover *self, OrgGeogebraCommonKernelGeosGeoNumeric *path) {
  (void) OrgGeogebraCommonKernelPathMoverGeneric_init(self);
  self->slider_ = path;
}

OrgGeogebraCommonKernelSliderMover *new_OrgGeogebraCommonKernelSliderMover_initWithOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelGeosGeoNumeric *path) {
  OrgGeogebraCommonKernelSliderMover *self = [OrgGeogebraCommonKernelSliderMover alloc];
  OrgGeogebraCommonKernelSliderMover_initWithOrgGeogebraCommonKernelGeosGeoNumeric_(self, path);
  return self;
}

void OrgGeogebraCommonKernelSliderMover_init__WithDouble_(OrgGeogebraCommonKernelSliderMover *self, jdouble param) {
  self->start_param_ = param;
  self->min_param_ = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->slider_)) getIntervalMin];
  self->max_param_ = [self->slider_ getIntervalMax];
  if (self->start_param_ < self->min_param_ || self->start_param_ > self->max_param_) {
    self->param_extent_ = self->max_param_ - self->min_param_;
    self->start_param_ = fmod((self->start_param_ - self->min_param_), self->param_extent_);
    if (self->start_param_ < self->min_param_) self->start_param_ += self->param_extent_;
  }
  if (self->min_param_ == JavaLangDouble_NEGATIVE_INFINITY) {
    if (self->max_param_ == JavaLangDouble_POSITIVE_INFINITY) {
      self->mode_ = OrgGeogebraCommonKernelSliderMover_BOUNDS_INFINITE;
      self->min_param_ = -1 + OrgGeogebraCommonKernelPathMover_OPEN_BORDER_OFFSET;
      self->max_param_ = 1 - OrgGeogebraCommonKernelPathMover_OPEN_BORDER_OFFSET;
      self->start_param_ = OrgGeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_(self->start_param_);
    }
    else {
      self->mode_ = OrgGeogebraCommonKernelSliderMover_BOUNDS_INFINITE_FIXED;
      self->start_param_ = 0;
      self->offset_ = self->max_param_;
      self->min_param_ = -1 + OrgGeogebraCommonKernelPathMover_OPEN_BORDER_OFFSET;
      self->max_param_ = 0;
    }
  }
  else {
    if (self->max_param_ == JavaLangDouble_POSITIVE_INFINITY) {
      self->mode_ = OrgGeogebraCommonKernelSliderMover_BOUNDS_FIXED_INFINITE;
      self->start_param_ = 0;
      self->offset_ = self->min_param_;
      self->min_param_ = 0;
      self->max_param_ = 1 - OrgGeogebraCommonKernelPathMover_OPEN_BORDER_OFFSET;
    }
    else {
      self->mode_ = OrgGeogebraCommonKernelSliderMover_BOUNDS_FIXED;
    }
  }
  self->param_extent_ = self->max_param_ - self->min_param_;
  self->start_paramUP_ = self->start_param_ + self->param_extent_;
  self->start_paramDOWN_ = self->start_param_ - self->param_extent_;
  self->max_step_width_ = self->param_extent_ / OrgGeogebraCommonKernelPathMover_MIN_STEPS;
  self->posOrientation_ = YES;
  [self resetStartParameter];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelSliderMover)
