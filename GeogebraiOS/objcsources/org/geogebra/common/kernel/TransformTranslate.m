//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/TransformTranslate.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Transform.h"
#include "org/geogebra/common/kernel/TransformTranslate.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/algos/AlgoTranslate.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"

@interface OrgGeogebraCommonKernelTransformTranslate () {
 @public
  OrgGeogebraCommonKernelGeosGeoVec3D *transVec_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelTransformTranslate, transVec_, OrgGeogebraCommonKernelGeosGeoVec3D *)

@implementation OrgGeogebraCommonKernelTransformTranslate

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                    withOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)transVec {
  OrgGeogebraCommonKernelTransformTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_(self, cons, transVec);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelAlgosAlgoTranslate *algo = [new_OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, geo, transVec_) autorelease];
  return algo;
}

- (void)dealloc {
  RELEASE_(transVec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoVec3D:", "TransformTranslate", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lorg.geogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "transVec_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVec3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelTransformTranslate = { 2, "TransformTranslate", "org.geogebra.common.kernel", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelTransformTranslate;
}

@end

void OrgGeogebraCommonKernelTransformTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_(OrgGeogebraCommonKernelTransformTranslate *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoVec3D *transVec) {
  OrgGeogebraCommonKernelTransform_init(self);
  OrgGeogebraCommonKernelTransformTranslate_set_transVec_(self, transVec);
  OrgGeogebraCommonKernelTransform_set_cons_(self, cons);
}

OrgGeogebraCommonKernelTransformTranslate *new_OrgGeogebraCommonKernelTransformTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoVec3D *transVec) {
  OrgGeogebraCommonKernelTransformTranslate *self = [OrgGeogebraCommonKernelTransformTranslate alloc];
  OrgGeogebraCommonKernelTransformTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_(self, cons, transVec);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelTransformTranslate)
