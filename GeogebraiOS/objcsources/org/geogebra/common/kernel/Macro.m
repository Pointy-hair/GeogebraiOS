//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/Macro.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/GeoGebraConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Locateable.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/MacroConstruction.h"
#include "org/geogebra/common/kernel/MacroKernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/geos/Test.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelMacro () {
 @public
  OrgGeogebraCommonKernelKernel *kernel_;
  NSString *cmdName_, *toolName_, *toolHelp_;
  NSString *iconFileName_;
  jboolean showInToolBar_;
  OrgGeogebraCommonKernelConstruction *macroCons_;
  JavaLangStringBuilder *macroConsXML_;
  IOSObjectArray *macroInput_, *macroOutput_;
  IOSObjectArray *macroInputLabels_, *macroOutputLabels_;
  IOSObjectArray *inputTypes_;
  JavaUtilLinkedList *usingAlgos_;
  jboolean copyCaptions_;
}

- (void)initInputOutput OBJC_METHOD_FAMILY_NONE;

- (void)initMacroWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
                 withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)output OBJC_METHOD_FAMILY_NONE;

- (OrgGeogebraCommonKernelConstruction *)createMacroConstructionWithNSString:(NSString *)macroConsXML;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, cmdName_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, toolName_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, toolHelp_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, iconFileName_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, macroCons_, OrgGeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, macroConsXML_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, macroInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, macroOutput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, macroInputLabels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, macroOutputLabels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, inputTypes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacro, usingAlgos_, JavaUtilLinkedList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelMacro_initInputOutput(OrgGeogebraCommonKernelMacro *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelMacro_initMacroWithOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(OrgGeogebraCommonKernelMacro *self, IOSObjectArray *input, IOSObjectArray *output);

__attribute__((unused)) static OrgGeogebraCommonKernelConstruction *OrgGeogebraCommonKernelMacro_createMacroConstructionWithNSString_(OrgGeogebraCommonKernelMacro *self, NSString *macroConsXML);

@implementation OrgGeogebraCommonKernelMacro

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)cmdName
       withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
       withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)output {
  OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(self, kernel, cmdName, input, output);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)cmdName {
  OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, cmdName);
  return self;
}

- (IOSObjectArray *)getMacroInput {
  return macroInput_;
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (IOSObjectArray *)getMacroOutput {
  return macroOutput_;
}

- (jboolean)isInMacroConstructionWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->cons_ == macroCons_;
}

- (OrgGeogebraCommonKernelConstruction *)getMacroConstruction {
  return macroCons_;
}

- (void)initMacroWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)macroCons1
                                       withNSStringArray:(IOSObjectArray *)inputLabels
                                       withNSStringArray:(IOSObjectArray *)outputLabels {
  self->macroCons_ = macroCons1;
  self->macroConsXML_ = new_JavaLangStringBuilder_init();
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(macroCons_)) getConstructionXMLWithJavaLangStringBuilder:macroConsXML_ withBoolean:NO];
  self->macroInputLabels_ = inputLabels;
  self->macroOutputLabels_ = outputLabels;
  OrgGeogebraCommonKernelMacro_initInputOutput(self);
  inputTypes_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(macroInput_))->size_ type:OrgGeogebraCommonKernelGeosTestEnum_class_()];
  for (jint i = 0; i < macroInput_->size_; i++) {
    (void) IOSObjectArray_Set(inputTypes_, i, OrgGeogebraCommonKernelGeosTestEnum_getSpecificTestWithId_(IOSObjectArray_Get(macroInput_, i)));
  }
  [((OrgGeogebraCommonKernelMacroConstruction *) nil_chk(((OrgGeogebraCommonKernelMacroConstruction *) check_class_cast(macroCons1, [OrgGeogebraCommonKernelMacroConstruction class])))) setGlobalVariableLookupWithBoolean:YES];
}

- (void)initInputOutput {
  OrgGeogebraCommonKernelMacro_initInputOutput(self);
}

- (void)initMacroWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
                 withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)output {
  OrgGeogebraCommonKernelMacro_initMacroWithOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(self, input, output);
}

+ (void)addDependentElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                     withJavaUtilSet:(id<JavaUtilSet>)consElementSet
                                                     withJavaUtilSet:(id<JavaUtilSet>)usedAlgoIds {
  OrgGeogebraCommonKernelMacro_addDependentElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(geo, consElementSet, usedAlgoIds);
}

+ (void)addSpecialInputElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                        withJavaUtilSet:(id<JavaUtilSet>)consElementSet {
  OrgGeogebraCommonKernelMacro_addSpecialInputElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_(geo, consElementSet);
}

+ (JavaLangStringBuilder *)buildMacroXMLWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                                          withJavaUtilSet:(id<JavaUtilSet>)macroConsElements {
  return OrgGeogebraCommonKernelMacro_buildMacroXMLWithOrgGeogebraCommonKernelKernel_withJavaUtilSet_(kernel, macroConsElements);
}

- (OrgGeogebraCommonKernelConstruction *)createMacroConstructionWithNSString:(NSString *)macroConsXML {
  return OrgGeogebraCommonKernelMacro_createMacroConstructionWithNSString_(self, macroConsXML);
}

- (void)registerAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoMacroInterface:(id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>)algoMacro {
  [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) addWithId:(OrgGeogebraCommonKernelAlgosAlgoElement *) check_class_cast(algoMacro, [OrgGeogebraCommonKernelAlgosAlgoElement class])];
}

- (void)unregisterAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoMacroInterface:(id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>)algoMacro {
  [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) removeWithId:algoMacro];
}

- (jboolean)isUsed {
  return [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) size] > 0;
}

- (void)setUnused {
  [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) clear];
}

- (IOSObjectArray *)getInputTypes {
  return inputTypes_;
}

- (NSString *)getToolHelp {
  if (toolHelp_ == nil || [@"" isEqual:toolHelp_]) {
    return [self description];
  }
  return toolHelp_;
}

- (NSString *)getNeededTypesString {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(macroInput_))->size_; ++i) {
    (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(macroInput_, i))) translatedTypeString]];
    if (i != macroInput_->size_ - 1) {
      (void) [sb appendWithNSString:@", "];
    }
  }
  return [sb description];
}

- (void)setToolHelpWithNSString:(NSString *)toolHelp {
  if (toolHelp == nil || [toolHelp isEqual:@"null"]) self->toolHelp_ = @"";
  else self->toolHelp_ = toolHelp;
}

- (NSString *)getCommandName {
  return cmdName_;
}

- (void)setCommandNameWithNSString:(NSString *)name {
  if (name != nil) self->cmdName_ = name;
}

- (NSString *)getToolName {
  return toolName_;
}

- (NSString *)getToolOrCommandName {
  if (![@"" isEqual:toolName_]) return toolName_;
  return cmdName_;
}

- (void)setToolNameWithNSString:(NSString *)name {
  if (name == nil || [name isEqual:@"null"] || ((jint) [name length]) == 0) self->toolName_ = cmdName_;
  else self->toolName_ = name;
}

- (void)setIconFileNameWithNSString:(NSString *)name {
  if (name == nil) self->iconFileName_ = @"";
  else self->iconFileName_ = name;
}

- (NSString *)getIconFileName {
  return iconFileName_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:cmdName_];
  (void) [sb appendWithNSString:@"[ "];
  (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(macroInput_), 0))) translatedTypeString]];
  (void) [sb appendWithChar:'>'];
  for (jint i = 1; i < macroInput_->size_; ++i) {
    (void) [sb appendWithNSString:@", "];
    (void) [sb appendWithChar:'<'];
    (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(macroInput_, i))) translatedTypeString]];
    (void) [sb appendWithChar:'>'];
  }
  (void) [sb appendWithNSString:@" ]"];
  return [sb description];
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<macro cmdName=\""];
  OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, cmdName_);
  (void) [sb appendWithNSString:@"\" toolName=\""];
  OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, toolName_);
  (void) [sb appendWithNSString:@"\" toolHelp=\""];
  OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, toolHelp_);
  (void) [sb appendWithNSString:@"\" iconFile=\""];
  OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, iconFileName_);
  (void) [sb appendWithNSString:@"\" showInToolBar=\""];
  (void) [sb appendWithBoolean:showInToolBar_];
  (void) [sb appendWithNSString:@"\" copyCaptions=\""];
  (void) [sb appendWithBoolean:copyCaptions_];
  (void) [sb appendWithNSString:@"\">\n"];
  (void) [sb appendWithNSString:@"<macroInput"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(macroInputLabels_))->size_; i++) {
    (void) [sb appendWithNSString:@" a"];
    (void) [sb appendWithInt:i];
    (void) [sb appendWithNSString:@"=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, IOSObjectArray_Get(macroInputLabels_, i));
    (void) [sb appendWithNSString:@"\""];
  }
  (void) [sb appendWithNSString:@"/>\n"];
  (void) [sb appendWithNSString:@"<macroOutput"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(macroOutputLabels_))->size_; i++) {
    (void) [sb appendWithNSString:@" a"];
    (void) [sb appendWithInt:i];
    (void) [sb appendWithNSString:@"=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, IOSObjectArray_Get(macroOutputLabels_, i));
    (void) [sb appendWithNSString:@"\""];
  }
  (void) [sb appendWithNSString:@"/>\n"];
  if (macroConsXML_ != nil && [macroConsXML_ length] > 0) {
    (void) [sb appendWithNSString:[macroConsXML_ description]];
  }
  else {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(macroCons_)) getConstructionXMLWithJavaLangStringBuilder:sb withBoolean:NO];
  }
  (void) [sb appendWithNSString:@"</macro>\n"];
}

- (jboolean)isShowInToolBar {
  return showInToolBar_;
}

- (void)setShowInToolBarWithBoolean:(jboolean)showInToolBar {
  self->showInToolBar_ = showInToolBar;
}

- (JavaUtilArrayList *)getUsedMacros {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(macroCons_)) getUsedMacros];
}

- (JavaUtilArrayList *)getDependentGeos {
  JavaUtilArrayList *geos = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> curr = [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(curr)) hasNext]) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [curr next];
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputWithInt:0];
    while (!((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->labelSet_ && [((JavaUtilTreeSet *) nil_chk([geo getAllChildren])) size] > 0) {
      geo = [((JavaUtilTreeSet *) nil_chk([geo getAllChildren])) first];
    }
    algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
    for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputLength]; i++) {
      [geos addWithId:[algo getOutputWithInt:i]];
    }
  }
  return geos;
}

- (void)setCopyCaptionsAndVisibilityWithBoolean:(jboolean)copyCaptions {
  self->copyCaptions_ = copyCaptions;
}

- (jboolean)isCopyCaptionsAndVisibility {
  return copyCaptions_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withNSString:withOrgGeogebraCommonKernelGeosGeoElementArray:withOrgGeogebraCommonKernelGeosGeoElementArray:", "Macro", NULL, 0x1, "Ljava.lang.Exception;", NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withNSString:", "Macro", NULL, 0x1, NULL, NULL },
    { "getMacroInput", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "getMacroOutput", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isInMacroConstructionWithOrgGeogebraCommonKernelGeosGeoElement:", "isInMacroConstruction", "Z", 0x11, NULL, NULL },
    { "getMacroConstruction", NULL, "Lorg.geogebra.common.kernel.Construction;", 0x1, NULL, NULL },
    { "initMacroWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withNSStringArray:", "initMacro", "V", 0x1, NULL, NULL },
    { "initInputOutput", NULL, "V", 0x2, NULL, NULL },
    { "initMacroWithOrgGeogebraCommonKernelGeosGeoElementArray:withOrgGeogebraCommonKernelGeosGeoElementArray:", "initMacro", "V", 0x2, "Ljava.lang.Exception;", NULL },
    { "addDependentElementWithOrgGeogebraCommonKernelGeosGeoElement:withJavaUtilSet:withJavaUtilSet:", "addDependentElement", "V", 0x9, NULL, NULL },
    { "addSpecialInputElementWithOrgGeogebraCommonKernelGeosGeoElement:withJavaUtilSet:", "addSpecialInputElement", "V", 0x9, NULL, NULL },
    { "buildMacroXMLWithOrgGeogebraCommonKernelKernel:withJavaUtilSet:", "buildMacroXML", "Ljava.lang.StringBuilder;", 0x9, NULL, NULL },
    { "createMacroConstructionWithNSString:", "createMacroConstruction", "Lorg.geogebra.common.kernel.Construction;", 0x2, "Ljava.lang.Exception;", NULL },
    { "registerAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoMacroInterface:", "registerAlgorithm", "V", 0x1, NULL, NULL },
    { "unregisterAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoMacroInterface:", "unregisterAlgorithm", "V", 0x1, NULL, NULL },
    { "isUsed", NULL, "Z", 0x11, NULL, NULL },
    { "setUnused", NULL, "V", 0x11, NULL, NULL },
    { "getInputTypes", NULL, "[Lorg.geogebra.common.kernel.geos.Test;", 0x11, NULL, NULL },
    { "getToolHelp", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNeededTypesString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setToolHelpWithNSString:", "setToolHelp", "V", 0x1, NULL, NULL },
    { "getCommandName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setCommandNameWithNSString:", "setCommandName", "V", 0x1, NULL, NULL },
    { "getToolName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getToolOrCommandName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setToolNameWithNSString:", "setToolName", "V", 0x1, NULL, NULL },
    { "setIconFileNameWithNSString:", "setIconFileName", "V", 0x1, NULL, NULL },
    { "getIconFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
    { "isShowInToolBar", NULL, "Z", 0x11, NULL, NULL },
    { "setShowInToolBarWithBoolean:", "setShowInToolBar", "V", 0x11, NULL, NULL },
    { "getUsedMacros", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getDependentGeos", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setCopyCaptionsAndVisibilityWithBoolean:", "setCopyCaptionsAndVisibility", "V", 0x1, NULL, NULL },
    { "isCopyCaptionsAndVisibility", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cmdName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "toolName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "toolHelp_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "iconFileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "showInToolBar_", NULL, 0x2, "Z", NULL, NULL,  },
    { "macroCons_", NULL, 0x2, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "macroConsXML_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "macroInput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macroOutput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macroInputLabels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "macroOutputLabels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "inputTypes_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.Test;", NULL, NULL,  },
    { "usingAlgos_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/kernel/algos/AlgoElement;>;",  },
    { "copyCaptions_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelMacro = { 2, "Macro", "org.geogebra.common.kernel", NULL, 0x1, 37, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelMacro;
}

@end

void OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(OrgGeogebraCommonKernelMacro *self, OrgGeogebraCommonKernelKernel *kernel, NSString *cmdName, IOSObjectArray *input, IOSObjectArray *output) {
  (void) OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, cmdName);
  OrgGeogebraCommonKernelMacro_initMacroWithOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(self, input, output);
}

OrgGeogebraCommonKernelMacro *new_OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(OrgGeogebraCommonKernelKernel *kernel, NSString *cmdName, IOSObjectArray *input, IOSObjectArray *output) {
  OrgGeogebraCommonKernelMacro *self = [OrgGeogebraCommonKernelMacro alloc];
  OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(self, kernel, cmdName, input, output);
  return self;
}

void OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_(OrgGeogebraCommonKernelMacro *self, OrgGeogebraCommonKernelKernel *kernel, NSString *cmdName) {
  (void) NSObject_init(self);
  self->cmdName_ = @"";
  self->toolName_ = @"";
  self->toolHelp_ = @"";
  self->iconFileName_ = @"";
  self->showInToolBar_ = YES;
  self->usingAlgos_ = new_JavaUtilLinkedList_init();
  self->kernel_ = kernel;
  [self setCommandNameWithNSString:cmdName];
  self->copyCaptions_ = YES;
}

OrgGeogebraCommonKernelMacro *new_OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_(OrgGeogebraCommonKernelKernel *kernel, NSString *cmdName) {
  OrgGeogebraCommonKernelMacro *self = [OrgGeogebraCommonKernelMacro alloc];
  OrgGeogebraCommonKernelMacro_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, cmdName);
  return self;
}

void OrgGeogebraCommonKernelMacro_initInputOutput(OrgGeogebraCommonKernelMacro *self) {
  self->macroInput_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->macroInputLabels_))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  self->macroOutput_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->macroOutputLabels_))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < self->macroInputLabels_->size_; i++) {
    (void) IOSObjectArray_Set(self->macroInput_, i, [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) lookupLabelWithNSString:IOSObjectArray_Get(self->macroInputLabels_, i)]);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroInput_, i))) setFixedWithBoolean:NO];
  }
  for (jint i = 0; i < self->macroOutputLabels_->size_; i++) {
    (void) IOSObjectArray_Set(self->macroOutput_, i, [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) lookupLabelWithNSString:IOSObjectArray_Get(self->macroOutputLabels_, i)]);
  }
}

void OrgGeogebraCommonKernelMacro_initMacroWithOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(OrgGeogebraCommonKernelMacro *self, IOSObjectArray *input, IOSObjectArray *output) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(output))->size_; i++) {
    jboolean dependsOnInput = NO;
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(input))->size_; k++) {
      jboolean dependencyFound = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input, k)];
      if (dependencyFound) {
        dependsOnInput = YES;
      }
    }
    if (!dependsOnInput) {
      @throw new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getLocalization])) getErrorWithNSString:@"Tool.OutputNotDependent"], @": ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) getNameDescription]));
    }
  }
  JavaUtilTreeSet *outputParents = new_JavaUtilTreeSet_init();
  for (jint i = 0; i < output->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) addPredecessorsToSetWithJavaUtilTreeSet:outputParents withBoolean:NO];
    if ([OrgGeogebraCommonKernelLocateable_class_() isInstance:IOSObjectArray_Get(output, i)]) {
      id<OrgGeogebraCommonKernelLocateable> loc = (id<OrgGeogebraCommonKernelLocateable>) check_protocol_cast(IOSObjectArray_Get(output, i), @protocol(OrgGeogebraCommonKernelLocateable));
      IOSObjectArray *points = [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(loc)) getStartPoints];
      if (points != nil) {
        for (jint k = 0; k < points->size_; k++) {
          [outputParents addWithId:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, k), [OrgGeogebraCommonKernelGeosGeoElement class])];
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, k), [OrgGeogebraCommonKernelGeosGeoElement class])))) addPredecessorsToSetWithJavaUtilTreeSet:outputParents withBoolean:NO];
        }
      }
    }
  }
  JavaUtilTreeSet *macroConsOrigElements = new_JavaUtilTreeSet_init();
  JavaUtilTreeSet *usedAlgoIds = new_JavaUtilTreeSet_init();
  id<JavaUtilIterator> it = [outputParents iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *outputParent = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(outputParent)) isLabelSet]) {
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
        if ([outputParent isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input, i)]) {
          OrgGeogebraCommonKernelMacro_addDependentElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(outputParent, macroConsOrigElements, usedAlgoIds);
          i = input->size_;
        }
      }
    }
  }
  IOSBooleanArray *isInputLabeled = [IOSBooleanArray newArrayWithLength:((IOSObjectArray *) nil_chk(input))->size_];
  IOSBooleanArray *isOutputLabeled = [IOSBooleanArray newArrayWithLength:output->size_];
  IOSObjectArray *inputLabels = [IOSObjectArray newArrayWithLength:input->size_ type:NSString_class_()];
  IOSObjectArray *outputLabels = [IOSObjectArray newArrayWithLength:output->size_ type:NSString_class_()];
  IOSObjectArray *startPoints = [IOSObjectArray newArrayWithLength:input->size_ type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (jint i = 0; i < input->size_; i++) {
    *IOSBooleanArray_GetRef(isInputLabeled, i) = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) isLabelSet];
    if (!IOSBooleanArray_Get(isInputLabeled, i)) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) setLabelSimpleWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) getDefaultLabel]];
      ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i)))->labelSet_ = YES;
    }
    if ([IOSObjectArray_Get(input, i) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]]) {
      (void) IOSObjectArray_Set(startPoints, i, [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, i), [OrgGeogebraCommonKernelGeosGeoVector class])))) getStartPoint]);
      [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, i), [OrgGeogebraCommonKernelGeosGeoVector class])))) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    (void) IOSObjectArray_Set(inputLabels, i, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) getLabelSimple]);
    {
      OrgGeogebraCommonKernelAlgosAlgoElement *algo;
      switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) getGeoClassType] ordinal]) {
        case OrgGeogebraCommonPluginGeoClass_SEGMENT:
        case OrgGeogebraCommonPluginGeoClass_RAY:
        case OrgGeogebraCommonPluginGeoClass_POLYGON:
        case OrgGeogebraCommonPluginGeoClass_FUNCTION:
        case OrgGeogebraCommonPluginGeoClass_INTERVAL:
        case OrgGeogebraCommonPluginGeoClass_CURVE_CARTESIAN:
        OrgGeogebraCommonKernelMacro_addSpecialInputElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_(IOSObjectArray_Get(input, i), macroConsOrigElements);
        break;
        default:
        [macroConsOrigElements addWithId:IOSObjectArray_Get(input, i)];
        algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) getParentAlgorithm];
        if (algo != nil) [macroConsOrigElements removeWithId:algo];
      }
    }
  }
  for (jint i = 0; i < output->size_; i++) {
    *IOSBooleanArray_GetRef(isOutputLabeled, i) = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) isLabelSet];
    if (!IOSBooleanArray_Get(isOutputLabeled, i)) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) setLabelSimpleWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) getDefaultLabel]];
      ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i)))->labelSet_ = YES;
    }
    (void) IOSObjectArray_Set(outputLabels, i, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) getLabelSimple]);
    OrgGeogebraCommonKernelMacro_addDependentElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(IOSObjectArray_Get(output, i), macroConsOrigElements, usedAlgoIds);
  }
  self->macroConsXML_ = OrgGeogebraCommonKernelMacro_buildMacroXMLWithOrgGeogebraCommonKernelKernel_withJavaUtilSet_(((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, 0)))->kernel_, macroConsOrigElements);
  for (jint i = 0; i < input->size_; i++) {
    if (!IOSBooleanArray_Get(isInputLabeled, i)) ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i)))->labelSet_ = NO;
    if ([IOSObjectArray_Get(input, i) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]]) {
      [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, i), [OrgGeogebraCommonKernelGeosGeoVector class])))) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(startPoints, i)];
    }
  }
  for (jint i = 0; i < output->size_; i++) {
    if (!IOSBooleanArray_Get(isOutputLabeled, i)) ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i)))->labelSet_ = NO;
  }
  OrgGeogebraCommonUtilDebugLog_debugWithId_(self->macroConsXML_);
  OrgGeogebraCommonKernelConstruction *macroCons2 = OrgGeogebraCommonKernelMacro_createMacroConstructionWithNSString_(self, [((JavaLangStringBuilder *) nil_chk(self->macroConsXML_)) description]);
  [self initMacroWithOrgGeogebraCommonKernelConstruction:macroCons2 withNSStringArray:inputLabels withNSStringArray:outputLabels];
}

void OrgGeogebraCommonKernelMacro_addDependentElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(OrgGeogebraCommonKernelGeosGeoElement *geo, id<JavaUtilSet> consElementSet, id<JavaUtilSet> usedAlgoIds) {
  OrgGeogebraCommonKernelMacro_initialize();
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  if ([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) isInConstructionList]) {
    JavaLangLong *algoID = JavaLangLong_valueOfWithLong_([algo getID]);
    if (![((id<JavaUtilSet>) nil_chk(usedAlgoIds)) containsWithId:algoID]) [((id<JavaUtilSet>) nil_chk(consElementSet)) addWithId:algo];
    [usedAlgoIds addWithId:algoID];
    IOSObjectArray *algoOutput = [algo getOutput];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(algoOutput))->size_; i++) {
      [((id<JavaUtilSet>) nil_chk(consElementSet)) addWithId:IOSObjectArray_Get(algoOutput, i)];
    }
  }
  else {
    [((id<JavaUtilSet>) nil_chk(consElementSet)) addWithId:geo];
  }
}

void OrgGeogebraCommonKernelMacro_addSpecialInputElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_(OrgGeogebraCommonKernelGeosGeoElement *geo, id<JavaUtilSet> consElementSet) {
  OrgGeogebraCommonKernelMacro_initialize();
  [((id<JavaUtilSet>) nil_chk(consElementSet)) addWithId:geo];
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  if (algo != nil && [algo isInConstructionList]) {
    [consElementSet addWithId:algo];
    IOSObjectArray *algoInput = [algo getInput];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(algoInput))->size_; i++) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(algoInput, i))) isLabelSet]) [consElementSet addWithId:IOSObjectArray_Get(algoInput, i)];
    }
  }
}

JavaLangStringBuilder *OrgGeogebraCommonKernelMacro_buildMacroXMLWithOrgGeogebraCommonKernelKernel_withJavaUtilSet_(OrgGeogebraCommonKernelKernel *kernel, id<JavaUtilSet> macroConsElements) {
  OrgGeogebraCommonKernelMacro_initialize();
  JavaLangStringBuilder *macroConsXML = new_JavaLangStringBuilder_initWithInt_(500);
  (void) [macroConsXML appendWithNSString:@"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"];
  (void) [macroConsXML appendWithNSString:JreStrcat("$$$", @"<geogebra format=\"", OrgGeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_(), @"\">\n")];
  (void) [macroConsXML appendWithNSString:@"<construction author=\"\" title=\"\" date=\"\">\n"];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(macroConsElements)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelAlgosConstructionElement *ce = [it next];
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      [ce getXMLWithBoolean:NO withJavaLangStringBuilder:macroConsXML];
    }
    else if ([ce isAlgoElement]) {
      OrgGeogebraCommonKernelAlgosAlgoElement *algo = (OrgGeogebraCommonKernelAlgosAlgoElement *) check_class_cast(ce, [OrgGeogebraCommonKernelAlgosAlgoElement class]);
      [algo getXMLWithJavaLangStringBuilder:macroConsXML withBoolean:NO];
    }
  }
  (void) [macroConsXML appendWithNSString:@"</construction>\n"];
  (void) [macroConsXML appendWithNSString:@"</geogebra>"];
  return macroConsXML;
}

OrgGeogebraCommonKernelConstruction *OrgGeogebraCommonKernelMacro_createMacroConstructionWithNSString_(OrgGeogebraCommonKernelMacro *self, NSString *macroConsXML) {
  OrgGeogebraCommonKernelMacroKernel *mk = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) newMacroKernel];
  [((OrgGeogebraCommonKernelMacroKernel *) nil_chk(mk)) setContinuousWithBoolean:NO];
  [mk setGlobalVariableLookupWithBoolean:NO];
  @try {
    [mk loadXMLWithNSString:macroConsXML];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    NSString *msg = [((OrgGeogebraCommonMainMyError *) nil_chk(e)) getLocalizedMessage];
    OrgGeogebraCommonMainApp_debugWithNSString_(msg);
    [e printStackTrace];
    @throw new_JavaLangException_initWithNSString_(msg);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_JavaLangException_initWithNSString_([e getMessage]);
  }
  return [mk getConstruction];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelMacro)
