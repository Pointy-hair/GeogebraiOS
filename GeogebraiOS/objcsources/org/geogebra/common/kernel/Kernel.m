//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/Kernel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/GeoGebraConstants.h"
#include "org/geogebra/common/cas/GeoGebraCAS.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianController.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "org/geogebra/common/factories/FormatFactory.h"
#include "org/geogebra/common/gui/SetLabels.h"
#include "org/geogebra/common/gui/SetOrientation.h"
#include "org/geogebra/common/io/MyXMLHandler.h"
#include "org/geogebra/common/kernel/AlgoCasCellInterface.h"
#include "org/geogebra/common/kernel/AnimationManager.h"
#include "org/geogebra/common/kernel/AsynchronousCommand.h"
#include "org/geogebra/common/kernel/CASException.h"
#include "org/geogebra/common/kernel/CASGenericInterface.h"
#include "org/geogebra/common/kernel/ClientView.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/EquationSolver.h"
#include "org/geogebra/common/kernel/EquationSolverInterface.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/KernelCAS.h"
#include "org/geogebra/common/kernel/LayerView.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/MacroKernel.h"
#include "org/geogebra/common/kernel/MacroManager.h"
#include "org/geogebra/common/kernel/Manager3DInterface.h"
#include "org/geogebra/common/kernel/ModeSetter.h"
#include "org/geogebra/common/kernel/PathRegionHandling.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/SystemOfEquationsSolver.h"
#include "org/geogebra/common/kernel/UndoManager.h"
#include "org/geogebra/common/kernel/UpdateLocationView.h"
#include "org/geogebra/common/kernel/UserAwarenessListener.h"
#include "org/geogebra/common/kernel/View.h"
#include "org/geogebra/common/kernel/algos/AlgoCasBase.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentBoolean.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIf.h"
#include "org/geogebra/common/kernel/algos/AlgoMacro.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygon.h"
#include "org/geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeEvaluator.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/cas/AlgoUsingTempCASalgo.h"
#include "org/geogebra/common/kernel/cas/UsesCAS.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CommandDispatcher.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoAxis.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoButton.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoInterval.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoRayND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/kernel/optimization/ExtremumFinder.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/AppCompanion.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/main/settings/CASSettings.h"
#include "org/geogebra/common/main/settings/Settings.h"
#include "org/geogebra/common/plugin/EventType.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/plugin/ScriptManager.h"
#include "org/geogebra/common/plugin/script/GgbScript.h"
#include "org/geogebra/common/plugin/script/Script.h"
#include "org/geogebra/common/util/MaxSizeHashMap.h"
#include "org/geogebra/common/util/MyMath.h"
#include "org/geogebra/common/util/NumberFormatAdapter.h"
#include "org/geogebra/common/util/ScientificFormatAdapter.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"

#define OrgGeogebraCommonKernelKernel_INV_MIN_PRECISION 100000.0
#define OrgGeogebraCommonKernelKernel_AXES_PRECISION 1.0E-14

@interface OrgGeogebraCommonKernelKernel () {
 @public
  jint algebraStyle_;
  OrgGeogebraCommonKernelMacroManager *macroManager_;
  jint angleUnit_;
  jboolean viewReiniting_;
  jboolean undoActive_;
  jboolean continuous_;
  id<OrgGeogebraCommonKernelGeoGebraCasInterface> ggbCAS_;
  id<OrgGeogebraCommonUtilNumberFormatAdapter> nf_;
  id<OrgGeogebraCommonUtilScientificFormatAdapter> sf_;
  jint coordStyle_;
  jboolean useInternalCommandNames_;
  jboolean notifyConstructionProtocolViewAboutAddRemoveActive_;
  jboolean allowVisibilitySideEffects_;
  jboolean saveScriptsToXML_;
  jboolean elementDefaultAllowed_;
  jboolean silentMode_;
  jboolean wantAnimationStarted__;
  jboolean resolveUnkownVarsAsDummyGeos_;
  jboolean updateEVAgain_;
  jboolean forceUpdatingBoundingBox_;
  JavaLangStringBuilder *sbBuildExplicitLineEquation_;
  OrgGeogebraCommonKernelEquationSolver *eqnSolver_;
  OrgGeogebraCommonKernelSystemOfEquationsSolver *sysEqSolv_;
  OrgGeogebraCommonKernelOptimizationExtremumFinder *extrFinder_;
  id<OrgGeogebraCommonKernelManager3DInterface> manager3D_;
  id concurrentModificationLock_;
  jboolean showAnimationButton_;
  jboolean loadingMode_;
  JavaLangStringBuilder *sbFormat_;
  JavaLangStringBuilder *formatSB_;
  JavaLangStringBuilder *sbBuildImplicitEquation_;
  JavaLangStringBuilder *sbBuildLHS_;
  JavaLangStringBuilder *sbBuildExplicitConicEquation_;
  JavaLangStringBuilder *sbFormatSF_;
  NSString *libraryJavaScript_;
  jboolean isSaving__;
  JavaLangStringBuilder *sbFormatAngle_;
  jboolean arcusFunctionCreatesAngle_;
  OrgGeogebraCommonUtilMaxSizeHashMap *ggbCasCache_;
  jboolean graphicsView2showing_;
  jboolean notifyRepaint__;
  OrgGeogebraCommonEuclidianEuclidianView *lastAttachedEV_;
  jboolean notifyViewsActive_;
  JavaUtilArrayList *renameListenerAlgos_;
  jboolean spreadsheetBatchRunning_;
  jboolean isGettingUndo__;
  JavaUtilArrayList *selectedGeosNames_;
  OrgGeogebraCommonKernelGeosGeoVec2D *imaginaryUnit_;
  OrgGeogebraCommonKernelGeosGeoElementSpreadsheet *ges_;
  OrgGeogebraCommonKernelAlgosAlgoDispatcher *algoDispatcher_;
}

- (jint)getNextBreakpointWithInt:(jint)initStep;

- (jint)getPreviousBreakpointWithInt:(jint)initStep;

+ (jchar)signWithDouble:(jdouble)x;

- (NSString *)formatPiERawWithDouble:(jdouble)x
withOrgGeogebraCommonUtilNumberFormatAdapter:(id<OrgGeogebraCommonUtilNumberFormatAdapter>)numF
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)formatNFWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (IOSDoubleArray *)buildImplicitVarPartWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildImplicitVarPart
                                                  withDoubleArray:(IOSDoubleArray *)numbers
                                                withNSStringArray:(IOSObjectArray *)vars
                                                      withBoolean:(jboolean)KEEP_LEADING_SIGN
                                                      withBoolean:(jboolean)CANCEL_DOWN
                                                      withBoolean:(jboolean)needsZ
                        withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (jboolean)isZeroFigureWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)formatSFWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)formatCoeffWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)evaluateGeoGebraCASWithNSString:(NSString *)exp
                                  withBoolean:(jboolean)useCaching
withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst
    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)addViewsWithJavaLangInteger:(JavaLangInteger *)id_
                    withDoubleArray:(IOSDoubleArray *)viewBounds;

- (void)printAttachedViews;

- (void)notifyRenameListenerAlgos;

- (jboolean)kernelHas3DObjects;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, macroManager_, OrgGeogebraCommonKernelMacroManager *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, ggbCAS_, id<OrgGeogebraCommonKernelGeoGebraCasInterface>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, nf_, id<OrgGeogebraCommonUtilNumberFormatAdapter>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sf_, id<OrgGeogebraCommonUtilScientificFormatAdapter>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sbBuildExplicitLineEquation_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, eqnSolver_, OrgGeogebraCommonKernelEquationSolver *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sysEqSolv_, OrgGeogebraCommonKernelSystemOfEquationsSolver *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, extrFinder_, OrgGeogebraCommonKernelOptimizationExtremumFinder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, manager3D_, id<OrgGeogebraCommonKernelManager3DInterface>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, concurrentModificationLock_, id)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sbFormat_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, formatSB_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sbBuildImplicitEquation_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sbBuildLHS_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sbBuildExplicitConicEquation_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sbFormatSF_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, libraryJavaScript_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, sbFormatAngle_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, ggbCasCache_, OrgGeogebraCommonUtilMaxSizeHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, lastAttachedEV_, OrgGeogebraCommonEuclidianEuclidianView *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, renameListenerAlgos_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, selectedGeosNames_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, imaginaryUnit_, OrgGeogebraCommonKernelGeosGeoVec2D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, ges_, OrgGeogebraCommonKernelGeosGeoElementSpreadsheet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel, algoDispatcher_, OrgGeogebraCommonKernelAlgosAlgoDispatcher *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelKernel, INV_MIN_PRECISION, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelKernel, AXES_PRECISION, jdouble)

__attribute__((unused)) static OrgGeogebraCommonMainApp *OrgGeogebraCommonKernelKernel_getApplication(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernel_isAnimationRunning(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static jint OrgGeogebraCommonKernelKernel_getNextBreakpointWithInt_(OrgGeogebraCommonKernelKernel *self, jint initStep);

__attribute__((unused)) static jint OrgGeogebraCommonKernelKernel_getPreviousBreakpointWithInt_(OrgGeogebraCommonKernelKernel *self, jint initStep);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernel_isContinuous(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static jchar OrgGeogebraCommonKernelKernel_signWithDouble_(jdouble x);

__attribute__((unused)) static JavaLangStringBuilder *OrgGeogebraCommonKernelKernel_buildImplicitEquationWithDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withChar_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, IOSDoubleArray *numbers, IOSObjectArray *vars, jboolean KEEP_LEADING_SIGN, jboolean CANCEL_DOWN, jboolean needsZ, jchar op, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_formatSignedCoefficientWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_formatSignedWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_formatSignedCoefficientPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_formatSignedPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelKernel_formatPiERawWithDouble_withOrgGeogebraCommonUtilNumberFormatAdapter_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, id<OrgGeogebraCommonUtilNumberFormatAdapter> numF, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelKernel_formatRawWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble number, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelKernel_formatNFWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static IOSDoubleArray *OrgGeogebraCommonKernelKernel_buildImplicitVarPartWithJavaLangStringBuilder_withDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, JavaLangStringBuilder *sbBuildImplicitVarPart, IOSDoubleArray *numbers, IOSObjectArray *vars, jboolean KEEP_LEADING_SIGN, jboolean CANCEL_DOWN, jboolean needsZ, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelKernel_formatSFWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static JavaLangStringBuilder *OrgGeogebraCommonKernelKernel_formatAngleWithDouble_withDouble_withOrgGeogebraCommonKernelStringTemplate_withBoolean_(OrgGeogebraCommonKernelKernel *self, jdouble alpha, jdouble precision, OrgGeogebraCommonKernelStringTemplate *tpl, jboolean unbounded);

__attribute__((unused)) static jint OrgGeogebraCommonKernelKernel_getAngleUnit(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static jint OrgGeogebraCommonKernelKernel_getPrintDecimals(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static jint OrgGeogebraCommonKernelKernel_getPrintFigures(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernel_isResolveUnkownVarsAsDummyGeos(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, NSString *exp, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withBoolean_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, NSString *exp, jboolean useCaching, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jint OrgGeogebraCommonKernelKernel_getCoordStyle(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_(OrgGeogebraCommonKernelKernel *self, NSString *label);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoCasCell *OrgGeogebraCommonKernelKernel_lookupCasCellLabelWithNSString_(OrgGeogebraCommonKernelKernel *self, NSString *label);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_withBoolean_withBoolean_(OrgGeogebraCommonKernelKernel *self, NSString *label, jboolean autoCreate, jboolean useDummies);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_addViewsWithJavaLangInteger_withDoubleArray_(OrgGeogebraCommonKernelKernel *self, JavaLangInteger *id_, IOSDoubleArray *viewBounds);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_notifyRepaint(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_notifyReset(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_notifyClearView(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_printAttachedViews(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_notifyAddAllWithOrgGeogebraCommonKernelView_(OrgGeogebraCommonKernelKernel *self, id<OrgGeogebraCommonKernelView> view);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_notifyRenameListenerAlgos(OrgGeogebraCommonKernelKernel *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_notifyAddAllWithOrgGeogebraCommonKernelView_withInt_(OrgGeogebraCommonKernelKernel *self, id<OrgGeogebraCommonKernelView> view, jint consStep);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticMyDouble *OrgGeogebraCommonKernelKernel_convertIndexToNumberWithNSString_(OrgGeogebraCommonKernelKernel *self, NSString *str);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelKernel_kernelHas3DObjects(OrgGeogebraCommonKernelKernel *self);

@interface OrgGeogebraCommonKernelKernel_$1 : NSObject < JavaUtilComparator > {
 @public
  jdouble val$eps_;
}

- (jint)compareWithId:(JavaLangDouble *)d1
               withId:(JavaLangDouble *)d2;

- (instancetype)initWithDouble:(jdouble)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelKernel_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_$1_initWithDouble_(OrgGeogebraCommonKernelKernel_$1 *self, jdouble capture$0);

__attribute__((unused)) static OrgGeogebraCommonKernelKernel_$1 *new_OrgGeogebraCommonKernelKernel_$1_initWithDouble_(jdouble capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelKernel_$1)

@interface OrgGeogebraCommonKernelKernel_$2 : NSObject < OrgGeogebraCommonKernelArithmeticTraversing > {
 @public
  OrgGeogebraCommonKernelKernel *this$0_;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev;

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelKernel_$2)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelKernel_$2, this$0_, OrgGeogebraCommonKernelKernel *)

__attribute__((unused)) static void OrgGeogebraCommonKernelKernel_$2_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel_$2 *self, OrgGeogebraCommonKernelKernel *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelKernel_$2 *new_OrgGeogebraCommonKernelKernel_$2_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelKernel_$2)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelKernel)

jint OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_COLUMNS_DESKTOP_ = 9999;
jint OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_ROWS_DESKTOP_ = 9999;
jint OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_COLUMNS_VISIBLE_;
jint OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_ROWS_VISIBLE_;
NSString *OrgGeogebraCommonKernelKernel_STRING_PLUS_MINUS_ = @"\u00b1 ";
NSString *OrgGeogebraCommonKernelKernel_STRING_MINUS_PLUS_ = @"\u2213 ";
NSString *OrgGeogebraCommonKernelKernel_TMP_VARIABLE_PREFIX_ = @"ggbtmpvar";
jdouble OrgGeogebraCommonKernelKernel_SQRT_2_HALF_;
jint OrgGeogebraCommonKernelKernel_GEOGEBRA_CAS_CACHE_SIZE_ = 500;
NSString *OrgGeogebraCommonKernelKernel_defaultLibraryJavaScript_ = @"function ggbOnInit() {}";

@implementation OrgGeogebraCommonKernelKernel

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonKernelKernel_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (instancetype)init {
  OrgGeogebraCommonKernelKernel_init(self);
  return self;
}

- (OrgGeogebraCommonKernelCommandsAlgebraProcessor *)getAlgebraProcessor {
  if (algProcessor_ == nil) {
    OrgGeogebraCommonKernelKernel_set_algProcessor_(self, [self newAlgebraProcessorWithOrgGeogebraCommonKernelKernel:self]);
  }
  return algProcessor_;
}

- (OrgGeogebraCommonKernelCommandsAlgebraProcessor *)newAlgebraProcessorWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return [new_OrgGeogebraCommonKernelCommandsAlgebraProcessor_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(kernel, [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCommandDispatcherWithOrgGeogebraCommonKernelKernel:kernel]) autorelease];
}

- (id<OrgGeogebraCommonKernelManager3DInterface>)newManager3DWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return nil;
}

- (id)getConcurrentModificationLock {
  return concurrentModificationLock_;
}

- (void)setManager3DWithOrgGeogebraCommonKernelManager3DInterface:(id<OrgGeogebraCommonKernelManager3DInterface>)manager {
  OrgGeogebraCommonKernelKernel_set_manager3D_(self, manager);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPlaneND>)getDefaultPlane {
  return nil;
}

- (id<OrgGeogebraCommonKernelManager3DInterface>)getManager3D {
  return manager3D_;
}

- (void)newConstruction {
  OrgGeogebraCommonKernelKernel_setAndConsume_cons_(self, new_OrgGeogebraCommonKernelConstruction_initWithOrgGeogebraCommonKernelKernel_(self));
}

- (OrgGeogebraCommonIoMyXMLHandler *)newMyXMLHandlerWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  return [self newMyXMLHandlerWithOrgGeogebraCommonKernelKernel:self withOrgGeogebraCommonKernelConstruction:cons1];
}

- (OrgGeogebraCommonIoMyXMLHandler *)newMyXMLHandlerWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                              withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  return [new_OrgGeogebraCommonIoMyXMLHandler_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(kernel, cons1) autorelease];
}

- (OrgGeogebraCommonMainApp *)getApplication {
  return OrgGeogebraCommonKernelKernel_getApplication(self);
}

- (OrgGeogebraCommonKernelEquationSolver *)getEquationSolver {
  if (eqnSolver_ == nil) OrgGeogebraCommonKernelKernel_setAndConsume_eqnSolver_(self, new_OrgGeogebraCommonKernelEquationSolver_initWithOrgGeogebraCommonKernelKernel_(self));
  return eqnSolver_;
}

- (OrgGeogebraCommonKernelSystemOfEquationsSolver *)getSystemOfEquationsSolverWithOrgGeogebraCommonKernelEquationSolverInterface:(id<OrgGeogebraCommonKernelEquationSolverInterface>)eSolver {
  if (sysEqSolv_ == nil) OrgGeogebraCommonKernelKernel_setAndConsume_sysEqSolv_(self, new_OrgGeogebraCommonKernelSystemOfEquationsSolver_initWithOrgGeogebraCommonKernelEquationSolverInterface_(eSolver));
  return sysEqSolv_;
}

- (OrgGeogebraCommonKernelOptimizationExtremumFinder *)getExtremumFinder {
  if (extrFinder_ == nil) OrgGeogebraCommonKernelKernel_setAndConsume_extrFinder_(self, new_OrgGeogebraCommonKernelOptimizationExtremumFinder_init());
  return extrFinder_;
}

- (OrgGeogebraCommonKernelParserParser *)getParser {
  if (parser_ == nil) OrgGeogebraCommonKernelKernel_setAndConsume_parser_(self, new_OrgGeogebraCommonKernelParserParser_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelConstruction_(self, cons_));
  return parser_;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *)newExpressionNodeEvaluatorWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_initWithOrgGeogebraCommonMainLocalization_withOrgGeogebraCommonKernelKernel_([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLocalization], kernel) autorelease];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *)getExpressionNodeEvaluator {
  if (expressionNodeEvaluator_ == nil) {
    OrgGeogebraCommonKernelKernel_set_expressionNodeEvaluator_(self, [self newExpressionNodeEvaluatorWithOrgGeogebraCommonKernelKernel:self]);
  }
  return expressionNodeEvaluator_;
}

+ (id<JavaUtilComparator>)DoubleComparatorWithDouble:(jdouble)precision {
  return OrgGeogebraCommonKernelKernel_DoubleComparatorWithDouble_(precision);
}

- (void)setShowAnimationButtonWithBoolean:(jboolean)showAB {
  showAnimationButton_ = showAB;
}

- (jboolean)isAnimationRunning {
  return OrgGeogebraCommonKernelKernel_isAnimationRunning(self);
}

- (jboolean)isAnimationPaused {
  return animationManager_ != nil && [animationManager_ isPaused];
}

- (jboolean)needToShowAnimationButton {
  if (!showAnimationButton_) return NO;
  return animationManager_ != nil && [animationManager_ needToShowAnimationButton];
}

- (void)udpateNeedToShowAnimationButton {
  if (animationManager_ != nil) [animationManager_ updateNeedToShowAnimationButton];
}

- (jboolean)handleCoordsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                        withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if (!([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVec3D class]])) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <coords>: ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getClass]));
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoVec3D *v = (OrgGeogebraCommonKernelGeosGeoVec3D *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoVec3D class]);
  @try {
    jdouble x = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
    jdouble y = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y"]);
    jdouble z = OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"z"]);
    ((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->hasUpdatePrevilege_ = YES;
    [v setCoordsWithDouble:x withDouble:y withDouble:z];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

+ (OrgGeogebraCommonKernelAlgosConstructionElement *)getConstructionElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonKernelKernel_getConstructionElementWithOrgGeogebraCommonKernelGeosGeoElement_(geo);
}

- (OrgGeogebraCommonKernelConstruction *)getConstruction {
  return cons_;
}

- (OrgGeogebraCommonKernelAlgosConstructionElement *)getConstructionElementWithInt:(jint)index {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getConstructionElementWithInt:index];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getFirstGeo {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getFirstGeo];
}

- (void)setConstructionStepWithInt:(jint)step {
  if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getStep] != step) {
    [cons_ setStepWithInt:step];
    [((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) setUnsaved];
  }
}

- (jint)getConstructionStep {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getStep];
}

- (jint)getLastConstructionStep {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) steps] - 1;
}

- (void)firstStep {
  jint step = 0;
  if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) showOnlyBreakpoints]) {
    [self setConstructionStepWithInt:OrgGeogebraCommonKernelKernel_getNextBreakpointWithInt_(self, step)];
  }
  else {
    [self setConstructionStepWithInt:step];
  }
}

- (void)lastStep {
  jint step = [self getLastConstructionStep];
  if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) showOnlyBreakpoints]) {
    [self setConstructionStepWithInt:OrgGeogebraCommonKernelKernel_getPreviousBreakpointWithInt_(self, step)];
  }
  else {
    [self setConstructionStepWithInt:step];
  }
}

- (void)nextStep {
  jint step = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getStep] + 1;
  if ([cons_ showOnlyBreakpoints]) {
    [self setConstructionStepWithInt:OrgGeogebraCommonKernelKernel_getNextBreakpointWithInt_(self, step)];
  }
  else {
    [self setConstructionStepWithInt:step];
  }
}

- (jint)getNextBreakpointWithInt:(jint)initStep {
  return OrgGeogebraCommonKernelKernel_getNextBreakpointWithInt_(self, initStep);
}

- (void)previousStep {
  jint step = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getStep] - 1;
  if ([cons_ showOnlyBreakpoints]) {
    [cons_ setStepWithInt:OrgGeogebraCommonKernelKernel_getPreviousBreakpointWithInt_(self, step)];
  }
  else {
    [cons_ setStepWithInt:step];
  }
}

- (jint)getPreviousBreakpointWithInt:(jint)initStep {
  return OrgGeogebraCommonKernelKernel_getPreviousBreakpointWithInt_(self, initStep);
}

- (jboolean)moveInConstructionListWithInt:(jint)from
                                  withInt:(jint)to {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) moveInConstructionListWithInt:from withInt:to];
}

- (void)setVisualStylesWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)otherKernel {
  JavaUtilTreeSet *okts = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(otherKernel)) getConstruction])) getGeoSetWithCasCellsConstructionOrder];
  JavaUtilArrayList *selected = [((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) getSelectionManager])) getSelectedGeos];
  id<JavaUtilIterator> okit = [((JavaUtilTreeSet *) nil_chk(okts)) iterator];
  OrgGeogebraCommonKernelGeosGeoElement *okactual;
  NSString *okcapt;
  jint okpos;
  while ([((id<JavaUtilIterator>) nil_chk(okit)) hasNext]) {
    okactual = [okit next];
    okcapt = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(okactual)) getCaptionSimple];
    if (okcapt == nil) {
      okpos = -1;
    }
    else {
      okpos = [okcapt indexOfString:@"%style="];
    }
    if (okpos < 0) {
      [okit remove];
    }
  }
  id<JavaUtilIterator> it;
  if ([((JavaUtilArrayList *) nil_chk(selected)) isEmpty]) {
    it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getGeoSetWithCasCellsConstructionOrder])) iterator];
  }
  else {
    it = [selected iterator];
  }
  OrgGeogebraCommonKernelGeosGeoElement *actual;
  NSString *capt;
  jint pos;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    actual = [it next];
    OrgGeogebraCommonPluginGeoClassEnum *gc = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(actual)) getGeoClassType];
    okit = [okts iterator];
    while ([((id<JavaUtilIterator>) nil_chk(okit)) hasNext]) {
      okactual = [okit next];
      okcapt = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(okactual)) getCaptionSimple];
      okpos = [((NSString *) nil_chk(okcapt)) indexOfString:@"%style=defaultStyle"];
      if (okpos > -1 && [okactual getGeoClassType] == gc) {
        [actual setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:okactual];
      }
    }
    capt = [actual getCaptionSimple];
    if (capt == nil) {
      pos = -1;
    }
    else {
      pos = [capt indexOfString:@"%style="];
    }
    if (pos > -1) {
      capt = [((NSString *) nil_chk(capt)) substring:pos];
      okit = [okts iterator];
      while ([((id<JavaUtilIterator>) nil_chk(okit)) hasNext]) {
        okactual = [okit next];
        okcapt = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(okactual)) getCaptionSimple];
        okpos = [((NSString *) nil_chk(okcapt)) indexOfString:@"%style="];
        okcapt = [okcapt substring:okpos];
        if ([((NSString *) nil_chk(capt)) isEqual:okcapt]) {
          [actual setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:okactual];
        }
      }
    }
  }
}

- (void)setConstructionDefaultsWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)otherKernel {
  [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) getConstructionDefaults])) setConstructionDefaultsWithOrgGeogebraCommonKernelConstructionDefaults:[((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(otherKernel)) getConstruction])) getConstructionDefaults]];
}

- (void)setSaveScriptsToXMLWithBoolean:(jboolean)flag {
  saveScriptsToXML_ = flag;
}

- (jboolean)getSaveScriptsToXML {
  return saveScriptsToXML_;
}

- (void)setElementDefaultAllowedWithBoolean:(jboolean)flag {
  elementDefaultAllowed_ = flag;
}

- (jboolean)getElementDefaultAllowed {
  return elementDefaultAllowed_;
}

- (jboolean)isContinuous {
  return OrgGeogebraCommonKernelKernel_isContinuous(self);
}

- (void)setContinuousWithBoolean:(jboolean)continuous {
  self->continuous_ = continuous;
}

- (jboolean)usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  return usePathAndRegionParameters__ == OrgGeogebraCommonKernelPathRegionHandlingEnum_get_ON() || (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) isDefined]);
}

- (void)setUsePathAndRegionParametersWithOrgGeogebraCommonKernelPathRegionHandlingEnum:(OrgGeogebraCommonKernelPathRegionHandlingEnum *)flag {
  OrgGeogebraCommonKernelKernel_set_usePathAndRegionParameters__(self, flag);
}

- (void)setLoadingModeWithBoolean:(jboolean)b {
  loadingMode_ = b;
}

- (void)notifyOpeningFileWithNSString:(NSString *)fileName {
  for (id<OrgGeogebraCommonKernelUserAwarenessListener> __strong listener in nil_chk(self->userAwarenessListeners_)) {
    [((id<OrgGeogebraCommonKernelUserAwarenessListener>) nil_chk(listener)) fileLoadingWithNSString:fileName];
  }
}

- (void)notifyFileOpenCompleteWithBoolean:(jboolean)success {
  for (id<OrgGeogebraCommonKernelUserAwarenessListener> __strong listener in nil_chk(self->userAwarenessListeners_)) {
    [((id<OrgGeogebraCommonKernelUserAwarenessListener>) nil_chk(listener)) fileLoadCompleteWithBoolean:success];
  }
}

- (jboolean)getLoadingMode {
  return loadingMode_;
}

+ (jchar)signWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelKernel_signWithDouble_(x);
}

- (void)setNotifyConstructionProtocolViewAboutAddRemoveActiveWithBoolean:(jboolean)flag {
  notifyConstructionProtocolViewAboutAddRemoveActive_ = flag;
}

- (jboolean)isNotifyConstructionProtocolViewAboutAddRemoveActive {
  return notifyConstructionProtocolViewAboutAddRemoveActive_;
}

- (JavaLangStringBuilder *)buildImplicitEquationWithDoubleArray:(IOSDoubleArray *)numbers
                                              withNSStringArray:(IOSObjectArray *)vars
                                                    withBoolean:(jboolean)KEEP_LEADING_SIGN
                                                    withBoolean:(jboolean)CANCEL_DOWN
                                                    withBoolean:(jboolean)needsZ
                                                       withChar:(jchar)op
                      withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_buildImplicitEquationWithDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withChar_withOrgGeogebraCommonKernelStringTemplate_(self, numbers, vars, KEEP_LEADING_SIGN, CANCEL_DOWN, needsZ, op, tpl);
}

- (void)formatSignedCoefficientWithDouble:(jdouble)x
                withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelKernel_formatSignedCoefficientWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, x, sb, tpl);
}

- (void)formatSignedWithDouble:(jdouble)x
     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelKernel_formatSignedWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, x, sb, tpl);
}

- (void)formatSignedCoefficientPlusMinusWithDouble:(jdouble)x
                         withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
         withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelKernel_formatSignedCoefficientPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, x, sb, tpl);
}

- (void)formatSignedPlusMinusWithDouble:(jdouble)x
              withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelKernel_formatSignedPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, x, sb, tpl);
}

- (NSString *)formatPiERawWithDouble:(jdouble)x
withOrgGeogebraCommonUtilNumberFormatAdapter:(id<OrgGeogebraCommonUtilNumberFormatAdapter>)numF
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_formatPiERawWithDouble_withOrgGeogebraCommonUtilNumberFormatAdapter_withOrgGeogebraCommonKernelStringTemplate_(self, x, numF, tpl);
}

- (NSString *)formatRawWithDouble:(jdouble)number
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_formatRawWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, number, tpl);
}

- (NSString *)formatNFWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_formatNFWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
}

- (NSString *)formatWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
}

- (NSString *)internationalizeDigitsWithNSString:(NSString *)num
       withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (![((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) internationalizeDigits] || ![((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isUsingLocalizedDigits]) {
    return num;
  }
  if (formatSB_ == nil) {
    OrgGeogebraCommonKernelKernel_setAndConsume_formatSB_(self, new_JavaLangStringBuilder_initWithInt_(17));
  }
  else {
    [formatSB_ setLengthWithInt:0];
  }
  jboolean negative = [((NSString *) nil_chk(num)) charAtWithInt:0] == '-';
  jint start = 0;
  jboolean RTL = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isRightToLeftDigitsWithOrgGeogebraCommonKernelStringTemplate:tpl];
  if (RTL) {
    [((JavaLangStringBuilder *) nil_chk(formatSB_)) appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
    if (negative) {
      [formatSB_ appendWithNSString:OrgGeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()];
      start = 1;
    }
  }
  for (jint i = start; i < ((jint) [num length]); i++) {
    jchar c = RTL ? [num charAtWithInt:((jint) [num length]) - (negative ? 0 : 1) - i] : [num charAtWithInt:i];
    if (c == '.') {
      c = ((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization]))->unicodeDecimalPoint_;
    }
    else if ((c >= '0') && (c <= '9')) {
      c += ((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLocalization]))->unicodeZero_ - '0';
    }
    [((JavaLangStringBuilder *) nil_chk(formatSB_)) appendWithChar:c];
  }
  if (RTL) {
    [((JavaLangStringBuilder *) nil_chk(formatSB_)) appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
  }
  return [((JavaLangStringBuilder *) nil_chk(formatSB_)) description];
}

- (NSString *)formatPiEWithDouble:(jdouble)x
withOrgGeogebraCommonUtilNumberFormatAdapter:(id<OrgGeogebraCommonUtilNumberFormatAdapter>)numF
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLocalization]))->unicodeZero_ != '0') {
    NSString *num = OrgGeogebraCommonKernelKernel_formatPiERawWithDouble_withOrgGeogebraCommonUtilNumberFormatAdapter_withOrgGeogebraCommonKernelStringTemplate_(self, x, numF, tpl);
    return [self internationalizeDigitsWithNSString:num withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return OrgGeogebraCommonKernelKernel_formatPiERawWithDouble_withOrgGeogebraCommonUtilNumberFormatAdapter_withOrgGeogebraCommonKernelStringTemplate_(self, x, numF, tpl);
}

+ (void)copy__WithDoubleArray:(IOSDoubleArray *)a
              withDoubleArray:(IOSDoubleArray *)b {
  OrgGeogebraCommonKernelKernel_copy__WithDoubleArray_withDoubleArray_(a, b);
}

+ (void)negativeWithDoubleArray:(IOSDoubleArray *)a
                withDoubleArray:(IOSDoubleArray *)b {
  OrgGeogebraCommonKernelKernel_negativeWithDoubleArray_withDoubleArray_(a, b);
}

+ (void)divideWithDoubleArray:(IOSDoubleArray *)a
                   withDouble:(jdouble)b
              withDoubleArray:(IOSDoubleArray *)c {
  OrgGeogebraCommonKernelKernel_divideWithDoubleArray_withDouble_withDoubleArray_(a, b, c);
}

+ (jlong)gcdWithLong:(jlong)m
            withLong:(jlong)n {
  return OrgGeogebraCommonKernelKernel_gcdWithLong_withLong_(m, n);
}

+ (jdouble)gcdWithDoubleArray:(IOSDoubleArray *)numbers {
  return OrgGeogebraCommonKernelKernel_gcdWithDoubleArray_(numbers);
}

+ (jdouble)roundToScaleWithDouble:(jdouble)x
                       withDouble:(jdouble)scale_ {
  return OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(x, scale_);
}

+ (jboolean)isEqualWithDoubleArray:(IOSDoubleArray *)a
                   withDoubleArray:(IOSDoubleArray *)b {
  return OrgGeogebraCommonKernelKernel_isEqualWithDoubleArray_withDoubleArray_(a, b);
}

+ (jdouble)maxAbsWithDoubleArray:(IOSDoubleArray *)a {
  return OrgGeogebraCommonKernelKernel_maxAbsWithDoubleArray_(a);
}

- (JavaLangStringBuilder *)buildLHSWithDoubleArray:(IOSDoubleArray *)numbers
                                 withNSStringArray:(IOSObjectArray *)vars
                                       withBoolean:(jboolean)KEEP_LEADING_SIGN
                                       withBoolean:(jboolean)CANCEL_DOWN
                                       withBoolean:(jboolean)needsZ
         withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbBuildLHS_)) setLengthWithInt:0];
  IOSDoubleArray *temp = OrgGeogebraCommonKernelKernel_buildImplicitVarPartWithJavaLangStringBuilder_withDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, sbBuildLHS_, numbers, vars, KEEP_LEADING_SIGN, CANCEL_DOWN, needsZ, tpl);
  jdouble coeff = IOSDoubleArray_Get(nil_chk(temp), ((IOSObjectArray *) nil_chk(vars))->size_);
  if ((JavaLangMath_absWithDouble_(coeff) >= [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:nf_]) || useSignificantFigures_) {
    [sbBuildLHS_ appendWithChar:' '];
    [sbBuildLHS_ appendWithChar:OrgGeogebraCommonKernelKernel_signWithDouble_(coeff)];
    [sbBuildLHS_ appendWithChar:' '];
    [sbBuildLHS_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, JavaLangMath_absWithDouble_(coeff), tpl)];
  }
  return sbBuildLHS_;
}

+ (jchar)oppositeSignWithChar:(jchar)op {
  return OrgGeogebraCommonKernelKernel_oppositeSignWithChar_(op);
}

- (IOSDoubleArray *)buildImplicitVarPartWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildImplicitVarPart
                                                  withDoubleArray:(IOSDoubleArray *)numbers
                                                withNSStringArray:(IOSObjectArray *)vars
                                                      withBoolean:(jboolean)KEEP_LEADING_SIGN
                                                      withBoolean:(jboolean)CANCEL_DOWN
                                                      withBoolean:(jboolean)needsZ
                        withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_buildImplicitVarPartWithJavaLangStringBuilder_withDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, sbBuildImplicitVarPart, numbers, vars, KEEP_LEADING_SIGN, CANCEL_DOWN, needsZ, tpl);
}

- (jboolean)isZeroFigureWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
}

- (JavaLangStringBuilder *)buildExplicitConicEquationWithDoubleArray:(IOSDoubleArray *)numbers
                                                   withNSStringArray:(IOSObjectArray *)vars
                                                             withInt:(jint)pos
                                                         withBoolean:(jboolean)KEEP_LEADING_SIGN
                           withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  jdouble d, dabs, q = IOSDoubleArray_Get(nil_chk(numbers), pos);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(q)) {
    return OrgGeogebraCommonKernelKernel_buildImplicitEquationWithDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withChar_withOrgGeogebraCommonKernelStringTemplate_(self, numbers, vars, KEEP_LEADING_SIGN, YES, NO, '=', tpl);
  }
  jint i, leadingNonZero = numbers->size_;
  for (i = 0; i < numbers->size_; i++) {
    if ((i != pos) && ((JavaLangMath_absWithDouble_(IOSDoubleArray_Get(numbers, i)) >= [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:nf_]) || useSignificantFigures_)) {
      leadingNonZero = i;
      break;
    }
  }
  [((JavaLangStringBuilder *) nil_chk(sbBuildExplicitConicEquation_)) setLengthWithInt:0];
  [sbBuildExplicitConicEquation_ appendWithNSString:IOSObjectArray_Get(nil_chk(vars), pos)];
  [sbBuildExplicitConicEquation_ appendWithNSString:@" = "];
  if (leadingNonZero == numbers->size_) {
    [sbBuildExplicitConicEquation_ appendWithNSString:@"0"];
    return sbBuildExplicitConicEquation_;
  }
  else if (leadingNonZero == (numbers->size_ - 1)) {
    d = -IOSDoubleArray_Get(numbers, leadingNonZero) / q;
    [sbBuildExplicitConicEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, d, tpl)];
    return sbBuildExplicitConicEquation_;
  }
  else {
    d = -IOSDoubleArray_Get(numbers, leadingNonZero) / q;
    [sbBuildExplicitConicEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, d, tpl)];
    [sbBuildExplicitConicEquation_ appendWithNSString:IOSObjectArray_Get(vars, leadingNonZero)];
    for (i = leadingNonZero + 1; i < vars->size_; i++) {
      if (i != pos) {
        d = -IOSDoubleArray_Get(numbers, i) / q;
        dabs = JavaLangMath_absWithDouble_(d);
        if ((dabs >= [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:nf_]) || useSignificantFigures_) {
          [sbBuildExplicitConicEquation_ appendWithChar:' '];
          [sbBuildExplicitConicEquation_ appendWithChar:OrgGeogebraCommonKernelKernel_signWithDouble_(d)];
          [sbBuildExplicitConicEquation_ appendWithChar:' '];
          [sbBuildExplicitConicEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, dabs, tpl)];
          [sbBuildExplicitConicEquation_ appendWithNSString:IOSObjectArray_Get(vars, i)];
        }
      }
    }
    d = -IOSDoubleArray_Get(numbers, i) / q;
    dabs = JavaLangMath_absWithDouble_(d);
    if ((dabs >= [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:nf_]) || useSignificantFigures_) {
      [sbBuildExplicitConicEquation_ appendWithChar:' '];
      [sbBuildExplicitConicEquation_ appendWithChar:OrgGeogebraCommonKernelKernel_signWithDouble_(d)];
      [sbBuildExplicitConicEquation_ appendWithChar:' '];
      [sbBuildExplicitConicEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, dabs, tpl)];
    }
    return sbBuildExplicitConicEquation_;
  }
}

- (NSString *)formatSFWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_formatSFWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
}

- (void)appendTwoCoeffsWithBoolean:(jboolean)plusMinusX
                        withDouble:(jdouble)x
                        withDouble:(jdouble)y
                      withNSString:(NSString *)s1
                      withNSString:(NSString *)s2
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
         withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString {
  if (OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl)) {
    if (OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, y, tpl)) {
      [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:@"0"];
    }
    else {
      NSString *coeff = OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, y, tpl);
      [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:coeff];
      if (((jint) [((NSString *) nil_chk(coeff)) length]) > 0) {
        [sbBuildValueString appendWithNSString:@" "];
      }
      [sbBuildValueString appendWithNSString:s2];
    }
  }
  else {
    if (plusMinusX) {
      OrgGeogebraCommonKernelKernel_formatSignedCoefficientPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, x, sbBuildValueString, tpl);
      [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:@" "];
    }
    else {
      NSString *coeff = OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
      [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:coeff];
      if (((jint) [((NSString *) nil_chk(coeff)) length]) > 0) {
        [sbBuildValueString appendWithNSString:@" "];
      }
    }
    [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:s1];
    if (!OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, y, tpl)) {
      [sbBuildValueString appendWithNSString:@" "];
      OrgGeogebraCommonKernelKernel_formatSignedCoefficientWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, y, sbBuildValueString, tpl);
      [sbBuildValueString appendWithNSString:@" "];
      [sbBuildValueString appendWithNSString:s2];
    }
  }
}

- (void)appendTwoCoeffsWithDouble:(jdouble)x
                       withDouble:(jdouble)y
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
        withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString {
  if (OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl)) {
    if (OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, y, tpl)) {
      [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:@"0"];
    }
    else {
      OrgGeogebraCommonKernelKernel_formatSignedPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, y, sbBuildValueString, tpl);
    }
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl)];
    if (!OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, y, tpl)) {
      [sbBuildValueString appendWithNSString:@" "];
      OrgGeogebraCommonKernelKernel_formatSignedPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, y, sbBuildValueString, tpl);
    }
  }
}

- (NSString *)formatCoeffWithDouble:(jdouble)x
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
}

- (JavaLangStringBuilder *)buildExplicitLineEquationWithDoubleArray:(IOSDoubleArray *)numbers
                                                  withNSStringArray:(IOSObjectArray *)vars
                                                           withChar:(jchar)opDefault
                          withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  jchar op = opDefault;
  jdouble d, dabs, q = IOSDoubleArray_Get(nil_chk(numbers), 1);
  [((JavaLangStringBuilder *) nil_chk(sbBuildExplicitLineEquation_)) setLengthWithInt:0];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(q)) {
    [sbBuildExplicitLineEquation_ appendWithNSString:IOSObjectArray_Get(nil_chk(vars), 0)];
    [sbBuildExplicitLineEquation_ appendWithChar:' '];
    if (IOSDoubleArray_Get(numbers, 0) < OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
      op = OrgGeogebraCommonKernelKernel_oppositeSignWithChar_(op);
    }
    [sbBuildExplicitLineEquation_ appendWithChar:op];
    [sbBuildExplicitLineEquation_ appendWithChar:' '];
    [sbBuildExplicitLineEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, -IOSDoubleArray_Get(numbers, 2) / IOSDoubleArray_Get(numbers, 0), tpl)];
    return sbBuildExplicitLineEquation_;
  }
  [sbBuildExplicitLineEquation_ appendWithNSString:IOSObjectArray_Get(nil_chk(vars), 1)];
  [sbBuildExplicitLineEquation_ appendWithChar:' '];
  if (IOSDoubleArray_Get(numbers, 1) < OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
    op = OrgGeogebraCommonKernelKernel_oppositeSignWithChar_(op);
  }
  [sbBuildExplicitLineEquation_ appendWithChar:op];
  [sbBuildExplicitLineEquation_ appendWithChar:' '];
  d = -IOSDoubleArray_Get(numbers, 0) / q;
  dabs = JavaLangMath_absWithDouble_(d);
  if ((dabs >= [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:nf_]) || useSignificantFigures_) {
    [sbBuildExplicitLineEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, d, tpl)];
    [sbBuildExplicitLineEquation_ appendWithNSString:IOSObjectArray_Get(vars, 0)];
    d = -IOSDoubleArray_Get(numbers, 2) / q;
    dabs = JavaLangMath_absWithDouble_(d);
    if ((dabs >= [tpl getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:nf_]) || useSignificantFigures_) {
      [sbBuildExplicitLineEquation_ appendWithChar:' '];
      [sbBuildExplicitLineEquation_ appendWithChar:OrgGeogebraCommonKernelKernel_signWithDouble_(d)];
      [sbBuildExplicitLineEquation_ appendWithChar:' '];
      [sbBuildExplicitLineEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, dabs, tpl)];
    }
  }
  else {
    [sbBuildExplicitLineEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, -IOSDoubleArray_Get(numbers, 2) / q, tpl)];
  }
  return sbBuildExplicitLineEquation_;
}

+ (jdouble)chopWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelKernel_chopWithDouble_(x);
}

+ (jboolean)isZeroWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelKernel_isZeroWithDouble_(x);
}

+ (jboolean)isZeroWithDouble:(jdouble)x
                  withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelKernel_isZeroWithDouble_withDouble_(x, eps);
}

+ (jboolean)isZeroWithDoubleArray:(IOSDoubleArray *)a {
  return OrgGeogebraCommonKernelKernel_isZeroWithDoubleArray_(a);
}

+ (jboolean)isIntegerWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(x);
}

+ (jboolean)isEqualWithDouble:(jdouble)x
                   withDouble:(jdouble)y {
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x, y);
}

+ (jboolean)isEqualWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                   withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(x, y, eps);
}

+ (jboolean)isGreaterWithDouble:(jdouble)x
                     withDouble:(jdouble)y {
  return OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(x, y);
}

+ (jint)compareWithDouble:(jdouble)x
               withDouble:(jdouble)y {
  return OrgGeogebraCommonKernelKernel_compareWithDouble_withDouble_(x, y);
}

+ (jboolean)isGreaterWithDouble:(jdouble)x
                     withDouble:(jdouble)y
                     withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(x, y, eps);
}

+ (jboolean)isGreaterEqualWithDouble:(jdouble)x
                          withDouble:(jdouble)y {
  return OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(x, y);
}

+ (jdouble)convertToAngleValueWithDouble:(jdouble)val {
  return OrgGeogebraCommonKernelKernel_convertToAngleValueWithDouble_(val);
}

+ (jdouble)checkDecimalFractionWithDouble:(jdouble)x
                               withDouble:(jdouble)precision {
  return OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_withDouble_(x, precision);
}

+ (jdouble)checkDecimalFractionWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(x);
}

+ (jdouble)checkIntegerWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(x);
}

- (JavaLangStringBuilder *)formatAngleWithDouble:(jdouble)phi
       withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                     withBoolean:(jboolean)unbounded {
  JavaLangStringBuilder *ret = OrgGeogebraCommonKernelKernel_formatAngleWithDouble_withDouble_withOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, phi, 10, tpl, unbounded);
  return ret;
}

- (JavaLangStringBuilder *)formatAngleWithDouble:(jdouble)alpha
                                      withDouble:(jdouble)precision
       withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                     withBoolean:(jboolean)unbounded {
  return OrgGeogebraCommonKernelKernel_formatAngleWithDouble_withDouble_withOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, alpha, precision, tpl, unbounded);
}

- (void)resetLibraryJavaScript {
  [self setLibraryJavaScriptWithNSString:OrgGeogebraCommonKernelKernel_defaultLibraryJavaScript_];
}

- (void)setLibraryJavaScriptWithNSString:(NSString *)str {
  OrgGeogebraCommonMainApp_debugWithNSString_(str);
  OrgGeogebraCommonKernelKernel_set_libraryJavaScript_(self, str);
  [((OrgGeogebraCommonPluginScriptManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) setGlobalScript];
}

- (NSString *)getLibraryJavaScript {
  return libraryJavaScript_;
}

- (JavaUtilTreeSet *)getPointSet {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) getGeoSetLabelOrderWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_POINT()];
}

- (jboolean)isSaving {
  @synchronized(self) {
    return isSaving__;
  }
}

- (void)setSavingWithBoolean:(jboolean)saving {
  @synchronized(self) {
    isSaving__ = saving;
  }
}

- (void)setInverseTrigReturnsAngleWithBoolean:(jboolean)selected {
  arcusFunctionCreatesAngle_ = selected;
}

- (jboolean)getInverseTrigReturnsAngle {
  return arcusFunctionCreatesAngle_;
}

- (void)setAngleUnitWithInt:(jint)unit {
  angleUnit_ = unit;
}

- (jint)getAngleUnit {
  return OrgGeogebraCommonKernelKernel_getAngleUnit(self);
}

- (jboolean)isZvarAllowed {
  return YES;
}

+ (NSString *)removeCASVariablePrefixWithNSString:(NSString *)str {
  return OrgGeogebraCommonKernelKernel_removeCASVariablePrefixWithNSString_(str);
}

+ (NSString *)removeCASVariablePrefixWithNSString:(NSString *)str
                                     withNSString:(NSString *)replace {
  return OrgGeogebraCommonKernelKernel_removeCASVariablePrefixWithNSString_withNSString_(str, replace);
}

- (void)setPrintFiguresWithInt:(jint)figures {
  if (figures >= 0) {
    useSignificantFigures_ = YES;
    [((id<OrgGeogebraCommonUtilScientificFormatAdapter>) nil_chk(sf_)) setSigDigitsWithInt:figures];
    [sf_ setMaxWidthWithInt:16];
  }
}

- (void)setPrintDecimalsWithInt:(jint)decimals {
  if (decimals >= 0) {
    useSignificantFigures_ = NO;
    OrgGeogebraCommonKernelKernel_set_nf_(self, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithInt:decimals]);
  }
}

- (jint)getPrintDecimals {
  return OrgGeogebraCommonKernelKernel_getPrintDecimals(self);
}

- (jint)getPrintFigures {
  return OrgGeogebraCommonKernelKernel_getPrintFigures(self);
}

- (jboolean)isUsingInternalCommandNames {
  return useInternalCommandNames_;
}

- (void)setUseInternalCommandNamesWithBoolean:(jboolean)b {
  useInternalCommandNames_ = b;
}

- (jboolean)isAllowVisibilitySideEffects {
  return allowVisibilitySideEffects_;
}

- (void)setAllowVisibilitySideEffectsWithBoolean:(jboolean)allowVisibilitySideEffects {
  self->allowVisibilitySideEffects_ = allowVisibilitySideEffects;
}

- (jboolean)isMacroKernel {
  return NO;
}

- (jboolean)isSilentMode {
  return silentMode_;
}

- (jboolean)isGeoGebraCASready {
  @synchronized(self) {
    return ggbCAS_ != nil;
  }
}

- (void)setSilentModeWithBoolean:(jboolean)silentMode {
  self->silentMode_ = silentMode;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) setSuppressLabelCreationWithBoolean:silentMode];
}

- (void)setResolveUnkownVarsAsDummyGeosWithBoolean:(jboolean)resolveUnkownVarsAsDummyGeos {
  self->resolveUnkownVarsAsDummyGeos_ = resolveUnkownVarsAsDummyGeos;
}

- (jboolean)isResolveUnkownVarsAsDummyGeos {
  return OrgGeogebraCommonKernelKernel_isResolveUnkownVarsAsDummyGeos(self);
}

- (NSString *)evaluateGeoGebraCASWithNSString:(NSString *)casString
withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  return OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(self, casString, arbconst, OrgGeogebraCommonKernelStringTemplate_get_numericNoLocal_());
}

- (NSString *)evaluateGeoGebraCASWithNSString:(NSString *)exp
withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst
    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(self, exp, arbconst, tpl);
}

- (NSString *)evaluateCachedGeoGebraCASWithNSString:(NSString *)exp
withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  return OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withBoolean_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(self, exp, YES, arbconst, OrgGeogebraCommonKernelStringTemplate_get_numericNoLocal_());
}

- (NSString *)evaluateGeoGebraCASWithNSString:(NSString *)exp
                                  withBoolean:(jboolean)useCaching
withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst
    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withBoolean_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(self, exp, useCaching, arbconst, tpl);
}

- (NSString *)evaluateRawGeoGebraCASWithNSString:(NSString *)exp {
  NSString *result = nil;
  if ([self hasCasCache]) {
    result = [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk([self getCasCache])) getWithId:exp];
    if (result != nil) {
      return result;
    }
  }
  result = [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([self getGeoGebraCAS])) evaluateRawWithNSString:exp];
  [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk([self getCasCache])) putWithId:exp withId:result];
  return result;
}

- (void)evaluateGeoGebraCASAsyncWithOrgGeogebraCommonKernelAsynchronousCommand:(id<OrgGeogebraCommonKernelAsynchronousCommand>)c {
  NSString *result = nil;
  NSString *exp = [((id<OrgGeogebraCommonKernelAsynchronousCommand>) nil_chk(c)) getCasInput];
  if ([c useCacheing] && [self hasCasCache]) {
    result = [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk([self getCasCache])) getWithId:exp];
    if (result != nil) {
      [c handleCASoutputWithNSString:result withInt:((jint) [((NSString *) nil_chk(exp)) hash])];
      return;
    }
  }
  [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([self getGeoGebraCAS])) evaluateGeoGebraCASAsyncWithOrgGeogebraCommonKernelAsynchronousCommand:c];
}

- (void)putToCasCacheWithNSString:(NSString *)exp
                     withNSString:(NSString *)result {
  [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk([self getCasCache])) putWithId:exp withId:result];
}

- (void)setAlgebraStyleWithInt:(jint)style {
  algebraStyle_ = style;
}

- (jint)getAlgebraStyle {
  return algebraStyle_;
}

- (OrgGeogebraCommonUtilMaxSizeHashMap *)getCasCache {
  if (ggbCasCache_ == nil) {
    OrgGeogebraCommonKernelKernel_setAndConsume_ggbCasCache_(self, new_OrgGeogebraCommonUtilMaxSizeHashMap_initWithInt_(OrgGeogebraCommonKernelKernel_GEOGEBRA_CAS_CACHE_SIZE_));
  }
  return ggbCasCache_;
}

- (jboolean)hasCasCache {
  return ggbCasCache_ != nil;
}

- (void)setEuclidianViewBoundsWithInt:(jint)viewNo
                           withDouble:(jdouble)xmin
                           withDouble:(jdouble)xmax
                           withDouble:(jdouble)ymin
                           withDouble:(jdouble)ymax
                           withDouble:(jdouble)xscale
                           withDouble:(jdouble)yscale {
  jint view = viewNo - 1;
  if (view < 0 || viewNo < 0) {
    return;
  }
  if (view >= ((IOSDoubleArray *) nil_chk(self->xmin_))->size_) {
    OrgGeogebraCommonKernelKernel_set_xmin_(self, [self prolongWithDoubleArray:self->xmin_ withInt:viewNo]);
    OrgGeogebraCommonKernelKernel_set_xmax_(self, [self prolongWithDoubleArray:self->xmin_ withInt:viewNo]);
    OrgGeogebraCommonKernelKernel_set_ymin_(self, [self prolongWithDoubleArray:self->ymin_ withInt:viewNo]);
    OrgGeogebraCommonKernelKernel_set_ymax_(self, [self prolongWithDoubleArray:self->ymax_ withInt:viewNo]);
    OrgGeogebraCommonKernelKernel_set_xscale_(self, [self prolongWithDoubleArray:self->xscale_ withInt:viewNo]);
    OrgGeogebraCommonKernelKernel_set_yscale_(self, [self prolongWithDoubleArray:self->yscale_ withInt:viewNo]);
  }
  *IOSDoubleArray_GetRef(nil_chk(self->xmin_), view) = xmin;
  *IOSDoubleArray_GetRef(nil_chk(self->xmax_), view) = xmax;
  *IOSDoubleArray_GetRef(nil_chk(self->ymin_), view) = ymin;
  *IOSDoubleArray_GetRef(nil_chk(self->ymax_), view) = ymax;
  *IOSDoubleArray_GetRef(nil_chk(self->xscale_), view) = xscale;
  *IOSDoubleArray_GetRef(nil_chk(self->yscale_), view) = yscale;
  graphicsView2showing_ = [((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) isShowingMultipleEVs];
  [self notifyEuclidianViewCE];
}

- (IOSDoubleArray *)prolongWithDoubleArray:(IOSDoubleArray *)xmin2
                                   withInt:(jint)viewNo {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:viewNo];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(xmin2, 0, ret, 0, ((IOSDoubleArray *) nil_chk(xmin2))->size_);
  return ret;
}

- (jdouble)getViewsXMinWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return IOSDoubleArray_Get(nil_chk([self getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo]), 0);
}

- (jdouble)getViewsXMaxWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return IOSDoubleArray_Get(nil_chk([self getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo]), 1);
}

- (jdouble)getViewsYMinWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return IOSDoubleArray_Get(nil_chk([self getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo]), 2);
}

- (jdouble)getViewsYMaxWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return IOSDoubleArray_Get(nil_chk([self getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo]), 3);
}

- (jdouble)getViewsXScaleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return IOSDoubleArray_Get(nil_chk([self getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo]), 4);
}

- (jdouble)getViewsYScaleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return IOSDoubleArray_Get(nil_chk([self getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo]), 5);
}

- (void)notifyEuclidianViewCE {
  if (macroManager_ != nil) [macroManager_ notifyEuclidianViewCE];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) notifyEuclidianViewCEWithBoolean:NO];
}

- (void)clearConstructionWithBoolean:(jboolean)clearScripts {
  if (clearScripts) {
    [self resetLibraryJavaScript];
  }
  if (self->ggbCAS_ != nil) {
    [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([self->ggbCAS_ getCurrentCAS])) clearResult];
  }
  if (macroManager_ != nil) [macroManager_ setAllMacrosUnused];
  if (animationManager_ != nil) {
    [animationManager_ stopAnimation];
    [animationManager_ clearAnimatedGeos];
  }
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) clearConstruction];
  OrgGeogebraCommonKernelKernel_notifyClearView(self);
  OrgGeogebraCommonKernelKernel_notifyRepaint(self);
}

- (jdouble)getXmax {
  if (graphicsView2showing_) {
    return OrgGeogebraCommonUtilMyMath_maxWithDoubleArray_(xmax_);
  }
  return IOSDoubleArray_Get(nil_chk(xmax_), 0);
}

- (jdouble)getXmin {
  if (graphicsView2showing_) {
    return OrgGeogebraCommonUtilMyMath_minWithDoubleArray_(xmin_);
  }
  return IOSDoubleArray_Get(nil_chk(xmin_), 0);
}

- (jdouble)getXscale {
  if (graphicsView2showing_) {
    return OrgGeogebraCommonUtilMyMath_maxWithDoubleArray_(xscale_);
  }
  return IOSDoubleArray_Get(nil_chk(xscale_), 0);
}

- (jdouble)getYmax {
  if (graphicsView2showing_) {
    return OrgGeogebraCommonUtilMyMath_maxWithDoubleArray_(ymax_);
  }
  return IOSDoubleArray_Get(nil_chk(ymax_), 0);
}

- (jdouble)getYmin {
  if (graphicsView2showing_) {
    return OrgGeogebraCommonUtilMyMath_minWithDoubleArray_(ymin_);
  }
  return IOSDoubleArray_Get(nil_chk(ymin_), 0);
}

- (jdouble)getYscale {
  if (graphicsView2showing_) {
    return OrgGeogebraCommonUtilMyMath_maxWithDoubleArray_(yscale_);
  }
  return IOSDoubleArray_Get(nil_chk(yscale_), 0);
}

- (jdouble)getXmaxWithBoolean:(jboolean)ev1
                  withBoolean:(jboolean)ev2 {
  if (ev2 && !ev1) {
    return IOSDoubleArray_Get(nil_chk(xmax_), 1);
  }
  else if (ev1 && !ev2) {
    return IOSDoubleArray_Get(nil_chk(xmax_), 0);
  }
  return [self getXmax];
}

- (jdouble)getXmaxWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(xmax_), i);
}

- (jdouble)getXminWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(xmin_), i);
}

- (jdouble)getYmaxWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(ymax_), i);
}

- (jdouble)getYminWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(ymin_), i);
}

- (jdouble)getYscaleWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(yscale_), i);
}

- (jdouble)getXscaleWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(xscale_), i);
}

- (jdouble)getZmaxWithInt:(jint)i {
  return 0;
}

- (jdouble)getZminWithInt:(jint)i {
  return 0;
}

- (jdouble)getZscaleWithInt:(jint)i {
  return [self getXscale];
}

- (jdouble)getXminWithBoolean:(jboolean)ev1
                  withBoolean:(jboolean)ev2 {
  if (ev2 && !ev1) {
    return IOSDoubleArray_Get(nil_chk(xmin_), 1);
  }
  else if (ev1 && !ev2) {
    return IOSDoubleArray_Get(nil_chk(xmin_), 0);
  }
  return [self getXmin];
}

- (jdouble)getXscaleWithBoolean:(jboolean)ev1
                    withBoolean:(jboolean)ev2 {
  if (ev2 && !ev1) {
    return IOSDoubleArray_Get(nil_chk(xscale_), 1);
  }
  else if (ev1 && !ev2) {
    return IOSDoubleArray_Get(nil_chk(xscale_), 0);
  }
  return [self getXscale];
}

- (jdouble)getYmaxWithBoolean:(jboolean)ev1
                  withBoolean:(jboolean)ev2 {
  if (ev2 && !ev1) {
    return IOSDoubleArray_Get(nil_chk(ymax_), 1);
  }
  else if (ev1 && !ev2) {
    return IOSDoubleArray_Get(nil_chk(ymax_), 0);
  }
  return [self getYmax];
}

- (jdouble)getYminWithBoolean:(jboolean)ev1
                  withBoolean:(jboolean)ev2 {
  if (ev2 && !ev1) {
    return IOSDoubleArray_Get(nil_chk(ymin_), 1);
  }
  else if (ev1 && !ev2) {
    return IOSDoubleArray_Get(nil_chk(ymin_), 0);
  }
  return [self getYmin];
}

- (jdouble)getYscaleWithBoolean:(jboolean)ev1
                    withBoolean:(jboolean)ev2 {
  if (ev2 && !ev1) {
    return IOSDoubleArray_Get(nil_chk(yscale_), 1);
  }
  else if (ev1 && !ev2) {
    return IOSDoubleArray_Get(nil_chk(yscale_), 0);
  }
  return [self getYscale];
}

- (id<OrgGeogebraCommonKernelGeoGebraCasInterface>)getGeoGebraCAS {
  @synchronized(self) {
    if (ggbCAS_ == nil) {
      OrgGeogebraCommonKernelKernel_setAndConsume_ggbCAS_(self, new_OrgGeogebraCommonCasGeoGebraCAS_initWithOrgGeogebraCommonKernelKernel_(self));
    }
    return ggbCAS_;
  }
}

- (jint)getCoordStyle {
  return OrgGeogebraCommonKernelKernel_getCoordStyle(self);
}

- (void)setCoordStyleWithInt:(jint)coordStlye {
  coordStyle_ = coordStlye;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)lookupLabelWithNSString:(NSString *)label {
  return OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_(self, label);
}

- (OrgGeogebraCommonKernelGeosGeoCasCell *)lookupCasCellLabelWithNSString:(NSString *)label {
  return OrgGeogebraCommonKernelKernel_lookupCasCellLabelWithNSString_(self, label);
}

- (OrgGeogebraCommonKernelGeosGeoCasCell *)lookupCasRowReferenceWithNSString:(NSString *)label {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) lookupCasRowReferenceWithNSString:label];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)lookupLabelWithNSString:(NSString *)label
                                                       withBoolean:(jboolean)autoCreate
                                                       withBoolean:(jboolean)useDummies {
  return OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_withBoolean_withBoolean_(self, label, autoCreate, useDummies);
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getClassTypeWithNSString:(NSString *)type {
  switch ([((NSString *) nil_chk(type)) charAtWithInt:0]) {
    case 'a':
    return OrgGeogebraCommonPluginGeoClassEnum_get_ANGLE();
    case 'b':
    if ([type isEqual:@"boolean"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_BOOLEAN();
    }
    return OrgGeogebraCommonPluginGeoClassEnum_get_BUTTON();
    case 'c':
    if ([type isEqual:@"conic"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_CONIC();
    }
    else if ([type isEqual:@"conicpart"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_CONICPART();
    }
    else if ([type isEqual:@"circle"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_CONIC();
    }
    case 'd':
    return OrgGeogebraCommonPluginGeoClassEnum_get_CONIC();
    case 'e':
    return OrgGeogebraCommonPluginGeoClassEnum_get_CONIC();
    case 'f':
    return OrgGeogebraCommonPluginGeoClassEnum_get_FUNCTION();
    case 'h':
    return OrgGeogebraCommonPluginGeoClassEnum_get_CONIC();
    case 'i':
    if ([type isEqual:@"image"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_IMAGE();
    }
    else if ([type isEqual:@"intersectinglines"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_CONIC();
    }
    else if ([type isEqual:@"implicitpoly"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_IMPLICIT_POLY();
    }
    case 'l':
    if ([type isEqual:@"line"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_LINE();
    }
    else if ([type isEqual:@"list"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_LIST();
    }
    else {
      return OrgGeogebraCommonPluginGeoClassEnum_get_LOCUS();
    }
    case 'n':
    return OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC();
    case 'p':
    if ([type isEqual:@"point"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_POINT();
    }
    else if ([type isEqual:@"polygon"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_POLYGON();
    }
    else if ([type isEqual:@"polyline"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_POLYLINE();
    }
    else if ([type isEqual:@"penstroke"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_PENSTROKE();
    }
    else {
      return OrgGeogebraCommonPluginGeoClassEnum_get_CONIC();
    }
    case 'r':
    return OrgGeogebraCommonPluginGeoClassEnum_get_RAY();
    case 's':
    return OrgGeogebraCommonPluginGeoClassEnum_get_SEGMENT();
    case 't':
    if ([type isEqual:@"text"]) {
      return OrgGeogebraCommonPluginGeoClassEnum_get_TEXT();
    }
    return OrgGeogebraCommonPluginGeoClassEnum_get_TEXTFIELD();
    case 'v':
    return OrgGeogebraCommonPluginGeoClassEnum_get_VECTOR();
    default:
    @throw [new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getApplication])) getLocalization], JreStrcat("$$$", @"Kernel: GeoElement of type ", type, @" could not be created.")) autorelease];
  }
}

- (NSString *)getModeTextWithInt:(jint)mode {
  switch (mode) {
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SELECTION_LISTENER:
    return @"Select";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE:
    return @"Move";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT:
    return @"Point";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER:
    return @"ComplexNumber";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POINT_ON_OBJECT:
    return @"PointOnObject";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_JOIN:
    return @"Join";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT:
    return @"Segment";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT_FIXED:
    return @"SegmentFixed";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY:
    return @"Ray";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON:
    return @"Polygon";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE:
    return @"PolyLine";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RIGID_POLYGON:
    return @"RigidPolygon";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_POLYGON:
    return @"VectorPolygon";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL:
    return @"Parallel";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL:
    return @"Orthogonal";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT:
    return @"Intersect";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE:
    return @"IntersectionCurve";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_LINE_BISECTOR:
    return @"LineBisector";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR:
    return @"AngularBisector";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS:
    return @"Tangent";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_POLAR_DIAMETER:
    return @"PolarDiameter";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
    return @"Circle2";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    return @"Circle3";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
    return @"Ellipse3";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
    return @"Parabola";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
    return @"Hyperbola3";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
    return @"Compasses";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
    return @"Conic5";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RELATION:
    return @"Relation";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW:
    return @"TranslateView";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_OBJECT:
    return @"ShowHideObject";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_LABEL:
    return @"ShowHideLabel";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
    return @"CopyVisualStyle";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DELETE:
    return @"Delete";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR:
    return @"Vector";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXT:
    return @"Text";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_IMAGE:
    return @"Image";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIDPOINT:
    return @"Midpoint";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SEMICIRCLE:
    return @"Semicircle";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_ARC_THREE_POINTS:
    return @"CircleArc3";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_SECTOR_THREE_POINTS:
    return @"CircleSector3";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS:
    return @"CircumcircleArc3";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS:
    return @"CircumcircleSector3";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SLIDER:
    return @"Slider";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    return @"MirrorAtPoint";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    return @"MirrorAtLine";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE:
    return @"MirrorAtCircle";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    return @"TranslateByVector";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    return @"RotateByAngle";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    return @"DilateFromPoint";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
    return @"CirclePointRadius";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE:
    return @"Angle";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGLE_FIXED:
    return @"AngleFixed";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR_FROM_POINT:
    return @"VectorFromPoint";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_DISTANCE:
    return @"Distance";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MOVE_ROTATE:
    return @"MoveRotate";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_IN:
    return @"ZoomIn";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ZOOM_OUT:
    return @"ZoomOut";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_LOCUS:
    return @"Locus";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_AREA:
    return @"Area";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SLOPE:
    return @"Slope";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_REGULAR_POLYGON:
    return @"RegularPolygon";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX:
    return @"ShowCheckBox";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION:
    return @"ButtonAction";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXTFIELD_ACTION:
    return @"TextFieldAction";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
    return @"Pen";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE:
    return @"FreehandShape";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_CIRCLE:
    return @"FreehandCircle";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
    return @"FitLine";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
    return @"CreateListGraphicsView";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_PROBABILITY_CALCULATOR:
    return @"ProbabilityCalculator";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_FUNCTION_INSPECTOR:
    return @"FunctionInspector";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_EVALUATE:
    return @"Evaluate";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_NUMERIC:
    return @"Numeric";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_KEEP_INPUT:
    return @"KeepInput";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_EXPAND:
    return @"Expand";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_FACTOR:
    return @"Factor";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_SUBSTITUTE:
    return @"Substitute";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_SOLVE:
    return @"Solve";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_NUMERICAL_SOLVE:
    return @"NSolve";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_DERIVATIVE:
    return @"Derivative";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CAS_INTEGRAL:
    return @"Integral";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ATTACH_DETACH:
    return @"AttachDetachPoint";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_ONEVARSTATS:
    return @"OneVarStats";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_TWOVARSTATS:
    return @"TwoVarStats";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_MULTIVARSTATS:
    return @"MultiVarStats";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_CREATE_LIST:
    return @"CreateList";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_CREATE_LISTOFPOINTS:
    return @"CreateListOfPoints";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_CREATE_MATRIX:
    return @"CreateMatrix";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_CREATE_TABLETEXT:
    return @"CreateTable";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_CREATE_POLYLINE:
    return @"CreatePolyLine";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_SUM:
    return @"SumCells";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_AVERAGE:
    return @"MeanCells";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_COUNT:
    return @"CountCells";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_MIN:
    return @"MinCells";
    case OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SPREADSHEET_MAX:
    return @"MaxCells";
    default:
    return @"";
  }
}

- (IOSObjectArray *)getPolynomialCoeffsWithNSString:(NSString *)exp
                                       withNSString:(NSString *)variable {
  return [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([self getGeoGebraCAS])) getPolynomialCoeffsWithNSString:exp withNSString:variable];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoAtWithInt:(jint)col
                                                   withInt:(jint)row {
  return OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_(self, OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(col, row));
}

- (OrgGeogebraCommonKernelAnimationManager *)getAnimatonManager {
  if (animationManager_ == nil) {
    OrgGeogebraCommonKernelKernel_set_animationManager_(self, [((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) newAnimationManagerWithOrgGeogebraCommonKernelKernel:self]);
  }
  return animationManager_;
}

- (IOSDoubleArray *)getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  id<JavaUtilList> viewSet = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getViewSet];
  IOSDoubleArray *viewBounds = [IOSDoubleArray arrayWithLength:6];
  for (jint i = 0; i < 6; i++) {
    *IOSDoubleArray_GetRef(viewBounds, i) = JavaLangDouble_NEGATIVE_INFINITY;
  }
  *IOSDoubleArray_GetRef(viewBounds, 0) = *IOSDoubleArray_GetRef(viewBounds, 2) = JavaLangDouble_POSITIVE_INFINITY;
  if (viewSet == nil) {
    OrgGeogebraCommonKernelKernel_addViewsWithJavaLangInteger_withDoubleArray_(self, JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN), viewBounds);
    return viewBounds;
  }
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(viewSet)) size]; i++) {
    OrgGeogebraCommonKernelKernel_addViewsWithJavaLangInteger_withDoubleArray_(self, [viewSet getWithInt:i], viewBounds);
  }
  return viewBounds;
}

- (void)addViewsWithJavaLangInteger:(JavaLangInteger *)id_
                    withDoubleArray:(IOSDoubleArray *)viewBounds {
  OrgGeogebraCommonKernelKernel_addViewsWithJavaLangInteger_withDoubleArray_(self, id_, viewBounds);
}

- (OrgGeogebraCommonKernelGeosGeoAxis *)getXAxis {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getXAxis];
}

- (OrgGeogebraCommonKernelGeosGeoAxis *)getYAxis {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getYAxis];
}

- (jboolean)isAxisWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return ((geo == [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getXAxis]) || (geo == [cons_ getYAxis]));
}

- (void)updateLocalAxesNames {
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) updateLocalAxesNames];
}

- (void)setNotifyRepaintActiveWithBoolean:(jboolean)flag {
  if (flag != notifyRepaint__) {
    notifyRepaint__ = flag;
    if (notifyRepaint__) {
      OrgGeogebraCommonKernelKernel_notifyRepaint(self);
    }
  }
}

- (jboolean)isNotifyRepaintActive {
  return notifyRepaint__;
}

- (void)notifyRepaint {
  OrgGeogebraCommonKernelKernel_notifyRepaint(self);
}

- (void)notifyControllersMoveIfWaiting {
  if (notifyRepaint__ && notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([view isKindOfClass:[OrgGeogebraCommonEuclidianEuclidianView class]]) {
        [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(((OrgGeogebraCommonEuclidianEuclidianView *) check_class_cast(view, [OrgGeogebraCommonEuclidianEuclidianView class])))) getEuclidianController])) moveIfWaiting];
      }
    }
  }
}

- (jboolean)notifySuggestRepaint {
  jboolean needed = NO;
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      needed = ([((id<OrgGeogebraCommonKernelView>) nil_chk(view)) suggestRepaint] || needed);
    }
  }
  return needed;
}

- (void)notifyReset {
  OrgGeogebraCommonKernelKernel_notifyReset(self);
}

- (void)notifyClearView {
  OrgGeogebraCommonKernelKernel_notifyClearView(self);
}

- (void)clearJustCreatedGeosInViews {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_class_() isInstance:view]) {
        [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) check_protocol_cast(view, @protocol(OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim))))) getEuclidianController])) clearJustCreatedGeos];
      }
    }
  }
}

- (void)setNotifyViewsActiveWithBoolean:(jboolean)flag {
  if (flag != notifyViewsActive_) {
    notifyViewsActive_ = flag;
    if (flag) {
      viewReiniting_ = YES;
      for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
        OrgGeogebraCommonKernelKernel_notifyAddAllWithOrgGeogebraCommonKernelView_(self, view);
      }
      [self notifyEuclidianViewCE];
      OrgGeogebraCommonKernelKernel_notifyReset(self);
      if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil) [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) applyAlgebraViewSettings];
      viewReiniting_ = NO;
    }
    else {
      OrgGeogebraCommonKernelKernel_notifyClearView(self);
    }
  }
}

- (OrgGeogebraCommonEuclidianEuclidianView *)getLastAttachedEV {
  return lastAttachedEV_;
}

- (void)attachWithOrgGeogebraCommonKernelView:(id<OrgGeogebraCommonKernelView>)view {
  if (![((JavaUtilArrayList *) nil_chk(views_)) containsWithId:view]) {
    [views_ addWithId:view];
  }
  if ([view isKindOfClass:[OrgGeogebraCommonEuclidianEuclidianView class]]) {
    OrgGeogebraCommonKernelKernel_set_lastAttachedEV_(self, (OrgGeogebraCommonEuclidianEuclidianView *) check_class_cast(view, [OrgGeogebraCommonEuclidianEuclidianView class]));
  }
  OrgGeogebraCommonKernelKernel_printAttachedViews(self);
}

- (void)printAttachedViews {
  OrgGeogebraCommonKernelKernel_printAttachedViews(self);
}

- (void)detachWithOrgGeogebraCommonKernelView:(id<OrgGeogebraCommonKernelView>)view {
  [((JavaUtilArrayList *) nil_chk(views_)) removeWithId:view];
  OrgGeogebraCommonKernelKernel_printAttachedViews(self);
}

- (void)notifyModeChangedWithInt:(jint)mode
withOrgGeogebraCommonKernelModeSetterEnum:(OrgGeogebraCommonKernelModeSetterEnum *)m {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) setModeWithInt:mode withOrgGeogebraCommonKernelModeSetterEnum:m];
    }
  }
}

- (void)notifyAddAllWithOrgGeogebraCommonKernelView:(id<OrgGeogebraCommonKernelView>)view {
  OrgGeogebraCommonKernelKernel_notifyAddAllWithOrgGeogebraCommonKernelView_(self, view);
}

- (void)registerRenameListenerAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algo {
  if (renameListenerAlgos_ == nil) {
    OrgGeogebraCommonKernelKernel_setAndConsume_renameListenerAlgos_(self, new_JavaUtilArrayList_init());
  }
  if (![((JavaUtilArrayList *) nil_chk(renameListenerAlgos_)) containsWithId:algo]) {
    [renameListenerAlgos_ addWithId:algo];
  }
}

- (void)unregisterRenameListenerAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algo {
  if (renameListenerAlgos_ != nil) {
    [renameListenerAlgos_ removeWithId:algo];
  }
}

- (void)notifyRenameListenerAlgos {
  OrgGeogebraCommonKernelKernel_notifyRenameListenerAlgos(self);
}

- (jboolean)isSpreadsheetBatchRunning {
  return self->spreadsheetBatchRunning_;
}

- (void)setSpreadsheetBatchRunningWithBoolean:(jboolean)b {
  self->spreadsheetBatchRunning_ = b;
  if (!b) {
    OrgGeogebraCommonKernelKernel_notifyRenameListenerAlgos(self);
  }
}

- (jboolean)renameLabelInScriptsWithNSString:(NSString *)oldLabel
                                withNSString:(NSString *)newLabel {
  OrgGeogebraCommonPluginScriptScript *work;
  jboolean somethingHappened = NO;
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getGeoSetWithCasCellsConstructionOrder])) {
    work = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getScriptWithOrgGeogebraCommonPluginEventTypeEnum:OrgGeogebraCommonPluginEventTypeEnum_get_UPDATE()];
    if ([work isKindOfClass:[OrgGeogebraCommonPluginScriptGgbScript class]]) {
      somethingHappened |= [((OrgGeogebraCommonPluginScriptScript *) nil_chk(work)) renameGeoWithNSString:oldLabel withNSString:newLabel];
    }
    work = [geo getScriptWithOrgGeogebraCommonPluginEventTypeEnum:OrgGeogebraCommonPluginEventTypeEnum_get_CLICK()];
    if ([work isKindOfClass:[OrgGeogebraCommonPluginScriptGgbScript class]]) {
      somethingHappened |= [((OrgGeogebraCommonPluginScriptScript *) nil_chk(work)) renameGeoWithNSString:oldLabel withNSString:newLabel];
    }
  }
  return somethingHappened;
}

- (void)notifyAddAllWithOrgGeogebraCommonKernelView:(id<OrgGeogebraCommonKernelView>)view
                                            withInt:(jint)consStep {
  OrgGeogebraCommonKernelKernel_notifyAddAllWithOrgGeogebraCommonKernelView_withInt_(self, view, consStep);
}

- (void)notifyAddWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (notifyViewsActive_) {
    if (addingPolygon__ && ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->labelSet_) {
      if ([((NSString *) nil_chk([geo getXMLtypeString])) equalsIgnoreCase:@"Polygon"]) {
        OrgGeogebraCommonKernelKernel_set_newPolygon_(self, geo);
      }
    }
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if (([((id<OrgGeogebraCommonKernelView>) nil_chk(view)) getViewID] != OrgGeogebraCommonMainApp_VIEW_CONSTRUCTION_PROTOCOL) || [self isNotifyConstructionProtocolViewAboutAddRemoveActive]) {
        [view addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
    }
  }
  OrgGeogebraCommonKernelKernel_notifyRenameListenerAlgos(self);
}

- (void)addingPolygon {
  if (notifyViewsActive_) {
    self->addingPolygon__ = YES;
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelClientView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelClientView>) nil_chk(((id<OrgGeogebraCommonKernelClientView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelClientView))))) addingPolygon];
      }
    }
  }
}

- (void)notifyPolygonAdded {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelClientView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelClientView>) nil_chk(((id<OrgGeogebraCommonKernelClientView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelClientView))))) addPolygonCompleteWithOrgGeogebraCommonKernelGeosGeoElement:self->newPolygon_];
      }
    }
  }
}

- (void)notifyRemoveGroup {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelClientView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelClientView>) nil_chk(((id<OrgGeogebraCommonKernelClientView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelClientView))))) deleteGeosWithJavaUtilArrayList:deleteList_];
      }
    }
  }
  [((JavaUtilArrayList *) nil_chk(self->deleteList_)) clear];
}

- (void)notifyRemoveWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (notifyViewsActive_) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [((JavaUtilArrayList *) nil_chk(self->deleteList_)) addWithId:geo];
    }
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if (([((id<OrgGeogebraCommonKernelView>) nil_chk(view)) getViewID] != OrgGeogebraCommonMainApp_VIEW_CONSTRUCTION_PROTOCOL) || [self isNotifyConstructionProtocolViewAboutAddRemoveActive]) {
        [view removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
    }
  }
  OrgGeogebraCommonKernelKernel_notifyRenameListenerAlgos(self);
}

- (void)movingGeoSet {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelClientView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelClientView>) nil_chk(((id<OrgGeogebraCommonKernelClientView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelClientView))))) movingGeos];
      }
    }
  }
}

- (void)movedGeoSetWithJavaUtilArrayList:(JavaUtilArrayList *)elmSet {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelClientView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelClientView>) nil_chk(((id<OrgGeogebraCommonKernelClientView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelClientView))))) movedGeosWithJavaUtilArrayList:elmSet];
      }
    }
  }
}

- (void)notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) updateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)notifyUpdateLocationWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelUpdateLocationView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelUpdateLocationView>) nil_chk(((id<OrgGeogebraCommonKernelUpdateLocationView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelUpdateLocationView))))) updateLocationWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
      else {
        [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) updateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
    }
  }
}

- (void)notifyUpdateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) updateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)notifyUpdateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) updateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)notifyRenameWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) renameWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
  OrgGeogebraCommonKernelKernel_notifyRenameListenerAlgos(self);
}

- (void)notifyRenameUpdatesComplete {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelClientView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelClientView>) nil_chk(((id<OrgGeogebraCommonKernelClientView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelClientView))))) renameUpdatesComplete];
      }
    }
  }
}

- (void)notifyPerspectiveChangedWithNSString:(NSString *)perspectiveId {
  for (id<OrgGeogebraCommonKernelUserAwarenessListener> __strong listener in nil_chk(self->userAwarenessListeners_)) {
    [((id<OrgGeogebraCommonKernelUserAwarenessListener>) nil_chk(listener)) perspectiveChangedWithNSString:perspectiveId];
  }
}

- (void)notifyPaste {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelClientView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelClientView>) nil_chk(((id<OrgGeogebraCommonKernelClientView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelClientView))))) pasteElms];
      }
    }
  }
}

- (void)notifyPasteComplete {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelClientView_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonKernelClientView>) nil_chk(((id<OrgGeogebraCommonKernelClientView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelClientView))))) pasteElmsCompleteWithJavaUtilArrayList:[((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) getSelectedGeos]];
      }
    }
  }
}

- (jboolean)isNotifyViewsActive {
  return notifyViewsActive_ && !viewReiniting_;
}

- (jboolean)isViewReiniting {
  return viewReiniting_;
}

- (void)addUserAwarenessListenerWithOrgGeogebraCommonKernelUserAwarenessListener:(id<OrgGeogebraCommonKernelUserAwarenessListener>)listener {
  [((JavaUtilArrayList *) nil_chk(self->userAwarenessListeners_)) addWithId:listener];
}

- (void)removeUserAwarenessListenerWithOrgGeogebraCommonKernelUserAwarenessListener:(id<OrgGeogebraCommonKernelUserAwarenessListener>)listener {
  [((JavaUtilArrayList *) nil_chk(self->userAwarenessListeners_)) removeWithId:listener];
}

- (void)updateConstruction {
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) updateConstruction];
  if ([self getUpdateAgain]) {
    [self setUpdateAgainWithBoolean:NO withOrgGeogebraCommonKernelGeosGeoElement:nil];
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) scheduleUpdateConstruction];
  }
  else {
    OrgGeogebraCommonKernelKernel_notifyRepaint(self);
  }
}

- (void)updateConstructionLanguage {
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) updateConstructionLanguage];
  if ([self getUpdateAgain]) {
    [self setUpdateAgainWithBoolean:NO withOrgGeogebraCommonKernelGeosGeoElement:nil];
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) scheduleUpdateConstruction];
  }
  else {
    OrgGeogebraCommonKernelKernel_notifyRepaint(self);
  }
}

- (void)updateConstructionWithInt:(jint)n {
  for (jint i = 0; i < n; i++) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) updateConstruction];
  }
  if ([self getUpdateAgain]) {
    [self setUpdateAgainWithBoolean:NO withOrgGeogebraCommonKernelGeosGeoElement:nil];
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) scheduleUpdateConstruction];
  }
  else {
    OrgGeogebraCommonKernelKernel_notifyRepaint(self);
  }
}

- (jboolean)isEmpty {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isEmpty];
}

- (jboolean)isGettingUndo {
  @synchronized(self) {
    return isGettingUndo__;
  }
}

- (void)setIsGettingUndoWithBoolean:(jboolean)flag {
  @synchronized(self) {
    isGettingUndo__ = flag;
  }
}

- (void)setUndoActiveWithBoolean:(jboolean)flag {
  undoActive_ = flag;
}

- (jboolean)isUndoActive {
  return undoActive_;
}

- (void)storeUndoInfo {
  if (undoActive_) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) storeUndoInfo];
  }
}

- (void)restoreCurrentUndoInfo {
  if (undoActive_) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) restoreCurrentUndoInfo];
  }
}

- (void)initUndoInfo {
  if (undoActive_) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) initUndoInfo];
  }
}

- (void)storeSelectedGeosNames {
  [((JavaUtilArrayList *) nil_chk(selectedGeosNames_)) clear];
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) getSelectionManager])) getSelectedGeos])) [selectedGeosNames_ addWithId:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple]];
}

- (void)recallSelectedGeosNames {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (NSString * __strong name in nil_chk(selectedGeosNames_)) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_(self, name);
    if (geo != nil) [list addWithId:geo];
  }
  [((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) getSelectionManager])) setSelectedGeosWithJavaUtilArrayList:list];
}

- (void)redo {
  if (undoActive_ && [((OrgGeogebraCommonKernelUndoManager *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getUndoManager])) redoPossible]) {
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) startCollectingRepaints];
    [self storeSelectedGeosNames];
    [((OrgGeogebraCommonMainAppCompanion *) nil_chk([app_ getCompanion])) storeViewCreators];
    OrgGeogebraCommonKernelKernel_notifyReset(self);
    [self clearJustCreatedGeosInViews];
    [cons_ redo];
    OrgGeogebraCommonKernelKernel_notifyReset(self);
    [((OrgGeogebraCommonMainAppCompanion *) nil_chk([app_ getCompanion])) recallViewCreators];
    [self recallSelectedGeosNames];
    [app_ stopCollectingRepaints];
  }
}

- (void)undo {
  if (undoActive_ && [((OrgGeogebraCommonKernelUndoManager *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getUndoManager])) undoPossible]) {
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) startCollectingRepaints];
    [self storeSelectedGeosNames];
    [((OrgGeogebraCommonMainAppCompanion *) nil_chk([app_ getCompanion])) storeViewCreators];
    OrgGeogebraCommonKernelKernel_notifyReset(self);
    [self clearJustCreatedGeosInViews];
    [((OrgGeogebraCommonEuclidianEuclidianController *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) getActiveEuclidianView])) getEuclidianController])) clearSelections];
    [cons_ undo];
    OrgGeogebraCommonKernelKernel_notifyReset(self);
    [((OrgGeogebraCommonMainAppCompanion *) nil_chk([app_ getCompanion])) recallViewCreators];
    [self recallSelectedGeosNames];
    if (![self undoPossible]) {
      OrgGeogebraCommonKernelKernel_notifyRepaint(self);
    }
    [app_ stopCollectingRepaints];
  }
}

- (jboolean)undoPossible {
  return undoActive_ && [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) undoPossible];
}

- (jboolean)redoPossible {
  return undoActive_ && [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) redoPossible];
}

- (jboolean)isInsertLineBreaks {
  return insertLineBreaks_;
}

- (NSString *)getXMLFileFormat {
  return OrgGeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_();
}

- (void)setInsertLineBreaksWithBoolean:(jboolean)insertLineBreaks {
  self->insertLineBreaks_ = insertLineBreaks;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)handleTrigPowerWithNSString:(NSString *)image
                             withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                                    withNSString:(NSString *)operation {
  if ([@"x" isEqual:operation] || [@"y" isEqual:operation] || [@"z" isEqual:operation]) {
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, operation) autorelease], OrgGeogebraCommonPluginOperationEnum_get_POWER(), OrgGeogebraCommonKernelKernel_convertIndexToNumberWithNSString_(self, image)) autorelease], OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION(), en) autorelease];
  }
  OrgGeogebraCommonKernelGeosGeoElement *ge = OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_(self, operation);
  OrgGeogebraCommonPluginOperationEnum *type = [((OrgGeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getParserFunctions])) getWithNSString:operation withInt:1];
  if (ge != nil || type == nil) {
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [new_OrgGeogebraCommonKernelArithmeticVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, operation) autorelease], OrgGeogebraCommonPluginOperationEnum_get_POWER(), OrgGeogebraCommonKernelKernel_convertIndexToNumberWithNSString_(self, image)) autorelease], OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION(), en) autorelease];
  }
  if ([((NSString *) nil_chk(image)) indexOf:OrgGeogebraCommonUtilUnicode_Superscript_Minus] > -1) {
    if ([((NSString *) nil_chk([image substring:3 endIndex:6])) isEqual:OrgGeogebraCommonUtilUnicode_get_superscriptMinusOneBracket_()]) {
      return [self inverseTrigWithOrgGeogebraCommonPluginOperationEnum:type withOrgGeogebraCommonKernelArithmeticExpressionValue:en];
    }
    @throw [new_JavaLangError_initWithNSString_(@"Bad index for trig function") autorelease];
  }
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, en, type, nil) autorelease], OrgGeogebraCommonPluginOperationEnum_get_POWER(), OrgGeogebraCommonKernelKernel_convertIndexToNumberWithNSString_(self, image)) autorelease];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)inverseTrigWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)type
                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)en {
  switch ([type ordinal]) {
    case OrgGeogebraCommonPluginOperation_SIN:
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, en, OrgGeogebraCommonPluginOperationEnum_get_ARCSIN(), nil) autorelease];
    case OrgGeogebraCommonPluginOperation_COS:
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, en, OrgGeogebraCommonPluginOperationEnum_get_ARCCOS(), nil) autorelease];
    case OrgGeogebraCommonPluginOperation_TAN:
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, en, OrgGeogebraCommonPluginOperationEnum_get_ARCTAN(), nil) autorelease];
    case OrgGeogebraCommonPluginOperation_SINH:
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, en, OrgGeogebraCommonPluginOperationEnum_get_ASINH(), nil) autorelease];
    case OrgGeogebraCommonPluginOperation_COSH:
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, en, OrgGeogebraCommonPluginOperationEnum_get_ACOSH(), nil) autorelease];
    case OrgGeogebraCommonPluginOperation_TANH:
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, en, OrgGeogebraCommonPluginOperationEnum_get_ATANH(), nil) autorelease];
    default:
    @throw [new_JavaLangError_initWithNSString_(@"Inverse not supported for trig function") autorelease];
  }
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)convertIndexToNumberWithNSString:(NSString *)str {
  return OrgGeogebraCommonKernelKernel_convertIndexToNumberWithNSString_(self, str);
}

- (OrgGeogebraCommonKernelGeosGeoVec2D *)getImaginaryUnit {
  if (imaginaryUnit_ == nil) {
    OrgGeogebraCommonKernelKernel_setAndConsume_imaginaryUnit_(self, new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_(self, 0, 1));
    [imaginaryUnit_ setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_COMPLEX];
  }
  return imaginaryUnit_;
}

- (IOSObjectArray *)useMacroWithNSStringArray:(IOSObjectArray *)labels
             withOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro
withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input {
  @try {
    OrgGeogebraCommonKernelAlgosAlgoMacro *algo = [new_OrgGeogebraCommonKernelAlgosAlgoMacro_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelMacro_withOrgGeogebraCommonKernelGeosGeoElementArray_(cons_, labels, macro, input) autorelease];
    return [algo getOutput];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

- (OrgGeogebraCommonMainLocalization *)getLocalization {
  return [((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) getLocalization];
}

- (jboolean)kernelHas3DObjects {
  return OrgGeogebraCommonKernelKernel_kernelHas3DObjects(self);
}

- (void)getKernelXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                  withBoolean:(jboolean)asPreference {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<kernel>\n"];
  if (OrgGeogebraCommonKernelKernel_kernelHas3DObjects(self)) {
    [sb appendWithNSString:@"\t<uses3D val=\"true\"/>\n"];
  }
  [sb appendWithNSString:@"\t<continuous val=\""];
  [sb appendWithBoolean:OrgGeogebraCommonKernelKernel_isContinuous(self)];
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"\t<usePathAndRegionParameters val=\""];
  [sb appendWithNSString:[((OrgGeogebraCommonKernelPathRegionHandlingEnum *) nil_chk(usePathAndRegionParameters__)) getXML]];
  [sb appendWithNSString:@"\"/>\n"];
  if (useSignificantFigures_) {
    [sb appendWithNSString:@"\t<significantfigures val=\""];
    [sb appendWithInt:OrgGeogebraCommonKernelKernel_getPrintFigures(self)];
    [sb appendWithNSString:@"\"/>\n"];
  }
  else {
    [sb appendWithNSString:@"\t<decimals val=\""];
    [sb appendWithInt:OrgGeogebraCommonKernelKernel_getPrintDecimals(self)];
    [sb appendWithNSString:@"\"/>\n"];
  }
  [sb appendWithNSString:@"\t<angleUnit val=\""];
  [sb appendWithNSString:OrgGeogebraCommonKernelKernel_getAngleUnit(self) == OrgGeogebraCommonKernelKernel_ANGLE_RADIANT ? @"radiant" : @"degree"];
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"\t<algebraStyle val=\""];
  [sb appendWithInt:algebraStyle_];
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"\t<coordStyle val=\""];
  [sb appendWithInt:OrgGeogebraCommonKernelKernel_getCoordStyle(self)];
  [sb appendWithNSString:@"\"/>\n"];
  if (!asPreference) {
    [sb appendWithNSString:@"\t<angleFromInvTrig val=\""];
    [sb appendWithBoolean:[self getInverseTrigReturnsAngle]];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (OrgGeogebraCommonKernelKernel_isAnimationRunning(self)) {
    [sb appendWithNSString:@"\t<startAnimation val=\""];
    [sb appendWithBoolean:OrgGeogebraCommonKernelKernel_isAnimationRunning(self)];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (asPreference) {
    [sb appendWithNSString:@"\t<localization"];
    [sb appendWithNSString:@" digits=\""];
    [sb appendWithBoolean:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isUsingLocalizedDigits]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" labels=\""];
    [sb appendWithBoolean:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isUsingLocalizedLabels]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
    [sb appendWithNSString:@"\t<casSettings"];
    [sb appendWithNSString:@" timeout=\""];
    [sb appendWithId:OrgGeogebraCommonIoMyXMLHandler_getTimeoutOptionWithLong_([((OrgGeogebraCommonMainSettingsCASSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSettings])) getCasSettings])) getTimeoutMilliseconds] / 1000)];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" expRoots=\""];
    [sb appendWithBoolean:[((OrgGeogebraCommonMainSettingsCASSettings *) nil_chk([((OrgGeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getCasSettings])) getShowExpAsRoots]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
  }
  [sb appendWithNSString:@"</kernel>\n"];
}

- (void)addMacroWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  if (macroManager_ == nil) {
    OrgGeogebraCommonKernelKernel_setAndConsume_macroManager_(self, new_OrgGeogebraCommonKernelMacroManager_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonKernelKernel_getApplication(self)));
  }
  [((OrgGeogebraCommonKernelMacroManager *) nil_chk(macroManager_)) addMacroWithOrgGeogebraCommonKernelMacro:macro];
  for (id<OrgGeogebraCommonKernelUserAwarenessListener> __strong listener in nil_chk(self->userAwarenessListeners_)) {
    [((id<OrgGeogebraCommonKernelUserAwarenessListener>) nil_chk(listener)) addMacroWithOrgGeogebraCommonKernelMacro:macro];
  }
}

- (void)removeMacroWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  if (macroManager_ != nil) [macroManager_ removeMacroWithOrgGeogebraCommonKernelMacro:macro];
  for (id<OrgGeogebraCommonKernelUserAwarenessListener> __strong listener in nil_chk(self->userAwarenessListeners_)) {
    [((id<OrgGeogebraCommonKernelUserAwarenessListener>) nil_chk(listener)) removeMacroWithOrgGeogebraCommonKernelMacro:macro];
  }
}

- (void)removeAllMacros {
  if (macroManager_ != nil) {
    [((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) removeMacroCommands];
    [macroManager_ removeAllMacros];
  }
  for (id<OrgGeogebraCommonKernelUserAwarenessListener> __strong listener in nil_chk(self->userAwarenessListeners_)) {
    [((id<OrgGeogebraCommonKernelUserAwarenessListener>) nil_chk(listener)) removeAllMacros];
  }
}

- (jboolean)setMacroCommandNameWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro
                                                   withNSString:(NSString *)cmdName {
  jboolean nameUsed = [((OrgGeogebraCommonKernelMacroManager *) nil_chk(macroManager_)) getMacroWithNSString:cmdName] != nil;
  if (nameUsed || cmdName == nil || ((jint) [cmdName length]) == 0) return NO;
  for (id<OrgGeogebraCommonKernelUserAwarenessListener> __strong listener in nil_chk(self->userAwarenessListeners_)) {
    [((id<OrgGeogebraCommonKernelUserAwarenessListener>) nil_chk(listener)) setMacroCommandNameWithOrgGeogebraCommonKernelMacro:macro withNSString:cmdName];
  }
  [macroManager_ setMacroCommandNameWithOrgGeogebraCommonKernelMacro:macro withNSString:cmdName];
  return YES;
}

- (OrgGeogebraCommonKernelMacro *)getMacroWithNSString:(NSString *)name {
  return (macroManager_ == nil) ? nil : [macroManager_ getMacroWithNSString:name];
}

- (NSString *)getMacroXMLWithJavaUtilArrayList:(JavaUtilArrayList *)macros {
  if ([self hasMacros]) return OrgGeogebraCommonKernelMacroManager_getMacroXMLWithJavaUtilArrayList_(macros);
  return @"";
}

- (jboolean)hasMacros {
  return (macroManager_ != nil && [macroManager_ getMacroNumber] > 0);
}

- (jint)getMacroNumber {
  if (macroManager_ == nil) return 0;
  return [((OrgGeogebraCommonKernelMacroManager *) nil_chk(macroManager_)) getMacroNumber];
}

- (JavaUtilArrayList *)getAllMacros {
  if (macroManager_ == nil) {
    return nil;
  }
  return [((OrgGeogebraCommonKernelMacroManager *) nil_chk(macroManager_)) getAllMacros];
}

- (OrgGeogebraCommonKernelMacro *)getMacroWithInt:(jint)i {
  @try {
    return [((OrgGeogebraCommonKernelMacroManager *) nil_chk(macroManager_)) getMacroWithInt:i];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (jint)getMacroIDWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  return (macroManager_ == nil) ? -1 : [macroManager_ getMacroIDWithOrgGeogebraCommonKernelMacro:macro];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createGeoElementWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1
                                                                                      withNSString:(NSString *)type {
  switch ([((NSString *) nil_chk(type)) charAtWithInt:0]) {
    case 'a':
    if ([type isEqual:@"angle"]) return [new_OrgGeogebraCommonKernelGeosGeoAngle_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    return [new_OrgGeogebraCommonKernelGeosGeoAxis_initWithOrgGeogebraCommonKernelConstruction_withInt_(cons1, 1) autorelease];
    case 'b':
    if ([type isEqual:@"boolean"]) {
      return [new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    return [new_OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'c':
    if ([type isEqual:@"conic"]) return [new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"conicpart"]) return [new_OrgGeogebraCommonKernelGeosGeoConicPart_initWithOrgGeogebraCommonKernelConstruction_withInt_(cons1, 0) autorelease];
    else if ([type isEqual:@"curvecartesian"]) return [new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"cascell"]) return [new_OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"circle"]) {
      return [new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    case 'd':
    return [new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'e':
    return [new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'f':
    if ([type isEqual:@"function"]) {
      return [new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    else if ([type isEqual:@"functionconditional"]) {
      return [new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    else {
      return [new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    case 'h':
    return [new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'i':
    if ([type isEqual:@"image"]) return [new_OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"intersectinglines"]) return [new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"implicitpoly"]) return [new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"interval"]) {
      return [new_OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    case 'l':
    if ([type isEqual:@"line"]) return [new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"list"]) return [new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else return [new_OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'n':
    return [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'p':
    if ([type isEqual:@"point"]) return [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"polygon"]) return [new_OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, nil) autorelease];
    else if ([type isEqual:@"polyline"]) return [new_OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()]) autorelease];
    else return [new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'r':
    return [new_OrgGeogebraCommonKernelGeosGeoRay_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_(cons1, nil) autorelease];
    case 's':
    return [new_OrgGeogebraCommonKernelGeosGeoSegment_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons1, nil, nil) autorelease];
    case 't':
    if ([type isEqual:@"text"]) {
      return [new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    return [new_OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'v':
    return [new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
    default:
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$$", @"Kernel: GeoElement of type ", type, @" could not be created."));
    return [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
  }
}

- (void)setWantAnimationStarted {
  wantAnimationStarted__ = YES;
}

- (jboolean)wantAnimationStarted {
  return wantAnimationStarted__;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  id<OrgGeogebraCommonKernelArithmeticTraversing> ifReplacer = [new_OrgGeogebraCommonKernelKernel_$2_initWithOrgGeogebraCommonKernelKernel_(self) autorelease];
  if (![geo isLabelSet] && algo != nil && [algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentNumber class]]) {
    OrgGeogebraCommonKernelAlgosAlgoDependentNumber *algoDep = (OrgGeogebraCommonKernelAlgosAlgoDependentNumber *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoDependentNumber class]);
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([algoDep getExpression])) getCopyWithOrgGeogebraCommonKernelKernel:self])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:ifReplacer])) wrap];
  }
  if (![geo isLabelSet] && algo != nil && [algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentBoolean class]]) {
    OrgGeogebraCommonKernelAlgosAlgoDependentBoolean *algoDep = (OrgGeogebraCommonKernelAlgosAlgoDependentBoolean *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoDependentBoolean class]);
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([algoDep getExpression])) getCopyWithOrgGeogebraCommonKernelKernel:self];
  }
  if (![geo isLabelSet] && algo != nil && [algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoIf class]]) {
    return [((OrgGeogebraCommonKernelAlgosAlgoIf *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoIf class])) toExpression];
  }
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, geo) autorelease];
}

- (IOSObjectArray *)VectorPolygonWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  jdouble xA = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points), 0))) getInhomX];
  jdouble yA = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getInhomY];
  for (jint i = 1; i < points->size_; i++) {
    jdouble xC = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomX];
    jdouble yC = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomY];
    OrgGeogebraCommonKernelGeosGeoNumeric *nx = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(cons_, nil, xC - xA) autorelease];
    OrgGeogebraCommonKernelGeosGeoNumeric *ny = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(cons_, nil, yC - yA) autorelease];
    OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_maxPrecision_();
    [sb setLengthWithInt:0];
    [sb appendWithChar:'('];
    [sb appendWithNSString:[nx getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@"+x("];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@"),"];
    [sb appendWithNSString:[ny getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@"+y("];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@"))"];
    OrgGeogebraCommonKernelGeosGeoPoint *pp = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self getAlgebraProcessor])) evaluateToPointWithNSString:[sb description] withBoolean:YES withBoolean:YES], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    @try {
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) replaceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:pp];
      IOSObjectArray_Set(points, i, pp);
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) update];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      return nil;
    }
  }
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) update];
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PolygonWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points];
}

- (IOSObjectArray *)RigidPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly
                                                               withDouble:(jdouble)offsetX
                                                               withDouble:(jdouble)offsetY {
  IOSObjectArray *p = [IOSObjectArray arrayWithLength:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) getPointsLength] type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  IOSObjectArray_Set(p, 0, [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([poly getPointWithInt:0])) copy__]);
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, 0))) setLabelWithNSString:nil];
  IOSObjectArray *segs = [poly getSegments];
  IOSObjectArray *pts = [poly getPoints];
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelKernelNDGeoConicND *circle = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) CircleWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(p, 0) withOrgGeogebraCommonKernelArithmeticNumberValue:IOSObjectArray_Get(nil_chk([poly getSegments]), 0)];
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  IOSObjectArray_Set(p, 1, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PointWithNSString:nil withOrgGeogebraCommonKernelPath:circle withDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([poly getPointWithInt:1]))->inhomX_ withDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([poly getPointWithInt:1]))->inhomY_ withBoolean:YES withBoolean:NO withBoolean:YES]);
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, 1))) setLabelWithNSString:nil];
  jboolean oldVal = [self isUsingInternalCommandNames];
  [self setUseInternalCommandNamesWithBoolean:YES];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 2; i < [poly getPointsLength]; i++) {
    [sb setLengthWithInt:0];
    [sb appendWithNSString:@"Rotate["];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, i - 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"+ ("];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(nil_chk(segs), i - 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@", 0), Angle["];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(pts), i))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"-"];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts, i - 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"] + Angle["];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, i - 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"-"];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, i - 2))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"] - Angle["];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts, i - 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"-"];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts, i - 2))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"],"];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, i - 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"]"];
    IOSObjectArray_Set(p, i, [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self getAlgebraProcessor])) evaluateToPointWithNSString:[sb description] withBoolean:YES withBoolean:NO]);
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, i))) setLabelWithNSString:nil];
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, i))) setEuclidianVisibleWithBoolean:NO];
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(p, i))) update];
  }
  [self setUseInternalCommandNamesWithBoolean:oldVal];
  OrgGeogebraCommonKernelAlgosAlgoPolygon *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, nil, p) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> firstPoint = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(ret, 0), [OrgGeogebraCommonKernelGeosGeoPolygon class])))) getPoints]), 0);
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(firstPoint)) updateCoords2D];
  [firstPoint setCoordsWithDouble:[firstPoint getX2D] + offsetX withDouble:[firstPoint getY2D] + offsetY withDouble:1.0];
  [firstPoint updateRepaint];
  return ret;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)RigidPolygonPointOnCircleWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)circle
                                                                          withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point1 {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PointWithNSString:nil withOrgGeogebraCommonKernelPath:circle withDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point1)) getInhomX] withDouble:[point1 getInhomY] withBoolean:YES withBoolean:NO withBoolean:YES];
}

- (IOSObjectArray *)RigidPolygonWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelKernelNDGeoConicND *circle = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) CircleWithNSString:nil withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)]) autorelease]];
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = [self RigidPolygonPointOnCircleWithOrgGeogebraCommonKernelKernelNDGeoConicND:circle withOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)];
  @try {
    [(cons_) replaceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class])];
    IOSObjectArray_Set(points, 1, p);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  jdouble xA = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getInhomX];
  jdouble yA = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getInhomY];
  jdouble xB = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 1))) getInhomX];
  jdouble yB = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 1))) getInhomY];
  OrgGeogebraCommonKernelGeosGeoVec2D *a = [new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_([cons_ getKernel], xB - xA, yB - yA) autorelease];
  OrgGeogebraCommonKernelGeosGeoVec2D *b = [new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_([cons_ getKernel], yA - yB, xB - xA) autorelease];
  jdouble aLength = JavaLangMath_sqrtWithDouble_([a innerWithOrgGeogebraCommonKernelGeosGeoVec2D:a]);
  jboolean oldVal = [self isUsingInternalCommandNames];
  [self setUseInternalCommandNamesWithBoolean:YES];
  [a makeUnitVector];
  [b makeUnitVector];
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_maxPrecision_();
  jboolean is3D = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) isGeoElement3D] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 1))) isGeoElement3D];
  for (jint i = 2; i < points->size_; i++) {
    jdouble xC = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomX];
    jdouble yC = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomY];
    OrgGeogebraCommonKernelGeosGeoVec2D *d = [new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_([cons_ getKernel], xC - xA, yC - yA) autorelease];
    [sb setLengthWithInt:0];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithChar:'+'];
    [sb appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, [a innerWithOrgGeogebraCommonKernelGeosGeoVec2D:d] / aLength, tpl)];
    [sb appendWithNSString:@"Vector["];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithChar:','];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@"]+"];
    [sb appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, [b innerWithOrgGeogebraCommonKernelGeosGeoVec2D:d] / aLength, tpl)];
    [sb appendWithNSString:@"OrthogonalVector[Segment["];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithChar:','];
    [sb appendWithNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [self RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:sb withBoolean:is3D];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> pp = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self getAlgebraProcessor])) evaluateToPointWithNSString:[sb description] withBoolean:YES withBoolean:YES];
    @try {
      [(cons_) replaceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(pp, [OrgGeogebraCommonKernelGeosGeoElement class])];
      IOSObjectArray_Set(points, i, pp);
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) setEuclidianVisibleWithBoolean:NO];
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) update];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      return nil;
    }
  }
  [self setUseInternalCommandNamesWithBoolean:oldVal];
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) update];
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PolygonWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points];
}

- (void)RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                 withBoolean:(jboolean)is3D {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"]]"];
}

- (OrgGeogebraCommonKernelGeosGeoLine *)TangentWithNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
           withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)f {
  return OrgGeogebraCommonKernelKernelCAS_TangentWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(cons_, label, P, f);
}

- (OrgGeogebraCommonKernelGeosGeoElementSpreadsheet *)getGeoElementSpreadsheet {
  return ges_;
}

- (OrgGeogebraCommonKernelMacroKernel *)newMacroKernel {
  return [new_OrgGeogebraCommonKernelMacroKernel_initWithOrgGeogebraCommonKernelKernel_(self) autorelease];
}

- (void)notifyChangeLayerWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)ge
                                                           withInt:(jint)layer
                                                           withInt:(jint)layer2 {
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) updateMaxLayerUsedWithInt:layer2];
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonKernelLayerView_class_() isInstance:view]) [((id<OrgGeogebraCommonKernelLayerView>) nil_chk(((id<OrgGeogebraCommonKernelLayerView>) check_protocol_cast(view, @protocol(OrgGeogebraCommonKernelLayerView))))) changeLayerWithOrgGeogebraCommonKernelGeosGeoElement:ge withInt:layer withInt:layer2];
    }
  }
}

- (jdouble)getXmaxForFunctions {
  return (((2 * [self getXmax]) - [self getXmin]) + [self getYmax]) - [self getYmin];
}

- (jdouble)getXminForFunctions {
  return (((2 * [self getXmin]) - [self getXmax]) + [self getYmin]) - [self getYmax];
}

- (void)clearCasCache {
  if (ggbCasCache_ != nil) {
    [ggbCasCache_ clear];
  }
  if (ggbCAS_ != nil) {
    [ggbCAS_ clearCache];
  }
}

- (void)refreshCASCommands {
  [self clearCasCache];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) recomputeCASalgos];
  JavaUtilTreeSet *treeset = [new_JavaUtilTreeSet_initWithJavaUtilSortedSet_([((OrgGeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) getGeoSetWithCasCellsConstructionOrder]) autorelease];
  JavaUtilArrayList *al = [new_JavaUtilArrayList_init() autorelease];
  id<JavaUtilIterator> it = [treeset iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:geo]) {
      OrgGeogebraCommonKernelArithmeticFunctionNVar *fun = [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction];
      if (fun != nil) {
        [fun clearCasEvalMapWithNSString:@""];
      }
    }
    else if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]]) {
      OrgGeogebraCommonKernelGeosGeoCurveCartesian *curve = (OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]);
      OrgGeogebraCommonKernelArithmeticFunctionNVar *fun1 = [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve)) getFunX];
      OrgGeogebraCommonKernelArithmeticFunctionNVar *fun2 = [curve getFunY];
      if (fun1 != nil) {
        [fun1 clearCasEvalMapWithNSString:@""];
      }
      if (fun2 != nil) {
        [fun2 clearCasEvalMapWithNSString:@""];
      }
    }
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
    if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoCasBase class]]) {
      [((OrgGeogebraCommonKernelAlgosAlgoCasBase *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoCasBase *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoCasBase class])))) clearCasEvalMapWithNSString:@""];
      [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) compute];
    }
    else if ([algo isKindOfClass:[OrgGeogebraCommonKernelCasAlgoUsingTempCASalgo class]]) {
      [((OrgGeogebraCommonKernelCasAlgoUsingTempCASalgo *) nil_chk(((OrgGeogebraCommonKernelCasAlgoUsingTempCASalgo *) check_class_cast(algo, [OrgGeogebraCommonKernelCasAlgoUsingTempCASalgo class])))) refreshCASResults];
      [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) compute];
    }
    else if ([OrgGeogebraCommonKernelCasUsesCAS_class_() isInstance:algo] || [OrgGeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:algo]) {
      [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) compute];
    }
    if ([geo isGeoCasCell] && algo == nil) {
      [((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class])) computeOutput];
    }
    [al addWithId:geo];
  }
  [cons_ setUpdateConstructionRunningWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(al, [new_JavaUtilTreeSet_init() autorelease], YES);
  [cons_ setUpdateConstructionRunningWithBoolean:NO];
}

- (IOSObjectArray *)PolygonNDWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PolygonWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:P];
}

- (IOSObjectArray *)PolyLineNDWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PolyLineWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:P withBoolean:NO];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoRayND>)RayNDWithNSString:(NSString *)transformedLabel
                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)geoPointND
                   withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)geoPointND2 {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) RayWithNSString:transformedLabel withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geoPointND, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geoPointND2, [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLineWithNSString:(NSString *)label
                             withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                              withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)l
                         withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) OrthogonalLineWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(l, [OrgGeogebraCommonKernelGeosGeoLine class])];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)SegmentNDWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                           withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) SegmentWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

- (OrgGeogebraCommonKernelAlgosAlgoDispatcher *)getAlgoDispatcher {
  if (algoDispatcher_ == nil) {
    OrgGeogebraCommonKernelKernel_set_algoDispatcher_(self, [self newAlgoDispatcherWithOrgGeogebraCommonKernelConstruction:cons_]);
  }
  return algoDispatcher_;
}

- (OrgGeogebraCommonKernelAlgosAlgoDispatcher *)newAlgoDispatcherWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  return [new_OrgGeogebraCommonKernelAlgosAlgoDispatcher_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoRayND>)RayWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p
                       withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)q {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) RayWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:p withOrgGeogebraCommonKernelGeosGeoPoint:q];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)SegmentWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p
                               withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)q {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) SegmentWithNSString:label withOrgGeogebraCommonKernelGeosGeoPoint:p withOrgGeogebraCommonKernelGeosGeoPoint:q];
}

- (IOSObjectArray *)PolygonWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)p {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PolygonWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:p];
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)p
                                  withBoolean:(jboolean)b {
  return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PolyLineWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:p withBoolean:b];
}

- (void)initAfterAsyncWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app1 {
  OrgGeogebraCommonKernelKernel_set_app_(self, app1);
  [self newConstruction];
  [self getExpressionNodeEvaluator];
  [self setManager3DWithOrgGeogebraCommonKernelManager3DInterface:[self newManager3DWithOrgGeogebraCommonKernelKernel:self]];
}

- (jboolean)hasAlgebraProcessor {
  return algProcessor_ != nil;
}

- (void)setAlgebraProcessorWithOrgGeogebraCommonKernelCommandsAlgebraProcessor:(OrgGeogebraCommonKernelCommandsAlgebraProcessor *)algebraProcessor {
  OrgGeogebraCommonKernelKernel_set_algProcessor_(self, algebraProcessor);
}

- (OrgGeogebraCommonKernelCommandsAlgebraProcessor *)getAlgPForAsync {
  return algProcessor_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoCoordSys2D>)getXOYPlane {
  return nil;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)getSpace {
  return nil;
}

- (void)setUpdateAgainWithBoolean:(jboolean)value
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  updateEVAgain_ = value;
  if (value) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addLaTeXGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (jboolean)getUpdateAgain {
  return updateEVAgain_ && [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isHTML5Applet];
}

- (void)setForceUpdatingBoundingBoxWithBoolean:(jboolean)value {
  forceUpdatingBoundingBox_ = value;
}

- (jboolean)getForceUpdatingBoundingBox {
  return forceUpdatingBoundingBox_ && [((OrgGeogebraCommonMainApp *) nil_chk(app_)) isHTML5Applet];
}

- (jboolean)useCASforDerivatives {
  return ![((OrgGeogebraCommonMainApp *) nil_chk(app_)) isScreenshotGenerator];
}

- (jboolean)useCASforIntegrals {
  return ![((OrgGeogebraCommonMainApp *) nil_chk(app_)) isScreenshotGenerator];
}

- (void)notifyBatchUpdate {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) startBatchUpdate];
    }
  }
}

- (void)notifyEndBatchUpdate {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) endBatchUpdate];
    }
  }
}

- (void)setViewsLabels {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonGuiSetLabels_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonGuiSetLabels>) nil_chk(((id<OrgGeogebraCommonGuiSetLabels>) check_protocol_cast(view, @protocol(OrgGeogebraCommonGuiSetLabels))))) setLabels];
      }
    }
  }
}

- (void)setViewsOrientation {
  if (notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(views_)) {
      if ([OrgGeogebraCommonGuiSetOrientation_class_() isInstance:view]) {
        [((id<OrgGeogebraCommonGuiSetOrientation>) nil_chk(((id<OrgGeogebraCommonGuiSetOrientation>) check_protocol_cast(view, @protocol(OrgGeogebraCommonGuiSetOrientation))))) setOrientation];
      }
    }
  }
}

- (jboolean)noNeedToSpecifyXOYPlane {
  return [self getXOYPlane] == nil || [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) getActiveEuclidianView])) isDefault2D];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy3DWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) copy__];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternal3DWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1
                                                       withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) copyInternalWithOrgGeogebraCommonKernelConstruction:cons1];
}

- (void)setStringModeWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) {
    return;
  }
  if ([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) isEuclidianView3D]) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) setCartesian3D];
  }
  else {
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) setCartesian];
  }
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) update];
}

- (jboolean)isParsingFor3D {
  if ([self getLoadingMode]) {
    return NO;
  }
  id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) getActiveEuclidianView];
  if ([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) isEuclidianView3D] || [ev isShowing]) {
    return [ev isEuclidianView3D];
  }
  return [((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) showViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)wrapInVectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pt {
  OrgGeogebraCommonKernelAlgosAlgoVectorPoint *algo = [new_OrgGeogebraCommonKernelAlgosAlgoVectorPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, pt) autorelease];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getVector], [OrgGeogebraCommonKernelGeosGeoElement class]);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoAxisND>)getXAxis3D {
  return nil;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoAxisND>)getYAxis3D {
  return nil;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoAxisND>)getZAxis3D {
  return nil;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getClippingCube {
  return nil;
}

- (void)dealloc {
  RELEASE_(macroManager_);
  RELEASE_(views_);
  RELEASE_(newPolygon_);
  RELEASE_(deleteList_);
  RELEASE_(userAwarenessListeners_);
  RELEASE_(cons_);
  RELEASE_(algProcessor_);
  RELEASE_(expressionNodeEvaluator_);
  RELEASE_(usePathAndRegionParameters__);
  RELEASE_(ggbCAS_);
  RELEASE_(nf_);
  RELEASE_(sf_);
  RELEASE_(sbBuildExplicitLineEquation_);
  RELEASE_(app_);
  RELEASE_(eqnSolver_);
  RELEASE_(sysEqSolv_);
  RELEASE_(extrFinder_);
  RELEASE_(parser_);
  RELEASE_(manager3D_);
  RELEASE_(concurrentModificationLock_);
  RELEASE_(animationManager_);
  RELEASE_(sbFormat_);
  RELEASE_(formatSB_);
  RELEASE_(sbBuildImplicitEquation_);
  RELEASE_(sbBuildLHS_);
  RELEASE_(sbBuildExplicitConicEquation_);
  RELEASE_(sbFormatSF_);
  RELEASE_(libraryJavaScript_);
  RELEASE_(sbFormatAngle_);
  RELEASE_(ggbCasCache_);
  RELEASE_(xmin_);
  RELEASE_(xmax_);
  RELEASE_(ymin_);
  RELEASE_(ymax_);
  RELEASE_(xscale_);
  RELEASE_(yscale_);
  RELEASE_(lastAttachedEV_);
  RELEASE_(renameListenerAlgos_);
  RELEASE_(selectedGeosNames_);
  RELEASE_(imaginaryUnit_);
  RELEASE_(ges_);
  RELEASE_(algoDispatcher_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelKernel class]) {
    OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_COLUMNS_VISIBLE_ = OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_COLUMNS_DESKTOP_;
    OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_ROWS_VISIBLE_ = OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_ROWS_DESKTOP_;
    OrgGeogebraCommonKernelKernel_SQRT_2_HALF_ = JavaLangMath_sqrtWithDouble_(2.0) / 2.0;
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelKernel)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "Kernel", NULL, 0x1, NULL, NULL },
    { "init", "Kernel", NULL, 0x4, NULL, NULL },
    { "getAlgebraProcessor", NULL, "Lorg.geogebra.common.kernel.commands.AlgebraProcessor;", 0x1, NULL, NULL },
    { "newAlgebraProcessorWithOrgGeogebraCommonKernelKernel:", "newAlgebraProcessor", "Lorg.geogebra.common.kernel.commands.AlgebraProcessor;", 0x1, NULL, NULL },
    { "newManager3DWithOrgGeogebraCommonKernelKernel:", "newManager3D", "Lorg.geogebra.common.kernel.Manager3DInterface;", 0x1, NULL, NULL },
    { "getConcurrentModificationLock", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setManager3DWithOrgGeogebraCommonKernelManager3DInterface:", "setManager3D", "V", 0x1, NULL, NULL },
    { "getDefaultPlane", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPlaneND;", 0x1, NULL, NULL },
    { "getManager3D", NULL, "Lorg.geogebra.common.kernel.Manager3DInterface;", 0x1, NULL, NULL },
    { "newConstruction", NULL, "V", 0x4, NULL, NULL },
    { "newMyXMLHandlerWithOrgGeogebraCommonKernelConstruction:", "newMyXMLHandler", "Lorg.geogebra.common.io.MyXMLHandler;", 0x1, NULL, NULL },
    { "newMyXMLHandlerWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelConstruction:", "newMyXMLHandler", "Lorg.geogebra.common.io.MyXMLHandler;", 0x1, NULL, NULL },
    { "getApplication", NULL, "Lorg.geogebra.common.main.App;", 0x11, NULL, NULL },
    { "getEquationSolver", NULL, "Lorg.geogebra.common.kernel.EquationSolver;", 0x11, NULL, NULL },
    { "getSystemOfEquationsSolverWithOrgGeogebraCommonKernelEquationSolverInterface:", "getSystemOfEquationsSolver", "Lorg.geogebra.common.kernel.SystemOfEquationsSolver;", 0x11, NULL, NULL },
    { "getExtremumFinder", NULL, "Lorg.geogebra.common.kernel.optimization.ExtremumFinder;", 0x11, NULL, NULL },
    { "getParser", NULL, "Lorg.geogebra.common.kernel.parser.Parser;", 0x11, NULL, NULL },
    { "newExpressionNodeEvaluatorWithOrgGeogebraCommonKernelKernel:", "newExpressionNodeEvaluator", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNodeEvaluator;", 0x1, NULL, NULL },
    { "getExpressionNodeEvaluator", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNodeEvaluator;", 0x1, NULL, NULL },
    { "DoubleComparatorWithDouble:", "DoubleComparator", "Ljava.util.Comparator;", 0x19, NULL, NULL },
    { "setShowAnimationButtonWithBoolean:", "setShowAnimationButton", "V", 0x1, NULL, NULL },
    { "isAnimationRunning", NULL, "Z", 0x11, NULL, NULL },
    { "isAnimationPaused", NULL, "Z", 0x11, NULL, NULL },
    { "needToShowAnimationButton", NULL, "Z", 0x11, NULL, NULL },
    { "udpateNeedToShowAnimationButton", NULL, "V", 0x11, NULL, NULL },
    { "handleCoordsWithOrgGeogebraCommonKernelGeosGeoElement:withJavaUtilLinkedHashMap:", "handleCoords", "Z", 0x1, NULL, NULL },
    { "getConstructionElementWithOrgGeogebraCommonKernelGeosGeoElement:", "getConstructionElement", "Lorg.geogebra.common.kernel.algos.ConstructionElement;", 0x9, NULL, NULL },
    { "getConstruction", NULL, "Lorg.geogebra.common.kernel.Construction;", 0x1, NULL, NULL },
    { "getConstructionElementWithInt:", "getConstructionElement", "Lorg.geogebra.common.kernel.algos.ConstructionElement;", 0x1, NULL, NULL },
    { "getFirstGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setConstructionStepWithInt:", "setConstructionStep", "V", 0x1, NULL, NULL },
    { "getConstructionStep", NULL, "I", 0x1, NULL, NULL },
    { "getLastConstructionStep", NULL, "I", 0x1, NULL, NULL },
    { "firstStep", NULL, "V", 0x1, NULL, NULL },
    { "lastStep", NULL, "V", 0x1, NULL, NULL },
    { "nextStep", NULL, "V", 0x1, NULL, NULL },
    { "getNextBreakpointWithInt:", "getNextBreakpoint", "I", 0x2, NULL, NULL },
    { "previousStep", NULL, "V", 0x1, NULL, NULL },
    { "getPreviousBreakpointWithInt:", "getPreviousBreakpoint", "I", 0x2, NULL, NULL },
    { "moveInConstructionListWithInt:withInt:", "moveInConstructionList", "Z", 0x1, NULL, NULL },
    { "setVisualStylesWithOrgGeogebraCommonKernelKernel:", "setVisualStyles", "V", 0x1, NULL, NULL },
    { "setConstructionDefaultsWithOrgGeogebraCommonKernelKernel:", "setConstructionDefaults", "V", 0x1, NULL, NULL },
    { "setSaveScriptsToXMLWithBoolean:", "setSaveScriptsToXML", "V", 0x1, NULL, NULL },
    { "getSaveScriptsToXML", NULL, "Z", 0x1, NULL, NULL },
    { "setElementDefaultAllowedWithBoolean:", "setElementDefaultAllowed", "V", 0x1, NULL, NULL },
    { "getElementDefaultAllowed", NULL, "Z", 0x1, NULL, NULL },
    { "isContinuous", NULL, "Z", 0x11, NULL, NULL },
    { "setContinuousWithBoolean:", "setContinuous", "V", 0x1, NULL, NULL },
    { "usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "usePathAndRegionParameters", "Z", 0x11, NULL, NULL },
    { "setUsePathAndRegionParametersWithOrgGeogebraCommonKernelPathRegionHandlingEnum:", "setUsePathAndRegionParameters", "V", 0x1, NULL, NULL },
    { "setLoadingModeWithBoolean:", "setLoadingMode", "V", 0x1, NULL, NULL },
    { "notifyOpeningFileWithNSString:", "notifyOpeningFile", "V", 0x1, NULL, NULL },
    { "notifyFileOpenCompleteWithBoolean:", "notifyFileOpenComplete", "V", 0x1, NULL, NULL },
    { "getLoadingMode", NULL, "Z", 0x1, NULL, NULL },
    { "signWithDouble:", "sign", "C", 0x1a, NULL, NULL },
    { "setNotifyConstructionProtocolViewAboutAddRemoveActiveWithBoolean:", "setNotifyConstructionProtocolViewAboutAddRemoveActive", "V", 0x1, NULL, NULL },
    { "isNotifyConstructionProtocolViewAboutAddRemoveActive", NULL, "Z", 0x1, NULL, NULL },
    { "buildImplicitEquationWithDoubleArray:withNSStringArray:withBoolean:withBoolean:withBoolean:withChar:withOrgGeogebraCommonKernelStringTemplate:", "buildImplicitEquation", "Ljava.lang.StringBuilder;", 0x11, NULL, NULL },
    { "formatSignedCoefficientWithDouble:withJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "formatSignedCoefficient", "V", 0x11, NULL, NULL },
    { "formatSignedWithDouble:withJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "formatSigned", "V", 0x11, NULL, NULL },
    { "formatSignedCoefficientPlusMinusWithDouble:withJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "formatSignedCoefficientPlusMinus", "V", 0x11, NULL, NULL },
    { "formatSignedPlusMinusWithDouble:withJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "formatSignedPlusMinus", "V", 0x11, NULL, NULL },
    { "formatPiERawWithDouble:withOrgGeogebraCommonUtilNumberFormatAdapter:withOrgGeogebraCommonKernelStringTemplate:", "formatPiERaw", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "formatRawWithDouble:withOrgGeogebraCommonKernelStringTemplate:", "formatRaw", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "formatNFWithDouble:withOrgGeogebraCommonKernelStringTemplate:", "formatNF", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "formatWithDouble:withOrgGeogebraCommonKernelStringTemplate:", "format", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "internationalizeDigitsWithNSString:withOrgGeogebraCommonKernelStringTemplate:", "internationalizeDigits", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatPiEWithDouble:withOrgGeogebraCommonUtilNumberFormatAdapter:withOrgGeogebraCommonKernelStringTemplate:", "formatPiE", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "copy__WithDoubleArray:withDoubleArray:", "copy", "V", 0x18, NULL, NULL },
    { "negativeWithDoubleArray:withDoubleArray:", "negative", "V", 0x18, NULL, NULL },
    { "divideWithDoubleArray:withDouble:withDoubleArray:", "divide", "V", 0x18, NULL, NULL },
    { "gcdWithLong:withLong:", "gcd", "J", 0x19, NULL, NULL },
    { "gcdWithDoubleArray:", "gcd", "D", 0x19, NULL, NULL },
    { "roundToScaleWithDouble:withDouble:", "roundToScale", "D", 0x19, NULL, NULL },
    { "isEqualWithDoubleArray:withDoubleArray:", "isEqual", "Z", 0x18, NULL, NULL },
    { "maxAbsWithDoubleArray:", "maxAbs", "D", 0x18, NULL, NULL },
    { "buildLHSWithDoubleArray:withNSStringArray:withBoolean:withBoolean:withBoolean:withOrgGeogebraCommonKernelStringTemplate:", "buildLHS", "Ljava.lang.StringBuilder;", 0x11, NULL, NULL },
    { "oppositeSignWithChar:", "oppositeSign", "C", 0x9, NULL, NULL },
    { "buildImplicitVarPartWithJavaLangStringBuilder:withDoubleArray:withNSStringArray:withBoolean:withBoolean:withBoolean:withOrgGeogebraCommonKernelStringTemplate:", "buildImplicitVarPart", "[D", 0x12, NULL, NULL },
    { "isZeroFigureWithDouble:withOrgGeogebraCommonKernelStringTemplate:", "isZeroFigure", "Z", 0x2, NULL, NULL },
    { "buildExplicitConicEquationWithDoubleArray:withNSStringArray:withInt:withBoolean:withOrgGeogebraCommonKernelStringTemplate:", "buildExplicitConicEquation", "Ljava.lang.StringBuilder;", 0x11, NULL, NULL },
    { "formatSFWithDouble:withOrgGeogebraCommonKernelStringTemplate:", "formatSF", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "appendTwoCoeffsWithBoolean:withDouble:withDouble:withNSString:withNSString:withOrgGeogebraCommonKernelStringTemplate:withJavaLangStringBuilder:", "appendTwoCoeffs", "V", 0x11, NULL, NULL },
    { "appendTwoCoeffsWithDouble:withDouble:withOrgGeogebraCommonKernelStringTemplate:withJavaLangStringBuilder:", "appendTwoCoeffs", "V", 0x11, NULL, NULL },
    { "formatCoeffWithDouble:withOrgGeogebraCommonKernelStringTemplate:", "formatCoeff", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "buildExplicitLineEquationWithDoubleArray:withNSStringArray:withChar:withOrgGeogebraCommonKernelStringTemplate:", "buildExplicitLineEquation", "Ljava.lang.StringBuilder;", 0x11, NULL, NULL },
    { "chopWithDouble:", "chop", "D", 0x19, NULL, NULL },
    { "isZeroWithDouble:", "isZero", "Z", 0x19, NULL, NULL },
    { "isZeroWithDouble:withDouble:", "isZero", "Z", 0x19, NULL, NULL },
    { "isZeroWithDoubleArray:", "isZero", "Z", 0x18, NULL, NULL },
    { "isIntegerWithDouble:", "isInteger", "Z", 0x19, NULL, NULL },
    { "isEqualWithDouble:withDouble:", "isEqual", "Z", 0x19, NULL, NULL },
    { "isEqualWithDouble:withDouble:withDouble:", "isEqual", "Z", 0x19, NULL, NULL },
    { "isGreaterWithDouble:withDouble:", "isGreater", "Z", 0x19, NULL, NULL },
    { "compareWithDouble:withDouble:", "compare", "I", 0x19, NULL, NULL },
    { "isGreaterWithDouble:withDouble:withDouble:", "isGreater", "Z", 0x19, NULL, NULL },
    { "isGreaterEqualWithDouble:withDouble:", "isGreaterEqual", "Z", 0x19, NULL, NULL },
    { "convertToAngleValueWithDouble:", "convertToAngleValue", "D", 0x19, NULL, NULL },
    { "checkDecimalFractionWithDouble:withDouble:", "checkDecimalFraction", "D", 0x19, NULL, NULL },
    { "checkDecimalFractionWithDouble:", "checkDecimalFraction", "D", 0x19, NULL, NULL },
    { "checkIntegerWithDouble:", "checkInteger", "D", 0x19, NULL, NULL },
    { "formatAngleWithDouble:withOrgGeogebraCommonKernelStringTemplate:withBoolean:", "formatAngle", "Ljava.lang.StringBuilder;", 0x11, NULL, NULL },
    { "formatAngleWithDouble:withDouble:withOrgGeogebraCommonKernelStringTemplate:withBoolean:", "formatAngle", "Ljava.lang.StringBuilder;", 0x11, NULL, NULL },
    { "resetLibraryJavaScript", NULL, "V", 0x1, NULL, NULL },
    { "setLibraryJavaScriptWithNSString:", "setLibraryJavaScript", "V", 0x1, NULL, NULL },
    { "getLibraryJavaScript", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPointSet", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "isSaving", NULL, "Z", 0x21, NULL, NULL },
    { "setSavingWithBoolean:", "setSaving", "V", 0x21, NULL, NULL },
    { "setInverseTrigReturnsAngleWithBoolean:", "setInverseTrigReturnsAngle", "V", 0x1, NULL, NULL },
    { "getInverseTrigReturnsAngle", NULL, "Z", 0x1, NULL, NULL },
    { "setAngleUnitWithInt:", "setAngleUnit", "V", 0x11, NULL, NULL },
    { "getAngleUnit", NULL, "I", 0x11, NULL, NULL },
    { "isZvarAllowed", NULL, "Z", 0x1, NULL, NULL },
    { "removeCASVariablePrefixWithNSString:", "removeCASVariablePrefix", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "removeCASVariablePrefixWithNSString:withNSString:", "removeCASVariablePrefix", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "setPrintFiguresWithInt:", "setPrintFigures", "V", 0x11, NULL, NULL },
    { "setPrintDecimalsWithInt:", "setPrintDecimals", "V", 0x11, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x11, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x11, NULL, NULL },
    { "isUsingInternalCommandNames", NULL, "Z", 0x1, NULL, NULL },
    { "setUseInternalCommandNamesWithBoolean:", "setUseInternalCommandNames", "V", 0x1, NULL, NULL },
    { "isAllowVisibilitySideEffects", NULL, "Z", 0x11, NULL, NULL },
    { "setAllowVisibilitySideEffectsWithBoolean:", "setAllowVisibilitySideEffects", "V", 0x11, NULL, NULL },
    { "isMacroKernel", NULL, "Z", 0x1, NULL, NULL },
    { "isSilentMode", NULL, "Z", 0x11, NULL, NULL },
    { "isGeoGebraCASready", NULL, "Z", 0x21, NULL, NULL },
    { "setSilentModeWithBoolean:", "setSilentMode", "V", 0x11, NULL, NULL },
    { "setResolveUnkownVarsAsDummyGeosWithBoolean:", "setResolveUnkownVarsAsDummyGeos", "V", 0x11, NULL, NULL },
    { "isResolveUnkownVarsAsDummyGeos", NULL, "Z", 0x11, NULL, NULL },
    { "evaluateGeoGebraCASWithNSString:withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:", "evaluateGeoGebraCAS", "Ljava.lang.String;", 0x1, "Ljava.lang.Throwable;", NULL },
    { "evaluateGeoGebraCASWithNSString:withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:withOrgGeogebraCommonKernelStringTemplate:", "evaluateGeoGebraCAS", "Ljava.lang.String;", 0x11, "Ljava.lang.Throwable;", NULL },
    { "evaluateCachedGeoGebraCASWithNSString:withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:", "evaluateCachedGeoGebraCAS", "Ljava.lang.String;", 0x11, "Ljava.lang.Throwable;", NULL },
    { "evaluateGeoGebraCASWithNSString:withBoolean:withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:withOrgGeogebraCommonKernelStringTemplate:", "evaluateGeoGebraCAS", "Ljava.lang.String;", 0x2, "Ljava.lang.Throwable;", NULL },
    { "evaluateRawGeoGebraCASWithNSString:", "evaluateRawGeoGebraCAS", "Ljava.lang.String;", 0x1, "Ljava.lang.Throwable;", NULL },
    { "evaluateGeoGebraCASAsyncWithOrgGeogebraCommonKernelAsynchronousCommand:", "evaluateGeoGebraCASAsync", "V", 0x1, NULL, NULL },
    { "putToCasCacheWithNSString:withNSString:", "putToCasCache", "V", 0x1, NULL, NULL },
    { "setAlgebraStyleWithInt:", "setAlgebraStyle", "V", 0x11, NULL, NULL },
    { "getAlgebraStyle", NULL, "I", 0x11, NULL, NULL },
    { "getCasCache", NULL, "Lorg.geogebra.common.util.MaxSizeHashMap;", 0x1, NULL, NULL },
    { "hasCasCache", NULL, "Z", 0x1, NULL, NULL },
    { "setEuclidianViewBoundsWithInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setEuclidianViewBounds", "V", 0x11, NULL, NULL },
    { "prolongWithDoubleArray:withInt:", "prolong", "[D", 0x4, NULL, NULL },
    { "getViewsXMinWithOrgGeogebraCommonKernelGeosGeoElement:", "getViewsXMin", "D", 0x1, NULL, NULL },
    { "getViewsXMaxWithOrgGeogebraCommonKernelGeosGeoElement:", "getViewsXMax", "D", 0x1, NULL, NULL },
    { "getViewsYMinWithOrgGeogebraCommonKernelGeosGeoElement:", "getViewsYMin", "D", 0x1, NULL, NULL },
    { "getViewsYMaxWithOrgGeogebraCommonKernelGeosGeoElement:", "getViewsYMax", "D", 0x1, NULL, NULL },
    { "getViewsXScaleWithOrgGeogebraCommonKernelGeosGeoElement:", "getViewsXScale", "D", 0x1, NULL, NULL },
    { "getViewsYScaleWithOrgGeogebraCommonKernelGeosGeoElement:", "getViewsYScale", "D", 0x1, NULL, NULL },
    { "notifyEuclidianViewCE", NULL, "V", 0x1, NULL, NULL },
    { "clearConstructionWithBoolean:", "clearConstruction", "V", 0x1, NULL, NULL },
    { "getXmax", NULL, "D", 0x1, NULL, NULL },
    { "getXmin", NULL, "D", 0x1, NULL, NULL },
    { "getXscale", NULL, "D", 0x1, NULL, NULL },
    { "getYmax", NULL, "D", 0x1, NULL, NULL },
    { "getYmin", NULL, "D", 0x1, NULL, NULL },
    { "getYscale", NULL, "D", 0x1, NULL, NULL },
    { "getXmaxWithBoolean:withBoolean:", "getXmax", "D", 0x1, NULL, NULL },
    { "getXmaxWithInt:", "getXmax", "D", 0x11, NULL, NULL },
    { "getXminWithInt:", "getXmin", "D", 0x11, NULL, NULL },
    { "getYmaxWithInt:", "getYmax", "D", 0x11, NULL, NULL },
    { "getYminWithInt:", "getYmin", "D", 0x11, NULL, NULL },
    { "getYscaleWithInt:", "getYscale", "D", 0x11, NULL, NULL },
    { "getXscaleWithInt:", "getXscale", "D", 0x11, NULL, NULL },
    { "getZmaxWithInt:", "getZmax", "D", 0x1, NULL, NULL },
    { "getZminWithInt:", "getZmin", "D", 0x1, NULL, NULL },
    { "getZscaleWithInt:", "getZscale", "D", 0x1, NULL, NULL },
    { "getXminWithBoolean:withBoolean:", "getXmin", "D", 0x1, NULL, NULL },
    { "getXscaleWithBoolean:withBoolean:", "getXscale", "D", 0x1, NULL, NULL },
    { "getYmaxWithBoolean:withBoolean:", "getYmax", "D", 0x1, NULL, NULL },
    { "getYminWithBoolean:withBoolean:", "getYmin", "D", 0x1, NULL, NULL },
    { "getYscaleWithBoolean:withBoolean:", "getYscale", "D", 0x1, NULL, NULL },
    { "getGeoGebraCAS", NULL, "Lorg.geogebra.common.kernel.GeoGebraCasInterface;", 0x21, NULL, NULL },
    { "getCoordStyle", NULL, "I", 0x11, NULL, NULL },
    { "setCoordStyleWithInt:", "setCoordStyle", "V", 0x1, NULL, NULL },
    { "lookupLabelWithNSString:", "lookupLabel", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "lookupCasCellLabelWithNSString:", "lookupCasCellLabel", "Lorg.geogebra.common.kernel.geos.GeoCasCell;", 0x11, NULL, NULL },
    { "lookupCasRowReferenceWithNSString:", "lookupCasRowReference", "Lorg.geogebra.common.kernel.geos.GeoCasCell;", 0x11, "Lorg.geogebra.common.kernel.CASException;", NULL },
    { "lookupLabelWithNSString:withBoolean:withBoolean:", "lookupLabel", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getClassTypeWithNSString:", "getClassType", "Lorg.geogebra.common.plugin.GeoClass;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "getModeTextWithInt:", "getModeText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPolynomialCoeffsWithNSString:withNSString:", "getPolynomialCoeffs", "[Ljava.lang.String;", 0x11, NULL, NULL },
    { "getGeoAtWithInt:withInt:", "getGeoAt", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getAnimatonManager", NULL, "Lorg.geogebra.common.kernel.AnimationManager;", 0x11, NULL, NULL },
    { "getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "getViewBoundsForGeo", "[D", 0x1, NULL, NULL },
    { "addViewsWithJavaLangInteger:withDoubleArray:", "addViews", "V", 0x2, NULL, NULL },
    { "getXAxis", NULL, "Lorg.geogebra.common.kernel.geos.GeoAxis;", 0x11, NULL, NULL },
    { "getYAxis", NULL, "Lorg.geogebra.common.kernel.geos.GeoAxis;", 0x11, NULL, NULL },
    { "isAxisWithOrgGeogebraCommonKernelGeosGeoElement:", "isAxis", "Z", 0x11, NULL, NULL },
    { "updateLocalAxesNames", NULL, "V", 0x1, NULL, NULL },
    { "setNotifyRepaintActiveWithBoolean:", "setNotifyRepaintActive", "V", 0x1, NULL, NULL },
    { "isNotifyRepaintActive", NULL, "Z", 0x11, NULL, NULL },
    { "notifyRepaint", NULL, "V", 0x11, NULL, NULL },
    { "notifyControllersMoveIfWaiting", NULL, "V", 0x11, NULL, NULL },
    { "notifySuggestRepaint", NULL, "Z", 0x11, NULL, NULL },
    { "notifyReset", NULL, "V", 0x11, NULL, NULL },
    { "notifyClearView", NULL, "V", 0x14, NULL, NULL },
    { "clearJustCreatedGeosInViews", NULL, "V", 0x1, NULL, NULL },
    { "setNotifyViewsActiveWithBoolean:", "setNotifyViewsActive", "V", 0x1, NULL, NULL },
    { "getLastAttachedEV", NULL, "Lorg.geogebra.common.euclidian.EuclidianView;", 0x11, NULL, NULL },
    { "attachWithOrgGeogebraCommonKernelView:", "attach", "V", 0x1, NULL, NULL },
    { "printAttachedViews", NULL, "V", 0x2, NULL, NULL },
    { "detachWithOrgGeogebraCommonKernelView:", "detach", "V", 0x1, NULL, NULL },
    { "notifyModeChangedWithInt:withOrgGeogebraCommonKernelModeSetterEnum:", "notifyModeChanged", "V", 0x11, NULL, NULL },
    { "notifyAddAllWithOrgGeogebraCommonKernelView:", "notifyAddAll", "V", 0x11, NULL, NULL },
    { "registerRenameListenerAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:", "registerRenameListenerAlgo", "V", 0x1, NULL, NULL },
    { "unregisterRenameListenerAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:", "unregisterRenameListenerAlgo", "V", 0x0, NULL, NULL },
    { "notifyRenameListenerAlgos", NULL, "V", 0x2, NULL, NULL },
    { "isSpreadsheetBatchRunning", NULL, "Z", 0x1, NULL, NULL },
    { "setSpreadsheetBatchRunningWithBoolean:", "setSpreadsheetBatchRunning", "V", 0x1, NULL, NULL },
    { "renameLabelInScriptsWithNSString:withNSString:", "renameLabelInScripts", "Z", 0x11, NULL, NULL },
    { "notifyAddAllWithOrgGeogebraCommonKernelView:withInt:", "notifyAddAll", "V", 0x11, NULL, NULL },
    { "notifyAddWithOrgGeogebraCommonKernelGeosGeoElement:", "notifyAdd", "V", 0x11, NULL, NULL },
    { "addingPolygon", NULL, "V", 0x11, NULL, NULL },
    { "notifyPolygonAdded", NULL, "V", 0x11, NULL, NULL },
    { "notifyRemoveGroup", NULL, "V", 0x11, NULL, NULL },
    { "notifyRemoveWithOrgGeogebraCommonKernelGeosGeoElement:", "notifyRemove", "V", 0x11, NULL, NULL },
    { "movingGeoSet", NULL, "V", 0x11, NULL, NULL },
    { "movedGeoSetWithJavaUtilArrayList:", "movedGeoSet", "V", 0x11, NULL, NULL },
    { "notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:", "notifyUpdate", "V", 0x11, NULL, NULL },
    { "notifyUpdateLocationWithOrgGeogebraCommonKernelGeosGeoElement:", "notifyUpdateLocation", "V", 0x11, NULL, NULL },
    { "notifyUpdateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "notifyUpdateVisualStyle", "V", 0x11, NULL, NULL },
    { "notifyUpdateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:", "notifyUpdateAuxiliaryObject", "V", 0x11, NULL, NULL },
    { "notifyRenameWithOrgGeogebraCommonKernelGeosGeoElement:", "notifyRename", "V", 0x11, NULL, NULL },
    { "notifyRenameUpdatesComplete", NULL, "V", 0x11, NULL, NULL },
    { "notifyPerspectiveChangedWithNSString:", "notifyPerspectiveChanged", "V", 0x1, NULL, NULL },
    { "notifyPaste", NULL, "V", 0x1, NULL, NULL },
    { "notifyPasteComplete", NULL, "V", 0x1, NULL, NULL },
    { "isNotifyViewsActive", NULL, "Z", 0x1, NULL, NULL },
    { "isViewReiniting", NULL, "Z", 0x1, NULL, NULL },
    { "addUserAwarenessListenerWithOrgGeogebraCommonKernelUserAwarenessListener:", "addUserAwarenessListener", "V", 0x1, NULL, NULL },
    { "removeUserAwarenessListenerWithOrgGeogebraCommonKernelUserAwarenessListener:", "removeUserAwarenessListener", "V", 0x1, NULL, NULL },
    { "updateConstruction", NULL, "V", 0x1, NULL, NULL },
    { "updateConstructionLanguage", NULL, "V", 0x1, NULL, NULL },
    { "updateConstructionWithInt:", "updateConstruction", "V", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "isGettingUndo", NULL, "Z", 0x21, NULL, NULL },
    { "setIsGettingUndoWithBoolean:", "setIsGettingUndo", "V", 0x21, NULL, NULL },
    { "setUndoActiveWithBoolean:", "setUndoActive", "V", 0x1, NULL, NULL },
    { "isUndoActive", NULL, "Z", 0x1, NULL, NULL },
    { "storeUndoInfo", NULL, "V", 0x1, NULL, NULL },
    { "restoreCurrentUndoInfo", NULL, "V", 0x1, NULL, NULL },
    { "initUndoInfo", NULL, "V", 0x1, NULL, NULL },
    { "storeSelectedGeosNames", NULL, "V", 0x1, NULL, NULL },
    { "recallSelectedGeosNames", NULL, "V", 0x1, NULL, NULL },
    { "redo", NULL, "V", 0x1, NULL, NULL },
    { "undo", NULL, "V", 0x1, NULL, NULL },
    { "undoPossible", NULL, "Z", 0x1, NULL, NULL },
    { "redoPossible", NULL, "Z", 0x1, NULL, NULL },
    { "isInsertLineBreaks", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLFileFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setInsertLineBreaksWithBoolean:", "setInsertLineBreaks", "V", 0x1, NULL, NULL },
    { "handleTrigPowerWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:withNSString:", "handleTrigPower", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, NULL, NULL },
    { "inverseTrigWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "inverseTrig", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "convertIndexToNumberWithNSString:", "convertIndexToNumber", "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "getImaginaryUnit", NULL, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", 0x1, NULL, NULL },
    { "useMacroWithNSStringArray:withOrgGeogebraCommonKernelMacro:withOrgGeogebraCommonKernelGeosGeoElementArray:", "useMacro", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getLocalization", NULL, "Lorg.geogebra.common.main.Localization;", 0x1, NULL, NULL },
    { "kernelHas3DObjects", NULL, "Z", 0x2, NULL, NULL },
    { "getKernelXMLWithJavaLangStringBuilder:withBoolean:", "getKernelXML", "V", 0x1, NULL, NULL },
    { "addMacroWithOrgGeogebraCommonKernelMacro:", "addMacro", "V", 0x1, NULL, NULL },
    { "removeMacroWithOrgGeogebraCommonKernelMacro:", "removeMacro", "V", 0x1, NULL, NULL },
    { "removeAllMacros", NULL, "V", 0x1, NULL, NULL },
    { "setMacroCommandNameWithOrgGeogebraCommonKernelMacro:withNSString:", "setMacroCommandName", "Z", 0x1, NULL, NULL },
    { "getMacroWithNSString:", "getMacro", "Lorg.geogebra.common.kernel.Macro;", 0x1, NULL, NULL },
    { "getMacroXMLWithJavaUtilArrayList:", "getMacroXML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hasMacros", NULL, "Z", 0x1, NULL, NULL },
    { "getMacroNumber", NULL, "I", 0x1, NULL, NULL },
    { "getAllMacros", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getMacroWithInt:", "getMacro", "Lorg.geogebra.common.kernel.Macro;", 0x1, NULL, NULL },
    { "getMacroIDWithOrgGeogebraCommonKernelMacro:", "getMacroID", "I", 0x1, NULL, NULL },
    { "createGeoElementWithOrgGeogebraCommonKernelConstruction:withNSString:", "createGeoElement", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWantAnimationStarted", NULL, "V", 0x1, NULL, NULL },
    { "wantAnimationStarted", NULL, "Z", 0x1, NULL, NULL },
    { "convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:", "convertNumberValueToExpressionNode", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "VectorPolygonWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "VectorPolygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "RigidPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:withDouble:withDouble:", "RigidPolygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "RigidPolygonPointOnCircleWithOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "RigidPolygonPointOnCircle", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "RigidPolygonWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "RigidPolygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:withBoolean:", "RigidPolygonAddEndOfCommand", "V", 0x4, NULL, NULL },
    { "TangentWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "Tangent", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "getGeoElementSpreadsheet", NULL, "Lorg.geogebra.common.kernel.geos.GeoElementSpreadsheet;", 0x1, NULL, NULL },
    { "newMacroKernel", NULL, "Lorg.geogebra.common.kernel.MacroKernel;", 0x1, NULL, NULL },
    { "notifyChangeLayerWithOrgGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "notifyChangeLayer", "V", 0x1, NULL, NULL },
    { "getXmaxForFunctions", NULL, "D", 0x1, NULL, NULL },
    { "getXminForFunctions", NULL, "D", 0x1, NULL, NULL },
    { "clearCasCache", NULL, "V", 0x1, NULL, NULL },
    { "refreshCASCommands", NULL, "V", 0x1, NULL, NULL },
    { "PolygonNDWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "PolygonND", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "PolyLineNDWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "PolyLineND", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "RayNDWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "RayND", "Lorg.geogebra.common.kernel.kernelND.GeoRayND;", 0x1, NULL, NULL },
    { "OrthogonalLineWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "OrthogonalLine", "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "SegmentNDWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "SegmentND", "Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "getAlgoDispatcher", NULL, "Lorg.geogebra.common.kernel.algos.AlgoDispatcher;", 0x1, NULL, NULL },
    { "newAlgoDispatcherWithOrgGeogebraCommonKernelConstruction:", "newAlgoDispatcher", "Lorg.geogebra.common.kernel.algos.AlgoDispatcher;", 0x4, NULL, NULL },
    { "RayWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Ray", "Lorg.geogebra.common.kernel.kernelND.GeoRayND;", 0x1, NULL, NULL },
    { "SegmentWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Segment", "Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "PolygonWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "Polygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "PolyLineWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:", "PolyLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "initAfterAsyncWithOrgGeogebraCommonMainApp:", "initAfterAsync", "V", 0x1, NULL, NULL },
    { "hasAlgebraProcessor", NULL, "Z", 0x1, NULL, NULL },
    { "setAlgebraProcessorWithOrgGeogebraCommonKernelCommandsAlgebraProcessor:", "setAlgebraProcessor", "V", 0x1, NULL, NULL },
    { "getAlgPForAsync", NULL, "Lorg.geogebra.common.kernel.commands.AlgebraProcessor;", 0x1, NULL, NULL },
    { "getXOYPlane", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoCoordSys2D;", 0x1, NULL, NULL },
    { "getSpace", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoDirectionND;", 0x1, NULL, NULL },
    { "setUpdateAgainWithBoolean:withOrgGeogebraCommonKernelGeosGeoElement:", "setUpdateAgain", "V", 0x1, NULL, NULL },
    { "getUpdateAgain", NULL, "Z", 0x1, NULL, NULL },
    { "setForceUpdatingBoundingBoxWithBoolean:", "setForceUpdatingBoundingBox", "V", 0x1, NULL, NULL },
    { "getForceUpdatingBoundingBox", NULL, "Z", 0x1, NULL, NULL },
    { "useCASforDerivatives", NULL, "Z", 0x1, NULL, NULL },
    { "useCASforIntegrals", NULL, "Z", 0x1, NULL, NULL },
    { "notifyBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "notifyEndBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "setViewsLabels", NULL, "V", 0x1, NULL, NULL },
    { "setViewsOrientation", NULL, "V", 0x1, NULL, NULL },
    { "noNeedToSpecifyXOYPlane", NULL, "Z", 0x11, NULL, NULL },
    { "copy3DWithOrgGeogebraCommonKernelGeosGeoElement:", "copy3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyInternal3DWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:", "copyInternal3D", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setStringModeWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setStringMode", "V", 0x1, NULL, NULL },
    { "isParsingFor3D", NULL, "Z", 0x1, NULL, NULL },
    { "wrapInVectorWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "wrapInVector", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getXAxis3D", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoAxisND;", 0x1, NULL, NULL },
    { "getYAxis3D", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoAxisND;", 0x1, NULL, NULL },
    { "getZAxis3D", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoAxisND;", 0x1, NULL, NULL },
    { "getClippingCube", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_SPREADSHEET_COLUMNS_DESKTOP_", NULL, 0x9, "I", &OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_COLUMNS_DESKTOP_, NULL,  },
    { "MAX_SPREADSHEET_ROWS_DESKTOP_", NULL, 0x9, "I", &OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_ROWS_DESKTOP_, NULL,  },
    { "MAX_SPREADSHEET_COLUMNS_VISIBLE_", NULL, 0x9, "I", &OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_COLUMNS_VISIBLE_, NULL,  },
    { "MAX_SPREADSHEET_ROWS_VISIBLE_", NULL, 0x9, "I", &OrgGeogebraCommonKernelKernel_MAX_SPREADSHEET_ROWS_VISIBLE_, NULL,  },
    { "STRING_PLUS_MINUS_", NULL, 0x9, "Ljava.lang.String;", &OrgGeogebraCommonKernelKernel_STRING_PLUS_MINUS_, NULL,  },
    { "STRING_MINUS_PLUS_", NULL, 0x9, "Ljava.lang.String;", &OrgGeogebraCommonKernelKernel_STRING_MINUS_PLUS_, NULL,  },
    { "ALGEBRA_STYLE_VALUE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_ALGEBRA_STYLE_VALUE },
    { "ALGEBRA_STYLE_DEFINITION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_ALGEBRA_STYLE_DEFINITION },
    { "ALGEBRA_STYLE_COMMAND_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_ALGEBRA_STYLE_COMMAND },
    { "algebraStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "macroManager_", NULL, 0x2, "Lorg.geogebra.common.kernel.MacroManager;", NULL, NULL,  },
    { "insertLineBreaks_", NULL, 0x4, "Z", NULL, NULL,  },
    { "angleUnit_", NULL, 0x2, "I", NULL, NULL,  },
    { "viewReiniting_", NULL, 0x2, "Z", NULL, NULL,  },
    { "undoActive_", NULL, 0x2, "Z", NULL, NULL,  },
    { "views_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/View;>;",  },
    { "addingPolygon__", "addingPolygon", 0x4, "Z", NULL, NULL,  },
    { "newPolygon_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "deleteList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "userAwarenessListeners_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/UserAwarenessListener;>;",  },
    { "cons_", NULL, 0x4, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "algProcessor_", NULL, 0x4, "Lorg.geogebra.common.kernel.commands.AlgebraProcessor;", NULL, NULL,  },
    { "expressionNodeEvaluator_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNodeEvaluator;", NULL, NULL,  },
    { "TMP_VARIABLE_PREFIX_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonKernelKernel_TMP_VARIABLE_PREFIX_, NULL,  },
    { "continuous_", NULL, 0x2, "Z", NULL, NULL,  },
    { "usePathAndRegionParameters__", "usePathAndRegionParameters", 0x1, "Lorg.geogebra.common.kernel.PathRegionHandling;", NULL, NULL,  },
    { "ggbCAS_", NULL, 0x2, "Lorg.geogebra.common.kernel.GeoGebraCasInterface;", NULL, NULL,  },
    { "ANGLE_RADIANT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_ANGLE_RADIANT },
    { "ANGLE_DEGREE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_ANGLE_DEGREE },
    { "COORD_CARTESIAN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_COORD_CARTESIAN },
    { "COORD_POLAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_COORD_POLAR },
    { "COORD_COMPLEX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_COORD_COMPLEX },
    { "COORD_CARTESIAN_3D_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_COORD_CARTESIAN_3D },
    { "COORD_SPHERICAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_COORD_SPHERICAL },
    { "PI_2_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_PI_2 },
    { "PI_HALF_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_PI_HALF },
    { "SQRT_2_HALF_", NULL, 0x19, "D", &OrgGeogebraCommonKernelKernel_SQRT_2_HALF_, NULL,  },
    { "PI_180_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_PI_180 },
    { "CONST_180_PI_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_CONST_180_PI },
    { "MAX_DOUBLE_PRECISION_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_MAX_DOUBLE_PRECISION },
    { "INV_MAX_DOUBLE_PRECISION_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_INV_MAX_DOUBLE_PRECISION },
    { "GEOGEBRA_CAS_CACHE_SIZE_", NULL, 0x9, "I", &OrgGeogebraCommonKernelKernel_GEOGEBRA_CAS_CACHE_SIZE_, NULL,  },
    { "STANDARD_PRINT_DECIMALS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_STANDARD_PRINT_DECIMALS },
    { "nf_", NULL, 0x2, "Lorg.geogebra.common.util.NumberFormatAdapter;", NULL, NULL,  },
    { "sf_", NULL, 0x12, "Lorg.geogebra.common.util.ScientificFormatAdapter;", NULL, NULL,  },
    { "useSignificantFigures_", NULL, 0x1, "Z", NULL, NULL,  },
    { "COORD_STYLE_DEFAULT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_COORD_STYLE_DEFAULT },
    { "COORD_STYLE_AUSTRIAN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN },
    { "COORD_STYLE_FRENCH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelKernel_COORD_STYLE_FRENCH },
    { "coordStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "STANDARD_PRECISION_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_STANDARD_PRECISION },
    { "STANDARD_PRECISION_SQRT_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_STANDARD_PRECISION_SQRT },
    { "STANDARD_PRECISION_SQUARE_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_STANDARD_PRECISION_SQUARE },
    { "MIN_PRECISION_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_MIN_PRECISION },
    { "INV_MIN_PRECISION_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_INV_MIN_PRECISION },
    { "MAX_PRECISION_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_MAX_PRECISION },
    { "AXES_PRECISION_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelKernel_AXES_PRECISION },
    { "useInternalCommandNames_", NULL, 0x2, "Z", NULL, NULL,  },
    { "notifyConstructionProtocolViewAboutAddRemoveActive_", NULL, 0x2, "Z", NULL, NULL,  },
    { "allowVisibilitySideEffects_", NULL, 0x2, "Z", NULL, NULL,  },
    { "saveScriptsToXML_", NULL, 0x2, "Z", NULL, NULL,  },
    { "elementDefaultAllowed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "silentMode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "wantAnimationStarted__", "wantAnimationStarted", 0x2, "Z", NULL, NULL,  },
    { "resolveUnkownVarsAsDummyGeos_", NULL, 0x2, "Z", NULL, NULL,  },
    { "updateEVAgain_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceUpdatingBoundingBox_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sbBuildExplicitLineEquation_", NULL, 0x12, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "app_", NULL, 0x4, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "eqnSolver_", NULL, 0x2, "Lorg.geogebra.common.kernel.EquationSolver;", NULL, NULL,  },
    { "sysEqSolv_", NULL, 0x2, "Lorg.geogebra.common.kernel.SystemOfEquationsSolver;", NULL, NULL,  },
    { "extrFinder_", NULL, 0x2, "Lorg.geogebra.common.kernel.optimization.ExtremumFinder;", NULL, NULL,  },
    { "parser_", NULL, 0x4, "Lorg.geogebra.common.kernel.parser.Parser;", NULL, NULL,  },
    { "manager3D_", NULL, 0x2, "Lorg.geogebra.common.kernel.Manager3DInterface;", NULL, NULL,  },
    { "concurrentModificationLock_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
    { "animationManager_", NULL, 0x4, "Lorg.geogebra.common.kernel.AnimationManager;", NULL, NULL,  },
    { "showAnimationButton_", NULL, 0x2, "Z", NULL, NULL,  },
    { "loadingMode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sbFormat_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "formatSB_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildImplicitEquation_", NULL, 0x12, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildLHS_", NULL, 0x12, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildExplicitConicEquation_", NULL, 0x12, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbFormatSF_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "defaultLibraryJavaScript_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonKernelKernel_defaultLibraryJavaScript_, NULL,  },
    { "libraryJavaScript_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "isSaving__", "isSaving", 0x2, "Z", NULL, NULL,  },
    { "sbFormatAngle_", NULL, 0x12, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "arcusFunctionCreatesAngle_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ggbCasCache_", NULL, 0x2, "Lorg.geogebra.common.util.MaxSizeHashMap;", NULL, "Lorg/geogebra/common/util/MaxSizeHashMap<Ljava/lang/String;Ljava/lang/String;>;",  },
    { "xmin_", NULL, 0x4, "[D", NULL, NULL,  },
    { "xmax_", NULL, 0x4, "[D", NULL, NULL,  },
    { "ymin_", NULL, 0x4, "[D", NULL, NULL,  },
    { "ymax_", NULL, 0x4, "[D", NULL, NULL,  },
    { "xscale_", NULL, 0x4, "[D", NULL, NULL,  },
    { "yscale_", NULL, 0x4, "[D", NULL, NULL,  },
    { "graphicsView2showing_", NULL, 0x2, "Z", NULL, NULL,  },
    { "notifyRepaint__", "notifyRepaint", 0x2, "Z", NULL, NULL,  },
    { "lastAttachedEV_", NULL, 0x2, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "notifyViewsActive_", NULL, 0x2, "Z", NULL, NULL,  },
    { "renameListenerAlgos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/algos/AlgoElement;>;",  },
    { "spreadsheetBatchRunning_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isGettingUndo__", "isGettingUndo", 0x2, "Z", NULL, NULL,  },
    { "selectedGeosNames_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "imaginaryUnit_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "ges_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElementSpreadsheet;", NULL, NULL,  },
    { "algoDispatcher_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoDispatcher;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelKernel = { 2, "Kernel", "org.geogebra.common.kernel", NULL, 0x1, 325, methods, 107, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelKernel;
}

@end

void OrgGeogebraCommonKernelKernel_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonKernelKernel *self, OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonKernelKernel_init(self);
  OrgGeogebraCommonKernelKernel_set_app_(self, app);
  [self newConstruction];
  [self getExpressionNodeEvaluator];
  [self setManager3DWithOrgGeogebraCommonKernelManager3DInterface:[self newManager3DWithOrgGeogebraCommonKernelKernel:self]];
}

OrgGeogebraCommonKernelKernel *new_OrgGeogebraCommonKernelKernel_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonKernelKernel *self = [OrgGeogebraCommonKernelKernel alloc];
  OrgGeogebraCommonKernelKernel_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

void OrgGeogebraCommonKernelKernel_init(OrgGeogebraCommonKernelKernel *self) {
  NSObject_init(self);
  self->algebraStyle_ = OrgGeogebraCommonKernelKernel_ALGEBRA_STYLE_VALUE;
  self->insertLineBreaks_ = NO;
  self->angleUnit_ = OrgGeogebraCommonKernelKernel_ANGLE_DEGREE;
  self->viewReiniting_ = NO;
  self->undoActive_ = NO;
  OrgGeogebraCommonKernelKernel_setAndConsume_views_(self, new_JavaUtilArrayList_init());
  self->addingPolygon__ = NO;
  self->continuous_ = NO;
  OrgGeogebraCommonKernelKernel_set_usePathAndRegionParameters__(self, OrgGeogebraCommonKernelPathRegionHandlingEnum_get_ON());
  self->useSignificantFigures_ = NO;
  self->coordStyle_ = 0;
  self->useInternalCommandNames_ = NO;
  self->notifyConstructionProtocolViewAboutAddRemoveActive_ = YES;
  self->allowVisibilitySideEffects_ = YES;
  self->saveScriptsToXML_ = YES;
  self->elementDefaultAllowed_ = NO;
  self->silentMode_ = NO;
  self->wantAnimationStarted__ = NO;
  self->resolveUnkownVarsAsDummyGeos_ = NO;
  self->updateEVAgain_ = NO;
  self->forceUpdatingBoundingBox_ = NO;
  OrgGeogebraCommonKernelKernel_setAndConsume_sbBuildExplicitLineEquation_(self, new_JavaLangStringBuilder_initWithInt_(50));
  OrgGeogebraCommonKernelKernel_setAndConsume_concurrentModificationLock_(self, new_NSObject_init());
  self->showAnimationButton_ = YES;
  OrgGeogebraCommonKernelKernel_setAndConsume_sbBuildImplicitEquation_(self, new_JavaLangStringBuilder_initWithInt_(80));
  OrgGeogebraCommonKernelKernel_setAndConsume_sbBuildLHS_(self, new_JavaLangStringBuilder_initWithInt_(80));
  OrgGeogebraCommonKernelKernel_setAndConsume_sbBuildExplicitConicEquation_(self, new_JavaLangStringBuilder_initWithInt_(80));
  OrgGeogebraCommonKernelKernel_set_libraryJavaScript_(self, OrgGeogebraCommonKernelKernel_defaultLibraryJavaScript_);
  OrgGeogebraCommonKernelKernel_setAndConsume_sbFormatAngle_(self, new_JavaLangStringBuilder_initWithInt_(40));
  OrgGeogebraCommonKernelKernel_setAndConsume_xmin_(self, [IOSDoubleArray newArrayWithLength:1]);
  OrgGeogebraCommonKernelKernel_setAndConsume_xmax_(self, [IOSDoubleArray newArrayWithLength:1]);
  OrgGeogebraCommonKernelKernel_setAndConsume_ymin_(self, [IOSDoubleArray newArrayWithLength:1]);
  OrgGeogebraCommonKernelKernel_setAndConsume_ymax_(self, [IOSDoubleArray newArrayWithLength:1]);
  OrgGeogebraCommonKernelKernel_setAndConsume_xscale_(self, [IOSDoubleArray newArrayWithLength:1]);
  OrgGeogebraCommonKernelKernel_setAndConsume_yscale_(self, [IOSDoubleArray newArrayWithLength:1]);
  self->graphicsView2showing_ = NO;
  self->notifyRepaint__ = YES;
  OrgGeogebraCommonKernelKernel_set_lastAttachedEV_(self, nil);
  self->notifyViewsActive_ = YES;
  OrgGeogebraCommonKernelKernel_setAndConsume_selectedGeosNames_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonKernelKernel_setAndConsume_ges_(self, new_OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_init());
  OrgGeogebraCommonKernelKernel_set_nf_(self, [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithInt:2]);
  OrgGeogebraCommonKernelKernel_set_sf_(self, [OrgGeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:5 withInt:16 withBoolean:NO]);
  OrgGeogebraCommonKernelKernel_setAndConsume_userAwarenessListeners_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonKernelKernel_setAndConsume_deleteList_(self, new_JavaUtilArrayList_init());
}

OrgGeogebraCommonKernelKernel *new_OrgGeogebraCommonKernelKernel_init() {
  OrgGeogebraCommonKernelKernel *self = [OrgGeogebraCommonKernelKernel alloc];
  OrgGeogebraCommonKernelKernel_init(self);
  return self;
}

OrgGeogebraCommonMainApp *OrgGeogebraCommonKernelKernel_getApplication(OrgGeogebraCommonKernelKernel *self) {
  return self->app_;
}

id<JavaUtilComparator> OrgGeogebraCommonKernelKernel_DoubleComparatorWithDouble_(jdouble precision) {
  OrgGeogebraCommonKernelKernel_initialize();
  jdouble eps = precision;
  id<JavaUtilComparator> ret = [new_OrgGeogebraCommonKernelKernel_$1_initWithDouble_(eps) autorelease];
  return ret;
}

jboolean OrgGeogebraCommonKernelKernel_isAnimationRunning(OrgGeogebraCommonKernelKernel *self) {
  return self->animationManager_ != nil && [self->animationManager_ isRunning];
}

OrgGeogebraCommonKernelAlgosConstructionElement *OrgGeogebraCommonKernelKernel_getConstructionElementWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonKernelKernel_initialize();
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  if (algo == nil) {
    return geo;
  }
  return algo;
}

jint OrgGeogebraCommonKernelKernel_getNextBreakpointWithInt_(OrgGeogebraCommonKernelKernel *self, jint initStep) {
  jint step = initStep;
  jint lastStep = [self getLastConstructionStep];
  while (step <= lastStep) {
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getConstructionElementWithInt:step])) isConsProtocolBreakpoint]) {
      return step;
    }
    step++;
  }
  return lastStep;
}

jint OrgGeogebraCommonKernelKernel_getPreviousBreakpointWithInt_(OrgGeogebraCommonKernelKernel *self, jint initStep) {
  jint step = initStep;
  while (step >= 0) {
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getConstructionElementWithInt:step])) isConsProtocolBreakpoint]) {
      return step;
    }
    step--;
  }
  return -1;
}

jboolean OrgGeogebraCommonKernelKernel_isContinuous(OrgGeogebraCommonKernelKernel *self) {
  return self->continuous_;
}

jchar OrgGeogebraCommonKernelKernel_signWithDouble_(jdouble x) {
  OrgGeogebraCommonKernelKernel_initialize();
  if (x > 0) {
    return '+';
  }
  return '-';
}

JavaLangStringBuilder *OrgGeogebraCommonKernelKernel_buildImplicitEquationWithDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withChar_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, IOSDoubleArray *numbers, IOSObjectArray *vars, jboolean KEEP_LEADING_SIGN, jboolean CANCEL_DOWN, jboolean needsZ, jchar op, OrgGeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbBuildImplicitEquation_)) setLengthWithInt:0];
  IOSDoubleArray *temp = OrgGeogebraCommonKernelKernel_buildImplicitVarPartWithJavaLangStringBuilder_withDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, self->sbBuildImplicitEquation_, numbers, vars, KEEP_LEADING_SIGN || (op == '='), CANCEL_DOWN, needsZ, tpl);
  [self->sbBuildImplicitEquation_ appendWithChar:' '];
  [self->sbBuildImplicitEquation_ appendWithChar:op];
  [self->sbBuildImplicitEquation_ appendWithChar:' '];
  [self->sbBuildImplicitEquation_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, -IOSDoubleArray_Get(nil_chk(temp), ((IOSObjectArray *) nil_chk(vars))->size_), tpl)];
  return self->sbBuildImplicitEquation_;
}

void OrgGeogebraCommonKernelKernel_formatSignedCoefficientWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (x == -1.0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"- "];
    return;
  }
  if (x == 1.0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"+ "];
    return;
  }
  OrgGeogebraCommonKernelKernel_formatSignedWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, x, sb, tpl);
}

void OrgGeogebraCommonKernelKernel_formatSignedWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (x >= 0.0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"+ "];
    [sb appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl)];
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"- "];
  [sb appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, -x, tpl)];
  return;
}

void OrgGeogebraCommonKernelKernel_formatSignedCoefficientPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (x == -1.0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonKernelKernel_STRING_MINUS_PLUS_];
    return;
  }
  if (x == 1.0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonKernelKernel_STRING_PLUS_MINUS_];
    return;
  }
  OrgGeogebraCommonKernelKernel_formatSignedPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(self, x, sb, tpl);
}

void OrgGeogebraCommonKernelKernel_formatSignedPlusMinusWithDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (x >= 0.0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonKernelKernel_STRING_PLUS_MINUS_];
    [sb appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl)];
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonKernelKernel_STRING_MINUS_PLUS_];
  [sb appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, -x, tpl)];
  return;
}

NSString *OrgGeogebraCommonKernelKernel_formatPiERawWithDouble_withOrgGeogebraCommonUtilNumberFormatAdapter_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, id<OrgGeogebraCommonUtilNumberFormatAdapter> numF, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (x == JavaLangMath_PI) {
    return [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPi];
  }
  jdouble a = (2 * x) / JavaLangMath_PI;
  jint aint = (jint) JavaLangMath_roundWithDouble_(a);
  if (self->sbFormat_ == nil) {
    OrgGeogebraCommonKernelKernel_setAndConsume_sbFormat_(self, new_JavaLangStringBuilder_init());
  }
  [((JavaLangStringBuilder *) nil_chk(self->sbFormat_)) setLengthWithInt:0];
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(a, aint, OrgGeogebraCommonKernelKernel_AXES_PRECISION)) {
    {
      jlong half;
      switch (aint) {
        case 0:
        return @"0";
        case 1:
        [self->sbFormat_ appendWithNSString:[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPi]];
        [self->sbFormat_ appendWithNSString:@"/2"];
        return [self->sbFormat_ description];
        case -1:
        [self->sbFormat_ appendWithChar:'-'];
        [self->sbFormat_ appendWithNSString:[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPi]];
        [self->sbFormat_ appendWithNSString:@"/2"];
        return [self->sbFormat_ description];
        case 2:
        return [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPi];
        case -2:
        [self->sbFormat_ appendWithChar:'-'];
        [self->sbFormat_ appendWithNSString:[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPi]];
        return [self->sbFormat_ description];
        default:
        half = aint / 2;
        if (aint == (2 * half)) {
          [self->sbFormat_ appendWithLong:half];
          if (![((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()]) {
            [self->sbFormat_ appendWithNSString:@"*"];
          }
          [self->sbFormat_ appendWithNSString:[tpl getPi]];
          return [self->sbFormat_ description];
        }
        [self->sbFormat_ appendWithInt:aint];
        if (![((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()]) {
          [self->sbFormat_ appendWithNSString:@"*"];
        }
        [self->sbFormat_ appendWithNSString:[tpl getPi]];
        [self->sbFormat_ appendWithNSString:@"/2"];
        return [self->sbFormat_ description];
      }
    }
  }
  NSString *str = [((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk(numF)) formatWithDouble:OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(x)];
  [self->sbFormat_ appendWithNSString:str];
  if ([((NSString *) nil_chk(str)) hasSuffix:@"E0"]) {
    [self->sbFormat_ setLengthWithInt:[self->sbFormat_ length] - 2];
  }
  return [self->sbFormat_ description];
}

NSString *OrgGeogebraCommonKernelKernel_formatRawWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble number, OrgGeogebraCommonKernelStringTemplate *tpl) {
  jdouble x = number;
  jboolean isLongInteger = NO;
  jlong rounded = JavaLangMath_roundWithDouble_(x);
  if ((x == rounded) && (x >= JavaLangLong_MIN_VALUE) && (x < JavaLangLong_MAX_VALUE)) {
    isLongInteger = YES;
  }
  OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *casPrintForm = [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType];
  {
    jboolean useSF;
    switch ([casPrintForm ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
      return OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithDouble_(x);
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
      if (isLongInteger) {
        return JavaLangLong_toStringWithLong_(rounded);
      }
      return OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithDouble_(x);
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      if (JavaLangDouble_isNaNWithDouble_(x)) {
        return @"?";
      }
      else if (JavaLangDouble_isInfiniteWithDouble_(x)) {
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(casPrintForm)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
          return (x < 0) ? @"-inf" : @"inf";
        }
        return JavaLangDouble_toStringWithDouble_(x);
      }
      else if (isLongInteger) {
        return JavaLangLong_toStringWithLong_(rounded);
      }
      else if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_withDouble_(x, OrgGeogebraCommonKernelKernel_MAX_PRECISION)) {
        return @"0";
      }
      else {
        jdouble abs = JavaLangMath_absWithDouble_(x);
        if ((abs >= 10E-3) && (abs < 10E7)) {
          NSString *ret = OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithDouble_(x);
          if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(casPrintForm)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()] && [((NSString *) nil_chk(ret)) indexOf:'.'] > -1) {
            return OrgGeogebraCommonUtilStringUtil_wrapInExactWithNSString_(ret);
          }
          return ret;
        }
        NSString *scientificStr = OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithDouble_(x);
        return [tpl convertScientificNotationWithNSString:scientificStr];
      }
      default:
      if (JavaLangDouble_isNaNWithDouble_(x)) {
        return @"?";
      }
      else if (JavaLangDouble_isInfiniteWithDouble_(x)) {
        return (x > 0) ? @"\u221e" : @"-\u221e";
      }
      else if (x == JavaLangMath_PI) {
        return [tpl getPi];
      }
      useSF = [tpl useScientificWithBoolean:self->useSignificantFigures_];
      if (!isLongInteger) {
        jdouble abs = JavaLangMath_absWithDouble_(x);
        x = x * [tpl getRoundHalfUpFactorWithDouble:abs withOrgGeogebraCommonUtilNumberFormatAdapter:self->nf_ withOrgGeogebraCommonUtilScientificFormatAdapter:self->sf_ withBoolean:useSF];
      }
      if (useSF) {
        return OrgGeogebraCommonKernelKernel_formatSFWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
      }
      return OrgGeogebraCommonKernelKernel_formatNFWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
    }
  }
}

NSString *OrgGeogebraCommonKernelKernel_formatNFWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl) {
  jdouble printPrecision = [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:self->nf_];
  if (((-printPrecision / 2) <= x) && (x < (printPrecision / 2))) {
    return @"0";
  }
  id<OrgGeogebraCommonUtilNumberFormatAdapter> nfa = [tpl getNFWithOrgGeogebraCommonUtilNumberFormatAdapter:self->nf_];
  return [((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk(nfa)) formatWithDouble:x];
}

NSString *OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl) {
  NSString *ret = OrgGeogebraCommonKernelKernel_formatRawWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
  if (((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization]))->unicodeZero_ != '0') {
    ret = [self internationalizeDigitsWithNSString:ret withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return ret;
}

void OrgGeogebraCommonKernelKernel_copy__WithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  OrgGeogebraCommonKernelKernel_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(b), i) = IOSDoubleArray_Get(a, i);
  }
}

void OrgGeogebraCommonKernelKernel_negativeWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  OrgGeogebraCommonKernelKernel_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(b), i) = -IOSDoubleArray_Get(a, i);
  }
}

void OrgGeogebraCommonKernelKernel_divideWithDoubleArray_withDouble_withDoubleArray_(IOSDoubleArray *a, jdouble b, IOSDoubleArray *c) {
  OrgGeogebraCommonKernelKernel_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(c), i) = IOSDoubleArray_Get(a, i) / b;
  }
}

jlong OrgGeogebraCommonKernelKernel_gcdWithLong_withLong_(jlong m, jlong n) {
  OrgGeogebraCommonKernelKernel_initialize();
  if ((m == 0) || (n == 0)) {
    return JavaLangMath_maxWithLong_withLong_(JavaLangMath_absWithLong_(m), JavaLangMath_absWithLong_(n));
  }
  jlong p = m, q = n;
  while ((p % q) != 0) {
    jlong r = p % q;
    p = q;
    q = r;
  }
  return q;
}

jdouble OrgGeogebraCommonKernelKernel_gcdWithDoubleArray_(IOSDoubleArray *numbers) {
  OrgGeogebraCommonKernelKernel_initialize();
  jlong gcd = J2ObjCFpToLong(IOSDoubleArray_Get(nil_chk(numbers), 0));
  for (jint i = 0; i < numbers->size_; i++) {
    gcd = OrgGeogebraCommonKernelKernel_gcdWithLong_withLong_(J2ObjCFpToLong(IOSDoubleArray_Get(numbers, i)), gcd);
  }
  return JavaLangMath_absWithLong_(gcd);
}

jdouble OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(jdouble x, jdouble scale_) {
  OrgGeogebraCommonKernelKernel_initialize();
  if (scale_ == 1.0) {
    return JavaLangMath_roundWithDouble_(x);
  }
  return JavaLangMath_roundWithDouble_(x / scale_) * scale_;
}

jboolean OrgGeogebraCommonKernelKernel_isEqualWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  OrgGeogebraCommonKernelKernel_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; ++i) {
    if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(a, i), IOSDoubleArray_Get(nil_chk(b), i))) {
      return NO;
    }
  }
  return YES;
}

jdouble OrgGeogebraCommonKernelKernel_maxAbsWithDoubleArray_(IOSDoubleArray *a) {
  OrgGeogebraCommonKernelKernel_initialize();
  jdouble temp, max = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(a), 0));
  for (jint i = 1; i < a->size_; i++) {
    temp = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(a, i));
    if (temp > max) {
      max = temp;
    }
  }
  return max;
}

jchar OrgGeogebraCommonKernelKernel_oppositeSignWithChar_(jchar op) {
  OrgGeogebraCommonKernelKernel_initialize();
  switch (op) {
    case '=':
    return '=';
    case '<':
    return '>';
    case '>':
    return '<';
    case 0x2264:
    return 0x2265;
    case 0x2265:
    return 0x2264;
    default:
    return '?';
  }
}

IOSDoubleArray *OrgGeogebraCommonKernelKernel_buildImplicitVarPartWithJavaLangStringBuilder_withDoubleArray_withNSStringArray_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, JavaLangStringBuilder *sbBuildImplicitVarPart, IOSDoubleArray *numbers, IOSObjectArray *vars, jboolean KEEP_LEADING_SIGN, jboolean CANCEL_DOWN, jboolean needsZ, OrgGeogebraCommonKernelStringTemplate *tpl) {
  IOSDoubleArray *temp = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(numbers))->size_];
  jint leadingNonZero = -1;
  [((JavaLangStringBuilder *) nil_chk(sbBuildImplicitVarPart)) setLengthWithInt:0];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(vars))->size_; i++) {
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(numbers, i))) {
      leadingNonZero = i;
      break;
    }
  }
  if (CANCEL_DOWN) {
    jboolean allIntegers = YES;
    for (jint i = 0; i < numbers->size_; i++) {
      allIntegers = (allIntegers && OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(IOSDoubleArray_Get(numbers, i)));
    }
    if (allIntegers) {
      OrgGeogebraCommonKernelKernel_divideWithDoubleArray_withDouble_withDoubleArray_(numbers, OrgGeogebraCommonKernelKernel_gcdWithDoubleArray_(numbers), numbers);
    }
  }
  if (leadingNonZero == -1) {
    [sbBuildImplicitVarPart appendWithNSString:@"0"];
    return temp;
  }
  if (KEEP_LEADING_SIGN) {
    OrgGeogebraCommonKernelKernel_copy__WithDoubleArray_withDoubleArray_(numbers, temp);
  }
  else {
    if (IOSDoubleArray_Get(numbers, leadingNonZero) < 0) {
      OrgGeogebraCommonKernelKernel_negativeWithDoubleArray_withDoubleArray_(numbers, temp);
    }
    else {
      OrgGeogebraCommonKernelKernel_copy__WithDoubleArray_withDoubleArray_(numbers, temp);
    }
  }
  NSString *strCoeff = OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, IOSDoubleArray_Get(temp, leadingNonZero), tpl);
  [sbBuildImplicitVarPart appendWithNSString:strCoeff];
  [sbBuildImplicitVarPart appendWithNSString:IOSObjectArray_Get(vars, leadingNonZero)];
  NSString *sign;
  jdouble abs;
  for (jint i = leadingNonZero + 1; i < vars->size_; i++) {
    if (IOSDoubleArray_Get(temp, i) < 0.0) {
      sign = @" - ";
      abs = -IOSDoubleArray_Get(temp, i);
    }
    else {
      sign = @" + ";
      abs = IOSDoubleArray_Get(temp, i);
    }
    if ((abs >= [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:self->nf_]) || self->useSignificantFigures_ || (needsZ && i == 2)) {
      [sbBuildImplicitVarPart appendWithNSString:sign];
      [sbBuildImplicitVarPart appendWithNSString:OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, abs, tpl)];
      [sbBuildImplicitVarPart appendWithNSString:IOSObjectArray_Get(vars, i)];
    }
  }
  return temp;
}

jboolean OrgGeogebraCommonKernelKernel_isZeroFigureWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl) {
  return !self->useSignificantFigures_ && (JavaLangMath_absWithDouble_(x) <= [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getPrecisionWithOrgGeogebraCommonUtilNumberFormatAdapter:self->nf_]);
}

NSString *OrgGeogebraCommonKernelKernel_formatSFWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (self->sbFormatSF_ == nil) {
    OrgGeogebraCommonKernelKernel_setAndConsume_sbFormatSF_(self, new_JavaLangStringBuilder_init());
  }
  else {
    [self->sbFormatSF_ setLengthWithInt:0];
  }
  id<OrgGeogebraCommonUtilScientificFormatAdapter> sfa = [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getSFWithOrgGeogebraCommonUtilScientificFormatAdapter:self->sf_];
  NSString *absStr;
  if (x == 0) {
    absStr = [((id<OrgGeogebraCommonUtilScientificFormatAdapter>) nil_chk(sfa)) formatWithDouble:0];
  }
  else if (x > 0) {
    absStr = [((id<OrgGeogebraCommonUtilScientificFormatAdapter>) nil_chk(sfa)) formatWithDouble:x];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(self->sbFormatSF_)) appendWithChar:'-'];
    absStr = [((id<OrgGeogebraCommonUtilScientificFormatAdapter>) nil_chk(sfa)) formatWithDouble:-x];
  }
  if ([((NSString *) nil_chk(absStr)) charAtWithInt:0] == '.') {
    [((JavaLangStringBuilder *) nil_chk(self->sbFormatSF_)) appendWithChar:'0'];
  }
  [((JavaLangStringBuilder *) nil_chk(self->sbFormatSF_)) appendWithNSString:absStr];
  return [self->sbFormatSF_ description];
}

NSString *OrgGeogebraCommonKernelKernel_formatCoeffWithDouble_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, jdouble x, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (JavaLangMath_absWithDouble_(x) == 1.0) {
    if (x > 0.0) {
      return @"";
    }
    return @"-";
  }
  NSString *numberStr = OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, x, tpl);
  switch ([[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return JreStrcat("$C", numberStr, '*');
    default:
    return numberStr;
  }
}

jdouble OrgGeogebraCommonKernelKernel_chopWithDouble_(jdouble x) {
  OrgGeogebraCommonKernelKernel_initialize();
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(x)) {
    return 0.0;
  }
  return x;
}

jboolean OrgGeogebraCommonKernelKernel_isZeroWithDouble_(jdouble x) {
  OrgGeogebraCommonKernelKernel_initialize();
  return (-OrgGeogebraCommonKernelKernel_STANDARD_PRECISION < x) && (x < OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
}

jboolean OrgGeogebraCommonKernelKernel_isZeroWithDouble_withDouble_(jdouble x, jdouble eps) {
  OrgGeogebraCommonKernelKernel_initialize();
  return (-eps < x) && (x < eps);
}

jboolean OrgGeogebraCommonKernelKernel_isZeroWithDoubleArray_(IOSDoubleArray *a) {
  OrgGeogebraCommonKernelKernel_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(a, i))) {
      return NO;
    }
  }
  return YES;
}

jboolean OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(jdouble x) {
  OrgGeogebraCommonKernelKernel_initialize();
  if (JavaLangDouble_isInfiniteWithDouble_(x) || JavaLangDouble_isNaNWithDouble_(x)) {
    return NO;
  }
  if (x > 1E17 || x < -1E17) {
    return YES;
  }
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x, JavaLangMath_roundWithDouble_(x));
}

jboolean OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(jdouble x, jdouble y) {
  OrgGeogebraCommonKernelKernel_initialize();
  if (x == y) {
    return YES;
  }
  return ((x - OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) <= y) && (y <= (x + OrgGeogebraCommonKernelKernel_STANDARD_PRECISION));
}

jboolean OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble eps) {
  OrgGeogebraCommonKernelKernel_initialize();
  if (x == y) {
    return YES;
  }
  return ((x - eps) < y) && (y < (x + eps));
}

jboolean OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(jdouble x, jdouble y) {
  OrgGeogebraCommonKernelKernel_initialize();
  return x > (y + OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
}

jint OrgGeogebraCommonKernelKernel_compareWithDouble_withDouble_(jdouble x, jdouble y) {
  OrgGeogebraCommonKernelKernel_initialize();
  if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(x, y)) {
    return 1;
  }
  if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(y, x)) {
    return -1;
  }
  return 0;
}

jboolean OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble eps) {
  OrgGeogebraCommonKernelKernel_initialize();
  return x > (y + eps);
}

jboolean OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(jdouble x, jdouble y) {
  OrgGeogebraCommonKernelKernel_initialize();
  return (x + OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) > y;
}

jdouble OrgGeogebraCommonKernelKernel_convertToAngleValueWithDouble_(jdouble val) {
  OrgGeogebraCommonKernelKernel_initialize();
  if ((val > OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) && (val < OrgGeogebraCommonKernelKernel_PI_2)) {
    return val;
  }
  jdouble value = fmod(val, OrgGeogebraCommonKernelKernel_PI_2);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(value)) {
    if (val < 1.0) {
      value = 0.0;
    }
    else {
      value = OrgGeogebraCommonKernelKernel_PI_2;
    }
  }
  else if (value < 0.0) {
    value += OrgGeogebraCommonKernelKernel_PI_2;
  }
  return value;
}

jdouble OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_withDouble_(jdouble x, jdouble precision) {
  OrgGeogebraCommonKernelKernel_initialize();
  jdouble prec = precision;
  prec = JavaLangMath_powWithDouble_withDouble_(10, JavaLangMath_floorWithDouble_(JavaLangMath_logWithDouble_(JavaLangMath_absWithDouble_(prec)) / JavaLangMath_logWithDouble_(10)));
  jdouble fracVal = x * OrgGeogebraCommonKernelKernel_INV_MIN_PRECISION;
  jdouble roundVal = JavaLangMath_roundWithDouble_(fracVal);
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(fracVal, roundVal, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION * prec)) {
    return roundVal / OrgGeogebraCommonKernelKernel_INV_MIN_PRECISION;
  }
  return x;
}

jdouble OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(jdouble x) {
  OrgGeogebraCommonKernelKernel_initialize();
  return OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_withDouble_(x, 1);
}

jdouble OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(jdouble x) {
  OrgGeogebraCommonKernelKernel_initialize();
  jdouble roundVal = JavaLangMath_roundWithDouble_(x);
  if (JavaLangMath_absWithDouble_(x - roundVal) < OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) {
    return roundVal;
  }
  return x;
}

JavaLangStringBuilder *OrgGeogebraCommonKernelKernel_formatAngleWithDouble_withDouble_withOrgGeogebraCommonKernelStringTemplate_withBoolean_(OrgGeogebraCommonKernelKernel *self, jdouble alpha, jdouble precision, OrgGeogebraCommonKernelStringTemplate *tpl, jboolean unbounded) {
  jdouble phi = alpha;
  [((JavaLangStringBuilder *) nil_chk(self->sbFormatAngle_)) setLengthWithInt:0];
  switch ([[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    default:
    if (JavaLangDouble_isNaNWithDouble_(phi)) {
      [self->sbFormatAngle_ appendWithNSString:@"?"];
      return self->sbFormatAngle_;
    }
    if (OrgGeogebraCommonKernelKernel_getAngleUnit(self) == OrgGeogebraCommonKernelKernel_ANGLE_DEGREE) {
      jboolean rtl = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLocalization])) isRightToLeftDigitsWithOrgGeogebraCommonKernelStringTemplate:tpl];
      if (rtl) {
        if ([tpl hasCASType]) {
          [self->sbFormatAngle_ appendWithNSString:@"pi/180*"];
        }
        else {
          [self->sbFormatAngle_ appendWithChar:OrgGeogebraCommonUtilUnicode_DEGREE_CHAR];
        }
      }
      phi = JavaLangMath_toDegreesWithDouble_(phi);
      phi = OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(phi);
      if (!unbounded) {
        if (phi < 0) {
          phi += 360;
        }
        else if (phi > 360) {
          phi = fmod(phi, 360);
        }
      }
      [self->sbFormatAngle_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_withDouble_(phi, precision), tpl)];
      if ([tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()]) {
        [self->sbFormatAngle_ appendWithNSString:@"*"];
      }
      if (!rtl) {
        if ([tpl hasCASType]) {
          [self->sbFormatAngle_ appendWithNSString:@"*pi/180"];
        }
        else {
          [self->sbFormatAngle_ appendWithChar:OrgGeogebraCommonUtilUnicode_DEGREE_CHAR];
        }
      }
      return self->sbFormatAngle_;
    }
    [self->sbFormatAngle_ appendWithNSString:OrgGeogebraCommonKernelKernel_formatWithDouble_withOrgGeogebraCommonKernelStringTemplate_(self, phi, tpl)];
    if (![tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()]) {
      [self->sbFormatAngle_ appendWithNSString:@" rad"];
    }
    return self->sbFormatAngle_;
  }
}

jint OrgGeogebraCommonKernelKernel_getAngleUnit(OrgGeogebraCommonKernelKernel *self) {
  return self->angleUnit_;
}

NSString *OrgGeogebraCommonKernelKernel_removeCASVariablePrefixWithNSString_(NSString *str) {
  OrgGeogebraCommonKernelKernel_initialize();
  return OrgGeogebraCommonKernelKernel_removeCASVariablePrefixWithNSString_withNSString_(str, @"");
}

NSString *OrgGeogebraCommonKernelKernel_removeCASVariablePrefixWithNSString_withNSString_(NSString *str, NSString *replace) {
  OrgGeogebraCommonKernelKernel_initialize();
  return [((NSString *) nil_chk(str)) replace:OrgGeogebraCommonKernelKernel_TMP_VARIABLE_PREFIX_ withSequence:replace];
}

jint OrgGeogebraCommonKernelKernel_getPrintDecimals(OrgGeogebraCommonKernelKernel *self) {
  if (self->nf_ == nil) return 5;
  return [((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk(self->nf_)) getMaximumFractionDigits];
}

jint OrgGeogebraCommonKernelKernel_getPrintFigures(OrgGeogebraCommonKernelKernel *self) {
  if (!self->useSignificantFigures_) {
    return -1;
  }
  return [((id<OrgGeogebraCommonUtilScientificFormatAdapter>) nil_chk(self->sf_)) getSigDigits];
}

jboolean OrgGeogebraCommonKernelKernel_isResolveUnkownVarsAsDummyGeos(OrgGeogebraCommonKernelKernel *self) {
  return self->resolveUnkownVarsAsDummyGeos_;
}

NSString *OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, NSString *exp, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst, OrgGeogebraCommonKernelStringTemplate *tpl) {
  return OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withBoolean_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(self, exp, NO, arbconst, tpl);
}

NSString *OrgGeogebraCommonKernelKernel_evaluateGeoGebraCASWithNSString_withBoolean_withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelKernel *self, NSString *exp, jboolean useCaching, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst, OrgGeogebraCommonKernelStringTemplate *tpl) {
  NSString *result = nil;
  if (useCaching && [self hasCasCache]) {
    result = [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk([self getCasCache])) getWithId:exp];
    if (result != nil) {
      return result;
    }
  }
  result = [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([self getGeoGebraCAS])) evaluateGeoGebraCASWithNSString:exp withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst withOrgGeogebraCommonKernelStringTemplate:tpl withOrgGeogebraCommonKernelKernel:self];
  if (useCaching) {
    [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk([self getCasCache])) putWithId:exp withId:result];
  }
  return result;
}

jint OrgGeogebraCommonKernelKernel_getCoordStyle(OrgGeogebraCommonKernelKernel *self) {
  return self->coordStyle_;
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_(OrgGeogebraCommonKernelKernel *self, NSString *label) {
  return OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_withBoolean_withBoolean_(self, label, NO, OrgGeogebraCommonKernelKernel_isResolveUnkownVarsAsDummyGeos(self));
}

OrgGeogebraCommonKernelGeosGeoCasCell *OrgGeogebraCommonKernelKernel_lookupCasCellLabelWithNSString_(OrgGeogebraCommonKernelKernel *self, NSString *label) {
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) lookupCasCellLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelKernel_lookupLabelWithNSString_withBoolean_withBoolean_(OrgGeogebraCommonKernelKernel *self, NSString *label, jboolean autoCreate, jboolean useDummies) {
  OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) lookupLabelWithNSString:label withBoolean:autoCreate];
  if ((geo == nil) && useDummies) {
    geo = OrgGeogebraCommonKernelKernel_lookupCasCellLabelWithNSString_(self, label);
    if (geo == nil) {
      geo = [new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self->cons_, label) autorelease];
    }
  }
  return geo;
}

void OrgGeogebraCommonKernelKernel_addViewsWithJavaLangInteger_withDoubleArray_(OrgGeogebraCommonKernelKernel *self, JavaLangInteger *id_, IOSDoubleArray *viewBounds) {
  id<OrgGeogebraCommonKernelView> view = [((OrgGeogebraCommonMainApp *) nil_chk(OrgGeogebraCommonKernelKernel_getApplication(self))) getViewWithInt:[((JavaLangInteger *) nil_chk(id_)) intValue]];
  if ((view != nil) && ([OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_class_() isInstance:view])) {
    id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev = (id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) check_protocol_cast(view, @protocol(OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim));
    *IOSDoubleArray_GetRef(nil_chk(viewBounds), 0) = JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(viewBounds, 0), [ev getXmin]);
    *IOSDoubleArray_GetRef(viewBounds, 1) = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(viewBounds, 1), [ev getXmax]);
    *IOSDoubleArray_GetRef(viewBounds, 2) = JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(viewBounds, 2), [ev getYmin]);
    *IOSDoubleArray_GetRef(viewBounds, 3) = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(viewBounds, 3), [ev getYmax]);
    *IOSDoubleArray_GetRef(viewBounds, 4) = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(viewBounds, 4), [ev getXscale]);
    *IOSDoubleArray_GetRef(viewBounds, 5) = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(viewBounds, 5), [ev getYscale]);
  }
}

void OrgGeogebraCommonKernelKernel_notifyRepaint(OrgGeogebraCommonKernelKernel *self) {
  if (self->notifyRepaint__ && self->notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(self->views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) repaintView];
    }
  }
}

void OrgGeogebraCommonKernelKernel_notifyReset(OrgGeogebraCommonKernelKernel *self) {
  if (self->notifyViewsActive_) {
    for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(self->views_)) {
      [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) reset];
    }
  }
}

void OrgGeogebraCommonKernelKernel_notifyClearView(OrgGeogebraCommonKernelKernel *self) {
  for (id<OrgGeogebraCommonKernelView> __strong view in nil_chk(self->views_)) {
    [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) clearView];
  }
}

void OrgGeogebraCommonKernelKernel_printAttachedViews(OrgGeogebraCommonKernelKernel *self) {
  @try {
    if (!self->notifyViewsActive_) {
      OrgGeogebraCommonMainApp_debugWithNSString_(@"Number of registered views = 0");
    }
    else {
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      [sb appendWithNSString:@"Number of registered views = "];
      [sb appendWithInt:[((JavaUtilArrayList *) nil_chk(self->views_)) size]];
      for (id<OrgGeogebraCommonKernelView> __strong view in self->views_) {
        [sb appendWithNSString:@"\n * "];
        [sb appendWithId:[((id<OrgGeogebraCommonKernelView>) nil_chk(view)) getClass]];
      }
      OrgGeogebraCommonMainApp_debugWithNSString_([sb description]);
    }
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
  }
}

void OrgGeogebraCommonKernelKernel_notifyAddAllWithOrgGeogebraCommonKernelView_(OrgGeogebraCommonKernelKernel *self, id<OrgGeogebraCommonKernelView> view) {
  jint consStep = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getStep];
  OrgGeogebraCommonKernelKernel_notifyAddAllWithOrgGeogebraCommonKernelView_withInt_(self, view, consStep);
}

void OrgGeogebraCommonKernelKernel_notifyRenameListenerAlgos(OrgGeogebraCommonKernelKernel *self) {
  if (self->cons_ != nil && ![self->cons_ isFileLoading] && ![self isSpreadsheetBatchRunning]) {
    OrgGeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(self->renameListenerAlgos_);
  }
}

void OrgGeogebraCommonKernelKernel_notifyAddAllWithOrgGeogebraCommonKernelView_withInt_(OrgGeogebraCommonKernelKernel *self, id<OrgGeogebraCommonKernelView> view, jint consStep) {
  if (!self->notifyViewsActive_) {
    return;
  }
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getGeoSetWithCasCellsConstructionOrder])) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isAvailableAtConstructionStepWithInt:consStep]) {
      break;
    }
    [((id<OrgGeogebraCommonKernelView>) nil_chk(view)) addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  if ([self getUpdateAgain]) {
    [self setUpdateAgainWithBoolean:NO withOrgGeogebraCommonKernelGeosGeoElement:nil];
    [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) scheduleUpdateConstruction];
  }
}

OrgGeogebraCommonKernelArithmeticMyDouble *OrgGeogebraCommonKernelKernel_convertIndexToNumberWithNSString_(OrgGeogebraCommonKernelKernel *self, NSString *str) {
  jint i = 0;
  while ((i < ((jint) [((NSString *) nil_chk(str)) length])) && !OrgGeogebraCommonUtilUnicode_isSuperscriptDigitWithChar_([str charAtWithInt:i])) {
    i++;
  }
  OrgGeogebraCommonKernelArithmeticMyDouble *md = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, [str substring:i endIndex:((jint) [str length]) - 1]) autorelease];
  return md;
}

jboolean OrgGeogebraCommonKernelKernel_kernelHas3DObjects(OrgGeogebraCommonKernelKernel *self) {
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_))->usedGeos_)) iterator];
  jboolean kernelHas3DObjects = NO;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonPluginGeoClassEnum *geoType = [it next];
    if (((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk(geoType))->is3D_) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"found 3D geo: ", geoType->xmlName_));
      kernelHas3DObjects = YES;
      break;
    }
  }
  if (kernelHas3DObjects) {
    OrgGeogebraCommonMainApp_errorWithNSString_(@"kernel has 3D objects");
  }
  return kernelHas3DObjects;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelKernel)

@implementation OrgGeogebraCommonKernelKernel_$1

- (jint)compareWithId:(JavaLangDouble *)d1
               withId:(JavaLangDouble *)d2 {
  if (JavaLangMath_absWithDouble_([((JavaLangDouble *) nil_chk(d1)) doubleValue] - [((JavaLangDouble *) nil_chk(d2)) doubleValue]) < val$eps_) {
    return 0;
  }
  else if ([d1 doubleValue] < [d2 doubleValue]) {
    return -1;
  }
  else {
    return 1;
  }
}

- (instancetype)initWithDouble:(jdouble)capture$0 {
  OrgGeogebraCommonKernelKernel_$1_initWithDouble_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "initWithDouble:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$eps_", NULL, 0x1012, "D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelKernel", "DoubleComparatorWithDouble:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelKernel_$1 = { 2, "", "org.geogebra.common.kernel", "Kernel", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Double;>;" };
  return &_OrgGeogebraCommonKernelKernel_$1;
}

@end

void OrgGeogebraCommonKernelKernel_$1_initWithDouble_(OrgGeogebraCommonKernelKernel_$1 *self, jdouble capture$0) {
  self->val$eps_ = capture$0;
  NSObject_init(self);
}

OrgGeogebraCommonKernelKernel_$1 *new_OrgGeogebraCommonKernelKernel_$1_initWithDouble_(jdouble capture$0) {
  OrgGeogebraCommonKernelKernel_$1 *self = [OrgGeogebraCommonKernelKernel_$1 alloc];
  OrgGeogebraCommonKernelKernel_$1_initWithDouble_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelKernel_$1)

@implementation OrgGeogebraCommonKernelKernel_$2

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) {
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([this$0_ convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoElement class])])) unwrap];
  }
  return ev;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)outer$ {
  OrgGeogebraCommonKernelKernel_$2_initWithOrgGeogebraCommonKernelKernel_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelKernel", "convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelKernel_$2 = { 2, "", "org.geogebra.common.kernel", "Kernel", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelKernel_$2;
}

@end

void OrgGeogebraCommonKernelKernel_$2_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel_$2 *self, OrgGeogebraCommonKernelKernel *outer$) {
  OrgGeogebraCommonKernelKernel_$2_set_this$0_(self, outer$);
  NSObject_init(self);
}

OrgGeogebraCommonKernelKernel_$2 *new_OrgGeogebraCommonKernelKernel_$2_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *outer$) {
  OrgGeogebraCommonKernelKernel_$2 *self = [OrgGeogebraCommonKernelKernel_$2 alloc];
  OrgGeogebraCommonKernelKernel_$2_initWithOrgGeogebraCommonKernelKernel_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelKernel_$2)
