//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/commands/CmdPolyLine.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CmdPolyLine.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelCommandsCmdPolyLine

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdPolyLine_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  {
    jint size;
    jboolean penStroke;
    IOSObjectArray *points;
    jboolean is3D;
    switch (n) {
      case 0:
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
      case 1:
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) return [self PolyLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoList class])];
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 2:
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoBoolean]) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      }
      return [self PolyLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoList class])];
      default:
      size = n;
      penStroke = NO;
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, ((IOSObjectArray *) nil_chk(arg))->size_ - 1))) isGeoBoolean]) {
        size = size - 1;
        penStroke = [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, arg->size_ - 1), [OrgGeogebraCommonKernelGeosGeoBoolean class])))) getBoolean];
      }
      points = [IOSObjectArray arrayWithLength:size type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
      is3D = NO;
      for (jint i = 0; i < size; i++) {
        if (!([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, i))) isGeoPoint])) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
        IOSObjectArray_Set(points, i, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
        is3D = [self checkIs3DWithBoolean:is3D withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, i)];
      }
      return [self PolyLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points withBoolean:penStroke withBoolean:is3D];
    }
  }
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)pointList {
  OrgGeogebraCommonKernelAlgosAlgoPolyLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_(cons_, labels, pointList) autorelease];
  return [algo getOutput];
}

- (jboolean)checkIs3DWithBoolean:(jboolean)is3D
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                  withBoolean:(jboolean)penStroke
                                  withBoolean:(jboolean)is3D {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) PolyLineWithNSStringArray:labels withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points withBoolean:penStroke];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdPolyLine", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "PolyLineWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoList:", "PolyLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "checkIs3DWithBoolean:withOrgGeogebraCommonKernelGeosGeoElement:", "checkIs3D", "Z", 0x4, NULL, NULL },
    { "PolyLineWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:withBoolean:", "PolyLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdPolyLine = { 2, "CmdPolyLine", "org.geogebra.common.kernel.commands", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdPolyLine;
}

@end

void OrgGeogebraCommonKernelCommandsCmdPolyLine_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdPolyLine *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdPolyLine *new_OrgGeogebraCommonKernelCommandsCmdPolyLine_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdPolyLine *self = [OrgGeogebraCommonKernelCommandsCmdPolyLine alloc];
  OrgGeogebraCommonKernelCommandsCmdPolyLine_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdPolyLine)
