//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/commands/CmdCopyFreeObject.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CmdCopyFreeObject.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoRayND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelCommandsCmdCopyFreeObject

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdCopyFreeObject_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  {
    NSString *label;
    OrgGeogebraCommonKernelGeosGeoElement *geo;
    IOSObjectArray *ret;
    switch (n) {
      case 1:
      label = [c getLabel];
      if ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)]) {
        id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> f = (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar));
        JavaLangStringBuilder *command = new_JavaLangStringBuilder_init();
        if (label != nil) {
          (void) [command appendWithNSString:label];
          (void) [command appendWithChar:'('];
          (void) [command appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(f)) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
          (void) [command appendWithNSString:@")="];
        }
        OrgGeogebraCommonKernelStringTemplate *highPrecision = OrgGeogebraCommonKernelStringTemplate_get_maxPrecision_();
        (void) [command appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:highPrecision]];
        @try {
          IOSObjectArray *ret = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgebraProcessor])) processAlgebraCommandNoExceptionsWithNSString:[command description] withBoolean:YES];
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0)];
          if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isLabelSet]) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) remove];
          return ret;
        }
        @catch (JavaLangException *e) {
          if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isLabelSet]) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) remove];
          [((JavaLangException *) nil_chk(e)) printStackTrace];
          @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
        }
      }
      if ([OrgGeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
        geo = [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND))))) copyFreeSegment];
      }
      else if ([OrgGeogebraCommonKernelKernelNDGeoRayND_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
        geo = [((id<OrgGeogebraCommonKernelKernelNDGeoRayND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoRayND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoRayND))))) copyFreeRay];
      }
      else {
        geo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) deepCopyGeo];
      }
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0)];
      [geo setLabelWithNSString:label];
      ret = [IOSObjectArray newArrayWithObjects:(id[]){ geo } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isLabelSet]) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) remove];
      return ret;
      default:
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdCopyFreeObject", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, "Lorg.geogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdCopyFreeObject = { 2, "CmdCopyFreeObject", "org.geogebra.common.kernel.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdCopyFreeObject;
}

@end

void OrgGeogebraCommonKernelCommandsCmdCopyFreeObject_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdCopyFreeObject *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdCopyFreeObject *new_OrgGeogebraCommonKernelCommandsCmdCopyFreeObject_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdCopyFreeObject *self = [OrgGeogebraCommonKernelCommandsCmdCopyFreeObject alloc];
  OrgGeogebraCommonKernelCommandsCmdCopyFreeObject_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdCopyFreeObject)
