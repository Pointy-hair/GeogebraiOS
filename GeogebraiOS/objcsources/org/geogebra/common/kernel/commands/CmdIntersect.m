//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/commands/CmdIntersect.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersect.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectCurveCurve.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectFunctions.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectPolynomialConic.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectPolynomialLine.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectPolynomials.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectSingle.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/CmdIntersect.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/implicit/AlgoIntersectImplicitpolyParametric.h"
#include "org/geogebra/common/kernel/implicit/AlgoIntersectImplicitpolys.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"

@interface OrgGeogebraCommonKernelCommandsCmdIntersect ()

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyLineSingleWithNSString:(NSString *)label
                                  withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                              withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l
                                       withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyConicSingleWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                              withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c1
                                        withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolysSingleWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                               withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p2
                                    withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyPolynomialSingleWithNSString:(NSString *)label
                                        withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                             withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialConicSingleWithNSString:(NSString *)label
                                         withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                            withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
                                      withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)a
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)b
                                   withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)refPoint;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)a
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)b
                             withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)a
                                      withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)b
                                      withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)refPoint;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                                      withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
                                withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialLineSingleWithNSString:(NSString *)label
                                        withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                            withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l
                                     withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index;

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialsSingleWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                                 withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                                     withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)a
                                                                     withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)b
                                                                  withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index;

- (IOSObjectArray *)IntersectFunctionsWithNSStringArray:(IOSObjectArray *)labels
             withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
             withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)g
       withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)left
       withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)right;

@end

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p, OrgGeogebraCommonKernelGeosGeoLine *l, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p1, OrgGeogebraCommonKernelGeosGeoConic *c1, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolysSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p1, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p2, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoConic *c, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoConic *a, OrgGeogebraCommonKernelGeosGeoConic *b, OrgGeogebraCommonKernelGeosGeoPoint *refPoint);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoConic *a, OrgGeogebraCommonKernelGeosGeoConic *b, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *a, OrgGeogebraCommonKernelGeosGeoConic *b, OrgGeogebraCommonKernelGeosGeoPoint *refPoint);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoConic *c, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoLine *l, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialsSingleWithOrgGeogebraCommonKernelArithmeticCommand_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, OrgGeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *arg, OrgGeogebraCommonKernelGeosGeoFunction *a, OrgGeogebraCommonKernelGeosGeoFunction *b, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectFunctionsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g, id<OrgGeogebraCommonKernelArithmeticNumberValue> left, id<OrgGeogebraCommonKernelArithmeticNumberValue> right);

@implementation OrgGeogebraCommonKernelCommandsCmdIntersect

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdIntersect_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 2:
    arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinesWithNSString:[c getLabel] withOrgGeogebraCommonKernelKernelNDGeoLineND:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelKernelNDGeoLineND:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class])], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]]))) {
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineCurveWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineCurveWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]]))) {
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectCurveCurveWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]) withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolyLine class]]))) {
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolyLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoPolyLine:(OrgGeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoPolyLine class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolyLine class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolyLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoPolyLine:(OrgGeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoPolyLine class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon]))) {
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolygonWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoPolygon class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolygonWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoPolygon class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic]))) return (IOSObjectArray *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoLineND:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class])], [IOSObjectArray class]);
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) return (IOSObjectArray *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoLineND:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class])], [IOSObjectArray class]);
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialConicWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoFunction class]) withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialConicWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoFunction class]) withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic]))) return (IOSObjectArray *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectConicsWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class]) withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class])], [IOSObjectArray class]);
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable] || [IOSObjectArray_Get(arg, 1) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialsWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = (([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 1) = !([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyPolynomialWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]) withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 0) = !([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyPolynomialWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]) withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]) withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class])];
    else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyLineWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]) withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolysWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]) withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyConicWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]) withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class])];
    else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic]))) return [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyConicWithNSStringArray:[c getLabels] withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]) withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class])];
    else {
      if (!IOSBooleanArray_Get(ok, 0)) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
    }
    case 3:
    arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [OrgGeogebraCommonKernelGeosGeoPoint class])) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [OrgGeogebraCommonKernelGeosGeoPoint class])) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [OrgGeogebraCommonKernelGeosGeoPoint class])) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      OrgGeogebraCommonKernelGeosGeoPoint *ret = OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)));
      if (ret == nil) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      OrgGeogebraCommonKernelGeosGeoPoint *ret = OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)));
      if (ret == nil) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialsSingleWithOrgGeogebraCommonKernelArithmeticCommand_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, c, arg, [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) return [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoFunction class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) return [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoFunction class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = (([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) && (*IOSBooleanArray_GetRef(ok, 1) = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction])) isPolynomialFunctionWithBoolean:NO])))) {
      OrgGeogebraCommonKernelGeosGeoPoint *ret = OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]), [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)));
      if (ret == nil) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) && (*IOSBooleanArray_GetRef(ok, 0) = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction])) isPolynomialFunctionWithBoolean:NO])) {
      OrgGeogebraCommonKernelGeosGeoPoint *ret = OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]), [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)));
      if (ret == nil) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) return [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) return [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 2) = [OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) return [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolysSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]), (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = [OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) return [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoConic class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = [OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) return [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoConic class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionLineWithNSString:[c getLabel] withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [OrgGeogebraCommonKernelGeosGeoPoint class])] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable] || [IOSObjectArray_Get(arg, 1) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionsWithNSString:[c getLabel] withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [OrgGeogebraCommonKernelGeosGeoPoint class])] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionLineWithNSString:[c getLabel] withOrgGeogebraCommonKernelGeosGeoFunction:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [OrgGeogebraCommonKernelGeosGeoPoint class])] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else {
      if (!IOSBooleanArray_Get(ok, 0)) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      else if (!IOSBooleanArray_Get(ok, 1)) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      else @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 2)];
    }
    case 4:
    arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) && (*IOSBooleanArray_GetRef(ok, 3) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 3)]))) {
      IOSObjectArray *ret = OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectFunctionsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, [c getLabels], (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoFunction class]), (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoFunction class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 3), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)));
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]])) && (*IOSBooleanArray_GetRef(ok, 2) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) && (*IOSBooleanArray_GetRef(ok, 3) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 3)]))) {
      OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(cons_, [c getLabels], (OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]), (OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 3), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))) autorelease];
      return [algo getOutput];
    }
    @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    default:
    @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyLineSingleWithNSString:(NSString *)label
                                  withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                              withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l
                                       withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, p, l, idx);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyConicSingleWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                              withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c1
                                        withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, p1, c1, idx);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolysSingleWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                               withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p2
                                    withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolysSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, p1, p2, idx);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyPolynomialSingleWithNSString:(NSString *)label
                                        withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                             withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, p, f, idx);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialConicSingleWithNSString:(NSString *)label
                                         withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                            withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
                                      withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)idx {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, f, c, idx);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)a
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)b
                                   withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)refPoint {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(self, label, a, b, refPoint);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)a
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)b
                             withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, a, b, index);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)a
                                      withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)b
                                      withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)refPoint {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(self, label, a, b, refPoint);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                                      withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
                                withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, g, c, index);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialLineSingleWithNSString:(NSString *)label
                                        withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                            withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l
                                     withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, f, l, index);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialsSingleWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                                 withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                                     withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)a
                                                                     withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)b
                                                                  withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialsSingleWithOrgGeogebraCommonKernelArithmeticCommand_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, c, arg, a, b, index);
}

- (IOSObjectArray *)IntersectFunctionsWithNSStringArray:(IOSObjectArray *)labels
             withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
             withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)g
       withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)left
       withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)right {
  return OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectFunctionsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, labels, f, g, left, right);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdIntersect", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "IntersectImplicitpolyLineSingleWithNSString:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectImplicitpolyLineSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectImplicitpolyConicSingleWithNSString:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectImplicitpolyConicSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectImplicitpolysSingleWithNSString:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectImplicitpolysSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectImplicitpolyPolynomialSingleWithNSString:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectImplicitpolyPolynomialSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectPolynomialConicSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectPolynomialConicSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPoint:", "IntersectConicsSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectConicsSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPoint:", "IntersectLineConicSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectLineConicSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectPolynomialLineSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectPolynomialLineSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectPolynomialsSingleWithOrgGeogebraCommonKernelArithmeticCommand:withOrgGeogebraCommonKernelGeosGeoElementArray:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "IntersectPolynomialsSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectFunctionsWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "IntersectFunctions", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdIntersect = { 2, "CmdIntersect", "org.geogebra.common.kernel.commands", NULL, 0x1, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdIntersect;
}

@end

void OrgGeogebraCommonKernelCommandsCmdIntersect_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdIntersect *new_OrgGeogebraCommonKernelCommandsCmdIntersect_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdIntersect *self = [OrgGeogebraCommonKernelCommandsCmdIntersect alloc];
  OrgGeogebraCommonKernelCommandsCmdIntersect_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p, OrgGeogebraCommonKernelGeosGeoLine *l, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx) {
  OrgGeogebraCommonKernelAlgosAlgoIntersect *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoLine:l];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p1, OrgGeogebraCommonKernelGeosGeoConic *c1, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx) {
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withOrgGeogebraCommonKernelGeosGeoConic:c1];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolysSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p1, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p2, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx) {
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p2];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx) {
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:NO]) return nil;
  OrgGeogebraCommonKernelAlgosAlgoIntersect *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoFunction:f];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoConic *c, id<OrgGeogebraCommonKernelGeosGeoNumberValue> idx) {
  OrgGeogebraCommonKernelAlgosAlgoIntersect *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:f withOrgGeogebraCommonKernelGeosGeoConic:c];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoConic *a, OrgGeogebraCommonKernelGeosGeoConic *b, OrgGeogebraCommonKernelGeosGeoPoint *refPoint) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoConic:a withOrgGeogebraCommonKernelGeosGeoConic:b];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoPoint_(label, algo, refPoint) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoConic *a, OrgGeogebraCommonKernelGeosGeoConic *b, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoConic:a withOrgGeogebraCommonKernelGeosGeoConic:b];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(label, algo, index) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *a, OrgGeogebraCommonKernelGeosGeoConic *b, OrgGeogebraCommonKernelGeosGeoPoint *refPoint) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoLine:a withOrgGeogebraCommonKernelGeosGeoConic:b];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoPoint_(label, algo, refPoint) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoConic *c, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoLine:g withOrgGeogebraCommonKernelGeosGeoConic:c];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(label, algo, index) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoLine *l, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index) {
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:NO]) return nil;
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:f withOrgGeogebraCommonKernelGeosGeoLine:l];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(label, algo, index) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialsSingleWithOrgGeogebraCommonKernelArithmeticCommand_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, OrgGeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *arg, OrgGeogebraCommonKernelGeosGeoFunction *a, OrgGeogebraCommonKernelGeosGeoFunction *b, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index) {
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(a)) getConstruction])) isFileLoading] && ![a isPolynomialFunctionWithBoolean:NO]) {
    @throw [self argErrWithOrgGeogebraCommonMainApp:self->app_ withNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(arg), 0)];
  }
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(b)) getConstruction])) isFileLoading] && ![b isPolynomialFunctionWithBoolean:NO]) {
    @throw [self argErrWithOrgGeogebraCommonMainApp:self->app_ withNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(arg), 1)];
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:a withOrgGeogebraCommonKernelGeosGeoFunction:b];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], algo, index) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsCmdIntersect_IntersectFunctionsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelCommandsCmdIntersect *self, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g, id<OrgGeogebraCommonKernelArithmeticNumberValue> left, id<OrgGeogebraCommonKernelArithmeticNumberValue> right) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctions *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectFunctions_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self->cons_, labels, f, g, left, right) autorelease];
  IOSObjectArray *S = [algo getIntersectionPoints];
  return S;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdIntersect)
