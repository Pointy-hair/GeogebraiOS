//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/commands/AlgebraProcessor.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/io/MathMLParser.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/KernelCAS.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoCurveCartesian.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentBoolean.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentConic.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentFunctionNVar.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentGeoCopy.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentInterval.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentLine.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentListExpression.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentText.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentVector.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoLaTeX.h"
#include "org/geogebra/common/kernel/arithmetic/AssignmentType.h"
#include "org/geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/arithmetic/TextValue.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/arithmetic/VectorValue.h"
#include "org/geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "org/geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CommandDispatcher.h"
#include "org/geogebra/common/kernel/commands/MyException.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoInterval.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoScriptAction.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoUserInputElement.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/implicit/AlgoDependentImplicitCurve.h"
#include "org/geogebra/common/kernel/implicit/AlgoDependentImplicitPoly.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitCurve.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/parser/ParseException.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/kernel/parser/ParserInterface.h"
#include "org/geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/AppCompanion.h"
#include "org/geogebra/common/main/BracketsError.h"
#include "org/geogebra/common/main/Feature.h"
#include "org/geogebra/common/main/GuiManagerInterface.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/AsyncOperation.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelCommandsAlgebraProcessor () {
 @public
  OrgGeogebraCommonMainLocalization *loc_;
  id<OrgGeogebraCommonKernelParserParserInterface> parser_;
  OrgGeogebraCommonIoMathMLParser *mathmlParserGGB_;
  OrgGeogebraCommonIoMathMLParser *mathmlParserLaTeX_;
  OrgGeogebraCommonKernelArithmeticMyStringBuffer *xBracket_, *yBracket_, *zBracket_, *closeBracket_;
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)checkParametricEquationFWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                              withOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)fallback;

- (IOSObjectArray *)checkParametricEquationWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                            withJavaUtilTreeSet:(JavaUtilTreeSet *)undefinedVariables;

- (IOSObjectArray *)tryReplacingProductsWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve;

- (IOSObjectArray *)parseMathmlWithNSString:(NSString *)cmd
                                withBoolean:(jboolean)storeUndo
                                withBoolean:(jboolean)allowErrorDialog
                                withBoolean:(jboolean)throwMyError
                                withBoolean:(jboolean)autoCreateSliders
    withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback0;

+ (jboolean)compatibleTypesWithOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)type
                           withOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)type2;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)exprWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev;

- (jboolean)getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)cx
                   withOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                         withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)scale_
                                   withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)var;

- (void)addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                                                             withInt:(jint)i
                 withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)scale_;

+ (jint)getDirectionWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)enLeft;

- (OrgGeogebraCommonKernelGeosGeoFunction *)DependentIntervalWithNSString:(NSString *)label
                            withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun;

- (OrgGeogebraCommonKernelGeosGeoElement *)DependentGeoCopyWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)origGeoNode;

- (OrgGeogebraCommonKernelGeosGeoFunctionNVar *)DependentFunctionNVarWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)fun;

- (OrgGeogebraCommonKernelGeosGeoLine *)DependentLineWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ;

- (OrgGeogebraCommonKernelGeosGeoConic *)DependentConicWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ;

- (IOSObjectArray *)processNumberWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate;

- (OrgGeogebraCommonKernelGeosGeoNumeric *)DependentNumberWithNSString:(NSString *)label
                   withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root
                                                           withBoolean:(jboolean)isAngle;

- (IOSObjectArray *)processListWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                       withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)evalList;

- (IOSObjectArray *)processTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                              withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate;

- (OrgGeogebraCommonKernelGeosGeoText *)DependentTextWithNSString:(NSString *)label
              withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root;

- (IOSObjectArray *)processBooleanWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate;

- (IOSObjectArray *)processPointVectorWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate;

- (OrgGeogebraCommonKernelGeosGeoPoint *)DependentPointWithNSString:(NSString *)label
                withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root
                                                        withBoolean:(jboolean)complex;

- (OrgGeogebraCommonKernelGeosGeoVector *)DependentVectorWithNSString:(NSString *)label
                  withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root;

- (IOSObjectArray *)processGeoCopyWithNSString:(NSString *)copyLabel
withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)origGeoNode;

- (OrgGeogebraCommonKernelGeosGeoElement *)DependentGeoCopyWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)origGeoNode;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor, loc_, OrgGeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor, parser_, id<OrgGeogebraCommonKernelParserParserInterface>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor, mathmlParserGGB_, OrgGeogebraCommonIoMathMLParser *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor, mathmlParserLaTeX_, OrgGeogebraCommonIoMathMLParser *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor, xBracket_, OrgGeogebraCommonKernelArithmeticMyStringBuffer *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor, yBracket_, OrgGeogebraCommonKernelArithmeticMyStringBuffer *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor, zBracket_, OrgGeogebraCommonKernelArithmeticMyStringBuffer *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor, closeBracket_, OrgGeogebraCommonKernelArithmeticMyStringBuffer *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCommandsAlgebraProcessor_processCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell_withBoolean_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelGeosGeoCasCell *casCell, jboolean isLastRow);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve, OrgGeogebraCommonKernelArithmeticValidExpression *fallback);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve, JavaUtilTreeSet *undefinedVariables);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_tryReplacingProductsWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_parseMathmlWithNSString_withBoolean_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *cmd, jboolean storeUndo, jboolean allowErrorDialog, jboolean throwMyError, jboolean autoCreateSliders, OrgGeogebraCommonUtilAsyncOperation *callback0);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelCommandsAlgebraProcessor_compatibleTypesWithOrgGeogebraCommonPluginGeoClassEnum_withOrgGeogebraCommonPluginGeoClassEnum_(OrgGeogebraCommonPluginGeoClassEnum *type, OrgGeogebraCommonPluginGeoClassEnum *type2);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticFunction *fun);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *cx, IOSObjectArray *coefX, OrgGeogebraCommonKernelArithmeticExpressionNode *scale_, OrgGeogebraCommonKernelGeosGeoElement *var);

__attribute__((unused)) static void OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, IOSObjectArray *coefX, jint i, OrgGeogebraCommonKernelArithmeticExpressionNode *scale_);

__attribute__((unused)) static jint OrgGeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticExpressionNode *enLeft);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentIntervalWithNSString_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticFunction *fun);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *origGeoNode);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoFunctionNVar *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentFunctionNVarWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticFunctionNVar *fun);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_withBoolean_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticEquation *equ, jboolean allowConstant);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoLine *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentLineWithNSString_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoConic *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentConicWithNSString_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processNumberWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, id<OrgGeogebraCommonKernelArithmeticExpressionValue> evaluate);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoNumeric *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentNumberWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root, jboolean isAngle);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processListWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, OrgGeogebraCommonKernelArithmeticMyList *evalList);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonKernelCommandsAlgebraProcessor_ListExpressionWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processTextWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, id<OrgGeogebraCommonKernelArithmeticExpressionValue> evaluate);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoText *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentTextWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoText *OrgGeogebraCommonKernelCommandsAlgebraProcessor_TextWithNSString_withNSString_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, NSString *text);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processBooleanWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, id<OrgGeogebraCommonKernelArithmeticExpressionValue> evaluate);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processPointVectorWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, id<OrgGeogebraCommonKernelArithmeticExpressionValue> evaluate);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentPointWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root, jboolean complex);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoVector *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentVectorWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processGeoCopyWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *copyLabel, OrgGeogebraCommonKernelArithmeticExpressionNode *origGeoNode);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *origGeoNode);

@interface OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1 : OrgGeogebraCommonUtilAsyncOperation {
 @public
  OrgGeogebraCommonKernelCommandsAlgebraProcessor *this$0_;
  OrgGeogebraCommonKernelArithmeticValidExpression *val$ve2_;
  jboolean val$storeUndo_;
  jboolean val$allowErrorDialog_;
  jboolean val$throwMyError_;
  OrgGeogebraCommonUtilAsyncOperation *val$callback0_;
}

- (void)callbackWithId:(id)obj;

- (instancetype)initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor:(OrgGeogebraCommonKernelCommandsAlgebraProcessor *)outer$
                   withOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)capture$0
                                                            withBoolean:(jboolean)capture$1
                                                            withBoolean:(jboolean)capture$2
                                                            withBoolean:(jboolean)capture$3
                                withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1, this$0_, OrgGeogebraCommonKernelCommandsAlgebraProcessor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1, val$ve2_, OrgGeogebraCommonKernelArithmeticValidExpression *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1, val$callback0_, OrgGeogebraCommonUtilAsyncOperation *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_withOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1 *self, OrgGeogebraCommonKernelCommandsAlgebraProcessor *outer$, OrgGeogebraCommonKernelArithmeticValidExpression *capture$0, jboolean capture$1, jboolean capture$2, jboolean capture$3, OrgGeogebraCommonUtilAsyncOperation *capture$4);

__attribute__((unused)) static OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1 *new_OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_withOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *outer$, OrgGeogebraCommonKernelArithmeticValidExpression *capture$0, jboolean capture$1, jboolean capture$2, jboolean capture$3, OrgGeogebraCommonUtilAsyncOperation *capture$4) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1)

@interface OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2 : NSObject < OrgGeogebraCommonKernelArithmeticTraversing > {
 @public
  OrgGeogebraCommonKernelCommandsAlgebraProcessor *this$0_;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev;

- (instancetype)initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor:(OrgGeogebraCommonKernelCommandsAlgebraProcessor *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2, this$0_, OrgGeogebraCommonKernelCommandsAlgebraProcessor *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2 *self, OrgGeogebraCommonKernelCommandsAlgebraProcessor *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2 *new_OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2)

@implementation OrgGeogebraCommonKernelCommandsAlgebraProcessor

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
 withOrgGeogebraCommonKernelCommandsCommandDispatcher:(OrgGeogebraCommonKernelCommandsCommandDispatcher *)commandDispatcher {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, commandDispatcher);
  return self;
}

- (NSString *)getSubCommandSetNameWithInt:(jint)index {
  return [((OrgGeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) getSubCommandSetNameWithInt:index];
}

- (jboolean)isCommandAvailableWithNSString:(NSString *)cmd {
  return [((OrgGeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) isCommandAvailableWithNSString:cmd];
}

- (IOSObjectArray *)processCommandWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                                   withBoolean:(jboolean)labelOutput {
  return [((OrgGeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) processCommandWithOrgGeogebraCommonKernelArithmeticCommand:c withBoolean:labelOutput];
}

- (void)processCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell:(OrgGeogebraCommonKernelGeosGeoCasCell *)casCell
                                                    withBoolean:(jboolean)isLastRow {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_processCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell_withBoolean_(self, casCell, isLastRow);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)changeGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                                        withNSString:(NSString *)newValue
                                                                                         withBoolean:(jboolean)redefineIndependent
                                                                                         withBoolean:(jboolean)storeUndoInfo {
  @try {
    return [self changeGeoElementNoExceptionHandlingWithOrgGeogebraCommonKernelGeosGeoElement:geo withNSString:newValue withBoolean:redefineIndependent withBoolean:storeUndoInfo];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
    return nil;
  }
  @catch (JavaLangException *e) {
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
    return nil;
  }
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)checkParametricEquationFWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                              withOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)fallback {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelArithmeticValidExpression_(self, ve, fallback);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)changeGeoElementNoExceptionHandlingWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                                                           withNSString:(NSString *)newValue
                                                                                                            withBoolean:(jboolean)redefineIndependent
                                                                                                            withBoolean:(jboolean)storeUndoInfo {
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:newValue];
    if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]] && [[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class])))) getLHS])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]] && [@"X" isEqual:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class])))) getLHS])) unwrap])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]] && [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:@"X"] == nil) {
      OrgGeogebraCommonKernelArithmeticValidExpression *ve2 = OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelArithmeticValidExpression_(self, [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class])))) getRHS], nil);
      if (ve2 != nil) {
        [ve2 setLabelWithNSString:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabel]];
        ve = ve2;
      }
    }
    else if ([@"X" isEqual:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabel]]) {
      ve = OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelArithmeticValidExpression_(self, ve, ve);
    }
    return [self changeGeoElementNoExceptionHandlingWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonKernelArithmeticValidExpression:ve withBoolean:redefineIndependent withBoolean:storeUndoInfo];
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", newValue));
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    @throw e;
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", newValue));
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)changeGeoElementNoExceptionHandlingWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                   withOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)newValue
                                                                                                            withBoolean:(jboolean)redefineIndependent
                                                                                                            withBoolean:(jboolean)storeUndoInfo {
  NSString *oldLabel, *newLabel;
  IOSObjectArray *result;
  @try {
    [((OrgGeogebraCommonMainAppCompanion *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getCompanion])) storeViewCreators];
    oldLabel = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] && [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class])) isDefined]) {
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) registerFunctionVariableWithNSString:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class])) getFunction])) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
    newLabel = [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(newValue)) getLabel];
    if (newLabel == nil) {
      newLabel = oldLabel;
      [newValue setLabelWithNSString:newLabel];
    }
    if ([newValue isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *n = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(newValue, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      if ([geo isGeoPoint]) [n setForcePoint];
      else if ([geo isGeoVector]) [n setForceVector];
      else if ([geo isGeoFunction]) [n setForceFunction];
    }
    if ([((NSString *) nil_chk(newLabel)) isEqual:oldLabel]) {
      result = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:newValue withBoolean:redefineIndependent];
      if (result != nil) {
        [((OrgGeogebraCommonMainAppCompanion *) nil_chk([app_ getCompanion])) recallViewCreators];
        if (storeUndoInfo) [app_ storeUndoInfo];
      }
      return IOSObjectArray_Get(nil_chk(result), 0);
    }
    else if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:newLabel]) {
      [newValue setLabelWithNSString:oldLabel];
      result = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:newValue withBoolean:redefineIndependent];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(result), 0))) setLabelWithNSString:newLabel];
      [((OrgGeogebraCommonMainAppCompanion *) nil_chk([app_ getCompanion])) recallViewCreators];
      if (storeUndoInfo) [app_ storeUndoInfo];
      return IOSObjectArray_Get(result, 0);
    }
    else {
      IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ @"NameUsed", newLabel } count:2 type:NSString_class_()];
      @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(loc_, str);
    }
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    @throw e;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$@", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", newValue));
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    @throw e;
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$@", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", newValue));
  }
  @finally {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) registerFunctionVariableWithNSString:nil];
  }
}

- (IOSObjectArray *)processAlgebraCommandWithNSString:(NSString *)cmd
                                          withBoolean:(jboolean)storeUndo {
  @try {
    return [self processAlgebraCommandNoExceptionHandlingWithNSString:cmd withBoolean:storeUndo withBoolean:YES withBoolean:NO withBoolean:NO];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[e getMessage]];
    return nil;
  }
}

- (IOSObjectArray *)processAlgebraCommandNoExceptionsWithNSString:(NSString *)cmd
                                                      withBoolean:(jboolean)storeUndo {
  @try {
    return [self processAlgebraCommandNoExceptionHandlingWithNSString:cmd withBoolean:storeUndo withBoolean:YES withBoolean:NO withBoolean:NO];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (IOSObjectArray *)processAlgebraCommandNoExceptionsOrErrorsWithNSString:(NSString *)str
                                                              withBoolean:(jboolean)storeUndo {
  @try {
    return [self processAlgebraCommandNoExceptionHandlingWithNSString:str withBoolean:storeUndo withBoolean:NO withBoolean:NO withBoolean:NO];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    return nil;
  }
}

- (IOSObjectArray *)processAlgebraCommandNoExceptionHandlingWithNSString:(NSString *)cmd
                                                             withBoolean:(jboolean)storeUndo
                                                             withBoolean:(jboolean)allowErrorDialog
                                                             withBoolean:(jboolean)throwMyError
                                                             withBoolean:(jboolean)autoCreateSliders {
  return [self processAlgebraCommandNoExceptionHandlingWithNSString:cmd withBoolean:storeUndo withBoolean:allowErrorDialog withBoolean:throwMyError withBoolean:autoCreateSliders withOrgGeogebraCommonUtilAsyncOperation:nil];
}

- (IOSObjectArray *)processAlgebraCommandNoExceptionHandlingWithNSString:(NSString *)cmd
                                                             withBoolean:(jboolean)storeUndo
                                                             withBoolean:(jboolean)allowErrorDialog
                                                             withBoolean:(jboolean)throwMyError
                                                             withBoolean:(jboolean)autoCreateSliders
                                 withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback0 {
  IOSObjectArray *rett;
  if (((jint) [((NSString *) nil_chk(cmd)) length]) > 0 && [cmd charAtWithInt:0] == '<' && [cmd hasPrefix:@"<math"]) {
    rett = OrgGeogebraCommonKernelCommandsAlgebraProcessor_parseMathmlWithNSString_withBoolean_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, cmd, storeUndo, allowErrorDialog, throwMyError, autoCreateSliders, callback0);
    if (rett != nil && callback0 != nil) {
      [callback0 callbackWithId:rett];
    }
    return rett;
  }
  OrgGeogebraCommonKernelArithmeticValidExpression *ve;
  @try {
    ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:cmd];
    OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *collecter = new_OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init();
    (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:collecter];
    JavaUtilTreeSet *undefinedVariables = [collecter getResult];
    OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables *fvCollecter = new_OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init();
    (void) [ve traverseWithOrgGeogebraCommonKernelArithmeticTraversing:fvCollecter];
    JavaUtilArrayList *fvTree = [fvCollecter getResult];
    OrgGeogebraCommonKernelArithmeticFunctionVariable *fvX = nil;
    id<JavaUtilIterator> fvIt = [((JavaUtilArrayList *) nil_chk(fvTree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(fvIt)) hasNext]) {
      OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = [fvIt next];
      if ([@"x" isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) getLabel]]) {
        fvX = fv;
        break;
      }
    }
    if (fvX == nil) {
      fvX = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"x");
    }
    IOSObjectArray *ret = OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(self, ve, undefinedVariables);
    if (ret != nil) {
      if (callback0 != nil) {
        [callback0 callbackWithId:ret];
      }
      return ret;
    }
    if ([((JavaUtilTreeSet *) nil_chk(undefinedVariables)) size] > 0) {
      IOSObjectArray *geoElements = nil;
      @try {
        geoElements = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
        if (storeUndo && geoElements != nil) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
      }
      @catch (JavaLangThrowable *ex) {
        [((JavaLangThrowable *) nil_chk(ex)) printStackTrace];
      }
      if (geoElements != nil) {
        [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) registerFunctionVariableWithNSString:nil];
        if (callback0 != nil) {
          [callback0 callbackWithId:geoElements];
        }
        return geoElements;
      }
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      JavaUtilArrayList *toRemove = new_JavaUtilArrayList_init();
      id<JavaUtilIterator> it2 = [toRemove iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
        [undefinedVariables removeWithId:[it2 next]];
      }
      id<JavaUtilIterator> it = [undefinedVariables iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        NSString *label = [it next];
        if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:label] == nil) {
          OrgGeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$$", @"not found", label));
          (void) [sb appendWithNSString:label];
          (void) [sb appendWithNSString:@", "];
        }
        else {
          OrgGeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$$", @"found", label));
        }
      }
      if ([((NSString *) nil_chk([sb description])) hasSuffix:@", "]) {
        [sb setLengthWithInt:[sb length] - 2];
      }
      if ([sb length] > 0) {
        if (!autoCreateSliders) {
          rett = OrgGeogebraCommonKernelCommandsAlgebraProcessor_tryReplacingProductsWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, ve);
          if (callback0 != nil && rett != nil) {
            [callback0 callbackWithId:rett];
          }
          return rett;
        }
        if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil) {
          OrgGeogebraCommonUtilAsyncOperation *callback = nil;
          if (callback0 != nil) {
            OrgGeogebraCommonKernelArithmeticValidExpression *ve2 = ve;
            callback = new_OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_withOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, ve2, storeUndo, allowErrorDialog, throwMyError, callback0);
          }
          jboolean autoCreateSlidersAnswer = [((id<OrgGeogebraCommonMainGuiManagerInterface>) nil_chk([self->app_ getGuiManager])) checkAutoCreateSlidersWithNSString:[sb description] withOrgGeogebraCommonUtilAsyncOperation:callback];
          if (!autoCreateSlidersAnswer) {
            return nil;
          }
        }
      }
      [self replaceUndefinedVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (allowErrorDialog) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:JreStrcat("$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", cmd)];
      return nil;
    }
    @throw new_OrgGeogebraCommonKernelCommandsMyException_initWithNSString_withInt_(JreStrcat("$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", cmd), OrgGeogebraCommonKernelCommandsMyException_INVALID_INPUT);
  }
  @catch (OrgGeogebraCommonMainBracketsError *e) {
    [((OrgGeogebraCommonMainBracketsError *) nil_chk(e)) printStackTrace];
    if (allowErrorDialog) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[e getLocalizedMessage]];
      return nil;
    }
    @throw new_OrgGeogebraCommonKernelCommandsMyException_initWithOrgGeogebraCommonMainMyError_withInt_(e, OrgGeogebraCommonKernelCommandsMyException_IMBALANCED_BRACKETS);
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (allowErrorDialog) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:JreStrcat("$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", cmd)];
      return nil;
    }
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", cmd));
  }
  IOSObjectArray *geos = [self processValidExpressionWithBoolean:storeUndo withBoolean:allowErrorDialog withBoolean:throwMyError withOrgGeogebraCommonKernelArithmeticValidExpression:ve];
  if (callback0 != nil) [callback0 callbackWithId:geos];
  return geos;
}

- (IOSObjectArray *)checkParametricEquationWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                            withJavaUtilTreeSet:(JavaUtilTreeSet *)undefinedVariables {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(self, ve, undefinedVariables);
}

- (IOSObjectArray *)tryReplacingProductsWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_tryReplacingProductsWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, ve);
}

- (IOSObjectArray *)parseMathmlWithNSString:(NSString *)cmd
                                withBoolean:(jboolean)storeUndo
                                withBoolean:(jboolean)allowErrorDialog
                                withBoolean:(jboolean)throwMyError
                                withBoolean:(jboolean)autoCreateSliders
    withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)callback0 {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_parseMathmlWithNSString_withBoolean_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, cmd, storeUndo, allowErrorDialog, throwMyError, autoCreateSliders, callback0);
}

- (IOSObjectArray *)processValidExpressionWithBoolean:(jboolean)storeUndo
                                          withBoolean:(jboolean)allowErrorDialog
                                          withBoolean:(jboolean)throwMyError
 withOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve {
  IOSObjectArray *geoElements = nil;
  @try {
    geoElements = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    if (storeUndo && geoElements != nil) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (allowErrorDialog) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
      [e printStackTrace];
    }
    else if (throwMyError) {
      @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_withNSString_withJavaLangThrowable_(loc_, [e getLocalizedMessage], [e getcommandName], e);
    }
    return nil;
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    @throw e;
  }
  @catch (JavaLangException *ex) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"Exception");
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
    @throw new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"Error"], @":\n", [ex getLocalizedMessage]));
  }
  @finally {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) registerFunctionVariableWithNSString:nil];
  }
  return geoElements;
}

- (void)replaceUndefinedVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve {
  OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables *replacer = new_OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
  (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:replacer];
}

- (jdouble)evaluateToDoubleWithNSString:(NSString *)str {
  return [self evaluateToDoubleWithNSString:str withBoolean:NO];
}

- (jdouble)evaluateToDoubleWithNSString:(NSString *)str
                            withBoolean:(jboolean)suppressErrors {
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseExpressionWithNSString:str];
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) resolveVariables];
    id<OrgGeogebraCommonKernelArithmeticNumberValue> nv = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([en evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
    return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(nv)) getDouble];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    return JavaLangDouble_NaN;
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
    return JavaLangDouble_NaN;
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    return JavaLangDouble_NaN;
  }
}

- (OrgGeogebraCommonKernelGeosGeoBoolean *)evaluateToBooleanWithNSString:(NSString *)str
                                                             withBoolean:(jboolean)showError {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoBoolean *bool_ = nil;
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    bool_ = (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(nil_chk(temp), 0), [OrgGeogebraCommonKernelGeosGeoBoolean class]);
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    if (showError) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (showError) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (showError) {
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
    }
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return bool_;
}

- (OrgGeogebraCommonKernelGeosGeoList *)evaluateToListWithNSString:(NSString *)str {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoList *list = nil;
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    if ([IOSObjectArray_Get(nil_chk(temp), 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) {
      list = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(temp, 0), [OrgGeogebraCommonKernelGeosGeoList class]);
    }
    else {
      OrgGeogebraCommonMainApp_errorWithNSString_(@"return value was not a list");
    }
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return list;
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)evaluateToFunctionWithNSString:(NSString *)str
                                                               withBoolean:(jboolean)suppressErrors {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoFunction *func = nil;
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(temp), 0))) isGeoFunctionable]) {
      id<OrgGeogebraCommonKernelGeosGeoFunctionable> f = (id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(temp, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable));
      func = [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(f)) getGeoFunction];
    }
    else if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return func;
}

- (OrgGeogebraCommonKernelGeosGeoFunctionNVar *)evaluateToFunctionNVarWithNSString:(NSString *)str
                                                                       withBoolean:(jboolean)suppressErrors {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *func = nil;
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    if ([IOSObjectArray_Get(nil_chk(temp), 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunctionNVar class]]) {
      func = (OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(temp, 0), [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]);
    }
    else if ([IOSObjectArray_Get(temp, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
      IOSObjectArray *funVars;
      if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(temp, 0), [OrgGeogebraCommonKernelGeosGeoFunction class])))) isFunctionOfY]) {
        funVars = [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(temp, 0), [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunction])) getFunctionVariable], new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") } count:2 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
      }
      else {
        funVars = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"y"), [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(temp, 0), [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunction])) getFunctionVariable] } count:2 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
      }
      OrgGeogebraCommonKernelArithmeticFunctionNVar *fn = new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(temp, 0), [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunctionExpression], funVars);
      func = new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(cons_, fn);
    }
    else if ([IOSObjectArray_Get(temp, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
      IOSObjectArray *funVars = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"x"), new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") } count:2 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
      OrgGeogebraCommonKernelArithmeticFunctionNVar *fn = new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(temp, 0)), funVars);
      func = new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(cons_, fn);
    }
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return func;
}

- (id<OrgGeogebraCommonKernelGeosGeoNumberValue>)evaluateToNumericWithNSString:(NSString *)str
                                                                   withBoolean:(jboolean)suppressErrors {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  id<OrgGeogebraCommonKernelGeosGeoNumberValue> num = nil;
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    num = (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(temp), 0), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue));
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return num;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)evaluateToPointWithNSString:(NSString *)str
                                                                 withBoolean:(jboolean)showErrors
                                                                 withBoolean:(jboolean)suppressLabels {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  if (suppressLabels) {
    [cons_ setSuppressLabelCreationWithBoolean:YES];
  }
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = nil;
  IOSObjectArray *temp = nil;
  @try {
      NSLog(@"%@",str);
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) setForcePoint];
    }
    temp = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    p = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(temp), 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    if (showErrors) {
      OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
    }
  }
  @catch (JavaLangException *e) {
    if (showErrors) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    if (showErrors) {
      [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
    }
  }
  @catch (JavaLangError *e) {
    if (showErrors) {
      [((JavaLangError *) nil_chk(e)) printStackTrace];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  if (suppressLabels) {
    [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  return p;
}

- (OrgGeogebraCommonKernelGeosGeoText *)evaluateToTextWithNSString:(NSString *)str
                                                       withBoolean:(jboolean)createLabel
                                                       withBoolean:(jboolean)showErrors {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:!createLabel];
  OrgGeogebraCommonKernelGeosGeoText *text = nil;
  IOSObjectArray *temp = nil;
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    temp = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(nil_chk(temp), 0), [OrgGeogebraCommonKernelGeosGeoText class]);
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    if (showErrors) {
      OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
    }
  }
  @catch (JavaLangException *e) {
    if (showErrors) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    if (showErrors) {
      [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
    }
  }
  @catch (JavaLangError *e) {
    if (showErrors) {
      [((JavaLangError *) nil_chk(e)) printStackTrace];
      [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return text;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)evaluateToGeoElementWithNSString:(NSString *)str
                                                                withBoolean:(jboolean)showErrors {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  @try {
    OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    geo = IOSObjectArray_Get(nil_chk(temp), 0);
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (showErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (showErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithOrgGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (showErrors) [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return geo;
}

- (NSString *)parseLabelWithNSString:(NSString *)label {
  return [((id<OrgGeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseLabelWithNSString:label];
}

- (IOSObjectArray *)processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve {
  return [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve withBoolean:YES];
}

- (IOSObjectArray *)processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                                   withBoolean:(jboolean)redefineIndependent {
  IOSObjectArray *labels = [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabels];
  OrgGeogebraCommonKernelGeosGeoElement *replaceable = nil;
  if (labels != nil && labels->size_ > 0) {
    jboolean firstTime = YES;
    for (jint i = 0; i < labels->size_; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:IOSObjectArray_Get(labels, i)];
      if (geo != nil) {
        if ([geo isFixed]) {
          IOSObjectArray *strs = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalAssignment", @"AssignmentToFixed", @":\n", [geo getLongDescription] } count:4 type:NSString_class_()];
          @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(loc_, strs);
        }
        if (firstTime) {
          replaceable = geo;
          firstTime = NO;
        }
      }
    }
  }
  IOSObjectArray *ret;
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  if (replaceable != nil) [cons_ setSuppressLabelCreationWithBoolean:YES];
  @try {
    ret = [self doProcessValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve];
    if (ret == nil) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Unhandled ValidExpression : ", ve));
      @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(loc_, JreStrcat("$$@", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", ve));
    }
  }
  @finally {
    [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  if (replaceable != nil && ((IOSObjectArray *) nil_chk(ret))->size_ > 0) {
    if (!redefineIndependent && [replaceable isChangeable] && !([replaceable isGeoText])) {
      @try {
        [replaceable setWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(ret, 0)];
        [replaceable updateRepaint];
        (void) IOSObjectArray_Set(ret, 0, replaceable);
      }
      @catch (JavaLangException *e) {
        NSString *errStr = JreStrcat("$C$$$", [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"IllegalAssignment"], 0x000a, [replaceable getLongDescription], @"     =     ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) getLongDescription]);
        @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(loc_, errStr);
      }
    }
    else {
      @try {
        if ([replaceable isIndependent] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) isIndependent] && OrgGeogebraCommonKernelCommandsAlgebraProcessor_compatibleTypesWithOrgGeogebraCommonPluginGeoClassEnum_withOrgGeogebraCommonPluginGeoClassEnum_([replaceable getGeoClassType], [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) getGeoClassType])) {
          [replaceable setWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(ret, 0)];
          [replaceable updateRepaint];
          (void) IOSObjectArray_Set(ret, 0, replaceable);
        }
        else {
          OrgGeogebraCommonKernelGeosGeoElement *newGeo = IOSObjectArray_Get(ret, 0);
          OrgGeogebraCommonKernelGeosGeoCasCell *cell = [replaceable getCorrespondingCasCell];
          if (cell != nil) {
            OrgGeogebraCommonKernelArithmeticValidExpression *vexp = (OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticValidExpression class]);
            [cell setAssignmentTypeWithOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DEFAULT()];
            [cell setInputWithNSString:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(vexp)) toAssignmentStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_() withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:[cell getAssignmentType]]];
            OrgGeogebraCommonKernelCommandsAlgebraProcessor_processCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell_withBoolean_(self, cell, NO);
          }
          else {
            [cons_ replaceWithOrgGeogebraCommonKernelGeosGeoElement:replaceable withOrgGeogebraCommonKernelGeosGeoElement:newGeo];
          }
          NSString *newLabel = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) isLabelSet] ? [newGeo getLabelSimple] : [replaceable getLabelSimple];
          (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:newLabel]);
        }
      }
      @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
        @throw e;
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
        @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(loc_, @"ReplaceFailed");
      }
      @catch (OrgGeogebraCommonMainMyError *e) {
        [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
        @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(loc_, @"ReplaceFailed");
      }
    }
  }
  return ret;
}

+ (jboolean)compatibleTypesWithOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)type
                           withOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)type2 {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_compatibleTypesWithOrgGeogebraCommonPluginGeoClassEnum_withOrgGeogebraCommonPluginGeoClassEnum_(type, type2);
}

- (IOSObjectArray *)doProcessValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve {
  IOSObjectArray *ret = nil;
  if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    ret = [self processExpressionNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticExpressionNode class])];
    if (ret != nil && ret->size_ > 0 && [IOSObjectArray_Get(ret, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoScriptAction class]]) {
      [((OrgGeogebraCommonKernelGeosGeoScriptAction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoScriptAction *) check_class_cast(IOSObjectArray_Get(ret, 0), [OrgGeogebraCommonKernelGeosGeoScriptAction class])))) perform];
      return [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if (ret != nil && ret->size_ > 0 && [IOSObjectArray_Get(ret, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) {
      jint actions = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(ret, 0), [OrgGeogebraCommonKernelGeosGeoList class])))) performScriptActions];
      if (actions > 0) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) remove];
        return [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
    }
  }
  else if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    ret = [((OrgGeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) processCommandWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticCommand class]) withBoolean:YES];
  }
  else if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
    ret = OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_(self, (OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class]));
  }
  else if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]]) {
    ret = OrgGeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithOrgGeogebraCommonKernelArithmeticFunction_(self, (OrgGeogebraCommonKernelArithmeticFunction *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticFunction class]));
  }
  else if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    ret = [self processFunctionNVarWithOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])];
  }
  return ret;
}

- (IOSObjectArray *)processFunctionWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithOrgGeogebraCommonKernelArithmeticFunction_(self, fun);
}

- (IOSObjectArray *)processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp
                                            withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                           withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                    withNSString:(NSString *)label {
  if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:ev] && [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getMode] != OrgGeogebraCommonKernelKernel_COORD_COMPLEX) {
    OrgGeogebraCommonKernelGeosGeoNumeric *loc = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons_);
    [loc setLocalVariableLabelWithNSString:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) getSetVarString]];
    (void) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv withOrgGeogebraCommonKernelArithmeticExpressionValue:loc];
    OrgGeogebraCommonKernelArithmeticExpressionNode *cx = [self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withInt:0];
    OrgGeogebraCommonKernelArithmeticExpressionNode *cy = [self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withInt:1];
    IOSObjectArray *coefX = [IOSObjectArray newArrayWithLength:5 type:OrgGeogebraCommonKernelArithmeticExpressionValue_class_()], *coefY = [IOSObjectArray newArrayWithLength:5 type:OrgGeogebraCommonKernelArithmeticExpressionValue_class_()];
    if (OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, cx, coefX, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0), loc) && OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, cy, coefY, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0), loc)) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *a, *b, *c, *d, *xx, *xy, *yy;
      OrgGeogebraCommonKernelArithmeticExpressionNode *x = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"x") wrap])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 0))];
      OrgGeogebraCommonKernelArithmeticExpressionNode *y = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") wrap])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 0))];
      if (IOSObjectArray_Get(coefX, 1) != nil || IOSObjectArray_Get(coefX, 2) != nil) {
        a = OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 1));
        b = OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 2));
        c = OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 1));
        d = OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 2));
        OrgGeogebraCommonUtilDebugLog_debugWithId_(a);
        OrgGeogebraCommonUtilDebugLog_debugWithId_(b);
        xx = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(c)) powerWithDouble:2])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(d)) powerWithDouble:2]])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:x])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:x];
        xy = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:a])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[d multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:b]])) multiplyWithDouble:-2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:x])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:y];
        yy = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(a)) powerWithDouble:2])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(b)) powerWithDouble:2]])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:y])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:y];
      }
      else {
        a = OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 3));
        b = OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 4));
        c = OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 3));
        d = OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 4));
        xx = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(c)) powerWithDouble:2])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(d)) powerWithDouble:2]])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:x])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:x];
        xy = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:a])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[d multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:b]])) multiplyWithDouble:-2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:x])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:y];
        yy = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(a)) powerWithDouble:2])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(b)) powerWithDouble:2]])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:y])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:y];
      }
      OrgGeogebraCommonKernelArithmeticExpressionNode *den = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(a)) powerWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(d)) powerWithDouble:2]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(b)) powerWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(c)) powerWithDouble:2]]])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([a multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:b])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:c])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:d])) multiplyWithDouble:2]];
      OrgGeogebraCommonKernelArithmeticEquation *eq = new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(xx)) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:xy])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:yy])) wrap], den);
      [eq initEquation];
      return [self processConicWithOrgGeogebraCommonKernelArithmeticEquation:eq];
    }
    coefX = [self arrayOfZerosWithInt:coefX->size_];
    coefY = [self arrayOfZerosWithInt:coefY->size_];
    jint degX = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:cx withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) withOrgGeogebraCommonKernelGeosGeoNumeric:loc];
    jint degY = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:cy withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefY withOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) withOrgGeogebraCommonKernelGeosGeoNumeric:loc];
    if ((degX >= 0 && degY >= 0) && (degX < 2 && degY < 2)) {
      OrgGeogebraCommonKernelArithmeticFunctionVariable *px = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"x");
      OrgGeogebraCommonKernelArithmeticFunctionVariable *py = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"y");
      OrgGeogebraCommonKernelArithmeticEquation *eq = new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(coefX), 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:py])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(coefY), 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:px]], [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 0)])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 0))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 1)]]);
      [eq setForceLine];
      [eq initEquation];
      [eq setLabelWithNSString:label];
      IOSObjectArray *line = [self processLineWithOrgGeogebraCommonKernelArithmeticEquation:eq];
      [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(line), 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND))))) setToParametricWithNSString:[fv getSetVarString]];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(line, 0))) update];
      return line;
    }
    else if (degX >= 0 && degY >= 0) {
      OrgGeogebraCommonKernelArithmeticFunctionVariable *px = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"x");
      OrgGeogebraCommonKernelArithmeticFunctionVariable *py = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"y");
      OrgGeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("@C@C@", IOSObjectArray_Get(nil_chk(coefX), 2), ',', IOSObjectArray_Get(coefX, 1), ',', IOSObjectArray_Get(coefX, 0)));
      OrgGeogebraCommonKernelArithmeticExpressionNode *t = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([px wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(coefY), 2)])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([py wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 2))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 0)]])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 2))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 0)]];
      OrgGeogebraCommonKernelArithmeticExpressionNode *d = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 2)])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)]];
      OrgGeogebraCommonKernelArithmeticEquation *eq;
      eq = new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(d)) powerWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:px])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([d powerWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:py])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 2)]], [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(t)) powerWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 2))) wrap])) powerWithDouble:2])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 2))) wrap])) powerWithDouble:2]]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([t multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 2)])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)]]])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:d]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([d powerWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 0))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 2)])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 0))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)]]]]);
      [eq initEquation];
      return [self processConicWithOrgGeogebraCommonKernelArithmeticEquation:eq];
    }
    OrgGeogebraCommonKernelAlgosAlgoDependentNumber *nx = new_OrgGeogebraCommonKernelAlgosAlgoDependentNumber_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cx, NO);
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:nx];
    OrgGeogebraCommonKernelAlgosAlgoDependentNumber *ny = new_OrgGeogebraCommonKernelAlgosAlgoDependentNumber_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cy, NO);
    [cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:ny];
    OrgGeogebraCommonKernelGeosGeoNumeric *from = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, -10);
    OrgGeogebraCommonKernelGeosGeoNumeric *to = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, 10);
    OrgGeogebraCommonKernelAlgosAlgoCurveCartesian *ac = new_OrgGeogebraCommonKernelAlgosAlgoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValueArray_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, [IOSObjectArray newArrayWithObjects:(id[]){ [nx getNumber], [ny getNumber] } count:2 type:OrgGeogebraCommonKernelArithmeticNumberValue_class_()], loc, from, to);
    return [ac getOutput];
  }
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"InvalidFunction:", [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getLocalization], @"InvalidFunction");
}

- (IOSObjectArray *)arrayOfZerosWithInt:(jint)length {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:length type:OrgGeogebraCommonKernelArithmeticExpressionValue_class_()];
  for (jint i = 0; i < length; i++) {
    (void) IOSObjectArray_Set(ret, i, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0));
  }
  return ret;
}

- (jint)getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)cx
               withOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                     withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)mult
                               withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)loc2 {
  if (![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(cx)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:loc2]) {
    OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 0, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(mult)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:cx]);
    return 0;
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_PLUS()) {
    jint deg1 = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionNode:mult withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
    jint deg2 = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getRightTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionNode:mult withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
    if (deg1 < 0 || deg2 < 0) {
      return -1;
    }
    return JavaLangMath_maxWithInt_withInt_(deg1, deg2);
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_MINUS()) {
    jint deg1 = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionNode:mult withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
    jint deg2 = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getRightTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(mult)) multiplyWithDouble:-1] withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
    if (deg1 < 0 || deg2 < 0) {
      return -1;
    }
    return JavaLangMath_maxWithInt_withInt_(deg1, deg2);
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()) {
    if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:loc2]) {
      return [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getRightTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(mult)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap]] withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
    }
    else if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:loc2]) {
      return [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:coefX withOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(mult)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) unwrap]] withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
    }
    else {
      IOSObjectArray *left = [self arrayOfZerosWithInt:3];
      IOSObjectArray *right = [self arrayOfZerosWithInt:3];
      jint degL = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:left withOrgGeogebraCommonKernelArithmeticExpressionNode:mult withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
      jint degR = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getRightTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:right withOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1) withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
      if (degL == 1 && degR == 1) {
        OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 0, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(left), 0))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(right), 0)]);
        OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(right, 0)]);
        OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 0))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(right, 1)]);
        OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 2, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(right, 1)]);
        return 2;
      }
      return -1;
    }
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_POWER()) {
    if ([[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]] && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(2, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) evaluateDouble])) {
      IOSObjectArray *left = [self arrayOfZerosWithInt:3];
      jint degL = [self getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withOrgGeogebraCommonKernelArithmeticExpressionValueArray:left withOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1) withOrgGeogebraCommonKernelGeosGeoNumeric:loc2];
      if (degL == 1) {
        OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 0, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(left), 0))) wrap])) powerWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:mult]);
        OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 1))) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(left, 0)])) multiplyWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:mult]);
        OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 2, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 1))) wrap])) powerWithDouble:2])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:mult]);
        return 2;
      }
      return -1;
    }
  }
  else if ([cx unwrap] == loc2) {
    OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, mult);
    return 1;
  }
  return -1;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)exprWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (jboolean)getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)cx
                   withOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                         withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)scale_
                                   withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)var {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, cx, coefX, scale_, var);
}

- (void)addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                                                             withInt:(jint)i
                 withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)scale_ {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, i, scale_);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp
                                                                                                             withInt:(jint)i {
  IOSObjectArray *ops = [IOSObjectArray newArrayWithObjects:(id[]){ OrgGeogebraCommonPluginOperationEnum_get_XCOORD(), OrgGeogebraCommonPluginOperationEnum_get_YCOORD(), OrgGeogebraCommonPluginOperationEnum_get_ZCOORD() } count:3 type:OrgGeogebraCommonPluginOperationEnum_class_()];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) isLeaf]) {
    if ([[exp getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]]) {
      return i == 0 ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast([exp getLeft], [OrgGeogebraCommonKernelArithmeticMyVecNode class])))) getX])) wrap] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast([exp getLeft], [OrgGeogebraCommonKernelArithmeticMyVecNode class])))) getY])) wrap];
    }
    if ([[exp getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class]]) {
      return i == 0 ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast([exp getLeft], [OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class])))) getX])) wrap] : (i == 1 ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast([exp getLeft], [OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class])))) getY])) wrap] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast([exp getLeft], [OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class])))) getZ])) wrap]);
    }
  }
  switch ([[exp getOperation] ordinal]) {
    case OrgGeogebraCommonPluginOperation_PLUS:
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:[exp getLeftTree] withInt:i])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:[exp getRightTree] withInt:i]];
    case OrgGeogebraCommonPluginOperation_MINUS:
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:[exp getLeftTree] withInt:i])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:[exp getRightTree] withInt:i]];
    case OrgGeogebraCommonPluginOperation_MULTIPLY:
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getRight])) evaluatesToNonComplex2DVector] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getRight])) evaluatesTo3DVector]) {
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:[exp getRightTree] withInt:i])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[exp getLeft]];
    }
    else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getLeft])) evaluatesToNonComplex2DVector] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getLeft])) evaluatesTo3DVector]) {
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:[exp getLeftTree] withInt:i])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[exp getRight]];
    }
    default:
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, exp, IOSObjectArray_Get(ops, i), nil);
  }
}

+ (jint)getDirectionWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)enLeft {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithOrgGeogebraCommonKernelArithmeticExpressionNode_(enLeft);
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)DependentIntervalWithNSString:(NSString *)label
                            withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentIntervalWithNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, label, fun);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)DependentGeoCopyWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)origGeoNode {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, label, origGeoNode);
}

- (IOSObjectArray *)processFunctionNVarWithOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)fun {
  if (![((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) initFunction]) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"InvalidFunction:", [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getLocalization], @"InvalidFunction");
  }
  NSString *label = [fun getLabel];
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray *vars = [fun getGeoElementVariables];
  jboolean isIndependent = (vars == nil || vars->size_ == 0);
  if (isIndependent) {
    (void) IOSObjectArray_Set(ret, 0, new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(cons_, label, fun));
  }
  else {
    (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentFunctionNVarWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, label, fun));
  }
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoFunctionNVar *)DependentFunctionNVarWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)fun {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentFunctionNVarWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, label, fun);
}

- (IOSObjectArray *)processEquationWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_(self, equ);
}

- (IOSObjectArray *)processEquationWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ
                                                                     withBoolean:(jboolean)allowConstant {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_withBoolean_(self, equ, allowConstant);
}

- (void)checkNoTermsInZWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  if (![((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getNormalForm])) isFreeOfWithChar:'z']) [equ setIsPolynomialWithBoolean:NO];
}

- (IOSObjectArray *)processLineWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  jdouble a = 0, b = 0, c = 0;
  OrgGeogebraCommonKernelGeosGeoLine *line;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  OrgGeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isExplicit = [equ isExplicitWithNSString:@"y"];
  jboolean isIndependent = [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant];
  if (isIndependent) {
    a = [lhs getCoeffValueWithNSString:@"x"];
    b = [lhs getCoeffValueWithNSString:@"y"];
    c = [lhs getCoeffValueWithNSString:@""];
    line = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, label, a, b, c);
  }
  else line = OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentLineWithNSString_withOrgGeogebraCommonKernelArithmeticEquation_(self, label, equ);
  if (isExplicit) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line)) setToExplicit];
    [line updateRepaint];
  }
  (void) IOSObjectArray_Set(ret, 0, line);
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)DependentLineWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentLineWithNSString_withOrgGeogebraCommonKernelArithmeticEquation_(self, label, equ);
}

- (IOSObjectArray *)processConicWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  jdouble a = 0, b = 0, c = 0, d = 0, e = 0, f = 0;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  OrgGeogebraCommonKernelGeosGeoConic *conic;
  NSString *label = [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  OrgGeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isExplicit = [equ isExplicitWithNSString:@"y"];
  jboolean isSpecific = !isExplicit && ([equ isExplicitWithNSString:@"yy"] || [equ isExplicitWithNSString:@"xx"]);
  jboolean isIndependent = [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant];
  if (isIndependent) {
    a = [lhs getCoeffValueWithNSString:@"xx"];
    b = [lhs getCoeffValueWithNSString:@"xy"];
    c = [lhs getCoeffValueWithNSString:@"yy"];
    d = [lhs getCoeffValueWithNSString:@"x"];
    e = [lhs getCoeffValueWithNSString:@"y"];
    f = [lhs getCoeffValueWithNSString:@""];
    IOSDoubleArray *coeffs = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ a, b, c, d, e, f } count:6];
    conic = new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(cons_, label, coeffs);
  }
  else conic = OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentConicWithNSString_withOrgGeogebraCommonKernelArithmeticEquation_(self, label, equ);
  if (isExplicit) {
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(conic)) setToExplicit];
    [conic updateRepaint];
  }
  else if (isSpecific || [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(conic)) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE) {
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(conic)) setToSpecific];
    [conic updateRepaint];
  }
  (void) IOSObjectArray_Set(ret, 0, conic);
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoConic *)DependentConicWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentConicWithNSString_withOrgGeogebraCommonKernelArithmeticEquation_(self, label, equ);
}

- (IOSObjectArray *)processImplicitPolyWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  OrgGeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isIndependent = ![equ isFunctionDependent] && [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant] && ![equ hasVariableDegree];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *poly;
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  if (isIndependent) {
    poly = new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_(cons_, label, lhs);
    [poly setUserInputWithOrgGeogebraCommonKernelArithmeticValidExpression:equ];
    geo = poly;
  }
  else {
    OrgGeogebraCommonKernelImplicitAlgoDependentImplicitPoly *algo = new_OrgGeogebraCommonKernelImplicitAlgoDependentImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticEquation_withBoolean_(cons_, label, equ, YES);
    geo = [algo getGeo];
    if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoUserInputElement class]]) {
      [((OrgGeogebraCommonKernelGeosGeoUserInputElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoUserInputElement class])))) setUserInputWithOrgGeogebraCommonKernelArithmeticValidExpression:equ];
    }
  }
  (void) IOSObjectArray_Set(ret, 0, geo);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  return ret;
}

- (IOSObjectArray *)processImplicitCurveWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  jboolean isIndependent = [equ getVariables] == nil || [((JavaUtilHashSet *) nil_chk([equ getVariables])) size] == 0;
  OrgGeogebraCommonKernelImplicitGeoImplicitCurve *poly;
  OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
  if (isIndependent) {
    poly = new_OrgGeogebraCommonKernelImplicitGeoImplicitCurve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticEquation_(cons_, label, equ);
    geo = poly;
  }
  else {
    OrgGeogebraCommonKernelImplicitAlgoDependentImplicitCurve *algo = new_OrgGeogebraCommonKernelImplicitAlgoDependentImplicitCurve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticEquation_withBoolean_(cons_, label, equ, YES);
    geo = [algo getGeo];
  }
  (void) IOSObjectArray_Set(ret, 0, geo);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  return ret;
}

- (IOSObjectArray *)processExpressionNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)node {
  OrgGeogebraCommonKernelArithmeticExpressionNode *n = node;
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) isLeaf]) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> leaf = [n getLeft];
    if ([leaf isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
      OrgGeogebraCommonKernelArithmeticCommand *c = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(leaf, [OrgGeogebraCommonKernelArithmeticCommand class]);
      [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) setLabelsWithNSStringArray:[n getLabels]];
      return [((OrgGeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) processCommandWithOrgGeogebraCommonKernelArithmeticCommand:c withBoolean:YES];
    }
    else if ([leaf isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
      OrgGeogebraCommonKernelArithmeticEquation *eqn = (OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(leaf, [OrgGeogebraCommonKernelArithmeticEquation class]);
      [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(eqn)) setLabelsWithNSStringArray:[n getLabels]];
      return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_(self, eqn);
    }
    else if ([leaf isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]]) {
      OrgGeogebraCommonKernelArithmeticFunction *fun = (OrgGeogebraCommonKernelArithmeticFunction *) check_class_cast(leaf, [OrgGeogebraCommonKernelArithmeticFunction class]);
      [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) setLabelsWithNSStringArray:[n getLabels]];
      return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithOrgGeogebraCommonKernelArithmeticFunction_(self, fun);
    }
    else if ([leaf isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
      OrgGeogebraCommonKernelArithmeticFunctionNVar *fun = (OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(leaf, [OrgGeogebraCommonKernelArithmeticFunctionNVar class]);
      [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) setLabelsWithNSStringArray:[n getLabels]];
      return [self processFunctionNVarWithOrgGeogebraCommonKernelArithmeticFunctionNVar:fun];
    }
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> eval;
  [n resolveVariables];
  NSString *label = [n getLabel];
  if ([n containsFreeFunctionVariableWithNSString:nil]) {
    id<JavaUtilSet> fvSet = new_JavaUtilTreeSet_init();
    OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *fvc = OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_getCollectorWithJavaUtilSet_(fvSet);
    (void) [n traverseWithOrgGeogebraCommonKernelArithmeticTraversing:fvc];
    if ([fvSet size] == 1) {
      n = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(n, new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, [((id<JavaUtilIterator>) nil_chk([fvSet iterator])) next])));
    }
    else {
      IOSObjectArray *fvArray = [IOSObjectArray newArrayWithLength:[fvSet size] type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
      id<JavaUtilIterator> it = [fvSet iterator];
      jint i = 0;
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        (void) IOSObjectArray_Set(fvArray, i++, new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, [it next]));
      }
      n = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(n, fvArray));
    }
  }
  eval = [n evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([eval isKindOfClass:[OrgGeogebraCommonKernelArithmeticValidExpression class]] && label != nil) {
    [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(((OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast(eval, [OrgGeogebraCommonKernelArithmeticValidExpression class])))) setLabelWithNSString:label];
  }
  jboolean dollarLabelFound = NO;
  OrgGeogebraCommonKernelArithmeticExpressionNode *myNode = n;
  if ([myNode isLeaf]) myNode = [myNode getLeftTree];
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(eval)) isGeoElement] && [n getLabel] == nil && !([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([n getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_ELEMENT_OF()])) {
    {
      IOSObjectArray *ret;
      switch ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(myNode)) getOperation] ordinal]) {
        case OrgGeogebraCommonPluginOperation_$VAR_COL:
        case OrgGeogebraCommonPluginOperation_$VAR_ROW:
        case OrgGeogebraCommonPluginOperation_$VAR_ROW_COL:
        dollarLabelFound = YES;
        break;
        default:
        ret = [IOSObjectArray newArrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(eval, [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
    }
  }
  if ([OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:eval]) return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processBooleanWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, n, eval);
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:eval]) return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processNumberWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, n, eval);
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:eval]) return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processPointVectorWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, n, eval);
  else if ([OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:eval]) return [self processPointVector3DWithOrgGeogebraCommonKernelArithmeticExpressionNode:n withOrgGeogebraCommonKernelArithmeticExpressionValue:eval];
  else if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:eval]) return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processTextWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, n, eval);
  else if ([eval isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
    return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processListWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticMyList_(self, n, (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(eval, [OrgGeogebraCommonKernelArithmeticMyList class]));
  }
  else if ([eval isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]]) {
    return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithOrgGeogebraCommonKernelArithmeticFunction_(self, (OrgGeogebraCommonKernelArithmeticFunction *) check_class_cast(eval, [OrgGeogebraCommonKernelArithmeticFunction class]));
  }
  else if ([eval isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    return [self processFunctionNVarWithOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(eval, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])];
  }
  else if ([eval isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(myNode)) hasOperations]) {
    return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processListWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticMyList_(self, n, [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(eval, [OrgGeogebraCommonKernelGeosGeoList class])) getMyList]);
  }
  else if ([eval isGeoElement]) {
    if ([n getLabel] != nil || dollarLabelFound) {
      return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processGeoCopyWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, [n getLabel], n);
    }
  }
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@$@", @"Unhandled ExpressionNode: ", eval, @", ", [eval getClass]));
  return nil;
}

- (IOSObjectArray *)processNumberWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processNumberWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, n, evaluate);
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)DependentNumberWithNSString:(NSString *)label
                   withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root
                                                           withBoolean:(jboolean)isAngle {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentNumberWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, label, root, isAngle);
}

- (IOSObjectArray *)processListWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                       withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)evalList {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processListWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticMyList_(self, n, evalList);
}

- (OrgGeogebraCommonKernelGeosGeoList *)ListExpressionWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_ListExpressionWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, label, root);
}

- (IOSObjectArray *)processTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                              withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processTextWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, n, evaluate);
}

- (OrgGeogebraCommonKernelGeosGeoText *)DependentTextWithNSString:(NSString *)label
              withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentTextWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, label, root);
}

- (OrgGeogebraCommonKernelGeosGeoText *)TextWithNSString:(NSString *)label
                                            withNSString:(NSString *)text {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_TextWithNSString_withNSString_(self, label, text);
}

- (IOSObjectArray *)processBooleanWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processBooleanWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, n, evaluate);
}

- (IOSObjectArray *)processPointVectorWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processPointVectorWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, n, evaluate);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)DependentPointWithNSString:(NSString *)label
                withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root
                                                        withBoolean:(jboolean)complex {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentPointWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, label, root, complex);
}

- (OrgGeogebraCommonKernelGeosGeoVector *)DependentVectorWithNSString:(NSString *)label
                  withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentVectorWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, label, root);
}

- (IOSObjectArray *)processPointVector3DWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)n
                                       withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return nil;
}

- (IOSObjectArray *)processGeoCopyWithNSString:(NSString *)copyLabel
withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)origGeoNode {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processGeoCopyWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, copyLabel, origGeoNode);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)DependentGeoCopyWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)origGeoNode {
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, label, origGeoNode);
}

- (void)enableCAS {
  [((OrgGeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) initCASCommands];
}

- (void)showErrorWithNSString:(NSString *)key {
  [((OrgGeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:key]];
}

- (OrgGeogebraCommonKernelArithmeticMyStringBuffer *)getXBracket {
  if (xBracket_ == nil) xBracket_ = new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"x(");
  return xBracket_;
}

- (OrgGeogebraCommonKernelArithmeticMyStringBuffer *)getYBracket {
  if (yBracket_ == nil) yBracket_ = new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"y(");
  return yBracket_;
}

- (OrgGeogebraCommonKernelArithmeticMyStringBuffer *)getZBracket {
  if (zBracket_ == nil) zBracket_ = new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"z(");
  return zBracket_;
}

- (OrgGeogebraCommonKernelArithmeticMyStringBuffer *)getCloseBracket {
  if (closeBracket_ == nil) closeBracket_ = new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @")");
  return closeBracket_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelCommandsCommandDispatcher:", "AlgebraProcessor", NULL, 0x1, NULL, NULL },
    { "getSubCommandSetNameWithInt:", "getSubCommandSetName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isCommandAvailableWithNSString:", "isCommandAvailable", "Z", 0x1, NULL, NULL },
    { "processCommandWithOrgGeogebraCommonKernelArithmeticCommand:withBoolean:", "processCommand", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, "Lorg.geogebra.common.main.MyError;", NULL },
    { "processCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell:withBoolean:", "processCasCell", "V", 0x11, "Lorg.geogebra.common.main.MyError;", NULL },
    { "changeGeoElementWithOrgGeogebraCommonKernelGeosGeoElement:withNSString:withBoolean:withBoolean:", "changeGeoElement", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "checkParametricEquationFWithOrgGeogebraCommonKernelArithmeticValidExpression:withOrgGeogebraCommonKernelArithmeticValidExpression:", "checkParametricEquationF", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x2, NULL, NULL },
    { "changeGeoElementNoExceptionHandlingWithOrgGeogebraCommonKernelGeosGeoElement:withNSString:withBoolean:withBoolean:", "changeGeoElementNoExceptionHandling", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;Lorg.geogebra.common.main.MyError;", NULL },
    { "changeGeoElementNoExceptionHandlingWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelArithmeticValidExpression:withBoolean:withBoolean:", "changeGeoElementNoExceptionHandling", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;", NULL },
    { "processAlgebraCommandWithNSString:withBoolean:", "processAlgebraCommand", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "processAlgebraCommandNoExceptionsWithNSString:withBoolean:", "processAlgebraCommandNoExceptions", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "processAlgebraCommandNoExceptionsOrErrorsWithNSString:withBoolean:", "processAlgebraCommandNoExceptionsOrErrors", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "processAlgebraCommandNoExceptionHandlingWithNSString:withBoolean:withBoolean:withBoolean:withBoolean:", "processAlgebraCommandNoExceptionHandling", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;", NULL },
    { "processAlgebraCommandNoExceptionHandlingWithNSString:withBoolean:withBoolean:withBoolean:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:", "processAlgebraCommandNoExceptionHandling", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;", NULL },
    { "checkParametricEquationWithOrgGeogebraCommonKernelArithmeticValidExpression:withJavaUtilTreeSet:", "checkParametricEquation", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "tryReplacingProductsWithOrgGeogebraCommonKernelArithmeticValidExpression:", "tryReplacingProducts", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "parseMathmlWithNSString:withBoolean:withBoolean:withBoolean:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:", "parseMathml", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processValidExpressionWithBoolean:withBoolean:withBoolean:withOrgGeogebraCommonKernelArithmeticValidExpression:", "processValidExpression", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;", NULL },
    { "replaceUndefinedVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression:", "replaceUndefinedVariables", "V", 0x1, NULL, NULL },
    { "evaluateToDoubleWithNSString:", "evaluateToDouble", "D", 0x1, NULL, NULL },
    { "evaluateToDoubleWithNSString:withBoolean:", "evaluateToDouble", "D", 0x1, NULL, NULL },
    { "evaluateToBooleanWithNSString:withBoolean:", "evaluateToBoolean", "Lorg.geogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "evaluateToListWithNSString:", "evaluateToList", "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "evaluateToFunctionWithNSString:withBoolean:", "evaluateToFunction", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "evaluateToFunctionNVarWithNSString:withBoolean:", "evaluateToFunctionNVar", "Lorg.geogebra.common.kernel.geos.GeoFunctionNVar;", 0x1, NULL, NULL },
    { "evaluateToNumericWithNSString:withBoolean:", "evaluateToNumeric", "Lorg.geogebra.common.kernel.geos.GeoNumberValue;", 0x1, NULL, NULL },
    { "evaluateToPointWithNSString:withBoolean:withBoolean:", "evaluateToPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "evaluateToTextWithNSString:withBoolean:withBoolean:", "evaluateToText", "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "evaluateToGeoElementWithNSString:withBoolean:", "evaluateToGeoElement", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "parseLabelWithNSString:", "parseLabel", "Ljava.lang.String;", 0x1, "Lorg.geogebra.common.kernel.parser.ParseException;", NULL },
    { "processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:", "processValidExpression", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;Ljava.lang.Exception;", NULL },
    { "processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:withBoolean:", "processValidExpression", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;Ljava.lang.Exception;", NULL },
    { "compatibleTypesWithOrgGeogebraCommonPluginGeoClassEnum:withOrgGeogebraCommonPluginGeoClassEnum:", "compatibleTypes", "Z", 0xa, NULL, NULL },
    { "doProcessValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:", "doProcessValidExpression", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "processFunctionWithOrgGeogebraCommonKernelArithmeticFunction:", "processFunction", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticFunctionVariable:withNSString:", "processParametricFunction", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "arrayOfZerosWithInt:", "arrayOfZeros", "[Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "getPolyCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValueArray:withOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelGeosGeoNumeric:", "getPolyCoeffs", "I", 0x4, NULL, NULL },
    { "exprWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "expr", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValueArray:withOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelGeosGeoElement:", "getTrigCoeffs", "Z", 0x2, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray:withInt:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "add", "V", 0x2, NULL, NULL },
    { "computeCoordWithOrgGeogebraCommonKernelArithmeticExpressionNode:withInt:", "computeCoord", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x4, NULL, NULL },
    { "getDirectionWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "getDirection", "I", 0xa, NULL, NULL },
    { "DependentIntervalWithNSString:withOrgGeogebraCommonKernelArithmeticFunction:", "DependentInterval", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x12, NULL, NULL },
    { "DependentGeoCopyWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:", "DependentGeoCopy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "processFunctionNVarWithOrgGeogebraCommonKernelArithmeticFunctionNVar:", "processFunctionNVar", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "DependentFunctionNVarWithNSString:withOrgGeogebraCommonKernelArithmeticFunctionNVar:", "DependentFunctionNVar", "Lorg.geogebra.common.kernel.geos.GeoFunctionNVar;", 0x12, NULL, NULL },
    { "processEquationWithOrgGeogebraCommonKernelArithmeticEquation:", "processEquation", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, "Lorg.geogebra.common.main.MyError;", NULL },
    { "processEquationWithOrgGeogebraCommonKernelArithmeticEquation:withBoolean:", "processEquation", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, "Lorg.geogebra.common.main.MyError;", NULL },
    { "checkNoTermsInZWithOrgGeogebraCommonKernelArithmeticEquation:", "checkNoTermsInZ", "V", 0x4, NULL, NULL },
    { "processLineWithOrgGeogebraCommonKernelArithmeticEquation:", "processLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "DependentLineWithNSString:withOrgGeogebraCommonKernelArithmeticEquation:", "DependentLine", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x12, NULL, NULL },
    { "processConicWithOrgGeogebraCommonKernelArithmeticEquation:", "processConic", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "DependentConicWithNSString:withOrgGeogebraCommonKernelArithmeticEquation:", "DependentConic", "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x12, NULL, NULL },
    { "processImplicitPolyWithOrgGeogebraCommonKernelArithmeticEquation:", "processImplicitPoly", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processImplicitCurveWithOrgGeogebraCommonKernelArithmeticEquation:", "processImplicitCurve", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processExpressionNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "processExpressionNode", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "processNumberWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "processNumber", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "DependentNumberWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:withBoolean:", "DependentNumber", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x12, NULL, NULL },
    { "processListWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticMyList:", "processList", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "ListExpressionWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "ListExpression", "Lorg.geogebra.common.kernel.geos.GeoList;", 0x11, NULL, NULL },
    { "processTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "processText", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "DependentTextWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "DependentText", "Lorg.geogebra.common.kernel.geos.GeoText;", 0x12, NULL, NULL },
    { "TextWithNSString:withNSString:", "Text", "Lorg.geogebra.common.kernel.geos.GeoText;", 0x11, NULL, NULL },
    { "processBooleanWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "processBoolean", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processPointVectorWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "processPointVector", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "DependentPointWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:withBoolean:", "DependentPoint", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "DependentVectorWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "DependentVector", "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x12, NULL, NULL },
    { "processPointVector3DWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "processPointVector3D", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processGeoCopyWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "processGeoCopy", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "DependentGeoCopyWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "DependentGeoCopy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "enableCAS", NULL, "V", 0x1, NULL, NULL },
    { "showErrorWithNSString:", "showError", "V", 0x1, NULL, NULL },
    { "getXBracket", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", 0x1, NULL, NULL },
    { "getYBracket", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", 0x1, NULL, NULL },
    { "getZBracket", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", 0x1, NULL, NULL },
    { "getCloseBracket", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x14, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x14, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "app_", NULL, 0x10, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x12, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "parser_", NULL, 0x12, "Lorg.geogebra.common.kernel.parser.ParserInterface;", NULL, NULL,  },
    { "cmdDispatcher_", NULL, 0x14, "Lorg.geogebra.common.kernel.commands.CommandDispatcher;", NULL, NULL,  },
    { "mathmlParserGGB_", NULL, 0x2, "Lorg.geogebra.common.io.MathMLParser;", NULL, NULL,  },
    { "mathmlParserLaTeX_", NULL, 0x2, "Lorg.geogebra.common.io.MathMLParser;", NULL, NULL,  },
    { "xBracket_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", NULL, NULL,  },
    { "yBracket_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", NULL, NULL,  },
    { "zBracket_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", NULL, NULL,  },
    { "closeBracket_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsAlgebraProcessor = { 2, "AlgebraProcessor", "org.geogebra.common.kernel.commands", NULL, 0x1, 77, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsAlgebraProcessor;
}

@end

void OrgGeogebraCommonKernelCommandsAlgebraProcessor_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelCommandsCommandDispatcher *commandDispatcher) {
  (void) NSObject_init(self);
  self->xBracket_ = nil;
  self->yBracket_ = nil;
  self->zBracket_ = nil;
  self->closeBracket_ = nil;
  self->kernel_ = kernel;
  self->cons_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
  self->cmdDispatcher_ = commandDispatcher;
  self->app_ = [kernel getApplication];
  self->loc_ = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization];
  self->parser_ = [kernel getParser];
}

OrgGeogebraCommonKernelCommandsAlgebraProcessor *new_OrgGeogebraCommonKernelCommandsAlgebraProcessor_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelCommandsCommandDispatcher *commandDispatcher) {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor *self = [OrgGeogebraCommonKernelCommandsAlgebraProcessor alloc];
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, commandDispatcher);
  return self;
}

void OrgGeogebraCommonKernelCommandsAlgebraProcessor_processCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell_withBoolean_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelGeosGeoCasCell *casCell, jboolean isLastRow) {
  if ([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) isCircularDefinition]) {
    [casCell computeOutput];
    [casCell updateCascade];
    [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) showErrorWithNSString:@"CircularDefinition"];
    return;
  }
  OrgGeogebraCommonKernelAlgosAlgoElement *algoParent = [casCell getParentAlgorithm];
  jboolean prevFree = algoParent == nil;
  jboolean nowFree = ![casCell hasVariablesOrCommands];
  jboolean needsRedefinition = NO;
  jboolean needsConsUpdate = NO;
  if (prevFree) {
    if (nowFree) {
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:casCell withBoolean:YES];
      [casCell computeOutput];
      [casCell setLabelOfTwinGeo];
      needsRedefinition = NO;
    }
    else {
      if ([casCell isOutputEmpty] && ![casCell hasChildren]) {
        [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:casCell];
        (void) OrgGeogebraCommonKernelKernelCAS_DependentCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell_(casCell);
        needsRedefinition = NO;
        needsConsUpdate = !isLastRow;
      }
      else {
        needsRedefinition = YES;
      }
    }
  }
  else {
    if (nowFree) {
      needsRedefinition = YES;
    }
    else {
      needsRedefinition = YES;
    }
  }
  if (needsRedefinition) {
    @try {
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) changeCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell:casCell];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      [casCell setErrorWithNSString:@"RedefinitionFailed"];
    }
  }
  else {
    [casCell notifyAdd];
    [casCell updateCascade];
    if (needsConsUpdate) [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) updateCasCells];
  }
}

OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve, OrgGeogebraCommonKernelArithmeticValidExpression *fallback) {
  OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *collecter = new_OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init();
  (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:collecter];
  JavaUtilTreeSet *undefinedVariables = [collecter getResult];
  if ([((JavaUtilTreeSet *) nil_chk(undefinedVariables)) size] == 1) {
    @try {
      NSString *varName = [undefinedVariables first];
      OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, varName);
      OrgGeogebraCommonKernelArithmeticExpressionNode *exp = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ve deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(varName, fv, self->kernel_)])) wrap];
      [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) resolveVariables];
      jboolean flag = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
      [self->cons_ setSuppressLabelCreationWithBoolean:YES];
      IOSObjectArray *ret = [self processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withOrgGeogebraCommonKernelArithmeticExpressionValue:[exp evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withNSString:nil];
      [self->cons_ setSuppressLabelCreationWithBoolean:flag];
      if (ret != nil) {
        return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) wrap];
      }
    }
    @catch (JavaLangThrowable *t) {
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      OrgGeogebraCommonUtilDebugLog_debugWithNSString_(@"X is not parametric");
    }
  }
  return fallback;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve, JavaUtilTreeSet *undefinedVariables) {
  if ([((JavaUtilTreeSet *) nil_chk(undefinedVariables)) size] == 1 && [@"X" isEqual:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabel]]) {
    @try {
      NSString *varName = [undefinedVariables first];
      OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, varName);
      OrgGeogebraCommonKernelArithmeticExpressionNode *exp = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ve deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(varName, fv, self->kernel_)])) wrap];
      [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) resolveVariables];
      IOSObjectArray *ret = [self processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withOrgGeogebraCommonKernelArithmeticExpressionValue:[exp evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withNSString:nil];
      if (ret != nil) {
        return ret;
      }
    }
    @catch (JavaLangThrowable *t) {
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      OrgGeogebraCommonUtilDebugLog_debugWithNSString_(@"X is not parametric");
    }
  }
  else if ([undefinedVariables size] == 2 && [[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]] && [@"X" isEqual:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticEquation class])))) getLHS])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    @try {
      id<JavaUtilIterator> t = [undefinedVariables iterator];
      NSString *varName = [((id<JavaUtilIterator>) nil_chk(t)) next];
      if ([@"X" isEqual:varName]) {
        varName = [t next];
      }
      OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, varName);
      OrgGeogebraCommonKernelArithmeticExpressionNode *exp = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticEquation class])))) getRHS])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(varName, fv, self->kernel_)])) wrap];
      [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) resolveVariables];
      IOSObjectArray *ret = [self processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withOrgGeogebraCommonKernelArithmeticExpressionValue:[exp evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withNSString:[ve getLabel]];
      if (ret != nil) {
        return ret;
      }
    }
    @catch (JavaLangThrowable *t) {
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      OrgGeogebraCommonUtilDebugLog_debugWithNSString_(@"X is not parametric");
    }
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_tryReplacingProductsWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve) {
  OrgGeogebraCommonKernelArithmeticValidExpression *ve2 = (OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:new_OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_(self)], [OrgGeogebraCommonKernelArithmeticValidExpression class]);
  IOSObjectArray *ret = nil;
  @try {
    ret = [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:ve2];
  }
  @catch (JavaLangThrowable *t) {
  }
  return ret;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_parseMathmlWithNSString_withBoolean_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *cmd, jboolean storeUndo, jboolean allowErrorDialog, jboolean throwMyError, jboolean autoCreateSliders, OrgGeogebraCommonUtilAsyncOperation *callback0) {
  if (self->mathmlParserGGB_ == nil) {
    self->mathmlParserGGB_ = new_OrgGeogebraCommonIoMathMLParser_initWithBoolean_(YES);
  }
  IOSObjectArray *ret = nil;
  @try {
    NSString *ggb = [((OrgGeogebraCommonIoMathMLParser *) nil_chk(self->mathmlParserGGB_)) parseWithNSString:cmd withBoolean:NO withBoolean:YES];
    ComGoogleGwtRegexpSharedRegExp *assignment = ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"^(\\w+) \\(x\\)=(.*)$");
    ComGoogleGwtRegexpSharedMatchResult *lhs = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(assignment)) execWithNSString:ggb];
    if (lhs != nil) {
      ggb = JreStrcat("$$$", [lhs getGroupWithInt:1], @"(x)=", [lhs getGroupWithInt:2]);
    }
    OrgGeogebraCommonUtilDebugLog_debugWithNSString_(cmd);
    OrgGeogebraCommonUtilDebugLog_debugWithNSString_(ggb);
    ret = [self processAlgebraCommandNoExceptionHandlingWithNSString:ggb withBoolean:storeUndo withBoolean:NO withBoolean:throwMyError withBoolean:NO withOrgGeogebraCommonUtilAsyncOperation:callback0];
  }
  @catch (JavaLangThrowable *t) {
    OrgGeogebraCommonUtilDebugLog_warnWithNSString_([((JavaLangThrowable *) nil_chk(t)) getMessage]);
  }
  if (ret != nil && ret->size_ != 0) {
    return ret;
  }
  if (self->mathmlParserLaTeX_ == nil) {
    self->mathmlParserLaTeX_ = new_OrgGeogebraCommonIoMathMLParser_initWithBoolean_(NO);
  }
  NSString *latex = [((OrgGeogebraCommonIoMathMLParser *) nil_chk(self->mathmlParserLaTeX_)) parseWithNSString:cmd withBoolean:NO withBoolean:NO];
  OrgGeogebraCommonKernelGeosGeoText *arg = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self->cons_, latex);
  OrgGeogebraCommonKernelAlgosAlgoLaTeX *texAlgo = new_OrgGeogebraCommonKernelAlgosAlgoLaTeX_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self->cons_, nil, arg);
  return [IOSObjectArray newArrayWithObjects:(id[]){ [texAlgo getOutputWithInt:0] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
}

jboolean OrgGeogebraCommonKernelCommandsAlgebraProcessor_compatibleTypesWithOrgGeogebraCommonPluginGeoClassEnum_withOrgGeogebraCommonPluginGeoClassEnum_(OrgGeogebraCommonPluginGeoClassEnum *type, OrgGeogebraCommonPluginGeoClassEnum *type2) {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_initialize();
  if ([((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk(type2)) isEqual:type]) return YES;
  if ([type2 isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()] && [((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk(type)) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_ANGLE()]) return YES;
  if ([((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk(type)) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()] && [type2 isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_ANGLE()]) return YES;
  return NO;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticFunction *fun) {
  if (![((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) initFunction]) {
    return [self processParametricFunctionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[fun getExpression] withOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withOrgGeogebraCommonKernelArithmeticFunctionVariable:[fun getFunctionVariable] withNSString:[fun getLabel]];
  }
  NSString *label = [fun getLabel];
  OrgGeogebraCommonKernelGeosGeoFunction *f;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray *vars = [fun getGeoElementVariables];
  jboolean isIndependent = YES;
  for (jint i = 0; vars != nil && i < vars->size_; i++) {
    if ([((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(OrgGeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_())) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(vars), i)]) {
      isIndependent = NO;
    }
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = [fun getExpression];
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND()] || [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([en getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND_INTERVAL()]) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [en getLeft];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *enLeft = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      OrgGeogebraCommonKernelArithmeticExpressionNode *enRight = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      jint leftDir = OrgGeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithOrgGeogebraCommonKernelArithmeticExpressionNode_(enLeft);
      jint rightDir = OrgGeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithOrgGeogebraCommonKernelArithmeticExpressionNode_(enRight);
      if (leftDir * rightDir < 0) {
        if (isIndependent) {
          f = new_OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun);
        }
        else {
          f = OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentIntervalWithNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, label, fun);
        }
        (void) IOSObjectArray_Set(ret, 0, f);
        return ret;
      }
    }
  }
  else if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([en getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_FUNCTION()]) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [en getLeft];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] && [left isGeoElement] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] && [right isNumberValue] && ![right isConstant] && !isIndependent) {
      f = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, label, [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(left, @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))) getGeoFunction]), [OrgGeogebraCommonKernelGeosGeoFunction class]);
      (void) IOSObjectArray_Set(ret, 0, f);
      return ret;
    }
  }
  if (isIndependent) {
    f = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun);
  }
  else {
    f = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) DependentFunctionWithNSString:label withOrgGeogebraCommonKernelArithmeticFunction:fun];
  }
  (void) IOSObjectArray_Set(ret, 0, f);
  return ret;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelCommandsAlgebraProcessor_exprWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  if (ev == nil) {
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0);
  }
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) wrap];
}

jboolean OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *cx, IOSObjectArray *coefX, OrgGeogebraCommonKernelArithmeticExpressionNode *scale_, OrgGeogebraCommonKernelGeosGeoElement *var) {
  jboolean childrenOK = YES;
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(cx)) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_PLUS()) {
    childrenOK = (OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, [cx getLeftTree], coefX, scale_, var) && OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, [cx getRightTree], coefX, scale_, var));
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_MINUS()) {
    childrenOK = (OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, [cx getLeftTree], coefX, scale_, var) && OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, [cx getRightTree], coefX, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(scale_)) multiplyWithDouble:-1], var));
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()) {
    if ([[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) isConstant]) {
      return OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, [cx getRightTree], coefX, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(scale_)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap]], var);
    }
    else if ([[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) isConstant]) {
      return OrgGeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValueArray_withOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoElement_(self, [cx getLeftTree], coefX, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(scale_)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) unwrap]], var);
    }
    return NO;
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_SIN()) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] != var) {
      return NO;
    }
    OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, scale_);
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_COS()) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] != var) {
      return NO;
    }
    OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 2, scale_);
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_SINH()) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] != var) {
      return NO;
    }
    OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 3, scale_);
  }
  else if ([cx getOperation] == OrgGeogebraCommonPluginOperationEnum_get_COSH()) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] != var) {
      return NO;
    }
    OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 4, scale_);
  }
  else if ([cx isLeaf]) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:var]) {
      return NO;
    }
    OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 0, [cx multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:scale_]);
  }
  else {
    return NO;
  }
  return childrenOK && ((IOSObjectArray_Get(nil_chk(coefX), 1) == nil && IOSObjectArray_Get(coefX, 2) == nil) || (IOSObjectArray_Get(coefX, 3) == nil && IOSObjectArray_Get(coefX, 4) == nil));
}

void OrgGeogebraCommonKernelCommandsAlgebraProcessor_addWithOrgGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, IOSObjectArray *coefX, jint i, OrgGeogebraCommonKernelArithmeticExpressionNode *scale_) {
  if (IOSObjectArray_Get(nil_chk(coefX), i) == nil) {
    (void) IOSObjectArray_Set(coefX, i, scale_);
  }
  else {
    (void) IOSObjectArray_Set(coefX, i, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(scale_)) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, i)]);
  }
}

jint OrgGeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticExpressionNode *enLeft) {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_initialize();
  jint dir = 0;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enLeft)) getLeft];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [enLeft getRight];
  OrgGeogebraCommonPluginOperationEnum *op = [enLeft getOperation];
  if (([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL()])) {
    if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isNumberValue] && [right isConstant]) dir = -1;
    else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isNumberValue] && [left isConstant]) dir = +1;
  }
  else if (([op isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()])) {
    if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isNumberValue] && [right isConstant]) dir = +1;
    else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isNumberValue] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isConstant]) dir = -1;
  }
  return dir;
}

OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentIntervalWithNSString_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticFunction *fun) {
  OrgGeogebraCommonKernelAlgosAlgoDependentInterval *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentInterval_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun);
  OrgGeogebraCommonKernelGeosGeoFunction *f = [algo getFunction];
  return f;
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *origGeoNode) {
  OrgGeogebraCommonKernelAlgosAlgoDependentGeoCopy *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentGeoCopy_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self->cons_, label, origGeoNode);
  return [algo getGeo];
}

OrgGeogebraCommonKernelGeosGeoFunctionNVar *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentFunctionNVarWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticFunctionNVar *fun) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self->cons_, label, fun);
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *f = [algo getFunction];
  return f;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  if ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLHS])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getRHS])) containsFreeFunctionVariableWithNSString:nil] && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getRHS])) evaluatesToNumberWithBoolean:YES]) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getRHS])) setLabelWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getLHS])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    @try {
      return [self processValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:[equ getRHS]];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
  return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_withBoolean_(self, equ, [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) isFileLoading]);
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithOrgGeogebraCommonKernelArithmeticEquation_withBoolean_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticEquation *equ, jboolean allowConstant) {
  [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) initEquation];
  [self checkNoTermsInZWithOrgGeogebraCommonKernelArithmeticEquation:equ];
  if ([equ isFunctionDependent]) {
    return [self processImplicitPolyWithOrgGeogebraCommonKernelArithmeticEquation:equ];
  }
  jint deg = [equ mayBePolynomial] && ![equ hasVariableDegree] ? [equ degree] : -1;
  {
    NSString *lhsStr;
    IOSObjectArray *errors;
    switch (deg) {
      case 1:
      return [self processLineWithOrgGeogebraCommonKernelArithmeticEquation:equ];
      case 2:
      return [self processConicWithOrgGeogebraCommonKernelArithmeticEquation:equ];
      case 0:
      if (!allowConstant) {
        @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization], @"InvalidEquation");
      }
      default:
      lhsStr = [((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getLHS])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()])) trim];
      if ([((NSString *) nil_chk(lhsStr)) isEqual:@"y"] && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getRHS])) containsFreeFunctionVariableWithNSString:@"y"]) {
        OrgGeogebraCommonKernelArithmeticFunction *fun = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_([equ getRHS]);
        [fun setLabelWithNSString:[equ getLabel]];
        return OrgGeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithOrgGeogebraCommonKernelArithmeticFunction_(self, fun);
      }
      if ([equ mayBePolynomial]) {
        return [self processImplicitPolyWithOrgGeogebraCommonKernelArithmeticEquation:equ];
      }
      else if ([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) hasWithOrgGeogebraCommonMainFeatureEnum:OrgGeogebraCommonMainFeatureEnum_get_IMPLICIT_CURVES()]) {
        return [self processImplicitCurveWithOrgGeogebraCommonKernelArithmeticEquation:equ];
      }
      errors = [IOSObjectArray newArrayWithObjects:(id[]){ @"InvalidEquation" } count:1 type:NSString_class_()];
      @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(self->loc_, errors);
    }
  }
}

OrgGeogebraCommonKernelGeosGeoLine *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentLineWithNSString_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  OrgGeogebraCommonKernelAlgosAlgoDependentLine *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticEquation_(self->cons_, label, equ);
  OrgGeogebraCommonKernelGeosGeoLine *line = [algo getLine];
  return line;
}

OrgGeogebraCommonKernelGeosGeoConic *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentConicWithNSString_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  OrgGeogebraCommonKernelAlgosAlgoDependentConic *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticEquation_(self->cons_, label, equ);
  OrgGeogebraCommonKernelGeosGeoConic *conic = [algo getConic];
  return conic;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processNumberWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, id<OrgGeogebraCommonKernelArithmeticExpressionValue> evaluate) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  jboolean isIndependent = ![n inspectWithOrgGeogebraCommonKernelArithmeticInspecting:OrgGeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_()];
  OrgGeogebraCommonKernelArithmeticMyDouble *val = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evaluate, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
  jboolean isAngle = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(val)) isAngle];
  jdouble value = [val getDouble];
  if (isIndependent) {
    if (isAngle) (void) IOSObjectArray_Set(ret, 0, new_OrgGeogebraCommonKernelGeosGeoAngle_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withOrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_(self->cons_, label, value, OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED()));
    else (void) IOSObjectArray_Set(ret, 0, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(self->cons_, label, value));
  }
  else {
    (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentNumberWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, label, n, isAngle));
  }
  if ([n isForcedFunction]) {
    (void) IOSObjectArray_Set(ret, 0, [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast((IOSObjectArray_Get(ret, 0)), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]);
  }
  return ret;
}

OrgGeogebraCommonKernelGeosGeoNumeric *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentNumberWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root, jboolean isAngle) {
  OrgGeogebraCommonKernelAlgosAlgoDependentNumber *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentNumber_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, label, root, isAngle);
  OrgGeogebraCommonKernelGeosGeoNumeric *number = [algo getNumber];
  return number;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processListWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, OrgGeogebraCommonKernelArithmeticMyList *evalList) {
  NSString *label = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  if (![n hasOperations] || [n isConstant]) {
    JavaUtilArrayList *geoElements = new_JavaUtilArrayList_init();
    jboolean isIndependent = YES;
    jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
    jint size = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(evalList)) size];
    for (jint i = 0; i < size; i++) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([evalList getListElementWithInt:i], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      IOSObjectArray *results = [self processExpressionNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode:en];
      OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk(results), 0);
      [geoElements addWithId:geo];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] || ![geo isIndependent]) isIndependent = NO;
    }
    [self->cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
    (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) ListWithNSString:label withJavaUtilArrayList:geoElements withBoolean:isIndependent]);
  }
  else {
    (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonKernelCommandsAlgebraProcessor_ListExpressionWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, label, n));
  }
  return ret;
}

OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonKernelCommandsAlgebraProcessor_ListExpressionWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, root);
  return [algo getList];
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processTextWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, id<OrgGeogebraCommonKernelArithmeticExpressionValue> evaluate) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  jboolean isIndependent = [n isConstant];
  if (isIndependent) {
    OrgGeogebraCommonKernelArithmeticMyStringBuffer *val = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(evaluate, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) getText];
    (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonKernelCommandsAlgebraProcessor_TextWithNSString_withNSString_(self, label, [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(val)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
  }
  else (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentTextWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, label, n));
  return ret;
}

OrgGeogebraCommonKernelGeosGeoText *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentTextWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoDependentText *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, root);
  OrgGeogebraCommonKernelGeosGeoText *t = [algo getGeoText];
  return t;
}

OrgGeogebraCommonKernelGeosGeoText *OrgGeogebraCommonKernelCommandsAlgebraProcessor_TextWithNSString_withNSString_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, NSString *text) {
  OrgGeogebraCommonKernelGeosGeoText *t = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
  [t setTextStringWithNSString:text];
  [t setLabelWithNSString:label];
  return t;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processBooleanWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, id<OrgGeogebraCommonKernelArithmeticExpressionValue> evaluate) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  jboolean isIndependent = ![n inspectWithOrgGeogebraCommonKernelArithmeticInspecting:OrgGeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_()];
  if (isIndependent) {
    (void) IOSObjectArray_Set(ret, 0, new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
    [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(ret, 0), [OrgGeogebraCommonKernelGeosGeoBoolean class])))) setValueWithBoolean:[((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(evaluate, @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getBoolean]];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) setLabelWithNSString:label];
  }
  else {
    (void) IOSObjectArray_Set(ret, 0, [(new_OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, n)) getGeoBoolean]);
  }
  return ret;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processPointVectorWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *n, id<OrgGeogebraCommonKernelArithmeticExpressionValue> evaluate) {
  NSString *label = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  OrgGeogebraCommonKernelGeosGeoVec2D *p = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(evaluate, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
  jboolean polar = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(p)) getMode] == OrgGeogebraCommonKernelKernel_COORD_POLAR;
  jboolean complex = [p getMode] == OrgGeogebraCommonKernelKernel_COORD_COMPLEX;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoVec3D_class_()];
  jboolean isIndependent = ![n inspectWithOrgGeogebraCommonKernelArithmeticInspecting:OrgGeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_()];
  if (complex) {
    [n setForcePoint];
  }
  else if (label != nil) {
    if (!([n isForcedPoint] || [n isForcedVector])) {
      if (JavaLangCharacter_isLowerCaseWithChar_([label charAtWithInt:0])) [n setForceVector];
      else [n setForcePoint];
    }
  }
  jboolean isVector = [n shouldEvaluateToGeoVector];
  if (isIndependent) {
    jdouble x = [p getX];
    jdouble y = [p getY];
    if (isVector) (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) VectorWithNSString:label withDouble:x withDouble:y]);
    else (void) IOSObjectArray_Set(ret, 0, [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) PointWithNSString:label withDouble:x withDouble:y withBoolean:complex]);
  }
  else {
    if (isVector) (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentVectorWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, label, n));
    else (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentPointWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, label, n, complex));
  }
  if (polar) {
    [((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(IOSObjectArray_Get(ret, 0))) setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_POLAR];
    [((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  }
  else if (complex) {
    [((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(IOSObjectArray_Get(ret, 0))) setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_COMPLEX];
    [((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  }
  return ret;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentPointWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root, jboolean complex) {
  OrgGeogebraCommonKernelAlgosAlgoDependentPoint *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, label, root, complex);
  OrgGeogebraCommonKernelGeosGeoPoint *P = [algo getPoint];
  return P;
}

OrgGeogebraCommonKernelGeosGeoVector *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentVectorWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoDependentVector *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, root);
  OrgGeogebraCommonKernelGeosGeoVector *v = [algo getVector];
  return v;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsAlgebraProcessor_processGeoCopyWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *copyLabel, OrgGeogebraCommonKernelArithmeticExpressionNode *origGeoNode) {
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(ret, 0, OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, copyLabel, origGeoNode));
  return ret;
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *origGeoNode) {
  OrgGeogebraCommonKernelAlgosAlgoDependentGeoCopy *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentGeoCopy_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, origGeoNode);
  return [algo getGeo];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsAlgebraProcessor)

@implementation OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1

- (void)callbackWithId:(id)obj {
  IOSObjectArray *dialogResult = (IOSObjectArray *) check_class_cast(obj, [IOSObjectArray class]);
  IOSObjectArray *geos = nil;
  if ([@"0" isEqual:IOSObjectArray_Get(nil_chk(dialogResult), 0)]) {
    [this$0_ replaceUndefinedVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression:val$ve2_];
    @try {
      geos = [this$0_ processValidExpressionWithBoolean:val$storeUndo_ withBoolean:val$allowErrorDialog_ withBoolean:val$throwMyError_ withOrgGeogebraCommonKernelArithmeticValidExpression:val$ve2_];
    }
    @catch (JavaLangException *ee) {
      [((OrgGeogebraCommonMainApp *) nil_chk(this$0_->app_)) showErrorWithNSString:[((JavaLangException *) nil_chk(ee)) getMessage]];
      return;
    }
  }
  [((OrgGeogebraCommonUtilAsyncOperation *) nil_chk(val$callback0_)) callbackWithId:geos];
}

- (instancetype)initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor:(OrgGeogebraCommonKernelCommandsAlgebraProcessor *)outer$
                   withOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)capture$0
                                                            withBoolean:(jboolean)capture$1
                                                            withBoolean:(jboolean)capture$2
                                                            withBoolean:(jboolean)capture$3
                                withOrgGeogebraCommonUtilAsyncOperation:(OrgGeogebraCommonUtilAsyncOperation *)capture$4 {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_withOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor:withOrgGeogebraCommonKernelArithmeticValidExpression:withBoolean:withBoolean:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.commands.AlgebraProcessor;", NULL, NULL,  },
    { "val$ve2_", NULL, 0x1012, "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", NULL, NULL,  },
    { "val$storeUndo_", NULL, 0x1012, "Z", NULL, NULL,  },
    { "val$allowErrorDialog_", NULL, 0x1012, "Z", NULL, NULL,  },
    { "val$throwMyError_", NULL, 0x1012, "Z", NULL, NULL,  },
    { "val$callback0_", NULL, 0x1012, "Lorg.geogebra.common.util.AsyncOperation;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelCommandsAlgebraProcessor", "processAlgebraCommandNoExceptionHandlingWithNSString:withBoolean:withBoolean:withBoolean:withBoolean:withOrgGeogebraCommonUtilAsyncOperation:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1 = { 2, "", "org.geogebra.common.kernel.commands", "AlgebraProcessor", 0x8008, 2, methods, 6, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1;
}

@end

void OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_withOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1 *self, OrgGeogebraCommonKernelCommandsAlgebraProcessor *outer$, OrgGeogebraCommonKernelArithmeticValidExpression *capture$0, jboolean capture$1, jboolean capture$2, jboolean capture$3, OrgGeogebraCommonUtilAsyncOperation *capture$4) {
  self->this$0_ = outer$;
  self->val$ve2_ = capture$0;
  self->val$storeUndo_ = capture$1;
  self->val$allowErrorDialog_ = capture$2;
  self->val$throwMyError_ = capture$3;
  self->val$callback0_ = capture$4;
  (void) OrgGeogebraCommonUtilAsyncOperation_init(self);
}

OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1 *new_OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_withOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *outer$, OrgGeogebraCommonKernelArithmeticValidExpression *capture$0, jboolean capture$1, jboolean capture$2, jboolean capture$3, OrgGeogebraCommonUtilAsyncOperation *capture$4) {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1 *self = [OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1 alloc];
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_withOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withOrgGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$1)

@implementation OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()) {
    NSString *lt = [((NSString *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getLeft])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) replace:@" " withSequence:@""];
    OrgGeogebraCommonPluginOperationEnum *op = [((OrgGeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(this$0_->app_)) getParserFunctions])) getWithNSString:lt withInt:1];
    if (op != nil) {
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(this$0_->kernel_, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getRight])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self], op, nil);
    }
  }
  return ev;
}

- (instancetype)initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor:(OrgGeogebraCommonKernelCommandsAlgebraProcessor *)outer$ {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.commands.AlgebraProcessor;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelCommandsAlgebraProcessor", "tryReplacingProductsWithOrgGeogebraCommonKernelArithmeticValidExpression:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2 = { 2, "", "org.geogebra.common.kernel.commands", "AlgebraProcessor", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2;
}

@end

void OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2 *self, OrgGeogebraCommonKernelCommandsAlgebraProcessor *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2 *new_OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_(OrgGeogebraCommonKernelCommandsAlgebraProcessor *outer$) {
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2 *self = [OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2 alloc];
  OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithOrgGeogebraCommonKernelCommandsAlgebraProcessor_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsAlgebraProcessor_$2)
