//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/commands/CmdSpline.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoSpline.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/commands/CmdSpline.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonKernelCommandsCmdSpline ()

- (OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND *)SplineWithNSString:(NSString *)label
                                    withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list;

+ (jboolean)arePointWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList;

@end

__attribute__((unused)) static OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND *OrgGeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelCommandsCmdSpline *self, NSString *label, OrgGeogebraCommonKernelGeosGeoList *list);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelCommandsCmdSpline_arePointWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelGeosGeoList *geoList);

@implementation OrgGeogebraCommonKernelCommandsCmdSpline

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdSpline_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  {
    OrgGeogebraCommonKernelGeosGeoList *list;
    switch (n) {
      case 0:
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
      case 1:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList] && OrgGeogebraCommonKernelCommandsCmdSpline_arePointWithOrgGeogebraCommonKernelGeosGeoList_((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoList class]))) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, [c getLabel], (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoList class])) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 2:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList] && OrgGeogebraCommonKernelCommandsCmdSpline_arePointWithOrgGeogebraCommonKernelGeosGeoList_((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoList class]))) {
        jint degree = J2ObjCFpToInt([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:1])) evaluateDouble]);
        if (JavaLangDouble_isNaNWithDouble_(degree) || degree > [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoList class])))) size] || degree < 3) {
          @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:[c getArgumentWithInt:1]];
        }
        id<OrgGeogebraCommonKernelGeosGeoNumberValue> degreeNum = (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue));
        OrgGeogebraCommonKernelAlgosAlgoSpline *algo = [new_OrgGeogebraCommonKernelAlgosAlgoSpline_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumberValue_(cons_, [c getLabel], (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoList class]), degreeNum) autorelease];
        OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND *list = [algo getSpline];
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ list } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      default:
      list = OrgGeogebraCommonKernelCommandsCommandProcessor_wrapInListWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoElementArray_withInt_withOrgGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, ((IOSObjectArray *) nil_chk(arg))->size_, OrgGeogebraCommonPluginGeoClassEnum_get_POINT());
      if (list != nil) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, [c getLabel], list) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND *)SplineWithNSString:(NSString *)label
                                    withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list {
  return OrgGeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, label, list);
}

+ (jboolean)arePointWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  return OrgGeogebraCommonKernelCommandsCmdSpline_arePointWithOrgGeogebraCommonKernelGeosGeoList_(geoList);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdSpline", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "SplineWithNSString:withOrgGeogebraCommonKernelGeosGeoList:", "Spline", "Lorg.geogebra.common.kernel.kernelND.GeoCurveCartesianND;", 0x2, NULL, NULL },
    { "arePointWithOrgGeogebraCommonKernelGeosGeoList:", "arePoint", "Z", 0xa, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdSpline = { 2, "CmdSpline", "org.geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdSpline;
}

@end

void OrgGeogebraCommonKernelCommandsCmdSpline_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdSpline *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdSpline *new_OrgGeogebraCommonKernelCommandsCmdSpline_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdSpline *self = [OrgGeogebraCommonKernelCommandsCmdSpline alloc];
  OrgGeogebraCommonKernelCommandsCmdSpline_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND *OrgGeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelCommandsCmdSpline *self, NSString *label, OrgGeogebraCommonKernelGeosGeoList *list) {
  OrgGeogebraCommonKernelAlgosAlgoSpline *algo = [new_OrgGeogebraCommonKernelAlgosAlgoSpline_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self->cons_, label, list, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, 3) autorelease]) autorelease];
  return [algo getSpline];
}

jboolean OrgGeogebraCommonKernelCommandsCmdSpline_arePointWithOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelCommandsCmdSpline_initialize();
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(geoList)) size] - 1; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([geoList getWithInt:i])) isGeoPoint] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([geoList getWithInt:i])) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:[geoList getWithInt:i + 1]]) {
      return NO;
    }
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdSpline)
