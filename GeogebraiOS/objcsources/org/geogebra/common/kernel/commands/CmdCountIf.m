//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/commands/CmdCountIf.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoCountIf.h"
#include "org/geogebra/common/kernel/algos/AlgoCountIf3.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/commands/CmdCountIf.h"
#include "org/geogebra/common/kernel/commands/CmdKeepIf.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

@implementation OrgGeogebraCommonKernelCommandsCmdCountIf

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdCountIf_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)getResult2WithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)c
                                        withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)booleanFun
                                    withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  OrgGeogebraCommonKernelAlgosAlgoCountIf *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCountIf_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoList_(cons_, [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(c)) getLabel], booleanFun, ((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk(args), 1), [OrgGeogebraCommonKernelGeosGeoList class]))) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getResult] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)getResult3WithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)c
                                         withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)arg
                                    withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)vars
                                       withOrgGeogebraCommonKernelGeosGeoListArray:(IOSObjectArray *)over {
  OrgGeogebraCommonKernelAlgosAlgoCountIf3 *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCountIf3_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(cons_, [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(c)) getLabel], arg, IOSObjectArray_Get(nil_chk(vars), 0), IOSObjectArray_Get(nil_chk(over), 0)) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getResult] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdCountIf", NULL, 0x1, NULL, NULL },
    { "getResult2WithOrgGeogebraCommonKernelArithmeticValidExpression:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoElementArray:", "getResult2", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getResult3WithOrgGeogebraCommonKernelArithmeticValidExpression:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoElementArray:withOrgGeogebraCommonKernelGeosGeoListArray:", "getResult3", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdCountIf = { 2, "CmdCountIf", "org.geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdCountIf;
}

@end

void OrgGeogebraCommonKernelCommandsCmdCountIf_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdCountIf *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdKeepIf_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdCountIf *new_OrgGeogebraCommonKernelCommandsCmdCountIf_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdCountIf *self = [OrgGeogebraCommonKernelCommandsCmdCountIf alloc];
  OrgGeogebraCommonKernelCommandsCmdCountIf_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdCountIf)
